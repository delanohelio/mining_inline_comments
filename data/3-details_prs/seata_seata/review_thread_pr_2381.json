{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NTE1NzIx", "number": 2381, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMzoxMzoxN1rODmiEqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTo1Nzo1MVrODvfMOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzMwNzI4OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/io/seata/xa/XAModeTest2.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMzoxMzoxN1rOF0ALCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMzoxMzoxN1rOF0ALCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3MzA5Ng==", "bodyText": "Unable to connect to 127.0.0.1 database, CI occurred a large number of error logs. Please use mock or disable, and remove all printf logs.", "url": "https://github.com/seata/seata/pull/2381#discussion_r390073096", "createdAt": "2020-03-10T03:13:17Z", "author": {"login": "slievrly"}, "path": "test/src/test/java/io/seata/xa/XAModeTest2.java", "diffHunk": "@@ -0,0 +1,600 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.xa;\n+\n+import com.alibaba.druid.pool.DruidDataSource;\n+import com.alibaba.druid.pool.xa.DruidXADataSource;\n+import com.alibaba.druid.util.JdbcUtils;\n+import com.mysql.jdbc.jdbc2.optional.MysqlXADataSource;\n+import io.seata.core.context.RootContext;\n+import io.seata.core.exception.TransactionException;\n+import io.seata.core.model.BranchStatus;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.Resource;\n+import io.seata.rm.DefaultResourceManager;\n+import io.seata.rm.datasource.xa.AbstractDataSourceProxyXA;\n+import io.seata.rm.datasource.xa.DataSourceProxyXA;\n+import io.seata.rm.datasource.xa.DataSourceProxyXANative;\n+import io.seata.rm.datasource.xa.ResourceManagerXA;\n+import io.seata.rm.datasource.xa.XAXid;\n+import io.seata.rm.datasource.xa.XAXidBuilder;\n+import io.seata.spring.annotation.GlobalTransactionScanner;\n+import io.seata.tm.api.GlobalTransaction;\n+import io.seata.tm.api.GlobalTransactionContext;\n+import oracle.jdbc.xa.client.OracleXADataSource;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.postgresql.xa.PGXADataSource;\n+\n+import javax.sql.DataSource;\n+import javax.sql.XAConnection;\n+import javax.sql.XADataSource;\n+import javax.transaction.xa.XAException;\n+import javax.transaction.xa.XAResource;\n+import javax.transaction.xa.Xid;\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+public class XAModeTest2 {\n+\n+    private static final int testRecordId = 888;\n+    private static final String testRecordName = \"xxx\";\n+    private static final long testTid = 1582688600006L;\n+    private static final String mockXid = \"127.0.0.1:8091:\" + testTid;\n+    private static final long mockBranchId = testTid + 1;\n+\n+    private static final String pg_jdbcUrl = \"jdbc:postgresql://127.0.0.1:5432/postgres\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db7fc6b5a74f826e9018a14ff96345400f49f6c9"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDM0MDkzOnYy", "diffSide": "RIGHT", "path": "rm-datasource/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNTo0NDo0M1rOGBzsoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzo1OToxM1rOGDNupg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0ODc2OQ==", "bodyText": "runtime", "url": "https://github.com/seata/seata/pull/2381#discussion_r404548769", "createdAt": "2020-04-07T05:44:43Z", "author": {"login": "slievrly"}, "path": "rm-datasource/pom.xml", "diffHunk": "@@ -109,5 +104,16 @@\n             <scope>provided</scope>\n             <optional>true</optional>\n         </dependency>\n+        <dependency>\n+            <groupId>com.alibaba</groupId>\n+            <artifactId>druid</artifactId>\n+            <scope>provided</scope>\n+            <optional>true</optional>\n+        </dependency>\n+        <dependency>\n+            <groupId>mysql</groupId>\n+            <artifactId>mysql-connector-java</artifactId>\n+            <scope>test</scope>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyMzg0Ng==", "bodyText": "Just depended when testing NOT runtime.", "url": "https://github.com/seata/seata/pull/2381#discussion_r406023846", "createdAt": "2020-04-09T07:59:13Z", "author": {"login": "sharajava"}, "path": "rm-datasource/pom.xml", "diffHunk": "@@ -109,5 +104,16 @@\n             <scope>provided</scope>\n             <optional>true</optional>\n         </dependency>\n+        <dependency>\n+            <groupId>com.alibaba</groupId>\n+            <artifactId>druid</artifactId>\n+            <scope>provided</scope>\n+            <optional>true</optional>\n+        </dependency>\n+        <dependency>\n+            <groupId>mysql</groupId>\n+            <artifactId>mysql-connector-java</artifactId>\n+            <scope>test</scope>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0ODc2OQ=="}, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDM0MzcxOnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNTo0NjowOVrOGBzubA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwOToxMDo1MVrOGCmJCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0OTIyOA==", "bodyText": "ConcurrentMap", "url": "https://github.com/seata/seata/pull/2381#discussion_r404549228", "createdAt": "2020-04-07T05:46:09Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm;\n+\n+import io.seata.common.exception.ShouldNeverHappenException;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.Resource;\n+import io.seata.rm.datasource.xa.Keepable;\n+import io.seata.rm.datasource.xa.Keeper;\n+\n+import javax.sql.DataSource;\n+import java.io.PrintWriter;\n+import java.sql.Driver;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Base class of those DataSources working as Seata Resource.\n+ *\n+ * @author sharajava\n+ */\n+public abstract class BaseDataSourceResource<T extends Keepable> implements DataSource, Resource, Keeper<T> {\n+\n+    protected DataSource dataSource;\n+\n+    protected String resourceId;\n+\n+    protected String resourceGroupId;\n+\n+    protected BranchType branchType;\n+\n+    protected String dbType;\n+\n+    protected Driver driver;\n+\n+    private ConcurrentHashMap<String, T> keeper = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM3NTI0MA==", "bodyText": "As a private member variable, declaring an interface instead here seems not necessary.", "url": "https://github.com/seata/seata/pull/2381#discussion_r405375240", "createdAt": "2020-04-08T09:10:51Z", "author": {"login": "sharajava"}, "path": "rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm;\n+\n+import io.seata.common.exception.ShouldNeverHappenException;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.Resource;\n+import io.seata.rm.datasource.xa.Keepable;\n+import io.seata.rm.datasource.xa.Keeper;\n+\n+import javax.sql.DataSource;\n+import java.io.PrintWriter;\n+import java.sql.Driver;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Base class of those DataSources working as Seata Resource.\n+ *\n+ * @author sharajava\n+ */\n+public abstract class BaseDataSourceResource<T extends Keepable> implements DataSource, Resource, Keeper<T> {\n+\n+    protected DataSource dataSource;\n+\n+    protected String resourceId;\n+\n+    protected String resourceGroupId;\n+\n+    protected BranchType branchType;\n+\n+    protected String dbType;\n+\n+    protected Driver driver;\n+\n+    private ConcurrentHashMap<String, T> keeper = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0OTIyOA=="}, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDM0ODA1OnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNTo0ODoyMlrOGBzxAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODo0NDo0N1rOGClGAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0OTg4OQ==", "bodyText": "\uff1f", "url": "https://github.com/seata/seata/pull/2381#discussion_r404549889", "createdAt": "2020-04-07T05:48:22Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm;\n+\n+import io.seata.common.exception.ShouldNeverHappenException;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.Resource;\n+import io.seata.rm.datasource.xa.Keepable;\n+import io.seata.rm.datasource.xa.Keeper;\n+\n+import javax.sql.DataSource;\n+import java.io.PrintWriter;\n+import java.sql.Driver;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Base class of those DataSources working as Seata Resource.\n+ *\n+ * @author sharajava\n+ */\n+public abstract class BaseDataSourceResource<T extends Keepable> implements DataSource, Resource, Keeper<T> {\n+\n+    protected DataSource dataSource;\n+\n+    protected String resourceId;\n+\n+    protected String resourceGroupId;\n+\n+    protected BranchType branchType;\n+\n+    protected String dbType;\n+\n+    protected Driver driver;\n+\n+    private ConcurrentHashMap<String, T> keeper = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public String getResourceId() {\n+        return resourceId;\n+    }\n+\n+    public void setResourceId(String resourceId) {\n+        this.resourceId = resourceId;\n+    }\n+\n+    @Override\n+    public String getResourceGroupId() {\n+        return resourceGroupId;\n+    }\n+\n+    public void setResourceGroupId(String resourceGroupId) {\n+        this.resourceGroupId = resourceGroupId;\n+    }\n+\n+    @Override\n+    public BranchType getBranchType() {\n+        return branchType;\n+    }\n+\n+    public void setBranchType(BranchType branchType) {\n+        this.branchType = branchType;\n+    }\n+\n+    public String getDbType() {\n+        return dbType;\n+    }\n+\n+    public void setDbType(String dbType) {\n+        this.dbType = dbType;\n+    }\n+\n+    public Driver getDriver() {\n+        return driver;\n+    }\n+\n+    public void setDriver(Driver driver) {\n+        this.driver = driver;\n+    }\n+\n+\n+    @Override\n+    public <T> T unwrap(Class<T> iface) throws SQLException {\n+        if (iface == null) {\n+            return null;\n+        }\n+\n+        if (iface.isInstance(this)) {\n+            return (T) this;\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isWrapperFor(Class<?> iface) throws SQLException {\n+        return iface != null && iface.isInstance(this);\n+\n+    }\n+\n+    protected void dataSourceCheck() {\n+        if (dataSource == null) {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n+\n+    @Override\n+    public PrintWriter getLogWriter() throws SQLException {\n+        dataSourceCheck();\n+        return dataSource.getLogWriter();\n+    }\n+\n+    @Override\n+    public void setLogWriter(PrintWriter out) throws SQLException {\n+        dataSourceCheck();\n+        if (dataSource == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1ODA4Mw==", "bodyText": "Oh, useless code. Just removed.", "url": "https://github.com/seata/seata/pull/2381#discussion_r405358083", "createdAt": "2020-04-08T08:44:47Z", "author": {"login": "sharajava"}, "path": "rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm;\n+\n+import io.seata.common.exception.ShouldNeverHappenException;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.Resource;\n+import io.seata.rm.datasource.xa.Keepable;\n+import io.seata.rm.datasource.xa.Keeper;\n+\n+import javax.sql.DataSource;\n+import java.io.PrintWriter;\n+import java.sql.Driver;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Base class of those DataSources working as Seata Resource.\n+ *\n+ * @author sharajava\n+ */\n+public abstract class BaseDataSourceResource<T extends Keepable> implements DataSource, Resource, Keeper<T> {\n+\n+    protected DataSource dataSource;\n+\n+    protected String resourceId;\n+\n+    protected String resourceGroupId;\n+\n+    protected BranchType branchType;\n+\n+    protected String dbType;\n+\n+    protected Driver driver;\n+\n+    private ConcurrentHashMap<String, T> keeper = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public String getResourceId() {\n+        return resourceId;\n+    }\n+\n+    public void setResourceId(String resourceId) {\n+        this.resourceId = resourceId;\n+    }\n+\n+    @Override\n+    public String getResourceGroupId() {\n+        return resourceGroupId;\n+    }\n+\n+    public void setResourceGroupId(String resourceGroupId) {\n+        this.resourceGroupId = resourceGroupId;\n+    }\n+\n+    @Override\n+    public BranchType getBranchType() {\n+        return branchType;\n+    }\n+\n+    public void setBranchType(BranchType branchType) {\n+        this.branchType = branchType;\n+    }\n+\n+    public String getDbType() {\n+        return dbType;\n+    }\n+\n+    public void setDbType(String dbType) {\n+        this.dbType = dbType;\n+    }\n+\n+    public Driver getDriver() {\n+        return driver;\n+    }\n+\n+    public void setDriver(Driver driver) {\n+        this.driver = driver;\n+    }\n+\n+\n+    @Override\n+    public <T> T unwrap(Class<T> iface) throws SQLException {\n+        if (iface == null) {\n+            return null;\n+        }\n+\n+        if (iface.isInstance(this)) {\n+            return (T) this;\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isWrapperFor(Class<?> iface) throws SQLException {\n+        return iface != null && iface.isInstance(this);\n+\n+    }\n+\n+    protected void dataSourceCheck() {\n+        if (dataSource == null) {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n+\n+    @Override\n+    public PrintWriter getLogWriter() throws SQLException {\n+        dataSourceCheck();\n+        return dataSource.getLogWriter();\n+    }\n+\n+    @Override\n+    public void setLogWriter(PrintWriter out) throws SQLException {\n+        dataSourceCheck();\n+        if (dataSource == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0OTg4OQ=="}, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDM1MDA5OnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNTo0OToxN1rOGBzyNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODo0NjozNFrOGClKfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU1MDE5Nw==", "bodyText": "UnsupportedOperationException(\"dataSource is null\")", "url": "https://github.com/seata/seata/pull/2381#discussion_r404550197", "createdAt": "2020-04-07T05:49:17Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm;\n+\n+import io.seata.common.exception.ShouldNeverHappenException;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.Resource;\n+import io.seata.rm.datasource.xa.Keepable;\n+import io.seata.rm.datasource.xa.Keeper;\n+\n+import javax.sql.DataSource;\n+import java.io.PrintWriter;\n+import java.sql.Driver;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Base class of those DataSources working as Seata Resource.\n+ *\n+ * @author sharajava\n+ */\n+public abstract class BaseDataSourceResource<T extends Keepable> implements DataSource, Resource, Keeper<T> {\n+\n+    protected DataSource dataSource;\n+\n+    protected String resourceId;\n+\n+    protected String resourceGroupId;\n+\n+    protected BranchType branchType;\n+\n+    protected String dbType;\n+\n+    protected Driver driver;\n+\n+    private ConcurrentHashMap<String, T> keeper = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public String getResourceId() {\n+        return resourceId;\n+    }\n+\n+    public void setResourceId(String resourceId) {\n+        this.resourceId = resourceId;\n+    }\n+\n+    @Override\n+    public String getResourceGroupId() {\n+        return resourceGroupId;\n+    }\n+\n+    public void setResourceGroupId(String resourceGroupId) {\n+        this.resourceGroupId = resourceGroupId;\n+    }\n+\n+    @Override\n+    public BranchType getBranchType() {\n+        return branchType;\n+    }\n+\n+    public void setBranchType(BranchType branchType) {\n+        this.branchType = branchType;\n+    }\n+\n+    public String getDbType() {\n+        return dbType;\n+    }\n+\n+    public void setDbType(String dbType) {\n+        this.dbType = dbType;\n+    }\n+\n+    public Driver getDriver() {\n+        return driver;\n+    }\n+\n+    public void setDriver(Driver driver) {\n+        this.driver = driver;\n+    }\n+\n+\n+    @Override\n+    public <T> T unwrap(Class<T> iface) throws SQLException {\n+        if (iface == null) {\n+            return null;\n+        }\n+\n+        if (iface.isInstance(this)) {\n+            return (T) this;\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isWrapperFor(Class<?> iface) throws SQLException {\n+        return iface != null && iface.isInstance(this);\n+\n+    }\n+\n+    protected void dataSourceCheck() {\n+        if (dataSource == null) {\n+            throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1OTIzMQ==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/2381#discussion_r405359231", "createdAt": "2020-04-08T08:46:34Z", "author": {"login": "sharajava"}, "path": "rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm;\n+\n+import io.seata.common.exception.ShouldNeverHappenException;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.Resource;\n+import io.seata.rm.datasource.xa.Keepable;\n+import io.seata.rm.datasource.xa.Keeper;\n+\n+import javax.sql.DataSource;\n+import java.io.PrintWriter;\n+import java.sql.Driver;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Base class of those DataSources working as Seata Resource.\n+ *\n+ * @author sharajava\n+ */\n+public abstract class BaseDataSourceResource<T extends Keepable> implements DataSource, Resource, Keeper<T> {\n+\n+    protected DataSource dataSource;\n+\n+    protected String resourceId;\n+\n+    protected String resourceGroupId;\n+\n+    protected BranchType branchType;\n+\n+    protected String dbType;\n+\n+    protected Driver driver;\n+\n+    private ConcurrentHashMap<String, T> keeper = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public String getResourceId() {\n+        return resourceId;\n+    }\n+\n+    public void setResourceId(String resourceId) {\n+        this.resourceId = resourceId;\n+    }\n+\n+    @Override\n+    public String getResourceGroupId() {\n+        return resourceGroupId;\n+    }\n+\n+    public void setResourceGroupId(String resourceGroupId) {\n+        this.resourceGroupId = resourceGroupId;\n+    }\n+\n+    @Override\n+    public BranchType getBranchType() {\n+        return branchType;\n+    }\n+\n+    public void setBranchType(BranchType branchType) {\n+        this.branchType = branchType;\n+    }\n+\n+    public String getDbType() {\n+        return dbType;\n+    }\n+\n+    public void setDbType(String dbType) {\n+        this.dbType = dbType;\n+    }\n+\n+    public Driver getDriver() {\n+        return driver;\n+    }\n+\n+    public void setDriver(Driver driver) {\n+        this.driver = driver;\n+    }\n+\n+\n+    @Override\n+    public <T> T unwrap(Class<T> iface) throws SQLException {\n+        if (iface == null) {\n+            return null;\n+        }\n+\n+        if (iface.isInstance(this)) {\n+            return (T) this;\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isWrapperFor(Class<?> iface) throws SQLException {\n+        return iface != null && iface.isInstance(this);\n+\n+    }\n+\n+    protected void dataSourceCheck() {\n+        if (dataSource == null) {\n+            throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU1MDE5Nw=="}, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDM1NDM5OnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNTo1MTozMFrOGBz0-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODo0NzoxMFrOGClMBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU1MDkwNA==", "bodyText": "remove, the value of ConcurrentMap can't be null", "url": "https://github.com/seata/seata/pull/2381#discussion_r404550904", "createdAt": "2020-04-07T05:51:30Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm;\n+\n+import io.seata.common.exception.ShouldNeverHappenException;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.Resource;\n+import io.seata.rm.datasource.xa.Keepable;\n+import io.seata.rm.datasource.xa.Keeper;\n+\n+import javax.sql.DataSource;\n+import java.io.PrintWriter;\n+import java.sql.Driver;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Base class of those DataSources working as Seata Resource.\n+ *\n+ * @author sharajava\n+ */\n+public abstract class BaseDataSourceResource<T extends Keepable> implements DataSource, Resource, Keeper<T> {\n+\n+    protected DataSource dataSource;\n+\n+    protected String resourceId;\n+\n+    protected String resourceGroupId;\n+\n+    protected BranchType branchType;\n+\n+    protected String dbType;\n+\n+    protected Driver driver;\n+\n+    private ConcurrentHashMap<String, T> keeper = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public String getResourceId() {\n+        return resourceId;\n+    }\n+\n+    public void setResourceId(String resourceId) {\n+        this.resourceId = resourceId;\n+    }\n+\n+    @Override\n+    public String getResourceGroupId() {\n+        return resourceGroupId;\n+    }\n+\n+    public void setResourceGroupId(String resourceGroupId) {\n+        this.resourceGroupId = resourceGroupId;\n+    }\n+\n+    @Override\n+    public BranchType getBranchType() {\n+        return branchType;\n+    }\n+\n+    public void setBranchType(BranchType branchType) {\n+        this.branchType = branchType;\n+    }\n+\n+    public String getDbType() {\n+        return dbType;\n+    }\n+\n+    public void setDbType(String dbType) {\n+        this.dbType = dbType;\n+    }\n+\n+    public Driver getDriver() {\n+        return driver;\n+    }\n+\n+    public void setDriver(Driver driver) {\n+        this.driver = driver;\n+    }\n+\n+\n+    @Override\n+    public <T> T unwrap(Class<T> iface) throws SQLException {\n+        if (iface == null) {\n+            return null;\n+        }\n+\n+        if (iface.isInstance(this)) {\n+            return (T) this;\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isWrapperFor(Class<?> iface) throws SQLException {\n+        return iface != null && iface.isInstance(this);\n+\n+    }\n+\n+    protected void dataSourceCheck() {\n+        if (dataSource == null) {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n+\n+    @Override\n+    public PrintWriter getLogWriter() throws SQLException {\n+        dataSourceCheck();\n+        return dataSource.getLogWriter();\n+    }\n+\n+    @Override\n+    public void setLogWriter(PrintWriter out) throws SQLException {\n+        dataSourceCheck();\n+        if (dataSource == null) {\n+\n+        }\n+        dataSource.setLogWriter(out);\n+    }\n+\n+    @Override\n+    public void setLoginTimeout(int seconds) throws SQLException {\n+        dataSourceCheck();\n+        dataSource.setLoginTimeout(seconds);\n+    }\n+\n+    @Override\n+    public int getLoginTimeout() throws SQLException {\n+        dataSourceCheck();\n+        return dataSource.getLoginTimeout();\n+    }\n+\n+    @Override\n+    public Logger getParentLogger() throws SQLFeatureNotSupportedException {\n+        dataSourceCheck();\n+        return dataSource.getParentLogger();\n+    }\n+\n+    @Override\n+    public T keep(String key, T value) {\n+        if (value.isKept()) {\n+            T x = keeper.get(key);\n+            if (x != value) {\n+                throw new ShouldNeverHappenException(\"something wrong with keeper, keeping[\" + x +\n+                    \"] but[\" + value + \"] is also kept with the same key[\" + key + \"]\");\n+            }\n+            return value;\n+        }\n+        T x = keeper.put(key, value);\n+        if (x != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1OTYyMg==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/2381#discussion_r405359622", "createdAt": "2020-04-08T08:47:10Z", "author": {"login": "sharajava"}, "path": "rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm;\n+\n+import io.seata.common.exception.ShouldNeverHappenException;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.Resource;\n+import io.seata.rm.datasource.xa.Keepable;\n+import io.seata.rm.datasource.xa.Keeper;\n+\n+import javax.sql.DataSource;\n+import java.io.PrintWriter;\n+import java.sql.Driver;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Base class of those DataSources working as Seata Resource.\n+ *\n+ * @author sharajava\n+ */\n+public abstract class BaseDataSourceResource<T extends Keepable> implements DataSource, Resource, Keeper<T> {\n+\n+    protected DataSource dataSource;\n+\n+    protected String resourceId;\n+\n+    protected String resourceGroupId;\n+\n+    protected BranchType branchType;\n+\n+    protected String dbType;\n+\n+    protected Driver driver;\n+\n+    private ConcurrentHashMap<String, T> keeper = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public String getResourceId() {\n+        return resourceId;\n+    }\n+\n+    public void setResourceId(String resourceId) {\n+        this.resourceId = resourceId;\n+    }\n+\n+    @Override\n+    public String getResourceGroupId() {\n+        return resourceGroupId;\n+    }\n+\n+    public void setResourceGroupId(String resourceGroupId) {\n+        this.resourceGroupId = resourceGroupId;\n+    }\n+\n+    @Override\n+    public BranchType getBranchType() {\n+        return branchType;\n+    }\n+\n+    public void setBranchType(BranchType branchType) {\n+        this.branchType = branchType;\n+    }\n+\n+    public String getDbType() {\n+        return dbType;\n+    }\n+\n+    public void setDbType(String dbType) {\n+        this.dbType = dbType;\n+    }\n+\n+    public Driver getDriver() {\n+        return driver;\n+    }\n+\n+    public void setDriver(Driver driver) {\n+        this.driver = driver;\n+    }\n+\n+\n+    @Override\n+    public <T> T unwrap(Class<T> iface) throws SQLException {\n+        if (iface == null) {\n+            return null;\n+        }\n+\n+        if (iface.isInstance(this)) {\n+            return (T) this;\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isWrapperFor(Class<?> iface) throws SQLException {\n+        return iface != null && iface.isInstance(this);\n+\n+    }\n+\n+    protected void dataSourceCheck() {\n+        if (dataSource == null) {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n+\n+    @Override\n+    public PrintWriter getLogWriter() throws SQLException {\n+        dataSourceCheck();\n+        return dataSource.getLogWriter();\n+    }\n+\n+    @Override\n+    public void setLogWriter(PrintWriter out) throws SQLException {\n+        dataSourceCheck();\n+        if (dataSource == null) {\n+\n+        }\n+        dataSource.setLogWriter(out);\n+    }\n+\n+    @Override\n+    public void setLoginTimeout(int seconds) throws SQLException {\n+        dataSourceCheck();\n+        dataSource.setLoginTimeout(seconds);\n+    }\n+\n+    @Override\n+    public int getLoginTimeout() throws SQLException {\n+        dataSourceCheck();\n+        return dataSource.getLoginTimeout();\n+    }\n+\n+    @Override\n+    public Logger getParentLogger() throws SQLFeatureNotSupportedException {\n+        dataSourceCheck();\n+        return dataSource.getParentLogger();\n+    }\n+\n+    @Override\n+    public T keep(String key, T value) {\n+        if (value.isKept()) {\n+            T x = keeper.get(key);\n+            if (x != value) {\n+                throw new ShouldNeverHappenException(\"something wrong with keeper, keeping[\" + x +\n+                    \"] but[\" + value + \"] is also kept with the same key[\" + key + \"]\");\n+            }\n+            return value;\n+        }\n+        T x = keeper.put(key, value);\n+        if (x != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU1MDkwNA=="}, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDQwMDUxOnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/util/JdbcUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjoxMToyMlrOGB0P5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMDo0NDowMFrOGCph3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU1Nzc5OA==", "bodyText": "Move to outer layer finally", "url": "https://github.com/seata/seata/pull/2381#discussion_r404557798", "createdAt": "2020-04-07T06:11:22Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/util/JdbcUtils.java", "diffHunk": "@@ -45,4 +49,89 @@ static DbTypeParser getDbTypeParser() {\n         }\n         return dbTypeParser;\n     }\n+\n+    private JdbcUtils() {\n+    }\n+\n+    public static String getDbType(String jdbcUrl) {\n+        return getDbTypeParser().parseFromJdbcUrl(jdbcUrl).toLowerCase();\n+    }\n+\n+    /**\n+     * Init a DataSourceResource instance with DataSource instance and given resource group ID.\n+     *\n+     * @param dataSourceResource the DataSourceResource instance\n+     * @param dataSource the DataSource instance\n+     * @param resourceGroupId the given resource group ID\n+     */\n+    public static void initDataSourceResource(BaseDataSourceResource dataSourceResource, DataSource dataSource, String resourceGroupId) {\n+        dataSourceResource.setResourceGroupId(resourceGroupId);\n+        try (Connection connection = dataSource.getConnection()) {\n+            String jdbcUrl = connection.getMetaData().getURL();\n+            dataSourceResource.setResourceId(buildResourceId(jdbcUrl));\n+            String driverClassName = com.alibaba.druid.util.JdbcUtils.getDriverClassName(jdbcUrl);\n+            dataSourceResource.setDriver(loadDriver(driverClassName));\n+            dataSourceResource.setDbType(com.alibaba.druid.util.JdbcUtils.getDbType(jdbcUrl, driverClassName));\n+        } catch (SQLException e) {\n+            throw new IllegalStateException(\"can not init DataSourceResource with \" + dataSource, e);\n+        }\n+        DefaultResourceManager.get().registerResource(dataSourceResource);\n+    }\n+\n+    public static void initXADataSourceResource(BaseDataSourceResource dataSourceResource, XADataSource dataSource, String resourceGroupId) {\n+        dataSourceResource.setResourceGroupId(resourceGroupId);\n+        XAConnection xaConnection = null;\n+        try {\n+            xaConnection = dataSource.getXAConnection();\n+            try (Connection connection = xaConnection.getConnection()) {\n+                String jdbcUrl = connection.getMetaData().getURL();\n+                dataSourceResource.setResourceId(buildResourceId(jdbcUrl));\n+                String driverClassName = com.alibaba.druid.util.JdbcUtils.getDriverClassName(jdbcUrl);\n+                dataSourceResource.setDriver(loadDriver(driverClassName));\n+                dataSourceResource.setDbType(com.alibaba.druid.util.JdbcUtils.getDbType(jdbcUrl, driverClassName));\n+            } finally {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzMDc0OA==", "bodyText": "Just refactor it in another way.", "url": "https://github.com/seata/seata/pull/2381#discussion_r405430748", "createdAt": "2020-04-08T10:44:00Z", "author": {"login": "sharajava"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/util/JdbcUtils.java", "diffHunk": "@@ -45,4 +49,89 @@ static DbTypeParser getDbTypeParser() {\n         }\n         return dbTypeParser;\n     }\n+\n+    private JdbcUtils() {\n+    }\n+\n+    public static String getDbType(String jdbcUrl) {\n+        return getDbTypeParser().parseFromJdbcUrl(jdbcUrl).toLowerCase();\n+    }\n+\n+    /**\n+     * Init a DataSourceResource instance with DataSource instance and given resource group ID.\n+     *\n+     * @param dataSourceResource the DataSourceResource instance\n+     * @param dataSource the DataSource instance\n+     * @param resourceGroupId the given resource group ID\n+     */\n+    public static void initDataSourceResource(BaseDataSourceResource dataSourceResource, DataSource dataSource, String resourceGroupId) {\n+        dataSourceResource.setResourceGroupId(resourceGroupId);\n+        try (Connection connection = dataSource.getConnection()) {\n+            String jdbcUrl = connection.getMetaData().getURL();\n+            dataSourceResource.setResourceId(buildResourceId(jdbcUrl));\n+            String driverClassName = com.alibaba.druid.util.JdbcUtils.getDriverClassName(jdbcUrl);\n+            dataSourceResource.setDriver(loadDriver(driverClassName));\n+            dataSourceResource.setDbType(com.alibaba.druid.util.JdbcUtils.getDbType(jdbcUrl, driverClassName));\n+        } catch (SQLException e) {\n+            throw new IllegalStateException(\"can not init DataSourceResource with \" + dataSource, e);\n+        }\n+        DefaultResourceManager.get().registerResource(dataSourceResource);\n+    }\n+\n+    public static void initXADataSourceResource(BaseDataSourceResource dataSourceResource, XADataSource dataSource, String resourceGroupId) {\n+        dataSourceResource.setResourceGroupId(resourceGroupId);\n+        XAConnection xaConnection = null;\n+        try {\n+            xaConnection = dataSource.getXAConnection();\n+            try (Connection connection = xaConnection.getConnection()) {\n+                String jdbcUrl = connection.getMetaData().getURL();\n+                dataSourceResource.setResourceId(buildResourceId(jdbcUrl));\n+                String driverClassName = com.alibaba.druid.util.JdbcUtils.getDriverClassName(jdbcUrl);\n+                dataSourceResource.setDriver(loadDriver(driverClassName));\n+                dataSourceResource.setDbType(com.alibaba.druid.util.JdbcUtils.getDbType(jdbcUrl, driverClassName));\n+            } finally {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU1Nzc5OA=="}, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDQyMDc0OnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/util/JdbcUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjoxOToyNlrOGB0brg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjoyMzoxOFrOGB0hrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU2MDgxNA==", "bodyText": "always not null", "url": "https://github.com/seata/seata/pull/2381#discussion_r404560814", "createdAt": "2020-04-07T06:19:26Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/util/JdbcUtils.java", "diffHunk": "@@ -45,4 +49,89 @@ static DbTypeParser getDbTypeParser() {\n         }\n         return dbTypeParser;\n     }\n+\n+    private JdbcUtils() {\n+    }\n+\n+    public static String getDbType(String jdbcUrl) {\n+        return getDbTypeParser().parseFromJdbcUrl(jdbcUrl).toLowerCase();\n+    }\n+\n+    /**\n+     * Init a DataSourceResource instance with DataSource instance and given resource group ID.\n+     *\n+     * @param dataSourceResource the DataSourceResource instance\n+     * @param dataSource the DataSource instance\n+     * @param resourceGroupId the given resource group ID\n+     */\n+    public static void initDataSourceResource(BaseDataSourceResource dataSourceResource, DataSource dataSource, String resourceGroupId) {\n+        dataSourceResource.setResourceGroupId(resourceGroupId);\n+        try (Connection connection = dataSource.getConnection()) {\n+            String jdbcUrl = connection.getMetaData().getURL();\n+            dataSourceResource.setResourceId(buildResourceId(jdbcUrl));\n+            String driverClassName = com.alibaba.druid.util.JdbcUtils.getDriverClassName(jdbcUrl);\n+            dataSourceResource.setDriver(loadDriver(driverClassName));\n+            dataSourceResource.setDbType(com.alibaba.druid.util.JdbcUtils.getDbType(jdbcUrl, driverClassName));\n+        } catch (SQLException e) {\n+            throw new IllegalStateException(\"can not init DataSourceResource with \" + dataSource, e);\n+        }\n+        DefaultResourceManager.get().registerResource(dataSourceResource);\n+    }\n+\n+    public static void initXADataSourceResource(BaseDataSourceResource dataSourceResource, XADataSource dataSource, String resourceGroupId) {\n+        dataSourceResource.setResourceGroupId(resourceGroupId);\n+        XAConnection xaConnection = null;\n+        try {\n+            xaConnection = dataSource.getXAConnection();\n+            try (Connection connection = xaConnection.getConnection()) {\n+                String jdbcUrl = connection.getMetaData().getURL();\n+                dataSourceResource.setResourceId(buildResourceId(jdbcUrl));\n+                String driverClassName = com.alibaba.druid.util.JdbcUtils.getDriverClassName(jdbcUrl);\n+                dataSourceResource.setDriver(loadDriver(driverClassName));\n+                dataSourceResource.setDbType(com.alibaba.druid.util.JdbcUtils.getDbType(jdbcUrl, driverClassName));\n+            } finally {\n+                if (xaConnection != null) {\n+                    xaConnection.close();\n+                }\n+            }\n+        } catch (SQLException e) {\n+            throw new IllegalStateException(\"can not get XAConnection from DataSourceResource with \" + dataSource, e);\n+        }\n+        DefaultResourceManager.get().registerResource(dataSourceResource);\n+    }\n+\n+    public static String buildResourceId(String jdbcUrl) {\n+        if (jdbcUrl.contains(\"?\")) {\n+            return jdbcUrl.substring(0, jdbcUrl.indexOf('?'));\n+        }\n+        return jdbcUrl;\n+    }\n+\n+    public static Driver loadDriver(String driverClassName) throws SQLException {\n+        Class clazz = null;\n+        try {\n+            ClassLoader contextLoader = Thread.currentThread().getContextClassLoader();\n+            if (contextLoader != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU2MjM1MA==", "bodyText": "Class.forName actually calls ClassLoader.load, I think it is not necessary here.", "url": "https://github.com/seata/seata/pull/2381#discussion_r404562350", "createdAt": "2020-04-07T06:23:18Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/util/JdbcUtils.java", "diffHunk": "@@ -45,4 +49,89 @@ static DbTypeParser getDbTypeParser() {\n         }\n         return dbTypeParser;\n     }\n+\n+    private JdbcUtils() {\n+    }\n+\n+    public static String getDbType(String jdbcUrl) {\n+        return getDbTypeParser().parseFromJdbcUrl(jdbcUrl).toLowerCase();\n+    }\n+\n+    /**\n+     * Init a DataSourceResource instance with DataSource instance and given resource group ID.\n+     *\n+     * @param dataSourceResource the DataSourceResource instance\n+     * @param dataSource the DataSource instance\n+     * @param resourceGroupId the given resource group ID\n+     */\n+    public static void initDataSourceResource(BaseDataSourceResource dataSourceResource, DataSource dataSource, String resourceGroupId) {\n+        dataSourceResource.setResourceGroupId(resourceGroupId);\n+        try (Connection connection = dataSource.getConnection()) {\n+            String jdbcUrl = connection.getMetaData().getURL();\n+            dataSourceResource.setResourceId(buildResourceId(jdbcUrl));\n+            String driverClassName = com.alibaba.druid.util.JdbcUtils.getDriverClassName(jdbcUrl);\n+            dataSourceResource.setDriver(loadDriver(driverClassName));\n+            dataSourceResource.setDbType(com.alibaba.druid.util.JdbcUtils.getDbType(jdbcUrl, driverClassName));\n+        } catch (SQLException e) {\n+            throw new IllegalStateException(\"can not init DataSourceResource with \" + dataSource, e);\n+        }\n+        DefaultResourceManager.get().registerResource(dataSourceResource);\n+    }\n+\n+    public static void initXADataSourceResource(BaseDataSourceResource dataSourceResource, XADataSource dataSource, String resourceGroupId) {\n+        dataSourceResource.setResourceGroupId(resourceGroupId);\n+        XAConnection xaConnection = null;\n+        try {\n+            xaConnection = dataSource.getXAConnection();\n+            try (Connection connection = xaConnection.getConnection()) {\n+                String jdbcUrl = connection.getMetaData().getURL();\n+                dataSourceResource.setResourceId(buildResourceId(jdbcUrl));\n+                String driverClassName = com.alibaba.druid.util.JdbcUtils.getDriverClassName(jdbcUrl);\n+                dataSourceResource.setDriver(loadDriver(driverClassName));\n+                dataSourceResource.setDbType(com.alibaba.druid.util.JdbcUtils.getDbType(jdbcUrl, driverClassName));\n+            } finally {\n+                if (xaConnection != null) {\n+                    xaConnection.close();\n+                }\n+            }\n+        } catch (SQLException e) {\n+            throw new IllegalStateException(\"can not get XAConnection from DataSourceResource with \" + dataSource, e);\n+        }\n+        DefaultResourceManager.get().registerResource(dataSourceResource);\n+    }\n+\n+    public static String buildResourceId(String jdbcUrl) {\n+        if (jdbcUrl.contains(\"?\")) {\n+            return jdbcUrl.substring(0, jdbcUrl.indexOf('?'));\n+        }\n+        return jdbcUrl;\n+    }\n+\n+    public static Driver loadDriver(String driverClassName) throws SQLException {\n+        Class clazz = null;\n+        try {\n+            ClassLoader contextLoader = Thread.currentThread().getContextClassLoader();\n+            if (contextLoader != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU2MDgxNA=="}, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDQ0ODIwOnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/util/XAUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjoyOTo0MVrOGB0sMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMDozNDo0NFrOGCpOuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU2NTA0Mg==", "bodyText": "throw exception?", "url": "https://github.com/seata/seata/pull/2381#discussion_r404565042", "createdAt": "2020-04-07T06:29:41Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/util/XAUtils.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.util;\n+\n+import com.alibaba.druid.util.JdbcUtils;\n+import com.alibaba.druid.util.MySqlUtils;\n+import com.alibaba.druid.util.PGUtils;\n+import io.seata.rm.BaseDataSourceResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.sql.XAConnection;\n+import javax.transaction.xa.XAException;\n+import java.lang.reflect.Constructor;\n+import java.sql.Connection;\n+import java.sql.Driver;\n+import java.sql.SQLException;\n+\n+public class XAUtils {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XAUtils.class);\n+\n+    public static String getDbType(String jdbcUrl, String driverClassName) {\n+        return JdbcUtils.getDbType(jdbcUrl, driverClassName);\n+    }\n+\n+    public static XAConnection createXAConnection(Connection physicalConn, BaseDataSourceResource dataSourceResource) throws SQLException {\n+        return createXAConnection(physicalConn, dataSourceResource.getDriver(), dataSourceResource.getDbType());\n+    }\n+\n+    public static XAConnection createXAConnection(Connection physicalConn, Driver driver, String dbType) throws SQLException {\n+        if (JdbcUtils.ORACLE.equals(dbType)) {\n+            try {\n+                // https://github.com/alibaba/druid/issues/3707\n+                // before Druid issue fixed, just make ORACLE XA connection in my way.\n+                // return OracleUtils.OracleXAConnection(physicalConn);\n+                String physicalConnClassName = physicalConn.getClass().getName();\n+                if (\"oracle.jdbc.driver.T4CConnection\".equals(physicalConnClassName)) {\n+                    return createOracleXAConnection(physicalConn, \"oracle.jdbc.driver.T4CXAConnection\");\n+                } else {\n+                    return createOracleXAConnection(physicalConn, \"oracle.jdbc.xa.client.OracleXAConnection\");\n+                }\n+            } catch (XAException xae) {\n+                LOGGER.error(\"create xaConnection error\", xae);\n+                return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQyNTg1MQ==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/2381#discussion_r405425851", "createdAt": "2020-04-08T10:34:44Z", "author": {"login": "sharajava"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/util/XAUtils.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.util;\n+\n+import com.alibaba.druid.util.JdbcUtils;\n+import com.alibaba.druid.util.MySqlUtils;\n+import com.alibaba.druid.util.PGUtils;\n+import io.seata.rm.BaseDataSourceResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.sql.XAConnection;\n+import javax.transaction.xa.XAException;\n+import java.lang.reflect.Constructor;\n+import java.sql.Connection;\n+import java.sql.Driver;\n+import java.sql.SQLException;\n+\n+public class XAUtils {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XAUtils.class);\n+\n+    public static String getDbType(String jdbcUrl, String driverClassName) {\n+        return JdbcUtils.getDbType(jdbcUrl, driverClassName);\n+    }\n+\n+    public static XAConnection createXAConnection(Connection physicalConn, BaseDataSourceResource dataSourceResource) throws SQLException {\n+        return createXAConnection(physicalConn, dataSourceResource.getDriver(), dataSourceResource.getDbType());\n+    }\n+\n+    public static XAConnection createXAConnection(Connection physicalConn, Driver driver, String dbType) throws SQLException {\n+        if (JdbcUtils.ORACLE.equals(dbType)) {\n+            try {\n+                // https://github.com/alibaba/druid/issues/3707\n+                // before Druid issue fixed, just make ORACLE XA connection in my way.\n+                // return OracleUtils.OracleXAConnection(physicalConn);\n+                String physicalConnClassName = physicalConn.getClass().getName();\n+                if (\"oracle.jdbc.driver.T4CConnection\".equals(physicalConnClassName)) {\n+                    return createOracleXAConnection(physicalConn, \"oracle.jdbc.driver.T4CXAConnection\");\n+                } else {\n+                    return createOracleXAConnection(physicalConn, \"oracle.jdbc.xa.client.OracleXAConnection\");\n+                }\n+            } catch (XAException xae) {\n+                LOGGER.error(\"create xaConnection error\", xae);\n+                return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU2NTA0Mg=="}, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDQ2MjM2OnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/util/XAUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjozNDo0OVrOGB00pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMDozMzoyOFrOGCpMEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU2NzIwNw==", "bodyText": "constructor.setAccessible(true)", "url": "https://github.com/seata/seata/pull/2381#discussion_r404567207", "createdAt": "2020-04-07T06:34:49Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/util/XAUtils.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.util;\n+\n+import com.alibaba.druid.util.JdbcUtils;\n+import com.alibaba.druid.util.MySqlUtils;\n+import com.alibaba.druid.util.PGUtils;\n+import io.seata.rm.BaseDataSourceResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.sql.XAConnection;\n+import javax.transaction.xa.XAException;\n+import java.lang.reflect.Constructor;\n+import java.sql.Connection;\n+import java.sql.Driver;\n+import java.sql.SQLException;\n+\n+public class XAUtils {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XAUtils.class);\n+\n+    public static String getDbType(String jdbcUrl, String driverClassName) {\n+        return JdbcUtils.getDbType(jdbcUrl, driverClassName);\n+    }\n+\n+    public static XAConnection createXAConnection(Connection physicalConn, BaseDataSourceResource dataSourceResource) throws SQLException {\n+        return createXAConnection(physicalConn, dataSourceResource.getDriver(), dataSourceResource.getDbType());\n+    }\n+\n+    public static XAConnection createXAConnection(Connection physicalConn, Driver driver, String dbType) throws SQLException {\n+        if (JdbcUtils.ORACLE.equals(dbType)) {\n+            try {\n+                // https://github.com/alibaba/druid/issues/3707\n+                // before Druid issue fixed, just make ORACLE XA connection in my way.\n+                // return OracleUtils.OracleXAConnection(physicalConn);\n+                String physicalConnClassName = physicalConn.getClass().getName();\n+                if (\"oracle.jdbc.driver.T4CConnection\".equals(physicalConnClassName)) {\n+                    return createOracleXAConnection(physicalConn, \"oracle.jdbc.driver.T4CXAConnection\");\n+                } else {\n+                    return createOracleXAConnection(physicalConn, \"oracle.jdbc.xa.client.OracleXAConnection\");\n+                }\n+            } catch (XAException xae) {\n+                LOGGER.error(\"create xaConnection error\", xae);\n+                return null;\n+            }\n+        }\n+\n+        if (JdbcUtils.MYSQL.equals(dbType) || JdbcUtils.MARIADB.equals(dbType)) {\n+            return MySqlUtils.createXAConnection(driver, physicalConn);\n+        }\n+\n+        if (JdbcUtils.POSTGRESQL.equals(dbType)) {\n+            return PGUtils.createXAConnection(physicalConn);\n+        }\n+\n+        throw new SQLException(\"xa not support dbType: \" + dbType);\n+    }\n+\n+    private static XAConnection createOracleXAConnection(Connection physicalConnection, String xaConnectionClassName) throws XAException, SQLException {\n+        try {\n+            Class xaConnectionClass = Class.forName(xaConnectionClassName);\n+            Constructor<XAConnection> constructor = xaConnectionClass.getConstructor(Connection.class);\n+            return constructor.newInstance(physicalConnection);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQyNTE2OQ==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/2381#discussion_r405425169", "createdAt": "2020-04-08T10:33:28Z", "author": {"login": "sharajava"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/util/XAUtils.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.util;\n+\n+import com.alibaba.druid.util.JdbcUtils;\n+import com.alibaba.druid.util.MySqlUtils;\n+import com.alibaba.druid.util.PGUtils;\n+import io.seata.rm.BaseDataSourceResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.sql.XAConnection;\n+import javax.transaction.xa.XAException;\n+import java.lang.reflect.Constructor;\n+import java.sql.Connection;\n+import java.sql.Driver;\n+import java.sql.SQLException;\n+\n+public class XAUtils {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XAUtils.class);\n+\n+    public static String getDbType(String jdbcUrl, String driverClassName) {\n+        return JdbcUtils.getDbType(jdbcUrl, driverClassName);\n+    }\n+\n+    public static XAConnection createXAConnection(Connection physicalConn, BaseDataSourceResource dataSourceResource) throws SQLException {\n+        return createXAConnection(physicalConn, dataSourceResource.getDriver(), dataSourceResource.getDbType());\n+    }\n+\n+    public static XAConnection createXAConnection(Connection physicalConn, Driver driver, String dbType) throws SQLException {\n+        if (JdbcUtils.ORACLE.equals(dbType)) {\n+            try {\n+                // https://github.com/alibaba/druid/issues/3707\n+                // before Druid issue fixed, just make ORACLE XA connection in my way.\n+                // return OracleUtils.OracleXAConnection(physicalConn);\n+                String physicalConnClassName = physicalConn.getClass().getName();\n+                if (\"oracle.jdbc.driver.T4CConnection\".equals(physicalConnClassName)) {\n+                    return createOracleXAConnection(physicalConn, \"oracle.jdbc.driver.T4CXAConnection\");\n+                } else {\n+                    return createOracleXAConnection(physicalConn, \"oracle.jdbc.xa.client.OracleXAConnection\");\n+                }\n+            } catch (XAException xae) {\n+                LOGGER.error(\"create xaConnection error\", xae);\n+                return null;\n+            }\n+        }\n+\n+        if (JdbcUtils.MYSQL.equals(dbType) || JdbcUtils.MARIADB.equals(dbType)) {\n+            return MySqlUtils.createXAConnection(driver, physicalConn);\n+        }\n+\n+        if (JdbcUtils.POSTGRESQL.equals(dbType)) {\n+            return PGUtils.createXAConnection(physicalConn);\n+        }\n+\n+        throw new SQLException(\"xa not support dbType: \" + dbType);\n+    }\n+\n+    private static XAConnection createOracleXAConnection(Connection physicalConnection, String xaConnectionClassName) throws XAException, SQLException {\n+        try {\n+            Class xaConnectionClass = Class.forName(xaConnectionClassName);\n+            Constructor<XAConnection> constructor = xaConnectionClass.getConstructor(Connection.class);\n+            return constructor.newInstance(physicalConnection);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU2NzIwNw=="}, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDUyMTU3OnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/AbstractConnectionProxyXA.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjo1NTozNVrOGB1YQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjo1NTozNVrOGB1YQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU3NjMyMw==", "bodyText": "remove to L215", "url": "https://github.com/seata/seata/pull/2381#discussion_r404576323", "createdAt": "2020-04-07T06:55:35Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/AbstractConnectionProxyXA.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.xa;\n+\n+import io.seata.core.context.RootContext;\n+import io.seata.rm.BaseDataSourceResource;\n+\n+import javax.sql.XAConnection;\n+import javax.transaction.xa.XAResource;\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.CallableStatement;\n+import java.sql.Clob;\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.NClob;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLClientInfoException;\n+import java.sql.SQLException;\n+import java.sql.SQLWarning;\n+import java.sql.SQLXML;\n+import java.sql.Savepoint;\n+import java.sql.Statement;\n+import java.sql.Struct;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.Executor;\n+\n+/**\n+ * The type Abstract connection proxy on XA mode.\n+ *\n+ * @author sharajava\n+ */\n+public abstract class AbstractConnectionProxyXA implements Connection {\n+\n+    protected Connection originalConnection;\n+\n+    protected XAConnection xaConnection;\n+\n+    protected XAResource xaResource;\n+\n+    protected BaseDataSourceResource resource;\n+\n+    protected String xid;\n+\n+    public AbstractConnectionProxyXA(Connection originalConnection, XAConnection xaConnection, BaseDataSourceResource resource, String xid) {\n+        this.originalConnection = originalConnection;\n+        this.xaConnection = xaConnection;\n+        this.resource = resource;\n+        this.xid = xid;\n+    }\n+\n+    public XAConnection getWrappedXAConnection() {\n+        return xaConnection;\n+    }\n+\n+    public Connection getWrappedConnection() {\n+        return originalConnection;\n+    }\n+\n+    @Override\n+    public Statement createStatement() throws SQLException {\n+        Statement targetStatement = originalConnection.createStatement();\n+        return new StatementProxyXA(this, targetStatement);\n+    }\n+\n+    @Override\n+    public PreparedStatement prepareStatement(String sql) throws SQLException {\n+        PreparedStatement targetStatement = originalConnection.prepareStatement(sql);\n+        return new PreparedStatementProxyXA(this, targetStatement);\n+    }\n+\n+    @Override\n+    public CallableStatement prepareCall(String sql) throws SQLException {\n+        RootContext.assertNotInGlobalTransaction();\n+        return originalConnection.prepareCall(sql);\n+    }\n+\n+    @Override\n+    public String nativeSQL(String sql) throws SQLException {\n+        return originalConnection.nativeSQL(sql);\n+    }\n+\n+    @Override\n+    public boolean isClosed() throws SQLException {\n+        return originalConnection.isClosed();\n+    }\n+\n+    @Override\n+    public DatabaseMetaData getMetaData() throws SQLException {\n+        return originalConnection.getMetaData();\n+    }\n+\n+    @Override\n+    public void setReadOnly(boolean readOnly) throws SQLException {\n+        originalConnection.setReadOnly(readOnly);\n+\n+    }\n+\n+    @Override\n+    public boolean isReadOnly() throws SQLException {\n+        return originalConnection.isReadOnly();\n+    }\n+\n+    @Override\n+    public void setCatalog(String catalog) throws SQLException {\n+        originalConnection.setCatalog(catalog);\n+\n+    }\n+\n+    @Override\n+    public String getCatalog() throws SQLException {\n+        return originalConnection.getCatalog();\n+    }\n+\n+    @Override\n+    public void setTransactionIsolation(int level) throws SQLException {\n+        originalConnection.setTransactionIsolation(level);\n+\n+    }\n+\n+    @Override\n+    public int getTransactionIsolation() throws SQLException {\n+        return originalConnection.getTransactionIsolation();\n+    }\n+\n+    @Override\n+    public SQLWarning getWarnings() throws SQLException {\n+        return originalConnection.getWarnings();\n+    }\n+\n+    @Override\n+    public void clearWarnings() throws SQLException {\n+        originalConnection.clearWarnings();\n+\n+    }\n+\n+    @Override\n+    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDUzMzMxOnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjo1OTozMVrOGB1fZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMDozMjowOVrOGCpJfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU3ODE0OQ==", "bodyText": "hold\uff0cholder", "url": "https://github.com/seata/seata/pull/2381#discussion_r404578149", "createdAt": "2020-04-07T06:59:31Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm;\n+\n+import io.seata.common.exception.ShouldNeverHappenException;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.Resource;\n+import io.seata.rm.datasource.xa.Keepable;\n+import io.seata.rm.datasource.xa.Keeper;\n+\n+import javax.sql.DataSource;\n+import java.io.PrintWriter;\n+import java.sql.Driver;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Base class of those DataSources working as Seata Resource.\n+ *\n+ * @author sharajava\n+ */\n+public abstract class BaseDataSourceResource<T extends Keepable> implements DataSource, Resource, Keeper<T> {\n+\n+    protected DataSource dataSource;\n+\n+    protected String resourceId;\n+\n+    protected String resourceGroupId;\n+\n+    protected BranchType branchType;\n+\n+    protected String dbType;\n+\n+    protected Driver driver;\n+\n+    private ConcurrentHashMap<String, T> keeper = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public String getResourceId() {\n+        return resourceId;\n+    }\n+\n+    public void setResourceId(String resourceId) {\n+        this.resourceId = resourceId;\n+    }\n+\n+    @Override\n+    public String getResourceGroupId() {\n+        return resourceGroupId;\n+    }\n+\n+    public void setResourceGroupId(String resourceGroupId) {\n+        this.resourceGroupId = resourceGroupId;\n+    }\n+\n+    @Override\n+    public BranchType getBranchType() {\n+        return branchType;\n+    }\n+\n+    public void setBranchType(BranchType branchType) {\n+        this.branchType = branchType;\n+    }\n+\n+    public String getDbType() {\n+        return dbType;\n+    }\n+\n+    public void setDbType(String dbType) {\n+        this.dbType = dbType;\n+    }\n+\n+    public Driver getDriver() {\n+        return driver;\n+    }\n+\n+    public void setDriver(Driver driver) {\n+        this.driver = driver;\n+    }\n+\n+\n+    @Override\n+    public <T> T unwrap(Class<T> iface) throws SQLException {\n+        if (iface == null) {\n+            return null;\n+        }\n+\n+        if (iface.isInstance(this)) {\n+            return (T) this;\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isWrapperFor(Class<?> iface) throws SQLException {\n+        return iface != null && iface.isInstance(this);\n+\n+    }\n+\n+    protected void dataSourceCheck() {\n+        if (dataSource == null) {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n+\n+    @Override\n+    public PrintWriter getLogWriter() throws SQLException {\n+        dataSourceCheck();\n+        return dataSource.getLogWriter();\n+    }\n+\n+    @Override\n+    public void setLogWriter(PrintWriter out) throws SQLException {\n+        dataSourceCheck();\n+        if (dataSource == null) {\n+\n+        }\n+        dataSource.setLogWriter(out);\n+    }\n+\n+    @Override\n+    public void setLoginTimeout(int seconds) throws SQLException {\n+        dataSourceCheck();\n+        dataSource.setLoginTimeout(seconds);\n+    }\n+\n+    @Override\n+    public int getLoginTimeout() throws SQLException {\n+        dataSourceCheck();\n+        return dataSource.getLoginTimeout();\n+    }\n+\n+    @Override\n+    public Logger getParentLogger() throws SQLFeatureNotSupportedException {\n+        dataSourceCheck();\n+        return dataSource.getParentLogger();\n+    }\n+\n+    @Override\n+    public T keep(String key, T value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQyNDUwOQ==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/2381#discussion_r405424509", "createdAt": "2020-04-08T10:32:09Z", "author": {"login": "sharajava"}, "path": "rm-datasource/src/main/java/io/seata/rm/BaseDataSourceResource.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm;\n+\n+import io.seata.common.exception.ShouldNeverHappenException;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.Resource;\n+import io.seata.rm.datasource.xa.Keepable;\n+import io.seata.rm.datasource.xa.Keeper;\n+\n+import javax.sql.DataSource;\n+import java.io.PrintWriter;\n+import java.sql.Driver;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Base class of those DataSources working as Seata Resource.\n+ *\n+ * @author sharajava\n+ */\n+public abstract class BaseDataSourceResource<T extends Keepable> implements DataSource, Resource, Keeper<T> {\n+\n+    protected DataSource dataSource;\n+\n+    protected String resourceId;\n+\n+    protected String resourceGroupId;\n+\n+    protected BranchType branchType;\n+\n+    protected String dbType;\n+\n+    protected Driver driver;\n+\n+    private ConcurrentHashMap<String, T> keeper = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public String getResourceId() {\n+        return resourceId;\n+    }\n+\n+    public void setResourceId(String resourceId) {\n+        this.resourceId = resourceId;\n+    }\n+\n+    @Override\n+    public String getResourceGroupId() {\n+        return resourceGroupId;\n+    }\n+\n+    public void setResourceGroupId(String resourceGroupId) {\n+        this.resourceGroupId = resourceGroupId;\n+    }\n+\n+    @Override\n+    public BranchType getBranchType() {\n+        return branchType;\n+    }\n+\n+    public void setBranchType(BranchType branchType) {\n+        this.branchType = branchType;\n+    }\n+\n+    public String getDbType() {\n+        return dbType;\n+    }\n+\n+    public void setDbType(String dbType) {\n+        this.dbType = dbType;\n+    }\n+\n+    public Driver getDriver() {\n+        return driver;\n+    }\n+\n+    public void setDriver(Driver driver) {\n+        this.driver = driver;\n+    }\n+\n+\n+    @Override\n+    public <T> T unwrap(Class<T> iface) throws SQLException {\n+        if (iface == null) {\n+            return null;\n+        }\n+\n+        if (iface.isInstance(this)) {\n+            return (T) this;\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean isWrapperFor(Class<?> iface) throws SQLException {\n+        return iface != null && iface.isInstance(this);\n+\n+    }\n+\n+    protected void dataSourceCheck() {\n+        if (dataSource == null) {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n+\n+    @Override\n+    public PrintWriter getLogWriter() throws SQLException {\n+        dataSourceCheck();\n+        return dataSource.getLogWriter();\n+    }\n+\n+    @Override\n+    public void setLogWriter(PrintWriter out) throws SQLException {\n+        dataSourceCheck();\n+        if (dataSource == null) {\n+\n+        }\n+        dataSource.setLogWriter(out);\n+    }\n+\n+    @Override\n+    public void setLoginTimeout(int seconds) throws SQLException {\n+        dataSourceCheck();\n+        dataSource.setLoginTimeout(seconds);\n+    }\n+\n+    @Override\n+    public int getLoginTimeout() throws SQLException {\n+        dataSourceCheck();\n+        return dataSource.getLoginTimeout();\n+    }\n+\n+    @Override\n+    public Logger getParentLogger() throws SQLFeatureNotSupportedException {\n+        dataSourceCheck();\n+        return dataSource.getParentLogger();\n+    }\n+\n+    @Override\n+    public T keep(String key, T value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU3ODE0OQ=="}, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDU0MDkzOnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/AbstractDataSourceProxyXA.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzowMTo1OVrOGB1kDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMDozMzowOFrOGCpLgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU3OTM0MQ==", "bodyText": "not yet finished.", "url": "https://github.com/seata/seata/pull/2381#discussion_r404579341", "createdAt": "2020-04-07T07:01:59Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/AbstractDataSourceProxyXA.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.xa;\n+\n+import io.seata.rm.BaseDataSourceResource;\n+\n+import javax.sql.PooledConnection;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+\n+/**\n+ * Abstract DataSource proxy for XA mode.\n+ *\n+ * @author sharajava\n+ */\n+public abstract class AbstractDataSourceProxyXA extends BaseDataSourceResource<ConnectionProxyXA> {\n+\n+    protected static final String DEFAULT_RESOURCE_GROUP_ID = \"DEFAULT_XA\";\n+\n+    /**\n+     * Get a ConnetionProxyXA instance for finishing XA branch(XA commit/XA rollback)\n+     * @return ConnetionProxyXA instance\n+     * @throws SQLException exception\n+     */\n+    public ConnectionProxyXA getConnectionForXAFinish(XAXid xaXid) throws SQLException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQyNTAyNQ==", "bodyText": "Just keep it until a better name found.", "url": "https://github.com/seata/seata/pull/2381#discussion_r405425025", "createdAt": "2020-04-08T10:33:08Z", "author": {"login": "sharajava"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/AbstractDataSourceProxyXA.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.xa;\n+\n+import io.seata.rm.BaseDataSourceResource;\n+\n+import javax.sql.PooledConnection;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+\n+/**\n+ * Abstract DataSource proxy for XA mode.\n+ *\n+ * @author sharajava\n+ */\n+public abstract class AbstractDataSourceProxyXA extends BaseDataSourceResource<ConnectionProxyXA> {\n+\n+    protected static final String DEFAULT_RESOURCE_GROUP_ID = \"DEFAULT_XA\";\n+\n+    /**\n+     * Get a ConnetionProxyXA instance for finishing XA branch(XA commit/XA rollback)\n+     * @return ConnetionProxyXA instance\n+     * @throws SQLException exception\n+     */\n+    public ConnectionProxyXA getConnectionForXAFinish(XAXid xaXid) throws SQLException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU3OTM0MQ=="}, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDU2MjY0OnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/AbstractDataSourceProxyXA.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzowODo0M1rOGB1xBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwOTo1NTo1OFrOGCn38A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4MjY2MQ==", "bodyText": "just recycle()", "url": "https://github.com/seata/seata/pull/2381#discussion_r404582661", "createdAt": "2020-04-07T07:08:43Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/AbstractDataSourceProxyXA.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.xa;\n+\n+import io.seata.rm.BaseDataSourceResource;\n+\n+import javax.sql.PooledConnection;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+\n+/**\n+ * Abstract DataSource proxy for XA mode.\n+ *\n+ * @author sharajava\n+ */\n+public abstract class AbstractDataSourceProxyXA extends BaseDataSourceResource<ConnectionProxyXA> {\n+\n+    protected static final String DEFAULT_RESOURCE_GROUP_ID = \"DEFAULT_XA\";\n+\n+    /**\n+     * Get a ConnetionProxyXA instance for finishing XA branch(XA commit/XA rollback)\n+     * @return ConnetionProxyXA instance\n+     * @throws SQLException exception\n+     */\n+    public ConnectionProxyXA getConnectionForXAFinish(XAXid xaXid) throws SQLException {\n+        ConnectionProxyXA connectionProxyXA = lookup(xaXid.toString());\n+        if (connectionProxyXA != null) {\n+            return connectionProxyXA;\n+        }\n+        return (ConnectionProxyXA)getConnection();\n+    }\n+\n+    /**\n+     * Force close the physical connection kept for XA branch of given XAXid.\n+     * @param xaXid the given XAXid\n+     * @throws SQLException exception\n+     */\n+    public void forceClosePhysicalConnection(XAXid xaXid) throws SQLException {\n+        ConnectionProxyXA connectionProxyXA = lookup(xaXid.toString());\n+        if (connectionProxyXA != null) {\n+            connectionProxyXA.close();\n+            Connection physicalConn = connectionProxyXA.getWrappedConnection();\n+            if (physicalConn instanceof PooledConnection) {\n+                physicalConn = ((PooledConnection)physicalConn).getConnection();\n+            }\n+            // Force close the physical connection", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQwMzYzMg==", "bodyText": "Physical connection is wrapped in the PooledConnection.", "url": "https://github.com/seata/seata/pull/2381#discussion_r405403632", "createdAt": "2020-04-08T09:55:58Z", "author": {"login": "sharajava"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/AbstractDataSourceProxyXA.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.xa;\n+\n+import io.seata.rm.BaseDataSourceResource;\n+\n+import javax.sql.PooledConnection;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+\n+/**\n+ * Abstract DataSource proxy for XA mode.\n+ *\n+ * @author sharajava\n+ */\n+public abstract class AbstractDataSourceProxyXA extends BaseDataSourceResource<ConnectionProxyXA> {\n+\n+    protected static final String DEFAULT_RESOURCE_GROUP_ID = \"DEFAULT_XA\";\n+\n+    /**\n+     * Get a ConnetionProxyXA instance for finishing XA branch(XA commit/XA rollback)\n+     * @return ConnetionProxyXA instance\n+     * @throws SQLException exception\n+     */\n+    public ConnectionProxyXA getConnectionForXAFinish(XAXid xaXid) throws SQLException {\n+        ConnectionProxyXA connectionProxyXA = lookup(xaXid.toString());\n+        if (connectionProxyXA != null) {\n+            return connectionProxyXA;\n+        }\n+        return (ConnectionProxyXA)getConnection();\n+    }\n+\n+    /**\n+     * Force close the physical connection kept for XA branch of given XAXid.\n+     * @param xaXid the given XAXid\n+     * @throws SQLException exception\n+     */\n+    public void forceClosePhysicalConnection(XAXid xaXid) throws SQLException {\n+        ConnectionProxyXA connectionProxyXA = lookup(xaXid.toString());\n+        if (connectionProxyXA != null) {\n+            connectionProxyXA.close();\n+            Connection physicalConn = connectionProxyXA.getWrappedConnection();\n+            if (physicalConn instanceof PooledConnection) {\n+                physicalConn = ((PooledConnection)physicalConn).getConnection();\n+            }\n+            // Force close the physical connection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4MjY2MQ=="}, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDY4MzMzOnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/ConnectionProxyXA.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzo0MjoxM1rOGB27gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODo1MToyOVrOGClWmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYwMTczMA==", "bodyText": "merge Exception TransactionException | XAException e", "url": "https://github.com/seata/seata/pull/2381#discussion_r404601730", "createdAt": "2020-04-07T07:42:13Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/ConnectionProxyXA.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.xa;\n+\n+import com.alibaba.druid.util.JdbcUtils;\n+import io.seata.core.exception.TransactionException;\n+import io.seata.core.model.BranchStatus;\n+import io.seata.core.model.BranchType;\n+import io.seata.rm.BaseDataSourceResource;\n+import io.seata.rm.DefaultResourceManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.sql.XAConnection;\n+import javax.transaction.xa.XAException;\n+import javax.transaction.xa.XAResource;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+\n+/**\n+ * Connection proxy for XA mode.\n+ *\n+ * @author sharajava\n+ */\n+public class ConnectionProxyXA extends AbstractConnectionProxyXA implements Keepable {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ConnectionProxyXA.class);\n+\n+    private boolean currentAutoCommitStatus = true;\n+\n+    private XAXid xaBranchXid;\n+\n+    private boolean xaActive = false;\n+\n+    private boolean kept = false;\n+\n+    /**\n+     * Constructor of Connection Proxy for XA mode.\n+     *\n+     * @param originalConnection Normal Connection from the original DataSource.\n+     * @param xaConnection XA Connection based on physical connection of the normal Connection above.\n+     * @param resource The corresponding Resource(DataSource proxy) from which the connections was created.\n+     * @param xid Seata global transaction xid.\n+     */\n+    public ConnectionProxyXA(Connection originalConnection, XAConnection xaConnection, BaseDataSourceResource resource, String xid) {\n+        super(originalConnection, xaConnection, resource, xid);\n+    }\n+\n+    public void init() {\n+        try {\n+            this.xaResource = xaConnection.getXAResource();\n+            this.currentAutoCommitStatus = this.originalConnection.getAutoCommit();\n+            if (!currentAutoCommitStatus) {\n+                throw new IllegalStateException(\"Connection[autocommit=false] as default is NOT supported\");\n+            }\n+        } catch (SQLException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+    }\n+\n+    private void keepIfNecessary() {\n+        if (shouldBeKept()) {\n+            resource.keep(xaBranchXid.toString(), this);\n+        }\n+    }\n+\n+    private void releaseIfNecessary() {\n+        if (isKept()) {\n+            resource.release(xaBranchXid.toString(), this);\n+        }\n+    }\n+\n+    /**\n+     * XA commit\n+     * @param xid global transaction xid\n+     * @param branchId transaction branch id\n+     * @throws SQLException\n+     */\n+    public void xaCommit(String xid, long branchId, String applicationData) throws XAException {\n+        XAXid xaXid = XAXidBuilder.build(xid, branchId);\n+        xaResource.commit(xaXid, false);\n+        releaseIfNecessary();\n+\n+    }\n+\n+    /**\n+     * XA rollback\n+     * @param xid global transaction xid\n+     * @param branchId transaction branch id\n+     * @throws SQLException\n+     */\n+    public void xaRollback(String xid, long branchId, String applicationData) throws XAException {\n+        XAXid xaXid = XAXidBuilder.build(xid, branchId);\n+        xaResource.rollback(xaXid);\n+        releaseIfNecessary();\n+\n+    }\n+\n+    @Override\n+    public void setAutoCommit(boolean autoCommit) throws SQLException {\n+        if (currentAutoCommitStatus == autoCommit) {\n+            return;\n+        }\n+        if (autoCommit) {\n+            // According to JDBC spec:\n+            // If this method is called during a transaction and the\n+            // auto-commit mode is changed, the transaction is committed.\n+            if (xaActive) {\n+                commit();\n+            }\n+        } else {\n+            if (xaActive) {\n+                throw new SQLException(\"should NEVER happen: setAutoCommit from true to false while xa branch is active\");\n+            }\n+            // Start a XA branch\n+            long branchId = 0L;\n+            try {\n+                // 1. register branch to TC then get the branchId\n+                branchId = DefaultResourceManager.get().branchRegister(BranchType.XA, resource.getResourceId(), null, xid, null,\n+                    null);\n+            } catch (TransactionException te) {\n+                cleanXABranchContext();\n+                throw new SQLException(\"failed to register xa branch \" + xid + \" since \" + te.getCode() + \":\" + te.getMessage(), te);\n+            }\n+            // 2. build XA-Xid with xid and branchId\n+            this.xaBranchXid = XAXidBuilder.build(xid, branchId);\n+            try {\n+                // 3. XA Start\n+                xaResource.start(this.xaBranchXid, XAResource.TMNOFLAGS);\n+            } catch (XAException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM2MjMyOA==", "bodyText": "Prefer to show different message on different cause of SQLException.", "url": "https://github.com/seata/seata/pull/2381#discussion_r405362328", "createdAt": "2020-04-08T08:51:29Z", "author": {"login": "sharajava"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/ConnectionProxyXA.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.xa;\n+\n+import com.alibaba.druid.util.JdbcUtils;\n+import io.seata.core.exception.TransactionException;\n+import io.seata.core.model.BranchStatus;\n+import io.seata.core.model.BranchType;\n+import io.seata.rm.BaseDataSourceResource;\n+import io.seata.rm.DefaultResourceManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.sql.XAConnection;\n+import javax.transaction.xa.XAException;\n+import javax.transaction.xa.XAResource;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+\n+/**\n+ * Connection proxy for XA mode.\n+ *\n+ * @author sharajava\n+ */\n+public class ConnectionProxyXA extends AbstractConnectionProxyXA implements Keepable {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ConnectionProxyXA.class);\n+\n+    private boolean currentAutoCommitStatus = true;\n+\n+    private XAXid xaBranchXid;\n+\n+    private boolean xaActive = false;\n+\n+    private boolean kept = false;\n+\n+    /**\n+     * Constructor of Connection Proxy for XA mode.\n+     *\n+     * @param originalConnection Normal Connection from the original DataSource.\n+     * @param xaConnection XA Connection based on physical connection of the normal Connection above.\n+     * @param resource The corresponding Resource(DataSource proxy) from which the connections was created.\n+     * @param xid Seata global transaction xid.\n+     */\n+    public ConnectionProxyXA(Connection originalConnection, XAConnection xaConnection, BaseDataSourceResource resource, String xid) {\n+        super(originalConnection, xaConnection, resource, xid);\n+    }\n+\n+    public void init() {\n+        try {\n+            this.xaResource = xaConnection.getXAResource();\n+            this.currentAutoCommitStatus = this.originalConnection.getAutoCommit();\n+            if (!currentAutoCommitStatus) {\n+                throw new IllegalStateException(\"Connection[autocommit=false] as default is NOT supported\");\n+            }\n+        } catch (SQLException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+    }\n+\n+    private void keepIfNecessary() {\n+        if (shouldBeKept()) {\n+            resource.keep(xaBranchXid.toString(), this);\n+        }\n+    }\n+\n+    private void releaseIfNecessary() {\n+        if (isKept()) {\n+            resource.release(xaBranchXid.toString(), this);\n+        }\n+    }\n+\n+    /**\n+     * XA commit\n+     * @param xid global transaction xid\n+     * @param branchId transaction branch id\n+     * @throws SQLException\n+     */\n+    public void xaCommit(String xid, long branchId, String applicationData) throws XAException {\n+        XAXid xaXid = XAXidBuilder.build(xid, branchId);\n+        xaResource.commit(xaXid, false);\n+        releaseIfNecessary();\n+\n+    }\n+\n+    /**\n+     * XA rollback\n+     * @param xid global transaction xid\n+     * @param branchId transaction branch id\n+     * @throws SQLException\n+     */\n+    public void xaRollback(String xid, long branchId, String applicationData) throws XAException {\n+        XAXid xaXid = XAXidBuilder.build(xid, branchId);\n+        xaResource.rollback(xaXid);\n+        releaseIfNecessary();\n+\n+    }\n+\n+    @Override\n+    public void setAutoCommit(boolean autoCommit) throws SQLException {\n+        if (currentAutoCommitStatus == autoCommit) {\n+            return;\n+        }\n+        if (autoCommit) {\n+            // According to JDBC spec:\n+            // If this method is called during a transaction and the\n+            // auto-commit mode is changed, the transaction is committed.\n+            if (xaActive) {\n+                commit();\n+            }\n+        } else {\n+            if (xaActive) {\n+                throw new SQLException(\"should NEVER happen: setAutoCommit from true to false while xa branch is active\");\n+            }\n+            // Start a XA branch\n+            long branchId = 0L;\n+            try {\n+                // 1. register branch to TC then get the branchId\n+                branchId = DefaultResourceManager.get().branchRegister(BranchType.XA, resource.getResourceId(), null, xid, null,\n+                    null);\n+            } catch (TransactionException te) {\n+                cleanXABranchContext();\n+                throw new SQLException(\"failed to register xa branch \" + xid + \" since \" + te.getCode() + \":\" + te.getMessage(), te);\n+            }\n+            // 2. build XA-Xid with xid and branchId\n+            this.xaBranchXid = XAXidBuilder.build(xid, branchId);\n+            try {\n+                // 3. XA Start\n+                xaResource.start(this.xaBranchXid, XAResource.TMNOFLAGS);\n+            } catch (XAException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYwMTczMA=="}, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDkzMzY2OnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/ExecuteTemplateXA.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo0NzozOVrOGB5Yrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzo1ODowOVrOGDNsRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MTk2Nw==", "bodyText": "SQLException", "url": "https://github.com/seata/seata/pull/2381#discussion_r404641967", "createdAt": "2020-04-07T08:47:39Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/ExecuteTemplateXA.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.xa;\n+\n+import io.seata.rm.datasource.exec.StatementCallback;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+/**\n+ * The type Execute template.\n+ *\n+ * @author sharajava\n+ */\n+public class ExecuteTemplateXA {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExecuteTemplateXA.class);\n+\n+    public static <T, S extends Statement> T execute(AbstractConnectionProxyXA connectionProxyXA,\n+                                                     StatementCallback<T, S> statementCallback,\n+                                                     S targetStatement,\n+                                                     Object... args) throws SQLException {\n+        boolean autoCommitStatus = connectionProxyXA.getAutoCommit();\n+        if (autoCommitStatus) {\n+            // XA Start\n+            connectionProxyXA.setAutoCommit(false);\n+        }\n+        try {\n+            T res = null;\n+            try {\n+                // execute SQL\n+                res = statementCallback.execute(targetStatement, args);\n+\n+            } catch (Throwable ex) {\n+                if (autoCommitStatus) {\n+                    // XA End & Rollback\n+                    try {\n+                        connectionProxyXA.rollback();\n+                    } catch (SQLException sqle) {\n+                        // log and ignore the rollback failure.\n+                        LOGGER.warn(\n+                            \"Failed to rollback xa branch of \" + connectionProxyXA.xid +\n+                                \"(caused by SQL execution failure(\" + ex.getMessage() + \") since \" + sqle.getMessage(),\n+                            sqle);\n+                    }\n+                }\n+\n+                if (ex instanceof SQLException) {\n+                    throw ex;\n+                } else {\n+                    throw new SQLException(ex);\n+                }\n+\n+            }\n+            if (autoCommitStatus) {\n+                try {\n+                    // XA End & Prepare\n+                    connectionProxyXA.commit();\n+                } catch (Throwable ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MzU1MQ==", "bodyText": "if (!xaActive || this.xaBranchXid == null) { throw new SQLException(\"should NOT commit on an inactive session\"); }\nnot need rollback.", "url": "https://github.com/seata/seata/pull/2381#discussion_r404643551", "createdAt": "2020-04-07T08:50:09Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/ExecuteTemplateXA.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.xa;\n+\n+import io.seata.rm.datasource.exec.StatementCallback;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+/**\n+ * The type Execute template.\n+ *\n+ * @author sharajava\n+ */\n+public class ExecuteTemplateXA {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExecuteTemplateXA.class);\n+\n+    public static <T, S extends Statement> T execute(AbstractConnectionProxyXA connectionProxyXA,\n+                                                     StatementCallback<T, S> statementCallback,\n+                                                     S targetStatement,\n+                                                     Object... args) throws SQLException {\n+        boolean autoCommitStatus = connectionProxyXA.getAutoCommit();\n+        if (autoCommitStatus) {\n+            // XA Start\n+            connectionProxyXA.setAutoCommit(false);\n+        }\n+        try {\n+            T res = null;\n+            try {\n+                // execute SQL\n+                res = statementCallback.execute(targetStatement, args);\n+\n+            } catch (Throwable ex) {\n+                if (autoCommitStatus) {\n+                    // XA End & Rollback\n+                    try {\n+                        connectionProxyXA.rollback();\n+                    } catch (SQLException sqle) {\n+                        // log and ignore the rollback failure.\n+                        LOGGER.warn(\n+                            \"Failed to rollback xa branch of \" + connectionProxyXA.xid +\n+                                \"(caused by SQL execution failure(\" + ex.getMessage() + \") since \" + sqle.getMessage(),\n+                            sqle);\n+                    }\n+                }\n+\n+                if (ex instanceof SQLException) {\n+                    throw ex;\n+                } else {\n+                    throw new SQLException(ex);\n+                }\n+\n+            }\n+            if (autoCommitStatus) {\n+                try {\n+                    // XA End & Prepare\n+                    connectionProxyXA.commit();\n+                } catch (Throwable ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MTk2Nw=="}, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyMzIzOA==", "bodyText": "Cases that need NOT to rollback is marked as a  specific SQLState in the SQLException thrown by commit().", "url": "https://github.com/seata/seata/pull/2381#discussion_r406023238", "createdAt": "2020-04-09T07:58:09Z", "author": {"login": "sharajava"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/ExecuteTemplateXA.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.xa;\n+\n+import io.seata.rm.datasource.exec.StatementCallback;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+\n+/**\n+ * The type Execute template.\n+ *\n+ * @author sharajava\n+ */\n+public class ExecuteTemplateXA {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExecuteTemplateXA.class);\n+\n+    public static <T, S extends Statement> T execute(AbstractConnectionProxyXA connectionProxyXA,\n+                                                     StatementCallback<T, S> statementCallback,\n+                                                     S targetStatement,\n+                                                     Object... args) throws SQLException {\n+        boolean autoCommitStatus = connectionProxyXA.getAutoCommit();\n+        if (autoCommitStatus) {\n+            // XA Start\n+            connectionProxyXA.setAutoCommit(false);\n+        }\n+        try {\n+            T res = null;\n+            try {\n+                // execute SQL\n+                res = statementCallback.execute(targetStatement, args);\n+\n+            } catch (Throwable ex) {\n+                if (autoCommitStatus) {\n+                    // XA End & Rollback\n+                    try {\n+                        connectionProxyXA.rollback();\n+                    } catch (SQLException sqle) {\n+                        // log and ignore the rollback failure.\n+                        LOGGER.warn(\n+                            \"Failed to rollback xa branch of \" + connectionProxyXA.xid +\n+                                \"(caused by SQL execution failure(\" + ex.getMessage() + \") since \" + sqle.getMessage(),\n+                            sqle);\n+                    }\n+                }\n+\n+                if (ex instanceof SQLException) {\n+                    throw ex;\n+                } else {\n+                    throw new SQLException(ex);\n+                }\n+\n+            }\n+            if (autoCommitStatus) {\n+                try {\n+                    // XA End & Prepare\n+                    connectionProxyXA.commit();\n+                } catch (Throwable ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MTk2Nw=="}, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTEzNTIzOnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/ResourceManagerXA.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTozODo1OFrOGB7XpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODowMDozNVrOGDNxoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY3NDQ2OQ==", "bodyText": "clientA, clientB->TC      clientA branchCommit  but clientA ->TC  channel is bad and XAConn is ok, so TC send request to clientB.", "url": "https://github.com/seata/seata/pull/2381#discussion_r404674469", "createdAt": "2020-04-07T09:38:58Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/ResourceManagerXA.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.xa;\n+\n+import io.seata.core.exception.TransactionException;\n+import io.seata.core.model.BranchStatus;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.Resource;\n+import io.seata.rm.datasource.AbstractDataSourceCacheResourceManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.transaction.xa.XAException;\n+import java.sql.SQLException;\n+\n+/**\n+ * RM for XA mode.\n+ *\n+ * @author sharajava\n+ */\n+public class ResourceManagerXA extends AbstractDataSourceCacheResourceManager {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceManagerXA.class);\n+\n+    @Override\n+    public void init() {\n+        LOGGER.info(\"ResourceManagerXA init ...\");\n+\n+    }\n+\n+    @Override\n+    public BranchType getBranchType() {\n+        return BranchType.XA;\n+    }\n+\n+    @Override\n+    public BranchStatus branchCommit(BranchType branchType, String xid, long branchId, String resourceId,\n+                                     String applicationData) throws TransactionException {\n+        return finishBranch(true, branchType, xid, branchId, resourceId, applicationData);\n+    }\n+\n+    @Override\n+    public BranchStatus branchRollback(BranchType branchType, String xid, long branchId, String resourceId,\n+                                       String applicationData) throws TransactionException {\n+        return finishBranch(false, branchType, xid, branchId, resourceId, applicationData);\n+    }\n+\n+    private BranchStatus finishBranch(boolean committed, BranchType branchType, String xid, long branchId, String resourceId,\n+                                       String applicationData) throws TransactionException {\n+        XAXid xaBranchXid = XAXidBuilder.build(xid, branchId);\n+        Resource resource = dataSourceCache.get(resourceId);\n+        if (resource instanceof AbstractDataSourceProxyXA) {\n+            try (ConnectionProxyXA connectionProxyXA = ((AbstractDataSourceProxyXA)resource).getConnectionForXAFinish(xaBranchXid)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNDYwOQ==", "bodyText": "Yes, such cases should be considered in enhancement later.\nJust keep the basic logic by now.", "url": "https://github.com/seata/seata/pull/2381#discussion_r406024609", "createdAt": "2020-04-09T08:00:35Z", "author": {"login": "sharajava"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/ResourceManagerXA.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.xa;\n+\n+import io.seata.core.exception.TransactionException;\n+import io.seata.core.model.BranchStatus;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.Resource;\n+import io.seata.rm.datasource.AbstractDataSourceCacheResourceManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.transaction.xa.XAException;\n+import java.sql.SQLException;\n+\n+/**\n+ * RM for XA mode.\n+ *\n+ * @author sharajava\n+ */\n+public class ResourceManagerXA extends AbstractDataSourceCacheResourceManager {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceManagerXA.class);\n+\n+    @Override\n+    public void init() {\n+        LOGGER.info(\"ResourceManagerXA init ...\");\n+\n+    }\n+\n+    @Override\n+    public BranchType getBranchType() {\n+        return BranchType.XA;\n+    }\n+\n+    @Override\n+    public BranchStatus branchCommit(BranchType branchType, String xid, long branchId, String resourceId,\n+                                     String applicationData) throws TransactionException {\n+        return finishBranch(true, branchType, xid, branchId, resourceId, applicationData);\n+    }\n+\n+    @Override\n+    public BranchStatus branchRollback(BranchType branchType, String xid, long branchId, String resourceId,\n+                                       String applicationData) throws TransactionException {\n+        return finishBranch(false, branchType, xid, branchId, resourceId, applicationData);\n+    }\n+\n+    private BranchStatus finishBranch(boolean committed, BranchType branchType, String xid, long branchId, String resourceId,\n+                                       String applicationData) throws TransactionException {\n+        XAXid xaBranchXid = XAXidBuilder.build(xid, branchId);\n+        Resource resource = dataSourceCache.get(resourceId);\n+        if (resource instanceof AbstractDataSourceProxyXA) {\n+            try (ConnectionProxyXA connectionProxyXA = ((AbstractDataSourceProxyXA)resource).getConnectionForXAFinish(xaBranchXid)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY3NDQ2OQ=="}, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTIwNjI3OnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/ResourceManagerXA.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTo1Nzo0MlrOGB8EKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzo0MjoxMlrOGDNLNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY4NTg2Nw==", "bodyText": "throw exception will result in encode error.", "url": "https://github.com/seata/seata/pull/2381#discussion_r404685867", "createdAt": "2020-04-07T09:57:42Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/ResourceManagerXA.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.xa;\n+\n+import io.seata.core.exception.TransactionException;\n+import io.seata.core.model.BranchStatus;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.Resource;\n+import io.seata.rm.datasource.AbstractDataSourceCacheResourceManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.transaction.xa.XAException;\n+import java.sql.SQLException;\n+\n+/**\n+ * RM for XA mode.\n+ *\n+ * @author sharajava\n+ */\n+public class ResourceManagerXA extends AbstractDataSourceCacheResourceManager {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceManagerXA.class);\n+\n+    @Override\n+    public void init() {\n+        LOGGER.info(\"ResourceManagerXA init ...\");\n+\n+    }\n+\n+    @Override\n+    public BranchType getBranchType() {\n+        return BranchType.XA;\n+    }\n+\n+    @Override\n+    public BranchStatus branchCommit(BranchType branchType, String xid, long branchId, String resourceId,\n+                                     String applicationData) throws TransactionException {\n+        return finishBranch(true, branchType, xid, branchId, resourceId, applicationData);\n+    }\n+\n+    @Override\n+    public BranchStatus branchRollback(BranchType branchType, String xid, long branchId, String resourceId,\n+                                       String applicationData) throws TransactionException {\n+        return finishBranch(false, branchType, xid, branchId, resourceId, applicationData);\n+    }\n+\n+    private BranchStatus finishBranch(boolean committed, BranchType branchType, String xid, long branchId, String resourceId,\n+                                       String applicationData) throws TransactionException {\n+        XAXid xaBranchXid = XAXidBuilder.build(xid, branchId);\n+        Resource resource = dataSourceCache.get(resourceId);\n+        if (resource instanceof AbstractDataSourceProxyXA) {\n+            try (ConnectionProxyXA connectionProxyXA = ((AbstractDataSourceProxyXA)resource).getConnectionForXAFinish(xaBranchXid)) {\n+                if (committed) {\n+                    connectionProxyXA.xaCommit(xid, branchId, applicationData);\n+                    LOGGER.info(xaBranchXid + \" was committed.\");\n+                    return BranchStatus.PhaseTwo_Committed;\n+                } else {\n+                    connectionProxyXA.xaRollback(xid, branchId, applicationData);\n+                    LOGGER.info(xaBranchXid + \" was rolled back.\");\n+                    return BranchStatus.PhaseTwo_Rollbacked;\n+                }\n+            } catch (XAException xe) {\n+                throw new TransactionException(\"XA Exception \" + xe.getMessage(), xe);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxNDc3NA==", "bodyText": "Merged SQLException and XAException cases.", "url": "https://github.com/seata/seata/pull/2381#discussion_r406014774", "createdAt": "2020-04-09T07:42:12Z", "author": {"login": "sharajava"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/ResourceManagerXA.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.xa;\n+\n+import io.seata.core.exception.TransactionException;\n+import io.seata.core.model.BranchStatus;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.Resource;\n+import io.seata.rm.datasource.AbstractDataSourceCacheResourceManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.transaction.xa.XAException;\n+import java.sql.SQLException;\n+\n+/**\n+ * RM for XA mode.\n+ *\n+ * @author sharajava\n+ */\n+public class ResourceManagerXA extends AbstractDataSourceCacheResourceManager {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceManagerXA.class);\n+\n+    @Override\n+    public void init() {\n+        LOGGER.info(\"ResourceManagerXA init ...\");\n+\n+    }\n+\n+    @Override\n+    public BranchType getBranchType() {\n+        return BranchType.XA;\n+    }\n+\n+    @Override\n+    public BranchStatus branchCommit(BranchType branchType, String xid, long branchId, String resourceId,\n+                                     String applicationData) throws TransactionException {\n+        return finishBranch(true, branchType, xid, branchId, resourceId, applicationData);\n+    }\n+\n+    @Override\n+    public BranchStatus branchRollback(BranchType branchType, String xid, long branchId, String resourceId,\n+                                       String applicationData) throws TransactionException {\n+        return finishBranch(false, branchType, xid, branchId, resourceId, applicationData);\n+    }\n+\n+    private BranchStatus finishBranch(boolean committed, BranchType branchType, String xid, long branchId, String resourceId,\n+                                       String applicationData) throws TransactionException {\n+        XAXid xaBranchXid = XAXidBuilder.build(xid, branchId);\n+        Resource resource = dataSourceCache.get(resourceId);\n+        if (resource instanceof AbstractDataSourceProxyXA) {\n+            try (ConnectionProxyXA connectionProxyXA = ((AbstractDataSourceProxyXA)resource).getConnectionForXAFinish(xaBranchXid)) {\n+                if (committed) {\n+                    connectionProxyXA.xaCommit(xid, branchId, applicationData);\n+                    LOGGER.info(xaBranchXid + \" was committed.\");\n+                    return BranchStatus.PhaseTwo_Committed;\n+                } else {\n+                    connectionProxyXA.xaRollback(xid, branchId, applicationData);\n+                    LOGGER.info(xaBranchXid + \" was rolled back.\");\n+                    return BranchStatus.PhaseTwo_Rollbacked;\n+                }\n+            } catch (XAException xe) {\n+                throw new TransactionException(\"XA Exception \" + xe.getMessage(), xe);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY4NTg2Nw=="}, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTIwNjk3OnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/ResourceManagerXA.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTo1Nzo1MVrOGB8ElA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwOTowNTo1NlrOGCl75Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY4NTk3Mg==", "bodyText": "throw exception will result in encode error.", "url": "https://github.com/seata/seata/pull/2381#discussion_r404685972", "createdAt": "2020-04-07T09:57:51Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/ResourceManagerXA.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.xa;\n+\n+import io.seata.core.exception.TransactionException;\n+import io.seata.core.model.BranchStatus;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.Resource;\n+import io.seata.rm.datasource.AbstractDataSourceCacheResourceManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.transaction.xa.XAException;\n+import java.sql.SQLException;\n+\n+/**\n+ * RM for XA mode.\n+ *\n+ * @author sharajava\n+ */\n+public class ResourceManagerXA extends AbstractDataSourceCacheResourceManager {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceManagerXA.class);\n+\n+    @Override\n+    public void init() {\n+        LOGGER.info(\"ResourceManagerXA init ...\");\n+\n+    }\n+\n+    @Override\n+    public BranchType getBranchType() {\n+        return BranchType.XA;\n+    }\n+\n+    @Override\n+    public BranchStatus branchCommit(BranchType branchType, String xid, long branchId, String resourceId,\n+                                     String applicationData) throws TransactionException {\n+        return finishBranch(true, branchType, xid, branchId, resourceId, applicationData);\n+    }\n+\n+    @Override\n+    public BranchStatus branchRollback(BranchType branchType, String xid, long branchId, String resourceId,\n+                                       String applicationData) throws TransactionException {\n+        return finishBranch(false, branchType, xid, branchId, resourceId, applicationData);\n+    }\n+\n+    private BranchStatus finishBranch(boolean committed, BranchType branchType, String xid, long branchId, String resourceId,\n+                                       String applicationData) throws TransactionException {\n+        XAXid xaBranchXid = XAXidBuilder.build(xid, branchId);\n+        Resource resource = dataSourceCache.get(resourceId);\n+        if (resource instanceof AbstractDataSourceProxyXA) {\n+            try (ConnectionProxyXA connectionProxyXA = ((AbstractDataSourceProxyXA)resource).getConnectionForXAFinish(xaBranchXid)) {\n+                if (committed) {\n+                    connectionProxyXA.xaCommit(xid, branchId, applicationData);\n+                    LOGGER.info(xaBranchXid + \" was committed.\");\n+                    return BranchStatus.PhaseTwo_Committed;\n+                } else {\n+                    connectionProxyXA.xaRollback(xid, branchId, applicationData);\n+                    LOGGER.info(xaBranchXid + \" was rolled back.\");\n+                    return BranchStatus.PhaseTwo_Rollbacked;\n+                }\n+            } catch (XAException xe) {\n+                throw new TransactionException(\"XA Exception \" + xe.getMessage(), xe);\n+            } catch (SQLException sqle) {\n+                if (committed) {\n+                    LOGGER.info(xaBranchXid + \" commit failed since \" + sqle.getMessage(), sqle);\n+                    // FIXME: case of PhaseTwo_CommitFailed_Unretryable\n+                    return BranchStatus.PhaseTwo_CommitFailed_Retryable;\n+                } else {\n+                    LOGGER.info(xaBranchXid + \" rollback failed since \" + sqle.getMessage(), sqle);\n+                    // FIXME: case of PhaseTwo_RollbackFailed_Unretryable\n+                    return BranchStatus.PhaseTwo_RollbackFailed_Retryable;\n+                }\n+            }\n+        } else {\n+            throw new TransactionException(\"Unknown Resource for XA resource \" + resourceId + \" \" + resource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM3MTg3Nw==", "bodyText": "In fact, this is a case that SHOULD NEVER happen.\nJust merged XAException and  SQLException into retryable status.", "url": "https://github.com/seata/seata/pull/2381#discussion_r405371877", "createdAt": "2020-04-08T09:05:56Z", "author": {"login": "sharajava"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/xa/ResourceManagerXA.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.rm.datasource.xa;\n+\n+import io.seata.core.exception.TransactionException;\n+import io.seata.core.model.BranchStatus;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.Resource;\n+import io.seata.rm.datasource.AbstractDataSourceCacheResourceManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.transaction.xa.XAException;\n+import java.sql.SQLException;\n+\n+/**\n+ * RM for XA mode.\n+ *\n+ * @author sharajava\n+ */\n+public class ResourceManagerXA extends AbstractDataSourceCacheResourceManager {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceManagerXA.class);\n+\n+    @Override\n+    public void init() {\n+        LOGGER.info(\"ResourceManagerXA init ...\");\n+\n+    }\n+\n+    @Override\n+    public BranchType getBranchType() {\n+        return BranchType.XA;\n+    }\n+\n+    @Override\n+    public BranchStatus branchCommit(BranchType branchType, String xid, long branchId, String resourceId,\n+                                     String applicationData) throws TransactionException {\n+        return finishBranch(true, branchType, xid, branchId, resourceId, applicationData);\n+    }\n+\n+    @Override\n+    public BranchStatus branchRollback(BranchType branchType, String xid, long branchId, String resourceId,\n+                                       String applicationData) throws TransactionException {\n+        return finishBranch(false, branchType, xid, branchId, resourceId, applicationData);\n+    }\n+\n+    private BranchStatus finishBranch(boolean committed, BranchType branchType, String xid, long branchId, String resourceId,\n+                                       String applicationData) throws TransactionException {\n+        XAXid xaBranchXid = XAXidBuilder.build(xid, branchId);\n+        Resource resource = dataSourceCache.get(resourceId);\n+        if (resource instanceof AbstractDataSourceProxyXA) {\n+            try (ConnectionProxyXA connectionProxyXA = ((AbstractDataSourceProxyXA)resource).getConnectionForXAFinish(xaBranchXid)) {\n+                if (committed) {\n+                    connectionProxyXA.xaCommit(xid, branchId, applicationData);\n+                    LOGGER.info(xaBranchXid + \" was committed.\");\n+                    return BranchStatus.PhaseTwo_Committed;\n+                } else {\n+                    connectionProxyXA.xaRollback(xid, branchId, applicationData);\n+                    LOGGER.info(xaBranchXid + \" was rolled back.\");\n+                    return BranchStatus.PhaseTwo_Rollbacked;\n+                }\n+            } catch (XAException xe) {\n+                throw new TransactionException(\"XA Exception \" + xe.getMessage(), xe);\n+            } catch (SQLException sqle) {\n+                if (committed) {\n+                    LOGGER.info(xaBranchXid + \" commit failed since \" + sqle.getMessage(), sqle);\n+                    // FIXME: case of PhaseTwo_CommitFailed_Unretryable\n+                    return BranchStatus.PhaseTwo_CommitFailed_Retryable;\n+                } else {\n+                    LOGGER.info(xaBranchXid + \" rollback failed since \" + sqle.getMessage(), sqle);\n+                    // FIXME: case of PhaseTwo_RollbackFailed_Unretryable\n+                    return BranchStatus.PhaseTwo_RollbackFailed_Retryable;\n+                }\n+            }\n+        } else {\n+            throw new TransactionException(\"Unknown Resource for XA resource \" + resourceId + \" \" + resource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY4NTk3Mg=="}, "originalCommit": {"oid": "8ac9c88c46bc1d9c31a2aac41d7120d164f1fc8c"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1687, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}