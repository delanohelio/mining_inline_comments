{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwNjk0OTUx", "number": 3086, "title": "feature: support SOFAJRaft distributed consistency", "bodyText": "\u2160. Describe what this PR did\n\u8bbe\u7f6eserver.raft.cluster \u5fc5\u987b3\u4e2a\u8282\u70b9\u4ee5\u4e0a\n\u6bcf\u4e2a\u8282\u70b9\u4f8b\u5982\u8282\u70b91:ip:prot\u4e3a127.0.0.1:8091 \u90a3\u4e48raft\u7684\u8282\u70b9\u5c31\u4e3a127.0.0.1:7091  tcserver\u7684\u7aef\u53e3-1000\u5c31\u662f\u5bf9\u5e94tcserver\u7684raft\u8282\u70b9.\n\u7136\u540e\u8bbe\u7f6eserver.cluster=\"127.0.0.1:7091,127.0.0.1:7092,127.0.0.1:7093\"\nclient\u548cserver\u7aef\u4f1a\u8bfb\u53d6\u8fd9\u4e2a\u8282\u70b9,client\u7aef\u8bfb\u53d6\u540e\u53d1\u73b0\u662fraft\u96c6\u7fa4,\u90a3\u4e48\u4f1a\u4ece\u6ce8\u518c\u4e2d\u5fc3\u83b7\u53d6\u7684\u5730\u5740\u4e2d\u627e\u51faraft\u8282\u70b9\u4e2d\u7684leader,\u8fdb\u884c\u901a\u4fe1\n\u800cserver\u7aef\u53d1\u73b0\u81ea\u5df1\u662f\u96c6\u7fa4\u6a21\u5f0f,\u5e76\u4e14\u662fleader\u540e,\u4f1a\u521b\u5efatask,\u628a\u63a5\u6536\u5230\u7684\u8bf7\u6c42\u5904\u7406\u7ed3\u679c\u8fdb\u884c\u540c\u6b65\u7ed9\u5176\u5b83\u8282\u70b9,\u4fdd\u8bc1\u6570\u636e\u4e00\u81f4\u6027.\n\u5e76\u4e14server\u7aef\u7684\u96c6\u7fa4\u6a21\u5f0f\u4e0b,\u53ea\u4f1a\u7531leader\u7aef\u53d1\u8d77\u91cd\u8bd5,\u5f02\u6b65\u63d0\u4ea4\u7b49\u64cd\u4f5c,\u907f\u514d\u4e86\u591atc\u4e89\u62a2\u5904\u7406\uff0c\u5982\u679cstore.m ode\u4e0d\u6539\u4e3araft\uff0c\u5373\u53ea\u505a\u591atc\u534f\u8c03\uff0c\u4e0d\u5b58\u50a8session lock\u7b49\u6570\u636e\npr\u5df2\u652f\u6301\u52a8\u6001\u6269\u7f29\u5bb9\n\u2161. Does this pull request fix one issue?\n\nfixes #2720\n\u2162. Why don't you add test cases (unit test/integration test)?\n\u2163. Describe how to verify it\n\u2164. Special notes for reviews", "createdAt": "2020-09-06T08:57:59Z", "url": "https://github.com/seata/seata/pull/3086", "merged": true, "mergeCommit": {"oid": "8a8bcc76b35f52800291db8a0bbc1173afb6605f"}, "closed": true, "closedAt": "2021-05-17T14:11:27Z", "author": {"login": "a364176773"}, "timelineItems": {"totalCount": 143, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABeLq9XqAH2gAyNDgwNjk0OTUxOjg3MzM4Yjk3ZjMwNTY0YTdiOGI0MzE2ZjBjNWZlZWJjMDVlYjkzYzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABeXqpmjAH2gAyNDgwNjk0OTUxOmI3YTM0NGM5NGJjNTkzNWE1NjJjYjY2ODZlMDAxZmJjYjVjZmU5N2I=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "87338b97f30564a7b8b4316f0c5feebc05eb93c3", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/87338b97f30564a7b8b4316f0c5feebc05eb93c3", "committedDate": "2021-04-10T07:44:36Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3eb52f5c4db49347750a3be596410e47574dc23", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/d3eb52f5c4db49347750a3be596410e47574dc23", "committedDate": "2021-04-10T12:15:21Z", "message": "code formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5d0d1a9bd1a12e8b62eed976b1d2ad184b9a024", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/d5d0d1a9bd1a12e8b62eed976b1d2ad184b9a024", "committedDate": "2021-04-10T13:46:51Z", "message": "fix bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4db0eeb23d947f8da19b1c43da6443fc37bdd81", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/d4db0eeb23d947f8da19b1c43da6443fc37bdd81", "committedDate": "2021-04-11T09:13:02Z", "message": "Merge branch 'develop' into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18ea5467543d711f556c981cc98d46e2ce4793d8", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/18ea5467543d711f556c981cc98d46e2ce4793d8", "committedDate": "2021-04-16T16:59:52Z", "message": "fix bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67937f65ecd4de57eb137c1eb5493fe63920af54", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/67937f65ecd4de57eb137c1eb5493fe63920af54", "committedDate": "2021-05-07T14:54:30Z", "message": "\u652f\u6301raft\u6a21\u5f0f\u4e0b\u8bf7\u6c42\u91cd\u8bd5,\u5e76\u4f18\u5316findleader\u95f4\u9694,\u51cf\u5c11\u8d44\u6e90\u6d88\u8017"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34bb3620c65ea8fb5dc0c8a9eb47f70014a1e662", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/34bb3620c65ea8fb5dc0c8a9eb47f70014a1e662", "committedDate": "2021-05-07T15:16:49Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95c1c1f47a251cb3652673125b42c44a834c1067", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/95c1c1f47a251cb3652673125b42c44a834c1067", "committedDate": "2021-05-07T15:42:00Z", "message": "Merge branch 'develop' of https://github.com/seata/seata into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82dbcd2c754931dd80af70a3d50a8ccbf3b8864e", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/82dbcd2c754931dd80af70a3d50a8ccbf3b8864e", "committedDate": "2021-05-07T15:48:05Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bfaf95e93272d1377243a0ba7a28c6e4a3557e9", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/1bfaf95e93272d1377243a0ba7a28c6e4a3557e9", "committedDate": "2021-05-07T16:05:48Z", "message": "rollback code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c13b133c743550f81c7e9a7a60a6b8f4b9588c9b", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/c13b133c743550f81c7e9a7a60a6b8f4b9588c9b", "committedDate": "2021-05-08T02:40:46Z", "message": "Merge branch 'develop' into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2fa95826c1a2d8647f2e7dfac8724ff5dae4f80", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/e2fa95826c1a2d8647f2e7dfac8724ff5dae4f80", "committedDate": "2021-05-08T02:43:16Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4e40aac82f52a992f9c0cf26156f3322d187ee0", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/e4e40aac82f52a992f9c0cf26156f3322d187ee0", "committedDate": "2021-05-08T02:44:58Z", "message": "Merge branch '0904' of https://github.com/a364176773/seata into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05e6f3f7b0512d987df43c80d41879e779f67e47", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/05e6f3f7b0512d987df43c80d41879e779f67e47", "committedDate": "2021-05-08T02:50:26Z", "message": "bugfix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09b6a2b9ef6eb41d56dde3db683ab3cdcaab00ec", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/09b6a2b9ef6eb41d56dde3db683ab3cdcaab00ec", "committedDate": "2021-05-11T06:38:14Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e385a263770a0cde0941a35420c504671a35e5df", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/e385a263770a0cde0941a35420c504671a35e5df", "committedDate": "2021-05-11T07:27:16Z", "message": "Merge branch 'develop' of https://github.com/seata/seata into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17abdb762a475499703d93109573e67f21814dc4", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/17abdb762a475499703d93109573e67f21814dc4", "committedDate": "2021-05-11T07:31:40Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39abb82486cc996cdeb26b820b232062e1ed05bd", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/39abb82486cc996cdeb26b820b232062e1ed05bd", "committedDate": "2021-05-11T09:45:07Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "594f2dfaebe57ab937d32b308cc1e9ebb3b3d578", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/594f2dfaebe57ab937d32b308cc1e9ebb3b3d578", "committedDate": "2021-05-11T09:46:39Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d82e7b4bbf4a197920401e5838ac902021d22c99", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/d82e7b4bbf4a197920401e5838ac902021d22c99", "committedDate": "2021-05-11T14:07:00Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8e6f0d55959553e2dc10d1f34d57494f40a5092", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/e8e6f0d55959553e2dc10d1f34d57494f40a5092", "committedDate": "2021-05-11T16:32:08Z", "message": "test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93812152bace7df271cd353df2ec79318ebd3e3d", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/93812152bace7df271cd353df2ec79318ebd3e3d", "committedDate": "2021-05-12T02:48:27Z", "message": "bugfix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d666f526fb218dc840fe01cf30bf8eac8957769", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/8d666f526fb218dc840fe01cf30bf8eac8957769", "committedDate": "2021-05-12T02:53:15Z", "message": "Merge branch 'develop' into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5407687171bceee0350a9dc0294733c755551545", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/5407687171bceee0350a9dc0294733c755551545", "committedDate": "2021-05-12T02:55:17Z", "message": "optimize transaction status update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a908e15f96cd985b2375b6a5a40a7f41a3093b02", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/a908e15f96cd985b2375b6a5a40a7f41a3093b02", "committedDate": "2021-05-12T03:03:39Z", "message": "update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87bb7218548fa177835a87e997e9bf443ec5722b", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/87bb7218548fa177835a87e997e9bf443ec5722b", "committedDate": "2021-05-12T09:15:04Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94212189084aa2ec8b8d9029fa034a89398c0fdd", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/94212189084aa2ec8b8d9029fa034a89398c0fdd", "committedDate": "2021-05-12T13:10:08Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea06f5f90e85ef05ed373756f3a3050ea231a781", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/ea06f5f90e85ef05ed373756f3a3050ea231a781", "committedDate": "2021-05-12T13:21:16Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38d51f836ff6fb5d33df6d956d9480d6e2f3df69", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/38d51f836ff6fb5d33df6d956d9480d6e2f3df69", "committedDate": "2021-05-12T13:57:06Z", "message": "Merge branch '0512' of github.com:a364176773/seata into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc28d1dca789a77230f7c78e32f25a7910565343", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/cc28d1dca789a77230f7c78e32f25a7910565343", "committedDate": "2021-05-12T14:14:06Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56e140dd6db86a8f2402d7a6c2aec9ecbaeb35dc", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/56e140dd6db86a8f2402d7a6c2aec9ecbaeb35dc", "committedDate": "2021-05-12T14:22:26Z", "message": "fix bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "584908753fd00c59a9c5d8ebc5abb067626a7d98", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/584908753fd00c59a9c5d8ebc5abb067626a7d98", "committedDate": "2021-05-12T14:25:47Z", "message": "fix bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0285d48647fbd3cf98414d54074bd6c22d79c901", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/0285d48647fbd3cf98414d54074bd6c22d79c901", "committedDate": "2021-05-12T14:32:02Z", "message": "Merge branch '0512' of github.com:a364176773/seata into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08c2c28bfaeb0676103270bfac7ae614225453bd", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/08c2c28bfaeb0676103270bfac7ae614225453bd", "committedDate": "2021-05-12T15:22:36Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da86de30fa94aa44dc83567828ac3af9dd0f2b45", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/da86de30fa94aa44dc83567828ac3af9dd0f2b45", "committedDate": "2021-05-15T16:38:11Z", "message": "\u4ec5\u540c\u6b65rootsessionmanager,\u51cf\u5c11\u72b6\u6001\u673a\u7684\u64cd\u4f5c,\u4ee5\u63d0\u5347\u6027\u80fd"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08427cf51a1a6bbac0111f38b085bf1480316049", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/08427cf51a1a6bbac0111f38b085bf1480316049", "committedDate": "2021-05-16T05:30:51Z", "message": "Merge branch 'develop' into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dec9aafdf90bfba68cc959838707f1f36db86ecd", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/dec9aafdf90bfba68cc959838707f1f36db86ecd", "committedDate": "2021-05-16T06:31:36Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eaebe278e1ee16651269b85f6d132afad564ba9b", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/eaebe278e1ee16651269b85f6d132afad564ba9b", "committedDate": "2021-05-16T06:31:55Z", "message": "Merge branch '0904' of github.com:a364176773/seata into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7886a4e58894dea012278d9cee8e5752cf700cc", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/a7886a4e58894dea012278d9cee8e5752cf700cc", "committedDate": "2021-05-16T06:33:31Z", "message": "fix bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c2583f6b794fb3dafd9b1016fcd2ff4e07ce919", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/9c2583f6b794fb3dafd9b1016fcd2ff4e07ce919", "committedDate": "2021-05-17T13:03:43Z", "message": "update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d2aa9691709db0afab1b5f18e57fea9936896ab", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/0d2aa9691709db0afab1b5f18e57fea9936896ab", "committedDate": "2021-05-17T13:32:25Z", "message": "fix bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a076d1060624c174bf3c05969e582fbf101be02", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/9a076d1060624c174bf3c05969e582fbf101be02", "committedDate": "2021-05-17T13:57:40Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7a344c94bc5935a562cb6686e001fbcb5cfe97b", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/b7a344c94bc5935a562cb6686e001fbcb5cfe97b", "committedDate": "2021-05-17T14:10:06Z", "message": "optimize code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc5aa68cf07b2acff42b7acb14d393f7c7db613c", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/bc5aa68cf07b2acff42b7acb14d393f7c7db613c", "committedDate": "2020-09-19T15:45:31Z", "message": "optimize code"}, "afterCommit": {"oid": "175d074a0379d9a69d8c890e2969a5668ecc270e", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/175d074a0379d9a69d8c890e2969a5668ecc270e", "committedDate": "2020-09-26T15:04:40Z", "message": "supplement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d67ad6a9fd5a7fdf4bc936ff50e89d0365a0c41", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/8d67ad6a9fd5a7fdf4bc936ff50e89d0365a0c41", "committedDate": "2020-09-26T15:35:08Z", "message": "feature: support SOFAJRaft distributed consistency"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "175d074a0379d9a69d8c890e2969a5668ecc270e", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/175d074a0379d9a69d8c890e2969a5668ecc270e", "committedDate": "2020-09-26T15:04:40Z", "message": "supplement"}, "afterCommit": {"oid": "8d67ad6a9fd5a7fdf4bc936ff50e89d0365a0c41", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/8d67ad6a9fd5a7fdf4bc936ff50e89d0365a0c41", "committedDate": "2020-09-26T15:35:08Z", "message": "feature: support SOFAJRaft distributed consistency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93a952461bba5a0fe1c08ab8259aafe55bf2de36", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/93a952461bba5a0fe1c08ab8259aafe55bf2de36", "committedDate": "2020-09-26T15:37:35Z", "message": "'supplement'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09f0b54d14bc4b0290a67dd346a3e5706887698a", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/09f0b54d14bc4b0290a67dd346a3e5706887698a", "committedDate": "2020-09-26T15:44:39Z", "message": "rollback code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f351161c2f838ee0526e6f081673aa7e95bba01", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/9f351161c2f838ee0526e6f081673aa7e95bba01", "committedDate": "2020-09-26T15:46:04Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50609fc1e4946ce276315e896d6508b3059dc5d0", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/50609fc1e4946ce276315e896d6508b3059dc5d0", "committedDate": "2020-09-26T16:12:39Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "092071c547fa29c10bb50da47ce1bf3db3f3ab3a", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/092071c547fa29c10bb50da47ce1bf3db3f3ab3a", "committedDate": "2020-09-26T16:15:49Z", "message": "code rollback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e9ea1690ce6bdc3bf60ace01ad76c454633ced0", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/9e9ea1690ce6bdc3bf60ace01ad76c454633ced0", "committedDate": "2020-09-26T16:16:29Z", "message": "code rollback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8345e563416f04c94be490b3dbd9e03167f2b33c", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/8345e563416f04c94be490b3dbd9e03167f2b33c", "committedDate": "2020-09-27T02:24:27Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e9ce29d25806f06a4c607bb04dd0c01bbdbc0b2", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/0e9ce29d25806f06a4c607bb04dd0c01bbdbc0b2", "committedDate": "2020-09-27T03:37:59Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9dec75d7c3e5f3dc0fd8b1d9fec8864fc7a6d09", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/e9dec75d7c3e5f3dc0fd8b1d9fec8864fc7a6d09", "committedDate": "2020-09-27T03:48:15Z", "message": "bug fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90d3e7897eb389836637a5d129c260d0a22b7696", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/90d3e7897eb389836637a5d129c260d0a22b7696", "committedDate": "2020-09-27T10:49:12Z", "message": "bug fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "501d3b3a2b89fd3ed1671d4be1095114c528d3a6", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/501d3b3a2b89fd3ed1671d4be1095114c528d3a6", "committedDate": "2020-09-28T04:20:18Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31519fc6c916a51d9bce0ab00598d6d2465c63a8", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/31519fc6c916a51d9bce0ab00598d6d2465c63a8", "committedDate": "2020-09-28T04:30:11Z", "message": "bug fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d838817b2ba30854e72fd9a4346231ccc7e3c58", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/5d838817b2ba30854e72fd9a4346231ccc7e3c58", "committedDate": "2020-09-28T07:02:37Z", "message": "formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b49f9cf2290e0943cfa59421a8cf059a1742d12", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/1b49f9cf2290e0943cfa59421a8cf059a1742d12", "committedDate": "2020-09-28T07:18:47Z", "message": "bug fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "078bc35a6ec1e1ed24f08e695bddb190798d539c", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/078bc35a6ec1e1ed24f08e695bddb190798d539c", "committedDate": "2020-09-29T11:55:56Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "763c8ffd59b2a803fe45047d32a81ecea7e8cb6c", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/763c8ffd59b2a803fe45047d32a81ecea7e8cb6c", "committedDate": "2020-09-29T15:55:08Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "980d75bb7d99a16b31b1955cd58ee3f506473410", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/980d75bb7d99a16b31b1955cd58ee3f506473410", "committedDate": "2020-09-30T01:51:51Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d19aaf2f36ae7898277dbc19c5cfdd83e62d851", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/8d19aaf2f36ae7898277dbc19c5cfdd83e62d851", "committedDate": "2020-09-30T03:12:26Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79c6c13ff744be8db45ee3f6d99b558f449ea8a6", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/79c6c13ff744be8db45ee3f6d99b558f449ea8a6", "committedDate": "2020-09-30T03:52:06Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "402be0b983bcc594e69048e2ea7a02e17f0744e8", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/402be0b983bcc594e69048e2ea7a02e17f0744e8", "committedDate": "2020-10-01T13:23:27Z", "message": "Merge branch 'develop' into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60456dbfe54d40a423fcf13d647cc8193f848160", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/60456dbfe54d40a423fcf13d647cc8193f848160", "committedDate": "2020-10-10T08:38:22Z", "message": "Merge branch 'develop' into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61e4fa0a2fc95f204f9ef1ae8d49a178063d1892", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/61e4fa0a2fc95f204f9ef1ae8d49a178063d1892", "committedDate": "2020-10-10T10:20:26Z", "message": "Merge branch 'develop' into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45527b8388dbebd862c4466b3446e6fea3ba3a59", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/45527b8388dbebd862c4466b3446e6fea3ba3a59", "committedDate": "2020-10-10T10:39:38Z", "message": "Merge branch 'develop' into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5812b608344ae9748867f6ca9da227116243664", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/a5812b608344ae9748867f6ca9da227116243664", "committedDate": "2020-10-14T14:20:05Z", "message": "snapshot storage for the Lock Map"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31369e31904572c2d5720e0590cff1ddeb25f783", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/31369e31904572c2d5720e0590cff1ddeb25f783", "committedDate": "2020-10-15T15:15:54Z", "message": "Merge branch 'develop' into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35647f0d64e2c570438d8d1befd2b1313977c191", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/35647f0d64e2c570438d8d1befd2b1313977c191", "committedDate": "2020-10-17T11:33:40Z", "message": "Merge branch 'develop' into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd3ab59ab4cf1fb9e5e0335ce79519b0e0795afc", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/fd3ab59ab4cf1fb9e5e0335ce79519b0e0795afc", "committedDate": "2020-10-17T11:40:39Z", "message": "Merge branch 'develop' into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "287a256bd3a840feb5e24914da55b32cbcdc405a", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/287a256bd3a840feb5e24914da55b32cbcdc405a", "committedDate": "2020-10-17T12:43:47Z", "message": "Merge branch 'develop' into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f6790238e9a68b1b86d61de757a882e21ac4f1e", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/5f6790238e9a68b1b86d61de757a882e21ac4f1e", "committedDate": "2020-10-21T06:29:58Z", "message": "merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "628bb738eda08f5f6fae77a7806e7b8cd8156449", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/628bb738eda08f5f6fae77a7806e7b8cd8156449", "committedDate": "2020-10-21T14:45:04Z", "message": "Merge branch 'develop' into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c558cd0504380d7bf8086170e804871f18175a42", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/c558cd0504380d7bf8086170e804871f18175a42", "committedDate": "2020-10-22T05:48:11Z", "message": "Merge branch 'develop' into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fa1cc14c9dc7228e2b455fb025e0406d21fa843", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/2fa1cc14c9dc7228e2b455fb025e0406d21fa843", "committedDate": "2020-10-26T01:40:16Z", "message": "Merge branch 'develop' into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0314028c5d854e3fd609e23c993acb3f471d9a5c", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/0314028c5d854e3fd609e23c993acb3f471d9a5c", "committedDate": "2020-10-27T13:56:28Z", "message": "Merge branch 'develop' into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c11cffea93d9f18e992eaeb20d41f038b6b9ed62", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/c11cffea93d9f18e992eaeb20d41f038b6b9ed62", "committedDate": "2020-11-07T14:14:57Z", "message": "Merge branch 'develop' of https://github.com/seata/seata into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57b18db3343714720a197c08f6911f17109dcadd", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/57b18db3343714720a197c08f6911f17109dcadd", "committedDate": "2020-11-18T13:46:09Z", "message": "refactor the code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6eba646bd84e48ff49606ba79871c088ca4aecf", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/e6eba646bd84e48ff49606ba79871c088ca4aecf", "committedDate": "2020-11-18T15:33:23Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba66a15df3d9b8d6a633caec0f6882d17f791445", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/ba66a15df3d9b8d6a633caec0f6882d17f791445", "committedDate": "2020-11-19T08:34:59Z", "message": "continue refactoring the code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ec50c8bbfc156cf6302d64df35ff127b711f9fa", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/0ec50c8bbfc156cf6302d64df35ff127b711f9fa", "committedDate": "2020-11-19T10:32:18Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de25e214af39c5e326944d82240982fd05e9d947", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/de25e214af39c5e326944d82240982fd05e9d947", "committedDate": "2020-11-19T15:45:34Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a691cf2fe5affbaeaf01be6a7285530d59c32ff3", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/a691cf2fe5affbaeaf01be6a7285530d59c32ff3", "committedDate": "2020-11-19T16:01:24Z", "message": "ts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fcc5b32a6a662c38869edbef4d3c3ac61512c4c", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/0fcc5b32a6a662c38869edbef4d3c3ac61512c4c", "committedDate": "2020-11-22T12:11:39Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "470643ecb526d532fd9bba96c16d803c580979b2", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/470643ecb526d532fd9bba96c16d803c580979b2", "committedDate": "2020-11-22T12:37:40Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7c6f14e8608db4c6c500aae2af3302fb1ce18ad", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/c7c6f14e8608db4c6c500aae2af3302fb1ce18ad", "committedDate": "2020-11-22T13:17:06Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c08621be09ae51f908dce21e53bbf789900b213", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/1c08621be09ae51f908dce21e53bbf789900b213", "committedDate": "2020-11-23T12:33:42Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09547825a08bf567c3bde2bf755fb3061f50371f", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/09547825a08bf567c3bde2bf755fb3061f50371f", "committedDate": "2020-11-23T12:36:09Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db80e2433b05101241dd634e71c0dadf1678810e", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/db80e2433b05101241dd634e71c0dadf1678810e", "committedDate": "2020-11-23T14:44:21Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16bd9ace9d991eb80188a1e952135e563a6ab195", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/16bd9ace9d991eb80188a1e952135e563a6ab195", "committedDate": "2020-11-23T15:09:20Z", "message": "code formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33f3bd8452c8fd01f174977f05c2643bb2482e8e", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/33f3bd8452c8fd01f174977f05c2643bb2482e8e", "committedDate": "2020-11-24T15:53:05Z", "message": "optimized code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "530be3676813f1a1a7210a2925f8f71959d602b2", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/530be3676813f1a1a7210a2925f8f71959d602b2", "committedDate": "2020-11-24T16:01:03Z", "message": "code formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f4633e34f0022dee5307fb4119b2ac2b390be7d", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/5f4633e34f0022dee5307fb4119b2ac2b390be7d", "committedDate": "2020-11-25T03:44:37Z", "message": "Merge branch 'develop' into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82cf0441fc50bf2c28b8b9e64bcbccfc3e1cecb3", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/82cf0441fc50bf2c28b8b9e64bcbccfc3e1cecb3", "committedDate": "2020-11-25T15:23:37Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc540fd24ec500028bef40346c0cb0e596473370", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/cc540fd24ec500028bef40346c0cb0e596473370", "committedDate": "2020-11-25T15:28:14Z", "message": "Merge branch 'develop' into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fd1193be14f95d311e8a0144c43ca74127a0cfc", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/0fd1193be14f95d311e8a0144c43ca74127a0cfc", "committedDate": "2020-11-25T16:13:49Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b70b220d1380767c51f2d69ebcfcec5389de0132", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/b70b220d1380767c51f2d69ebcfcec5389de0132", "committedDate": "2020-11-25T16:15:02Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07c7d15bacb9d52f5a81313f2564fee83950d49e", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/07c7d15bacb9d52f5a81313f2564fee83950d49e", "committedDate": "2020-11-25T16:15:18Z", "message": "Merge branch '0904' of github.com:a364176773/seata into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "878e2e9c9341d2e642dd2e67bfea669bad84101d", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/878e2e9c9341d2e642dd2e67bfea669bad84101d", "committedDate": "2020-11-26T14:35:29Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d45229ad8afc4474cf851e80dc813c10596f8eec", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/d45229ad8afc4474cf851e80dc813c10596f8eec", "committedDate": "2020-11-27T14:59:58Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55ae70276b7236a52d00129d3e1707dff5445a0e", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/55ae70276b7236a52d00129d3e1707dff5445a0e", "committedDate": "2020-12-01T03:00:15Z", "message": "optimize code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzOTU3NDQ2", "url": "https://github.com/seata/seata/pull/3086#pullrequestreview-543957446", "createdAt": "2020-12-03T13:35:32Z", "commit": {"oid": "55ae70276b7236a52d00129d3e1707dff5445a0e"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMzozNTozM1rOH-b8ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNDo0ODoxNVrOH-fw4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTIzMTY4Mw==", "bodyText": "serialVersionUID", "url": "https://github.com/seata/seata/pull/3086#discussion_r535231683", "createdAt": "2020-12-03T13:35:33Z", "author": {"login": "caohdgege"}, "path": "core/src/main/java/io/seata/core/lock/RowLock.java", "diffHunk": "@@ -22,7 +22,7 @@\n  *\n  * @author zhangsen\n  */\n-public class RowLock {\n+public class RowLock implements java.io.Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ae70276b7236a52d00129d3e1707dff5445a0e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTIzODE2NA==", "bodyText": "\u8fd9\u91cc\u53ef\u4ee5\u6539\u4e00\u4e0b\uff0c\u6709\u70b9\u96be\u61c2", "url": "https://github.com/seata/seata/pull/3086#discussion_r535238164", "createdAt": "2020-12-03T13:44:39Z", "author": {"login": "caohdgege"}, "path": "core/src/main/java/io/seata/core/raft/RaftServerFactory.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.raft;\n+\n+import java.io.IOException;\n+import com.alipay.sofa.jraft.conf.Configuration;\n+import com.alipay.sofa.jraft.entity.PeerId;\n+import com.alipay.sofa.jraft.option.NodeOptions;\n+import io.seata.common.loader.EnhancedServiceLoader;\n+import io.seata.common.util.StringUtils;\n+import io.seata.config.ConfigurationFactory;\n+import io.seata.core.constants.ConfigurationKeys;\n+import io.seata.core.store.StoreMode;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+import static io.seata.common.DefaultValues.SEATA_RAFT_GROUP;\n+import static io.seata.core.raft.AbstractRaftServer.RAFT_TAG;\n+\n+/**\n+ * @author funkye\n+ */\n+public class RaftServerFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RaftServerFactory.class);\n+\n+    private AbstractRaftServer raftServer;\n+\n+    private AbstractRaftStateMachine stateMachine;\n+\n+    private Boolean raftMode = false;\n+\n+    public static RaftServerFactory getInstance() {\n+        return SingletonHandler.instance;\n+    }\n+\n+    public void init(String host, int port, String... defaultConf) throws IOException {\n+        String initConfStr = ConfigurationFactory.getInstance().getConfig(ConfigurationKeys.SERVER_RAFT_CLUSTER);\n+        if (StringUtils.isBlank(initConfStr)) {\n+            if (defaultConf == null || defaultConf.length == 0) {\n+                if (LOGGER.isWarnEnabled()) {\n+                    LOGGER.warn(\"initialize SofaJraft fail cluster is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ae70276b7236a52d00129d3e1707dff5445a0e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTIzODQ5Mw==", "bodyText": "sessionStore -> DEFAULT_SESSION_STORE_FILE_DIR", "url": "https://github.com/seata/seata/pull/3086#discussion_r535238493", "createdAt": "2020-12-03T13:45:11Z", "author": {"login": "caohdgege"}, "path": "core/src/main/java/io/seata/core/raft/RaftServerFactory.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.raft;\n+\n+import java.io.IOException;\n+import com.alipay.sofa.jraft.conf.Configuration;\n+import com.alipay.sofa.jraft.entity.PeerId;\n+import com.alipay.sofa.jraft.option.NodeOptions;\n+import io.seata.common.loader.EnhancedServiceLoader;\n+import io.seata.common.util.StringUtils;\n+import io.seata.config.ConfigurationFactory;\n+import io.seata.core.constants.ConfigurationKeys;\n+import io.seata.core.store.StoreMode;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+import static io.seata.common.DefaultValues.SEATA_RAFT_GROUP;\n+import static io.seata.core.raft.AbstractRaftServer.RAFT_TAG;\n+\n+/**\n+ * @author funkye\n+ */\n+public class RaftServerFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RaftServerFactory.class);\n+\n+    private AbstractRaftServer raftServer;\n+\n+    private AbstractRaftStateMachine stateMachine;\n+\n+    private Boolean raftMode = false;\n+\n+    public static RaftServerFactory getInstance() {\n+        return SingletonHandler.instance;\n+    }\n+\n+    public void init(String host, int port, String... defaultConf) throws IOException {\n+        String initConfStr = ConfigurationFactory.getInstance().getConfig(ConfigurationKeys.SERVER_RAFT_CLUSTER);\n+        if (StringUtils.isBlank(initConfStr)) {\n+            if (defaultConf == null || defaultConf.length == 0) {\n+                if (LOGGER.isWarnEnabled()) {\n+                    LOGGER.warn(\"initialize SofaJraft fail cluster is null\");\n+                }\n+                return;\n+            } else {\n+                initConfStr = defaultConf[0];\n+            }\n+        }\n+        String mode = ConfigurationFactory.getInstance().getConfig(ConfigurationKeys.STORE_MODE);\n+        StoreMode storeMode = StoreMode.get(mode);\n+        if (storeMode.equals(StoreMode.RAFT)) {\n+            raftMode = true;\n+        }\n+        String colon = \":\";\n+        int constantInt = 100 * 10;\n+        String serverIdStr = host + colon + (port - constantInt);\n+        if (LOGGER.isInfoEnabled()) {\n+            LOGGER.info(\"initialize SofaJraft\");\n+        }\n+        final String dataPath =\n+            ConfigurationFactory.getInstance().getConfig(ConfigurationKeys.STORE_FILE_DIR, \"sessionStore\") + \"/\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ae70276b7236a52d00129d3e1707dff5445a0e"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI0Nzg1Mg==", "bodyText": "\u6839\u636e\u4f60\u7684\u6ce8\u91ca\uff0c\u4f60\u662f\u60f3\u5173\u95edcli\u6a21\u5f0f\n\u7136\u540e\u4f60disableCli=false\uff0c\u8d1f\u8d1f\u5f97\u6b63\u5c31\u662f\u6253\u5f00\u4e86\n\u6309\u7167\u6ce8\u91ca\uff0c\u8fd9\u91cc\u5e94\u8be5\u7528true\uff1f\u6216\u8005\u6ce8\u91ca\u6539\u6210enable the cli service?", "url": "https://github.com/seata/seata/pull/3086#discussion_r535247852", "createdAt": "2020-12-03T13:58:07Z", "author": {"login": "caohdgege"}, "path": "core/src/main/java/io/seata/core/raft/RaftServerFactory.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.raft;\n+\n+import java.io.IOException;\n+import com.alipay.sofa.jraft.conf.Configuration;\n+import com.alipay.sofa.jraft.entity.PeerId;\n+import com.alipay.sofa.jraft.option.NodeOptions;\n+import io.seata.common.loader.EnhancedServiceLoader;\n+import io.seata.common.util.StringUtils;\n+import io.seata.config.ConfigurationFactory;\n+import io.seata.core.constants.ConfigurationKeys;\n+import io.seata.core.store.StoreMode;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+import static io.seata.common.DefaultValues.SEATA_RAFT_GROUP;\n+import static io.seata.core.raft.AbstractRaftServer.RAFT_TAG;\n+\n+/**\n+ * @author funkye\n+ */\n+public class RaftServerFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RaftServerFactory.class);\n+\n+    private AbstractRaftServer raftServer;\n+\n+    private AbstractRaftStateMachine stateMachine;\n+\n+    private Boolean raftMode = false;\n+\n+    public static RaftServerFactory getInstance() {\n+        return SingletonHandler.instance;\n+    }\n+\n+    public void init(String host, int port, String... defaultConf) throws IOException {\n+        String initConfStr = ConfigurationFactory.getInstance().getConfig(ConfigurationKeys.SERVER_RAFT_CLUSTER);\n+        if (StringUtils.isBlank(initConfStr)) {\n+            if (defaultConf == null || defaultConf.length == 0) {\n+                if (LOGGER.isWarnEnabled()) {\n+                    LOGGER.warn(\"initialize SofaJraft fail cluster is null\");\n+                }\n+                return;\n+            } else {\n+                initConfStr = defaultConf[0];\n+            }\n+        }\n+        String mode = ConfigurationFactory.getInstance().getConfig(ConfigurationKeys.STORE_MODE);\n+        StoreMode storeMode = StoreMode.get(mode);\n+        if (storeMode.equals(StoreMode.RAFT)) {\n+            raftMode = true;\n+        }\n+        String colon = \":\";\n+        int constantInt = 100 * 10;\n+        String serverIdStr = host + colon + (port - constantInt);\n+        if (LOGGER.isInfoEnabled()) {\n+            LOGGER.info(\"initialize SofaJraft\");\n+        }\n+        final String dataPath =\n+            ConfigurationFactory.getInstance().getConfig(ConfigurationKeys.STORE_FILE_DIR, \"sessionStore\") + \"/\"\n+                + serverIdStr.split(colon)[1];\n+        final NodeOptions nodeOptions = new NodeOptions();\n+        // Set the election timeout to 1 second\n+        nodeOptions.setElectionTimeoutMs(constantInt);\n+        // Close the CLI service.\n+        nodeOptions.setDisableCli(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ae70276b7236a52d00129d3e1707dff5445a0e"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI1MDkwNA==", "bodyText": "30?", "url": "https://github.com/seata/seata/pull/3086#discussion_r535250904", "createdAt": "2020-12-03T14:02:14Z", "author": {"login": "caohdgege"}, "path": "core/src/main/java/io/seata/core/raft/RaftServerFactory.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.raft;\n+\n+import java.io.IOException;\n+import com.alipay.sofa.jraft.conf.Configuration;\n+import com.alipay.sofa.jraft.entity.PeerId;\n+import com.alipay.sofa.jraft.option.NodeOptions;\n+import io.seata.common.loader.EnhancedServiceLoader;\n+import io.seata.common.util.StringUtils;\n+import io.seata.config.ConfigurationFactory;\n+import io.seata.core.constants.ConfigurationKeys;\n+import io.seata.core.store.StoreMode;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+import static io.seata.common.DefaultValues.SEATA_RAFT_GROUP;\n+import static io.seata.core.raft.AbstractRaftServer.RAFT_TAG;\n+\n+/**\n+ * @author funkye\n+ */\n+public class RaftServerFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RaftServerFactory.class);\n+\n+    private AbstractRaftServer raftServer;\n+\n+    private AbstractRaftStateMachine stateMachine;\n+\n+    private Boolean raftMode = false;\n+\n+    public static RaftServerFactory getInstance() {\n+        return SingletonHandler.instance;\n+    }\n+\n+    public void init(String host, int port, String... defaultConf) throws IOException {\n+        String initConfStr = ConfigurationFactory.getInstance().getConfig(ConfigurationKeys.SERVER_RAFT_CLUSTER);\n+        if (StringUtils.isBlank(initConfStr)) {\n+            if (defaultConf == null || defaultConf.length == 0) {\n+                if (LOGGER.isWarnEnabled()) {\n+                    LOGGER.warn(\"initialize SofaJraft fail cluster is null\");\n+                }\n+                return;\n+            } else {\n+                initConfStr = defaultConf[0];\n+            }\n+        }\n+        String mode = ConfigurationFactory.getInstance().getConfig(ConfigurationKeys.STORE_MODE);\n+        StoreMode storeMode = StoreMode.get(mode);\n+        if (storeMode.equals(StoreMode.RAFT)) {\n+            raftMode = true;\n+        }\n+        String colon = \":\";\n+        int constantInt = 100 * 10;\n+        String serverIdStr = host + colon + (port - constantInt);\n+        if (LOGGER.isInfoEnabled()) {\n+            LOGGER.info(\"initialize SofaJraft\");\n+        }\n+        final String dataPath =\n+            ConfigurationFactory.getInstance().getConfig(ConfigurationKeys.STORE_FILE_DIR, \"sessionStore\") + \"/\"\n+                + serverIdStr.split(colon)[1];\n+        final NodeOptions nodeOptions = new NodeOptions();\n+        // Set the election timeout to 1 second\n+        nodeOptions.setElectionTimeoutMs(constantInt);\n+        // Close the CLI service.\n+        nodeOptions.setDisableCli(false);\n+        // Snapshot should be made every 30 seconds\n+        nodeOptions.setSnapshotIntervalSecs(60);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ae70276b7236a52d00129d3e1707dff5445a0e"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI1NzkwMQ==", "bodyText": "\u8fd9\u91cc\u5e94\u8be5\u5c31\u53ea\u662f\u628anew Runnable\u6539\u6210lomdba\u8868\u8fbe\u5f0f\u5427\uff1f", "url": "https://github.com/seata/seata/pull/3086#discussion_r535257901", "createdAt": "2020-12-03T14:11:36Z", "author": {"login": "caohdgege"}, "path": "core/src/main/java/io/seata/core/rpc/netty/AbstractNettyRemoting.java", "diffHunk": "@@ -105,21 +111,18 @@\n     protected final List<RpcHook> rpcHooks = EnhancedServiceLoader.loadAll(RpcHook.class);\n \n     public void init() {\n-        timerExecutor.scheduleAtFixedRate(new Runnable() {\n-            @Override\n-            public void run() {\n-                for (Map.Entry<Integer, MessageFuture> entry : futures.entrySet()) {\n-                    if (entry.getValue().isTimeout()) {\n-                        futures.remove(entry.getKey());\n-                        entry.getValue().setResultMessage(null);\n-                        if (LOGGER.isDebugEnabled()) {\n-                            LOGGER.debug(\"timeout clear future: {}\", entry.getValue().getRequestMessage().getBody());\n-                        }\n+        timerExecutor.scheduleAtFixedRate(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ae70276b7236a52d00129d3e1707dff5445a0e"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI3Mzc4NQ==", "bodyText": "serialVersionUID\uff1f", "url": "https://github.com/seata/seata/pull/3086#discussion_r535273785", "createdAt": "2020-12-03T14:30:50Z", "author": {"login": "caohdgege"}, "path": "core/src/main/java/io/seata/core/store/BranchTransactionDO.java", "diffHunk": "@@ -25,7 +25,7 @@\n  *\n  * @author zhangsen\n  */\n-public class BranchTransactionDO {\n+public class BranchTransactionDO implements java.io.Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ae70276b7236a52d00129d3e1707dff5445a0e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI3NDM4MA==", "bodyText": "serialVersionUID", "url": "https://github.com/seata/seata/pull/3086#discussion_r535274380", "createdAt": "2020-12-03T14:31:21Z", "author": {"login": "caohdgege"}, "path": "core/src/main/java/io/seata/core/store/GlobalTransactionDO.java", "diffHunk": "@@ -15,16 +15,15 @@\n  */\n package io.seata.core.store;\n \n-import io.seata.common.util.StringUtils;\n-\n import java.util.Date;\n+import io.seata.common.util.StringUtils;\n \n /**\n  * Global Transaction data object\n  *\n  * @author zhangsen\n  */\n-public class GlobalTransactionDO {\n+public class GlobalTransactionDO implements java.io.Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ae70276b7236a52d00129d3e1707dff5445a0e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI4MjEyNA==", "bodyText": "\u4e60\u60ef\u4e0a\u7528LOGGER\uff0c\u53ef\u4ee5\u7edf\u4e00\u4e00\u4e0b", "url": "https://github.com/seata/seata/pull/3086#discussion_r535282124", "createdAt": "2020-12-03T14:37:52Z", "author": {"login": "caohdgege"}, "path": "server/src/main/java/io/seata/server/raft/RaftSnapshotFile.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server.raft;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Map;\n+import io.seata.serializer.kryo.KryoInnerSerializer;\n+import io.seata.serializer.kryo.KryoSerializerFactory;\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author funkye\n+ */\n+public class RaftSnapshotFile {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(RaftSnapshotFile.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ae70276b7236a52d00129d3e1707dff5445a0e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI4NDg0Mw==", "bodyText": "LOGGER", "url": "https://github.com/seata/seata/pull/3086#discussion_r535284843", "createdAt": "2020-12-03T14:40:17Z", "author": {"login": "caohdgege"}, "path": "server/src/main/java/io/seata/server/session/SessionHolder.java", "diffHunk": "@@ -134,6 +148,14 @@ protected static void reload(StoreMode storeMode) {\n         }\n \n         Collection<GlobalSession> allSessions = ROOT_SESSION_MANAGER.allSessions();\n+        try {\n+            RaftServerFactory.getInstance().init(XID.getIpAddress(), XID.getPort());\n+        } catch (IOException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ae70276b7236a52d00129d3e1707dff5445a0e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI4NzQ3Ng==", "bodyText": "serialVersionUID", "url": "https://github.com/seata/seata/pull/3086#discussion_r535287476", "createdAt": "2020-12-03T14:42:27Z", "author": {"login": "caohdgege"}, "path": "server/src/main/java/io/seata/server/storage/raft/RaftSessionSyncMsg.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server.storage.raft;\n+\n+import io.seata.core.model.BranchStatus;\n+import io.seata.core.model.GlobalStatus;\n+import io.seata.core.raft.msg.RaftSyncMsg;\n+import io.seata.core.store.BranchTransactionDO;\n+import io.seata.core.store.GlobalTransactionDO;\n+\n+/**\n+ * @author funkye\n+ */\n+public class RaftSessionSyncMsg extends RaftSyncMsg implements java.io.Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ae70276b7236a52d00129d3e1707dff5445a0e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI4OTM1MA==", "bodyText": "LOGGER", "url": "https://github.com/seata/seata/pull/3086#discussion_r535289350", "createdAt": "2020-12-03T14:44:06Z", "author": {"login": "caohdgege"}, "path": "server/src/main/java/io/seata/server/storage/raft/RaftTaskUtil.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server.storage.raft;\n+\n+import java.nio.ByteBuffer;\n+import com.alipay.remoting.exception.CodecException;\n+import com.alipay.remoting.serialization.SerializerManager;\n+import com.alipay.sofa.jraft.Closure;\n+import com.alipay.sofa.jraft.entity.Task;\n+import io.seata.core.raft.RaftServerFactory;\n+\n+\n+import static com.alipay.remoting.serialization.SerializerManager.Hessian2;\n+\n+/**\n+ * @author funkye\n+ */\n+public class RaftTaskUtil {\n+\n+    public static void createTask(Object data) {\n+        createTask(null, data);\n+    }\n+\n+    public static void createTask(Closure done, Object data) {\n+        final Task task = new Task();\n+        try {\n+            task.setData(ByteBuffer.wrap(SerializerManager.getSerializer(Hessian2).serialize(data)));\n+        } catch (CodecException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ae70276b7236a52d00129d3e1707dff5445a0e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI5MzkxMA==", "bodyText": "File.separator ?", "url": "https://github.com/seata/seata/pull/3086#discussion_r535293910", "createdAt": "2020-12-03T14:47:58Z", "author": {"login": "caohdgege"}, "path": "server/src/test/java/io/seata/server/coordinator/DefaultCoordinatorTest.java", "diffHunk": "@@ -90,12 +90,13 @@\n \n     private static final Configuration CONFIG = ConfigurationFactory.getInstance();\n \n-    private static String sessionStorePath = CONFIG.getConfig(ConfigurationKeys.STORE_FILE_DIR,\n-        DEFAULT_SESSION_STORE_FILE_DIR);\n+    private static String sessionStorePath;\n \n     @BeforeAll\n     public static void beforeClass() throws Exception {\n         XID.setIpAddress(NetUtil.getLocalIp());\n+        sessionStorePath = CONFIG.getConfig(ConfigurationKeys.STORE_FILE_DIR, DEFAULT_SESSION_STORE_FILE_DIR)\n+            + \"/\" + XID.getPort();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ae70276b7236a52d00129d3e1707dff5445a0e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI5NDA2NA==", "bodyText": "File.separator", "url": "https://github.com/seata/seata/pull/3086#discussion_r535294064", "createdAt": "2020-12-03T14:48:08Z", "author": {"login": "caohdgege"}, "path": "server/src/test/java/io/seata/server/session/SessionHolderTest.java", "diffHunk": "@@ -37,7 +39,9 @@\n \n     @BeforeEach\n     public void before() {\n-        String sessionStorePath = SessionHolder.CONFIG.getConfig(ConfigurationKeys.STORE_FILE_DIR);\n+        String sessionStorePath =\n+            SessionHolder.CONFIG.getConfig(ConfigurationKeys.STORE_FILE_DIR, DEFAULT_SESSION_STORE_FILE_DIR) + \"/\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ae70276b7236a52d00129d3e1707dff5445a0e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI5NDE3Ng==", "bodyText": "File.separator", "url": "https://github.com/seata/seata/pull/3086#discussion_r535294176", "createdAt": "2020-12-03T14:48:15Z", "author": {"login": "caohdgege"}, "path": "server/src/test/java/io/seata/server/store/SessionStoreTest.java", "diffHunk": "@@ -55,7 +56,8 @@\n      */\n     @BeforeEach\n     public void clean() throws Exception {\n-        String sessionStorePath = CONFIG.getConfig(ConfigurationKeys.STORE_FILE_DIR);\n+        String sessionStorePath = CONFIG.getConfig(ConfigurationKeys.STORE_FILE_DIR, DEFAULT_SESSION_STORE_FILE_DIR)\n+            + \"/\" + XID.getPort();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ae70276b7236a52d00129d3e1707dff5445a0e"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "289477ded63a31df536d215ec3770f8efdb8b5f0", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/289477ded63a31df536d215ec3770f8efdb8b5f0", "committedDate": "2020-12-03T15:35:00Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed37ae95050fd4a98c197feedf580487fcde8901", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/ed37ae95050fd4a98c197feedf580487fcde8901", "committedDate": "2020-12-03T15:38:34Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cd02344e37bf4a8b57dbcbf86f6b7a31750c250", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/9cd02344e37bf4a8b57dbcbf86f6b7a31750c250", "committedDate": "2020-12-03T15:58:55Z", "message": "avoid the shutdown of the leader node after the branch transaction is processed, and it will be processed again on the new leader"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0MTQxNjQ3", "url": "https://github.com/seata/seata/pull/3086#pullrequestreview-544141647", "createdAt": "2020-12-03T16:27:13Z", "commit": {"oid": "55ae70276b7236a52d00129d3e1707dff5445a0e"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjoyNzoxM1rOH-lSCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjo0MTozNFrOH-l_GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM4NDU4NQ==", "bodyText": "@OverRide", "url": "https://github.com/seata/seata/pull/3086#discussion_r535384585", "createdAt": "2020-12-03T16:27:13Z", "author": {"login": "caohdgege"}, "path": "server/src/main/java/io/seata/server/raft/RaftStateMachine.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server.raft;\n+\n+import java.io.File;\n+import java.nio.ByteBuffer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+import com.alipay.remoting.serialization.SerializerManager;\n+import com.alipay.sofa.jraft.Closure;\n+import com.alipay.sofa.jraft.Iterator;\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.error.RaftError;\n+import com.alipay.sofa.jraft.storage.snapshot.SnapshotReader;\n+import com.alipay.sofa.jraft.storage.snapshot.SnapshotWriter;\n+import com.alipay.sofa.jraft.util.Utils;\n+import io.seata.common.util.StringUtils;\n+import io.seata.config.ConfigurationFactory;\n+import io.seata.core.constants.ConfigurationKeys;\n+import io.seata.core.exception.TransactionException;\n+import io.seata.core.model.BranchStatus;\n+import io.seata.core.model.GlobalStatus;\n+import io.seata.core.raft.AbstractRaftStateMachine;\n+import io.seata.core.raft.RaftServerFactory;\n+import io.seata.core.rpc.processor.server.ServerOnRequestProcessor;\n+import io.seata.core.store.StoreMode;\n+import io.seata.server.session.BranchSession;\n+import io.seata.server.session.GlobalSession;\n+import io.seata.server.session.SessionHelper;\n+import io.seata.server.session.SessionHolder;\n+import io.seata.server.session.SessionManager;\n+import io.seata.server.storage.SessionConverter;\n+import io.seata.server.storage.file.lock.FileLocker;\n+import io.seata.server.storage.raft.RaftSessionSyncMsg;\n+import io.seata.server.storage.raft.lock.RaftLockManager;\n+import io.seata.server.storage.raft.session.RaftSessionManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+import static com.alipay.remoting.serialization.SerializerManager.Hessian2;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.ACQUIRE_LOCK;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.ADD_BRANCH_SESSION;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.ADD_GLOBAL_SESSION;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.RELEASE_GLOBAL_SESSION_LOCK;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.REMOVE_BRANCH_SESSION;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.REMOVE_GLOBAL_SESSION;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.UPDATE_BRANCH_SESSION_STATUS;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.UPDATE_GLOBAL_SESSION_STATUS;\n+import static io.seata.server.session.SessionHolder.ASYNC_COMMITTING_SESSION_MANAGER_NAME;\n+import static io.seata.server.session.SessionHolder.RETRY_COMMITTING_SESSION_MANAGER_NAME;\n+import static io.seata.server.session.SessionHolder.RETRY_ROLLBACKING_SESSION_MANAGER_NAME;\n+import static io.seata.server.session.SessionHolder.ROOT_SESSION_MANAGER_NAME;\n+\n+/**\n+ * @author funkye\n+ */\n+public class RaftStateMachine extends AbstractRaftStateMachine {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(RaftStateMachine.class);\n+\n+    /**\n+     * Leader term\n+     */\n+    private final AtomicLong leaderTerm = new AtomicLong(-1);\n+    /**\n+     * counter value\n+     */\n+\n+    public boolean isLeader() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ae70276b7236a52d00129d3e1707dff5445a0e"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM4NDgzOA==", "bodyText": "\u5b57\u6bb5\u5b9a\u4e49\u632a\u5230\u65b9\u6cd5\u5b9a\u4e49\u4e0a\u9762", "url": "https://github.com/seata/seata/pull/3086#discussion_r535384838", "createdAt": "2020-12-03T16:27:31Z", "author": {"login": "caohdgege"}, "path": "server/src/main/java/io/seata/server/raft/RaftStateMachine.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server.raft;\n+\n+import java.io.File;\n+import java.nio.ByteBuffer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+import com.alipay.remoting.serialization.SerializerManager;\n+import com.alipay.sofa.jraft.Closure;\n+import com.alipay.sofa.jraft.Iterator;\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.error.RaftError;\n+import com.alipay.sofa.jraft.storage.snapshot.SnapshotReader;\n+import com.alipay.sofa.jraft.storage.snapshot.SnapshotWriter;\n+import com.alipay.sofa.jraft.util.Utils;\n+import io.seata.common.util.StringUtils;\n+import io.seata.config.ConfigurationFactory;\n+import io.seata.core.constants.ConfigurationKeys;\n+import io.seata.core.exception.TransactionException;\n+import io.seata.core.model.BranchStatus;\n+import io.seata.core.model.GlobalStatus;\n+import io.seata.core.raft.AbstractRaftStateMachine;\n+import io.seata.core.raft.RaftServerFactory;\n+import io.seata.core.rpc.processor.server.ServerOnRequestProcessor;\n+import io.seata.core.store.StoreMode;\n+import io.seata.server.session.BranchSession;\n+import io.seata.server.session.GlobalSession;\n+import io.seata.server.session.SessionHelper;\n+import io.seata.server.session.SessionHolder;\n+import io.seata.server.session.SessionManager;\n+import io.seata.server.storage.SessionConverter;\n+import io.seata.server.storage.file.lock.FileLocker;\n+import io.seata.server.storage.raft.RaftSessionSyncMsg;\n+import io.seata.server.storage.raft.lock.RaftLockManager;\n+import io.seata.server.storage.raft.session.RaftSessionManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+import static com.alipay.remoting.serialization.SerializerManager.Hessian2;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.ACQUIRE_LOCK;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.ADD_BRANCH_SESSION;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.ADD_GLOBAL_SESSION;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.RELEASE_GLOBAL_SESSION_LOCK;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.REMOVE_BRANCH_SESSION;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.REMOVE_GLOBAL_SESSION;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.UPDATE_BRANCH_SESSION_STATUS;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.UPDATE_GLOBAL_SESSION_STATUS;\n+import static io.seata.server.session.SessionHolder.ASYNC_COMMITTING_SESSION_MANAGER_NAME;\n+import static io.seata.server.session.SessionHolder.RETRY_COMMITTING_SESSION_MANAGER_NAME;\n+import static io.seata.server.session.SessionHolder.RETRY_ROLLBACKING_SESSION_MANAGER_NAME;\n+import static io.seata.server.session.SessionHolder.ROOT_SESSION_MANAGER_NAME;\n+\n+/**\n+ * @author funkye\n+ */\n+public class RaftStateMachine extends AbstractRaftStateMachine {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(RaftStateMachine.class);\n+\n+    /**\n+     * Leader term\n+     */\n+    private final AtomicLong leaderTerm = new AtomicLong(-1);\n+    /**\n+     * counter value\n+     */\n+\n+    public boolean isLeader() {\n+        return this.leaderTerm.get() > 0;\n+    }\n+\n+    RaftLockManager raftLockManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ae70276b7236a52d00129d3e1707dff5445a0e"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM4NDk2MA==", "bodyText": "\u8fd9\u4e2a\u6ce8\u91ca\u662f\uff1f", "url": "https://github.com/seata/seata/pull/3086#discussion_r535384960", "createdAt": "2020-12-03T16:27:42Z", "author": {"login": "caohdgege"}, "path": "server/src/main/java/io/seata/server/raft/RaftStateMachine.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server.raft;\n+\n+import java.io.File;\n+import java.nio.ByteBuffer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+import com.alipay.remoting.serialization.SerializerManager;\n+import com.alipay.sofa.jraft.Closure;\n+import com.alipay.sofa.jraft.Iterator;\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.error.RaftError;\n+import com.alipay.sofa.jraft.storage.snapshot.SnapshotReader;\n+import com.alipay.sofa.jraft.storage.snapshot.SnapshotWriter;\n+import com.alipay.sofa.jraft.util.Utils;\n+import io.seata.common.util.StringUtils;\n+import io.seata.config.ConfigurationFactory;\n+import io.seata.core.constants.ConfigurationKeys;\n+import io.seata.core.exception.TransactionException;\n+import io.seata.core.model.BranchStatus;\n+import io.seata.core.model.GlobalStatus;\n+import io.seata.core.raft.AbstractRaftStateMachine;\n+import io.seata.core.raft.RaftServerFactory;\n+import io.seata.core.rpc.processor.server.ServerOnRequestProcessor;\n+import io.seata.core.store.StoreMode;\n+import io.seata.server.session.BranchSession;\n+import io.seata.server.session.GlobalSession;\n+import io.seata.server.session.SessionHelper;\n+import io.seata.server.session.SessionHolder;\n+import io.seata.server.session.SessionManager;\n+import io.seata.server.storage.SessionConverter;\n+import io.seata.server.storage.file.lock.FileLocker;\n+import io.seata.server.storage.raft.RaftSessionSyncMsg;\n+import io.seata.server.storage.raft.lock.RaftLockManager;\n+import io.seata.server.storage.raft.session.RaftSessionManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+import static com.alipay.remoting.serialization.SerializerManager.Hessian2;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.ACQUIRE_LOCK;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.ADD_BRANCH_SESSION;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.ADD_GLOBAL_SESSION;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.RELEASE_GLOBAL_SESSION_LOCK;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.REMOVE_BRANCH_SESSION;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.REMOVE_GLOBAL_SESSION;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.UPDATE_BRANCH_SESSION_STATUS;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.UPDATE_GLOBAL_SESSION_STATUS;\n+import static io.seata.server.session.SessionHolder.ASYNC_COMMITTING_SESSION_MANAGER_NAME;\n+import static io.seata.server.session.SessionHolder.RETRY_COMMITTING_SESSION_MANAGER_NAME;\n+import static io.seata.server.session.SessionHolder.RETRY_ROLLBACKING_SESSION_MANAGER_NAME;\n+import static io.seata.server.session.SessionHolder.ROOT_SESSION_MANAGER_NAME;\n+\n+/**\n+ * @author funkye\n+ */\n+public class RaftStateMachine extends AbstractRaftStateMachine {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(RaftStateMachine.class);\n+\n+    /**\n+     * Leader term\n+     */\n+    private final AtomicLong leaderTerm = new AtomicLong(-1);\n+    /**\n+     * counter value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ae70276b7236a52d00129d3e1707dff5445a0e"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM4NTIzMw==", "bodyText": "\u632a\u4e0a\u53bb\uff1f", "url": "https://github.com/seata/seata/pull/3086#discussion_r535385233", "createdAt": "2020-12-03T16:28:01Z", "author": {"login": "caohdgege"}, "path": "server/src/main/java/io/seata/server/raft/RaftStateMachine.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server.raft;\n+\n+import java.io.File;\n+import java.nio.ByteBuffer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+import com.alipay.remoting.serialization.SerializerManager;\n+import com.alipay.sofa.jraft.Closure;\n+import com.alipay.sofa.jraft.Iterator;\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.error.RaftError;\n+import com.alipay.sofa.jraft.storage.snapshot.SnapshotReader;\n+import com.alipay.sofa.jraft.storage.snapshot.SnapshotWriter;\n+import com.alipay.sofa.jraft.util.Utils;\n+import io.seata.common.util.StringUtils;\n+import io.seata.config.ConfigurationFactory;\n+import io.seata.core.constants.ConfigurationKeys;\n+import io.seata.core.exception.TransactionException;\n+import io.seata.core.model.BranchStatus;\n+import io.seata.core.model.GlobalStatus;\n+import io.seata.core.raft.AbstractRaftStateMachine;\n+import io.seata.core.raft.RaftServerFactory;\n+import io.seata.core.rpc.processor.server.ServerOnRequestProcessor;\n+import io.seata.core.store.StoreMode;\n+import io.seata.server.session.BranchSession;\n+import io.seata.server.session.GlobalSession;\n+import io.seata.server.session.SessionHelper;\n+import io.seata.server.session.SessionHolder;\n+import io.seata.server.session.SessionManager;\n+import io.seata.server.storage.SessionConverter;\n+import io.seata.server.storage.file.lock.FileLocker;\n+import io.seata.server.storage.raft.RaftSessionSyncMsg;\n+import io.seata.server.storage.raft.lock.RaftLockManager;\n+import io.seata.server.storage.raft.session.RaftSessionManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+import static com.alipay.remoting.serialization.SerializerManager.Hessian2;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.ACQUIRE_LOCK;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.ADD_BRANCH_SESSION;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.ADD_GLOBAL_SESSION;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.RELEASE_GLOBAL_SESSION_LOCK;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.REMOVE_BRANCH_SESSION;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.REMOVE_GLOBAL_SESSION;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.UPDATE_BRANCH_SESSION_STATUS;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.UPDATE_GLOBAL_SESSION_STATUS;\n+import static io.seata.server.session.SessionHolder.ASYNC_COMMITTING_SESSION_MANAGER_NAME;\n+import static io.seata.server.session.SessionHolder.RETRY_COMMITTING_SESSION_MANAGER_NAME;\n+import static io.seata.server.session.SessionHolder.RETRY_ROLLBACKING_SESSION_MANAGER_NAME;\n+import static io.seata.server.session.SessionHolder.ROOT_SESSION_MANAGER_NAME;\n+\n+/**\n+ * @author funkye\n+ */\n+public class RaftStateMachine extends AbstractRaftStateMachine {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(RaftStateMachine.class);\n+\n+    /**\n+     * Leader term\n+     */\n+    private final AtomicLong leaderTerm = new AtomicLong(-1);\n+    /**\n+     * counter value\n+     */\n+\n+    public boolean isLeader() {\n+        return this.leaderTerm.get() > 0;\n+    }\n+\n+    RaftLockManager raftLockManager;\n+\n+    @Override\n+    public void setOnRequestProcessor(ServerOnRequestProcessor onRequestProcessor) {\n+        this.onRequestProcessor = onRequestProcessor;\n+        raftLockManager = new RaftLockManager();\n+    }\n+\n+    String mode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ae70276b7236a52d00129d3e1707dff5445a0e"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM5MTM2MQ==", "bodyText": "\u4ec0\u4e48\u60c5\u51b5\u4e0b\u4f1a\u8fdb\u6765\u8fd9\u4e2a\u5206\u652f\uff1f", "url": "https://github.com/seata/seata/pull/3086#discussion_r535391361", "createdAt": "2020-12-03T16:36:00Z", "author": {"login": "caohdgege"}, "path": "server/src/main/java/io/seata/server/raft/RaftStateMachine.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server.raft;\n+\n+import java.io.File;\n+import java.nio.ByteBuffer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+import com.alipay.remoting.serialization.SerializerManager;\n+import com.alipay.sofa.jraft.Closure;\n+import com.alipay.sofa.jraft.Iterator;\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.error.RaftError;\n+import com.alipay.sofa.jraft.storage.snapshot.SnapshotReader;\n+import com.alipay.sofa.jraft.storage.snapshot.SnapshotWriter;\n+import com.alipay.sofa.jraft.util.Utils;\n+import io.seata.common.util.StringUtils;\n+import io.seata.config.ConfigurationFactory;\n+import io.seata.core.constants.ConfigurationKeys;\n+import io.seata.core.exception.TransactionException;\n+import io.seata.core.model.BranchStatus;\n+import io.seata.core.model.GlobalStatus;\n+import io.seata.core.raft.AbstractRaftStateMachine;\n+import io.seata.core.raft.RaftServerFactory;\n+import io.seata.core.rpc.processor.server.ServerOnRequestProcessor;\n+import io.seata.core.store.StoreMode;\n+import io.seata.server.session.BranchSession;\n+import io.seata.server.session.GlobalSession;\n+import io.seata.server.session.SessionHelper;\n+import io.seata.server.session.SessionHolder;\n+import io.seata.server.session.SessionManager;\n+import io.seata.server.storage.SessionConverter;\n+import io.seata.server.storage.file.lock.FileLocker;\n+import io.seata.server.storage.raft.RaftSessionSyncMsg;\n+import io.seata.server.storage.raft.lock.RaftLockManager;\n+import io.seata.server.storage.raft.session.RaftSessionManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+import static com.alipay.remoting.serialization.SerializerManager.Hessian2;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.ACQUIRE_LOCK;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.ADD_BRANCH_SESSION;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.ADD_GLOBAL_SESSION;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.RELEASE_GLOBAL_SESSION_LOCK;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.REMOVE_BRANCH_SESSION;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.REMOVE_GLOBAL_SESSION;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.UPDATE_BRANCH_SESSION_STATUS;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.UPDATE_GLOBAL_SESSION_STATUS;\n+import static io.seata.server.session.SessionHolder.ASYNC_COMMITTING_SESSION_MANAGER_NAME;\n+import static io.seata.server.session.SessionHolder.RETRY_COMMITTING_SESSION_MANAGER_NAME;\n+import static io.seata.server.session.SessionHolder.RETRY_ROLLBACKING_SESSION_MANAGER_NAME;\n+import static io.seata.server.session.SessionHolder.ROOT_SESSION_MANAGER_NAME;\n+\n+/**\n+ * @author funkye\n+ */\n+public class RaftStateMachine extends AbstractRaftStateMachine {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(RaftStateMachine.class);\n+\n+    /**\n+     * Leader term\n+     */\n+    private final AtomicLong leaderTerm = new AtomicLong(-1);\n+    /**\n+     * counter value\n+     */\n+\n+    public boolean isLeader() {\n+        return this.leaderTerm.get() > 0;\n+    }\n+\n+    RaftLockManager raftLockManager;\n+\n+    @Override\n+    public void setOnRequestProcessor(ServerOnRequestProcessor onRequestProcessor) {\n+        this.onRequestProcessor = onRequestProcessor;\n+        raftLockManager = new RaftLockManager();\n+    }\n+\n+    String mode;\n+\n+    public RaftStateMachine() {\n+        mode = ConfigurationFactory.getInstance().getConfig(ConfigurationKeys.STORE_MODE);\n+    }\n+\n+    @Override\n+    public void onApply(Iterator iterator) {\n+        while (iterator.hasNext()) {\n+            Closure processor = null;\n+            if (iterator.done() != null) {\n+                processor = iterator.done();\n+            } else {\n+                try {\n+                    ByteBuffer byteBuffer = iterator.getData();\n+                    if (byteBuffer != null) {\n+                        RaftSessionSyncMsg msg = SerializerManager.getSerializer(Hessian2)\n+                            .deserialize(iterator.getData().array(), RaftSessionSyncMsg.class.getName());\n+                        onExecuteRaft(msg);\n+                    }\n+                } catch (Exception e) {\n+                    LOG.error(\"Message synchronization failure\", e);\n+                }\n+            }\n+            if (processor != null) {\n+                processor.run(Status.OK());\n+            }\n+            iterator.next();\n+        }\n+    }\n+\n+\n+    @Override\n+    public void onSnapshotSave(final SnapshotWriter writer, final Closure done) {\n+        if (!StringUtils.equals(StoreMode.RAFT.getName(), mode)) {\n+            return;\n+        }\n+        Map<String, Object> maps = new HashMap<>();\n+        RaftSessionManager raftSessionManager = (RaftSessionManager)SessionHolder.getRootSessionManager();\n+        Map<String, GlobalSession> sessionMap = raftSessionManager.getSessionMap();\n+        Map<String, byte[]> sessionByteMap = new HashMap<>();\n+        sessionMap.forEach((k, v) -> sessionByteMap.put(v.getXid(), v.encode()));\n+        maps.put(ROOT_SESSION_MANAGER_NAME, sessionByteMap);\n+        ConcurrentMap<String/* resourceId */, ConcurrentMap<String/* tableName */,\n+            ConcurrentMap<Integer/* bucketId */, FileLocker.BucketLockMap>>>\n+            LOCK_MAP = FileLocker.LOCK_MAP;\n+        maps.put(\"LOCK_MAP\", LOCK_MAP);\n+        LOG.info(\"sessionmap size:{},lock map size:{}\",sessionMap.size(), LOCK_MAP.size());\n+        if (maps.isEmpty()) {\n+            return;\n+        }\n+        Utils.runInThread(() -> {\n+            final RaftSnapshotFile snapshot = new RaftSnapshotFile(writer.getPath() + File.separator + \"data\");\n+            if (snapshot.save(maps)) {\n+                if (writer.addFile(\"data\")) {\n+                    done.run(Status.OK());\n+                } else {\n+                    done.run(new Status(RaftError.EIO, \"Fail to add file to writer\"));\n+                }\n+            } else {\n+                done.run(new Status(RaftError.EIO, \"Fail to save counter snapshot %s\", snapshot.getPath()));\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public boolean onSnapshotLoad(final SnapshotReader reader) {\n+        if (!StringUtils.equals(StoreMode.RAFT.getName(), mode)) {\n+            return false;\n+        }\n+        if (isLeader()) {\n+            LOG.warn(\"Leader is not supposed to load snapshot\");\n+            return false;\n+        }\n+        if (reader.getFileMeta(\"data\") == null) {\n+            LOG.error(\"Fail to find data file in {}\", reader.getPath());\n+            return false;\n+        }\n+        final RaftSnapshotFile snapshot = new RaftSnapshotFile(reader.getPath() + File.separator + \"data\");\n+        try {\n+            Map<String, Object> maps = snapshot.load();\n+            RaftSessionManager raftSessionManager = (RaftSessionManager)SessionHolder.getRootSessionManager();\n+            FileLocker.LOCK_MAP.putAll((Map<? extends String,\n+                ? extends ConcurrentMap<String, ConcurrentMap<Integer, FileLocker.BucketLockMap>>>)maps\n+                    .get(\"LOCK_MAP\"));\n+            Map<String, byte[]> sessionByteMap = (Map<String, byte[]>)maps.get(ROOT_SESSION_MANAGER_NAME);\n+            Map<String, GlobalSession> rootSessionMap = raftSessionManager.getSessionMap();\n+            if (!sessionByteMap.isEmpty()) {\n+                Map<String, GlobalSession> sessionMap = new HashMap<>();\n+                sessionByteMap.forEach((k, v) -> {\n+                    GlobalSession session = new GlobalSession();\n+                    session.decode(v);\n+                    sessionMap.put(k, session);\n+                });\n+                rootSessionMap.putAll(sessionMap);\n+                sessionMap.forEach((k, v) -> {\n+                    GlobalStatus status = v.getStatus();\n+                    try {\n+                        if (status == GlobalStatus.AsyncCommitting) {\n+                            SessionHolder.getAsyncCommittingSessionManager().addGlobalSession(v);\n+                        } else if (status == GlobalStatus.CommitRetrying) {\n+                            SessionHolder.getRetryCommittingSessionManager().addGlobalSession(v);\n+                        } else if (status == GlobalStatus.RollbackRetrying) {\n+                            SessionHolder.getRetryRollbackingSessionManager().addGlobalSession(v);\n+                        }\n+                    } catch (TransactionException e) {\n+                        e.printStackTrace();\n+                    }\n+                });\n+            }\n+            return true;\n+        } catch (final Exception e) {\n+            LOG.error(\"Fail to load snapshot from {}\", snapshot.getPath());\n+            return false;\n+        }\n+\n+    }\n+\n+\n+    @Override\n+    public void onLeaderStart(final long term) {\n+        this.leaderTerm.set(term);\n+        if (RaftServerFactory.getInstance().isRaftMode()) {\n+            RaftSessionManager raftSessionManager = (RaftSessionManager)SessionHolder.getRootSessionManager();\n+            Map<String, GlobalSession> retryRollbackingMap =\n+                ((RaftSessionManager)SessionHolder.getRetryRollbackingSessionManager()).getSessionMap();\n+            Map<String, GlobalSession> sessionMap = raftSessionManager.getSessionMap();\n+            sessionMap.forEach((k, v) -> {\n+                GlobalStatus status = v.getStatus();\n+                if (status == GlobalStatus.RollbackRetrying || status == GlobalStatus.Rollbacking\n+                    || status == GlobalStatus.TimeoutRollbacking || status == GlobalStatus.TimeoutRollbackRetrying) {\n+                    retryRollbackingMap.computeIfAbsent(v.getXid(), session -> {\n+                        v.addSessionLifecycleListener(SessionHolder.getRetryRollbackingSessionManager());\n+                        return v;\n+                    });\n+                }\n+            });\n+        }\n+        super.onLeaderStart(term);\n+    }\n+\n+    @Override\n+    public void onLeaderStop(final Status status) {\n+        this.leaderTerm.set(-1);\n+        super.onLeaderStop(status);\n+    }\n+\n+    private void onExecuteRaft(RaftSessionSyncMsg msg) throws TransactionException {\n+        RaftSessionSyncMsg.MsgType msgType = msg.getMsgType();\n+        SessionManager sessionManager = null;\n+        String sessionName = msg.getSessionName();\n+        Boolean rootManager = false;\n+        if (Objects.equals(sessionName, ROOT_SESSION_MANAGER_NAME)) {\n+            sessionManager = SessionHolder.getRootSessionManager();\n+            rootManager = true;\n+        } else if (Objects.equals(sessionName, ASYNC_COMMITTING_SESSION_MANAGER_NAME)) {\n+            sessionManager = SessionHolder.getAsyncCommittingSessionManager();\n+        } else if (Objects.equals(sessionName, RETRY_COMMITTING_SESSION_MANAGER_NAME)) {\n+            sessionManager = SessionHolder.getRetryCommittingSessionManager();\n+        } else if (Objects.equals(sessionName, RETRY_ROLLBACKING_SESSION_MANAGER_NAME)) {\n+            sessionManager = SessionHolder.getRetryRollbackingSessionManager();\n+        }\n+        RaftSessionManager raftSessionManager = sessionManager != null ? (RaftSessionManager)sessionManager : null;\n+        LOG.info(\"state machine synchronization,task:{},sessionManager:{}\", msgType,\n+            sessionName != null ? sessionName : ROOT_SESSION_MANAGER_NAME);\n+        if (ADD_GLOBAL_SESSION.equals(msgType)) {\n+            GlobalSession globalSession;\n+            if (!rootManager) {\n+                globalSession =\n+                    SessionHolder.getRootSessionManager().findGlobalSession(msg.getGlobalSession().getXid());\n+            } else {\n+                globalSession = SessionConverter.convertGlobalSession(msg.getGlobalSession());\n+            }\n+            raftSessionManager.getFileSessionManager().addGlobalSession(globalSession);\n+        } else if (ACQUIRE_LOCK.equals(msgType)) {\n+            GlobalSession globalSession =\n+                SessionHolder.getRootSessionManager().findGlobalSession(msg.getBranchSession().getXid());\n+            BranchSession branchSession = globalSession.getBranch(msg.getBranchSession().getBranchId());\n+            boolean include = false;\n+            if (branchSession != null) {\n+                include = true;\n+                branchSession.setLockKey(msg.getBranchSession().getLockKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ae70276b7236a52d00129d3e1707dff5445a0e"}, "originalPosition": 279}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM5NjEyMQ==", "bodyText": "\u8fd9\u6837\u7684\u8bdd\uff0c\u662f\u4e0d\u662f\u4ece\u8282\u70b9globalSession.add\u6bd4\u4e3b\u8282\u70b9\u65e9\uff1f\n\u5e76\u4e14\u4e3b\u8282\u70b9\u90a3\u8fb9\u662ftry_catch\u6765\u4fdd\u8bc1\u5982\u679cglobalSession.add\u7684\u65f6\u5019\u62a5\u9519\u4e86\u4f1aunlock\uff0c\u8fd9\u8fb9\u4fdd\u8bc1\u8fd9\u4e2a\u7684\u673a\u5236\u662f\uff1f\n\u662f\u4e0d\u662f\u9700\u8981unlock\u7684\u65f6\u5019\u4e5f\u8fdb\u884c\u540c\u6b65\uff1f", "url": "https://github.com/seata/seata/pull/3086#discussion_r535396121", "createdAt": "2020-12-03T16:41:34Z", "author": {"login": "caohdgege"}, "path": "server/src/main/java/io/seata/server/raft/RaftStateMachine.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server.raft;\n+\n+import java.io.File;\n+import java.nio.ByteBuffer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicLong;\n+import com.alipay.remoting.serialization.SerializerManager;\n+import com.alipay.sofa.jraft.Closure;\n+import com.alipay.sofa.jraft.Iterator;\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.error.RaftError;\n+import com.alipay.sofa.jraft.storage.snapshot.SnapshotReader;\n+import com.alipay.sofa.jraft.storage.snapshot.SnapshotWriter;\n+import com.alipay.sofa.jraft.util.Utils;\n+import io.seata.common.util.StringUtils;\n+import io.seata.config.ConfigurationFactory;\n+import io.seata.core.constants.ConfigurationKeys;\n+import io.seata.core.exception.TransactionException;\n+import io.seata.core.model.BranchStatus;\n+import io.seata.core.model.GlobalStatus;\n+import io.seata.core.raft.AbstractRaftStateMachine;\n+import io.seata.core.raft.RaftServerFactory;\n+import io.seata.core.rpc.processor.server.ServerOnRequestProcessor;\n+import io.seata.core.store.StoreMode;\n+import io.seata.server.session.BranchSession;\n+import io.seata.server.session.GlobalSession;\n+import io.seata.server.session.SessionHelper;\n+import io.seata.server.session.SessionHolder;\n+import io.seata.server.session.SessionManager;\n+import io.seata.server.storage.SessionConverter;\n+import io.seata.server.storage.file.lock.FileLocker;\n+import io.seata.server.storage.raft.RaftSessionSyncMsg;\n+import io.seata.server.storage.raft.lock.RaftLockManager;\n+import io.seata.server.storage.raft.session.RaftSessionManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+import static com.alipay.remoting.serialization.SerializerManager.Hessian2;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.ACQUIRE_LOCK;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.ADD_BRANCH_SESSION;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.ADD_GLOBAL_SESSION;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.RELEASE_GLOBAL_SESSION_LOCK;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.REMOVE_BRANCH_SESSION;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.REMOVE_GLOBAL_SESSION;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.UPDATE_BRANCH_SESSION_STATUS;\n+import static io.seata.core.raft.msg.RaftSyncMsg.MsgType.UPDATE_GLOBAL_SESSION_STATUS;\n+import static io.seata.server.session.SessionHolder.ASYNC_COMMITTING_SESSION_MANAGER_NAME;\n+import static io.seata.server.session.SessionHolder.RETRY_COMMITTING_SESSION_MANAGER_NAME;\n+import static io.seata.server.session.SessionHolder.RETRY_ROLLBACKING_SESSION_MANAGER_NAME;\n+import static io.seata.server.session.SessionHolder.ROOT_SESSION_MANAGER_NAME;\n+\n+/**\n+ * @author funkye\n+ */\n+public class RaftStateMachine extends AbstractRaftStateMachine {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(RaftStateMachine.class);\n+\n+    /**\n+     * Leader term\n+     */\n+    private final AtomicLong leaderTerm = new AtomicLong(-1);\n+    /**\n+     * counter value\n+     */\n+\n+    public boolean isLeader() {\n+        return this.leaderTerm.get() > 0;\n+    }\n+\n+    RaftLockManager raftLockManager;\n+\n+    @Override\n+    public void setOnRequestProcessor(ServerOnRequestProcessor onRequestProcessor) {\n+        this.onRequestProcessor = onRequestProcessor;\n+        raftLockManager = new RaftLockManager();\n+    }\n+\n+    String mode;\n+\n+    public RaftStateMachine() {\n+        mode = ConfigurationFactory.getInstance().getConfig(ConfigurationKeys.STORE_MODE);\n+    }\n+\n+    @Override\n+    public void onApply(Iterator iterator) {\n+        while (iterator.hasNext()) {\n+            Closure processor = null;\n+            if (iterator.done() != null) {\n+                processor = iterator.done();\n+            } else {\n+                try {\n+                    ByteBuffer byteBuffer = iterator.getData();\n+                    if (byteBuffer != null) {\n+                        RaftSessionSyncMsg msg = SerializerManager.getSerializer(Hessian2)\n+                            .deserialize(iterator.getData().array(), RaftSessionSyncMsg.class.getName());\n+                        onExecuteRaft(msg);\n+                    }\n+                } catch (Exception e) {\n+                    LOG.error(\"Message synchronization failure\", e);\n+                }\n+            }\n+            if (processor != null) {\n+                processor.run(Status.OK());\n+            }\n+            iterator.next();\n+        }\n+    }\n+\n+\n+    @Override\n+    public void onSnapshotSave(final SnapshotWriter writer, final Closure done) {\n+        if (!StringUtils.equals(StoreMode.RAFT.getName(), mode)) {\n+            return;\n+        }\n+        Map<String, Object> maps = new HashMap<>();\n+        RaftSessionManager raftSessionManager = (RaftSessionManager)SessionHolder.getRootSessionManager();\n+        Map<String, GlobalSession> sessionMap = raftSessionManager.getSessionMap();\n+        Map<String, byte[]> sessionByteMap = new HashMap<>();\n+        sessionMap.forEach((k, v) -> sessionByteMap.put(v.getXid(), v.encode()));\n+        maps.put(ROOT_SESSION_MANAGER_NAME, sessionByteMap);\n+        ConcurrentMap<String/* resourceId */, ConcurrentMap<String/* tableName */,\n+            ConcurrentMap<Integer/* bucketId */, FileLocker.BucketLockMap>>>\n+            LOCK_MAP = FileLocker.LOCK_MAP;\n+        maps.put(\"LOCK_MAP\", LOCK_MAP);\n+        LOG.info(\"sessionmap size:{},lock map size:{}\",sessionMap.size(), LOCK_MAP.size());\n+        if (maps.isEmpty()) {\n+            return;\n+        }\n+        Utils.runInThread(() -> {\n+            final RaftSnapshotFile snapshot = new RaftSnapshotFile(writer.getPath() + File.separator + \"data\");\n+            if (snapshot.save(maps)) {\n+                if (writer.addFile(\"data\")) {\n+                    done.run(Status.OK());\n+                } else {\n+                    done.run(new Status(RaftError.EIO, \"Fail to add file to writer\"));\n+                }\n+            } else {\n+                done.run(new Status(RaftError.EIO, \"Fail to save counter snapshot %s\", snapshot.getPath()));\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public boolean onSnapshotLoad(final SnapshotReader reader) {\n+        if (!StringUtils.equals(StoreMode.RAFT.getName(), mode)) {\n+            return false;\n+        }\n+        if (isLeader()) {\n+            LOG.warn(\"Leader is not supposed to load snapshot\");\n+            return false;\n+        }\n+        if (reader.getFileMeta(\"data\") == null) {\n+            LOG.error(\"Fail to find data file in {}\", reader.getPath());\n+            return false;\n+        }\n+        final RaftSnapshotFile snapshot = new RaftSnapshotFile(reader.getPath() + File.separator + \"data\");\n+        try {\n+            Map<String, Object> maps = snapshot.load();\n+            RaftSessionManager raftSessionManager = (RaftSessionManager)SessionHolder.getRootSessionManager();\n+            FileLocker.LOCK_MAP.putAll((Map<? extends String,\n+                ? extends ConcurrentMap<String, ConcurrentMap<Integer, FileLocker.BucketLockMap>>>)maps\n+                    .get(\"LOCK_MAP\"));\n+            Map<String, byte[]> sessionByteMap = (Map<String, byte[]>)maps.get(ROOT_SESSION_MANAGER_NAME);\n+            Map<String, GlobalSession> rootSessionMap = raftSessionManager.getSessionMap();\n+            if (!sessionByteMap.isEmpty()) {\n+                Map<String, GlobalSession> sessionMap = new HashMap<>();\n+                sessionByteMap.forEach((k, v) -> {\n+                    GlobalSession session = new GlobalSession();\n+                    session.decode(v);\n+                    sessionMap.put(k, session);\n+                });\n+                rootSessionMap.putAll(sessionMap);\n+                sessionMap.forEach((k, v) -> {\n+                    GlobalStatus status = v.getStatus();\n+                    try {\n+                        if (status == GlobalStatus.AsyncCommitting) {\n+                            SessionHolder.getAsyncCommittingSessionManager().addGlobalSession(v);\n+                        } else if (status == GlobalStatus.CommitRetrying) {\n+                            SessionHolder.getRetryCommittingSessionManager().addGlobalSession(v);\n+                        } else if (status == GlobalStatus.RollbackRetrying) {\n+                            SessionHolder.getRetryRollbackingSessionManager().addGlobalSession(v);\n+                        }\n+                    } catch (TransactionException e) {\n+                        e.printStackTrace();\n+                    }\n+                });\n+            }\n+            return true;\n+        } catch (final Exception e) {\n+            LOG.error(\"Fail to load snapshot from {}\", snapshot.getPath());\n+            return false;\n+        }\n+\n+    }\n+\n+\n+    @Override\n+    public void onLeaderStart(final long term) {\n+        this.leaderTerm.set(term);\n+        if (RaftServerFactory.getInstance().isRaftMode()) {\n+            RaftSessionManager raftSessionManager = (RaftSessionManager)SessionHolder.getRootSessionManager();\n+            Map<String, GlobalSession> retryRollbackingMap =\n+                ((RaftSessionManager)SessionHolder.getRetryRollbackingSessionManager()).getSessionMap();\n+            Map<String, GlobalSession> sessionMap = raftSessionManager.getSessionMap();\n+            sessionMap.forEach((k, v) -> {\n+                GlobalStatus status = v.getStatus();\n+                if (status == GlobalStatus.RollbackRetrying || status == GlobalStatus.Rollbacking\n+                    || status == GlobalStatus.TimeoutRollbacking || status == GlobalStatus.TimeoutRollbackRetrying) {\n+                    retryRollbackingMap.computeIfAbsent(v.getXid(), session -> {\n+                        v.addSessionLifecycleListener(SessionHolder.getRetryRollbackingSessionManager());\n+                        return v;\n+                    });\n+                }\n+            });\n+        }\n+        super.onLeaderStart(term);\n+    }\n+\n+    @Override\n+    public void onLeaderStop(final Status status) {\n+        this.leaderTerm.set(-1);\n+        super.onLeaderStop(status);\n+    }\n+\n+    private void onExecuteRaft(RaftSessionSyncMsg msg) throws TransactionException {\n+        RaftSessionSyncMsg.MsgType msgType = msg.getMsgType();\n+        SessionManager sessionManager = null;\n+        String sessionName = msg.getSessionName();\n+        Boolean rootManager = false;\n+        if (Objects.equals(sessionName, ROOT_SESSION_MANAGER_NAME)) {\n+            sessionManager = SessionHolder.getRootSessionManager();\n+            rootManager = true;\n+        } else if (Objects.equals(sessionName, ASYNC_COMMITTING_SESSION_MANAGER_NAME)) {\n+            sessionManager = SessionHolder.getAsyncCommittingSessionManager();\n+        } else if (Objects.equals(sessionName, RETRY_COMMITTING_SESSION_MANAGER_NAME)) {\n+            sessionManager = SessionHolder.getRetryCommittingSessionManager();\n+        } else if (Objects.equals(sessionName, RETRY_ROLLBACKING_SESSION_MANAGER_NAME)) {\n+            sessionManager = SessionHolder.getRetryRollbackingSessionManager();\n+        }\n+        RaftSessionManager raftSessionManager = sessionManager != null ? (RaftSessionManager)sessionManager : null;\n+        LOG.info(\"state machine synchronization,task:{},sessionManager:{}\", msgType,\n+            sessionName != null ? sessionName : ROOT_SESSION_MANAGER_NAME);\n+        if (ADD_GLOBAL_SESSION.equals(msgType)) {\n+            GlobalSession globalSession;\n+            if (!rootManager) {\n+                globalSession =\n+                    SessionHolder.getRootSessionManager().findGlobalSession(msg.getGlobalSession().getXid());\n+            } else {\n+                globalSession = SessionConverter.convertGlobalSession(msg.getGlobalSession());\n+            }\n+            raftSessionManager.getFileSessionManager().addGlobalSession(globalSession);\n+        } else if (ACQUIRE_LOCK.equals(msgType)) {\n+            GlobalSession globalSession =\n+                SessionHolder.getRootSessionManager().findGlobalSession(msg.getBranchSession().getXid());\n+            BranchSession branchSession = globalSession.getBranch(msg.getBranchSession().getBranchId());\n+            boolean include = false;\n+            if (branchSession != null) {\n+                include = true;\n+                branchSession.setLockKey(msg.getBranchSession().getLockKey());\n+            } else {\n+                branchSession = SessionConverter.convertBranchSession(msg.getBranchSession());\n+            }\n+            Boolean owner = raftLockManager.acquireLock(branchSession);\n+            if (owner && !include) {\n+                globalSession.add(branchSession);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ae70276b7236a52d00129d3e1707dff5445a0e"}, "originalPosition": 285}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec697691a747e614a301b99298662ba9ccffbede", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/ec697691a747e614a301b99298662ba9ccffbede", "committedDate": "2020-12-04T02:26:51Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0c0296f982bfbd4a5eb0b6a7a4f6bfa7d1728aa", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/f0c0296f982bfbd4a5eb0b6a7a4f6bfa7d1728aa", "committedDate": "2020-12-04T09:11:12Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e18d55df50003f632665bf4c99fe0d55c9b8396e", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/e18d55df50003f632665bf4c99fe0d55c9b8396e", "committedDate": "2020-12-10T03:11:27Z", "message": "Merge branch 'develop' of https://github.com/seata/seata into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b7d28a2f07610ebb0233b8ff3b3a4414d61187b", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/7b7d28a2f07610ebb0233b8ff3b3a4414d61187b", "committedDate": "2020-12-10T03:17:35Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b668cb41c5da2450f66cbf00c235373a09cfc79", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/3b668cb41c5da2450f66cbf00c235373a09cfc79", "committedDate": "2020-12-14T03:29:13Z", "message": "Merge branch 'develop' of https://github.com/seata/seata into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f59e85af2bc24d87aef2b118245b70ffa1155257", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/f59e85af2bc24d87aef2b118245b70ffa1155257", "committedDate": "2020-12-14T03:34:44Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91f7de6bda1e2387dff1711e365b468c67fd9785", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/91f7de6bda1e2387dff1711e365b468c67fd9785", "committedDate": "2020-12-14T07:35:05Z", "message": "Merge branch 'develop' of https://github.com/seata/seata into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44bb473378502d30cc72217d9be8492a1ce1d4c4", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/44bb473378502d30cc72217d9be8492a1ce1d4c4", "committedDate": "2020-12-14T08:12:48Z", "message": "formatting code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9eae40a0d297d3c564f07f99bac4ae9b5810ce4d", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/9eae40a0d297d3c564f07f99bac4ae9b5810ce4d", "committedDate": "2020-12-14T08:44:54Z", "message": "formatting code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03eacb9eb92e67f82e62b79f77870753aa5a8446", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/03eacb9eb92e67f82e62b79f77870753aa5a8446", "committedDate": "2020-12-15T07:15:46Z", "message": "resolve the conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c884d90debdbb097338ec2e513c60f9cee751bd", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/6c884d90debdbb097338ec2e513c60f9cee751bd", "committedDate": "2020-12-27T14:44:52Z", "message": "update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b83235bd98515fd172d253ee375fe751841e629a", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/b83235bd98515fd172d253ee375fe751841e629a", "committedDate": "2020-12-31T10:47:10Z", "message": "Merge branch 'develop' of https://github.com/seata/seata into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b9b6f3ac05220b29e35217ae7b5f1c4cc1d4a1b", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/2b9b6f3ac05220b29e35217ae7b5f1c4cc1d4a1b", "committedDate": "2020-12-31T10:47:22Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1550e838d54344ac00409db9970b270cbe248a5", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/a1550e838d54344ac00409db9970b270cbe248a5", "committedDate": "2021-01-08T17:18:36Z", "message": "update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3863d5a59f3d08badb4cf4ab305f6771e65d6dd5", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/3863d5a59f3d08badb4cf4ab305f6771e65d6dd5", "committedDate": "2021-01-08T17:30:28Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f25e363c443ad878231fed237fbb3fd07581ab57", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/f25e363c443ad878231fed237fbb3fd07581ab57", "committedDate": "2021-02-23T05:32:15Z", "message": "update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "884539a6f1df252a1d3e66db795e67b6375289ee", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/884539a6f1df252a1d3e66db795e67b6375289ee", "committedDate": "2021-02-23T09:07:21Z", "message": "RAFT mode does not require additional transaction data to be stored on disk"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac89fec479a51dd74127ab97f6334153b214e70b", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/ac89fec479a51dd74127ab97f6334153b214e70b", "committedDate": "2021-02-23T10:07:25Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a52576d5f55d633c67254372ff89b5bf45e371c", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/8a52576d5f55d633c67254372ff89b5bf45e371c", "committedDate": "2021-03-02T02:32:17Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49e072089c440793e45986a3bb888e122d6305eb", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/49e072089c440793e45986a3bb888e122d6305eb", "committedDate": "2021-03-02T03:38:07Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3952d829e9c8a6d3a51779683773f796a89fb5a", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/d3952d829e9c8a6d3a51779683773f796a89fb5a", "committedDate": "2021-03-19T02:19:28Z", "message": "Merge branch 'develop' into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0856052c2af6e8b67a0c4fc56497d0c514238f57", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/0856052c2af6e8b67a0c4fc56497d0c514238f57", "committedDate": "2021-03-27T10:57:51Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e930e6e774adad29ca7ae0f0d8292b21c41aa37", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/8e930e6e774adad29ca7ae0f0d8292b21c41aa37", "committedDate": "2021-03-27T13:11:25Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b21450a233facdd4bfeef71875f9c1c892f650b", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/8b21450a233facdd4bfeef71875f9c1c892f650b", "committedDate": "2021-04-03T16:15:54Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15b26ff0f91774abbee6b1aa0bfdeee801700644", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/15b26ff0f91774abbee6b1aa0bfdeee801700644", "committedDate": "2021-04-04T05:03:59Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "462c8e0b8e320c4bbcb2d2a8d1646c14633db81d", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/462c8e0b8e320c4bbcb2d2a8d1646c14633db81d", "committedDate": "2021-04-04T05:13:14Z", "message": "Merge branch 'develop' into 0904"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de42d7eb88a49c6e4838291ca480f4f99031557c", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/de42d7eb88a49c6e4838291ca480f4f99031557c", "committedDate": "2021-04-07T06:24:40Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f87bb436199dee4a060aa0194ff1902990a3d640", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/f87bb436199dee4a060aa0194ff1902990a3d640", "committedDate": "2021-04-07T16:03:34Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6eb50d9c85772f7599044e76cb41a487437007eb", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/6eb50d9c85772f7599044e76cb41a487437007eb", "committedDate": "2021-04-09T13:27:11Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fda1ea15a2c90739cac14cf1293db7cf04bb47a", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/4fda1ea15a2c90739cac14cf1293db7cf04bb47a", "committedDate": "2021-04-09T15:14:14Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f41fc02ec6ac69a37bfe4cc7d2b1c23a3acc4ea", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/2f41fc02ec6ac69a37bfe4cc7d2b1c23a3acc4ea", "committedDate": "2021-04-09T16:09:07Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82f02d8e9d0f9a6b33d45d10a7736d996717d75d", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/82f02d8e9d0f9a6b33d45d10a7736d996717d75d", "committedDate": "2021-04-10T05:04:30Z", "message": "\u4f18\u5316\u4ee3\u7801,\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u540c\u6b65\u4f20\u8f93\u5185\u5bb9,\u52a0\u5feb\u72b6\u6001\u673a\u7684\u8fd0\u884c"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dc5147ba4e85071f641f99e7d584eb895cde444", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/7dc5147ba4e85071f641f99e7d584eb895cde444", "committedDate": "2021-04-10T05:08:37Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b4177fb783a7bdbd1b5d33c3c40ea8dcba50161", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/8b4177fb783a7bdbd1b5d33c3c40ea8dcba50161", "committedDate": "2021-04-10T06:06:32Z", "message": "optimize code"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3640, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}