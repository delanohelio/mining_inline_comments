{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNjczNjE3", "number": 3062, "title": "optimize: refactor the redis session store", "bodyText": "\u2160. Describe what this PR did\nrefactor:the redis session store\n\u2161. Does this pull request fix one issue?\n\nfixes #3082\n\u2162. Why don't you add test cases (unit test/integration test)?\n\u2163. Describe how to verify it\n\u2164. Special notes for reviews", "createdAt": "2020-08-26T06:12:57Z", "url": "https://github.com/seata/seata/pull/3062", "merged": true, "mergeCommit": {"oid": "fdf648470cf6e9dabe145b2be0e531954a310a42"}, "closed": true, "closedAt": "2020-10-19T09:46:34Z", "author": {"login": "lightClouds917"}, "timelineItems": {"totalCount": 79, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABam1qczAH2gAyNDczNjczNjE3OmU5ZTcyNTUwZmRmNTk0NmIwNTVkNWIwODkxNzhiZjMyOTk2NmVlNmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUA_2sAFqTUxMTU4ODk1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e9e72550fdf5946b055d5b089178bf329966ee6b", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/e9e72550fdf5946b055d5b089178bf329966ee6b", "committedDate": "2019-04-30T08:44:14Z", "message": "release 0.5.1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f017c6b875c304f75fe34be37f9d4cf75e2f45f4", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/f017c6b875c304f75fe34be37f9d4cf75e2f45f4", "committedDate": "2019-05-17T10:12:34Z", "message": "release 0.5.2\n\nrelease 0.5.2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ca3332d67c2f0d43ce7d854e6bbb04e48bcae8b", "author": {"user": {"login": "zhangthen", "name": null}}, "url": "https://github.com/seata/seata/commit/7ca3332d67c2f0d43ce7d854e6bbb04e48bcae8b", "committedDate": "2019-05-24T09:47:44Z", "message": "Release 0.6.0 (#1106)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc088cb9551d58acdf343f66166985e8fa8712fd", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/dc088cb9551d58acdf343f66166985e8fa8712fd", "committedDate": "2019-05-27T02:27:47Z", "message": "Revert \"Release 0.6.0 (#1106)\" (#1107)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da96029455843dfd8ace1c085e8a170f05ad659a", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/da96029455843dfd8ace1c085e8a170f05ad659a", "committedDate": "2019-05-27T02:40:28Z", "message": "re-merging 0.6.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca567ef724cc53ef624a42718997853fbdddae54", "author": {"user": {"login": "zhangthen", "name": null}}, "url": "https://github.com/seata/seata/commit/ca567ef724cc53ef624a42718997853fbdddae54", "committedDate": "2019-05-31T07:33:13Z", "message": "Release 0.6.1\n\nRelease 0.6.1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b90f935a27a928a8a75e8c11a4687235f1507d9", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/1b90f935a27a928a8a75e8c11a4687235f1507d9", "committedDate": "2019-07-12T07:12:02Z", "message": "release 0.7.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39e4d892ada776f35c78528c85e773dd6ac8f5f1", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/39e4d892ada776f35c78528c85e773dd6ac8f5f1", "committedDate": "2019-07-15T12:01:04Z", "message": "release 0.7.1\n\nrelease 0.7.1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09456818ecd6644439366647021b683516225cb3", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/09456818ecd6644439366647021b683516225cb3", "committedDate": "2019-08-16T08:13:03Z", "message": "release 0.8.0\n\nrelease 0.8.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ffa29044209f04c222eab5445c8b01ea6295522", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/9ffa29044209f04c222eab5445c8b01ea6295522", "committedDate": "2019-09-18T09:39:19Z", "message": "release  0.8.1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a174ed5594d405ba26706c355327ac0ac8017b27", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/a174ed5594d405ba26706c355327ac0ac8017b27", "committedDate": "2019-10-16T05:38:49Z", "message": "release 0.9.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bdbc44e524263a47aa51a1a2a648b120456ee5b", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/5bdbc44e524263a47aa51a1a2a648b120456ee5b", "committedDate": "2019-12-20T16:59:09Z", "message": "[release] release 1.0.0\n\n[release] release 1.0.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f990a575328504ef4dece32a93383f1debc0d7f2", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/f990a575328504ef4dece32a93383f1debc0d7f2", "committedDate": "2020-02-19T15:13:24Z", "message": "release: release 1.1.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04d0568c0e89fd77c5a8c22a9d39025a0be41051", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/04d0568c0e89fd77c5a8c22a9d39025a0be41051", "committedDate": "2020-04-21T04:40:55Z", "message": "Merge pull request #2582 from seata/1.2.0\n\nrelease 1.2.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e2a4247a82e76d51a56485b46c0d948a0c1ea13", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/2e2a4247a82e76d51a56485b46c0d948a0c1ea13", "committedDate": "2020-07-15T16:28:39Z", "message": "release: release 1.3.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9faed6ba5feb8548d7f74b4e262c2ef4358f6d47", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/9faed6ba5feb8548d7f74b4e262c2ef4358f6d47", "committedDate": "2020-08-26T06:08:57Z", "message": "refactor:the redis session store"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fde56757241724949d95dbaa15f0fc9c8261feed", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/fde56757241724949d95dbaa15f0fc9c8261feed", "committedDate": "2020-08-26T11:07:54Z", "message": "add:add license info"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b5e5aef3fda289d0c89dba0f88b57bf1f8a423c", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/0b5e5aef3fda289d0c89dba0f88b57bf1f8a423c", "committedDate": "2020-08-26T12:39:01Z", "message": "optimize:optimize the constants"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f5a421140dfebd1b0b387135b2af49cd6e8757c", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/7f5a421140dfebd1b0b387135b2af49cd6e8757c", "committedDate": "2020-08-27T03:52:11Z", "message": "revert:the .conf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c070883d17f399b7e26593f2b6a0aed09610e2c1", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/c070883d17f399b7e26593f2b6a0aed09610e2c1", "committedDate": "2020-08-27T03:55:34Z", "message": "revert:the file.conf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e669dfe620433856f93a38a5816681702827cdf2", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/e669dfe620433856f93a38a5816681702827cdf2", "committedDate": "2020-08-30T14:46:37Z", "message": "optimize:optimize the map"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "981027611019d3b848261247b89122b8cfcaea9f", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/981027611019d3b848261247b89122b8cfcaea9f", "committedDate": "2020-08-31T10:31:29Z", "message": "Merge branch 'develop' of github.com:seata/seata into refactor_redis_session"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2083aeda43f45c33e272c25435d3d6e312d65b1", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/c2083aeda43f45c33e272c25435d3d6e312d65b1", "committedDate": "2020-09-02T12:42:58Z", "message": "optimize:add the transaction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21c72cb96a2b36a3686f3d65cc862fb25e2bb005", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/21c72cb96a2b36a3686f3d65cc862fb25e2bb005", "committedDate": "2020-09-03T00:59:15Z", "message": "fix:the BeanUtils code format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "303e9d20765fe65c2a374c48df59b3e770dac2e6", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/303e9d20765fe65c2a374c48df59b3e770dac2e6", "committedDate": "2020-09-03T01:49:58Z", "message": "fix: code format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e1c0f165ee00f862411f5231232fba5ed9c3dc9", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/0e1c0f165ee00f862411f5231232fba5ed9c3dc9", "committedDate": "2020-09-03T01:59:22Z", "message": "optimize:lpush -> rpush"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c7cd456b2932b82aac05bdc3f08cd2bea491ce2", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/1c7cd456b2932b82aac05bdc3f08cd2bea491ce2", "committedDate": "2020-09-03T11:07:14Z", "message": "add:add the test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12a7990aba134f4ee8df914dad3ea4aa7ebdb533", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/12a7990aba134f4ee8df914dad3ea4aa7ebdb533", "committedDate": "2020-09-03T11:07:22Z", "message": "Merge branch 'develop' of github.com:seata/seata into refactor_redis_session"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75f50babee878921a49caba17d43102e854f29f1", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/75f50babee878921a49caba17d43102e854f29f1", "committedDate": "2020-09-03T12:59:44Z", "message": "fix:the code check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "786bb5c023069e4b811253eb79054b54ba2fe539", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/786bb5c023069e4b811253eb79054b54ba2fe539", "committedDate": "2020-09-04T01:03:24Z", "message": "optimize:the file name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f11b274a062caa3c5859152dd6efc509938e548", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/9f11b274a062caa3c5859152dd6efc509938e548", "committedDate": "2020-09-06T14:10:17Z", "message": "optimize:add the watch to the update global"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "211fe5b0471c55cc3efde1e6156074b81124c4bc", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/211fe5b0471c55cc3efde1e6156074b81124c4bc", "committedDate": "2020-09-07T11:16:54Z", "message": "optimze the utils,add annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3848e444452906b9c9dec3089fb366a2b5747873", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/3848e444452906b9c9dec3089fb366a2b5747873", "committedDate": "2020-09-07T11:29:16Z", "message": "fix the date"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05cff09c8b94ca1a99f4d27467cadb06621ec8a7", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/05cff09c8b94ca1a99f4d27467cadb06621ec8a7", "committedDate": "2020-09-07T11:45:52Z", "message": "fix:the multi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe57b7a4a804a0310e4ac2f989267b52f544ceab", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/fe57b7a4a804a0310e4ac2f989267b52f544ceab", "committedDate": "2020-09-07T12:12:34Z", "message": "optimize the code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58392aec0cc6d2507c2dd49680f16201921397e8", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/58392aec0cc6d2507c2dd49680f16201921397e8", "committedDate": "2020-09-07T12:14:41Z", "message": "optimize the code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4e63885ba5ccd953705acbd0efe10a7020565f5", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/a4e63885ba5ccd953705acbd0efe10a7020565f5", "committedDate": "2020-09-10T03:07:31Z", "message": "add:the test for beanutils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f14c6a779c8163897260a9e9d2daf897a061b9b", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/3f14c6a779c8163897260a9e9d2daf897a061b9b", "committedDate": "2020-09-10T08:00:28Z", "message": "add:the test for sessionConverter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "911a190090661f32bd97098204ab76e169249fbb", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/911a190090661f32bd97098204ab76e169249fbb", "committedDate": "2020-09-10T08:50:05Z", "message": "add:test for collectionutil"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47246d6042b0a9475bacbf4e45bfcae8ab857df9", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/47246d6042b0a9475bacbf4e45bfcae8ab857df9", "committedDate": "2020-09-10T09:47:49Z", "message": "add:test for redistransactionstoremanager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c96f9f63188725f36c9b4a5141063681da3aa76a", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/c96f9f63188725f36c9b4a5141063681da3aa76a", "committedDate": "2020-09-10T11:34:09Z", "message": "add:test for redistransactionstoremanager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "039e1f71e36a16f01f9e0ea407d542ceafca7802", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/039e1f71e36a16f01f9e0ea407d542ceafca7802", "committedDate": "2020-09-10T12:38:50Z", "message": "add:test for redistransactionstoremanager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27d1e57c8c77996c685e1ce4211792c4ed94b780", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/27d1e57c8c77996c685e1ce4211792c4ed94b780", "committedDate": "2020-09-11T07:20:35Z", "message": "add:test for redistransactionstoremanager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "667c839709819c0280456999b7594d9fbf78c2ec", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/667c839709819c0280456999b7594d9fbf78c2ec", "committedDate": "2020-09-14T15:25:15Z", "message": "Merge branch 'develop' into refactor_redis_session"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0077d56215a24f24381aa50f6ee82434c0749210", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/0077d56215a24f24381aa50f6ee82434c0749210", "committedDate": "2020-09-15T02:17:32Z", "message": "Merge branch 'develop' into refactor_redis_session"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66f28c784c4c0b5b2a35cd56d2b37896dee734aa", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/66f28c784c4c0b5b2a35cd56d2b37896dee734aa", "committedDate": "2020-09-17T14:28:09Z", "message": "Merge branch 'develop' into refactor_redis_session"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNjY0MTQ4", "url": "https://github.com/seata/seata/pull/3062#pullrequestreview-490664148", "createdAt": "2020-09-17T14:32:06Z", "commit": {"oid": "0077d56215a24f24381aa50f6ee82434c0749210"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDozMjoyNVrOHTlPiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTozNToxN1rOHTofyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5NTE3Ng==", "bodyText": "Java packages should be at the top level", "url": "https://github.com/seata/seata/pull/3062#discussion_r490295176", "createdAt": "2020-09-17T14:32:25Z", "author": {"login": "a364176773"}, "path": "server/src/main/java/io/seata/server/storage/db/store/DataBaseTransactionStoreManager.java", "diffHunk": "@@ -15,6 +15,7 @@\n  */\n package io.seata.server.storage.db.store;\n \n+import io.seata.server.storage.SessionConverter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66f28c784c4c0b5b2a35cd56d2b37896dee734aa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5NTk0Ng==", "bodyText": "Java packages should be at the top level", "url": "https://github.com/seata/seata/pull/3062#discussion_r490295946", "createdAt": "2020-09-17T14:33:14Z", "author": {"login": "a364176773"}, "path": "server/src/test/java/io/seata/server/session/redis/RedisSessionManagerTest.java", "diffHunk": "@@ -0,0 +1,339 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package io.seata.server.session.redis;\n+\n+import io.seata.server.session.SessionCondition;\n+import java.io.IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66f28c784c4c0b5b2a35cd56d2b37896dee734aa"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5NjU2Nw==", "bodyText": "Java packages should be at the top level", "url": "https://github.com/seata/seata/pull/3062#discussion_r490296567", "createdAt": "2020-09-17T14:33:52Z", "author": {"login": "a364176773"}, "path": "server/src/test/java/io/seata/server/session/redis/SessionConverterTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server.session.redis;\n+\n+import io.seata.core.model.BranchStatus;\n+import io.seata.core.model.BranchType;\n+import io.seata.core.model.GlobalStatus;\n+import io.seata.core.store.BranchTransactionDO;\n+import io.seata.core.store.GlobalTransactionDO;\n+import io.seata.server.session.BranchSession;\n+import io.seata.server.session.GlobalSession;\n+import io.seata.server.storage.SessionConverter;\n+import java.util.Date;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66f28c784c4c0b5b2a35cd56d2b37896dee734aa"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5NzI0OA==", "bodyText": "Java packages should be at the top level", "url": "https://github.com/seata/seata/pull/3062#discussion_r490297248", "createdAt": "2020-09-17T14:34:37Z", "author": {"login": "a364176773"}, "path": "server/src/main/java/io/seata/server/storage/redis/store/RedisTransactionStoreManager.java", "diffHunk": "@@ -15,63 +15,66 @@\n  */\n package io.seata.server.storage.redis.store;\n \n+import io.seata.common.exception.RedisException;\n+import io.seata.common.util.BeanUtils;\n+import io.seata.server.storage.SessionConverter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66f28c784c4c0b5b2a35cd56d2b37896dee734aa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMwMjUzNg==", "bodyText": "why not use pipeline", "url": "https://github.com/seata/seata/pull/3062#discussion_r490302536", "createdAt": "2020-09-17T14:40:13Z", "author": {"login": "a364176773"}, "path": "server/src/main/java/io/seata/server/storage/redis/store/RedisTransactionStoreManager.java", "diffHunk": "@@ -90,99 +93,251 @@ public static RedisTransactionStoreManager getInstance() {\n     @Override\n     public boolean writeSession(LogOperation logOperation, SessionStorable session) {\n         if (LogOperation.GLOBAL_ADD.equals(logOperation)) {\n-            return insertOrUpdateGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return insertGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.GLOBAL_UPDATE.equals(logOperation)) {\n-            return insertOrUpdateGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return updateGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.GLOBAL_REMOVE.equals(logOperation)) {\n-            return deleteGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return deleteGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.BRANCH_ADD.equals(logOperation)) {\n-            return insertOrUpdateBranchTransactionDO(convertBranchTransactionDO(session));\n+            return insertBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else if (LogOperation.BRANCH_UPDATE.equals(logOperation)) {\n-            return insertOrUpdateBranchTransactionDO(convertBranchTransactionDO(session));\n+            return updateBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else if (LogOperation.BRANCH_REMOVE.equals(logOperation)) {\n-            return deleteBranchTransactionDO(convertBranchTransactionDO(session));\n+            return deleteBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else {\n             throw new StoreException(\"Unknown LogOperation:\" + logOperation.name());\n         }\n     }\n \n+    /**\n+     * Insert branch transaction\n+     * @param branchTransactionDO\n+     * @return the boolean\n+     */\n+    private boolean insertBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+        String branchKey = buildBranchKey(branchTransactionDO.getBranchId());\n+        String branchListKey = buildBranchListKeyByXid(branchTransactionDO.getXid());\n+        try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n+            Date now = new Date();\n+            branchTransactionDO.setGmtCreate(now);\n+            branchTransactionDO.setGmtModified(now);\n+            String hmset = jedis.hmset(branchKey, BeanUtils.objectToMap(branchTransactionDO));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66f28c784c4c0b5b2a35cd56d2b37896dee734aa"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMwOTU5OA==", "bodyText": "Is this possibility now?", "url": "https://github.com/seata/seata/pull/3062#discussion_r490309598", "createdAt": "2020-09-17T14:47:12Z", "author": {"login": "a364176773"}, "path": "server/src/main/java/io/seata/server/storage/redis/store/RedisTransactionStoreManager.java", "diffHunk": "@@ -90,99 +93,251 @@ public static RedisTransactionStoreManager getInstance() {\n     @Override\n     public boolean writeSession(LogOperation logOperation, SessionStorable session) {\n         if (LogOperation.GLOBAL_ADD.equals(logOperation)) {\n-            return insertOrUpdateGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return insertGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.GLOBAL_UPDATE.equals(logOperation)) {\n-            return insertOrUpdateGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return updateGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.GLOBAL_REMOVE.equals(logOperation)) {\n-            return deleteGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return deleteGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.BRANCH_ADD.equals(logOperation)) {\n-            return insertOrUpdateBranchTransactionDO(convertBranchTransactionDO(session));\n+            return insertBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else if (LogOperation.BRANCH_UPDATE.equals(logOperation)) {\n-            return insertOrUpdateBranchTransactionDO(convertBranchTransactionDO(session));\n+            return updateBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else if (LogOperation.BRANCH_REMOVE.equals(logOperation)) {\n-            return deleteBranchTransactionDO(convertBranchTransactionDO(session));\n+            return deleteBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else {\n             throw new StoreException(\"Unknown LogOperation:\" + logOperation.name());\n         }\n     }\n \n+    /**\n+     * Insert branch transaction\n+     * @param branchTransactionDO\n+     * @return the boolean\n+     */\n+    private boolean insertBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+        String branchKey = buildBranchKey(branchTransactionDO.getBranchId());\n+        String branchListKey = buildBranchListKeyByXid(branchTransactionDO.getXid());\n+        try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n+            Date now = new Date();\n+            branchTransactionDO.setGmtCreate(now);\n+            branchTransactionDO.setGmtModified(now);\n+            String hmset = jedis.hmset(branchKey, BeanUtils.objectToMap(branchTransactionDO));\n+            if (OK.equalsIgnoreCase(hmset)) {\n+                Long rpush = jedis.rpush(branchListKey, branchKey);\n+                if (rpush > 0) {\n+                    return true;\n+                } else {\n+                    jedis.del(branchKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66f28c784c4c0b5b2a35cd56d2b37896dee734aa"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMyMDc5Mg==", "bodyText": "why not use pipeline", "url": "https://github.com/seata/seata/pull/3062#discussion_r490320792", "createdAt": "2020-09-17T14:57:52Z", "author": {"login": "a364176773"}, "path": "server/src/main/java/io/seata/server/storage/redis/store/RedisTransactionStoreManager.java", "diffHunk": "@@ -90,99 +93,251 @@ public static RedisTransactionStoreManager getInstance() {\n     @Override\n     public boolean writeSession(LogOperation logOperation, SessionStorable session) {\n         if (LogOperation.GLOBAL_ADD.equals(logOperation)) {\n-            return insertOrUpdateGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return insertGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.GLOBAL_UPDATE.equals(logOperation)) {\n-            return insertOrUpdateGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return updateGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.GLOBAL_REMOVE.equals(logOperation)) {\n-            return deleteGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return deleteGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.BRANCH_ADD.equals(logOperation)) {\n-            return insertOrUpdateBranchTransactionDO(convertBranchTransactionDO(session));\n+            return insertBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else if (LogOperation.BRANCH_UPDATE.equals(logOperation)) {\n-            return insertOrUpdateBranchTransactionDO(convertBranchTransactionDO(session));\n+            return updateBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else if (LogOperation.BRANCH_REMOVE.equals(logOperation)) {\n-            return deleteBranchTransactionDO(convertBranchTransactionDO(session));\n+            return deleteBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else {\n             throw new StoreException(\"Unknown LogOperation:\" + logOperation.name());\n         }\n     }\n \n+    /**\n+     * Insert branch transaction\n+     * @param branchTransactionDO\n+     * @return the boolean\n+     */\n+    private boolean insertBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+        String branchKey = buildBranchKey(branchTransactionDO.getBranchId());\n+        String branchListKey = buildBranchListKeyByXid(branchTransactionDO.getXid());\n+        try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n+            Date now = new Date();\n+            branchTransactionDO.setGmtCreate(now);\n+            branchTransactionDO.setGmtModified(now);\n+            String hmset = jedis.hmset(branchKey, BeanUtils.objectToMap(branchTransactionDO));\n+            if (OK.equalsIgnoreCase(hmset)) {\n+                Long rpush = jedis.rpush(branchListKey, branchKey);\n+                if (rpush > 0) {\n+                    return true;\n+                } else {\n+                    jedis.del(branchKey);\n+                    return false;\n+                }\n+            } else {\n+                return false;\n+            }\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Delete the branch transaction\n+     * @param branchTransactionDO\n+     * @return\n+     */\n     private boolean deleteBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+        String branchKey = buildBranchKey(branchTransactionDO.getBranchId());\n         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n-            String key = getBranchKey(branchTransactionDO.getBranchId());\n-            jedis.del(key);\n-            return true;\n+            String xid = jedis.hget(branchKey, REDIS_KEY_BRANCH_XID);\n+            if (StringUtils.isEmpty(xid)) {\n+                return true;\n+            }\n+            String branchListKey = buildBranchListKeyByXid(branchTransactionDO.getXid());\n+            Long lrem = jedis.lrem(branchListKey, 0, branchKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66f28c784c4c0b5b2a35cd56d2b37896dee734aa"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0Mzc3OA==", "bodyText": "why not use pipeline", "url": "https://github.com/seata/seata/pull/3062#discussion_r490343778", "createdAt": "2020-09-17T15:28:48Z", "author": {"login": "a364176773"}, "path": "server/src/main/java/io/seata/server/storage/redis/store/RedisTransactionStoreManager.java", "diffHunk": "@@ -90,99 +93,251 @@ public static RedisTransactionStoreManager getInstance() {\n     @Override\n     public boolean writeSession(LogOperation logOperation, SessionStorable session) {\n         if (LogOperation.GLOBAL_ADD.equals(logOperation)) {\n-            return insertOrUpdateGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return insertGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.GLOBAL_UPDATE.equals(logOperation)) {\n-            return insertOrUpdateGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return updateGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.GLOBAL_REMOVE.equals(logOperation)) {\n-            return deleteGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return deleteGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.BRANCH_ADD.equals(logOperation)) {\n-            return insertOrUpdateBranchTransactionDO(convertBranchTransactionDO(session));\n+            return insertBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else if (LogOperation.BRANCH_UPDATE.equals(logOperation)) {\n-            return insertOrUpdateBranchTransactionDO(convertBranchTransactionDO(session));\n+            return updateBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else if (LogOperation.BRANCH_REMOVE.equals(logOperation)) {\n-            return deleteBranchTransactionDO(convertBranchTransactionDO(session));\n+            return deleteBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else {\n             throw new StoreException(\"Unknown LogOperation:\" + logOperation.name());\n         }\n     }\n \n+    /**\n+     * Insert branch transaction\n+     * @param branchTransactionDO\n+     * @return the boolean\n+     */\n+    private boolean insertBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+        String branchKey = buildBranchKey(branchTransactionDO.getBranchId());\n+        String branchListKey = buildBranchListKeyByXid(branchTransactionDO.getXid());\n+        try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n+            Date now = new Date();\n+            branchTransactionDO.setGmtCreate(now);\n+            branchTransactionDO.setGmtModified(now);\n+            String hmset = jedis.hmset(branchKey, BeanUtils.objectToMap(branchTransactionDO));\n+            if (OK.equalsIgnoreCase(hmset)) {\n+                Long rpush = jedis.rpush(branchListKey, branchKey);\n+                if (rpush > 0) {\n+                    return true;\n+                } else {\n+                    jedis.del(branchKey);\n+                    return false;\n+                }\n+            } else {\n+                return false;\n+            }\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Delete the branch transaction\n+     * @param branchTransactionDO\n+     * @return\n+     */\n     private boolean deleteBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+        String branchKey = buildBranchKey(branchTransactionDO.getBranchId());\n         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n-            String key = getBranchKey(branchTransactionDO.getBranchId());\n-            jedis.del(key);\n-            return true;\n+            String xid = jedis.hget(branchKey, REDIS_KEY_BRANCH_XID);\n+            if (StringUtils.isEmpty(xid)) {\n+                return true;\n+            }\n+            String branchListKey = buildBranchListKeyByXid(branchTransactionDO.getXid());\n+            Long lrem = jedis.lrem(branchListKey, 0, branchKey);\n+            if (lrem > 0) {\n+                Long del = jedis.del(branchKey);\n+                if (del == 1) {\n+                    return true;\n+                } else {\n+                    jedis.rpush(branchListKey,branchKey);\n+                    return false;\n+                }\n+            }\n+            return false;\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n         }\n     }\n \n-    private boolean insertOrUpdateBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+    /**\n+     * Update the branch transaction\n+     * @param branchTransactionDO\n+     * @return\n+     */\n+    private boolean updateBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+        String branchKey = buildBranchKey(branchTransactionDO.getBranchId());\n         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n-            String key = getBranchKey(branchTransactionDO.getBranchId());\n-            Pipeline pipeline = jedis.pipelined();\n-            if (jedis.get(key) == null) {\n-                pipeline.lpush(getBranchListKeyByXid(branchTransactionDO.getXid()), key);\n+            String previousBranchStatus = jedis.hget(branchKey, REDIS_KEY_BRANCH_STATUS);\n+            if (StringUtils.isEmpty(previousBranchStatus)) {\n+                throw new StoreException(\"Branch transaction is not exist, update branch transaction failed.\");\n+            }\n+            Map<String,String> map = new HashMap<>(2);\n+            map.put(REDIS_KEY_BRANCH_STATUS,String.valueOf(branchTransactionDO.getStatus()));\n+            map.put(REDIS_KEY_BRANCH_GMT_MODIFIED,String.valueOf((new Date()).getTime()));\n+            String hmset = jedis.hmset(branchKey, map);\n+            if (OK.equalsIgnoreCase(hmset)) {\n+                return true;\n             }\n-            pipeline.set(key, JSON.toJSONString(branchTransactionDO));\n-            pipeline.sync();\n-            return true;\n+            return false;\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n         }\n     }\n \n+    /**\n+     * Insert the global transaction.\n+     * @param globalTransactionDO\n+     * @return\n+     */\n+    private boolean insertGlobalTransactionDO(GlobalTransactionDO globalTransactionDO) {\n+        String globalKey = buildGlobalKeyByTransactionId(globalTransactionDO.getTransactionId());\n+        try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n+            Date now = new Date();\n+            globalTransactionDO.setGmtCreate(now);\n+            globalTransactionDO.setGmtModified(now);\n+            String hmset = jedis.hmset(globalKey, BeanUtils.objectToMap(globalTransactionDO));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66f28c784c4c0b5b2a35cd56d2b37896dee734aa"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0NDcxOQ==", "bodyText": "you don't have to do that", "url": "https://github.com/seata/seata/pull/3062#discussion_r490344719", "createdAt": "2020-09-17T15:30:02Z", "author": {"login": "a364176773"}, "path": "server/src/main/java/io/seata/server/storage/redis/store/RedisTransactionStoreManager.java", "diffHunk": "@@ -90,99 +93,251 @@ public static RedisTransactionStoreManager getInstance() {\n     @Override\n     public boolean writeSession(LogOperation logOperation, SessionStorable session) {\n         if (LogOperation.GLOBAL_ADD.equals(logOperation)) {\n-            return insertOrUpdateGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return insertGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.GLOBAL_UPDATE.equals(logOperation)) {\n-            return insertOrUpdateGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return updateGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.GLOBAL_REMOVE.equals(logOperation)) {\n-            return deleteGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return deleteGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.BRANCH_ADD.equals(logOperation)) {\n-            return insertOrUpdateBranchTransactionDO(convertBranchTransactionDO(session));\n+            return insertBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else if (LogOperation.BRANCH_UPDATE.equals(logOperation)) {\n-            return insertOrUpdateBranchTransactionDO(convertBranchTransactionDO(session));\n+            return updateBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else if (LogOperation.BRANCH_REMOVE.equals(logOperation)) {\n-            return deleteBranchTransactionDO(convertBranchTransactionDO(session));\n+            return deleteBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else {\n             throw new StoreException(\"Unknown LogOperation:\" + logOperation.name());\n         }\n     }\n \n+    /**\n+     * Insert branch transaction\n+     * @param branchTransactionDO\n+     * @return the boolean\n+     */\n+    private boolean insertBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+        String branchKey = buildBranchKey(branchTransactionDO.getBranchId());\n+        String branchListKey = buildBranchListKeyByXid(branchTransactionDO.getXid());\n+        try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n+            Date now = new Date();\n+            branchTransactionDO.setGmtCreate(now);\n+            branchTransactionDO.setGmtModified(now);\n+            String hmset = jedis.hmset(branchKey, BeanUtils.objectToMap(branchTransactionDO));\n+            if (OK.equalsIgnoreCase(hmset)) {\n+                Long rpush = jedis.rpush(branchListKey, branchKey);\n+                if (rpush > 0) {\n+                    return true;\n+                } else {\n+                    jedis.del(branchKey);\n+                    return false;\n+                }\n+            } else {\n+                return false;\n+            }\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Delete the branch transaction\n+     * @param branchTransactionDO\n+     * @return\n+     */\n     private boolean deleteBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+        String branchKey = buildBranchKey(branchTransactionDO.getBranchId());\n         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n-            String key = getBranchKey(branchTransactionDO.getBranchId());\n-            jedis.del(key);\n-            return true;\n+            String xid = jedis.hget(branchKey, REDIS_KEY_BRANCH_XID);\n+            if (StringUtils.isEmpty(xid)) {\n+                return true;\n+            }\n+            String branchListKey = buildBranchListKeyByXid(branchTransactionDO.getXid());\n+            Long lrem = jedis.lrem(branchListKey, 0, branchKey);\n+            if (lrem > 0) {\n+                Long del = jedis.del(branchKey);\n+                if (del == 1) {\n+                    return true;\n+                } else {\n+                    jedis.rpush(branchListKey,branchKey);\n+                    return false;\n+                }\n+            }\n+            return false;\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n         }\n     }\n \n-    private boolean insertOrUpdateBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+    /**\n+     * Update the branch transaction\n+     * @param branchTransactionDO\n+     * @return\n+     */\n+    private boolean updateBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+        String branchKey = buildBranchKey(branchTransactionDO.getBranchId());\n         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n-            String key = getBranchKey(branchTransactionDO.getBranchId());\n-            Pipeline pipeline = jedis.pipelined();\n-            if (jedis.get(key) == null) {\n-                pipeline.lpush(getBranchListKeyByXid(branchTransactionDO.getXid()), key);\n+            String previousBranchStatus = jedis.hget(branchKey, REDIS_KEY_BRANCH_STATUS);\n+            if (StringUtils.isEmpty(previousBranchStatus)) {\n+                throw new StoreException(\"Branch transaction is not exist, update branch transaction failed.\");\n+            }\n+            Map<String,String> map = new HashMap<>(2);\n+            map.put(REDIS_KEY_BRANCH_STATUS,String.valueOf(branchTransactionDO.getStatus()));\n+            map.put(REDIS_KEY_BRANCH_GMT_MODIFIED,String.valueOf((new Date()).getTime()));\n+            String hmset = jedis.hmset(branchKey, map);\n+            if (OK.equalsIgnoreCase(hmset)) {\n+                return true;\n             }\n-            pipeline.set(key, JSON.toJSONString(branchTransactionDO));\n-            pipeline.sync();\n-            return true;\n+            return false;\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n         }\n     }\n \n+    /**\n+     * Insert the global transaction.\n+     * @param globalTransactionDO\n+     * @return\n+     */\n+    private boolean insertGlobalTransactionDO(GlobalTransactionDO globalTransactionDO) {\n+        String globalKey = buildGlobalKeyByTransactionId(globalTransactionDO.getTransactionId());\n+        try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n+            Date now = new Date();\n+            globalTransactionDO.setGmtCreate(now);\n+            globalTransactionDO.setGmtModified(now);\n+            String hmset = jedis.hmset(globalKey, BeanUtils.objectToMap(globalTransactionDO));\n+            if (OK.equalsIgnoreCase(hmset)) {\n+                Long rpush = jedis.rpush(buildGlobalStatus(globalTransactionDO.getStatus()),\n+                        globalTransactionDO.getXid());\n+                if (rpush > 0) {\n+                    return true;\n+                } else {\n+                    jedis.hdel(globalKey);\n+                    return false;\n+                }\n+            }\n+            return false;\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Delete the global transaction.\n+     * It will operate two parts:\n+     *  1.delete the global session map\n+     *  2.remove the xid from the global status list\n+     * If the operate failed,the succeed operates will rollback\n+     * @param globalTransactionDO\n+     * @return\n+     */\n     private boolean deleteGlobalTransactionDO(GlobalTransactionDO globalTransactionDO) {\n+        String globalKey = buildGlobalKeyByTransactionId(globalTransactionDO.getTransactionId());\n         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n-            String[] keys = new String[3];\n-            keys[0] = getGlobalKeyByXid(globalTransactionDO.getXid());\n-            keys[1] = getGlobalKeyByTransactionId(globalTransactionDO.getTransactionId());\n-            keys[2] = getBranchListKeyByXid(globalTransactionDO.getXid());\n-            jedis.del(keys);\n-            return true;\n+            String xid = jedis.hget(globalKey, REDIS_KEY_GLOBAL_XID);\n+            if (StringUtils.isEmpty(xid)) {\n+                LOGGER.warn(\"Global transaction is not exist,xid = {}.Maybe has been deleted by another tc server\",\n+                        globalTransactionDO.getXid());\n+                return true;\n+            }\n+            Long lrem = jedis.lrem(buildGlobalStatus(globalTransactionDO.getStatus()), 0,\n+                    globalTransactionDO.getXid());\n+            if (lrem > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66f28c784c4c0b5b2a35cd56d2b37896dee734aa"}, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0ODQ5MQ==", "bodyText": "I think the pipe can be used instead", "url": "https://github.com/seata/seata/pull/3062#discussion_r490348491", "createdAt": "2020-09-17T15:35:17Z", "author": {"login": "a364176773"}, "path": "server/src/main/java/io/seata/server/storage/redis/store/RedisTransactionStoreManager.java", "diffHunk": "@@ -90,99 +93,251 @@ public static RedisTransactionStoreManager getInstance() {\n     @Override\n     public boolean writeSession(LogOperation logOperation, SessionStorable session) {\n         if (LogOperation.GLOBAL_ADD.equals(logOperation)) {\n-            return insertOrUpdateGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return insertGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.GLOBAL_UPDATE.equals(logOperation)) {\n-            return insertOrUpdateGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return updateGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.GLOBAL_REMOVE.equals(logOperation)) {\n-            return deleteGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return deleteGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.BRANCH_ADD.equals(logOperation)) {\n-            return insertOrUpdateBranchTransactionDO(convertBranchTransactionDO(session));\n+            return insertBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else if (LogOperation.BRANCH_UPDATE.equals(logOperation)) {\n-            return insertOrUpdateBranchTransactionDO(convertBranchTransactionDO(session));\n+            return updateBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else if (LogOperation.BRANCH_REMOVE.equals(logOperation)) {\n-            return deleteBranchTransactionDO(convertBranchTransactionDO(session));\n+            return deleteBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else {\n             throw new StoreException(\"Unknown LogOperation:\" + logOperation.name());\n         }\n     }\n \n+    /**\n+     * Insert branch transaction\n+     * @param branchTransactionDO\n+     * @return the boolean\n+     */\n+    private boolean insertBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+        String branchKey = buildBranchKey(branchTransactionDO.getBranchId());\n+        String branchListKey = buildBranchListKeyByXid(branchTransactionDO.getXid());\n+        try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n+            Date now = new Date();\n+            branchTransactionDO.setGmtCreate(now);\n+            branchTransactionDO.setGmtModified(now);\n+            String hmset = jedis.hmset(branchKey, BeanUtils.objectToMap(branchTransactionDO));\n+            if (OK.equalsIgnoreCase(hmset)) {\n+                Long rpush = jedis.rpush(branchListKey, branchKey);\n+                if (rpush > 0) {\n+                    return true;\n+                } else {\n+                    jedis.del(branchKey);\n+                    return false;\n+                }\n+            } else {\n+                return false;\n+            }\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Delete the branch transaction\n+     * @param branchTransactionDO\n+     * @return\n+     */\n     private boolean deleteBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+        String branchKey = buildBranchKey(branchTransactionDO.getBranchId());\n         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n-            String key = getBranchKey(branchTransactionDO.getBranchId());\n-            jedis.del(key);\n-            return true;\n+            String xid = jedis.hget(branchKey, REDIS_KEY_BRANCH_XID);\n+            if (StringUtils.isEmpty(xid)) {\n+                return true;\n+            }\n+            String branchListKey = buildBranchListKeyByXid(branchTransactionDO.getXid());\n+            Long lrem = jedis.lrem(branchListKey, 0, branchKey);\n+            if (lrem > 0) {\n+                Long del = jedis.del(branchKey);\n+                if (del == 1) {\n+                    return true;\n+                } else {\n+                    jedis.rpush(branchListKey,branchKey);\n+                    return false;\n+                }\n+            }\n+            return false;\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n         }\n     }\n \n-    private boolean insertOrUpdateBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+    /**\n+     * Update the branch transaction\n+     * @param branchTransactionDO\n+     * @return\n+     */\n+    private boolean updateBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+        String branchKey = buildBranchKey(branchTransactionDO.getBranchId());\n         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n-            String key = getBranchKey(branchTransactionDO.getBranchId());\n-            Pipeline pipeline = jedis.pipelined();\n-            if (jedis.get(key) == null) {\n-                pipeline.lpush(getBranchListKeyByXid(branchTransactionDO.getXid()), key);\n+            String previousBranchStatus = jedis.hget(branchKey, REDIS_KEY_BRANCH_STATUS);\n+            if (StringUtils.isEmpty(previousBranchStatus)) {\n+                throw new StoreException(\"Branch transaction is not exist, update branch transaction failed.\");\n+            }\n+            Map<String,String> map = new HashMap<>(2);\n+            map.put(REDIS_KEY_BRANCH_STATUS,String.valueOf(branchTransactionDO.getStatus()));\n+            map.put(REDIS_KEY_BRANCH_GMT_MODIFIED,String.valueOf((new Date()).getTime()));\n+            String hmset = jedis.hmset(branchKey, map);\n+            if (OK.equalsIgnoreCase(hmset)) {\n+                return true;\n             }\n-            pipeline.set(key, JSON.toJSONString(branchTransactionDO));\n-            pipeline.sync();\n-            return true;\n+            return false;\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n         }\n     }\n \n+    /**\n+     * Insert the global transaction.\n+     * @param globalTransactionDO\n+     * @return\n+     */\n+    private boolean insertGlobalTransactionDO(GlobalTransactionDO globalTransactionDO) {\n+        String globalKey = buildGlobalKeyByTransactionId(globalTransactionDO.getTransactionId());\n+        try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n+            Date now = new Date();\n+            globalTransactionDO.setGmtCreate(now);\n+            globalTransactionDO.setGmtModified(now);\n+            String hmset = jedis.hmset(globalKey, BeanUtils.objectToMap(globalTransactionDO));\n+            if (OK.equalsIgnoreCase(hmset)) {\n+                Long rpush = jedis.rpush(buildGlobalStatus(globalTransactionDO.getStatus()),\n+                        globalTransactionDO.getXid());\n+                if (rpush > 0) {\n+                    return true;\n+                } else {\n+                    jedis.hdel(globalKey);\n+                    return false;\n+                }\n+            }\n+            return false;\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Delete the global transaction.\n+     * It will operate two parts:\n+     *  1.delete the global session map\n+     *  2.remove the xid from the global status list\n+     * If the operate failed,the succeed operates will rollback\n+     * @param globalTransactionDO\n+     * @return\n+     */\n     private boolean deleteGlobalTransactionDO(GlobalTransactionDO globalTransactionDO) {\n+        String globalKey = buildGlobalKeyByTransactionId(globalTransactionDO.getTransactionId());\n         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n-            String[] keys = new String[3];\n-            keys[0] = getGlobalKeyByXid(globalTransactionDO.getXid());\n-            keys[1] = getGlobalKeyByTransactionId(globalTransactionDO.getTransactionId());\n-            keys[2] = getBranchListKeyByXid(globalTransactionDO.getXid());\n-            jedis.del(keys);\n-            return true;\n+            String xid = jedis.hget(globalKey, REDIS_KEY_GLOBAL_XID);\n+            if (StringUtils.isEmpty(xid)) {\n+                LOGGER.warn(\"Global transaction is not exist,xid = {}.Maybe has been deleted by another tc server\",\n+                        globalTransactionDO.getXid());\n+                return true;\n+            }\n+            Long lrem = jedis.lrem(buildGlobalStatus(globalTransactionDO.getStatus()), 0,\n+                    globalTransactionDO.getXid());\n+            if (lrem > 0) {\n+                Long del = jedis.del(globalKey);\n+                if (del > 0) {\n+                    return true;\n+                } else {\n+                    jedis.rpush(buildGlobalStatus(globalTransactionDO.getStatus()),globalTransactionDO.getXid());\n+                    return false;\n+                }\n+            }\n+            return false;\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n         }\n     }\n \n-    private boolean insertOrUpdateGlobalTransactionDO(GlobalTransactionDO convertGlobalTransactionDO) {\n+    /**\n+     * Update the global transaction.\n+     * It will update two parts:\n+     *  1.the global session map\n+     *  2.the global status list\n+     * If the update failed,the succeed operates will rollback\n+     * @param globalTransactionDO\n+     * @return\n+     */\n+    private boolean updateGlobalTransactionDO(GlobalTransactionDO globalTransactionDO) {\n+        String xid = globalTransactionDO.getXid();\n+        String globalKey = buildGlobalKeyByTransactionId(globalTransactionDO.getTransactionId());\n         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n-            String keys = getGlobalKeyByXid(convertGlobalTransactionDO.getXid());\n-            Pipeline pipeline = jedis.pipelined();\n-            String json = JSON.toJSONString(convertGlobalTransactionDO);\n-            pipeline.set(keys, json);\n-            keys = getGlobalKeyByTransactionId(convertGlobalTransactionDO.getTransactionId());\n-            pipeline.set(keys, json);\n-            pipeline.sync();\n-            return true;\n+            // Defensive watch to prevent other TC server operating concurrently,Fail fast\n+            jedis.watch(globalKey);\n+            String previousStatus = jedis.hget(globalKey, REDIS_KEY_GLOBAL_STATUS);\n+            if (StringUtils.isEmpty(previousStatus)) {\n+                throw new StoreException(\"Global transaction is not exist, update global transaction failed.\");\n+            }\n+            String previousGmtModified = jedis.hget(globalKey, REDIS_KEY_GLOBAL_GMT_MODIFIED);\n+            Transaction multi = jedis.multi();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66f28c784c4c0b5b2a35cd56d2b37896dee734aa"}, "originalPosition": 312}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3b44bda01313fcd65c2d6372f2910788c769834", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/e3b44bda01313fcd65c2d6372f2910788c769834", "committedDate": "2020-09-18T03:56:05Z", "message": "Merge branch 'develop' of github.com:seata/seata into refactor_redis_session"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "510f0a70b786eae92275613544c19e9d8629771b", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/510f0a70b786eae92275613544c19e9d8629771b", "committedDate": "2020-09-18T03:58:11Z", "message": "Merge branch 'refactor_redis_session' of github.com:lightClouds917/seata into refactor_redis_session"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b985212ce302fb548ce6e93e1c0380e49cb6090", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/5b985212ce302fb548ce6e93e1c0380e49cb6090", "committedDate": "2020-09-18T04:40:47Z", "message": "Merge branch 'master' of github.com:seata/seata into refactor_redis_session"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89ae3ffba979bfb1a1702fe594f2bc382c8d1330", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/89ae3ffba979bfb1a1702fe594f2bc382c8d1330", "committedDate": "2020-09-18T12:04:56Z", "message": "Merge branch 'develop' of github.com:seata/seata into refactor_redis_session"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07afa8672b209c5e544a4123e201f5dde6dea326", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/07afa8672b209c5e544a4123e201f5dde6dea326", "committedDate": "2020-09-18T12:05:47Z", "message": "optimize:the code to pipleline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e43c93f2c4041af13dd2851f706ed55a284e635", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/3e43c93f2c4041af13dd2851f706ed55a284e635", "committedDate": "2020-09-21T11:24:44Z", "message": "optimize:the code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9bf3bd575fdf9ef913430923cc1d90afe77c4c6", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/a9bf3bd575fdf9ef913430923cc1d90afe77c4c6", "committedDate": "2020-09-21T11:50:31Z", "message": "optimize:the import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9201b1f8b0074c2d6a60222ed8f9324460b9609", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/c9201b1f8b0074c2d6a60222ed8f9324460b9609", "committedDate": "2020-09-21T12:04:26Z", "message": "optimize:when the status equals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b2a2cf1fd404e0b16a56f9f1a03e70d57a91d2a", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/5b2a2cf1fd404e0b16a56f9f1a03e70d57a91d2a", "committedDate": "2020-09-21T13:22:40Z", "message": "optimize:get transactionId"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbb2886f6fc2f36dd0f48abf50077e1081878e2c", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/bbb2886f6fc2f36dd0f48abf50077e1081878e2c", "committedDate": "2020-09-21T13:23:32Z", "message": "optimize:get transactionId"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxODU2NjEz", "url": "https://github.com/seata/seata/pull/3062#pullrequestreview-491856613", "createdAt": "2020-09-19T03:07:29Z", "commit": {"oid": "07afa8672b209c5e544a4123e201f5dde6dea326"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMzowNzoyOVrOHUgNew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQxMDowNToyNFrOHUmVdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI2MTMwNw==", "bodyText": "use String.valueOf(XID.getTransactionId(xid))  instead\uff1f", "url": "https://github.com/seata/seata/pull/3062#discussion_r491261307", "createdAt": "2020-09-19T03:07:29Z", "author": {"login": "caohdgege"}, "path": "server/src/main/java/io/seata/server/storage/redis/store/RedisTransactionStoreManager.java", "diffHunk": "@@ -90,99 +93,286 @@ public static RedisTransactionStoreManager getInstance() {\n     @Override\n     public boolean writeSession(LogOperation logOperation, SessionStorable session) {\n         if (LogOperation.GLOBAL_ADD.equals(logOperation)) {\n-            return insertOrUpdateGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return insertGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.GLOBAL_UPDATE.equals(logOperation)) {\n-            return insertOrUpdateGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return updateGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.GLOBAL_REMOVE.equals(logOperation)) {\n-            return deleteGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return deleteGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.BRANCH_ADD.equals(logOperation)) {\n-            return insertOrUpdateBranchTransactionDO(convertBranchTransactionDO(session));\n+            return insertBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else if (LogOperation.BRANCH_UPDATE.equals(logOperation)) {\n-            return insertOrUpdateBranchTransactionDO(convertBranchTransactionDO(session));\n+            return updateBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else if (LogOperation.BRANCH_REMOVE.equals(logOperation)) {\n-            return deleteBranchTransactionDO(convertBranchTransactionDO(session));\n+            return deleteBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else {\n             throw new StoreException(\"Unknown LogOperation:\" + logOperation.name());\n         }\n     }\n \n+    /**\n+     * Insert branch transaction\n+     * @param branchTransactionDO\n+     * @return the boolean\n+     */\n+    private boolean insertBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+        String branchKey = buildBranchKey(branchTransactionDO.getBranchId());\n+        String branchListKey = buildBranchListKeyByXid(branchTransactionDO.getXid());\n+        try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n+            Date now = new Date();\n+            branchTransactionDO.setGmtCreate(now);\n+            branchTransactionDO.setGmtModified(now);\n+            Pipeline pipelined = jedis.pipelined();\n+            pipelined.hmset(branchKey, BeanUtils.objectToMap(branchTransactionDO));\n+            pipelined.rpush(branchListKey, branchKey);\n+            List<Object> objects = pipelined.syncAndReturnAll();\n+            if (CollectionUtils.isNotEmpty(objects)) {\n+                String hmset = objects.get(0).toString();\n+                Long rpush = Long.valueOf(objects.get(1).toString());\n+                if (OK.equals(hmset) && rpush > 0) {\n+                    return true;\n+                } else {\n+                    if (OK.equals(hmset)) {\n+                        jedis.del(branchKey);\n+                    }\n+                    if (rpush > 0) {\n+                        jedis.lrem(branchListKey,0,branchKey);\n+                    }\n+                    return false;\n+                }\n+            }\n+            return false;\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Delete the branch transaction\n+     * @param branchTransactionDO\n+     * @return\n+     */\n     private boolean deleteBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+        String branchKey = buildBranchKey(branchTransactionDO.getBranchId());\n+        try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n+            Map<String, String> branchTransactionDOMap = jedis.hgetAll(branchKey);\n+            String xid = branchTransactionDOMap.get(REDIS_KEY_BRANCH_XID);\n+            if (StringUtils.isEmpty(xid)) {\n+                return true;\n+            }\n+            String branchListKey = buildBranchListKeyByXid(branchTransactionDO.getXid());\n+            Pipeline pipelined = jedis.pipelined();\n+            pipelined.lrem(branchListKey, 0, branchKey);\n+            pipelined.del(branchKey);\n+            List<Object> objects = pipelined.syncAndReturnAll();\n+            if (CollectionUtils.isNotEmpty(objects)) {\n+                Long lrem = Long.valueOf(objects.get(0).toString());\n+                Long del = Long.valueOf(objects.get(1).toString());\n+                if (lrem > 0 && del > 0) {\n+                    return true;\n+                } else {\n+                    if (lrem > 0) {\n+                        jedis.rpush(branchListKey,branchKey);\n+                    }\n+                    if (del > 0) {\n+                        jedis.hmset(branchKey,branchTransactionDOMap);\n+                    }\n+                }\n+            }\n+            return false;\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Update the branch transaction\n+     * @param branchTransactionDO\n+     * @return\n+     */\n+    private boolean updateBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+        String branchKey = buildBranchKey(branchTransactionDO.getBranchId());\n         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n-            String key = getBranchKey(branchTransactionDO.getBranchId());\n-            jedis.del(key);\n-            return true;\n+            String previousBranchStatus = jedis.hget(branchKey, REDIS_KEY_BRANCH_STATUS);\n+            if (StringUtils.isEmpty(previousBranchStatus)) {\n+                throw new StoreException(\"Branch transaction is not exist, update branch transaction failed.\");\n+            }\n+            Map<String,String> map = new HashMap<>(2);\n+            map.put(REDIS_KEY_BRANCH_STATUS,String.valueOf(branchTransactionDO.getStatus()));\n+            map.put(REDIS_KEY_BRANCH_GMT_MODIFIED,String.valueOf((new Date()).getTime()));\n+            String hmset = jedis.hmset(branchKey, map);\n+            if (OK.equalsIgnoreCase(hmset)) {\n+                return true;\n+            }\n+            return false;\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n         }\n     }\n \n-    private boolean insertOrUpdateBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+    /**\n+     * Insert the global transaction.\n+     * @param globalTransactionDO\n+     * @return\n+     */\n+    private boolean insertGlobalTransactionDO(GlobalTransactionDO globalTransactionDO) {\n+        String globalKey = buildGlobalKeyByTransactionId(globalTransactionDO.getTransactionId());\n         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n-            String key = getBranchKey(branchTransactionDO.getBranchId());\n-            Pipeline pipeline = jedis.pipelined();\n-            if (jedis.get(key) == null) {\n-                pipeline.lpush(getBranchListKeyByXid(branchTransactionDO.getXid()), key);\n+            Date now = new Date();\n+            globalTransactionDO.setGmtCreate(now);\n+            globalTransactionDO.setGmtModified(now);\n+            Pipeline pipelined = jedis.pipelined();\n+            pipelined.hmset(globalKey, BeanUtils.objectToMap(globalTransactionDO));\n+            pipelined.rpush(buildGlobalStatus(globalTransactionDO.getStatus()), globalTransactionDO.getXid());\n+            List<Object> objects = pipelined.syncAndReturnAll();\n+            if (CollectionUtils.isNotEmpty(objects)) {\n+                String hmset = objects.get(0).toString();\n+                Long rpush = Long.valueOf(objects.get(1).toString());\n+                if (OK.equals(hmset) && rpush > 0) {\n+                    return true;\n+                } else {\n+                    if (OK.equals(hmset)) {\n+                        jedis.hdel(globalKey);\n+                    }\n+                    if (rpush > 0) {\n+                        jedis.lrem(buildGlobalStatus(globalTransactionDO.getStatus()),0, globalTransactionDO.getXid());\n+                    }\n+                    return false;\n+                }\n             }\n-            pipeline.set(key, JSON.toJSONString(branchTransactionDO));\n-            pipeline.sync();\n-            return true;\n+            return false;\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n         }\n     }\n \n+    /**\n+     * Delete the global transaction.\n+     * It will operate two parts:\n+     *  1.delete the global session map\n+     *  2.remove the xid from the global status list\n+     * If the operate failed,the succeed operates will rollback\n+     * @param globalTransactionDO\n+     * @return\n+     */\n     private boolean deleteGlobalTransactionDO(GlobalTransactionDO globalTransactionDO) {\n+        String globalKey = buildGlobalKeyByTransactionId(globalTransactionDO.getTransactionId());\n         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n-            String[] keys = new String[3];\n-            keys[0] = getGlobalKeyByXid(globalTransactionDO.getXid());\n-            keys[1] = getGlobalKeyByTransactionId(globalTransactionDO.getTransactionId());\n-            keys[2] = getBranchListKeyByXid(globalTransactionDO.getXid());\n-            jedis.del(keys);\n-            return true;\n+            Map<String, String> globalTransactionDoMap = jedis.hgetAll(globalKey);\n+            String xid = globalTransactionDoMap.get(REDIS_KEY_GLOBAL_XID);\n+            if (StringUtils.isEmpty(xid)) {\n+                LOGGER.warn(\"Global transaction is not exist,xid = {}.Maybe has been deleted by another tc server\",\n+                        globalTransactionDO.getXid());\n+                return true;\n+            }\n+\n+            Pipeline pipelined = jedis.pipelined();\n+            pipelined.lrem(buildGlobalStatus(globalTransactionDO.getStatus()), 0, globalTransactionDO.getXid());\n+            pipelined.del(globalKey);\n+            List<Object> objects = pipelined.syncAndReturnAll();\n+            if (CollectionUtils.isNotEmpty(objects)) {\n+                Long lrem = Long.valueOf(objects.get(0).toString());\n+                Long del = Long.valueOf(objects.get(1).toString());\n+                if (lrem > 0 && del > 0) {\n+                    return true;\n+                } else {\n+                    if (lrem > 0) {\n+                        jedis.rpush(buildGlobalStatus(globalTransactionDO.getStatus()),globalTransactionDO.getXid());\n+                    }\n+                    if (del > 0) {\n+                        jedis.hmset(globalKey,globalTransactionDoMap);\n+                    }\n+                }\n+\n+            }\n+            return false;\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n         }\n     }\n \n-    private boolean insertOrUpdateGlobalTransactionDO(GlobalTransactionDO convertGlobalTransactionDO) {\n+    /**\n+     * Update the global transaction.\n+     * It will update two parts:\n+     *  1.the global session map\n+     *  2.the global status list\n+     * If the update failed,the succeed operates will rollback\n+     * @param globalTransactionDO\n+     * @return\n+     */\n+    private boolean updateGlobalTransactionDO(GlobalTransactionDO globalTransactionDO) {\n+        String xid = globalTransactionDO.getXid();\n+        String globalKey = buildGlobalKeyByTransactionId(globalTransactionDO.getTransactionId());\n         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n-            String keys = getGlobalKeyByXid(convertGlobalTransactionDO.getXid());\n-            Pipeline pipeline = jedis.pipelined();\n-            String json = JSON.toJSONString(convertGlobalTransactionDO);\n-            pipeline.set(keys, json);\n-            keys = getGlobalKeyByTransactionId(convertGlobalTransactionDO.getTransactionId());\n-            pipeline.set(keys, json);\n-            pipeline.sync();\n-            return true;\n+            // Defensive watch to prevent other TC server operating concurrently,Fail fast\n+            jedis.watch(globalKey);\n+            String previousStatus = jedis.hget(globalKey, REDIS_KEY_GLOBAL_STATUS);\n+            if (StringUtils.isEmpty(previousStatus)) {\n+                throw new StoreException(\"Global transaction is not exist, update global transaction failed.\");\n+            }\n+            String previousGmtModified = jedis.hget(globalKey, REDIS_KEY_GLOBAL_GMT_MODIFIED);\n+            Transaction multi = jedis.multi();\n+            Map<String,String> map = new HashMap<>(2);\n+            map.put(REDIS_KEY_GLOBAL_STATUS,String.valueOf(globalTransactionDO.getStatus()));\n+            map.put(REDIS_KEY_GLOBAL_GMT_MODIFIED,String.valueOf((new Date()).getTime()));\n+            multi.hmset(globalKey,map);\n+            multi.lrem(buildGlobalStatus(Integer.valueOf(previousStatus)),0, xid);\n+            multi.rpush(buildGlobalStatus(globalTransactionDO.getStatus()), xid);\n+            List<Object> exec = multi.exec();\n+            String hmset = exec.get(0).toString();\n+            long lrem  = (long)exec.get(1);\n+            long rpush = (long)exec.get(2);\n+            if (OK.equalsIgnoreCase(hmset) && lrem > 0 && rpush > 0) {\n+                return true;\n+            } else {\n+                // If someone failed, the succeed operations need rollback\n+                if (OK.equalsIgnoreCase(hmset)) {\n+                    // Defensive watch to prevent other TC server operating concurrently,give up this operate\n+                    jedis.watch(globalKey);\n+                    String xid2 = jedis.hget(globalKey, REDIS_KEY_GLOBAL_XID);\n+                    if (StringUtils.isNotEmpty(xid2)) {\n+                        Map<String,String> mapPrevious = new HashMap<>(2);\n+                        mapPrevious.put(REDIS_KEY_GLOBAL_STATUS,previousStatus);\n+                        mapPrevious.put(REDIS_KEY_GLOBAL_GMT_MODIFIED,previousGmtModified);\n+                        Transaction multi2 = jedis.multi();\n+                        multi2.hmset(globalKey,mapPrevious);\n+                        multi2.exec();\n+                    }\n+                }\n+                if (lrem > 0) {\n+                    jedis.rpush(buildGlobalStatus(Integer.valueOf(previousStatus)),xid);\n+                }\n+                if (rpush > 0) {\n+                    jedis.lrem(buildGlobalStatus(globalTransactionDO.getStatus()),0,xid);\n+                }\n+                return false;\n+            }\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n         }\n     }\n \n     /**\n      * Read session global session.\n      *\n-     * @param xid\n-     *            the xid\n-     * @param withBranchSessions\n-     *            the withBranchSessions\n+     * @param xid the xid\n+     * @param withBranchSessions  the withBranchSessions\n      * @return the global session\n      */\n     @Override\n     public GlobalSession readSession(String xid, boolean withBranchSessions) {\n-        String globalSessionJson;\n+        String transactionId = xid.split(\":\")[2];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07afa8672b209c5e544a4123e201f5dde6dea326"}, "originalPosition": 403}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTM2MDE3NA==", "bodyText": "if previousStatus == currentStatus, is it necessary to do update? or just need to return true immediately", "url": "https://github.com/seata/seata/pull/3062#discussion_r491360174", "createdAt": "2020-09-19T10:00:57Z", "author": {"login": "caohdgege"}, "path": "server/src/main/java/io/seata/server/storage/redis/store/RedisTransactionStoreManager.java", "diffHunk": "@@ -90,99 +93,286 @@ public static RedisTransactionStoreManager getInstance() {\n     @Override\n     public boolean writeSession(LogOperation logOperation, SessionStorable session) {\n         if (LogOperation.GLOBAL_ADD.equals(logOperation)) {\n-            return insertOrUpdateGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return insertGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.GLOBAL_UPDATE.equals(logOperation)) {\n-            return insertOrUpdateGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return updateGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.GLOBAL_REMOVE.equals(logOperation)) {\n-            return deleteGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return deleteGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.BRANCH_ADD.equals(logOperation)) {\n-            return insertOrUpdateBranchTransactionDO(convertBranchTransactionDO(session));\n+            return insertBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else if (LogOperation.BRANCH_UPDATE.equals(logOperation)) {\n-            return insertOrUpdateBranchTransactionDO(convertBranchTransactionDO(session));\n+            return updateBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else if (LogOperation.BRANCH_REMOVE.equals(logOperation)) {\n-            return deleteBranchTransactionDO(convertBranchTransactionDO(session));\n+            return deleteBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else {\n             throw new StoreException(\"Unknown LogOperation:\" + logOperation.name());\n         }\n     }\n \n+    /**\n+     * Insert branch transaction\n+     * @param branchTransactionDO\n+     * @return the boolean\n+     */\n+    private boolean insertBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+        String branchKey = buildBranchKey(branchTransactionDO.getBranchId());\n+        String branchListKey = buildBranchListKeyByXid(branchTransactionDO.getXid());\n+        try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n+            Date now = new Date();\n+            branchTransactionDO.setGmtCreate(now);\n+            branchTransactionDO.setGmtModified(now);\n+            Pipeline pipelined = jedis.pipelined();\n+            pipelined.hmset(branchKey, BeanUtils.objectToMap(branchTransactionDO));\n+            pipelined.rpush(branchListKey, branchKey);\n+            List<Object> objects = pipelined.syncAndReturnAll();\n+            if (CollectionUtils.isNotEmpty(objects)) {\n+                String hmset = objects.get(0).toString();\n+                Long rpush = Long.valueOf(objects.get(1).toString());\n+                if (OK.equals(hmset) && rpush > 0) {\n+                    return true;\n+                } else {\n+                    if (OK.equals(hmset)) {\n+                        jedis.del(branchKey);\n+                    }\n+                    if (rpush > 0) {\n+                        jedis.lrem(branchListKey,0,branchKey);\n+                    }\n+                    return false;\n+                }\n+            }\n+            return false;\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Delete the branch transaction\n+     * @param branchTransactionDO\n+     * @return\n+     */\n     private boolean deleteBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+        String branchKey = buildBranchKey(branchTransactionDO.getBranchId());\n+        try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n+            Map<String, String> branchTransactionDOMap = jedis.hgetAll(branchKey);\n+            String xid = branchTransactionDOMap.get(REDIS_KEY_BRANCH_XID);\n+            if (StringUtils.isEmpty(xid)) {\n+                return true;\n+            }\n+            String branchListKey = buildBranchListKeyByXid(branchTransactionDO.getXid());\n+            Pipeline pipelined = jedis.pipelined();\n+            pipelined.lrem(branchListKey, 0, branchKey);\n+            pipelined.del(branchKey);\n+            List<Object> objects = pipelined.syncAndReturnAll();\n+            if (CollectionUtils.isNotEmpty(objects)) {\n+                Long lrem = Long.valueOf(objects.get(0).toString());\n+                Long del = Long.valueOf(objects.get(1).toString());\n+                if (lrem > 0 && del > 0) {\n+                    return true;\n+                } else {\n+                    if (lrem > 0) {\n+                        jedis.rpush(branchListKey,branchKey);\n+                    }\n+                    if (del > 0) {\n+                        jedis.hmset(branchKey,branchTransactionDOMap);\n+                    }\n+                }\n+            }\n+            return false;\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Update the branch transaction\n+     * @param branchTransactionDO\n+     * @return\n+     */\n+    private boolean updateBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+        String branchKey = buildBranchKey(branchTransactionDO.getBranchId());\n         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n-            String key = getBranchKey(branchTransactionDO.getBranchId());\n-            jedis.del(key);\n-            return true;\n+            String previousBranchStatus = jedis.hget(branchKey, REDIS_KEY_BRANCH_STATUS);\n+            if (StringUtils.isEmpty(previousBranchStatus)) {\n+                throw new StoreException(\"Branch transaction is not exist, update branch transaction failed.\");\n+            }\n+            Map<String,String> map = new HashMap<>(2);\n+            map.put(REDIS_KEY_BRANCH_STATUS,String.valueOf(branchTransactionDO.getStatus()));\n+            map.put(REDIS_KEY_BRANCH_GMT_MODIFIED,String.valueOf((new Date()).getTime()));\n+            String hmset = jedis.hmset(branchKey, map);\n+            if (OK.equalsIgnoreCase(hmset)) {\n+                return true;\n+            }\n+            return false;\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n         }\n     }\n \n-    private boolean insertOrUpdateBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+    /**\n+     * Insert the global transaction.\n+     * @param globalTransactionDO\n+     * @return\n+     */\n+    private boolean insertGlobalTransactionDO(GlobalTransactionDO globalTransactionDO) {\n+        String globalKey = buildGlobalKeyByTransactionId(globalTransactionDO.getTransactionId());\n         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n-            String key = getBranchKey(branchTransactionDO.getBranchId());\n-            Pipeline pipeline = jedis.pipelined();\n-            if (jedis.get(key) == null) {\n-                pipeline.lpush(getBranchListKeyByXid(branchTransactionDO.getXid()), key);\n+            Date now = new Date();\n+            globalTransactionDO.setGmtCreate(now);\n+            globalTransactionDO.setGmtModified(now);\n+            Pipeline pipelined = jedis.pipelined();\n+            pipelined.hmset(globalKey, BeanUtils.objectToMap(globalTransactionDO));\n+            pipelined.rpush(buildGlobalStatus(globalTransactionDO.getStatus()), globalTransactionDO.getXid());\n+            List<Object> objects = pipelined.syncAndReturnAll();\n+            if (CollectionUtils.isNotEmpty(objects)) {\n+                String hmset = objects.get(0).toString();\n+                Long rpush = Long.valueOf(objects.get(1).toString());\n+                if (OK.equals(hmset) && rpush > 0) {\n+                    return true;\n+                } else {\n+                    if (OK.equals(hmset)) {\n+                        jedis.hdel(globalKey);\n+                    }\n+                    if (rpush > 0) {\n+                        jedis.lrem(buildGlobalStatus(globalTransactionDO.getStatus()),0, globalTransactionDO.getXid());\n+                    }\n+                    return false;\n+                }\n             }\n-            pipeline.set(key, JSON.toJSONString(branchTransactionDO));\n-            pipeline.sync();\n-            return true;\n+            return false;\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n         }\n     }\n \n+    /**\n+     * Delete the global transaction.\n+     * It will operate two parts:\n+     *  1.delete the global session map\n+     *  2.remove the xid from the global status list\n+     * If the operate failed,the succeed operates will rollback\n+     * @param globalTransactionDO\n+     * @return\n+     */\n     private boolean deleteGlobalTransactionDO(GlobalTransactionDO globalTransactionDO) {\n+        String globalKey = buildGlobalKeyByTransactionId(globalTransactionDO.getTransactionId());\n         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n-            String[] keys = new String[3];\n-            keys[0] = getGlobalKeyByXid(globalTransactionDO.getXid());\n-            keys[1] = getGlobalKeyByTransactionId(globalTransactionDO.getTransactionId());\n-            keys[2] = getBranchListKeyByXid(globalTransactionDO.getXid());\n-            jedis.del(keys);\n-            return true;\n+            Map<String, String> globalTransactionDoMap = jedis.hgetAll(globalKey);\n+            String xid = globalTransactionDoMap.get(REDIS_KEY_GLOBAL_XID);\n+            if (StringUtils.isEmpty(xid)) {\n+                LOGGER.warn(\"Global transaction is not exist,xid = {}.Maybe has been deleted by another tc server\",\n+                        globalTransactionDO.getXid());\n+                return true;\n+            }\n+\n+            Pipeline pipelined = jedis.pipelined();\n+            pipelined.lrem(buildGlobalStatus(globalTransactionDO.getStatus()), 0, globalTransactionDO.getXid());\n+            pipelined.del(globalKey);\n+            List<Object> objects = pipelined.syncAndReturnAll();\n+            if (CollectionUtils.isNotEmpty(objects)) {\n+                Long lrem = Long.valueOf(objects.get(0).toString());\n+                Long del = Long.valueOf(objects.get(1).toString());\n+                if (lrem > 0 && del > 0) {\n+                    return true;\n+                } else {\n+                    if (lrem > 0) {\n+                        jedis.rpush(buildGlobalStatus(globalTransactionDO.getStatus()),globalTransactionDO.getXid());\n+                    }\n+                    if (del > 0) {\n+                        jedis.hmset(globalKey,globalTransactionDoMap);\n+                    }\n+                }\n+\n+            }\n+            return false;\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n         }\n     }\n \n-    private boolean insertOrUpdateGlobalTransactionDO(GlobalTransactionDO convertGlobalTransactionDO) {\n+    /**\n+     * Update the global transaction.\n+     * It will update two parts:\n+     *  1.the global session map\n+     *  2.the global status list\n+     * If the update failed,the succeed operates will rollback\n+     * @param globalTransactionDO\n+     * @return\n+     */\n+    private boolean updateGlobalTransactionDO(GlobalTransactionDO globalTransactionDO) {\n+        String xid = globalTransactionDO.getXid();\n+        String globalKey = buildGlobalKeyByTransactionId(globalTransactionDO.getTransactionId());\n         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n-            String keys = getGlobalKeyByXid(convertGlobalTransactionDO.getXid());\n-            Pipeline pipeline = jedis.pipelined();\n-            String json = JSON.toJSONString(convertGlobalTransactionDO);\n-            pipeline.set(keys, json);\n-            keys = getGlobalKeyByTransactionId(convertGlobalTransactionDO.getTransactionId());\n-            pipeline.set(keys, json);\n-            pipeline.sync();\n-            return true;\n+            // Defensive watch to prevent other TC server operating concurrently,Fail fast\n+            jedis.watch(globalKey);\n+            String previousStatus = jedis.hget(globalKey, REDIS_KEY_GLOBAL_STATUS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07afa8672b209c5e544a4123e201f5dde6dea326"}, "originalPosition": 343}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTM2MTY1Mw==", "bodyText": "using hmget to get REDIS_KEY_GLOBAL_GMT_MODIFIED\uff0cREDIS_KEY_GLOBAL_STATUS in one time?", "url": "https://github.com/seata/seata/pull/3062#discussion_r491361653", "createdAt": "2020-09-19T10:05:24Z", "author": {"login": "caohdgege"}, "path": "server/src/main/java/io/seata/server/storage/redis/store/RedisTransactionStoreManager.java", "diffHunk": "@@ -90,99 +93,286 @@ public static RedisTransactionStoreManager getInstance() {\n     @Override\n     public boolean writeSession(LogOperation logOperation, SessionStorable session) {\n         if (LogOperation.GLOBAL_ADD.equals(logOperation)) {\n-            return insertOrUpdateGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return insertGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.GLOBAL_UPDATE.equals(logOperation)) {\n-            return insertOrUpdateGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return updateGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.GLOBAL_REMOVE.equals(logOperation)) {\n-            return deleteGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return deleteGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.BRANCH_ADD.equals(logOperation)) {\n-            return insertOrUpdateBranchTransactionDO(convertBranchTransactionDO(session));\n+            return insertBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else if (LogOperation.BRANCH_UPDATE.equals(logOperation)) {\n-            return insertOrUpdateBranchTransactionDO(convertBranchTransactionDO(session));\n+            return updateBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else if (LogOperation.BRANCH_REMOVE.equals(logOperation)) {\n-            return deleteBranchTransactionDO(convertBranchTransactionDO(session));\n+            return deleteBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else {\n             throw new StoreException(\"Unknown LogOperation:\" + logOperation.name());\n         }\n     }\n \n+    /**\n+     * Insert branch transaction\n+     * @param branchTransactionDO\n+     * @return the boolean\n+     */\n+    private boolean insertBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+        String branchKey = buildBranchKey(branchTransactionDO.getBranchId());\n+        String branchListKey = buildBranchListKeyByXid(branchTransactionDO.getXid());\n+        try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n+            Date now = new Date();\n+            branchTransactionDO.setGmtCreate(now);\n+            branchTransactionDO.setGmtModified(now);\n+            Pipeline pipelined = jedis.pipelined();\n+            pipelined.hmset(branchKey, BeanUtils.objectToMap(branchTransactionDO));\n+            pipelined.rpush(branchListKey, branchKey);\n+            List<Object> objects = pipelined.syncAndReturnAll();\n+            if (CollectionUtils.isNotEmpty(objects)) {\n+                String hmset = objects.get(0).toString();\n+                Long rpush = Long.valueOf(objects.get(1).toString());\n+                if (OK.equals(hmset) && rpush > 0) {\n+                    return true;\n+                } else {\n+                    if (OK.equals(hmset)) {\n+                        jedis.del(branchKey);\n+                    }\n+                    if (rpush > 0) {\n+                        jedis.lrem(branchListKey,0,branchKey);\n+                    }\n+                    return false;\n+                }\n+            }\n+            return false;\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Delete the branch transaction\n+     * @param branchTransactionDO\n+     * @return\n+     */\n     private boolean deleteBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+        String branchKey = buildBranchKey(branchTransactionDO.getBranchId());\n+        try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n+            Map<String, String> branchTransactionDOMap = jedis.hgetAll(branchKey);\n+            String xid = branchTransactionDOMap.get(REDIS_KEY_BRANCH_XID);\n+            if (StringUtils.isEmpty(xid)) {\n+                return true;\n+            }\n+            String branchListKey = buildBranchListKeyByXid(branchTransactionDO.getXid());\n+            Pipeline pipelined = jedis.pipelined();\n+            pipelined.lrem(branchListKey, 0, branchKey);\n+            pipelined.del(branchKey);\n+            List<Object> objects = pipelined.syncAndReturnAll();\n+            if (CollectionUtils.isNotEmpty(objects)) {\n+                Long lrem = Long.valueOf(objects.get(0).toString());\n+                Long del = Long.valueOf(objects.get(1).toString());\n+                if (lrem > 0 && del > 0) {\n+                    return true;\n+                } else {\n+                    if (lrem > 0) {\n+                        jedis.rpush(branchListKey,branchKey);\n+                    }\n+                    if (del > 0) {\n+                        jedis.hmset(branchKey,branchTransactionDOMap);\n+                    }\n+                }\n+            }\n+            return false;\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Update the branch transaction\n+     * @param branchTransactionDO\n+     * @return\n+     */\n+    private boolean updateBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+        String branchKey = buildBranchKey(branchTransactionDO.getBranchId());\n         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n-            String key = getBranchKey(branchTransactionDO.getBranchId());\n-            jedis.del(key);\n-            return true;\n+            String previousBranchStatus = jedis.hget(branchKey, REDIS_KEY_BRANCH_STATUS);\n+            if (StringUtils.isEmpty(previousBranchStatus)) {\n+                throw new StoreException(\"Branch transaction is not exist, update branch transaction failed.\");\n+            }\n+            Map<String,String> map = new HashMap<>(2);\n+            map.put(REDIS_KEY_BRANCH_STATUS,String.valueOf(branchTransactionDO.getStatus()));\n+            map.put(REDIS_KEY_BRANCH_GMT_MODIFIED,String.valueOf((new Date()).getTime()));\n+            String hmset = jedis.hmset(branchKey, map);\n+            if (OK.equalsIgnoreCase(hmset)) {\n+                return true;\n+            }\n+            return false;\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n         }\n     }\n \n-    private boolean insertOrUpdateBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+    /**\n+     * Insert the global transaction.\n+     * @param globalTransactionDO\n+     * @return\n+     */\n+    private boolean insertGlobalTransactionDO(GlobalTransactionDO globalTransactionDO) {\n+        String globalKey = buildGlobalKeyByTransactionId(globalTransactionDO.getTransactionId());\n         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n-            String key = getBranchKey(branchTransactionDO.getBranchId());\n-            Pipeline pipeline = jedis.pipelined();\n-            if (jedis.get(key) == null) {\n-                pipeline.lpush(getBranchListKeyByXid(branchTransactionDO.getXid()), key);\n+            Date now = new Date();\n+            globalTransactionDO.setGmtCreate(now);\n+            globalTransactionDO.setGmtModified(now);\n+            Pipeline pipelined = jedis.pipelined();\n+            pipelined.hmset(globalKey, BeanUtils.objectToMap(globalTransactionDO));\n+            pipelined.rpush(buildGlobalStatus(globalTransactionDO.getStatus()), globalTransactionDO.getXid());\n+            List<Object> objects = pipelined.syncAndReturnAll();\n+            if (CollectionUtils.isNotEmpty(objects)) {\n+                String hmset = objects.get(0).toString();\n+                Long rpush = Long.valueOf(objects.get(1).toString());\n+                if (OK.equals(hmset) && rpush > 0) {\n+                    return true;\n+                } else {\n+                    if (OK.equals(hmset)) {\n+                        jedis.hdel(globalKey);\n+                    }\n+                    if (rpush > 0) {\n+                        jedis.lrem(buildGlobalStatus(globalTransactionDO.getStatus()),0, globalTransactionDO.getXid());\n+                    }\n+                    return false;\n+                }\n             }\n-            pipeline.set(key, JSON.toJSONString(branchTransactionDO));\n-            pipeline.sync();\n-            return true;\n+            return false;\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n         }\n     }\n \n+    /**\n+     * Delete the global transaction.\n+     * It will operate two parts:\n+     *  1.delete the global session map\n+     *  2.remove the xid from the global status list\n+     * If the operate failed,the succeed operates will rollback\n+     * @param globalTransactionDO\n+     * @return\n+     */\n     private boolean deleteGlobalTransactionDO(GlobalTransactionDO globalTransactionDO) {\n+        String globalKey = buildGlobalKeyByTransactionId(globalTransactionDO.getTransactionId());\n         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n-            String[] keys = new String[3];\n-            keys[0] = getGlobalKeyByXid(globalTransactionDO.getXid());\n-            keys[1] = getGlobalKeyByTransactionId(globalTransactionDO.getTransactionId());\n-            keys[2] = getBranchListKeyByXid(globalTransactionDO.getXid());\n-            jedis.del(keys);\n-            return true;\n+            Map<String, String> globalTransactionDoMap = jedis.hgetAll(globalKey);\n+            String xid = globalTransactionDoMap.get(REDIS_KEY_GLOBAL_XID);\n+            if (StringUtils.isEmpty(xid)) {\n+                LOGGER.warn(\"Global transaction is not exist,xid = {}.Maybe has been deleted by another tc server\",\n+                        globalTransactionDO.getXid());\n+                return true;\n+            }\n+\n+            Pipeline pipelined = jedis.pipelined();\n+            pipelined.lrem(buildGlobalStatus(globalTransactionDO.getStatus()), 0, globalTransactionDO.getXid());\n+            pipelined.del(globalKey);\n+            List<Object> objects = pipelined.syncAndReturnAll();\n+            if (CollectionUtils.isNotEmpty(objects)) {\n+                Long lrem = Long.valueOf(objects.get(0).toString());\n+                Long del = Long.valueOf(objects.get(1).toString());\n+                if (lrem > 0 && del > 0) {\n+                    return true;\n+                } else {\n+                    if (lrem > 0) {\n+                        jedis.rpush(buildGlobalStatus(globalTransactionDO.getStatus()),globalTransactionDO.getXid());\n+                    }\n+                    if (del > 0) {\n+                        jedis.hmset(globalKey,globalTransactionDoMap);\n+                    }\n+                }\n+\n+            }\n+            return false;\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n         }\n     }\n \n-    private boolean insertOrUpdateGlobalTransactionDO(GlobalTransactionDO convertGlobalTransactionDO) {\n+    /**\n+     * Update the global transaction.\n+     * It will update two parts:\n+     *  1.the global session map\n+     *  2.the global status list\n+     * If the update failed,the succeed operates will rollback\n+     * @param globalTransactionDO\n+     * @return\n+     */\n+    private boolean updateGlobalTransactionDO(GlobalTransactionDO globalTransactionDO) {\n+        String xid = globalTransactionDO.getXid();\n+        String globalKey = buildGlobalKeyByTransactionId(globalTransactionDO.getTransactionId());\n         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n-            String keys = getGlobalKeyByXid(convertGlobalTransactionDO.getXid());\n-            Pipeline pipeline = jedis.pipelined();\n-            String json = JSON.toJSONString(convertGlobalTransactionDO);\n-            pipeline.set(keys, json);\n-            keys = getGlobalKeyByTransactionId(convertGlobalTransactionDO.getTransactionId());\n-            pipeline.set(keys, json);\n-            pipeline.sync();\n-            return true;\n+            // Defensive watch to prevent other TC server operating concurrently,Fail fast\n+            jedis.watch(globalKey);\n+            String previousStatus = jedis.hget(globalKey, REDIS_KEY_GLOBAL_STATUS);\n+            if (StringUtils.isEmpty(previousStatus)) {\n+                throw new StoreException(\"Global transaction is not exist, update global transaction failed.\");\n+            }\n+            String previousGmtModified = jedis.hget(globalKey, REDIS_KEY_GLOBAL_GMT_MODIFIED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07afa8672b209c5e544a4123e201f5dde6dea326"}, "originalPosition": 347}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "449fb8470f4d0ce21111ffc7792828c942908208", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/449fb8470f4d0ce21111ffc7792828c942908208", "committedDate": "2020-09-21T13:52:47Z", "message": "optimize:hget -> hmget"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8dd0161d9fa3751bcffd912837e33d91ce20480", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/e8dd0161d9fa3751bcffd912837e33d91ce20480", "committedDate": "2020-09-21T13:56:08Z", "message": "optimize:import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNTE2ODEx", "url": "https://github.com/seata/seata/pull/3062#pullrequestreview-493516811", "createdAt": "2020-09-22T14:23:59Z", "commit": {"oid": "e8dd0161d9fa3751bcffd912837e33d91ce20480"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4457a14748958c41aafdc97778d4d4c14e5a6fd1", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/4457a14748958c41aafdc97778d4d4c14e5a6fd1", "committedDate": "2020-09-25T14:24:18Z", "message": "fix : the conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef6a8877a344d7e5181f87561f7ed29890fce850", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/ef6a8877a344d7e5181f87561f7ed29890fce850", "committedDate": "2020-09-27T07:53:53Z", "message": "optimize:the pipeline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e90279405d7a85b8b3ba70b526d9534b43ae3f8", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/6e90279405d7a85b8b3ba70b526d9534b43ae3f8", "committedDate": "2020-10-05T14:12:56Z", "message": "Merge branch 'develop' of github.com:seata/seata into refactor_redis_session"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94147a3e14138f1877f7b8abe225a4d2ba94b413", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/94147a3e14138f1877f7b8abe225a4d2ba94b413", "committedDate": "2020-10-10T07:52:22Z", "message": "Merge branch 'develop' into refactor_redis_session"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efa9fae17918927e49ad17e3bc9d224cea06a6e1", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/efa9fae17918927e49ad17e3bc9d224cea06a6e1", "committedDate": "2020-10-10T08:35:09Z", "message": "Merge branch 'develop' of github.com:seata/seata into refactor_redis_session"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb7ec61cb8618bf5225027a3cbf5caf7fc68d467", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/bb7ec61cb8618bf5225027a3cbf5caf7fc68d467", "committedDate": "2020-10-10T11:22:39Z", "message": "Merge branch 'develop' of github.com:seata/seata into refactor_redis_session"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "131e8fedfea9b75013d882314f3c6a0ac932017f", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/131e8fedfea9b75013d882314f3c6a0ac932017f", "committedDate": "2020-10-10T15:27:26Z", "message": "optimize:the null judge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef32fc3fa0617c52a79ed676e2d581881c25df61", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/ef32fc3fa0617c52a79ed676e2d581881c25df61", "committedDate": "2020-10-10T15:29:52Z", "message": "Merge branch 'refactor_redis_session' of github.com:lightClouds917/seata into refactor_redis_session"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTA2MTE3", "url": "https://github.com/seata/seata/pull/3062#pullrequestreview-506106117", "createdAt": "2020-10-10T15:35:59Z", "commit": {"oid": "ef32fc3fa0617c52a79ed676e2d581881c25df61"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NDMxMzcy", "url": "https://github.com/seata/seata/pull/3062#pullrequestreview-506431372", "createdAt": "2020-10-12T09:05:44Z", "commit": {"oid": "ef32fc3fa0617c52a79ed676e2d581881c25df61"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOTowNTo0NFrOHf1tyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOTowNzozMlrOHf1yDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE0Nzk3OQ==", "bodyText": "Repeat method", "url": "https://github.com/seata/seata/pull/3062#discussion_r503147979", "createdAt": "2020-10-12T09:05:44Z", "author": {"login": "ph3636"}, "path": "server/src/main/java/io/seata/server/storage/redis/store/RedisTransactionStoreManager.java", "diffHunk": "@@ -200,213 +334,153 @@ public GlobalSession readSession(String xid) {\n     }\n \n     /**\n-     * Read session list.\n+     * Read globalSession list by global status\n      *\n-     * @param statuses\n-     *            the statuses\n+     * @param statuses the statuses\n      * @return the list\n      */\n     public List<GlobalSession> readSession(GlobalStatus[] statuses) {\n-        List<Integer> states = new ArrayList<>();\n+        List<String> statusKeys = new ArrayList<>();\n         for (int i = 0; i < statuses.length; i++) {\n-            states.add(statuses[i].getCode());\n+            statusKeys.add(buildGlobalStatus(statuses[i].getCode()));\n         }\n         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n-            Set<String> keys = new HashSet<>();\n-            String cursor = INITIAL_CURSOR;\n-            ScanParams params = new ScanParams();\n-            params.count(logQueryLimit);\n-            params.match(getGlobalKeyByXid(\"*\"));\n-            ScanResult<String> scans;\n-            do {\n-                scans = jedis.scan(cursor, params);\n-                keys.addAll(scans.getResult());\n-                cursor = scans.getCursor();\n-            } while (!INITIAL_CURSOR.equals(cursor));\n-            if (CollectionUtils.isNotEmpty(keys)) {\n-                List<GlobalTransactionDO> globalTransactionDOs = new ArrayList<>();\n-                for (String globalKey : keys) {\n-                    GlobalTransactionDO globalTransactionDO =\n-                        JSON.parseObject(jedis.get(globalKey), GlobalTransactionDO.class);\n-                    if (globalTransactionDO != null && states.contains(globalTransactionDO.getStatus())) {\n-                        globalTransactionDOs.add(globalTransactionDO);\n-                    }\n-                }\n-                if (CollectionUtils.isNotEmpty(globalTransactionDOs)) {\n-                    List<String> xids =\n-                        globalTransactionDOs.stream().map(GlobalTransactionDO::getXid).collect(Collectors.toList());\n-                    List<BranchTransactionDO> branchTransactionDOs = new ArrayList<>();\n-                    for (String xid : xids) {\n-                        Set<String> branches = lRange(jedis, getBranchListKeyByXid(xid));\n-                        if (CollectionUtils.isNotEmpty(branches)) {\n-                            branchTransactionDOs.addAll(getBranchJsons(jedis, branches));\n-                        }\n-                    }\n-                    Map<String, List<BranchTransactionDO>> branchTransactionDOsMap =\n-                        branchTransactionDOs.stream().collect(Collectors.groupingBy(BranchTransactionDO::getXid,\n-                            LinkedHashMap::new, Collectors.toList()));\n-                    return globalTransactionDOs.stream()\n-                        .map(globalTransactionDO -> getGlobalSession(globalTransactionDO,\n-                            branchTransactionDOsMap.get(globalTransactionDO.getXid())))\n-                        .collect(Collectors.toList());\n-                }\n+            Pipeline pipelined = jedis.pipelined();\n+            statusKeys.stream().forEach(statusKey -> pipelined.lrange(statusKey,0,-1));\n+            List<List<String>> list = (List<List<String>>)(List)pipelined.syncAndReturnAll();\n+            List<String> xids = new ArrayList<>();\n+            if (CollectionUtils.isNotEmpty(list)) {\n+                xids = list.stream().flatMap(ll -> ll.stream()).collect(Collectors.toList());\n             }\n+            List<GlobalSession> globalSessions = new ArrayList<>();\n+            xids.parallelStream().forEach(xid -> {\n+                GlobalSession globalSession = this.readSession(xid, true);\n+                if (globalSession != null) {\n+                    globalSessions.add(globalSession);\n+                }\n+            });\n+            return globalSessions;\n         }\n-        return null;\n     }\n \n+    /**\n+     * read the global session list by different condition\n+     * @param sessionCondition the session condition\n+     * @return the global sessions\n+     */\n     @Override\n     public List<GlobalSession> readSession(SessionCondition sessionCondition) {\n-        try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n-            if (!StringUtils.isEmpty(sessionCondition.getXid())) {\n-                String globalSessionJson = jedis.get(getGlobalKeyByXid(sessionCondition.getXid()));\n-                if (!StringUtils.isEmpty(globalSessionJson)) {\n-                    GlobalSession session =\n-                        convertGlobalSession(JSON.parseObject(globalSessionJson, GlobalTransactionDO.class));\n-                    List<GlobalSession> globalSessions = new ArrayList<>();\n-                    globalSessions.add(session);\n-                    return globalSessions;\n-                }\n-            } else if (sessionCondition.getTransactionId() != null) {\n-                String global = jedis.get(getGlobalKeyByTransactionId(sessionCondition.getTransactionId()));\n-                if (StringUtils.isEmpty(global)) {\n-                    return null;\n-                }\n-                GlobalTransactionDO globalTransactionDO = JSON.parseObject(global, GlobalTransactionDO.class);\n-                String branchKey = getBranchListKeyByXid(globalTransactionDO.getXid());\n-                Set<String> keys = lRange(jedis, branchKey);\n-                List<BranchTransactionDO> branchTransactionDOs = null;\n-                if (CollectionUtils.isNotEmpty(keys)) {\n-                    branchTransactionDOs = getBranchJsons(jedis, keys);\n-                }\n-                GlobalSession globalSession = getGlobalSession(globalTransactionDO, branchTransactionDOs);\n-                List<GlobalSession> globalSessions = new ArrayList<>();\n+        List<GlobalSession> globalSessions = new ArrayList<>();\n+        if (StringUtils.isNotEmpty(sessionCondition.getXid())) {\n+            GlobalSession globalSession = this.readSession(sessionCondition.getXid(), true);\n+            if (globalSession != null) {\n                 globalSessions.add(globalSession);\n-                return globalSessions;\n-            } else if (CollectionUtils.isNotEmpty(sessionCondition.getStatuses())) {\n-                return readSession(sessionCondition.getStatuses());\n             }\n+            return globalSessions;\n+        } else if (sessionCondition.getTransactionId() != null) {\n+            GlobalSession globalSession = this\n+                    .readSessionByTransactionId(sessionCondition.getTransactionId().toString(), true);\n+            if (globalSession != null) {\n+                globalSessions.add(globalSession);\n+            }\n+            return globalSessions;\n+        } else if (CollectionUtils.isNotEmpty(sessionCondition.getStatuses())) {\n+            return readSession(sessionCondition.getStatuses());\n+        } else if (sessionCondition.getStatus() != null) {\n+            return readSession(new GlobalStatus[]{sessionCondition.getStatus()});\n         }\n         return null;\n     }\n \n-    private List<BranchTransactionDO> getBranchJsons(Jedis jedis, Set<String> keys) {\n-        List<BranchTransactionDO> branchTransactionDOs = new ArrayList<>();\n-        List<String> branchJsons = jedis.mget(keys.toArray(new String[0]));\n-        for (String branchJson : branchJsons) {\n-            if (!StringUtils.isEmpty(branchJson)) {\n-                branchTransactionDOs.add(JSON.parseObject(branchJson, BranchTransactionDO.class));\n+    /**\n+     * assemble the global session and branch session\n+     * @param globalTransactionDO the global transactionDo\n+     * @param branchTransactionDOs the branch transactionDos\n+     * @return the global session with branch session\n+     */\n+    private GlobalSession getGlobalSession(GlobalTransactionDO globalTransactionDO,\n+            List<BranchTransactionDO> branchTransactionDOs) {\n+        GlobalSession globalSession = SessionConverter.convertGlobalSession(globalTransactionDO);\n+        if (CollectionUtils.isNotEmpty(branchTransactionDOs)) {\n+            for (BranchTransactionDO branchTransactionDO : branchTransactionDOs) {\n+                globalSession.add(SessionConverter.convertBranchSession(branchTransactionDO));\n             }\n         }\n-        return branchTransactionDOs;\n+        return globalSession;\n     }\n \n-    private GlobalTransactionDO convertGlobalTransactionDO(SessionStorable session) {\n-        if (session == null || !(session instanceof GlobalSession)) {\n-            throw new IllegalArgumentException(\n-                \"the parameter of SessionStorable is not available, SessionStorable:\" + StringUtils.toString(session));\n+    /**\n+     * read the global session by transactionId\n+     * @param transactionId the transaction id\n+     * @param withBranchSessions if read branch sessions\n+     * @return the global session\n+     */\n+    private GlobalSession readSessionByTransactionId(String transactionId, boolean withBranchSessions) {\n+        String globalKey = buildGlobalKeyByTransactionId(transactionId);\n+        String xid = null;\n+        try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n+            Map<String, String> map  = jedis.hgetAll(globalKey);\n+            if (CollectionUtils.isEmpty(map)) {\n+                return null;\n+            }\n+            GlobalTransactionDO globalTransactionDO = (GlobalTransactionDO)BeanUtils.mapToObject(map, GlobalTransactionDO.class);\n+            if (globalTransactionDO != null) {\n+                xid = globalTransactionDO.getXid();\n+            }\n+            List<BranchTransactionDO> branchTransactionDOs = new ArrayList<>();\n+            if (withBranchSessions) {\n+                branchTransactionDOs = this.readBranchSessionByXid(jedis,xid);\n+            }\n+            return getGlobalSession(globalTransactionDO,branchTransactionDOs);\n         }\n-        GlobalSession globalSession = (GlobalSession)session;\n-\n-        GlobalTransactionDO globalTransactionDO = new GlobalTransactionDO();\n-        globalTransactionDO.setXid(globalSession.getXid());\n-        globalTransactionDO.setStatus(globalSession.getStatus().getCode());\n-        globalTransactionDO.setApplicationId(globalSession.getApplicationId());\n-        globalTransactionDO.setBeginTime(globalSession.getBeginTime());\n-        globalTransactionDO.setTimeout(globalSession.getTimeout());\n-        globalTransactionDO.setTransactionId(globalSession.getTransactionId());\n-        globalTransactionDO.setTransactionName(globalSession.getTransactionName());\n-        globalTransactionDO.setTransactionServiceGroup(globalSession.getTransactionServiceGroup());\n-        globalTransactionDO.setApplicationData(globalSession.getApplicationData());\n-        return globalTransactionDO;\n     }\n \n-    private BranchTransactionDO convertBranchTransactionDO(SessionStorable session) {\n-        if (session == null || !(session instanceof BranchSession)) {\n-            throw new IllegalArgumentException(\n-                \"the parameter of SessionStorable is not available, SessionStorable:\" + StringUtils.toString(session));\n+    /**\n+     * Read the branch session list by xid\n+     * @param jedis\n+     * @param xid the xid\n+     * @return the branch transactionDo list\n+     */\n+    private List<BranchTransactionDO> readBranchSessionByXid(Jedis jedis,String xid) {\n+        List<BranchTransactionDO> branchTransactionDOs = new ArrayList<>();\n+        String branchListKey = buildBranchListKeyByXid(xid);\n+        List<String> branchKeys = jedis.lrange(branchListKey, 0, -1);\n+        Pipeline pipeline = jedis.pipelined();\n+        if (CollectionUtils.isNotEmpty(branchKeys)) {\n+            branchKeys.stream().forEachOrdered(branchKey -> pipeline.hgetAll(branchKey));\n+            List<Object> branchInfos = pipeline.syncAndReturnAll();\n+            for (Object branchInfo : branchInfos) {\n+                if (branchInfo != null) {\n+                    Map<String, String> branchInfoMap = (Map<String, String>) branchInfo;\n+                    BranchTransactionDO branchTransactionDO =\n+                            (BranchTransactionDO) BeanUtils.mapToObject(branchInfoMap, BranchTransactionDO.class);\n+                    branchTransactionDOs.add(branchTransactionDO);\n+                }\n+            }\n         }\n-        BranchSession branchSession = (BranchSession)session;\n-\n-        BranchTransactionDO branchTransactionDO = new BranchTransactionDO();\n-        branchTransactionDO.setXid(branchSession.getXid());\n-        branchTransactionDO.setBranchId(branchSession.getBranchId());\n-        branchTransactionDO.setBranchType(branchSession.getBranchType().name());\n-        branchTransactionDO.setClientId(branchSession.getClientId());\n-        branchTransactionDO.setResourceGroupId(branchSession.getResourceGroupId());\n-        branchTransactionDO.setTransactionId(branchSession.getTransactionId());\n-        branchTransactionDO.setApplicationData(branchSession.getApplicationData());\n-        branchTransactionDO.setResourceId(branchSession.getResourceId());\n-        branchTransactionDO.setStatus(branchSession.getStatus().getCode());\n-        return branchTransactionDO;\n-    }\n-\n-    private GlobalSession convertGlobalSession(GlobalTransactionDO globalTransactionDO) {\n-        GlobalSession session =\n-            new GlobalSession(globalTransactionDO.getApplicationId(), globalTransactionDO.getTransactionServiceGroup(),\n-                globalTransactionDO.getTransactionName(), globalTransactionDO.getTimeout());\n-        session.setTransactionId(globalTransactionDO.getTransactionId());\n-        session.setXid(globalTransactionDO.getXid());\n-        session.setStatus(GlobalStatus.get(globalTransactionDO.getStatus()));\n-        session.setApplicationData(globalTransactionDO.getApplicationData());\n-        session.setBeginTime(globalTransactionDO.getBeginTime());\n-        return session;\n-    }\n-\n-    private BranchSession convertBranchSession(BranchTransactionDO branchTransactionDO) {\n-        BranchSession branchSession = new BranchSession();\n-        branchSession.setXid(branchTransactionDO.getXid());\n-        branchSession.setTransactionId(branchTransactionDO.getTransactionId());\n-        branchSession.setApplicationData(branchTransactionDO.getApplicationData());\n-        branchSession.setBranchId(branchTransactionDO.getBranchId());\n-        branchSession.setBranchType(BranchType.valueOf(branchTransactionDO.getBranchType()));\n-        branchSession.setResourceId(branchTransactionDO.getResourceId());\n-        branchSession.setClientId(branchTransactionDO.getClientId());\n-        branchSession.setResourceGroupId(branchTransactionDO.getResourceGroupId());\n-        branchSession.setStatus(BranchStatus.get(branchTransactionDO.getStatus()));\n-        return branchSession;\n-    }\n-\n-    private GlobalSession getGlobalSession(GlobalTransactionDO globalTransactionDO,\n-        List<BranchTransactionDO> branchTransactionDOs) {\n-        GlobalSession globalSession = convertGlobalSession(globalTransactionDO);\n-        // branch transactions\n         if (CollectionUtils.isNotEmpty(branchTransactionDOs)) {\n-            for (BranchTransactionDO branchTransactionDO : branchTransactionDOs) {\n-                globalSession.add(convertBranchSession(branchTransactionDO));\n-            }\n+            branchTransactionDOs = branchTransactionDOs.stream().sorted(Comparator.comparing(BranchTransactionDO::getGmtCreate))\n+                    .collect(Collectors.toList());\n         }\n-        return globalSession;\n+        return branchTransactionDOs;\n     }\n \n-    private Set<String> lRange(Jedis jedis, String key) {\n-        Set<String> keys = new HashSet<>();\n-        List<String> redisBranchJson;\n-        int start = 0;\n-        int stop = logQueryLimit;\n-        do {\n-            redisBranchJson = jedis.lrange(key, start, stop);\n-            keys.addAll(redisBranchJson);\n-            start = keys.size();\n-            stop = start + logQueryLimit;\n-        } while (CollectionUtils.isNotEmpty(redisBranchJson));\n-        return keys;\n+    private String buildBranchListKeyByXid(String xid) {\n+        return REDIS_SEATA_BRANCHES_PREFIX + xid;\n     }\n \n-    private String getGlobalKeyByXid(String xid) {\n-        return DEFAULT_REDIS_SEATA_GLOBAL_SESSION_PREFIX + xid;\n+    private String buildGlobalKeyByTransactionId(Long transactionId) {\n+        return REDIS_SEATA_GLOBAL_PREFIX + transactionId;\n     }\n-\n-    private String getBranchListKeyByXid(String xid) {\n-        return DEFAULT_REDIS_SEATA_XID_BRANCHS_PREFIX + xid;\n+    private String buildGlobalKeyByTransactionId(String transactionId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef32fc3fa0617c52a79ed676e2d581881c25df61"}, "originalPosition": 683}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE0OTA2OA==", "bodyText": "Can be changed to Map<String,String> map = new HashMap<>(2, 1);", "url": "https://github.com/seata/seata/pull/3062#discussion_r503149068", "createdAt": "2020-10-12T09:07:32Z", "author": {"login": "ph3636"}, "path": "server/src/main/java/io/seata/server/storage/redis/store/RedisTransactionStoreManager.java", "diffHunk": "@@ -90,100 +94,230 @@ public static RedisTransactionStoreManager getInstance() {\n     @Override\n     public boolean writeSession(LogOperation logOperation, SessionStorable session) {\n         if (LogOperation.GLOBAL_ADD.equals(logOperation)) {\n-            return insertOrUpdateGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return insertGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.GLOBAL_UPDATE.equals(logOperation)) {\n-            return insertOrUpdateGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return updateGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.GLOBAL_REMOVE.equals(logOperation)) {\n-            return deleteGlobalTransactionDO(convertGlobalTransactionDO(session));\n+            return deleteGlobalTransactionDO(SessionConverter.convertGlobalTransactionDO(session));\n         } else if (LogOperation.BRANCH_ADD.equals(logOperation)) {\n-            return insertOrUpdateBranchTransactionDO(convertBranchTransactionDO(session));\n+            return insertBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else if (LogOperation.BRANCH_UPDATE.equals(logOperation)) {\n-            return insertOrUpdateBranchTransactionDO(convertBranchTransactionDO(session));\n+            return updateBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else if (LogOperation.BRANCH_REMOVE.equals(logOperation)) {\n-            return deleteBranchTransactionDO(convertBranchTransactionDO(session));\n+            return deleteBranchTransactionDO(SessionConverter.convertBranchTransactionDO(session));\n         } else {\n             throw new StoreException(\"Unknown LogOperation:\" + logOperation.name());\n         }\n     }\n \n+    /**\n+     * Insert branch transaction\n+     * @param branchTransactionDO\n+     * @return the boolean\n+     */\n+    private boolean insertBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+        String branchKey = buildBranchKey(branchTransactionDO.getBranchId());\n+        String branchListKey = buildBranchListKeyByXid(branchTransactionDO.getXid());\n+        try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n+            Date now = new Date();\n+            branchTransactionDO.setGmtCreate(now);\n+            branchTransactionDO.setGmtModified(now);\n+            Pipeline pipelined = jedis.pipelined();\n+            pipelined.hmset(branchKey, BeanUtils.objectToMap(branchTransactionDO));\n+            pipelined.rpush(branchListKey, branchKey);\n+            pipelined.sync();\n+            return true;\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Delete the branch transaction\n+     * @param branchTransactionDO\n+     * @return\n+     */\n     private boolean deleteBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+        String branchKey = buildBranchKey(branchTransactionDO.getBranchId());\n         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n-            String key = getBranchKey(branchTransactionDO.getBranchId());\n-            jedis.del(key);\n+            Map<String, String> branchTransactionDOMap = jedis.hgetAll(branchKey);\n+            String xid = branchTransactionDOMap.get(REDIS_KEY_BRANCH_XID);\n+            if (StringUtils.isEmpty(xid)) {\n+                return true;\n+            }\n+            String branchListKey = buildBranchListKeyByXid(branchTransactionDO.getXid());\n+            Pipeline pipelined = jedis.pipelined();\n+            pipelined.lrem(branchListKey, 0, branchKey);\n+            pipelined.del(branchKey);\n+            pipelined.sync();\n             return true;\n+        } catch (Exception ex) {\n+            throw new RedisException(ex);\n         }\n     }\n \n-    private boolean insertOrUpdateBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+    /**\n+     * Update the branch transaction\n+     * @param branchTransactionDO\n+     * @return\n+     */\n+    private boolean updateBranchTransactionDO(BranchTransactionDO branchTransactionDO) {\n+        String branchKey = buildBranchKey(branchTransactionDO.getBranchId());\n         try (Jedis jedis = JedisPooledFactory.getJedisInstance()) {\n-            String key = getBranchKey(branchTransactionDO.getBranchId());\n-            String branch = jedis.get(key);\n-            Pipeline pipeline = jedis.pipelined();\n-            if (StringUtils.isEmpty(branch)) {\n-                pipeline.lpush(getBranchListKeyByXid(branchTransactionDO.getXid()), key);\n+            String previousBranchStatus = jedis.hget(branchKey, REDIS_KEY_BRANCH_STATUS);\n+            if (StringUtils.isEmpty(previousBranchStatus)) {\n+                throw new StoreException(\"Branch transaction is not exist, update branch transaction failed.\");\n             }\n-            pipeline.set(key, JSON.toJSONString(branchTransactionDO));\n-            pipeline.sync();\n+            Map<String,String> map = new HashMap<>(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef32fc3fa0617c52a79ed676e2d581881c25df61"}, "originalPosition": 190}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d4974f76cde268cebbacff7cc112de8430725d9", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/6d4974f76cde268cebbacff7cc112de8430725d9", "committedDate": "2020-10-12T09:26:21Z", "message": "Merge branch 'develop' of github.com:seata/seata into refactor_redis_session"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02b67f72c0426d5f6db3b5b755057e43fc0e55cf", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/02b67f72c0426d5f6db3b5b755057e43fc0e55cf", "committedDate": "2020-10-12T09:53:24Z", "message": "optimize:the map and buildGlobalKeyByTransactionId"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cbea23731b7925e89e889412752764c6d82b05c", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/3cbea23731b7925e89e889412752764c6d82b05c", "committedDate": "2020-10-12T10:45:18Z", "message": "Merge branch 'develop' into refactor_redis_session"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "105a79bbf9ed76469f66c6c65c1a6d52408f2b9a", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/105a79bbf9ed76469f66c6c65c1a6d52408f2b9a", "committedDate": "2020-10-13T11:43:30Z", "message": "Merge branch 'develop' of github.com:seata/seata into refactor_redis_session"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ab7a9ea6a6791f16e8a162b84feb3fd4dd645f2", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/7ab7a9ea6a6791f16e8a162b84feb3fd4dd645f2", "committedDate": "2020-10-15T15:18:10Z", "message": "Merge branch 'develop' into refactor_redis_session"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6a03f7effd7f5cf41b604757c9d9e1667346e06", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/d6a03f7effd7f5cf41b604757c9d9e1667346e06", "committedDate": "2020-10-19T05:53:40Z", "message": "fix:the conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47187eb0a44d2fb0b61e858bc9da76e1919c3d51", "author": {"user": {"login": "lightClouds917", "name": "IT\u4e91\u6e05"}}, "url": "https://github.com/seata/seata/commit/47187eb0a44d2fb0b61e858bc9da76e1919c3d51", "committedDate": "2020-10-19T05:56:07Z", "message": "Merge branch 'refactor_redis_session' of github.com:lightClouds917/seata into refactor_redis_session"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNTg4OTU4", "url": "https://github.com/seata/seata/pull/3062#pullrequestreview-511588958", "createdAt": "2020-10-19T09:45:28Z", "commit": {"oid": "47187eb0a44d2fb0b61e858bc9da76e1919c3d51"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3630, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}