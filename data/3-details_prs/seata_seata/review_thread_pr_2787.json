{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMjg5NDQ1", "number": 2787, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODozODowMlrOEEMsFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMzowMDo0NFrOEG-bhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODM3NjUyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/seata/common/util/IdWorker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODozODowMlrOGhqy1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMjo1ODoyMFrOGi1dmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1NzMzNA==", "bodyText": "if according to the current practice, will the id be greater than 1023? if yes, it is not advisable to simply throw an exception", "url": "https://github.com/seata/seata/pull/2787#discussion_r437957334", "createdAt": "2020-06-10T08:38:02Z", "author": {"login": "a364176773"}, "path": "common/src/main/java/io/seata/common/util/IdWorker.java", "diffHunk": "@@ -144,12 +147,24 @@ public static IdWorker getInstance() {\n         if (idWorker == null) {\n             synchronized (IdWorker.class) {\n                 if (idWorker == null) {\n-                    init(ThreadLocalRandom.current().nextLong(1024));\n+                    init(initWorkerId());\n                 }\n             }\n         }\n         return idWorker;\n     }\n+    public static long initWorkerId(){\n+        InetAddress address;\n+        try {\n+            address = InetAddress.getLocalHost();\n+        } catch (final UnknownHostException e) {\n+            throw new IllegalStateException(\"Cannot get LocalHost InetAddress, please check your network!\");\n+        }\n+        byte[] ipAddressByteArray = address.getAddress();\n+        long workerId = (((ipAddressByteArray[ipAddressByteArray.length - 2] & 0B11) << Byte.SIZE) + (ipAddressByteArray[ipAddressByteArray.length - 1] & 0xFF));\n+        Preconditions.checkArgument(workerId >= 0L && workerId < 1024L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab557970d3643805d13c65dd3ff3cbe574f81384"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE4MDY5OQ==", "bodyText": "No more than 1023, because according to the snowflake algorithm, the maximum 1111111111 is 1023", "url": "https://github.com/seata/seata/pull/2787#discussion_r439180699", "createdAt": "2020-06-12T02:58:20Z", "author": {"login": "lj2018110133"}, "path": "common/src/main/java/io/seata/common/util/IdWorker.java", "diffHunk": "@@ -144,12 +147,24 @@ public static IdWorker getInstance() {\n         if (idWorker == null) {\n             synchronized (IdWorker.class) {\n                 if (idWorker == null) {\n-                    init(ThreadLocalRandom.current().nextLong(1024));\n+                    init(initWorkerId());\n                 }\n             }\n         }\n         return idWorker;\n     }\n+    public static long initWorkerId(){\n+        InetAddress address;\n+        try {\n+            address = InetAddress.getLocalHost();\n+        } catch (final UnknownHostException e) {\n+            throw new IllegalStateException(\"Cannot get LocalHost InetAddress, please check your network!\");\n+        }\n+        byte[] ipAddressByteArray = address.getAddress();\n+        long workerId = (((ipAddressByteArray[ipAddressByteArray.length - 2] & 0B11) << Byte.SIZE) + (ipAddressByteArray[ipAddressByteArray.length - 1] & 0xFF));\n+        Preconditions.checkArgument(workerId >= 0L && workerId < 1024L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1NzMzNA=="}, "originalCommit": {"oid": "ab557970d3643805d13c65dd3ff3cbe574f81384"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODM4NzMyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/seata/server/ParameterParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODo0MDo1M1rOGhq5og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMjo1ODo0NlrOGi1d_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1OTA3NA==", "bodyText": "whether the serverNode is null or out of range,do this again", "url": "https://github.com/seata/seata/pull/2787#discussion_r437959074", "createdAt": "2020-06-10T08:40:53Z", "author": {"login": "a364176773"}, "path": "server/src/main/java/io/seata/server/ParameterParser.java", "diffHunk": "@@ -49,7 +50,7 @@\n \n     private static final int SERVER_DEFAULT_PORT = 8091;\n     private static final String SERVER_DEFAULT_STORE_MODE = \"file\";\n-    private static final Long SERVER_DEFAULT_NODE = ThreadLocalRandom.current().nextLong(1024);\n+    private static final Long SERVER_DEFAULT_NODE = IdWorker.initWorkerId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab557970d3643805d13c65dd3ff3cbe574f81384"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE4MDc5Nw==", "bodyText": "Already processed", "url": "https://github.com/seata/seata/pull/2787#discussion_r439180797", "createdAt": "2020-06-12T02:58:46Z", "author": {"login": "lj2018110133"}, "path": "server/src/main/java/io/seata/server/ParameterParser.java", "diffHunk": "@@ -49,7 +50,7 @@\n \n     private static final int SERVER_DEFAULT_PORT = 8091;\n     private static final String SERVER_DEFAULT_STORE_MODE = \"file\";\n-    private static final Long SERVER_DEFAULT_NODE = ThreadLocalRandom.current().nextLong(1024);\n+    private static final Long SERVER_DEFAULT_NODE = IdWorker.initWorkerId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1OTA3NA=="}, "originalCommit": {"oid": "ab557970d3643805d13c65dd3ff3cbe574f81384"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTk4NzU0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/seata/common/util/NumberUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMzo1ODoyMFrOGi2Rfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjoyOToxNFrOGi4ivw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE5Mzk4Mw==", "bodyText": "StringUtils.isNotBlank() ?", "url": "https://github.com/seata/seata/pull/2787#discussion_r439193983", "createdAt": "2020-06-12T03:58:20Z", "author": {"login": "a364176773"}, "path": "common/src/main/java/io/seata/common/util/NumberUtils.java", "diffHunk": "@@ -53,4 +53,11 @@ public static Long toLong(String str, final Long defaultValue) {\n             return defaultValue;\n         }\n     }\n+\n+    public static Long toLong(String str) {\n+        if (str != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fade3813799ca4ed175bd5eeb56299d02336bb3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzMTE2Nw==", "bodyText": "Ok\uff01 i will optimize it", "url": "https://github.com/seata/seata/pull/2787#discussion_r439231167", "createdAt": "2020-06-12T06:29:14Z", "author": {"login": "lj2018110133"}, "path": "common/src/main/java/io/seata/common/util/NumberUtils.java", "diffHunk": "@@ -53,4 +53,11 @@ public static Long toLong(String str, final Long defaultValue) {\n             return defaultValue;\n         }\n     }\n+\n+    public static Long toLong(String str) {\n+        if (str != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE5Mzk4Mw=="}, "originalCommit": {"oid": "1fade3813799ca4ed175bd5eeb56299d02336bb3"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTk5MDg1OnYy", "diffSide": "RIGHT", "path": "integration/http/src/test/java/io/seata/integration/http/HttpTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNDowMDo1NFrOGi2Tew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNDowMDo1NFrOGi2Tew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE5NDQ5MQ==", "bodyText": "????why modify the port", "url": "https://github.com/seata/seata/pull/2787#discussion_r439194491", "createdAt": "2020-06-12T04:00:54Z", "author": {"login": "a364176773"}, "path": "integration/http/src/test/java/io/seata/integration/http/HttpTest.java", "diffHunk": "@@ -40,7 +40,7 @@\n  */\n class HttpTest {\n \n-    private static final String host = \"http://127.0.0.1:8081\";\n+    private static final String host = \"http://127.0.0.1:8080\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fade3813799ca4ed175bd5eeb56299d02336bb3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzg5MTYyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/seata/common/util/IdWorker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNTo0NjoyM1rOGjI2bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNTo1MDo0NVrOGjI_iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5ODM0OQ==", "bodyText": "need to verify ipv6 address.", "url": "https://github.com/seata/seata/pull/2787#discussion_r439498349", "createdAt": "2020-06-12T15:46:23Z", "author": {"login": "slievrly"}, "path": "common/src/main/java/io/seata/common/util/IdWorker.java", "diffHunk": "@@ -144,13 +144,24 @@ public static IdWorker getInstance() {\n         if (idWorker == null) {\n             synchronized (IdWorker.class) {\n                 if (idWorker == null) {\n-                    init(ThreadLocalRandom.current().nextLong(1024));\n+                    init(initWorkerId());\n                 }\n             }\n         }\n         return idWorker;\n     }\n \n+    public static long initWorkerId() {\n+        InetAddress address;\n+        try {\n+            address = InetAddress.getLocalHost();\n+        } catch (final UnknownHostException e) {\n+            throw new IllegalStateException(\"Cannot get LocalHost InetAddress, please check your network!\");\n+        }\n+        byte[] ipAddressByteArray = address.getAddress();\n+        return ((ipAddressByteArray[ipAddressByteArray.length - 2] & 0B11) << Byte.SIZE) + (ipAddressByteArray[ipAddressByteArray.length - 1] & 0xFF);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b148f7dc29fdba86e9a0c6000db6c5fd4cea3ba5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUwMDY4Mw==", "bodyText": "Ok i will handle it", "url": "https://github.com/seata/seata/pull/2787#discussion_r439500683", "createdAt": "2020-06-12T15:50:45Z", "author": {"login": "lj2018110133"}, "path": "common/src/main/java/io/seata/common/util/IdWorker.java", "diffHunk": "@@ -144,13 +144,24 @@ public static IdWorker getInstance() {\n         if (idWorker == null) {\n             synchronized (IdWorker.class) {\n                 if (idWorker == null) {\n-                    init(ThreadLocalRandom.current().nextLong(1024));\n+                    init(initWorkerId());\n                 }\n             }\n         }\n         return idWorker;\n     }\n \n+    public static long initWorkerId() {\n+        InetAddress address;\n+        try {\n+            address = InetAddress.getLocalHost();\n+        } catch (final UnknownHostException e) {\n+            throw new IllegalStateException(\"Cannot get LocalHost InetAddress, please check your network!\");\n+        }\n+        byte[] ipAddressByteArray = address.getAddress();\n+        return ((ipAddressByteArray[ipAddressByteArray.length - 2] & 0B11) << Byte.SIZE) + (ipAddressByteArray[ipAddressByteArray.length - 1] & 0xFF);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5ODM0OQ=="}, "originalCommit": {"oid": "b148f7dc29fdba86e9a0c6000db6c5fd4cea3ba5"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzg5NTM4OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/seata/common/util/IdWorker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNTo0NzozNlrOGjI43Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNTo0NzozNlrOGjI43Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5ODk3Mw==", "bodyText": "the exception information should contain e.", "url": "https://github.com/seata/seata/pull/2787#discussion_r439498973", "createdAt": "2020-06-12T15:47:36Z", "author": {"login": "slievrly"}, "path": "common/src/main/java/io/seata/common/util/IdWorker.java", "diffHunk": "@@ -144,13 +144,24 @@ public static IdWorker getInstance() {\n         if (idWorker == null) {\n             synchronized (IdWorker.class) {\n                 if (idWorker == null) {\n-                    init(ThreadLocalRandom.current().nextLong(1024));\n+                    init(initWorkerId());\n                 }\n             }\n         }\n         return idWorker;\n     }\n \n+    public static long initWorkerId() {\n+        InetAddress address;\n+        try {\n+            address = InetAddress.getLocalHost();\n+        } catch (final UnknownHostException e) {\n+            throw new IllegalStateException(\"Cannot get LocalHost InetAddress, please check your network!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b148f7dc29fdba86e9a0c6000db6c5fd4cea3ba5"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzQ5NzY0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/seata/common/util/IdWorker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMzowMDo0NFrOGmGgZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjo1NDo0MVrOGmwj8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYwNTY3MA==", "bodyText": "I think it will always return 8 bytes, is it too big for long?", "url": "https://github.com/seata/seata/pull/2787#discussion_r442605670", "createdAt": "2020-06-19T03:00:44Z", "author": {"login": "l81893521"}, "path": "common/src/main/java/io/seata/common/util/IdWorker.java", "diffHunk": "@@ -144,13 +144,24 @@ public static IdWorker getInstance() {\n         if (idWorker == null) {\n             synchronized (IdWorker.class) {\n                 if (idWorker == null) {\n-                    init(ThreadLocalRandom.current().nextLong(1024));\n+                    init(initWorkerId());\n                 }\n             }\n         }\n         return idWorker;\n     }\n \n+    public static long initWorkerId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08d2a8a6b3e04b5e7f499285b6d9060af379b066"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI5NDcwNg==", "bodyText": "Indeed, it will be dealt with next time", "url": "https://github.com/seata/seata/pull/2787#discussion_r443294706", "createdAt": "2020-06-22T02:54:41Z", "author": {"login": "lj2018110133"}, "path": "common/src/main/java/io/seata/common/util/IdWorker.java", "diffHunk": "@@ -144,13 +144,24 @@ public static IdWorker getInstance() {\n         if (idWorker == null) {\n             synchronized (IdWorker.class) {\n                 if (idWorker == null) {\n-                    init(ThreadLocalRandom.current().nextLong(1024));\n+                    init(initWorkerId());\n                 }\n             }\n         }\n         return idWorker;\n     }\n \n+    public static long initWorkerId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYwNTY3MA=="}, "originalCommit": {"oid": "08d2a8a6b3e04b5e7f499285b6d9060af379b066"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1472, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}