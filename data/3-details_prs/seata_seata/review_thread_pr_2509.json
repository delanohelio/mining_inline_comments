{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MjcxMTEz", "number": 2509, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDo1NDo1N1rODvEuCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDo1NDo1N1rODvEuCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNjg2OTg3OnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/UpdateExecutor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDo1NDo1N1rOGBSTfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDowMDo1MFrOGFQFbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAwMTY2Mw==", "bodyText": "Columns from tableMeta, need to deal with keyword", "url": "https://github.com/seata/seata/pull/2509#discussion_r404001663", "createdAt": "2020-04-06T10:54:57Z", "author": {"login": "zjinlei"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/UpdateExecutor.java", "diffHunk": "@@ -66,20 +66,16 @@ protected TableRecords beforeImage() throws SQLException {\n \n     private String buildBeforeImageSQL(TableMeta tableMeta, ArrayList<List<Object>> paramAppenderList) {\n         SQLUpdateRecognizer recognizer = (SQLUpdateRecognizer)sqlRecognizer;\n-        List<String> updateColumns = recognizer.getUpdateColumns();\n         StringBuilder prefix = new StringBuilder(\"SELECT \");\n-        if (!containsPK(updateColumns)) {\n-            prefix.append(getColumnNameInSQL(tableMeta.getEscapePkName(getDbType()))).append(\", \");\n-        }\n         StringBuilder suffix = new StringBuilder(\" FROM \").append(getFromTableInSQL());\n         String whereCondition = buildWhereCondition(recognizer, paramAppenderList);\n         if (StringUtils.isNotBlank(whereCondition)) {\n             suffix.append(\" WHERE \").append(whereCondition);\n         }\n         suffix.append(\" FOR UPDATE\");\n         StringJoiner selectSQLJoin = new StringJoiner(\", \", prefix.toString(), suffix.toString());\n-        for (String updateColumn : updateColumns) {\n-            selectSQLJoin.add(updateColumn);\n+        for (String column : tableMeta.getAllColumns().keySet()) {\n+            selectSQLJoin.add(column);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2fc809af9388d2dc07d0f68b321f5878319a3ab"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUyNDI1OA==", "bodyText": "great found, fixed.", "url": "https://github.com/seata/seata/pull/2509#discussion_r404524258", "createdAt": "2020-04-07T04:12:53Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/UpdateExecutor.java", "diffHunk": "@@ -66,20 +66,16 @@ protected TableRecords beforeImage() throws SQLException {\n \n     private String buildBeforeImageSQL(TableMeta tableMeta, ArrayList<List<Object>> paramAppenderList) {\n         SQLUpdateRecognizer recognizer = (SQLUpdateRecognizer)sqlRecognizer;\n-        List<String> updateColumns = recognizer.getUpdateColumns();\n         StringBuilder prefix = new StringBuilder(\"SELECT \");\n-        if (!containsPK(updateColumns)) {\n-            prefix.append(getColumnNameInSQL(tableMeta.getEscapePkName(getDbType()))).append(\", \");\n-        }\n         StringBuilder suffix = new StringBuilder(\" FROM \").append(getFromTableInSQL());\n         String whereCondition = buildWhereCondition(recognizer, paramAppenderList);\n         if (StringUtils.isNotBlank(whereCondition)) {\n             suffix.append(\" WHERE \").append(whereCondition);\n         }\n         suffix.append(\" FOR UPDATE\");\n         StringJoiner selectSQLJoin = new StringJoiner(\", \", prefix.toString(), suffix.toString());\n-        for (String updateColumn : updateColumns) {\n-            selectSQLJoin.add(updateColumn);\n+        for (String column : tableMeta.getAllColumns().keySet()) {\n+            selectSQLJoin.add(column);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAwMTY2Mw=="}, "originalCommit": {"oid": "a2fc809af9388d2dc07d0f68b321f5878319a3ab"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1OTU5OA==", "bodyText": "solve update times cloumn", "url": "https://github.com/seata/seata/pull/2509#discussion_r408159598", "createdAt": "2020-04-14T14:00:50Z", "author": {"login": "hermitcai"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/UpdateExecutor.java", "diffHunk": "@@ -66,20 +66,16 @@ protected TableRecords beforeImage() throws SQLException {\n \n     private String buildBeforeImageSQL(TableMeta tableMeta, ArrayList<List<Object>> paramAppenderList) {\n         SQLUpdateRecognizer recognizer = (SQLUpdateRecognizer)sqlRecognizer;\n-        List<String> updateColumns = recognizer.getUpdateColumns();\n         StringBuilder prefix = new StringBuilder(\"SELECT \");\n-        if (!containsPK(updateColumns)) {\n-            prefix.append(getColumnNameInSQL(tableMeta.getEscapePkName(getDbType()))).append(\", \");\n-        }\n         StringBuilder suffix = new StringBuilder(\" FROM \").append(getFromTableInSQL());\n         String whereCondition = buildWhereCondition(recognizer, paramAppenderList);\n         if (StringUtils.isNotBlank(whereCondition)) {\n             suffix.append(\" WHERE \").append(whereCondition);\n         }\n         suffix.append(\" FOR UPDATE\");\n         StringJoiner selectSQLJoin = new StringJoiner(\", \", prefix.toString(), suffix.toString());\n-        for (String updateColumn : updateColumns) {\n-            selectSQLJoin.add(updateColumn);\n+        for (String column : tableMeta.getAllColumns().keySet()) {\n+            selectSQLJoin.add(column);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAwMTY2Mw=="}, "originalCommit": {"oid": "a2fc809af9388d2dc07d0f68b321f5878319a3ab"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1518, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}