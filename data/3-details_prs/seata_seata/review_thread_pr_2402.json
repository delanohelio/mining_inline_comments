{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4MTQzNjQ5", "number": 2402, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNDoxNjoyMlrODoHlDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTo0MDo0MFrODo-bIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzkzODA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/rpc/DefaultServerMessageListenerImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNDoxNjoyMlrOF2fKGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNTo1NTo1OVrOF2mSxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY3NzkxMg==", "bodyText": "debug and info Inconsistent", "url": "https://github.com/seata/seata/pull/2402#discussion_r392677912", "createdAt": "2020-03-15T14:16:22Z", "author": {"login": "zjinlei"}, "path": "core/src/main/java/io/seata/core/rpc/DefaultServerMessageListenerImpl.java", "diffHunk": "@@ -106,20 +106,25 @@ public void onTrxMessage(RpcMessage request, ChannelHandlerContext ctx) {\n     @Override\n     public void onRegRmMessage(RpcMessage request, ChannelHandlerContext ctx, RegisterCheckAuthHandler checkAuthHandler) {\n         RegisterRMRequest message = (RegisterRMRequest)request.getBody();\n+        String ipAndPort = NetUtil.toStringAddress(ctx.channel().remoteAddress());\n         boolean isSuccess = false;\n         try {\n             if (null == checkAuthHandler || checkAuthHandler.regResourceManagerCheckAuth(message)) {\n                 ChannelManager.registerRMChannel(message, ctx.channel());\n                 Version.putChannelVersion(ctx.channel(), message.getVersion());\n                 isSuccess = true;\n+                if (LOGGER.isDebugEnabled()) {\n+                    LOGGER.info(\"checkAuth for client:{},vgroup:{},applicationId:{}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e9526553770b120e499c995210b671c963d74cd"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3MTkxMQ==", "bodyText": "great found.", "url": "https://github.com/seata/seata/pull/2402#discussion_r392771911", "createdAt": "2020-03-16T03:56:29Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/rpc/DefaultServerMessageListenerImpl.java", "diffHunk": "@@ -106,20 +106,25 @@ public void onTrxMessage(RpcMessage request, ChannelHandlerContext ctx) {\n     @Override\n     public void onRegRmMessage(RpcMessage request, ChannelHandlerContext ctx, RegisterCheckAuthHandler checkAuthHandler) {\n         RegisterRMRequest message = (RegisterRMRequest)request.getBody();\n+        String ipAndPort = NetUtil.toStringAddress(ctx.channel().remoteAddress());\n         boolean isSuccess = false;\n         try {\n             if (null == checkAuthHandler || checkAuthHandler.regResourceManagerCheckAuth(message)) {\n                 ChannelManager.registerRMChannel(message, ctx.channel());\n                 Version.putChannelVersion(ctx.channel(), message.getVersion());\n                 isSuccess = true;\n+                if (LOGGER.isDebugEnabled()) {\n+                    LOGGER.info(\"checkAuth for client:{},vgroup:{},applicationId:{}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY3NzkxMg=="}, "originalCommit": {"oid": "7e9526553770b120e499c995210b671c963d74cd"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc5NDgyMw==", "bodyText": "done", "url": "https://github.com/seata/seata/pull/2402#discussion_r392794823", "createdAt": "2020-03-16T05:55:59Z", "author": {"login": "lightClouds917"}, "path": "core/src/main/java/io/seata/core/rpc/DefaultServerMessageListenerImpl.java", "diffHunk": "@@ -106,20 +106,25 @@ public void onTrxMessage(RpcMessage request, ChannelHandlerContext ctx) {\n     @Override\n     public void onRegRmMessage(RpcMessage request, ChannelHandlerContext ctx, RegisterCheckAuthHandler checkAuthHandler) {\n         RegisterRMRequest message = (RegisterRMRequest)request.getBody();\n+        String ipAndPort = NetUtil.toStringAddress(ctx.channel().remoteAddress());\n         boolean isSuccess = false;\n         try {\n             if (null == checkAuthHandler || checkAuthHandler.regResourceManagerCheckAuth(message)) {\n                 ChannelManager.registerRMChannel(message, ctx.channel());\n                 Version.putChannelVersion(ctx.channel(), message.getVersion());\n                 isSuccess = true;\n+                if (LOGGER.isDebugEnabled()) {\n+                    LOGGER.info(\"checkAuth for client:{},vgroup:{},applicationId:{}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY3NzkxMg=="}, "originalCommit": {"oid": "7e9526553770b120e499c995210b671c963d74cd"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzkzODUwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/rpc/DefaultServerMessageListenerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNDoxNzowM1rOF2fKWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNTo1NDozMFrOF2mRYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY3Nzk3Ng==", "bodyText": "debug and info Inconsistent", "url": "https://github.com/seata/seata/pull/2402#discussion_r392677976", "createdAt": "2020-03-15T14:17:03Z", "author": {"login": "zjinlei"}, "path": "core/src/main/java/io/seata/core/rpc/DefaultServerMessageListenerImpl.java", "diffHunk": "@@ -134,7 +139,7 @@ public void onRegTmMessage(RpcMessage request, ChannelHandlerContext ctx, Regist\n                 ChannelManager.registerTMChannel(message, ctx.channel());\n                 Version.putChannelVersion(ctx.channel(), message.getVersion());\n                 isSuccess = true;\n-                if (LOGGER.isInfoEnabled()) {\n+                if (LOGGER.isDebugEnabled()) {\n                     LOGGER.info(\"checkAuth for client:{},vgroup:{},applicationId:{}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e9526553770b120e499c995210b671c963d74cd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc5NDQ2Nw==", "bodyText": "done", "url": "https://github.com/seata/seata/pull/2402#discussion_r392794467", "createdAt": "2020-03-16T05:54:30Z", "author": {"login": "lightClouds917"}, "path": "core/src/main/java/io/seata/core/rpc/DefaultServerMessageListenerImpl.java", "diffHunk": "@@ -134,7 +139,7 @@ public void onRegTmMessage(RpcMessage request, ChannelHandlerContext ctx, Regist\n                 ChannelManager.registerTMChannel(message, ctx.channel());\n                 Version.putChannelVersion(ctx.channel(), message.getVersion());\n                 isSuccess = true;\n-                if (LOGGER.isInfoEnabled()) {\n+                if (LOGGER.isDebugEnabled()) {\n                     LOGGER.info(\"checkAuth for client:{},vgroup:{},applicationId:{}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY3Nzk3Ng=="}, "originalCommit": {"oid": "7e9526553770b120e499c995210b671c963d74cd"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODgyOTU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/rpc/DefaultServerMessageListenerImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNToxMDowNFrOF3OJmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNToxNTo1OFrOF32nvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ0NzgzMg==", "bodyText": "not recommended to serialize the entire object of the message", "url": "https://github.com/seata/seata/pull/2402#discussion_r393447832", "createdAt": "2020-03-17T05:10:04Z", "author": {"login": "zjinlei"}, "path": "core/src/main/java/io/seata/core/rpc/DefaultServerMessageListenerImpl.java", "diffHunk": "@@ -106,20 +106,25 @@ public void onTrxMessage(RpcMessage request, ChannelHandlerContext ctx) {\n     @Override\n     public void onRegRmMessage(RpcMessage request, ChannelHandlerContext ctx, RegisterCheckAuthHandler checkAuthHandler) {\n         RegisterRMRequest message = (RegisterRMRequest)request.getBody();\n+        String ipAndPort = NetUtil.toStringAddress(ctx.channel().remoteAddress());\n         boolean isSuccess = false;\n         try {\n             if (null == checkAuthHandler || checkAuthHandler.regResourceManagerCheckAuth(message)) {\n                 ChannelManager.registerRMChannel(message, ctx.channel());\n                 Version.putChannelVersion(ctx.channel(), message.getVersion());\n                 isSuccess = true;\n+                if (LOGGER.isDebugEnabled()) {\n+                    LOGGER.debug(\"checkAuth for client:{},vgroup:{},applicationId:{}\",\n+                            ipAndPort,message.getTransactionServiceGroup(),message.getApplicationId());\n+                }\n             }\n         } catch (Exception exx) {\n             isSuccess = false;\n             LOGGER.error(exx.getMessage());\n         }\n         getServerMessageSender().sendResponse(request, ctx.channel(), new RegisterRMResponse(isSuccess));\n         if (LOGGER.isInfoEnabled()) {\n-            LOGGER.info(\"rm register success,message:{},channel:{}\", message, ctx.channel());\n+            LOGGER.info(\"RM register success,message:{},channel:{}\", message, ctx.channel());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa714b3f30b0d3981eec530a645e16f74214062"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA4NjYxOA==", "bodyText": "not recommended to serialize the entire object of the message\n\nRm register success,message:RegisterRMRequest{resourceIds='jdbc:mysql://xx.xx.xx.xx/seata-account', applicationId='account-server', transactionServiceGroup='default'},channel:[id: 0xab3135a8, L:/192.168.158.80:8091 - R:/192.168.158.80:10720]\nThis is the log.\nI will optimize the message object ,and do we need the ctx.channel()?", "url": "https://github.com/seata/seata/pull/2402#discussion_r394086618", "createdAt": "2020-03-18T03:24:21Z", "author": {"login": "lightClouds917"}, "path": "core/src/main/java/io/seata/core/rpc/DefaultServerMessageListenerImpl.java", "diffHunk": "@@ -106,20 +106,25 @@ public void onTrxMessage(RpcMessage request, ChannelHandlerContext ctx) {\n     @Override\n     public void onRegRmMessage(RpcMessage request, ChannelHandlerContext ctx, RegisterCheckAuthHandler checkAuthHandler) {\n         RegisterRMRequest message = (RegisterRMRequest)request.getBody();\n+        String ipAndPort = NetUtil.toStringAddress(ctx.channel().remoteAddress());\n         boolean isSuccess = false;\n         try {\n             if (null == checkAuthHandler || checkAuthHandler.regResourceManagerCheckAuth(message)) {\n                 ChannelManager.registerRMChannel(message, ctx.channel());\n                 Version.putChannelVersion(ctx.channel(), message.getVersion());\n                 isSuccess = true;\n+                if (LOGGER.isDebugEnabled()) {\n+                    LOGGER.debug(\"checkAuth for client:{},vgroup:{},applicationId:{}\",\n+                            ipAndPort,message.getTransactionServiceGroup(),message.getApplicationId());\n+                }\n             }\n         } catch (Exception exx) {\n             isSuccess = false;\n             LOGGER.error(exx.getMessage());\n         }\n         getServerMessageSender().sendResponse(request, ctx.channel(), new RegisterRMResponse(isSuccess));\n         if (LOGGER.isInfoEnabled()) {\n-            LOGGER.info(\"rm register success,message:{},channel:{}\", message, ctx.channel());\n+            LOGGER.info(\"RM register success,message:{},channel:{}\", message, ctx.channel());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ0NzgzMg=="}, "originalCommit": {"oid": "baa714b3f30b0d3981eec530a645e16f74214062"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExMDkxMQ==", "bodyText": "need ctx.channel()", "url": "https://github.com/seata/seata/pull/2402#discussion_r394110911", "createdAt": "2020-03-18T05:15:58Z", "author": {"login": "zjinlei"}, "path": "core/src/main/java/io/seata/core/rpc/DefaultServerMessageListenerImpl.java", "diffHunk": "@@ -106,20 +106,25 @@ public void onTrxMessage(RpcMessage request, ChannelHandlerContext ctx) {\n     @Override\n     public void onRegRmMessage(RpcMessage request, ChannelHandlerContext ctx, RegisterCheckAuthHandler checkAuthHandler) {\n         RegisterRMRequest message = (RegisterRMRequest)request.getBody();\n+        String ipAndPort = NetUtil.toStringAddress(ctx.channel().remoteAddress());\n         boolean isSuccess = false;\n         try {\n             if (null == checkAuthHandler || checkAuthHandler.regResourceManagerCheckAuth(message)) {\n                 ChannelManager.registerRMChannel(message, ctx.channel());\n                 Version.putChannelVersion(ctx.channel(), message.getVersion());\n                 isSuccess = true;\n+                if (LOGGER.isDebugEnabled()) {\n+                    LOGGER.debug(\"checkAuth for client:{},vgroup:{},applicationId:{}\",\n+                            ipAndPort,message.getTransactionServiceGroup(),message.getApplicationId());\n+                }\n             }\n         } catch (Exception exx) {\n             isSuccess = false;\n             LOGGER.error(exx.getMessage());\n         }\n         getServerMessageSender().sendResponse(request, ctx.channel(), new RegisterRMResponse(isSuccess));\n         if (LOGGER.isInfoEnabled()) {\n-            LOGGER.info(\"rm register success,message:{},channel:{}\", message, ctx.channel());\n+            LOGGER.info(\"RM register success,message:{},channel:{}\", message, ctx.channel());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ0NzgzMg=="}, "originalCommit": {"oid": "baa714b3f30b0d3981eec530a645e16f74214062"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODgyOTY3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/rpc/DefaultServerMessageListenerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNToxMDoxMFrOF3OJrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNToxMDoxMFrOF3OJrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ0Nzg1NQ==", "bodyText": "not recommended to serialize the entire object of the message", "url": "https://github.com/seata/seata/pull/2402#discussion_r393447855", "createdAt": "2020-03-17T05:10:10Z", "author": {"login": "zjinlei"}, "path": "core/src/main/java/io/seata/core/rpc/DefaultServerMessageListenerImpl.java", "diffHunk": "@@ -144,6 +149,9 @@ public void onRegTmMessage(RpcMessage request, ChannelHandlerContext ctx, Regist\n             LOGGER.error(exx.getMessage());\n         }\n         getServerMessageSender().sendResponse(request, ctx.channel(), new RegisterTMResponse(isSuccess));\n+        if (LOGGER.isInfoEnabled()) {\n+            LOGGER.info(\"TM register success,message:{},channel:{}\", message, ctx.channel());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baa714b3f30b0d3981eec530a645e16f74214062"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjkyMzg1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/rpc/netty/TmRpcClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTo0MDo0MFrOF329vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTo0NTo1NlrOF33Cvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExNjU0Mw==", "bodyText": "remove duplicate calls", "url": "https://github.com/seata/seata/pull/2402#discussion_r394116543", "createdAt": "2020-03-18T05:40:40Z", "author": {"login": "zjinlei"}, "path": "core/src/main/java/io/seata/core/rpc/netty/TmRpcClient.java", "diffHunk": "@@ -151,6 +151,10 @@ public String getTransactionServiceGroup() {\n     @Override\n     public void onRegisterMsgSuccess(String serverAddress, Channel channel, Object response,\n                                      AbstractMessage requestMessage) {\n+        if (LOGGER.isInfoEnabled()) {\n+            LOGGER.info(\"register TM success. server version:{},channel:{}\", ((RegisterTMResponse)response).getVersion(), channel);\n+            getClientChannelManager().registerChannel(serverAddress, channel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0327b4d28f8cec8ebcaa4696f4bc323efa0997ba"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExNzgyMg==", "bodyText": "my mistake,has removed", "url": "https://github.com/seata/seata/pull/2402#discussion_r394117822", "createdAt": "2020-03-18T05:45:56Z", "author": {"login": "lightClouds917"}, "path": "core/src/main/java/io/seata/core/rpc/netty/TmRpcClient.java", "diffHunk": "@@ -151,6 +151,10 @@ public String getTransactionServiceGroup() {\n     @Override\n     public void onRegisterMsgSuccess(String serverAddress, Channel channel, Object response,\n                                      AbstractMessage requestMessage) {\n+        if (LOGGER.isInfoEnabled()) {\n+            LOGGER.info(\"register TM success. server version:{},channel:{}\", ((RegisterTMResponse)response).getVersion(), channel);\n+            getClientChannelManager().registerChannel(serverAddress, channel);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExNjU0Mw=="}, "originalCommit": {"oid": "0327b4d28f8cec8ebcaa4696f4bc323efa0997ba"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1699, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}