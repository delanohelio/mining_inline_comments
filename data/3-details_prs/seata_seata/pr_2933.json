{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3MDQ1ODYx", "number": 2933, "title": "feature: add antlr for mysql sqlparser", "bodyText": "\u2160. Describe what this PR did\n\u2161. Does this pull request fix one issue?\n\n\u2162. Why don't you add test cases (unit test/integration test)?\n\u2163. Describe how to verify it\n\u2164. Special notes for reviews", "createdAt": "2020-07-27T09:56:17Z", "url": "https://github.com/seata/seata/pull/2933", "merged": true, "mergeCommit": {"oid": "546d342a44aa69ef10409ade13adb91af1274dfe"}, "closed": true, "closedAt": "2021-02-19T13:24:48Z", "author": {"login": "h-zhi"}, "timelineItems": {"totalCount": 55, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc4-vzRAH2gAyNDU3MDQ1ODYxOmEzZWQwNzZjNDI3MDU1YTQ1NGQ2YzIwNWFhMWFiNDJhYzQxOWU2ZjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd7pawbAFqTU5NDE1OTg3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a3ed076c427055a454d6c205aa1ab42ac419e6f0", "author": {"user": null}, "url": "https://github.com/seata/seata/commit/a3ed076c427055a454d6c205aa1ab42ac419e6f0", "committedDate": "2020-07-27T09:52:10Z", "message": "add antlr on mysql sqlparser"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MjY0OTYz", "url": "https://github.com/seata/seata/pull/2933#pullrequestreview-456264963", "createdAt": "2020-07-28T02:46:09Z", "commit": {"oid": "a3ed076c427055a454d6c205aa1ab42ac419e6f0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjo0NjowOVrOG36ljQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjo0NjowOVrOG36ljQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4NDc0OQ==", "bodyText": "antlr", "url": "https://github.com/seata/seata/pull/2933#discussion_r461284749", "createdAt": "2020-07-28T02:46:09Z", "author": {"login": "slievrly"}, "path": "sqlparser/seata-sqlparser-antlr/pom.xml", "diffHunk": "@@ -0,0 +1,68 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~  Copyright 1999-2019 Seata.io Group.\n+  ~\n+  ~  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~  you may not use this file except in compliance with the License.\n+  ~  You may obtain a copy of the License at\n+  ~\n+  ~       http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~  Unless required by applicable law or agreed to in writing, software\n+  ~  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~  See the License for the specific language governing permissions and\n+  ~  limitations under the License.\n+  -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <groupId>io.seata</groupId>\n+        <artifactId>seata-sqlparser</artifactId>\n+        <version>${revision}</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>seata-sqlparser-antlr</artifactId>\n+    <name>seata-sqlparser-druid ${project.version}</name>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3ed076c427055a454d6c205aa1ab42ac419e6f0"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6555e818a3bf52e7ad59f51de60f7e91da305bfb", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/6555e818a3bf52e7ad59f51de60f7e91da305bfb", "committedDate": "2020-07-28T07:10:57Z", "message": "Merge branch 'develop' into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "580af0ec612f725c855204535d17d2d4047dad38", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/580af0ec612f725c855204535d17d2d4047dad38", "committedDate": "2020-08-04T09:26:39Z", "message": "Merge branch 'develop' into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "856b129cf86ac6b3f2ff7c8af484111e3dde96e7", "author": {"user": {"login": "jsbxyyx", "name": "jsbxyyx"}}, "url": "https://github.com/seata/seata/commit/856b129cf86ac6b3f2ff7c8af484111e3dde96e7", "committedDate": "2020-08-05T10:25:27Z", "message": "Merge branch 'develop' into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7526cdfaa628eb9c7f211e9052f6cadd56ca1da", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/f7526cdfaa628eb9c7f211e9052f6cadd56ca1da", "committedDate": "2020-08-06T03:06:03Z", "message": "refactor: add sql parser type druid as constant"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "294a5c0d0bd3d46af35353a34fc2cab805c04835", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/294a5c0d0bd3d46af35353a34fc2cab805c04835", "committedDate": "2020-08-06T03:14:01Z", "message": "refactor: modify the name of seata-sqlparser-antlr pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6285fcb4759844a52d6a483ec29318a80443a57e", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/6285fcb4759844a52d6a483ec29318a80443a57e", "committedDate": "2020-08-07T13:07:46Z", "message": "refactor: add antlr about mysql add, select, delete syntax analysis"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "701d09c2985c2d7f81095417ba082fb05725f6ce", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/701d09c2985c2d7f81095417ba082fb05725f6ce", "committedDate": "2020-08-07T14:45:20Z", "message": "refactor: modify antlr about mysql query syntax lexical analysis"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a97acb25ac2bb00f42d6b6b280ff9260839f579b", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/a97acb25ac2bb00f42d6b6b280ff9260839f579b", "committedDate": "2020-08-24T05:57:15Z", "message": "Merge branch 'develop' into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e23c34862f4f0b7bda00856fc6b9209a94b881b0", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/e23c34862f4f0b7bda00856fc6b9209a94b881b0", "committedDate": "2020-08-25T02:48:19Z", "message": "refactor: modified on antlr4 dependency management"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da9f500b3540d162c514751d6a3160ee4b9d7666", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/da9f500b3540d162c514751d6a3160ee4b9d7666", "committedDate": "2020-08-25T06:00:47Z", "message": "refactor: add antlr about mysql add, select, delete syntax analysis"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/a68cb4d81ad159102fbda56ed8e2e09527fdd7eb", "committedDate": "2020-08-25T06:46:17Z", "message": "refactor: delete comment code and modify comment description"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MzQwMDE5", "url": "https://github.com/seata/seata/pull/2933#pullrequestreview-475340019", "createdAt": "2020-08-26T10:02:37Z", "commit": {"oid": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDowMjozN1rOHHFFxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDowNDoxNlrOHHFJRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NTQ3Nw==", "bodyText": "return null?", "url": "https://github.com/seata/seata/pull/2933#discussion_r477185477", "createdAt": "2020-08-26T10:02:37Z", "author": {"login": "jsbxyyx"}, "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.SQLInsertRecognizer;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import io.seata.sqlparser.antlr.mysql.visit.StatementSqlVisitor;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLInsertRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLInsertRecognizer implements SQLInsertRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLInsertRecognizer(String sql) {\n+\n+        MySqlLexer lexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+\n+        CommonTokenStream tokenStream = new CommonTokenStream(lexer);\n+\n+        MySqlParser parser = new MySqlParser(tokenStream);\n+\n+        MySqlParser.RootContext rootContext = parser.root();\n+        sqlContext = new MySqlContext();\n+        StatementSqlVisitor visitor = new StatementSqlVisitor(sqlContext);\n+        visitor.visit(rootContext);\n+    }\n+\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.INSERT;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getTableName() {\n+        return sqlContext.tableName;\n+    }\n+\n+    @Override\n+    public String getOriginalSQL() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NTU4OA==", "bodyText": "return false?", "url": "https://github.com/seata/seata/pull/2933#discussion_r477185588", "createdAt": "2020-08-26T10:02:51Z", "author": {"login": "jsbxyyx"}, "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.SQLInsertRecognizer;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import io.seata.sqlparser.antlr.mysql.visit.StatementSqlVisitor;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLInsertRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLInsertRecognizer implements SQLInsertRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLInsertRecognizer(String sql) {\n+\n+        MySqlLexer lexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+\n+        CommonTokenStream tokenStream = new CommonTokenStream(lexer);\n+\n+        MySqlParser parser = new MySqlParser(tokenStream);\n+\n+        MySqlParser.RootContext rootContext = parser.root();\n+        sqlContext = new MySqlContext();\n+        StatementSqlVisitor visitor = new StatementSqlVisitor(sqlContext);\n+        visitor.visit(rootContext);\n+    }\n+\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.INSERT;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getTableName() {\n+        return sqlContext.tableName;\n+    }\n+\n+    @Override\n+    public String getOriginalSQL() {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean insertColumnsIsEmpty() {\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NTY5NQ==", "bodyText": "return null?", "url": "https://github.com/seata/seata/pull/2933#discussion_r477185695", "createdAt": "2020-08-26T10:03:01Z", "author": {"login": "jsbxyyx"}, "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.SQLInsertRecognizer;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import io.seata.sqlparser.antlr.mysql.visit.StatementSqlVisitor;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLInsertRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLInsertRecognizer implements SQLInsertRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLInsertRecognizer(String sql) {\n+\n+        MySqlLexer lexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+\n+        CommonTokenStream tokenStream = new CommonTokenStream(lexer);\n+\n+        MySqlParser parser = new MySqlParser(tokenStream);\n+\n+        MySqlParser.RootContext rootContext = parser.root();\n+        sqlContext = new MySqlContext();\n+        StatementSqlVisitor visitor = new StatementSqlVisitor(sqlContext);\n+        visitor.visit(rootContext);\n+    }\n+\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.INSERT;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getTableName() {\n+        return sqlContext.tableName;\n+    }\n+\n+    @Override\n+    public String getOriginalSQL() {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean insertColumnsIsEmpty() {\n+        return false;\n+    }\n+\n+    @Override\n+    public List<String> getInsertColumns() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NTg3OQ==", "bodyText": "need implemention logic.", "url": "https://github.com/seata/seata/pull/2933#discussion_r477185879", "createdAt": "2020-08-26T10:03:24Z", "author": {"login": "jsbxyyx"}, "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.SQLInsertRecognizer;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import io.seata.sqlparser.antlr.mysql.visit.StatementSqlVisitor;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLInsertRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLInsertRecognizer implements SQLInsertRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLInsertRecognizer(String sql) {\n+\n+        MySqlLexer lexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+\n+        CommonTokenStream tokenStream = new CommonTokenStream(lexer);\n+\n+        MySqlParser parser = new MySqlParser(tokenStream);\n+\n+        MySqlParser.RootContext rootContext = parser.root();\n+        sqlContext = new MySqlContext();\n+        StatementSqlVisitor visitor = new StatementSqlVisitor(sqlContext);\n+        visitor.visit(rootContext);\n+    }\n+\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.INSERT;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getTableName() {\n+        return sqlContext.tableName;\n+    }\n+\n+    @Override\n+    public String getOriginalSQL() {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean insertColumnsIsEmpty() {\n+        return false;\n+    }\n+\n+    @Override\n+    public List<String> getInsertColumns() {\n+        return null;\n+    }\n+\n+    @Override\n+    public List<List<Object>> getInsertRows(Collection<Integer> primaryKeyIndex) {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NjA3Mg==", "bodyText": "return null?", "url": "https://github.com/seata/seata/pull/2933#discussion_r477186072", "createdAt": "2020-08-26T10:03:42Z", "author": {"login": "jsbxyyx"}, "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLSelectRecognizer.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.ParametersHolder;\n+import io.seata.sqlparser.SQLSelectRecognizer;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.antlr.mysql.listener.SelectSpecificationSqlListener;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.tree.ParseTreeWalker;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLSelectRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLSelectRecognizer implements SQLSelectRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLSelectRecognizer(String sql) {\n+        MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+        CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n+        MySqlParser parser2 = new MySqlParser(commonTokenStream);\n+        MySqlParser.RootContext root = parser2.root();\n+        ParseTreeWalker walker2 = new ParseTreeWalker();\n+        sqlContext = new MySqlContext();\n+        walker2.walk(new SelectSpecificationSqlListener(sqlContext), root);\n+    }\n+\n+\n+    @Override\n+    public String getWhereCondition(ParametersHolder parametersHolder, ArrayList<List<Object>> paramAppenderList) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getWhereCondition() {\n+        return sqlContext.getWhereCondition();\n+    }\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.SELECT;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getTableName() {\n+        return sqlContext.tableName;\n+    }\n+\n+    @Override\n+    public String getOriginalSQL() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NjEwOQ==", "bodyText": "return null?", "url": "https://github.com/seata/seata/pull/2933#discussion_r477186109", "createdAt": "2020-08-26T10:03:46Z", "author": {"login": "jsbxyyx"}, "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLSelectRecognizer.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.ParametersHolder;\n+import io.seata.sqlparser.SQLSelectRecognizer;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.antlr.mysql.listener.SelectSpecificationSqlListener;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.tree.ParseTreeWalker;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLSelectRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLSelectRecognizer implements SQLSelectRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLSelectRecognizer(String sql) {\n+        MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+        CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n+        MySqlParser parser2 = new MySqlParser(commonTokenStream);\n+        MySqlParser.RootContext root = parser2.root();\n+        ParseTreeWalker walker2 = new ParseTreeWalker();\n+        sqlContext = new MySqlContext();\n+        walker2.walk(new SelectSpecificationSqlListener(sqlContext), root);\n+    }\n+\n+\n+    @Override\n+    public String getWhereCondition(ParametersHolder parametersHolder, ArrayList<List<Object>> paramAppenderList) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getWhereCondition() {\n+        return sqlContext.getWhereCondition();\n+    }\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.SELECT;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NjE5MQ==", "bodyText": "return null?", "url": "https://github.com/seata/seata/pull/2933#discussion_r477186191", "createdAt": "2020-08-26T10:03:54Z", "author": {"login": "jsbxyyx"}, "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.ParametersHolder;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.SQLUpdateRecognizer;\n+import io.seata.sqlparser.antlr.mysql.listener.UpdateSpecificationSqlListener;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.tree.ParseTreeWalker;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLUpdateRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLUpdateRecognizer implements SQLUpdateRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLUpdateRecognizer(String sql) {\n+        MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+        CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n+        MySqlParser parser2 = new MySqlParser(commonTokenStream);\n+        MySqlParser.RootContext root = parser2.root();\n+        ParseTreeWalker walker2 = new ParseTreeWalker();\n+        sqlContext = new MySqlContext();\n+        walker2.walk(new UpdateSpecificationSqlListener(sqlContext), root);\n+    }\n+\n+    @Override\n+    public List<String> getUpdateColumns() {\n+\n+        List<MySqlContext.SQL> updateFoColumnNames = sqlContext.getUpdateFoColumnNames();\n+        List<String> String = new ArrayList<>();\n+        for (MySqlContext.SQL sql : updateFoColumnNames) {\n+            String.add(sql.getUpdateColumn());\n+        }\n+        return String;\n+    }\n+\n+    @Override\n+    public List<Object> getUpdateValues() {\n+\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NjI0Mg==", "bodyText": "return null?", "url": "https://github.com/seata/seata/pull/2933#discussion_r477186242", "createdAt": "2020-08-26T10:03:59Z", "author": {"login": "jsbxyyx"}, "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.ParametersHolder;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.SQLUpdateRecognizer;\n+import io.seata.sqlparser.antlr.mysql.listener.UpdateSpecificationSqlListener;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.tree.ParseTreeWalker;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLUpdateRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLUpdateRecognizer implements SQLUpdateRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLUpdateRecognizer(String sql) {\n+        MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+        CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n+        MySqlParser parser2 = new MySqlParser(commonTokenStream);\n+        MySqlParser.RootContext root = parser2.root();\n+        ParseTreeWalker walker2 = new ParseTreeWalker();\n+        sqlContext = new MySqlContext();\n+        walker2.walk(new UpdateSpecificationSqlListener(sqlContext), root);\n+    }\n+\n+    @Override\n+    public List<String> getUpdateColumns() {\n+\n+        List<MySqlContext.SQL> updateFoColumnNames = sqlContext.getUpdateFoColumnNames();\n+        List<String> String = new ArrayList<>();\n+        for (MySqlContext.SQL sql : updateFoColumnNames) {\n+            String.add(sql.getUpdateColumn());\n+        }\n+        return String;\n+    }\n+\n+    @Override\n+    public List<Object> getUpdateValues() {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public String getWhereCondition(ParametersHolder parametersHolder, ArrayList<List<Object>> paramAppenderList) {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NjMyNw==", "bodyText": "return null?", "url": "https://github.com/seata/seata/pull/2933#discussion_r477186327", "createdAt": "2020-08-26T10:04:10Z", "author": {"login": "jsbxyyx"}, "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.ParametersHolder;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.SQLUpdateRecognizer;\n+import io.seata.sqlparser.antlr.mysql.listener.UpdateSpecificationSqlListener;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.tree.ParseTreeWalker;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLUpdateRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLUpdateRecognizer implements SQLUpdateRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLUpdateRecognizer(String sql) {\n+        MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+        CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n+        MySqlParser parser2 = new MySqlParser(commonTokenStream);\n+        MySqlParser.RootContext root = parser2.root();\n+        ParseTreeWalker walker2 = new ParseTreeWalker();\n+        sqlContext = new MySqlContext();\n+        walker2.walk(new UpdateSpecificationSqlListener(sqlContext), root);\n+    }\n+\n+    @Override\n+    public List<String> getUpdateColumns() {\n+\n+        List<MySqlContext.SQL> updateFoColumnNames = sqlContext.getUpdateFoColumnNames();\n+        List<String> String = new ArrayList<>();\n+        for (MySqlContext.SQL sql : updateFoColumnNames) {\n+            String.add(sql.getUpdateColumn());\n+        }\n+        return String;\n+    }\n+\n+    @Override\n+    public List<Object> getUpdateValues() {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public String getWhereCondition(ParametersHolder parametersHolder, ArrayList<List<Object>> paramAppenderList) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getWhereCondition() {\n+        return sqlContext.getWhereCondition();\n+    }\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.UPDATE;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NjM3NQ==", "bodyText": "return null?", "url": "https://github.com/seata/seata/pull/2933#discussion_r477186375", "createdAt": "2020-08-26T10:04:16Z", "author": {"login": "jsbxyyx"}, "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.ParametersHolder;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.SQLUpdateRecognizer;\n+import io.seata.sqlparser.antlr.mysql.listener.UpdateSpecificationSqlListener;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.tree.ParseTreeWalker;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLUpdateRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLUpdateRecognizer implements SQLUpdateRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLUpdateRecognizer(String sql) {\n+        MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+        CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n+        MySqlParser parser2 = new MySqlParser(commonTokenStream);\n+        MySqlParser.RootContext root = parser2.root();\n+        ParseTreeWalker walker2 = new ParseTreeWalker();\n+        sqlContext = new MySqlContext();\n+        walker2.walk(new UpdateSpecificationSqlListener(sqlContext), root);\n+    }\n+\n+    @Override\n+    public List<String> getUpdateColumns() {\n+\n+        List<MySqlContext.SQL> updateFoColumnNames = sqlContext.getUpdateFoColumnNames();\n+        List<String> String = new ArrayList<>();\n+        for (MySqlContext.SQL sql : updateFoColumnNames) {\n+            String.add(sql.getUpdateColumn());\n+        }\n+        return String;\n+    }\n+\n+    @Override\n+    public List<Object> getUpdateValues() {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public String getWhereCondition(ParametersHolder parametersHolder, ArrayList<List<Object>> paramAppenderList) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getWhereCondition() {\n+        return sqlContext.getWhereCondition();\n+    }\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.UPDATE;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getTableName() {\n+        return sqlContext.tableName;\n+    }\n+\n+    @Override\n+    public String getOriginalSQL() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2MzA2Mjc0", "url": "https://github.com/seata/seata/pull/2933#pullrequestreview-476306274", "createdAt": "2020-08-27T01:24:02Z", "commit": {"oid": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMToyNDowMlrOHHuuSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMToyNDowMlrOHHuuSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg2NzU5Mw==", "bodyText": "Please return the statementProxy.getTargetSQL();", "url": "https://github.com/seata/seata/pull/2933#discussion_r477867593", "createdAt": "2020-08-27T01:24:02Z", "author": {"login": "l81893521"}, "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLDeleteRecognizer.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.ParametersHolder;\n+import io.seata.sqlparser.SQLDeleteRecognizer;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.antlr.mysql.listener.DeleteSpecificationSqlListener;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.tree.ParseTreeWalker;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLDeleteRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLDeleteRecognizer implements SQLDeleteRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLDeleteRecognizer(String sql) {\n+        MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+        CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n+        MySqlParser parser2 = new MySqlParser(commonTokenStream);\n+        MySqlParser.RootContext root = parser2.root();\n+        ParseTreeWalker walker2 = new ParseTreeWalker();\n+        sqlContext = new MySqlContext();\n+        walker2.walk(new DeleteSpecificationSqlListener(sqlContext), root);\n+    }\n+\n+\n+    @Override\n+    public String getWhereCondition(ParametersHolder parametersHolder, ArrayList<List<Object>> paramAppenderList) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getWhereCondition() {\n+        return sqlContext.getWhereCondition();\n+    }\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.DELETE;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getTableName() {\n+        return sqlContext.tableName;\n+    }\n+\n+    @Override\n+    public String getOriginalSQL() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bd6cad4a901e621b93b3c1125dc6563eced4074", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/2bd6cad4a901e621b93b3c1125dc6563eced4074", "committedDate": "2020-08-27T12:35:01Z", "message": "refactor: modify antlr about mysql add, query, modify, delete syntax analysis"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7714b67a4d68eb7cbe83eed31b63edb8623c97d4", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/7714b67a4d68eb7cbe83eed31b63edb8623c97d4", "committedDate": "2020-08-27T13:14:26Z", "message": "refactor: add antlr about mysql add, select, delete syntax analysis"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c36313eecf859a6352a48067db80aebe9367782", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/8c36313eecf859a6352a48067db80aebe9367782", "committedDate": "2020-08-28T03:34:37Z", "message": "Merge branch 'develop' into develop"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNDI1MTYy", "url": "https://github.com/seata/seata/pull/2933#pullrequestreview-481425162", "createdAt": "2020-09-03T01:40:18Z", "commit": {"oid": "8c36313eecf859a6352a48067db80aebe9367782"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMTo0MDoxOVrOHMSI2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMTo0MDoxOVrOHMSI2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY0MjEzNg==", "bodyText": "Use the style of\nif() {\n\n}", "url": "https://github.com/seata/seata/pull/2933#discussion_r482642136", "createdAt": "2020-09-03T01:40:19Z", "author": {"login": "l81893521"}, "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.SQLInsertRecognizer;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import io.seata.sqlparser.antlr.mysql.visit.StatementSqlVisitor;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * AntlrMySQLInsertRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLInsertRecognizer implements SQLInsertRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLInsertRecognizer(MySqlContext mySqlContext, String sql) {\n+\n+        MySqlLexer lexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+\n+        CommonTokenStream tokenStream = new CommonTokenStream(lexer);\n+\n+        MySqlParser parser = new MySqlParser(tokenStream);\n+\n+        MySqlParser.RootContext rootContext = parser.root();\n+        sqlContext = new MySqlContext();\n+        sqlContext.setOriginalSQL(mySqlContext.getOriginalSQL());\n+        StatementSqlVisitor visitor = new StatementSqlVisitor(sqlContext);\n+        visitor.visit(rootContext);\n+    }\n+\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.INSERT;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getTableName() {\n+        return sqlContext.tableName;\n+    }\n+\n+    @Override\n+    public String getOriginalSQL() {\n+        return sqlContext.getOriginalSQL();\n+    }\n+\n+    @Override\n+    public boolean insertColumnsIsEmpty() {\n+\n+        List<MySqlContext.SQL> insertColumnNames = sqlContext.getInsertColumnNames();\n+\n+        if (insertColumnNames.isEmpty()) return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c36313eecf859a6352a48067db80aebe9367782"}, "originalPosition": 81}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcd788f0c2a984e43c2c3f195bc8690b182daebd", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/dcd788f0c2a984e43c2c3f195bc8690b182daebd", "committedDate": "2020-09-03T02:01:17Z", "message": "refactor: modified AntlrMySQLInsterRecognizer about p3c specification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c75eb3e0551db7d59fd6735b4edafb475ba6c83", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/8c75eb3e0551db7d59fd6735b4edafb475ba6c83", "committedDate": "2020-09-03T02:04:55Z", "message": "feature: modified AntlrMySQLInsterRecognizer about p3c specification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d42defc44ad54102dec94a0097b17e286e079c5", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/7d42defc44ad54102dec94a0097b17e286e079c5", "committedDate": "2020-09-03T02:52:15Z", "message": "feature: modified AntlrMySQLInsterRecognizer about p3c specification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68d6417e0dc639452d28e0fe4e15c0c8c07db699", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/68d6417e0dc639452d28e0fe4e15c0c8c07db699", "committedDate": "2020-09-03T03:15:55Z", "message": "feature: modified AntlrMySQLInsterRecognizer about p3c specification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45064d62e1cdc6fe248fc1371f292e574458a36f", "author": {"user": {"login": "l81893521", "name": "will"}}, "url": "https://github.com/seata/seata/commit/45064d62e1cdc6fe248fc1371f292e574458a36f", "committedDate": "2020-09-03T06:18:47Z", "message": "Merge branch 'develop' into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "277b2017944c952dd95f4fe3b029d0bca2d5f94c", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/277b2017944c952dd95f4fe3b029d0bca2d5f94c", "committedDate": "2020-09-03T07:09:29Z", "message": "feature: exclude antlr native files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d22ed78b1a22ab9297c7ac6bde807869eb97305b", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/d22ed78b1a22ab9297c7ac6bde807869eb97305b", "committedDate": "2020-09-03T07:47:02Z", "message": "feature: exclude antlr native files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce6f8b0c14b44dc7bba129a0345b3bbfb4ced63b", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/ce6f8b0c14b44dc7bba129a0345b3bbfb4ced63b", "committedDate": "2020-09-03T07:52:36Z", "message": "Merge branch 'develop' into develop"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNTk2NTUy", "url": "https://github.com/seata/seata/pull/2933#pullrequestreview-481596552", "createdAt": "2020-09-03T08:08:06Z", "commit": {"oid": "ce6f8b0c14b44dc7bba129a0345b3bbfb4ced63b"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNTk3MDUx", "url": "https://github.com/seata/seata/pull/2933#pullrequestreview-481597051", "createdAt": "2020-09-03T08:08:48Z", "commit": {"oid": "ce6f8b0c14b44dc7bba129a0345b3bbfb4ced63b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwODowODo0OVrOHMbHQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwODowODo0OVrOHMbHQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc4OTE4NA==", "bodyText": "Please do not change the style.", "url": "https://github.com/seata/seata/pull/2933#discussion_r482789184", "createdAt": "2020-09-03T08:08:49Z", "author": {"login": "l81893521"}, "path": "pom.xml", "diffHunk": "@@ -269,7 +269,9 @@\n                                     <failOnMissing>false</failOnMissing>\n                                     <licenseMerges>\n                                         <licenseMerge>Apache License, Version 2.0|The Apache Software License, Version\n-                                            2.0|ASF 2.0|Apache 2|Apache-2.0|Apache 2.0 License|Apache 2.0|Apache License v2.0|Apache License 2.0|The Apache License, Version 2.0|The Apache Software License, Version 2.0\n+                                            2.0|ASF 2.0|Apache 2|Apache-2.0|Apache 2.0 License|Apache 2.0|Apache License", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce6f8b0c14b44dc7bba129a0345b3bbfb4ced63b"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2eedd5987dfefe275791fc5c9ef5ddc36e724990", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/2eedd5987dfefe275791fc5c9ef5ddc36e724990", "committedDate": "2020-09-03T08:17:37Z", "message": "feature: add Mysql update statement for getUpdateValues code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c4094f5f7e13ebd44858b211fbfa52d0d2e6e89", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/2c4094f5f7e13ebd44858b211fbfa52d0d2e6e89", "committedDate": "2020-09-03T12:54:29Z", "message": "feature: reply to the licenseMerge style in the pom."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMjk4Mjg0", "url": "https://github.com/seata/seata/pull/2933#pullrequestreview-482298284", "createdAt": "2020-09-04T01:22:28Z", "commit": {"oid": "2c4094f5f7e13ebd44858b211fbfa52d0d2e6e89"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMToyMjoyOFrOHM8ZmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMToyMjoyOFrOHM8ZmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMzNDU1Mw==", "bodyText": "I think this class should not exclude.", "url": "https://github.com/seata/seata/pull/2933#discussion_r483334553", "createdAt": "2020-09-04T01:22:28Z", "author": {"login": "l81893521"}, "path": "pom.xml", "diffHunk": "@@ -319,6 +319,9 @@\n                             </includes>\n                             <excludes>\n                                 <exclude>**/generated/**</exclude>\n+                                <exclude>**/antlr/mysql/parser/*.*</exclude>\n+                                <exclude>**/antlr/mysql/antlr/*.*</exclude>\n+                                <exclude>**/antlr/mysql/stream/ANTLRNoCaseStringStream.java</exclude>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c4094f5f7e13ebd44858b211fbfa52d0d2e6e89"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3edb86ddd301a456964b045666db2c876e60ff68", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/3edb86ddd301a456964b045666db2c876e60ff68", "committedDate": "2020-09-14T15:20:35Z", "message": "Merge branch 'develop' into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "caa2a459eb76deb14d433b0af2bd45586c68a167", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/caa2a459eb76deb14d433b0af2bd45586c68a167", "committedDate": "2020-09-15T03:06:50Z", "message": "feature: use antlr native lexical files to deal with the problem of parsing spaces, add new SQL alias parsing methods, and optimize some codes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e40e447e8ea9f358b6638f9ff7ee9e3a2bffdf92", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/e40e447e8ea9f358b6638f9ff7ee9e3a2bffdf92", "committedDate": "2020-09-15T03:15:40Z", "message": "feature: use antlr native lexical files to deal with the problem of parsing spaces, add new SQL alias parsing methods, and optimize some codes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6275030b2709dba5f690531417f9d1b8156278e4", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/6275030b2709dba5f690531417f9d1b8156278e4", "committedDate": "2020-09-16T01:44:13Z", "message": "Merge branch 'develop' into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc57f0e33d4f99906d01354b9ce6e4952ae85bd9", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/dc57f0e33d4f99906d01354b9ce6e4952ae85bd9", "committedDate": "2020-10-23T02:52:00Z", "message": "SqlParserType conflict resolution"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d081b162240401f47263f7baa005cc1916305177", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/d081b162240401f47263f7baa005cc1916305177", "committedDate": "2020-10-23T03:49:50Z", "message": "feature: use antlr native lexical files to deal with the problem of parsing spaces, add new SQL alias parsing methods, and optimize some codes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56786c664f79137b58592249403bd1d05667efb1", "author": {"user": {"login": "l81893521", "name": "will"}}, "url": "https://github.com/seata/seata/commit/56786c664f79137b58592249403bd1d05667efb1", "committedDate": "2020-11-09T06:55:18Z", "message": "Merge branch 'develop' into develop"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1OTc4MDE2", "url": "https://github.com/seata/seata/pull/2933#pullrequestreview-525978016", "createdAt": "2020-11-09T07:18:25Z", "commit": {"oid": "56786c664f79137b58592249403bd1d05667efb1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzoxODoyNVrOHvhddQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzoxODoyNVrOHvhddQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU5MzMzMw==", "bodyText": "Please don't change the druid version.", "url": "https://github.com/seata/seata/pull/2933#discussion_r519593333", "createdAt": "2020-11-09T07:18:25Z", "author": {"login": "l81893521"}, "path": "bom/pom.xml", "diffHunk": "@@ -97,6 +97,8 @@\n         <sofa.registry.version>5.2.0</sofa.registry.version>\n         <httpclient.version>4.5.8</httpclient.version>\n         <httpcore.version>4.4.11</httpcore.version>\n+        <druid.version>1.1.12</druid.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56786c664f79137b58592249403bd1d05667efb1"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1OTc4NDAy", "url": "https://github.com/seata/seata/pull/2933#pullrequestreview-525978402", "createdAt": "2020-11-09T07:19:13Z", "commit": {"oid": "56786c664f79137b58592249403bd1d05667efb1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzoxOToxM1rOHvhfog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzoxOToxM1rOHvhfog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU5Mzg5MA==", "bodyText": "Please revert here.", "url": "https://github.com/seata/seata/pull/2933#discussion_r519593890", "createdAt": "2020-11-09T07:19:13Z", "author": {"login": "l81893521"}, "path": "pom.xml", "diffHunk": "@@ -337,7 +340,8 @@\n                                 <phase>validate</phase>\n                                 <configuration>\n                                     <configLocation>${user.dir}/style/seata_checkstyle.xml</configLocation>\n-                                    <suppressionsLocation>${user.dir}/style/seata_suppressions.xml</suppressionsLocation>\n+                                    <suppressionsLocation>${user.dir}/style/seata_suppressions.xml", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56786c664f79137b58592249403bd1d05667efb1"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1OTgwMjEx", "url": "https://github.com/seata/seata/pull/2933#pullrequestreview-525980211", "createdAt": "2020-11-09T07:22:58Z", "commit": {"oid": "56786c664f79137b58592249403bd1d05667efb1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzoyMjo1OFrOHvhqGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzoyMjo1OFrOHvhqGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU5NjU2OQ==", "bodyText": "Please reset here.", "url": "https://github.com/seata/seata/pull/2933#discussion_r519596569", "createdAt": "2020-11-09T07:22:58Z", "author": {"login": "l81893521"}, "path": "pom.xml", "diffHunk": "@@ -368,7 +372,8 @@\n                 <artifactId>protobuf-maven-plugin</artifactId>\n                 <version>${protobuf-maven-plugin.version}</version>\n                 <configuration>\n-                    <protoSourceRoot>${project.basedir}/src/main/resources/protobuf/io/seata/protocol/transcation/</protoSourceRoot>\n+                    <protoSourceRoot>${project.basedir}/src/main/resources/protobuf/io/seata/protocol/transcation/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56786c664f79137b58592249403bd1d05667efb1"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1OTkyODA0", "url": "https://github.com/seata/seata/pull/2933#pullrequestreview-525992804", "createdAt": "2020-11-09T07:46:36Z", "commit": {"oid": "56786c664f79137b58592249403bd1d05667efb1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzo0NjozNlrOHviVvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzo0NjozNlrOHviVvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYwNzc0Mw==", "bodyText": "EnhancedServiceLoader  already handle singleton, you can check SQLOperateRecognizerHolderFactory in druild.", "url": "https://github.com/seata/seata/pull/2933#discussion_r519607743", "createdAt": "2020-11-09T07:46:36Z", "author": {"login": "l81893521"}, "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/SQLOperateRecognizerHolderFactory.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr;\n+\n+import io.seata.common.loader.EnhancedServiceLoader;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * The SQLOperateRecognizerHolderFactory\n+ *\n+ * @author: Zhibei Hao\n+ */\n+public class SQLOperateRecognizerHolderFactory {\n+\n+    private static final Map<String, SQLOperateRecognizerHolder> RECOGNIZER_HOLDER_MAP = new ConcurrentHashMap<>();\n+\n+    /**\n+     * get SQLOperateRecognizer by db type\n+     *\n+     * @param dbType the db type\n+     * @return the SQLOperateRecognizer\n+     */\n+    public static SQLOperateRecognizerHolder getSQLRecognizerHolder(String dbType) {\n+        if (RECOGNIZER_HOLDER_MAP.get(dbType) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56786c664f79137b58592249403bd1d05667efb1"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ced1a418046f0baa7c1978ac7ed759398ae482d9", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/ced1a418046f0baa7c1978ac7ed759398ae482d9", "committedDate": "2020-11-09T09:32:10Z", "message": "feature: modify druid version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc4f830029508218ea55f91af40fa861308ae3cd", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/bc4f830029508218ea55f91af40fa861308ae3cd", "committedDate": "2020-11-09T09:38:48Z", "message": "feature: handle pom space indentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf88b6b57e975b4d2bcfe53a0a61facc12f64789", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/cf88b6b57e975b4d2bcfe53a0a61facc12f64789", "committedDate": "2020-11-09T10:29:36Z", "message": "feature: modify SQLOperateRecognizerHolderFactory to handle singleton"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c004e8d0c93e5b2971e77c6c625030fbe282a4b", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/3c004e8d0c93e5b2971e77c6c625030fbe282a4b", "committedDate": "2020-12-04T02:57:02Z", "message": "feature: modify TransactionPropagationInterceptor name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7aa1754a62fcdf4db750e1e880cb10de54f9a150", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/7aa1754a62fcdf4db750e1e880cb10de54f9a150", "committedDate": "2020-12-04T03:45:21Z", "message": "Revert \"feature: modify TransactionPropagationInterceptor name\"\n\nThis reverts commit 3c004e8d"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee3083a86bb3e5b475fd00d27b2f8a7ede59b6c8", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/ee3083a86bb3e5b475fd00d27b2f8a7ede59b6c8", "committedDate": "2020-12-04T04:38:05Z", "message": "modify TransactionPropagationInterceptor name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9d14e82ff84f9e9350f4cd05200fb99c4bba9bd", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/e9d14e82ff84f9e9350f4cd05200fb99c4bba9bd", "committedDate": "2021-01-06T14:42:50Z", "message": "feature:modify SQLOperateRecognizerHolderFactory class indentation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e3aa1cdab99f24b66acf61c6a76d99190eac985", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/2e3aa1cdab99f24b66acf61c6a76d99190eac985", "committedDate": "2021-01-07T03:07:27Z", "message": "feature: modify SQLOperateRecognizerHolderFactory class indentation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42307d7faec6b9826eb571e1a0c8f9dba8febcd5", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/42307d7faec6b9826eb571e1a0c8f9dba8febcd5", "committedDate": "2021-02-18T09:56:33Z", "message": "Merge branch 'develop' into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a78670a9e7e3a04788f8518d210be5e6de6384c7", "author": {"user": {"login": "h-zhi", "name": "h-zhi"}}, "url": "https://github.com/seata/seata/commit/a78670a9e7e3a04788f8518d210be5e6de6384c7", "committedDate": "2021-02-19T02:07:27Z", "message": "feature: add checkstyle-plugin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkzODUxOTAw", "url": "https://github.com/seata/seata/pull/2933#pullrequestreview-593851900", "createdAt": "2021-02-19T04:31:43Z", "commit": {"oid": "a78670a9e7e3a04788f8518d210be5e6de6384c7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0MTU5ODcw", "url": "https://github.com/seata/seata/pull/2933#pullrequestreview-594159870", "createdAt": "2021-02-19T12:54:06Z", "commit": {"oid": "a78670a9e7e3a04788f8518d210be5e6de6384c7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3578, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}