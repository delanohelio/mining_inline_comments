{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMDE1Njk2", "number": 2838, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwMjozNTozOFrOEJg6zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzoyMTo0N1rOEJ9zqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDExOTgyOnYy", "diffSide": "RIGHT", "path": "script/client/spring/application.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwMjozNTozOFrOGqC8DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwMzowMjo1MlrOGqDSWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc0MTUxNw==", "bodyText": "add config sagaJsonParser default fastjson\nclient {\n  rm {\n    sagaJsonParser = fastjson\n  }\n}\n\nsee: #2831", "url": "https://github.com/seata/seata/pull/2838#discussion_r446741517", "createdAt": "2020-06-29T02:35:38Z", "author": {"login": "long187"}, "path": "script/client/spring/application.yml", "diffHunk": "@@ -110,3 +110,23 @@ seata:\n       connect-timeout: 2000\n       username: \"\"\n       password: \"\"\n+  saga:\n+    enabled: false\n+    state-machine:\n+      application-id: ${spring.application.name:}\n+      tx-service-group: ${seata.tx-service-group:}\n+      table-prefix: seata_\n+      enable-async: false\n+      async-thread-pool:\n+        core-pool-size: 1\n+        max-pool-size: 20\n+        keep-alive-time: 60\n+      rm-report-success-enable: ${seata.client.rm.report-success-enable:false}\n+      saga-branch-register-enable: ${seata.client.rm.saga-branch-register-enable:false}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "203a3c77d0353572b84b6376e713ca66f754661b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc0NzIyNg==", "bodyText": "I added it.", "url": "https://github.com/seata/seata/pull/2838#discussion_r446747226", "createdAt": "2020-06-29T03:02:52Z", "author": {"login": "wangliang181230"}, "path": "script/client/spring/application.yml", "diffHunk": "@@ -110,3 +110,23 @@ seata:\n       connect-timeout: 2000\n       username: \"\"\n       password: \"\"\n+  saga:\n+    enabled: false\n+    state-machine:\n+      application-id: ${spring.application.name:}\n+      tx-service-group: ${seata.tx-service-group:}\n+      table-prefix: seata_\n+      enable-async: false\n+      async-thread-pool:\n+        core-pool-size: 1\n+        max-pool-size: 20\n+        keep-alive-time: 60\n+      rm-report-success-enable: ${seata.client.rm.report-success-enable:false}\n+      saga-branch-register-enable: ${seata.client.rm.saga-branch-register-enable:false}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc0MTUxNw=="}, "originalCommit": {"oid": "203a3c77d0353572b84b6376e713ca66f754661b"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDEyMjEyOnYy", "diffSide": "RIGHT", "path": "seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/SeataSagaAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwMjozNzoxMFrOGqC9Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwMzowMzowOFrOGqDSlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc0MTgzOA==", "bodyText": "add rejectedExecutionHandler default CallerRunsPolicy", "url": "https://github.com/seata/seata/pull/2838#discussion_r446741838", "createdAt": "2020-06-29T02:37:10Z", "author": {"login": "long187"}, "path": "seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/SeataSagaAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.boot.autoconfigure;\n+\n+import io.seata.saga.engine.StateMachineConfig;\n+import io.seata.saga.engine.StateMachineEngine;\n+import io.seata.saga.engine.config.DbStateMachineConfig;\n+import io.seata.saga.engine.impl.ProcessCtrlStateMachineEngine;\n+import io.seata.saga.rm.StateMachineEngineHolder;\n+import io.seata.spring.boot.autoconfigure.properties.SeataSagaAsyncThreadPoolProperties;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import javax.sql.DataSource;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean;\n+\n+/**\n+ * Saga auto configuration.\n+ *\n+ * @author wang.liang\n+ */\n+@Configuration\n+@ConditionalOnProperty(StarterConstants.SEATA_PREFIX + \".saga.enabled\")\n+@AutoConfigureAfter(DataSourceAutoConfiguration.class)\n+public class SeataSagaAutoConfiguration {\n+\n+    /**\n+     * Create state machine config bean.\n+     */\n+    @Bean\n+    @ConditionalOnBean(DataSource.class)\n+    @ConditionalOnMissingBean\n+    @ConfigurationProperties(StarterConstants.SEATA_PREFIX + \".saga.state-machine\")\n+    public StateMachineConfig dbStateMachineConfig(DataSource dataSource,\n+        @Autowired(required = false) ThreadPoolExecutor threadPoolExecutor,\n+        @Value(\"${spring.application.name:}\") String applicationId,\n+        @Value(\"${seata.tx-service-group:}\") String txServiceGroup) {\n+        DbStateMachineConfig config = new DbStateMachineConfig();\n+        config.setDataSource(dataSource);\n+        config.setApplicationId(applicationId);\n+        config.setTxServiceGroup(txServiceGroup);\n+\n+        if (threadPoolExecutor != null) {\n+            config.setThreadPoolExecutor(threadPoolExecutor);\n+        }\n+\n+        return config;\n+    }\n+\n+    /**\n+     * Create state machine engine bean.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public StateMachineEngine stateMachineEngine(StateMachineConfig config) {\n+        ProcessCtrlStateMachineEngine engine = new ProcessCtrlStateMachineEngine();\n+        engine.setStateMachineConfig(config);\n+        new StateMachineEngineHolder().setStateMachineEngine(engine);\n+        return engine;\n+    }\n+\n+    @Configuration\n+    @ConditionalOnProperty(name = StarterConstants.SEATA_PREFIX + \".saga.state-machine.enable-async\", havingValue = \"true\")\n+    @EnableConfigurationProperties({SeataSagaAsyncThreadPoolProperties.class})\n+    static class SagaAsyncThreadPoolExecutorConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "203a3c77d0353572b84b6376e713ca66f754661b"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc0NzI4NQ==", "bodyText": "I added it.", "url": "https://github.com/seata/seata/pull/2838#discussion_r446747285", "createdAt": "2020-06-29T03:03:08Z", "author": {"login": "wangliang181230"}, "path": "seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/SeataSagaAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.boot.autoconfigure;\n+\n+import io.seata.saga.engine.StateMachineConfig;\n+import io.seata.saga.engine.StateMachineEngine;\n+import io.seata.saga.engine.config.DbStateMachineConfig;\n+import io.seata.saga.engine.impl.ProcessCtrlStateMachineEngine;\n+import io.seata.saga.rm.StateMachineEngineHolder;\n+import io.seata.spring.boot.autoconfigure.properties.SeataSagaAsyncThreadPoolProperties;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import javax.sql.DataSource;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean;\n+\n+/**\n+ * Saga auto configuration.\n+ *\n+ * @author wang.liang\n+ */\n+@Configuration\n+@ConditionalOnProperty(StarterConstants.SEATA_PREFIX + \".saga.enabled\")\n+@AutoConfigureAfter(DataSourceAutoConfiguration.class)\n+public class SeataSagaAutoConfiguration {\n+\n+    /**\n+     * Create state machine config bean.\n+     */\n+    @Bean\n+    @ConditionalOnBean(DataSource.class)\n+    @ConditionalOnMissingBean\n+    @ConfigurationProperties(StarterConstants.SEATA_PREFIX + \".saga.state-machine\")\n+    public StateMachineConfig dbStateMachineConfig(DataSource dataSource,\n+        @Autowired(required = false) ThreadPoolExecutor threadPoolExecutor,\n+        @Value(\"${spring.application.name:}\") String applicationId,\n+        @Value(\"${seata.tx-service-group:}\") String txServiceGroup) {\n+        DbStateMachineConfig config = new DbStateMachineConfig();\n+        config.setDataSource(dataSource);\n+        config.setApplicationId(applicationId);\n+        config.setTxServiceGroup(txServiceGroup);\n+\n+        if (threadPoolExecutor != null) {\n+            config.setThreadPoolExecutor(threadPoolExecutor);\n+        }\n+\n+        return config;\n+    }\n+\n+    /**\n+     * Create state machine engine bean.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public StateMachineEngine stateMachineEngine(StateMachineConfig config) {\n+        ProcessCtrlStateMachineEngine engine = new ProcessCtrlStateMachineEngine();\n+        engine.setStateMachineConfig(config);\n+        new StateMachineEngineHolder().setStateMachineEngine(engine);\n+        return engine;\n+    }\n+\n+    @Configuration\n+    @ConditionalOnProperty(name = StarterConstants.SEATA_PREFIX + \".saga.state-machine.enable-async\", havingValue = \"true\")\n+    @EnableConfigurationProperties({SeataSagaAsyncThreadPoolProperties.class})\n+    static class SagaAsyncThreadPoolExecutorConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc0MTgzOA=="}, "originalCommit": {"oid": "203a3c77d0353572b84b6376e713ca66f754661b"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODg1Mjg4OnYy", "diffSide": "RIGHT", "path": "script/client/conf/file.conf", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzoyMTo0N1rOGqvFuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzoyOToyOFrOGraINQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ2NDg5MQ==", "bodyText": "Why configure multiple times?", "url": "https://github.com/seata/seata/pull/2838#discussion_r447464891", "createdAt": "2020-06-30T07:21:47Z", "author": {"login": "slievrly"}, "path": "script/client/conf/file.conf", "diffHunk": "@@ -68,4 +69,27 @@ client {\n   log {\n     exceptionRate = 100\n   }\n-}\n\\ No newline at end of file\n+}\n+\n+saga {\n+  enabled = false\n+  stateMachine {\n+    applicationId = \"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dfe9366e2b2439446702a0f5e44454cf89f3308"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUxMDAxNg==", "bodyText": "After another PR adds the relevant code, I will delete it here.", "url": "https://github.com/seata/seata/pull/2838#discussion_r447510016", "createdAt": "2020-06-30T08:34:38Z", "author": {"login": "wangliang181230"}, "path": "script/client/conf/file.conf", "diffHunk": "@@ -68,4 +69,27 @@ client {\n   log {\n     exceptionRate = 100\n   }\n-}\n\\ No newline at end of file\n+}\n+\n+saga {\n+  enabled = false\n+  stateMachine {\n+    applicationId = \"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ2NDg5MQ=="}, "originalCommit": {"oid": "2dfe9366e2b2439446702a0f5e44454cf89f3308"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3MDAzNw==", "bodyText": "I have deleted it. The config is read in the PR #2831", "url": "https://github.com/seata/seata/pull/2838#discussion_r448170037", "createdAt": "2020-07-01T07:29:28Z", "author": {"login": "wangliang181230"}, "path": "script/client/conf/file.conf", "diffHunk": "@@ -68,4 +69,27 @@ client {\n   log {\n     exceptionRate = 100\n   }\n-}\n\\ No newline at end of file\n+}\n+\n+saga {\n+  enabled = false\n+  stateMachine {\n+    applicationId = \"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ2NDg5MQ=="}, "originalCommit": {"oid": "2dfe9366e2b2439446702a0f5e44454cf89f3308"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1485, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}