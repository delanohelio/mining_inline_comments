{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNzI3MzY3", "number": 2445, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo0NTozMVrODrDdKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo1MDoxOVrODrDf7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDcxOTc5OnYy", "diffSide": "RIGHT", "path": "serializer/seata-serializer-fst/src/main/java/io.seata.serializer.fst/FstSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo0NTozMVrOF7LNrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo1NDozNFrOF7LVpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NDAyOA==", "bodyText": "private", "url": "https://github.com/seata/seata/pull/2445#discussion_r397594028", "createdAt": "2020-03-25T03:45:31Z", "author": {"login": "slievrly"}, "path": "serializer/seata-serializer-fst/src/main/java/io.seata.serializer.fst/FstSerializer.java", "diffHunk": "@@ -26,16 +24,16 @@\n @LoadLevel(name = \"FST\")\n public class FstSerializer implements Serializer {\n \n-    private final FSTConfiguration conf = FSTConfiguration.createDefaultConfiguration();\n+    FstSerializerFactory fstFactory = FstSerializerFactory.getDefaultFactory();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11bb905af915d589012a7ad4efc230c54050535d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NjA2OA==", "bodyText": "received, processed,thx", "url": "https://github.com/seata/seata/pull/2445#discussion_r397596068", "createdAt": "2020-03-25T03:54:34Z", "author": {"login": "a364176773"}, "path": "serializer/seata-serializer-fst/src/main/java/io.seata.serializer.fst/FstSerializer.java", "diffHunk": "@@ -26,16 +24,16 @@\n @LoadLevel(name = \"FST\")\n public class FstSerializer implements Serializer {\n \n-    private final FSTConfiguration conf = FSTConfiguration.createDefaultConfiguration();\n+    FstSerializerFactory fstFactory = FstSerializerFactory.getDefaultFactory();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NDAyOA=="}, "originalCommit": {"oid": "11bb905af915d589012a7ad4efc230c54050535d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDcyNjg3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/serializer/SerializerClassRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo1MDoxOVrOF7LR6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo1NDozMFrOF7LVjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NTExMw==", "bodyText": "not only for kryo\uff0cwhere  used the  serializer  ?", "url": "https://github.com/seata/seata/pull/2445#discussion_r397595113", "createdAt": "2020-03-25T03:50:19Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/serializer/SerializerClassRegistry.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.serializer;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.BitSet;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Hashtable;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.TreeSet;\n+import java.util.Vector;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.seata.core.protocol.MergeResultMessage;\n+import io.seata.core.protocol.MergedWarpMessage;\n+import io.seata.core.protocol.RegisterRMRequest;\n+import io.seata.core.protocol.RegisterRMResponse;\n+import io.seata.core.protocol.RegisterTMRequest;\n+import io.seata.core.protocol.RegisterTMResponse;\n+import io.seata.core.protocol.transaction.BranchCommitRequest;\n+import io.seata.core.protocol.transaction.BranchCommitResponse;\n+import io.seata.core.protocol.transaction.BranchRegisterRequest;\n+import io.seata.core.protocol.transaction.BranchRegisterResponse;\n+import io.seata.core.protocol.transaction.BranchReportRequest;\n+import io.seata.core.protocol.transaction.BranchReportResponse;\n+import io.seata.core.protocol.transaction.BranchRollbackRequest;\n+import io.seata.core.protocol.transaction.BranchRollbackResponse;\n+import io.seata.core.protocol.transaction.GlobalBeginRequest;\n+import io.seata.core.protocol.transaction.GlobalBeginResponse;\n+import io.seata.core.protocol.transaction.GlobalCommitRequest;\n+import io.seata.core.protocol.transaction.GlobalCommitResponse;\n+import io.seata.core.protocol.transaction.GlobalLockQueryRequest;\n+import io.seata.core.protocol.transaction.GlobalLockQueryResponse;\n+import io.seata.core.protocol.transaction.GlobalReportRequest;\n+import io.seata.core.protocol.transaction.GlobalReportResponse;\n+import io.seata.core.protocol.transaction.GlobalRollbackRequest;\n+import io.seata.core.protocol.transaction.GlobalRollbackResponse;\n+import io.seata.core.protocol.transaction.GlobalStatusRequest;\n+import io.seata.core.protocol.transaction.GlobalStatusResponse;\n+import io.seata.core.protocol.transaction.UndoLogDeleteRequest;\n+\n+/**\n+ * Provide a unified serialization registry, this class used for {@code seata-serializer-fst}\n+ * and {@code seata-serializer-kryo}, it will register some classes at startup time (for example {@link KryoSerializerFactory#create})\n+ * @author funkye\n+ */\n+public class SerializerClassRegistry {\n+\n+    private static final Map<Class<?>, Object> REGISTRATIONS = new LinkedHashMap<>();\n+\n+    static {\n+\n+        // register commonly class\n+        registerClass(HashMap.class);\n+        registerClass(ArrayList.class);\n+        registerClass(LinkedList.class);\n+        registerClass(HashSet.class);\n+        registerClass(TreeSet.class);\n+        registerClass(Hashtable.class);\n+        registerClass(Date.class);\n+        registerClass(Calendar.class);\n+        registerClass(ConcurrentHashMap.class);\n+        registerClass(SimpleDateFormat.class);\n+        registerClass(GregorianCalendar.class);\n+        registerClass(Vector.class);\n+        registerClass(BitSet.class);\n+        registerClass(StringBuffer.class);\n+        registerClass(StringBuilder.class);\n+        registerClass(Object.class);\n+        registerClass(Object[].class);\n+        registerClass(String[].class);\n+        registerClass(byte[].class);\n+        registerClass(char[].class);\n+        registerClass(int[].class);\n+        registerClass(float[].class);\n+        registerClass(double[].class);\n+\n+        // register seata protocol relation class\n+        registerClass(BranchCommitRequest.class);\n+        registerClass(BranchCommitResponse.class);\n+        registerClass(BranchRegisterRequest.class);\n+        registerClass(BranchRegisterResponse.class);\n+        registerClass(BranchReportRequest.class);\n+        registerClass(BranchReportResponse.class);\n+        registerClass(BranchRollbackRequest.class);\n+        registerClass(BranchRollbackResponse.class);\n+        registerClass(GlobalBeginRequest.class);\n+        registerClass(GlobalBeginResponse.class);\n+        registerClass(GlobalCommitRequest.class);\n+        registerClass(GlobalCommitResponse.class);\n+        registerClass(GlobalLockQueryRequest.class);\n+        registerClass(GlobalLockQueryResponse.class);\n+        registerClass(GlobalRollbackRequest.class);\n+        registerClass(GlobalRollbackResponse.class);\n+        registerClass(GlobalStatusRequest.class);\n+        registerClass(GlobalStatusResponse.class);\n+        registerClass(UndoLogDeleteRequest.class);\n+        registerClass(GlobalReportRequest.class);\n+        registerClass(GlobalReportResponse.class);\n+\n+        registerClass(MergedWarpMessage.class);\n+        registerClass(MergeResultMessage.class);\n+        registerClass(RegisterRMRequest.class);\n+        registerClass(RegisterRMResponse.class);\n+        registerClass(RegisterTMRequest.class);\n+        registerClass(RegisterTMResponse.class);\n+    }\n+    \n+    /**\n+     * only supposed to be called at startup time\n+     *\n+     * @param clazz object type\n+     */\n+    public static void registerClass(Class<?> clazz) {\n+        registerClass(clazz, null);\n+    }\n+\n+    /**\n+     * only supposed to be called at startup time\n+     *\n+     * @param clazz object type\n+     * @param serializer object serializer\n+     */\n+    public static void registerClass(Class<?> clazz, Object serializer) {\n+        if (clazz == null) {\n+            throw new IllegalArgumentException(\"Class registered to kryo cannot be null!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11bb905af915d589012a7ad4efc230c54050535d"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NjA0Nw==", "bodyText": "received, processed,thx", "url": "https://github.com/seata/seata/pull/2445#discussion_r397596047", "createdAt": "2020-03-25T03:54:30Z", "author": {"login": "a364176773"}, "path": "core/src/main/java/io/seata/core/serializer/SerializerClassRegistry.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.serializer;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.BitSet;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Hashtable;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.TreeSet;\n+import java.util.Vector;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.seata.core.protocol.MergeResultMessage;\n+import io.seata.core.protocol.MergedWarpMessage;\n+import io.seata.core.protocol.RegisterRMRequest;\n+import io.seata.core.protocol.RegisterRMResponse;\n+import io.seata.core.protocol.RegisterTMRequest;\n+import io.seata.core.protocol.RegisterTMResponse;\n+import io.seata.core.protocol.transaction.BranchCommitRequest;\n+import io.seata.core.protocol.transaction.BranchCommitResponse;\n+import io.seata.core.protocol.transaction.BranchRegisterRequest;\n+import io.seata.core.protocol.transaction.BranchRegisterResponse;\n+import io.seata.core.protocol.transaction.BranchReportRequest;\n+import io.seata.core.protocol.transaction.BranchReportResponse;\n+import io.seata.core.protocol.transaction.BranchRollbackRequest;\n+import io.seata.core.protocol.transaction.BranchRollbackResponse;\n+import io.seata.core.protocol.transaction.GlobalBeginRequest;\n+import io.seata.core.protocol.transaction.GlobalBeginResponse;\n+import io.seata.core.protocol.transaction.GlobalCommitRequest;\n+import io.seata.core.protocol.transaction.GlobalCommitResponse;\n+import io.seata.core.protocol.transaction.GlobalLockQueryRequest;\n+import io.seata.core.protocol.transaction.GlobalLockQueryResponse;\n+import io.seata.core.protocol.transaction.GlobalReportRequest;\n+import io.seata.core.protocol.transaction.GlobalReportResponse;\n+import io.seata.core.protocol.transaction.GlobalRollbackRequest;\n+import io.seata.core.protocol.transaction.GlobalRollbackResponse;\n+import io.seata.core.protocol.transaction.GlobalStatusRequest;\n+import io.seata.core.protocol.transaction.GlobalStatusResponse;\n+import io.seata.core.protocol.transaction.UndoLogDeleteRequest;\n+\n+/**\n+ * Provide a unified serialization registry, this class used for {@code seata-serializer-fst}\n+ * and {@code seata-serializer-kryo}, it will register some classes at startup time (for example {@link KryoSerializerFactory#create})\n+ * @author funkye\n+ */\n+public class SerializerClassRegistry {\n+\n+    private static final Map<Class<?>, Object> REGISTRATIONS = new LinkedHashMap<>();\n+\n+    static {\n+\n+        // register commonly class\n+        registerClass(HashMap.class);\n+        registerClass(ArrayList.class);\n+        registerClass(LinkedList.class);\n+        registerClass(HashSet.class);\n+        registerClass(TreeSet.class);\n+        registerClass(Hashtable.class);\n+        registerClass(Date.class);\n+        registerClass(Calendar.class);\n+        registerClass(ConcurrentHashMap.class);\n+        registerClass(SimpleDateFormat.class);\n+        registerClass(GregorianCalendar.class);\n+        registerClass(Vector.class);\n+        registerClass(BitSet.class);\n+        registerClass(StringBuffer.class);\n+        registerClass(StringBuilder.class);\n+        registerClass(Object.class);\n+        registerClass(Object[].class);\n+        registerClass(String[].class);\n+        registerClass(byte[].class);\n+        registerClass(char[].class);\n+        registerClass(int[].class);\n+        registerClass(float[].class);\n+        registerClass(double[].class);\n+\n+        // register seata protocol relation class\n+        registerClass(BranchCommitRequest.class);\n+        registerClass(BranchCommitResponse.class);\n+        registerClass(BranchRegisterRequest.class);\n+        registerClass(BranchRegisterResponse.class);\n+        registerClass(BranchReportRequest.class);\n+        registerClass(BranchReportResponse.class);\n+        registerClass(BranchRollbackRequest.class);\n+        registerClass(BranchRollbackResponse.class);\n+        registerClass(GlobalBeginRequest.class);\n+        registerClass(GlobalBeginResponse.class);\n+        registerClass(GlobalCommitRequest.class);\n+        registerClass(GlobalCommitResponse.class);\n+        registerClass(GlobalLockQueryRequest.class);\n+        registerClass(GlobalLockQueryResponse.class);\n+        registerClass(GlobalRollbackRequest.class);\n+        registerClass(GlobalRollbackResponse.class);\n+        registerClass(GlobalStatusRequest.class);\n+        registerClass(GlobalStatusResponse.class);\n+        registerClass(UndoLogDeleteRequest.class);\n+        registerClass(GlobalReportRequest.class);\n+        registerClass(GlobalReportResponse.class);\n+\n+        registerClass(MergedWarpMessage.class);\n+        registerClass(MergeResultMessage.class);\n+        registerClass(RegisterRMRequest.class);\n+        registerClass(RegisterRMResponse.class);\n+        registerClass(RegisterTMRequest.class);\n+        registerClass(RegisterTMResponse.class);\n+    }\n+    \n+    /**\n+     * only supposed to be called at startup time\n+     *\n+     * @param clazz object type\n+     */\n+    public static void registerClass(Class<?> clazz) {\n+        registerClass(clazz, null);\n+    }\n+\n+    /**\n+     * only supposed to be called at startup time\n+     *\n+     * @param clazz object type\n+     * @param serializer object serializer\n+     */\n+    public static void registerClass(Class<?> clazz, Object serializer) {\n+        if (clazz == null) {\n+            throw new IllegalArgumentException(\"Class registered to kryo cannot be null!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NTExMw=="}, "originalCommit": {"oid": "11bb905af915d589012a7ad4efc230c54050535d"}, "originalPosition": 146}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1502, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}