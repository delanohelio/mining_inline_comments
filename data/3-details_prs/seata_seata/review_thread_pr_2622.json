{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5Mjc0Nzc3", "number": 2622, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzowMjozNVrOD2_jqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo1MDo1N1rOEKG2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4OTkxMDE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/protocol/Version.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzowMjozNVrOGNAZyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMDowNzoxNFrOGNMp4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MTI3Mw==", "bodyText": "Is it clearer to change \u3010current - divideVersion > 0\u3011 to \u3010current > divideVersion\u3011", "url": "https://github.com/seata/seata/pull/2622#discussion_r416291273", "createdAt": "2020-04-28T03:02:35Z", "author": {"login": "ph3636"}, "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,35 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current - divideVersion > 0 && clientVersion - divideVersion < 0) || (current - divideVersion < 0 && clientVersion - divideVersion > 0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a90cc27743566730cf78bb338ce7de5c86665ead"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ5MjAwMA==", "bodyText": "fixed", "url": "https://github.com/seata/seata/pull/2622#discussion_r416492000", "createdAt": "2020-04-28T10:07:14Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,35 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current - divideVersion > 0 && clientVersion - divideVersion < 0) || (current - divideVersion < 0 && clientVersion - divideVersion > 0)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MTI3Mw=="}, "originalCommit": {"oid": "a90cc27743566730cf78bb338ce7de5c86665ead"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4OTkxMTU4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/protocol/Version.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzowMzoxMFrOGNAakg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMDoyNDoxNlrOGNNSTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MTQ3NA==", "bodyText": "Why not fix it to 3?\nif (size != 3 ) {\nthrow ...\n}", "url": "https://github.com/seata/seata/pull/2622#discussion_r416291474", "createdAt": "2020-04-28T03:03:10Z", "author": {"login": "ph3636"}, "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,35 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current - divideVersion > 0 && clientVersion - divideVersion < 0) || (current - divideVersion < 0 && clientVersion - divideVersion > 0)) {\n+            throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n+        }\n+    }\n+\n+    private static long convertVersion(String version) throws IncompatibleVersionException {\n+        String parts[] = StringUtils.split(version, '.');\n+        Long result = 0L;\n+        int i = 1;\n+        int size = parts.length;\n+        if (size > MAX_VERSION_DOT + 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a90cc27743566730cf78bb338ce7de5c86665ead"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ4OTYxMg==", "bodyText": "some version such as\uff1a 1.3.0\uff0c1.3.0.1\uff0c1.3.0-SNAPSHOT ...", "url": "https://github.com/seata/seata/pull/2622#discussion_r416489612", "createdAt": "2020-04-28T10:03:23Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,35 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current - divideVersion > 0 && clientVersion - divideVersion < 0) || (current - divideVersion < 0 && clientVersion - divideVersion > 0)) {\n+            throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n+        }\n+    }\n+\n+    private static long convertVersion(String version) throws IncompatibleVersionException {\n+        String parts[] = StringUtils.split(version, '.');\n+        Long result = 0L;\n+        int i = 1;\n+        int size = parts.length;\n+        if (size > MAX_VERSION_DOT + 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MTQ3NA=="}, "originalCommit": {"oid": "a90cc27743566730cf78bb338ce7de5c86665ead"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ5MzY4NA==", "bodyText": "If so, The value of result is that 1.3.0.1 is larger than 1.4.0?", "url": "https://github.com/seata/seata/pull/2622#discussion_r416493684", "createdAt": "2020-04-28T10:10:06Z", "author": {"login": "ph3636"}, "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,35 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current - divideVersion > 0 && clientVersion - divideVersion < 0) || (current - divideVersion < 0 && clientVersion - divideVersion > 0)) {\n+            throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n+        }\n+    }\n+\n+    private static long convertVersion(String version) throws IncompatibleVersionException {\n+        String parts[] = StringUtils.split(version, '.');\n+        Long result = 0L;\n+        int i = 1;\n+        int size = parts.length;\n+        if (size > MAX_VERSION_DOT + 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MTQ3NA=="}, "originalCommit": {"oid": "a90cc27743566730cf78bb338ce7de5c86665ead"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ5NTk4OA==", "bodyText": "get what you mean. fix later", "url": "https://github.com/seata/seata/pull/2622#discussion_r416495988", "createdAt": "2020-04-28T10:13:49Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,35 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current - divideVersion > 0 && clientVersion - divideVersion < 0) || (current - divideVersion < 0 && clientVersion - divideVersion > 0)) {\n+            throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n+        }\n+    }\n+\n+    private static long convertVersion(String version) throws IncompatibleVersionException {\n+        String parts[] = StringUtils.split(version, '.');\n+        Long result = 0L;\n+        int i = 1;\n+        int size = parts.length;\n+        if (size > MAX_VERSION_DOT + 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MTQ3NA=="}, "originalCommit": {"oid": "a90cc27743566730cf78bb338ce7de5c86665ead"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ5NzU0NQ==", "bodyText": "@ph3636 how about this one?", "url": "https://github.com/seata/seata/pull/2622#discussion_r416497545", "createdAt": "2020-04-28T10:16:22Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,35 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current - divideVersion > 0 && clientVersion - divideVersion < 0) || (current - divideVersion < 0 && clientVersion - divideVersion > 0)) {\n+            throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n+        }\n+    }\n+\n+    private static long convertVersion(String version) throws IncompatibleVersionException {\n+        String parts[] = StringUtils.split(version, '.');\n+        Long result = 0L;\n+        int i = 1;\n+        int size = parts.length;\n+        if (size > MAX_VERSION_DOT + 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MTQ3NA=="}, "originalCommit": {"oid": "a90cc27743566730cf78bb338ce7de5c86665ead"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUwMjM1MA==", "bodyText": "good", "url": "https://github.com/seata/seata/pull/2622#discussion_r416502350", "createdAt": "2020-04-28T10:24:16Z", "author": {"login": "ph3636"}, "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,35 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current - divideVersion > 0 && clientVersion - divideVersion < 0) || (current - divideVersion < 0 && clientVersion - divideVersion > 0)) {\n+            throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n+        }\n+    }\n+\n+    private static long convertVersion(String version) throws IncompatibleVersionException {\n+        String parts[] = StringUtils.split(version, '.');\n+        Long result = 0L;\n+        int i = 1;\n+        int size = parts.length;\n+        if (size > MAX_VERSION_DOT + 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MTQ3NA=="}, "originalCommit": {"oid": "a90cc27743566730cf78bb338ce7de5c86665ead"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODAxNzk3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/protocol/Version.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMjozOTo1NlrOGPn_aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMjozOTo1NlrOGPn_aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzNzAzNQ==", "bodyText": "The verification function has not yet been reached and an exception has been thrown: io.netty.handler.codec.TooLongFrameException: Adjusted frame length exceeds 8388608: 2415945472-discarded", "url": "https://github.com/seata/seata/pull/2622#discussion_r419037035", "createdAt": "2020-05-03T02:39:56Z", "author": {"login": "zjinlei"}, "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,36 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current > divideVersion && clientVersion < divideVersion) || (current < divideVersion && clientVersion > divideVersion)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3819fde692306af02c070f5937800f72c9820864"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDI0MzM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/protocol/Version.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzozMTozNlrOGq8efw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzozMTozNlrOGq8efw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NDIyMw==", "bodyText": "String[] parts, it would be better.", "url": "https://github.com/seata/seata/pull/2622#discussion_r447684223", "createdAt": "2020-06-30T13:31:36Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,36 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current > divideVersion && clientVersion < divideVersion) || (current < divideVersion && clientVersion > divideVersion)) {\n+            throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n+        }\n+    }\n+\n+    private static long convertVersion(String version) throws IncompatibleVersionException {\n+        String parts[] = StringUtils.split(version, '.');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694065e92d1bada12f923b380cb06bf752f26118"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDI0NjMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/protocol/Version.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzozMjoxNFrOGq8gLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzozMjoxNFrOGq8gLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NDY1Mw==", "bodyText": "Use numeric long.", "url": "https://github.com/seata/seata/pull/2622#discussion_r447684653", "createdAt": "2020-06-30T13:32:14Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,36 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current > divideVersion && clientVersion < divideVersion) || (current < divideVersion && clientVersion > divideVersion)) {\n+            throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n+        }\n+    }\n+\n+    private static long convertVersion(String version) throws IncompatibleVersionException {\n+        String parts[] = StringUtils.split(version, '.');\n+        Long result = 0L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694065e92d1bada12f923b380cb06bf752f26118"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDI1MTk4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/protocol/Version.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzozMzoyN1rOGq8j2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzozMzoyN1rOGq8j2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NTU5NA==", "bodyText": "Long.parseLong(part)", "url": "https://github.com/seata/seata/pull/2622#discussion_r447685594", "createdAt": "2020-06-30T13:33:27Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,36 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current > divideVersion && clientVersion < divideVersion) || (current < divideVersion && clientVersion > divideVersion)) {\n+            throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n+        }\n+    }\n+\n+    private static long convertVersion(String version) throws IncompatibleVersionException {\n+        String parts[] = StringUtils.split(version, '.');\n+        Long result = 0L;\n+        int i = 1;\n+        int size = parts.length;\n+        if (size > MAX_VERSION_DOT + 1) {\n+            throw new IncompatibleVersionException(\"incompatible version format:\" + version);\n+        }\n+        size = MAX_VERSION_DOT + 1;\n+        for (String part : parts) {\n+            if (StringUtils.isNumeric(part)) {\n+                result += Long.valueOf(part) * Double.valueOf(Math.pow(100, size - i)).longValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694065e92d1bada12f923b380cb06bf752f26118"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDI1NDAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/protocol/Version.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzozMzo1NlrOGq8lCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzozMzo1NlrOGq8lCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NTg5Nw==", "bodyText": "Long.parseLong(part)", "url": "https://github.com/seata/seata/pull/2622#discussion_r447685897", "createdAt": "2020-06-30T13:33:56Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,36 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current > divideVersion && clientVersion < divideVersion) || (current < divideVersion && clientVersion > divideVersion)) {\n+            throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n+        }\n+    }\n+\n+    private static long convertVersion(String version) throws IncompatibleVersionException {\n+        String parts[] = StringUtils.split(version, '.');\n+        Long result = 0L;\n+        int i = 1;\n+        int size = parts.length;\n+        if (size > MAX_VERSION_DOT + 1) {\n+            throw new IncompatibleVersionException(\"incompatible version format:\" + version);\n+        }\n+        size = MAX_VERSION_DOT + 1;\n+        for (String part : parts) {\n+            if (StringUtils.isNumeric(part)) {\n+                result += Long.valueOf(part) * Double.valueOf(Math.pow(100, size - i)).longValue();\n+            } else {\n+                String subParts[] = StringUtils.split(part, '-');\n+                if (StringUtils.isNumeric(subParts[0])) {\n+                    result += Long.valueOf(subParts[0]) * Double.valueOf(Math.pow(100, size - i)).longValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694065e92d1bada12f923b380cb06bf752f26118"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDI2MTg2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/protocol/Version.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzozNTozOVrOGq8p-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzozNTozOVrOGq8p-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NzE2MQ==", "bodyText": "String[] subParts", "url": "https://github.com/seata/seata/pull/2622#discussion_r447687161", "createdAt": "2020-06-30T13:35:39Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,36 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current > divideVersion && clientVersion < divideVersion) || (current < divideVersion && clientVersion > divideVersion)) {\n+            throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n+        }\n+    }\n+\n+    private static long convertVersion(String version) throws IncompatibleVersionException {\n+        String parts[] = StringUtils.split(version, '.');\n+        Long result = 0L;\n+        int i = 1;\n+        int size = parts.length;\n+        if (size > MAX_VERSION_DOT + 1) {\n+            throw new IncompatibleVersionException(\"incompatible version format:\" + version);\n+        }\n+        size = MAX_VERSION_DOT + 1;\n+        for (String part : parts) {\n+            if (StringUtils.isNumeric(part)) {\n+                result += Long.valueOf(part) * Double.valueOf(Math.pow(100, size - i)).longValue();\n+            } else {\n+                String subParts[] = StringUtils.split(part, '-');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694065e92d1bada12f923b380cb06bf752f26118"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDMzMzk3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/protocol/Version.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo1MDo1N1rOGq9WLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo1MDo1N1rOGq9WLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5ODQ3Nw==", "bodyText": "Long.parseLong(part) * Double.valueOf(Math.pow(100, size - i)).longValue();\nI think this code can be a single method, prevent repeated warnings.\nsuch as:\nprivate static long calculatePartValue(String part, int size, int i) {\n        return Long.parseLong(part) * Double.valueOf(Math.pow(100, size - i)).longValue();\n}", "url": "https://github.com/seata/seata/pull/2622#discussion_r447698477", "createdAt": "2020-06-30T13:50:57Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,36 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current > divideVersion && clientVersion < divideVersion) || (current < divideVersion && clientVersion > divideVersion)) {\n+            throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n+        }\n+    }\n+\n+    private static long convertVersion(String version) throws IncompatibleVersionException {\n+        String parts[] = StringUtils.split(version, '.');\n+        Long result = 0L;\n+        int i = 1;\n+        int size = parts.length;\n+        if (size > MAX_VERSION_DOT + 1) {\n+            throw new IncompatibleVersionException(\"incompatible version format:\" + version);\n+        }\n+        size = MAX_VERSION_DOT + 1;\n+        for (String part : parts) {\n+            if (StringUtils.isNumeric(part)) {\n+                result += Long.valueOf(part) * Double.valueOf(Math.pow(100, size - i)).longValue();\n+            } else {\n+                String subParts[] = StringUtils.split(part, '-');\n+                if (StringUtils.isNumeric(subParts[0])) {\n+                    result += Long.valueOf(subParts[0]) * Double.valueOf(Math.pow(100, size - i)).longValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694065e92d1bada12f923b380cb06bf752f26118"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1569, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}