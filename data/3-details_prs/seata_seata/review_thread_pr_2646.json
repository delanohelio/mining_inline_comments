{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMzEzMDIz", "number": 2646, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNjozMDozNFrOD4yhFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNTozMToyNVrOD6hJ7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODc0NTE5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/seata/server/store/HikariDataSourceGenerator.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNjozMDozNFrOGPtfFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjo0Mzo0M1rOGRwfyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyNzA2Mg==", "bodyText": "", "url": "https://github.com/seata/seata/pull/2646#discussion_r419127062", "createdAt": "2020-05-03T16:30:34Z", "author": {"login": "slievrly"}, "path": "server/src/main/java/io/seata/server/store/HikariDataSourceGenerator.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server.store;\n+\n+import javax.sql.DataSource;\n+import java.util.Properties;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import io.seata.common.loader.LoadLevel;\n+import io.seata.core.store.db.AbstractDataSourceGenerator;\n+\n+/**\n+ * The type Hikari data source generator.\n+ *\n+ * @author diguage\n+ */\n+@LoadLevel(name = \"hikari\")\n+public class HikariDataSourceGenerator extends AbstractDataSourceGenerator {\n+    @Override\n+    public DataSource generateDataSource() {\n+        Properties properties = new Properties();\n+        properties.setProperty(\"dataSource.cachePrepStmts\", \"true\");\n+        properties.setProperty(\"dataSource.prepStmtCacheSize\", \"250\");\n+        properties.setProperty(\"dataSource.prepStmtCacheSqlLimit\", \"2048\");\n+        properties.setProperty(\"dataSource.useServerPrepStmts\", \"true\");\n+        properties.setProperty(\"dataSource.useLocalSessionState\", \"true\");\n+        properties.setProperty(\"dataSource.rewriteBatchedStatements\", \"true\");\n+        properties.setProperty(\"dataSource.cacheResultSetMetadata\", \"true\");\n+        properties.setProperty(\"dataSource.cacheServerConfiguration\", \"true\");\n+        properties.setProperty(\"dataSource.elideSetAutoCommits\", \"true\");\n+        properties.setProperty(\"dataSource.maintainTimeStats\", \"false\");\n+\n+        HikariConfig config = new HikariConfig(properties);\n+        config.setDriverClassName(getDriverClassName());\n+        config.setJdbcUrl(getUrl());\n+        config.setUsername(getUser());\n+        config.setPassword(getPassword());\n+        config.setMaximumPoolSize(getMaxConn());\n+        config.setMinimumIdle(getMinConn());\n+        config.setAutoCommit(true);\n+        config.setConnectionTestQuery(getValidationQuery(getDBType()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4da2e81da4ed0aa23d49013ed361f0ca8d9174f4"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY4OTExMg==", "bodyText": "@diguage How was the problem solved?", "url": "https://github.com/seata/seata/pull/2646#discussion_r420689112", "createdAt": "2020-05-06T10:27:58Z", "author": {"login": "slievrly"}, "path": "server/src/main/java/io/seata/server/store/HikariDataSourceGenerator.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server.store;\n+\n+import javax.sql.DataSource;\n+import java.util.Properties;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import io.seata.common.loader.LoadLevel;\n+import io.seata.core.store.db.AbstractDataSourceGenerator;\n+\n+/**\n+ * The type Hikari data source generator.\n+ *\n+ * @author diguage\n+ */\n+@LoadLevel(name = \"hikari\")\n+public class HikariDataSourceGenerator extends AbstractDataSourceGenerator {\n+    @Override\n+    public DataSource generateDataSource() {\n+        Properties properties = new Properties();\n+        properties.setProperty(\"dataSource.cachePrepStmts\", \"true\");\n+        properties.setProperty(\"dataSource.prepStmtCacheSize\", \"250\");\n+        properties.setProperty(\"dataSource.prepStmtCacheSqlLimit\", \"2048\");\n+        properties.setProperty(\"dataSource.useServerPrepStmts\", \"true\");\n+        properties.setProperty(\"dataSource.useLocalSessionState\", \"true\");\n+        properties.setProperty(\"dataSource.rewriteBatchedStatements\", \"true\");\n+        properties.setProperty(\"dataSource.cacheResultSetMetadata\", \"true\");\n+        properties.setProperty(\"dataSource.cacheServerConfiguration\", \"true\");\n+        properties.setProperty(\"dataSource.elideSetAutoCommits\", \"true\");\n+        properties.setProperty(\"dataSource.maintainTimeStats\", \"false\");\n+\n+        HikariConfig config = new HikariConfig(properties);\n+        config.setDriverClassName(getDriverClassName());\n+        config.setJdbcUrl(getUrl());\n+        config.setUsername(getUser());\n+        config.setPassword(getPassword());\n+        config.setMaximumPoolSize(getMaxConn());\n+        config.setMinimumIdle(getMinConn());\n+        config.setAutoCommit(true);\n+        config.setConnectionTestQuery(getValidationQuery(getDBType()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyNzA2Mg=="}, "originalCommit": {"oid": "4da2e81da4ed0aa23d49013ed361f0ca8d9174f4"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg3NzI1MA==", "bodyText": "@slievrly\nYes. I have deleted the statement.", "url": "https://github.com/seata/seata/pull/2646#discussion_r420877250", "createdAt": "2020-05-06T15:20:33Z", "author": {"login": "diguage"}, "path": "server/src/main/java/io/seata/server/store/HikariDataSourceGenerator.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server.store;\n+\n+import javax.sql.DataSource;\n+import java.util.Properties;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import io.seata.common.loader.LoadLevel;\n+import io.seata.core.store.db.AbstractDataSourceGenerator;\n+\n+/**\n+ * The type Hikari data source generator.\n+ *\n+ * @author diguage\n+ */\n+@LoadLevel(name = \"hikari\")\n+public class HikariDataSourceGenerator extends AbstractDataSourceGenerator {\n+    @Override\n+    public DataSource generateDataSource() {\n+        Properties properties = new Properties();\n+        properties.setProperty(\"dataSource.cachePrepStmts\", \"true\");\n+        properties.setProperty(\"dataSource.prepStmtCacheSize\", \"250\");\n+        properties.setProperty(\"dataSource.prepStmtCacheSqlLimit\", \"2048\");\n+        properties.setProperty(\"dataSource.useServerPrepStmts\", \"true\");\n+        properties.setProperty(\"dataSource.useLocalSessionState\", \"true\");\n+        properties.setProperty(\"dataSource.rewriteBatchedStatements\", \"true\");\n+        properties.setProperty(\"dataSource.cacheResultSetMetadata\", \"true\");\n+        properties.setProperty(\"dataSource.cacheServerConfiguration\", \"true\");\n+        properties.setProperty(\"dataSource.elideSetAutoCommits\", \"true\");\n+        properties.setProperty(\"dataSource.maintainTimeStats\", \"false\");\n+\n+        HikariConfig config = new HikariConfig(properties);\n+        config.setDriverClassName(getDriverClassName());\n+        config.setJdbcUrl(getUrl());\n+        config.setUsername(getUser());\n+        config.setPassword(getPassword());\n+        config.setMaximumPoolSize(getMaxConn());\n+        config.setMinimumIdle(getMinConn());\n+        config.setAutoCommit(true);\n+        config.setConnectionTestQuery(getValidationQuery(getDBType()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyNzA2Mg=="}, "originalCommit": {"oid": "4da2e81da4ed0aa23d49013ed361f0ca8d9174f4"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODQ5MQ==", "bodyText": "@diguage Is the code not committed?", "url": "https://github.com/seata/seata/pull/2646#discussion_r421218491", "createdAt": "2020-05-07T03:31:58Z", "author": {"login": "slievrly"}, "path": "server/src/main/java/io/seata/server/store/HikariDataSourceGenerator.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server.store;\n+\n+import javax.sql.DataSource;\n+import java.util.Properties;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import io.seata.common.loader.LoadLevel;\n+import io.seata.core.store.db.AbstractDataSourceGenerator;\n+\n+/**\n+ * The type Hikari data source generator.\n+ *\n+ * @author diguage\n+ */\n+@LoadLevel(name = \"hikari\")\n+public class HikariDataSourceGenerator extends AbstractDataSourceGenerator {\n+    @Override\n+    public DataSource generateDataSource() {\n+        Properties properties = new Properties();\n+        properties.setProperty(\"dataSource.cachePrepStmts\", \"true\");\n+        properties.setProperty(\"dataSource.prepStmtCacheSize\", \"250\");\n+        properties.setProperty(\"dataSource.prepStmtCacheSqlLimit\", \"2048\");\n+        properties.setProperty(\"dataSource.useServerPrepStmts\", \"true\");\n+        properties.setProperty(\"dataSource.useLocalSessionState\", \"true\");\n+        properties.setProperty(\"dataSource.rewriteBatchedStatements\", \"true\");\n+        properties.setProperty(\"dataSource.cacheResultSetMetadata\", \"true\");\n+        properties.setProperty(\"dataSource.cacheServerConfiguration\", \"true\");\n+        properties.setProperty(\"dataSource.elideSetAutoCommits\", \"true\");\n+        properties.setProperty(\"dataSource.maintainTimeStats\", \"false\");\n+\n+        HikariConfig config = new HikariConfig(properties);\n+        config.setDriverClassName(getDriverClassName());\n+        config.setJdbcUrl(getUrl());\n+        config.setUsername(getUser());\n+        config.setPassword(getPassword());\n+        config.setMaximumPoolSize(getMaxConn());\n+        config.setMinimumIdle(getMinConn());\n+        config.setAutoCommit(true);\n+        config.setConnectionTestQuery(getValidationQuery(getDBType()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyNzA2Mg=="}, "originalCommit": {"oid": "4da2e81da4ed0aa23d49013ed361f0ca8d9174f4"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI3MzU0NA==", "bodyText": "@slievrly\nSorry. I forgot to commit.", "url": "https://github.com/seata/seata/pull/2646#discussion_r421273544", "createdAt": "2020-05-07T06:43:43Z", "author": {"login": "diguage"}, "path": "server/src/main/java/io/seata/server/store/HikariDataSourceGenerator.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server.store;\n+\n+import javax.sql.DataSource;\n+import java.util.Properties;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import io.seata.common.loader.LoadLevel;\n+import io.seata.core.store.db.AbstractDataSourceGenerator;\n+\n+/**\n+ * The type Hikari data source generator.\n+ *\n+ * @author diguage\n+ */\n+@LoadLevel(name = \"hikari\")\n+public class HikariDataSourceGenerator extends AbstractDataSourceGenerator {\n+    @Override\n+    public DataSource generateDataSource() {\n+        Properties properties = new Properties();\n+        properties.setProperty(\"dataSource.cachePrepStmts\", \"true\");\n+        properties.setProperty(\"dataSource.prepStmtCacheSize\", \"250\");\n+        properties.setProperty(\"dataSource.prepStmtCacheSqlLimit\", \"2048\");\n+        properties.setProperty(\"dataSource.useServerPrepStmts\", \"true\");\n+        properties.setProperty(\"dataSource.useLocalSessionState\", \"true\");\n+        properties.setProperty(\"dataSource.rewriteBatchedStatements\", \"true\");\n+        properties.setProperty(\"dataSource.cacheResultSetMetadata\", \"true\");\n+        properties.setProperty(\"dataSource.cacheServerConfiguration\", \"true\");\n+        properties.setProperty(\"dataSource.elideSetAutoCommits\", \"true\");\n+        properties.setProperty(\"dataSource.maintainTimeStats\", \"false\");\n+\n+        HikariConfig config = new HikariConfig(properties);\n+        config.setDriverClassName(getDriverClassName());\n+        config.setJdbcUrl(getUrl());\n+        config.setUsername(getUser());\n+        config.setPassword(getPassword());\n+        config.setMaximumPoolSize(getMaxConn());\n+        config.setMinimumIdle(getMinConn());\n+        config.setAutoCommit(true);\n+        config.setConnectionTestQuery(getValidationQuery(getDBType()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyNzA2Mg=="}, "originalCommit": {"oid": "4da2e81da4ed0aa23d49013ed361f0ca8d9174f4"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjg3MjE0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/seata/server/store/HikariDataSourceGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNTozMToyNVrOGSZmsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjo1NDo1NVrOGS4AzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0NzA1Ng==", "bodyText": "connectionTimeout is equivalent to druid maxWait? if yes, please add config.setConnectionTimeout(getMaxWait());", "url": "https://github.com/seata/seata/pull/2646#discussion_r421947056", "createdAt": "2020-05-08T05:31:25Z", "author": {"login": "a364176773"}, "path": "server/src/main/java/io/seata/server/store/HikariDataSourceGenerator.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server.store;\n+\n+import javax.sql.DataSource;\n+import java.util.Properties;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import io.seata.common.loader.LoadLevel;\n+import io.seata.core.store.db.AbstractDataSourceGenerator;\n+\n+/**\n+ * The type Hikari data source generator.\n+ *\n+ * @author diguage\n+ */\n+@LoadLevel(name = \"hikari\")\n+public class HikariDataSourceGenerator extends AbstractDataSourceGenerator {\n+    @Override\n+    public DataSource generateDataSource() {\n+        Properties properties = new Properties();\n+        properties.setProperty(\"dataSource.cachePrepStmts\", \"true\");\n+        properties.setProperty(\"dataSource.prepStmtCacheSize\", \"250\");\n+        properties.setProperty(\"dataSource.prepStmtCacheSqlLimit\", \"2048\");\n+        properties.setProperty(\"dataSource.useServerPrepStmts\", \"true\");\n+        properties.setProperty(\"dataSource.useLocalSessionState\", \"true\");\n+        properties.setProperty(\"dataSource.rewriteBatchedStatements\", \"true\");\n+        properties.setProperty(\"dataSource.cacheResultSetMetadata\", \"true\");\n+        properties.setProperty(\"dataSource.cacheServerConfiguration\", \"true\");\n+        properties.setProperty(\"dataSource.elideSetAutoCommits\", \"true\");\n+        properties.setProperty(\"dataSource.maintainTimeStats\", \"false\");\n+\n+        HikariConfig config = new HikariConfig(properties);\n+        config.setDriverClassName(getDriverClassName());\n+        config.setJdbcUrl(getUrl());\n+        config.setUsername(getUser());\n+        config.setPassword(getPassword());\n+        config.setMaximumPoolSize(getMaxConn());\n+        config.setMinimumIdle(getMinConn());\n+        config.setAutoCommit(true);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e768b9c3f2c374bc40372bf328254cea3246a5"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0NTI2MQ==", "bodyText": "OK", "url": "https://github.com/seata/seata/pull/2646#discussion_r422445261", "createdAt": "2020-05-09T02:54:55Z", "author": {"login": "diguage"}, "path": "server/src/main/java/io/seata/server/store/HikariDataSourceGenerator.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server.store;\n+\n+import javax.sql.DataSource;\n+import java.util.Properties;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import io.seata.common.loader.LoadLevel;\n+import io.seata.core.store.db.AbstractDataSourceGenerator;\n+\n+/**\n+ * The type Hikari data source generator.\n+ *\n+ * @author diguage\n+ */\n+@LoadLevel(name = \"hikari\")\n+public class HikariDataSourceGenerator extends AbstractDataSourceGenerator {\n+    @Override\n+    public DataSource generateDataSource() {\n+        Properties properties = new Properties();\n+        properties.setProperty(\"dataSource.cachePrepStmts\", \"true\");\n+        properties.setProperty(\"dataSource.prepStmtCacheSize\", \"250\");\n+        properties.setProperty(\"dataSource.prepStmtCacheSqlLimit\", \"2048\");\n+        properties.setProperty(\"dataSource.useServerPrepStmts\", \"true\");\n+        properties.setProperty(\"dataSource.useLocalSessionState\", \"true\");\n+        properties.setProperty(\"dataSource.rewriteBatchedStatements\", \"true\");\n+        properties.setProperty(\"dataSource.cacheResultSetMetadata\", \"true\");\n+        properties.setProperty(\"dataSource.cacheServerConfiguration\", \"true\");\n+        properties.setProperty(\"dataSource.elideSetAutoCommits\", \"true\");\n+        properties.setProperty(\"dataSource.maintainTimeStats\", \"false\");\n+\n+        HikariConfig config = new HikariConfig(properties);\n+        config.setDriverClassName(getDriverClassName());\n+        config.setJdbcUrl(getUrl());\n+        config.setUsername(getUser());\n+        config.setPassword(getPassword());\n+        config.setMaximumPoolSize(getMaxConn());\n+        config.setMinimumIdle(getMinConn());\n+        config.setAutoCommit(true);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0NzA1Ng=="}, "originalCommit": {"oid": "55e768b9c3f2c374bc40372bf328254cea3246a5"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1579, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}