{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1ODMwNzQw", "number": 2253, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNTo1MzozM1rODqPizw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMjo0NToyNFrOD5O9Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjIxNDU1OnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNTo1MzozM1rOF53sbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNTo1MzozM1rOF53sbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNTY0NQ==", "bodyText": "Please check the spell of \"domotion\" is it wrong.", "url": "https://github.com/seata/seata/pull/2253#discussion_r396225645", "createdAt": "2020-03-23T05:53:33Z", "author": {"login": "l81893521"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -101,9 +139,10 @@ private Object handleGlobalLock(final MethodInvocation methodInvocation) throws\n     }\n \n     private Object handleGlobalTransaction(final MethodInvocation methodInvocation,\n-                                           final GlobalTransactional globalTrxAnno) throws Throwable {\n+        final GlobalTransactional globalTrxAnno, String domotionKey) throws Throwable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4327e7ea18e672c5a6d8bf643ef055411ed26193"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDkxMjkwOnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODo0MToxNVrOF6l2Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODo0MToxNVrOF6l2Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4MTc5OQ==", "bodyText": "Why not use if else", "url": "https://github.com/seata/seata/pull/2253#discussion_r396981799", "createdAt": "2020-03-24T08:41:15Z", "author": {"login": "l81893521"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -190,4 +240,38 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n         }\n     }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startSelfCheck() {\n+        ScheduledThreadPoolExecutor executor =\n+            new ScheduledThreadPoolExecutor(1, new NamedThreadFactory(\"SelfCheckWorker\", 1, true));\n+        executor.scheduleAtFixedRate(() -> {\n+            if (demotionMap.size() > 0) {\n+                try {\n+                    TransactionManagerHolder.get()\n+                        .commit(TransactionManagerHolder.get().begin(null, null, \"test\", 60000));\n+                    onSelfCheck(false);\n+                } catch (Exception e) {\n+                    onSelfCheck(true);\n+                }\n+            }\n+        }, 10, selfCheckPeriod, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private static synchronized void onSelfCheck(boolean isError) {\n+        if (!isError) {\n+            autoDemotionNum++;\n+            if (autoDemotionNum > selfCheckAllowTimes && demotionMap.size() > 0) {\n+                autoDemotionNum = 0;\n+                demotionMap.clear();\n+            }\n+        }\n+        if (isError) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83b0cc92d782028cf040e3de92c26e8c0f1f1b93"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTAyMjg1OnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOToxMToyOVrOF6m8BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOToxMToyOVrOF6m8BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5OTY4NA==", "bodyText": "I think\nif (selfCheck) {\n    onSelfCheck(error);\n}\n\nis unnecessary here, already have thread to detect it.", "url": "https://github.com/seata/seata/pull/2253#discussion_r396999684", "createdAt": "2020-03-24T09:11:29Z", "author": {"login": "l81893521"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -155,11 +197,19 @@ public TransactionInfo getTransactionInfo() {\n                     failureHandler.onRollbackFailure(e.getTransaction(), e.getCause());\n                     throw e.getCause();\n                 case RollbackRetrying:\n+                    error = false;\n                     failureHandler.onRollbackRetrying(e.getTransaction(), e.getCause());\n                     throw e.getCause();\n                 default:\n                     throw new ShouldNeverHappenException(String.format(\"Unknown TransactionalExecutor.Code: %s\", code));\n-\n+            }\n+        } finally {\n+            if (selfCheck) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83812183520714aeed790fea9325fd7de46a8618"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTQ3MzcxOnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMToxMTo1MVrOF6rZdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjoxNDoyNlrOF6teHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3Mjc1OA==", "bodyText": "I think ScheduledThreadPoolExecutor should be static and outside the method.", "url": "https://github.com/seata/seata/pull/2253#discussion_r397072758", "createdAt": "2020-03-24T11:11:51Z", "author": {"login": "l81893521"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -190,4 +237,37 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n         }\n     }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startSelfCheck() {\n+        ScheduledThreadPoolExecutor executor =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8628550c91f87cbc3251950040b58c5d0496bcd9"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEwNjcxOA==", "bodyText": "received, processed,thx", "url": "https://github.com/seata/seata/pull/2253#discussion_r397106718", "createdAt": "2020-03-24T12:14:26Z", "author": {"login": "a364176773"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -190,4 +237,37 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n         }\n     }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startSelfCheck() {\n+        ScheduledThreadPoolExecutor executor =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3Mjc1OA=="}, "originalCommit": {"oid": "8628550c91f87cbc3251950040b58c5d0496bcd9"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTQ3OTMzOnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMToxMzoyOVrOF6rc_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjoxNDo1NVrOF6tfLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3MzY2Mg==", "bodyText": "how about remove the condition of\ndemotionMap.size() > 0", "url": "https://github.com/seata/seata/pull/2253#discussion_r397073662", "createdAt": "2020-03-24T11:13:29Z", "author": {"login": "l81893521"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -190,4 +237,37 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n         }\n     }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startSelfCheck() {\n+        ScheduledThreadPoolExecutor executor =\n+            new ScheduledThreadPoolExecutor(1, new NamedThreadFactory(\"SelfCheckWorker\", 1, true));\n+        executor.scheduleAtFixedRate(() -> {\n+            if (demotionMap.size() > 0) {\n+                try {\n+                    TransactionManagerHolder.get()\n+                        .commit(TransactionManagerHolder.get().begin(null, null, \"test\", 60000));\n+                    onSelfCheck(false);\n+                } catch (Exception e) {\n+                    onSelfCheck(true);\n+                }\n+            }\n+        }, 10, selfCheckPeriod, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private static synchronized void onSelfCheck(boolean isError) {\n+        if (!isError) {\n+            autoDemotionNum++;\n+            if (autoDemotionNum > selfCheckAllowTimes && demotionMap.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8628550c91f87cbc3251950040b58c5d0496bcd9"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEwNjY0NQ==", "bodyText": "received, processed,thx", "url": "https://github.com/seata/seata/pull/2253#discussion_r397106645", "createdAt": "2020-03-24T12:14:18Z", "author": {"login": "a364176773"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -190,4 +237,37 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n         }\n     }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startSelfCheck() {\n+        ScheduledThreadPoolExecutor executor =\n+            new ScheduledThreadPoolExecutor(1, new NamedThreadFactory(\"SelfCheckWorker\", 1, true));\n+        executor.scheduleAtFixedRate(() -> {\n+            if (demotionMap.size() > 0) {\n+                try {\n+                    TransactionManagerHolder.get()\n+                        .commit(TransactionManagerHolder.get().begin(null, null, \"test\", 60000));\n+                    onSelfCheck(false);\n+                } catch (Exception e) {\n+                    onSelfCheck(true);\n+                }\n+            }\n+        }, 10, selfCheckPeriod, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private static synchronized void onSelfCheck(boolean isError) {\n+        if (!isError) {\n+            autoDemotionNum++;\n+            if (autoDemotionNum > selfCheckAllowTimes && demotionMap.size() > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3MzY2Mg=="}, "originalCommit": {"oid": "8628550c91f87cbc3251950040b58c5d0496bcd9"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEwNjk4OQ==", "bodyText": "received, processed,thx", "url": "https://github.com/seata/seata/pull/2253#discussion_r397106989", "createdAt": "2020-03-24T12:14:55Z", "author": {"login": "a364176773"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -190,4 +237,37 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n         }\n     }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startSelfCheck() {\n+        ScheduledThreadPoolExecutor executor =\n+            new ScheduledThreadPoolExecutor(1, new NamedThreadFactory(\"SelfCheckWorker\", 1, true));\n+        executor.scheduleAtFixedRate(() -> {\n+            if (demotionMap.size() > 0) {\n+                try {\n+                    TransactionManagerHolder.get()\n+                        .commit(TransactionManagerHolder.get().begin(null, null, \"test\", 60000));\n+                    onSelfCheck(false);\n+                } catch (Exception e) {\n+                    onSelfCheck(true);\n+                }\n+            }\n+        }, 10, selfCheckPeriod, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private static synchronized void onSelfCheck(boolean isError) {\n+        if (!isError) {\n+            autoDemotionNum++;\n+            if (autoDemotionNum > selfCheckAllowTimes && demotionMap.size() > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3MzY2Mg=="}, "originalCommit": {"oid": "8628550c91f87cbc3251950040b58c5d0496bcd9"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzYyOTYzOnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactional.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoyMjoyOVrOF_cyoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoyMjoyOVrOF_cyoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NjMyMA==", "bodyText": "degrade", "url": "https://github.com/seata/seata/pull/2253#discussion_r402076320", "createdAt": "2020-04-02T06:22:29Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactional.java", "diffHunk": "@@ -70,8 +70,21 @@\n      */\n     String[] noRollbackForClassName() default {};\n \n+    /**\n+     * Automatically demoted ultimate value\n+     * @return\n+     */\n+    int demotionTimes() default 10;\n+\n+    /**\n+     * Automatically demoted switch\n+     * @return\n+     */\n+    boolean demotion() default false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad60f5333f42a4fc16f93f733f39eb8d8d4d52a2"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzYzNjk3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/constants/ConfigurationKeys.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoyNTowNFrOF_c2oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoyNTowNFrOF_c2oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NzM0NQ==", "bodyText": "how about seata-spring-boot-starter work\uff1f", "url": "https://github.com/seata/seata/pull/2253#discussion_r402077345", "createdAt": "2020-04-02T06:25:04Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/constants/ConfigurationKeys.java", "diffHunk": "@@ -419,4 +419,19 @@\n      * The constant SQL_PARSER_TYPE.\n      */\n     public static final String SQL_PARSER_TYPE = CLIENT_RM_PREFIX + \"sqlParserType\";\n+\n+    /**\n+     * The constant CLIENT_SELF_CHECK_PERIOD.\n+     */\n+    public static final String CLIENT_SELF_CHECK_PERIOD = CLIENT_TM_PREFIX + \"selfCheckPeriod\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad60f5333f42a4fc16f93f733f39eb8d8d4d52a2"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzY0NzM2OnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoyODo1NFrOF_c8Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoyODo1NFrOF_c8Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3ODgxNA==", "bodyText": "Variable is the name of the need to think about, self no actual meaning.", "url": "https://github.com/seata/seata/pull/2253#discussion_r402078814", "createdAt": "2020-04-02T06:28:54Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -58,29 +66,60 @@\n     private final GlobalLockTemplate<Object> globalLockTemplate = new GlobalLockTemplate<>();\n     private final FailureHandler failureHandler;\n     private volatile boolean disable;\n-\n+    private static int selfCheckPeriod;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad60f5333f42a4fc16f93f733f39eb8d8d4d52a2"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzY3MjIxOnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjozODo1MVrOF_dLWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMjoxNzozNlrOGAS8NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4MjY0OQ==", "bodyText": "split", "url": "https://github.com/seata/seata/pull/2253#discussion_r402082649", "createdAt": "2020-04-02T06:38:51Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -190,4 +238,35 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n         }\n     }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startSelfCheck() {\n+        executor.scheduleAtFixedRate(() -> {\n+            if (demotionMap.size() > 0) {\n+                try {\n+                    TransactionManagerHolder.get()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad60f5333f42a4fc16f93f733f39eb8d8d4d52a2"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4ODYyMA==", "bodyText": "split begin and commit, will be more clearly.", "url": "https://github.com/seata/seata/pull/2253#discussion_r402788620", "createdAt": "2020-04-03T07:32:43Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -190,4 +238,35 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n         }\n     }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startSelfCheck() {\n+        executor.scheduleAtFixedRate(() -> {\n+            if (demotionMap.size() > 0) {\n+                try {\n+                    TransactionManagerHolder.get()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4MjY0OQ=="}, "originalCommit": {"oid": "ad60f5333f42a4fc16f93f733f39eb8d8d4d52a2"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk2MzUwOA==", "bodyText": "split begin and commit, will be more clearly.\n\ni modified it", "url": "https://github.com/seata/seata/pull/2253#discussion_r402963508", "createdAt": "2020-04-03T12:17:36Z", "author": {"login": "a364176773"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -190,4 +238,35 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n         }\n     }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startSelfCheck() {\n+        executor.scheduleAtFixedRate(() -> {\n+            if (demotionMap.size() > 0) {\n+                try {\n+                    TransactionManagerHolder.get()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4MjY0OQ=="}, "originalCommit": {"oid": "ad60f5333f42a4fc16f93f733f39eb8d8d4d52a2"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzY3Njg0OnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjo0MDo0M1rOF_dOAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjo0MDo0M1rOF_dOAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4MzMzMA==", "bodyText": "always >=0", "url": "https://github.com/seata/seata/pull/2253#discussion_r402083330", "createdAt": "2020-04-02T06:40:43Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -190,4 +238,35 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n         }\n     }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startSelfCheck() {\n+        executor.scheduleAtFixedRate(() -> {\n+            if (demotionMap.size() > 0) {\n+                try {\n+                    TransactionManagerHolder.get()\n+                        .commit(TransactionManagerHolder.get().begin(null, null, \"test\", 60000));\n+                    onSelfCheck(false);\n+                } catch (Exception e) {\n+                    onSelfCheck(true);\n+                }\n+            }\n+        }, 10, selfCheckPeriod, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private static synchronized void onSelfCheck(boolean isError) {\n+        if (!isError) {\n+            autoDemotionNum++;\n+            if (autoDemotionNum > selfCheckAllowTimes) {\n+                autoDemotionNum = 0;\n+                demotionMap.clear();\n+            }\n+        } else {\n+            if (autoDemotionNum > 0) {\n+                autoDemotionNum--;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad60f5333f42a4fc16f93f733f39eb8d8d4d52a2"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODAzNzQ5OnYy", "diffSide": "RIGHT", "path": "script/config-center/config.txt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzowMTozNVrOGAHYgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzowMTozNVrOGAHYgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3NDE0NA==", "bodyText": "need to modify", "url": "https://github.com/seata/seata/pull/2253#discussion_r402774144", "createdAt": "2020-04-03T07:01:35Z", "author": {"login": "slievrly"}, "path": "script/config-center/config.txt", "diffHunk": "@@ -26,6 +26,9 @@ client.rm.sqlParserType=druid\n client.rm.reportSuccessEnable=false\n client.tm.commitRetryCount=5\n client.tm.rollbackRetryCount=5\n+client.tm.selfCheck=false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa9b1e24170383b6967dfdea6c6f621f8a12be8e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODA5ODY3OnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzoyMzowMVrOGAH-Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzoyMzowMVrOGAH-Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4Mzc2Mw==", "bodyText": "enableXXXX", "url": "https://github.com/seata/seata/pull/2253#discussion_r402783763", "createdAt": "2020-04-03T07:23:01Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -58,34 +65,52 @@\n     private final GlobalLockTemplate<Object> globalLockTemplate = new GlobalLockTemplate<>();\n     private final FailureHandler failureHandler;\n     private volatile boolean disable;\n+    private static int healthCheckPeriod;\n+    private static boolean healthCheck;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57b90bbfbb00ab8237043c08097d47170db27a7a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODExMzEyOnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzoyNzoyNVrOGAIG5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzoyNzoyNVrOGAIG5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4NjAyMw==", "bodyText": "ahead of this to determine the global disable.", "url": "https://github.com/seata/seata/pull/2253#discussion_r402786023", "createdAt": "2020-04-03T07:27:25Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -58,34 +65,52 @@\n     private final GlobalLockTemplate<Object> globalLockTemplate = new GlobalLockTemplate<>();\n     private final FailureHandler failureHandler;\n     private volatile boolean disable;\n+    private static int healthCheckPeriod;\n+    private static boolean healthCheck;\n+    private static int healthCheckDegradeAllowTimes;\n+    private static volatile Integer degradeNum = 0;\n+    private static ScheduledThreadPoolExecutor executor =\n+        new ScheduledThreadPoolExecutor(1, new NamedThreadFactory(\"healthCheckWorker\", 1, true));\n \n     /**\n      * Instantiates a new Global transactional interceptor.\n      *\n-     * @param failureHandler the failure handler\n+     * @param failureHandler\n+     *            the failure handler\n      */\n     public GlobalTransactionalInterceptor(FailureHandler failureHandler) {\n         this.failureHandler = failureHandler == null ? DEFAULT_FAIL_HANDLER : failureHandler;\n         this.disable = ConfigurationFactory.getInstance().getBoolean(ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n             DEFAULT_DISABLE_GLOBAL_TRANSACTION);\n+        this.healthCheck = ConfigurationFactory.getInstance().getBoolean(ConfigurationKeys.CLIENT_HEALTH_CHECK,\n+            DEFAULT_TM_HEALTH_CHECK);\n+        if (healthCheck) {\n+            this.healthCheckPeriod = ConfigurationFactory.getInstance()\n+                .getInt(ConfigurationKeys.CLIENT_HEALTH_CHECK_PERIOD, DEFAULT_TM_HEALTH_CHECK_PERIOD);\n+            this.healthCheckDegradeAllowTimes = ConfigurationFactory.getInstance().getInt(\n+                ConfigurationKeys.CLIENT_HEALTH_CHECK_DEGRADE_ALLOW_TIMES, DEFAULT_TM_HEALTH_CHECK_DEGRADE_ALLOW_TIMES);\n+            if (healthCheckPeriod > 0 && healthCheckDegradeAllowTimes > 0) {\n+                startSelfCheck();\n+            }\n+        }\n     }\n \n     @Override\n     public Object invoke(final MethodInvocation methodInvocation) throws Throwable {\n-        Class<?> targetClass = methodInvocation.getThis() != null ? AopUtils.getTargetClass(methodInvocation.getThis())\n-            : null;\n+        Class<?> targetClass =\n+            methodInvocation.getThis() != null ? AopUtils.getTargetClass(methodInvocation.getThis()) : null;\n         Method specificMethod = ClassUtils.getMostSpecificMethod(methodInvocation.getMethod(), targetClass);\n         final Method method = BridgeMethodResolver.findBridgedMethod(specificMethod);\n-\n         final GlobalTransactional globalTransactionalAnnotation = getAnnotation(method, GlobalTransactional.class);\n         final GlobalLock globalLockAnnotation = getAnnotation(method, GlobalLock.class);\n-        if (!disable && globalTransactionalAnnotation != null) {\n-            return handleGlobalTransaction(methodInvocation, globalTransactionalAnnotation);\n-        } else if (!disable && globalLockAnnotation != null) {\n-            return handleGlobalLock(methodInvocation);\n-        } else {\n-            return methodInvocation.proceed();\n+        if (!healthCheck || degradeNum < healthCheckDegradeAllowTimes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57b90bbfbb00ab8237043c08097d47170db27a7a"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODExODk2OnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzoyOToxM1rOGAIKeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzozMTowNlrOGAIN-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4NjkzNg==", "bodyText": "voliate", "url": "https://github.com/seata/seata/pull/2253#discussion_r402786936", "createdAt": "2020-04-03T07:29:13Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -188,6 +219,40 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n                 disable, event.getNewValue());\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n+        } else if (ConfigurationKeys.CLIENT_HEALTH_CHECK.equals(event.getDataId())) {\n+            healthCheck = Boolean.parseBoolean(event.getNewValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57b90bbfbb00ab8237043c08097d47170db27a7a"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4NzgzMw==", "bodyText": "if startup healthCheck=false  and now change to true ,how to process?", "url": "https://github.com/seata/seata/pull/2253#discussion_r402787833", "createdAt": "2020-04-03T07:31:06Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -188,6 +219,40 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n                 disable, event.getNewValue());\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n+        } else if (ConfigurationKeys.CLIENT_HEALTH_CHECK.equals(event.getDataId())) {\n+            healthCheck = Boolean.parseBoolean(event.getNewValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4NjkzNg=="}, "originalCommit": {"oid": "57b90bbfbb00ab8237043c08097d47170db27a7a"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODEzMzY4OnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzozNDowN1rOGAITog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzozNDowN1rOGAITog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4OTI4Mg==", "bodyText": "10 ms  too small startup delay.", "url": "https://github.com/seata/seata/pull/2253#discussion_r402789282", "createdAt": "2020-04-03T07:34:07Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -188,6 +219,40 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n                 disable, event.getNewValue());\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n+        } else if (ConfigurationKeys.CLIENT_HEALTH_CHECK.equals(event.getDataId())) {\n+            healthCheck = Boolean.parseBoolean(event.getNewValue());\n+            if (!healthCheck) {\n+                degradeNum = 0;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startSelfCheck() {\n+        executor.scheduleAtFixedRate(() -> {\n+            if (healthCheck) {\n+                try {\n+                    TransactionManagerHolder.get()\n+                        .commit(TransactionManagerHolder.get().begin(null, null, \"test\", 60000));\n+                    onSelfCheck(true);\n+                } catch (Exception e) {\n+                    onSelfCheck(false);\n+                }\n+            }\n+        }, 10, healthCheckPeriod, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57b90bbfbb00ab8237043c08097d47170db27a7a"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODE0MDYzOnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzozNjoyMVrOGAIX-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzozNjoyMVrOGAIX-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5MDM5Mw==", "bodyText": "Whether the executor needs to be stopped ?", "url": "https://github.com/seata/seata/pull/2253#discussion_r402790393", "createdAt": "2020-04-03T07:36:21Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -188,6 +219,40 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n                 disable, event.getNewValue());\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n+        } else if (ConfigurationKeys.CLIENT_HEALTH_CHECK.equals(event.getDataId())) {\n+            healthCheck = Boolean.parseBoolean(event.getNewValue());\n+            if (!healthCheck) {\n+                degradeNum = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57b90bbfbb00ab8237043c08097d47170db27a7a"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODE0NTgxOnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzozNzo0MlrOGAIa3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzozNzo0MlrOGAIa3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5MTEzNA==", "bodyText": "I think it should be here healthCheck   not !healthCheck", "url": "https://github.com/seata/seata/pull/2253#discussion_r402791134", "createdAt": "2020-04-03T07:37:42Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -155,11 +182,15 @@ public TransactionInfo getTransactionInfo() {\n                     failureHandler.onRollbackFailure(e.getTransaction(), e.getCause());\n                     throw e.getCause();\n                 case RollbackRetrying:\n+                    succeed = false;\n                     failureHandler.onRollbackRetrying(e.getTransaction(), e.getCause());\n                     throw e.getCause();\n                 default:\n                     throw new ShouldNeverHappenException(String.format(\"Unknown TransactionalExecutor.Code: %s\", code));\n-\n+            }\n+        } finally {\n+            if (!healthCheck) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57b90bbfbb00ab8237043c08097d47170db27a7a"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODc2ODQwOnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTozMjo0NlrOGAN1Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTo0OToxOFrOGAbS0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3OTg0Mw==", "bodyText": "volatile  multi-thread", "url": "https://github.com/seata/seata/pull/2253#discussion_r402879843", "createdAt": "2020-04-03T09:32:46Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -188,6 +221,46 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n                 disable, event.getNewValue());\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n+            if (!degradeCheck && disable != localDisable) {\n+                localDisable = disable;\n+            }\n+        } else if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n+            degradeCheck = Boolean.parseBoolean(event.getNewValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b1c84296b85b1b170c0fdaff82be4e4449ab154"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEwMDM2OA==", "bodyText": "volatile multi-thread\n\ni modified it", "url": "https://github.com/seata/seata/pull/2253#discussion_r403100368", "createdAt": "2020-04-03T15:49:18Z", "author": {"login": "a364176773"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -188,6 +221,46 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n                 disable, event.getNewValue());\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n+            if (!degradeCheck && disable != localDisable) {\n+                localDisable = disable;\n+            }\n+        } else if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n+            degradeCheck = Boolean.parseBoolean(event.getNewValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3OTg0Mw=="}, "originalCommit": {"oid": "9b1c84296b85b1b170c0fdaff82be4e4449ab154"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDg5NTIyOnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTozODoyMVrOGCfpeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTozODoyMVrOGCfpeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI2ODg1OA==", "bodyText": "starDegradeCheck", "url": "https://github.com/seata/seata/pull/2253#discussion_r405268858", "createdAt": "2020-04-08T05:38:21Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -188,6 +220,40 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n                 disable, event.getNewValue());\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n+        } else if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n+            degradeCheck = Boolean.parseBoolean(event.getNewValue());\n+            if (!degradeCheck) {\n+                degradeNum = 0;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startSelfCheck() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7af840aae7eadf03083b58fe3d8ae32594ba0d5"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDkwMTAzOnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTo0MToyM1rOGCftFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTo0MToyM1rOGCftFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI2OTc4MA==", "bodyText": "Can the applicationId of the business be get?\ntest->degradeCheck", "url": "https://github.com/seata/seata/pull/2253#discussion_r405269780", "createdAt": "2020-04-08T05:41:23Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -188,6 +220,40 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n                 disable, event.getNewValue());\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n+        } else if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n+            degradeCheck = Boolean.parseBoolean(event.getNewValue());\n+            if (!degradeCheck) {\n+                degradeNum = 0;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startSelfCheck() {\n+        executor.scheduleAtFixedRate(() -> {\n+            if (degradeCheck) {\n+                try {\n+                    String xid = TransactionManagerHolder.get().begin(null, null, \"test\", 60000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7af840aae7eadf03083b58fe3d8ae32594ba0d5"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDkwMjQ4OnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTo0MjoxMVrOGCft7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTo0MjoxMVrOGCft7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI2OTk5Ng==", "bodyText": "onDegradeCheck", "url": "https://github.com/seata/seata/pull/2253#discussion_r405269996", "createdAt": "2020-04-08T05:42:11Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -188,6 +220,40 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n                 disable, event.getNewValue());\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n+        } else if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n+            degradeCheck = Boolean.parseBoolean(event.getNewValue());\n+            if (!degradeCheck) {\n+                degradeNum = 0;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startSelfCheck() {\n+        executor.scheduleAtFixedRate(() -> {\n+            if (degradeCheck) {\n+                try {\n+                    String xid = TransactionManagerHolder.get().begin(null, null, \"test\", 60000);\n+                    TransactionManagerHolder.get().commit(xid);\n+                    onSelfCheck(true);\n+                } catch (Exception e) {\n+                    onSelfCheck(false);\n+                }\n+            }\n+        }, degradeCheckPeriod, degradeCheckPeriod, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private static synchronized void onSelfCheck(boolean succeed) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7af840aae7eadf03083b58fe3d8ae32594ba0d5"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDkwNTE4OnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTo0MzozN1rOGCfvoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODo0NjozMVrOGClKVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3MDQzMg==", "bodyText": "degradeNum will never be greater than degradeCheckAllowTimes, how to trigger a degrade\uff1f", "url": "https://github.com/seata/seata/pull/2253#discussion_r405270432", "createdAt": "2020-04-08T05:43:37Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -188,6 +220,40 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n                 disable, event.getNewValue());\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n+        } else if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n+            degradeCheck = Boolean.parseBoolean(event.getNewValue());\n+            if (!degradeCheck) {\n+                degradeNum = 0;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startSelfCheck() {\n+        executor.scheduleAtFixedRate(() -> {\n+            if (degradeCheck) {\n+                try {\n+                    String xid = TransactionManagerHolder.get().begin(null, null, \"test\", 60000);\n+                    TransactionManagerHolder.get().commit(xid);\n+                    onSelfCheck(true);\n+                } catch (Exception e) {\n+                    onSelfCheck(false);\n+                }\n+            }\n+        }, degradeCheckPeriod, degradeCheckPeriod, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private static synchronized void onSelfCheck(boolean succeed) {\n+        if (succeed) {\n+            if (degradeNum > 0) {\n+                degradeNum--;\n+            }\n+        } else {\n+            if (degradeNum < degradeCheckAllowTimes) {\n+                degradeNum++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7af840aae7eadf03083b58fe3d8ae32594ba0d5"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1OTE4OA==", "bodyText": "degradeNum will never be greater than degradeCheckAllowTimes, how to trigger a degrade\uff1f\n\nPTAL", "url": "https://github.com/seata/seata/pull/2253#discussion_r405359188", "createdAt": "2020-04-08T08:46:31Z", "author": {"login": "a364176773"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -188,6 +220,40 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n                 disable, event.getNewValue());\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n+        } else if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n+            degradeCheck = Boolean.parseBoolean(event.getNewValue());\n+            if (!degradeCheck) {\n+                degradeNum = 0;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startSelfCheck() {\n+        executor.scheduleAtFixedRate(() -> {\n+            if (degradeCheck) {\n+                try {\n+                    String xid = TransactionManagerHolder.get().begin(null, null, \"test\", 60000);\n+                    TransactionManagerHolder.get().commit(xid);\n+                    onSelfCheck(true);\n+                } catch (Exception e) {\n+                    onSelfCheck(false);\n+                }\n+            }\n+        }, degradeCheckPeriod, degradeCheckPeriod, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private static synchronized void onSelfCheck(boolean succeed) {\n+        if (succeed) {\n+            if (degradeNum > 0) {\n+                degradeNum--;\n+            }\n+        } else {\n+            if (degradeNum < degradeCheckAllowTimes) {\n+                degradeNum++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3MDQzMg=="}, "originalCommit": {"oid": "f7af840aae7eadf03083b58fe3d8ae32594ba0d5"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDkwODI3OnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTo0NTowM1rOGCfxaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTo0NTowM1rOGCfxaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3MDg4OQ==", "bodyText": "I think the logic here is incorrect.", "url": "https://github.com/seata/seata/pull/2253#discussion_r405270889", "createdAt": "2020-04-08T05:45:03Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -144,6 +171,7 @@ public TransactionInfo getTransactionInfo() {\n             TransactionalExecutor.Code code = e.getCode();\n             switch (code) {\n                 case RollbackDone:\n+                    succeed = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7af840aae7eadf03083b58fe3d8ae32594ba0d5"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzM5OTY0OnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMjo0MjoxNlrOGQYt2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMzozMzoxMFrOGQZWcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgzNTM1NA==", "bodyText": "reachNum >= degradeCheckAllowTimes", "url": "https://github.com/seata/seata/pull/2253#discussion_r419835354", "createdAt": "2020-05-05T02:42:16Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -190,6 +223,56 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n                 disable, event.getNewValue());\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n+        } else if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n+            degradeCheck = Boolean.parseBoolean(event.getNewValue());\n+            if (!degradeCheck) {\n+                degradeNum = 0;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startDegradeCheck() {\n+        executor.scheduleAtFixedRate(() -> {\n+            if (degradeCheck) {\n+                try {\n+                    String xid = TransactionManagerHolder.get().begin(null, null, \"degradeCheck\", 60000);\n+                    TransactionManagerHolder.get().commit(xid);\n+                    onDegradeCheck(true);\n+                } catch (Exception e) {\n+                    onDegradeCheck(false);\n+                }\n+            }\n+        }, degradeCheckPeriod, degradeCheckPeriod, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private static synchronized void onDegradeCheck(boolean succeed) {\n+        if (succeed) {\n+            if (degradeNum == degradeCheckAllowTimes) {\n+                reachNum++;\n+                if (reachNum >= degradeNum) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "419f8eec0572971c4bd4f4f1cdf66094b8c34f7b"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg0NTc0NA==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/2253#discussion_r419845744", "createdAt": "2020-05-05T03:33:10Z", "author": {"login": "a364176773"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -190,6 +223,56 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n                 disable, event.getNewValue());\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n+        } else if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n+            degradeCheck = Boolean.parseBoolean(event.getNewValue());\n+            if (!degradeCheck) {\n+                degradeNum = 0;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startDegradeCheck() {\n+        executor.scheduleAtFixedRate(() -> {\n+            if (degradeCheck) {\n+                try {\n+                    String xid = TransactionManagerHolder.get().begin(null, null, \"degradeCheck\", 60000);\n+                    TransactionManagerHolder.get().commit(xid);\n+                    onDegradeCheck(true);\n+                } catch (Exception e) {\n+                    onDegradeCheck(false);\n+                }\n+            }\n+        }, degradeCheckPeriod, degradeCheckPeriod, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private static synchronized void onDegradeCheck(boolean succeed) {\n+        if (succeed) {\n+            if (degradeNum == degradeCheckAllowTimes) {\n+                reachNum++;\n+                if (reachNum >= degradeNum) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgzNTM1NA=="}, "originalCommit": {"oid": "419f8eec0572971c4bd4f4f1cdf66094b8c34f7b"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzQwNDQ3OnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMjo0NToyNFrOGQYwVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMzozMzo0NFrOGQZW9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgzNTk4OQ==", "bodyText": "this will trigger the upgrade.", "url": "https://github.com/seata/seata/pull/2253#discussion_r419835989", "createdAt": "2020-05-05T02:45:24Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -190,6 +223,56 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n                 disable, event.getNewValue());\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n+        } else if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n+            degradeCheck = Boolean.parseBoolean(event.getNewValue());\n+            if (!degradeCheck) {\n+                degradeNum = 0;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startDegradeCheck() {\n+        executor.scheduleAtFixedRate(() -> {\n+            if (degradeCheck) {\n+                try {\n+                    String xid = TransactionManagerHolder.get().begin(null, null, \"degradeCheck\", 60000);\n+                    TransactionManagerHolder.get().commit(xid);\n+                    onDegradeCheck(true);\n+                } catch (Exception e) {\n+                    onDegradeCheck(false);\n+                }\n+            }\n+        }, degradeCheckPeriod, degradeCheckPeriod, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private static synchronized void onDegradeCheck(boolean succeed) {\n+        if (succeed) {\n+            if (degradeNum == degradeCheckAllowTimes) {\n+                reachNum++;\n+                if (reachNum >= degradeNum) {\n+                    reachNum = 0;\n+                    degradeNum = 0;\n+                    if (LOGGER.isInfoEnabled()) {\n+                        LOGGER.info(\"the current global transaction has been restored\");\n+                    }\n+                }\n+            } else if (degradeNum != 0) {\n+                degradeNum = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "419f8eec0572971c4bd4f4f1cdf66094b8c34f7b"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg0NTg3OQ==", "bodyText": "\u53ea\u6709\u5f53\u524d\u6ca1\u88ab\u964d\u7ea7\u624d\u4f1a\u8fdb\u8fd9\u5757,degradeNum == degradeCheckAllowTimes\u4e0d\u6210\u7acb\u65f6.", "url": "https://github.com/seata/seata/pull/2253#discussion_r419845879", "createdAt": "2020-05-05T03:33:44Z", "author": {"login": "a364176773"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -190,6 +223,56 @@ public void onChangeEvent(ConfigurationChangeEvent event) {\n             LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n                 disable, event.getNewValue());\n             disable = Boolean.parseBoolean(event.getNewValue().trim());\n+        } else if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n+            degradeCheck = Boolean.parseBoolean(event.getNewValue());\n+            if (!degradeCheck) {\n+                degradeNum = 0;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startDegradeCheck() {\n+        executor.scheduleAtFixedRate(() -> {\n+            if (degradeCheck) {\n+                try {\n+                    String xid = TransactionManagerHolder.get().begin(null, null, \"degradeCheck\", 60000);\n+                    TransactionManagerHolder.get().commit(xid);\n+                    onDegradeCheck(true);\n+                } catch (Exception e) {\n+                    onDegradeCheck(false);\n+                }\n+            }\n+        }, degradeCheckPeriod, degradeCheckPeriod, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private static synchronized void onDegradeCheck(boolean succeed) {\n+        if (succeed) {\n+            if (degradeNum == degradeCheckAllowTimes) {\n+                reachNum++;\n+                if (reachNum >= degradeNum) {\n+                    reachNum = 0;\n+                    degradeNum = 0;\n+                    if (LOGGER.isInfoEnabled()) {\n+                        LOGGER.info(\"the current global transaction has been restored\");\n+                    }\n+                }\n+            } else if (degradeNum != 0) {\n+                degradeNum = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgzNTk4OQ=="}, "originalCommit": {"oid": "419f8eec0572971c4bd4f4f1cdf66094b8c34f7b"}, "originalPosition": 172}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1624, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}