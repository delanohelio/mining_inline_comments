{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMTM3Njg0", "number": 3323, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMzoyNzowOVrOE_JiWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMzoyNzowOVrOE_JiWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjUxOTk1OnYy", "diffSide": "RIGHT", "path": "test/src/test/java/io/seata/saga/engine/db/StateMachineDBExceptionTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMzoyNzowOVrOH8sdgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMjo1NzozN1rOIBEpeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQwNTA1OQ==", "bodyText": "How to ensure that this unit test is executed last, otherwise it will cause other unit tests to fail", "url": "https://github.com/seata/seata/pull/3323#discussion_r533405059", "createdAt": "2020-12-01T13:27:09Z", "author": {"login": "long187"}, "path": "test/src/test/java/io/seata/saga/engine/db/StateMachineDBExceptionTests.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.saga.engine.db;\n+\n+import io.seata.common.exception.StoreException;\n+import io.seata.core.context.RootContext;\n+import io.seata.saga.engine.StateMachineEngine;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+\n+import java.util.HashMap;\n+\n+/**\n+ * State machine tests with db store exception\n+ *\n+ * @author anselleeyy\n+ */\n+public class StateMachineDBExceptionTests extends AbstractServerTest {\n+\n+    private static StateMachineEngine stateMachineEngine;\n+    private static JdbcTemplate       jdbcTemplate;\n+\n+    @BeforeAll\n+    public static void initApplicationContext() throws InterruptedException {\n+\n+        startSeataServer();\n+\n+        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"classpath:saga/spring/statemachine_engine_db_test.xml\");\n+        stateMachineEngine = applicationContext.getBean(\"stateMachineEngine\", StateMachineEngine.class);\n+        jdbcTemplate = applicationContext.getBean(JdbcTemplate.class);\n+    }\n+\n+    @Test\n+    public void testStateMachineRecordFailed() {\n+\n+        // drop table to mock record exception\n+        jdbcTemplate.execute(\"drop table seata_state_machine_inst\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56b0d42b5b6cddea7628cd8e3214ac8ae322219b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk5NTY0Mg==", "bodyText": "fixed, use duplicate key exception instead", "url": "https://github.com/seata/seata/pull/3323#discussion_r537995642", "createdAt": "2020-12-08T02:57:37Z", "author": {"login": "anselleeyy"}, "path": "test/src/test/java/io/seata/saga/engine/db/StateMachineDBExceptionTests.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.saga.engine.db;\n+\n+import io.seata.common.exception.StoreException;\n+import io.seata.core.context.RootContext;\n+import io.seata.saga.engine.StateMachineEngine;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+\n+import java.util.HashMap;\n+\n+/**\n+ * State machine tests with db store exception\n+ *\n+ * @author anselleeyy\n+ */\n+public class StateMachineDBExceptionTests extends AbstractServerTest {\n+\n+    private static StateMachineEngine stateMachineEngine;\n+    private static JdbcTemplate       jdbcTemplate;\n+\n+    @BeforeAll\n+    public static void initApplicationContext() throws InterruptedException {\n+\n+        startSeataServer();\n+\n+        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"classpath:saga/spring/statemachine_engine_db_test.xml\");\n+        stateMachineEngine = applicationContext.getBean(\"stateMachineEngine\", StateMachineEngine.class);\n+        jdbcTemplate = applicationContext.getBean(JdbcTemplate.class);\n+    }\n+\n+    @Test\n+    public void testStateMachineRecordFailed() {\n+\n+        // drop table to mock record exception\n+        jdbcTemplate.execute(\"drop table seata_state_machine_inst\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQwNTA1OQ=="}, "originalCommit": {"oid": "56b0d42b5b6cddea7628cd8e3214ac8ae322219b"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1361, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}