{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2OTE0Mjgz", "number": 2817, "title": "Feature: Saga StateMachine Engine and Designer support Groovy Script Task", "bodyText": "\u2160. Describe what this PR did\nFeature: Saga StateMachine Engine and Designer support Groovy Script Task.\nScriptTask is used to handle complex parameters,\nStateMachine Engine will not record state logs while ScriptTask executing, and its result will  not be used for transaction consistency judgment.\n\u2163. Describe how to verify it\njson definition:\n       \"ScriptState\": {\n            \"Type\": \"ScriptTask\",\n            \"ScriptType\": \"groovy\",\n            \"ScriptContent\": \"if(throwException){ throw new RuntimeException(\\\"test\\\") } else { 'hello ' + inputA }\",\n            \"Input\": [\n                {\n                    \"inputA\": \"$.[a]\",\n                    \"throwException\": \"$.[scriptThrowException]\"\n                }\n            ],\n            \"Output\": {\n                \"scriptStateResult\": \"$.#root\"\n            },\n            \"Catch\": [\n                {\n                    \"Exceptions\": [\n                        \"java.lang.Throwable\"\n                    ],\n                    \"Next\": \"Fail\"\n                }\n            ],\n            \"Next\": \"ChoiceState\"\n        }\n\ndesigner screenshot:\n\nUnit test see:\nStateMachineTests#testSimpleScriptTaskStateMachine\nStateMachineDBMockServerTests#testSimpleScriptTaskStateMachineWithLayout\nseata/test/src/test/resources/saga/statelang/simple_statelang_with_script.json\nseata/test/src/test/resources/saga/statelang/designer_simple_statelang_with_script.json", "createdAt": "2020-06-19T06:20:39Z", "url": "https://github.com/seata/seata/pull/2817", "merged": true, "mergeCommit": {"oid": "4b94ac4f8692dd514259f5ab1e76f06e33638414"}, "closed": true, "closedAt": "2020-07-01T07:53:04Z", "author": {"login": "long187"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsstfwAH2gAyNDM2OTE0MjgzOjg4YTQ2ZGEyNTkyZDc4MzgxMzExZjFiZjlhYTdiMjZmNzhhY2Y5Mjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwlc0qgFqTQ0MDYyODk1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "88a46da2592d78381311f1bf9aa7b26f78acf929", "author": {"user": {"login": "long187", "name": "leo"}}, "url": "https://github.com/seata/seata/commit/88a46da2592d78381311f1bf9aa7b26f78acf929", "committedDate": "2020-06-19T06:04:16Z", "message": "Saga StateMachine Engine and Designer support Groovy Task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d74cf95662fa0796af36bdded8fed4053c91211", "author": {"user": {"login": "long187", "name": "leo"}}, "url": "https://github.com/seata/seata/commit/1d74cf95662fa0796af36bdded8fed4053c91211", "committedDate": "2020-06-19T07:06:34Z", "message": "fix licence"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "502cb1c8f98c074dd52c710cd6b054ad7875e283", "author": {"user": {"login": "long187", "name": "leo"}}, "url": "https://github.com/seata/seata/commit/502cb1c8f98c074dd52c710cd6b054ad7875e283", "committedDate": "2020-06-19T07:29:24Z", "message": "fix error message"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NDg5MjM0", "url": "https://github.com/seata/seata/pull/2817#pullrequestreview-434489234", "createdAt": "2020-06-21T10:30:16Z", "commit": {"oid": "502cb1c8f98c074dd52c710cd6b054ad7875e283"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "310a1239371414f55bed9cecee6f5cef9237f717", "author": {"user": {"login": "jsbxyyx", "name": "jsbxyyx"}}, "url": "https://github.com/seata/seata/commit/310a1239371414f55bed9cecee6f5cef9237f717", "committedDate": "2020-06-23T04:56:10Z", "message": "Merge branch 'develop' into saga_support_script_task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c70bfba0bcbf8c6b9f2c52cc62e7536f6170585", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/7c70bfba0bcbf8c6b9f2c52cc62e7536f6170585", "committedDate": "2020-06-24T07:16:52Z", "message": "Merge branch 'develop' into saga_support_script_task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83e5b505cb937ffe5381f5c9319e89b5fd7c2412", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/83e5b505cb937ffe5381f5c9319e89b5fd7c2412", "committedDate": "2020-06-30T13:04:01Z", "message": "Merge branch 'develop' into saga_support_script_task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "377872b813cda3c22ba64be7d3a89a8a90bce903", "author": {"user": {"login": "long187", "name": "leo"}}, "url": "https://github.com/seata/seata/commit/377872b813cda3c22ba64be7d3a89a8a90bce903", "committedDate": "2020-07-01T07:28:13Z", "message": "fix NPE potential risks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNjE2NjUy", "url": "https://github.com/seata/seata/pull/2817#pullrequestreview-440616652", "createdAt": "2020-07-01T07:34:08Z", "commit": {"oid": "83e5b505cb937ffe5381f5c9319e89b5fd7c2412"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzozNDowOFrOGraR_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzozNDowOFrOGraR_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE3MjU0MQ==", "bodyText": "Will this script be parsed every time\uff1f", "url": "https://github.com/seata/seata/pull/2817#discussion_r448172541", "createdAt": "2020-07-01T07:34:08Z", "author": {"login": "wangliang181230"}, "path": "saga/seata-saga-engine/src/main/java/io/seata/saga/engine/pcext/handlers/ScriptTaskStateHandler.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.saga.engine.pcext.handlers;\n+\n+import io.seata.common.exception.FrameworkErrorCode;\n+import io.seata.saga.engine.StateMachineConfig;\n+import io.seata.saga.engine.exception.EngineExecutionException;\n+import io.seata.saga.engine.pcext.InterceptableStateHandler;\n+import io.seata.saga.engine.pcext.StateHandler;\n+import io.seata.saga.engine.pcext.StateHandlerInterceptor;\n+import io.seata.saga.engine.pcext.StateInstruction;\n+import io.seata.saga.engine.pcext.utils.EngineUtils;\n+import io.seata.saga.proctrl.HierarchicalProcessContext;\n+import io.seata.saga.proctrl.ProcessContext;\n+import io.seata.saga.statelang.domain.DomainConstants;\n+import io.seata.saga.statelang.domain.impl.ScriptTaskStateImpl;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.script.Bindings;\n+import javax.script.ScriptEngine;\n+import javax.script.ScriptEngineManager;\n+import javax.script.SimpleBindings;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * ScriptTaskState Handler\n+ *\n+ * @author lorne.cl\n+ */\n+public class ScriptTaskStateHandler implements StateHandler, InterceptableStateHandler {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ScriptTaskStateHandler.class);\n+\n+    private List<StateHandlerInterceptor> interceptors = new ArrayList<>();\n+\n+    private volatile Map<String, ScriptEngine> scriptEngineCache = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public void process(ProcessContext context) throws EngineExecutionException {\n+\n+        StateInstruction instruction = context.getInstruction(StateInstruction.class);\n+        ScriptTaskStateImpl state = (ScriptTaskStateImpl) instruction.getState(context);\n+\n+        String scriptType = state.getScriptType();\n+        String scriptContent = state.getScriptContent();\n+\n+        Object result;\n+        try {\n+\n+            List<Object> input = (List<Object>) context.getVariable(DomainConstants.VAR_NAME_INPUT_PARAMS);\n+\n+            if (LOGGER.isDebugEnabled()) {\n+                LOGGER.debug(\">>>>>>>>>>>>>>>>>>>>>> Start to execute ScriptTaskState[{}], ScriptType[{}], Input:{}\",\n+                        state.getName(), scriptType, input);\n+            }\n+\n+            StateMachineConfig stateMachineConfig = (StateMachineConfig) context.getVariable(\n+                    DomainConstants.VAR_NAME_STATEMACHINE_CONFIG);\n+\n+            ScriptEngine scriptEngine = getScriptEngineFromCache(scriptType, stateMachineConfig.getScriptEngineManager());\n+            if (scriptEngine == null) {\n+                throw new EngineExecutionException(\"No such ScriptType[\" + scriptType + \"]\",\n+                        FrameworkErrorCode.ObjectNotExists);\n+            }\n+\n+            Bindings bindings = null;\n+            Map<String, Object> inputMap = null;\n+            if (input != null && input.size() > 0 && input.get(0) instanceof Map) {\n+                inputMap = (Map<String, Object>) input.get(0);\n+            }\n+            List<Object> inputExps = state.getInput();\n+            if (inputExps != null && inputExps.size() > 0 && inputExps.get(0) instanceof Map) {\n+                Map<String, Object> inputExpMap = (Map<String, Object>) inputExps.get(0);\n+                if (inputExpMap.size() > 0) {\n+                    bindings = new SimpleBindings();\n+                    for (String property : inputExpMap.keySet()) {\n+                        if (inputMap.containsKey(property)) {\n+                            bindings.put(property, inputMap.get(property));\n+                        }\n+                        else {\n+                            //if we do not bind the null value property, groovy will throw MissingPropertyException\n+                            bindings.put(property, null);\n+                        }\n+                    }\n+                }\n+            }\n+            if (bindings != null) {\n+                result = scriptEngine.eval(scriptContent, bindings);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83e5b505cb937ffe5381f5c9319e89b5fd7c2412"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNjI4OTU5", "url": "https://github.com/seata/seata/pull/2817#pullrequestreview-440628959", "createdAt": "2020-07-01T07:52:25Z", "commit": {"oid": "377872b813cda3c22ba64be7d3a89a8a90bce903"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3781, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}