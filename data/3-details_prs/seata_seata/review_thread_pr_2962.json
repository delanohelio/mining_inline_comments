{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYxOTE1Njg3", "number": 2962, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNTozNToyOVrOEUeTAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwNzo1NjoxNFrOE2brFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTAzMzYzOnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/LockRetryController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNTozNToyOVrOG6srVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNTo1Mjo1OFrOG6s7Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwMjU4MQ==", "bodyText": "\u6211\u89c9\u5f97\u52a0\u4e0aelse retryInternal=ConfigurationFactory.getInstance().getInt(ConfigurationKeys.CLIENT_LOCK_RETRY_INTERVAL, DEFAULT_CLIENT_LOCK_RETRY_INTERVAL);\n\u53ef\u4ee5\u5728\u6709\u672c\u5730\u7684\u9501\u91cd\u8bd5\u65f6\uff0c\u65e0\u5e8f\u518d\u53bb\u52a0\u8f7d\u914d\u7f6e\u4e2d\u5fc3\u4e2d\u7684\u914d\u7f6e", "url": "https://github.com/seata/seata/pull/2962#discussion_r464202581", "createdAt": "2020-08-03T05:35:29Z", "author": {"login": "a364176773"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/LockRetryController.java", "diffHunk": "@@ -32,13 +34,31 @@\n     private static int LOCK_RETRY_TIMES =\n         ConfigurationFactory.getInstance().getInt(ConfigurationKeys.CLIENT_LOCK_RETRY_TIMES, DEFAULT_CLIENT_LOCK_RETRY_TIMES);\n \n-    private int lockRetryInternal = LOCK_RETRY_INTERNAL;\n-    private int lockRetryTimes = LOCK_RETRY_TIMES;\n+    private int lockRetryInternal;\n+    private int lockRetryTimes;\n \n     /**\n      * Instantiates a new Lock retry controller.\n      */\n     public LockRetryController() {\n+        int retryInternal = LOCK_RETRY_INTERNAL;\n+        int retryTimes = LOCK_RETRY_TIMES;\n+\n+        GlobalLockConfig config = GlobalLockConfigHolder.getCurrentGlobalLockConfig();\n+        if (config != null) {\n+            int configInternal = config.getLockRetryInternal();\n+            if (configInternal > 0) {\n+                retryInternal = configInternal;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7fe1537c052e486fb1dccf0a0cb9f2db6407ec"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwNjY3OQ==", "bodyText": "\u6709\u9053\u7406\uff0c\u6211\u4f18\u5316\u4e00\u4e0b", "url": "https://github.com/seata/seata/pull/2962#discussion_r464206679", "createdAt": "2020-08-03T05:52:58Z", "author": {"login": "selfishlover"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/LockRetryController.java", "diffHunk": "@@ -32,13 +34,31 @@\n     private static int LOCK_RETRY_TIMES =\n         ConfigurationFactory.getInstance().getInt(ConfigurationKeys.CLIENT_LOCK_RETRY_TIMES, DEFAULT_CLIENT_LOCK_RETRY_TIMES);\n \n-    private int lockRetryInternal = LOCK_RETRY_INTERNAL;\n-    private int lockRetryTimes = LOCK_RETRY_TIMES;\n+    private int lockRetryInternal;\n+    private int lockRetryTimes;\n \n     /**\n      * Instantiates a new Lock retry controller.\n      */\n     public LockRetryController() {\n+        int retryInternal = LOCK_RETRY_INTERNAL;\n+        int retryTimes = LOCK_RETRY_TIMES;\n+\n+        GlobalLockConfig config = GlobalLockConfigHolder.getCurrentGlobalLockConfig();\n+        if (config != null) {\n+            int configInternal = config.getLockRetryInternal();\n+            if (configInternal > 0) {\n+                retryInternal = configInternal;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwMjU4MQ=="}, "originalCommit": {"oid": "0a7fe1537c052e486fb1dccf0a0cb9f2db6407ec"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTAzNDY3OnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/LockRetryController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNTozNjowNlrOG6sr6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNTozNjowNlrOG6sr6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwMjczMA==", "bodyText": "\u540c\u4e0a\uff0c\u6539\u52a8\u540eLOCK_RETRY_TIMES\u548cLOCK_RETRY_TIMES \u4f3c\u4e4e\u5c31\u53ef\u4ee5\u5220\u9664", "url": "https://github.com/seata/seata/pull/2962#discussion_r464202730", "createdAt": "2020-08-03T05:36:06Z", "author": {"login": "a364176773"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/LockRetryController.java", "diffHunk": "@@ -32,13 +34,31 @@\n     private static int LOCK_RETRY_TIMES =\n         ConfigurationFactory.getInstance().getInt(ConfigurationKeys.CLIENT_LOCK_RETRY_TIMES, DEFAULT_CLIENT_LOCK_RETRY_TIMES);\n \n-    private int lockRetryInternal = LOCK_RETRY_INTERNAL;\n-    private int lockRetryTimes = LOCK_RETRY_TIMES;\n+    private int lockRetryInternal;\n+    private int lockRetryTimes;\n \n     /**\n      * Instantiates a new Lock retry controller.\n      */\n     public LockRetryController() {\n+        int retryInternal = LOCK_RETRY_INTERNAL;\n+        int retryTimes = LOCK_RETRY_TIMES;\n+\n+        GlobalLockConfig config = GlobalLockConfigHolder.getCurrentGlobalLockConfig();\n+        if (config != null) {\n+            int configInternal = config.getLockRetryInternal();\n+            if (configInternal > 0) {\n+                retryInternal = configInternal;\n+            }\n+\n+            int configTimes = config.getLockRetryTimes();\n+            if (configTimes >= 0) {\n+                retryTimes = configTimes;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a7fe1537c052e486fb1dccf0a0cb9f2db6407ec"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTYzMjQ4OnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMzo0NDozNFrOHRva7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzowMjo0N1rOHRzjsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM2NDc4Mg==", "bodyText": "Why remove the try catch?", "url": "https://github.com/seata/seata/pull/2962#discussion_r488364782", "createdAt": "2020-09-15T03:44:34Z", "author": {"login": "l81893521"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -147,21 +149,27 @@ public Object invoke(final MethodInvocation methodInvocation) throws Throwable {\n                 if (globalTransactionalAnnotation != null) {\n                     return handleGlobalTransaction(methodInvocation, globalTransactionalAnnotation);\n                 } else if (globalLockAnnotation != null) {\n-                    return handleGlobalLock(methodInvocation);\n+                    return handleGlobalLock(methodInvocation, globalLockAnnotation);\n                 }\n             }\n         }\n         return methodInvocation.proceed();\n     }\n \n-    private Object handleGlobalLock(final MethodInvocation methodInvocation) throws Exception {\n-        return globalLockTemplate.execute(() -> {\n-            try {\n+    private Object handleGlobalLock(final MethodInvocation methodInvocation,\n+        final GlobalLock globalLockAnno) throws Throwable {\n+        return globalLockTemplate.execute(new GlobalLockExecutor() {\n+            @Override\n+            public Object execute() throws Throwable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "383b7c9b107d1d89d683c4f5cdf9cbce59847ef0"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM3MjU3MQ==", "bodyText": "Because the old try-catch in fact do nothing, just to wrap a throwable as a RuntimeException, so that it can match the outer method signature(throws Exception~). Here i simplify the method signature(throws Throwable), thus it can save the catch and wrap process. Just like its \"brother\" method(handleGlobalTransaction).", "url": "https://github.com/seata/seata/pull/2962#discussion_r488372571", "createdAt": "2020-09-15T04:15:54Z", "author": {"login": "selfishlover"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -147,21 +149,27 @@ public Object invoke(final MethodInvocation methodInvocation) throws Throwable {\n                 if (globalTransactionalAnnotation != null) {\n                     return handleGlobalTransaction(methodInvocation, globalTransactionalAnnotation);\n                 } else if (globalLockAnnotation != null) {\n-                    return handleGlobalLock(methodInvocation);\n+                    return handleGlobalLock(methodInvocation, globalLockAnnotation);\n                 }\n             }\n         }\n         return methodInvocation.proceed();\n     }\n \n-    private Object handleGlobalLock(final MethodInvocation methodInvocation) throws Exception {\n-        return globalLockTemplate.execute(() -> {\n-            try {\n+    private Object handleGlobalLock(final MethodInvocation methodInvocation,\n+        final GlobalLock globalLockAnno) throws Throwable {\n+        return globalLockTemplate.execute(new GlobalLockExecutor() {\n+            @Override\n+            public Object execute() throws Throwable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM2NDc4Mg=="}, "originalCommit": {"oid": "383b7c9b107d1d89d683c4f5cdf9cbce59847ef0"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQzMjU2MA==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/2962#discussion_r488432560", "createdAt": "2020-09-15T07:02:47Z", "author": {"login": "l81893521"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -147,21 +149,27 @@ public Object invoke(final MethodInvocation methodInvocation) throws Throwable {\n                 if (globalTransactionalAnnotation != null) {\n                     return handleGlobalTransaction(methodInvocation, globalTransactionalAnnotation);\n                 } else if (globalLockAnnotation != null) {\n-                    return handleGlobalLock(methodInvocation);\n+                    return handleGlobalLock(methodInvocation, globalLockAnnotation);\n                 }\n             }\n         }\n         return methodInvocation.proceed();\n     }\n \n-    private Object handleGlobalLock(final MethodInvocation methodInvocation) throws Exception {\n-        return globalLockTemplate.execute(() -> {\n-            try {\n+    private Object handleGlobalLock(final MethodInvocation methodInvocation,\n+        final GlobalLock globalLockAnno) throws Throwable {\n+        return globalLockTemplate.execute(new GlobalLockExecutor() {\n+            @Override\n+            public Object execute() throws Throwable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM2NDc4Mg=="}, "originalCommit": {"oid": "383b7c9b107d1d89d683c4f5cdf9cbce59847ef0"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjEwNzI1OnYy", "diffSide": "LEFT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/LockRetryController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzoxMDoyOFrOHRzzBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzoxMDoyOFrOHRzzBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQzNjQ4Ng==", "bodyText": "Keep this constants. Returns it in the get methods, if there is no customized config.", "url": "https://github.com/seata/seata/pull/2962#discussion_r488436486", "createdAt": "2020-09-15T07:10:28Z", "author": {"login": "wangliang181230"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/LockRetryController.java", "diffHunk": "@@ -27,18 +30,17 @@\n  * @author sharajava\n  */\n public class LockRetryController {\n-    private static int LOCK_RETRY_INTERNAL =\n-        ConfigurationFactory.getInstance().getInt(ConfigurationKeys.CLIENT_LOCK_RETRY_INTERVAL, DEFAULT_CLIENT_LOCK_RETRY_INTERVAL);\n-    private static int LOCK_RETRY_TIMES =\n-        ConfigurationFactory.getInstance().getInt(ConfigurationKeys.CLIENT_LOCK_RETRY_TIMES, DEFAULT_CLIENT_LOCK_RETRY_TIMES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "289b6d7b29a0ae59c763915f1ebf58d3ca8ef212"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjExNjUyOnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/LockRetryController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzoxMzowOVrOHRz4kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzoxMzowOVrOHRz4kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQzNzkwNw==", "bodyText": "Recovery LOCK_RETRY_INTERNAL, and returns LOCK_RETRY_INTERNAL.", "url": "https://github.com/seata/seata/pull/2962#discussion_r488437907", "createdAt": "2020-09-15T07:13:09Z", "author": {"login": "wangliang181230"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/LockRetryController.java", "diffHunk": "@@ -57,4 +59,32 @@ public void sleep(Exception e) throws LockWaitTimeoutException {\n         } catch (InterruptedException ignore) {\n         }\n     }\n+\n+    private int getLockRetryInternal() {\n+        // get customized config first\n+        GlobalLockConfig config = GlobalLockConfigHolder.getCurrentGlobalLockConfig();\n+        if (config != null) {\n+            int configInternal = config.getLockRetryInternal();\n+            if (configInternal > 0) {\n+                return configInternal;\n+            }\n+        }\n+        // if there is no customized config, use global config instead\n+        Configuration configuration = ConfigurationFactory.getInstance();\n+        return configuration.getInt(ConfigurationKeys.CLIENT_LOCK_RETRY_INTERVAL, DEFAULT_CLIENT_LOCK_RETRY_INTERVAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "289b6d7b29a0ae59c763915f1ebf58d3ca8ef212"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjExNzI1OnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/LockRetryController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzoxMzoyM1rOHRz5GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzoxMzoyM1rOHRz5GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQzODA0MA==", "bodyText": "Recovery LOCK_RETRY_TIMES, and returns LOCK_RETRY_TIMES.", "url": "https://github.com/seata/seata/pull/2962#discussion_r488438040", "createdAt": "2020-09-15T07:13:23Z", "author": {"login": "wangliang181230"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/LockRetryController.java", "diffHunk": "@@ -57,4 +59,32 @@ public void sleep(Exception e) throws LockWaitTimeoutException {\n         } catch (InterruptedException ignore) {\n         }\n     }\n+\n+    private int getLockRetryInternal() {\n+        // get customized config first\n+        GlobalLockConfig config = GlobalLockConfigHolder.getCurrentGlobalLockConfig();\n+        if (config != null) {\n+            int configInternal = config.getLockRetryInternal();\n+            if (configInternal > 0) {\n+                return configInternal;\n+            }\n+        }\n+        // if there is no customized config, use global config instead\n+        Configuration configuration = ConfigurationFactory.getInstance();\n+        return configuration.getInt(ConfigurationKeys.CLIENT_LOCK_RETRY_INTERVAL, DEFAULT_CLIENT_LOCK_RETRY_INTERVAL);\n+    }\n+\n+    private int getLockRetryTimes() {\n+        // get customized config first\n+        GlobalLockConfig config = GlobalLockConfigHolder.getCurrentGlobalLockConfig();\n+        if (config != null) {\n+            int configTimes = config.getLockRetryTimes();\n+            if (configTimes >= 0) {\n+                return configTimes;\n+            }\n+        }\n+        // if there is no customized config, use global config instead\n+        Configuration configuration = ConfigurationFactory.getInstance();\n+        return configuration.getInt(ConfigurationKeys.CLIENT_LOCK_RETRY_TIMES, DEFAULT_CLIENT_LOCK_RETRY_TIMES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "289b6d7b29a0ae59c763915f1ebf58d3ca8ef212"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDUyNTQwOnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/LockRetryController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMzo0MToxMFrOHSe5gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMzo0MToxMFrOHSe5gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE0MjY1OQ==", "bodyText": "volatile", "url": "https://github.com/seata/seata/pull/2962#discussion_r489142659", "createdAt": "2020-09-16T03:41:10Z", "author": {"login": "wangliang181230"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/LockRetryController.java", "diffHunk": "@@ -84,7 +87,50 @@ private int getLockRetryTimes() {\n             }\n         }\n         // if there is no customized config, use global config instead\n-        Configuration configuration = ConfigurationFactory.getInstance();\n-        return configuration.getInt(ConfigurationKeys.CLIENT_LOCK_RETRY_TIMES, DEFAULT_CLIENT_LOCK_RETRY_TIMES);\n+        return globalConfig.getGlobalLockRetryTimes();\n+    }\n+\n+    static class GlobalConfig implements ConfigurationChangeListener {\n+\n+        private int globalLockRetryInternal;\n+\n+        private int globalLockRetryTimes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01470ac006e2e8ee6a1524a0001bec0f20a82e23"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDUyNjQ5OnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/LockRetryController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMzo0MTo1MlrOHSe6Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNDoyNjoyM1rOHSflEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE0MjgxOA==", "bodyText": "use the static method NumberUtils.toInt", "url": "https://github.com/seata/seata/pull/2962#discussion_r489142818", "createdAt": "2020-09-16T03:41:52Z", "author": {"login": "wangliang181230"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/LockRetryController.java", "diffHunk": "@@ -84,7 +87,50 @@ private int getLockRetryTimes() {\n             }\n         }\n         // if there is no customized config, use global config instead\n-        Configuration configuration = ConfigurationFactory.getInstance();\n-        return configuration.getInt(ConfigurationKeys.CLIENT_LOCK_RETRY_TIMES, DEFAULT_CLIENT_LOCK_RETRY_TIMES);\n+        return globalConfig.getGlobalLockRetryTimes();\n+    }\n+\n+    static class GlobalConfig implements ConfigurationChangeListener {\n+\n+        private int globalLockRetryInternal;\n+\n+        private int globalLockRetryTimes;\n+\n+        private final int defaultRetryInternal = DefaultValues.DEFAULT_CLIENT_LOCK_RETRY_INTERVAL;\n+        private final int defaultRetryTimes = DefaultValues.DEFAULT_CLIENT_LOCK_RETRY_TIMES;\n+\n+        public GlobalConfig() {\n+            Configuration configuration = ConfigurationFactory.getInstance();\n+            globalLockRetryInternal = configuration.getInt(ConfigurationKeys.CLIENT_LOCK_RETRY_INTERVAL, defaultRetryInternal);\n+            globalLockRetryTimes = configuration.getInt(ConfigurationKeys.CLIENT_LOCK_RETRY_TIMES, defaultRetryTimes);\n+        }\n+\n+        @Override\n+        public void onChangeEvent(ConfigurationChangeEvent event) {\n+            String dataId = event.getDataId();\n+            String newValue = event.getNewValue();\n+            if (ConfigurationKeys.CLIENT_LOCK_RETRY_INTERVAL.equals(dataId)) {\n+                globalLockRetryInternal = parseInt(newValue, defaultRetryInternal);\n+            }\n+            if (ConfigurationKeys.CLIENT_LOCK_RETRY_TIMES.equals(dataId)) {\n+                globalLockRetryTimes = parseInt(newValue, defaultRetryTimes);\n+            }\n+        }\n+\n+        private int parseInt(String value, int fallback) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01470ac006e2e8ee6a1524a0001bec0f20a82e23"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1MzgwOA==", "bodyText": "ok, i see it.", "url": "https://github.com/seata/seata/pull/2962#discussion_r489153808", "createdAt": "2020-09-16T04:26:23Z", "author": {"login": "selfishlover"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/LockRetryController.java", "diffHunk": "@@ -84,7 +87,50 @@ private int getLockRetryTimes() {\n             }\n         }\n         // if there is no customized config, use global config instead\n-        Configuration configuration = ConfigurationFactory.getInstance();\n-        return configuration.getInt(ConfigurationKeys.CLIENT_LOCK_RETRY_TIMES, DEFAULT_CLIENT_LOCK_RETRY_TIMES);\n+        return globalConfig.getGlobalLockRetryTimes();\n+    }\n+\n+    static class GlobalConfig implements ConfigurationChangeListener {\n+\n+        private int globalLockRetryInternal;\n+\n+        private int globalLockRetryTimes;\n+\n+        private final int defaultRetryInternal = DefaultValues.DEFAULT_CLIENT_LOCK_RETRY_INTERVAL;\n+        private final int defaultRetryTimes = DefaultValues.DEFAULT_CLIENT_LOCK_RETRY_TIMES;\n+\n+        public GlobalConfig() {\n+            Configuration configuration = ConfigurationFactory.getInstance();\n+            globalLockRetryInternal = configuration.getInt(ConfigurationKeys.CLIENT_LOCK_RETRY_INTERVAL, defaultRetryInternal);\n+            globalLockRetryTimes = configuration.getInt(ConfigurationKeys.CLIENT_LOCK_RETRY_TIMES, defaultRetryTimes);\n+        }\n+\n+        @Override\n+        public void onChangeEvent(ConfigurationChangeEvent event) {\n+            String dataId = event.getDataId();\n+            String newValue = event.getNewValue();\n+            if (ConfigurationKeys.CLIENT_LOCK_RETRY_INTERVAL.equals(dataId)) {\n+                globalLockRetryInternal = parseInt(newValue, defaultRetryInternal);\n+            }\n+            if (ConfigurationKeys.CLIENT_LOCK_RETRY_TIMES.equals(dataId)) {\n+                globalLockRetryTimes = parseInt(newValue, defaultRetryTimes);\n+            }\n+        }\n+\n+        private int parseInt(String value, int fallback) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE0MjgxOA=="}, "originalCommit": {"oid": "01470ac006e2e8ee6a1524a0001bec0f20a82e23"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDYyMjIzOnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/LockRetryController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNDozODowN1rOHSfwfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNTowMTo1NVrOHSgNcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1NjczMg==", "bodyText": "\u5e38\u91cf\u7684\u53d8\u91cf\u540d\u7528\u5927\u5199\u5c31\u597d\uff0c\u4e0d\u8981\u628afinal\u62ff\u6389\u3002", "url": "https://github.com/seata/seata/pull/2962#discussion_r489156732", "createdAt": "2020-09-16T04:38:07Z", "author": {"login": "wangliang181230"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/LockRetryController.java", "diffHunk": "@@ -28,7 +32,7 @@\n  */\n public class LockRetryController {\n \n-    private static final GlobalConfig globalConfig = new GlobalConfig();\n+    private static GlobalConfig globalConfig = new GlobalConfig();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ea0701d89a16dec82d6a0de6fca6a71403f9e5d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE2NDE0Ng==", "bodyText": "\u95ee\u9898\u4e0d\u5927\uff0c\u53cd\u6b63\u522b\u7684\u5730\u65b9\u4e5f\u6539\u4e0d\u4e86\u5b83", "url": "https://github.com/seata/seata/pull/2962#discussion_r489164146", "createdAt": "2020-09-16T05:01:55Z", "author": {"login": "selfishlover"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/LockRetryController.java", "diffHunk": "@@ -28,7 +32,7 @@\n  */\n public class LockRetryController {\n \n-    private static final GlobalConfig globalConfig = new GlobalConfig();\n+    private static GlobalConfig globalConfig = new GlobalConfig();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE1NjczMg=="}, "originalCommit": {"oid": "4ea0701d89a16dec82d6a0de6fca6a71403f9e5d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTExOTU5OnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactional.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwNzo1NjoxNFrOHvOVOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQwNzo1NjoxNFrOHvOVOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI3OTkyOA==", "bodyText": "lockRetryInternal  \u662f\u4e0d\u662f\u5e94\u8be5\u53eb\u505a lockRetryInterval \u3002  \u662f\u62fc\u9519\u4e86\uff0c \u8fd8\u662f\u672c\u6765\u5c31\u662f\u8fd9\u4e2a\u610f\u601d?", "url": "https://github.com/seata/seata/pull/2962#discussion_r519279928", "createdAt": "2020-11-08T07:56:14Z", "author": {"login": "ls9527"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactional.java", "diffHunk": "@@ -83,4 +83,20 @@\n      * @return\n      */\n     Propagation propagation() default Propagation.REQUIRED;\n+\n+    /**\n+     * customized global lock retry internal(unit: ms)\n+     * you may use this to override global config of \"client.rm.lock.retryInterval\"\n+     * note: 0 or negative number will take no effect(which mean fall back to global config)\n+     * @return\n+     */\n+    int lockRetryInternal() default 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07f39dfbd4b7bccd28bf45787ad136964fbfcf43"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1392, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}