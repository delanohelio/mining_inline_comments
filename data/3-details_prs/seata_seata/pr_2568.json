{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0ODk1MzI0", "number": 2568, "title": "feature: support GlobalTransactionInterceptor expression", "bodyText": "\u2160. Describe what this PR did\nsupport aspect programming\n\u2161. Does this pull request fix one issue?\n\nfix #2563 #527\n\u2162. Why don't you add test cases (unit test/integration test)?\n\u2163. Describe how to verify it\n    @Bean\n    public AspectTransactionalInterceptor aspectTransactionalInterceptor () {\n        return new AspectTransactionalInterceptor();\n    }\n\n    @Bean\n    public Advisor txAdviceAdvisor(AspectTransactionalInterceptor aspectTransactionalInterceptor ) {\n        AspectJExpressionPointcut pointcut = new AspectJExpressionPointcut();\n        pointcut.setExpression(AOP_POINTCUT_EXPRESSION);\n        return new DefaultPointcutAdvisor(pointcut, aspectTransactionalInterceptor);\n    }\n\n\u2164. Special notes for reviews", "createdAt": "2020-04-17T03:05:41Z", "url": "https://github.com/seata/seata/pull/2568", "merged": true, "mergeCommit": {"oid": "273d717da4ab2e9026c415213fa0e8fe5f3dcfda"}, "closed": true, "closedAt": "2021-07-19T06:01:02Z", "author": {"login": "a364176773"}, "timelineItems": {"totalCount": 46, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYYU6tAH2gAyNDA0ODk1MzI0OjQ2Y2IzYTA4MzFjM2QzYjY3MmFhOWYyZDI2OGI3NGFhOWNhMGI2YjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABer0JjnAFqTcwOTE0MzI1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "46cb3a0831c3d3b672aa9f2d268b74aa9ca0b6b6", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/46cb3a0831c3d3b672aa9f2d268b74aa9ca0b6b6", "committedDate": "2020-04-17T03:00:50Z", "message": "support aspect programming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "455ed18f322d7fe2fd71bd8421be783a8c1cabe7", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/455ed18f322d7fe2fd71bd8421be783a8c1cabe7", "committedDate": "2020-04-17T03:05:55Z", "message": "Merge branch 'develop' into aop_at"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80a2b1c60274fb78dd27838b29b45613b010c06b", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/80a2b1c60274fb78dd27838b29b45613b010c06b", "committedDate": "2020-04-17T05:24:38Z", "message": "format code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11e3a649f3461b457f65d47d1afda36107158893", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/11e3a649f3461b457f65d47d1afda36107158893", "committedDate": "2020-04-17T05:26:08Z", "message": "Merge branch 'aop_at' of https://github.com/a364176773/seata into aop_at"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec1bbeced266aa0e0461e2c3b18a4d6952267c0e", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/ec1bbeced266aa0e0461e2c3b18a4d6952267c0e", "committedDate": "2020-04-20T06:27:54Z", "message": "Merge branch 'develop' into aop_at"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c40d202d483df8c32ed6cca42c7d54f7d557a9ff", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/c40d202d483df8c32ed6cca42c7d54f7d557a9ff", "committedDate": "2020-04-20T07:16:31Z", "message": "Merge branch 'develop' into aop_at"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85f247c7489129445fa4d9e2b344ec0e49caaba9", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/85f247c7489129445fa4d9e2b344ec0e49caaba9", "committedDate": "2020-04-21T08:29:39Z", "message": "Merge branch 'develop' into aop_at"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f2ec7775f418d256e448693353ec4140efade27", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/9f2ec7775f418d256e448693353ec4140efade27", "committedDate": "2020-04-26T11:55:57Z", "message": "Merge remote-tracking branch 'mseata/develop' into aop_at"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f54fbaa45cf68de08d7798eb095c809b7fd952d9", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/f54fbaa45cf68de08d7798eb095c809b7fd952d9", "committedDate": "2020-05-07T03:11:32Z", "message": "Merge branch 'develop' into aop_at"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efdf6b0b4ae687f872c8926b046fb33274dc7ede", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/efdf6b0b4ae687f872c8926b046fb33274dc7ede", "committedDate": "2020-05-08T07:54:31Z", "message": "resolve conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf0aac6dd26361a68bd01244eb48d130a5b51656", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/bf0aac6dd26361a68bd01244eb48d130a5b51656", "committedDate": "2020-05-08T07:55:05Z", "message": "resolve conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82fdfeba9c27d14cae84d868eed2faca34afd5df", "author": {"user": {"login": "jsbxyyx", "name": "jsbxyyx"}}, "url": "https://github.com/seata/seata/commit/82fdfeba9c27d14cae84d868eed2faca34afd5df", "committedDate": "2020-05-09T09:32:07Z", "message": "Merge branch 'develop' into aop_at"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7deecf338ac33db5b0652f3bccf9438af57e22b", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/b7deecf338ac33db5b0652f3bccf9438af57e22b", "committedDate": "2020-05-12T08:19:48Z", "message": "merge develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48b8a5a23c9a8476af596c39d6fdbde8b4780a3e", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/48b8a5a23c9a8476af596c39d6fdbde8b4780a3e", "committedDate": "2020-05-20T03:45:55Z", "message": "Merge branch 'develop' of https://github.com/seata/seata into aop_at"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "213a5dc7d4ccad651c2758c54142cab0b296038c", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/213a5dc7d4ccad651c2758c54142cab0b296038c", "committedDate": "2020-05-20T05:24:22Z", "message": "bug fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21f427308591529ae54f114e562114a9e3ca9c2a", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/21f427308591529ae54f114e562114a9e3ca9c2a", "committedDate": "2020-05-24T09:19:44Z", "message": "Merge branch 'develop' into aop_at"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dde6fb8b0c4a75c4dba40fd4b6a7b871349869d5", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/dde6fb8b0c4a75c4dba40fd4b6a7b871349869d5", "committedDate": "2020-05-26T08:16:58Z", "message": "Merge branch 'develop' into aop_at"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNjA5NTQy", "url": "https://github.com/seata/seata/pull/2568#pullrequestreview-420609542", "createdAt": "2020-05-29T02:15:20Z", "commit": {"oid": "dde6fb8b0c4a75c4dba40fd4b6a7b871349869d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMjoxNToyMFrOGcMnrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMjoxNToyMFrOGcMnrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIyMDA3OQ==", "bodyText": "Why change to public?", "url": "https://github.com/seata/seata/pull/2568#discussion_r432220079", "createdAt": "2020-05-29T02:15:20Z", "author": {"login": "l81893521"}, "path": "spring/src/main/java/io/seata/spring/util/GlobalTransactionalCheck.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.util;\n+\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import io.seata.common.thread.NamedThreadFactory;\n+import io.seata.config.ConfigurationChangeEvent;\n+import io.seata.config.ConfigurationChangeListener;\n+import io.seata.config.ConfigurationFactory;\n+import io.seata.core.constants.ConfigurationKeys;\n+import io.seata.tm.TransactionManagerHolder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+import static io.seata.core.constants.DefaultValues.DEFAULT_DISABLE_GLOBAL_TRANSACTION;\n+import static io.seata.core.constants.DefaultValues.DEFAULT_TM_DEGRADE_CHECK;\n+import static io.seata.core.constants.DefaultValues.DEFAULT_TM_DEGRADE_CHECK_ALLOW_TIMES;\n+import static io.seata.core.constants.DefaultValues.DEFAULT_TM_DEGRADE_CHECK_PERIOD;\n+\n+/**\n+ * service dynamic processing center\n+ *\n+ * @author funkye\n+ */\n+public class GlobalTransactionalCheck implements ConfigurationChangeListener {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GlobalTransactionalCheck.class);\n+    private static int degradeCheckPeriod;\n+    private static volatile boolean degradeCheck;\n+    private static int degradeCheckAllowTimes;\n+    private static volatile Integer degradeNum = 0;\n+    private static volatile Integer reachNum = 0;\n+    private static volatile boolean disable;\n+    private static ScheduledThreadPoolExecutor executor =\n+        new ScheduledThreadPoolExecutor(1, new NamedThreadFactory(\"degradeCheckWorker\", 1, true));\n+\n+    public GlobalTransactionalCheck() {\n+        disable = ConfigurationFactory.getInstance().getBoolean(ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n+            DEFAULT_DISABLE_GLOBAL_TRANSACTION);\n+        degradeCheck = ConfigurationFactory.getInstance().getBoolean(ConfigurationKeys.CLIENT_DEGRADE_CHECK,\n+            DEFAULT_TM_DEGRADE_CHECK);\n+        if (degradeCheck) {\n+            degradeCheckPeriod = ConfigurationFactory.getInstance()\n+                .getInt(ConfigurationKeys.CLIENT_DEGRADE_CHECK_PERIOD, DEFAULT_TM_DEGRADE_CHECK_PERIOD);\n+            degradeCheckAllowTimes = ConfigurationFactory.getInstance()\n+                .getInt(ConfigurationKeys.CLIENT_DEGRADE_CHECK_ALLOW_TIMES, DEFAULT_TM_DEGRADE_CHECK_ALLOW_TIMES);\n+            if (degradeCheckPeriod > 0 && degradeCheckAllowTimes > 0) {\n+                startDegradeCheck();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startDegradeCheck() {\n+        executor.scheduleAtFixedRate(() -> {\n+            if (degradeCheck) {\n+                try {\n+                    String xid = TransactionManagerHolder.get().begin(null, null, \"degradeCheck\", 60000);\n+                    TransactionManagerHolder.get().commit(xid);\n+                    onDegradeCheck(true);\n+                } catch (Exception e) {\n+                    onDegradeCheck(false);\n+                }\n+            }\n+        }, degradeCheckPeriod, degradeCheckPeriod, TimeUnit.MILLISECONDS);\n+    }\n+\n+    public static synchronized void onDegradeCheck(boolean succeed) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde6fb8b0c4a75c4dba40fd4b6a7b871349869d5"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNjE3NjE3", "url": "https://github.com/seata/seata/pull/2568#pullrequestreview-420617617", "createdAt": "2020-05-29T02:44:04Z", "commit": {"oid": "dde6fb8b0c4a75c4dba40fd4b6a7b871349869d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMjo0NDowNFrOGcNBhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMjo0NDowNFrOGcNBhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIyNjY5NQ==", "bodyText": "I think degradeCheck always true in here.", "url": "https://github.com/seata/seata/pull/2568#discussion_r432226695", "createdAt": "2020-05-29T02:44:04Z", "author": {"login": "l81893521"}, "path": "spring/src/main/java/io/seata/spring/util/GlobalTransactionalCheck.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.util;\n+\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import io.seata.common.thread.NamedThreadFactory;\n+import io.seata.config.ConfigurationChangeEvent;\n+import io.seata.config.ConfigurationChangeListener;\n+import io.seata.config.ConfigurationFactory;\n+import io.seata.core.constants.ConfigurationKeys;\n+import io.seata.tm.TransactionManagerHolder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+import static io.seata.core.constants.DefaultValues.DEFAULT_DISABLE_GLOBAL_TRANSACTION;\n+import static io.seata.core.constants.DefaultValues.DEFAULT_TM_DEGRADE_CHECK;\n+import static io.seata.core.constants.DefaultValues.DEFAULT_TM_DEGRADE_CHECK_ALLOW_TIMES;\n+import static io.seata.core.constants.DefaultValues.DEFAULT_TM_DEGRADE_CHECK_PERIOD;\n+\n+/**\n+ * service dynamic processing center\n+ *\n+ * @author funkye\n+ */\n+public class GlobalTransactionalCheck implements ConfigurationChangeListener {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GlobalTransactionalCheck.class);\n+    private static int degradeCheckPeriod;\n+    private static volatile boolean degradeCheck;\n+    private static int degradeCheckAllowTimes;\n+    private static volatile Integer degradeNum = 0;\n+    private static volatile Integer reachNum = 0;\n+    private static volatile boolean disable;\n+    private static ScheduledThreadPoolExecutor executor =\n+        new ScheduledThreadPoolExecutor(1, new NamedThreadFactory(\"degradeCheckWorker\", 1, true));\n+\n+    public GlobalTransactionalCheck() {\n+        disable = ConfigurationFactory.getInstance().getBoolean(ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n+            DEFAULT_DISABLE_GLOBAL_TRANSACTION);\n+        degradeCheck = ConfigurationFactory.getInstance().getBoolean(ConfigurationKeys.CLIENT_DEGRADE_CHECK,\n+            DEFAULT_TM_DEGRADE_CHECK);\n+        if (degradeCheck) {\n+            degradeCheckPeriod = ConfigurationFactory.getInstance()\n+                .getInt(ConfigurationKeys.CLIENT_DEGRADE_CHECK_PERIOD, DEFAULT_TM_DEGRADE_CHECK_PERIOD);\n+            degradeCheckAllowTimes = ConfigurationFactory.getInstance()\n+                .getInt(ConfigurationKeys.CLIENT_DEGRADE_CHECK_ALLOW_TIMES, DEFAULT_TM_DEGRADE_CHECK_ALLOW_TIMES);\n+            if (degradeCheckPeriod > 0 && degradeCheckAllowTimes > 0) {\n+                startDegradeCheck();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startDegradeCheck() {\n+        executor.scheduleAtFixedRate(() -> {\n+            if (degradeCheck) {\n+                try {\n+                    String xid = TransactionManagerHolder.get().begin(null, null, \"degradeCheck\", 60000);\n+                    TransactionManagerHolder.get().commit(xid);\n+                    onDegradeCheck(true);\n+                } catch (Exception e) {\n+                    onDegradeCheck(false);\n+                }\n+            }\n+        }, degradeCheckPeriod, degradeCheckPeriod, TimeUnit.MILLISECONDS);\n+    }\n+\n+    public static synchronized void onDegradeCheck(boolean succeed) {\n+        if (succeed) {\n+            if (degradeNum >= degradeCheckAllowTimes) {\n+                reachNum++;\n+                if (reachNum >= degradeCheckAllowTimes) {\n+                    reachNum = 0;\n+                    degradeNum = 0;\n+                    if (LOGGER.isInfoEnabled()) {\n+                        LOGGER.info(\"the current global transaction has been restored\");\n+                    }\n+                }\n+            } else if (degradeNum != 0) {\n+                degradeNum = 0;\n+            }\n+        } else {\n+            if (degradeNum < degradeCheckAllowTimes) {\n+                degradeNum++;\n+                if (degradeNum >= degradeCheckAllowTimes) {\n+                    if (LOGGER.isWarnEnabled()) {\n+                        LOGGER.warn(\"the current global transaction has been automatically downgraded\");\n+                    }\n+                }\n+            } else if (reachNum != 0) {\n+                reachNum = 0;\n+            }\n+        }\n+    }\n+\n+    public static boolean getStatus() {\n+        if (!degradeCheck) {\n+            return disable;\n+        }\n+        return disable || (degradeCheck && degradeNum >= degradeCheckAllowTimes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde6fb8b0c4a75c4dba40fd4b6a7b871349869d5"}, "originalPosition": 117}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNjE4Mzc2", "url": "https://github.com/seata/seata/pull/2568#pullrequestreview-420618376", "createdAt": "2020-05-29T02:46:58Z", "commit": {"oid": "dde6fb8b0c4a75c4dba40fd4b6a7b871349869d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMjo0Njo1OFrOGcNEGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMjo0Njo1OFrOGcNEGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIyNzM1NA==", "bodyText": "I think maybe change the method name, it will be more readable. like\nlocalDisable()", "url": "https://github.com/seata/seata/pull/2568#discussion_r432227354", "createdAt": "2020-05-29T02:46:58Z", "author": {"login": "l81893521"}, "path": "spring/src/main/java/io/seata/spring/util/GlobalTransactionalCheck.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.util;\n+\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import io.seata.common.thread.NamedThreadFactory;\n+import io.seata.config.ConfigurationChangeEvent;\n+import io.seata.config.ConfigurationChangeListener;\n+import io.seata.config.ConfigurationFactory;\n+import io.seata.core.constants.ConfigurationKeys;\n+import io.seata.tm.TransactionManagerHolder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+import static io.seata.core.constants.DefaultValues.DEFAULT_DISABLE_GLOBAL_TRANSACTION;\n+import static io.seata.core.constants.DefaultValues.DEFAULT_TM_DEGRADE_CHECK;\n+import static io.seata.core.constants.DefaultValues.DEFAULT_TM_DEGRADE_CHECK_ALLOW_TIMES;\n+import static io.seata.core.constants.DefaultValues.DEFAULT_TM_DEGRADE_CHECK_PERIOD;\n+\n+/**\n+ * service dynamic processing center\n+ *\n+ * @author funkye\n+ */\n+public class GlobalTransactionalCheck implements ConfigurationChangeListener {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GlobalTransactionalCheck.class);\n+    private static int degradeCheckPeriod;\n+    private static volatile boolean degradeCheck;\n+    private static int degradeCheckAllowTimes;\n+    private static volatile Integer degradeNum = 0;\n+    private static volatile Integer reachNum = 0;\n+    private static volatile boolean disable;\n+    private static ScheduledThreadPoolExecutor executor =\n+        new ScheduledThreadPoolExecutor(1, new NamedThreadFactory(\"degradeCheckWorker\", 1, true));\n+\n+    public GlobalTransactionalCheck() {\n+        disable = ConfigurationFactory.getInstance().getBoolean(ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n+            DEFAULT_DISABLE_GLOBAL_TRANSACTION);\n+        degradeCheck = ConfigurationFactory.getInstance().getBoolean(ConfigurationKeys.CLIENT_DEGRADE_CHECK,\n+            DEFAULT_TM_DEGRADE_CHECK);\n+        if (degradeCheck) {\n+            degradeCheckPeriod = ConfigurationFactory.getInstance()\n+                .getInt(ConfigurationKeys.CLIENT_DEGRADE_CHECK_PERIOD, DEFAULT_TM_DEGRADE_CHECK_PERIOD);\n+            degradeCheckAllowTimes = ConfigurationFactory.getInstance()\n+                .getInt(ConfigurationKeys.CLIENT_DEGRADE_CHECK_ALLOW_TIMES, DEFAULT_TM_DEGRADE_CHECK_ALLOW_TIMES);\n+            if (degradeCheckPeriod > 0 && degradeCheckAllowTimes > 0) {\n+                startDegradeCheck();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * auto upgrade service detection\n+     */\n+    private static void startDegradeCheck() {\n+        executor.scheduleAtFixedRate(() -> {\n+            if (degradeCheck) {\n+                try {\n+                    String xid = TransactionManagerHolder.get().begin(null, null, \"degradeCheck\", 60000);\n+                    TransactionManagerHolder.get().commit(xid);\n+                    onDegradeCheck(true);\n+                } catch (Exception e) {\n+                    onDegradeCheck(false);\n+                }\n+            }\n+        }, degradeCheckPeriod, degradeCheckPeriod, TimeUnit.MILLISECONDS);\n+    }\n+\n+    public static synchronized void onDegradeCheck(boolean succeed) {\n+        if (succeed) {\n+            if (degradeNum >= degradeCheckAllowTimes) {\n+                reachNum++;\n+                if (reachNum >= degradeCheckAllowTimes) {\n+                    reachNum = 0;\n+                    degradeNum = 0;\n+                    if (LOGGER.isInfoEnabled()) {\n+                        LOGGER.info(\"the current global transaction has been restored\");\n+                    }\n+                }\n+            } else if (degradeNum != 0) {\n+                degradeNum = 0;\n+            }\n+        } else {\n+            if (degradeNum < degradeCheckAllowTimes) {\n+                degradeNum++;\n+                if (degradeNum >= degradeCheckAllowTimes) {\n+                    if (LOGGER.isWarnEnabled()) {\n+                        LOGGER.warn(\"the current global transaction has been automatically downgraded\");\n+                    }\n+                }\n+            } else if (reachNum != 0) {\n+                reachNum = 0;\n+            }\n+        }\n+    }\n+\n+    public static boolean getStatus() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde6fb8b0c4a75c4dba40fd4b6a7b871349869d5"}, "originalPosition": 113}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8ac68ce147f0d0463624c85f4878d63b24f7cda", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/a8ac68ce147f0d0463624c85f4878d63b24f7cda", "committedDate": "2020-05-29T05:05:11Z", "message": "bug fix and optimized code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9322c22eaeb1a14eca80bbf7181546774033361", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/c9322c22eaeb1a14eca80bbf7181546774033361", "committedDate": "2020-05-29T05:15:40Z", "message": "Merge branch 'develop' into aop_at"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNjk3NjA1", "url": "https://github.com/seata/seata/pull/2568#pullrequestreview-420697605", "createdAt": "2020-05-29T06:59:26Z", "commit": {"oid": "c9322c22eaeb1a14eca80bbf7181546774033361"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjo1OToyNlrOGcQ9yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjo1OToyNlrOGcQ9yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI5MTI3NQ==", "bodyText": "Why remove the degrade check?", "url": "https://github.com/seata/seata/pull/2568#discussion_r432291275", "createdAt": "2020-05-29T06:59:26Z", "author": {"login": "l81893521"}, "path": "spring/src/main/java/io/seata/spring/annotation/HandleGlobalTransaction.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.annotation;\n+\n+import java.lang.reflect.Method;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import org.aopalliance.intercept.MethodInvocation;\n+\n+import io.seata.common.exception.ShouldNeverHappenException;\n+import io.seata.common.util.StringUtils;\n+import io.seata.tm.api.FailureHandler;\n+import io.seata.tm.api.TransactionalExecutor;\n+import io.seata.tm.api.TransactionalTemplate;\n+import io.seata.tm.api.transaction.NoRollbackRule;\n+import io.seata.tm.api.transaction.RollbackRule;\n+import io.seata.tm.api.transaction.TransactionInfo;\n+\n+/**\n+ * @author funkye\n+ * @date 2020/4/17\n+ */\n+public class HandleGlobalTransaction {\n+\n+    public Object runTransaction(final MethodInvocation methodInvocation, final Object globalTrxAnno,\n+        final FailureHandler failureHandler, final TransactionalTemplate transactionalTemplate) throws Throwable {\n+        try {\n+            return transactionalTemplate.execute(new TransactionalExecutor() {\n+                @Override\n+                public Object execute() throws Throwable {\n+                    return methodInvocation.proceed();\n+                }\n+\n+                @Override\n+                public TransactionInfo getTransactionInfo() {\n+                    return getInfo(globalTrxAnno, methodInvocation.getMethod());\n+                }\n+\n+            });\n+        } catch (TransactionalExecutor.ExecutionException e) {\n+            throw switchExecutionException(e, failureHandler);\n+        }\n+    }\n+\n+    private TransactionInfo getInfo(Object globalTrxAnno, Method method) {\n+        TransactionInfo transactionInfo = new TransactionInfo();\n+        AtTransactional globalTrx = convertAtTransactional(globalTrxAnno);\n+        transactionInfo.setTimeOut(globalTrx.getTimeoutMills());\n+        String name = globalTrx.getName();\n+        if (StringUtils.isNullOrEmpty(name)) {\n+            name = formatMethod(method);\n+        }\n+        transactionInfo.setName(name);\n+        transactionInfo.setPropagation(globalTrx.getPropagation());\n+        Set<RollbackRule> rollbackRules = new LinkedHashSet<>();\n+        for (Class<?> rbRule : globalTrx.getRollbackFor()) {\n+            rollbackRules.add(new RollbackRule(rbRule));\n+        }\n+        for (String rbRule : globalTrx.getRollbackForClassName()) {\n+            rollbackRules.add(new RollbackRule(rbRule));\n+        }\n+        for (Class<?> rbRule : globalTrx.getNoRollbackFor()) {\n+            rollbackRules.add(new NoRollbackRule(rbRule));\n+        }\n+        for (String rbRule : globalTrx.getNoRollbackForClassName()) {\n+            rollbackRules.add(new NoRollbackRule(rbRule));\n+        }\n+        transactionInfo.setRollbackRules(rollbackRules);\n+        return transactionInfo;\n+    }\n+\n+    private Throwable switchExecutionException(TransactionalExecutor.ExecutionException e,\n+        FailureHandler failureHandler) throws Throwable {\n+        TransactionalExecutor.Code code = e.getCode();\n+        switch (code) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9322c22eaeb1a14eca80bbf7181546774033361"}, "originalPosition": 89}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d484d4fe058207e4bd5e511841fd89536dc4d308", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/d484d4fe058207e4bd5e511841fd89536dc4d308", "committedDate": "2020-05-29T08:57:03Z", "message": "bug fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "373f1db51a6b9d737aac7e29c14ab67c3014cb2d", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/373f1db51a6b9d737aac7e29c14ab67c3014cb2d", "committedDate": "2020-05-29T10:59:30Z", "message": "code formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMzk1NTY3", "url": "https://github.com/seata/seata/pull/2568#pullrequestreview-421395567", "createdAt": "2020-05-30T10:29:19Z", "commit": {"oid": "373f1db51a6b9d737aac7e29c14ab67c3014cb2d"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0a59d53395369d2a4247bed990bc8bbcd9a8a9b", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/d0a59d53395369d2a4247bed990bc8bbcd9a8a9b", "committedDate": "2020-05-30T14:18:50Z", "message": "optimized code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7f5b978242c6408cfce7357f5a8a372a1738f02", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/f7f5b978242c6408cfce7357f5a8a372a1738f02", "committedDate": "2020-06-02T15:01:18Z", "message": "Merge branch 'develop' into aop_at"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cec06747119a30473718d37cfdeab6eae50f0231", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/cec06747119a30473718d37cfdeab6eae50f0231", "committedDate": "2020-06-03T03:48:11Z", "message": "Merge branch 'develop' into aop_at"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1f0ac4caf58cc71dd33b754e66f3765f74bf5c9", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/a1f0ac4caf58cc71dd33b754e66f3765f74bf5c9", "committedDate": "2020-06-03T05:55:33Z", "message": "Merge branch 'develop' into aop_at"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e817f4912eceebc99692ef19f365610e6151baa8", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/e817f4912eceebc99692ef19f365610e6151baa8", "committedDate": "2020-06-18T02:59:03Z", "message": "Merge branch 'develop' into aop_at"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1153ccaab7e4ab2c2fc124e938dea7d74597c598", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/1153ccaab7e4ab2c2fc124e938dea7d74597c598", "committedDate": "2020-06-22T15:01:29Z", "message": "update"}, "afterCommit": {"oid": "e817f4912eceebc99692ef19f365610e6151baa8", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/e817f4912eceebc99692ef19f365610e6151baa8", "committedDate": "2020-06-18T02:59:03Z", "message": "Merge branch 'develop' into aop_at"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c623e0495982f310efad2a6c745da3dd90ec9c1f", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/c623e0495982f310efad2a6c745da3dd90ec9c1f", "committedDate": "2020-06-23T13:55:51Z", "message": "merge seata develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b33b0a6bf2f6a3581a3f24f46d800b4d31e75fc", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/7b33b0a6bf2f6a3581a3f24f46d800b4d31e75fc", "committedDate": "2020-06-27T09:37:49Z", "message": "fix bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf7cf8b2535945bf77669f6dde84e3e72e711620", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/cf7cf8b2535945bf77669f6dde84e3e72e711620", "committedDate": "2020-06-27T09:42:51Z", "message": "merge develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15cdfd9c995ca783d1731602fc8fcd6f9f1a0b72", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/15cdfd9c995ca783d1731602fc8fcd6f9f1a0b72", "committedDate": "2020-07-20T15:03:31Z", "message": "resolving code conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be69cdb4a1c3d32922d033621b78d385a23fa569", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/be69cdb4a1c3d32922d033621b78d385a23fa569", "committedDate": "2020-07-30T09:59:01Z", "message": "Merge branch 'develop' into aop_at"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fcfd33ed9529a6164d3188d21e285531896d238", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/2fcfd33ed9529a6164d3188d21e285531896d238", "committedDate": "2020-07-31T02:06:33Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc0501fd632843332ae5fe27f2a5a80884ba6245", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/cc0501fd632843332ae5fe27f2a5a80884ba6245", "committedDate": "2021-07-17T16:31:01Z", "message": "merge code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9ca208d13b269a6d5b5c9410d1eaed1094bf9d0", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/d9ca208d13b269a6d5b5c9410d1eaed1094bf9d0", "committedDate": "2021-07-17T16:32:59Z", "message": "rollback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80109ab8d11fe72a8a4dac11fac3470827acfc0d", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/80109ab8d11fe72a8a4dac11fac3470827acfc0d", "committedDate": "2021-07-17T17:53:50Z", "message": "optimize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fca090885f75cf3ee09ba5ff471c269fd889c4e5", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/fca090885f75cf3ee09ba5ff471c269fd889c4e5", "committedDate": "2021-07-18T05:02:01Z", "message": "optimize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36bbedadee3dfcc575c04aabbaea93630468c8b2", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/36bbedadee3dfcc575c04aabbaea93630468c8b2", "committedDate": "2021-07-18T05:40:59Z", "message": "registration of pr"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzA5MTMyMDM1", "url": "https://github.com/seata/seata/pull/2568#pullrequestreview-709132035", "createdAt": "2021-07-19T03:53:29Z", "commit": {"oid": "36bbedadee3dfcc575c04aabbaea93630468c8b2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzA5MTMzODM4", "url": "https://github.com/seata/seata/pull/2568#pullrequestreview-709133838", "createdAt": "2021-07-19T04:00:23Z", "commit": {"oid": "36bbedadee3dfcc575c04aabbaea93630468c8b2"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzA5MTQzMjU4", "url": "https://github.com/seata/seata/pull/2568#pullrequestreview-709143258", "createdAt": "2021-07-19T04:32:39Z", "commit": {"oid": "36bbedadee3dfcc575c04aabbaea93630468c8b2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3919, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}