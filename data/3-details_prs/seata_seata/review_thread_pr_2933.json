{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3MDQ1ODYx", "number": 2933, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjo0NjowOVrOESoT5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzo0NjozNlrOE2o84w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTcwMjc4OnYy", "diffSide": "RIGHT", "path": "sqlparser/seata-sqlparser-antlr/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjo0NjowOVrOG36ljQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjo0NjowOVrOG36ljQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4NDc0OQ==", "bodyText": "antlr", "url": "https://github.com/seata/seata/pull/2933#discussion_r461284749", "createdAt": "2020-07-28T02:46:09Z", "author": {"login": "slievrly"}, "path": "sqlparser/seata-sqlparser-antlr/pom.xml", "diffHunk": "@@ -0,0 +1,68 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~  Copyright 1999-2019 Seata.io Group.\n+  ~\n+  ~  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~  you may not use this file except in compliance with the License.\n+  ~  You may obtain a copy of the License at\n+  ~\n+  ~       http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~  Unless required by applicable law or agreed to in writing, software\n+  ~  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~  See the License for the specific language governing permissions and\n+  ~  limitations under the License.\n+  -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <groupId>io.seata</groupId>\n+        <artifactId>seata-sqlparser</artifactId>\n+        <version>${revision}</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>seata-sqlparser-antlr</artifactId>\n+    <name>seata-sqlparser-druid ${project.version}</name>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3ed076c427055a454d6c205aa1ab42ac419e6f0"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzI1MzQ2OnYy", "diffSide": "RIGHT", "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDowMjozN1rOHHFFxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDowMjozN1rOHHFFxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NTQ3Nw==", "bodyText": "return null?", "url": "https://github.com/seata/seata/pull/2933#discussion_r477185477", "createdAt": "2020-08-26T10:02:37Z", "author": {"login": "jsbxyyx"}, "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.SQLInsertRecognizer;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import io.seata.sqlparser.antlr.mysql.visit.StatementSqlVisitor;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLInsertRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLInsertRecognizer implements SQLInsertRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLInsertRecognizer(String sql) {\n+\n+        MySqlLexer lexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+\n+        CommonTokenStream tokenStream = new CommonTokenStream(lexer);\n+\n+        MySqlParser parser = new MySqlParser(tokenStream);\n+\n+        MySqlParser.RootContext rootContext = parser.root();\n+        sqlContext = new MySqlContext();\n+        StatementSqlVisitor visitor = new StatementSqlVisitor(sqlContext);\n+        visitor.visit(rootContext);\n+    }\n+\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.INSERT;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getTableName() {\n+        return sqlContext.tableName;\n+    }\n+\n+    @Override\n+    public String getOriginalSQL() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzI1NDIwOnYy", "diffSide": "RIGHT", "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDowMjo1MVrOHHFGNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDowMjo1MVrOHHFGNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NTU4OA==", "bodyText": "return false?", "url": "https://github.com/seata/seata/pull/2933#discussion_r477185588", "createdAt": "2020-08-26T10:02:51Z", "author": {"login": "jsbxyyx"}, "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.SQLInsertRecognizer;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import io.seata.sqlparser.antlr.mysql.visit.StatementSqlVisitor;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLInsertRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLInsertRecognizer implements SQLInsertRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLInsertRecognizer(String sql) {\n+\n+        MySqlLexer lexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+\n+        CommonTokenStream tokenStream = new CommonTokenStream(lexer);\n+\n+        MySqlParser parser = new MySqlParser(tokenStream);\n+\n+        MySqlParser.RootContext rootContext = parser.root();\n+        sqlContext = new MySqlContext();\n+        StatementSqlVisitor visitor = new StatementSqlVisitor(sqlContext);\n+        visitor.visit(rootContext);\n+    }\n+\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.INSERT;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getTableName() {\n+        return sqlContext.tableName;\n+    }\n+\n+    @Override\n+    public String getOriginalSQL() {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean insertColumnsIsEmpty() {\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzI1NDgzOnYy", "diffSide": "RIGHT", "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDowMzowMVrOHHFGnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDowMzowMVrOHHFGnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NTY5NQ==", "bodyText": "return null?", "url": "https://github.com/seata/seata/pull/2933#discussion_r477185695", "createdAt": "2020-08-26T10:03:01Z", "author": {"login": "jsbxyyx"}, "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.SQLInsertRecognizer;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import io.seata.sqlparser.antlr.mysql.visit.StatementSqlVisitor;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLInsertRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLInsertRecognizer implements SQLInsertRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLInsertRecognizer(String sql) {\n+\n+        MySqlLexer lexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+\n+        CommonTokenStream tokenStream = new CommonTokenStream(lexer);\n+\n+        MySqlParser parser = new MySqlParser(tokenStream);\n+\n+        MySqlParser.RootContext rootContext = parser.root();\n+        sqlContext = new MySqlContext();\n+        StatementSqlVisitor visitor = new StatementSqlVisitor(sqlContext);\n+        visitor.visit(rootContext);\n+    }\n+\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.INSERT;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getTableName() {\n+        return sqlContext.tableName;\n+    }\n+\n+    @Override\n+    public String getOriginalSQL() {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean insertColumnsIsEmpty() {\n+        return false;\n+    }\n+\n+    @Override\n+    public List<String> getInsertColumns() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzI1NTk1OnYy", "diffSide": "RIGHT", "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDowMzoyNFrOHHFHVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDowMzoyNFrOHHFHVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NTg3OQ==", "bodyText": "need implemention logic.", "url": "https://github.com/seata/seata/pull/2933#discussion_r477185879", "createdAt": "2020-08-26T10:03:24Z", "author": {"login": "jsbxyyx"}, "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.SQLInsertRecognizer;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import io.seata.sqlparser.antlr.mysql.visit.StatementSqlVisitor;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLInsertRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLInsertRecognizer implements SQLInsertRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLInsertRecognizer(String sql) {\n+\n+        MySqlLexer lexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+\n+        CommonTokenStream tokenStream = new CommonTokenStream(lexer);\n+\n+        MySqlParser parser = new MySqlParser(tokenStream);\n+\n+        MySqlParser.RootContext rootContext = parser.root();\n+        sqlContext = new MySqlContext();\n+        StatementSqlVisitor visitor = new StatementSqlVisitor(sqlContext);\n+        visitor.visit(rootContext);\n+    }\n+\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.INSERT;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getTableName() {\n+        return sqlContext.tableName;\n+    }\n+\n+    @Override\n+    public String getOriginalSQL() {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean insertColumnsIsEmpty() {\n+        return false;\n+    }\n+\n+    @Override\n+    public List<String> getInsertColumns() {\n+        return null;\n+    }\n+\n+    @Override\n+    public List<List<Object>> getInsertRows(Collection<Integer> primaryKeyIndex) {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzI1NzExOnYy", "diffSide": "RIGHT", "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLSelectRecognizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDowMzo0MlrOHHFIGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDowMzo0MlrOHHFIGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NjA3Mg==", "bodyText": "return null?", "url": "https://github.com/seata/seata/pull/2933#discussion_r477186072", "createdAt": "2020-08-26T10:03:42Z", "author": {"login": "jsbxyyx"}, "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLSelectRecognizer.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.ParametersHolder;\n+import io.seata.sqlparser.SQLSelectRecognizer;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.antlr.mysql.listener.SelectSpecificationSqlListener;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.tree.ParseTreeWalker;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLSelectRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLSelectRecognizer implements SQLSelectRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLSelectRecognizer(String sql) {\n+        MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+        CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n+        MySqlParser parser2 = new MySqlParser(commonTokenStream);\n+        MySqlParser.RootContext root = parser2.root();\n+        ParseTreeWalker walker2 = new ParseTreeWalker();\n+        sqlContext = new MySqlContext();\n+        walker2.walk(new SelectSpecificationSqlListener(sqlContext), root);\n+    }\n+\n+\n+    @Override\n+    public String getWhereCondition(ParametersHolder parametersHolder, ArrayList<List<Object>> paramAppenderList) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getWhereCondition() {\n+        return sqlContext.getWhereCondition();\n+    }\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.SELECT;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getTableName() {\n+        return sqlContext.tableName;\n+    }\n+\n+    @Override\n+    public String getOriginalSQL() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzI1NzMyOnYy", "diffSide": "RIGHT", "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLSelectRecognizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDowMzo0NlrOHHFIPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDowMzo0NlrOHHFIPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NjEwOQ==", "bodyText": "return null?", "url": "https://github.com/seata/seata/pull/2933#discussion_r477186109", "createdAt": "2020-08-26T10:03:46Z", "author": {"login": "jsbxyyx"}, "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLSelectRecognizer.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.ParametersHolder;\n+import io.seata.sqlparser.SQLSelectRecognizer;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.antlr.mysql.listener.SelectSpecificationSqlListener;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.tree.ParseTreeWalker;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLSelectRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLSelectRecognizer implements SQLSelectRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLSelectRecognizer(String sql) {\n+        MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+        CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n+        MySqlParser parser2 = new MySqlParser(commonTokenStream);\n+        MySqlParser.RootContext root = parser2.root();\n+        ParseTreeWalker walker2 = new ParseTreeWalker();\n+        sqlContext = new MySqlContext();\n+        walker2.walk(new SelectSpecificationSqlListener(sqlContext), root);\n+    }\n+\n+\n+    @Override\n+    public String getWhereCondition(ParametersHolder parametersHolder, ArrayList<List<Object>> paramAppenderList) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getWhereCondition() {\n+        return sqlContext.getWhereCondition();\n+    }\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.SELECT;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzI1Nzg0OnYy", "diffSide": "RIGHT", "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDowMzo1NFrOHHFIjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDowMzo1NFrOHHFIjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NjE5MQ==", "bodyText": "return null?", "url": "https://github.com/seata/seata/pull/2933#discussion_r477186191", "createdAt": "2020-08-26T10:03:54Z", "author": {"login": "jsbxyyx"}, "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.ParametersHolder;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.SQLUpdateRecognizer;\n+import io.seata.sqlparser.antlr.mysql.listener.UpdateSpecificationSqlListener;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.tree.ParseTreeWalker;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLUpdateRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLUpdateRecognizer implements SQLUpdateRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLUpdateRecognizer(String sql) {\n+        MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+        CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n+        MySqlParser parser2 = new MySqlParser(commonTokenStream);\n+        MySqlParser.RootContext root = parser2.root();\n+        ParseTreeWalker walker2 = new ParseTreeWalker();\n+        sqlContext = new MySqlContext();\n+        walker2.walk(new UpdateSpecificationSqlListener(sqlContext), root);\n+    }\n+\n+    @Override\n+    public List<String> getUpdateColumns() {\n+\n+        List<MySqlContext.SQL> updateFoColumnNames = sqlContext.getUpdateFoColumnNames();\n+        List<String> String = new ArrayList<>();\n+        for (MySqlContext.SQL sql : updateFoColumnNames) {\n+            String.add(sql.getUpdateColumn());\n+        }\n+        return String;\n+    }\n+\n+    @Override\n+    public List<Object> getUpdateValues() {\n+\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzI1ODIwOnYy", "diffSide": "RIGHT", "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDowMzo1OVrOHHFIwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDowMzo1OVrOHHFIwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NjI0Mg==", "bodyText": "return null?", "url": "https://github.com/seata/seata/pull/2933#discussion_r477186242", "createdAt": "2020-08-26T10:03:59Z", "author": {"login": "jsbxyyx"}, "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.ParametersHolder;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.SQLUpdateRecognizer;\n+import io.seata.sqlparser.antlr.mysql.listener.UpdateSpecificationSqlListener;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.tree.ParseTreeWalker;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLUpdateRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLUpdateRecognizer implements SQLUpdateRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLUpdateRecognizer(String sql) {\n+        MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+        CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n+        MySqlParser parser2 = new MySqlParser(commonTokenStream);\n+        MySqlParser.RootContext root = parser2.root();\n+        ParseTreeWalker walker2 = new ParseTreeWalker();\n+        sqlContext = new MySqlContext();\n+        walker2.walk(new UpdateSpecificationSqlListener(sqlContext), root);\n+    }\n+\n+    @Override\n+    public List<String> getUpdateColumns() {\n+\n+        List<MySqlContext.SQL> updateFoColumnNames = sqlContext.getUpdateFoColumnNames();\n+        List<String> String = new ArrayList<>();\n+        for (MySqlContext.SQL sql : updateFoColumnNames) {\n+            String.add(sql.getUpdateColumn());\n+        }\n+        return String;\n+    }\n+\n+    @Override\n+    public List<Object> getUpdateValues() {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public String getWhereCondition(ParametersHolder parametersHolder, ArrayList<List<Object>> paramAppenderList) {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzI1ODY4OnYy", "diffSide": "RIGHT", "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDowNDoxMFrOHHFJFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDowNDoxMFrOHHFJFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NjMyNw==", "bodyText": "return null?", "url": "https://github.com/seata/seata/pull/2933#discussion_r477186327", "createdAt": "2020-08-26T10:04:10Z", "author": {"login": "jsbxyyx"}, "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.ParametersHolder;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.SQLUpdateRecognizer;\n+import io.seata.sqlparser.antlr.mysql.listener.UpdateSpecificationSqlListener;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.tree.ParseTreeWalker;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLUpdateRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLUpdateRecognizer implements SQLUpdateRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLUpdateRecognizer(String sql) {\n+        MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+        CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n+        MySqlParser parser2 = new MySqlParser(commonTokenStream);\n+        MySqlParser.RootContext root = parser2.root();\n+        ParseTreeWalker walker2 = new ParseTreeWalker();\n+        sqlContext = new MySqlContext();\n+        walker2.walk(new UpdateSpecificationSqlListener(sqlContext), root);\n+    }\n+\n+    @Override\n+    public List<String> getUpdateColumns() {\n+\n+        List<MySqlContext.SQL> updateFoColumnNames = sqlContext.getUpdateFoColumnNames();\n+        List<String> String = new ArrayList<>();\n+        for (MySqlContext.SQL sql : updateFoColumnNames) {\n+            String.add(sql.getUpdateColumn());\n+        }\n+        return String;\n+    }\n+\n+    @Override\n+    public List<Object> getUpdateValues() {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public String getWhereCondition(ParametersHolder parametersHolder, ArrayList<List<Object>> paramAppenderList) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getWhereCondition() {\n+        return sqlContext.getWhereCondition();\n+    }\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.UPDATE;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzI1ODk5OnYy", "diffSide": "RIGHT", "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDowNDoxNlrOHHFJRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDowNDoxNlrOHHFJRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE4NjM3NQ==", "bodyText": "return null?", "url": "https://github.com/seata/seata/pull/2933#discussion_r477186375", "createdAt": "2020-08-26T10:04:16Z", "author": {"login": "jsbxyyx"}, "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLUpdateRecognizer.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.ParametersHolder;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.SQLUpdateRecognizer;\n+import io.seata.sqlparser.antlr.mysql.listener.UpdateSpecificationSqlListener;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.tree.ParseTreeWalker;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLUpdateRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLUpdateRecognizer implements SQLUpdateRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLUpdateRecognizer(String sql) {\n+        MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+        CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n+        MySqlParser parser2 = new MySqlParser(commonTokenStream);\n+        MySqlParser.RootContext root = parser2.root();\n+        ParseTreeWalker walker2 = new ParseTreeWalker();\n+        sqlContext = new MySqlContext();\n+        walker2.walk(new UpdateSpecificationSqlListener(sqlContext), root);\n+    }\n+\n+    @Override\n+    public List<String> getUpdateColumns() {\n+\n+        List<MySqlContext.SQL> updateFoColumnNames = sqlContext.getUpdateFoColumnNames();\n+        List<String> String = new ArrayList<>();\n+        for (MySqlContext.SQL sql : updateFoColumnNames) {\n+            String.add(sql.getUpdateColumn());\n+        }\n+        return String;\n+    }\n+\n+    @Override\n+    public List<Object> getUpdateValues() {\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public String getWhereCondition(ParametersHolder parametersHolder, ArrayList<List<Object>> paramAppenderList) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getWhereCondition() {\n+        return sqlContext.getWhereCondition();\n+    }\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.UPDATE;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getTableName() {\n+        return sqlContext.tableName;\n+    }\n+\n+    @Override\n+    public String getOriginalSQL() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzQ0MzUxOnYy", "diffSide": "RIGHT", "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLDeleteRecognizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMToyNDowMlrOHHuuSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMToyNDowMlrOHHuuSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg2NzU5Mw==", "bodyText": "Please return the statementProxy.getTargetSQL();", "url": "https://github.com/seata/seata/pull/2933#discussion_r477867593", "createdAt": "2020-08-27T01:24:02Z", "author": {"login": "l81893521"}, "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLDeleteRecognizer.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.ParametersHolder;\n+import io.seata.sqlparser.SQLDeleteRecognizer;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.antlr.mysql.listener.DeleteSpecificationSqlListener;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.tree.ParseTreeWalker;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * AntlrMySQLDeleteRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLDeleteRecognizer implements SQLDeleteRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLDeleteRecognizer(String sql) {\n+        MySqlLexer mySqlLexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+        CommonTokenStream commonTokenStream = new CommonTokenStream(mySqlLexer);\n+        MySqlParser parser2 = new MySqlParser(commonTokenStream);\n+        MySqlParser.RootContext root = parser2.root();\n+        ParseTreeWalker walker2 = new ParseTreeWalker();\n+        sqlContext = new MySqlContext();\n+        walker2.walk(new DeleteSpecificationSqlListener(sqlContext), root);\n+    }\n+\n+\n+    @Override\n+    public String getWhereCondition(ParametersHolder parametersHolder, ArrayList<List<Object>> paramAppenderList) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getWhereCondition() {\n+        return sqlContext.getWhereCondition();\n+    }\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.DELETE;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getTableName() {\n+        return sqlContext.tableName;\n+    }\n+\n+    @Override\n+    public String getOriginalSQL() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68cb4d81ad159102fbda56ed8e2e09527fdd7eb"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzYyNzA0OnYy", "diffSide": "RIGHT", "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMTo0MDoxOVrOHMSI2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMTo0MDoxOVrOHMSI2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY0MjEzNg==", "bodyText": "Use the style of\nif() {\n\n}", "url": "https://github.com/seata/seata/pull/2933#discussion_r482642136", "createdAt": "2020-09-03T01:40:19Z", "author": {"login": "l81893521"}, "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/mysql/AntlrMySQLInsertRecognizer.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr.mysql;\n+\n+import io.seata.sqlparser.SQLInsertRecognizer;\n+import io.seata.sqlparser.SQLType;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlLexer;\n+import io.seata.sqlparser.antlr.mysql.parser.MySqlParser;\n+import io.seata.sqlparser.antlr.mysql.stream.ANTLRNoCaseStringStream;\n+import io.seata.sqlparser.antlr.mysql.visit.StatementSqlVisitor;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * AntlrMySQLInsertRecognizer\n+ *\n+ * @author zhihou\n+ */\n+public class AntlrMySQLInsertRecognizer implements SQLInsertRecognizer {\n+\n+    private MySqlContext sqlContext;\n+\n+    public AntlrMySQLInsertRecognizer(MySqlContext mySqlContext, String sql) {\n+\n+        MySqlLexer lexer = new MySqlLexer(new ANTLRNoCaseStringStream(sql));\n+\n+        CommonTokenStream tokenStream = new CommonTokenStream(lexer);\n+\n+        MySqlParser parser = new MySqlParser(tokenStream);\n+\n+        MySqlParser.RootContext rootContext = parser.root();\n+        sqlContext = new MySqlContext();\n+        sqlContext.setOriginalSQL(mySqlContext.getOriginalSQL());\n+        StatementSqlVisitor visitor = new StatementSqlVisitor(sqlContext);\n+        visitor.visit(rootContext);\n+    }\n+\n+\n+    @Override\n+    public SQLType getSQLType() {\n+        return SQLType.INSERT;\n+    }\n+\n+    @Override\n+    public String getTableAlias() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getTableName() {\n+        return sqlContext.tableName;\n+    }\n+\n+    @Override\n+    public String getOriginalSQL() {\n+        return sqlContext.getOriginalSQL();\n+    }\n+\n+    @Override\n+    public boolean insertColumnsIsEmpty() {\n+\n+        List<MySqlContext.SQL> insertColumnNames = sqlContext.getInsertColumnNames();\n+\n+        if (insertColumnNames.isEmpty()) return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c36313eecf859a6352a48067db80aebe9367782"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODU4NTk1OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwODowODo0OVrOHMbHQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwODowODo0OVrOHMbHQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc4OTE4NA==", "bodyText": "Please do not change the style.", "url": "https://github.com/seata/seata/pull/2933#discussion_r482789184", "createdAt": "2020-09-03T08:08:49Z", "author": {"login": "l81893521"}, "path": "pom.xml", "diffHunk": "@@ -269,7 +269,9 @@\n                                     <failOnMissing>false</failOnMissing>\n                                     <licenseMerges>\n                                         <licenseMerge>Apache License, Version 2.0|The Apache Software License, Version\n-                                            2.0|ASF 2.0|Apache 2|Apache-2.0|Apache 2.0 License|Apache 2.0|Apache License v2.0|Apache License 2.0|The Apache License, Version 2.0|The Apache Software License, Version 2.0\n+                                            2.0|ASF 2.0|Apache 2|Apache-2.0|Apache 2.0 License|Apache 2.0|Apache License", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce6f8b0c14b44dc7bba129a0345b3bbfb4ced63b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjA2OTU4OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMToyMjoyOFrOHM8ZmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwMToyMjoyOFrOHM8ZmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMzNDU1Mw==", "bodyText": "I think this class should not exclude.", "url": "https://github.com/seata/seata/pull/2933#discussion_r483334553", "createdAt": "2020-09-04T01:22:28Z", "author": {"login": "l81893521"}, "path": "pom.xml", "diffHunk": "@@ -319,6 +319,9 @@\n                             </includes>\n                             <excludes>\n                                 <exclude>**/generated/**</exclude>\n+                                <exclude>**/antlr/mysql/parser/*.*</exclude>\n+                                <exclude>**/antlr/mysql/antlr/*.*</exclude>\n+                                <exclude>**/antlr/mysql/stream/ANTLRNoCaseStringStream.java</exclude>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c4094f5f7e13ebd44858b211fbfa52d0d2e6e89"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzIwMTY0OnYy", "diffSide": "RIGHT", "path": "bom/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzoxODoyNVrOHvhddQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTozMzozMFrOHvl-rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU5MzMzMw==", "bodyText": "Please don't change the druid version.", "url": "https://github.com/seata/seata/pull/2933#discussion_r519593333", "createdAt": "2020-11-09T07:18:25Z", "author": {"login": "l81893521"}, "path": "bom/pom.xml", "diffHunk": "@@ -97,6 +97,8 @@\n         <sofa.registry.version>5.2.0</sofa.registry.version>\n         <httpclient.version>4.5.8</httpclient.version>\n         <httpcore.version>4.4.11</httpcore.version>\n+        <druid.version>1.1.12</druid.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56786c664f79137b58592249403bd1d05667efb1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2NzM3NQ==", "bodyText": "The druid version has been rolled back", "url": "https://github.com/seata/seata/pull/2933#discussion_r519667375", "createdAt": "2020-11-09T09:33:30Z", "author": {"login": "h-zhi"}, "path": "bom/pom.xml", "diffHunk": "@@ -97,6 +97,8 @@\n         <sofa.registry.version>5.2.0</sofa.registry.version>\n         <httpclient.version>4.5.8</httpclient.version>\n         <httpcore.version>4.4.11</httpcore.version>\n+        <druid.version>1.1.12</druid.version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU5MzMzMw=="}, "originalCommit": {"oid": "56786c664f79137b58592249403bd1d05667efb1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzIwNTE0OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzoxOToxM1rOHvhfog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTozOToyMlrOHvmNsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU5Mzg5MA==", "bodyText": "Please revert here.", "url": "https://github.com/seata/seata/pull/2933#discussion_r519593890", "createdAt": "2020-11-09T07:19:13Z", "author": {"login": "l81893521"}, "path": "pom.xml", "diffHunk": "@@ -337,7 +340,8 @@\n                                 <phase>validate</phase>\n                                 <configuration>\n                                     <configLocation>${user.dir}/style/seata_checkstyle.xml</configLocation>\n-                                    <suppressionsLocation>${user.dir}/style/seata_suppressions.xml</suppressionsLocation>\n+                                    <suppressionsLocation>${user.dir}/style/seata_suppressions.xml", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56786c664f79137b58592249403bd1d05667efb1"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3MTIxNg==", "bodyText": "pom space indentation has been processed", "url": "https://github.com/seata/seata/pull/2933#discussion_r519671216", "createdAt": "2020-11-09T09:39:22Z", "author": {"login": "h-zhi"}, "path": "pom.xml", "diffHunk": "@@ -337,7 +340,8 @@\n                                 <phase>validate</phase>\n                                 <configuration>\n                                     <configLocation>${user.dir}/style/seata_checkstyle.xml</configLocation>\n-                                    <suppressionsLocation>${user.dir}/style/seata_suppressions.xml</suppressionsLocation>\n+                                    <suppressionsLocation>${user.dir}/style/seata_suppressions.xml", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU5Mzg5MA=="}, "originalCommit": {"oid": "56786c664f79137b58592249403bd1d05667efb1"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzIyMTcwOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzoyMjo1OFrOHvhqGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTozOToxOFrOHvmNgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU5NjU2OQ==", "bodyText": "Please reset here.", "url": "https://github.com/seata/seata/pull/2933#discussion_r519596569", "createdAt": "2020-11-09T07:22:58Z", "author": {"login": "l81893521"}, "path": "pom.xml", "diffHunk": "@@ -368,7 +372,8 @@\n                 <artifactId>protobuf-maven-plugin</artifactId>\n                 <version>${protobuf-maven-plugin.version}</version>\n                 <configuration>\n-                    <protoSourceRoot>${project.basedir}/src/main/resources/protobuf/io/seata/protocol/transcation/</protoSourceRoot>\n+                    <protoSourceRoot>${project.basedir}/src/main/resources/protobuf/io/seata/protocol/transcation/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56786c664f79137b58592249403bd1d05667efb1"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3MTE2OA==", "bodyText": "pom space indentation has been processed", "url": "https://github.com/seata/seata/pull/2933#discussion_r519671168", "createdAt": "2020-11-09T09:39:18Z", "author": {"login": "h-zhi"}, "path": "pom.xml", "diffHunk": "@@ -368,7 +372,8 @@\n                 <artifactId>protobuf-maven-plugin</artifactId>\n                 <version>${protobuf-maven-plugin.version}</version>\n                 <configuration>\n-                    <protoSourceRoot>${project.basedir}/src/main/resources/protobuf/io/seata/protocol/transcation/</protoSourceRoot>\n+                    <protoSourceRoot>${project.basedir}/src/main/resources/protobuf/io/seata/protocol/transcation/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU5NjU2OQ=="}, "originalCommit": {"oid": "56786c664f79137b58592249403bd1d05667efb1"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzI5NTA3OnYy", "diffSide": "RIGHT", "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/SQLOperateRecognizerHolderFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzo0NjozNlrOHviVvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMDozMDoxMVrOHvoOxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYwNzc0Mw==", "bodyText": "EnhancedServiceLoader  already handle singleton, you can check SQLOperateRecognizerHolderFactory in druild.", "url": "https://github.com/seata/seata/pull/2933#discussion_r519607743", "createdAt": "2020-11-09T07:46:36Z", "author": {"login": "l81893521"}, "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/SQLOperateRecognizerHolderFactory.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr;\n+\n+import io.seata.common.loader.EnhancedServiceLoader;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * The SQLOperateRecognizerHolderFactory\n+ *\n+ * @author: Zhibei Hao\n+ */\n+public class SQLOperateRecognizerHolderFactory {\n+\n+    private static final Map<String, SQLOperateRecognizerHolder> RECOGNIZER_HOLDER_MAP = new ConcurrentHashMap<>();\n+\n+    /**\n+     * get SQLOperateRecognizer by db type\n+     *\n+     * @param dbType the db type\n+     * @return the SQLOperateRecognizer\n+     */\n+    public static SQLOperateRecognizerHolder getSQLRecognizerHolder(String dbType) {\n+        if (RECOGNIZER_HOLDER_MAP.get(dbType) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56786c664f79137b58592249403bd1d05667efb1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcwNDI2MQ==", "bodyText": "already processed", "url": "https://github.com/seata/seata/pull/2933#discussion_r519704261", "createdAt": "2020-11-09T10:30:11Z", "author": {"login": "h-zhi"}, "path": "sqlparser/seata-sqlparser-antlr/src/main/java/io/seata/sqlparser/antlr/SQLOperateRecognizerHolderFactory.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.sqlparser.antlr;\n+\n+import io.seata.common.loader.EnhancedServiceLoader;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * The SQLOperateRecognizerHolderFactory\n+ *\n+ * @author: Zhibei Hao\n+ */\n+public class SQLOperateRecognizerHolderFactory {\n+\n+    private static final Map<String, SQLOperateRecognizerHolder> RECOGNIZER_HOLDER_MAP = new ConcurrentHashMap<>();\n+\n+    /**\n+     * get SQLOperateRecognizer by db type\n+     *\n+     * @param dbType the db type\n+     * @return the SQLOperateRecognizer\n+     */\n+    public static SQLOperateRecognizerHolder getSQLRecognizerHolder(String dbType) {\n+        if (RECOGNIZER_HOLDER_MAP.get(dbType) != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYwNzc0Mw=="}, "originalCommit": {"oid": "56786c664f79137b58592249403bd1d05667efb1"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1388, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}