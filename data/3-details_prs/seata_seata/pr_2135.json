{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MjAzMDAy", "number": 2135, "title": "feature: support SPI scope", "bodyText": "\u2160. Describe what this PR did\nOptimize SPI\n1.Provide unified caching for singleton extension\n2..Support to distinguish singleton and multiple when load extension\n3..Adjust the original code to load the extension using the new API\n\u2161. Does this pull request fix one issue?\n#2346\n\u2162. Why don't you add test cases (unit test/integration test)?\n\u2163. Describe how to verify it\n\u2164. Special notes for reviews\nNote that when loading an extension now, the activateName is case sensitive.\nTODO:\nThe caller's redundant code  which used to load  and cache the extension themselves will be  optimized later.", "createdAt": "2020-01-04T10:34:57Z", "url": "https://github.com/seata/seata/pull/2135", "merged": true, "mergeCommit": {"oid": "8c4ca8fc4e8f1759c06ef1a26c31b1461a9749fe"}, "closed": true, "closedAt": "2020-03-24T12:23:16Z", "author": {"login": "booogu"}, "timelineItems": {"totalCount": 161, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOduefAH2gAyMzU5MjAzMDAyOjdlMGQ1YTgzNjNhNWNlODY2OWQ0YmE3OGJkNThiMmExZWQyMzhhNjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQpVQqAFqTM3OTk1NjYyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7e0d5a8363a5ce8669d4ba78bd58b2a1ed238a64", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/7e0d5a8363a5ce8669d4ba78bd58b2a1ed238a64", "committedDate": "2020-03-17T07:39:02Z", "message": "adjust EnhancedServiceLoader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f525d48690bf8c436406c50ce74487016634635b", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/f525d48690bf8c436406c50ce74487016634635b", "committedDate": "2020-03-17T07:39:06Z", "message": "Merge remote-tracking branch 'upstream/develop' into f_spi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f5428fdeade1a760b88b0536c1fb711ade195f8", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/5f5428fdeade1a760b88b0536c1fb711ade195f8", "committedDate": "2020-03-17T07:40:31Z", "message": "Merge branch 'f_spi' of https://github.com/CharmingRabbit/seata into f_spi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "846d9ec39a792431e90bc4bd271823b067b227b9", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/846d9ec39a792431e90bc4bd271823b067b227b9", "committedDate": "2020-03-18T01:27:34Z", "message": "optimize createInstance and make Holder private"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93a79ab6cb410d0afd9f02aeb4860ff9cd6b9371", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/93a79ab6cb410d0afd9f02aeb4860ff9cd6b9371", "committedDate": "2020-03-18T01:28:00Z", "message": "Merge remote-tracking branch 'upstream/develop' into f_spi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a252d5d774e3d27288aff7590dffc6449ddf149", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/2a252d5d774e3d27288aff7590dffc6449ddf149", "committedDate": "2020-03-18T02:24:45Z", "message": "format code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NTQ4ODM5", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-376548839", "createdAt": "2020-03-18T03:55:24Z", "commit": {"oid": "2a252d5d774e3d27288aff7590dffc6449ddf149"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMzo1NToyNFrOF31kXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMzo1NToyNFrOF31kXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5MzY2Mg==", "bodyText": "Since we have serviceClass, typeName is a little redundant.", "url": "https://github.com/seata/seata/pull/2135#discussion_r394093662", "createdAt": "2020-03-18T03:55:24Z", "author": {"login": "ggndnn"}, "path": "common/src/main/java/io/seata/common/loader/ExtensionDefinition.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.common.loader;\n+\n+import io.seata.common.util.StringUtils;\n+\n+/**\n+ * The type URL\n+ *\n+ * @author haozhibei\n+ */\n+class ExtensionDefinition {\n+    private String name;\n+    private String typeName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a252d5d774e3d27288aff7590dffc6449ddf149"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NTU0MTkz", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-376554193", "createdAt": "2020-03-18T04:15:44Z", "commit": {"oid": "2a252d5d774e3d27288aff7590dffc6449ddf149"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoxNTo0NFrOF312EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoxNTo0NFrOF312EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5ODE5Mg==", "bodyText": "Format correctly.", "url": "https://github.com/seata/seata/pull/2135#discussion_r394098192", "createdAt": "2020-03-18T04:15:44Z", "author": {"login": "ggndnn"}, "path": "core/src/main/java/io/seata/core/store/StoreMode.java", "diffHunk": "@@ -25,26 +25,35 @@\n     /**\n      * file store\n      */\n-    FILE,\n+    FILE(\"file\"),\n \n     /**\n      * database store\n      */\n-    DB;\n+    DB(\"db\");\n+\n+    private String name;\n+\n+    StoreMode(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n \n     /**\n-     * Valueof store mode.\n-     *\n-     * @param mode the mode\n-     * @return the store mode\n+     * get value of store mode\n+      * @param name the mode name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a252d5d774e3d27288aff7590dffc6449ddf149"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NTU1NDMw", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-376555430", "createdAt": "2020-03-18T04:20:05Z", "commit": {"oid": "2a252d5d774e3d27288aff7590dffc6449ddf149"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoyMDowNVrOF3156w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoyMDowNVrOF3156w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5OTE3OQ==", "bodyText": "This kind modification is not necessary.", "url": "https://github.com/seata/seata/pull/2135#discussion_r394099179", "createdAt": "2020-03-18T04:20:05Z", "author": {"login": "ggndnn"}, "path": "core/src/main/java/io/seata/core/serializer/SerializerFactory.java", "diffHunk": "@@ -72,4 +72,4 @@ public static Serializer getSerializer(byte serializeCode) {\n         return getSerializer(codec).deserialize(bytes);\n     }\n \n-}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a252d5d774e3d27288aff7590dffc6449ddf149"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NTU2OTUx", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-376556951", "createdAt": "2020-03-18T04:26:25Z", "commit": {"oid": "2a252d5d774e3d27288aff7590dffc6449ddf149"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoyNjoyNVrOF31--g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoyNjoyNVrOF31--g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwMDQ3NA==", "bodyText": "Just a question about this kind modification. Why not ignore case in EnhancedServiceLoader#load, keeping the original enum implementation unchanged?", "url": "https://github.com/seata/seata/pull/2135#discussion_r394100474", "createdAt": "2020-03-18T04:26:25Z", "author": {"login": "ggndnn"}, "path": "metrics/seata-metrics-core/src/main/java/io/seata/metrics/exporter/ExporterType.java", "diffHunk": "@@ -26,7 +26,17 @@\n     /**\n      * Export metrics data to Prometheus\n      */\n-    PROMETHEUS;\n+    PROMETHEUS(\"prometheus\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a252d5d774e3d27288aff7590dffc6449ddf149"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NTU4MDk1", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-376558095", "createdAt": "2020-03-18T04:31:12Z", "commit": {"oid": "2a252d5d774e3d27288aff7590dffc6449ddf149"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDozMToxMlrOF32C3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDozMToxMlrOF32C3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwMTQ2OA==", "bodyText": "I think there is no uniform format style yet, so it's better to keep it unchanged.", "url": "https://github.com/seata/seata/pull/2135#discussion_r394101468", "createdAt": "2020-03-18T04:31:12Z", "author": {"login": "ggndnn"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/KeywordCheckerFactory.java", "diffHunk": "@@ -39,8 +39,9 @@ public static KeywordChecker getKeywordChecker(String dbType) {\n         if (KEYWORD_CHECKER_MAP.get(dbType) != null) {\n             return KEYWORD_CHECKER_MAP.get(dbType);\n         }\n-        KeywordChecker tableMetaCache = EnhancedServiceLoader.load(KeywordChecker.class, dbType);\n+        KeywordChecker tableMetaCache =\n+                EnhancedServiceLoader.load(KeywordChecker.class, dbType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a252d5d774e3d27288aff7590dffc6449ddf149"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NTU4OTY3", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-376558967", "createdAt": "2020-03-18T04:34:56Z", "commit": {"oid": "2a252d5d774e3d27288aff7590dffc6449ddf149"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDozNDo1NlrOF32FxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDozNDo1NlrOF32FxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwMjIxMw==", "bodyText": "Try to keep the format as original as possible and reduce modification.", "url": "https://github.com/seata/seata/pull/2135#discussion_r394102213", "createdAt": "2020-03-18T04:34:56Z", "author": {"login": "ggndnn"}, "path": "server/src/main/java/io/seata/server/session/SessionHolder.java", "diffHunk": "@@ -89,15 +89,19 @@ public static void init(String mode) throws IOException {\n             mode = CONFIG.getConfig(ConfigurationKeys.STORE_MODE);\n         }\n         //the store mode\n-        StoreMode storeMode = StoreMode.valueof(mode);\n+        StoreMode storeMode = StoreMode.get(mode);\n         if (StoreMode.DB.equals(storeMode)) {\n             //database store\n-            ROOT_SESSION_MANAGER = EnhancedServiceLoader.load(SessionManager.class, StoreMode.DB.name());\n-            ASYNC_COMMITTING_SESSION_MANAGER = EnhancedServiceLoader.load(SessionManager.class, StoreMode.DB.name(),\n+            ROOT_SESSION_MANAGER =\n+                    EnhancedServiceLoader.load(SessionManager.class, StoreMode.DB.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a252d5d774e3d27288aff7590dffc6449ddf149"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NTU5Mjgw", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-376559280", "createdAt": "2020-03-18T04:36:12Z", "commit": {"oid": "2a252d5d774e3d27288aff7590dffc6449ddf149"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDozNjoxM1rOF32GuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDozNjoxM1rOF32GuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwMjQ1Ng==", "bodyText": "Is 200 not enough?", "url": "https://github.com/seata/seata/pull/2135#discussion_r394102456", "createdAt": "2020-03-18T04:36:13Z", "author": {"login": "ggndnn"}, "path": "server/src/test/java/io/seata/server/coordinator/DefaultCoordinatorMetricsTest.java", "diffHunk": "@@ -67,7 +67,7 @@ public void test() throws IOException, TransactionException, InterruptedExceptio\n             coordinator.doGlobalCommit(commitRequest, new GlobalCommitResponse(), new RpcContext());\n \n             //we need sleep for a short while because default canBeCommittedAsync() is true\n-            Thread.sleep(200);\n+            Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a252d5d774e3d27288aff7590dffc6449ddf149"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a232b4435388f87f69c78bf2ba22298bc64a0803", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/a232b4435388f87f69c78bf2ba22298bc64a0803", "committedDate": "2020-03-18T10:01:16Z", "message": "format code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23a6d2d720cada5cb7643ea4ea0f159d614cb8d0", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/23a6d2d720cada5cb7643ea4ea0f159d614cb8d0", "committedDate": "2020-03-18T10:08:33Z", "message": "remove unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cc40951dec54ff0fad40352048ed14c285583a7", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/6cc40951dec54ff0fad40352048ed14c285583a7", "committedDate": "2020-03-19T11:48:00Z", "message": "restore test case to 200ms"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2472800ad60290786cd79abcf8f29d3c556fe25", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/c2472800ad60290786cd79abcf8f29d3c556fe25", "committedDate": "2020-03-19T11:48:26Z", "message": "Merge remote-tracking branch 'upstream/develop' into f_spi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f4fcac48fb2abb83189e531a8aba6a46e392d00", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/6f4fcac48fb2abb83189e531a8aba6a46e392d00", "committedDate": "2020-03-19T12:07:24Z", "message": "format code style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MjIwNjE1", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-378220615", "createdAt": "2020-03-20T03:47:24Z", "commit": {"oid": "6f4fcac48fb2abb83189e531a8aba6a46e392d00"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMzo0NzoyNFrOF5HAyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMzo0NzoyNFrOF5HAyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyODA0Mw==", "bodyText": "Wrong class name.", "url": "https://github.com/seata/seata/pull/2135#discussion_r395428043", "createdAt": "2020-03-20T03:47:24Z", "author": {"login": "ggndnn"}, "path": "common/src/main/java/io/seata/common/loader/ExtensionDefinition.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.common.loader;\n+\n+import io.seata.common.util.StringUtils;\n+\n+/**\n+ * The type URL", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f4fcac48fb2abb83189e531a8aba6a46e392d00"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MjIwOTk3", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-378220997", "createdAt": "2020-03-20T03:48:54Z", "commit": {"oid": "6f4fcac48fb2abb83189e531a8aba6a46e392d00"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMzo0ODo1NFrOF5HCOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMzo0ODo1NFrOF5HCOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyODQxMA==", "bodyText": "Sub class is not allowed?", "url": "https://github.com/seata/seata/pull/2135#discussion_r395428410", "createdAt": "2020-03-20T03:48:54Z", "author": {"login": "ggndnn"}, "path": "common/src/main/java/io/seata/common/loader/ExtensionDefinition.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.common.loader;\n+\n+import io.seata.common.util.StringUtils;\n+\n+/**\n+ * The type URL\n+ *\n+ * @author haozhibei\n+ */\n+class ExtensionDefinition {\n+    private String name;\n+    private Class serviceClass;\n+    private Integer order;\n+    private Scope scope;\n+\n+    public Integer getOrder() {\n+        return this.order;\n+    }\n+\n+    public void setOrder(Integer order) {\n+        this.order = order;\n+    }\n+\n+    public Class getServiceClass() {\n+        return this.serviceClass;\n+    }\n+\n+    public void setServiceClass(Class clazz) {\n+        this.serviceClass = clazz;\n+    }\n+\n+    public Scope getScope() {\n+        return this.scope;\n+    }\n+\n+    public void setScope(Scope scope) {\n+        this.scope = scope;\n+    }\n+\n+    public ExtensionDefinition(String name, Integer order, Scope scope, Class clazz) {\n+        this.name = name;\n+        this.order = order;\n+        this.scope = scope;\n+        this.serviceClass = clazz;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + ((name == null) ? 0 : name.hashCode());\n+        result = prime * result + ((serviceClass == null) ? 0 : serviceClass.hashCode());\n+        result = prime * result + ((order == null) ? 0 : order.hashCode());\n+        result = prime * result + ((scope == null) ? 0 : scope.hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f4fcac48fb2abb83189e531a8aba6a46e392d00"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MjIxMTcz", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-378221173", "createdAt": "2020-03-20T03:49:46Z", "commit": {"oid": "6f4fcac48fb2abb83189e531a8aba6a46e392d00"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMzo0OTo0NlrOF5HCww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMzo0OTo0NlrOF5HCww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyODU0Nw==", "bodyText": "Can be optimized to return !scope.equals(other.scope.", "url": "https://github.com/seata/seata/pull/2135#discussion_r395428547", "createdAt": "2020-03-20T03:49:46Z", "author": {"login": "ggndnn"}, "path": "common/src/main/java/io/seata/common/loader/ExtensionDefinition.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.common.loader;\n+\n+import io.seata.common.util.StringUtils;\n+\n+/**\n+ * The type URL\n+ *\n+ * @author haozhibei\n+ */\n+class ExtensionDefinition {\n+    private String name;\n+    private Class serviceClass;\n+    private Integer order;\n+    private Scope scope;\n+\n+    public Integer getOrder() {\n+        return this.order;\n+    }\n+\n+    public void setOrder(Integer order) {\n+        this.order = order;\n+    }\n+\n+    public Class getServiceClass() {\n+        return this.serviceClass;\n+    }\n+\n+    public void setServiceClass(Class clazz) {\n+        this.serviceClass = clazz;\n+    }\n+\n+    public Scope getScope() {\n+        return this.scope;\n+    }\n+\n+    public void setScope(Scope scope) {\n+        this.scope = scope;\n+    }\n+\n+    public ExtensionDefinition(String name, Integer order, Scope scope, Class clazz) {\n+        this.name = name;\n+        this.order = order;\n+        this.scope = scope;\n+        this.serviceClass = clazz;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        result = prime * result + ((name == null) ? 0 : name.hashCode());\n+        result = prime * result + ((serviceClass == null) ? 0 : serviceClass.hashCode());\n+        result = prime * result + ((order == null) ? 0 : order.hashCode());\n+        result = prime * result + ((scope == null) ? 0 : scope.hashCode());\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        ExtensionDefinition other = (ExtensionDefinition)obj;\n+        if (!StringUtils.equals(name, other.name)) {\n+            return false;\n+        }\n+        if (!serviceClass.equals(other.serviceClass)) {\n+            return false;\n+        }\n+        if (!order.equals(other.order)) {\n+            return false;\n+        }\n+        if (!scope.equals(other.scope)) {\n+            return false;\n+        }\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f4fcac48fb2abb83189e531a8aba6a46e392d00"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MjIxNTIy", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-378221522", "createdAt": "2020-03-20T03:51:42Z", "commit": {"oid": "6f4fcac48fb2abb83189e531a8aba6a46e392d00"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMzo1MTo0MlrOF5HEBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMzo1MTo0MlrOF5HEBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyODg3MA==", "bodyText": "Wrong usage of assertThat, should be assertThat(xxxx).isTrue() or assertThat(xxxx).isFalse().", "url": "https://github.com/seata/seata/pull/2135#discussion_r395428870", "createdAt": "2020-03-20T03:51:42Z", "author": {"login": "ggndnn"}, "path": "common/src/test/java/io/seata/common/loader/EnhancedServiceLoaderTest.java", "diffHunk": "@@ -98,4 +98,32 @@ public void getAllExtensionClass1() {\n         assertThat(allExtensionClass).isNotEmpty();\n     }\n \n+    @Test\n+    public void getSingletonExtensionInstance(){\n+        Hello hello1 = EnhancedServiceLoader.load(Hello.class, \"ChineseHello\");\n+        Hello hello2 = EnhancedServiceLoader.load(Hello.class, \"ChineseHello\");\n+        assertThat(hello1 == hello2);\n+    }\n+\n+    @Test\n+    public void getMultipleExtensionInstance(){\n+        Hello hello1 = EnhancedServiceLoader.load(Hello.class, \"LatinHello\");\n+        Hello hello2 = EnhancedServiceLoader.load(Hello.class, \"LatinHello\");\n+        assertThat(hello1 != hello2);\n+    }\n+\n+    @Test\n+    public void getAllInstances(){\n+        List<Hello> hellows1 = EnhancedServiceLoader.loadAll(Hello.class);\n+        List<Hello> hellows2 = EnhancedServiceLoader.loadAll(Hello.class);\n+        for (Hello hello : hellows1){\n+            if(hello.say()!=\"Ol\u00e1.\"){\n+                assertThat(hellows2.contains(hello));\n+            }\n+            else{\n+                assertThat(!hellows2.contains(hello));\n+            }\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f4fcac48fb2abb83189e531a8aba6a46e392d00"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MjIxNjQy", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-378221642", "createdAt": "2020-03-20T03:52:20Z", "commit": {"oid": "6f4fcac48fb2abb83189e531a8aba6a46e392d00"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMzo1MjoyMFrOF5HEWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMzo1MjoyMFrOF5HEWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyODk1NA==", "bodyText": "LatinHello is SINGLETON not PROTOTYPE.", "url": "https://github.com/seata/seata/pull/2135#discussion_r395428954", "createdAt": "2020-03-20T03:52:20Z", "author": {"login": "ggndnn"}, "path": "common/src/test/java/io/seata/common/loader/EnhancedServiceLoaderTest.java", "diffHunk": "@@ -98,4 +98,32 @@ public void getAllExtensionClass1() {\n         assertThat(allExtensionClass).isNotEmpty();\n     }\n \n+    @Test\n+    public void getSingletonExtensionInstance(){\n+        Hello hello1 = EnhancedServiceLoader.load(Hello.class, \"ChineseHello\");\n+        Hello hello2 = EnhancedServiceLoader.load(Hello.class, \"ChineseHello\");\n+        assertThat(hello1 == hello2);\n+    }\n+\n+    @Test\n+    public void getMultipleExtensionInstance(){\n+        Hello hello1 = EnhancedServiceLoader.load(Hello.class, \"LatinHello\");\n+        Hello hello2 = EnhancedServiceLoader.load(Hello.class, \"LatinHello\");\n+        assertThat(hello1 != hello2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f4fcac48fb2abb83189e531a8aba6a46e392d00"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MjIyMDYw", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-378222060", "createdAt": "2020-03-20T03:54:16Z", "commit": {"oid": "6f4fcac48fb2abb83189e531a8aba6a46e392d00"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMzo1NDoxN1rOF5HFtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMzo1NDoxN1rOF5HFtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyOTMwMg==", "bodyText": "I think all setters here are useless, should be removed.", "url": "https://github.com/seata/seata/pull/2135#discussion_r395429302", "createdAt": "2020-03-20T03:54:17Z", "author": {"login": "ggndnn"}, "path": "common/src/main/java/io/seata/common/loader/ExtensionDefinition.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.common.loader;\n+\n+import io.seata.common.util.StringUtils;\n+\n+/**\n+ * The type URL\n+ *\n+ * @author haozhibei\n+ */\n+class ExtensionDefinition {\n+    private String name;\n+    private Class serviceClass;\n+    private Integer order;\n+    private Scope scope;\n+\n+    public Integer getOrder() {\n+        return this.order;\n+    }\n+\n+    public void setOrder(Integer order) {\n+        this.order = order;\n+    }\n+\n+    public Class getServiceClass() {\n+        return this.serviceClass;\n+    }\n+\n+    public void setServiceClass(Class clazz) {\n+        this.serviceClass = clazz;\n+    }\n+\n+    public Scope getScope() {\n+        return this.scope;\n+    }\n+\n+    public void setScope(Scope scope) {\n+        this.scope = scope;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f4fcac48fb2abb83189e531a8aba6a46e392d00"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MjIyMzMx", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-378222331", "createdAt": "2020-03-20T03:55:42Z", "commit": {"oid": "6f4fcac48fb2abb83189e531a8aba6a46e392d00"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMzo1NTo0M1rOF5HGmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMzo1NTo0M1rOF5HGmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyOTUzMQ==", "bodyText": "Should keep format unchanged as before, missing space character here.", "url": "https://github.com/seata/seata/pull/2135#discussion_r395429531", "createdAt": "2020-03-20T03:55:43Z", "author": {"login": "ggndnn"}, "path": "common/src/test/java/io/seata/common/loader/EnhancedServiceLoaderTest.java", "diffHunk": "@@ -34,8 +34,8 @@\n      */\n     @Test\n     public void testLoadByClassAndClassLoader() {\n-        Hello load = EnhancedServiceLoader.load(Hello.class, Hello.class.getClassLoader());\n-        Assertions.assertEquals(load.say(), \"Bonjour\");\n+        Hello load = EnhancedServiceLoader.load(Hello.class,Hello.class.getClassLoader());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f4fcac48fb2abb83189e531a8aba6a46e392d00"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MjIyMzY1", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-378222365", "createdAt": "2020-03-20T03:55:52Z", "commit": {"oid": "6f4fcac48fb2abb83189e531a8aba6a46e392d00"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMzo1NTo1M1rOF5HGxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMzo1NTo1M1rOF5HGxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyOTU3NA==", "bodyText": "Should keep format unchanged as before, missing space character here.", "url": "https://github.com/seata/seata/pull/2135#discussion_r395429574", "createdAt": "2020-03-20T03:55:53Z", "author": {"login": "ggndnn"}, "path": "common/src/test/java/io/seata/common/loader/EnhancedServiceLoaderTest.java", "diffHunk": "@@ -54,15 +54,15 @@ public void testLoadException() {\n     @Test\n     public void testLoadByClass() {\n         Hello load = EnhancedServiceLoader.load(Hello.class);\n-        assertThat(load.say()).isEqualTo(\"Bonjour\");\n+        assertThat(load.say()).isEqualTo(\"Ol\u00e1.\");\n     }\n \n     /**\n      * Test load by class and activate name.\n      */\n     @Test\n     public void testLoadByClassAndActivateName() {\n-        Hello englishHello = EnhancedServiceLoader.load(Hello.class, \"EnglishHello\");\n+        Hello englishHello = EnhancedServiceLoader.load(Hello.class,\"EnglishHello\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f4fcac48fb2abb83189e531a8aba6a46e392d00"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MjIzMjEz", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-378223213", "createdAt": "2020-03-20T04:00:14Z", "commit": {"oid": "6f4fcac48fb2abb83189e531a8aba6a46e392d00"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNDowMDoxNFrOF5HJeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNDowMDoxNFrOF5HJeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzMDI2Ng==", "bodyText": "Format issue here.", "url": "https://github.com/seata/seata/pull/2135#discussion_r395430266", "createdAt": "2020-03-20T04:00:14Z", "author": {"login": "ggndnn"}, "path": "core/src/main/java/io/seata/core/store/StoreMode.java", "diffHunk": "@@ -25,26 +25,35 @@\n     /**\n      * file store\n      */\n-    FILE,\n+    FILE(\"file\"),\n \n     /**\n      * database store\n      */\n-    DB;\n+    DB(\"db\");\n+\n+    private String name;\n+\n+    StoreMode(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n \n     /**\n-     * Valueof store mode.\n-     *\n-     * @param mode the mode\n-     * @return the store mode\n+     * get value of store mode\n+     * @param name the mode name\n+     *  @return the store mode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f4fcac48fb2abb83189e531a8aba6a46e392d00"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MjIzNDQ0", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-378223444", "createdAt": "2020-03-20T04:01:24Z", "commit": {"oid": "6f4fcac48fb2abb83189e531a8aba6a46e392d00"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNDowMToyNFrOF5HKXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNDowMToyNFrOF5HKXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzMDQ5Mw==", "bodyText": "Should keep format unchanged as before, redundant tab character here.", "url": "https://github.com/seata/seata/pull/2135#discussion_r395430493", "createdAt": "2020-03-20T04:01:24Z", "author": {"login": "ggndnn"}, "path": "server/src/main/java/io/seata/server/lock/db/DataBaseLocker.java", "diffHunk": "@@ -50,8 +51,8 @@ public DataBaseLocker() {\n      * @param logStoreDataSource the log store data source\n      */\n     public DataBaseLocker(DataSource logStoreDataSource) {\n-        lockStore = EnhancedServiceLoader.load(LockStore.class, StoreMode.DB.name(), new Class[] {DataSource.class},\n-            new Object[] {logStoreDataSource});\n+        lockStore = EnhancedServiceLoader.load(LockStore.class, StoreMode.DB.getName(), new Class[] {DataSource.class},\n+                new Object[] {logStoreDataSource});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f4fcac48fb2abb83189e531a8aba6a46e392d00"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80151dc503eca9a69953df21af63650f9e569a28", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/80151dc503eca9a69953df21af63650f9e569a28", "committedDate": "2020-03-20T05:29:43Z", "message": "format some code and make ExtensionDefinition final"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "453c8c61e615ca1eb798c735123be10512ddacc9", "author": {"user": {"login": "zjinlei", "name": null}}, "url": "https://github.com/seata/seata/commit/453c8c61e615ca1eb798c735123be10512ddacc9", "committedDate": "2020-03-20T06:15:58Z", "message": "Merge branch 'develop' into f_spi"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NDEzMzYx", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-378413361", "createdAt": "2020-03-20T11:42:19Z", "commit": {"oid": "453c8c61e615ca1eb798c735123be10512ddacc9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMTo0MjoyMFrOF5QeGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMTo0MjoyMFrOF5QeGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU4MzAwMQ==", "bodyText": "As said before, this statement should be if (defaultExtensionDefinition == null || priority > highestLoadPriority).", "url": "https://github.com/seata/seata/pull/2135#discussion_r395583001", "createdAt": "2020-03-20T11:42:20Z", "author": {"login": "ggndnn"}, "path": "common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java", "diffHunk": "@@ -198,181 +173,445 @@\n      */\n     @SuppressWarnings(\"rawtypes\")\n     static <S> List<Class> getAllExtensionClass(Class<S> service, ClassLoader loader) {\n-        return findAllExtensionClass(service, null, loader);\n+        return InnerEnhancedServiceLoader.getServiceLoader(service).getAllExtensionClass(loader);\n     }\n \n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader) {\n-        return loadFile(service, activateName, loader, null, null);\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader, Class[] argTypes,\n-                                  Object[] args) {\n-        try {\n-            boolean foundFromCache = true;\n-            List<Class> extensions = providers.get(service);\n-            if (extensions == null) {\n-                synchronized (service) {\n-                    extensions = providers.get(service);\n-                    if (extensions == null) {\n-                        extensions = findAllExtensionClass(service, activateName, loader);\n-                        foundFromCache = false;\n-                        providers.put(service, extensions);\n-                    }\n+    private static class InnerEnhancedServiceLoader<S> {\n+        private static final Logger LOGGER = LoggerFactory.getLogger(EnhancedServiceLoader.class);\n+        private static final String SERVICES_DIRECTORY = \"META-INF/services/\";\n+        private static final String SEATA_DIRECTORY = \"META-INF/seata/\";\n+\n+        private static final ConcurrentMap<Class<?>, InnerEnhancedServiceLoader<?>> SERVICE_LOADERS =\n+                new ConcurrentHashMap<>();\n+\n+        private final Class<S> type;\n+        private final Holder<List<ExtensionDefinition>> definitionsHolder = new Holder<>();\n+        private final ConcurrentMap<ExtensionDefinition, Holder<Object>> definitionToInstanceMap =\n+                new ConcurrentHashMap<>();\n+        private final ConcurrentMap<String, List<ExtensionDefinition>> nameToDefinitionsMap = new ConcurrentHashMap<>();\n+        private final ConcurrentMap<Class<?>, ExtensionDefinition> classToDefinitionMap = new ConcurrentHashMap<>();\n+        private ExtensionDefinition defaultExtensionDefinition = null;\n+        private Integer highestLoadPriority = Integer.MIN_VALUE;\n+\n+        private InnerEnhancedServiceLoader(Class<S> type) {\n+            this.type = type;\n+        }\n+\n+        /**\n+         * Get the ServiceLoader for the specified Class\n+         *\n+         * @param type the type of the extension point\n+         * @param <S>  the type\n+         * @return the service loader\n+         */\n+        private static <S> InnerEnhancedServiceLoader<S> getServiceLoader(Class<S> type) {\n+            if (type == null) {\n+                throw new IllegalArgumentException(\"Enhanced Service type == null\");\n+            }\n+            InnerEnhancedServiceLoader<S> loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            if (loader == null) {\n+                SERVICE_LOADERS.putIfAbsent(type, new InnerEnhancedServiceLoader<S>(type));\n+                loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            }\n+            return loader;\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param loader the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(ClassLoader loader) throws EnhancedServiceNotFoundException {\n+            return loadExtension(loader, null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load() throws EnhancedServiceNotFoundException {\n+            return loadExtension(findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @param activateName the activate name\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName) throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param activateName the activate name\n+         * @param loader       the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName, ClassLoader loader)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, loader, null, null);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            Class[] argsType = null;\n+            if (args != null && args.length > 0) {\n+                argsType = new Class[args.length];\n+                for (int i = 0; i < args.length; i++) {\n+                    argsType[i] = args[i].getClass();\n                 }\n             }\n-            if (StringUtils.isNotEmpty(activateName)) {\n-                loadFile(service, SEATA_DIRECTORY + activateName.toLowerCase() + \"/\", loader, extensions);\n-\n-                List<Class> activateExtensions = new ArrayList<>();\n-                for (Class clz : extensions) {\n-                    @SuppressWarnings(\"unchecked\")\n-                    LoadLevel activate = (LoadLevel) clz.getAnnotation(LoadLevel.class);\n-                    if (activate != null && activateName.equalsIgnoreCase(activate.name())) {\n-                        activateExtensions.add(clz);\n-                    }\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param argsType     the args type\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName, Class[] argsType, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @return list list\n+         */\n+        private List<S> loadAll() {\n+            return loadAll(null, null);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @param argsType the args type\n+         * @param args     the args\n+         * @return list list\n+         */\n+        private List<S> loadAll(Class[] argsType, Object[] args) {\n+            List<S> allInstances = new ArrayList<>();\n+            List<Class> allClazzs = getAllExtensionClass();\n+            if (CollectionUtils.isEmpty(allClazzs)) {\n+                return allInstances;\n+            }\n+            try {\n+                for (Class clazz : allClazzs) {\n+                    ExtensionDefinition definition = classToDefinitionMap.get(clazz);\n+                    allInstances.add(getExtensionInstance(definition, findClassLoader(), argsType, args));\n                 }\n+            } catch (Throwable t) {\n+                throw new EnhancedServiceNotFoundException(t);\n+            }\n+            return allInstances;\n+        }\n \n-                extensions = activateExtensions;\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        private List<Class> getAllExtensionClass() {\n+            return loadAllExtensionClass(findClassLoader());\n+        }\n+\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @param loader the loader\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        private List<Class> getAllExtensionClass(ClassLoader loader) {\n+            return loadAllExtensionClass(loader);\n+        }\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            try {\n+                loadAllExtensionClass(loader);\n+                return getExtensionInstance(defaultExtensionDefinition, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n+        }\n \n-            if (extensions.isEmpty()) {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \"[\" + activateName\n-                        + \"] and classloader : \" + ObjectUtils.toString(loader));\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(String activateName, ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            if (io.seata.common.util.StringUtils.isEmpty(activateName)) {\n+                throw new IllegalArgumentException(\"the name of service provider for [\" + type.getName() + \"] name is null\");\n+            }\n+            try {\n+                loadAllExtensionClass(loader);\n+                ExtensionDefinition cachedExtensionDefinition = getCachedExtensionDefinition(activateName);\n+                return getExtensionInstance(cachedExtensionDefinition, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n-            Class<?> extension = extensions.get(extensions.size() - 1);\n-            S result = initInstance(service, extension, argTypes, args);\n-            if (!foundFromCache && LOGGER.isInfoEnabled()) {\n-                LOGGER.info(\"load \" + service.getSimpleName() + \"[\" + activateName + \"] extension by class[\" + extension\n-                    .getName() + \"]\");\n+        }\n+\n+        private S getExtensionInstance(ExtensionDefinition definition, ClassLoader loader, Class[] argTypes,\n+                                       Object[] args) {\n+            if (definition == null) {\n+                throw new EnhancedServiceNotFoundException(\"not found service provider for : \" + type.getName());\n             }\n-            return result;\n-        } catch (Throwable e) {\n-            if (e instanceof EnhancedServiceNotFoundException) {\n-                throw (EnhancedServiceNotFoundException)e;\n+            if (Scope.SINGLETON.equals(definition.getScope())) {\n+                Holder<Object> holder = definitionToInstanceMap.get(definition);\n+                if (holder == null) {\n+                    definitionToInstanceMap.putIfAbsent(definition, new Holder<>());\n+                    holder = definitionToInstanceMap.get(definition);\n+                }\n+                Object instance = holder.get();\n+                if (instance == null) {\n+                    synchronized (holder) {\n+                        instance = holder.get();\n+                        if (instance == null) {\n+                            instance = createNewExtension(definition, loader, argTypes, args);\n+                            holder.set(instance);\n+                        }\n+                    }\n+                }\n+                return (S)instance;\n             } else {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \" caused by \" + ExceptionUtils\n-                        .getFullStackTrace(e));\n+                return createNewExtension(definition, loader, argTypes, args);\n             }\n         }\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> List<Class> findAllExtensionClass(Class<S> service, String activateName, ClassLoader loader) {\n-        List<Class> extensions = new ArrayList<>();\n-        try {\n-            loadFile(service, SERVICES_DIRECTORY, loader, extensions);\n-            loadFile(service, SEATA_DIRECTORY, loader, extensions);\n-        } catch (IOException e) {\n-            throw new EnhancedServiceNotFoundException(e);\n+        private S createNewExtension(ExtensionDefinition definition, ClassLoader loader, Class[] argTypes, Object[] args) {\n+            loadAllExtensionClass(loader);\n+            Class<?> clazz = definition.getServiceClass();\n+            try {\n+                S newInstance = initInstance(clazz, argTypes, args);\n+                return newInstance;\n+            } catch (Throwable t) {\n+                throw new IllegalStateException(\"Extension instance(definition: \" + definition + \", class: \" +\n+                        type + \")  could not be instantiated: \" + t.getMessage(), t);\n+            }\n         }\n \n-        if (extensions.isEmpty()) {\n-            return extensions;\n-        }\n-        extensions.sort((c1, c2) -> {\n-            int o1 = 0;\n-            int o2 = 0;\n-            @SuppressWarnings(\"unchecked\")\n-            LoadLevel a1 = (LoadLevel) c1.getAnnotation(LoadLevel.class);\n-            @SuppressWarnings(\"unchecked\")\n-            LoadLevel a2 = (LoadLevel) c2.getAnnotation(LoadLevel.class);\n-\n-            if (a1 != null) {\n-                o1 = a1.order();\n+        private List<Class> loadAllExtensionClass(ClassLoader loader) {\n+            List<Class> result;\n+            List<ExtensionDefinition> definitions = definitionsHolder.get();\n+            if (definitions == null) {\n+                synchronized (definitionsHolder) {\n+                    definitions = definitionsHolder.get();\n+                    if (definitions == null) {\n+                        definitions = findAllExtensionDefinition(loader);\n+                        definitionsHolder.set(definitions);\n+                    }\n+                }\n             }\n+            result = definitions.stream().map(def -> def.getServiceClass()).collect(Collectors.toList());\n+            return result;\n+        }\n \n-            if (a2 != null) {\n-                o2 = a2.order();\n+        @SuppressWarnings(\"rawtypes\")\n+        private List<ExtensionDefinition> findAllExtensionDefinition(ClassLoader loader) {\n+            List<ExtensionDefinition> extensionDefinitions = new ArrayList<>();\n+            try {\n+                loadFile(SERVICES_DIRECTORY, loader, extensionDefinitions);\n+                loadFile(SEATA_DIRECTORY, loader, extensionDefinitions);\n+            } catch (IOException e) {\n+                throw new EnhancedServiceNotFoundException(e);\n             }\n \n-            return Integer.compare(o1, o2);\n-\n-        });\n+            //After loaded all the extensions,sort the caches by order\n+            if (!nameToDefinitionsMap.isEmpty()) {\n+                for (List<ExtensionDefinition> definitions : nameToDefinitionsMap.values()) {\n+                    Collections.sort(definitions, (def1, def2) -> {\n+                        int o1 = def1.getOrder();\n+                        int o2 = def2.getOrder();\n+                        return Integer.compare(o1, o2);\n+                    });\n+                }\n+            }\n \n-        return extensions;\n-    }\n+            if (!extensionDefinitions.isEmpty()) {\n+                Collections.sort(extensionDefinitions, (definition1, definition2) -> {\n+                    int o1 = definition1.getOrder();\n+                    int o2 = definition2.getOrder();\n+                    return Integer.compare(o1, o2);\n+                });\n+            }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static void loadFile(Class<?> service, String dir, ClassLoader classLoader, List<Class> extensions)\n-        throws IOException {\n-        String fileName = dir + service.getName();\n-        Enumeration<URL> urls;\n-        if (classLoader != null) {\n-            urls = classLoader.getResources(fileName);\n-        } else {\n-            urls = ClassLoader.getSystemResources(fileName);\n+            return extensionDefinitions;\n         }\n \n-        if (urls != null) {\n-            while (urls.hasMoreElements()) {\n-                java.net.URL url = urls.nextElement();\n-                BufferedReader reader = null;\n-                try {\n-                    reader = new BufferedReader(new InputStreamReader(url.openStream(), Constants.DEFAULT_CHARSET));\n-                    String line = null;\n-                    while ((line = reader.readLine()) != null) {\n-                        final int ci = line.indexOf('#');\n-                        if (ci >= 0) {\n-                            line = line.substring(0, ci);\n-                        }\n-                        line = line.trim();\n-                        if (line.length() > 0) {\n-                            try {\n-                                extensions.add(Class.forName(line, true, classLoader));\n-                            } catch (LinkageError | ClassNotFoundException e) {\n-                                LOGGER.warn(\"load [{}] class fail. {}\", line, e.getMessage());\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private void loadFile(String dir, ClassLoader classLoader, List<ExtensionDefinition> extensions)\n+                throws IOException {\n+            String fileName = dir + type.getName();\n+            Enumeration<java.net.URL> urls;\n+            if (classLoader != null) {\n+                urls = classLoader.getResources(fileName);\n+            } else {\n+                urls = ClassLoader.getSystemResources(fileName);\n+            }\n+            if (urls != null) {\n+                while (urls.hasMoreElements()) {\n+                    java.net.URL url = urls.nextElement();\n+                    BufferedReader reader = null;\n+                    try {\n+                        reader = new BufferedReader(new InputStreamReader(url.openStream(), Constants.DEFAULT_CHARSET));\n+                        String line = null;\n+                        while ((line = reader.readLine()) != null) {\n+                            final int ci = line.indexOf('#');\n+                            if (ci >= 0) {\n+                                line = line.substring(0, ci);\n+                            }\n+                            line = line.trim();\n+                            if (line.length() > 0) {\n+                                try {\n+                                    Class<?> clazz = Class.forName(line, true, classLoader);\n+                                    ExtensionDefinition extensionDefinition = getExtensionDefinition(clazz);\n+                                    extensions.add(extensionDefinition);\n+                                } catch (LinkageError | ClassNotFoundException e) {\n+                                    LOGGER.warn(\"load [{}] class fail. {}\", line, e.getMessage());\n+                                }\n                             }\n                         }\n+                    } catch (Throwable e) {\n+                        LOGGER.warn(e.getMessage());\n+                    } finally {\n+                        IOUtil.close(reader);\n                     }\n-                } catch (Throwable e) {\n-                    LOGGER.warn(e.getMessage());\n-                } finally {\n-                    IOUtil.close(reader);\n                 }\n             }\n         }\n-    }\n \n-    /**\n-     * init instance\n-     *\n-     * @param <S>       the type parameter\n-     * @param service   the service\n-     * @param implClazz the impl clazz\n-     * @param argTypes  the arg types\n-     * @param args      the args\n-     * @return s s\n-     * @throws IllegalAccessException the illegal access exception\n-     * @throws InstantiationException the instantiation exception\n-     * @throws NoSuchMethodException the no such method exception\n-     * @throws InvocationTargetException the invocation target exception\n-     */\n-    protected static <S> S initInstance(Class<S> service, Class implClazz, Class[] argTypes, Object[] args)\n-        throws IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {\n-        S s = null;\n-        if (argTypes != null && args != null) {\n-            // Constructor with arguments\n-            Constructor<S> constructor = implClazz.getDeclaredConstructor(argTypes);\n-            s = service.cast(constructor.newInstance(args));\n-        } else {\n-            // default Constructor\n-            s = service.cast(implClazz.newInstance());\n+        private ExtensionDefinition getExtensionDefinition(Class<?> clazz) {\n+            String serviceName = null;\n+            Integer priority = 0;\n+            Scope scope = Scope.SINGLETON;\n+            LoadLevel loadLevel = clazz.getAnnotation(LoadLevel.class);\n+            if (loadLevel != null) {\n+                serviceName = loadLevel.name();\n+                priority = loadLevel.order();\n+                scope = loadLevel.scope();\n+            }\n+            ExtensionDefinition result = new ExtensionDefinition(serviceName, priority, scope, clazz);\n+            //do cache\n+            classToDefinitionMap.put(clazz, result);\n+            if (serviceName != null) {\n+                if (nameToDefinitionsMap.containsKey(serviceName)) {\n+                    List<ExtensionDefinition> definitions = nameToDefinitionsMap.get(serviceName);\n+                    definitions.add(result);\n+                } else {\n+                    List<ExtensionDefinition> definitions = new ArrayList<>();\n+                    definitions.add(result);\n+                    nameToDefinitionsMap.put(serviceName, definitions);\n+                }\n+            }\n+            if (defaultExtensionDefinition == null || priority >= highestLoadPriority) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "453c8c61e615ca1eb798c735123be10512ddacc9"}, "originalPosition": 662}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NDE1MTMy", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-378415132", "createdAt": "2020-03-20T11:45:36Z", "commit": {"oid": "453c8c61e615ca1eb798c735123be10512ddacc9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMTo0NTozNlrOF5QjPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMTo0NTozNlrOF5QjPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU4NDMxOA==", "bodyText": "Since extensionDefinitions were sorted, is the defaultExtensionDefinition calculating in getExtensionDefinition\nnecessary?", "url": "https://github.com/seata/seata/pull/2135#discussion_r395584318", "createdAt": "2020-03-20T11:45:36Z", "author": {"login": "ggndnn"}, "path": "common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java", "diffHunk": "@@ -198,181 +173,445 @@\n      */\n     @SuppressWarnings(\"rawtypes\")\n     static <S> List<Class> getAllExtensionClass(Class<S> service, ClassLoader loader) {\n-        return findAllExtensionClass(service, null, loader);\n+        return InnerEnhancedServiceLoader.getServiceLoader(service).getAllExtensionClass(loader);\n     }\n \n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader) {\n-        return loadFile(service, activateName, loader, null, null);\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader, Class[] argTypes,\n-                                  Object[] args) {\n-        try {\n-            boolean foundFromCache = true;\n-            List<Class> extensions = providers.get(service);\n-            if (extensions == null) {\n-                synchronized (service) {\n-                    extensions = providers.get(service);\n-                    if (extensions == null) {\n-                        extensions = findAllExtensionClass(service, activateName, loader);\n-                        foundFromCache = false;\n-                        providers.put(service, extensions);\n-                    }\n+    private static class InnerEnhancedServiceLoader<S> {\n+        private static final Logger LOGGER = LoggerFactory.getLogger(EnhancedServiceLoader.class);\n+        private static final String SERVICES_DIRECTORY = \"META-INF/services/\";\n+        private static final String SEATA_DIRECTORY = \"META-INF/seata/\";\n+\n+        private static final ConcurrentMap<Class<?>, InnerEnhancedServiceLoader<?>> SERVICE_LOADERS =\n+                new ConcurrentHashMap<>();\n+\n+        private final Class<S> type;\n+        private final Holder<List<ExtensionDefinition>> definitionsHolder = new Holder<>();\n+        private final ConcurrentMap<ExtensionDefinition, Holder<Object>> definitionToInstanceMap =\n+                new ConcurrentHashMap<>();\n+        private final ConcurrentMap<String, List<ExtensionDefinition>> nameToDefinitionsMap = new ConcurrentHashMap<>();\n+        private final ConcurrentMap<Class<?>, ExtensionDefinition> classToDefinitionMap = new ConcurrentHashMap<>();\n+        private ExtensionDefinition defaultExtensionDefinition = null;\n+        private Integer highestLoadPriority = Integer.MIN_VALUE;\n+\n+        private InnerEnhancedServiceLoader(Class<S> type) {\n+            this.type = type;\n+        }\n+\n+        /**\n+         * Get the ServiceLoader for the specified Class\n+         *\n+         * @param type the type of the extension point\n+         * @param <S>  the type\n+         * @return the service loader\n+         */\n+        private static <S> InnerEnhancedServiceLoader<S> getServiceLoader(Class<S> type) {\n+            if (type == null) {\n+                throw new IllegalArgumentException(\"Enhanced Service type == null\");\n+            }\n+            InnerEnhancedServiceLoader<S> loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            if (loader == null) {\n+                SERVICE_LOADERS.putIfAbsent(type, new InnerEnhancedServiceLoader<S>(type));\n+                loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            }\n+            return loader;\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param loader the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(ClassLoader loader) throws EnhancedServiceNotFoundException {\n+            return loadExtension(loader, null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load() throws EnhancedServiceNotFoundException {\n+            return loadExtension(findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @param activateName the activate name\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName) throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param activateName the activate name\n+         * @param loader       the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName, ClassLoader loader)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, loader, null, null);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            Class[] argsType = null;\n+            if (args != null && args.length > 0) {\n+                argsType = new Class[args.length];\n+                for (int i = 0; i < args.length; i++) {\n+                    argsType[i] = args[i].getClass();\n                 }\n             }\n-            if (StringUtils.isNotEmpty(activateName)) {\n-                loadFile(service, SEATA_DIRECTORY + activateName.toLowerCase() + \"/\", loader, extensions);\n-\n-                List<Class> activateExtensions = new ArrayList<>();\n-                for (Class clz : extensions) {\n-                    @SuppressWarnings(\"unchecked\")\n-                    LoadLevel activate = (LoadLevel) clz.getAnnotation(LoadLevel.class);\n-                    if (activate != null && activateName.equalsIgnoreCase(activate.name())) {\n-                        activateExtensions.add(clz);\n-                    }\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param argsType     the args type\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName, Class[] argsType, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @return list list\n+         */\n+        private List<S> loadAll() {\n+            return loadAll(null, null);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @param argsType the args type\n+         * @param args     the args\n+         * @return list list\n+         */\n+        private List<S> loadAll(Class[] argsType, Object[] args) {\n+            List<S> allInstances = new ArrayList<>();\n+            List<Class> allClazzs = getAllExtensionClass();\n+            if (CollectionUtils.isEmpty(allClazzs)) {\n+                return allInstances;\n+            }\n+            try {\n+                for (Class clazz : allClazzs) {\n+                    ExtensionDefinition definition = classToDefinitionMap.get(clazz);\n+                    allInstances.add(getExtensionInstance(definition, findClassLoader(), argsType, args));\n                 }\n+            } catch (Throwable t) {\n+                throw new EnhancedServiceNotFoundException(t);\n+            }\n+            return allInstances;\n+        }\n \n-                extensions = activateExtensions;\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        private List<Class> getAllExtensionClass() {\n+            return loadAllExtensionClass(findClassLoader());\n+        }\n+\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @param loader the loader\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        private List<Class> getAllExtensionClass(ClassLoader loader) {\n+            return loadAllExtensionClass(loader);\n+        }\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            try {\n+                loadAllExtensionClass(loader);\n+                return getExtensionInstance(defaultExtensionDefinition, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n+        }\n \n-            if (extensions.isEmpty()) {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \"[\" + activateName\n-                        + \"] and classloader : \" + ObjectUtils.toString(loader));\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(String activateName, ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            if (io.seata.common.util.StringUtils.isEmpty(activateName)) {\n+                throw new IllegalArgumentException(\"the name of service provider for [\" + type.getName() + \"] name is null\");\n+            }\n+            try {\n+                loadAllExtensionClass(loader);\n+                ExtensionDefinition cachedExtensionDefinition = getCachedExtensionDefinition(activateName);\n+                return getExtensionInstance(cachedExtensionDefinition, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n-            Class<?> extension = extensions.get(extensions.size() - 1);\n-            S result = initInstance(service, extension, argTypes, args);\n-            if (!foundFromCache && LOGGER.isInfoEnabled()) {\n-                LOGGER.info(\"load \" + service.getSimpleName() + \"[\" + activateName + \"] extension by class[\" + extension\n-                    .getName() + \"]\");\n+        }\n+\n+        private S getExtensionInstance(ExtensionDefinition definition, ClassLoader loader, Class[] argTypes,\n+                                       Object[] args) {\n+            if (definition == null) {\n+                throw new EnhancedServiceNotFoundException(\"not found service provider for : \" + type.getName());\n             }\n-            return result;\n-        } catch (Throwable e) {\n-            if (e instanceof EnhancedServiceNotFoundException) {\n-                throw (EnhancedServiceNotFoundException)e;\n+            if (Scope.SINGLETON.equals(definition.getScope())) {\n+                Holder<Object> holder = definitionToInstanceMap.get(definition);\n+                if (holder == null) {\n+                    definitionToInstanceMap.putIfAbsent(definition, new Holder<>());\n+                    holder = definitionToInstanceMap.get(definition);\n+                }\n+                Object instance = holder.get();\n+                if (instance == null) {\n+                    synchronized (holder) {\n+                        instance = holder.get();\n+                        if (instance == null) {\n+                            instance = createNewExtension(definition, loader, argTypes, args);\n+                            holder.set(instance);\n+                        }\n+                    }\n+                }\n+                return (S)instance;\n             } else {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \" caused by \" + ExceptionUtils\n-                        .getFullStackTrace(e));\n+                return createNewExtension(definition, loader, argTypes, args);\n             }\n         }\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> List<Class> findAllExtensionClass(Class<S> service, String activateName, ClassLoader loader) {\n-        List<Class> extensions = new ArrayList<>();\n-        try {\n-            loadFile(service, SERVICES_DIRECTORY, loader, extensions);\n-            loadFile(service, SEATA_DIRECTORY, loader, extensions);\n-        } catch (IOException e) {\n-            throw new EnhancedServiceNotFoundException(e);\n+        private S createNewExtension(ExtensionDefinition definition, ClassLoader loader, Class[] argTypes, Object[] args) {\n+            loadAllExtensionClass(loader);\n+            Class<?> clazz = definition.getServiceClass();\n+            try {\n+                S newInstance = initInstance(clazz, argTypes, args);\n+                return newInstance;\n+            } catch (Throwable t) {\n+                throw new IllegalStateException(\"Extension instance(definition: \" + definition + \", class: \" +\n+                        type + \")  could not be instantiated: \" + t.getMessage(), t);\n+            }\n         }\n \n-        if (extensions.isEmpty()) {\n-            return extensions;\n-        }\n-        extensions.sort((c1, c2) -> {\n-            int o1 = 0;\n-            int o2 = 0;\n-            @SuppressWarnings(\"unchecked\")\n-            LoadLevel a1 = (LoadLevel) c1.getAnnotation(LoadLevel.class);\n-            @SuppressWarnings(\"unchecked\")\n-            LoadLevel a2 = (LoadLevel) c2.getAnnotation(LoadLevel.class);\n-\n-            if (a1 != null) {\n-                o1 = a1.order();\n+        private List<Class> loadAllExtensionClass(ClassLoader loader) {\n+            List<Class> result;\n+            List<ExtensionDefinition> definitions = definitionsHolder.get();\n+            if (definitions == null) {\n+                synchronized (definitionsHolder) {\n+                    definitions = definitionsHolder.get();\n+                    if (definitions == null) {\n+                        definitions = findAllExtensionDefinition(loader);\n+                        definitionsHolder.set(definitions);\n+                    }\n+                }\n             }\n+            result = definitions.stream().map(def -> def.getServiceClass()).collect(Collectors.toList());\n+            return result;\n+        }\n \n-            if (a2 != null) {\n-                o2 = a2.order();\n+        @SuppressWarnings(\"rawtypes\")\n+        private List<ExtensionDefinition> findAllExtensionDefinition(ClassLoader loader) {\n+            List<ExtensionDefinition> extensionDefinitions = new ArrayList<>();\n+            try {\n+                loadFile(SERVICES_DIRECTORY, loader, extensionDefinitions);\n+                loadFile(SEATA_DIRECTORY, loader, extensionDefinitions);\n+            } catch (IOException e) {\n+                throw new EnhancedServiceNotFoundException(e);\n             }\n \n-            return Integer.compare(o1, o2);\n-\n-        });\n+            //After loaded all the extensions,sort the caches by order\n+            if (!nameToDefinitionsMap.isEmpty()) {\n+                for (List<ExtensionDefinition> definitions : nameToDefinitionsMap.values()) {\n+                    Collections.sort(definitions, (def1, def2) -> {\n+                        int o1 = def1.getOrder();\n+                        int o2 = def2.getOrder();\n+                        return Integer.compare(o1, o2);\n+                    });\n+                }\n+            }\n \n-        return extensions;\n-    }\n+            if (!extensionDefinitions.isEmpty()) {\n+                Collections.sort(extensionDefinitions, (definition1, definition2) -> {\n+                    int o1 = definition1.getOrder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "453c8c61e615ca1eb798c735123be10512ddacc9"}, "originalPosition": 531}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NDE2OTM4", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-378416938", "createdAt": "2020-03-20T11:48:54Z", "commit": {"oid": "453c8c61e615ca1eb798c735123be10512ddacc9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMTo0ODo1NFrOF5Qoxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMTo0ODo1NFrOF5Qoxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU4NTczNA==", "bodyText": "Remove var result and return definitions.stream().map(ExtensionDefinition::getServiceClass).collect(Collectors.toList())?", "url": "https://github.com/seata/seata/pull/2135#discussion_r395585734", "createdAt": "2020-03-20T11:48:54Z", "author": {"login": "ggndnn"}, "path": "common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java", "diffHunk": "@@ -198,181 +173,445 @@\n      */\n     @SuppressWarnings(\"rawtypes\")\n     static <S> List<Class> getAllExtensionClass(Class<S> service, ClassLoader loader) {\n-        return findAllExtensionClass(service, null, loader);\n+        return InnerEnhancedServiceLoader.getServiceLoader(service).getAllExtensionClass(loader);\n     }\n \n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader) {\n-        return loadFile(service, activateName, loader, null, null);\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader, Class[] argTypes,\n-                                  Object[] args) {\n-        try {\n-            boolean foundFromCache = true;\n-            List<Class> extensions = providers.get(service);\n-            if (extensions == null) {\n-                synchronized (service) {\n-                    extensions = providers.get(service);\n-                    if (extensions == null) {\n-                        extensions = findAllExtensionClass(service, activateName, loader);\n-                        foundFromCache = false;\n-                        providers.put(service, extensions);\n-                    }\n+    private static class InnerEnhancedServiceLoader<S> {\n+        private static final Logger LOGGER = LoggerFactory.getLogger(EnhancedServiceLoader.class);\n+        private static final String SERVICES_DIRECTORY = \"META-INF/services/\";\n+        private static final String SEATA_DIRECTORY = \"META-INF/seata/\";\n+\n+        private static final ConcurrentMap<Class<?>, InnerEnhancedServiceLoader<?>> SERVICE_LOADERS =\n+                new ConcurrentHashMap<>();\n+\n+        private final Class<S> type;\n+        private final Holder<List<ExtensionDefinition>> definitionsHolder = new Holder<>();\n+        private final ConcurrentMap<ExtensionDefinition, Holder<Object>> definitionToInstanceMap =\n+                new ConcurrentHashMap<>();\n+        private final ConcurrentMap<String, List<ExtensionDefinition>> nameToDefinitionsMap = new ConcurrentHashMap<>();\n+        private final ConcurrentMap<Class<?>, ExtensionDefinition> classToDefinitionMap = new ConcurrentHashMap<>();\n+        private ExtensionDefinition defaultExtensionDefinition = null;\n+        private Integer highestLoadPriority = Integer.MIN_VALUE;\n+\n+        private InnerEnhancedServiceLoader(Class<S> type) {\n+            this.type = type;\n+        }\n+\n+        /**\n+         * Get the ServiceLoader for the specified Class\n+         *\n+         * @param type the type of the extension point\n+         * @param <S>  the type\n+         * @return the service loader\n+         */\n+        private static <S> InnerEnhancedServiceLoader<S> getServiceLoader(Class<S> type) {\n+            if (type == null) {\n+                throw new IllegalArgumentException(\"Enhanced Service type == null\");\n+            }\n+            InnerEnhancedServiceLoader<S> loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            if (loader == null) {\n+                SERVICE_LOADERS.putIfAbsent(type, new InnerEnhancedServiceLoader<S>(type));\n+                loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            }\n+            return loader;\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param loader the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(ClassLoader loader) throws EnhancedServiceNotFoundException {\n+            return loadExtension(loader, null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load() throws EnhancedServiceNotFoundException {\n+            return loadExtension(findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @param activateName the activate name\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName) throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param activateName the activate name\n+         * @param loader       the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName, ClassLoader loader)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, loader, null, null);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            Class[] argsType = null;\n+            if (args != null && args.length > 0) {\n+                argsType = new Class[args.length];\n+                for (int i = 0; i < args.length; i++) {\n+                    argsType[i] = args[i].getClass();\n                 }\n             }\n-            if (StringUtils.isNotEmpty(activateName)) {\n-                loadFile(service, SEATA_DIRECTORY + activateName.toLowerCase() + \"/\", loader, extensions);\n-\n-                List<Class> activateExtensions = new ArrayList<>();\n-                for (Class clz : extensions) {\n-                    @SuppressWarnings(\"unchecked\")\n-                    LoadLevel activate = (LoadLevel) clz.getAnnotation(LoadLevel.class);\n-                    if (activate != null && activateName.equalsIgnoreCase(activate.name())) {\n-                        activateExtensions.add(clz);\n-                    }\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param argsType     the args type\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName, Class[] argsType, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @return list list\n+         */\n+        private List<S> loadAll() {\n+            return loadAll(null, null);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @param argsType the args type\n+         * @param args     the args\n+         * @return list list\n+         */\n+        private List<S> loadAll(Class[] argsType, Object[] args) {\n+            List<S> allInstances = new ArrayList<>();\n+            List<Class> allClazzs = getAllExtensionClass();\n+            if (CollectionUtils.isEmpty(allClazzs)) {\n+                return allInstances;\n+            }\n+            try {\n+                for (Class clazz : allClazzs) {\n+                    ExtensionDefinition definition = classToDefinitionMap.get(clazz);\n+                    allInstances.add(getExtensionInstance(definition, findClassLoader(), argsType, args));\n                 }\n+            } catch (Throwable t) {\n+                throw new EnhancedServiceNotFoundException(t);\n+            }\n+            return allInstances;\n+        }\n \n-                extensions = activateExtensions;\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        private List<Class> getAllExtensionClass() {\n+            return loadAllExtensionClass(findClassLoader());\n+        }\n+\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @param loader the loader\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        private List<Class> getAllExtensionClass(ClassLoader loader) {\n+            return loadAllExtensionClass(loader);\n+        }\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            try {\n+                loadAllExtensionClass(loader);\n+                return getExtensionInstance(defaultExtensionDefinition, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n+        }\n \n-            if (extensions.isEmpty()) {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \"[\" + activateName\n-                        + \"] and classloader : \" + ObjectUtils.toString(loader));\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(String activateName, ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            if (io.seata.common.util.StringUtils.isEmpty(activateName)) {\n+                throw new IllegalArgumentException(\"the name of service provider for [\" + type.getName() + \"] name is null\");\n+            }\n+            try {\n+                loadAllExtensionClass(loader);\n+                ExtensionDefinition cachedExtensionDefinition = getCachedExtensionDefinition(activateName);\n+                return getExtensionInstance(cachedExtensionDefinition, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n-            Class<?> extension = extensions.get(extensions.size() - 1);\n-            S result = initInstance(service, extension, argTypes, args);\n-            if (!foundFromCache && LOGGER.isInfoEnabled()) {\n-                LOGGER.info(\"load \" + service.getSimpleName() + \"[\" + activateName + \"] extension by class[\" + extension\n-                    .getName() + \"]\");\n+        }\n+\n+        private S getExtensionInstance(ExtensionDefinition definition, ClassLoader loader, Class[] argTypes,\n+                                       Object[] args) {\n+            if (definition == null) {\n+                throw new EnhancedServiceNotFoundException(\"not found service provider for : \" + type.getName());\n             }\n-            return result;\n-        } catch (Throwable e) {\n-            if (e instanceof EnhancedServiceNotFoundException) {\n-                throw (EnhancedServiceNotFoundException)e;\n+            if (Scope.SINGLETON.equals(definition.getScope())) {\n+                Holder<Object> holder = definitionToInstanceMap.get(definition);\n+                if (holder == null) {\n+                    definitionToInstanceMap.putIfAbsent(definition, new Holder<>());\n+                    holder = definitionToInstanceMap.get(definition);\n+                }\n+                Object instance = holder.get();\n+                if (instance == null) {\n+                    synchronized (holder) {\n+                        instance = holder.get();\n+                        if (instance == null) {\n+                            instance = createNewExtension(definition, loader, argTypes, args);\n+                            holder.set(instance);\n+                        }\n+                    }\n+                }\n+                return (S)instance;\n             } else {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \" caused by \" + ExceptionUtils\n-                        .getFullStackTrace(e));\n+                return createNewExtension(definition, loader, argTypes, args);\n             }\n         }\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> List<Class> findAllExtensionClass(Class<S> service, String activateName, ClassLoader loader) {\n-        List<Class> extensions = new ArrayList<>();\n-        try {\n-            loadFile(service, SERVICES_DIRECTORY, loader, extensions);\n-            loadFile(service, SEATA_DIRECTORY, loader, extensions);\n-        } catch (IOException e) {\n-            throw new EnhancedServiceNotFoundException(e);\n+        private S createNewExtension(ExtensionDefinition definition, ClassLoader loader, Class[] argTypes, Object[] args) {\n+            loadAllExtensionClass(loader);\n+            Class<?> clazz = definition.getServiceClass();\n+            try {\n+                S newInstance = initInstance(clazz, argTypes, args);\n+                return newInstance;\n+            } catch (Throwable t) {\n+                throw new IllegalStateException(\"Extension instance(definition: \" + definition + \", class: \" +\n+                        type + \")  could not be instantiated: \" + t.getMessage(), t);\n+            }\n         }\n \n-        if (extensions.isEmpty()) {\n-            return extensions;\n-        }\n-        extensions.sort((c1, c2) -> {\n-            int o1 = 0;\n-            int o2 = 0;\n-            @SuppressWarnings(\"unchecked\")\n-            LoadLevel a1 = (LoadLevel) c1.getAnnotation(LoadLevel.class);\n-            @SuppressWarnings(\"unchecked\")\n-            LoadLevel a2 = (LoadLevel) c2.getAnnotation(LoadLevel.class);\n-\n-            if (a1 != null) {\n-                o1 = a1.order();\n+        private List<Class> loadAllExtensionClass(ClassLoader loader) {\n+            List<Class> result;\n+            List<ExtensionDefinition> definitions = definitionsHolder.get();\n+            if (definitions == null) {\n+                synchronized (definitionsHolder) {\n+                    definitions = definitionsHolder.get();\n+                    if (definitions == null) {\n+                        definitions = findAllExtensionDefinition(loader);\n+                        definitionsHolder.set(definitions);\n+                    }\n+                }\n             }\n+            result = definitions.stream().map(def -> def.getServiceClass()).collect(Collectors.toList());\n+            return result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "453c8c61e615ca1eb798c735123be10512ddacc9"}, "originalPosition": 498}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba9b6b80ef810d324fe27fa708b2d79ea5fda712", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/ba9b6b80ef810d324fe27fa708b2d79ea5fda712", "committedDate": "2020-03-23T06:21:44Z", "message": "resolve conflicts with dev"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10a56182bac3acac98dcfd31869359773f1adf18", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/10a56182bac3acac98dcfd31869359773f1adf18", "committedDate": "2020-03-23T06:23:21Z", "message": "Merge branch 'f_spi' of https://github.com/CharmingRabbit/seata into f_spi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8648cc77001be69904f0f81ddc44ef65018415de", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/8648cc77001be69904f0f81ddc44ef65018415de", "committedDate": "2020-03-23T06:53:41Z", "message": "restore some code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42c63a2829bc5a51b5c4895dee3eff4144d215d6", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/42c63a2829bc5a51b5c4895dee3eff4144d215d6", "committedDate": "2020-03-23T06:55:35Z", "message": "add newline in SQLOperateRecognizerHolderFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7708d26153092c9212ec3823c6a1d74533760020", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/7708d26153092c9212ec3823c6a1d74533760020", "committedDate": "2020-03-23T07:05:10Z", "message": "Merge branch 'develop' into f_spi"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTc4MTU5", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-379178159", "createdAt": "2020-03-23T07:21:50Z", "commit": {"oid": "7708d26153092c9212ec3823c6a1d74533760020"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzoyMTo1MVrOF55LuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzoyMTo1MVrOF55LuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI1MDA0MQ==", "bodyText": "It is recommended that findClassLoader() be placed in the EnhancedServiceLoader class, which is responsible for the parameter assembly.", "url": "https://github.com/seata/seata/pull/2135#discussion_r396250041", "createdAt": "2020-03-23T07:21:51Z", "author": {"login": "slievrly"}, "path": "common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java", "diffHunk": "@@ -84,7 +77,8 @@\n      * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n      */\n     public static <S> S load(Class<S> service, String activateName) throws EnhancedServiceNotFoundException {\n-        return loadFile(service, activateName, findClassLoader());\n+        return InnerEnhancedServiceLoader.getServiceLoader(service).load(activateName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7708d26153092c9212ec3823c6a1d74533760020"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTkxOTI3", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-379191927", "createdAt": "2020-03-23T07:51:04Z", "commit": {"oid": "7708d26153092c9212ec3823c6a1d74533760020"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzo1MTowNVrOF553pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzo1MTowNVrOF553pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2MTI4Nw==", "bodyText": "In the original logic, this could be empty.", "url": "https://github.com/seata/seata/pull/2135#discussion_r396261287", "createdAt": "2020-03-23T07:51:05Z", "author": {"login": "slievrly"}, "path": "common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java", "diffHunk": "@@ -198,181 +173,446 @@\n      */\n     @SuppressWarnings(\"rawtypes\")\n     static <S> List<Class> getAllExtensionClass(Class<S> service, ClassLoader loader) {\n-        return findAllExtensionClass(service, null, loader);\n+        return InnerEnhancedServiceLoader.getServiceLoader(service).getAllExtensionClass(loader);\n     }\n \n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader) {\n-        return loadFile(service, activateName, loader, null, null);\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader, Class[] argTypes,\n-                                  Object[] args) {\n-        try {\n-            boolean foundFromCache = true;\n-            List<Class> extensions = providers.get(service);\n-            if (extensions == null) {\n-                synchronized (service) {\n-                    extensions = providers.get(service);\n-                    if (extensions == null) {\n-                        extensions = findAllExtensionClass(service, activateName, loader);\n-                        foundFromCache = false;\n-                        providers.put(service, extensions);\n-                    }\n+    private static class InnerEnhancedServiceLoader<S> {\n+        private static final Logger LOGGER = LoggerFactory.getLogger(EnhancedServiceLoader.class);\n+        private static final String SERVICES_DIRECTORY = \"META-INF/services/\";\n+        private static final String SEATA_DIRECTORY = \"META-INF/seata/\";\n+\n+        private static final ConcurrentMap<Class<?>, InnerEnhancedServiceLoader<?>> SERVICE_LOADERS =\n+                new ConcurrentHashMap<>();\n+\n+        private final Class<S> type;\n+        private final Holder<List<ExtensionDefinition>> definitionsHolder = new Holder<>();\n+        private final ConcurrentMap<ExtensionDefinition, Holder<Object>> definitionToInstanceMap =\n+                new ConcurrentHashMap<>();\n+        private final ConcurrentMap<String, List<ExtensionDefinition>> nameToDefinitionsMap = new ConcurrentHashMap<>();\n+        private final ConcurrentMap<Class<?>, ExtensionDefinition> classToDefinitionMap = new ConcurrentHashMap<>();\n+\n+        private InnerEnhancedServiceLoader(Class<S> type) {\n+            this.type = type;\n+        }\n+\n+        /**\n+         * Get the ServiceLoader for the specified Class\n+         *\n+         * @param type the type of the extension point\n+         * @param <S>  the type\n+         * @return the service loader\n+         */\n+        private static <S> InnerEnhancedServiceLoader<S> getServiceLoader(Class<S> type) {\n+            if (type == null) {\n+                throw new IllegalArgumentException(\"Enhanced Service type == null\");\n+            }\n+            InnerEnhancedServiceLoader<S> loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            if (loader == null) {\n+                SERVICE_LOADERS.putIfAbsent(type, new InnerEnhancedServiceLoader<S>(type));\n+                loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            }\n+            return loader;\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param loader the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(ClassLoader loader) throws EnhancedServiceNotFoundException {\n+            return loadExtension(loader, null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load() throws EnhancedServiceNotFoundException {\n+            return loadExtension(findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @param activateName the activate name\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName) throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param activateName the activate name\n+         * @param loader       the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName, ClassLoader loader)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, loader, null, null);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            Class[] argsType = null;\n+            if (args != null && args.length > 0) {\n+                argsType = new Class[args.length];\n+                for (int i = 0; i < args.length; i++) {\n+                    argsType[i] = args[i].getClass();\n                 }\n             }\n-            if (StringUtils.isNotEmpty(activateName)) {\n-                loadFile(service, SEATA_DIRECTORY + activateName.toLowerCase() + \"/\", loader, extensions);\n-\n-                List<Class> activateExtensions = new ArrayList<>();\n-                for (Class clz : extensions) {\n-                    @SuppressWarnings(\"unchecked\")\n-                    LoadLevel activate = (LoadLevel) clz.getAnnotation(LoadLevel.class);\n-                    if (activate != null && activateName.equalsIgnoreCase(activate.name())) {\n-                        activateExtensions.add(clz);\n-                    }\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param argsType     the args type\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName, Class[] argsType, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @return list list\n+         */\n+        private List<S> loadAll() {\n+            return loadAll(null, null);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @param argsType the args type\n+         * @param args     the args\n+         * @return list list\n+         */\n+        private List<S> loadAll(Class[] argsType, Object[] args) {\n+            List<S> allInstances = new ArrayList<>();\n+            List<Class> allClazzs = getAllExtensionClass();\n+            if (CollectionUtils.isEmpty(allClazzs)) {\n+                return allInstances;\n+            }\n+            try {\n+                for (Class clazz : allClazzs) {\n+                    ExtensionDefinition definition = classToDefinitionMap.get(clazz);\n+                    allInstances.add(getExtensionInstance(definition, findClassLoader(), argsType, args));\n                 }\n+            } catch (Throwable t) {\n+                throw new EnhancedServiceNotFoundException(t);\n+            }\n+            return allInstances;\n+        }\n+\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        private List<Class> getAllExtensionClass() {\n+            return loadAllExtensionClass(findClassLoader());\n+        }\n+\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @param loader the loader\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        private List<Class> getAllExtensionClass(ClassLoader loader) {\n+            return loadAllExtensionClass(loader);\n+        }\n \n-                extensions = activateExtensions;\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            try {\n+                loadAllExtensionClass(loader);\n+                ExtensionDefinition defaultExtensionDefinition = getDefaultExtensionDefinition();\n+                return getExtensionInstance(defaultExtensionDefinition, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n+        }\n \n-            if (extensions.isEmpty()) {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \"[\" + activateName\n-                        + \"] and classloader : \" + ObjectUtils.toString(loader));\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(String activateName, ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            if (io.seata.common.util.StringUtils.isEmpty(activateName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7708d26153092c9212ec3823c6a1d74533760020"}, "originalPosition": 393}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MjA2MzA5", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-379206309", "createdAt": "2020-03-23T08:16:46Z", "commit": {"oid": "7708d26153092c9212ec3823c6a1d74533760020"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODoxNjo0NlrOF56kSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODoxNjo0NlrOF56kSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI3MjcxNQ==", "bodyText": "When is this a collection instead of a single element?", "url": "https://github.com/seata/seata/pull/2135#discussion_r396272715", "createdAt": "2020-03-23T08:16:46Z", "author": {"login": "slievrly"}, "path": "common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java", "diffHunk": "@@ -198,181 +173,446 @@\n      */\n     @SuppressWarnings(\"rawtypes\")\n     static <S> List<Class> getAllExtensionClass(Class<S> service, ClassLoader loader) {\n-        return findAllExtensionClass(service, null, loader);\n+        return InnerEnhancedServiceLoader.getServiceLoader(service).getAllExtensionClass(loader);\n     }\n \n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader) {\n-        return loadFile(service, activateName, loader, null, null);\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader, Class[] argTypes,\n-                                  Object[] args) {\n-        try {\n-            boolean foundFromCache = true;\n-            List<Class> extensions = providers.get(service);\n-            if (extensions == null) {\n-                synchronized (service) {\n-                    extensions = providers.get(service);\n-                    if (extensions == null) {\n-                        extensions = findAllExtensionClass(service, activateName, loader);\n-                        foundFromCache = false;\n-                        providers.put(service, extensions);\n-                    }\n+    private static class InnerEnhancedServiceLoader<S> {\n+        private static final Logger LOGGER = LoggerFactory.getLogger(EnhancedServiceLoader.class);\n+        private static final String SERVICES_DIRECTORY = \"META-INF/services/\";\n+        private static final String SEATA_DIRECTORY = \"META-INF/seata/\";\n+\n+        private static final ConcurrentMap<Class<?>, InnerEnhancedServiceLoader<?>> SERVICE_LOADERS =\n+                new ConcurrentHashMap<>();\n+\n+        private final Class<S> type;\n+        private final Holder<List<ExtensionDefinition>> definitionsHolder = new Holder<>();\n+        private final ConcurrentMap<ExtensionDefinition, Holder<Object>> definitionToInstanceMap =\n+                new ConcurrentHashMap<>();\n+        private final ConcurrentMap<String, List<ExtensionDefinition>> nameToDefinitionsMap = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7708d26153092c9212ec3823c6a1d74533760020"}, "originalPosition": 198}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MjE5ODMx", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-379219831", "createdAt": "2020-03-23T08:38:14Z", "commit": {"oid": "7708d26153092c9212ec3823c6a1d74533760020"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODozODoxNFrOF57PAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODozODoxNFrOF57PAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI4MzY1MA==", "bodyText": "how about set\uff1f What happens if I write two identical records in the spi file?", "url": "https://github.com/seata/seata/pull/2135#discussion_r396283650", "createdAt": "2020-03-23T08:38:14Z", "author": {"login": "slievrly"}, "path": "common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java", "diffHunk": "@@ -198,181 +173,446 @@\n      */\n     @SuppressWarnings(\"rawtypes\")\n     static <S> List<Class> getAllExtensionClass(Class<S> service, ClassLoader loader) {\n-        return findAllExtensionClass(service, null, loader);\n+        return InnerEnhancedServiceLoader.getServiceLoader(service).getAllExtensionClass(loader);\n     }\n \n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader) {\n-        return loadFile(service, activateName, loader, null, null);\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader, Class[] argTypes,\n-                                  Object[] args) {\n-        try {\n-            boolean foundFromCache = true;\n-            List<Class> extensions = providers.get(service);\n-            if (extensions == null) {\n-                synchronized (service) {\n-                    extensions = providers.get(service);\n-                    if (extensions == null) {\n-                        extensions = findAllExtensionClass(service, activateName, loader);\n-                        foundFromCache = false;\n-                        providers.put(service, extensions);\n-                    }\n+    private static class InnerEnhancedServiceLoader<S> {\n+        private static final Logger LOGGER = LoggerFactory.getLogger(EnhancedServiceLoader.class);\n+        private static final String SERVICES_DIRECTORY = \"META-INF/services/\";\n+        private static final String SEATA_DIRECTORY = \"META-INF/seata/\";\n+\n+        private static final ConcurrentMap<Class<?>, InnerEnhancedServiceLoader<?>> SERVICE_LOADERS =\n+                new ConcurrentHashMap<>();\n+\n+        private final Class<S> type;\n+        private final Holder<List<ExtensionDefinition>> definitionsHolder = new Holder<>();\n+        private final ConcurrentMap<ExtensionDefinition, Holder<Object>> definitionToInstanceMap =\n+                new ConcurrentHashMap<>();\n+        private final ConcurrentMap<String, List<ExtensionDefinition>> nameToDefinitionsMap = new ConcurrentHashMap<>();\n+        private final ConcurrentMap<Class<?>, ExtensionDefinition> classToDefinitionMap = new ConcurrentHashMap<>();\n+\n+        private InnerEnhancedServiceLoader(Class<S> type) {\n+            this.type = type;\n+        }\n+\n+        /**\n+         * Get the ServiceLoader for the specified Class\n+         *\n+         * @param type the type of the extension point\n+         * @param <S>  the type\n+         * @return the service loader\n+         */\n+        private static <S> InnerEnhancedServiceLoader<S> getServiceLoader(Class<S> type) {\n+            if (type == null) {\n+                throw new IllegalArgumentException(\"Enhanced Service type == null\");\n+            }\n+            InnerEnhancedServiceLoader<S> loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            if (loader == null) {\n+                SERVICE_LOADERS.putIfAbsent(type, new InnerEnhancedServiceLoader<S>(type));\n+                loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            }\n+            return loader;\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param loader the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(ClassLoader loader) throws EnhancedServiceNotFoundException {\n+            return loadExtension(loader, null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load() throws EnhancedServiceNotFoundException {\n+            return loadExtension(findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @param activateName the activate name\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName) throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param activateName the activate name\n+         * @param loader       the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName, ClassLoader loader)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, loader, null, null);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            Class[] argsType = null;\n+            if (args != null && args.length > 0) {\n+                argsType = new Class[args.length];\n+                for (int i = 0; i < args.length; i++) {\n+                    argsType[i] = args[i].getClass();\n                 }\n             }\n-            if (StringUtils.isNotEmpty(activateName)) {\n-                loadFile(service, SEATA_DIRECTORY + activateName.toLowerCase() + \"/\", loader, extensions);\n-\n-                List<Class> activateExtensions = new ArrayList<>();\n-                for (Class clz : extensions) {\n-                    @SuppressWarnings(\"unchecked\")\n-                    LoadLevel activate = (LoadLevel) clz.getAnnotation(LoadLevel.class);\n-                    if (activate != null && activateName.equalsIgnoreCase(activate.name())) {\n-                        activateExtensions.add(clz);\n-                    }\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param argsType     the args type\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName, Class[] argsType, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @return list list\n+         */\n+        private List<S> loadAll() {\n+            return loadAll(null, null);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @param argsType the args type\n+         * @param args     the args\n+         * @return list list\n+         */\n+        private List<S> loadAll(Class[] argsType, Object[] args) {\n+            List<S> allInstances = new ArrayList<>();\n+            List<Class> allClazzs = getAllExtensionClass();\n+            if (CollectionUtils.isEmpty(allClazzs)) {\n+                return allInstances;\n+            }\n+            try {\n+                for (Class clazz : allClazzs) {\n+                    ExtensionDefinition definition = classToDefinitionMap.get(clazz);\n+                    allInstances.add(getExtensionInstance(definition, findClassLoader(), argsType, args));\n                 }\n+            } catch (Throwable t) {\n+                throw new EnhancedServiceNotFoundException(t);\n+            }\n+            return allInstances;\n+        }\n+\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        private List<Class> getAllExtensionClass() {\n+            return loadAllExtensionClass(findClassLoader());\n+        }\n+\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @param loader the loader\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        private List<Class> getAllExtensionClass(ClassLoader loader) {\n+            return loadAllExtensionClass(loader);\n+        }\n \n-                extensions = activateExtensions;\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            try {\n+                loadAllExtensionClass(loader);\n+                ExtensionDefinition defaultExtensionDefinition = getDefaultExtensionDefinition();\n+                return getExtensionInstance(defaultExtensionDefinition, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n+        }\n \n-            if (extensions.isEmpty()) {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \"[\" + activateName\n-                        + \"] and classloader : \" + ObjectUtils.toString(loader));\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(String activateName, ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            if (io.seata.common.util.StringUtils.isEmpty(activateName)) {\n+                throw new IllegalArgumentException(\"the name of service provider for [\" + type.getName() + \"] name is null\");\n             }\n-            Class<?> extension = extensions.get(extensions.size() - 1);\n-            S result = initInstance(service, extension, argTypes, args);\n-            if (!foundFromCache && LOGGER.isInfoEnabled()) {\n-                LOGGER.info(\"load \" + service.getSimpleName() + \"[\" + activateName + \"] extension by class[\" + extension\n-                    .getName() + \"]\");\n+            try {\n+                loadAllExtensionClass(loader);\n+                ExtensionDefinition cachedExtensionDefinition = getCachedExtensionDefinition(activateName);\n+                return getExtensionInstance(cachedExtensionDefinition, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n-            return result;\n-        } catch (Throwable e) {\n-            if (e instanceof EnhancedServiceNotFoundException) {\n-                throw (EnhancedServiceNotFoundException)e;\n+        }\n+\n+        private S getExtensionInstance(ExtensionDefinition definition, ClassLoader loader, Class[] argTypes,\n+                                       Object[] args) {\n+            if (definition == null) {\n+                throw new EnhancedServiceNotFoundException(\"not found service provider for : \" + type.getName());\n+            }\n+            if (Scope.SINGLETON.equals(definition.getScope())) {\n+                Holder<Object> holder = definitionToInstanceMap.get(definition);\n+                if (holder == null) {\n+                    definitionToInstanceMap.putIfAbsent(definition, new Holder<>());\n+                    holder = definitionToInstanceMap.get(definition);\n+                }\n+                Object instance = holder.get();\n+                if (instance == null) {\n+                    synchronized (holder) {\n+                        instance = holder.get();\n+                        if (instance == null) {\n+                            instance = createNewExtension(definition, loader, argTypes, args);\n+                            holder.set(instance);\n+                        }\n+                    }\n+                }\n+                return (S)instance;\n             } else {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \" caused by \" + ExceptionUtils\n-                        .getFullStackTrace(e));\n+                return createNewExtension(definition, loader, argTypes, args);\n             }\n         }\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> List<Class> findAllExtensionClass(Class<S> service, String activateName, ClassLoader loader) {\n-        List<Class> extensions = new ArrayList<>();\n-        try {\n-            loadFile(service, SERVICES_DIRECTORY, loader, extensions);\n-            loadFile(service, SEATA_DIRECTORY, loader, extensions);\n-        } catch (IOException e) {\n-            throw new EnhancedServiceNotFoundException(e);\n+        private S createNewExtension(ExtensionDefinition definition, ClassLoader loader, Class[] argTypes, Object[] args) {\n+            loadAllExtensionClass(loader);\n+            Class<?> clazz = definition.getServiceClass();\n+            try {\n+                S newInstance = initInstance(clazz, argTypes, args);\n+                return newInstance;\n+            } catch (Throwable t) {\n+                throw new IllegalStateException(\"Extension instance(definition: \" + definition + \", class: \" +\n+                        type + \")  could not be instantiated: \" + t.getMessage(), t);\n+            }\n         }\n \n-        if (extensions.isEmpty()) {\n-            return extensions;\n-        }\n-        extensions.sort((c1, c2) -> {\n-            int o1 = 0;\n-            int o2 = 0;\n-            @SuppressWarnings(\"unchecked\")\n-            LoadLevel a1 = (LoadLevel) c1.getAnnotation(LoadLevel.class);\n-            @SuppressWarnings(\"unchecked\")\n-            LoadLevel a2 = (LoadLevel) c2.getAnnotation(LoadLevel.class);\n-\n-            if (a1 != null) {\n-                o1 = a1.order();\n+        private List<Class> loadAllExtensionClass(ClassLoader loader) {\n+            List<Class> result;\n+            List<ExtensionDefinition> definitions = definitionsHolder.get();\n+            if (definitions == null) {\n+                synchronized (definitionsHolder) {\n+                    definitions = definitionsHolder.get();\n+                    if (definitions == null) {\n+                        definitions = findAllExtensionDefinition(loader);\n+                        definitionsHolder.set(definitions);\n+                    }\n+                }\n             }\n+            return definitions.stream().map(def -> def.getServiceClass()).collect(Collectors.toList());\n+        }\n \n-            if (a2 != null) {\n-                o2 = a2.order();\n+        @SuppressWarnings(\"rawtypes\")\n+        private List<ExtensionDefinition> findAllExtensionDefinition(ClassLoader loader) {\n+            List<ExtensionDefinition> extensionDefinitions = new ArrayList<>();\n+            try {\n+                loadFile(SERVICES_DIRECTORY, loader, extensionDefinitions);\n+                loadFile(SEATA_DIRECTORY, loader, extensionDefinitions);\n+            } catch (IOException e) {\n+                throw new EnhancedServiceNotFoundException(e);\n             }\n \n-            return Integer.compare(o1, o2);\n-\n-        });\n+            //After loaded all the extensions,sort the caches by order\n+            if (!nameToDefinitionsMap.isEmpty()) {\n+                for (List<ExtensionDefinition> definitions : nameToDefinitionsMap.values()) {\n+                    Collections.sort(definitions, (def1, def2) -> {\n+                        int o1 = def1.getOrder();\n+                        int o2 = def2.getOrder();\n+                        return Integer.compare(o1, o2);\n+                    });\n+                }\n+            }\n \n-        return extensions;\n-    }\n+            if (!extensionDefinitions.isEmpty()) {\n+                Collections.sort(extensionDefinitions, (definition1, definition2) -> {\n+                    int o1 = definition1.getOrder();\n+                    int o2 = definition2.getOrder();\n+                    return Integer.compare(o1, o2);\n+                });\n+            }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static void loadFile(Class<?> service, String dir, ClassLoader classLoader, List<Class> extensions)\n-        throws IOException {\n-        String fileName = dir + service.getName();\n-        Enumeration<URL> urls;\n-        if (classLoader != null) {\n-            urls = classLoader.getResources(fileName);\n-        } else {\n-            urls = ClassLoader.getSystemResources(fileName);\n+            return extensionDefinitions;\n         }\n \n-        if (urls != null) {\n-            while (urls.hasMoreElements()) {\n-                java.net.URL url = urls.nextElement();\n-                BufferedReader reader = null;\n-                try {\n-                    reader = new BufferedReader(new InputStreamReader(url.openStream(), Constants.DEFAULT_CHARSET));\n-                    String line = null;\n-                    while ((line = reader.readLine()) != null) {\n-                        final int ci = line.indexOf('#');\n-                        if (ci >= 0) {\n-                            line = line.substring(0, ci);\n-                        }\n-                        line = line.trim();\n-                        if (line.length() > 0) {\n-                            try {\n-                                extensions.add(Class.forName(line, true, classLoader));\n-                            } catch (LinkageError | ClassNotFoundException e) {\n-                                LOGGER.warn(\"load [{}] class fail. {}\", line, e.getMessage());\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private void loadFile(String dir, ClassLoader classLoader, List<ExtensionDefinition> extensions)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7708d26153092c9212ec3823c6a1d74533760020"}, "originalPosition": 567}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MjMxMzcx", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-379231371", "createdAt": "2020-03-23T08:54:58Z", "commit": {"oid": "7708d26153092c9212ec3823c6a1d74533760020"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODo1NDo1OFrOF570Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODo1NDo1OFrOF570Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI5MzE5OA==", "bodyText": "if necessary\uff1f", "url": "https://github.com/seata/seata/pull/2135#discussion_r396293198", "createdAt": "2020-03-23T08:54:58Z", "author": {"login": "slievrly"}, "path": "common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java", "diffHunk": "@@ -198,181 +173,446 @@\n      */\n     @SuppressWarnings(\"rawtypes\")\n     static <S> List<Class> getAllExtensionClass(Class<S> service, ClassLoader loader) {\n-        return findAllExtensionClass(service, null, loader);\n+        return InnerEnhancedServiceLoader.getServiceLoader(service).getAllExtensionClass(loader);\n     }\n \n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader) {\n-        return loadFile(service, activateName, loader, null, null);\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader, Class[] argTypes,\n-                                  Object[] args) {\n-        try {\n-            boolean foundFromCache = true;\n-            List<Class> extensions = providers.get(service);\n-            if (extensions == null) {\n-                synchronized (service) {\n-                    extensions = providers.get(service);\n-                    if (extensions == null) {\n-                        extensions = findAllExtensionClass(service, activateName, loader);\n-                        foundFromCache = false;\n-                        providers.put(service, extensions);\n-                    }\n+    private static class InnerEnhancedServiceLoader<S> {\n+        private static final Logger LOGGER = LoggerFactory.getLogger(EnhancedServiceLoader.class);\n+        private static final String SERVICES_DIRECTORY = \"META-INF/services/\";\n+        private static final String SEATA_DIRECTORY = \"META-INF/seata/\";\n+\n+        private static final ConcurrentMap<Class<?>, InnerEnhancedServiceLoader<?>> SERVICE_LOADERS =\n+                new ConcurrentHashMap<>();\n+\n+        private final Class<S> type;\n+        private final Holder<List<ExtensionDefinition>> definitionsHolder = new Holder<>();\n+        private final ConcurrentMap<ExtensionDefinition, Holder<Object>> definitionToInstanceMap =\n+                new ConcurrentHashMap<>();\n+        private final ConcurrentMap<String, List<ExtensionDefinition>> nameToDefinitionsMap = new ConcurrentHashMap<>();\n+        private final ConcurrentMap<Class<?>, ExtensionDefinition> classToDefinitionMap = new ConcurrentHashMap<>();\n+\n+        private InnerEnhancedServiceLoader(Class<S> type) {\n+            this.type = type;\n+        }\n+\n+        /**\n+         * Get the ServiceLoader for the specified Class\n+         *\n+         * @param type the type of the extension point\n+         * @param <S>  the type\n+         * @return the service loader\n+         */\n+        private static <S> InnerEnhancedServiceLoader<S> getServiceLoader(Class<S> type) {\n+            if (type == null) {\n+                throw new IllegalArgumentException(\"Enhanced Service type == null\");\n+            }\n+            InnerEnhancedServiceLoader<S> loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            if (loader == null) {\n+                SERVICE_LOADERS.putIfAbsent(type, new InnerEnhancedServiceLoader<S>(type));\n+                loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            }\n+            return loader;\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param loader the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(ClassLoader loader) throws EnhancedServiceNotFoundException {\n+            return loadExtension(loader, null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load() throws EnhancedServiceNotFoundException {\n+            return loadExtension(findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @param activateName the activate name\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName) throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param activateName the activate name\n+         * @param loader       the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName, ClassLoader loader)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, loader, null, null);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            Class[] argsType = null;\n+            if (args != null && args.length > 0) {\n+                argsType = new Class[args.length];\n+                for (int i = 0; i < args.length; i++) {\n+                    argsType[i] = args[i].getClass();\n                 }\n             }\n-            if (StringUtils.isNotEmpty(activateName)) {\n-                loadFile(service, SEATA_DIRECTORY + activateName.toLowerCase() + \"/\", loader, extensions);\n-\n-                List<Class> activateExtensions = new ArrayList<>();\n-                for (Class clz : extensions) {\n-                    @SuppressWarnings(\"unchecked\")\n-                    LoadLevel activate = (LoadLevel) clz.getAnnotation(LoadLevel.class);\n-                    if (activate != null && activateName.equalsIgnoreCase(activate.name())) {\n-                        activateExtensions.add(clz);\n-                    }\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param argsType     the args type\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName, Class[] argsType, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @return list list\n+         */\n+        private List<S> loadAll() {\n+            return loadAll(null, null);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @param argsType the args type\n+         * @param args     the args\n+         * @return list list\n+         */\n+        private List<S> loadAll(Class[] argsType, Object[] args) {\n+            List<S> allInstances = new ArrayList<>();\n+            List<Class> allClazzs = getAllExtensionClass();\n+            if (CollectionUtils.isEmpty(allClazzs)) {\n+                return allInstances;\n+            }\n+            try {\n+                for (Class clazz : allClazzs) {\n+                    ExtensionDefinition definition = classToDefinitionMap.get(clazz);\n+                    allInstances.add(getExtensionInstance(definition, findClassLoader(), argsType, args));\n                 }\n+            } catch (Throwable t) {\n+                throw new EnhancedServiceNotFoundException(t);\n+            }\n+            return allInstances;\n+        }\n+\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        private List<Class> getAllExtensionClass() {\n+            return loadAllExtensionClass(findClassLoader());\n+        }\n+\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @param loader the loader\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        private List<Class> getAllExtensionClass(ClassLoader loader) {\n+            return loadAllExtensionClass(loader);\n+        }\n \n-                extensions = activateExtensions;\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            try {\n+                loadAllExtensionClass(loader);\n+                ExtensionDefinition defaultExtensionDefinition = getDefaultExtensionDefinition();\n+                return getExtensionInstance(defaultExtensionDefinition, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n+        }\n \n-            if (extensions.isEmpty()) {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \"[\" + activateName\n-                        + \"] and classloader : \" + ObjectUtils.toString(loader));\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(String activateName, ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            if (io.seata.common.util.StringUtils.isEmpty(activateName)) {\n+                throw new IllegalArgumentException(\"the name of service provider for [\" + type.getName() + \"] name is null\");\n             }\n-            Class<?> extension = extensions.get(extensions.size() - 1);\n-            S result = initInstance(service, extension, argTypes, args);\n-            if (!foundFromCache && LOGGER.isInfoEnabled()) {\n-                LOGGER.info(\"load \" + service.getSimpleName() + \"[\" + activateName + \"] extension by class[\" + extension\n-                    .getName() + \"]\");\n+            try {\n+                loadAllExtensionClass(loader);\n+                ExtensionDefinition cachedExtensionDefinition = getCachedExtensionDefinition(activateName);\n+                return getExtensionInstance(cachedExtensionDefinition, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n-            return result;\n-        } catch (Throwable e) {\n-            if (e instanceof EnhancedServiceNotFoundException) {\n-                throw (EnhancedServiceNotFoundException)e;\n+        }\n+\n+        private S getExtensionInstance(ExtensionDefinition definition, ClassLoader loader, Class[] argTypes,\n+                                       Object[] args) {\n+            if (definition == null) {\n+                throw new EnhancedServiceNotFoundException(\"not found service provider for : \" + type.getName());\n+            }\n+            if (Scope.SINGLETON.equals(definition.getScope())) {\n+                Holder<Object> holder = definitionToInstanceMap.get(definition);\n+                if (holder == null) {\n+                    definitionToInstanceMap.putIfAbsent(definition, new Holder<>());\n+                    holder = definitionToInstanceMap.get(definition);\n+                }\n+                Object instance = holder.get();\n+                if (instance == null) {\n+                    synchronized (holder) {\n+                        instance = holder.get();\n+                        if (instance == null) {\n+                            instance = createNewExtension(definition, loader, argTypes, args);\n+                            holder.set(instance);\n+                        }\n+                    }\n+                }\n+                return (S)instance;\n             } else {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \" caused by \" + ExceptionUtils\n-                        .getFullStackTrace(e));\n+                return createNewExtension(definition, loader, argTypes, args);\n             }\n         }\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> List<Class> findAllExtensionClass(Class<S> service, String activateName, ClassLoader loader) {\n-        List<Class> extensions = new ArrayList<>();\n-        try {\n-            loadFile(service, SERVICES_DIRECTORY, loader, extensions);\n-            loadFile(service, SEATA_DIRECTORY, loader, extensions);\n-        } catch (IOException e) {\n-            throw new EnhancedServiceNotFoundException(e);\n+        private S createNewExtension(ExtensionDefinition definition, ClassLoader loader, Class[] argTypes, Object[] args) {\n+            loadAllExtensionClass(loader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7708d26153092c9212ec3823c6a1d74533760020"}, "originalPosition": 460}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1352e9930b47adbb04e7249d503f3d734e3f01c", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/a1352e9930b47adbb04e7249d503f3d734e3f01c", "committedDate": "2020-03-23T09:33:15Z", "message": "Adjust the calling mode of EnhancedServiceLoader and InnerLoader"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTA3MTM2", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-378907136", "createdAt": "2020-03-21T10:02:50Z", "commit": {"oid": "453c8c61e615ca1eb798c735123be10512ddacc9"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxMDowNToxN1rOF5oraA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzo1NzoyNVrOF56BuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk3OTYyNA==", "bodyText": "Can be changed to try-resource", "url": "https://github.com/seata/seata/pull/2135#discussion_r395979624", "createdAt": "2020-03-21T10:05:17Z", "author": {"login": "ph3636"}, "path": "common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java", "diffHunk": "@@ -198,181 +173,445 @@\n      */\n     @SuppressWarnings(\"rawtypes\")\n     static <S> List<Class> getAllExtensionClass(Class<S> service, ClassLoader loader) {\n-        return findAllExtensionClass(service, null, loader);\n+        return InnerEnhancedServiceLoader.getServiceLoader(service).getAllExtensionClass(loader);\n     }\n \n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader) {\n-        return loadFile(service, activateName, loader, null, null);\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader, Class[] argTypes,\n-                                  Object[] args) {\n-        try {\n-            boolean foundFromCache = true;\n-            List<Class> extensions = providers.get(service);\n-            if (extensions == null) {\n-                synchronized (service) {\n-                    extensions = providers.get(service);\n-                    if (extensions == null) {\n-                        extensions = findAllExtensionClass(service, activateName, loader);\n-                        foundFromCache = false;\n-                        providers.put(service, extensions);\n-                    }\n+    private static class InnerEnhancedServiceLoader<S> {\n+        private static final Logger LOGGER = LoggerFactory.getLogger(EnhancedServiceLoader.class);\n+        private static final String SERVICES_DIRECTORY = \"META-INF/services/\";\n+        private static final String SEATA_DIRECTORY = \"META-INF/seata/\";\n+\n+        private static final ConcurrentMap<Class<?>, InnerEnhancedServiceLoader<?>> SERVICE_LOADERS =\n+                new ConcurrentHashMap<>();\n+\n+        private final Class<S> type;\n+        private final Holder<List<ExtensionDefinition>> definitionsHolder = new Holder<>();\n+        private final ConcurrentMap<ExtensionDefinition, Holder<Object>> definitionToInstanceMap =\n+                new ConcurrentHashMap<>();\n+        private final ConcurrentMap<String, List<ExtensionDefinition>> nameToDefinitionsMap = new ConcurrentHashMap<>();\n+        private final ConcurrentMap<Class<?>, ExtensionDefinition> classToDefinitionMap = new ConcurrentHashMap<>();\n+        private ExtensionDefinition defaultExtensionDefinition = null;\n+        private Integer highestLoadPriority = Integer.MIN_VALUE;\n+\n+        private InnerEnhancedServiceLoader(Class<S> type) {\n+            this.type = type;\n+        }\n+\n+        /**\n+         * Get the ServiceLoader for the specified Class\n+         *\n+         * @param type the type of the extension point\n+         * @param <S>  the type\n+         * @return the service loader\n+         */\n+        private static <S> InnerEnhancedServiceLoader<S> getServiceLoader(Class<S> type) {\n+            if (type == null) {\n+                throw new IllegalArgumentException(\"Enhanced Service type == null\");\n+            }\n+            InnerEnhancedServiceLoader<S> loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            if (loader == null) {\n+                SERVICE_LOADERS.putIfAbsent(type, new InnerEnhancedServiceLoader<S>(type));\n+                loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            }\n+            return loader;\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param loader the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(ClassLoader loader) throws EnhancedServiceNotFoundException {\n+            return loadExtension(loader, null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load() throws EnhancedServiceNotFoundException {\n+            return loadExtension(findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @param activateName the activate name\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName) throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param activateName the activate name\n+         * @param loader       the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName, ClassLoader loader)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, loader, null, null);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            Class[] argsType = null;\n+            if (args != null && args.length > 0) {\n+                argsType = new Class[args.length];\n+                for (int i = 0; i < args.length; i++) {\n+                    argsType[i] = args[i].getClass();\n                 }\n             }\n-            if (StringUtils.isNotEmpty(activateName)) {\n-                loadFile(service, SEATA_DIRECTORY + activateName.toLowerCase() + \"/\", loader, extensions);\n-\n-                List<Class> activateExtensions = new ArrayList<>();\n-                for (Class clz : extensions) {\n-                    @SuppressWarnings(\"unchecked\")\n-                    LoadLevel activate = (LoadLevel) clz.getAnnotation(LoadLevel.class);\n-                    if (activate != null && activateName.equalsIgnoreCase(activate.name())) {\n-                        activateExtensions.add(clz);\n-                    }\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param argsType     the args type\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName, Class[] argsType, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @return list list\n+         */\n+        private List<S> loadAll() {\n+            return loadAll(null, null);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @param argsType the args type\n+         * @param args     the args\n+         * @return list list\n+         */\n+        private List<S> loadAll(Class[] argsType, Object[] args) {\n+            List<S> allInstances = new ArrayList<>();\n+            List<Class> allClazzs = getAllExtensionClass();\n+            if (CollectionUtils.isEmpty(allClazzs)) {\n+                return allInstances;\n+            }\n+            try {\n+                for (Class clazz : allClazzs) {\n+                    ExtensionDefinition definition = classToDefinitionMap.get(clazz);\n+                    allInstances.add(getExtensionInstance(definition, findClassLoader(), argsType, args));\n                 }\n+            } catch (Throwable t) {\n+                throw new EnhancedServiceNotFoundException(t);\n+            }\n+            return allInstances;\n+        }\n \n-                extensions = activateExtensions;\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        private List<Class> getAllExtensionClass() {\n+            return loadAllExtensionClass(findClassLoader());\n+        }\n+\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @param loader the loader\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        private List<Class> getAllExtensionClass(ClassLoader loader) {\n+            return loadAllExtensionClass(loader);\n+        }\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            try {\n+                loadAllExtensionClass(loader);\n+                return getExtensionInstance(defaultExtensionDefinition, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n+        }\n \n-            if (extensions.isEmpty()) {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \"[\" + activateName\n-                        + \"] and classloader : \" + ObjectUtils.toString(loader));\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(String activateName, ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            if (io.seata.common.util.StringUtils.isEmpty(activateName)) {\n+                throw new IllegalArgumentException(\"the name of service provider for [\" + type.getName() + \"] name is null\");\n+            }\n+            try {\n+                loadAllExtensionClass(loader);\n+                ExtensionDefinition cachedExtensionDefinition = getCachedExtensionDefinition(activateName);\n+                return getExtensionInstance(cachedExtensionDefinition, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n-            Class<?> extension = extensions.get(extensions.size() - 1);\n-            S result = initInstance(service, extension, argTypes, args);\n-            if (!foundFromCache && LOGGER.isInfoEnabled()) {\n-                LOGGER.info(\"load \" + service.getSimpleName() + \"[\" + activateName + \"] extension by class[\" + extension\n-                    .getName() + \"]\");\n+        }\n+\n+        private S getExtensionInstance(ExtensionDefinition definition, ClassLoader loader, Class[] argTypes,\n+                                       Object[] args) {\n+            if (definition == null) {\n+                throw new EnhancedServiceNotFoundException(\"not found service provider for : \" + type.getName());\n             }\n-            return result;\n-        } catch (Throwable e) {\n-            if (e instanceof EnhancedServiceNotFoundException) {\n-                throw (EnhancedServiceNotFoundException)e;\n+            if (Scope.SINGLETON.equals(definition.getScope())) {\n+                Holder<Object> holder = definitionToInstanceMap.get(definition);\n+                if (holder == null) {\n+                    definitionToInstanceMap.putIfAbsent(definition, new Holder<>());\n+                    holder = definitionToInstanceMap.get(definition);\n+                }\n+                Object instance = holder.get();\n+                if (instance == null) {\n+                    synchronized (holder) {\n+                        instance = holder.get();\n+                        if (instance == null) {\n+                            instance = createNewExtension(definition, loader, argTypes, args);\n+                            holder.set(instance);\n+                        }\n+                    }\n+                }\n+                return (S)instance;\n             } else {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \" caused by \" + ExceptionUtils\n-                        .getFullStackTrace(e));\n+                return createNewExtension(definition, loader, argTypes, args);\n             }\n         }\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> List<Class> findAllExtensionClass(Class<S> service, String activateName, ClassLoader loader) {\n-        List<Class> extensions = new ArrayList<>();\n-        try {\n-            loadFile(service, SERVICES_DIRECTORY, loader, extensions);\n-            loadFile(service, SEATA_DIRECTORY, loader, extensions);\n-        } catch (IOException e) {\n-            throw new EnhancedServiceNotFoundException(e);\n+        private S createNewExtension(ExtensionDefinition definition, ClassLoader loader, Class[] argTypes, Object[] args) {\n+            loadAllExtensionClass(loader);\n+            Class<?> clazz = definition.getServiceClass();\n+            try {\n+                S newInstance = initInstance(clazz, argTypes, args);\n+                return newInstance;\n+            } catch (Throwable t) {\n+                throw new IllegalStateException(\"Extension instance(definition: \" + definition + \", class: \" +\n+                        type + \")  could not be instantiated: \" + t.getMessage(), t);\n+            }\n         }\n \n-        if (extensions.isEmpty()) {\n-            return extensions;\n-        }\n-        extensions.sort((c1, c2) -> {\n-            int o1 = 0;\n-            int o2 = 0;\n-            @SuppressWarnings(\"unchecked\")\n-            LoadLevel a1 = (LoadLevel) c1.getAnnotation(LoadLevel.class);\n-            @SuppressWarnings(\"unchecked\")\n-            LoadLevel a2 = (LoadLevel) c2.getAnnotation(LoadLevel.class);\n-\n-            if (a1 != null) {\n-                o1 = a1.order();\n+        private List<Class> loadAllExtensionClass(ClassLoader loader) {\n+            List<Class> result;\n+            List<ExtensionDefinition> definitions = definitionsHolder.get();\n+            if (definitions == null) {\n+                synchronized (definitionsHolder) {\n+                    definitions = definitionsHolder.get();\n+                    if (definitions == null) {\n+                        definitions = findAllExtensionDefinition(loader);\n+                        definitionsHolder.set(definitions);\n+                    }\n+                }\n             }\n+            result = definitions.stream().map(def -> def.getServiceClass()).collect(Collectors.toList());\n+            return result;\n+        }\n \n-            if (a2 != null) {\n-                o2 = a2.order();\n+        @SuppressWarnings(\"rawtypes\")\n+        private List<ExtensionDefinition> findAllExtensionDefinition(ClassLoader loader) {\n+            List<ExtensionDefinition> extensionDefinitions = new ArrayList<>();\n+            try {\n+                loadFile(SERVICES_DIRECTORY, loader, extensionDefinitions);\n+                loadFile(SEATA_DIRECTORY, loader, extensionDefinitions);\n+            } catch (IOException e) {\n+                throw new EnhancedServiceNotFoundException(e);\n             }\n \n-            return Integer.compare(o1, o2);\n-\n-        });\n+            //After loaded all the extensions,sort the caches by order\n+            if (!nameToDefinitionsMap.isEmpty()) {\n+                for (List<ExtensionDefinition> definitions : nameToDefinitionsMap.values()) {\n+                    Collections.sort(definitions, (def1, def2) -> {\n+                        int o1 = def1.getOrder();\n+                        int o2 = def2.getOrder();\n+                        return Integer.compare(o1, o2);\n+                    });\n+                }\n+            }\n \n-        return extensions;\n-    }\n+            if (!extensionDefinitions.isEmpty()) {\n+                Collections.sort(extensionDefinitions, (definition1, definition2) -> {\n+                    int o1 = definition1.getOrder();\n+                    int o2 = definition2.getOrder();\n+                    return Integer.compare(o1, o2);\n+                });\n+            }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static void loadFile(Class<?> service, String dir, ClassLoader classLoader, List<Class> extensions)\n-        throws IOException {\n-        String fileName = dir + service.getName();\n-        Enumeration<URL> urls;\n-        if (classLoader != null) {\n-            urls = classLoader.getResources(fileName);\n-        } else {\n-            urls = ClassLoader.getSystemResources(fileName);\n+            return extensionDefinitions;\n         }\n \n-        if (urls != null) {\n-            while (urls.hasMoreElements()) {\n-                java.net.URL url = urls.nextElement();\n-                BufferedReader reader = null;\n-                try {\n-                    reader = new BufferedReader(new InputStreamReader(url.openStream(), Constants.DEFAULT_CHARSET));\n-                    String line = null;\n-                    while ((line = reader.readLine()) != null) {\n-                        final int ci = line.indexOf('#');\n-                        if (ci >= 0) {\n-                            line = line.substring(0, ci);\n-                        }\n-                        line = line.trim();\n-                        if (line.length() > 0) {\n-                            try {\n-                                extensions.add(Class.forName(line, true, classLoader));\n-                            } catch (LinkageError | ClassNotFoundException e) {\n-                                LOGGER.warn(\"load [{}] class fail. {}\", line, e.getMessage());\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private void loadFile(String dir, ClassLoader classLoader, List<ExtensionDefinition> extensions)\n+                throws IOException {\n+            String fileName = dir + type.getName();\n+            Enumeration<java.net.URL> urls;\n+            if (classLoader != null) {\n+                urls = classLoader.getResources(fileName);\n+            } else {\n+                urls = ClassLoader.getSystemResources(fileName);\n+            }\n+            if (urls != null) {\n+                while (urls.hasMoreElements()) {\n+                    java.net.URL url = urls.nextElement();\n+                    BufferedReader reader = null;\n+                    try {\n+                        reader = new BufferedReader(new InputStreamReader(url.openStream(), Constants.DEFAULT_CHARSET));\n+                        String line = null;\n+                        while ((line = reader.readLine()) != null) {\n+                            final int ci = line.indexOf('#');\n+                            if (ci >= 0) {\n+                                line = line.substring(0, ci);\n+                            }\n+                            line = line.trim();\n+                            if (line.length() > 0) {\n+                                try {\n+                                    Class<?> clazz = Class.forName(line, true, classLoader);\n+                                    ExtensionDefinition extensionDefinition = getExtensionDefinition(clazz);\n+                                    extensions.add(extensionDefinition);\n+                                } catch (LinkageError | ClassNotFoundException e) {\n+                                    LOGGER.warn(\"load [{}] class fail. {}\", line, e.getMessage());\n+                                }\n                             }\n                         }\n+                    } catch (Throwable e) {\n+                        LOGGER.warn(e.getMessage());\n+                    } finally {\n+                        IOUtil.close(reader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "453c8c61e615ca1eb798c735123be10512ddacc9"}, "originalPosition": 604}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk3OTY4NQ==", "bodyText": "Can be changed to\u3010nameToDefinitionsMap.computeIfAbsent(serviceName, e -> new ArrayList<>()).add(result);\u3011", "url": "https://github.com/seata/seata/pull/2135#discussion_r395979685", "createdAt": "2020-03-21T10:06:02Z", "author": {"login": "ph3636"}, "path": "common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java", "diffHunk": "@@ -198,181 +173,445 @@\n      */\n     @SuppressWarnings(\"rawtypes\")\n     static <S> List<Class> getAllExtensionClass(Class<S> service, ClassLoader loader) {\n-        return findAllExtensionClass(service, null, loader);\n+        return InnerEnhancedServiceLoader.getServiceLoader(service).getAllExtensionClass(loader);\n     }\n \n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader) {\n-        return loadFile(service, activateName, loader, null, null);\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader, Class[] argTypes,\n-                                  Object[] args) {\n-        try {\n-            boolean foundFromCache = true;\n-            List<Class> extensions = providers.get(service);\n-            if (extensions == null) {\n-                synchronized (service) {\n-                    extensions = providers.get(service);\n-                    if (extensions == null) {\n-                        extensions = findAllExtensionClass(service, activateName, loader);\n-                        foundFromCache = false;\n-                        providers.put(service, extensions);\n-                    }\n+    private static class InnerEnhancedServiceLoader<S> {\n+        private static final Logger LOGGER = LoggerFactory.getLogger(EnhancedServiceLoader.class);\n+        private static final String SERVICES_DIRECTORY = \"META-INF/services/\";\n+        private static final String SEATA_DIRECTORY = \"META-INF/seata/\";\n+\n+        private static final ConcurrentMap<Class<?>, InnerEnhancedServiceLoader<?>> SERVICE_LOADERS =\n+                new ConcurrentHashMap<>();\n+\n+        private final Class<S> type;\n+        private final Holder<List<ExtensionDefinition>> definitionsHolder = new Holder<>();\n+        private final ConcurrentMap<ExtensionDefinition, Holder<Object>> definitionToInstanceMap =\n+                new ConcurrentHashMap<>();\n+        private final ConcurrentMap<String, List<ExtensionDefinition>> nameToDefinitionsMap = new ConcurrentHashMap<>();\n+        private final ConcurrentMap<Class<?>, ExtensionDefinition> classToDefinitionMap = new ConcurrentHashMap<>();\n+        private ExtensionDefinition defaultExtensionDefinition = null;\n+        private Integer highestLoadPriority = Integer.MIN_VALUE;\n+\n+        private InnerEnhancedServiceLoader(Class<S> type) {\n+            this.type = type;\n+        }\n+\n+        /**\n+         * Get the ServiceLoader for the specified Class\n+         *\n+         * @param type the type of the extension point\n+         * @param <S>  the type\n+         * @return the service loader\n+         */\n+        private static <S> InnerEnhancedServiceLoader<S> getServiceLoader(Class<S> type) {\n+            if (type == null) {\n+                throw new IllegalArgumentException(\"Enhanced Service type == null\");\n+            }\n+            InnerEnhancedServiceLoader<S> loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            if (loader == null) {\n+                SERVICE_LOADERS.putIfAbsent(type, new InnerEnhancedServiceLoader<S>(type));\n+                loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            }\n+            return loader;\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param loader the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(ClassLoader loader) throws EnhancedServiceNotFoundException {\n+            return loadExtension(loader, null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load() throws EnhancedServiceNotFoundException {\n+            return loadExtension(findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @param activateName the activate name\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName) throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param activateName the activate name\n+         * @param loader       the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName, ClassLoader loader)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, loader, null, null);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            Class[] argsType = null;\n+            if (args != null && args.length > 0) {\n+                argsType = new Class[args.length];\n+                for (int i = 0; i < args.length; i++) {\n+                    argsType[i] = args[i].getClass();\n                 }\n             }\n-            if (StringUtils.isNotEmpty(activateName)) {\n-                loadFile(service, SEATA_DIRECTORY + activateName.toLowerCase() + \"/\", loader, extensions);\n-\n-                List<Class> activateExtensions = new ArrayList<>();\n-                for (Class clz : extensions) {\n-                    @SuppressWarnings(\"unchecked\")\n-                    LoadLevel activate = (LoadLevel) clz.getAnnotation(LoadLevel.class);\n-                    if (activate != null && activateName.equalsIgnoreCase(activate.name())) {\n-                        activateExtensions.add(clz);\n-                    }\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param argsType     the args type\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName, Class[] argsType, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @return list list\n+         */\n+        private List<S> loadAll() {\n+            return loadAll(null, null);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @param argsType the args type\n+         * @param args     the args\n+         * @return list list\n+         */\n+        private List<S> loadAll(Class[] argsType, Object[] args) {\n+            List<S> allInstances = new ArrayList<>();\n+            List<Class> allClazzs = getAllExtensionClass();\n+            if (CollectionUtils.isEmpty(allClazzs)) {\n+                return allInstances;\n+            }\n+            try {\n+                for (Class clazz : allClazzs) {\n+                    ExtensionDefinition definition = classToDefinitionMap.get(clazz);\n+                    allInstances.add(getExtensionInstance(definition, findClassLoader(), argsType, args));\n                 }\n+            } catch (Throwable t) {\n+                throw new EnhancedServiceNotFoundException(t);\n+            }\n+            return allInstances;\n+        }\n \n-                extensions = activateExtensions;\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        private List<Class> getAllExtensionClass() {\n+            return loadAllExtensionClass(findClassLoader());\n+        }\n+\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @param loader the loader\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        private List<Class> getAllExtensionClass(ClassLoader loader) {\n+            return loadAllExtensionClass(loader);\n+        }\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            try {\n+                loadAllExtensionClass(loader);\n+                return getExtensionInstance(defaultExtensionDefinition, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n+        }\n \n-            if (extensions.isEmpty()) {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \"[\" + activateName\n-                        + \"] and classloader : \" + ObjectUtils.toString(loader));\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(String activateName, ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            if (io.seata.common.util.StringUtils.isEmpty(activateName)) {\n+                throw new IllegalArgumentException(\"the name of service provider for [\" + type.getName() + \"] name is null\");\n+            }\n+            try {\n+                loadAllExtensionClass(loader);\n+                ExtensionDefinition cachedExtensionDefinition = getCachedExtensionDefinition(activateName);\n+                return getExtensionInstance(cachedExtensionDefinition, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n-            Class<?> extension = extensions.get(extensions.size() - 1);\n-            S result = initInstance(service, extension, argTypes, args);\n-            if (!foundFromCache && LOGGER.isInfoEnabled()) {\n-                LOGGER.info(\"load \" + service.getSimpleName() + \"[\" + activateName + \"] extension by class[\" + extension\n-                    .getName() + \"]\");\n+        }\n+\n+        private S getExtensionInstance(ExtensionDefinition definition, ClassLoader loader, Class[] argTypes,\n+                                       Object[] args) {\n+            if (definition == null) {\n+                throw new EnhancedServiceNotFoundException(\"not found service provider for : \" + type.getName());\n             }\n-            return result;\n-        } catch (Throwable e) {\n-            if (e instanceof EnhancedServiceNotFoundException) {\n-                throw (EnhancedServiceNotFoundException)e;\n+            if (Scope.SINGLETON.equals(definition.getScope())) {\n+                Holder<Object> holder = definitionToInstanceMap.get(definition);\n+                if (holder == null) {\n+                    definitionToInstanceMap.putIfAbsent(definition, new Holder<>());\n+                    holder = definitionToInstanceMap.get(definition);\n+                }\n+                Object instance = holder.get();\n+                if (instance == null) {\n+                    synchronized (holder) {\n+                        instance = holder.get();\n+                        if (instance == null) {\n+                            instance = createNewExtension(definition, loader, argTypes, args);\n+                            holder.set(instance);\n+                        }\n+                    }\n+                }\n+                return (S)instance;\n             } else {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \" caused by \" + ExceptionUtils\n-                        .getFullStackTrace(e));\n+                return createNewExtension(definition, loader, argTypes, args);\n             }\n         }\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> List<Class> findAllExtensionClass(Class<S> service, String activateName, ClassLoader loader) {\n-        List<Class> extensions = new ArrayList<>();\n-        try {\n-            loadFile(service, SERVICES_DIRECTORY, loader, extensions);\n-            loadFile(service, SEATA_DIRECTORY, loader, extensions);\n-        } catch (IOException e) {\n-            throw new EnhancedServiceNotFoundException(e);\n+        private S createNewExtension(ExtensionDefinition definition, ClassLoader loader, Class[] argTypes, Object[] args) {\n+            loadAllExtensionClass(loader);\n+            Class<?> clazz = definition.getServiceClass();\n+            try {\n+                S newInstance = initInstance(clazz, argTypes, args);\n+                return newInstance;\n+            } catch (Throwable t) {\n+                throw new IllegalStateException(\"Extension instance(definition: \" + definition + \", class: \" +\n+                        type + \")  could not be instantiated: \" + t.getMessage(), t);\n+            }\n         }\n \n-        if (extensions.isEmpty()) {\n-            return extensions;\n-        }\n-        extensions.sort((c1, c2) -> {\n-            int o1 = 0;\n-            int o2 = 0;\n-            @SuppressWarnings(\"unchecked\")\n-            LoadLevel a1 = (LoadLevel) c1.getAnnotation(LoadLevel.class);\n-            @SuppressWarnings(\"unchecked\")\n-            LoadLevel a2 = (LoadLevel) c2.getAnnotation(LoadLevel.class);\n-\n-            if (a1 != null) {\n-                o1 = a1.order();\n+        private List<Class> loadAllExtensionClass(ClassLoader loader) {\n+            List<Class> result;\n+            List<ExtensionDefinition> definitions = definitionsHolder.get();\n+            if (definitions == null) {\n+                synchronized (definitionsHolder) {\n+                    definitions = definitionsHolder.get();\n+                    if (definitions == null) {\n+                        definitions = findAllExtensionDefinition(loader);\n+                        definitionsHolder.set(definitions);\n+                    }\n+                }\n             }\n+            result = definitions.stream().map(def -> def.getServiceClass()).collect(Collectors.toList());\n+            return result;\n+        }\n \n-            if (a2 != null) {\n-                o2 = a2.order();\n+        @SuppressWarnings(\"rawtypes\")\n+        private List<ExtensionDefinition> findAllExtensionDefinition(ClassLoader loader) {\n+            List<ExtensionDefinition> extensionDefinitions = new ArrayList<>();\n+            try {\n+                loadFile(SERVICES_DIRECTORY, loader, extensionDefinitions);\n+                loadFile(SEATA_DIRECTORY, loader, extensionDefinitions);\n+            } catch (IOException e) {\n+                throw new EnhancedServiceNotFoundException(e);\n             }\n \n-            return Integer.compare(o1, o2);\n-\n-        });\n+            //After loaded all the extensions,sort the caches by order\n+            if (!nameToDefinitionsMap.isEmpty()) {\n+                for (List<ExtensionDefinition> definitions : nameToDefinitionsMap.values()) {\n+                    Collections.sort(definitions, (def1, def2) -> {\n+                        int o1 = def1.getOrder();\n+                        int o2 = def2.getOrder();\n+                        return Integer.compare(o1, o2);\n+                    });\n+                }\n+            }\n \n-        return extensions;\n-    }\n+            if (!extensionDefinitions.isEmpty()) {\n+                Collections.sort(extensionDefinitions, (definition1, definition2) -> {\n+                    int o1 = definition1.getOrder();\n+                    int o2 = definition2.getOrder();\n+                    return Integer.compare(o1, o2);\n+                });\n+            }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static void loadFile(Class<?> service, String dir, ClassLoader classLoader, List<Class> extensions)\n-        throws IOException {\n-        String fileName = dir + service.getName();\n-        Enumeration<URL> urls;\n-        if (classLoader != null) {\n-            urls = classLoader.getResources(fileName);\n-        } else {\n-            urls = ClassLoader.getSystemResources(fileName);\n+            return extensionDefinitions;\n         }\n \n-        if (urls != null) {\n-            while (urls.hasMoreElements()) {\n-                java.net.URL url = urls.nextElement();\n-                BufferedReader reader = null;\n-                try {\n-                    reader = new BufferedReader(new InputStreamReader(url.openStream(), Constants.DEFAULT_CHARSET));\n-                    String line = null;\n-                    while ((line = reader.readLine()) != null) {\n-                        final int ci = line.indexOf('#');\n-                        if (ci >= 0) {\n-                            line = line.substring(0, ci);\n-                        }\n-                        line = line.trim();\n-                        if (line.length() > 0) {\n-                            try {\n-                                extensions.add(Class.forName(line, true, classLoader));\n-                            } catch (LinkageError | ClassNotFoundException e) {\n-                                LOGGER.warn(\"load [{}] class fail. {}\", line, e.getMessage());\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private void loadFile(String dir, ClassLoader classLoader, List<ExtensionDefinition> extensions)\n+                throws IOException {\n+            String fileName = dir + type.getName();\n+            Enumeration<java.net.URL> urls;\n+            if (classLoader != null) {\n+                urls = classLoader.getResources(fileName);\n+            } else {\n+                urls = ClassLoader.getSystemResources(fileName);\n+            }\n+            if (urls != null) {\n+                while (urls.hasMoreElements()) {\n+                    java.net.URL url = urls.nextElement();\n+                    BufferedReader reader = null;\n+                    try {\n+                        reader = new BufferedReader(new InputStreamReader(url.openStream(), Constants.DEFAULT_CHARSET));\n+                        String line = null;\n+                        while ((line = reader.readLine()) != null) {\n+                            final int ci = line.indexOf('#');\n+                            if (ci >= 0) {\n+                                line = line.substring(0, ci);\n+                            }\n+                            line = line.trim();\n+                            if (line.length() > 0) {\n+                                try {\n+                                    Class<?> clazz = Class.forName(line, true, classLoader);\n+                                    ExtensionDefinition extensionDefinition = getExtensionDefinition(clazz);\n+                                    extensions.add(extensionDefinition);\n+                                } catch (LinkageError | ClassNotFoundException e) {\n+                                    LOGGER.warn(\"load [{}] class fail. {}\", line, e.getMessage());\n+                                }\n                             }\n                         }\n+                    } catch (Throwable e) {\n+                        LOGGER.warn(e.getMessage());\n+                    } finally {\n+                        IOUtil.close(reader);\n                     }\n-                } catch (Throwable e) {\n-                    LOGGER.warn(e.getMessage());\n-                } finally {\n-                    IOUtil.close(reader);\n                 }\n             }\n         }\n-    }\n \n-    /**\n-     * init instance\n-     *\n-     * @param <S>       the type parameter\n-     * @param service   the service\n-     * @param implClazz the impl clazz\n-     * @param argTypes  the arg types\n-     * @param args      the args\n-     * @return s s\n-     * @throws IllegalAccessException the illegal access exception\n-     * @throws InstantiationException the instantiation exception\n-     * @throws NoSuchMethodException the no such method exception\n-     * @throws InvocationTargetException the invocation target exception\n-     */\n-    protected static <S> S initInstance(Class<S> service, Class implClazz, Class[] argTypes, Object[] args)\n-        throws IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {\n-        S s = null;\n-        if (argTypes != null && args != null) {\n-            // Constructor with arguments\n-            Constructor<S> constructor = implClazz.getDeclaredConstructor(argTypes);\n-            s = service.cast(constructor.newInstance(args));\n-        } else {\n-            // default Constructor\n-            s = service.cast(implClazz.newInstance());\n+        private ExtensionDefinition getExtensionDefinition(Class<?> clazz) {\n+            String serviceName = null;\n+            Integer priority = 0;\n+            Scope scope = Scope.SINGLETON;\n+            LoadLevel loadLevel = clazz.getAnnotation(LoadLevel.class);\n+            if (loadLevel != null) {\n+                serviceName = loadLevel.name();\n+                priority = loadLevel.order();\n+                scope = loadLevel.scope();\n+            }\n+            ExtensionDefinition result = new ExtensionDefinition(serviceName, priority, scope, clazz);\n+            //do cache\n+            classToDefinitionMap.put(clazz, result);\n+            if (serviceName != null) {\n+                if (nameToDefinitionsMap.containsKey(serviceName)) {\n+                    List<ExtensionDefinition> definitions = nameToDefinitionsMap.get(serviceName);\n+                    definitions.add(result);\n+                } else {\n+                    List<ExtensionDefinition> definitions = new ArrayList<>();\n+                    definitions.add(result);\n+                    nameToDefinitionsMap.put(serviceName, definitions);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "453c8c61e615ca1eb798c735123be10512ddacc9"}, "originalPosition": 660}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2MzcxOQ==", "bodyText": "It should be singleton", "url": "https://github.com/seata/seata/pull/2135#discussion_r396263719", "createdAt": "2020-03-23T07:57:07Z", "author": {"login": "ph3636"}, "path": "metrics/seata-metrics-exporter-prometheus/src/main/java/io/seata/metrics/exporter/prometheus/PrometheusExporter.java", "diffHunk": "@@ -37,7 +38,7 @@\n  *\n  * @author zhengyangyong\n  */\n-@LoadLevel(name = \"Prometheus\", order = 1)\n+@LoadLevel(name = \"prometheus\", order = 1, scope = Scope.PROTOTYPE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7708d26153092c9212ec3823c6a1d74533760020"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2Mzc4MQ==", "bodyText": "It should be singleton", "url": "https://github.com/seata/seata/pull/2135#discussion_r396263781", "createdAt": "2020-03-23T07:57:14Z", "author": {"login": "ph3636"}, "path": "metrics/seata-metrics-registry-compact/src/main/java/io/seata/metrics/registry/compact/CompactRegistry.java", "diffHunk": "@@ -37,7 +38,7 @@\n  *\n  * @author zhengyangyong\n  */\n-@LoadLevel(name = \"Compact\", order = 1)\n+@LoadLevel(name = \"compact\", order = 1, scope = Scope.PROTOTYPE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7708d26153092c9212ec3823c6a1d74533760020"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2Mzg2NA==", "bodyText": "It should be singleton", "url": "https://github.com/seata/seata/pull/2135#discussion_r396263864", "createdAt": "2020-03-23T07:57:25Z", "author": {"login": "ph3636"}, "path": "serializer/seata-serializer-seata/src/main/java/io/seata/serializer/seata/SeataSerializer.java", "diffHunk": "@@ -28,7 +29,7 @@\n  *\n  * @author zhangsen\n  */\n-@LoadLevel(name = \"SEATA\")\n+@LoadLevel(name = \"SEATA\", scope = Scope.PROTOTYPE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7708d26153092c9212ec3823c6a1d74533760020"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c034f8f74f6203dabcac2a5b7a13fcf71d0ebe63", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/c034f8f74f6203dabcac2a5b7a13fcf71d0ebe63", "committedDate": "2020-03-23T11:05:37Z", "message": "adjust some scope value of @LoadLevel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e86307894c585db431c769de1a0be66f5687f664", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/e86307894c585db431c769de1a0be66f5687f664", "committedDate": "2020-03-23T11:16:34Z", "message": "remove unuse import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MzU3NDU3", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-379357457", "createdAt": "2020-03-23T11:51:52Z", "commit": {"oid": "e86307894c585db431c769de1a0be66f5687f664"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MzYxNDU1", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-379361455", "createdAt": "2020-03-23T11:57:51Z", "commit": {"oid": "e86307894c585db431c769de1a0be66f5687f664"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67e06c31932e2c2a9e1dffeda1ba7f64c5078a93", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/67e06c31932e2c2a9e1dffeda1ba7f64c5078a93", "committedDate": "2020-03-23T12:07:07Z", "message": "adjust import order in some class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MzgwMDAy", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-379380002", "createdAt": "2020-03-23T12:25:42Z", "commit": {"oid": "67e06c31932e2c2a9e1dffeda1ba7f64c5078a93"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjoyNTo0MlrOF6DFtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjoyNTo0MlrOF6DFtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMjM0Mg==", "bodyText": "Expression assertThat needs .isTrue().", "url": "https://github.com/seata/seata/pull/2135#discussion_r396412342", "createdAt": "2020-03-23T12:25:42Z", "author": {"login": "ggndnn"}, "path": "common/src/test/java/io/seata/common/loader/EnhancedServiceLoaderTest.java", "diffHunk": "@@ -98,4 +98,32 @@ public void getAllExtensionClass1() {\n         assertThat(allExtensionClass).isNotEmpty();\n     }\n \n+    @Test\n+    public void getSingletonExtensionInstance(){\n+        Hello hello1 = EnhancedServiceLoader.load(Hello.class, \"ChineseHello\");\n+        Hello hello2 = EnhancedServiceLoader.load(Hello.class, \"ChineseHello\");\n+        assertThat(hello1 == hello2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67e06c31932e2c2a9e1dffeda1ba7f64c5078a93"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0050e9834be8bc4b962f0c3e32ea48ccdadc0303", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/0050e9834be8bc4b962f0c3e32ea48ccdadc0303", "committedDate": "2020-03-23T12:39:34Z", "message": "add isTrue after assert"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NDA5ODU0", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-379409854", "createdAt": "2020-03-23T13:07:35Z", "commit": {"oid": "0050e9834be8bc4b962f0c3e32ea48ccdadc0303"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzowNzozNVrOF6EiPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzowNzozNVrOF6EiPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQzNjAyOQ==", "bodyText": "If service is SINGLETON and we call load twice with different args, what instance should return? So far we get the first created instance.", "url": "https://github.com/seata/seata/pull/2135#discussion_r396436029", "createdAt": "2020-03-23T13:07:35Z", "author": {"login": "ggndnn"}, "path": "common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java", "diffHunk": "@@ -113,15 +106,8 @@\n      * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n      */\n     public static <S> S load(Class<S> service, String activateName, Object[] args)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0050e9834be8bc4b962f0c3e32ea48ccdadc0303"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NDMyNzU3", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-379432757", "createdAt": "2020-03-23T13:35:25Z", "commit": {"oid": "0050e9834be8bc4b962f0c3e32ea48ccdadc0303"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzozNToyNVrOF6Fo3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMzozNToyNVrOF6Fo3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ1NDExMQ==", "bodyText": "Expression assertThat needs .isTrue().", "url": "https://github.com/seata/seata/pull/2135#discussion_r396454111", "createdAt": "2020-03-23T13:35:25Z", "author": {"login": "ggndnn"}, "path": "common/src/test/java/io/seata/common/loader/EnhancedServiceLoaderTest.java", "diffHunk": "@@ -98,4 +98,32 @@ public void getAllExtensionClass1() {\n         assertThat(allExtensionClass).isNotEmpty();\n     }\n \n+    @Test\n+    public void getSingletonExtensionInstance(){\n+        Hello hello1 = EnhancedServiceLoader.load(Hello.class, \"ChineseHello\");\n+        Hello hello2 = EnhancedServiceLoader.load(Hello.class, \"ChineseHello\");\n+        assertThat(hello1 == hello2).isTrue();\n+    }\n+\n+    @Test\n+    public void getMultipleExtensionInstance(){\n+        Hello hello1 = EnhancedServiceLoader.load(Hello.class, \"LatinHello\");\n+        Hello hello2 = EnhancedServiceLoader.load(Hello.class, \"LatinHello\");\n+        assertThat(hello1 == hello2).isFalse();\n+    }\n+\n+    @Test\n+    public void getAllInstances(){\n+        List<Hello> hellows1 = EnhancedServiceLoader.loadAll(Hello.class);\n+        List<Hello> hellows2 = EnhancedServiceLoader.loadAll(Hello.class);\n+        for (Hello hello : hellows1){\n+            if(hello.say()!=\"Ol\u00e1.\"){\n+                assertThat(hellows2.contains(hello));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0050e9834be8bc4b962f0c3e32ea48ccdadc0303"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c806d1ba7e1796c900393014a25153a6629e1986", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/c806d1ba7e1796c900393014a25153a6629e1986", "committedDate": "2020-03-23T14:24:14Z", "message": "add isTrue after assert"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NDg4Nzcy", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-379488772", "createdAt": "2020-03-23T14:35:35Z", "commit": {"oid": "c806d1ba7e1796c900393014a25153a6629e1986"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDozNTozNVrOF6IRDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDozNTozNVrOF6IRDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ5NzE2NQ==", "bodyText": "definitionsHolder.get() -> currentDefinitions", "url": "https://github.com/seata/seata/pull/2135#discussion_r396497165", "createdAt": "2020-03-23T14:35:35Z", "author": {"login": "ggndnn"}, "path": "common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java", "diffHunk": "@@ -198,181 +172,417 @@\n      */\n     @SuppressWarnings(\"rawtypes\")\n     static <S> List<Class> getAllExtensionClass(Class<S> service, ClassLoader loader) {\n-        return findAllExtensionClass(service, null, loader);\n+        return InnerEnhancedServiceLoader.getServiceLoader(service).getAllExtensionClass(loader);\n     }\n \n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader) {\n-        return loadFile(service, activateName, loader, null, null);\n+    /**\n+     * Cannot use TCCL, in the pandora container will cause the class in the plugin not to be loaded\n+     *\n+     * @return\n+     */\n+    private static ClassLoader findClassLoader() {\n+        return EnhancedServiceLoader.class.getClassLoader();\n     }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader, Class[] argTypes,\n-                                  Object[] args) {\n-        try {\n-            boolean foundFromCache = true;\n-            List<Class> extensions = providers.get(service);\n-            if (extensions == null) {\n-                synchronized (service) {\n-                    extensions = providers.get(service);\n-                    if (extensions == null) {\n-                        extensions = findAllExtensionClass(service, activateName, loader);\n-                        foundFromCache = false;\n-                        providers.put(service, extensions);\n-                    }\n+\n+    private static class InnerEnhancedServiceLoader<S> {\n+        private static final Logger LOGGER = LoggerFactory.getLogger(InnerEnhancedServiceLoader.class);\n+        private static final String SERVICES_DIRECTORY = \"META-INF/services/\";\n+        private static final String SEATA_DIRECTORY = \"META-INF/seata/\";\n+\n+        private static final ConcurrentMap<Class<?>, InnerEnhancedServiceLoader<?>> SERVICE_LOADERS =\n+                new ConcurrentHashMap<>();\n+\n+        private final Class<S> type;\n+        private final Holder<List<ExtensionDefinition>> definitionsHolder = new Holder<>();\n+        private final ConcurrentMap<ExtensionDefinition, Holder<Object>> definitionToInstanceMap =\n+                new ConcurrentHashMap<>();\n+        private final ConcurrentMap<String, List<ExtensionDefinition>> nameToDefinitionsMap = new ConcurrentHashMap<>();\n+        private final ConcurrentMap<Class<?>, ExtensionDefinition> classToDefinitionMap = new ConcurrentHashMap<>();\n+\n+        private InnerEnhancedServiceLoader(Class<S> type) {\n+            this.type = type;\n+        }\n+\n+        /**\n+         * Get the ServiceLoader for the specified Class\n+         *\n+         * @param type the type of the extension point\n+         * @param <S>  the type\n+         * @return the service loader\n+         */\n+        private static <S> InnerEnhancedServiceLoader<S> getServiceLoader(Class<S> type) {\n+            if (type == null) {\n+                throw new IllegalArgumentException(\"Enhanced Service type == null\");\n+            }\n+            InnerEnhancedServiceLoader<S> loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            if (loader == null) {\n+                SERVICE_LOADERS.putIfAbsent(type, new InnerEnhancedServiceLoader<S>(type));\n+                loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            }\n+            return loader;\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param loader the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(ClassLoader loader) throws EnhancedServiceNotFoundException {\n+            return loadExtension(loader, null, null);\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param activateName the activate name\n+         * @param loader       the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName, ClassLoader loader)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, loader, null, null);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param args         the args\n+         * @param loader       the loader\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName, Object[] args, ClassLoader loader)\n+                throws EnhancedServiceNotFoundException {\n+            Class[] argsType = null;\n+            if (args != null && args.length > 0) {\n+                argsType = new Class[args.length];\n+                for (int i = 0; i < args.length; i++) {\n+                    argsType[i] = args[i].getClass();\n                 }\n             }\n-            if (StringUtils.isNotEmpty(activateName)) {\n-                loadFile(service, SEATA_DIRECTORY + activateName.toLowerCase() + \"/\", loader, extensions);\n-\n-                List<Class> activateExtensions = new ArrayList<>();\n-                for (Class clz : extensions) {\n-                    @SuppressWarnings(\"unchecked\")\n-                    LoadLevel activate = (LoadLevel) clz.getAnnotation(LoadLevel.class);\n-                    if (activate != null && activateName.equalsIgnoreCase(activate.name())) {\n-                        activateExtensions.add(clz);\n-                    }\n+            return loadExtension(activateName, loader, argsType, args);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param argsType     the args type\n+         * @param args         the args\n+         * @param loader  the class loader\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        private S load(String activateName, Class[] argsType, Object[] args, ClassLoader loader)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, loader, argsType, args);\n+        }\n+\n+        /**\n+         * get all implements\n+         * @param loader  the class loader\n+         *\n+         * @return list list\n+         */\n+        private List<S> loadAll(ClassLoader loader) {\n+            return loadAll(null, null, loader);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @param argsType the args type\n+         * @param args     the args\n+         * @return list list\n+         */\n+        private List<S> loadAll(Class[] argsType, Object[] args, ClassLoader loader) {\n+            List<S> allInstances = new ArrayList<>();\n+            List<Class> allClazzs = getAllExtensionClass(loader);\n+            if (CollectionUtils.isEmpty(allClazzs)) {\n+                return allInstances;\n+            }\n+            try {\n+                for (Class clazz : allClazzs) {\n+                    ExtensionDefinition definition = classToDefinitionMap.get(clazz);\n+                    allInstances.add(getExtensionInstance(definition, loader, argsType, args));\n                 }\n+            } catch (Throwable t) {\n+                throw new EnhancedServiceNotFoundException(t);\n+            }\n+            return allInstances;\n+        }\n \n-                extensions = activateExtensions;\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @param loader the loader\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        private List<Class> getAllExtensionClass(ClassLoader loader) {\n+            return loadAllExtensionClass(loader);\n+        }\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            try {\n+                loadAllExtensionClass(loader);\n+                ExtensionDefinition defaultExtensionDefinition = getDefaultExtensionDefinition();\n+                return getExtensionInstance(defaultExtensionDefinition, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n+        }\n \n-            if (extensions.isEmpty()) {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \"[\" + activateName\n-                        + \"] and classloader : \" + ObjectUtils.toString(loader));\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(String activateName, ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            if (io.seata.common.util.StringUtils.isEmpty(activateName)) {\n+                throw new IllegalArgumentException(\"the name of service provider for [\" + type.getName() + \"] name is null\");\n             }\n-            Class<?> extension = extensions.get(extensions.size() - 1);\n-            S result = initInstance(service, extension, argTypes, args);\n-            if (!foundFromCache && LOGGER.isInfoEnabled()) {\n-                LOGGER.info(\"load \" + service.getSimpleName() + \"[\" + activateName + \"] extension by class[\" + extension\n-                    .getName() + \"]\");\n+            try {\n+                loadAllExtensionClass(loader);\n+                ExtensionDefinition cachedExtensionDefinition = getCachedExtensionDefinition(activateName);\n+                return getExtensionInstance(cachedExtensionDefinition, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n+            }\n+        }\n+\n+        private S getExtensionInstance(ExtensionDefinition definition, ClassLoader loader, Class[] argTypes,\n+                                       Object[] args) {\n+            if (definition == null) {\n+                throw new EnhancedServiceNotFoundException(\"not found service provider for : \" + type.getName());\n             }\n-            return result;\n-        } catch (Throwable e) {\n-            if (e instanceof EnhancedServiceNotFoundException) {\n-                throw (EnhancedServiceNotFoundException)e;\n+            if (Scope.SINGLETON.equals(definition.getScope())) {\n+                Holder<Object> holder = definitionToInstanceMap.get(definition);\n+                if (holder == null) {\n+                    definitionToInstanceMap.putIfAbsent(definition, new Holder<>());\n+                    holder = definitionToInstanceMap.get(definition);\n+                }\n+                Object instance = holder.get();\n+                if (instance == null) {\n+                    synchronized (holder) {\n+                        instance = holder.get();\n+                        if (instance == null) {\n+                            instance = createNewExtension(definition, loader, argTypes, args);\n+                            holder.set(instance);\n+                        }\n+                    }\n+                }\n+                return (S)instance;\n             } else {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \" caused by \" + ExceptionUtils\n-                        .getFullStackTrace(e));\n+                return createNewExtension(definition, loader, argTypes, args);\n             }\n         }\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> List<Class> findAllExtensionClass(Class<S> service, String activateName, ClassLoader loader) {\n-        List<Class> extensions = new ArrayList<>();\n-        try {\n-            loadFile(service, SERVICES_DIRECTORY, loader, extensions);\n-            loadFile(service, SEATA_DIRECTORY, loader, extensions);\n-        } catch (IOException e) {\n-            throw new EnhancedServiceNotFoundException(e);\n+        private S createNewExtension(ExtensionDefinition definition, ClassLoader loader, Class[] argTypes, Object[] args) {\n+            Class<?> clazz = definition.getServiceClass();\n+            try {\n+                S newInstance = initInstance(clazz, argTypes, args);\n+                return newInstance;\n+            } catch (Throwable t) {\n+                throw new IllegalStateException(\"Extension instance(definition: \" + definition + \", class: \" +\n+                        type + \")  could not be instantiated: \" + t.getMessage(), t);\n+            }\n         }\n \n-        if (extensions.isEmpty()) {\n-            return extensions;\n-        }\n-        extensions.sort((c1, c2) -> {\n-            int o1 = 0;\n-            int o2 = 0;\n-            @SuppressWarnings(\"unchecked\")\n-            LoadLevel a1 = (LoadLevel) c1.getAnnotation(LoadLevel.class);\n-            @SuppressWarnings(\"unchecked\")\n-            LoadLevel a2 = (LoadLevel) c2.getAnnotation(LoadLevel.class);\n-\n-            if (a1 != null) {\n-                o1 = a1.order();\n+        private List<Class> loadAllExtensionClass(ClassLoader loader) {\n+            List<Class> result;\n+            List<ExtensionDefinition> definitions = definitionsHolder.get();\n+            if (definitions == null) {\n+                synchronized (definitionsHolder) {\n+                    definitions = definitionsHolder.get();\n+                    if (definitions == null) {\n+                        definitions = findAllExtensionDefinition(loader);\n+                        definitionsHolder.set(definitions);\n+                    }\n+                }\n             }\n+            return definitions.stream().map(def -> def.getServiceClass()).collect(Collectors.toList());\n+        }\n \n-            if (a2 != null) {\n-                o2 = a2.order();\n+        @SuppressWarnings(\"rawtypes\")\n+        private List<ExtensionDefinition> findAllExtensionDefinition(ClassLoader loader) {\n+            List<ExtensionDefinition> extensionDefinitions = new ArrayList<>();\n+            try {\n+                loadFile(SERVICES_DIRECTORY, loader, extensionDefinitions);\n+                loadFile(SEATA_DIRECTORY, loader, extensionDefinitions);\n+            } catch (IOException e) {\n+                throw new EnhancedServiceNotFoundException(e);\n             }\n \n-            return Integer.compare(o1, o2);\n-\n-        });\n+            //After loaded all the extensions,sort the caches by order\n+            if (!nameToDefinitionsMap.isEmpty()) {\n+                for (List<ExtensionDefinition> definitions : nameToDefinitionsMap.values()) {\n+                    Collections.sort(definitions, (def1, def2) -> {\n+                        int o1 = def1.getOrder();\n+                        int o2 = def2.getOrder();\n+                        return Integer.compare(o1, o2);\n+                    });\n+                }\n+            }\n \n-        return extensions;\n-    }\n+            if (!extensionDefinitions.isEmpty()) {\n+                Collections.sort(extensionDefinitions, (definition1, definition2) -> {\n+                    int o1 = definition1.getOrder();\n+                    int o2 = definition2.getOrder();\n+                    return Integer.compare(o1, o2);\n+                });\n+            }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static void loadFile(Class<?> service, String dir, ClassLoader classLoader, List<Class> extensions)\n-        throws IOException {\n-        String fileName = dir + service.getName();\n-        Enumeration<URL> urls;\n-        if (classLoader != null) {\n-            urls = classLoader.getResources(fileName);\n-        } else {\n-            urls = ClassLoader.getSystemResources(fileName);\n+            return extensionDefinitions;\n         }\n \n-        if (urls != null) {\n-            while (urls.hasMoreElements()) {\n-                java.net.URL url = urls.nextElement();\n-                BufferedReader reader = null;\n-                try {\n-                    reader = new BufferedReader(new InputStreamReader(url.openStream(), Constants.DEFAULT_CHARSET));\n-                    String line = null;\n-                    while ((line = reader.readLine()) != null) {\n-                        final int ci = line.indexOf('#');\n-                        if (ci >= 0) {\n-                            line = line.substring(0, ci);\n-                        }\n-                        line = line.trim();\n-                        if (line.length() > 0) {\n-                            try {\n-                                extensions.add(Class.forName(line, true, classLoader));\n-                            } catch (LinkageError | ClassNotFoundException e) {\n-                                LOGGER.warn(\"load [{}] class fail. {}\", line, e.getMessage());\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        private void loadFile(String dir, ClassLoader loader, List<ExtensionDefinition> extensions)\n+                throws IOException {\n+            String fileName = dir + type.getName();\n+            Enumeration<java.net.URL> urls;\n+            if (loader != null) {\n+                urls = loader.getResources(fileName);\n+            } else {\n+                urls = ClassLoader.getSystemResources(fileName);\n+            }\n+            if (urls != null) {\n+                while (urls.hasMoreElements()) {\n+                    java.net.URL url = urls.nextElement();\n+                    try (BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), Constants.DEFAULT_CHARSET))) {\n+                        String line = null;\n+                        while ((line = reader.readLine()) != null) {\n+                            final int ci = line.indexOf('#');\n+                            if (ci >= 0) {\n+                                line = line.substring(0, ci);\n+                            }\n+                            line = line.trim();\n+                            if (line.length() > 0) {\n+                                try {\n+                                    Class<?> clazz = Class.forName(line, true, loader);\n+                                    ExtensionDefinition extensionDefinition = getUnloadedExtensionDefinition(clazz);\n+                                    if (extensionDefinition == null) {\n+                                        LOGGER.warn(\"The same extension {} has already been loaded, skipped\", line);\n+                                        continue;\n+                                    }\n+                                    extensions.add(extensionDefinition);\n+                                } catch (LinkageError | ClassNotFoundException e) {\n+                                    LOGGER.warn(\"Load [{}] class fail. {}\", line, e.getMessage());\n+                                }\n                             }\n                         }\n+                    } catch (Throwable e) {\n+                        LOGGER.warn(e.getMessage());\n                     }\n-                } catch (Throwable e) {\n-                    LOGGER.warn(e.getMessage());\n-                } finally {\n-                    IOUtil.close(reader);\n                 }\n             }\n         }\n-    }\n \n-    /**\n-     * init instance\n-     *\n-     * @param <S>       the type parameter\n-     * @param service   the service\n-     * @param implClazz the impl clazz\n-     * @param argTypes  the arg types\n-     * @param args      the args\n-     * @return s s\n-     * @throws IllegalAccessException the illegal access exception\n-     * @throws InstantiationException the instantiation exception\n-     * @throws NoSuchMethodException the no such method exception\n-     * @throws InvocationTargetException the invocation target exception\n-     */\n-    protected static <S> S initInstance(Class<S> service, Class implClazz, Class[] argTypes, Object[] args)\n-        throws IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {\n-        S s = null;\n-        if (argTypes != null && args != null) {\n-            // Constructor with arguments\n-            Constructor<S> constructor = implClazz.getDeclaredConstructor(argTypes);\n-            s = service.cast(constructor.newInstance(args));\n-        } else {\n-            // default Constructor\n-            s = service.cast(implClazz.newInstance());\n+        private ExtensionDefinition getUnloadedExtensionDefinition(Class<?> clazz) {\n+            String serviceName = null;\n+            Integer priority = 0;\n+            Scope scope = Scope.SINGLETON;\n+            LoadLevel loadLevel = clazz.getAnnotation(LoadLevel.class);\n+            if (loadLevel != null) {\n+                serviceName = loadLevel.name();\n+                priority = loadLevel.order();\n+                scope = loadLevel.scope();\n+            }\n+            //Check whether the definition has been loaded\n+            if (!classToDefinitionMap.containsKey(clazz)) {\n+                ExtensionDefinition result = new ExtensionDefinition(serviceName, priority, scope, clazz);\n+                classToDefinitionMap.put(clazz, result);\n+                if (serviceName != null) {\n+                    if (nameToDefinitionsMap.containsKey(serviceName)) {\n+                        List<ExtensionDefinition> definitions = nameToDefinitionsMap.get(serviceName);\n+                        definitions.add(result);\n+                    } else {\n+                        nameToDefinitionsMap.computeIfAbsent(serviceName, e -> new ArrayList<>()).add(result);\n+                    }\n+                }\n+                return result;\n+            }\n+            return null;\n         }\n-        if (s instanceof Initialize) {\n-            ((Initialize)s).init();\n+\n+        private ExtensionDefinition getDefaultExtensionDefinition() {\n+            List<ExtensionDefinition> currentDefinitions = definitionsHolder.get();\n+            if (currentDefinitions != null && currentDefinitions.size() > 0) {\n+                return definitionsHolder.get().get(currentDefinitions.size() - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c806d1ba7e1796c900393014a25153a6629e1986"}, "originalPosition": 638}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03596f24e934dee6cf9c74dc611ff50eb302834f", "author": {"user": {"login": "zjinlei", "name": null}}, "url": "https://github.com/seata/seata/commit/03596f24e934dee6cf9c74dc611ff50eb302834f", "committedDate": "2020-03-23T16:18:45Z", "message": "Merge branch 'develop' into f_spi"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NTk0MjYz", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-379594263", "createdAt": "2020-03-23T16:22:04Z", "commit": {"oid": "c806d1ba7e1796c900393014a25153a6629e1986"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "112945ab822378e6c37b4d96fef3661f948e2cd3", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/112945ab822378e6c37b4d96fef3661f948e2cd3", "committedDate": "2020-03-24T01:14:24Z", "message": "adjust the usage of computeIfAbsent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15e979bb5061b68e7e2f7efa361cb2dc624e9b0b", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/15e979bb5061b68e7e2f7efa361cb2dc624e9b0b", "committedDate": "2020-03-24T01:14:34Z", "message": "Merge branch 'f_spi' of https://github.com/CharmingRabbit/seata into f_spi"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5OTU2NjI4", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-379956628", "createdAt": "2020-03-24T02:18:12Z", "commit": {"oid": "15e979bb5061b68e7e2f7efa361cb2dc624e9b0b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8454613ba69e659ff745874ccec193d0a36b146e", "author": {"user": null}, "url": "https://github.com/seata/seata/commit/8454613ba69e659ff745874ccec193d0a36b146e", "committedDate": "2019-11-09T03:11:47Z", "message": "restructure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "387b7cbb08becf632ec62633c456e7c1fc77badc", "author": {"user": null}, "url": "https://github.com/seata/seata/commit/387b7cbb08becf632ec62633c456e7c1fc77badc", "committedDate": "2019-11-09T06:38:09Z", "message": "Restructure SQLRecognizer and UndoExecutor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "472cb658328284dedb9b66d3369419428ce2616d", "author": {"user": null}, "url": "https://github.com/seata/seata/commit/472cb658328284dedb9b66d3369419428ce2616d", "committedDate": "2019-11-11T06:35:24Z", "message": "Merge remote-tracking branch 'upstream/develop' into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96de7fd8499b1a8344532465b92661485b59b2e1", "author": {"user": null}, "url": "https://github.com/seata/seata/commit/96de7fd8499b1a8344532465b92661485b59b2e1", "committedDate": "2019-11-11T06:37:05Z", "message": "optimize concurrency of UndoExecutorGruopFactory and SQLRecognizerGroupFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4f090ff64ca12f4d9a47a51d8d88f70cba90804", "author": {"user": null}, "url": "https://github.com/seata/seata/commit/d4f090ff64ca12f4d9a47a51d8d88f70cba90804", "committedDate": "2019-11-11T07:14:20Z", "message": "remove @version tags"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "550f6e12e528e0b891f7fa5244cfd75ad40aa9dc", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/550f6e12e528e0b891f7fa5244cfd75ad40aa9dc", "committedDate": "2019-11-11T08:13:55Z", "message": "add javaDoc;optimize UndoExecutorGroupFactory and SQLOperateRecognizerGroupFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0e250e7424b5c023e29c8cb302c90257fc6865f", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/b0e250e7424b5c023e29c8cb302c90257fc6865f", "committedDate": "2019-11-11T09:17:47Z", "message": "Merge branch 'develop' into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d06df2e0f95590f70c50cede0e91a0769b88047a", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/d06df2e0f95590f70c50cede0e91a0769b88047a", "committedDate": "2019-11-12T01:04:52Z", "message": "rename **Group to **Holder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d46a4660cb487c73ddfc6da7bbab5122f7cda9f", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/3d46a4660cb487c73ddfc6da7bbab5122f7cda9f", "committedDate": "2019-11-12T01:06:40Z", "message": "Merge branch 'develop' of https://github.com/CharmingRabbit/seata into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28322ac0b56e79b26f156d9e927371ece2799c8b", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/28322ac0b56e79b26f156d9e927371ece2799c8b", "committedDate": "2019-11-12T10:07:28Z", "message": "Merge branch 'develop' into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57fb2d033e654890bc34adf3f5f2a3001c7600a7", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/57fb2d033e654890bc34adf3f5f2a3001c7600a7", "committedDate": "2019-11-12T11:08:51Z", "message": "remove @data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3ae74a5359eec9b2d6fa7051cbe22f27ec79426", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/c3ae74a5359eec9b2d6fa7051cbe22f27ec79426", "committedDate": "2019-11-12T11:10:06Z", "message": "Merge remote-tracking branch 'upstream/develop' into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9a163e1535ded6ad4d93884a7e4e6d38b938423", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/e9a163e1535ded6ad4d93884a7e4e6d38b938423", "committedDate": "2019-11-12T11:10:36Z", "message": "Merge branch 'develop' of https://github.com/CharmingRabbit/seata into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78f456fc5e4af3f86fc117f43d6f21acd16dac86", "author": {"user": {"login": "zjinlei", "name": null}}, "url": "https://github.com/seata/seata/commit/78f456fc5e4af3f86fc117f43d6f21acd16dac86", "committedDate": "2019-11-13T04:52:40Z", "message": "Merge branch 'develop' into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c0f5d28d0fe236ef2cb783435b2df1e28d672e1", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/8c0f5d28d0fe236ef2cb783435b2df1e28d672e1", "committedDate": "2019-11-13T09:24:52Z", "message": "Merge branch 'develop' into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e9a6bdbc44384652899470b6185958fc11a69b4", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/3e9a6bdbc44384652899470b6185958fc11a69b4", "committedDate": "2019-11-14T01:18:52Z", "message": "fix NPE in UndoExecutorFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19ef256b49f428f07e88a4600850cccc2d900e47", "author": {"user": null}, "url": "https://github.com/seata/seata/commit/19ef256b49f428f07e88a4600850cccc2d900e47", "committedDate": "2019-11-14T01:21:18Z", "message": "restructure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43bc2c344dd8f44ad4f60dcadcbe54a6ba4ddbb1", "author": {"user": null}, "url": "https://github.com/seata/seata/commit/43bc2c344dd8f44ad4f60dcadcbe54a6ba4ddbb1", "committedDate": "2019-11-14T01:21:19Z", "message": "Restructure SQLRecognizer and UndoExecutor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45a275caf806f3d9aae5edd7f27fcc27f5d1b9d8", "author": {"user": null}, "url": "https://github.com/seata/seata/commit/45a275caf806f3d9aae5edd7f27fcc27f5d1b9d8", "committedDate": "2019-11-14T01:21:19Z", "message": "optimize concurrency of UndoExecutorGruopFactory and SQLRecognizerGroupFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a96fe5e8e36bbd242ad44d05c767c3263a2e75be", "author": {"user": null}, "url": "https://github.com/seata/seata/commit/a96fe5e8e36bbd242ad44d05c767c3263a2e75be", "committedDate": "2019-11-14T01:21:20Z", "message": "remove @version tags"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5febb227411c5594506c9c8eb1fabf7ad7e40a0a", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/5febb227411c5594506c9c8eb1fabf7ad7e40a0a", "committedDate": "2019-11-14T01:21:21Z", "message": "add javaDoc;optimize UndoExecutorGroupFactory and SQLOperateRecognizerGroupFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9a3696a94eecda0715732aff2eca04b0ec5bc8c", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/b9a3696a94eecda0715732aff2eca04b0ec5bc8c", "committedDate": "2019-11-14T01:21:21Z", "message": "rename **Group to **Holder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca8813429e12ef93c754c05efd3c496a9acab069", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/ca8813429e12ef93c754c05efd3c496a9acab069", "committedDate": "2019-11-14T01:21:21Z", "message": "remove @data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05adb694c15ddff8379f3858afa8e821c44497f0", "author": {"user": {"login": "jsbxyyx", "name": "jsbxyyx"}}, "url": "https://github.com/seata/seata/commit/05adb694c15ddff8379f3858afa8e821c44497f0", "committedDate": "2019-11-14T01:21:21Z", "message": "optimize: xid header lowercase (#1789)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1b05a94656883c8ad4582dffa1581426715fce7", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/b1b05a94656883c8ad4582dffa1581426715fce7", "committedDate": "2019-11-14T01:21:21Z", "message": "clean: reformat saga module (#1890)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c5fe29ea4352dc7a01713e405ad228c4bdd52b5", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/2c5fe29ea4352dc7a01713e405ad228c4bdd52b5", "committedDate": "2019-11-14T01:21:21Z", "message": "fix NPE in UndoExecutorFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92bba972a2d761ca185dc256749b5194e199ffdc", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/92bba972a2d761ca185dc256749b5194e199ffdc", "committedDate": "2019-11-14T02:54:43Z", "message": "Merge branch 'develop' of https://github.com/CharmingRabbit/seata into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c116c9b0fb4b1e3e6cb6ff7c1ef77c2d453c8cd9", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/c116c9b0fb4b1e3e6cb6ff7c1ef77c2d453c8cd9", "committedDate": "2019-11-14T12:02:14Z", "message": "merge latest code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59fe1cf5118baed2467d3d9b5471fc9a415f96fa", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/59fe1cf5118baed2467d3d9b5471fc9a415f96fa", "committedDate": "2019-11-14T12:04:39Z", "message": "bugfix:fix NPE in UndoExecutorFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "378e89c316845148800674914e9c740a03091178", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/378e89c316845148800674914e9c740a03091178", "committedDate": "2019-11-21T07:16:01Z", "message": "local commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8dcb893e02ee7d11f4692267c650a412aa4891e", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/b8dcb893e02ee7d11f4692267c650a412aa4891e", "committedDate": "2019-11-22T02:59:42Z", "message": "merge remote"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9755622cb16b6014a7a8ed8a2ecb1c0e23551a65", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/9755622cb16b6014a7a8ed8a2ecb1c0e23551a65", "committedDate": "2019-11-22T02:59:54Z", "message": "Merge remote-tracking branch 'upstream/develop' into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ade3c8529a29485631b6f639d29fb255a52cb24a", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/ade3c8529a29485631b6f639d29fb255a52cb24a", "committedDate": "2019-11-22T03:03:21Z", "message": "bugfix:A bug that will appear when the default constructor is declared private"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0867c6aac833153e6eeddef3b3929a5fd3fc162", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/c0867c6aac833153e6eeddef3b3929a5fd3fc162", "committedDate": "2019-11-22T08:51:55Z", "message": "Merge remote-tracking branch 'upstream/develop' into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fc4f5eacf38028b5bddbe726dfaff86159110f9", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/9fc4f5eacf38028b5bddbe726dfaff86159110f9", "committedDate": "2019-11-22T08:53:44Z", "message": "code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbf102fa9528b7cc8e6b2b40182520f589392731", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/dbf102fa9528b7cc8e6b2b40182520f589392731", "committedDate": "2019-11-23T09:00:46Z", "message": "Merge branch 'develop' into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea397a7bf89d48a98a29385e5a3836edad7bdf5f", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/ea397a7bf89d48a98a29385e5a3836edad7bdf5f", "committedDate": "2019-11-24T07:24:40Z", "message": "Merge branch 'develop' into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f4dd2bed800b7291fb6bbe69b82fd86340a6a85", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/3f4dd2bed800b7291fb6bbe69b82fd86340a6a85", "committedDate": "2019-11-29T03:44:56Z", "message": "Merge branch 'develop' into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "028a80d963f9393724256bd6bcb0b54429b94404", "author": {"user": {"login": "jsbxyyx", "name": "jsbxyyx"}}, "url": "https://github.com/seata/seata/commit/028a80d963f9393724256bd6bcb0b54429b94404", "committedDate": "2019-11-29T13:10:28Z", "message": "Merge branch 'develop' into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1968bb425a2ce25123fff1de6165f596e876be8", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/e1968bb425a2ce25123fff1de6165f596e876be8", "committedDate": "2019-12-02T07:34:12Z", "message": "Merge remote-tracking branch 'upstream/develop' into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd36c51a528ee06691ca976f0c44f0fa4b0f25b7", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/fd36c51a528ee06691ca976f0c44f0fa4b0f25b7", "committedDate": "2019-12-02T07:34:45Z", "message": "Merge branch 'develop' of https://github.com/CharmingRabbit/seata into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f01d15f86cb359c5fe59826b7572352548afd378", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/f01d15f86cb359c5fe59826b7572352548afd378", "committedDate": "2019-12-05T11:26:23Z", "message": "Merge remote-tracking branch 'upstream/develop' into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9aa49b922a67e8257b420166e2a1da724cd3eb0", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/c9aa49b922a67e8257b420166e2a1da724cd3eb0", "committedDate": "2019-12-17T07:57:43Z", "message": "Merge remote-tracking branch 'upstream/develop' into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f195d869e57125771712dc79439fb61241bfd3b4", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/f195d869e57125771712dc79439fb61241bfd3b4", "committedDate": "2019-12-30T00:55:57Z", "message": "Merge remote-tracking branch 'upstream/develop' into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3399fff0c4bfd65b79afae3c8a55a66560f7410", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/c3399fff0c4bfd65b79afae3c8a55a66560f7410", "committedDate": "2020-01-04T06:59:02Z", "message": "Merge remote-tracking branch 'upstream/develop' into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2def89c2359469ad3a66c122d4084cffa58bc745", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/2def89c2359469ad3a66c122d4084cffa58bc745", "committedDate": "2020-01-04T10:18:17Z", "message": "optimize: optimize spi"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4Mzk4OTk5", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-338398999", "createdAt": "2020-01-05T12:57:26Z", "commit": {"oid": "2def89c2359469ad3a66c122d4084cffa58bc745"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQxMjo1NzoyNlrOFaRWPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQxMjo1ODowNlrOFaRWZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA5MTUxNw==", "bodyText": "SINGLETON", "url": "https://github.com/seata/seata/pull/2135#discussion_r363091517", "createdAt": "2020-01-05T12:57:26Z", "author": {"login": "zjinlei"}, "path": "server/src/main/java/io/seata/server/lock/db/DataBaseLocker.java", "diffHunk": "@@ -33,7 +34,7 @@\n  *\n  * @author zhangsen\n  */\n-@LoadLevel(name = \"db\")\n+@LoadLevel(name = \"db\",scope = Scope.PROTOTYPE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2def89c2359469ad3a66c122d4084cffa58bc745"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA5MTUyNw==", "bodyText": "SINGLETON", "url": "https://github.com/seata/seata/pull/2135#discussion_r363091527", "createdAt": "2020-01-05T12:57:37Z", "author": {"login": "zjinlei"}, "path": "server/src/main/java/io/seata/server/session/DefaultSessionManager.java", "diffHunk": "@@ -31,7 +32,7 @@\n  *\n  * @author sharajava\n  */\n-@LoadLevel(name = \"default\")\n+@LoadLevel(name = \"default\",scope = Scope.PROTOTYPE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2def89c2359469ad3a66c122d4084cffa58bc745"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA5MTUzMQ==", "bodyText": "SINGLETON", "url": "https://github.com/seata/seata/pull/2135#discussion_r363091531", "createdAt": "2020-01-05T12:57:44Z", "author": {"login": "zjinlei"}, "path": "server/src/main/java/io/seata/server/session/db/DataBaseSessionManager.java", "diffHunk": "@@ -46,7 +47,7 @@\n  *\n  * @author zhangsen\n  */\n-@LoadLevel(name = \"db\")\n+@LoadLevel(name = \"db\",scope = Scope.PROTOTYPE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2def89c2359469ad3a66c122d4084cffa58bc745"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA5MTU0NA==", "bodyText": "SINGLETON", "url": "https://github.com/seata/seata/pull/2135#discussion_r363091544", "createdAt": "2020-01-05T12:57:53Z", "author": {"login": "zjinlei"}, "path": "server/src/main/java/io/seata/server/session/file/FileBasedSessionManager.java", "diffHunk": "@@ -45,7 +46,7 @@\n  *\n  * @author slievrly\n  */\n-@LoadLevel(name = \"file\")\n+@LoadLevel(name = \"file\",scope = Scope.PROTOTYPE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2def89c2359469ad3a66c122d4084cffa58bc745"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA5MTU0OQ==", "bodyText": "SINGLETON", "url": "https://github.com/seata/seata/pull/2135#discussion_r363091549", "createdAt": "2020-01-05T12:57:58Z", "author": {"login": "zjinlei"}, "path": "server/src/main/java/io/seata/server/store/db/DatabaseTransactionStoreManager.java", "diffHunk": "@@ -54,7 +55,7 @@\n  *\n  * @author zhangsen\n  */\n-@LoadLevel(name = \"db\")\n+@LoadLevel(name = \"db\",scope = Scope.PROTOTYPE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2def89c2359469ad3a66c122d4084cffa58bc745"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA5MTU1OA==", "bodyText": "SINGLETON", "url": "https://github.com/seata/seata/pull/2135#discussion_r363091558", "createdAt": "2020-01-05T12:58:06Z", "author": {"login": "zjinlei"}, "path": "server/src/main/java/io/seata/server/store/file/FileTransactionStoreManager.java", "diffHunk": "@@ -56,7 +57,7 @@\n  *\n  * @author slievrly\n  */\n-@LoadLevel(name = \"file\")\n+@LoadLevel(name = \"file\",scope = Scope.PROTOTYPE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2def89c2359469ad3a66c122d4084cffa58bc745"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca3c46f56da3ff79aba406aa24737659829ec0e3", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/ca3c46f56da3ff79aba406aa24737659829ec0e3", "committedDate": "2020-01-06T06:06:47Z", "message": "Adjust the case of name and scope in some @LoadLevel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d635ca0b032c6a7f5e2dfa59e67acc9fc83d5f38", "author": {"user": {"login": "zjinlei", "name": null}}, "url": "https://github.com/seata/seata/commit/d635ca0b032c6a7f5e2dfa59e67acc9fc83d5f38", "committedDate": "2020-01-06T07:00:38Z", "message": "Merge branch 'develop' into f_spi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33c4e8f7571e2c9bb3316fb8af30e298b03d63f2", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/33c4e8f7571e2c9bb3316fb8af30e298b03d63f2", "committedDate": "2020-02-05T08:21:00Z", "message": "resolve conflicts for spi refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29cb3bcfca9f683e2fc4e6a5e2f4e9e07dea150f", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/29cb3bcfca9f683e2fc4e6a5e2f4e9e07dea150f", "committedDate": "2020-02-06T07:48:53Z", "message": "adjust spi refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74e8628a330a6f97049f3c561c7f24e89ba1c5d2", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/74e8628a330a6f97049f3c561c7f24e89ba1c5d2", "committedDate": "2020-02-06T09:24:50Z", "message": "resolve conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a2b2af61c1d08b00b92019a227ddcf38c65be9a", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/6a2b2af61c1d08b00b92019a227ddcf38c65be9a", "committedDate": "2020-02-07T03:53:13Z", "message": "Merge remote-tracking branch 'upstream/develop' into f_spi"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MDUxNDU4", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-355051458", "createdAt": "2020-02-07T10:08:32Z", "commit": {"oid": "6a2b2af61c1d08b00b92019a227ddcf38c65be9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMDowODozMlrOFm4LHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMDowODozMlrOFm4LHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMxMDU1OA==", "bodyText": "different SPI loadLevel\u2018s name can be same.", "url": "https://github.com/seata/seata/pull/2135#discussion_r376310558", "createdAt": "2020-02-07T10:08:32Z", "author": {"login": "slievrly"}, "path": "common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java", "diffHunk": "@@ -336,11 +422,51 @@ private static void loadFile(Class<?> service, String dir, ClassLoader classLoad\n         }\n     }\n \n+    private ExtensionURL getExtensionURL(Class<?> clazz) {\n+        String serviceName = null;\n+        String typeName = null;\n+        Integer priority = 0;\n+        Scope scope = Scope.SINGLETON;\n+        LoadLevel loadLevel = clazz.getAnnotation(LoadLevel.class);\n+        if (loadLevel == null) {\n+            typeName = clazz.getTypeName();\n+        } else {\n+            serviceName = loadLevel.name();\n+            priority = loadLevel.order();\n+            scope = loadLevel.scope();\n+        }\n+        ExtensionURL result = new ExtensionURL(serviceName, typeName, priority, scope);\n+        //do cache\n+        extensionClassUrlMap.put(clazz, result);\n+        if (loadLevel != null) {\n+            if (extensionNameUrlsMap.containsKey(serviceName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a2b2af61c1d08b00b92019a227ddcf38c65be9a"}, "originalPosition": 534}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MDU1MDg1", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-355055085", "createdAt": "2020-02-07T10:14:33Z", "commit": {"oid": "6a2b2af61c1d08b00b92019a227ddcf38c65be9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMDoxNDozM1rOFm4V7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMDoxNDozM1rOFm4V7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMxMzMyNQ==", "bodyText": "remove", "url": "https://github.com/seata/seata/pull/2135#discussion_r376313325", "createdAt": "2020-02-07T10:14:33Z", "author": {"login": "slievrly"}, "path": "common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java", "diffHunk": "@@ -336,11 +422,51 @@ private static void loadFile(Class<?> service, String dir, ClassLoader classLoad\n         }\n     }\n \n+    private ExtensionURL getExtensionURL(Class<?> clazz) {\n+        String serviceName = null;\n+        String typeName = null;\n+        Integer priority = 0;\n+        Scope scope = Scope.SINGLETON;\n+        LoadLevel loadLevel = clazz.getAnnotation(LoadLevel.class);\n+        if (loadLevel == null) {\n+            typeName = clazz.getTypeName();\n+        } else {\n+            serviceName = loadLevel.name();\n+            priority = loadLevel.order();\n+            scope = loadLevel.scope();\n+        }\n+        ExtensionURL result = new ExtensionURL(serviceName, typeName, priority, scope);\n+        //do cache\n+        extensionClassUrlMap.put(clazz, result);\n+        if (loadLevel != null) {\n+            if (extensionNameUrlsMap.containsKey(serviceName)) {\n+                List<ExtensionURL> urls = extensionNameUrlsMap.get(serviceName);\n+                urls.add(result);\n+            } else {\n+                List<ExtensionURL> urls = new ArrayList<>();\n+                urls.add(result);\n+                extensionNameUrlsMap.put(serviceName, urls);\n+            }\n+        }\n+        if (priority >= highestLoadPriority) {\n+            highestLoadPriority = priority;\n+            defaultExtensionURL = result;\n+            return defaultExtensionURL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a2b2af61c1d08b00b92019a227ddcf38c65be9a"}, "originalPosition": 546}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MDY2MTY5", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-355066169", "createdAt": "2020-02-07T10:33:21Z", "commit": {"oid": "6a2b2af61c1d08b00b92019a227ddcf38c65be9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMDozMzoyMVrOFm43WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMDozMzoyMVrOFm43WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMyMTg4MA==", "bodyText": "why not declare as TreeMap\uff1f", "url": "https://github.com/seata/seata/pull/2135#discussion_r376321880", "createdAt": "2020-02-07T10:33:21Z", "author": {"login": "slievrly"}, "path": "common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java", "diffHunk": "@@ -179,133 +199,197 @@\n     /**\n      * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n      *\n-     * @param <S>     the type parameter\n-     * @param service the service\n      * @return all extension class\n      */\n     @SuppressWarnings(\"rawtypes\")\n-    public static <S> List<Class> getAllExtensionClass(Class<S> service) {\n-        return findAllExtensionClass(service, null, findClassLoader());\n+    public List<Class> getAllExtensionClass() {\n+        Map<ExtensionURL, Class<?>> map = loadAllExtensionClass(findClassLoader());\n+        List<Class> result = new ArrayList<>(map.values());\n+        return result;\n     }\n \n     /**\n      * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n      *\n-     * @param <S>     the type parameter\n-     * @param service the service\n      * @param loader  the loader\n      * @return all extension class\n      */\n     @SuppressWarnings(\"rawtypes\")\n-    public static <S> List<Class> getAllExtensionClass(Class<S> service, ClassLoader loader) {\n-        return findAllExtensionClass(service, null, loader);\n+    public <S> List<Class> getAllExtensionClass(ClassLoader loader) {\n+        Map<ExtensionURL, Class<?>> map = loadAllExtensionClass(loader);\n+        List<Class> result = new ArrayList<>(map.values());\n+        return result;\n     }\n \n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader) {\n-        return loadFile(service, activateName, loader, null, null);\n+    @SuppressWarnings(\"rawtypes\")\n+    private S loadExtension(ClassLoader loader, Class[] argTypes,\n+                            Object[] args) {\n+        try {\n+            loadAllExtensionClass(loader);\n+            return getExtension(defaultExtensionURL, loader, argTypes, args);\n+        } catch (Throwable e) {\n+            if (e instanceof EnhancedServiceNotFoundException) {\n+                throw (EnhancedServiceNotFoundException)e;\n+            } else {\n+                throw new EnhancedServiceNotFoundException(\n+                        \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                .getFullStackTrace(e));\n+            }\n+        }\n     }\n \n     @SuppressWarnings(\"rawtypes\")\n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader, Class[] argTypes,\n-                                  Object[] args) {\n+    private S loadExtension(String activateName, ClassLoader loader, Class[] argTypes,\n+                            Object[] args) {\n+        if (io.seata.common.util.StringUtils.isEmpty(activateName)) {\n+            throw new IllegalArgumentException(\"the name of service provider for [\" + type.getName() + \"] name is null\");\n+        }\n         try {\n-            boolean foundFromCache = true;\n-            List<Class> extensions = providers.get(service);\n-            if (extensions == null) {\n-                synchronized (service) {\n-                    extensions = providers.get(service);\n-                    if (extensions == null) {\n-                        extensions = findAllExtensionClass(service, activateName, loader);\n-                        foundFromCache = false;\n-                        providers.put(service, extensions);\n-                    }\n-                }\n+            loadAllExtensionClass(loader);\n+            ExtensionURL cachedExtensionURL = getCachedServiceURL(activateName);\n+            return getExtension(cachedExtensionURL, loader, argTypes, args);\n+        } catch (Throwable e) {\n+            if (e instanceof EnhancedServiceNotFoundException) {\n+                throw (EnhancedServiceNotFoundException)e;\n+            } else {\n+                throw new EnhancedServiceNotFoundException(\n+                        \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                .getFullStackTrace(e));\n             }\n-            if (StringUtils.isNotEmpty(activateName)) {\n-                loadFile(service, SEATA_DIRECTORY + activateName.toLowerCase() + \"/\", loader, extensions);\n+        }\n+    }\n \n-                List<Class> activateExtensions = new ArrayList<>();\n-                for (Class clz : extensions) {\n-                    @SuppressWarnings(\"unchecked\")\n-                    LoadLevel activate = (LoadLevel) clz.getAnnotation(LoadLevel.class);\n-                    if (activate != null && activateName.equalsIgnoreCase(activate.name())) {\n-                        activateExtensions.add(clz);\n+    private S getExtension(ExtensionURL url, ClassLoader loader, Class[] argTypes,\n+                           Object[] args) {\n+        if (url == null) {\n+            throw new EnhancedServiceNotFoundException(\"service provider not found\");\n+        }\n+        if (Scope.SINGLETON.equals(url.getScope())) {\n+            Holder<Object> holder = extensionInstances.get(url);\n+            if (holder == null) {\n+                extensionInstances.putIfAbsent(url, new Holder<>());\n+                holder = extensionInstances.get(url);\n+            }\n+            Object instance = holder.get();\n+            if (instance == null) {\n+                synchronized (holder) {\n+                    instance = holder.get();\n+                    if (instance == null) {\n+                        instance = createExtension(url, loader, argTypes, args);\n+                        holder.set(instance);\n                     }\n                 }\n-\n-                extensions = activateExtensions;\n             }\n+            return (S)instance;\n+        } else {\n+            return createNewExtension(url, loader, argTypes, args);\n+        }\n+    }\n \n-            if (extensions.isEmpty()) {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \"[\" + activateName\n-                        + \"] and classloader : \" + ObjectUtils.toString(loader));\n-            }\n-            Class<?> extension = extensions.get(extensions.size() - 1);\n-            S result = initInstance(service, extension, argTypes, args);\n-            if (!foundFromCache && LOGGER.isInfoEnabled()) {\n-                LOGGER.info(\"load \" + service.getSimpleName() + \"[\" + activateName + \"] extension by class[\" + extension\n-                    .getName() + \"]\");\n+    private S createExtension(ExtensionURL url, ClassLoader loader, Class[] argTypes,\n+                              Object[] args) {\n+        Class<?> clazz = loadAllExtensionClass(loader).get(url);\n+        if (clazz == null) {\n+            throw new EnhancedServiceNotFoundException(\"Not Found\");\n+        }\n+        try {\n+            S instance = (S)EXTENSION_INSTANCES.get(clazz);\n+            if (instance == null) {\n+                S newInstance = initInstance(clazz, argTypes, args);\n+                EXTENSION_INSTANCES.putIfAbsent(clazz, newInstance);\n+                instance = newInstance;\n             }\n-            return result;\n-        } catch (Throwable e) {\n-            if (e instanceof EnhancedServiceNotFoundException) {\n-                throw (EnhancedServiceNotFoundException)e;\n-            } else {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \" caused by \" + ExceptionUtils\n-                        .getFullStackTrace(e));\n+            return instance;\n+        } catch (Throwable t) {\n+            throw new IllegalStateException(\"Extension instance(url: \" + url + \", class: \" +\n+                    type + \")  could not be instantiated: \" + t.getMessage(), t);\n+        }\n+    }\n+\n+    private S createNewExtension(ExtensionURL url, ClassLoader loader, Class[] argTypes, Object[] args) {\n+        Class<?> clazz = loadAllExtensionClass(loader).get(url);\n+        if (clazz == null) {\n+            throw new EnhancedServiceNotFoundException(\"Not Found\");\n+        }\n+        try {\n+            S newInstance = initInstance(clazz, argTypes, args);\n+            return newInstance;\n+        } catch (Throwable t) {\n+            throw new IllegalStateException(\"Extension instance(url: \" + url + \", class: \" +\n+                    type + \")  could not be instantiated: \" + t.getMessage(), t);\n+        }\n+    }\n+\n+    private Map<ExtensionURL, Class<?>> loadAllExtensionClass(ClassLoader loader) {\n+        Map<ExtensionURL, Class<?>> classes = extensionClasses.get();\n+        if (classes == null) {\n+            synchronized (extensionClasses) {\n+                classes = extensionClasses.get();\n+                if (classes == null) {\n+                    classes = findAllExtensionClass(loader);\n+                    extensionClasses.set(classes);\n+                }\n             }\n         }\n+        return classes;\n     }\n \n     @SuppressWarnings(\"rawtypes\")\n-    private static <S> List<Class> findAllExtensionClass(Class<S> service, String activateName, ClassLoader loader) {\n-        List<Class> extensions = new ArrayList<>();\n+    private Map<ExtensionURL, Class<?>> findAllExtensionClass(ClassLoader loader) {\n+        Map<ExtensionURL, Class<?>> extensions = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a2b2af61c1d08b00b92019a227ddcf38c65be9a"}, "originalPosition": 419}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aa6a585a2aebc154601ba969b083a23d3c777b7", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/0aa6a585a2aebc154601ba969b083a23d3c777b7", "committedDate": "2020-02-08T02:21:20Z", "message": "Merge branch 'develop' into f_spi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eb4705e381b9b16d1caed543dffcf739a1240c8", "author": {"user": {"login": "zjinlei", "name": null}}, "url": "https://github.com/seata/seata/commit/7eb4705e381b9b16d1caed543dffcf739a1240c8", "committedDate": "2020-02-11T01:33:59Z", "message": "Merge branch 'develop' into f_spi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a659dbf9263eedea843ec1c69ed0ba091274a45", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/8a659dbf9263eedea843ec1c69ed0ba091274a45", "committedDate": "2020-02-22T08:50:36Z", "message": "resolve conflicts with 1.1.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d7fe9f44b57b73c79c0078d932e5de34c986c8b", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/5d7fe9f44b57b73c79c0078d932e5de34c986c8b", "committedDate": "2020-02-22T08:50:59Z", "message": "Merge branch 'f_spi' of https://github.com/CharmingRabbit/seata into f_spi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d1d576ae32c526b3fa60c9624399d6d74e77f58", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/3d1d576ae32c526b3fa60c9624399d6d74e77f58", "committedDate": "2020-02-22T09:09:42Z", "message": "format code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "478ecf5c0905eec739d043360ab6d218c5c339da", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/478ecf5c0905eec739d043360ab6d218c5c339da", "committedDate": "2020-02-22T10:27:52Z", "message": "format code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c232a8d4b019b115410aa65ee0a1bfec6a08f3eb", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/c232a8d4b019b115410aa65ee0a1bfec6a08f3eb", "committedDate": "2020-02-26T07:06:49Z", "message": "Merge remote-tracking branch 'upstream/develop' into f_spi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5483cb7e9af7aee23242f990111c8898c7d08933", "author": {"user": {"login": "zjinlei", "name": null}}, "url": "https://github.com/seata/seata/commit/5483cb7e9af7aee23242f990111c8898c7d08933", "committedDate": "2020-02-27T12:50:06Z", "message": "Merge branch 'develop' into f_spi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57033345699bacadc308f79ccf88c045c4f3813c", "author": {"user": {"login": "zjinlei", "name": null}}, "url": "https://github.com/seata/seata/commit/57033345699bacadc308f79ccf88c045c4f3813c", "committedDate": "2020-02-28T07:25:07Z", "message": "Merge branch 'develop' into f_spi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bded951d05b4970e2efd3d5ce5e108953b425ba", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/3bded951d05b4970e2efd3d5ce5e108953b425ba", "committedDate": "2020-02-28T10:07:12Z", "message": "merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e191ea99c3987ad06340e2b439c8b65be1bc9ee8", "author": {"user": {"login": "zjinlei", "name": null}}, "url": "https://github.com/seata/seata/commit/e191ea99c3987ad06340e2b439c8b65be1bc9ee8", "committedDate": "2020-02-28T16:22:54Z", "message": "Merge branch 'develop' into f_spi"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NTI1Nzgw", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-366525780", "createdAt": "2020-02-28T16:29:44Z", "commit": {"oid": "e191ea99c3987ad06340e2b439c8b65be1bc9ee8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjoyOTo0NVrOFv7ALw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjoyOTo0NVrOFv7ALw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc5NDA5NQ==", "bodyText": "DataBaseSessionManager's taskName is different, so its Scope is PROTOTYPE.", "url": "https://github.com/seata/seata/pull/2135#discussion_r385794095", "createdAt": "2020-02-28T16:29:45Z", "author": {"login": "zjinlei"}, "path": "server/src/main/java/io/seata/server/session/db/DataBaseSessionManager.java", "diffHunk": "@@ -79,7 +79,8 @@ public DataBaseSessionManager(String name) {\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e191ea99c3987ad06340e2b439c8b65be1bc9ee8"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1dba73f01ff890166341f8501f6ea53c6c69023", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/d1dba73f01ff890166341f8501f6ea53c6c69023", "committedDate": "2020-02-29T02:13:57Z", "message": "Merge remote-tracking branch 'upstream/develop' into f_spi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f895ee58fc7239113c35f14e2663d237631bcce", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/4f895ee58fc7239113c35f14e2663d237631bcce", "committedDate": "2020-02-29T02:14:07Z", "message": "Merge branch 'f_spi' of https://github.com/CharmingRabbit/seata into f_spi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf8bbb61db84e6d8d25878f06ca2931bee438786", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/cf8bbb61db84e6d8d25878f06ca2931bee438786", "committedDate": "2020-02-29T02:15:49Z", "message": "set dbSessionMgr scope prototype"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74a4f544a96ed15d9ba0385543c82f1ac2b679ca", "author": {"user": {"login": "zjinlei", "name": null}}, "url": "https://github.com/seata/seata/commit/74a4f544a96ed15d9ba0385543c82f1ac2b679ca", "committedDate": "2020-03-02T08:40:35Z", "message": "Merge branch 'develop' into f_spi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52e90dfb8cd019541639e4e45394fb950349b04e", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/52e90dfb8cd019541639e4e45394fb950349b04e", "committedDate": "2020-03-02T13:12:47Z", "message": "Merge remote-tracking branch 'upstream/develop' into f_spi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ae21a8fd6bf8f4569ef88570842eb5c30de8321", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/0ae21a8fd6bf8f4569ef88570842eb5c30de8321", "committedDate": "2020-03-02T13:13:02Z", "message": "Merge branch 'f_spi' of https://github.com/CharmingRabbit/seata into f_spi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61283a88311e471aeee85c05edd15d304ea52390", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/61283a88311e471aeee85c05edd15d304ea52390", "committedDate": "2020-03-04T01:51:55Z", "message": "restore spi load scope to prototype"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NzAyMzA3", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-368702307", "createdAt": "2020-03-04T11:30:06Z", "commit": {"oid": "61283a88311e471aeee85c05edd15d304ea52390"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTozMDowNlrOFxpsSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTozMDowNlrOFxpsSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYwNzYyNg==", "bodyText": "Keep the EnhancedServiceLoader's api unchanged?", "url": "https://github.com/seata/seata/pull/2135#discussion_r387607626", "createdAt": "2020-03-04T11:30:06Z", "author": {"login": "ggndnn"}, "path": "common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java", "diffHunk": "@@ -42,77 +45,100 @@\n  *\n  * @author slievrly\n  */\n-public class EnhancedServiceLoader {\n+public class EnhancedServiceLoader<S> {\n     private static final Logger LOGGER = LoggerFactory.getLogger(EnhancedServiceLoader.class);\n     private static final String SERVICES_DIRECTORY = \"META-INF/services/\";\n     private static final String SEATA_DIRECTORY = \"META-INF/seata/\";\n-    @SuppressWarnings(\"rawtypes\")\n-    private static Map<Class, List<Class>> providers = new ConcurrentHashMap<>();\n+\n+    private static final ConcurrentMap<Class<?>, EnhancedServiceLoader<?>> SERVICE_LOADERS =\n+            new ConcurrentHashMap<>();\n+    private static final ConcurrentMap<Class<?>, Object> EXTENSION_INSTANCES = new ConcurrentHashMap<>();\n+\n+    private final Class<S> type;\n+    private final Holder<Map<ExtensionURL, Class<?>>> extensionClasses = new Holder<>();\n+    private final ConcurrentMap<ExtensionURL, Holder<Object>> extensionInstances = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<String, List<ExtensionURL>> extensionNameUrlsMap = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<Class<?>, ExtensionURL> extensionClassUrlMap = new ConcurrentHashMap<>();\n+    private ExtensionURL defaultExtensionURL = null;\n+    private Integer highestLoadPriority = Integer.MIN_VALUE;\n+\n+    private EnhancedServiceLoader(Class<S> type) {\n+        this.type = type;\n+    }\n+\n+    /**\n+     * Get the ServiceLoader for the specified Class\n+     *\n+     * @param type the type of the extension point\n+     * @param <S> the type\n+     * @return the service loader\n+     */\n+    public static <S> EnhancedServiceLoader<S> getServiceLoader(Class<S> type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61283a88311e471aeee85c05edd15d304ea52390"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aad7732407d606b2de991dc77d6fd1d2c6fb6cc0", "author": {"user": {"login": "zjinlei", "name": null}}, "url": "https://github.com/seata/seata/commit/aad7732407d606b2de991dc77d6fd1d2c6fb6cc0", "committedDate": "2020-03-05T01:09:28Z", "message": "Merge branch 'develop' into f_spi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47d8481b9bb2fd4e4d1021c670b966fb8c5ee023", "author": {"user": {"login": "zjinlei", "name": null}}, "url": "https://github.com/seata/seata/commit/47d8481b9bb2fd4e4d1021c670b966fb8c5ee023", "committedDate": "2020-03-06T12:58:15Z", "message": "Merge branch 'develop' into f_spi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c2e869a1c13b525913b9b636805ac4aeba174f0", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/0c2e869a1c13b525913b9b636805ac4aeba174f0", "committedDate": "2020-03-09T01:55:29Z", "message": "Merge remote-tracking branch 'upstream/develop' into f_spi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a23f75500fa85db50640faf0b1014e9a5112c1b", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/4a23f75500fa85db50640faf0b1014e9a5112c1b", "committedDate": "2020-03-09T11:50:47Z", "message": "Restore the old EnhancedServiceLoader API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9d4e5ef946938b9315c87bcf1e8646beedc3f8a", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/d9d4e5ef946938b9315c87bcf1e8646beedc3f8a", "committedDate": "2020-03-12T10:36:30Z", "message": "Merge remote-tracking branch 'upstream/develop' into f_spi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "923d4f5d5ada702fdc988223df6cd07f35ca7a61", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/923d4f5d5ada702fdc988223df6cd07f35ca7a61", "committedDate": "2020-03-12T11:57:41Z", "message": "adjust some load scope value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cae683c162728069d277089de3709895f3a09745", "author": {"user": {"login": "zjinlei", "name": null}}, "url": "https://github.com/seata/seata/commit/cae683c162728069d277089de3709895f3a09745", "committedDate": "2020-03-13T11:56:36Z", "message": "Merge branch 'develop' into f_spi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01f97aa10848036afee2763dad1e4966e2d2ebf3", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/01f97aa10848036afee2763dad1e4966e2d2ebf3", "committedDate": "2020-03-14T01:03:28Z", "message": "use treeMap instead of HashMap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "085cc366b81752e68628d19803874546226869cc", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/085cc366b81752e68628d19803874546226869cc", "committedDate": "2020-03-14T01:03:50Z", "message": "Merge remote-tracking branch 'upstream/develop' into f_spi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54f725ec1cd4de0a130e9cc5e56b9479e092c3f8", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/54f725ec1cd4de0a130e9cc5e56b9479e092c3f8", "committedDate": "2020-03-14T01:04:42Z", "message": "Merge branch 'f_spi' of https://github.com/CharmingRabbit/seata into f_spi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93a3e81dae81a2ff90035d183f0ce4afb4900036", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/93a3e81dae81a2ff90035d183f0ce4afb4900036", "committedDate": "2020-03-14T05:49:16Z", "message": "format codeStyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2f3ed36f716d395e23818173d9e4aec4d9941ca", "author": {"user": {"login": "zjinlei", "name": null}}, "url": "https://github.com/seata/seata/commit/b2f3ed36f716d395e23818173d9e4aec4d9941ca", "committedDate": "2020-03-15T16:10:44Z", "message": "Merge branch 'develop' into f_spi"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MTExOTA2", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-375111906", "createdAt": "2020-03-16T11:09:36Z", "commit": {"oid": "b2f3ed36f716d395e23818173d9e4aec4d9941ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTowOTozNlrOF2vU_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTowOTozNlrOF2vU_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0Mjg0Ng==", "bodyText": "The class name is easy to misunderstand. What about ExtensionDefinition or ExtensionInfo? And access modifiers should be left default not public.", "url": "https://github.com/seata/seata/pull/2135#discussion_r392942846", "createdAt": "2020-03-16T11:09:36Z", "author": {"login": "ggndnn"}, "path": "common/src/main/java/io/seata/common/loader/ExtensionURL.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.common.loader;\n+\n+import io.seata.common.util.StringUtils;\n+\n+/**\n+ * The type URL\n+ *\n+ * @author: haozhibei\n+ */\n+public class ExtensionURL {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2f3ed36f716d395e23818173d9e4aec4d9941ca"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MTEyNzQ2", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-375112746", "createdAt": "2020-03-16T11:11:05Z", "commit": {"oid": "b2f3ed36f716d395e23818173d9e4aec4d9941ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMToxMTowNVrOF2vXqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMToxMTowNVrOF2vXqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0MzUzMA==", "bodyText": "Why not use createNewExtension here directly?", "url": "https://github.com/seata/seata/pull/2135#discussion_r392943530", "createdAt": "2020-03-16T11:11:05Z", "author": {"login": "ggndnn"}, "path": "common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java", "diffHunk": "@@ -198,181 +177,463 @@\n      */\n     @SuppressWarnings(\"rawtypes\")\n     static <S> List<Class> getAllExtensionClass(Class<S> service, ClassLoader loader) {\n-        return findAllExtensionClass(service, null, loader);\n+        return InnerEnhancedServiceLoader.getServiceLoader(service).getAllExtensionClass(loader);\n     }\n \n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader) {\n-        return loadFile(service, activateName, loader, null, null);\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader, Class[] argTypes,\n-                                  Object[] args) {\n-        try {\n-            boolean foundFromCache = true;\n-            List<Class> extensions = providers.get(service);\n-            if (extensions == null) {\n-                synchronized (service) {\n-                    extensions = providers.get(service);\n-                    if (extensions == null) {\n-                        extensions = findAllExtensionClass(service, activateName, loader);\n-                        foundFromCache = false;\n-                        providers.put(service, extensions);\n-                    }\n+    static class InnerEnhancedServiceLoader<S> {\n+        private static final Logger LOGGER = LoggerFactory.getLogger(EnhancedServiceLoader.class);\n+        private static final String SERVICES_DIRECTORY = \"META-INF/services/\";\n+        private static final String SEATA_DIRECTORY = \"META-INF/seata/\";\n+\n+        private static final ConcurrentMap<Class<?>, InnerEnhancedServiceLoader<?>> SERVICE_LOADERS =\n+                new ConcurrentHashMap<>();\n+        private static final ConcurrentMap<Class<?>, Object> EXTENSION_INSTANCES = new ConcurrentHashMap<>();\n+\n+        private final Class<S> type;\n+        private final Holder<Map<ExtensionURL, Class<?>>> extensionClasses = new Holder<>();\n+        private final ConcurrentMap<ExtensionURL, Holder<Object>> extensionInstances = new ConcurrentHashMap<>();\n+        private final ConcurrentMap<String, List<ExtensionURL>> extensionNameUrlsMap = new ConcurrentHashMap<>();\n+        private final ConcurrentMap<Class<?>, ExtensionURL> extensionClassUrlMap = new ConcurrentHashMap<>();\n+        private ExtensionURL defaultExtensionURL = null;\n+        private Integer highestLoadPriority = Integer.MIN_VALUE;\n+\n+        private InnerEnhancedServiceLoader(Class<S> type) {\n+            this.type = type;\n+        }\n+\n+        /**\n+         * Get the ServiceLoader for the specified Class\n+         *\n+         * @param type the type of the extension point\n+         * @param <S>  the type\n+         * @return the service loader\n+         */\n+        static <S> InnerEnhancedServiceLoader<S> getServiceLoader(Class<S> type) {\n+            if (type == null) {\n+                throw new IllegalArgumentException(\"Enhanced Service type == null\");\n+            }\n+            InnerEnhancedServiceLoader<S> loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            if (loader == null) {\n+                SERVICE_LOADERS.putIfAbsent(type, new InnerEnhancedServiceLoader<S>(type));\n+                loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            }\n+            return loader;\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param loader the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(ClassLoader loader) throws EnhancedServiceNotFoundException {\n+            return loadExtension(loader, null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load() throws EnhancedServiceNotFoundException {\n+            return loadExtension(findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @param activateName the activate name\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(String activateName) throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param activateName the activate name\n+         * @param loader       the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(String activateName, ClassLoader loader)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, loader, null, null);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(String activateName, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            Class[] argsType = null;\n+            if (args != null && args.length > 0) {\n+                argsType = new Class[args.length];\n+                for (int i = 0; i < args.length; i++) {\n+                    argsType[i] = args[i].getClass();\n                 }\n             }\n-            if (StringUtils.isNotEmpty(activateName)) {\n-                loadFile(service, SEATA_DIRECTORY + activateName.toLowerCase() + \"/\", loader, extensions);\n-\n-                List<Class> activateExtensions = new ArrayList<>();\n-                for (Class clz : extensions) {\n-                    @SuppressWarnings(\"unchecked\")\n-                    LoadLevel activate = (LoadLevel) clz.getAnnotation(LoadLevel.class);\n-                    if (activate != null && activateName.equalsIgnoreCase(activate.name())) {\n-                        activateExtensions.add(clz);\n-                    }\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param argsType     the args type\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(String activateName, Class[] argsType, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @return list list\n+         */\n+        public List<S> loadAll() {\n+            return loadAll(null, null);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @param argsType the args type\n+         * @param args     the args\n+         * @return list list\n+         */\n+        public List<S> loadAll(Class[] argsType, Object[] args) {\n+            List<S> allInstances = new ArrayList<>();\n+            List<Class> allClazzs = getAllExtensionClass();\n+            if (CollectionUtils.isEmpty(allClazzs)) {\n+                return allInstances;\n+            }\n+            try {\n+                for (Class clazz : allClazzs) {\n+                    ExtensionURL url = extensionClassUrlMap.get(clazz);\n+                    allInstances.add(getExtension(url, findClassLoader(), argsType, args));\n                 }\n+            } catch (Throwable t) {\n+                throw new EnhancedServiceNotFoundException(t);\n+            }\n+            return allInstances;\n+        }\n+\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        List<Class> getAllExtensionClass() {\n+            Map<ExtensionURL, Class<?>> map = loadAllExtensionClass(findClassLoader());\n+            List<Class> result = new ArrayList<>(map.values());\n+            return result;\n+        }\n+\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @param loader the loader\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        List<Class> getAllExtensionClass(ClassLoader loader) {\n+            Map<ExtensionURL, Class<?>> map = loadAllExtensionClass(loader);\n+            List<Class> result = new ArrayList<>(map.values());\n+            return result;\n+        }\n \n-                extensions = activateExtensions;\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            try {\n+                loadAllExtensionClass(loader);\n+                return getExtension(defaultExtensionURL, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n+        }\n \n-            if (extensions.isEmpty()) {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \"[\" + activateName\n-                        + \"] and classloader : \" + ObjectUtils.toString(loader));\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(String activateName, ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            if (io.seata.common.util.StringUtils.isEmpty(activateName)) {\n+                throw new IllegalArgumentException(\"the name of service provider for [\" + type.getName() + \"] name is null\");\n+            }\n+            try {\n+                loadAllExtensionClass(loader);\n+                ExtensionURL cachedExtensionURL = getCachedServiceURL(activateName);\n+                return getExtension(cachedExtensionURL, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n-            Class<?> extension = extensions.get(extensions.size() - 1);\n-            S result = initInstance(service, extension, argTypes, args);\n-            if (!foundFromCache && LOGGER.isInfoEnabled()) {\n-                LOGGER.info(\"load \" + service.getSimpleName() + \"[\" + activateName + \"] extension by class[\" + extension\n-                    .getName() + \"]\");\n+        }\n+\n+        private S getExtension(ExtensionURL url, ClassLoader loader, Class[] argTypes,\n+                               Object[] args) {\n+            if (url == null) {\n+                throw new EnhancedServiceNotFoundException(\"service provider not found\");\n             }\n-            return result;\n-        } catch (Throwable e) {\n-            if (e instanceof EnhancedServiceNotFoundException) {\n-                throw (EnhancedServiceNotFoundException)e;\n+            if (Scope.SINGLETON.equals(url.getScope())) {\n+                Holder<Object> holder = extensionInstances.get(url);\n+                if (holder == null) {\n+                    extensionInstances.putIfAbsent(url, new Holder<>());\n+                    holder = extensionInstances.get(url);\n+                }\n+                Object instance = holder.get();\n+                if (instance == null) {\n+                    synchronized (holder) {\n+                        instance = holder.get();\n+                        if (instance == null) {\n+                            instance = createExtension(url, loader, argTypes, args);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2f3ed36f716d395e23818173d9e4aec4d9941ca"}, "originalPosition": 429}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MTEzODIz", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-375113823", "createdAt": "2020-03-16T11:13:10Z", "commit": {"oid": "b2f3ed36f716d395e23818173d9e4aec4d9941ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMToxMzoxMFrOF2varg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMToxMzoxMFrOF2varg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0NDMwMg==", "bodyText": "What's the benefit to use Holder here? Is Holder class necessary?", "url": "https://github.com/seata/seata/pull/2135#discussion_r392944302", "createdAt": "2020-03-16T11:13:10Z", "author": {"login": "ggndnn"}, "path": "common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java", "diffHunk": "@@ -198,181 +177,463 @@\n      */\n     @SuppressWarnings(\"rawtypes\")\n     static <S> List<Class> getAllExtensionClass(Class<S> service, ClassLoader loader) {\n-        return findAllExtensionClass(service, null, loader);\n+        return InnerEnhancedServiceLoader.getServiceLoader(service).getAllExtensionClass(loader);\n     }\n \n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader) {\n-        return loadFile(service, activateName, loader, null, null);\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader, Class[] argTypes,\n-                                  Object[] args) {\n-        try {\n-            boolean foundFromCache = true;\n-            List<Class> extensions = providers.get(service);\n-            if (extensions == null) {\n-                synchronized (service) {\n-                    extensions = providers.get(service);\n-                    if (extensions == null) {\n-                        extensions = findAllExtensionClass(service, activateName, loader);\n-                        foundFromCache = false;\n-                        providers.put(service, extensions);\n-                    }\n+    static class InnerEnhancedServiceLoader<S> {\n+        private static final Logger LOGGER = LoggerFactory.getLogger(EnhancedServiceLoader.class);\n+        private static final String SERVICES_DIRECTORY = \"META-INF/services/\";\n+        private static final String SEATA_DIRECTORY = \"META-INF/seata/\";\n+\n+        private static final ConcurrentMap<Class<?>, InnerEnhancedServiceLoader<?>> SERVICE_LOADERS =\n+                new ConcurrentHashMap<>();\n+        private static final ConcurrentMap<Class<?>, Object> EXTENSION_INSTANCES = new ConcurrentHashMap<>();\n+\n+        private final Class<S> type;\n+        private final Holder<Map<ExtensionURL, Class<?>>> extensionClasses = new Holder<>();\n+        private final ConcurrentMap<ExtensionURL, Holder<Object>> extensionInstances = new ConcurrentHashMap<>();\n+        private final ConcurrentMap<String, List<ExtensionURL>> extensionNameUrlsMap = new ConcurrentHashMap<>();\n+        private final ConcurrentMap<Class<?>, ExtensionURL> extensionClassUrlMap = new ConcurrentHashMap<>();\n+        private ExtensionURL defaultExtensionURL = null;\n+        private Integer highestLoadPriority = Integer.MIN_VALUE;\n+\n+        private InnerEnhancedServiceLoader(Class<S> type) {\n+            this.type = type;\n+        }\n+\n+        /**\n+         * Get the ServiceLoader for the specified Class\n+         *\n+         * @param type the type of the extension point\n+         * @param <S>  the type\n+         * @return the service loader\n+         */\n+        static <S> InnerEnhancedServiceLoader<S> getServiceLoader(Class<S> type) {\n+            if (type == null) {\n+                throw new IllegalArgumentException(\"Enhanced Service type == null\");\n+            }\n+            InnerEnhancedServiceLoader<S> loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            if (loader == null) {\n+                SERVICE_LOADERS.putIfAbsent(type, new InnerEnhancedServiceLoader<S>(type));\n+                loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            }\n+            return loader;\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param loader the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(ClassLoader loader) throws EnhancedServiceNotFoundException {\n+            return loadExtension(loader, null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load() throws EnhancedServiceNotFoundException {\n+            return loadExtension(findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @param activateName the activate name\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(String activateName) throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param activateName the activate name\n+         * @param loader       the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(String activateName, ClassLoader loader)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, loader, null, null);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(String activateName, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            Class[] argsType = null;\n+            if (args != null && args.length > 0) {\n+                argsType = new Class[args.length];\n+                for (int i = 0; i < args.length; i++) {\n+                    argsType[i] = args[i].getClass();\n                 }\n             }\n-            if (StringUtils.isNotEmpty(activateName)) {\n-                loadFile(service, SEATA_DIRECTORY + activateName.toLowerCase() + \"/\", loader, extensions);\n-\n-                List<Class> activateExtensions = new ArrayList<>();\n-                for (Class clz : extensions) {\n-                    @SuppressWarnings(\"unchecked\")\n-                    LoadLevel activate = (LoadLevel) clz.getAnnotation(LoadLevel.class);\n-                    if (activate != null && activateName.equalsIgnoreCase(activate.name())) {\n-                        activateExtensions.add(clz);\n-                    }\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param argsType     the args type\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(String activateName, Class[] argsType, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @return list list\n+         */\n+        public List<S> loadAll() {\n+            return loadAll(null, null);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @param argsType the args type\n+         * @param args     the args\n+         * @return list list\n+         */\n+        public List<S> loadAll(Class[] argsType, Object[] args) {\n+            List<S> allInstances = new ArrayList<>();\n+            List<Class> allClazzs = getAllExtensionClass();\n+            if (CollectionUtils.isEmpty(allClazzs)) {\n+                return allInstances;\n+            }\n+            try {\n+                for (Class clazz : allClazzs) {\n+                    ExtensionURL url = extensionClassUrlMap.get(clazz);\n+                    allInstances.add(getExtension(url, findClassLoader(), argsType, args));\n                 }\n+            } catch (Throwable t) {\n+                throw new EnhancedServiceNotFoundException(t);\n+            }\n+            return allInstances;\n+        }\n+\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        List<Class> getAllExtensionClass() {\n+            Map<ExtensionURL, Class<?>> map = loadAllExtensionClass(findClassLoader());\n+            List<Class> result = new ArrayList<>(map.values());\n+            return result;\n+        }\n+\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @param loader the loader\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        List<Class> getAllExtensionClass(ClassLoader loader) {\n+            Map<ExtensionURL, Class<?>> map = loadAllExtensionClass(loader);\n+            List<Class> result = new ArrayList<>(map.values());\n+            return result;\n+        }\n \n-                extensions = activateExtensions;\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            try {\n+                loadAllExtensionClass(loader);\n+                return getExtension(defaultExtensionURL, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n+        }\n \n-            if (extensions.isEmpty()) {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \"[\" + activateName\n-                        + \"] and classloader : \" + ObjectUtils.toString(loader));\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(String activateName, ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            if (io.seata.common.util.StringUtils.isEmpty(activateName)) {\n+                throw new IllegalArgumentException(\"the name of service provider for [\" + type.getName() + \"] name is null\");\n+            }\n+            try {\n+                loadAllExtensionClass(loader);\n+                ExtensionURL cachedExtensionURL = getCachedServiceURL(activateName);\n+                return getExtension(cachedExtensionURL, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n-            Class<?> extension = extensions.get(extensions.size() - 1);\n-            S result = initInstance(service, extension, argTypes, args);\n-            if (!foundFromCache && LOGGER.isInfoEnabled()) {\n-                LOGGER.info(\"load \" + service.getSimpleName() + \"[\" + activateName + \"] extension by class[\" + extension\n-                    .getName() + \"]\");\n+        }\n+\n+        private S getExtension(ExtensionURL url, ClassLoader loader, Class[] argTypes,\n+                               Object[] args) {\n+            if (url == null) {\n+                throw new EnhancedServiceNotFoundException(\"service provider not found\");\n             }\n-            return result;\n-        } catch (Throwable e) {\n-            if (e instanceof EnhancedServiceNotFoundException) {\n-                throw (EnhancedServiceNotFoundException)e;\n+            if (Scope.SINGLETON.equals(url.getScope())) {\n+                Holder<Object> holder = extensionInstances.get(url);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2f3ed36f716d395e23818173d9e4aec4d9941ca"}, "originalPosition": 419}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MTE1NDg0", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-375115484", "createdAt": "2020-03-16T11:16:27Z", "commit": {"oid": "b2f3ed36f716d395e23818173d9e4aec4d9941ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMToxNjoyN1rOF2ve9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMToxNjoyN1rOF2ve9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0NTM5Ng==", "bodyText": "If ExtensionURL has the service-class as field, calling loadAllExtensionClass is not necessary.", "url": "https://github.com/seata/seata/pull/2135#discussion_r392945396", "createdAt": "2020-03-16T11:16:27Z", "author": {"login": "ggndnn"}, "path": "common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java", "diffHunk": "@@ -198,181 +177,463 @@\n      */\n     @SuppressWarnings(\"rawtypes\")\n     static <S> List<Class> getAllExtensionClass(Class<S> service, ClassLoader loader) {\n-        return findAllExtensionClass(service, null, loader);\n+        return InnerEnhancedServiceLoader.getServiceLoader(service).getAllExtensionClass(loader);\n     }\n \n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader) {\n-        return loadFile(service, activateName, loader, null, null);\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader, Class[] argTypes,\n-                                  Object[] args) {\n-        try {\n-            boolean foundFromCache = true;\n-            List<Class> extensions = providers.get(service);\n-            if (extensions == null) {\n-                synchronized (service) {\n-                    extensions = providers.get(service);\n-                    if (extensions == null) {\n-                        extensions = findAllExtensionClass(service, activateName, loader);\n-                        foundFromCache = false;\n-                        providers.put(service, extensions);\n-                    }\n+    static class InnerEnhancedServiceLoader<S> {\n+        private static final Logger LOGGER = LoggerFactory.getLogger(EnhancedServiceLoader.class);\n+        private static final String SERVICES_DIRECTORY = \"META-INF/services/\";\n+        private static final String SEATA_DIRECTORY = \"META-INF/seata/\";\n+\n+        private static final ConcurrentMap<Class<?>, InnerEnhancedServiceLoader<?>> SERVICE_LOADERS =\n+                new ConcurrentHashMap<>();\n+        private static final ConcurrentMap<Class<?>, Object> EXTENSION_INSTANCES = new ConcurrentHashMap<>();\n+\n+        private final Class<S> type;\n+        private final Holder<Map<ExtensionURL, Class<?>>> extensionClasses = new Holder<>();\n+        private final ConcurrentMap<ExtensionURL, Holder<Object>> extensionInstances = new ConcurrentHashMap<>();\n+        private final ConcurrentMap<String, List<ExtensionURL>> extensionNameUrlsMap = new ConcurrentHashMap<>();\n+        private final ConcurrentMap<Class<?>, ExtensionURL> extensionClassUrlMap = new ConcurrentHashMap<>();\n+        private ExtensionURL defaultExtensionURL = null;\n+        private Integer highestLoadPriority = Integer.MIN_VALUE;\n+\n+        private InnerEnhancedServiceLoader(Class<S> type) {\n+            this.type = type;\n+        }\n+\n+        /**\n+         * Get the ServiceLoader for the specified Class\n+         *\n+         * @param type the type of the extension point\n+         * @param <S>  the type\n+         * @return the service loader\n+         */\n+        static <S> InnerEnhancedServiceLoader<S> getServiceLoader(Class<S> type) {\n+            if (type == null) {\n+                throw new IllegalArgumentException(\"Enhanced Service type == null\");\n+            }\n+            InnerEnhancedServiceLoader<S> loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            if (loader == null) {\n+                SERVICE_LOADERS.putIfAbsent(type, new InnerEnhancedServiceLoader<S>(type));\n+                loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            }\n+            return loader;\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param loader the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(ClassLoader loader) throws EnhancedServiceNotFoundException {\n+            return loadExtension(loader, null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load() throws EnhancedServiceNotFoundException {\n+            return loadExtension(findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @param activateName the activate name\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(String activateName) throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param activateName the activate name\n+         * @param loader       the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(String activateName, ClassLoader loader)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, loader, null, null);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(String activateName, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            Class[] argsType = null;\n+            if (args != null && args.length > 0) {\n+                argsType = new Class[args.length];\n+                for (int i = 0; i < args.length; i++) {\n+                    argsType[i] = args[i].getClass();\n                 }\n             }\n-            if (StringUtils.isNotEmpty(activateName)) {\n-                loadFile(service, SEATA_DIRECTORY + activateName.toLowerCase() + \"/\", loader, extensions);\n-\n-                List<Class> activateExtensions = new ArrayList<>();\n-                for (Class clz : extensions) {\n-                    @SuppressWarnings(\"unchecked\")\n-                    LoadLevel activate = (LoadLevel) clz.getAnnotation(LoadLevel.class);\n-                    if (activate != null && activateName.equalsIgnoreCase(activate.name())) {\n-                        activateExtensions.add(clz);\n-                    }\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param argsType     the args type\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(String activateName, Class[] argsType, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @return list list\n+         */\n+        public List<S> loadAll() {\n+            return loadAll(null, null);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @param argsType the args type\n+         * @param args     the args\n+         * @return list list\n+         */\n+        public List<S> loadAll(Class[] argsType, Object[] args) {\n+            List<S> allInstances = new ArrayList<>();\n+            List<Class> allClazzs = getAllExtensionClass();\n+            if (CollectionUtils.isEmpty(allClazzs)) {\n+                return allInstances;\n+            }\n+            try {\n+                for (Class clazz : allClazzs) {\n+                    ExtensionURL url = extensionClassUrlMap.get(clazz);\n+                    allInstances.add(getExtension(url, findClassLoader(), argsType, args));\n                 }\n+            } catch (Throwable t) {\n+                throw new EnhancedServiceNotFoundException(t);\n+            }\n+            return allInstances;\n+        }\n+\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        List<Class> getAllExtensionClass() {\n+            Map<ExtensionURL, Class<?>> map = loadAllExtensionClass(findClassLoader());\n+            List<Class> result = new ArrayList<>(map.values());\n+            return result;\n+        }\n+\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @param loader the loader\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        List<Class> getAllExtensionClass(ClassLoader loader) {\n+            Map<ExtensionURL, Class<?>> map = loadAllExtensionClass(loader);\n+            List<Class> result = new ArrayList<>(map.values());\n+            return result;\n+        }\n \n-                extensions = activateExtensions;\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            try {\n+                loadAllExtensionClass(loader);\n+                return getExtension(defaultExtensionURL, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n+        }\n \n-            if (extensions.isEmpty()) {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \"[\" + activateName\n-                        + \"] and classloader : \" + ObjectUtils.toString(loader));\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(String activateName, ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            if (io.seata.common.util.StringUtils.isEmpty(activateName)) {\n+                throw new IllegalArgumentException(\"the name of service provider for [\" + type.getName() + \"] name is null\");\n+            }\n+            try {\n+                loadAllExtensionClass(loader);\n+                ExtensionURL cachedExtensionURL = getCachedServiceURL(activateName);\n+                return getExtension(cachedExtensionURL, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n-            Class<?> extension = extensions.get(extensions.size() - 1);\n-            S result = initInstance(service, extension, argTypes, args);\n-            if (!foundFromCache && LOGGER.isInfoEnabled()) {\n-                LOGGER.info(\"load \" + service.getSimpleName() + \"[\" + activateName + \"] extension by class[\" + extension\n-                    .getName() + \"]\");\n+        }\n+\n+        private S getExtension(ExtensionURL url, ClassLoader loader, Class[] argTypes,\n+                               Object[] args) {\n+            if (url == null) {\n+                throw new EnhancedServiceNotFoundException(\"service provider not found\");\n             }\n-            return result;\n-        } catch (Throwable e) {\n-            if (e instanceof EnhancedServiceNotFoundException) {\n-                throw (EnhancedServiceNotFoundException)e;\n+            if (Scope.SINGLETON.equals(url.getScope())) {\n+                Holder<Object> holder = extensionInstances.get(url);\n+                if (holder == null) {\n+                    extensionInstances.putIfAbsent(url, new Holder<>());\n+                    holder = extensionInstances.get(url);\n+                }\n+                Object instance = holder.get();\n+                if (instance == null) {\n+                    synchronized (holder) {\n+                        instance = holder.get();\n+                        if (instance == null) {\n+                            instance = createExtension(url, loader, argTypes, args);\n+                            holder.set(instance);\n+                        }\n+                    }\n+                }\n+                return (S)instance;\n             } else {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \" caused by \" + ExceptionUtils\n-                        .getFullStackTrace(e));\n+                return createNewExtension(url, loader, argTypes, args);\n             }\n         }\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> List<Class> findAllExtensionClass(Class<S> service, String activateName, ClassLoader loader) {\n-        List<Class> extensions = new ArrayList<>();\n-        try {\n-            loadFile(service, SERVICES_DIRECTORY, loader, extensions);\n-            loadFile(service, SEATA_DIRECTORY, loader, extensions);\n-        } catch (IOException e) {\n-            throw new EnhancedServiceNotFoundException(e);\n+        private S createExtension(ExtensionURL url, ClassLoader loader, Class[] argTypes,\n+                                  Object[] args) {\n+            Class<?> clazz = loadAllExtensionClass(loader).get(url);\n+            if (clazz == null) {\n+                throw new EnhancedServiceNotFoundException(\"Not Found\");\n+            }\n+            try {\n+                S instance = (S)EXTENSION_INSTANCES.get(clazz);\n+                if (instance == null) {\n+                    S newInstance = initInstance(clazz, argTypes, args);\n+                    EXTENSION_INSTANCES.putIfAbsent(clazz, newInstance);\n+                    instance = newInstance;\n+                }\n+                return instance;\n+            } catch (Throwable t) {\n+                throw new IllegalStateException(\"Extension instance(url: \" + url + \", class: \" +\n+                        type + \")  could not be instantiated: \" + t.getMessage(), t);\n+            }\n         }\n \n-        if (extensions.isEmpty()) {\n-            return extensions;\n-        }\n-        extensions.sort((c1, c2) -> {\n-            int o1 = 0;\n-            int o2 = 0;\n-            @SuppressWarnings(\"unchecked\")\n-            LoadLevel a1 = (LoadLevel) c1.getAnnotation(LoadLevel.class);\n-            @SuppressWarnings(\"unchecked\")\n-            LoadLevel a2 = (LoadLevel) c2.getAnnotation(LoadLevel.class);\n-\n-            if (a1 != null) {\n-                o1 = a1.order();\n+        private S createNewExtension(ExtensionURL url, ClassLoader loader, Class[] argTypes, Object[] args) {\n+            Class<?> clazz = loadAllExtensionClass(loader).get(url);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2f3ed36f716d395e23818173d9e4aec4d9941ca"}, "originalPosition": 486}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MTE5MjIx", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-375119221", "createdAt": "2020-03-16T11:23:22Z", "commit": {"oid": "b2f3ed36f716d395e23818173d9e4aec4d9941ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMToyMzoyMlrOF2voyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMToyMzoyMlrOF2voyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0NzkxMg==", "bodyText": "@author: xxx -> @author xxx", "url": "https://github.com/seata/seata/pull/2135#discussion_r392947912", "createdAt": "2020-03-16T11:23:22Z", "author": {"login": "ggndnn"}, "path": "common/src/main/java/io/seata/common/util/Holder.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.common.util;\n+\n+/**\n+ * Helper Class for hold a value.\n+ *\n+ * @author: haozhibei", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2f3ed36f716d395e23818173d9e4aec4d9941ca"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MTIyNzc4", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-375122778", "createdAt": "2020-03-16T11:29:04Z", "commit": {"oid": "b2f3ed36f716d395e23818173d9e4aec4d9941ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMToyOTowNFrOF2v0AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMToyOTowNFrOF2v0AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1MDc4NA==", "bodyText": "The access modifiers here should be private.", "url": "https://github.com/seata/seata/pull/2135#discussion_r392950784", "createdAt": "2020-03-16T11:29:04Z", "author": {"login": "ggndnn"}, "path": "common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java", "diffHunk": "@@ -198,181 +177,463 @@\n      */\n     @SuppressWarnings(\"rawtypes\")\n     static <S> List<Class> getAllExtensionClass(Class<S> service, ClassLoader loader) {\n-        return findAllExtensionClass(service, null, loader);\n+        return InnerEnhancedServiceLoader.getServiceLoader(service).getAllExtensionClass(loader);\n     }\n \n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader) {\n-        return loadFile(service, activateName, loader, null, null);\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader, Class[] argTypes,\n-                                  Object[] args) {\n-        try {\n-            boolean foundFromCache = true;\n-            List<Class> extensions = providers.get(service);\n-            if (extensions == null) {\n-                synchronized (service) {\n-                    extensions = providers.get(service);\n-                    if (extensions == null) {\n-                        extensions = findAllExtensionClass(service, activateName, loader);\n-                        foundFromCache = false;\n-                        providers.put(service, extensions);\n-                    }\n+    static class InnerEnhancedServiceLoader<S> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2f3ed36f716d395e23818173d9e4aec4d9941ca"}, "originalPosition": 174}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MTIzMTU0", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-375123154", "createdAt": "2020-03-16T11:29:42Z", "commit": {"oid": "b2f3ed36f716d395e23818173d9e4aec4d9941ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMToyOTo0MlrOF2v1OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMToyOTo0MlrOF2v1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1MTA5Nw==", "bodyText": "The access modifiers here should be private.", "url": "https://github.com/seata/seata/pull/2135#discussion_r392951097", "createdAt": "2020-03-16T11:29:42Z", "author": {"login": "ggndnn"}, "path": "common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java", "diffHunk": "@@ -198,181 +177,463 @@\n      */\n     @SuppressWarnings(\"rawtypes\")\n     static <S> List<Class> getAllExtensionClass(Class<S> service, ClassLoader loader) {\n-        return findAllExtensionClass(service, null, loader);\n+        return InnerEnhancedServiceLoader.getServiceLoader(service).getAllExtensionClass(loader);\n     }\n \n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader) {\n-        return loadFile(service, activateName, loader, null, null);\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader, Class[] argTypes,\n-                                  Object[] args) {\n-        try {\n-            boolean foundFromCache = true;\n-            List<Class> extensions = providers.get(service);\n-            if (extensions == null) {\n-                synchronized (service) {\n-                    extensions = providers.get(service);\n-                    if (extensions == null) {\n-                        extensions = findAllExtensionClass(service, activateName, loader);\n-                        foundFromCache = false;\n-                        providers.put(service, extensions);\n-                    }\n+    static class InnerEnhancedServiceLoader<S> {\n+        private static final Logger LOGGER = LoggerFactory.getLogger(EnhancedServiceLoader.class);\n+        private static final String SERVICES_DIRECTORY = \"META-INF/services/\";\n+        private static final String SEATA_DIRECTORY = \"META-INF/seata/\";\n+\n+        private static final ConcurrentMap<Class<?>, InnerEnhancedServiceLoader<?>> SERVICE_LOADERS =\n+                new ConcurrentHashMap<>();\n+        private static final ConcurrentMap<Class<?>, Object> EXTENSION_INSTANCES = new ConcurrentHashMap<>();\n+\n+        private final Class<S> type;\n+        private final Holder<Map<ExtensionURL, Class<?>>> extensionClasses = new Holder<>();\n+        private final ConcurrentMap<ExtensionURL, Holder<Object>> extensionInstances = new ConcurrentHashMap<>();\n+        private final ConcurrentMap<String, List<ExtensionURL>> extensionNameUrlsMap = new ConcurrentHashMap<>();\n+        private final ConcurrentMap<Class<?>, ExtensionURL> extensionClassUrlMap = new ConcurrentHashMap<>();\n+        private ExtensionURL defaultExtensionURL = null;\n+        private Integer highestLoadPriority = Integer.MIN_VALUE;\n+\n+        private InnerEnhancedServiceLoader(Class<S> type) {\n+            this.type = type;\n+        }\n+\n+        /**\n+         * Get the ServiceLoader for the specified Class\n+         *\n+         * @param type the type of the extension point\n+         * @param <S>  the type\n+         * @return the service loader\n+         */\n+        static <S> InnerEnhancedServiceLoader<S> getServiceLoader(Class<S> type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2f3ed36f716d395e23818173d9e4aec4d9941ca"}, "originalPosition": 202}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MTIzOTE3", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-375123917", "createdAt": "2020-03-16T11:30:51Z", "commit": {"oid": "b2f3ed36f716d395e23818173d9e4aec4d9941ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTozMDo1MVrOF2v3lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTozMDo1MVrOF2v3lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1MTcwMw==", "bodyText": "The access modifiers here should be private.", "url": "https://github.com/seata/seata/pull/2135#discussion_r392951703", "createdAt": "2020-03-16T11:30:51Z", "author": {"login": "ggndnn"}, "path": "common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java", "diffHunk": "@@ -198,181 +177,463 @@\n      */\n     @SuppressWarnings(\"rawtypes\")\n     static <S> List<Class> getAllExtensionClass(Class<S> service, ClassLoader loader) {\n-        return findAllExtensionClass(service, null, loader);\n+        return InnerEnhancedServiceLoader.getServiceLoader(service).getAllExtensionClass(loader);\n     }\n \n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader) {\n-        return loadFile(service, activateName, loader, null, null);\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader, Class[] argTypes,\n-                                  Object[] args) {\n-        try {\n-            boolean foundFromCache = true;\n-            List<Class> extensions = providers.get(service);\n-            if (extensions == null) {\n-                synchronized (service) {\n-                    extensions = providers.get(service);\n-                    if (extensions == null) {\n-                        extensions = findAllExtensionClass(service, activateName, loader);\n-                        foundFromCache = false;\n-                        providers.put(service, extensions);\n-                    }\n+    static class InnerEnhancedServiceLoader<S> {\n+        private static final Logger LOGGER = LoggerFactory.getLogger(EnhancedServiceLoader.class);\n+        private static final String SERVICES_DIRECTORY = \"META-INF/services/\";\n+        private static final String SEATA_DIRECTORY = \"META-INF/seata/\";\n+\n+        private static final ConcurrentMap<Class<?>, InnerEnhancedServiceLoader<?>> SERVICE_LOADERS =\n+                new ConcurrentHashMap<>();\n+        private static final ConcurrentMap<Class<?>, Object> EXTENSION_INSTANCES = new ConcurrentHashMap<>();\n+\n+        private final Class<S> type;\n+        private final Holder<Map<ExtensionURL, Class<?>>> extensionClasses = new Holder<>();\n+        private final ConcurrentMap<ExtensionURL, Holder<Object>> extensionInstances = new ConcurrentHashMap<>();\n+        private final ConcurrentMap<String, List<ExtensionURL>> extensionNameUrlsMap = new ConcurrentHashMap<>();\n+        private final ConcurrentMap<Class<?>, ExtensionURL> extensionClassUrlMap = new ConcurrentHashMap<>();\n+        private ExtensionURL defaultExtensionURL = null;\n+        private Integer highestLoadPriority = Integer.MIN_VALUE;\n+\n+        private InnerEnhancedServiceLoader(Class<S> type) {\n+            this.type = type;\n+        }\n+\n+        /**\n+         * Get the ServiceLoader for the specified Class\n+         *\n+         * @param type the type of the extension point\n+         * @param <S>  the type\n+         * @return the service loader\n+         */\n+        static <S> InnerEnhancedServiceLoader<S> getServiceLoader(Class<S> type) {\n+            if (type == null) {\n+                throw new IllegalArgumentException(\"Enhanced Service type == null\");\n+            }\n+            InnerEnhancedServiceLoader<S> loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            if (loader == null) {\n+                SERVICE_LOADERS.putIfAbsent(type, new InnerEnhancedServiceLoader<S>(type));\n+                loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            }\n+            return loader;\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param loader the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(ClassLoader loader) throws EnhancedServiceNotFoundException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2f3ed36f716d395e23818173d9e4aec4d9941ca"}, "originalPosition": 221}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ab23a48250e2dc5ff330de2073edac014000f9f", "author": {"user": {"login": "booogu", "name": "haozhibei"}}, "url": "https://github.com/seata/seata/commit/7ab23a48250e2dc5ff330de2073edac014000f9f", "committedDate": "2020-03-16T12:25:37Z", "message": "Merge remote-tracking branch 'upstream/develop' into f_spi"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NzMwNTg4", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-375730588", "createdAt": "2020-03-17T04:16:07Z", "commit": {"oid": "b2f3ed36f716d395e23818173d9e4aec4d9941ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNDoxNjowN1rOF3Nc1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNDoxNjowN1rOF3Nc1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQzNjM3Mg==", "bodyText": "Since priority defaults to 0, is the statement better to be if (defaultExtensionURL == null || priority > highestLoadPriority)?", "url": "https://github.com/seata/seata/pull/2135#discussion_r393436372", "createdAt": "2020-03-17T04:16:07Z", "author": {"login": "ggndnn"}, "path": "common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java", "diffHunk": "@@ -198,181 +177,463 @@\n      */\n     @SuppressWarnings(\"rawtypes\")\n     static <S> List<Class> getAllExtensionClass(Class<S> service, ClassLoader loader) {\n-        return findAllExtensionClass(service, null, loader);\n+        return InnerEnhancedServiceLoader.getServiceLoader(service).getAllExtensionClass(loader);\n     }\n \n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader) {\n-        return loadFile(service, activateName, loader, null, null);\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader, Class[] argTypes,\n-                                  Object[] args) {\n-        try {\n-            boolean foundFromCache = true;\n-            List<Class> extensions = providers.get(service);\n-            if (extensions == null) {\n-                synchronized (service) {\n-                    extensions = providers.get(service);\n-                    if (extensions == null) {\n-                        extensions = findAllExtensionClass(service, activateName, loader);\n-                        foundFromCache = false;\n-                        providers.put(service, extensions);\n-                    }\n+    static class InnerEnhancedServiceLoader<S> {\n+        private static final Logger LOGGER = LoggerFactory.getLogger(EnhancedServiceLoader.class);\n+        private static final String SERVICES_DIRECTORY = \"META-INF/services/\";\n+        private static final String SEATA_DIRECTORY = \"META-INF/seata/\";\n+\n+        private static final ConcurrentMap<Class<?>, InnerEnhancedServiceLoader<?>> SERVICE_LOADERS =\n+                new ConcurrentHashMap<>();\n+        private static final ConcurrentMap<Class<?>, Object> EXTENSION_INSTANCES = new ConcurrentHashMap<>();\n+\n+        private final Class<S> type;\n+        private final Holder<Map<ExtensionURL, Class<?>>> extensionClasses = new Holder<>();\n+        private final ConcurrentMap<ExtensionURL, Holder<Object>> extensionInstances = new ConcurrentHashMap<>();\n+        private final ConcurrentMap<String, List<ExtensionURL>> extensionNameUrlsMap = new ConcurrentHashMap<>();\n+        private final ConcurrentMap<Class<?>, ExtensionURL> extensionClassUrlMap = new ConcurrentHashMap<>();\n+        private ExtensionURL defaultExtensionURL = null;\n+        private Integer highestLoadPriority = Integer.MIN_VALUE;\n+\n+        private InnerEnhancedServiceLoader(Class<S> type) {\n+            this.type = type;\n+        }\n+\n+        /**\n+         * Get the ServiceLoader for the specified Class\n+         *\n+         * @param type the type of the extension point\n+         * @param <S>  the type\n+         * @return the service loader\n+         */\n+        static <S> InnerEnhancedServiceLoader<S> getServiceLoader(Class<S> type) {\n+            if (type == null) {\n+                throw new IllegalArgumentException(\"Enhanced Service type == null\");\n+            }\n+            InnerEnhancedServiceLoader<S> loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            if (loader == null) {\n+                SERVICE_LOADERS.putIfAbsent(type, new InnerEnhancedServiceLoader<S>(type));\n+                loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            }\n+            return loader;\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param loader the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(ClassLoader loader) throws EnhancedServiceNotFoundException {\n+            return loadExtension(loader, null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load() throws EnhancedServiceNotFoundException {\n+            return loadExtension(findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @param activateName the activate name\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(String activateName) throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param activateName the activate name\n+         * @param loader       the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(String activateName, ClassLoader loader)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, loader, null, null);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(String activateName, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            Class[] argsType = null;\n+            if (args != null && args.length > 0) {\n+                argsType = new Class[args.length];\n+                for (int i = 0; i < args.length; i++) {\n+                    argsType[i] = args[i].getClass();\n                 }\n             }\n-            if (StringUtils.isNotEmpty(activateName)) {\n-                loadFile(service, SEATA_DIRECTORY + activateName.toLowerCase() + \"/\", loader, extensions);\n-\n-                List<Class> activateExtensions = new ArrayList<>();\n-                for (Class clz : extensions) {\n-                    @SuppressWarnings(\"unchecked\")\n-                    LoadLevel activate = (LoadLevel) clz.getAnnotation(LoadLevel.class);\n-                    if (activate != null && activateName.equalsIgnoreCase(activate.name())) {\n-                        activateExtensions.add(clz);\n-                    }\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param argsType     the args type\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(String activateName, Class[] argsType, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @return list list\n+         */\n+        public List<S> loadAll() {\n+            return loadAll(null, null);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @param argsType the args type\n+         * @param args     the args\n+         * @return list list\n+         */\n+        public List<S> loadAll(Class[] argsType, Object[] args) {\n+            List<S> allInstances = new ArrayList<>();\n+            List<Class> allClazzs = getAllExtensionClass();\n+            if (CollectionUtils.isEmpty(allClazzs)) {\n+                return allInstances;\n+            }\n+            try {\n+                for (Class clazz : allClazzs) {\n+                    ExtensionURL url = extensionClassUrlMap.get(clazz);\n+                    allInstances.add(getExtension(url, findClassLoader(), argsType, args));\n                 }\n+            } catch (Throwable t) {\n+                throw new EnhancedServiceNotFoundException(t);\n+            }\n+            return allInstances;\n+        }\n+\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        List<Class> getAllExtensionClass() {\n+            Map<ExtensionURL, Class<?>> map = loadAllExtensionClass(findClassLoader());\n+            List<Class> result = new ArrayList<>(map.values());\n+            return result;\n+        }\n+\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @param loader the loader\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        List<Class> getAllExtensionClass(ClassLoader loader) {\n+            Map<ExtensionURL, Class<?>> map = loadAllExtensionClass(loader);\n+            List<Class> result = new ArrayList<>(map.values());\n+            return result;\n+        }\n \n-                extensions = activateExtensions;\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            try {\n+                loadAllExtensionClass(loader);\n+                return getExtension(defaultExtensionURL, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n+        }\n \n-            if (extensions.isEmpty()) {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \"[\" + activateName\n-                        + \"] and classloader : \" + ObjectUtils.toString(loader));\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(String activateName, ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            if (io.seata.common.util.StringUtils.isEmpty(activateName)) {\n+                throw new IllegalArgumentException(\"the name of service provider for [\" + type.getName() + \"] name is null\");\n+            }\n+            try {\n+                loadAllExtensionClass(loader);\n+                ExtensionURL cachedExtensionURL = getCachedServiceURL(activateName);\n+                return getExtension(cachedExtensionURL, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n-            Class<?> extension = extensions.get(extensions.size() - 1);\n-            S result = initInstance(service, extension, argTypes, args);\n-            if (!foundFromCache && LOGGER.isInfoEnabled()) {\n-                LOGGER.info(\"load \" + service.getSimpleName() + \"[\" + activateName + \"] extension by class[\" + extension\n-                    .getName() + \"]\");\n+        }\n+\n+        private S getExtension(ExtensionURL url, ClassLoader loader, Class[] argTypes,\n+                               Object[] args) {\n+            if (url == null) {\n+                throw new EnhancedServiceNotFoundException(\"service provider not found\");\n             }\n-            return result;\n-        } catch (Throwable e) {\n-            if (e instanceof EnhancedServiceNotFoundException) {\n-                throw (EnhancedServiceNotFoundException)e;\n+            if (Scope.SINGLETON.equals(url.getScope())) {\n+                Holder<Object> holder = extensionInstances.get(url);\n+                if (holder == null) {\n+                    extensionInstances.putIfAbsent(url, new Holder<>());\n+                    holder = extensionInstances.get(url);\n+                }\n+                Object instance = holder.get();\n+                if (instance == null) {\n+                    synchronized (holder) {\n+                        instance = holder.get();\n+                        if (instance == null) {\n+                            instance = createExtension(url, loader, argTypes, args);\n+                            holder.set(instance);\n+                        }\n+                    }\n+                }\n+                return (S)instance;\n             } else {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \" caused by \" + ExceptionUtils\n-                        .getFullStackTrace(e));\n+                return createNewExtension(url, loader, argTypes, args);\n             }\n         }\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> List<Class> findAllExtensionClass(Class<S> service, String activateName, ClassLoader loader) {\n-        List<Class> extensions = new ArrayList<>();\n-        try {\n-            loadFile(service, SERVICES_DIRECTORY, loader, extensions);\n-            loadFile(service, SEATA_DIRECTORY, loader, extensions);\n-        } catch (IOException e) {\n-            throw new EnhancedServiceNotFoundException(e);\n+        private S createExtension(ExtensionURL url, ClassLoader loader, Class[] argTypes,\n+                                  Object[] args) {\n+            Class<?> clazz = loadAllExtensionClass(loader).get(url);\n+            if (clazz == null) {\n+                throw new EnhancedServiceNotFoundException(\"Not Found\");\n+            }\n+            try {\n+                S instance = (S)EXTENSION_INSTANCES.get(clazz);\n+                if (instance == null) {\n+                    S newInstance = initInstance(clazz, argTypes, args);\n+                    EXTENSION_INSTANCES.putIfAbsent(clazz, newInstance);\n+                    instance = newInstance;\n+                }\n+                return instance;\n+            } catch (Throwable t) {\n+                throw new IllegalStateException(\"Extension instance(url: \" + url + \", class: \" +\n+                        type + \")  could not be instantiated: \" + t.getMessage(), t);\n+            }\n         }\n \n-        if (extensions.isEmpty()) {\n-            return extensions;\n-        }\n-        extensions.sort((c1, c2) -> {\n-            int o1 = 0;\n-            int o2 = 0;\n-            @SuppressWarnings(\"unchecked\")\n-            LoadLevel a1 = (LoadLevel) c1.getAnnotation(LoadLevel.class);\n-            @SuppressWarnings(\"unchecked\")\n-            LoadLevel a2 = (LoadLevel) c2.getAnnotation(LoadLevel.class);\n-\n-            if (a1 != null) {\n-                o1 = a1.order();\n+        private S createNewExtension(ExtensionURL url, ClassLoader loader, Class[] argTypes, Object[] args) {\n+            Class<?> clazz = loadAllExtensionClass(loader).get(url);\n+            if (clazz == null) {\n+                throw new EnhancedServiceNotFoundException(\"Not Found\");\n+            }\n+            try {\n+                S newInstance = initInstance(clazz, argTypes, args);\n+                return newInstance;\n+            } catch (Throwable t) {\n+                throw new IllegalStateException(\"Extension instance(url: \" + url + \", class: \" +\n+                        type + \")  could not be instantiated: \" + t.getMessage(), t);\n             }\n+        }\n \n-            if (a2 != null) {\n-                o2 = a2.order();\n+        private Map<ExtensionURL, Class<?>> loadAllExtensionClass(ClassLoader loader) {\n+            Map<ExtensionURL, Class<?>> classes = extensionClasses.get();\n+            if (classes == null) {\n+                synchronized (extensionClasses) {\n+                    classes = extensionClasses.get();\n+                    if (classes == null) {\n+                        classes = findAllExtensionClass(loader);\n+                        extensionClasses.set(classes);\n+                    }\n+                }\n             }\n+            return classes;\n+        }\n \n-            return Integer.compare(o1, o2);\n+        @SuppressWarnings(\"rawtypes\")\n+        private Map<ExtensionURL, Class<?>> findAllExtensionClass(ClassLoader loader) {\n+            Map<ExtensionURL, Class<?>> extensions = new HashMap<>();\n+            try {\n+                loadFile(SERVICES_DIRECTORY, loader, extensions);\n+                loadFile(SEATA_DIRECTORY, loader, extensions);\n+            } catch (IOException e) {\n+                throw new EnhancedServiceNotFoundException(e);\n+            }\n \n-        });\n+            if (!extensions.isEmpty()) {\n+                extensions = sortAllExtensionClass(extensions);\n+            }\n \n-        return extensions;\n-    }\n+            if (!extensionNameUrlsMap.isEmpty()) {\n+                for (List<ExtensionURL> urlList : extensionNameUrlsMap.values()) {\n+                    Collections.sort(urlList, (url1, url2) -> {\n+                        int o1 = url1.getOrder();\n+                        int o2 = url2.getOrder();\n+                        return Integer.compare(o1, o2);\n+                    });\n+                }\n+            }\n+            return extensions;\n+        }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static void loadFile(Class<?> service, String dir, ClassLoader classLoader, List<Class> extensions)\n-        throws IOException {\n-        String fileName = dir + service.getName();\n-        Enumeration<URL> urls;\n-        if (classLoader != null) {\n-            urls = classLoader.getResources(fileName);\n-        } else {\n-            urls = ClassLoader.getSystemResources(fileName);\n+        private Map<ExtensionURL, Class<?>> sortAllExtensionClass(Map<ExtensionURL, Class<?>> extensions) {\n+            Set<ExtensionURL> entrySet = extensions.keySet();\n+            List<ExtensionURL> list = new ArrayList<>(entrySet);\n+            Collections.sort(list, (url1, url2) -> {\n+                int o1 = url1.getOrder();\n+                int o2 = url2.getOrder();\n+                return Integer.compare(o1, o2);\n+            });\n+            LinkedHashMap<ExtensionURL, Class<?>> linkedHashMap = new LinkedHashMap<ExtensionURL, Class<?>>();\n+            for (ExtensionURL url : list) {\n+                linkedHashMap.put(url, extensions.get(url));\n+            }\n+            return linkedHashMap;\n         }\n \n-        if (urls != null) {\n-            while (urls.hasMoreElements()) {\n-                java.net.URL url = urls.nextElement();\n-                BufferedReader reader = null;\n-                try {\n-                    reader = new BufferedReader(new InputStreamReader(url.openStream(), Constants.DEFAULT_CHARSET));\n-                    String line = null;\n-                    while ((line = reader.readLine()) != null) {\n-                        final int ci = line.indexOf('#');\n-                        if (ci >= 0) {\n-                            line = line.substring(0, ci);\n-                        }\n-                        line = line.trim();\n-                        if (line.length() > 0) {\n-                            try {\n-                                extensions.add(Class.forName(line, true, classLoader));\n-                            } catch (LinkageError | ClassNotFoundException e) {\n-                                LOGGER.warn(\"load [{}] class fail. {}\", line, e.getMessage());\n+        @SuppressWarnings(\"rawtypes\")\n+        private void loadFile(String dir, ClassLoader classLoader, Map<ExtensionURL, Class<?>> extensions)\n+                throws IOException {\n+            String fileName = dir + type.getName();\n+            Enumeration<java.net.URL> urls;\n+            if (classLoader != null) {\n+                urls = classLoader.getResources(fileName);\n+            } else {\n+                urls = ClassLoader.getSystemResources(fileName);\n+            }\n+            if (urls != null) {\n+                while (urls.hasMoreElements()) {\n+                    java.net.URL url = urls.nextElement();\n+                    BufferedReader reader = null;\n+                    try {\n+                        reader = new BufferedReader(new InputStreamReader(url.openStream(), Constants.DEFAULT_CHARSET));\n+                        String line = null;\n+                        while ((line = reader.readLine()) != null) {\n+                            final int ci = line.indexOf('#');\n+                            if (ci >= 0) {\n+                                line = line.substring(0, ci);\n+                            }\n+                            line = line.trim();\n+                            if (line.length() > 0) {\n+                                try {\n+                                    Class<?> clazz = Class.forName(line, true, classLoader);\n+                                    ExtensionURL extensionUrl = getExtensionURL(clazz);\n+                                    extensions.put(extensionUrl, clazz);\n+                                } catch (LinkageError | ClassNotFoundException e) {\n+                                    LOGGER.warn(\"load [{}] class fail. {}\", line, e.getMessage());\n+                                }\n                             }\n                         }\n+                    } catch (Throwable e) {\n+                        LOGGER.warn(e.getMessage());\n+                    } finally {\n+                        IOUtil.close(reader);\n                     }\n-                } catch (Throwable e) {\n-                    LOGGER.warn(e.getMessage());\n-                } finally {\n-                    IOUtil.close(reader);\n                 }\n             }\n         }\n-    }\n \n-    /**\n-     * init instance\n-     *\n-     * @param <S>       the type parameter\n-     * @param service   the service\n-     * @param implClazz the impl clazz\n-     * @param argTypes  the arg types\n-     * @param args      the args\n-     * @return s s\n-     * @throws IllegalAccessException the illegal access exception\n-     * @throws InstantiationException the instantiation exception\n-     * @throws NoSuchMethodException the no such method exception\n-     * @throws InvocationTargetException the invocation target exception\n-     */\n-    protected static <S> S initInstance(Class<S> service, Class implClazz, Class[] argTypes, Object[] args)\n-        throws IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {\n-        S s = null;\n-        if (argTypes != null && args != null) {\n-            // Constructor with arguments\n-            Constructor<S> constructor = implClazz.getDeclaredConstructor(argTypes);\n-            s = service.cast(constructor.newInstance(args));\n-        } else {\n-            // default Constructor\n-            s = service.cast(implClazz.newInstance());\n+        private ExtensionURL getExtensionURL(Class<?> clazz) {\n+            String serviceName = null;\n+            String typeName = null;\n+            Integer priority = 0;\n+            Scope scope = Scope.SINGLETON;\n+            LoadLevel loadLevel = clazz.getAnnotation(LoadLevel.class);\n+            typeName = clazz.getTypeName();\n+            if (loadLevel != null) {\n+                serviceName = loadLevel.name();\n+                priority = loadLevel.order();\n+                scope = loadLevel.scope();\n+            }\n+            ExtensionURL result = new ExtensionURL(serviceName, typeName, priority, scope);\n+            //do cache\n+            extensionClassUrlMap.put(clazz, result);\n+            if (loadLevel != null) {\n+                if (extensionNameUrlsMap.containsKey(serviceName)) {\n+                    List<ExtensionURL> urls = extensionNameUrlsMap.get(serviceName);\n+                    urls.add(result);\n+                } else {\n+                    List<ExtensionURL> urls = new ArrayList<>();\n+                    urls.add(result);\n+                    extensionNameUrlsMap.put(serviceName, urls);\n+                }\n+            }\n+            if (priority >= highestLoadPriority) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2f3ed36f716d395e23818173d9e4aec4d9941ca"}, "originalPosition": 683}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NzMwNzMx", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-375730731", "createdAt": "2020-03-17T04:16:40Z", "commit": {"oid": "b2f3ed36f716d395e23818173d9e4aec4d9941ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNDoxNjo0MFrOF3NdWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNDoxNjo0MFrOF3NdWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQzNjUwNw==", "bodyText": "The return statement can be removed.", "url": "https://github.com/seata/seata/pull/2135#discussion_r393436507", "createdAt": "2020-03-17T04:16:40Z", "author": {"login": "ggndnn"}, "path": "common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java", "diffHunk": "@@ -198,181 +177,463 @@\n      */\n     @SuppressWarnings(\"rawtypes\")\n     static <S> List<Class> getAllExtensionClass(Class<S> service, ClassLoader loader) {\n-        return findAllExtensionClass(service, null, loader);\n+        return InnerEnhancedServiceLoader.getServiceLoader(service).getAllExtensionClass(loader);\n     }\n \n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader) {\n-        return loadFile(service, activateName, loader, null, null);\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader, Class[] argTypes,\n-                                  Object[] args) {\n-        try {\n-            boolean foundFromCache = true;\n-            List<Class> extensions = providers.get(service);\n-            if (extensions == null) {\n-                synchronized (service) {\n-                    extensions = providers.get(service);\n-                    if (extensions == null) {\n-                        extensions = findAllExtensionClass(service, activateName, loader);\n-                        foundFromCache = false;\n-                        providers.put(service, extensions);\n-                    }\n+    static class InnerEnhancedServiceLoader<S> {\n+        private static final Logger LOGGER = LoggerFactory.getLogger(EnhancedServiceLoader.class);\n+        private static final String SERVICES_DIRECTORY = \"META-INF/services/\";\n+        private static final String SEATA_DIRECTORY = \"META-INF/seata/\";\n+\n+        private static final ConcurrentMap<Class<?>, InnerEnhancedServiceLoader<?>> SERVICE_LOADERS =\n+                new ConcurrentHashMap<>();\n+        private static final ConcurrentMap<Class<?>, Object> EXTENSION_INSTANCES = new ConcurrentHashMap<>();\n+\n+        private final Class<S> type;\n+        private final Holder<Map<ExtensionURL, Class<?>>> extensionClasses = new Holder<>();\n+        private final ConcurrentMap<ExtensionURL, Holder<Object>> extensionInstances = new ConcurrentHashMap<>();\n+        private final ConcurrentMap<String, List<ExtensionURL>> extensionNameUrlsMap = new ConcurrentHashMap<>();\n+        private final ConcurrentMap<Class<?>, ExtensionURL> extensionClassUrlMap = new ConcurrentHashMap<>();\n+        private ExtensionURL defaultExtensionURL = null;\n+        private Integer highestLoadPriority = Integer.MIN_VALUE;\n+\n+        private InnerEnhancedServiceLoader(Class<S> type) {\n+            this.type = type;\n+        }\n+\n+        /**\n+         * Get the ServiceLoader for the specified Class\n+         *\n+         * @param type the type of the extension point\n+         * @param <S>  the type\n+         * @return the service loader\n+         */\n+        static <S> InnerEnhancedServiceLoader<S> getServiceLoader(Class<S> type) {\n+            if (type == null) {\n+                throw new IllegalArgumentException(\"Enhanced Service type == null\");\n+            }\n+            InnerEnhancedServiceLoader<S> loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            if (loader == null) {\n+                SERVICE_LOADERS.putIfAbsent(type, new InnerEnhancedServiceLoader<S>(type));\n+                loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            }\n+            return loader;\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param loader the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(ClassLoader loader) throws EnhancedServiceNotFoundException {\n+            return loadExtension(loader, null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load() throws EnhancedServiceNotFoundException {\n+            return loadExtension(findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @param activateName the activate name\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(String activateName) throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param activateName the activate name\n+         * @param loader       the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(String activateName, ClassLoader loader)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, loader, null, null);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(String activateName, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            Class[] argsType = null;\n+            if (args != null && args.length > 0) {\n+                argsType = new Class[args.length];\n+                for (int i = 0; i < args.length; i++) {\n+                    argsType[i] = args[i].getClass();\n                 }\n             }\n-            if (StringUtils.isNotEmpty(activateName)) {\n-                loadFile(service, SEATA_DIRECTORY + activateName.toLowerCase() + \"/\", loader, extensions);\n-\n-                List<Class> activateExtensions = new ArrayList<>();\n-                for (Class clz : extensions) {\n-                    @SuppressWarnings(\"unchecked\")\n-                    LoadLevel activate = (LoadLevel) clz.getAnnotation(LoadLevel.class);\n-                    if (activate != null && activateName.equalsIgnoreCase(activate.name())) {\n-                        activateExtensions.add(clz);\n-                    }\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param argsType     the args type\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(String activateName, Class[] argsType, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @return list list\n+         */\n+        public List<S> loadAll() {\n+            return loadAll(null, null);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @param argsType the args type\n+         * @param args     the args\n+         * @return list list\n+         */\n+        public List<S> loadAll(Class[] argsType, Object[] args) {\n+            List<S> allInstances = new ArrayList<>();\n+            List<Class> allClazzs = getAllExtensionClass();\n+            if (CollectionUtils.isEmpty(allClazzs)) {\n+                return allInstances;\n+            }\n+            try {\n+                for (Class clazz : allClazzs) {\n+                    ExtensionURL url = extensionClassUrlMap.get(clazz);\n+                    allInstances.add(getExtension(url, findClassLoader(), argsType, args));\n                 }\n+            } catch (Throwable t) {\n+                throw new EnhancedServiceNotFoundException(t);\n+            }\n+            return allInstances;\n+        }\n+\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        List<Class> getAllExtensionClass() {\n+            Map<ExtensionURL, Class<?>> map = loadAllExtensionClass(findClassLoader());\n+            List<Class> result = new ArrayList<>(map.values());\n+            return result;\n+        }\n+\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @param loader the loader\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        List<Class> getAllExtensionClass(ClassLoader loader) {\n+            Map<ExtensionURL, Class<?>> map = loadAllExtensionClass(loader);\n+            List<Class> result = new ArrayList<>(map.values());\n+            return result;\n+        }\n \n-                extensions = activateExtensions;\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            try {\n+                loadAllExtensionClass(loader);\n+                return getExtension(defaultExtensionURL, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n+        }\n \n-            if (extensions.isEmpty()) {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \"[\" + activateName\n-                        + \"] and classloader : \" + ObjectUtils.toString(loader));\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(String activateName, ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            if (io.seata.common.util.StringUtils.isEmpty(activateName)) {\n+                throw new IllegalArgumentException(\"the name of service provider for [\" + type.getName() + \"] name is null\");\n+            }\n+            try {\n+                loadAllExtensionClass(loader);\n+                ExtensionURL cachedExtensionURL = getCachedServiceURL(activateName);\n+                return getExtension(cachedExtensionURL, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n-            Class<?> extension = extensions.get(extensions.size() - 1);\n-            S result = initInstance(service, extension, argTypes, args);\n-            if (!foundFromCache && LOGGER.isInfoEnabled()) {\n-                LOGGER.info(\"load \" + service.getSimpleName() + \"[\" + activateName + \"] extension by class[\" + extension\n-                    .getName() + \"]\");\n+        }\n+\n+        private S getExtension(ExtensionURL url, ClassLoader loader, Class[] argTypes,\n+                               Object[] args) {\n+            if (url == null) {\n+                throw new EnhancedServiceNotFoundException(\"service provider not found\");\n             }\n-            return result;\n-        } catch (Throwable e) {\n-            if (e instanceof EnhancedServiceNotFoundException) {\n-                throw (EnhancedServiceNotFoundException)e;\n+            if (Scope.SINGLETON.equals(url.getScope())) {\n+                Holder<Object> holder = extensionInstances.get(url);\n+                if (holder == null) {\n+                    extensionInstances.putIfAbsent(url, new Holder<>());\n+                    holder = extensionInstances.get(url);\n+                }\n+                Object instance = holder.get();\n+                if (instance == null) {\n+                    synchronized (holder) {\n+                        instance = holder.get();\n+                        if (instance == null) {\n+                            instance = createExtension(url, loader, argTypes, args);\n+                            holder.set(instance);\n+                        }\n+                    }\n+                }\n+                return (S)instance;\n             } else {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \" caused by \" + ExceptionUtils\n-                        .getFullStackTrace(e));\n+                return createNewExtension(url, loader, argTypes, args);\n             }\n         }\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> List<Class> findAllExtensionClass(Class<S> service, String activateName, ClassLoader loader) {\n-        List<Class> extensions = new ArrayList<>();\n-        try {\n-            loadFile(service, SERVICES_DIRECTORY, loader, extensions);\n-            loadFile(service, SEATA_DIRECTORY, loader, extensions);\n-        } catch (IOException e) {\n-            throw new EnhancedServiceNotFoundException(e);\n+        private S createExtension(ExtensionURL url, ClassLoader loader, Class[] argTypes,\n+                                  Object[] args) {\n+            Class<?> clazz = loadAllExtensionClass(loader).get(url);\n+            if (clazz == null) {\n+                throw new EnhancedServiceNotFoundException(\"Not Found\");\n+            }\n+            try {\n+                S instance = (S)EXTENSION_INSTANCES.get(clazz);\n+                if (instance == null) {\n+                    S newInstance = initInstance(clazz, argTypes, args);\n+                    EXTENSION_INSTANCES.putIfAbsent(clazz, newInstance);\n+                    instance = newInstance;\n+                }\n+                return instance;\n+            } catch (Throwable t) {\n+                throw new IllegalStateException(\"Extension instance(url: \" + url + \", class: \" +\n+                        type + \")  could not be instantiated: \" + t.getMessage(), t);\n+            }\n         }\n \n-        if (extensions.isEmpty()) {\n-            return extensions;\n-        }\n-        extensions.sort((c1, c2) -> {\n-            int o1 = 0;\n-            int o2 = 0;\n-            @SuppressWarnings(\"unchecked\")\n-            LoadLevel a1 = (LoadLevel) c1.getAnnotation(LoadLevel.class);\n-            @SuppressWarnings(\"unchecked\")\n-            LoadLevel a2 = (LoadLevel) c2.getAnnotation(LoadLevel.class);\n-\n-            if (a1 != null) {\n-                o1 = a1.order();\n+        private S createNewExtension(ExtensionURL url, ClassLoader loader, Class[] argTypes, Object[] args) {\n+            Class<?> clazz = loadAllExtensionClass(loader).get(url);\n+            if (clazz == null) {\n+                throw new EnhancedServiceNotFoundException(\"Not Found\");\n+            }\n+            try {\n+                S newInstance = initInstance(clazz, argTypes, args);\n+                return newInstance;\n+            } catch (Throwable t) {\n+                throw new IllegalStateException(\"Extension instance(url: \" + url + \", class: \" +\n+                        type + \")  could not be instantiated: \" + t.getMessage(), t);\n             }\n+        }\n \n-            if (a2 != null) {\n-                o2 = a2.order();\n+        private Map<ExtensionURL, Class<?>> loadAllExtensionClass(ClassLoader loader) {\n+            Map<ExtensionURL, Class<?>> classes = extensionClasses.get();\n+            if (classes == null) {\n+                synchronized (extensionClasses) {\n+                    classes = extensionClasses.get();\n+                    if (classes == null) {\n+                        classes = findAllExtensionClass(loader);\n+                        extensionClasses.set(classes);\n+                    }\n+                }\n             }\n+            return classes;\n+        }\n \n-            return Integer.compare(o1, o2);\n+        @SuppressWarnings(\"rawtypes\")\n+        private Map<ExtensionURL, Class<?>> findAllExtensionClass(ClassLoader loader) {\n+            Map<ExtensionURL, Class<?>> extensions = new HashMap<>();\n+            try {\n+                loadFile(SERVICES_DIRECTORY, loader, extensions);\n+                loadFile(SEATA_DIRECTORY, loader, extensions);\n+            } catch (IOException e) {\n+                throw new EnhancedServiceNotFoundException(e);\n+            }\n \n-        });\n+            if (!extensions.isEmpty()) {\n+                extensions = sortAllExtensionClass(extensions);\n+            }\n \n-        return extensions;\n-    }\n+            if (!extensionNameUrlsMap.isEmpty()) {\n+                for (List<ExtensionURL> urlList : extensionNameUrlsMap.values()) {\n+                    Collections.sort(urlList, (url1, url2) -> {\n+                        int o1 = url1.getOrder();\n+                        int o2 = url2.getOrder();\n+                        return Integer.compare(o1, o2);\n+                    });\n+                }\n+            }\n+            return extensions;\n+        }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static void loadFile(Class<?> service, String dir, ClassLoader classLoader, List<Class> extensions)\n-        throws IOException {\n-        String fileName = dir + service.getName();\n-        Enumeration<URL> urls;\n-        if (classLoader != null) {\n-            urls = classLoader.getResources(fileName);\n-        } else {\n-            urls = ClassLoader.getSystemResources(fileName);\n+        private Map<ExtensionURL, Class<?>> sortAllExtensionClass(Map<ExtensionURL, Class<?>> extensions) {\n+            Set<ExtensionURL> entrySet = extensions.keySet();\n+            List<ExtensionURL> list = new ArrayList<>(entrySet);\n+            Collections.sort(list, (url1, url2) -> {\n+                int o1 = url1.getOrder();\n+                int o2 = url2.getOrder();\n+                return Integer.compare(o1, o2);\n+            });\n+            LinkedHashMap<ExtensionURL, Class<?>> linkedHashMap = new LinkedHashMap<ExtensionURL, Class<?>>();\n+            for (ExtensionURL url : list) {\n+                linkedHashMap.put(url, extensions.get(url));\n+            }\n+            return linkedHashMap;\n         }\n \n-        if (urls != null) {\n-            while (urls.hasMoreElements()) {\n-                java.net.URL url = urls.nextElement();\n-                BufferedReader reader = null;\n-                try {\n-                    reader = new BufferedReader(new InputStreamReader(url.openStream(), Constants.DEFAULT_CHARSET));\n-                    String line = null;\n-                    while ((line = reader.readLine()) != null) {\n-                        final int ci = line.indexOf('#');\n-                        if (ci >= 0) {\n-                            line = line.substring(0, ci);\n-                        }\n-                        line = line.trim();\n-                        if (line.length() > 0) {\n-                            try {\n-                                extensions.add(Class.forName(line, true, classLoader));\n-                            } catch (LinkageError | ClassNotFoundException e) {\n-                                LOGGER.warn(\"load [{}] class fail. {}\", line, e.getMessage());\n+        @SuppressWarnings(\"rawtypes\")\n+        private void loadFile(String dir, ClassLoader classLoader, Map<ExtensionURL, Class<?>> extensions)\n+                throws IOException {\n+            String fileName = dir + type.getName();\n+            Enumeration<java.net.URL> urls;\n+            if (classLoader != null) {\n+                urls = classLoader.getResources(fileName);\n+            } else {\n+                urls = ClassLoader.getSystemResources(fileName);\n+            }\n+            if (urls != null) {\n+                while (urls.hasMoreElements()) {\n+                    java.net.URL url = urls.nextElement();\n+                    BufferedReader reader = null;\n+                    try {\n+                        reader = new BufferedReader(new InputStreamReader(url.openStream(), Constants.DEFAULT_CHARSET));\n+                        String line = null;\n+                        while ((line = reader.readLine()) != null) {\n+                            final int ci = line.indexOf('#');\n+                            if (ci >= 0) {\n+                                line = line.substring(0, ci);\n+                            }\n+                            line = line.trim();\n+                            if (line.length() > 0) {\n+                                try {\n+                                    Class<?> clazz = Class.forName(line, true, classLoader);\n+                                    ExtensionURL extensionUrl = getExtensionURL(clazz);\n+                                    extensions.put(extensionUrl, clazz);\n+                                } catch (LinkageError | ClassNotFoundException e) {\n+                                    LOGGER.warn(\"load [{}] class fail. {}\", line, e.getMessage());\n+                                }\n                             }\n                         }\n+                    } catch (Throwable e) {\n+                        LOGGER.warn(e.getMessage());\n+                    } finally {\n+                        IOUtil.close(reader);\n                     }\n-                } catch (Throwable e) {\n-                    LOGGER.warn(e.getMessage());\n-                } finally {\n-                    IOUtil.close(reader);\n                 }\n             }\n         }\n-    }\n \n-    /**\n-     * init instance\n-     *\n-     * @param <S>       the type parameter\n-     * @param service   the service\n-     * @param implClazz the impl clazz\n-     * @param argTypes  the arg types\n-     * @param args      the args\n-     * @return s s\n-     * @throws IllegalAccessException the illegal access exception\n-     * @throws InstantiationException the instantiation exception\n-     * @throws NoSuchMethodException the no such method exception\n-     * @throws InvocationTargetException the invocation target exception\n-     */\n-    protected static <S> S initInstance(Class<S> service, Class implClazz, Class[] argTypes, Object[] args)\n-        throws IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {\n-        S s = null;\n-        if (argTypes != null && args != null) {\n-            // Constructor with arguments\n-            Constructor<S> constructor = implClazz.getDeclaredConstructor(argTypes);\n-            s = service.cast(constructor.newInstance(args));\n-        } else {\n-            // default Constructor\n-            s = service.cast(implClazz.newInstance());\n+        private ExtensionURL getExtensionURL(Class<?> clazz) {\n+            String serviceName = null;\n+            String typeName = null;\n+            Integer priority = 0;\n+            Scope scope = Scope.SINGLETON;\n+            LoadLevel loadLevel = clazz.getAnnotation(LoadLevel.class);\n+            typeName = clazz.getTypeName();\n+            if (loadLevel != null) {\n+                serviceName = loadLevel.name();\n+                priority = loadLevel.order();\n+                scope = loadLevel.scope();\n+            }\n+            ExtensionURL result = new ExtensionURL(serviceName, typeName, priority, scope);\n+            //do cache\n+            extensionClassUrlMap.put(clazz, result);\n+            if (loadLevel != null) {\n+                if (extensionNameUrlsMap.containsKey(serviceName)) {\n+                    List<ExtensionURL> urls = extensionNameUrlsMap.get(serviceName);\n+                    urls.add(result);\n+                } else {\n+                    List<ExtensionURL> urls = new ArrayList<>();\n+                    urls.add(result);\n+                    extensionNameUrlsMap.put(serviceName, urls);\n+                }\n+            }\n+            if (priority >= highestLoadPriority) {\n+                //the highest priority based on the order param in LoadLevel,matches the current class's\n+                //defaultExtensionURL,so cached them together\n+                highestLoadPriority = priority;\n+                defaultExtensionURL = result;\n+                return defaultExtensionURL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2f3ed36f716d395e23818173d9e4aec4d9941ca"}, "originalPosition": 688}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NzMxNDU4", "url": "https://github.com/seata/seata/pull/2135#pullrequestreview-375731458", "createdAt": "2020-03-17T04:19:48Z", "commit": {"oid": "b2f3ed36f716d395e23818173d9e4aec4d9941ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNDoxOTo0OFrOF3NfzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNDoxOTo0OFrOF3NfzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQzNzEzMg==", "bodyText": "Should the if statement be if (serviceName != null), or other more suitable one?", "url": "https://github.com/seata/seata/pull/2135#discussion_r393437132", "createdAt": "2020-03-17T04:19:48Z", "author": {"login": "ggndnn"}, "path": "common/src/main/java/io/seata/common/loader/EnhancedServiceLoader.java", "diffHunk": "@@ -198,181 +177,463 @@\n      */\n     @SuppressWarnings(\"rawtypes\")\n     static <S> List<Class> getAllExtensionClass(Class<S> service, ClassLoader loader) {\n-        return findAllExtensionClass(service, null, loader);\n+        return InnerEnhancedServiceLoader.getServiceLoader(service).getAllExtensionClass(loader);\n     }\n \n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader) {\n-        return loadFile(service, activateName, loader, null, null);\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> S loadFile(Class<S> service, String activateName, ClassLoader loader, Class[] argTypes,\n-                                  Object[] args) {\n-        try {\n-            boolean foundFromCache = true;\n-            List<Class> extensions = providers.get(service);\n-            if (extensions == null) {\n-                synchronized (service) {\n-                    extensions = providers.get(service);\n-                    if (extensions == null) {\n-                        extensions = findAllExtensionClass(service, activateName, loader);\n-                        foundFromCache = false;\n-                        providers.put(service, extensions);\n-                    }\n+    static class InnerEnhancedServiceLoader<S> {\n+        private static final Logger LOGGER = LoggerFactory.getLogger(EnhancedServiceLoader.class);\n+        private static final String SERVICES_DIRECTORY = \"META-INF/services/\";\n+        private static final String SEATA_DIRECTORY = \"META-INF/seata/\";\n+\n+        private static final ConcurrentMap<Class<?>, InnerEnhancedServiceLoader<?>> SERVICE_LOADERS =\n+                new ConcurrentHashMap<>();\n+        private static final ConcurrentMap<Class<?>, Object> EXTENSION_INSTANCES = new ConcurrentHashMap<>();\n+\n+        private final Class<S> type;\n+        private final Holder<Map<ExtensionURL, Class<?>>> extensionClasses = new Holder<>();\n+        private final ConcurrentMap<ExtensionURL, Holder<Object>> extensionInstances = new ConcurrentHashMap<>();\n+        private final ConcurrentMap<String, List<ExtensionURL>> extensionNameUrlsMap = new ConcurrentHashMap<>();\n+        private final ConcurrentMap<Class<?>, ExtensionURL> extensionClassUrlMap = new ConcurrentHashMap<>();\n+        private ExtensionURL defaultExtensionURL = null;\n+        private Integer highestLoadPriority = Integer.MIN_VALUE;\n+\n+        private InnerEnhancedServiceLoader(Class<S> type) {\n+            this.type = type;\n+        }\n+\n+        /**\n+         * Get the ServiceLoader for the specified Class\n+         *\n+         * @param type the type of the extension point\n+         * @param <S>  the type\n+         * @return the service loader\n+         */\n+        static <S> InnerEnhancedServiceLoader<S> getServiceLoader(Class<S> type) {\n+            if (type == null) {\n+                throw new IllegalArgumentException(\"Enhanced Service type == null\");\n+            }\n+            InnerEnhancedServiceLoader<S> loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            if (loader == null) {\n+                SERVICE_LOADERS.putIfAbsent(type, new InnerEnhancedServiceLoader<S>(type));\n+                loader = (InnerEnhancedServiceLoader<S>)SERVICE_LOADERS.get(type);\n+            }\n+            return loader;\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param loader the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(ClassLoader loader) throws EnhancedServiceNotFoundException {\n+            return loadExtension(loader, null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load() throws EnhancedServiceNotFoundException {\n+            return loadExtension(findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * load service provider\n+         *\n+         * @param activateName the activate name\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(String activateName) throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), null, null);\n+        }\n+\n+        /**\n+         * Specify classLoader to load the service provider\n+         *\n+         * @param activateName the activate name\n+         * @param loader       the loader\n+         * @return s s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(String activateName, ClassLoader loader)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, loader, null, null);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(String activateName, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            Class[] argsType = null;\n+            if (args != null && args.length > 0) {\n+                argsType = new Class[args.length];\n+                for (int i = 0; i < args.length; i++) {\n+                    argsType[i] = args[i].getClass();\n                 }\n             }\n-            if (StringUtils.isNotEmpty(activateName)) {\n-                loadFile(service, SEATA_DIRECTORY + activateName.toLowerCase() + \"/\", loader, extensions);\n-\n-                List<Class> activateExtensions = new ArrayList<>();\n-                for (Class clz : extensions) {\n-                    @SuppressWarnings(\"unchecked\")\n-                    LoadLevel activate = (LoadLevel) clz.getAnnotation(LoadLevel.class);\n-                    if (activate != null && activateName.equalsIgnoreCase(activate.name())) {\n-                        activateExtensions.add(clz);\n-                    }\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * Load s.\n+         *\n+         * @param activateName the activate name\n+         * @param argsType     the args type\n+         * @param args         the args\n+         * @return the s\n+         * @throws EnhancedServiceNotFoundException the enhanced service not found exception\n+         */\n+        public S load(String activateName, Class[] argsType, Object[] args)\n+                throws EnhancedServiceNotFoundException {\n+            return loadExtension(activateName, findClassLoader(), argsType, args);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @return list list\n+         */\n+        public List<S> loadAll() {\n+            return loadAll(null, null);\n+        }\n+\n+        /**\n+         * get all implements\n+         *\n+         * @param argsType the args type\n+         * @param args     the args\n+         * @return list list\n+         */\n+        public List<S> loadAll(Class[] argsType, Object[] args) {\n+            List<S> allInstances = new ArrayList<>();\n+            List<Class> allClazzs = getAllExtensionClass();\n+            if (CollectionUtils.isEmpty(allClazzs)) {\n+                return allInstances;\n+            }\n+            try {\n+                for (Class clazz : allClazzs) {\n+                    ExtensionURL url = extensionClassUrlMap.get(clazz);\n+                    allInstances.add(getExtension(url, findClassLoader(), argsType, args));\n                 }\n+            } catch (Throwable t) {\n+                throw new EnhancedServiceNotFoundException(t);\n+            }\n+            return allInstances;\n+        }\n+\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        List<Class> getAllExtensionClass() {\n+            Map<ExtensionURL, Class<?>> map = loadAllExtensionClass(findClassLoader());\n+            List<Class> result = new ArrayList<>(map.values());\n+            return result;\n+        }\n+\n+        /**\n+         * Get all the extension classes, follow {@linkplain LoadLevel} defined and sort order\n+         *\n+         * @param loader the loader\n+         * @return all extension class\n+         */\n+        @SuppressWarnings(\"rawtypes\")\n+        List<Class> getAllExtensionClass(ClassLoader loader) {\n+            Map<ExtensionURL, Class<?>> map = loadAllExtensionClass(loader);\n+            List<Class> result = new ArrayList<>(map.values());\n+            return result;\n+        }\n \n-                extensions = activateExtensions;\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            try {\n+                loadAllExtensionClass(loader);\n+                return getExtension(defaultExtensionURL, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n+        }\n \n-            if (extensions.isEmpty()) {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \"[\" + activateName\n-                        + \"] and classloader : \" + ObjectUtils.toString(loader));\n+        @SuppressWarnings(\"rawtypes\")\n+        private S loadExtension(String activateName, ClassLoader loader, Class[] argTypes,\n+                                Object[] args) {\n+            if (io.seata.common.util.StringUtils.isEmpty(activateName)) {\n+                throw new IllegalArgumentException(\"the name of service provider for [\" + type.getName() + \"] name is null\");\n+            }\n+            try {\n+                loadAllExtensionClass(loader);\n+                ExtensionURL cachedExtensionURL = getCachedServiceURL(activateName);\n+                return getExtension(cachedExtensionURL, loader, argTypes, args);\n+            } catch (Throwable e) {\n+                if (e instanceof EnhancedServiceNotFoundException) {\n+                    throw (EnhancedServiceNotFoundException)e;\n+                } else {\n+                    throw new EnhancedServiceNotFoundException(\n+                            \"not found service provider for : \" + type.getName() + \" caused by \" + ExceptionUtils\n+                                    .getFullStackTrace(e));\n+                }\n             }\n-            Class<?> extension = extensions.get(extensions.size() - 1);\n-            S result = initInstance(service, extension, argTypes, args);\n-            if (!foundFromCache && LOGGER.isInfoEnabled()) {\n-                LOGGER.info(\"load \" + service.getSimpleName() + \"[\" + activateName + \"] extension by class[\" + extension\n-                    .getName() + \"]\");\n+        }\n+\n+        private S getExtension(ExtensionURL url, ClassLoader loader, Class[] argTypes,\n+                               Object[] args) {\n+            if (url == null) {\n+                throw new EnhancedServiceNotFoundException(\"service provider not found\");\n             }\n-            return result;\n-        } catch (Throwable e) {\n-            if (e instanceof EnhancedServiceNotFoundException) {\n-                throw (EnhancedServiceNotFoundException)e;\n+            if (Scope.SINGLETON.equals(url.getScope())) {\n+                Holder<Object> holder = extensionInstances.get(url);\n+                if (holder == null) {\n+                    extensionInstances.putIfAbsent(url, new Holder<>());\n+                    holder = extensionInstances.get(url);\n+                }\n+                Object instance = holder.get();\n+                if (instance == null) {\n+                    synchronized (holder) {\n+                        instance = holder.get();\n+                        if (instance == null) {\n+                            instance = createExtension(url, loader, argTypes, args);\n+                            holder.set(instance);\n+                        }\n+                    }\n+                }\n+                return (S)instance;\n             } else {\n-                throw new EnhancedServiceNotFoundException(\n-                    \"not found service provider for : \" + service.getName() + \" caused by \" + ExceptionUtils\n-                        .getFullStackTrace(e));\n+                return createNewExtension(url, loader, argTypes, args);\n             }\n         }\n-    }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static <S> List<Class> findAllExtensionClass(Class<S> service, String activateName, ClassLoader loader) {\n-        List<Class> extensions = new ArrayList<>();\n-        try {\n-            loadFile(service, SERVICES_DIRECTORY, loader, extensions);\n-            loadFile(service, SEATA_DIRECTORY, loader, extensions);\n-        } catch (IOException e) {\n-            throw new EnhancedServiceNotFoundException(e);\n+        private S createExtension(ExtensionURL url, ClassLoader loader, Class[] argTypes,\n+                                  Object[] args) {\n+            Class<?> clazz = loadAllExtensionClass(loader).get(url);\n+            if (clazz == null) {\n+                throw new EnhancedServiceNotFoundException(\"Not Found\");\n+            }\n+            try {\n+                S instance = (S)EXTENSION_INSTANCES.get(clazz);\n+                if (instance == null) {\n+                    S newInstance = initInstance(clazz, argTypes, args);\n+                    EXTENSION_INSTANCES.putIfAbsent(clazz, newInstance);\n+                    instance = newInstance;\n+                }\n+                return instance;\n+            } catch (Throwable t) {\n+                throw new IllegalStateException(\"Extension instance(url: \" + url + \", class: \" +\n+                        type + \")  could not be instantiated: \" + t.getMessage(), t);\n+            }\n         }\n \n-        if (extensions.isEmpty()) {\n-            return extensions;\n-        }\n-        extensions.sort((c1, c2) -> {\n-            int o1 = 0;\n-            int o2 = 0;\n-            @SuppressWarnings(\"unchecked\")\n-            LoadLevel a1 = (LoadLevel) c1.getAnnotation(LoadLevel.class);\n-            @SuppressWarnings(\"unchecked\")\n-            LoadLevel a2 = (LoadLevel) c2.getAnnotation(LoadLevel.class);\n-\n-            if (a1 != null) {\n-                o1 = a1.order();\n+        private S createNewExtension(ExtensionURL url, ClassLoader loader, Class[] argTypes, Object[] args) {\n+            Class<?> clazz = loadAllExtensionClass(loader).get(url);\n+            if (clazz == null) {\n+                throw new EnhancedServiceNotFoundException(\"Not Found\");\n+            }\n+            try {\n+                S newInstance = initInstance(clazz, argTypes, args);\n+                return newInstance;\n+            } catch (Throwable t) {\n+                throw new IllegalStateException(\"Extension instance(url: \" + url + \", class: \" +\n+                        type + \")  could not be instantiated: \" + t.getMessage(), t);\n             }\n+        }\n \n-            if (a2 != null) {\n-                o2 = a2.order();\n+        private Map<ExtensionURL, Class<?>> loadAllExtensionClass(ClassLoader loader) {\n+            Map<ExtensionURL, Class<?>> classes = extensionClasses.get();\n+            if (classes == null) {\n+                synchronized (extensionClasses) {\n+                    classes = extensionClasses.get();\n+                    if (classes == null) {\n+                        classes = findAllExtensionClass(loader);\n+                        extensionClasses.set(classes);\n+                    }\n+                }\n             }\n+            return classes;\n+        }\n \n-            return Integer.compare(o1, o2);\n+        @SuppressWarnings(\"rawtypes\")\n+        private Map<ExtensionURL, Class<?>> findAllExtensionClass(ClassLoader loader) {\n+            Map<ExtensionURL, Class<?>> extensions = new HashMap<>();\n+            try {\n+                loadFile(SERVICES_DIRECTORY, loader, extensions);\n+                loadFile(SEATA_DIRECTORY, loader, extensions);\n+            } catch (IOException e) {\n+                throw new EnhancedServiceNotFoundException(e);\n+            }\n \n-        });\n+            if (!extensions.isEmpty()) {\n+                extensions = sortAllExtensionClass(extensions);\n+            }\n \n-        return extensions;\n-    }\n+            if (!extensionNameUrlsMap.isEmpty()) {\n+                for (List<ExtensionURL> urlList : extensionNameUrlsMap.values()) {\n+                    Collections.sort(urlList, (url1, url2) -> {\n+                        int o1 = url1.getOrder();\n+                        int o2 = url2.getOrder();\n+                        return Integer.compare(o1, o2);\n+                    });\n+                }\n+            }\n+            return extensions;\n+        }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    private static void loadFile(Class<?> service, String dir, ClassLoader classLoader, List<Class> extensions)\n-        throws IOException {\n-        String fileName = dir + service.getName();\n-        Enumeration<URL> urls;\n-        if (classLoader != null) {\n-            urls = classLoader.getResources(fileName);\n-        } else {\n-            urls = ClassLoader.getSystemResources(fileName);\n+        private Map<ExtensionURL, Class<?>> sortAllExtensionClass(Map<ExtensionURL, Class<?>> extensions) {\n+            Set<ExtensionURL> entrySet = extensions.keySet();\n+            List<ExtensionURL> list = new ArrayList<>(entrySet);\n+            Collections.sort(list, (url1, url2) -> {\n+                int o1 = url1.getOrder();\n+                int o2 = url2.getOrder();\n+                return Integer.compare(o1, o2);\n+            });\n+            LinkedHashMap<ExtensionURL, Class<?>> linkedHashMap = new LinkedHashMap<ExtensionURL, Class<?>>();\n+            for (ExtensionURL url : list) {\n+                linkedHashMap.put(url, extensions.get(url));\n+            }\n+            return linkedHashMap;\n         }\n \n-        if (urls != null) {\n-            while (urls.hasMoreElements()) {\n-                java.net.URL url = urls.nextElement();\n-                BufferedReader reader = null;\n-                try {\n-                    reader = new BufferedReader(new InputStreamReader(url.openStream(), Constants.DEFAULT_CHARSET));\n-                    String line = null;\n-                    while ((line = reader.readLine()) != null) {\n-                        final int ci = line.indexOf('#');\n-                        if (ci >= 0) {\n-                            line = line.substring(0, ci);\n-                        }\n-                        line = line.trim();\n-                        if (line.length() > 0) {\n-                            try {\n-                                extensions.add(Class.forName(line, true, classLoader));\n-                            } catch (LinkageError | ClassNotFoundException e) {\n-                                LOGGER.warn(\"load [{}] class fail. {}\", line, e.getMessage());\n+        @SuppressWarnings(\"rawtypes\")\n+        private void loadFile(String dir, ClassLoader classLoader, Map<ExtensionURL, Class<?>> extensions)\n+                throws IOException {\n+            String fileName = dir + type.getName();\n+            Enumeration<java.net.URL> urls;\n+            if (classLoader != null) {\n+                urls = classLoader.getResources(fileName);\n+            } else {\n+                urls = ClassLoader.getSystemResources(fileName);\n+            }\n+            if (urls != null) {\n+                while (urls.hasMoreElements()) {\n+                    java.net.URL url = urls.nextElement();\n+                    BufferedReader reader = null;\n+                    try {\n+                        reader = new BufferedReader(new InputStreamReader(url.openStream(), Constants.DEFAULT_CHARSET));\n+                        String line = null;\n+                        while ((line = reader.readLine()) != null) {\n+                            final int ci = line.indexOf('#');\n+                            if (ci >= 0) {\n+                                line = line.substring(0, ci);\n+                            }\n+                            line = line.trim();\n+                            if (line.length() > 0) {\n+                                try {\n+                                    Class<?> clazz = Class.forName(line, true, classLoader);\n+                                    ExtensionURL extensionUrl = getExtensionURL(clazz);\n+                                    extensions.put(extensionUrl, clazz);\n+                                } catch (LinkageError | ClassNotFoundException e) {\n+                                    LOGGER.warn(\"load [{}] class fail. {}\", line, e.getMessage());\n+                                }\n                             }\n                         }\n+                    } catch (Throwable e) {\n+                        LOGGER.warn(e.getMessage());\n+                    } finally {\n+                        IOUtil.close(reader);\n                     }\n-                } catch (Throwable e) {\n-                    LOGGER.warn(e.getMessage());\n-                } finally {\n-                    IOUtil.close(reader);\n                 }\n             }\n         }\n-    }\n \n-    /**\n-     * init instance\n-     *\n-     * @param <S>       the type parameter\n-     * @param service   the service\n-     * @param implClazz the impl clazz\n-     * @param argTypes  the arg types\n-     * @param args      the args\n-     * @return s s\n-     * @throws IllegalAccessException the illegal access exception\n-     * @throws InstantiationException the instantiation exception\n-     * @throws NoSuchMethodException the no such method exception\n-     * @throws InvocationTargetException the invocation target exception\n-     */\n-    protected static <S> S initInstance(Class<S> service, Class implClazz, Class[] argTypes, Object[] args)\n-        throws IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {\n-        S s = null;\n-        if (argTypes != null && args != null) {\n-            // Constructor with arguments\n-            Constructor<S> constructor = implClazz.getDeclaredConstructor(argTypes);\n-            s = service.cast(constructor.newInstance(args));\n-        } else {\n-            // default Constructor\n-            s = service.cast(implClazz.newInstance());\n+        private ExtensionURL getExtensionURL(Class<?> clazz) {\n+            String serviceName = null;\n+            String typeName = null;\n+            Integer priority = 0;\n+            Scope scope = Scope.SINGLETON;\n+            LoadLevel loadLevel = clazz.getAnnotation(LoadLevel.class);\n+            typeName = clazz.getTypeName();\n+            if (loadLevel != null) {\n+                serviceName = loadLevel.name();\n+                priority = loadLevel.order();\n+                scope = loadLevel.scope();\n+            }\n+            ExtensionURL result = new ExtensionURL(serviceName, typeName, priority, scope);\n+            //do cache\n+            extensionClassUrlMap.put(clazz, result);\n+            if (loadLevel != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2f3ed36f716d395e23818173d9e4aec4d9941ca"}, "originalPosition": 673}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4116, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}