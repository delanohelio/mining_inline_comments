{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNDY4NTEx", "number": 3172, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwOTo1ODoxM1rOEr-6Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMDoyNDozNVrOFAJY3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTU0ODg3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/seata/common/util/SizeUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwOTo1ODoxM1rOHfDOLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMjozMTozNlrOHfchBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMyMDY4NQ==", "bodyText": "why is 1024 not a constant", "url": "https://github.com/seata/seata/pull/3172#discussion_r502320685", "createdAt": "2020-10-09T09:58:13Z", "author": {"login": "a364176773"}, "path": "common/src/main/java/io/seata/common/util/SizeUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.common.util;\n+\n+/**\n+ * @author chd\n+ */\n+public class SizeUtil {\n+    /**\n+     * case size to byte length\n+     * example:\n+     *   2k => 2 * 1024\n+     *   2m => 2 * 1024 * 1024\n+     *   2g => 2 * 1024 * 1024 * 1024\n+     *   2t => 2 * 1024 * 1024 * 1024 * 1024\n+     * @param size the string size with unit\n+     * @return the byte length\n+     */\n+    public static long size2Long(String size) {\n+        if (null == size || size.length() <= 1) {\n+            throw new IllegalArgumentException(\"could not convert '\" + size + \"' to byte length\");\n+        }\n+\n+        String size2Lower = size.toLowerCase();\n+        char unit = size2Lower.charAt(size.length() - 1);\n+        long number;\n+        try {\n+            number = NumberUtils.toLong(size2Lower.substring(0, size.length() - 1));\n+        } catch (NumberFormatException | NullPointerException ex) {\n+            throw new IllegalArgumentException(\"could not convert '\" + size + \"' to byte length\");\n+        }\n+\n+        switch (unit) {\n+            case 'k':\n+                return number * 1024;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15b3f19ec7f070f0436989f8ba8602a18b46fee0"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczNTExMA==", "bodyText": "done", "url": "https://github.com/seata/seata/pull/3172#discussion_r502735110", "createdAt": "2020-10-10T02:31:36Z", "author": {"login": "caohdgege"}, "path": "common/src/main/java/io/seata/common/util/SizeUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.common.util;\n+\n+/**\n+ * @author chd\n+ */\n+public class SizeUtil {\n+    /**\n+     * case size to byte length\n+     * example:\n+     *   2k => 2 * 1024\n+     *   2m => 2 * 1024 * 1024\n+     *   2g => 2 * 1024 * 1024 * 1024\n+     *   2t => 2 * 1024 * 1024 * 1024 * 1024\n+     * @param size the string size with unit\n+     * @return the byte length\n+     */\n+    public static long size2Long(String size) {\n+        if (null == size || size.length() <= 1) {\n+            throw new IllegalArgumentException(\"could not convert '\" + size + \"' to byte length\");\n+        }\n+\n+        String size2Lower = size.toLowerCase();\n+        char unit = size2Lower.charAt(size.length() - 1);\n+        long number;\n+        try {\n+            number = NumberUtils.toLong(size2Lower.substring(0, size.length() - 1));\n+        } catch (NumberFormatException | NullPointerException ex) {\n+            throw new IllegalArgumentException(\"could not convert '\" + size + \"' to byte length\");\n+        }\n+\n+        switch (unit) {\n+            case 'k':\n+                return number * 1024;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMyMDY4NQ=="}, "originalCommit": {"oid": "15b3f19ec7f070f0436989f8ba8602a18b46fee0"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODE5MjkyOnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/oracle/OracleUndoLogManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMTozNToxNFrOHfcJUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMTozNToxNFrOHfcJUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyOTA0Mw==", "bodyText": "Why not reduce the number of duplicate lines of code by putting decompression into AbstractUndoLogManager?", "url": "https://github.com/seata/seata/pull/3172#discussion_r502729043", "createdAt": "2020-10-10T01:35:14Z", "author": {"login": "a364176773"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/oracle/OracleUndoLogManager.java", "diffHunk": "@@ -67,34 +73,37 @@ public int deleteUndoLogByLogCreated(Date logCreated, int limitRows, Connection\n     }\n \n     @Override\n-    protected void insertUndoLogWithNormal(String xid, long branchId, String rollbackCtx,\n-                                                byte[] undoLogContent, Connection conn) throws SQLException {\n-        insertUndoLog(xid, branchId,rollbackCtx, undoLogContent, State.Normal, conn);\n+    protected void insertUndoLogWithNormal(String xid, long branchId, String rollbackCtx, byte[] undoLogContent,\n+                                           CompressorType compressType, Connection conn) throws SQLException {\n+        insertUndoLog(xid, branchId,rollbackCtx, undoLogContent, compressType, State.Normal, conn);\n     }\n \n     @Override\n     protected byte[] getRollbackInfo(ResultSet rs) throws SQLException {\n         Blob b = rs.getBlob(ClientTableColumnsName.UNDO_LOG_ROLLBACK_INFO);\n         byte[] rollbackInfo = BlobUtils.blob2Bytes(b);\n-        return rollbackInfo;\n+        CompressorType compressType = CompressorType.getByCode(rs.getInt(ClientTableColumnsName.UNDO_LOG_COMPRESS_TYPE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15b3f19ec7f070f0436989f8ba8602a18b46fee0"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODE5Nzg3OnYy", "diffSide": "RIGHT", "path": "server/src/main/resources/file.conf.example", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMTo0MDo0MlrOHfcLyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMTo0MDo0MlrOHfcLyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyOTY3NQ==", "bodyText": "\u5e94\u8be5\u8865\u5145\u5230script\u6587\u4ef6\u5939\u4e0b\u7684client\u4e2d\u7684conf\u91cc\u7684file.conf\u6587\u4ef6", "url": "https://github.com/seata/seata/pull/3172#discussion_r502729675", "createdAt": "2020-10-10T01:40:42Z", "author": {"login": "a364176773"}, "path": "server/src/main/resources/file.conf.example", "diffHunk": "@@ -83,6 +83,14 @@ server {\n     logSaveDays = 7\n     #schedule delete expired undo_log in milliseconds\n     logDeletePeriod = 86400000\n+    compress {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15b3f19ec7f070f0436989f8ba8602a18b46fee0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODIxNDI5OnYy", "diffSide": "RIGHT", "path": "server/src/main/resources/file.conf.example", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMTo1OTowNlrOHfcUJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMTo1OTowNlrOHfcUJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczMTgxMg==", "bodyText": "// -> #", "url": "https://github.com/seata/seata/pull/3172#discussion_r502731812", "createdAt": "2020-10-10T01:59:06Z", "author": {"login": "wangliang181230"}, "path": "server/src/main/resources/file.conf.example", "diffHunk": "@@ -83,6 +83,14 @@ server {\n     logSaveDays = 7\n     #schedule delete expired undo_log in milliseconds\n     logDeletePeriod = 86400000\n+    compress {\n+      enable = true\n+      // allow zip, gzip, 7z, lz4, bzip2, default is zip", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15b3f19ec7f070f0436989f8ba8602a18b46fee0"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODIxNjY4OnYy", "diffSide": "RIGHT", "path": "seata-spring-boot-starter/src/main/resources/META-INF/additional-spring-configuration-metadata.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMjowMTo0M1rOHfcVUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMjozMToxM1rOHfcg5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczMjExNQ==", "bodyText": "Please add optional values for this configuration in hints below. like seata.transport.compressor", "url": "https://github.com/seata/seata/pull/3172#discussion_r502732115", "createdAt": "2020-10-10T02:01:43Z", "author": {"login": "wangliang181230"}, "path": "seata-spring-boot-starter/src/main/resources/META-INF/additional-spring-configuration-metadata.json", "diffHunk": "@@ -150,6 +150,24 @@\n       \"sourceType\": \"io.seata.spring.boot.autoconfigure.properties.client.UndoProperties\",\n       \"defaultValue\": true\n     },\n+    {\n+      \"name\": \"seata.client.undo.compress.enable\",\n+      \"type\": \"java.lang.Boolean\",\n+      \"sourceType\": \"io.seata.spring.boot.autoconfigure.properties.client.UndoCompressProperties\",\n+      \"defaultValue\": true\n+    },\n+    {\n+      \"name\": \"seata.client.undo.compress.type\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15b3f19ec7f070f0436989f8ba8602a18b46fee0"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczNTA3OA==", "bodyText": "done", "url": "https://github.com/seata/seata/pull/3172#discussion_r502735078", "createdAt": "2020-10-10T02:31:13Z", "author": {"login": "caohdgege"}, "path": "seata-spring-boot-starter/src/main/resources/META-INF/additional-spring-configuration-metadata.json", "diffHunk": "@@ -150,6 +150,24 @@\n       \"sourceType\": \"io.seata.spring.boot.autoconfigure.properties.client.UndoProperties\",\n       \"defaultValue\": true\n     },\n+    {\n+      \"name\": \"seata.client.undo.compress.enable\",\n+      \"type\": \"java.lang.Boolean\",\n+      \"sourceType\": \"io.seata.spring.boot.autoconfigure.properties.client.UndoCompressProperties\",\n+      \"defaultValue\": true\n+    },\n+    {\n+      \"name\": \"seata.client.undo.compress.type\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczMjExNQ=="}, "originalCommit": {"oid": "15b3f19ec7f070f0436989f8ba8602a18b46fee0"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDU2NTE5OnYy", "diffSide": "RIGHT", "path": "script/client/at/db/mysql.sql", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwMzozNjo1N1rOHfuCIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwMzozNjo1N1rOHfuCIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAyMjExMw==", "bodyText": "compress_type should be placed in context field.", "url": "https://github.com/seata/seata/pull/3172#discussion_r503022113", "createdAt": "2020-10-12T03:36:57Z", "author": {"login": "jsbxyyx"}, "path": "script/client/at/db/mysql.sql", "diffHunk": "@@ -5,6 +5,7 @@ CREATE TABLE IF NOT EXISTS `undo_log`\n     `xid`           VARCHAR(100) NOT NULL COMMENT 'global transaction id',\n     `context`       VARCHAR(128) NOT NULL COMMENT 'undo_log context,such as serialization',\n     `rollback_info` LONGBLOB     NOT NULL COMMENT 'rollback info',\n+    `compress_type` TINYINT      NOT NULL COMMENT 'compress type',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd61b8c2e7cfb16d7c61307d7fac06612008131"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDU3NTkxOnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoLogManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwMzo0NToxMFrOHfuINg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo0OTo0NlrOHgnwiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAyMzY3MA==", "bodyText": "rollbackInfo needs to determine whether to decompress according to the compression type value in the context.", "url": "https://github.com/seata/seata/pull/3172#discussion_r503023670", "createdAt": "2020-10-12T03:45:10Z", "author": {"login": "jsbxyyx"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoLogManager.java", "diffHunk": "@@ -392,5 +414,18 @@ protected abstract void insertUndoLogWithNormal(String xid, long branchId, Strin\n      * @return\n      * @throws SQLException\n      */\n-    protected abstract byte[] getRollbackInfo(ResultSet rs) throws SQLException;\n+    protected byte[] getRollbackInfo(ResultSet rs) throws SQLException  {\n+        byte[] rollbackInfo = rs.getBytes(ClientTableColumnsName.UNDO_LOG_ROLLBACK_INFO);\n+        CompressorType compressType = CompressorType.getByCode(rs.getInt(ClientTableColumnsName.UNDO_LOG_COMPRESS_TYPE));\n+        return CompressorFactory.getCompressor(compressType.getCode()).decompress(rollbackInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd61b8c2e7cfb16d7c61307d7fac06612008131"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2Nzg4MQ==", "bodyText": "ok, move to context", "url": "https://github.com/seata/seata/pull/3172#discussion_r503967881", "createdAt": "2020-10-13T13:49:46Z", "author": {"login": "caohdgege"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoLogManager.java", "diffHunk": "@@ -392,5 +414,18 @@ protected abstract void insertUndoLogWithNormal(String xid, long branchId, Strin\n      * @return\n      * @throws SQLException\n      */\n-    protected abstract byte[] getRollbackInfo(ResultSet rs) throws SQLException;\n+    protected byte[] getRollbackInfo(ResultSet rs) throws SQLException  {\n+        byte[] rollbackInfo = rs.getBytes(ClientTableColumnsName.UNDO_LOG_ROLLBACK_INFO);\n+        CompressorType compressType = CompressorType.getByCode(rs.getInt(ClientTableColumnsName.UNDO_LOG_COMPRESS_TYPE));\n+        return CompressorFactory.getCompressor(compressType.getCode()).decompress(rollbackInfo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAyMzY3MA=="}, "originalCommit": {"oid": "efd61b8c2e7cfb16d7c61307d7fac06612008131"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDU3OTI0OnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoLogManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwMzo0NzozMFrOHfuKJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwMzo0NzozMFrOHfuKJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAyNDE2NA==", "bodyText": "compressorType placed in context.", "url": "https://github.com/seata/seata/pull/3172#discussion_r503024164", "createdAt": "2020-10-12T03:47:30Z", "author": {"login": "jsbxyyx"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoLogManager.java", "diffHunk": "@@ -213,11 +228,17 @@ public void flushUndoLogs(ConnectionProxy cp) throws SQLException {\n         UndoLogParser parser = UndoLogParserFactory.getInstance();\n         byte[] undoLogContent = parser.encode(branchUndoLog);\n \n+        CompressorType compressorType = CompressorType.NONE;\n+        if (needCompress(undoLogContent)) {\n+            compressorType = ROLLBACK_INFO_COMPRESS_TYPE;\n+            undoLogContent = CompressorFactory.getCompressor(compressorType.getCode()).compress(undoLogContent);\n+        }\n+\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"Flushing UNDO LOG: {}\", new String(undoLogContent, Constants.DEFAULT_CHARSET));\n         }\n \n-        insertUndoLogWithNormal(xid, branchId, buildContext(parser.getName()), undoLogContent,\n+        insertUndoLogWithNormal(xid, branchId, buildContext(parser.getName()), undoLogContent, compressorType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efd61b8c2e7cfb16d7c61307d7fac06612008131"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTgwNjA5OnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoLogManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNjo1OTo0MFrOHhE3Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzowOToyNVrOHhFI1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0NDczNQ==", "bodyText": "old version upgrade new version. compressorType may be not exists in database. need to consider?", "url": "https://github.com/seata/seata/pull/3172#discussion_r504444735", "createdAt": "2020-10-14T06:59:40Z", "author": {"login": "jsbxyyx"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoLogManager.java", "diffHunk": "@@ -392,5 +413,22 @@ protected abstract void insertUndoLogWithNormal(String xid, long branchId, Strin\n      * @return\n      * @throws SQLException\n      */\n-    protected abstract byte[] getRollbackInfo(ResultSet rs) throws SQLException;\n+    protected byte[] getRollbackInfo(ResultSet rs) throws SQLException  {\n+        byte[] rollbackInfo = rs.getBytes(ClientTableColumnsName.UNDO_LOG_ROLLBACK_INFO);\n+\n+        String rollbackInfoContext = rs.getString(ClientTableColumnsName.UNDO_LOG_CONTEXT);\n+        Map<String, String> context = CollectionUtils.decodeMap(rollbackInfoContext);\n+        CompressorType compressorType = CompressorType.getByName(context.get(UndoLogConstants.COMPRESSOR_TYPE_KEY));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c37012d52e2bd12b35754d670b5096ad455c2508"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0OTIzNw==", "bodyText": "use Map#getOrDefault to compatible history data", "url": "https://github.com/seata/seata/pull/3172#discussion_r504449237", "createdAt": "2020-10-14T07:09:25Z", "author": {"login": "caohdgege"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoLogManager.java", "diffHunk": "@@ -392,5 +413,22 @@ protected abstract void insertUndoLogWithNormal(String xid, long branchId, Strin\n      * @return\n      * @throws SQLException\n      */\n-    protected abstract byte[] getRollbackInfo(ResultSet rs) throws SQLException;\n+    protected byte[] getRollbackInfo(ResultSet rs) throws SQLException  {\n+        byte[] rollbackInfo = rs.getBytes(ClientTableColumnsName.UNDO_LOG_ROLLBACK_INFO);\n+\n+        String rollbackInfoContext = rs.getString(ClientTableColumnsName.UNDO_LOG_CONTEXT);\n+        Map<String, String> context = CollectionUtils.decodeMap(rollbackInfoContext);\n+        CompressorType compressorType = CompressorType.getByName(context.get(UndoLogConstants.COMPRESSOR_TYPE_KEY));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0NDczNQ=="}, "originalCommit": {"oid": "c37012d52e2bd12b35754d670b5096ad455c2508"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjgwODgxOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/seata/common/util/SizeUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDoyOTo1N1rOHrJNYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwODowMzoyMVrOHrlzCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAwMTY5OA==", "bodyText": "is the size need wrapped with '?", "url": "https://github.com/seata/seata/pull/3172#discussion_r515001698", "createdAt": "2020-10-30T10:29:57Z", "author": {"login": "mzzw"}, "path": "common/src/main/java/io/seata/common/util/SizeUtil.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.common.util;\n+\n+/**\n+ * @author chd\n+ */\n+public class SizeUtil {\n+    private static final long RADIX = 1024;\n+    /**\n+     * case size to byte length\n+     * example:\n+     *   2k => 2 * 1024\n+     *   2m => 2 * 1024 * 1024\n+     *   2g => 2 * 1024 * 1024 * 1024\n+     *   2t => 2 * 1024 * 1024 * 1024 * 1024\n+     * @param size the string size with unit\n+     * @return the byte length\n+     */\n+    public static long size2Long(String size) {\n+        if (null == size || size.length() <= 1) {\n+            throw new IllegalArgumentException(\"could not convert '\" + size + \"' to byte length\");\n+        }\n+\n+        String size2Lower = size.toLowerCase();\n+        char unit = size2Lower.charAt(size.length() - 1);\n+        long number;\n+        try {\n+            number = NumberUtils.toLong(size2Lower.substring(0, size.length() - 1));\n+        } catch (NumberFormatException | NullPointerException ex) {\n+            throw new IllegalArgumentException(\"could not convert '\" + size + \"' to byte length\");\n+        }\n+\n+        switch (unit) {\n+            case 'k':\n+                return number * RADIX;\n+            case 'm':\n+                return number * RADIX * RADIX;\n+            case 'g':\n+                return number * RADIX * RADIX * RADIX;\n+            case 't':\n+                return number * RADIX * RADIX * RADIX * RADIX;\n+            default:\n+                throw new IllegalArgumentException(\"could not convert \" + size + \" to byte length\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3efc32e639a60e058be494cdf9b1970ad97d5ca"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3MDA5MA==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/3172#discussion_r515470090", "createdAt": "2020-10-31T08:03:21Z", "author": {"login": "caohdgege"}, "path": "common/src/main/java/io/seata/common/util/SizeUtil.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.common.util;\n+\n+/**\n+ * @author chd\n+ */\n+public class SizeUtil {\n+    private static final long RADIX = 1024;\n+    /**\n+     * case size to byte length\n+     * example:\n+     *   2k => 2 * 1024\n+     *   2m => 2 * 1024 * 1024\n+     *   2g => 2 * 1024 * 1024 * 1024\n+     *   2t => 2 * 1024 * 1024 * 1024 * 1024\n+     * @param size the string size with unit\n+     * @return the byte length\n+     */\n+    public static long size2Long(String size) {\n+        if (null == size || size.length() <= 1) {\n+            throw new IllegalArgumentException(\"could not convert '\" + size + \"' to byte length\");\n+        }\n+\n+        String size2Lower = size.toLowerCase();\n+        char unit = size2Lower.charAt(size.length() - 1);\n+        long number;\n+        try {\n+            number = NumberUtils.toLong(size2Lower.substring(0, size.length() - 1));\n+        } catch (NumberFormatException | NullPointerException ex) {\n+            throw new IllegalArgumentException(\"could not convert '\" + size + \"' to byte length\");\n+        }\n+\n+        switch (unit) {\n+            case 'k':\n+                return number * RADIX;\n+            case 'm':\n+                return number * RADIX * RADIX;\n+            case 'g':\n+                return number * RADIX * RADIX * RADIX;\n+            case 't':\n+                return number * RADIX * RADIX * RADIX * RADIX;\n+            default:\n+                throw new IllegalArgumentException(\"could not convert \" + size + \" to byte length\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAwMTY5OA=="}, "originalCommit": {"oid": "d3efc32e639a60e058be494cdf9b1970ad97d5ca"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1Njk4MTQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/constants/ClientTableColumnsName.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMDoyNDozNVrOH-RwbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMDoyOToxOFrOH-SFWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA2NDY4NQ==", "bodyText": "why add id?", "url": "https://github.com/seata/seata/pull/3172#discussion_r535064685", "createdAt": "2020-12-03T10:24:35Z", "author": {"login": "jsbxyyx"}, "path": "core/src/main/java/io/seata/core/constants/ClientTableColumnsName.java", "diffHunk": "@@ -22,6 +22,12 @@\n  */\n public interface ClientTableColumnsName {\n \n+    /**\n+     * The constant undo_log column name xid\n+     * this field is not use in mysql\n+     */\n+    String UNDO_LOG_ID = \"id\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c76259111540faf0fa1e365488290cbaa496c670"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA3MDA0Mw==", "bodyText": "\u4e3a\u4e86\u8ba9 OracleUndoLogManager\u548cPostgresUndoLogManager \u91cc\u9762\u7684SQL\u4e0d\u7528hard code", "url": "https://github.com/seata/seata/pull/3172#discussion_r535070043", "createdAt": "2020-12-03T10:29:18Z", "author": {"login": "caohdgege"}, "path": "core/src/main/java/io/seata/core/constants/ClientTableColumnsName.java", "diffHunk": "@@ -22,6 +22,12 @@\n  */\n public interface ClientTableColumnsName {\n \n+    /**\n+     * The constant undo_log column name xid\n+     * this field is not use in mysql\n+     */\n+    String UNDO_LOG_ID = \"id\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTA2NDY4NQ=="}, "originalCommit": {"oid": "c76259111540faf0fa1e365488290cbaa496c670"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1447, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}