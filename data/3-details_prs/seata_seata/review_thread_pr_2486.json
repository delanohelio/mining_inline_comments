{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NzM0Mjkw", "number": 2486, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDowMzozNlrOD-iwgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxMTozMjowMVrOEDOr5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTA3Nzc5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/seata/server/coordinator/DefaultCore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDowMzozNlrOGYtSEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwOToyMDo1NFrOGZts5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU2MDkxMg==", "bodyText": "What is this.", "url": "https://github.com/seata/seata/pull/2486#discussion_r428560912", "createdAt": "2020-05-21T10:03:36Z", "author": {"login": "l81893521"}, "path": "server/src/main/java/io/seata/server/coordinator/DefaultCore.java", "diffHunk": "@@ -83,7 +83,7 @@ public AbstractCore getCore(BranchType branchType) {\n \n     /**\n      * only for mock\n-     *\n+     *\u00b7", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b8cd3c20d21dc6fe84374830e4fed91cabaaf77"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYxNjM1Nw==", "bodyText": "Done.", "url": "https://github.com/seata/seata/pull/2486#discussion_r429616357", "createdAt": "2020-05-24T09:20:54Z", "author": {"login": "objcoding"}, "path": "server/src/main/java/io/seata/server/coordinator/DefaultCore.java", "diffHunk": "@@ -83,7 +83,7 @@ public AbstractCore getCore(BranchType branchType) {\n \n     /**\n      * only for mock\n-     *\n+     *\u00b7", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU2MDkxMg=="}, "originalCommit": {"oid": "0b8cd3c20d21dc6fe84374830e4fed91cabaaf77"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTEwNTQ0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/rpc/netty/RpcServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDoxMzozOFrOGYtjFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwOToyMzozNlrOGZtt3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU2NTI3MQ==", "bodyText": "You can put the registerProcessor() to parent, and use super.registerProcessor(), just look like the #2477", "url": "https://github.com/seata/seata/pull/2486#discussion_r428565271", "createdAt": "2020-05-21T10:13:38Z", "author": {"login": "l81893521"}, "path": "core/src/main/java/io/seata/core/rpc/netty/RpcServer.java", "diffHunk": "@@ -167,13 +172,48 @@ public Object sendSyncRequest(String resourceId, String clientId, Object message\n     /**\n      * Send request with response object.\n      *\n-     * @param channel   the channel\n-     * @param message    the msg\n+     * @param channel the channel\n+     * @param message the msg\n      * @return the object\n      * @throws TimeoutException the timeout exception\n      */\n     @Override\n     public Object sendASyncRequest(Channel channel, Object message) throws TimeoutException {\n         return sendAsyncRequestWithoutResponse(channel, message);\n     }\n+\n+    @Override\n+    public void registerProcessor(int messageType, RemotingProcessor processor, ExecutorService executor) {\n+        Pair<RemotingProcessor, ExecutorService> pair = new Pair<>(processor, executor);\n+        this.processorTable.put(messageType, pair);\n+    }\n+\n+    private void registerProcessor() {\n+        // 1. registry on request message processor\n+        ServerOnRequestProcessor onRequestProcessor =\n+            new ServerOnRequestProcessor(this, getTransactionMessageHandler());\n+        registerProcessor(MessageType.TYPE_BRANCH_REGISTER, onRequestProcessor, messageExecutor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b8cd3c20d21dc6fe84374830e4fed91cabaaf77"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYxNjYwNw==", "bodyText": "Done.", "url": "https://github.com/seata/seata/pull/2486#discussion_r429616607", "createdAt": "2020-05-24T09:23:36Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/rpc/netty/RpcServer.java", "diffHunk": "@@ -167,13 +172,48 @@ public Object sendSyncRequest(String resourceId, String clientId, Object message\n     /**\n      * Send request with response object.\n      *\n-     * @param channel   the channel\n-     * @param message    the msg\n+     * @param channel the channel\n+     * @param message the msg\n      * @return the object\n      * @throws TimeoutException the timeout exception\n      */\n     @Override\n     public Object sendASyncRequest(Channel channel, Object message) throws TimeoutException {\n         return sendAsyncRequestWithoutResponse(channel, message);\n     }\n+\n+    @Override\n+    public void registerProcessor(int messageType, RemotingProcessor processor, ExecutorService executor) {\n+        Pair<RemotingProcessor, ExecutorService> pair = new Pair<>(processor, executor);\n+        this.processorTable.put(messageType, pair);\n+    }\n+\n+    private void registerProcessor() {\n+        // 1. registry on request message processor\n+        ServerOnRequestProcessor onRequestProcessor =\n+            new ServerOnRequestProcessor(this, getTransactionMessageHandler());\n+        registerProcessor(MessageType.TYPE_BRANCH_REGISTER, onRequestProcessor, messageExecutor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU2NTI3MQ=="}, "originalCommit": {"oid": "0b8cd3c20d21dc6fe84374830e4fed91cabaaf77"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTExNDA1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/rpc/processor/README.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDoxNjozOFrOGYtokA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNzoxODowMVrOGiRX9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU2NjY3Mg==", "bodyText": "Please check this @slievrly , is appropriate put the document here?", "url": "https://github.com/seata/seata/pull/2486#discussion_r428566672", "createdAt": "2020-05-21T10:16:38Z", "author": {"login": "l81893521"}, "path": "core/src/main/java/io/seata/core/rpc/processor/README.md", "diffHunk": "@@ -0,0 +1,80 @@\n+## request", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b8cd3c20d21dc6fe84374830e4fed91cabaaf77"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MzE3NQ==", "bodyText": "I think it would be better to put it at the top of core module.", "url": "https://github.com/seata/seata/pull/2486#discussion_r436343175", "createdAt": "2020-06-07T09:23:07Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/rpc/processor/README.md", "diffHunk": "@@ -0,0 +1,80 @@\n+## request", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU2NjY3Mg=="}, "originalCommit": {"oid": "0b8cd3c20d21dc6fe84374830e4fed91cabaaf77"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU4OTQyOQ==", "bodyText": "Done.", "url": "https://github.com/seata/seata/pull/2486#discussion_r438589429", "createdAt": "2020-06-11T07:18:01Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/rpc/processor/README.md", "diffHunk": "@@ -0,0 +1,80 @@\n+## request", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU2NjY3Mg=="}, "originalCommit": {"oid": "0b8cd3c20d21dc6fe84374830e4fed91cabaaf77"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTIyMzM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/rpc/processor/server/ServerOnResponseProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDo1ODo0N1rOGYuscA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMjo1NzozMFrOGaATGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4NDA0OA==", "bodyText": "The logic in here may has some problem. The original logic no matter MergedWarpMessage or AbstractResultMessage or AbstractMessage, the all have log. but now no log here.", "url": "https://github.com/seata/seata/pull/2486#discussion_r428584048", "createdAt": "2020-05-21T10:58:47Z", "author": {"login": "l81893521"}, "path": "core/src/main/java/io/seata/core/rpc/processor/server/ServerOnResponseProcessor.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.processor.server;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.core.protocol.AbstractResultMessage;\n+import io.seata.core.protocol.MergeResultMessage;\n+import io.seata.core.protocol.MessageFuture;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchCommitResponse;\n+import io.seata.core.protocol.transaction.BranchRollbackResponse;\n+import io.seata.core.rpc.ChannelManager;\n+import io.seata.core.rpc.RpcContext;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.processor.RemotingProcessor;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * handle RM/TM response message.\n+ * <p>\n+ * message type:\n+ * RM:\n+ * 1) {@link BranchCommitResponse}\n+ * 2) {@link BranchRollbackResponse}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.3.0\n+ */\n+public class ServerOnResponseProcessor implements RemotingProcessor {\n+\n+    private TransactionMessageHandler transactionMessageHandler;\n+\n+    private ConcurrentHashMap<Integer, MessageFuture> futures;\n+\n+    public ServerOnResponseProcessor(TransactionMessageHandler transactionMessageHandler,\n+                                     ConcurrentHashMap<Integer, MessageFuture> futures) {\n+        this.transactionMessageHandler = transactionMessageHandler;\n+        this.futures = futures;\n+    }\n+\n+    @Override\n+    public void process(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n+        MessageFuture messageFuture = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b8cd3c20d21dc6fe84374830e4fed91cabaaf77"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyMTA1MA==", "bodyText": "ok, I specifically extracted the log printing related logic and made a BatchLogHandler.", "url": "https://github.com/seata/seata/pull/2486#discussion_r429921050", "createdAt": "2020-05-25T12:57:30Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/rpc/processor/server/ServerOnResponseProcessor.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.processor.server;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.core.protocol.AbstractResultMessage;\n+import io.seata.core.protocol.MergeResultMessage;\n+import io.seata.core.protocol.MessageFuture;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchCommitResponse;\n+import io.seata.core.protocol.transaction.BranchRollbackResponse;\n+import io.seata.core.rpc.ChannelManager;\n+import io.seata.core.rpc.RpcContext;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.processor.RemotingProcessor;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * handle RM/TM response message.\n+ * <p>\n+ * message type:\n+ * RM:\n+ * 1) {@link BranchCommitResponse}\n+ * 2) {@link BranchRollbackResponse}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.3.0\n+ */\n+public class ServerOnResponseProcessor implements RemotingProcessor {\n+\n+    private TransactionMessageHandler transactionMessageHandler;\n+\n+    private ConcurrentHashMap<Integer, MessageFuture> futures;\n+\n+    public ServerOnResponseProcessor(TransactionMessageHandler transactionMessageHandler,\n+                                     ConcurrentHashMap<Integer, MessageFuture> futures) {\n+        this.transactionMessageHandler = transactionMessageHandler;\n+        this.futures = futures;\n+    }\n+\n+    @Override\n+    public void process(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n+        MessageFuture messageFuture = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4NDA0OA=="}, "originalCommit": {"oid": "0b8cd3c20d21dc6fe84374830e4fed91cabaaf77"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODQwMTk3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/rpc/processor/server/ServerOnResponseProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNzowOTo0NFrOGboWAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNzoxODoxNlrOGiRYcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYyNTcyOQ==", "bodyText": "I think you can remove this \"if\"", "url": "https://github.com/seata/seata/pull/2486#discussion_r431625729", "createdAt": "2020-05-28T07:09:44Z", "author": {"login": "l81893521"}, "path": "core/src/main/java/io/seata/core/rpc/processor/server/ServerOnResponseProcessor.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.processor.server;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.common.thread.NamedThreadFactory;\n+import io.seata.common.util.NetUtil;\n+import io.seata.core.protocol.AbstractResultMessage;\n+import io.seata.core.protocol.MergeResultMessage;\n+import io.seata.core.protocol.MessageFuture;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchCommitResponse;\n+import io.seata.core.protocol.transaction.BranchRollbackResponse;\n+import io.seata.core.rpc.ChannelManager;\n+import io.seata.core.rpc.RpcContext;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.processor.RemotingProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * handle RM/TM response message.\n+ * <p>\n+ * message type:\n+ * RM:\n+ * 1) {@link BranchCommitResponse}\n+ * 2) {@link BranchRollbackResponse}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.3.0\n+ */\n+public class ServerOnResponseProcessor implements RemotingProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ServerOnRequestProcessor.class);\n+\n+    private TransactionMessageHandler transactionMessageHandler;\n+\n+    private ConcurrentHashMap<Integer, MessageFuture> futures;\n+\n+    private static BlockingQueue<String> LOG_QUEUE = new LinkedBlockingQueue<>();\n+\n+    private static final int MAX_LOG_SEND_THREAD = 1;\n+    private static final int MAX_LOG_TAKE_SIZE = 1024;\n+    private static final long KEEP_ALIVE_TIME = 0L;\n+    private static final String THREAD_PREFIX = \"batchLoggerPrint\";\n+    private static final long BUSY_SLEEP_MILLS = 5L;\n+\n+    public ServerOnResponseProcessor(TransactionMessageHandler transactionMessageHandler,\n+                                     ConcurrentHashMap<Integer, MessageFuture> futures) {\n+        this.transactionMessageHandler = transactionMessageHandler;\n+        this.futures = futures;\n+        init();\n+    }\n+\n+    @Override\n+    public void process(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n+        MessageFuture messageFuture = null;\n+        if (!(rpcMessage.getBody() instanceof MergeResultMessage)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e835e2e909be1a7ba3bf7bfd17dbdbdf795adeb"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU4OTU1Mw==", "bodyText": "Done.", "url": "https://github.com/seata/seata/pull/2486#discussion_r438589553", "createdAt": "2020-06-11T07:18:16Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/rpc/processor/server/ServerOnResponseProcessor.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.processor.server;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.common.thread.NamedThreadFactory;\n+import io.seata.common.util.NetUtil;\n+import io.seata.core.protocol.AbstractResultMessage;\n+import io.seata.core.protocol.MergeResultMessage;\n+import io.seata.core.protocol.MessageFuture;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchCommitResponse;\n+import io.seata.core.protocol.transaction.BranchRollbackResponse;\n+import io.seata.core.rpc.ChannelManager;\n+import io.seata.core.rpc.RpcContext;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.processor.RemotingProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * handle RM/TM response message.\n+ * <p>\n+ * message type:\n+ * RM:\n+ * 1) {@link BranchCommitResponse}\n+ * 2) {@link BranchRollbackResponse}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.3.0\n+ */\n+public class ServerOnResponseProcessor implements RemotingProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ServerOnRequestProcessor.class);\n+\n+    private TransactionMessageHandler transactionMessageHandler;\n+\n+    private ConcurrentHashMap<Integer, MessageFuture> futures;\n+\n+    private static BlockingQueue<String> LOG_QUEUE = new LinkedBlockingQueue<>();\n+\n+    private static final int MAX_LOG_SEND_THREAD = 1;\n+    private static final int MAX_LOG_TAKE_SIZE = 1024;\n+    private static final long KEEP_ALIVE_TIME = 0L;\n+    private static final String THREAD_PREFIX = \"batchLoggerPrint\";\n+    private static final long BUSY_SLEEP_MILLS = 5L;\n+\n+    public ServerOnResponseProcessor(TransactionMessageHandler transactionMessageHandler,\n+                                     ConcurrentHashMap<Integer, MessageFuture> futures) {\n+        this.transactionMessageHandler = transactionMessageHandler;\n+        this.futures = futures;\n+        init();\n+    }\n+\n+    @Override\n+    public void process(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n+        MessageFuture messageFuture = null;\n+        if (!(rpcMessage.getBody() instanceof MergeResultMessage)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYyNTcyOQ=="}, "originalCommit": {"oid": "4e835e2e909be1a7ba3bf7bfd17dbdbdf795adeb"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODIxNTUwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/rpc/processor/server/ServerOnResponseProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxMToyNzoxM1rOGgI3hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMjoxNjoxMVrOGiMO-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM1MjkwMw==", "bodyText": "ConcurrentMap", "url": "https://github.com/seata/seata/pull/2486#discussion_r436352903", "createdAt": "2020-06-07T11:27:13Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/rpc/processor/server/ServerOnResponseProcessor.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.processor.server;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.common.thread.NamedThreadFactory;\n+import io.seata.common.util.NetUtil;\n+import io.seata.core.protocol.AbstractResultMessage;\n+import io.seata.core.protocol.MergeResultMessage;\n+import io.seata.core.protocol.MessageFuture;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchCommitResponse;\n+import io.seata.core.protocol.transaction.BranchRollbackResponse;\n+import io.seata.core.rpc.ChannelManager;\n+import io.seata.core.rpc.RpcContext;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.processor.RemotingProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * handle RM/TM response message.\n+ * <p>\n+ * message type:\n+ * RM:\n+ * 1) {@link BranchCommitResponse}\n+ * 2) {@link BranchRollbackResponse}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.3.0\n+ */\n+public class ServerOnResponseProcessor implements RemotingProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ServerOnRequestProcessor.class);\n+\n+    private TransactionMessageHandler transactionMessageHandler;\n+\n+    private ConcurrentHashMap<Integer, MessageFuture> futures;\n+\n+    private static BlockingQueue<String> LOG_QUEUE = new LinkedBlockingQueue<>();\n+\n+    private static final int MAX_LOG_SEND_THREAD = 1;\n+    private static final int MAX_LOG_TAKE_SIZE = 1024;\n+    private static final long KEEP_ALIVE_TIME = 0L;\n+    private static final String THREAD_PREFIX = \"batchLoggerPrint\";\n+    private static final long BUSY_SLEEP_MILLS = 5L;\n+\n+    public ServerOnResponseProcessor(TransactionMessageHandler transactionMessageHandler,\n+                                     ConcurrentHashMap<Integer, MessageFuture> futures) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926b16acb3721918a9055f69c9a13709b4811b57"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUwNTIwOA==", "bodyText": "Done.", "url": "https://github.com/seata/seata/pull/2486#discussion_r438505208", "createdAt": "2020-06-11T02:16:11Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/rpc/processor/server/ServerOnResponseProcessor.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.processor.server;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.common.thread.NamedThreadFactory;\n+import io.seata.common.util.NetUtil;\n+import io.seata.core.protocol.AbstractResultMessage;\n+import io.seata.core.protocol.MergeResultMessage;\n+import io.seata.core.protocol.MessageFuture;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchCommitResponse;\n+import io.seata.core.protocol.transaction.BranchRollbackResponse;\n+import io.seata.core.rpc.ChannelManager;\n+import io.seata.core.rpc.RpcContext;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.processor.RemotingProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * handle RM/TM response message.\n+ * <p>\n+ * message type:\n+ * RM:\n+ * 1) {@link BranchCommitResponse}\n+ * 2) {@link BranchRollbackResponse}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.3.0\n+ */\n+public class ServerOnResponseProcessor implements RemotingProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ServerOnRequestProcessor.class);\n+\n+    private TransactionMessageHandler transactionMessageHandler;\n+\n+    private ConcurrentHashMap<Integer, MessageFuture> futures;\n+\n+    private static BlockingQueue<String> LOG_QUEUE = new LinkedBlockingQueue<>();\n+\n+    private static final int MAX_LOG_SEND_THREAD = 1;\n+    private static final int MAX_LOG_TAKE_SIZE = 1024;\n+    private static final long KEEP_ALIVE_TIME = 0L;\n+    private static final String THREAD_PREFIX = \"batchLoggerPrint\";\n+    private static final long BUSY_SLEEP_MILLS = 5L;\n+\n+    public ServerOnResponseProcessor(TransactionMessageHandler transactionMessageHandler,\n+                                     ConcurrentHashMap<Integer, MessageFuture> futures) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM1MjkwMw=="}, "originalCommit": {"oid": "926b16acb3721918a9055f69c9a13709b4811b57"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODIxNzk3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/rpc/processor/server/ServerOnResponseProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxMTozMjowMVrOGgI45g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMjoxNToxOFrOGiMOGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM1MzI1NA==", "bodyText": "Whether the batch log processing of ServerOnResponseProcessor and ServerOnRequestProcessor can be abstracted to the upper level", "url": "https://github.com/seata/seata/pull/2486#discussion_r436353254", "createdAt": "2020-06-07T11:32:01Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/rpc/processor/server/ServerOnResponseProcessor.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.processor.server;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.common.thread.NamedThreadFactory;\n+import io.seata.common.util.NetUtil;\n+import io.seata.core.protocol.AbstractResultMessage;\n+import io.seata.core.protocol.MergeResultMessage;\n+import io.seata.core.protocol.MessageFuture;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchCommitResponse;\n+import io.seata.core.protocol.transaction.BranchRollbackResponse;\n+import io.seata.core.rpc.ChannelManager;\n+import io.seata.core.rpc.RpcContext;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.processor.RemotingProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * handle RM/TM response message.\n+ * <p>\n+ * message type:\n+ * RM:\n+ * 1) {@link BranchCommitResponse}\n+ * 2) {@link BranchRollbackResponse}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.3.0\n+ */\n+public class ServerOnResponseProcessor implements RemotingProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ServerOnRequestProcessor.class);\n+\n+    private TransactionMessageHandler transactionMessageHandler;\n+\n+    private ConcurrentHashMap<Integer, MessageFuture> futures;\n+\n+    private static BlockingQueue<String> LOG_QUEUE = new LinkedBlockingQueue<>();\n+\n+    private static final int MAX_LOG_SEND_THREAD = 1;\n+    private static final int MAX_LOG_TAKE_SIZE = 1024;\n+    private static final long KEEP_ALIVE_TIME = 0L;\n+    private static final String THREAD_PREFIX = \"batchLoggerPrint\";\n+    private static final long BUSY_SLEEP_MILLS = 5L;\n+\n+    public ServerOnResponseProcessor(TransactionMessageHandler transactionMessageHandler,\n+                                     ConcurrentHashMap<Integer, MessageFuture> futures) {\n+        this.transactionMessageHandler = transactionMessageHandler;\n+        this.futures = futures;\n+        init();\n+    }\n+\n+    @Override\n+    public void process(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n+        MessageFuture messageFuture = null;\n+        if (!(rpcMessage.getBody() instanceof MergeResultMessage)) {\n+            messageFuture = futures.remove(rpcMessage.getId());\n+        }\n+        if (messageFuture != null) {\n+            messageFuture.setResultMessage(rpcMessage.getBody());\n+        } else {\n+            if (ChannelManager.isRegistered(ctx.channel())) {\n+                onResponseMessage(ctx, rpcMessage);\n+            } else {\n+                try {\n+                    if (LOGGER.isInfoEnabled()) {\n+                        LOGGER.info(\"closeChannelHandlerContext channel:\" + ctx.channel());\n+                    }\n+                    ctx.disconnect();\n+                    ctx.close();\n+                } catch (Exception exx) {\n+                    LOGGER.error(exx.getMessage());\n+                }\n+                if (LOGGER.isInfoEnabled()) {\n+                    LOGGER.info(String.format(\"close a unhandled connection! [%s]\", ctx.channel().toString()));\n+                }\n+            }\n+        }\n+    }\n+\n+    private void onResponseMessage(ChannelHandlerContext ctx, RpcMessage rpcMessage) {\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"server received:{},clientIp:{},vgroup:{}\", rpcMessage.getBody(),\n+                NetUtil.toIpAddress(ctx.channel().remoteAddress()),\n+                ChannelManager.getContextFromIdentified(ctx.channel()).getTransactionServiceGroup());\n+        } else {\n+            try {\n+                LOG_QUEUE.put(rpcMessage.getBody() + \",clientIp:\" + NetUtil.toIpAddress(ctx.channel().remoteAddress()) + \",vgroup:\"\n+                        + ChannelManager.getContextFromIdentified(ctx.channel()).getTransactionServiceGroup());\n+            } catch (InterruptedException e) {\n+                LOGGER.error(\"put message to logQueue error: {}\", e.getMessage(), e);\n+            }\n+        }\n+        if (rpcMessage.getBody() instanceof AbstractResultMessage) {\n+            RpcContext rpcContext = ChannelManager.getContextFromIdentified(ctx.channel());\n+            transactionMessageHandler.onResponse((AbstractResultMessage) rpcMessage.getBody(), rpcContext);\n+        }\n+    }\n+\n+\n+    /**\n+     * Init.\n+     */\n+    private void init() {\n+        ExecutorService mergeSendExecutorService = new ThreadPoolExecutor(MAX_LOG_SEND_THREAD, MAX_LOG_SEND_THREAD,\n+            KEEP_ALIVE_TIME, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(),\n+            new NamedThreadFactory(THREAD_PREFIX, MAX_LOG_SEND_THREAD, true));\n+        mergeSendExecutorService.submit(new BatchLogRunnable());\n+    }\n+\n+    /**\n+     * The type Batch log runnable.\n+     */\n+    static class BatchLogRunnable implements Runnable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926b16acb3721918a9055f69c9a13709b4811b57"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUwNDk4NA==", "bodyText": "My approach:\nExtract log processing logic into BatchLogHandler instead of abstracted to the upper level.", "url": "https://github.com/seata/seata/pull/2486#discussion_r438504984", "createdAt": "2020-06-11T02:15:18Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/rpc/processor/server/ServerOnResponseProcessor.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.processor.server;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.common.thread.NamedThreadFactory;\n+import io.seata.common.util.NetUtil;\n+import io.seata.core.protocol.AbstractResultMessage;\n+import io.seata.core.protocol.MergeResultMessage;\n+import io.seata.core.protocol.MessageFuture;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchCommitResponse;\n+import io.seata.core.protocol.transaction.BranchRollbackResponse;\n+import io.seata.core.rpc.ChannelManager;\n+import io.seata.core.rpc.RpcContext;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.processor.RemotingProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * handle RM/TM response message.\n+ * <p>\n+ * message type:\n+ * RM:\n+ * 1) {@link BranchCommitResponse}\n+ * 2) {@link BranchRollbackResponse}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.3.0\n+ */\n+public class ServerOnResponseProcessor implements RemotingProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ServerOnRequestProcessor.class);\n+\n+    private TransactionMessageHandler transactionMessageHandler;\n+\n+    private ConcurrentHashMap<Integer, MessageFuture> futures;\n+\n+    private static BlockingQueue<String> LOG_QUEUE = new LinkedBlockingQueue<>();\n+\n+    private static final int MAX_LOG_SEND_THREAD = 1;\n+    private static final int MAX_LOG_TAKE_SIZE = 1024;\n+    private static final long KEEP_ALIVE_TIME = 0L;\n+    private static final String THREAD_PREFIX = \"batchLoggerPrint\";\n+    private static final long BUSY_SLEEP_MILLS = 5L;\n+\n+    public ServerOnResponseProcessor(TransactionMessageHandler transactionMessageHandler,\n+                                     ConcurrentHashMap<Integer, MessageFuture> futures) {\n+        this.transactionMessageHandler = transactionMessageHandler;\n+        this.futures = futures;\n+        init();\n+    }\n+\n+    @Override\n+    public void process(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n+        MessageFuture messageFuture = null;\n+        if (!(rpcMessage.getBody() instanceof MergeResultMessage)) {\n+            messageFuture = futures.remove(rpcMessage.getId());\n+        }\n+        if (messageFuture != null) {\n+            messageFuture.setResultMessage(rpcMessage.getBody());\n+        } else {\n+            if (ChannelManager.isRegistered(ctx.channel())) {\n+                onResponseMessage(ctx, rpcMessage);\n+            } else {\n+                try {\n+                    if (LOGGER.isInfoEnabled()) {\n+                        LOGGER.info(\"closeChannelHandlerContext channel:\" + ctx.channel());\n+                    }\n+                    ctx.disconnect();\n+                    ctx.close();\n+                } catch (Exception exx) {\n+                    LOGGER.error(exx.getMessage());\n+                }\n+                if (LOGGER.isInfoEnabled()) {\n+                    LOGGER.info(String.format(\"close a unhandled connection! [%s]\", ctx.channel().toString()));\n+                }\n+            }\n+        }\n+    }\n+\n+    private void onResponseMessage(ChannelHandlerContext ctx, RpcMessage rpcMessage) {\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"server received:{},clientIp:{},vgroup:{}\", rpcMessage.getBody(),\n+                NetUtil.toIpAddress(ctx.channel().remoteAddress()),\n+                ChannelManager.getContextFromIdentified(ctx.channel()).getTransactionServiceGroup());\n+        } else {\n+            try {\n+                LOG_QUEUE.put(rpcMessage.getBody() + \",clientIp:\" + NetUtil.toIpAddress(ctx.channel().remoteAddress()) + \",vgroup:\"\n+                        + ChannelManager.getContextFromIdentified(ctx.channel()).getTransactionServiceGroup());\n+            } catch (InterruptedException e) {\n+                LOGGER.error(\"put message to logQueue error: {}\", e.getMessage(), e);\n+            }\n+        }\n+        if (rpcMessage.getBody() instanceof AbstractResultMessage) {\n+            RpcContext rpcContext = ChannelManager.getContextFromIdentified(ctx.channel());\n+            transactionMessageHandler.onResponse((AbstractResultMessage) rpcMessage.getBody(), rpcContext);\n+        }\n+    }\n+\n+\n+    /**\n+     * Init.\n+     */\n+    private void init() {\n+        ExecutorService mergeSendExecutorService = new ThreadPoolExecutor(MAX_LOG_SEND_THREAD, MAX_LOG_SEND_THREAD,\n+            KEEP_ALIVE_TIME, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(),\n+            new NamedThreadFactory(THREAD_PREFIX, MAX_LOG_SEND_THREAD, true));\n+        mergeSendExecutorService.submit(new BatchLogRunnable());\n+    }\n+\n+    /**\n+     * The type Batch log runnable.\n+     */\n+    static class BatchLogRunnable implements Runnable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM1MzI1NA=="}, "originalCommit": {"oid": "926b16acb3721918a9055f69c9a13709b4811b57"}, "originalPosition": 138}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1513, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}