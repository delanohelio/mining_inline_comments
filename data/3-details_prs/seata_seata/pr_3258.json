{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1NzcxMTEz", "number": 3258, "title": "bugfix: fix AsyncWorker potential OOM problem", "bodyText": "\u2160. Describe what this PR did\nFix AsyncWorker may cause OOM when TC continuously send async commit message to RM.\n\u2161. Does this pull request fix one issue?\nfixes #3240\n\u2163. Describe how to verify it\nuse method descripted in the issue.", "createdAt": "2020-11-05T03:37:28Z", "url": "https://github.com/seata/seata/pull/3258", "merged": true, "mergeCommit": {"oid": "80ea72af38108807bb52ef82fde9906b8e150837"}, "closed": true, "closedAt": "2020-12-21T02:42:55Z", "author": {"login": "selfishlover"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZZ0eSgH2gAyNTE1NzcxMTEzOjEyMzgwODA4YTgyMTBmMjJiMmFlMzdiMGM4MzAwOWNlNGU4OWU5OTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdoMsbwAFqTU1NjEwMDY3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "12380808a8210f22b2ae37b0c83009ce4e89e996", "author": {"user": {"login": "selfishlover", "name": null}}, "url": "https://github.com/seata/seata/commit/12380808a8210f22b2ae37b0c83009ce4e89e996", "committedDate": "2020-11-05T03:30:17Z", "message": "bugfix: fix AsyncWorker potential OOM problem"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecbd202d47550ab618490afb41af1a91d39845c8", "author": {"user": {"login": "selfishlover", "name": null}}, "url": "https://github.com/seata/seata/commit/ecbd202d47550ab618490afb41af1a91d39845c8", "committedDate": "2020-11-05T05:28:12Z", "message": "fix style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab9382750e63068b69958dec5f733c97047151a8", "author": {"user": {"login": "selfishlover", "name": null}}, "url": "https://github.com/seata/seata/commit/ab9382750e63068b69958dec5f733c97047151a8", "committedDate": "2020-11-06T02:08:28Z", "message": "Merge branch 'develop' into bugfix-AsyncWorker-OOM"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1MzU1ODk0", "url": "https://github.com/seata/seata/pull/3258#pullrequestreview-525355894", "createdAt": "2020-11-06T17:30:54Z", "commit": {"oid": "ab9382750e63068b69958dec5f733c97047151a8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1NTg3MTM1", "url": "https://github.com/seata/seata/pull/3258#pullrequestreview-525587135", "createdAt": "2020-11-07T03:03:04Z", "commit": {"oid": "ab9382750e63068b69958dec5f733c97047151a8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3ODQ0NjQ3", "url": "https://github.com/seata/seata/pull/3258#pullrequestreview-527844647", "createdAt": "2020-11-11T03:56:53Z", "commit": {"oid": "ab9382750e63068b69958dec5f733c97047151a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzo1Njo1M1rOHw9Peg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzo1Njo1M1rOHw9Peg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5NzA4Mg==", "bodyText": "error", "url": "https://github.com/seata/seata/pull/3258#discussion_r521097082", "createdAt": "2020-11-11T03:56:53Z", "author": {"login": "xingfudeshi"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/AsyncWorker.java", "diffHunk": "@@ -59,8 +58,121 @@\n \n     private static final int UNDOLOG_DELETE_LIMIT_SIZE = 1000;\n \n+    private static final int ASYNC_COMMIT_BUFFER_LIMIT = ConfigurationFactory.getInstance().getInt(\n+        CLIENT_ASYNC_COMMIT_BUFFER_LIMIT, DEFAULT_CLIENT_ASYNC_COMMIT_BUFFER_LIMIT);\n+\n+    private final BlockingQueue<Phase2Context> commitQueue = new LinkedBlockingQueue<>(ASYNC_COMMIT_BUFFER_LIMIT);\n+\n+    @Override\n+    public BranchStatus branchCommit(BranchType branchType, String xid, long branchId, String resourceId,\n+                                     String applicationData) {\n+        if (!commitQueue.offer(new Phase2Context(branchType, xid, branchId, resourceId, applicationData))) {\n+            LOGGER.warn(\"Async commit buffer is FULL. Rejected branch [{}/{}] will be handled by housekeeping later.\", branchId, xid);\n+        }\n+        return BranchStatus.PhaseTwo_Committed;\n+    }\n+\n+    /**\n+     * Init worker thread to do branch commit\n+     */\n+    public void init() {\n+        LOGGER.info(\"Async Commit Buffer Limit: {}\", ASYNC_COMMIT_BUFFER_LIMIT);\n+        ScheduledExecutorService timerExecutor = new ScheduledThreadPoolExecutor(1, new NamedThreadFactory(\"AsyncWorker\", 1, true));\n+        timerExecutor.scheduleAtFixedRate(() -> {\n+            try {\n+\n+                doBranchCommits();\n+\n+            } catch (Throwable e) {\n+                LOGGER.info(\"Failed at async committing ... {}\", e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9382750e63068b69958dec5f733c97047151a8"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3ODQ0Nzg3", "url": "https://github.com/seata/seata/pull/3258#pullrequestreview-527844787", "createdAt": "2020-11-11T03:57:21Z", "commit": {"oid": "ab9382750e63068b69958dec5f733c97047151a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzo1NzoyMlrOHw9P5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzo1NzoyMlrOHw9P5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5NzE5MQ==", "bodyText": "LOGGER.warn(\"Failed to get connection for async committing on:{} \"  resourceId, sqle);", "url": "https://github.com/seata/seata/pull/3258#discussion_r521097191", "createdAt": "2020-11-11T03:57:22Z", "author": {"login": "xingfudeshi"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/AsyncWorker.java", "diffHunk": "@@ -59,8 +58,121 @@\n \n     private static final int UNDOLOG_DELETE_LIMIT_SIZE = 1000;\n \n+    private static final int ASYNC_COMMIT_BUFFER_LIMIT = ConfigurationFactory.getInstance().getInt(\n+        CLIENT_ASYNC_COMMIT_BUFFER_LIMIT, DEFAULT_CLIENT_ASYNC_COMMIT_BUFFER_LIMIT);\n+\n+    private final BlockingQueue<Phase2Context> commitQueue = new LinkedBlockingQueue<>(ASYNC_COMMIT_BUFFER_LIMIT);\n+\n+    @Override\n+    public BranchStatus branchCommit(BranchType branchType, String xid, long branchId, String resourceId,\n+                                     String applicationData) {\n+        if (!commitQueue.offer(new Phase2Context(branchType, xid, branchId, resourceId, applicationData))) {\n+            LOGGER.warn(\"Async commit buffer is FULL. Rejected branch [{}/{}] will be handled by housekeeping later.\", branchId, xid);\n+        }\n+        return BranchStatus.PhaseTwo_Committed;\n+    }\n+\n+    /**\n+     * Init worker thread to do branch commit\n+     */\n+    public void init() {\n+        LOGGER.info(\"Async Commit Buffer Limit: {}\", ASYNC_COMMIT_BUFFER_LIMIT);\n+        ScheduledExecutorService timerExecutor = new ScheduledThreadPoolExecutor(1, new NamedThreadFactory(\"AsyncWorker\", 1, true));\n+        timerExecutor.scheduleAtFixedRate(() -> {\n+            try {\n+\n+                doBranchCommits();\n+\n+            } catch (Throwable e) {\n+                LOGGER.info(\"Failed at async committing ... {}\", e.getMessage());\n+\n+            }\n+        }, 10, 1000, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private void doBranchCommits() {\n+        if (commitQueue.isEmpty()) {\n+            return;\n+        }\n+\n+        // transfer all context currently received to this list\n+        List<Phase2Context> allContexts = new LinkedList<>();\n+        commitQueue.drainTo(allContexts);\n+\n+        // group context by their resourceId\n+        Map<String, List<Phase2Context>> groupedContexts = groupedByResourceId(allContexts);\n+\n+        groupedContexts.forEach(this::dealWithGroupedContexts);\n+    }\n \n-    private static class Phase2Context {\n+    Map<String, List<Phase2Context>> groupedByResourceId(List<Phase2Context> contexts) {\n+        Map<String, List<Phase2Context>> groupedContexts = new HashMap<>(DEFAULT_RESOURCE_SIZE);\n+        contexts.forEach(context -> {\n+            List<Phase2Context> group = groupedContexts.computeIfAbsent(context.resourceId, key -> new LinkedList<>());\n+            group.add(context);\n+        });\n+        return groupedContexts;\n+    }\n+\n+    private void dealWithGroupedContexts(String resourceId, List<Phase2Context> contexts) {\n+        DataSourceManager resourceManager = (DataSourceManager) DefaultResourceManager.get().getResourceManager(BranchType.AT);\n+        DataSourceProxy dataSourceProxy = resourceManager.get(resourceId);\n+        if (dataSourceProxy == null) {\n+            LOGGER.warn(\"Failed to find resource for {}\" + resourceId);\n+            return;\n+        }\n+\n+        Connection conn;\n+        try {\n+            conn = dataSourceProxy.getPlainConnection();\n+        } catch (SQLException sqle) {\n+            LOGGER.warn(\"Failed to get connection for async committing on \" + resourceId, sqle);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9382750e63068b69958dec5f733c97047151a8"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3ODQ0ODM5", "url": "https://github.com/seata/seata/pull/3258#pullrequestreview-527844839", "createdAt": "2020-11-11T03:57:38Z", "commit": {"oid": "ab9382750e63068b69958dec5f733c97047151a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzo1NzozOFrOHw9QGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzo1NzozOFrOHw9QGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5NzI0Mg==", "bodyText": "LOGGER.warn(\"Failed to find resource for {}\" , resourceId);", "url": "https://github.com/seata/seata/pull/3258#discussion_r521097242", "createdAt": "2020-11-11T03:57:38Z", "author": {"login": "xingfudeshi"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/AsyncWorker.java", "diffHunk": "@@ -59,8 +58,121 @@\n \n     private static final int UNDOLOG_DELETE_LIMIT_SIZE = 1000;\n \n+    private static final int ASYNC_COMMIT_BUFFER_LIMIT = ConfigurationFactory.getInstance().getInt(\n+        CLIENT_ASYNC_COMMIT_BUFFER_LIMIT, DEFAULT_CLIENT_ASYNC_COMMIT_BUFFER_LIMIT);\n+\n+    private final BlockingQueue<Phase2Context> commitQueue = new LinkedBlockingQueue<>(ASYNC_COMMIT_BUFFER_LIMIT);\n+\n+    @Override\n+    public BranchStatus branchCommit(BranchType branchType, String xid, long branchId, String resourceId,\n+                                     String applicationData) {\n+        if (!commitQueue.offer(new Phase2Context(branchType, xid, branchId, resourceId, applicationData))) {\n+            LOGGER.warn(\"Async commit buffer is FULL. Rejected branch [{}/{}] will be handled by housekeeping later.\", branchId, xid);\n+        }\n+        return BranchStatus.PhaseTwo_Committed;\n+    }\n+\n+    /**\n+     * Init worker thread to do branch commit\n+     */\n+    public void init() {\n+        LOGGER.info(\"Async Commit Buffer Limit: {}\", ASYNC_COMMIT_BUFFER_LIMIT);\n+        ScheduledExecutorService timerExecutor = new ScheduledThreadPoolExecutor(1, new NamedThreadFactory(\"AsyncWorker\", 1, true));\n+        timerExecutor.scheduleAtFixedRate(() -> {\n+            try {\n+\n+                doBranchCommits();\n+\n+            } catch (Throwable e) {\n+                LOGGER.info(\"Failed at async committing ... {}\", e.getMessage());\n+\n+            }\n+        }, 10, 1000, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private void doBranchCommits() {\n+        if (commitQueue.isEmpty()) {\n+            return;\n+        }\n+\n+        // transfer all context currently received to this list\n+        List<Phase2Context> allContexts = new LinkedList<>();\n+        commitQueue.drainTo(allContexts);\n+\n+        // group context by their resourceId\n+        Map<String, List<Phase2Context>> groupedContexts = groupedByResourceId(allContexts);\n+\n+        groupedContexts.forEach(this::dealWithGroupedContexts);\n+    }\n \n-    private static class Phase2Context {\n+    Map<String, List<Phase2Context>> groupedByResourceId(List<Phase2Context> contexts) {\n+        Map<String, List<Phase2Context>> groupedContexts = new HashMap<>(DEFAULT_RESOURCE_SIZE);\n+        contexts.forEach(context -> {\n+            List<Phase2Context> group = groupedContexts.computeIfAbsent(context.resourceId, key -> new LinkedList<>());\n+            group.add(context);\n+        });\n+        return groupedContexts;\n+    }\n+\n+    private void dealWithGroupedContexts(String resourceId, List<Phase2Context> contexts) {\n+        DataSourceManager resourceManager = (DataSourceManager) DefaultResourceManager.get().getResourceManager(BranchType.AT);\n+        DataSourceProxy dataSourceProxy = resourceManager.get(resourceId);\n+        if (dataSourceProxy == null) {\n+            LOGGER.warn(\"Failed to find resource for {}\" + resourceId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9382750e63068b69958dec5f733c97047151a8"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f1aea172c1ae5c0f5f0559a089046ffd6883e93", "author": {"user": {"login": "selfishlover", "name": null}}, "url": "https://github.com/seata/seata/commit/1f1aea172c1ae5c0f5f0559a089046ffd6883e93", "committedDate": "2020-11-11T04:43:47Z", "message": "adjust logger"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d80fb0e128f238e9536dc733ae434c1e0125bb0", "author": {"user": {"login": "selfishlover", "name": null}}, "url": "https://github.com/seata/seata/commit/5d80fb0e128f238e9536dc733ae434c1e0125bb0", "committedDate": "2020-11-11T04:53:13Z", "message": "append"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0c8bca9e7499dfb1f4f9e93f696c9fb5b8ac92e", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/b0c8bca9e7499dfb1f4f9e93f696c9fb5b8ac92e", "committedDate": "2020-11-11T07:40:10Z", "message": "Merge branch 'develop' into bugfix-AsyncWorker-OOM"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNzY1NTYy", "url": "https://github.com/seata/seata/pull/3258#pullrequestreview-530765562", "createdAt": "2020-11-15T04:17:25Z", "commit": {"oid": "b0c8bca9e7499dfb1f4f9e93f696c9fb5b8ac92e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwNDoxNzoyNVrOHzcbIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwNDoxNzoyNVrOHzcbIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwNTEyMA==", "bodyText": "\u8fd9\u91ccoffer\u8fd4\u56de\u4e86false\u4e4b\u540e\uff0c\u8fd9\u91cc\u6253\u4e86\u4e2awarn\u7684\u65e5\u5fd7\uff0c\u4f46\u662f\u8fd8\u662f\u8fd4\u56de\u4e86\u4e8c\u9636\u6bb5\u63d0\u4ea4\u6210\u529f\u3002\u4f1a\u4e0d\u4f1a\u5bfc\u81f4seata\u8ba4\u4e3a\u8fd9\u6761\u5206\u652f\u5df2\u7ecf\u63d0\u4ea4\u6210\u529f\u4e86\uff0c\u4f46\u662f\u4e8b\u5b9e\u4e0a\u6ca1\u6709\u63d0\u4ea4\uff1f", "url": "https://github.com/seata/seata/pull/3258#discussion_r523705120", "createdAt": "2020-11-15T04:17:25Z", "author": {"login": "caohdgege"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/AsyncWorker.java", "diffHunk": "@@ -59,8 +59,113 @@\n \n     private static final int UNDOLOG_DELETE_LIMIT_SIZE = 1000;\n \n+    private static final int ASYNC_COMMIT_BUFFER_LIMIT = ConfigurationFactory.getInstance().getInt(\n+        CLIENT_ASYNC_COMMIT_BUFFER_LIMIT, DEFAULT_CLIENT_ASYNC_COMMIT_BUFFER_LIMIT);\n+\n+    private final BlockingQueue<Phase2Context> commitQueue = new LinkedBlockingQueue<>(ASYNC_COMMIT_BUFFER_LIMIT);\n+\n+    @Override\n+    public BranchStatus branchCommit(BranchType branchType, String xid, long branchId, String resourceId,\n+                                     String applicationData) {\n+        if (!commitQueue.offer(new Phase2Context(branchType, xid, branchId, resourceId, applicationData))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0c8bca9e7499dfb1f4f9e93f696c9fb5b8ac92e"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNzY1NzAw", "url": "https://github.com/seata/seata/pull/3258#pullrequestreview-530765700", "createdAt": "2020-11-15T04:21:01Z", "commit": {"oid": "b0c8bca9e7499dfb1f4f9e93f696c9fb5b8ac92e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwNDoyMTowMVrOHzccEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQwNDoyMTo0NFrOHzccQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwNTM2Mw==", "bodyText": "\u8fd9\u91cc\u662f\u4e0d\u662f\u5e94\u8be5\u76f4\u63a5\u629b\u51fa\u5f02\u5e38\uff1f\u800c\u4e0d\u662f\u6253\u4e86\u65e5\u5fd7\u4e4b\u540ereturn\uff1f", "url": "https://github.com/seata/seata/pull/3258#discussion_r523705363", "createdAt": "2020-11-15T04:21:01Z", "author": {"login": "caohdgege"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/AsyncWorker.java", "diffHunk": "@@ -59,8 +59,113 @@\n \n     private static final int UNDOLOG_DELETE_LIMIT_SIZE = 1000;\n \n+    private static final int ASYNC_COMMIT_BUFFER_LIMIT = ConfigurationFactory.getInstance().getInt(\n+        CLIENT_ASYNC_COMMIT_BUFFER_LIMIT, DEFAULT_CLIENT_ASYNC_COMMIT_BUFFER_LIMIT);\n+\n+    private final BlockingQueue<Phase2Context> commitQueue = new LinkedBlockingQueue<>(ASYNC_COMMIT_BUFFER_LIMIT);\n+\n+    @Override\n+    public BranchStatus branchCommit(BranchType branchType, String xid, long branchId, String resourceId,\n+                                     String applicationData) {\n+        if (!commitQueue.offer(new Phase2Context(branchType, xid, branchId, resourceId, applicationData))) {\n+            LOGGER.warn(\"Async commit buffer is FULL. Rejected branch [{}/{}] will be handled by housekeeping later.\", branchId, xid);\n+        }\n+        return BranchStatus.PhaseTwo_Committed;\n+    }\n+\n+    /**\n+     * Init worker thread to do branch commit\n+     */\n+    public void init() {\n+        LOGGER.info(\"Async Commit Buffer Limit: {}\", ASYNC_COMMIT_BUFFER_LIMIT);\n+        ThreadFactory threadFactory = new NamedThreadFactory(\"AsyncWorker\", 1, true);\n+        ScheduledExecutorService timerExecutor = new ScheduledThreadPoolExecutor(1, threadFactory);\n+        timerExecutor.scheduleAtFixedRate(this::doBranchCommits, 10, 1000, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private void doBranchCommits() {\n+        if (commitQueue.isEmpty()) {\n+            return;\n+        }\n+\n+        // transfer all context currently received to this list\n+        List<Phase2Context> allContexts = new LinkedList<>();\n+        commitQueue.drainTo(allContexts);\n+\n+        // group context by their resourceId\n+        Map<String, List<Phase2Context>> groupedContexts = groupedByResourceId(allContexts);\n+\n+        groupedContexts.forEach(this::dealWithGroupedContexts);\n+    }\n+\n+    Map<String, List<Phase2Context>> groupedByResourceId(List<Phase2Context> contexts) {\n+        Map<String, List<Phase2Context>> groupedContexts = new HashMap<>(DEFAULT_RESOURCE_SIZE);\n+        contexts.forEach(context -> {\n+            List<Phase2Context> group = groupedContexts.computeIfAbsent(context.resourceId, key -> new LinkedList<>());\n+            group.add(context);\n+        });\n+        return groupedContexts;\n+    }\n+\n+    private void dealWithGroupedContexts(String resourceId, List<Phase2Context> contexts) {\n+        DataSourceManager resourceManager = (DataSourceManager) DefaultResourceManager.get().getResourceManager(BranchType.AT);\n+        DataSourceProxy dataSourceProxy = resourceManager.get(resourceId);\n+        if (dataSourceProxy == null) {\n+            LOGGER.warn(\"Failed to find resource for {}\", resourceId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0c8bca9e7499dfb1f4f9e93f696c9fb5b8ac92e"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzcwNTQwOQ==", "bodyText": "\u4e3a\u4ec0\u4e48\u4e0d\u628a\u5f02\u5e38\u629b\u51fa\u53bb\uff1f", "url": "https://github.com/seata/seata/pull/3258#discussion_r523705409", "createdAt": "2020-11-15T04:21:44Z", "author": {"login": "caohdgege"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/AsyncWorker.java", "diffHunk": "@@ -59,8 +59,113 @@\n \n     private static final int UNDOLOG_DELETE_LIMIT_SIZE = 1000;\n \n+    private static final int ASYNC_COMMIT_BUFFER_LIMIT = ConfigurationFactory.getInstance().getInt(\n+        CLIENT_ASYNC_COMMIT_BUFFER_LIMIT, DEFAULT_CLIENT_ASYNC_COMMIT_BUFFER_LIMIT);\n+\n+    private final BlockingQueue<Phase2Context> commitQueue = new LinkedBlockingQueue<>(ASYNC_COMMIT_BUFFER_LIMIT);\n+\n+    @Override\n+    public BranchStatus branchCommit(BranchType branchType, String xid, long branchId, String resourceId,\n+                                     String applicationData) {\n+        if (!commitQueue.offer(new Phase2Context(branchType, xid, branchId, resourceId, applicationData))) {\n+            LOGGER.warn(\"Async commit buffer is FULL. Rejected branch [{}/{}] will be handled by housekeeping later.\", branchId, xid);\n+        }\n+        return BranchStatus.PhaseTwo_Committed;\n+    }\n+\n+    /**\n+     * Init worker thread to do branch commit\n+     */\n+    public void init() {\n+        LOGGER.info(\"Async Commit Buffer Limit: {}\", ASYNC_COMMIT_BUFFER_LIMIT);\n+        ThreadFactory threadFactory = new NamedThreadFactory(\"AsyncWorker\", 1, true);\n+        ScheduledExecutorService timerExecutor = new ScheduledThreadPoolExecutor(1, threadFactory);\n+        timerExecutor.scheduleAtFixedRate(this::doBranchCommits, 10, 1000, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private void doBranchCommits() {\n+        if (commitQueue.isEmpty()) {\n+            return;\n+        }\n+\n+        // transfer all context currently received to this list\n+        List<Phase2Context> allContexts = new LinkedList<>();\n+        commitQueue.drainTo(allContexts);\n+\n+        // group context by their resourceId\n+        Map<String, List<Phase2Context>> groupedContexts = groupedByResourceId(allContexts);\n+\n+        groupedContexts.forEach(this::dealWithGroupedContexts);\n+    }\n+\n+    Map<String, List<Phase2Context>> groupedByResourceId(List<Phase2Context> contexts) {\n+        Map<String, List<Phase2Context>> groupedContexts = new HashMap<>(DEFAULT_RESOURCE_SIZE);\n+        contexts.forEach(context -> {\n+            List<Phase2Context> group = groupedContexts.computeIfAbsent(context.resourceId, key -> new LinkedList<>());\n+            group.add(context);\n+        });\n+        return groupedContexts;\n+    }\n+\n+    private void dealWithGroupedContexts(String resourceId, List<Phase2Context> contexts) {\n+        DataSourceManager resourceManager = (DataSourceManager) DefaultResourceManager.get().getResourceManager(BranchType.AT);\n+        DataSourceProxy dataSourceProxy = resourceManager.get(resourceId);\n+        if (dataSourceProxy == null) {\n+            LOGGER.warn(\"Failed to find resource for {}\", resourceId);\n+            return;\n+        }\n \n-    private static class Phase2Context {\n+        Connection conn;\n+        try {\n+            conn = dataSourceProxy.getPlainConnection();\n+        } catch (SQLException sqle) {\n+            LOGGER.warn(\"Failed to get connection for async committing on {}\", resourceId, sqle);\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0c8bca9e7499dfb1f4f9e93f696c9fb5b8ac92e"}, "originalPosition": 99}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19d7fe661be13444c71f7fddad759573cba453d2", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/19d7fe661be13444c71f7fddad759573cba453d2", "committedDate": "2020-11-22T12:19:34Z", "message": "Merge branch 'develop' into bugfix-AsyncWorker-OOM"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NzUyNjc2", "url": "https://github.com/seata/seata/pull/3258#pullrequestreview-539752676", "createdAt": "2020-11-27T07:22:26Z", "commit": {"oid": "19d7fe661be13444c71f7fddad759573cba453d2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "907a8aedad03e3d096ae54ab086611f535d026fc", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/907a8aedad03e3d096ae54ab086611f535d026fc", "committedDate": "2020-12-02T06:49:09Z", "message": "Merge branch 'develop' into bugfix-AsyncWorker-OOM"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b989cd73977897154c80a3b9e3326cdb2ff65895", "author": {"user": {"login": "selfishlover", "name": null}}, "url": "https://github.com/seata/seata/commit/b989cd73977897154c80a3b9e3326cdb2ff65895", "committedDate": "2020-12-15T05:49:59Z", "message": "Merge branch 'develop' into bugfix-AsyncWorker-OOM"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMTkzNDgw", "url": "https://github.com/seata/seata/pull/3258#pullrequestreview-552193480", "createdAt": "2020-12-15T08:09:12Z", "commit": {"oid": "907a8aedad03e3d096ae54ab086611f535d026fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODowOToxMlrOIF9-zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODowOToxMlrOIF9-zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEyOTI5Mw==", "bodyText": "why use LinkedList?", "url": "https://github.com/seata/seata/pull/3258#discussion_r543129293", "createdAt": "2020-12-15T08:09:12Z", "author": {"login": "jsbxyyx"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/AsyncWorker.java", "diffHunk": "@@ -59,8 +59,113 @@\n \n     private static final int UNDOLOG_DELETE_LIMIT_SIZE = 1000;\n \n+    private static final int ASYNC_COMMIT_BUFFER_LIMIT = ConfigurationFactory.getInstance().getInt(\n+        CLIENT_ASYNC_COMMIT_BUFFER_LIMIT, DEFAULT_CLIENT_ASYNC_COMMIT_BUFFER_LIMIT);\n+\n+    private final BlockingQueue<Phase2Context> commitQueue = new LinkedBlockingQueue<>(ASYNC_COMMIT_BUFFER_LIMIT);\n+\n+    @Override\n+    public BranchStatus branchCommit(BranchType branchType, String xid, long branchId, String resourceId,\n+                                     String applicationData) {\n+        if (!commitQueue.offer(new Phase2Context(branchType, xid, branchId, resourceId, applicationData))) {\n+            LOGGER.warn(\"Async commit buffer is FULL. Rejected branch [{}/{}] will be handled by housekeeping later.\", branchId, xid);\n+        }\n+        return BranchStatus.PhaseTwo_Committed;\n+    }\n+\n+    /**\n+     * Init worker thread to do branch commit\n+     */\n+    public void init() {\n+        LOGGER.info(\"Async Commit Buffer Limit: {}\", ASYNC_COMMIT_BUFFER_LIMIT);\n+        ThreadFactory threadFactory = new NamedThreadFactory(\"AsyncWorker\", 1, true);\n+        ScheduledExecutorService timerExecutor = new ScheduledThreadPoolExecutor(1, threadFactory);\n+        timerExecutor.scheduleAtFixedRate(this::doBranchCommits, 10, 1000, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private void doBranchCommits() {\n+        if (commitQueue.isEmpty()) {\n+            return;\n+        }\n+\n+        // transfer all context currently received to this list\n+        List<Phase2Context> allContexts = new LinkedList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "907a8aedad03e3d096ae54ab086611f535d026fc"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMTk4MjA0", "url": "https://github.com/seata/seata/pull/3258#pullrequestreview-552198204", "createdAt": "2020-12-15T08:15:44Z", "commit": {"oid": "907a8aedad03e3d096ae54ab086611f535d026fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODoxNTo0NFrOIF-NSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwODoxNTo0NFrOIF-NSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzMzAwMA==", "bodyText": "doBranchCommits must try catch.", "url": "https://github.com/seata/seata/pull/3258#discussion_r543133000", "createdAt": "2020-12-15T08:15:44Z", "author": {"login": "jsbxyyx"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/AsyncWorker.java", "diffHunk": "@@ -59,8 +59,113 @@\n \n     private static final int UNDOLOG_DELETE_LIMIT_SIZE = 1000;\n \n+    private static final int ASYNC_COMMIT_BUFFER_LIMIT = ConfigurationFactory.getInstance().getInt(\n+        CLIENT_ASYNC_COMMIT_BUFFER_LIMIT, DEFAULT_CLIENT_ASYNC_COMMIT_BUFFER_LIMIT);\n+\n+    private final BlockingQueue<Phase2Context> commitQueue = new LinkedBlockingQueue<>(ASYNC_COMMIT_BUFFER_LIMIT);\n+\n+    @Override\n+    public BranchStatus branchCommit(BranchType branchType, String xid, long branchId, String resourceId,\n+                                     String applicationData) {\n+        if (!commitQueue.offer(new Phase2Context(branchType, xid, branchId, resourceId, applicationData))) {\n+            LOGGER.warn(\"Async commit buffer is FULL. Rejected branch [{}/{}] will be handled by housekeeping later.\", branchId, xid);\n+        }\n+        return BranchStatus.PhaseTwo_Committed;\n+    }\n+\n+    /**\n+     * Init worker thread to do branch commit\n+     */\n+    public void init() {\n+        LOGGER.info(\"Async Commit Buffer Limit: {}\", ASYNC_COMMIT_BUFFER_LIMIT);\n+        ThreadFactory threadFactory = new NamedThreadFactory(\"AsyncWorker\", 1, true);\n+        ScheduledExecutorService timerExecutor = new ScheduledThreadPoolExecutor(1, threadFactory);\n+        timerExecutor.scheduleAtFixedRate(this::doBranchCommits, 10, 1000, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "907a8aedad03e3d096ae54ab086611f535d026fc"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMjM5NjE1", "url": "https://github.com/seata/seata/pull/3258#pullrequestreview-552239615", "createdAt": "2020-12-15T09:08:48Z", "commit": {"oid": "907a8aedad03e3d096ae54ab086611f535d026fc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79d47739d5a5bd573a110c3f703303c1dad15229", "author": {"user": {"login": "selfishlover", "name": null}}, "url": "https://github.com/seata/seata/commit/79d47739d5a5bd573a110c3f703303c1dad15229", "committedDate": "2020-12-15T09:18:55Z", "message": "make sure no context will be dropped"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMjg3MDM2", "url": "https://github.com/seata/seata/pull/3258#pullrequestreview-552287036", "createdAt": "2020-12-15T10:02:45Z", "commit": {"oid": "79d47739d5a5bd573a110c3f703303c1dad15229"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDowMjo0NVrOIGCtSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMDowMjo0NVrOIGCtSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzIwNjcyOA==", "bodyText": "may be throws thread interrupt exception or Error. suggest try catch Throwable.", "url": "https://github.com/seata/seata/pull/3258#discussion_r543206728", "createdAt": "2020-12-15T10:02:45Z", "author": {"login": "jsbxyyx"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/AsyncWorker.java", "diffHunk": "@@ -59,8 +60,125 @@\n \n     private static final int UNDOLOG_DELETE_LIMIT_SIZE = 1000;\n \n+    private static final int ASYNC_COMMIT_BUFFER_LIMIT = ConfigurationFactory.getInstance().getInt(\n+        CLIENT_ASYNC_COMMIT_BUFFER_LIMIT, DEFAULT_CLIENT_ASYNC_COMMIT_BUFFER_LIMIT);\n+\n+    private final BlockingQueue<Phase2Context> commitQueue;\n+\n+    private final ScheduledExecutorService scheduledExecutor;\n+\n+    public AsyncWorker() {\n+        LOGGER.info(\"Async Commit Buffer Limit: {}\", ASYNC_COMMIT_BUFFER_LIMIT);\n+        commitQueue = new LinkedBlockingQueue<>(ASYNC_COMMIT_BUFFER_LIMIT);\n+\n+        ThreadFactory threadFactory = new NamedThreadFactory(\"AsyncWorker\", 2, true);\n+        scheduledExecutor = new ScheduledThreadPoolExecutor(2, threadFactory);\n+        scheduledExecutor.scheduleAtFixedRate(this::doBranchCommits, 10, 1000, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79d47739d5a5bd573a110c3f703303c1dad15229"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d19bf23cedd3139c40a4664354ad306fe3f8d48a", "author": {"user": {"login": "selfishlover", "name": null}}, "url": "https://github.com/seata/seata/commit/d19bf23cedd3139c40a4664354ad306fe3f8d48a", "committedDate": "2020-12-16T03:01:34Z", "message": "minify AsyncWorker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e49f8e9de44c8704ca814213f072e4616a5a6a6", "author": {"user": {"login": "selfishlover", "name": null}}, "url": "https://github.com/seata/seata/commit/8e49f8e9de44c8704ca814213f072e4616a5a6a6", "committedDate": "2020-12-17T03:37:27Z", "message": "test ci again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c63fe60a00918bd1126b8128a0d079f9d46a0446", "author": {"user": {"login": "selfishlover", "name": null}}, "url": "https://github.com/seata/seata/commit/c63fe60a00918bd1126b8128a0d079f9d46a0446", "committedDate": "2020-12-21T02:07:45Z", "message": "Merge branch 'develop' into bugfix-AsyncWorker-OOM"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTAwNjc0", "url": "https://github.com/seata/seata/pull/3258#pullrequestreview-556100674", "createdAt": "2020-12-21T02:41:36Z", "commit": {"oid": "c63fe60a00918bd1126b8128a0d079f9d46a0446"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3491, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}