{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NzI4NDk4", "number": 2369, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwODo1MTo0OFrODmAOwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMzowMDowM1rODu3-SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTc2MjU3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/store/db/sql/OceanbaseLogStoreSqls.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwODo1MTo0OFrOFzNSmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMjozODo1NlrOGA_qsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzOTQ0OA==", "bodyText": "Why here inherit mysql?,This will lead to a strong correlation between Oceanbase and Mysql.", "url": "https://github.com/seata/seata/pull/2369#discussion_r389239448", "createdAt": "2020-03-07T08:51:48Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/store/db/sql/OceanbaseLogStoreSqls.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.store.db.sql;\n+\n+import io.seata.common.loader.LoadLevel;\n+\n+/**\n+ * Database log store oceanbase sql\n+ * @author will\n+ */\n+@LoadLevel(name = \"oceanbase\")\n+public class OceanbaseLogStoreSqls extends MysqlLogStoreSqls {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3b31a8409f7e3237c452e4459a1f5d15cee3727"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1NTMzOQ==", "bodyText": "Because I think oceanbase was compatible with mysql", "url": "https://github.com/seata/seata/pull/2369#discussion_r389255339", "createdAt": "2020-03-07T13:39:14Z", "author": {"login": "l81893521"}, "path": "core/src/main/java/io/seata/core/store/db/sql/OceanbaseLogStoreSqls.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.store.db.sql;\n+\n+import io.seata.common.loader.LoadLevel;\n+\n+/**\n+ * Database log store oceanbase sql\n+ * @author will\n+ */\n+@LoadLevel(name = \"oceanbase\")\n+public class OceanbaseLogStoreSqls extends MysqlLogStoreSqls {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzOTQ0OA=="}, "originalCommit": {"oid": "e3b31a8409f7e3237c452e4459a1f5d15cee3727"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM3NTczMQ==", "bodyText": "Because I think oceanbase was compatible with mysql\n\nis ok.", "url": "https://github.com/seata/seata/pull/2369#discussion_r389375731", "createdAt": "2020-03-08T14:45:07Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/store/db/sql/OceanbaseLogStoreSqls.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.store.db.sql;\n+\n+import io.seata.common.loader.LoadLevel;\n+\n+/**\n+ * Database log store oceanbase sql\n+ * @author will\n+ */\n+@LoadLevel(name = \"oceanbase\")\n+public class OceanbaseLogStoreSqls extends MysqlLogStoreSqls {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzOTQ0OA=="}, "originalCommit": {"oid": "e3b31a8409f7e3237c452e4459a1f5d15cee3727"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5NjMwNw==", "bodyText": "Tidb as same as mysql too, please add.", "url": "https://github.com/seata/seata/pull/2369#discussion_r403696307", "createdAt": "2020-04-05T12:38:56Z", "author": {"login": "zjinlei"}, "path": "core/src/main/java/io/seata/core/store/db/sql/OceanbaseLogStoreSqls.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.store.db.sql;\n+\n+import io.seata.common.loader.LoadLevel;\n+\n+/**\n+ * Database log store oceanbase sql\n+ * @author will\n+ */\n+@LoadLevel(name = \"oceanbase\")\n+public class OceanbaseLogStoreSqls extends MysqlLogStoreSqls {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzOTQ0OA=="}, "originalCommit": {"oid": "e3b31a8409f7e3237c452e4459a1f5d15cee3727"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjcwNjg0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/store/db/sql/LogStoreSqlsFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMjo1Mjo1OFrOFzVDZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMjo1Mjo1OFrOFzVDZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2NjYyOA==", "bodyText": "Should not support multiple database, Can be changed to a single.", "url": "https://github.com/seata/seata/pull/2369#discussion_r389366628", "createdAt": "2020-03-08T12:52:58Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/store/db/sql/LogStoreSqlsFactory.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.store.db.sql;\n+\n+import io.seata.common.loader.EnhancedServiceLoader;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * @author will\n+ */\n+public class LogStoreSqlsFactory {\n+\n+    private static Map<String, LogStoreSqls> LOG_STORE_SQLS_MAP = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3b31a8409f7e3237c452e4459a1f5d15cee3727"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDc3MDY0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/store/db/sql/log/LogStoreSqlsFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMjo0ODowNFrOGA_uyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMjo0ODowNFrOGA_uyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5NzM1NQ==", "bodyText": "#2135 has merged,  LogStoreSqlsFactory can be deleted.", "url": "https://github.com/seata/seata/pull/2369#discussion_r403697355", "createdAt": "2020-04-05T12:48:04Z", "author": {"login": "zjinlei"}, "path": "core/src/main/java/io/seata/core/store/db/sql/log/LogStoreSqlsFactory.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.store.db.sql.log;\n+\n+import io.seata.common.loader.EnhancedServiceLoader;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * @author will\n+ */\n+public class LogStoreSqlsFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a82b178bea5e0bc22bb2c7cd976a18cdf4f7120"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDc4MTUyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/store/db/sql/log/AbstractLogStoreSqls.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMzowMDowM1rOGA_0Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDozNTo0OVrOGCyPoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5ODc4Nw==", "bodyText": "Suggest:\nreturn getInsertGlobalTransactionSQL().replace(GLOBAL_TABLE_PLACEHOLD, globalTable);\nabstract String getInsertGlobalTransactionSQL();\nSame for other sql", "url": "https://github.com/seata/seata/pull/2369#discussion_r403698787", "createdAt": "2020-04-05T13:00:03Z", "author": {"login": "zjinlei"}, "path": "core/src/main/java/io/seata/core/store/db/sql/log/AbstractLogStoreSqls.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.store.db.sql.log;\n+\n+import io.seata.common.exception.NotSupportYetException;\n+import io.seata.config.Configuration;\n+import io.seata.config.ConfigurationFactory;\n+import io.seata.core.constants.ConfigurationKeys;\n+import io.seata.core.constants.ServerTableColumnsName;\n+\n+\n+/**\n+ * The type Abstract log store sqls\n+ * @author will\n+ */\n+public abstract class AbstractLogStoreSqls implements LogStoreSqls {\n+\n+    /**\n+     * The constant CONFIG.\n+     */\n+    protected static final Configuration CONFIG = ConfigurationFactory.getInstance();\n+\n+    /**\n+     * The constant GLOBAL_TABLE_PLACEHOLD.\n+     */\n+    public static final String GLOBAL_TABLE_PLACEHOLD = \" #global_table# \";\n+\n+    /**\n+     * The constant BRANCH_TABLE_PLACEHOLD.\n+     */\n+    public static final String BRANCH_TABLE_PLACEHOLD = \" #branch_table# \";\n+\n+    /**\n+     * The constant PRAMETER_PLACEHOLD.\n+     */\n+    public static final String PRAMETER_PLACEHOLD = \" #PRAMETER_PLACEHOLD# \";\n+\n+    /**\n+     * The constant ALL_GLOBAL_COLUMNS.\n+     * xid, transaction_id, status, application_id, transaction_service_group, transaction_name, timeout, begin_time, application_data, gmt_create, gmt_modified\n+     */\n+    public static final String ALL_GLOBAL_COLUMNS\n+            = ServerTableColumnsName.GLOBAL_TABLE_XID + \", \" + ServerTableColumnsName.GLOBAL_TABLE_TRANSACTION_ID + \", \"\n+            + ServerTableColumnsName.GLOBAL_TABLE_STATUS + \", \" + ServerTableColumnsName.GLOBAL_TABLE_APPLICATION_ID + \", \"\n+            + ServerTableColumnsName.GLOBAL_TABLE_TRANSACTION_SERVICE_GROUP + \", \" + ServerTableColumnsName.GLOBAL_TABLE_TRANSACTION_NAME + \", \"\n+            + ServerTableColumnsName.GLOBAL_TABLE_TIMEOUT + \", \" + ServerTableColumnsName.GLOBAL_TABLE_BEGIN_TIME + \", \"\n+            + ServerTableColumnsName.GLOBAL_TABLE_APPLICATION_DATA + \", \" + ServerTableColumnsName.GLOBAL_TABLE_GMT_CREATE + \", \"\n+            + ServerTableColumnsName.GLOBAL_TABLE_GMT_MODIFIED;\n+\n+    /**\n+     * The constant ALL_BRANCH_COLUMNS.\n+     * xid, transaction_id, branch_id, resource_group_id, resource_id, lock_key, branch_type, status, client_id, application_data, gmt_create, gmt_modified\n+     */\n+    protected static final String ALL_BRANCH_COLUMNS\n+            = ServerTableColumnsName.BRANCH_TABLE_XID + \", \" + ServerTableColumnsName.BRANCH_TABLE_TRANSACTION_ID + \", \"\n+            + ServerTableColumnsName.BRANCH_TABLE_BRANCH_ID + \", \" + ServerTableColumnsName.BRANCH_TABLE_RESOURCE_GROUP_ID + \", \"\n+            + ServerTableColumnsName.BRANCH_TABLE_RESOURCE_ID + \", \"\n+            + ServerTableColumnsName.BRANCH_TABLE_BRANCH_TYPE + \", \" + ServerTableColumnsName.BRANCH_TABLE_STATUS + \", \"\n+            + ServerTableColumnsName.BRANCH_TABLE_CLIENT_ID + \", \" + ServerTableColumnsName.BRANCH_TABLE_APPLICATION_DATA + \", \"\n+            + ServerTableColumnsName.BRANCH_TABLE_GMT_CREATE + \", \" + ServerTableColumnsName.BRANCH_TABLE_GMT_MODIFIED;\n+\n+    /**\n+     * The constant DELETE_GLOBAL_TRANSACTION.\n+     */\n+    public static final String DELETE_GLOBAL_TRANSACTION = \"delete from \" + GLOBAL_TABLE_PLACEHOLD + \" where \" + ServerTableColumnsName.GLOBAL_TABLE_XID + \" = ?\";\n+\n+    /**\n+     * The constant QUERY_GLOBAL_TRANSACTION.\n+     */\n+    public static final String QUERY_GLOBAL_TRANSACTION = \"select \" + ALL_GLOBAL_COLUMNS + \" from \"\n+            + GLOBAL_TABLE_PLACEHOLD + \" where \" + ServerTableColumnsName.GLOBAL_TABLE_XID + \" = ?\";\n+\n+    /**\n+     * The constant QUERY_GLOBAL_TRANSACTION_ID.\n+     */\n+    public static final String QUERY_GLOBAL_TRANSACTION_BY_ID = \"select \" + ALL_GLOBAL_COLUMNS + \" from \"\n+            + GLOBAL_TABLE_PLACEHOLD + \" where \" + ServerTableColumnsName.GLOBAL_TABLE_TRANSACTION_ID + \" = ?\";\n+\n+    /**\n+     * The constant DELETE_BRANCH_TRANSACTION_BY_BRANCH_ID.\n+     */\n+    public static final String DELETE_BRANCH_TRANSACTION_BY_BRANCH_ID = \"delete from \" + BRANCH_TABLE_PLACEHOLD\n+            + \" where \" + ServerTableColumnsName.BRANCH_TABLE_XID + \" = ? and \" + ServerTableColumnsName.BRANCH_TABLE_BRANCH_ID\n+            + \" = ?\";\n+\n+    /**\n+     * The constant DELETE_BRANCH_TRANSACTION_BY_XID.\n+     */\n+    public static final String DELETE_BRANCH_TRANSACTION_BY_XID = \"delete from \" + BRANCH_TABLE_PLACEHOLD\n+            + \" where \" + ServerTableColumnsName.BRANCH_TABLE_XID + \" = ?\";\n+\n+\n+    /**\n+     * The constant QUERY_BRANCH_TRANSACTION.\n+     */\n+    public static final String QUERY_BRANCH_TRANSACTION = \"select \" + ALL_BRANCH_COLUMNS + \" from \"\n+            + BRANCH_TABLE_PLACEHOLD + \" where \" + ServerTableColumnsName.BRANCH_TABLE_XID + \" = ? order by \"\n+            + ServerTableColumnsName.BRANCH_TABLE_GMT_CREATE + \" asc\";\n+\n+    /**\n+     * The constant QUERY_BRANCH_TRANSACTION_XIDS.\n+     */\n+    public static final String QUERY_BRANCH_TRANSACTION_XIDS = \"select \" + ALL_BRANCH_COLUMNS + \" from \"\n+            + BRANCH_TABLE_PLACEHOLD + \" where \" + ServerTableColumnsName.BRANCH_TABLE_XID + \" in (\" + PRAMETER_PLACEHOLD + \") order by \"\n+            + ServerTableColumnsName.BRANCH_TABLE_GMT_CREATE + \" asc\";\n+\n+    /**\n+     * The constant CHECK_MAX_TRANS_ID.\n+     */\n+    public static final String QUERY_MAX_TRANS_ID = \"select max(\" + ServerTableColumnsName.GLOBAL_TABLE_TRANSACTION_ID\n+            + \") from \" + GLOBAL_TABLE_PLACEHOLD + \" where \" + ServerTableColumnsName.GLOBAL_TABLE_TRANSACTION_ID\n+            + \" < ? and \" + ServerTableColumnsName.GLOBAL_TABLE_TRANSACTION_ID + \" > ?\";\n+\n+    /**\n+     * The constant CHECK_MAX_BTANCH_ID.\n+     */\n+    public static final String QUERY_MAX_BTANCH_ID = \"select max(\" + ServerTableColumnsName.BRANCH_TABLE_BRANCH_ID\n+            + \") from \" + BRANCH_TABLE_PLACEHOLD + \" where \" + ServerTableColumnsName.BRANCH_TABLE_BRANCH_ID + \" < ? and \"\n+            + ServerTableColumnsName.BRANCH_TABLE_BRANCH_ID + \" > ?\";\n+\n+    @Override\n+    public String getInsertGlobalTransactionSQL(String globalTable) {\n+        throw new NotSupportYetException(\"unknown dbType:\" + CONFIG.getConfig(ConfigurationKeys.STORE_DB_TYPE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a82b178bea5e0bc22bb2c7cd976a18cdf4f7120"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDczODg5MQ==", "bodyText": "OK", "url": "https://github.com/seata/seata/pull/2369#discussion_r404738891", "createdAt": "2020-04-07T11:33:06Z", "author": {"login": "l81893521"}, "path": "core/src/main/java/io/seata/core/store/db/sql/log/AbstractLogStoreSqls.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.store.db.sql.log;\n+\n+import io.seata.common.exception.NotSupportYetException;\n+import io.seata.config.Configuration;\n+import io.seata.config.ConfigurationFactory;\n+import io.seata.core.constants.ConfigurationKeys;\n+import io.seata.core.constants.ServerTableColumnsName;\n+\n+\n+/**\n+ * The type Abstract log store sqls\n+ * @author will\n+ */\n+public abstract class AbstractLogStoreSqls implements LogStoreSqls {\n+\n+    /**\n+     * The constant CONFIG.\n+     */\n+    protected static final Configuration CONFIG = ConfigurationFactory.getInstance();\n+\n+    /**\n+     * The constant GLOBAL_TABLE_PLACEHOLD.\n+     */\n+    public static final String GLOBAL_TABLE_PLACEHOLD = \" #global_table# \";\n+\n+    /**\n+     * The constant BRANCH_TABLE_PLACEHOLD.\n+     */\n+    public static final String BRANCH_TABLE_PLACEHOLD = \" #branch_table# \";\n+\n+    /**\n+     * The constant PRAMETER_PLACEHOLD.\n+     */\n+    public static final String PRAMETER_PLACEHOLD = \" #PRAMETER_PLACEHOLD# \";\n+\n+    /**\n+     * The constant ALL_GLOBAL_COLUMNS.\n+     * xid, transaction_id, status, application_id, transaction_service_group, transaction_name, timeout, begin_time, application_data, gmt_create, gmt_modified\n+     */\n+    public static final String ALL_GLOBAL_COLUMNS\n+            = ServerTableColumnsName.GLOBAL_TABLE_XID + \", \" + ServerTableColumnsName.GLOBAL_TABLE_TRANSACTION_ID + \", \"\n+            + ServerTableColumnsName.GLOBAL_TABLE_STATUS + \", \" + ServerTableColumnsName.GLOBAL_TABLE_APPLICATION_ID + \", \"\n+            + ServerTableColumnsName.GLOBAL_TABLE_TRANSACTION_SERVICE_GROUP + \", \" + ServerTableColumnsName.GLOBAL_TABLE_TRANSACTION_NAME + \", \"\n+            + ServerTableColumnsName.GLOBAL_TABLE_TIMEOUT + \", \" + ServerTableColumnsName.GLOBAL_TABLE_BEGIN_TIME + \", \"\n+            + ServerTableColumnsName.GLOBAL_TABLE_APPLICATION_DATA + \", \" + ServerTableColumnsName.GLOBAL_TABLE_GMT_CREATE + \", \"\n+            + ServerTableColumnsName.GLOBAL_TABLE_GMT_MODIFIED;\n+\n+    /**\n+     * The constant ALL_BRANCH_COLUMNS.\n+     * xid, transaction_id, branch_id, resource_group_id, resource_id, lock_key, branch_type, status, client_id, application_data, gmt_create, gmt_modified\n+     */\n+    protected static final String ALL_BRANCH_COLUMNS\n+            = ServerTableColumnsName.BRANCH_TABLE_XID + \", \" + ServerTableColumnsName.BRANCH_TABLE_TRANSACTION_ID + \", \"\n+            + ServerTableColumnsName.BRANCH_TABLE_BRANCH_ID + \", \" + ServerTableColumnsName.BRANCH_TABLE_RESOURCE_GROUP_ID + \", \"\n+            + ServerTableColumnsName.BRANCH_TABLE_RESOURCE_ID + \", \"\n+            + ServerTableColumnsName.BRANCH_TABLE_BRANCH_TYPE + \", \" + ServerTableColumnsName.BRANCH_TABLE_STATUS + \", \"\n+            + ServerTableColumnsName.BRANCH_TABLE_CLIENT_ID + \", \" + ServerTableColumnsName.BRANCH_TABLE_APPLICATION_DATA + \", \"\n+            + ServerTableColumnsName.BRANCH_TABLE_GMT_CREATE + \", \" + ServerTableColumnsName.BRANCH_TABLE_GMT_MODIFIED;\n+\n+    /**\n+     * The constant DELETE_GLOBAL_TRANSACTION.\n+     */\n+    public static final String DELETE_GLOBAL_TRANSACTION = \"delete from \" + GLOBAL_TABLE_PLACEHOLD + \" where \" + ServerTableColumnsName.GLOBAL_TABLE_XID + \" = ?\";\n+\n+    /**\n+     * The constant QUERY_GLOBAL_TRANSACTION.\n+     */\n+    public static final String QUERY_GLOBAL_TRANSACTION = \"select \" + ALL_GLOBAL_COLUMNS + \" from \"\n+            + GLOBAL_TABLE_PLACEHOLD + \" where \" + ServerTableColumnsName.GLOBAL_TABLE_XID + \" = ?\";\n+\n+    /**\n+     * The constant QUERY_GLOBAL_TRANSACTION_ID.\n+     */\n+    public static final String QUERY_GLOBAL_TRANSACTION_BY_ID = \"select \" + ALL_GLOBAL_COLUMNS + \" from \"\n+            + GLOBAL_TABLE_PLACEHOLD + \" where \" + ServerTableColumnsName.GLOBAL_TABLE_TRANSACTION_ID + \" = ?\";\n+\n+    /**\n+     * The constant DELETE_BRANCH_TRANSACTION_BY_BRANCH_ID.\n+     */\n+    public static final String DELETE_BRANCH_TRANSACTION_BY_BRANCH_ID = \"delete from \" + BRANCH_TABLE_PLACEHOLD\n+            + \" where \" + ServerTableColumnsName.BRANCH_TABLE_XID + \" = ? and \" + ServerTableColumnsName.BRANCH_TABLE_BRANCH_ID\n+            + \" = ?\";\n+\n+    /**\n+     * The constant DELETE_BRANCH_TRANSACTION_BY_XID.\n+     */\n+    public static final String DELETE_BRANCH_TRANSACTION_BY_XID = \"delete from \" + BRANCH_TABLE_PLACEHOLD\n+            + \" where \" + ServerTableColumnsName.BRANCH_TABLE_XID + \" = ?\";\n+\n+\n+    /**\n+     * The constant QUERY_BRANCH_TRANSACTION.\n+     */\n+    public static final String QUERY_BRANCH_TRANSACTION = \"select \" + ALL_BRANCH_COLUMNS + \" from \"\n+            + BRANCH_TABLE_PLACEHOLD + \" where \" + ServerTableColumnsName.BRANCH_TABLE_XID + \" = ? order by \"\n+            + ServerTableColumnsName.BRANCH_TABLE_GMT_CREATE + \" asc\";\n+\n+    /**\n+     * The constant QUERY_BRANCH_TRANSACTION_XIDS.\n+     */\n+    public static final String QUERY_BRANCH_TRANSACTION_XIDS = \"select \" + ALL_BRANCH_COLUMNS + \" from \"\n+            + BRANCH_TABLE_PLACEHOLD + \" where \" + ServerTableColumnsName.BRANCH_TABLE_XID + \" in (\" + PRAMETER_PLACEHOLD + \") order by \"\n+            + ServerTableColumnsName.BRANCH_TABLE_GMT_CREATE + \" asc\";\n+\n+    /**\n+     * The constant CHECK_MAX_TRANS_ID.\n+     */\n+    public static final String QUERY_MAX_TRANS_ID = \"select max(\" + ServerTableColumnsName.GLOBAL_TABLE_TRANSACTION_ID\n+            + \") from \" + GLOBAL_TABLE_PLACEHOLD + \" where \" + ServerTableColumnsName.GLOBAL_TABLE_TRANSACTION_ID\n+            + \" < ? and \" + ServerTableColumnsName.GLOBAL_TABLE_TRANSACTION_ID + \" > ?\";\n+\n+    /**\n+     * The constant CHECK_MAX_BTANCH_ID.\n+     */\n+    public static final String QUERY_MAX_BTANCH_ID = \"select max(\" + ServerTableColumnsName.BRANCH_TABLE_BRANCH_ID\n+            + \") from \" + BRANCH_TABLE_PLACEHOLD + \" where \" + ServerTableColumnsName.BRANCH_TABLE_BRANCH_ID + \" < ? and \"\n+            + ServerTableColumnsName.BRANCH_TABLE_BRANCH_ID + \" > ?\";\n+\n+    @Override\n+    public String getInsertGlobalTransactionSQL(String globalTable) {\n+        throw new NotSupportYetException(\"unknown dbType:\" + CONFIG.getConfig(ConfigurationKeys.STORE_DB_TYPE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5ODc4Nw=="}, "originalCommit": {"oid": "3a82b178bea5e0bc22bb2c7cd976a18cdf4f7120"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU3MzUzNw==", "bodyText": "fixed", "url": "https://github.com/seata/seata/pull/2369#discussion_r405573537", "createdAt": "2020-04-08T14:35:49Z", "author": {"login": "l81893521"}, "path": "core/src/main/java/io/seata/core/store/db/sql/log/AbstractLogStoreSqls.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.store.db.sql.log;\n+\n+import io.seata.common.exception.NotSupportYetException;\n+import io.seata.config.Configuration;\n+import io.seata.config.ConfigurationFactory;\n+import io.seata.core.constants.ConfigurationKeys;\n+import io.seata.core.constants.ServerTableColumnsName;\n+\n+\n+/**\n+ * The type Abstract log store sqls\n+ * @author will\n+ */\n+public abstract class AbstractLogStoreSqls implements LogStoreSqls {\n+\n+    /**\n+     * The constant CONFIG.\n+     */\n+    protected static final Configuration CONFIG = ConfigurationFactory.getInstance();\n+\n+    /**\n+     * The constant GLOBAL_TABLE_PLACEHOLD.\n+     */\n+    public static final String GLOBAL_TABLE_PLACEHOLD = \" #global_table# \";\n+\n+    /**\n+     * The constant BRANCH_TABLE_PLACEHOLD.\n+     */\n+    public static final String BRANCH_TABLE_PLACEHOLD = \" #branch_table# \";\n+\n+    /**\n+     * The constant PRAMETER_PLACEHOLD.\n+     */\n+    public static final String PRAMETER_PLACEHOLD = \" #PRAMETER_PLACEHOLD# \";\n+\n+    /**\n+     * The constant ALL_GLOBAL_COLUMNS.\n+     * xid, transaction_id, status, application_id, transaction_service_group, transaction_name, timeout, begin_time, application_data, gmt_create, gmt_modified\n+     */\n+    public static final String ALL_GLOBAL_COLUMNS\n+            = ServerTableColumnsName.GLOBAL_TABLE_XID + \", \" + ServerTableColumnsName.GLOBAL_TABLE_TRANSACTION_ID + \", \"\n+            + ServerTableColumnsName.GLOBAL_TABLE_STATUS + \", \" + ServerTableColumnsName.GLOBAL_TABLE_APPLICATION_ID + \", \"\n+            + ServerTableColumnsName.GLOBAL_TABLE_TRANSACTION_SERVICE_GROUP + \", \" + ServerTableColumnsName.GLOBAL_TABLE_TRANSACTION_NAME + \", \"\n+            + ServerTableColumnsName.GLOBAL_TABLE_TIMEOUT + \", \" + ServerTableColumnsName.GLOBAL_TABLE_BEGIN_TIME + \", \"\n+            + ServerTableColumnsName.GLOBAL_TABLE_APPLICATION_DATA + \", \" + ServerTableColumnsName.GLOBAL_TABLE_GMT_CREATE + \", \"\n+            + ServerTableColumnsName.GLOBAL_TABLE_GMT_MODIFIED;\n+\n+    /**\n+     * The constant ALL_BRANCH_COLUMNS.\n+     * xid, transaction_id, branch_id, resource_group_id, resource_id, lock_key, branch_type, status, client_id, application_data, gmt_create, gmt_modified\n+     */\n+    protected static final String ALL_BRANCH_COLUMNS\n+            = ServerTableColumnsName.BRANCH_TABLE_XID + \", \" + ServerTableColumnsName.BRANCH_TABLE_TRANSACTION_ID + \", \"\n+            + ServerTableColumnsName.BRANCH_TABLE_BRANCH_ID + \", \" + ServerTableColumnsName.BRANCH_TABLE_RESOURCE_GROUP_ID + \", \"\n+            + ServerTableColumnsName.BRANCH_TABLE_RESOURCE_ID + \", \"\n+            + ServerTableColumnsName.BRANCH_TABLE_BRANCH_TYPE + \", \" + ServerTableColumnsName.BRANCH_TABLE_STATUS + \", \"\n+            + ServerTableColumnsName.BRANCH_TABLE_CLIENT_ID + \", \" + ServerTableColumnsName.BRANCH_TABLE_APPLICATION_DATA + \", \"\n+            + ServerTableColumnsName.BRANCH_TABLE_GMT_CREATE + \", \" + ServerTableColumnsName.BRANCH_TABLE_GMT_MODIFIED;\n+\n+    /**\n+     * The constant DELETE_GLOBAL_TRANSACTION.\n+     */\n+    public static final String DELETE_GLOBAL_TRANSACTION = \"delete from \" + GLOBAL_TABLE_PLACEHOLD + \" where \" + ServerTableColumnsName.GLOBAL_TABLE_XID + \" = ?\";\n+\n+    /**\n+     * The constant QUERY_GLOBAL_TRANSACTION.\n+     */\n+    public static final String QUERY_GLOBAL_TRANSACTION = \"select \" + ALL_GLOBAL_COLUMNS + \" from \"\n+            + GLOBAL_TABLE_PLACEHOLD + \" where \" + ServerTableColumnsName.GLOBAL_TABLE_XID + \" = ?\";\n+\n+    /**\n+     * The constant QUERY_GLOBAL_TRANSACTION_ID.\n+     */\n+    public static final String QUERY_GLOBAL_TRANSACTION_BY_ID = \"select \" + ALL_GLOBAL_COLUMNS + \" from \"\n+            + GLOBAL_TABLE_PLACEHOLD + \" where \" + ServerTableColumnsName.GLOBAL_TABLE_TRANSACTION_ID + \" = ?\";\n+\n+    /**\n+     * The constant DELETE_BRANCH_TRANSACTION_BY_BRANCH_ID.\n+     */\n+    public static final String DELETE_BRANCH_TRANSACTION_BY_BRANCH_ID = \"delete from \" + BRANCH_TABLE_PLACEHOLD\n+            + \" where \" + ServerTableColumnsName.BRANCH_TABLE_XID + \" = ? and \" + ServerTableColumnsName.BRANCH_TABLE_BRANCH_ID\n+            + \" = ?\";\n+\n+    /**\n+     * The constant DELETE_BRANCH_TRANSACTION_BY_XID.\n+     */\n+    public static final String DELETE_BRANCH_TRANSACTION_BY_XID = \"delete from \" + BRANCH_TABLE_PLACEHOLD\n+            + \" where \" + ServerTableColumnsName.BRANCH_TABLE_XID + \" = ?\";\n+\n+\n+    /**\n+     * The constant QUERY_BRANCH_TRANSACTION.\n+     */\n+    public static final String QUERY_BRANCH_TRANSACTION = \"select \" + ALL_BRANCH_COLUMNS + \" from \"\n+            + BRANCH_TABLE_PLACEHOLD + \" where \" + ServerTableColumnsName.BRANCH_TABLE_XID + \" = ? order by \"\n+            + ServerTableColumnsName.BRANCH_TABLE_GMT_CREATE + \" asc\";\n+\n+    /**\n+     * The constant QUERY_BRANCH_TRANSACTION_XIDS.\n+     */\n+    public static final String QUERY_BRANCH_TRANSACTION_XIDS = \"select \" + ALL_BRANCH_COLUMNS + \" from \"\n+            + BRANCH_TABLE_PLACEHOLD + \" where \" + ServerTableColumnsName.BRANCH_TABLE_XID + \" in (\" + PRAMETER_PLACEHOLD + \") order by \"\n+            + ServerTableColumnsName.BRANCH_TABLE_GMT_CREATE + \" asc\";\n+\n+    /**\n+     * The constant CHECK_MAX_TRANS_ID.\n+     */\n+    public static final String QUERY_MAX_TRANS_ID = \"select max(\" + ServerTableColumnsName.GLOBAL_TABLE_TRANSACTION_ID\n+            + \") from \" + GLOBAL_TABLE_PLACEHOLD + \" where \" + ServerTableColumnsName.GLOBAL_TABLE_TRANSACTION_ID\n+            + \" < ? and \" + ServerTableColumnsName.GLOBAL_TABLE_TRANSACTION_ID + \" > ?\";\n+\n+    /**\n+     * The constant CHECK_MAX_BTANCH_ID.\n+     */\n+    public static final String QUERY_MAX_BTANCH_ID = \"select max(\" + ServerTableColumnsName.BRANCH_TABLE_BRANCH_ID\n+            + \") from \" + BRANCH_TABLE_PLACEHOLD + \" where \" + ServerTableColumnsName.BRANCH_TABLE_BRANCH_ID + \" < ? and \"\n+            + ServerTableColumnsName.BRANCH_TABLE_BRANCH_ID + \" > ?\";\n+\n+    @Override\n+    public String getInsertGlobalTransactionSQL(String globalTable) {\n+        throw new NotSupportYetException(\"unknown dbType:\" + CONFIG.getConfig(ConfigurationKeys.STORE_DB_TYPE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY5ODc4Nw=="}, "originalCommit": {"oid": "3a82b178bea5e0bc22bb2c7cd976a18cdf4f7120"}, "originalPosition": 136}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1669, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}