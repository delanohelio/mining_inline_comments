{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5Mjc0Nzc3", "number": 2622, "title": "feature: support version valid check", "bodyText": "Signed-off-by: slievrly slievrly@163.com\n\n\u2160. Describe what this PR did\nfeature: support version valid check\n\u2161. Does this pull request fix one issue?\n\n\u2162. Why don't you add test cases (unit test/integration test)?\n\u2163. Describe how to verify it\n\u2164. Special notes for reviews", "createdAt": "2020-04-27T06:10:51Z", "url": "https://github.com/seata/seata/pull/2622", "merged": true, "mergeCommit": {"oid": "90a31ea5b819d655b28dc4a0ec84bb172c8e4216"}, "closed": true, "closedAt": "2020-07-03T03:07:40Z", "author": {"login": "slievrly"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbpBxkgH2gAyNDA5Mjc0Nzc3OjlhNzVkNTcyZDU4MzM2ZmIwYjdlZWNiNWQ1MTc2MWM1NmM0YTU3YzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcxKWq3gH2gAyNDA5Mjc0Nzc3OjRkMmUyMWQ0OTgwOTE4M2I2MzJiNDYyMzA5Y2Y4MjExOTFjZWNhNjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9a75d572d58336fb0b7eecb5d51761c56c4a57c3", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/9a75d572d58336fb0b7eecb5d51761c56c4a57c3", "committedDate": "2020-04-27T06:10:05Z", "message": "feature: support version valid check\n\nSigned-off-by: slievrly <slievrly@163.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c8bbefcec70225d245f61ca049fdf561ea5b4d9", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/6c8bbefcec70225d245f61ca049fdf561ea5b4d9", "committedDate": "2020-04-27T06:13:53Z", "message": "feature: support version valid check\n\nSigned-off-by: slievrly <slievrly@163.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c71561f1e789a7f9795ec505addbf7aa8b807ca4", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/c71561f1e789a7f9795ec505addbf7aa8b807ca4", "committedDate": "2020-04-27T06:15:45Z", "message": "feature: support version valid check\n\nSigned-off-by: slievrly <slievrly@163.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a90cc27743566730cf78bb338ce7de5c86665ead", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/a90cc27743566730cf78bb338ce7de5c86665ead", "committedDate": "2020-04-27T07:05:25Z", "message": "Merge branch 'develop' into auth"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNDY1MzUw", "url": "https://github.com/seata/seata/pull/2622#pullrequestreview-401465350", "createdAt": "2020-04-28T03:02:35Z", "commit": {"oid": "a90cc27743566730cf78bb338ce7de5c86665ead"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzowMjozNVrOGNAZyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzowMzoxMFrOGNAakg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MTI3Mw==", "bodyText": "Is it clearer to change \u3010current - divideVersion > 0\u3011 to \u3010current > divideVersion\u3011", "url": "https://github.com/seata/seata/pull/2622#discussion_r416291273", "createdAt": "2020-04-28T03:02:35Z", "author": {"login": "ph3636"}, "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,35 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current - divideVersion > 0 && clientVersion - divideVersion < 0) || (current - divideVersion < 0 && clientVersion - divideVersion > 0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a90cc27743566730cf78bb338ce7de5c86665ead"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI5MTQ3NA==", "bodyText": "Why not fix it to 3?\nif (size != 3 ) {\nthrow ...\n}", "url": "https://github.com/seata/seata/pull/2622#discussion_r416291474", "createdAt": "2020-04-28T03:03:10Z", "author": {"login": "ph3636"}, "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,35 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current - divideVersion > 0 && clientVersion - divideVersion < 0) || (current - divideVersion < 0 && clientVersion - divideVersion > 0)) {\n+            throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n+        }\n+    }\n+\n+    private static long convertVersion(String version) throws IncompatibleVersionException {\n+        String parts[] = StringUtils.split(version, '.');\n+        Long result = 0L;\n+        int i = 1;\n+        int size = parts.length;\n+        if (size > MAX_VERSION_DOT + 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a90cc27743566730cf78bb338ce7de5c86665ead"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "181b30a8268833a401a13945b380bd067b889aec", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/181b30a8268833a401a13945b380bd067b889aec", "committedDate": "2020-04-28T10:06:56Z", "message": "fix review\n\nSigned-off-by: slievrly <slievrly@163.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51e92d7a4263404a27b7c54aa83623f232fef491", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/51e92d7a4263404a27b7c54aa83623f232fef491", "committedDate": "2020-04-28T10:09:10Z", "message": "Merge remote-tracking branch 'upstream/develop' into auth"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36417cd29dfad798d4410f2103f61ce56ef3cbff", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/36417cd29dfad798d4410f2103f61ce56ef3cbff", "committedDate": "2020-04-28T10:09:40Z", "message": "Merge branch 'auth' of github.com:slievrly/fescar into auth"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1b625f7c10ee88a861a4cc5617859c3bd8e8f3e", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/c1b625f7c10ee88a861a4cc5617859c3bd8e8f3e", "committedDate": "2020-04-28T10:15:46Z", "message": "fix review\n\nSigned-off-by: slievrly <slievrly@163.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNzAwNzQw", "url": "https://github.com/seata/seata/pull/2622#pullrequestreview-401700740", "createdAt": "2020-04-28T10:24:30Z", "commit": {"oid": "c1b625f7c10ee88a861a4cc5617859c3bd8e8f3e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NTM5OTE4", "url": "https://github.com/seata/seata/pull/2622#pullrequestreview-404539918", "createdAt": "2020-05-02T16:07:13Z", "commit": {"oid": "c1b625f7c10ee88a861a4cc5617859c3bd8e8f3e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NTc2NDY0", "url": "https://github.com/seata/seata/pull/2622#pullrequestreview-404576464", "createdAt": "2020-05-03T02:39:56Z", "commit": {"oid": "3819fde692306af02c070f5937800f72c9820864"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMjozOTo1NlrOGPn_aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMjozOTo1NlrOGPn_aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzNzAzNQ==", "bodyText": "The verification function has not yet been reached and an exception has been thrown: io.netty.handler.codec.TooLongFrameException: Adjusted frame length exceeds 8388608: 2415945472-discarded", "url": "https://github.com/seata/seata/pull/2622#discussion_r419037035", "createdAt": "2020-05-03T02:39:56Z", "author": {"login": "zjinlei"}, "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,36 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current > divideVersion && clientVersion < divideVersion) || (current < divideVersion && clientVersion > divideVersion)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3819fde692306af02c070f5937800f72c9820864"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NjE0MDE3", "url": "https://github.com/seata/seata/pull/2622#pullrequestreview-439614017", "createdAt": "2020-06-30T01:50:25Z", "commit": {"oid": "c49c6ac7e07d88dc67b69e59f3532b913f912619"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d6cba38794e5b825f98cd7ccf22208ebbd2a359", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/7d6cba38794e5b825f98cd7ccf22208ebbd2a359", "committedDate": "2020-06-30T07:42:18Z", "message": "fix conflicts\n\nSigned-off-by: slievrly <slievrly@163.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c49c6ac7e07d88dc67b69e59f3532b913f912619", "author": {"user": {"login": "jsbxyyx", "name": "jsbxyyx"}}, "url": "https://github.com/seata/seata/commit/c49c6ac7e07d88dc67b69e59f3532b913f912619", "committedDate": "2020-05-07T06:19:07Z", "message": "Merge branch 'develop' into auth"}, "afterCommit": {"oid": "7d6cba38794e5b825f98cd7ccf22208ebbd2a359", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/7d6cba38794e5b825f98cd7ccf22208ebbd2a359", "committedDate": "2020-06-30T07:42:18Z", "message": "fix conflicts\n\nSigned-off-by: slievrly <slievrly@163.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d5ffcc70dd1987a32d33edbee0a13a2629de939", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/1d5ffcc70dd1987a32d33edbee0a13a2629de939", "committedDate": "2020-06-30T08:03:31Z", "message": "fix conflicts\n\nSigned-off-by: slievrly <slievrly@163.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74c45c1a124f2424c96667a03a7a9b87cf6de79e", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/74c45c1a124f2424c96667a03a7a9b87cf6de79e", "committedDate": "2020-06-30T08:05:51Z", "message": "fix conflicts\n\nSigned-off-by: slievrly <slievrly@163.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "694065e92d1bada12f923b380cb06bf752f26118", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/694065e92d1bada12f923b380cb06bf752f26118", "committedDate": "2020-06-30T10:15:15Z", "message": "Merge branch 'develop' into auth"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDE2Njc4", "url": "https://github.com/seata/seata/pull/2622#pullrequestreview-440016678", "createdAt": "2020-06-30T13:31:36Z", "commit": {"oid": "694065e92d1bada12f923b380cb06bf752f26118"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzozMTozNlrOGq8efw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo1MDo1N1rOGq9WLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NDIyMw==", "bodyText": "String[] parts, it would be better.", "url": "https://github.com/seata/seata/pull/2622#discussion_r447684223", "createdAt": "2020-06-30T13:31:36Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,36 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current > divideVersion && clientVersion < divideVersion) || (current < divideVersion && clientVersion > divideVersion)) {\n+            throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n+        }\n+    }\n+\n+    private static long convertVersion(String version) throws IncompatibleVersionException {\n+        String parts[] = StringUtils.split(version, '.');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694065e92d1bada12f923b380cb06bf752f26118"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NDY1Mw==", "bodyText": "Use numeric long.", "url": "https://github.com/seata/seata/pull/2622#discussion_r447684653", "createdAt": "2020-06-30T13:32:14Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,36 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current > divideVersion && clientVersion < divideVersion) || (current < divideVersion && clientVersion > divideVersion)) {\n+            throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n+        }\n+    }\n+\n+    private static long convertVersion(String version) throws IncompatibleVersionException {\n+        String parts[] = StringUtils.split(version, '.');\n+        Long result = 0L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694065e92d1bada12f923b380cb06bf752f26118"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NTU5NA==", "bodyText": "Long.parseLong(part)", "url": "https://github.com/seata/seata/pull/2622#discussion_r447685594", "createdAt": "2020-06-30T13:33:27Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,36 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current > divideVersion && clientVersion < divideVersion) || (current < divideVersion && clientVersion > divideVersion)) {\n+            throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n+        }\n+    }\n+\n+    private static long convertVersion(String version) throws IncompatibleVersionException {\n+        String parts[] = StringUtils.split(version, '.');\n+        Long result = 0L;\n+        int i = 1;\n+        int size = parts.length;\n+        if (size > MAX_VERSION_DOT + 1) {\n+            throw new IncompatibleVersionException(\"incompatible version format:\" + version);\n+        }\n+        size = MAX_VERSION_DOT + 1;\n+        for (String part : parts) {\n+            if (StringUtils.isNumeric(part)) {\n+                result += Long.valueOf(part) * Double.valueOf(Math.pow(100, size - i)).longValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694065e92d1bada12f923b380cb06bf752f26118"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NTg5Nw==", "bodyText": "Long.parseLong(part)", "url": "https://github.com/seata/seata/pull/2622#discussion_r447685897", "createdAt": "2020-06-30T13:33:56Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,36 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current > divideVersion && clientVersion < divideVersion) || (current < divideVersion && clientVersion > divideVersion)) {\n+            throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n+        }\n+    }\n+\n+    private static long convertVersion(String version) throws IncompatibleVersionException {\n+        String parts[] = StringUtils.split(version, '.');\n+        Long result = 0L;\n+        int i = 1;\n+        int size = parts.length;\n+        if (size > MAX_VERSION_DOT + 1) {\n+            throw new IncompatibleVersionException(\"incompatible version format:\" + version);\n+        }\n+        size = MAX_VERSION_DOT + 1;\n+        for (String part : parts) {\n+            if (StringUtils.isNumeric(part)) {\n+                result += Long.valueOf(part) * Double.valueOf(Math.pow(100, size - i)).longValue();\n+            } else {\n+                String subParts[] = StringUtils.split(part, '-');\n+                if (StringUtils.isNumeric(subParts[0])) {\n+                    result += Long.valueOf(subParts[0]) * Double.valueOf(Math.pow(100, size - i)).longValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694065e92d1bada12f923b380cb06bf752f26118"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NzE2MQ==", "bodyText": "String[] subParts", "url": "https://github.com/seata/seata/pull/2622#discussion_r447687161", "createdAt": "2020-06-30T13:35:39Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,36 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current > divideVersion && clientVersion < divideVersion) || (current < divideVersion && clientVersion > divideVersion)) {\n+            throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n+        }\n+    }\n+\n+    private static long convertVersion(String version) throws IncompatibleVersionException {\n+        String parts[] = StringUtils.split(version, '.');\n+        Long result = 0L;\n+        int i = 1;\n+        int size = parts.length;\n+        if (size > MAX_VERSION_DOT + 1) {\n+            throw new IncompatibleVersionException(\"incompatible version format:\" + version);\n+        }\n+        size = MAX_VERSION_DOT + 1;\n+        for (String part : parts) {\n+            if (StringUtils.isNumeric(part)) {\n+                result += Long.valueOf(part) * Double.valueOf(Math.pow(100, size - i)).longValue();\n+            } else {\n+                String subParts[] = StringUtils.split(part, '-');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694065e92d1bada12f923b380cb06bf752f26118"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5ODQ3Nw==", "bodyText": "Long.parseLong(part) * Double.valueOf(Math.pow(100, size - i)).longValue();\nI think this code can be a single method, prevent repeated warnings.\nsuch as:\nprivate static long calculatePartValue(String part, int size, int i) {\n        return Long.parseLong(part) * Double.valueOf(Math.pow(100, size - i)).longValue();\n}", "url": "https://github.com/seata/seata/pull/2622#discussion_r447698477", "createdAt": "2020-06-30T13:50:57Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/protocol/Version.java", "diffHunk": "@@ -69,8 +76,36 @@ public static String getChannelVersion(Channel c) {\n      * @return the string\n      * @throws IncompatibleVersionException the incompatible version exception\n      */\n-    public static String checkVersion(String version) throws IncompatibleVersionException {\n-        // TODO: check\n-        return version;\n+    public static void checkVersion(String version) throws IncompatibleVersionException {\n+        long current = convertVersion(CURRENT);\n+        long clientVersion = convertVersion(version);\n+        long divideVersion = convertVersion(VERSION_0_7_1);\n+        if ((current > divideVersion && clientVersion < divideVersion) || (current < divideVersion && clientVersion > divideVersion)) {\n+            throw new IncompatibleVersionException(\"incompatible client version:\" + version);\n+        }\n+    }\n+\n+    private static long convertVersion(String version) throws IncompatibleVersionException {\n+        String parts[] = StringUtils.split(version, '.');\n+        Long result = 0L;\n+        int i = 1;\n+        int size = parts.length;\n+        if (size > MAX_VERSION_DOT + 1) {\n+            throw new IncompatibleVersionException(\"incompatible version format:\" + version);\n+        }\n+        size = MAX_VERSION_DOT + 1;\n+        for (String part : parts) {\n+            if (StringUtils.isNumeric(part)) {\n+                result += Long.valueOf(part) * Double.valueOf(Math.pow(100, size - i)).longValue();\n+            } else {\n+                String subParts[] = StringUtils.split(part, '-');\n+                if (StringUtils.isNumeric(subParts[0])) {\n+                    result += Long.valueOf(subParts[0]) * Double.valueOf(Math.pow(100, size - i)).longValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694065e92d1bada12f923b380cb06bf752f26118"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDgwMzcy", "url": "https://github.com/seata/seata/pull/2622#pullrequestreview-440080372", "createdAt": "2020-06-30T14:35:01Z", "commit": {"oid": "694065e92d1bada12f923b380cb06bf752f26118"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e49dd575f07a3487cf45d8128bfb3217cdd9689", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/5e49dd575f07a3487cf45d8128bfb3217cdd9689", "committedDate": "2020-07-02T12:07:42Z", "message": "fix review\n\nSigned-off-by: slievrly <slievrly@163.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abb47178bac72526b0d6fa46b0a5948085d7886a", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/abb47178bac72526b0d6fa46b0a5948085d7886a", "committedDate": "2020-07-02T12:08:30Z", "message": "Merge branch 'auth' of github.com:slievrly/fescar into auth"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNjQ2ODI0", "url": "https://github.com/seata/seata/pull/2622#pullrequestreview-441646824", "createdAt": "2020-07-02T12:51:39Z", "commit": {"oid": "e3de6f7e0a30d4ffcf2ab52ba17a2d8fb67078e7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNjYxNTY2", "url": "https://github.com/seata/seata/pull/2622#pullrequestreview-441661566", "createdAt": "2020-07-02T13:09:38Z", "commit": {"oid": "e3de6f7e0a30d4ffcf2ab52ba17a2d8fb67078e7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "034ab4d404ea14305ce2ab95cf211997d99130ee", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/034ab4d404ea14305ce2ab95cf211997d99130ee", "committedDate": "2020-07-02T14:51:27Z", "message": "fix review\n\nSigned-off-by: slievrly <slievrly@163.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e3de6f7e0a30d4ffcf2ab52ba17a2d8fb67078e7", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/e3de6f7e0a30d4ffcf2ab52ba17a2d8fb67078e7", "committedDate": "2020-07-02T12:30:20Z", "message": "Merge branch 'develop' into auth"}, "afterCommit": {"oid": "034ab4d404ea14305ce2ab95cf211997d99130ee", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/034ab4d404ea14305ce2ab95cf211997d99130ee", "committedDate": "2020-07-02T14:51:27Z", "message": "fix review\n\nSigned-off-by: slievrly <slievrly@163.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6377cce9b18fab8ae03a75a882c286866b782bf8", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/6377cce9b18fab8ae03a75a882c286866b782bf8", "committedDate": "2020-07-02T14:53:17Z", "message": "Merge branch 'develop' into auth"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d2e21d49809183b632b462309cf821191ceca64", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/4d2e21d49809183b632b462309cf821191ceca64", "committedDate": "2020-07-03T02:52:11Z", "message": "Merge branch 'develop' into auth"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3945, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}