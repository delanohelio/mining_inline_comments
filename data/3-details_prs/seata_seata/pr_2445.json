{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNzI3MzY3", "number": 2445, "title": "optimize: the class registration method of kryo and fst", "bodyText": "\u2160. Describe what this PR did\noptimize the class registration method of kryo and fst\n\u2161. Does this pull request fix one issue?\n\n\u2162. Why don't you add test cases (unit test/integration test)?\n\u2163. Describe how to verify it\n\u2164. Special notes for reviews", "createdAt": "2020-03-24T01:39:35Z", "url": "https://github.com/seata/seata/pull/2445", "merged": true, "mergeCommit": {"oid": "e0bff39d4f6f0be0e2ac576bf6c1e27f687ce006"}, "closed": true, "closedAt": "2020-03-26T02:05:52Z", "author": {"login": "a364176773"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQovzMgH2gAyMzkyNzI3MzY3OjlkMmM2Mzg2YmRiYjM0OWI0ZDZlMjE4MThlY2JlMzQ1NzI5ZjhiYWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRSWTlgFqTM4MTY1NjA5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9d2c6386bdbb349b4d6e21818ecbe345729f8bac", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/9d2c6386bdbb349b4d6e21818ecbe345729f8bac", "committedDate": "2020-03-24T01:37:17Z", "message": "optimize the way classes are registered"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c292fd5232cd9c936b748a39da38907299366bd2", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/c292fd5232cd9c936b748a39da38907299366bd2", "committedDate": "2020-03-24T01:38:41Z", "message": "fix bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce805de12668f6b2270771b4fd5e2c82b1793d28", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/ce805de12668f6b2270771b4fd5e2c82b1793d28", "committedDate": "2020-03-24T01:39:49Z", "message": "Merge branch 'develop' into serialize_fst"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "199176ed8c1b7aed6f863027132a5a26c0a1638e", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/199176ed8c1b7aed6f863027132a5a26c0a1638e", "committedDate": "2020-03-24T02:05:26Z", "message": "reformat code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a49784556a7d5410201881fbdeb6e995956c1efa", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/a49784556a7d5410201881fbdeb6e995956c1efa", "committedDate": "2020-03-24T02:06:28Z", "message": "reformat code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3ec99c270abaf900e817fbb13da17cf49cc4e47", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/d3ec99c270abaf900e817fbb13da17cf49cc4e47", "committedDate": "2020-03-24T02:07:13Z", "message": "Merge branch 'serialize_fst' of https://github.com/a364176773/seata into serialize_fst"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d70c65738c6afc8a6666cf1357e0cbb55492647", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/0d70c65738c6afc8a6666cf1357e0cbb55492647", "committedDate": "2020-03-24T02:54:35Z", "message": "test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77da0eeb92327ec49bbd41577c052b18b05a3b70", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/77da0eeb92327ec49bbd41577c052b18b05a3b70", "committedDate": "2020-03-24T04:36:25Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11bb905af915d589012a7ad4efc230c54050535d", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/11bb905af915d589012a7ad4efc230c54050535d", "committedDate": "2020-03-24T14:32:34Z", "message": "Merge branch 'develop' into serialize_fst"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODQyMDQ0", "url": "https://github.com/seata/seata/pull/2445#pullrequestreview-380842044", "createdAt": "2020-03-25T03:45:30Z", "commit": {"oid": "11bb905af915d589012a7ad4efc230c54050535d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo0NTozMVrOF7LNrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo1MDoxOVrOF7LR6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NDAyOA==", "bodyText": "private", "url": "https://github.com/seata/seata/pull/2445#discussion_r397594028", "createdAt": "2020-03-25T03:45:31Z", "author": {"login": "slievrly"}, "path": "serializer/seata-serializer-fst/src/main/java/io.seata.serializer.fst/FstSerializer.java", "diffHunk": "@@ -26,16 +24,16 @@\n @LoadLevel(name = \"FST\")\n public class FstSerializer implements Serializer {\n \n-    private final FSTConfiguration conf = FSTConfiguration.createDefaultConfiguration();\n+    FstSerializerFactory fstFactory = FstSerializerFactory.getDefaultFactory();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11bb905af915d589012a7ad4efc230c54050535d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NTExMw==", "bodyText": "not only for kryo\uff0cwhere  used the  serializer  ?", "url": "https://github.com/seata/seata/pull/2445#discussion_r397595113", "createdAt": "2020-03-25T03:50:19Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/serializer/SerializerClassRegistry.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.serializer;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.BitSet;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Hashtable;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.TreeSet;\n+import java.util.Vector;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import io.seata.core.protocol.MergeResultMessage;\n+import io.seata.core.protocol.MergedWarpMessage;\n+import io.seata.core.protocol.RegisterRMRequest;\n+import io.seata.core.protocol.RegisterRMResponse;\n+import io.seata.core.protocol.RegisterTMRequest;\n+import io.seata.core.protocol.RegisterTMResponse;\n+import io.seata.core.protocol.transaction.BranchCommitRequest;\n+import io.seata.core.protocol.transaction.BranchCommitResponse;\n+import io.seata.core.protocol.transaction.BranchRegisterRequest;\n+import io.seata.core.protocol.transaction.BranchRegisterResponse;\n+import io.seata.core.protocol.transaction.BranchReportRequest;\n+import io.seata.core.protocol.transaction.BranchReportResponse;\n+import io.seata.core.protocol.transaction.BranchRollbackRequest;\n+import io.seata.core.protocol.transaction.BranchRollbackResponse;\n+import io.seata.core.protocol.transaction.GlobalBeginRequest;\n+import io.seata.core.protocol.transaction.GlobalBeginResponse;\n+import io.seata.core.protocol.transaction.GlobalCommitRequest;\n+import io.seata.core.protocol.transaction.GlobalCommitResponse;\n+import io.seata.core.protocol.transaction.GlobalLockQueryRequest;\n+import io.seata.core.protocol.transaction.GlobalLockQueryResponse;\n+import io.seata.core.protocol.transaction.GlobalReportRequest;\n+import io.seata.core.protocol.transaction.GlobalReportResponse;\n+import io.seata.core.protocol.transaction.GlobalRollbackRequest;\n+import io.seata.core.protocol.transaction.GlobalRollbackResponse;\n+import io.seata.core.protocol.transaction.GlobalStatusRequest;\n+import io.seata.core.protocol.transaction.GlobalStatusResponse;\n+import io.seata.core.protocol.transaction.UndoLogDeleteRequest;\n+\n+/**\n+ * Provide a unified serialization registry, this class used for {@code seata-serializer-fst}\n+ * and {@code seata-serializer-kryo}, it will register some classes at startup time (for example {@link KryoSerializerFactory#create})\n+ * @author funkye\n+ */\n+public class SerializerClassRegistry {\n+\n+    private static final Map<Class<?>, Object> REGISTRATIONS = new LinkedHashMap<>();\n+\n+    static {\n+\n+        // register commonly class\n+        registerClass(HashMap.class);\n+        registerClass(ArrayList.class);\n+        registerClass(LinkedList.class);\n+        registerClass(HashSet.class);\n+        registerClass(TreeSet.class);\n+        registerClass(Hashtable.class);\n+        registerClass(Date.class);\n+        registerClass(Calendar.class);\n+        registerClass(ConcurrentHashMap.class);\n+        registerClass(SimpleDateFormat.class);\n+        registerClass(GregorianCalendar.class);\n+        registerClass(Vector.class);\n+        registerClass(BitSet.class);\n+        registerClass(StringBuffer.class);\n+        registerClass(StringBuilder.class);\n+        registerClass(Object.class);\n+        registerClass(Object[].class);\n+        registerClass(String[].class);\n+        registerClass(byte[].class);\n+        registerClass(char[].class);\n+        registerClass(int[].class);\n+        registerClass(float[].class);\n+        registerClass(double[].class);\n+\n+        // register seata protocol relation class\n+        registerClass(BranchCommitRequest.class);\n+        registerClass(BranchCommitResponse.class);\n+        registerClass(BranchRegisterRequest.class);\n+        registerClass(BranchRegisterResponse.class);\n+        registerClass(BranchReportRequest.class);\n+        registerClass(BranchReportResponse.class);\n+        registerClass(BranchRollbackRequest.class);\n+        registerClass(BranchRollbackResponse.class);\n+        registerClass(GlobalBeginRequest.class);\n+        registerClass(GlobalBeginResponse.class);\n+        registerClass(GlobalCommitRequest.class);\n+        registerClass(GlobalCommitResponse.class);\n+        registerClass(GlobalLockQueryRequest.class);\n+        registerClass(GlobalLockQueryResponse.class);\n+        registerClass(GlobalRollbackRequest.class);\n+        registerClass(GlobalRollbackResponse.class);\n+        registerClass(GlobalStatusRequest.class);\n+        registerClass(GlobalStatusResponse.class);\n+        registerClass(UndoLogDeleteRequest.class);\n+        registerClass(GlobalReportRequest.class);\n+        registerClass(GlobalReportResponse.class);\n+\n+        registerClass(MergedWarpMessage.class);\n+        registerClass(MergeResultMessage.class);\n+        registerClass(RegisterRMRequest.class);\n+        registerClass(RegisterRMResponse.class);\n+        registerClass(RegisterTMRequest.class);\n+        registerClass(RegisterTMResponse.class);\n+    }\n+    \n+    /**\n+     * only supposed to be called at startup time\n+     *\n+     * @param clazz object type\n+     */\n+    public static void registerClass(Class<?> clazz) {\n+        registerClass(clazz, null);\n+    }\n+\n+    /**\n+     * only supposed to be called at startup time\n+     *\n+     * @param clazz object type\n+     * @param serializer object serializer\n+     */\n+    public static void registerClass(Class<?> clazz, Object serializer) {\n+        if (clazz == null) {\n+            throw new IllegalArgumentException(\"Class registered to kryo cannot be null!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11bb905af915d589012a7ad4efc230c54050535d"}, "originalPosition": 146}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb73d7ff2b59179dfb495d1e02159c04307bc0ee", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/cb73d7ff2b59179dfb495d1e02159c04307bc0ee", "committedDate": "2020-03-25T03:53:21Z", "message": "optimize code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODUwOTI5", "url": "https://github.com/seata/seata/pull/2445#pullrequestreview-380850929", "createdAt": "2020-03-25T04:23:28Z", "commit": {"oid": "cb73d7ff2b59179dfb495d1e02159c04307bc0ee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83c9c42443a8d4716527bf850716b1b5ec5e7a3b", "author": {"user": {"login": "jsbxyyx", "name": "jsbxyyx"}}, "url": "https://github.com/seata/seata/commit/83c9c42443a8d4716527bf850716b1b5ec5e7a3b", "committedDate": "2020-03-26T01:40:50Z", "message": "Merge branch 'develop' into serialize_fst"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNjU2MDk1", "url": "https://github.com/seata/seata/pull/2445#pullrequestreview-381656095", "createdAt": "2020-03-26T02:05:27Z", "commit": {"oid": "83c9c42443a8d4716527bf850716b1b5ec5e7a3b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3835, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}