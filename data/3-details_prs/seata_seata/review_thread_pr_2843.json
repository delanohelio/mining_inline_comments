{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMTgwMjY0", "number": 2843, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMToxMzo1MFrOETopfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwODoyNDo0N1rOEyOzVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDI0MzgyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/seata/server/session/SessionHolder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMToxMzo1MFrOG5eqgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMToxNToxNVrOG5etAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyNDQxOQ==", "bodyText": "Why only file mode can reload this status of global session?\nAsyncCommitting\nCommitRetrying\nTimeoutRollbackRetrying\nBegin", "url": "https://github.com/seata/seata/pull/2843#discussion_r462924419", "createdAt": "2020-07-30T11:13:50Z", "author": {"login": "l81893521"}, "path": "server/src/main/java/io/seata/server/session/SessionHolder.java", "diffHunk": "@@ -117,39 +117,52 @@ public static void init(String mode) throws IOException {\n             // unknown store\n             throw new IllegalArgumentException(\"unknown store mode:\" + mode);\n         }\n-        reload();\n+        reloadAndRevise(storeMode);\n     }\n \n     /**\n-     * Reload.\n+     * Reload and revise.\n      */\n-    protected static void reload() {\n+    protected static void reloadAndRevise(StoreMode storeMode) {\n         if (ROOT_SESSION_MANAGER instanceof Reloadable) {\n-            ((Reloadable)ROOT_SESSION_MANAGER).reload();\n+            ((Reloadable) ROOT_SESSION_MANAGER).reload();\n+        }\n \n-            Collection<GlobalSession> reloadedSessions = ROOT_SESSION_MANAGER.allSessions();\n-            if (reloadedSessions != null && !reloadedSessions.isEmpty()) {\n-                reloadedSessions.forEach(globalSession -> {\n-                    GlobalStatus globalStatus = globalSession.getStatus();\n-                    switch (globalStatus) {\n-                        case UnKnown:\n-                        case Committed:\n-                        case CommitFailed:\n-                        case Rollbacked:\n-                        case RollbackFailed:\n-                        case TimeoutRollbacked:\n-                        case TimeoutRollbackFailed:\n-                        case Finished:\n-                            throw new ShouldNeverHappenException(\"Reloaded Session should NOT be \" + globalStatus);\n-                        case AsyncCommitting:\n+        Collection<GlobalSession> allSessions = ROOT_SESSION_MANAGER.allSessions();\n+        if (allSessions != null && !allSessions.isEmpty()) {\n+            allSessions.forEach(globalSession -> {\n+                GlobalStatus globalStatus = globalSession.getStatus();\n+                switch (globalStatus) {\n+                    case UnKnown:\n+                    case Committed:\n+                    case CommitFailed:\n+                    case Rollbacked:\n+                    case RollbackFailed:\n+                    case TimeoutRollbacked:\n+                    case TimeoutRollbackFailed:\n+                    case Finished:\n+                        try {\n+                            LOGGER.warn(\"The global session should NOT be {}, remove it. xid = {}\", globalStatus, globalSession.getXid());\n+                            ROOT_SESSION_MANAGER.removeGlobalSession(globalSession);\n+                            if (LOGGER.isInfoEnabled()) {\n+                                LOGGER.info(\"Remove global session succeeded, xid = {}, status = {}\", globalSession.getXid(), globalSession.getStatus());\n+                            }\n+                        } catch (Exception e) {\n+                            LOGGER.error(\"Remove global session failed, xid = {}, status = {}\", globalSession.getXid(), globalSession.getStatus(), e);\n+                        }\n+                        break;\n+                    case AsyncCommitting:\n+                        if (storeMode == StoreMode.FILE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce4b39f688a24157271275a5c130f7f23525aa5e"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyNTA1OA==", "bodyText": "If say so, this hold method just use for file mode?", "url": "https://github.com/seata/seata/pull/2843#discussion_r462925058", "createdAt": "2020-07-30T11:15:15Z", "author": {"login": "l81893521"}, "path": "server/src/main/java/io/seata/server/session/SessionHolder.java", "diffHunk": "@@ -117,39 +117,52 @@ public static void init(String mode) throws IOException {\n             // unknown store\n             throw new IllegalArgumentException(\"unknown store mode:\" + mode);\n         }\n-        reload();\n+        reloadAndRevise(storeMode);\n     }\n \n     /**\n-     * Reload.\n+     * Reload and revise.\n      */\n-    protected static void reload() {\n+    protected static void reloadAndRevise(StoreMode storeMode) {\n         if (ROOT_SESSION_MANAGER instanceof Reloadable) {\n-            ((Reloadable)ROOT_SESSION_MANAGER).reload();\n+            ((Reloadable) ROOT_SESSION_MANAGER).reload();\n+        }\n \n-            Collection<GlobalSession> reloadedSessions = ROOT_SESSION_MANAGER.allSessions();\n-            if (reloadedSessions != null && !reloadedSessions.isEmpty()) {\n-                reloadedSessions.forEach(globalSession -> {\n-                    GlobalStatus globalStatus = globalSession.getStatus();\n-                    switch (globalStatus) {\n-                        case UnKnown:\n-                        case Committed:\n-                        case CommitFailed:\n-                        case Rollbacked:\n-                        case RollbackFailed:\n-                        case TimeoutRollbacked:\n-                        case TimeoutRollbackFailed:\n-                        case Finished:\n-                            throw new ShouldNeverHappenException(\"Reloaded Session should NOT be \" + globalStatus);\n-                        case AsyncCommitting:\n+        Collection<GlobalSession> allSessions = ROOT_SESSION_MANAGER.allSessions();\n+        if (allSessions != null && !allSessions.isEmpty()) {\n+            allSessions.forEach(globalSession -> {\n+                GlobalStatus globalStatus = globalSession.getStatus();\n+                switch (globalStatus) {\n+                    case UnKnown:\n+                    case Committed:\n+                    case CommitFailed:\n+                    case Rollbacked:\n+                    case RollbackFailed:\n+                    case TimeoutRollbacked:\n+                    case TimeoutRollbackFailed:\n+                    case Finished:\n+                        try {\n+                            LOGGER.warn(\"The global session should NOT be {}, remove it. xid = {}\", globalStatus, globalSession.getXid());\n+                            ROOT_SESSION_MANAGER.removeGlobalSession(globalSession);\n+                            if (LOGGER.isInfoEnabled()) {\n+                                LOGGER.info(\"Remove global session succeeded, xid = {}, status = {}\", globalSession.getXid(), globalSession.getStatus());\n+                            }\n+                        } catch (Exception e) {\n+                            LOGGER.error(\"Remove global session failed, xid = {}, status = {}\", globalSession.getXid(), globalSession.getStatus(), e);\n+                        }\n+                        break;\n+                    case AsyncCommitting:\n+                        if (storeMode == StoreMode.FILE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyNDQxOQ=="}, "originalCommit": {"oid": "ce4b39f688a24157271275a5c130f7f23525aa5e"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDYxMjM1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/seata/server/session/SessionHolder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwODo0NjoyNFrOHmXI5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOTozNzowOFrOHmZO_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk4NzA0NQ==", "bodyText": "So only in file mode do we need to reload, right?", "url": "https://github.com/seata/seata/pull/2843#discussion_r509987045", "createdAt": "2020-10-22T08:46:24Z", "author": {"login": "slievrly"}, "path": "server/src/main/java/io/seata/server/session/SessionHolder.java", "diffHunk": "@@ -117,83 +118,122 @@ public static void init(String mode) throws IOException {\n             // unknown store\n             throw new IllegalArgumentException(\"unknown store mode:\" + mode);\n         }\n-        reload();\n+        reload(storeMode);\n     }\n \n+    //region reload\n+\n     /**\n      * Reload.\n      */\n-    protected static void reload() {\n+    protected static void reload(StoreMode storeMode) {\n         if (ROOT_SESSION_MANAGER instanceof Reloadable) {\n-            ((Reloadable)ROOT_SESSION_MANAGER).reload();\n+            ((Reloadable) ROOT_SESSION_MANAGER).reload();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91ea2f4aeb29da574f5ecb1159310df71bcd31b9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxOTYxMg==", "bodyText": "yes", "url": "https://github.com/seata/seata/pull/2843#discussion_r510019612", "createdAt": "2020-10-22T09:34:32Z", "author": {"login": "wangliang181230"}, "path": "server/src/main/java/io/seata/server/session/SessionHolder.java", "diffHunk": "@@ -117,83 +118,122 @@ public static void init(String mode) throws IOException {\n             // unknown store\n             throw new IllegalArgumentException(\"unknown store mode:\" + mode);\n         }\n-        reload();\n+        reload(storeMode);\n     }\n \n+    //region reload\n+\n     /**\n      * Reload.\n      */\n-    protected static void reload() {\n+    protected static void reload(StoreMode storeMode) {\n         if (ROOT_SESSION_MANAGER instanceof Reloadable) {\n-            ((Reloadable)ROOT_SESSION_MANAGER).reload();\n+            ((Reloadable) ROOT_SESSION_MANAGER).reload();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk4NzA0NQ=="}, "originalCommit": {"oid": "91ea2f4aeb29da574f5ecb1159310df71bcd31b9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAyMTM3Mg==", "bodyText": "redis and db mode, only need to remove the global sessions in error status.", "url": "https://github.com/seata/seata/pull/2843#discussion_r510021372", "createdAt": "2020-10-22T09:37:08Z", "author": {"login": "wangliang181230"}, "path": "server/src/main/java/io/seata/server/session/SessionHolder.java", "diffHunk": "@@ -117,83 +118,122 @@ public static void init(String mode) throws IOException {\n             // unknown store\n             throw new IllegalArgumentException(\"unknown store mode:\" + mode);\n         }\n-        reload();\n+        reload(storeMode);\n     }\n \n+    //region reload\n+\n     /**\n      * Reload.\n      */\n-    protected static void reload() {\n+    protected static void reload(StoreMode storeMode) {\n         if (ROOT_SESSION_MANAGER instanceof Reloadable) {\n-            ((Reloadable)ROOT_SESSION_MANAGER).reload();\n+            ((Reloadable) ROOT_SESSION_MANAGER).reload();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk4NzA0NQ=="}, "originalCommit": {"oid": "91ea2f4aeb29da574f5ecb1159310df71bcd31b9"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTA2Nzc0OnYy", "diffSide": "LEFT", "path": "core/src/main/java/io/seata/core/constants/ConfigurationKeys.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwODoyNDo0N1rOHowKvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwODoyNDo0N1rOHowKvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ5NDI3MQ==", "bodyText": "\u591a\u4f59\u7684\u5173\u952e\u5b57\u3002", "url": "https://github.com/seata/seata/pull/2843#discussion_r512494271", "createdAt": "2020-10-27T08:24:47Z", "author": {"login": "wangliang181230"}, "path": "core/src/main/java/io/seata/core/constants/ConfigurationKeys.java", "diffHunk": "@@ -25,7 +25,7 @@\n     /**\n      * The constant SEATA_PREFIX.\n      */\n-    public static final String SEATA_PREFIX = \"seata.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce9c6e4d047581bab4fd8cd19e633ddde167c31e"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1486, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}