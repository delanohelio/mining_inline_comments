{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMDQzMzYy", "number": 2301, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNjo0MDoyMlrODu_KqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDoyNDo0M1rODyVQ3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTk2MDA5OnYy", "diffSide": "RIGHT", "path": "sqlparser/seata-sqlparser-druid/src/main/java/io/seata/sqlparser/druid/postgresql/PostgresqlInsertRecognizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNjo0MDoyM1rOGBJoUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNjo0MDoyM1rOGBJoUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg1OTUzNg==", "bodyText": "InsertExecutor.getPkValuesBySequence\u903b\u8f91\u6ca1\u6709\u5b9e\u73b0", "url": "https://github.com/seata/seata/pull/2301#discussion_r403859536", "createdAt": "2020-04-06T06:40:23Z", "author": {"login": "jaspercloud"}, "path": "sqlparser/seata-sqlparser-druid/src/main/java/io/seata/sqlparser/druid/postgresql/PostgresqlInsertRecognizer.java", "diffHunk": "@@ -113,12 +116,21 @@ public boolean visit(SQLExprTableSource x) {\n                 } else if (expr instanceof SQLVariantRefExpr) {\n                     row.add(((SQLVariantRefExpr) expr).getName());\n                 } else if (expr instanceof SQLMethodInvokeExpr) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ec644fae87d73f7b7a907656524c6d4a6d581d4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzk2MjgxOnYy", "diffSide": "RIGHT", "path": "sqlparser/seata-sqlparser-core/src/main/java/io/seata/sqlparser/struct/SqlDefaultExpr.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTo1ODowOVrOGF2XbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMTowMzowOVrOGGQ02Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4Njc5Nw==", "bodyText": "why not use com.alibaba.druid.sql.ast.expr.SQLSequenceExpr", "url": "https://github.com/seata/seata/pull/2301#discussion_r408786797", "createdAt": "2020-04-15T11:58:09Z", "author": {"login": "l81893521"}, "path": "sqlparser/seata-sqlparser-core/src/main/java/io/seata/sqlparser/struct/SqlDefaultExpr.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "389102072d6030cc029f270a4bf3daa5f913c11d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyMDMxMw==", "bodyText": "sqlparser module can be multi implemention. druid just one of them.", "url": "https://github.com/seata/seata/pull/2301#discussion_r409220313", "createdAt": "2020-04-16T01:03:09Z", "author": {"login": "jsbxyyx"}, "path": "sqlparser/seata-sqlparser-core/src/main/java/io/seata/sqlparser/struct/SqlDefaultExpr.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4Njc5Nw=="}, "originalCommit": {"oid": "389102072d6030cc029f270a4bf3daa5f913c11d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTAwMTUwOnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/InsertExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDowMzo1M1rOGGTwLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDowMzo1M1rOGGTwLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2ODI2OQ==", "bodyText": "I think the Exception should give more detail. like\nthrow new ShouldNeverHappenException(\"get primary key value failed, cause columnDef is \" + columnDef);", "url": "https://github.com/seata/seata/pull/2301#discussion_r409268269", "createdAt": "2020-04-16T04:03:53Z", "author": {"login": "l81893521"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/InsertExecutor.java", "diffHunk": "@@ -172,31 +173,65 @@ protected boolean containsColumns() {\n         if (!pkValues.isEmpty() && pkValues.get(0) instanceof SqlSequenceExpr) {\n             pkValues = getPkValuesBySequence(pkValues.get(0));\n         }\n+        else if (!pkValues.isEmpty() && pkValues.get(0) instanceof SqlDefaultExpr) {\n+            pkValues = getPkValuesByDefault();\n+        }\n         // pk auto generated while column exists and value is null\n         else if (!pkValues.isEmpty() && pkValues.get(0) instanceof Null) {\n             pkValues = getPkValuesByAuto();\n         }\n         return pkValues;\n     }\n \n-    protected List<Object> getPkValuesBySequence(Object expr) throws SQLException {\n+    /**\n+     * get primary key values by default\n+     * @return\n+     * @throws SQLException\n+     */\n+    private List<Object> getPkValuesByDefault() throws SQLException {\n+        Map<String, ColumnMeta> pkMetaMap = checkPrimaryKeyMap();\n+        ColumnMeta pkMeta = pkMetaMap.values().iterator().next();\n+        String columnDef = pkMeta.getColumnDef();\n+        // sample: nextval('test_id_seq'::regclass)\n+        String seq = org.apache.commons.lang.StringUtils.substringBetween(columnDef, \"'\", \"'\");\n+        String function = org.apache.commons.lang.StringUtils.substringBetween(columnDef, \"\", \"(\");\n+        if (StringUtils.isBlank(seq)) {\n+            throw new ShouldNeverHappenException(\"columnDef is \" + columnDef);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8434f5a37dc9abd777b8830220e21e9a4e5924"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTAzNzc1OnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/InsertExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDoyNDo0M1rOGGUEow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDoyNDo0M1rOGGUEow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MzUwNw==", "bodyText": "How about remove this method? Because multi primary key already check in TableMeta.getPrimaryKeyMap()", "url": "https://github.com/seata/seata/pull/2301#discussion_r409273507", "createdAt": "2020-04-16T04:24:43Z", "author": {"login": "l81893521"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/InsertExecutor.java", "diffHunk": "@@ -359,4 +388,12 @@ protected boolean checkPkValues(List<Object> pkValues) {\n         return pkValues;\n     }\n \n+    private Map<String, ColumnMeta> checkPrimaryKeyMap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8434f5a37dc9abd777b8830220e21e9a4e5924"}, "originalPosition": 138}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1636, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}