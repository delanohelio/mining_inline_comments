{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NTI2NjAy", "number": 2670, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjo0OToyMFrOD61n-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNTo0Mjo1NVrOD7f1-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDIyNTg0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/store/db/DataSourceGenerator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjo0OToyMFrOGS483w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNzowNzozMVrOGS5Ccw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2MDYzOQ==", "bodyText": "retain generateDataSource() ?", "url": "https://github.com/seata/seata/pull/2670#discussion_r422460639", "createdAt": "2020-05-09T06:49:20Z", "author": {"login": "jsbxyyx"}, "path": "core/src/main/java/io/seata/core/store/db/DataSourceGenerator.java", "diffHunk": "@@ -25,10 +25,9 @@\n public interface DataSourceGenerator {\n \n     /**\n-     * create DataSource from config\n-     *\n+     * get the data source\n      * @return data source\n      */\n-    DataSource generateDataSource();\n+    DataSource get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f40bb3fb005ab9e1b6668a1f1e448e3fa8ac0d1"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2MTgyNw==", "bodyText": "+1", "url": "https://github.com/seata/seata/pull/2670#discussion_r422461827", "createdAt": "2020-05-09T07:04:50Z", "author": {"login": "zjinlei"}, "path": "core/src/main/java/io/seata/core/store/db/DataSourceGenerator.java", "diffHunk": "@@ -25,10 +25,9 @@\n public interface DataSourceGenerator {\n \n     /**\n-     * create DataSource from config\n-     *\n+     * get the data source\n      * @return data source\n      */\n-    DataSource generateDataSource();\n+    DataSource get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2MDYzOQ=="}, "originalCommit": {"oid": "3f40bb3fb005ab9e1b6668a1f1e448e3fa8ac0d1"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2MjA2Nw==", "bodyText": "but generate() already in the AbstractDataSourceGenerator.generate(), this method just only get the data source.", "url": "https://github.com/seata/seata/pull/2670#discussion_r422462067", "createdAt": "2020-05-09T07:07:31Z", "author": {"login": "l81893521"}, "path": "core/src/main/java/io/seata/core/store/db/DataSourceGenerator.java", "diffHunk": "@@ -25,10 +25,9 @@\n public interface DataSourceGenerator {\n \n     /**\n-     * create DataSource from config\n-     *\n+     * get the data source\n      * @return data source\n      */\n-    DataSource generateDataSource();\n+    DataSource get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2MDYzOQ=="}, "originalCommit": {"oid": "3f40bb3fb005ab9e1b6668a1f1e448e3fa8ac0d1"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDI0MjI4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/store/db/AbstractDataSourceGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNzoxNjoxNVrOGS5FjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNzoyODowMVrOGS5Jfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2Mjg2MQ==", "bodyText": "recommended to implement io.seata.common.executor.Initialize", "url": "https://github.com/seata/seata/pull/2670#discussion_r422462861", "createdAt": "2020-05-09T07:16:15Z", "author": {"login": "zjinlei"}, "path": "core/src/main/java/io/seata/core/store/db/AbstractDataSourceGenerator.java", "diffHunk": "@@ -60,6 +65,24 @@\n \n     private static final long DEFAULT_DB_MAX_WAIT = 5000;\n \n+    /**\n+     * generate the data source\n+     */\n+    public AbstractDataSourceGenerator() {\n+        this.dataSource = this.generate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f40bb3fb005ab9e1b6668a1f1e448e3fa8ac0d1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2Mzg3MA==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/2670#discussion_r422463870", "createdAt": "2020-05-09T07:28:01Z", "author": {"login": "l81893521"}, "path": "core/src/main/java/io/seata/core/store/db/AbstractDataSourceGenerator.java", "diffHunk": "@@ -60,6 +65,24 @@\n \n     private static final long DEFAULT_DB_MAX_WAIT = 5000;\n \n+    /**\n+     * generate the data source\n+     */\n+    public AbstractDataSourceGenerator() {\n+        this.dataSource = this.generate();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2Mjg2MQ=="}, "originalCommit": {"oid": "3f40bb3fb005ab9e1b6668a1f1e448e3fa8ac0d1"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTU2MzIzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/seata/server/store/DbcpDataSourceProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMDoyODo0MFrOGTC7Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMjowMzozOFrOGTzg-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyNDA3MQ==", "bodyText": "common method, move to abstract class.", "url": "https://github.com/seata/seata/pull/2670#discussion_r422624071", "createdAt": "2020-05-10T10:28:40Z", "author": {"login": "zjinlei"}, "path": "server/src/main/java/io/seata/server/store/DbcpDataSourceProvider.java", "diffHunk": "@@ -49,6 +49,11 @@ public DataSource generateDataSource() {\n         ds.setTestWhileIdle(true);\n         ds.setValidationQuery(getValidationQuery(getDBType()));\n         ds.setConnectionProperties(\"useUnicode=yes;characterEncoding=utf8;socketTimeout=5000;connectTimeout=500\");\n-        return ds;\n+        setDataSource(ds);\n+    }\n+\n+    @Override\n+    public DataSource provide() {\n+        return getDataSource();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faa201f8eed6923917ea60fa0e110deb232b76be"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQyMDE1Mg==", "bodyText": "fixed.", "url": "https://github.com/seata/seata/pull/2670#discussion_r423420152", "createdAt": "2020-05-12T02:03:38Z", "author": {"login": "l81893521"}, "path": "server/src/main/java/io/seata/server/store/DbcpDataSourceProvider.java", "diffHunk": "@@ -49,6 +49,11 @@ public DataSource generateDataSource() {\n         ds.setTestWhileIdle(true);\n         ds.setValidationQuery(getValidationQuery(getDBType()));\n         ds.setConnectionProperties(\"useUnicode=yes;characterEncoding=utf8;socketTimeout=5000;connectTimeout=500\");\n-        return ds;\n+        setDataSource(ds);\n+    }\n+\n+    @Override\n+    public DataSource provide() {\n+        return getDataSource();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyNDA3MQ=="}, "originalCommit": {"oid": "faa201f8eed6923917ea60fa0e110deb232b76be"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDU0ODM3OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/seata/server/store/db/DbcpDataSourceProviderTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMzo1NTowMFrOGTdWWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMjowMzo0NVrOGTzhFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA1Njk4Ng==", "bodyText": "You can put the test case in the abstract class", "url": "https://github.com/seata/seata/pull/2670#discussion_r423056986", "createdAt": "2020-05-11T13:55:00Z", "author": {"login": "slievrly"}, "path": "server/src/test/java/io/seata/server/store/db/DbcpDataSourceProviderTest.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server.store.db;\n+\n+import io.seata.common.loader.EnhancedServiceLoader;\n+import io.seata.core.store.db.DataSourceProvider;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.sql.DataSource;\n+\n+/**\n+ * @author will\n+ */\n+public class DbcpDataSourceProviderTest {\n+\n+    private final String datasourceType = \"dbcp\";\n+\n+    @Test\n+    public void testDbcpDataSourceProvider() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faa201f8eed6923917ea60fa0e110deb232b76be"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQyMDE4MA==", "bodyText": "fixed.", "url": "https://github.com/seata/seata/pull/2670#discussion_r423420180", "createdAt": "2020-05-12T02:03:45Z", "author": {"login": "l81893521"}, "path": "server/src/test/java/io/seata/server/store/db/DbcpDataSourceProviderTest.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server.store.db;\n+\n+import io.seata.common.loader.EnhancedServiceLoader;\n+import io.seata.core.store.db.DataSourceProvider;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.sql.DataSource;\n+\n+/**\n+ * @author will\n+ */\n+public class DbcpDataSourceProviderTest {\n+\n+    private final String datasourceType = \"dbcp\";\n+\n+    @Test\n+    public void testDbcpDataSourceProvider() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA1Njk4Ng=="}, "originalCommit": {"oid": "faa201f8eed6923917ea60fa0e110deb232b76be"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzE0Mjk4OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/seata/server/store/db/AbstractDataSourceProviderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNTo0Mjo1NVrOGT20RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNTo0Mjo1NVrOGT20RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3NDI0NQ==", "bodyText": "merge dataSourceType to array. for each test dataSource not null? simplify test case?", "url": "https://github.com/seata/seata/pull/2670#discussion_r423474245", "createdAt": "2020-05-12T05:42:55Z", "author": {"login": "jsbxyyx"}, "path": "server/src/test/java/io/seata/server/store/db/AbstractDataSourceProviderTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server.store.db;\n+\n+import io.seata.common.loader.EnhancedServiceLoader;\n+import io.seata.core.store.db.DataSourceProvider;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.sql.DataSource;\n+\n+/**\n+ * @author: will\n+ */\n+public class AbstractDataSourceProviderTest {\n+\n+    private final String dbcpDatasourceType = \"dbcp\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "727cef9d293dbf5ef3b53464afac678bdb702cfe"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1586, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}