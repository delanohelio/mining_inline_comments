{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NzcyNzQz", "number": 2415, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzo1Nzo0MFrOD0Gpmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMDoyMTo1M1rOD2S7rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTYxNDk5OnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/ExecuteTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNzo1Nzo0MFrOGI4CeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODo0MjozOVrOGI5_JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk1OTkyOQ==", "bodyText": "Add BranchType.SAGA. Bind Saga type will commit at another pr : #2551", "url": "https://github.com/seata/seata/pull/2415#discussion_r411959929", "createdAt": "2020-04-21T07:57:40Z", "author": {"login": "long187"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/ExecuteTemplate.java", "diffHunk": "@@ -108,4 +110,17 @@\n         }\n         return rs;\n     }\n+\n+    private static boolean requiresUndoFunction() {\n+\n+        if (!RootContext.inGlobalTransaction() && !RootContext.requireGlobalLock()) {\n+            return false;\n+        }\n+\n+        if (RootContext.inGlobalTransaction() && StringUtils.equals(BranchType.TCC.name(), RootContext.getBranchType())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0613b9a71a1457d4b9e6e4a521b2ba3c83f9dd"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk5MTg0NQ==", "bodyText": "OK,thank you for notification, branchType SAGA was now added in my judgement conditions.", "url": "https://github.com/seata/seata/pull/2415#discussion_r411991845", "createdAt": "2020-04-21T08:42:39Z", "author": {"login": "booogu"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/ExecuteTemplate.java", "diffHunk": "@@ -108,4 +110,17 @@\n         }\n         return rs;\n     }\n+\n+    private static boolean requiresUndoFunction() {\n+\n+        if (!RootContext.inGlobalTransaction() && !RootContext.requireGlobalLock()) {\n+            return false;\n+        }\n+\n+        if (RootContext.inGlobalTransaction() && StringUtils.equals(BranchType.TCC.name(), RootContext.getBranchType())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk1OTkyOQ=="}, "originalCommit": {"oid": "3a0613b9a71a1457d4b9e6e4a521b2ba3c83f9dd"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTc4NDQ4OnYy", "diffSide": "RIGHT", "path": "integration/dubbo-alibaba/src/main/java/io/seata/integration/dubbo/alibaba/AlibabaDubboTransactionPropagationFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNTo0MDoxMFrOGJMSWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjoyNDoyN1rOGJgaOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI5MTY3Mw==", "bodyText": "?\nNot the same as ApacheDubboTransactionPropagationFilter.java", "url": "https://github.com/seata/seata/pull/2415#discussion_r412291673", "createdAt": "2020-04-21T15:40:10Z", "author": {"login": "zjinlei"}, "path": "integration/dubbo-alibaba/src/main/java/io/seata/integration/dubbo/alibaba/AlibabaDubboTransactionPropagationFilter.java", "diffHunk": "@@ -43,45 +45,49 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept\n             return invoker.invoke(invocation);\n         }\n         String xid = RootContext.getXID();\n-        String xidInterceptorType = RootContext.getXIDInterceptorType();\n+        String branchType = RootContext.getBranchType();\n \n         String rpcXid = getRpcXid();\n-        String rpcXidInterceptorType = RpcContext.getContext().getAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE);\n+        String rpcInTCCScope = RpcContext.getContext().getAttachment(RootContext.KEY_BRANCH_TYPE);\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"xid in RootContext[{}] xid in RpcContext[{}]\", xid, rpcXid);\n         }\n         boolean bind = false;\n         if (xid != null) {\n             RpcContext.getContext().setAttachment(RootContext.KEY_XID, xid);\n-            RpcContext.getContext().setAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE, xidInterceptorType);\n+            RpcContext.getContext().setAttachment(RootContext.KEY_BRANCH_TYPE, branchType);\n         } else {\n             if (rpcXid != null) {\n                 RootContext.bind(rpcXid);\n-                RootContext.bindInterceptorType(rpcXidInterceptorType);\n+                if (StringUtils.equals(rpcInTCCScope, String.valueOf(true))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd8b7ebe0ccf628dd4033ff9a9cea9d5971fa0d4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYyMTM3MQ==", "bodyText": "Sorry,my fault, the code in apacheDubbo was right , i will make them same.", "url": "https://github.com/seata/seata/pull/2415#discussion_r412621371", "createdAt": "2020-04-22T02:24:27Z", "author": {"login": "booogu"}, "path": "integration/dubbo-alibaba/src/main/java/io/seata/integration/dubbo/alibaba/AlibabaDubboTransactionPropagationFilter.java", "diffHunk": "@@ -43,45 +45,49 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept\n             return invoker.invoke(invocation);\n         }\n         String xid = RootContext.getXID();\n-        String xidInterceptorType = RootContext.getXIDInterceptorType();\n+        String branchType = RootContext.getBranchType();\n \n         String rpcXid = getRpcXid();\n-        String rpcXidInterceptorType = RpcContext.getContext().getAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE);\n+        String rpcInTCCScope = RpcContext.getContext().getAttachment(RootContext.KEY_BRANCH_TYPE);\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"xid in RootContext[{}] xid in RpcContext[{}]\", xid, rpcXid);\n         }\n         boolean bind = false;\n         if (xid != null) {\n             RpcContext.getContext().setAttachment(RootContext.KEY_XID, xid);\n-            RpcContext.getContext().setAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE, xidInterceptorType);\n+            RpcContext.getContext().setAttachment(RootContext.KEY_BRANCH_TYPE, branchType);\n         } else {\n             if (rpcXid != null) {\n                 RootContext.bind(rpcXid);\n-                RootContext.bindInterceptorType(rpcXidInterceptorType);\n+                if (StringUtils.equals(rpcInTCCScope, String.valueOf(true))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI5MTY3Mw=="}, "originalCommit": {"oid": "bd8b7ebe0ccf628dd4033ff9a9cea9d5971fa0d4"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTc5NDMyOnYy", "diffSide": "RIGHT", "path": "integration/dubbo/src/main/java/io/seata/integration/dubbo/ApacheDubboTransactionPropagationFilter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNTo0NTo0OFrOGJMYPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzowNzo1NVrOGLW1JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI5MzE4MQ==", "bodyText": "Log output branchType", "url": "https://github.com/seata/seata/pull/2415#discussion_r412293181", "createdAt": "2020-04-21T15:45:48Z", "author": {"login": "zjinlei"}, "path": "integration/dubbo/src/main/java/io/seata/integration/dubbo/ApacheDubboTransactionPropagationFilter.java", "diffHunk": "@@ -40,42 +42,49 @@\n     @Override\n     public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n         String xid = RootContext.getXID();\n-        String xidInterceptorType = RootContext.getXIDInterceptorType();\n+        String branchType = RootContext.getBranchType();\n \n         String rpcXid = getRpcXid();\n-        String rpcXidInterceptorType = RpcContext.getContext().getAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE);\n+        String rpcBranchType = RpcContext.getContext().getAttachment(RootContext.KEY_BRANCH_TYPE);\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"xid in RootContext[{}] xid in RpcContext[{}]\", xid, rpcXid);\n         }\n         boolean bind = false;\n         if (xid != null) {\n             RpcContext.getContext().setAttachment(RootContext.KEY_XID, xid);\n-            RpcContext.getContext().setAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE, xidInterceptorType);\n+            RpcContext.getContext().setAttachment(RootContext.KEY_BRANCH_TYPE, branchType);\n         } else {\n             if (rpcXid != null) {\n                 RootContext.bind(rpcXid);\n-                RootContext.bindInterceptorType(rpcXidInterceptorType);\n+                if (StringUtils.equals(BranchType.TCC.name(), rpcBranchType)) {\n+                    RootContext.bindBranchType(BranchType.TCC);\n+                }\n                 bind = true;\n                 if (LOGGER.isDebugEnabled()) {\n-                    LOGGER.debug(\"bind[{}] interceptorType[{}] to RootContext\", rpcXid, rpcXidInterceptorType);\n+                    LOGGER.debug(\"bind[{}] to RootContext\", rpcXid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd8b7ebe0ccf628dd4033ff9a9cea9d5971fa0d4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYyMDk1OQ==", "bodyText": "OK,done.", "url": "https://github.com/seata/seata/pull/2415#discussion_r412620959", "createdAt": "2020-04-22T02:23:14Z", "author": {"login": "booogu"}, "path": "integration/dubbo/src/main/java/io/seata/integration/dubbo/ApacheDubboTransactionPropagationFilter.java", "diffHunk": "@@ -40,42 +42,49 @@\n     @Override\n     public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n         String xid = RootContext.getXID();\n-        String xidInterceptorType = RootContext.getXIDInterceptorType();\n+        String branchType = RootContext.getBranchType();\n \n         String rpcXid = getRpcXid();\n-        String rpcXidInterceptorType = RpcContext.getContext().getAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE);\n+        String rpcBranchType = RpcContext.getContext().getAttachment(RootContext.KEY_BRANCH_TYPE);\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"xid in RootContext[{}] xid in RpcContext[{}]\", xid, rpcXid);\n         }\n         boolean bind = false;\n         if (xid != null) {\n             RpcContext.getContext().setAttachment(RootContext.KEY_XID, xid);\n-            RpcContext.getContext().setAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE, xidInterceptorType);\n+            RpcContext.getContext().setAttachment(RootContext.KEY_BRANCH_TYPE, branchType);\n         } else {\n             if (rpcXid != null) {\n                 RootContext.bind(rpcXid);\n-                RootContext.bindInterceptorType(rpcXidInterceptorType);\n+                if (StringUtils.equals(BranchType.TCC.name(), rpcBranchType)) {\n+                    RootContext.bindBranchType(BranchType.TCC);\n+                }\n                 bind = true;\n                 if (LOGGER.isDebugEnabled()) {\n-                    LOGGER.debug(\"bind[{}] interceptorType[{}] to RootContext\", rpcXid, rpcXidInterceptorType);\n+                    LOGGER.debug(\"bind[{}] to RootContext\", rpcXid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI5MzE4MQ=="}, "originalCommit": {"oid": "bd8b7ebe0ccf628dd4033ff9a9cea9d5971fa0d4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY4MTU3Mg==", "bodyText": "Combine xid and branchType output without judgment \"if (StringUtils.equals(BranchType.TCC.name()...\"", "url": "https://github.com/seata/seata/pull/2415#discussion_r412681572", "createdAt": "2020-04-22T05:31:55Z", "author": {"login": "zjinlei"}, "path": "integration/dubbo/src/main/java/io/seata/integration/dubbo/ApacheDubboTransactionPropagationFilter.java", "diffHunk": "@@ -40,42 +42,49 @@\n     @Override\n     public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n         String xid = RootContext.getXID();\n-        String xidInterceptorType = RootContext.getXIDInterceptorType();\n+        String branchType = RootContext.getBranchType();\n \n         String rpcXid = getRpcXid();\n-        String rpcXidInterceptorType = RpcContext.getContext().getAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE);\n+        String rpcBranchType = RpcContext.getContext().getAttachment(RootContext.KEY_BRANCH_TYPE);\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"xid in RootContext[{}] xid in RpcContext[{}]\", xid, rpcXid);\n         }\n         boolean bind = false;\n         if (xid != null) {\n             RpcContext.getContext().setAttachment(RootContext.KEY_XID, xid);\n-            RpcContext.getContext().setAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE, xidInterceptorType);\n+            RpcContext.getContext().setAttachment(RootContext.KEY_BRANCH_TYPE, branchType);\n         } else {\n             if (rpcXid != null) {\n                 RootContext.bind(rpcXid);\n-                RootContext.bindInterceptorType(rpcXidInterceptorType);\n+                if (StringUtils.equals(BranchType.TCC.name(), rpcBranchType)) {\n+                    RootContext.bindBranchType(BranchType.TCC);\n+                }\n                 bind = true;\n                 if (LOGGER.isDebugEnabled()) {\n-                    LOGGER.debug(\"bind[{}] interceptorType[{}] to RootContext\", rpcXid, rpcXidInterceptorType);\n+                    LOGGER.debug(\"bind[{}] to RootContext\", rpcXid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI5MzE4MQ=="}, "originalCommit": {"oid": "bd8b7ebe0ccf628dd4033ff9a9cea9d5971fa0d4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU2MTU3Mg==", "bodyText": "Combine xid and branchType output without judgment \"if (StringUtils.equals(BranchType.TCC.name()...\"\n\nOK, done", "url": "https://github.com/seata/seata/pull/2415#discussion_r414561572", "createdAt": "2020-04-24T13:07:55Z", "author": {"login": "booogu"}, "path": "integration/dubbo/src/main/java/io/seata/integration/dubbo/ApacheDubboTransactionPropagationFilter.java", "diffHunk": "@@ -40,42 +42,49 @@\n     @Override\n     public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n         String xid = RootContext.getXID();\n-        String xidInterceptorType = RootContext.getXIDInterceptorType();\n+        String branchType = RootContext.getBranchType();\n \n         String rpcXid = getRpcXid();\n-        String rpcXidInterceptorType = RpcContext.getContext().getAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE);\n+        String rpcBranchType = RpcContext.getContext().getAttachment(RootContext.KEY_BRANCH_TYPE);\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"xid in RootContext[{}] xid in RpcContext[{}]\", xid, rpcXid);\n         }\n         boolean bind = false;\n         if (xid != null) {\n             RpcContext.getContext().setAttachment(RootContext.KEY_XID, xid);\n-            RpcContext.getContext().setAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE, xidInterceptorType);\n+            RpcContext.getContext().setAttachment(RootContext.KEY_BRANCH_TYPE, branchType);\n         } else {\n             if (rpcXid != null) {\n                 RootContext.bind(rpcXid);\n-                RootContext.bindInterceptorType(rpcXidInterceptorType);\n+                if (StringUtils.equals(BranchType.TCC.name(), rpcBranchType)) {\n+                    RootContext.bindBranchType(BranchType.TCC);\n+                }\n                 bind = true;\n                 if (LOGGER.isDebugEnabled()) {\n-                    LOGGER.debug(\"bind[{}] interceptorType[{}] to RootContext\", rpcXid, rpcXidInterceptorType);\n+                    LOGGER.debug(\"bind[{}] to RootContext\", rpcXid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI5MzE4MQ=="}, "originalCommit": {"oid": "bd8b7ebe0ccf628dd4033ff9a9cea9d5971fa0d4"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDQ3NzE3OnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/ExecuteTemplate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNTozMjozN1rOGJkGSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNTozMjozN1rOGJkGSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY4MTgwMA==", "bodyText": "@GlobalLock does not have undo, this function name should be optimized", "url": "https://github.com/seata/seata/pull/2415#discussion_r412681800", "createdAt": "2020-04-22T05:32:37Z", "author": {"login": "zjinlei"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/ExecuteTemplate.java", "diffHunk": "@@ -66,7 +68,7 @@\n                                                      StatementCallback<T, S> statementCallback,\n                                                      Object... args) throws SQLException {\n \n-        if (!RootContext.inGlobalTransaction() && !RootContext.requireGlobalLock()) {\n+        if (!requiresUndoFunction()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95ddbe280d1ac8f9c05bd78e3f14707780450862"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDM4MzIyOnYy", "diffSide": "RIGHT", "path": "integration/dubbo-alibaba/src/main/java/io/seata/integration/dubbo/alibaba/AlibabaDubboTransactionPropagationFilter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzoxNDo0N1rOGKaONg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjo1Njo1OFrOGKn5ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU2ODU2Ng==", "bodyText": "Saga branch never set ?", "url": "https://github.com/seata/seata/pull/2415#discussion_r413568566", "createdAt": "2020-04-23T07:14:47Z", "author": {"login": "wangliang181230"}, "path": "integration/dubbo-alibaba/src/main/java/io/seata/integration/dubbo/alibaba/AlibabaDubboTransactionPropagationFilter.java", "diffHunk": "@@ -43,45 +45,56 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept\n             return invoker.invoke(invocation);\n         }\n         String xid = RootContext.getXID();\n-        String xidInterceptorType = RootContext.getXIDInterceptorType();\n+        String branchType = RootContext.getBranchType();\n \n         String rpcXid = getRpcXid();\n-        String rpcXidInterceptorType = RpcContext.getContext().getAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE);\n+        String rpcBranchType = RpcContext.getContext().getAttachment(RootContext.KEY_BRANCH_TYPE);\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"xid in RootContext[{}] xid in RpcContext[{}]\", xid, rpcXid);\n         }\n         boolean bind = false;\n         if (xid != null) {\n             RpcContext.getContext().setAttachment(RootContext.KEY_XID, xid);\n-            RpcContext.getContext().setAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE, xidInterceptorType);\n+            RpcContext.getContext().setAttachment(RootContext.KEY_BRANCH_TYPE, branchType);\n         } else {\n             if (rpcXid != null) {\n                 RootContext.bind(rpcXid);\n-                RootContext.bindInterceptorType(rpcXidInterceptorType);\n+                if (StringUtils.equals(BranchType.TCC.name(), rpcBranchType)) {\n+                    RootContext.bindBranchType(BranchType.TCC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95ddbe280d1ac8f9c05bd78e3f14707780450862"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0MzU2MQ==", "bodyText": "I have discussed with the author of saga. This pr is only responsible for the branchType judgment logic in ExecuteTemplate and the TCC branchType passing in Filter. The specific Saga branchtype assignment and other logic will be provided by the feature saga related pr", "url": "https://github.com/seata/seata/pull/2415#discussion_r413643561", "createdAt": "2020-04-23T09:04:34Z", "author": {"login": "booogu"}, "path": "integration/dubbo-alibaba/src/main/java/io/seata/integration/dubbo/alibaba/AlibabaDubboTransactionPropagationFilter.java", "diffHunk": "@@ -43,45 +45,56 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept\n             return invoker.invoke(invocation);\n         }\n         String xid = RootContext.getXID();\n-        String xidInterceptorType = RootContext.getXIDInterceptorType();\n+        String branchType = RootContext.getBranchType();\n \n         String rpcXid = getRpcXid();\n-        String rpcXidInterceptorType = RpcContext.getContext().getAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE);\n+        String rpcBranchType = RpcContext.getContext().getAttachment(RootContext.KEY_BRANCH_TYPE);\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"xid in RootContext[{}] xid in RpcContext[{}]\", xid, rpcXid);\n         }\n         boolean bind = false;\n         if (xid != null) {\n             RpcContext.getContext().setAttachment(RootContext.KEY_XID, xid);\n-            RpcContext.getContext().setAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE, xidInterceptorType);\n+            RpcContext.getContext().setAttachment(RootContext.KEY_BRANCH_TYPE, branchType);\n         } else {\n             if (rpcXid != null) {\n                 RootContext.bind(rpcXid);\n-                RootContext.bindInterceptorType(rpcXidInterceptorType);\n+                if (StringUtils.equals(BranchType.TCC.name(), rpcBranchType)) {\n+                    RootContext.bindBranchType(BranchType.TCC);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU2ODU2Ng=="}, "originalCommit": {"oid": "95ddbe280d1ac8f9c05bd78e3f14707780450862"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc5MjY5OA==", "bodyText": "this #2551, autor is wangliang1986", "url": "https://github.com/seata/seata/pull/2415#discussion_r413792698", "createdAt": "2020-04-23T12:56:58Z", "author": {"login": "long187"}, "path": "integration/dubbo-alibaba/src/main/java/io/seata/integration/dubbo/alibaba/AlibabaDubboTransactionPropagationFilter.java", "diffHunk": "@@ -43,45 +45,56 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept\n             return invoker.invoke(invocation);\n         }\n         String xid = RootContext.getXID();\n-        String xidInterceptorType = RootContext.getXIDInterceptorType();\n+        String branchType = RootContext.getBranchType();\n \n         String rpcXid = getRpcXid();\n-        String rpcXidInterceptorType = RpcContext.getContext().getAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE);\n+        String rpcBranchType = RpcContext.getContext().getAttachment(RootContext.KEY_BRANCH_TYPE);\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"xid in RootContext[{}] xid in RpcContext[{}]\", xid, rpcXid);\n         }\n         boolean bind = false;\n         if (xid != null) {\n             RpcContext.getContext().setAttachment(RootContext.KEY_XID, xid);\n-            RpcContext.getContext().setAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE, xidInterceptorType);\n+            RpcContext.getContext().setAttachment(RootContext.KEY_BRANCH_TYPE, branchType);\n         } else {\n             if (rpcXid != null) {\n                 RootContext.bind(rpcXid);\n-                RootContext.bindInterceptorType(rpcXidInterceptorType);\n+                if (StringUtils.equals(BranchType.TCC.name(), rpcBranchType)) {\n+                    RootContext.bindBranchType(BranchType.TCC);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU2ODU2Ng=="}, "originalCommit": {"oid": "95ddbe280d1ac8f9c05bd78e3f14707780450862"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjU5NDE0OnYy", "diffSide": "RIGHT", "path": "integration/dubbo-alibaba/src/main/java/io/seata/integration/dubbo/alibaba/AlibabaDubboTransactionPropagationFilter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMDoxOToxNVrOGMCVWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMToxMTowMVrOGMC7Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3NDMzMQ==", "bodyText": "Is it better to separate and judge?", "url": "https://github.com/seata/seata/pull/2415#discussion_r415274331", "createdAt": "2020-04-26T10:19:15Z", "author": {"login": "slievrly"}, "path": "integration/dubbo-alibaba/src/main/java/io/seata/integration/dubbo/alibaba/AlibabaDubboTransactionPropagationFilter.java", "diffHunk": "@@ -43,45 +45,51 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept\n             return invoker.invoke(invocation);\n         }\n         String xid = RootContext.getXID();\n-        String xidInterceptorType = RootContext.getXIDInterceptorType();\n+        String branchType = RootContext.getBranchType();\n \n         String rpcXid = getRpcXid();\n-        String rpcXidInterceptorType = RpcContext.getContext().getAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE);\n+        String rpcBranchType = RpcContext.getContext().getAttachment(RootContext.KEY_BRANCH_TYPE);\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"xid in RootContext[{}] xid in RpcContext[{}]\", xid, rpcXid);\n         }\n         boolean bind = false;\n         if (xid != null) {\n             RpcContext.getContext().setAttachment(RootContext.KEY_XID, xid);\n-            RpcContext.getContext().setAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE, xidInterceptorType);\n+            RpcContext.getContext().setAttachment(RootContext.KEY_BRANCH_TYPE, branchType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e86dd32c43b972293c0a6826b4caa9d9bfbfc92"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI4NDA0Nw==", "bodyText": "It will not be processed this time, and transaction context object encapsulation will be provided later to handle log output uniformly.", "url": "https://github.com/seata/seata/pull/2415#discussion_r415284047", "createdAt": "2020-04-26T11:11:01Z", "author": {"login": "booogu"}, "path": "integration/dubbo-alibaba/src/main/java/io/seata/integration/dubbo/alibaba/AlibabaDubboTransactionPropagationFilter.java", "diffHunk": "@@ -43,45 +45,51 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept\n             return invoker.invoke(invocation);\n         }\n         String xid = RootContext.getXID();\n-        String xidInterceptorType = RootContext.getXIDInterceptorType();\n+        String branchType = RootContext.getBranchType();\n \n         String rpcXid = getRpcXid();\n-        String rpcXidInterceptorType = RpcContext.getContext().getAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE);\n+        String rpcBranchType = RpcContext.getContext().getAttachment(RootContext.KEY_BRANCH_TYPE);\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"xid in RootContext[{}] xid in RpcContext[{}]\", xid, rpcXid);\n         }\n         boolean bind = false;\n         if (xid != null) {\n             RpcContext.getContext().setAttachment(RootContext.KEY_XID, xid);\n-            RpcContext.getContext().setAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE, xidInterceptorType);\n+            RpcContext.getContext().setAttachment(RootContext.KEY_BRANCH_TYPE, branchType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3NDMzMQ=="}, "originalCommit": {"oid": "7e86dd32c43b972293c0a6826b4caa9d9bfbfc92"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjU5NjcwOnYy", "diffSide": "RIGHT", "path": "integration/dubbo-alibaba/src/main/java/io/seata/integration/dubbo/alibaba/AlibabaDubboTransactionPropagationFilter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMDoyMDo1NlrOGMCWjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMToxMjo0OVrOGMC80A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3NDYzNw==", "bodyText": "BranchType print null in AT mode is not very elegant.", "url": "https://github.com/seata/seata/pull/2415#discussion_r415274637", "createdAt": "2020-04-26T10:20:56Z", "author": {"login": "slievrly"}, "path": "integration/dubbo-alibaba/src/main/java/io/seata/integration/dubbo/alibaba/AlibabaDubboTransactionPropagationFilter.java", "diffHunk": "@@ -43,45 +45,51 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept\n             return invoker.invoke(invocation);\n         }\n         String xid = RootContext.getXID();\n-        String xidInterceptorType = RootContext.getXIDInterceptorType();\n+        String branchType = RootContext.getBranchType();\n \n         String rpcXid = getRpcXid();\n-        String rpcXidInterceptorType = RpcContext.getContext().getAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE);\n+        String rpcBranchType = RpcContext.getContext().getAttachment(RootContext.KEY_BRANCH_TYPE);\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"xid in RootContext[{}] xid in RpcContext[{}]\", xid, rpcXid);\n         }\n         boolean bind = false;\n         if (xid != null) {\n             RpcContext.getContext().setAttachment(RootContext.KEY_XID, xid);\n-            RpcContext.getContext().setAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE, xidInterceptorType);\n+            RpcContext.getContext().setAttachment(RootContext.KEY_BRANCH_TYPE, branchType);\n         } else {\n             if (rpcXid != null) {\n                 RootContext.bind(rpcXid);\n-                RootContext.bindInterceptorType(rpcXidInterceptorType);\n+                if (StringUtils.equals(BranchType.TCC.name(), rpcBranchType)) {\n+                    RootContext.bindBranchType(BranchType.TCC);\n+                }\n                 bind = true;\n                 if (LOGGER.isDebugEnabled()) {\n-                    LOGGER.debug(\"bind[{}] interceptorType[{}] to RootContext\", rpcXid, rpcXidInterceptorType);\n+                    LOGGER.debug(\"bind xid [{}] branchType [{}] to RootContext\", rpcXid, rpcBranchType);\n                 }\n             }\n         }\n         try {\n             return invoker.invoke(invocation);\n-\n         } finally {\n             if (bind) {\n-                String unbindInterceptorType = RootContext.unbindInterceptorType();\n                 String unbindXid = RootContext.unbind();\n+                String previousBranchType = RootContext.getBranchType();\n+                if (StringUtils.equals(BranchType.TCC.name(), previousBranchType)) {\n+                    RootContext.unbindBranchType();\n+                }\n                 if (LOGGER.isDebugEnabled()) {\n-                    LOGGER.debug(\"unbind[{}] interceptorType[{}] from RootContext\", unbindXid, unbindInterceptorType);\n+                    LOGGER.debug(\"unbind xid [{}] branchType [{}] from RootContext\", unbindXid, previousBranchType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e86dd32c43b972293c0a6826b4caa9d9bfbfc92"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI4NDQzMg==", "bodyText": "How about judge in the log output temporarily,and print \"AT\" if it is null", "url": "https://github.com/seata/seata/pull/2415#discussion_r415284432", "createdAt": "2020-04-26T11:12:49Z", "author": {"login": "booogu"}, "path": "integration/dubbo-alibaba/src/main/java/io/seata/integration/dubbo/alibaba/AlibabaDubboTransactionPropagationFilter.java", "diffHunk": "@@ -43,45 +45,51 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept\n             return invoker.invoke(invocation);\n         }\n         String xid = RootContext.getXID();\n-        String xidInterceptorType = RootContext.getXIDInterceptorType();\n+        String branchType = RootContext.getBranchType();\n \n         String rpcXid = getRpcXid();\n-        String rpcXidInterceptorType = RpcContext.getContext().getAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE);\n+        String rpcBranchType = RpcContext.getContext().getAttachment(RootContext.KEY_BRANCH_TYPE);\n         if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"xid in RootContext[{}] xid in RpcContext[{}]\", xid, rpcXid);\n         }\n         boolean bind = false;\n         if (xid != null) {\n             RpcContext.getContext().setAttachment(RootContext.KEY_XID, xid);\n-            RpcContext.getContext().setAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE, xidInterceptorType);\n+            RpcContext.getContext().setAttachment(RootContext.KEY_BRANCH_TYPE, branchType);\n         } else {\n             if (rpcXid != null) {\n                 RootContext.bind(rpcXid);\n-                RootContext.bindInterceptorType(rpcXidInterceptorType);\n+                if (StringUtils.equals(BranchType.TCC.name(), rpcBranchType)) {\n+                    RootContext.bindBranchType(BranchType.TCC);\n+                }\n                 bind = true;\n                 if (LOGGER.isDebugEnabled()) {\n-                    LOGGER.debug(\"bind[{}] interceptorType[{}] to RootContext\", rpcXid, rpcXidInterceptorType);\n+                    LOGGER.debug(\"bind xid [{}] branchType [{}] to RootContext\", rpcXid, rpcBranchType);\n                 }\n             }\n         }\n         try {\n             return invoker.invoke(invocation);\n-\n         } finally {\n             if (bind) {\n-                String unbindInterceptorType = RootContext.unbindInterceptorType();\n                 String unbindXid = RootContext.unbind();\n+                String previousBranchType = RootContext.getBranchType();\n+                if (StringUtils.equals(BranchType.TCC.name(), previousBranchType)) {\n+                    RootContext.unbindBranchType();\n+                }\n                 if (LOGGER.isDebugEnabled()) {\n-                    LOGGER.debug(\"unbind[{}] interceptorType[{}] from RootContext\", unbindXid, unbindInterceptorType);\n+                    LOGGER.debug(\"unbind xid [{}] branchType [{}] from RootContext\", unbindXid, previousBranchType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3NDYzNw=="}, "originalCommit": {"oid": "7e86dd32c43b972293c0a6826b4caa9d9bfbfc92"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjU5ODg2OnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/ExecuteTemplate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMDoyMTo1M1rOGMCXfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMToxMzoyNFrOGMC9PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3NDg3OQ==", "bodyText": "Other more meaningful method name?", "url": "https://github.com/seata/seata/pull/2415#discussion_r415274879", "createdAt": "2020-04-26T10:21:53Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/ExecuteTemplate.java", "diffHunk": "@@ -115,4 +117,17 @@\n         }\n         return rs;\n     }\n+\n+    private static boolean requiresLockOrUndoFunction() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e86dd32c43b972293c0a6826b4caa9d9bfbfc92"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI4NDU0MQ==", "bodyText": "Change it to \"shouldExecuteInATMode\"", "url": "https://github.com/seata/seata/pull/2415#discussion_r415284541", "createdAt": "2020-04-26T11:13:24Z", "author": {"login": "booogu"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/ExecuteTemplate.java", "diffHunk": "@@ -115,4 +117,17 @@\n         }\n         return rs;\n     }\n+\n+    private static boolean requiresLockOrUndoFunction() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3NDg3OQ=="}, "originalCommit": {"oid": "7e86dd32c43b972293c0a6826b4caa9d9bfbfc92"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1711, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}