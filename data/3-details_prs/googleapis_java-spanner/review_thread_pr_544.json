{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5NDEzODU2", "number": 544, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOToyOToxN1rOEzNpzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxMzowMjo1MVrOFa4Utw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTM2NTI2OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPoolAsyncTransactionManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOToyOToxN1rOHqTQtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwNzoyODo1NFrOHrlo3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDExNzgxNQ==", "bodyText": "Should this be \"getCommitResponse can only be invoked...\"?", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r514117815", "createdAt": "2020-10-29T09:29:17Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPoolAsyncTransactionManager.java", "diffHunk": "@@ -239,4 +244,22 @@ public TransactionState getState() {\n       return txnState;\n     }\n   }\n+\n+  public ApiFuture<CommitResponse> getCommitResponse() {\n+    synchronized (lock) {\n+      Preconditions.checkState(\n+          txnState == TransactionState.COMMITTED,\n+          \"commit can only be invoked if the transaction was successfully committed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def876854f2dad9fe1568cd419f439f2b28fd1e6"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ2NzQ4NQ==", "bodyText": "No, this is in the actual commit method. A client application could for example call commit() after calling rollback or before calling begin. This error will be thrown in those cases.", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r515467485", "createdAt": "2020-10-31T07:28:54Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPoolAsyncTransactionManager.java", "diffHunk": "@@ -239,4 +244,22 @@ public TransactionState getState() {\n       return txnState;\n     }\n   }\n+\n+  public ApiFuture<CommitResponse> getCommitResponse() {\n+    synchronized (lock) {\n+      Preconditions.checkState(\n+          txnState == TransactionState.COMMITTED,\n+          \"commit can only be invoked if the transaction was successfully committed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDExNzgxNQ=="}, "originalCommit": {"oid": "def876854f2dad9fe1568cd419f439f2b28fd1e6"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTM2NjIwOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOToyOTozMlrOHqTRTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOToyOTozMlrOHqTRTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDExNzk2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"getCommitTimestamp can only be invoked if the transaction committed successfully\");\n          \n          \n            \n                    \"getCommitResponse can only be invoked if the transaction committed successfully\");", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r514117965", "createdAt": "2020-10-29T09:29:32Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionManagerImpl.java", "diffHunk": "@@ -115,7 +117,14 @@ public Timestamp getCommitTimestamp() {\n     Preconditions.checkState(\n         txnState == TransactionState.COMMITTED,\n         \"getCommitTimestamp can only be invoked if the transaction committed successfully\");\n-    return txn.commitTimestamp();\n+    return txn.getCommitResponse().getCommitTimestamp();\n+  }\n+\n+  public CommitResponse getCommitResponse() {\n+    Preconditions.checkState(\n+        txnState == TransactionState.COMMITTED,\n+        \"getCommitTimestamp can only be invoked if the transaction committed successfully\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def876854f2dad9fe1568cd419f439f2b28fd1e6"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzODI2ODkyOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/clirr-ignored-differences.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxMzo1NDozN1rOIX3ggg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxMzo1NDozN1rOIX3ggg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg5NzYwMg==", "bodyText": "another one where a major version bump is required", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r561897602", "createdAt": "2021-01-21T13:54:37Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/clirr-ignored-differences.xml", "diffHunk": "@@ -406,4 +406,62 @@\n     <className>com/google/cloud/spanner/AbstractLazyInitializer</className>\n     <method>java.lang.Object initialize()</method>\n   </difference>\n+  \n+  <!-- Support for CommitStats added -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b710a76f3cf947a2df5576f0c1c5eda3b43b9ff"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NTg3Mzk3OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/Options.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxMzo0NzozMVrOIb4U2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0zMFQxNjoxMDoyNVrOIc_JNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEwNTMwNg==", "bodyText": "Boolean.valueOf(withCommitStats).hashCode() is a constant here.", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r566105306", "createdAt": "2021-01-28T13:47:31Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/Options.java", "diffHunk": "@@ -253,6 +277,9 @@ public boolean equals(Object o) {\n   @Override\n   public int hashCode() {\n     int result = 31;\n+    if (withCommitStats) {\n+      result = 31 * result + Boolean.valueOf(withCommitStats).hashCode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "664b87daf36668699cbc54dfc544ef64616f6da2"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI2NTU5MQ==", "bodyText": "Replaced with constant.", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r567265591", "createdAt": "2021-01-30T16:10:25Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/Options.java", "diffHunk": "@@ -253,6 +277,9 @@ public boolean equals(Object o) {\n   @Override\n   public int hashCode() {\n     int result = 31;\n+    if (withCommitStats) {\n+      result = 31 * result + Boolean.valueOf(withCommitStats).hashCode();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEwNTMwNg=="}, "originalCommit": {"oid": "664b87daf36668699cbc54dfc544ef64616f6da2"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NTg5MTgwOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxMzo1MToxNVrOIb4fuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0zMFQxNjoxMToxNlrOIc_JfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEwODA5MQ==", "bodyText": "This should be a separate test method so exactly one thing is tested in the method.", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r566108091", "createdAt": "2021-01-28T13:51:15Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -224,6 +224,9 @@ public void queryEquality() {\n   public void testFromTransactionOptions() {\n     Options opts = Options.fromTransactionOptions();\n     assertThat(opts.toString()).isEqualTo(\"\");\n+\n+    opts = Options.fromTransactionOptions(Options.commitStats());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "664b87daf36668699cbc54dfc544ef64616f6da2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI2NTY2MA==", "bodyText": "Separated into separate test methods.", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r567265660", "createdAt": "2021-01-30T16:11:16Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -224,6 +224,9 @@ public void queryEquality() {\n   public void testFromTransactionOptions() {\n     Options opts = Options.fromTransactionOptions();\n     assertThat(opts.toString()).isEqualTo(\"\");\n+\n+    opts = Options.fromTransactionOptions(Options.commitStats());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEwODA5MQ=="}, "originalCommit": {"oid": "664b87daf36668699cbc54dfc544ef64616f6da2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NTg5MzgzOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxMzo1MTozN1rOIb4g4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0zMFQxNjoxMDo0MFrOIc_JSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEwODM4Nw==", "bodyText": "again, separate test methods are advisable here.", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r566108387", "createdAt": "2021-01-28T13:51:37Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -237,6 +240,15 @@ public void testTransactionOptionsEquality() {\n \n     o2 = Options.fromReadOptions(Options.prefetchChunks(1));\n     assertThat(o1.equals(o2)).isFalse();\n+\n+    o1 = Options.fromTransactionOptions(Options.commitStats());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "664b87daf36668699cbc54dfc544ef64616f6da2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI2NTYwOA==", "bodyText": "Separated into separate test methods.", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r567265608", "createdAt": "2021-01-30T16:10:40Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -237,6 +240,15 @@ public void testTransactionOptionsEquality() {\n \n     o2 = Options.fromReadOptions(Options.prefetchChunks(1));\n     assertThat(o1.equals(o2)).isFalse();\n+\n+    o1 = Options.fromTransactionOptions(Options.commitStats());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEwODM4Nw=="}, "originalCommit": {"oid": "664b87daf36668699cbc54dfc544ef64616f6da2"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NTk3NTAzOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITAsyncAPITest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNDowODo0NlrOIb5SMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0zMFQxNjoxMDo1NFrOIc_JYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyMTAxMQ==", "bodyText": "txn --> transaction per Google style guide", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r566121011", "createdAt": "2021-01-28T14:08:46Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITAsyncAPITest.java", "diffHunk": "@@ -302,4 +316,65 @@ public void asyncRunnerFireAndForgetInvalidUpdate() throws Exception {\n       assertThat(client.singleUse().readRow(\"TestTable\", Key.of(\"k999\"), ALL_COLUMNS)).isNull();\n     }\n   }\n+\n+  @Test\n+  public void asyncRunnerReturnsCommitStats() {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    AsyncRunner runner = client.runAsync(Options.commitStats());\n+    runner.runAsync(\n+        new AsyncWork<Void>() {\n+          @Override\n+          public ApiFuture<Void> doWorkAsync(TransactionContext txn) {\n+            txn.buffer(\n+                Mutation.newInsertOrUpdateBuilder(TABLE_NAME)\n+                    .set(\"Key\")\n+                    .to(\"k_commit_stats\")\n+                    .set(\"StringValue\")\n+                    .to(\"Should return commit stats\")\n+                    .build());\n+            return ApiFutures.immediateFuture(null);\n+          }\n+        },\n+        executor);\n+    assertThat(get(runner.getCommitResponse()).getCommitStats()).isNotNull();\n+    // MutationCount = 2 columns + 2 secondary indexes.\n+    assertThat(get(runner.getCommitResponse()).getCommitStats().getMutationCount()).isEqualTo(4L);\n+  }\n+\n+  @Test\n+  public void asyncTransactionManagerReturnsCommitStats() throws InterruptedException {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    try (AsyncTransactionManager mgr = client.transactionManagerAsync(Options.commitStats())) {\n+      TransactionContextFuture ctx = mgr.beginAsync();\n+      while (true) {\n+        try {\n+          get(\n+              ctx.then(\n+                      new AsyncTransactionFunction<Void, Void>() {\n+                        @Override\n+                        public ApiFuture<Void> apply(TransactionContext txn, Void input)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "664b87daf36668699cbc54dfc544ef64616f6da2"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI2NTYzMg==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r567265632", "createdAt": "2021-01-30T16:10:54Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITAsyncAPITest.java", "diffHunk": "@@ -302,4 +316,65 @@ public void asyncRunnerFireAndForgetInvalidUpdate() throws Exception {\n       assertThat(client.singleUse().readRow(\"TestTable\", Key.of(\"k999\"), ALL_COLUMNS)).isNull();\n     }\n   }\n+\n+  @Test\n+  public void asyncRunnerReturnsCommitStats() {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    AsyncRunner runner = client.runAsync(Options.commitStats());\n+    runner.runAsync(\n+        new AsyncWork<Void>() {\n+          @Override\n+          public ApiFuture<Void> doWorkAsync(TransactionContext txn) {\n+            txn.buffer(\n+                Mutation.newInsertOrUpdateBuilder(TABLE_NAME)\n+                    .set(\"Key\")\n+                    .to(\"k_commit_stats\")\n+                    .set(\"StringValue\")\n+                    .to(\"Should return commit stats\")\n+                    .build());\n+            return ApiFutures.immediateFuture(null);\n+          }\n+        },\n+        executor);\n+    assertThat(get(runner.getCommitResponse()).getCommitStats()).isNotNull();\n+    // MutationCount = 2 columns + 2 secondary indexes.\n+    assertThat(get(runner.getCommitResponse()).getCommitStats().getMutationCount()).isEqualTo(4L);\n+  }\n+\n+  @Test\n+  public void asyncTransactionManagerReturnsCommitStats() throws InterruptedException {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    try (AsyncTransactionManager mgr = client.transactionManagerAsync(Options.commitStats())) {\n+      TransactionContextFuture ctx = mgr.beginAsync();\n+      while (true) {\n+        try {\n+          get(\n+              ctx.then(\n+                      new AsyncTransactionFunction<Void, Void>() {\n+                        @Override\n+                        public ApiFuture<Void> apply(TransactionContext txn, Void input)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyMTAxMQ=="}, "originalCommit": {"oid": "664b87daf36668699cbc54dfc544ef64616f6da2"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2NTk3NTg1OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITAsyncAPITest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNDowODo1N1rOIb5Stw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0zMFQxNjoxMDo0OVrOIc_JXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyMTE0Mw==", "bodyText": "ctx --> context per Google style guide", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r566121143", "createdAt": "2021-01-28T14:08:57Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITAsyncAPITest.java", "diffHunk": "@@ -302,4 +316,65 @@ public void asyncRunnerFireAndForgetInvalidUpdate() throws Exception {\n       assertThat(client.singleUse().readRow(\"TestTable\", Key.of(\"k999\"), ALL_COLUMNS)).isNull();\n     }\n   }\n+\n+  @Test\n+  public void asyncRunnerReturnsCommitStats() {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    AsyncRunner runner = client.runAsync(Options.commitStats());\n+    runner.runAsync(\n+        new AsyncWork<Void>() {\n+          @Override\n+          public ApiFuture<Void> doWorkAsync(TransactionContext txn) {\n+            txn.buffer(\n+                Mutation.newInsertOrUpdateBuilder(TABLE_NAME)\n+                    .set(\"Key\")\n+                    .to(\"k_commit_stats\")\n+                    .set(\"StringValue\")\n+                    .to(\"Should return commit stats\")\n+                    .build());\n+            return ApiFutures.immediateFuture(null);\n+          }\n+        },\n+        executor);\n+    assertThat(get(runner.getCommitResponse()).getCommitStats()).isNotNull();\n+    // MutationCount = 2 columns + 2 secondary indexes.\n+    assertThat(get(runner.getCommitResponse()).getCommitStats().getMutationCount()).isEqualTo(4L);\n+  }\n+\n+  @Test\n+  public void asyncTransactionManagerReturnsCommitStats() throws InterruptedException {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    try (AsyncTransactionManager mgr = client.transactionManagerAsync(Options.commitStats())) {\n+      TransactionContextFuture ctx = mgr.beginAsync();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "664b87daf36668699cbc54dfc544ef64616f6da2"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzI2NTYyOA==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r567265628", "createdAt": "2021-01-30T16:10:49Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITAsyncAPITest.java", "diffHunk": "@@ -302,4 +316,65 @@ public void asyncRunnerFireAndForgetInvalidUpdate() throws Exception {\n       assertThat(client.singleUse().readRow(\"TestTable\", Key.of(\"k999\"), ALL_COLUMNS)).isNull();\n     }\n   }\n+\n+  @Test\n+  public void asyncRunnerReturnsCommitStats() {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    AsyncRunner runner = client.runAsync(Options.commitStats());\n+    runner.runAsync(\n+        new AsyncWork<Void>() {\n+          @Override\n+          public ApiFuture<Void> doWorkAsync(TransactionContext txn) {\n+            txn.buffer(\n+                Mutation.newInsertOrUpdateBuilder(TABLE_NAME)\n+                    .set(\"Key\")\n+                    .to(\"k_commit_stats\")\n+                    .set(\"StringValue\")\n+                    .to(\"Should return commit stats\")\n+                    .build());\n+            return ApiFutures.immediateFuture(null);\n+          }\n+        },\n+        executor);\n+    assertThat(get(runner.getCommitResponse()).getCommitStats()).isNotNull();\n+    // MutationCount = 2 columns + 2 secondary indexes.\n+    assertThat(get(runner.getCommitResponse()).getCommitStats().getMutationCount()).isEqualTo(4L);\n+  }\n+\n+  @Test\n+  public void asyncTransactionManagerReturnsCommitStats() throws InterruptedException {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    try (AsyncTransactionManager mgr = client.transactionManagerAsync(Options.commitStats())) {\n+      TransactionContextFuture ctx = mgr.beginAsync();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyMTE0Mw=="}, "originalCommit": {"oid": "664b87daf36668699cbc54dfc544ef64616f6da2"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODIzNDQxOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDoxOTowMVrOIfEfmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNzowNToyM1rOIfMxnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1MDM5Mw==", "bodyText": "The assume here is surprising. Why would this be sometimes be true and sometimes not true in this one test method?", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r569450393", "createdAt": "2021-02-03T14:19:01Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionTest.java", "diffHunk": "@@ -630,4 +631,23 @@ public Long run(TransactionContext transaction) throws Exception {\n       assertThat(e.getErrorCode()).isEqualTo(ErrorCode.INVALID_ARGUMENT);\n     }\n   }\n+\n+  @Test\n+  public void transactionRunnerReturnsCommitStats() {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b448c3824eedc617647aa599be346a3b754b6fe"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTU4NjA3OQ==", "bodyText": "isUsingEmulator() checks whether the environment variable SPANNER_EMULATOR_HOST has been set to a non-empty value. If so, the integration tests are running against the emulator. The emulator does not support all features of Cloud Spanner, which means we need to skip some specific tests. The CI environments runs the tests both against the emulator and Cloud Spanner.", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r569586079", "createdAt": "2021-02-03T17:05:23Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionTest.java", "diffHunk": "@@ -630,4 +631,23 @@ public Long run(TransactionContext transaction) throws Exception {\n       assertThat(e.getErrorCode()).isEqualTo(ErrorCode.INVALID_ARGUMENT);\n     }\n   }\n+\n+  @Test\n+  public void transactionRunnerReturnsCommitStats() {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1MDM5Mw=="}, "originalCommit": {"oid": "0b448c3824eedc617647aa599be346a3b754b6fe"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODIzODg5OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDoxOTo0N1rOIfEijQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNzoyMDozNFrOIfNe0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1MTE0OQ==", "bodyText": "you can use assertNotNull here. Truth doesn't add anything for simple cases.", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r569451149", "createdAt": "2021-02-03T14:19:47Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionTest.java", "diffHunk": "@@ -630,4 +631,23 @@ public Long run(TransactionContext transaction) throws Exception {\n       assertThat(e.getErrorCode()).isEqualTo(ErrorCode.INVALID_ARGUMENT);\n     }\n   }\n+\n+  @Test\n+  public void transactionRunnerReturnsCommitStats() {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    final String key = uniqueKey();\n+    TransactionRunner runner = client.readWriteTransaction(Options.commitStats());\n+    runner.run(\n+        new TransactionCallable<Void>() {\n+          @Override\n+          public Void run(TransactionContext transaction) throws Exception {\n+            transaction.buffer(\n+                Mutation.newInsertBuilder(\"T\").set(\"K\").to(key).set(\"V\").to(0).build());\n+            return null;\n+          }\n+        });\n+    assertThat(runner.getCommitResponse().getCommitStats()).isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b448c3824eedc617647aa599be346a3b754b6fe"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTU5NzY1MQ==", "bodyText": "done.", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r569597651", "createdAt": "2021-02-03T17:20:34Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionTest.java", "diffHunk": "@@ -630,4 +631,23 @@ public Long run(TransactionContext transaction) throws Exception {\n       assertThat(e.getErrorCode()).isEqualTo(ErrorCode.INVALID_ARGUMENT);\n     }\n   }\n+\n+  @Test\n+  public void transactionRunnerReturnsCommitStats() {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    final String key = uniqueKey();\n+    TransactionRunner runner = client.readWriteTransaction(Options.commitStats());\n+    runner.run(\n+        new TransactionCallable<Void>() {\n+          @Override\n+          public Void run(TransactionContext transaction) throws Exception {\n+            transaction.buffer(\n+                Mutation.newInsertBuilder(\"T\").set(\"K\").to(key).set(\"V\").to(0).build());\n+            return null;\n+          }\n+        });\n+    assertThat(runner.getCommitResponse().getCommitStats()).isNotNull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1MTE0OQ=="}, "originalCommit": {"oid": "0b448c3824eedc617647aa599be346a3b754b6fe"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYzNzI0MDQ5OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxMjo0NzoyOFrOImE4mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxNDoxNDo0NlrOImIW6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njc5NjgyNA==", "bodyText": "will throw --> throws\nper Google style", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576796824", "createdAt": "2021-02-16T12:47:28Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncRunner.java", "diffHunk": "@@ -56,4 +56,10 @@\n    * {@link ExecutionException} if the transaction did not commit.\n    */\n   ApiFuture<Timestamp> getCommitTimestamp();\n+\n+  /**\n+   * Returns the {@link CommitResponse} of this transaction. {@link ApiFuture#get()} will throw an", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg1MzczNw==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576853737", "createdAt": "2021-02-16T14:14:46Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncRunner.java", "diffHunk": "@@ -56,4 +56,10 @@\n    * {@link ExecutionException} if the transaction did not commit.\n    */\n   ApiFuture<Timestamp> getCommitTimestamp();\n+\n+  /**\n+   * Returns the {@link CommitResponse} of this transaction. {@link ApiFuture#get()} will throw an", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njc5NjgyNA=="}, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYzNzI0OTM5OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncRunnerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxMjo0OTo0NVrOImE9tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxMzo1Nzo0OFrOImHnyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njc5ODEzNA==", "bodyText": "letting it slide because it isn't changed in this PR, but catching Throwable is only rarely what you want. This is probably worth filing a bug on.", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576798134", "createdAt": "2021-02-16T12:49:45Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncRunnerImpl.java", "diffHunk": "@@ -66,16 +74,30 @@ public R run(TransactionContext transaction) throws Exception {\n         });\n   }\n \n-  private void setCommitTimestamp() {\n+  private void setCommitResponse() {\n     try {\n-      commitTimestamp.set(delegate.getCommitTimestamp());\n+      commitResponse.set(delegate.getCommitResponse());\n     } catch (Throwable t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg0MTY3Mw==", "bodyText": "Added issue: #875", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576841673", "createdAt": "2021-02-16T13:57:48Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncRunnerImpl.java", "diffHunk": "@@ -66,16 +74,30 @@ public R run(TransactionContext transaction) throws Exception {\n         });\n   }\n \n-  private void setCommitTimestamp() {\n+  private void setCommitResponse() {\n     try {\n-      commitTimestamp.set(delegate.getCommitTimestamp());\n+      commitResponse.set(delegate.getCommitResponse());\n     } catch (Throwable t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njc5ODEzNA=="}, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYzNzI1NjUyOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncTransactionManagerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxMjo1MTo0MlrOImFCEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxNDoxNDo1MlrOImIXKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njc5OTI1MQ==", "bodyText": "no abbreviated variable names per google style.\nConcretely I did not know what this was when I read it below and had to scroll up to find out.", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576799251", "createdAt": "2021-02-16T12:51:42Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncTransactionManagerImpl.java", "diffHunk": "@@ -132,29 +133,37 @@ public void onError(Throwable t) {\n           SpannerExceptionFactory.newSpannerException(\n               ErrorCode.ABORTED, \"Transaction already aborted\"));\n     }\n-    ApiFuture<Timestamp> res = txn.commitAsync();\n+    ApiFuture<CommitResponse> res = txn.commitAsync();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg1MzgwMg==", "bodyText": "Changed to commitResponseFuture", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576853802", "createdAt": "2021-02-16T14:14:52Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncTransactionManagerImpl.java", "diffHunk": "@@ -132,29 +133,37 @@ public void onError(Throwable t) {\n           SpannerExceptionFactory.newSpannerException(\n               ErrorCode.ABORTED, \"Transaction already aborted\"));\n     }\n-    ApiFuture<Timestamp> res = txn.commitAsync();\n+    ApiFuture<CommitResponse> res = txn.commitAsync();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njc5OTI1MQ=="}, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYzNzI2MjcxOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/CommitStats.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxMjo1MzozNFrOImFF-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxNDoxNDo1NVrOImIXRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMDI1MQ==", "bodyText": "will be --> are", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576800251", "createdAt": "2021-02-16T12:53:34Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/CommitStats.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2021 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * Commit statistics are returned by a read/write transaction if specifically requested by passing\n+ * in {@link Options#commitStats()} to the transaction.\n+ */\n+public class CommitStats {\n+  private final long mutationCount;\n+\n+  private CommitStats(long mutationCount) {\n+    this.mutationCount = mutationCount;\n+  }\n+\n+  static CommitStats fromProto(com.google.spanner.v1.CommitResponse.CommitStats proto) {\n+    Preconditions.checkNotNull(proto);\n+    return new CommitStats(proto.getMutationCount());\n+  }\n+\n+  /**\n+   * The number of mutations that were executed by the transaction. Insert and update operations\n+   * count with the multiplicity of the number of columns they affect. For example, inserting a new\n+   * record may count as five mutations, if values are inserted into five columns. Delete and delete\n+   * range operations count as one mutation regardless of the number of columns affected. Deleting a\n+   * row from a parent table that has the ON DELETE CASCADE annotation is also counted as one\n+   * mutation regardless of the number of interleaved child rows present. The exception to this is\n+   * if there are secondary indexes defined on rows being deleted, then the changes to the secondary\n+   * indexes will be counted individually. For example, if a table has 2 secondary indexes, deleting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg1MzgzMA==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576853830", "createdAt": "2021-02-16T14:14:55Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/CommitStats.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2021 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * Commit statistics are returned by a read/write transaction if specifically requested by passing\n+ * in {@link Options#commitStats()} to the transaction.\n+ */\n+public class CommitStats {\n+  private final long mutationCount;\n+\n+  private CommitStats(long mutationCount) {\n+    this.mutationCount = mutationCount;\n+  }\n+\n+  static CommitStats fromProto(com.google.spanner.v1.CommitResponse.CommitStats proto) {\n+    Preconditions.checkNotNull(proto);\n+    return new CommitStats(proto.getMutationCount());\n+  }\n+\n+  /**\n+   * The number of mutations that were executed by the transaction. Insert and update operations\n+   * count with the multiplicity of the number of columns they affect. For example, inserting a new\n+   * record may count as five mutations, if values are inserted into five columns. Delete and delete\n+   * range operations count as one mutation regardless of the number of columns affected. Deleting a\n+   * row from a parent table that has the ON DELETE CASCADE annotation is also counted as one\n+   * mutation regardless of the number of interleaved child rows present. The exception to this is\n+   * if there are secondary indexes defined on rows being deleted, then the changes to the secondary\n+   * indexes will be counted individually. For example, if a table has 2 secondary indexes, deleting", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMDI1MQ=="}, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYzNzI2MzczOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/CommitStats.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxMjo1Mzo1MFrOImFGpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxNDoxNDo1OFrOImIXdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMDQyMA==", "bodyText": "will count --> counts", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576800420", "createdAt": "2021-02-16T12:53:50Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/CommitStats.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2021 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * Commit statistics are returned by a read/write transaction if specifically requested by passing\n+ * in {@link Options#commitStats()} to the transaction.\n+ */\n+public class CommitStats {\n+  private final long mutationCount;\n+\n+  private CommitStats(long mutationCount) {\n+    this.mutationCount = mutationCount;\n+  }\n+\n+  static CommitStats fromProto(com.google.spanner.v1.CommitResponse.CommitStats proto) {\n+    Preconditions.checkNotNull(proto);\n+    return new CommitStats(proto.getMutationCount());\n+  }\n+\n+  /**\n+   * The number of mutations that were executed by the transaction. Insert and update operations\n+   * count with the multiplicity of the number of columns they affect. For example, inserting a new\n+   * record may count as five mutations, if values are inserted into five columns. Delete and delete\n+   * range operations count as one mutation regardless of the number of columns affected. Deleting a\n+   * row from a parent table that has the ON DELETE CASCADE annotation is also counted as one\n+   * mutation regardless of the number of interleaved child rows present. The exception to this is\n+   * if there are secondary indexes defined on rows being deleted, then the changes to the secondary\n+   * indexes will be counted individually. For example, if a table has 2 secondary indexes, deleting\n+   * a range of rows in the table will count as 1 mutation for the table, plus 2 mutations for each", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg1Mzg3Ng==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576853876", "createdAt": "2021-02-16T14:14:58Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/CommitStats.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2021 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * Commit statistics are returned by a read/write transaction if specifically requested by passing\n+ * in {@link Options#commitStats()} to the transaction.\n+ */\n+public class CommitStats {\n+  private final long mutationCount;\n+\n+  private CommitStats(long mutationCount) {\n+    this.mutationCount = mutationCount;\n+  }\n+\n+  static CommitStats fromProto(com.google.spanner.v1.CommitResponse.CommitStats proto) {\n+    Preconditions.checkNotNull(proto);\n+    return new CommitStats(proto.getMutationCount());\n+  }\n+\n+  /**\n+   * The number of mutations that were executed by the transaction. Insert and update operations\n+   * count with the multiplicity of the number of columns they affect. For example, inserting a new\n+   * record may count as five mutations, if values are inserted into five columns. Delete and delete\n+   * range operations count as one mutation regardless of the number of columns affected. Deleting a\n+   * row from a parent table that has the ON DELETE CASCADE annotation is also counted as one\n+   * mutation regardless of the number of interleaved child rows present. The exception to this is\n+   * if there are secondary indexes defined on rows being deleted, then the changes to the secondary\n+   * indexes will be counted individually. For example, if a table has 2 secondary indexes, deleting\n+   * a range of rows in the table will count as 1 mutation for the table, plus 2 mutations for each", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMDQyMA=="}, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYzNzI4MDEyOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/AsyncTransactionManagerImplTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxMjo1Nzo1MFrOImFQXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxNDoxNTowMVrOImIXmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMjkxMA==", "bodyText": "@RunWith(MockitoJUnitRunner.class) would auto-initialize your mocks", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576802910", "createdAt": "2021-02-16T12:57:50Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/AsyncTransactionManagerImplTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2021 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+import com.google.api.core.ApiFutures;\n+import com.google.cloud.Timestamp;\n+import io.opencensus.trace.Span;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.Mock;\n+\n+@RunWith(JUnit4.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg1MzkxMw==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576853913", "createdAt": "2021-02-16T14:15:01Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/AsyncTransactionManagerImplTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2021 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+import com.google.api.core.ApiFutures;\n+import com.google.cloud.Timestamp;\n+import io.opencensus.trace.Span;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.Mock;\n+\n+@RunWith(JUnit4.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMjkxMA=="}, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYzNzI4NTQ4OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxMjo1ODo0OFrOImFTPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxNDoxNTowNFrOImIXvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMzY0NQ==", "bodyText": "assertNotEquals", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576803645", "createdAt": "2021-02-16T12:58:48Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -221,22 +225,57 @@ public void queryEquality() {\n   }\n \n   @Test\n-  public void testFromTransactionOptions() {\n+  public void testFromTransactionOptions_toStringNoOptions() {\n     Options opts = Options.fromTransactionOptions();\n     assertThat(opts.toString()).isEqualTo(\"\");\n   }\n \n   @Test\n-  public void testTransactionOptionsEquality() {\n-    Options o1;\n-    Options o2;\n+  public void testFromTransactionOptions_toStringWithCommitStats() {\n+    Options options = Options.fromTransactionOptions(Options.commitStats());\n+    assertThat(options.toString()).contains(\"withCommitStats: true\");\n+  }\n \n-    o1 = Options.fromTransactionOptions();\n-    o2 = Options.fromTransactionOptions();\n-    assertThat(o1.equals(o2)).isTrue();\n+  @Test\n+  public void testTransactionOptions_noOptionsAreEqual() {\n+    Options option1 = Options.fromTransactionOptions();\n+    Options option2 = Options.fromTransactionOptions();\n+    assertTrue(option1.equals(option2));\n+  }\n \n-    o2 = Options.fromReadOptions(Options.prefetchChunks(1));\n-    assertThat(o1.equals(o2)).isFalse();\n+  @Test\n+  public void testTransactionOptions_withCommitStatsAreEqual() {\n+    Options option1 = Options.fromTransactionOptions(Options.commitStats());\n+    Options option2 = Options.fromTransactionOptions(Options.commitStats());\n+    assertTrue(option1.equals(option2));\n+  }\n+\n+  @Test\n+  public void testTransactionOptions_withCommitStatsAndOtherOptionAreNotEqual() {\n+    Options option1 = Options.fromTransactionOptions(Options.commitStats());\n+    Options option2 = Options.fromQueryOptions(Options.prefetchChunks(10));\n+    assertFalse(option1.equals(option2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg1Mzk1MA==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576853950", "createdAt": "2021-02-16T14:15:04Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -221,22 +225,57 @@ public void queryEquality() {\n   }\n \n   @Test\n-  public void testFromTransactionOptions() {\n+  public void testFromTransactionOptions_toStringNoOptions() {\n     Options opts = Options.fromTransactionOptions();\n     assertThat(opts.toString()).isEqualTo(\"\");\n   }\n \n   @Test\n-  public void testTransactionOptionsEquality() {\n-    Options o1;\n-    Options o2;\n+  public void testFromTransactionOptions_toStringWithCommitStats() {\n+    Options options = Options.fromTransactionOptions(Options.commitStats());\n+    assertThat(options.toString()).contains(\"withCommitStats: true\");\n+  }\n \n-    o1 = Options.fromTransactionOptions();\n-    o2 = Options.fromTransactionOptions();\n-    assertThat(o1.equals(o2)).isTrue();\n+  @Test\n+  public void testTransactionOptions_noOptionsAreEqual() {\n+    Options option1 = Options.fromTransactionOptions();\n+    Options option2 = Options.fromTransactionOptions();\n+    assertTrue(option1.equals(option2));\n+  }\n \n-    o2 = Options.fromReadOptions(Options.prefetchChunks(1));\n-    assertThat(o1.equals(o2)).isFalse();\n+  @Test\n+  public void testTransactionOptions_withCommitStatsAreEqual() {\n+    Options option1 = Options.fromTransactionOptions(Options.commitStats());\n+    Options option2 = Options.fromTransactionOptions(Options.commitStats());\n+    assertTrue(option1.equals(option2));\n+  }\n+\n+  @Test\n+  public void testTransactionOptions_withCommitStatsAndOtherOptionAreNotEqual() {\n+    Options option1 = Options.fromTransactionOptions(Options.commitStats());\n+    Options option2 = Options.fromQueryOptions(Options.prefetchChunks(10));\n+    assertFalse(option1.equals(option2));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMzY0NQ=="}, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYzNzI4NjMxOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxMjo1ODo1OFrOImFTxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxNDoxNTowN1rOImIX1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMzc4Mw==", "bodyText": "assertEquals", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576803783", "createdAt": "2021-02-16T12:58:58Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -221,22 +225,57 @@ public void queryEquality() {\n   }\n \n   @Test\n-  public void testFromTransactionOptions() {\n+  public void testFromTransactionOptions_toStringNoOptions() {\n     Options opts = Options.fromTransactionOptions();\n     assertThat(opts.toString()).isEqualTo(\"\");\n   }\n \n   @Test\n-  public void testTransactionOptionsEquality() {\n-    Options o1;\n-    Options o2;\n+  public void testFromTransactionOptions_toStringWithCommitStats() {\n+    Options options = Options.fromTransactionOptions(Options.commitStats());\n+    assertThat(options.toString()).contains(\"withCommitStats: true\");\n+  }\n \n-    o1 = Options.fromTransactionOptions();\n-    o2 = Options.fromTransactionOptions();\n-    assertThat(o1.equals(o2)).isTrue();\n+  @Test\n+  public void testTransactionOptions_noOptionsAreEqual() {\n+    Options option1 = Options.fromTransactionOptions();\n+    Options option2 = Options.fromTransactionOptions();\n+    assertTrue(option1.equals(option2));\n+  }\n \n-    o2 = Options.fromReadOptions(Options.prefetchChunks(1));\n-    assertThat(o1.equals(o2)).isFalse();\n+  @Test\n+  public void testTransactionOptions_withCommitStatsAreEqual() {\n+    Options option1 = Options.fromTransactionOptions(Options.commitStats());\n+    Options option2 = Options.fromTransactionOptions(Options.commitStats());\n+    assertTrue(option1.equals(option2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg1Mzk3Mw==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576853973", "createdAt": "2021-02-16T14:15:07Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -221,22 +225,57 @@ public void queryEquality() {\n   }\n \n   @Test\n-  public void testFromTransactionOptions() {\n+  public void testFromTransactionOptions_toStringNoOptions() {\n     Options opts = Options.fromTransactionOptions();\n     assertThat(opts.toString()).isEqualTo(\"\");\n   }\n \n   @Test\n-  public void testTransactionOptionsEquality() {\n-    Options o1;\n-    Options o2;\n+  public void testFromTransactionOptions_toStringWithCommitStats() {\n+    Options options = Options.fromTransactionOptions(Options.commitStats());\n+    assertThat(options.toString()).contains(\"withCommitStats: true\");\n+  }\n \n-    o1 = Options.fromTransactionOptions();\n-    o2 = Options.fromTransactionOptions();\n-    assertThat(o1.equals(o2)).isTrue();\n+  @Test\n+  public void testTransactionOptions_noOptionsAreEqual() {\n+    Options option1 = Options.fromTransactionOptions();\n+    Options option2 = Options.fromTransactionOptions();\n+    assertTrue(option1.equals(option2));\n+  }\n \n-    o2 = Options.fromReadOptions(Options.prefetchChunks(1));\n-    assertThat(o1.equals(o2)).isFalse();\n+  @Test\n+  public void testTransactionOptions_withCommitStatsAreEqual() {\n+    Options option1 = Options.fromTransactionOptions(Options.commitStats());\n+    Options option2 = Options.fromTransactionOptions(Options.commitStats());\n+    assertTrue(option1.equals(option2));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMzc4Mw=="}, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYzNzI4NjUxOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxMjo1OTowNVrOImFT-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxNDoxNToxMFrOImIX9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMzgzMw==", "bodyText": "assertEquals", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576803833", "createdAt": "2021-02-16T12:59:05Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -221,22 +225,57 @@ public void queryEquality() {\n   }\n \n   @Test\n-  public void testFromTransactionOptions() {\n+  public void testFromTransactionOptions_toStringNoOptions() {\n     Options opts = Options.fromTransactionOptions();\n     assertThat(opts.toString()).isEqualTo(\"\");\n   }\n \n   @Test\n-  public void testTransactionOptionsEquality() {\n-    Options o1;\n-    Options o2;\n+  public void testFromTransactionOptions_toStringWithCommitStats() {\n+    Options options = Options.fromTransactionOptions(Options.commitStats());\n+    assertThat(options.toString()).contains(\"withCommitStats: true\");\n+  }\n \n-    o1 = Options.fromTransactionOptions();\n-    o2 = Options.fromTransactionOptions();\n-    assertThat(o1.equals(o2)).isTrue();\n+  @Test\n+  public void testTransactionOptions_noOptionsAreEqual() {\n+    Options option1 = Options.fromTransactionOptions();\n+    Options option2 = Options.fromTransactionOptions();\n+    assertTrue(option1.equals(option2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg1NDAwNQ==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576854005", "createdAt": "2021-02-16T14:15:10Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -221,22 +225,57 @@ public void queryEquality() {\n   }\n \n   @Test\n-  public void testFromTransactionOptions() {\n+  public void testFromTransactionOptions_toStringNoOptions() {\n     Options opts = Options.fromTransactionOptions();\n     assertThat(opts.toString()).isEqualTo(\"\");\n   }\n \n   @Test\n-  public void testTransactionOptionsEquality() {\n-    Options o1;\n-    Options o2;\n+  public void testFromTransactionOptions_toStringWithCommitStats() {\n+    Options options = Options.fromTransactionOptions(Options.commitStats());\n+    assertThat(options.toString()).contains(\"withCommitStats: true\");\n+  }\n \n-    o1 = Options.fromTransactionOptions();\n-    o2 = Options.fromTransactionOptions();\n-    assertThat(o1.equals(o2)).isTrue();\n+  @Test\n+  public void testTransactionOptions_noOptionsAreEqual() {\n+    Options option1 = Options.fromTransactionOptions();\n+    Options option2 = Options.fromTransactionOptions();\n+    assertTrue(option1.equals(option2));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMzgzMw=="}, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYzNzI5NzQ0OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionManagerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxMzowMTo0NFrOImFaQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxMzo1NDowOVrOImHddQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwNTQ0MA==", "bodyText": "This one scares me since it looks like an infinite loop Could you add a counter with a maximum number of retries before failure?", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576805440", "createdAt": "2021-02-16T13:01:44Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionManagerTest.java", "diffHunk": "@@ -212,4 +214,31 @@ public void abortAndRetry() throws InterruptedException {\n       manager2.close();\n     }\n   }\n+\n+  @SuppressWarnings(\"resource\")\n+  @Test\n+  public void testTransactionManagerReturnsCommitStats() throws InterruptedException {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    try (TransactionManager manager = client.transactionManager(Options.commitStats())) {\n+      TransactionContext transaction = manager.begin();\n+      while (true) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgzOTAyOQ==", "bodyText": "This is the recommended way to use TransactionManager according to the documentation. It is also the way it is already used in multiple other test cases. I would rather either:\n\nKeep this and all other instances as they are.\nChange this and other instances + the documentation in a separate PR.", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576839029", "createdAt": "2021-02-16T13:54:09Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionManagerTest.java", "diffHunk": "@@ -212,4 +214,31 @@ public void abortAndRetry() throws InterruptedException {\n       manager2.close();\n     }\n   }\n+\n+  @SuppressWarnings(\"resource\")\n+  @Test\n+  public void testTransactionManagerReturnsCommitStats() throws InterruptedException {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    try (TransactionManager manager = client.transactionManager(Options.commitStats())) {\n+      TransactionContext transaction = manager.begin();\n+      while (true) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwNTQ0MA=="}, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYzNzMwMTAzOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionManagerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxMzowMjo1MVrOImFcYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxNDoxNToxNVrOImIYQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwNTk4Nw==", "bodyText": "BUG! Thread.sleep takes milliseconds. No need to divide by 1000.", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576805987", "createdAt": "2021-02-16T13:02:51Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionManagerTest.java", "diffHunk": "@@ -212,4 +214,31 @@ public void abortAndRetry() throws InterruptedException {\n       manager2.close();\n     }\n   }\n+\n+  @SuppressWarnings(\"resource\")\n+  @Test\n+  public void testTransactionManagerReturnsCommitStats() throws InterruptedException {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    try (TransactionManager manager = client.transactionManager(Options.commitStats())) {\n+      TransactionContext transaction = manager.begin();\n+      while (true) {\n+        transaction.buffer(\n+            Mutation.newInsertBuilder(\"T\")\n+                .set(\"K\")\n+                .to(\"KeyCommitStats\")\n+                .set(\"BoolValue\")\n+                .to(true)\n+                .build());\n+        try {\n+          manager.commit();\n+          assertNotNull(manager.getCommitResponse().getCommitStats());\n+          assertEquals(2L, manager.getCommitResponse().getCommitStats().getMutationCount());\n+          break;\n+        } catch (AbortedException e) {\n+          Thread.sleep(e.getRetryDelayInMillis() / 1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njg1NDA4Mg==", "bodyText": "Good point. Changed and filed a bug for the documentation that also includes this.", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576854082", "createdAt": "2021-02-16T14:15:15Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionManagerTest.java", "diffHunk": "@@ -212,4 +214,31 @@ public void abortAndRetry() throws InterruptedException {\n       manager2.close();\n     }\n   }\n+\n+  @SuppressWarnings(\"resource\")\n+  @Test\n+  public void testTransactionManagerReturnsCommitStats() throws InterruptedException {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    try (TransactionManager manager = client.transactionManager(Options.commitStats())) {\n+      TransactionContext transaction = manager.begin();\n+      while (true) {\n+        transaction.buffer(\n+            Mutation.newInsertBuilder(\"T\")\n+                .set(\"K\")\n+                .to(\"KeyCommitStats\")\n+                .set(\"BoolValue\")\n+                .to(true)\n+                .build());\n+        try {\n+          manager.commit();\n+          assertNotNull(manager.getCommitResponse().getCommitStats());\n+          assertEquals(2L, manager.getCommitResponse().getCommitStats().getMutationCount());\n+          break;\n+        } catch (AbortedException e) {\n+          Thread.sleep(e.getRetryDelayInMillis() / 1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwNTk4Nw=="}, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3300, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}