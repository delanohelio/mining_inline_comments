{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NDk0MTM1", "number": 576, "title": "feat: add support for tagging", "bodyText": "Description\nAdd support to enable users to set tags on database operations such as reads, queries and transactions.\nBackground\nThe statistics of queries, reads and transactions in Cloud Spanner are stored. Providing tags for database operations will allow these statistics to be grouped by a tag and makes queries/transactions easily searchable by tag. This will help make the information provided by the statistics more useful.\nTODO\n\n Rebase when RequestOptions proto changes are published.\n\nNote: samples will be handled in a separate PR.", "createdAt": "2020-11-03T05:37:07Z", "url": "https://github.com/googleapis/java-spanner/pull/576", "merged": true, "mergeCommit": {"oid": "2a9086fcc7e8caae55f71bf5616b2d0db18681d3"}, "closed": true, "closedAt": "2021-04-06T22:51:14Z", "author": {"login": "mayurkale22"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdY0s0TAFqTUyMjI0MzE3MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABeI7D_AAH2gAyNTE0NDk0MTM1OjZiYjk3YTQ2NDMyZTY2YzQyMzhlNDgyYTkyNzM4YzVhNDFjZDQxZjY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMjQzMTcx", "url": "https://github.com/googleapis/java-spanner/pull/576#pullrequestreview-522243171", "createdAt": "2020-11-03T07:44:48Z", "commit": {"oid": "f93240ff3b5e4817ba5083621168be2b543c97ff"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzo0NDo0OFrOHsi8Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODoxMjo0MVrOHsjtAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3MTg1NQ==", "bodyText": "nit: could we create a small helper method do de-duplicate this code and use it with both getExecuteSqlRequest and getExecuteBatchDmlRequest?", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r516471855", "createdAt": "2020-11-03T07:44:48Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -574,10 +581,17 @@ QueryOptions buildQueryOptions(QueryOptions requestOptions) {\n     }\n     builder.setSeqno(getSeqNo());\n     builder.setQueryOptions(buildQueryOptions(statement.getQueryOptions()));\n+    if (txnTag != null || options.hasTag()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f93240ff3b5e4817ba5083621168be2b543c97ff"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3MjI3Ng==", "bodyText": "A read operation can also be executed within a (read/write) transaction. Don't we want to set the transaction tag in those cases as well?", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r516472276", "createdAt": "2020-11-03T07:45:54Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -730,6 +751,10 @@ ResultSet readInternalWithOptions(\n     if (partitionToken != null) {\n       builder.setPartitionToken(partitionToken);\n     }\n+    if (readOptions.hasTag()) {\n+      builder.setRequestOptions(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f93240ff3b5e4817ba5083621168be2b543c97ff"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3MzQyNA==", "bodyText": "nit: could we combine the boiler plate code of write and writeWithOptions in one method, and let write call the writeWithOptions version with no options?", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r516473424", "createdAt": "2020-11-03T07:48:47Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseClientImpl.java", "diffHunk": "@@ -72,10 +73,24 @@ public Timestamp apply(Session session) {\n   }\n \n   @Override\n-  public CommitResponse writeWithOptions(Iterable<Mutation> mutations, TransactionOption... options)\n+  public CommitResponse writeWithOptions(\n+      final Iterable<Mutation> mutations, final TransactionOption... options)\n       throws SpannerException {\n-    final Timestamp commitTimestamp = write(mutations);\n-    return new CommitResponse(commitTimestamp);\n+    Span span = tracer.spanBuilder(READ_WRITE_TRANSACTION).startSpan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f93240ff3b5e4817ba5083621168be2b543c97ff"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3MzY5NA==", "bodyText": "nit: same as above, combine the writeAtLeastOnce and writeAtLeastOnceWithOptions?", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r516473694", "createdAt": "2020-11-03T07:49:20Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseClientImpl.java", "diffHunk": "@@ -99,9 +114,23 @@ public Timestamp apply(Session session) {\n \n   @Override\n   public CommitResponse writeAtLeastOnceWithOptions(\n-      Iterable<Mutation> mutations, TransactionOption... options) throws SpannerException {\n-    final Timestamp commitTimestamp = writeAtLeastOnce(mutations);\n-    return new CommitResponse(commitTimestamp);\n+      final Iterable<Mutation> mutations, final TransactionOption... options)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f93240ff3b5e4817ba5083621168be2b543c97ff"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3NzY0OA==", "bodyText": "nit: here and other similar places, I would prefer to try to reuse the logic/boilerplate code for the very similar methods, and only let the version with the most options contain the actual code. The other methods should just call the WithOptions method with no options. That makes it easier to make changes without forgetting one of them.", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r516477648", "createdAt": "2020-11-03T07:58:11Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPool.java", "diffHunk": "@@ -1285,15 +1302,20 @@ public Timestamp writeAtLeastOnce(Iterable<Mutation> mutations) throws SpannerEx\n     @Override\n     public CommitResponse writeAtLeastOnceWithOptions(\n         Iterable<Mutation> mutations, TransactionOption... options) throws SpannerException {\n-      final Timestamp commitTimestamp = writeAtLeastOnce(mutations);\n-      return new CommitResponse(commitTimestamp);\n+      try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f93240ff3b5e4817ba5083621168be2b543c97ff"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3Nzk3MQ==", "bodyText": "what is this?", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r516477971", "createdAt": "2020-11-03T07:58:56Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java", "diffHunk": "@@ -141,12 +143,15 @@ public void removeListener(Runnable listener) {\n     @GuardedBy(\"lock\")\n     private volatile int runningAsyncOperations;\n \n-    @GuardedBy(\"lock\")\n+    @GuardedBy(\"lock\")batchUpdate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f93240ff3b5e4817ba5083621168be2b543c97ff"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3ODk4Mw==", "bodyText": "I think it would be good to have a check here that this method may only be called before TransactionRunner has been executed.", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r516478983", "createdAt": "2020-11-03T08:00:59Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java", "diffHunk": "@@ -698,6 +712,13 @@ public void run() {\n       return updateCounts;\n     }\n \n+    @Override\n+    public void withTransactionTag(String tag) {\n+      synchronized (lock) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f93240ff3b5e4817ba5083621168be2b543c97ff"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ4NDM1Mw==", "bodyText": "not related to this change, but I noticed it now and added a small issue: #577", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r516484353", "createdAt": "2020-11-03T08:12:41Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -163,10 +164,13 @@ public void listEquality() {\n   @Test\n   public void readOptTest() {\n     int limit = 3;\n-    Options opts = Options.fromReadOptions(Options.limit(limit));\n+    String tag = \"read\";\n+    Options opts = Options.fromReadOptions(Options.limit(limit), Options.tag(tag));\n \n-    assertThat(opts.toString()).isEqualTo(\"limit: \" + Integer.toString(limit) + \" \");\n-    assertThat(opts.hashCode()).isEqualTo(964);\n+    assertThat(opts.toString())\n+        .isEqualTo(\"limit: \" + Integer.toString(limit) + \" \" + \"tag: \" + tag + \" \");\n+    assertThat(opts.tag()).isEqualTo(tag);\n+    assertThat(opts.hashCode()).isEqualTo(3526226);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f93240ff3b5e4817ba5083621168be2b543c97ff"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTUwODQw", "url": "https://github.com/googleapis/java-spanner/pull/576#pullrequestreview-522950840", "createdAt": "2020-11-03T23:37:58Z", "commit": {"oid": "15f9dda6c64ae9be07d3388d908d0842be62b49a"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNzk5NTMy", "url": "https://github.com/googleapis/java-spanner/pull/576#pullrequestreview-541799532", "createdAt": "2020-12-01T11:21:25Z", "commit": {"oid": "c3be7ce852a8d88655fe295fda080143ff40123a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMToyMToyNVrOH8oGXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMToyMToyNVrOH8oGXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMzMzU5OA==", "bodyText": "I've been working on adding support for RPC priority, which will use the same RequestOptions proto as this change, and has many similarities with tagging. I'm starting to doubt whether this is the best way to support transaction tags, as this approach would also mean that we would have to add a withPriority(..) method for RPC priority, and possibly additional methods for any future additional request options.\nIt is also a little bit counter-intuitive that the transaction tag is set using TransactionOptions for the writeWithOptions and writeAtLeastOnceWithOptions, while it cannot be used for normal read/write transactions.\nI therefore created the change for RPC priority by adding TransactionOption... options to the read/write transaction methods instead of adding a withPriority(...) method to TransactionContext.\nSee here for the definition: \n  \n    \n      java-spanner/google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseClient.java\n    \n    \n         Line 325\n      in\n      046aac8\n    \n    \n    \n    \n\n        \n          \n           TransactionRunner readWriteTransaction(TransactionOption... options); \n        \n    \n  \n\n\nSee here for an example how it's used: \n  \n    \n      java-spanner/google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java\n    \n    \n        Lines 1695 to 1706\n      in\n      046aac8\n    \n    \n    \n    \n\n        \n          \n           public void testCommitWithPriority() { \n        \n\n        \n          \n             DatabaseClient client = \n        \n\n        \n          \n                 spanner.getDatabaseClient(DatabaseId.of(TEST_PROJECT, TEST_INSTANCE, TEST_DATABASE)); \n        \n\n        \n          \n             TransactionRunner runner = client.readWriteTransaction(Options.priority(RpcPriority.HIGH)); \n        \n\n        \n          \n             runner.run( \n        \n\n        \n          \n                 new TransactionCallable<Void>() { \n        \n\n        \n          \n                   @Override \n        \n\n        \n          \n                   public Void run(TransactionContext transaction) throws Exception { \n        \n\n        \n          \n                     transaction.buffer(Mutation.delete(\"TEST\", KeySet.all())); \n        \n\n        \n          \n                     return null; \n        \n\n        \n          \n                   } \n        \n\n        \n          \n                 }); \n        \n    \n  \n\n\nI think we should use the same approach for both tagging and RPC priority.\n@mayurkale22 @thiagotnunes @syeduguri WDYT?", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r533333598", "createdAt": "2020-12-01T11:21:25Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionContext.java", "diffHunk": "@@ -130,16 +131,19 @@\n    * 2nd statement, and an array of length 1 that contains the number of rows modified by the 1st\n    * statement. The 3rd statement will not run.\n    */\n-  long[] batchUpdate(Iterable<Statement> statements);\n+  long[] batchUpdate(Iterable<Statement> statements, UpdateOption... options);\n \n   /**\n-   * Same as {@link #batchUpdate(Iterable)}, but is guaranteed to be non-blocking. If multiple\n-   * asynchronous update statements are submitted to the same read/write transaction, the statements\n-   * are guaranteed to be submitted to Cloud Spanner in the order that they were submitted in the\n-   * client. This does however not guarantee that an asynchronous update statement will see the\n-   * results of all previously submitted statements, as the execution of the statements can be\n-   * parallel. If you rely on the results of a previous statement, you should block until the result\n-   * of that statement is known and has been returned to the client.\n+   * Same as {@link #batchUpdate(Iterable, UpdateOption...)}, but is guaranteed to be non-blocking.\n+   * If multiple asynchronous update statements are submitted to the same read/write transaction,\n+   * the statements are guaranteed to be submitted to Cloud Spanner in the order that they were\n+   * submitted in the client. This does however not guarantee that an asynchronous update statement\n+   * will see the results of all previously submitted statements, as the execution of the statements\n+   * can be parallel. If you rely on the results of a previous statement, you should block until the\n+   * result of that statement is known and has been returned to the client.\n    */\n-  ApiFuture<long[]> batchUpdateAsync(Iterable<Statement> statements);\n+  ApiFuture<long[]> batchUpdateAsync(Iterable<Statement> statements, UpdateOption... options);\n+\n+  /** Sets the tag for the currently active transaction. */\n+  void withTransactionTag(String tag);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3be7ce852a8d88655fe295fda080143ff40123a"}, "originalPosition": 63}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c3be7ce852a8d88655fe295fda080143ff40123a", "author": {"user": {"login": "mayurkale22", "name": "Mayur Kale"}}, "url": "https://github.com/googleapis/java-spanner/commit/c3be7ce852a8d88655fe295fda080143ff40123a", "committedDate": "2020-11-03T23:39:54Z", "message": "fix: use buildRequestOptions in readInternalWithOptions"}, "afterCommit": {"oid": "540f980ae3dc2c7c2a05f9ef6e1d130618e178ab", "author": {"user": {"login": "mayurkale22", "name": "Mayur Kale"}}, "url": "https://github.com/googleapis/java-spanner/commit/540f980ae3dc2c7c2a05f9ef6e1d130618e178ab", "committedDate": "2020-12-30T02:55:38Z", "message": "fix: use buildRequestOptions in readInternalWithOptions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwMjgyNDg5", "url": "https://github.com/googleapis/java-spanner/pull/576#pullrequestreview-560282489", "createdAt": "2020-12-31T07:32:18Z", "commit": {"oid": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwNzozNzoxN1rOIM65vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMVQwNzo1NTozNVrOIM7FxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxODg3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (txnTag != null) builder.setTransactionTag(txnTag);\n          \n          \n            \n                if (getTransactionTag() != null) builder.setTransactionTag(getTransactionTag());", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550418876", "createdAt": "2020-12-31T07:37:17Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -554,8 +555,20 @@ QueryOptions buildQueryOptions(QueryOptions requestOptions) {\n     return builder.build();\n   }\n \n+  RequestOptions buildRequestOptions(Options options, String txnTag) {\n+    RequestOptions.Builder builder = RequestOptions.newBuilder();\n+    if (options.hasTag()) builder.setRequestTag(options.tag());\n+    if (txnTag != null) builder.setTransactionTag(txnTag);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxODk1MQ==", "bodyText": "The transaction tag is already present in the Options in the TransactionContext, so it would be easier to just keep it there and let the TransactionContext deliver it when needed through a getTransactionTag() method. See my suggestions below for how that would work out. It would automatically also fix the TODO for adding it to read requests.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              RequestOptions buildRequestOptions(Options options, String txnTag) {\n          \n          \n            \n              RequestOptions buildRequestOptions(Options options) {", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550418951", "createdAt": "2020-12-31T07:37:50Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -554,8 +555,20 @@ QueryOptions buildQueryOptions(QueryOptions requestOptions) {\n     return builder.build();\n   }\n \n+  RequestOptions buildRequestOptions(Options options, String txnTag) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxOTM5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return getExecuteSqlRequestBuilderWithTxnTag(statement, queryMode, options, null /*txnTag*/);\n          \n          \n            \n              }\n          \n          \n            \n            \n          \n          \n            \n              ExecuteSqlRequest.Builder getExecuteSqlRequestBuilderWithTxnTag(\n          \n          \n            \n                  Statement statement, QueryMode queryMode, Options options, String txnTag) {", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550419395", "createdAt": "2020-12-31T07:40:24Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -554,8 +555,20 @@ QueryOptions buildQueryOptions(QueryOptions requestOptions) {\n     return builder.build();\n   }\n \n+  RequestOptions buildRequestOptions(Options options, String txnTag) {\n+    RequestOptions.Builder builder = RequestOptions.newBuilder();\n+    if (options.hasTag()) builder.setRequestTag(options.tag());\n+    if (txnTag != null) builder.setTransactionTag(txnTag);\n+    return builder.build();\n+  }\n+\n   ExecuteSqlRequest.Builder getExecuteSqlRequestBuilder(\n       Statement statement, QueryMode queryMode, Options options) {\n+    return getExecuteSqlRequestBuilderWithTxnTag(statement, queryMode, options, null /*txnTag*/);\n+  }\n+\n+  ExecuteSqlRequest.Builder getExecuteSqlRequestBuilderWithTxnTag(\n+      Statement statement, QueryMode queryMode, Options options, String txnTag) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxOTQyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                builder.setRequestOptions(buildRequestOptions(options, txnTag));\n          \n          \n            \n                builder.setRequestOptions(buildRequestOptions(options));", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550419427", "createdAt": "2020-12-31T07:40:42Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -575,11 +588,12 @@ QueryOptions buildQueryOptions(QueryOptions requestOptions) {\n     }\n     builder.setSeqno(getSeqNo());\n     builder.setQueryOptions(buildQueryOptions(statement.getQueryOptions()));\n+    builder.setRequestOptions(buildRequestOptions(options, txnTag));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxOTYzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n              \n          \n          \n            \n              /**\n          \n          \n            \n               * Returns the transaction tag for this {@link AbstractReadContext} or <code>null</code> if this\n          \n          \n            \n               * {@link AbstractReadContext} does not have a transaction tag.\n          \n          \n            \n               * */\n          \n          \n            \n              String getTransactionTag() {\n          \n          \n            \n                return null;\n          \n          \n            \n              }", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550419630", "createdAt": "2020-12-31T07:42:01Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -575,11 +588,12 @@ QueryOptions buildQueryOptions(QueryOptions requestOptions) {\n     }\n     builder.setSeqno(getSeqNo());\n     builder.setQueryOptions(buildQueryOptions(statement.getQueryOptions()));\n+    builder.setRequestOptions(buildRequestOptions(options, txnTag));\n     return builder;\n   }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxOTY4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Iterable<Statement> statements, Options options, String txnTag) {\n          \n          \n            \n                  Iterable<Statement> statements, Options options) {", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550419683", "createdAt": "2020-12-31T07:42:17Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -575,11 +588,12 @@ QueryOptions buildQueryOptions(QueryOptions requestOptions) {\n     }\n     builder.setSeqno(getSeqNo());\n     builder.setQueryOptions(buildQueryOptions(statement.getQueryOptions()));\n+    builder.setRequestOptions(buildRequestOptions(options, txnTag));\n     return builder;\n   }\n \n   ExecuteBatchDmlRequest.Builder getExecuteBatchDmlRequestBuilder(\n-      Iterable<Statement> statements, Options options) {\n+      Iterable<Statement> statements, Options options, String txnTag) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxOTcxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                builder.setRequestOptions(buildRequestOptions(options, txnTag));\n          \n          \n            \n                builder.setRequestOptions(buildRequestOptions(options));", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550419717", "createdAt": "2020-12-31T07:42:29Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -605,6 +619,7 @@ QueryOptions buildQueryOptions(QueryOptions requestOptions) {\n       builder.setTransaction(selector);\n     }\n     builder.setSeqno(getSeqNo());\n+    builder.setRequestOptions(buildRequestOptions(options, txnTag));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxOTc3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // TODO: set transaction tag when executed within a RW transaction\n          \n          \n            \n                builder.setRequestOptions(buildRequestOptions(readOptions, null));\n          \n          \n            \n                builder.setRequestOptions(buildRequestOptions(readOptions));", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550419778", "createdAt": "2020-12-31T07:42:57Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -728,6 +743,9 @@ ResultSet readInternalWithOptions(\n     if (partitionToken != null) {\n       builder.setPartitionToken(partitionToken);\n     }\n+    // TODO: set transaction tag when executed within a RW transaction\n+    builder.setRequestOptions(buildRequestOptions(readOptions, null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyMDQyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      getExecuteSqlRequestBuilderWithTxnTag(\n          \n          \n            \n                          statement,\n          \n          \n            \n                          QueryMode.NORMAL,\n          \n          \n            \n                          Options.fromUpdateOptions(options),\n          \n          \n            \n                          this.options.hasTag() ? this.options.tag() : null);\n          \n          \n            \n                      getExecuteSqlRequestBuilder(\n          \n          \n            \n                          statement, QueryMode.NORMAL, Options.fromUpdateOptions(options));", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550420423", "createdAt": "2020-12-31T07:46:23Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java", "diffHunk": "@@ -528,8 +533,11 @@ public void buffer(Iterable<Mutation> mutations) {\n     public long executeUpdate(Statement statement, UpdateOption... options) {\n       beforeReadOrQuery();\n       final ExecuteSqlRequest.Builder builder =\n-          getExecuteSqlRequestBuilder(\n-              statement, QueryMode.NORMAL, Options.fromUpdateOptions(options));\n+          getExecuteSqlRequestBuilderWithTxnTag(\n+              statement,\n+              QueryMode.NORMAL,\n+              Options.fromUpdateOptions(options),\n+              this.options.hasTag() ? this.options.tag() : null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyMDQ4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      getExecuteSqlRequestBuilderWithTxnTag(\n          \n          \n            \n                          statement,\n          \n          \n            \n                          QueryMode.NORMAL,\n          \n          \n            \n                          Options.fromUpdateOptions(options),\n          \n          \n            \n                          this.options.hasTag() ? this.options.tag() : null);\n          \n          \n            \n                      getExecuteSqlRequestBuilder(\n          \n          \n            \n                          statement, QueryMode.NORMAL, Options.fromUpdateOptions(options));", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550420485", "createdAt": "2020-12-31T07:46:41Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java", "diffHunk": "@@ -552,8 +560,11 @@ public long executeUpdate(Statement statement, UpdateOption... options) {\n     public ApiFuture<Long> executeUpdateAsync(Statement statement, UpdateOption... options) {\n       beforeReadOrQuery();\n       final ExecuteSqlRequest.Builder builder =\n-          getExecuteSqlRequestBuilder(\n-              statement, QueryMode.NORMAL, Options.fromUpdateOptions(options));\n+          getExecuteSqlRequestBuilderWithTxnTag(\n+              statement,\n+              QueryMode.NORMAL,\n+              Options.fromUpdateOptions(options),\n+              this.options.hasTag() ? this.options.tag() : null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyMDc1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      getExecuteBatchDmlRequestBuilder(\n          \n          \n            \n                          statements,\n          \n          \n            \n                          Options.fromUpdateOptions(options),\n          \n          \n            \n                          this.options.hasTag() ? this.options.tag() : null);\n          \n          \n            \n                      getExecuteBatchDmlRequestBuilder(statements, Options.fromUpdateOptions(options));", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550420751", "createdAt": "2020-12-31T07:48:14Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java", "diffHunk": "@@ -616,7 +627,10 @@ public void run() {\n     public long[] batchUpdate(Iterable<Statement> statements, UpdateOption... options) {\n       beforeReadOrQuery();\n       final ExecuteBatchDmlRequest.Builder builder =\n-          getExecuteBatchDmlRequestBuilder(statements, Options.fromUpdateOptions(options));\n+          getExecuteBatchDmlRequestBuilder(\n+              statements,\n+              Options.fromUpdateOptions(options),\n+              this.options.hasTag() ? this.options.tag() : null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyMDg1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      getExecuteBatchDmlRequestBuilder(\n          \n          \n            \n                          statements,\n          \n          \n            \n                          Options.fromUpdateOptions(options),\n          \n          \n            \n                          this.options.hasTag() ? this.options.tag() : null);\n          \n          \n            \n                      getExecuteBatchDmlRequestBuilder(statements, Options.fromUpdateOptions(options));", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550420858", "createdAt": "2020-12-31T07:48:44Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java", "diffHunk": "@@ -651,7 +665,10 @@ public void run() {\n         Iterable<Statement> statements, UpdateOption... options) {\n       beforeReadOrQuery();\n       final ExecuteBatchDmlRequest.Builder builder =\n-          getExecuteBatchDmlRequestBuilder(statements, Options.fromUpdateOptions(options));\n+          getExecuteBatchDmlRequestBuilder(\n+              statements,\n+              Options.fromUpdateOptions(options),\n+              this.options.hasTag() ? this.options.tag() : null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyMTQxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * collection grouped by tag.\n          \n          \n            \n               * collection to be grouped by tag.", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550421416", "createdAt": "2020-12-31T07:52:13Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/Options.java", "diffHunk": "@@ -74,6 +74,14 @@ public static ReadAndQueryOption bufferRows(int bufferRows) {\n     return new BufferRowsOption(bufferRows);\n   }\n \n+  /**\n+   * Specifying this will cause the reads, queries, updates and writes operations statistics\n+   * collection grouped by tag.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyMTgwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public long executeUpdate(Statement statement, UpdateOption... options) {\n          \n          \n            \n            \n          \n          \n            \n                @Override\n          \n          \n            \n                String getTransactionTag() {\n          \n          \n            \n                  if (this.options.hasTag()) return this.options.tag();\n          \n          \n            \n                  return null;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public long executeUpdate(Statement statement, UpdateOption... options) {", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550421809", "createdAt": "2020-12-31T07:54:42Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionRunnerImpl.java", "diffHunk": "@@ -528,8 +533,11 @@ public void buffer(Iterable<Mutation> mutations) {\n     public long executeUpdate(Statement statement, UpdateOption... options) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyMTk1Nw==", "bodyText": "Add the getTransactionTag() method to the TestReadContext test class to simulate a transaction with/without a transaction tag.", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550421957", "createdAt": "2020-12-31T07:55:35Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/AbstractReadContextTest.java", "diffHunk": "@@ -110,4 +110,33 @@ public void executeSqlRequestBuilderWithQueryOptions() {\n     assertThat(request.getSql()).isEqualTo(\"SELECT FOO FROM BAR\");\n     assertThat(request.getQueryOptions().getOptimizerVersion()).isEqualTo(\"2.0\");\n   }\n+\n+  @Test\n+  public void executeSqlRequestBuilderWithRequestOptions() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwNTY1Nzc4", "url": "https://github.com/googleapis/java-spanner/pull/576#pullrequestreview-560565778", "createdAt": "2021-01-01T02:07:29Z", "commit": {"oid": "ee28eadebc212635a19ab519dae8148203a82949"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQwMjowNzoyOVrOINNO3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQwMjowNzoyOVrOINNO3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDcxOTE5OQ==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r550719199", "createdAt": "2021-01-01T02:07:29Z", "author": {"login": "mayurkale22"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/AbstractReadContextTest.java", "diffHunk": "@@ -110,4 +110,33 @@ public void executeSqlRequestBuilderWithQueryOptions() {\n     assertThat(request.getSql()).isEqualTo(\"SELECT FOO FROM BAR\");\n     assertThat(request.getQueryOptions().getOptimizerVersion()).isEqualTo(\"2.0\");\n   }\n+\n+  @Test\n+  public void executeSqlRequestBuilderWithRequestOptions() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQyMTk1Nw=="}, "originalCommit": {"oid": "a46d94dad34bdaeb5c23fc5b2a5c158a3e836618"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwNTc2Njcx", "url": "https://github.com/googleapis/java-spanner/pull/576#pullrequestreview-560576671", "createdAt": "2021-01-01T08:19:49Z", "commit": {"oid": "ee28eadebc212635a19ab519dae8148203a82949"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczMzQ4MjQ1", "url": "https://github.com/googleapis/java-spanner/pull/576#pullrequestreview-573348245", "createdAt": "2021-01-21T13:53:43Z", "commit": {"oid": "ee28eadebc212635a19ab519dae8148203a82949"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxMzo1Mzo0M1rOIX3eBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxMzo1Mzo1OFrOIX3eow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg5Njk2Ng==", "bodyText": "multiline ifs only, per google style", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r561896966", "createdAt": "2021-01-21T13:53:43Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -554,6 +555,13 @@ QueryOptions buildQueryOptions(QueryOptions requestOptions) {\n     return builder.build();\n   }\n \n+  RequestOptions buildRequestOptions(Options options) {\n+    RequestOptions.Builder builder = RequestOptions.newBuilder();\n+    if (options.hasTag()) builder.setRequestTag(options.tag());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee28eadebc212635a19ab519dae8148203a82949"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg5NzEyMw==", "bodyText": "always use braces on blocks", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r561897123", "createdAt": "2021-01-21T13:53:58Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -554,6 +555,13 @@ QueryOptions buildQueryOptions(QueryOptions requestOptions) {\n     return builder.build();\n   }\n \n+  RequestOptions buildRequestOptions(Options options) {\n+    RequestOptions.Builder builder = RequestOptions.newBuilder();\n+    if (options.hasTag()) builder.setRequestTag(options.tag());\n+    if (getTransactionTag() != null) builder.setTransactionTag(getTransactionTag());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee28eadebc212635a19ab519dae8148203a82949"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c65e1a0b26712076a699d3626b7a09cd748c7cd9", "author": {"user": {"login": "mayurkale22", "name": "Mayur Kale"}}, "url": "https://github.com/googleapis/java-spanner/commit/c65e1a0b26712076a699d3626b7a09cd748c7cd9", "committedDate": "2021-01-21T18:57:38Z", "message": "fix code reviews"}, "afterCommit": {"oid": "11f4b454b16c2e886ac26d1e2b7cd5ba96888c9b", "author": {"user": {"login": "mayurkale22", "name": "Mayur Kale"}}, "url": "https://github.com/googleapis/java-spanner/commit/11f4b454b16c2e886ac26d1e2b7cd5ba96888c9b", "committedDate": "2021-03-31T18:25:54Z", "message": "fix code reviews"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bf2638c03bfe91edfd77e409b21077b3287ebc5", "author": {"user": {"login": "mayurkale22", "name": "Mayur Kale"}}, "url": "https://github.com/googleapis/java-spanner/commit/1bf2638c03bfe91edfd77e409b21077b3287ebc5", "committedDate": "2021-03-31T19:03:42Z", "message": "[Tagging Feature] add support for tagging feature"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "552f26ff671de8557cac5c9ca9791fcef756749d", "author": {"user": {"login": "mayurkale22", "name": "Mayur Kale"}}, "url": "https://github.com/googleapis/java-spanner/commit/552f26ff671de8557cac5c9ca9791fcef756749d", "committedDate": "2021-03-31T19:05:33Z", "message": "fix: code reviews"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b65b54496a56889e82499741a400fdfe2f58154d", "author": {"user": {"login": "mayurkale22", "name": "Mayur Kale"}}, "url": "https://github.com/googleapis/java-spanner/commit/b65b54496a56889e82499741a400fdfe2f58154d", "committedDate": "2021-03-31T19:05:35Z", "message": "fix: combine boiler plate code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f409761b92efbda880746bd7b44b784011d272f9", "author": {"user": {"login": "mayurkale22", "name": "Mayur Kale"}}, "url": "https://github.com/googleapis/java-spanner/commit/f409761b92efbda880746bd7b44b784011d272f9", "committedDate": "2021-03-31T19:05:35Z", "message": "fix: use buildRequestOptions in readInternalWithOptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65c7b4cf048684a97cb436645d6ce64327c37446", "author": {"user": {"login": "mayurkale22", "name": "Mayur Kale"}}, "url": "https://github.com/googleapis/java-spanner/commit/65c7b4cf048684a97cb436645d6ce64327c37446", "committedDate": "2021-03-31T19:05:35Z", "message": "refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c70bd6f16ccc723b4f53aa5f49eb39790fe462d1", "author": {"user": {"login": "mayurkale22", "name": "Mayur Kale"}}, "url": "https://github.com/googleapis/java-spanner/commit/c70bd6f16ccc723b4f53aa5f49eb39790fe462d1", "committedDate": "2021-03-31T19:05:35Z", "message": "refactor2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa5891fff077a6bc965907bf9d2746b93a316441", "author": {"user": {"login": "mayurkale22", "name": "Mayur Kale"}}, "url": "https://github.com/googleapis/java-spanner/commit/fa5891fff077a6bc965907bf9d2746b93a316441", "committedDate": "2021-03-31T19:08:29Z", "message": "fix code reviews"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "11f4b454b16c2e886ac26d1e2b7cd5ba96888c9b", "author": {"user": {"login": "mayurkale22", "name": "Mayur Kale"}}, "url": "https://github.com/googleapis/java-spanner/commit/11f4b454b16c2e886ac26d1e2b7cd5ba96888c9b", "committedDate": "2021-03-31T18:25:54Z", "message": "fix code reviews"}, "afterCommit": {"oid": "fa5891fff077a6bc965907bf9d2746b93a316441", "author": {"user": {"login": "mayurkale22", "name": "Mayur Kale"}}, "url": "https://github.com/googleapis/java-spanner/commit/fa5891fff077a6bc965907bf9d2746b93a316441", "committedDate": "2021-03-31T19:08:29Z", "message": "fix code reviews"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a49d4f1fb9ea7a1d38eacd2c823e31acc72ea38", "author": {"user": {"login": "mayurkale22", "name": "Mayur Kale"}}, "url": "https://github.com/googleapis/java-spanner/commit/2a49d4f1fb9ea7a1d38eacd2c823e31acc72ea38", "committedDate": "2021-03-31T19:24:13Z", "message": "chore: rebase requestoption proto"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d7f161caf5bca586ff6882b5ed6404e53adcee5", "author": {"user": {"login": "mayurkale22", "name": "Mayur Kale"}}, "url": "https://github.com/googleapis/java-spanner/commit/2d7f161caf5bca586ff6882b5ed6404e53adcee5", "committedDate": "2021-03-31T19:37:25Z", "message": "chore: fix lint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e618d6d50d1c665fa347939b4623e754a5af38af", "author": {"user": {"login": "mayurkale22", "name": "Mayur Kale"}}, "url": "https://github.com/googleapis/java-spanner/commit/e618d6d50d1c665fa347939b4623e754a5af38af", "committedDate": "2021-03-31T21:48:26Z", "message": "chore: add more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ae31ed8cd5e39d037772a711fa7e4d6860806d7", "author": {"user": {"login": "mayurkale22", "name": "Mayur Kale"}}, "url": "https://github.com/googleapis/java-spanner/commit/1ae31ed8cd5e39d037772a711fa7e4d6860806d7", "committedDate": "2021-03-31T22:05:40Z", "message": "chore: minor style fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI1ODAzMzA0", "url": "https://github.com/googleapis/java-spanner/pull/576#pullrequestreview-625803304", "createdAt": "2021-03-31T23:47:01Z", "commit": {"oid": "1ae31ed8cd5e39d037772a711fa7e4d6860806d7"}, "state": "APPROVED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0zMVQyMzo0NzowMVrOJBP9Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0zMVQyMzo1MjoyOVrOJBQEoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTI4OTc4Mg==", "bodyText": "nit: could we also create a hasTransactionTag() that checks if getTransactionTag() != null?", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r605289782", "createdAt": "2021-03-31T23:47:01Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -707,6 +713,15 @@ public void close() {\n   @Nullable\n   abstract TransactionSelector getTransactionSelector();\n \n+  /**\n+   * Returns the transaction tag for this {@link AbstractReadContext} or <code>null</code> if this\n+   * {@link AbstractReadContext} does not have a transaction tag.\n+   */\n+  @Nullable\n+  String getTransactionTag() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ae31ed8cd5e39d037772a711fa7e4d6860806d7"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTI5MTM3Mg==", "bodyText": "nit: please don't abbreviate Options to opts. (I know this was already like this, but if you are to make any other changes, could you please fix this as well).", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r605291372", "createdAt": "2021-03-31T23:51:30Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -170,10 +171,13 @@ public void listEquality() {\n   @Test\n   public void readOptTest() {\n     int limit = 3;\n-    Options opts = Options.fromReadOptions(Options.limit(limit));\n+    String tag = \"app=spanner,env=test,action=read\";\n+    Options opts = Options.fromReadOptions(Options.limit(limit), Options.tag(tag));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ae31ed8cd5e39d037772a711fa7e4d6860806d7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTI5MTQyMQ==", "bodyText": "nit: please don't abbreviate Options to opts. (I know this was already like this, but if you are to make any other changes, could you please fix this as well).", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r605291421", "createdAt": "2021-03-31T23:51:38Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -200,10 +204,13 @@ public void readEquality() {\n   @Test\n   public void queryOptTest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ae31ed8cd5e39d037772a711fa7e4d6860806d7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTI5MTQ2MA==", "bodyText": "nit: please don't abbreviate Options to opts. (I know this was already like this, but if you are to make any other changes, could you please fix this as well).", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r605291460", "createdAt": "2021-03-31T23:51:47Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -510,4 +517,68 @@ public void testTransactionOptionsPriorityEquality() {\n     assertNotEquals(options2, options3);\n     assertNotEquals(options2, options4);\n   }\n+\n+  @Test\n+  public void updateOptTest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ae31ed8cd5e39d037772a711fa7e4d6860806d7"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTI5MTU0NA==", "bodyText": "nit: please don't abbreviate Options to o.", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r605291544", "createdAt": "2021-03-31T23:52:03Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -510,4 +517,68 @@ public void testTransactionOptionsPriorityEquality() {\n     assertNotEquals(options2, options3);\n     assertNotEquals(options2, options4);\n   }\n+\n+  @Test\n+  public void updateOptTest() {\n+    String tag = \"app=spanner,env=test\";\n+    Options opts = Options.fromUpdateOptions(Options.tag(tag));\n+\n+    assertThat(opts.toString()).isEqualTo(\"tag: \" + tag + \" \");\n+    assertThat(opts.hasTag()).isTrue();\n+    assertThat(opts.tag()).isEqualTo(tag);\n+    assertThat(opts.hashCode()).isEqualTo(-2118248262);\n+  }\n+\n+  @Test\n+  public void updateEquality() {\n+    Options o1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ae31ed8cd5e39d037772a711fa7e4d6860806d7"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTI5MTYxMg==", "bodyText": "nit: please don't abbreviate Options to opts. (I know this was already like this, but if you are to make any other changes, could you please fix this as well).", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r605291612", "createdAt": "2021-03-31T23:52:17Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -510,4 +517,68 @@ public void testTransactionOptionsPriorityEquality() {\n     assertNotEquals(options2, options3);\n     assertNotEquals(options2, options4);\n   }\n+\n+  @Test\n+  public void updateOptTest() {\n+    String tag = \"app=spanner,env=test\";\n+    Options opts = Options.fromUpdateOptions(Options.tag(tag));\n+\n+    assertThat(opts.toString()).isEqualTo(\"tag: \" + tag + \" \");\n+    assertThat(opts.hasTag()).isTrue();\n+    assertThat(opts.tag()).isEqualTo(tag);\n+    assertThat(opts.hashCode()).isEqualTo(-2118248262);\n+  }\n+\n+  @Test\n+  public void updateEquality() {\n+    Options o1;\n+    Options o2;\n+    Options o3;\n+\n+    o1 = Options.fromUpdateOptions();\n+    o2 = Options.fromUpdateOptions();\n+    assertThat(o1.equals(o2)).isTrue();\n+\n+    o2 = Options.fromUpdateOptions(Options.tag(\"app=spanner,env=test\"));\n+    assertThat(o1.equals(o2)).isFalse();\n+    assertThat(o2.equals(o1)).isFalse();\n+\n+    o3 = Options.fromUpdateOptions(Options.tag(\"app=spanner,env=test\"));\n+    assertThat(o2.equals(o3)).isTrue();\n+\n+    o3 = Options.fromUpdateOptions(Options.tag(\"app=spanner,env=stage\"));\n+    assertThat(o2.equals(o3)).isFalse();\n+  }\n+\n+  @Test\n+  public void transactionOptTest() {\n+    String tag = \"app=spanner,env=test\";\n+    Options opts = Options.fromTransactionOptions(Options.tag(tag));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ae31ed8cd5e39d037772a711fa7e4d6860806d7"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTI5MTY4MQ==", "bodyText": "nit: please don't abbreviate Options to o.", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r605291681", "createdAt": "2021-03-31T23:52:29Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -510,4 +517,68 @@ public void testTransactionOptionsPriorityEquality() {\n     assertNotEquals(options2, options3);\n     assertNotEquals(options2, options4);\n   }\n+\n+  @Test\n+  public void updateOptTest() {\n+    String tag = \"app=spanner,env=test\";\n+    Options opts = Options.fromUpdateOptions(Options.tag(tag));\n+\n+    assertThat(opts.toString()).isEqualTo(\"tag: \" + tag + \" \");\n+    assertThat(opts.hasTag()).isTrue();\n+    assertThat(opts.tag()).isEqualTo(tag);\n+    assertThat(opts.hashCode()).isEqualTo(-2118248262);\n+  }\n+\n+  @Test\n+  public void updateEquality() {\n+    Options o1;\n+    Options o2;\n+    Options o3;\n+\n+    o1 = Options.fromUpdateOptions();\n+    o2 = Options.fromUpdateOptions();\n+    assertThat(o1.equals(o2)).isTrue();\n+\n+    o2 = Options.fromUpdateOptions(Options.tag(\"app=spanner,env=test\"));\n+    assertThat(o1.equals(o2)).isFalse();\n+    assertThat(o2.equals(o1)).isFalse();\n+\n+    o3 = Options.fromUpdateOptions(Options.tag(\"app=spanner,env=test\"));\n+    assertThat(o2.equals(o3)).isTrue();\n+\n+    o3 = Options.fromUpdateOptions(Options.tag(\"app=spanner,env=stage\"));\n+    assertThat(o2.equals(o3)).isFalse();\n+  }\n+\n+  @Test\n+  public void transactionOptTest() {\n+    String tag = \"app=spanner,env=test\";\n+    Options opts = Options.fromTransactionOptions(Options.tag(tag));\n+\n+    assertThat(opts.toString()).isEqualTo(\"tag: \" + tag + \" \");\n+    assertThat(opts.hasTag()).isTrue();\n+    assertThat(opts.tag()).isEqualTo(tag);\n+    assertThat(opts.hashCode()).isEqualTo(-2118248262);\n+  }\n+\n+  @Test\n+  public void transactionEquality() {\n+    Options o1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ae31ed8cd5e39d037772a711fa7e4d6860806d7"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI2NTI2OTMy", "url": "https://github.com/googleapis/java-spanner/pull/576#pullrequestreview-626526932", "createdAt": "2021-04-01T18:09:48Z", "commit": {"oid": "1ae31ed8cd5e39d037772a711fa7e4d6860806d7"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wMVQxODowOTo0OFrOJByRjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNC0wMVQxODoxMTowMVrOJByUXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTg1MjA0Nw==", "bodyText": "assertTrue", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r605852047", "createdAt": "2021-04-01T18:09:48Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -510,4 +517,68 @@ public void testTransactionOptionsPriorityEquality() {\n     assertNotEquals(options2, options3);\n     assertNotEquals(options2, options4);\n   }\n+\n+  @Test\n+  public void updateOptTest() {\n+    String tag = \"app=spanner,env=test\";\n+    Options opts = Options.fromUpdateOptions(Options.tag(tag));\n+\n+    assertThat(opts.toString()).isEqualTo(\"tag: \" + tag + \" \");\n+    assertThat(opts.hasTag()).isTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ae31ed8cd5e39d037772a711fa7e4d6860806d7"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTg1MjQyNQ==", "bodyText": "Use of Truth here feels gratuitous. assertEquals and assertTrue are simple and well understood.", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r605852425", "createdAt": "2021-04-01T18:10:29Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -510,4 +517,68 @@ public void testTransactionOptionsPriorityEquality() {\n     assertNotEquals(options2, options3);\n     assertNotEquals(options2, options4);\n   }\n+\n+  @Test\n+  public void updateOptTest() {\n+    String tag = \"app=spanner,env=test\";\n+    Options opts = Options.fromUpdateOptions(Options.tag(tag));\n+\n+    assertThat(opts.toString()).isEqualTo(\"tag: \" + tag + \" \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ae31ed8cd5e39d037772a711fa7e4d6860806d7"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTg1Mjc2Ng==", "bodyText": "Try to avoid reusing local variables. It's error prone.", "url": "https://github.com/googleapis/java-spanner/pull/576#discussion_r605852766", "createdAt": "2021-04-01T18:11:01Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -510,4 +517,68 @@ public void testTransactionOptionsPriorityEquality() {\n     assertNotEquals(options2, options3);\n     assertNotEquals(options2, options4);\n   }\n+\n+  @Test\n+  public void updateOptTest() {\n+    String tag = \"app=spanner,env=test\";\n+    Options opts = Options.fromUpdateOptions(Options.tag(tag));\n+\n+    assertThat(opts.toString()).isEqualTo(\"tag: \" + tag + \" \");\n+    assertThat(opts.hasTag()).isTrue();\n+    assertThat(opts.tag()).isEqualTo(tag);\n+    assertThat(opts.hashCode()).isEqualTo(-2118248262);\n+  }\n+\n+  @Test\n+  public void updateEquality() {\n+    Options o1;\n+    Options o2;\n+    Options o3;\n+\n+    o1 = Options.fromUpdateOptions();\n+    o2 = Options.fromUpdateOptions();\n+    assertThat(o1.equals(o2)).isTrue();\n+\n+    o2 = Options.fromUpdateOptions(Options.tag(\"app=spanner,env=test\"));\n+    assertThat(o1.equals(o2)).isFalse();\n+    assertThat(o2.equals(o1)).isFalse();\n+\n+    o3 = Options.fromUpdateOptions(Options.tag(\"app=spanner,env=test\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ae31ed8cd5e39d037772a711fa7e4d6860806d7"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bb97a46432e66c4238e482a92738c5a41cd41f6", "author": {"user": {"login": "mayurkale22", "name": "Mayur Kale"}}, "url": "https://github.com/googleapis/java-spanner/commit/6bb97a46432e66c4238e482a92738c5a41cd41f6", "committedDate": "2021-04-01T18:48:32Z", "message": "chore: fix code reviews"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 987, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}