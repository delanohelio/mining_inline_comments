{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5NDEzODU2", "number": 544, "title": "feat!: add support for CommitStats", "bodyText": "Adds support for returning CommitStats from read/write transactions.\nReplaces #522", "createdAt": "2020-10-24T10:59:11Z", "url": "https://github.com/googleapis/java-spanner/pull/544", "merged": true, "mergeCommit": {"oid": "44aa384429056dd6c6563351c43fe7dcac451008"}, "closed": true, "closedAt": "2021-02-17T03:20:11Z", "author": {"login": "olavloite"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVpBsQAH2gAyNTA5NDEzODU2OjM4NzIxOTk0YTBkZDE1ODk3MjNiNGE1NzJkZTljNDkyYTc1MzM3YjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd6sxMgAH2gAyNTA5NDEzODU2OjdkNDVhY2U0YzFhZjBjNDY5MWIxZmRmYzJhMWE3NGI4OGU0ZjUzZjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "38721994a0dd1589723b4a572de9c492a75337b6", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/38721994a0dd1589723b4a572de9c492a75337b6", "committedDate": "2020-10-24T10:57:36Z", "message": "feat!: add support for CommitStats\n\nAdds support for returning CommitStats from read/write transactions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "def876854f2dad9fe1568cd419f439f2b28fd1e6", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/def876854f2dad9fe1568cd419f439f2b28fd1e6", "committedDate": "2020-10-24T11:47:42Z", "message": "fix: add clirr ignored differences"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5NDc2NjAx", "url": "https://github.com/googleapis/java-spanner/pull/544#pullrequestreview-519476601", "createdAt": "2020-10-29T09:29:17Z", "commit": {"oid": "def876854f2dad9fe1568cd419f439f2b28fd1e6"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOToyOToxN1rOHqTQtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOToyOTozMlrOHqTRTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDExNzgxNQ==", "bodyText": "Should this be \"getCommitResponse can only be invoked...\"?", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r514117815", "createdAt": "2020-10-29T09:29:17Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPoolAsyncTransactionManager.java", "diffHunk": "@@ -239,4 +244,22 @@ public TransactionState getState() {\n       return txnState;\n     }\n   }\n+\n+  public ApiFuture<CommitResponse> getCommitResponse() {\n+    synchronized (lock) {\n+      Preconditions.checkState(\n+          txnState == TransactionState.COMMITTED,\n+          \"commit can only be invoked if the transaction was successfully committed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def876854f2dad9fe1568cd419f439f2b28fd1e6"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDExNzk2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"getCommitTimestamp can only be invoked if the transaction committed successfully\");\n          \n          \n            \n                    \"getCommitResponse can only be invoked if the transaction committed successfully\");", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r514117965", "createdAt": "2020-10-29T09:29:32Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/TransactionManagerImpl.java", "diffHunk": "@@ -115,7 +117,14 @@ public Timestamp getCommitTimestamp() {\n     Preconditions.checkState(\n         txnState == TransactionState.COMMITTED,\n         \"getCommitTimestamp can only be invoked if the transaction committed successfully\");\n-    return txn.commitTimestamp();\n+    return txn.getCommitResponse().getCommitTimestamp();\n+  }\n+\n+  public CommitResponse getCommitResponse() {\n+    Preconditions.checkState(\n+        txnState == TransactionState.COMMITTED,\n+        \"getCommitTimestamp can only be invoked if the transaction committed successfully\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def876854f2dad9fe1568cd419f439f2b28fd1e6"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5372dae4e6470401cbfcd2db1e071ab9db7ca7c8", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/5372dae4e6470401cbfcd2db1e071ab9db7ca7c8", "committedDate": "2020-10-31T07:26:51Z", "message": "Merge branch 'master' into commit-stats2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34fbda64201c9690b6a5b5619050c86cdb32d897", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/34fbda64201c9690b6a5b5619050c86cdb32d897", "committedDate": "2020-10-31T07:30:04Z", "message": "fix: error message should start with getCommitResponse\n\nCo-authored-by: skuruppu <skuruppu@google.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f61c2ab991eec6c028e31f65e27dcc1295e17e9", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/8f61c2ab991eec6c028e31f65e27dcc1295e17e9", "committedDate": "2020-11-06T12:06:33Z", "message": "Merge branch 'master' into commit-stats2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "041b34de0ba334d01dc70052712fec17fa049b7c", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/041b34de0ba334d01dc70052712fec17fa049b7c", "committedDate": "2020-12-05T09:27:25Z", "message": "Merge branch 'master' into commit-stats2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82990542eef1c43d58b50ace3e54c36406ef9d9a", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/82990542eef1c43d58b50ace3e54c36406ef9d9a", "committedDate": "2020-12-10T19:12:11Z", "message": "fix: remove overload delay"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b710a76f3cf947a2df5576f0c1c5eda3b43b9ff", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/9b710a76f3cf947a2df5576f0c1c5eda3b43b9ff", "committedDate": "2020-12-10T19:12:16Z", "message": "Merge branch 'master' into commit-stats2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczMzQ5MTA3", "url": "https://github.com/googleapis/java-spanner/pull/544#pullrequestreview-573349107", "createdAt": "2021-01-21T13:54:37Z", "commit": {"oid": "9b710a76f3cf947a2df5576f0c1c5eda3b43b9ff"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxMzo1NDozN1rOIX3ggg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxMzo1NDozN1rOIX3ggg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg5NzYwMg==", "bodyText": "another one where a major version bump is required", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r561897602", "createdAt": "2021-01-21T13:54:37Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/clirr-ignored-differences.xml", "diffHunk": "@@ -406,4 +406,62 @@\n     <className>com/google/cloud/spanner/AbstractLazyInitializer</className>\n     <method>java.lang.Object initialize()</method>\n   </difference>\n+  \n+  <!-- Support for CommitStats added -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b710a76f3cf947a2df5576f0c1c5eda3b43b9ff"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c15641f07c55dea211aa714f45d9f7da8201aaa", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/8c15641f07c55dea211aa714f45d9f7da8201aaa", "committedDate": "2021-01-23T13:51:09Z", "message": "Merge branch 'master' into commit-stats2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "919cf028377a3dc224c5c870b8129aae52d1f911", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/919cf028377a3dc224c5c870b8129aae52d1f911", "committedDate": "2021-01-23T13:51:34Z", "message": "chore: cleanup after merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97ec9175bee38ba64aadb960d6efdf57a5ad2b20", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/97ec9175bee38ba64aadb960d6efdf57a5ad2b20", "committedDate": "2021-01-23T14:01:16Z", "message": "fix: update copyright years of new files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afeb0fd86a8248a244a5b52cbf4e2065db65bf30", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/afeb0fd86a8248a244a5b52cbf4e2065db65bf30", "committedDate": "2021-01-23T14:25:16Z", "message": "test: fix flaky test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8524526a0588ae7d942199a2f831473b70d4a0d1", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/8524526a0588ae7d942199a2f831473b70d4a0d1", "committedDate": "2021-01-23T15:20:09Z", "message": "test: skip commit stats tests on emulator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06b3e22760a5d5a968717250f0f260cc2d7ecf11", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/06b3e22760a5d5a968717250f0f260cc2d7ecf11", "committedDate": "2021-01-23T15:32:35Z", "message": "test: missed one commit stats tests against emulator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c17d16efddb1839884376c6066faadce8181684", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/1c17d16efddb1839884376c6066faadce8181684", "committedDate": "2021-01-23T15:47:36Z", "message": "test: skip another emulator test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "664b87daf36668699cbc54dfc544ef64616f6da2", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/664b87daf36668699cbc54dfc544ef64616f6da2", "committedDate": "2021-01-23T19:45:21Z", "message": "test: add missing test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc4MzQ3MjM4", "url": "https://github.com/googleapis/java-spanner/pull/544#pullrequestreview-578347238", "createdAt": "2021-01-28T13:47:30Z", "commit": {"oid": "664b87daf36668699cbc54dfc544ef64616f6da2"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxMzo0NzozMVrOIb4U2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNDowODo1N1rOIb5Stw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEwNTMwNg==", "bodyText": "Boolean.valueOf(withCommitStats).hashCode() is a constant here.", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r566105306", "createdAt": "2021-01-28T13:47:31Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/Options.java", "diffHunk": "@@ -253,6 +277,9 @@ public boolean equals(Object o) {\n   @Override\n   public int hashCode() {\n     int result = 31;\n+    if (withCommitStats) {\n+      result = 31 * result + Boolean.valueOf(withCommitStats).hashCode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "664b87daf36668699cbc54dfc544ef64616f6da2"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEwODA5MQ==", "bodyText": "This should be a separate test method so exactly one thing is tested in the method.", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r566108091", "createdAt": "2021-01-28T13:51:15Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -224,6 +224,9 @@ public void queryEquality() {\n   public void testFromTransactionOptions() {\n     Options opts = Options.fromTransactionOptions();\n     assertThat(opts.toString()).isEqualTo(\"\");\n+\n+    opts = Options.fromTransactionOptions(Options.commitStats());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "664b87daf36668699cbc54dfc544ef64616f6da2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEwODM4Nw==", "bodyText": "again, separate test methods are advisable here.", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r566108387", "createdAt": "2021-01-28T13:51:37Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -237,6 +240,15 @@ public void testTransactionOptionsEquality() {\n \n     o2 = Options.fromReadOptions(Options.prefetchChunks(1));\n     assertThat(o1.equals(o2)).isFalse();\n+\n+    o1 = Options.fromTransactionOptions(Options.commitStats());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "664b87daf36668699cbc54dfc544ef64616f6da2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyMTAxMQ==", "bodyText": "txn --> transaction per Google style guide", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r566121011", "createdAt": "2021-01-28T14:08:46Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITAsyncAPITest.java", "diffHunk": "@@ -302,4 +316,65 @@ public void asyncRunnerFireAndForgetInvalidUpdate() throws Exception {\n       assertThat(client.singleUse().readRow(\"TestTable\", Key.of(\"k999\"), ALL_COLUMNS)).isNull();\n     }\n   }\n+\n+  @Test\n+  public void asyncRunnerReturnsCommitStats() {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    AsyncRunner runner = client.runAsync(Options.commitStats());\n+    runner.runAsync(\n+        new AsyncWork<Void>() {\n+          @Override\n+          public ApiFuture<Void> doWorkAsync(TransactionContext txn) {\n+            txn.buffer(\n+                Mutation.newInsertOrUpdateBuilder(TABLE_NAME)\n+                    .set(\"Key\")\n+                    .to(\"k_commit_stats\")\n+                    .set(\"StringValue\")\n+                    .to(\"Should return commit stats\")\n+                    .build());\n+            return ApiFutures.immediateFuture(null);\n+          }\n+        },\n+        executor);\n+    assertThat(get(runner.getCommitResponse()).getCommitStats()).isNotNull();\n+    // MutationCount = 2 columns + 2 secondary indexes.\n+    assertThat(get(runner.getCommitResponse()).getCommitStats().getMutationCount()).isEqualTo(4L);\n+  }\n+\n+  @Test\n+  public void asyncTransactionManagerReturnsCommitStats() throws InterruptedException {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    try (AsyncTransactionManager mgr = client.transactionManagerAsync(Options.commitStats())) {\n+      TransactionContextFuture ctx = mgr.beginAsync();\n+      while (true) {\n+        try {\n+          get(\n+              ctx.then(\n+                      new AsyncTransactionFunction<Void, Void>() {\n+                        @Override\n+                        public ApiFuture<Void> apply(TransactionContext txn, Void input)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "664b87daf36668699cbc54dfc544ef64616f6da2"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyMTE0Mw==", "bodyText": "ctx --> context per Google style guide", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r566121143", "createdAt": "2021-01-28T14:08:57Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITAsyncAPITest.java", "diffHunk": "@@ -302,4 +316,65 @@ public void asyncRunnerFireAndForgetInvalidUpdate() throws Exception {\n       assertThat(client.singleUse().readRow(\"TestTable\", Key.of(\"k999\"), ALL_COLUMNS)).isNull();\n     }\n   }\n+\n+  @Test\n+  public void asyncRunnerReturnsCommitStats() {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    AsyncRunner runner = client.runAsync(Options.commitStats());\n+    runner.runAsync(\n+        new AsyncWork<Void>() {\n+          @Override\n+          public ApiFuture<Void> doWorkAsync(TransactionContext txn) {\n+            txn.buffer(\n+                Mutation.newInsertOrUpdateBuilder(TABLE_NAME)\n+                    .set(\"Key\")\n+                    .to(\"k_commit_stats\")\n+                    .set(\"StringValue\")\n+                    .to(\"Should return commit stats\")\n+                    .build());\n+            return ApiFutures.immediateFuture(null);\n+          }\n+        },\n+        executor);\n+    assertThat(get(runner.getCommitResponse()).getCommitStats()).isNotNull();\n+    // MutationCount = 2 columns + 2 secondary indexes.\n+    assertThat(get(runner.getCommitResponse()).getCommitStats().getMutationCount()).isEqualTo(4L);\n+  }\n+\n+  @Test\n+  public void asyncTransactionManagerReturnsCommitStats() throws InterruptedException {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    try (AsyncTransactionManager mgr = client.transactionManagerAsync(Options.commitStats())) {\n+      TransactionContextFuture ctx = mgr.beginAsync();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "664b87daf36668699cbc54dfc544ef64616f6da2"}, "originalPosition": 104}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6573a0f7fe07f75ab9ed8e0e1d474540b5cb6b70", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/6573a0f7fe07f75ab9ed8e0e1d474540b5cb6b70", "committedDate": "2021-01-30T16:10:03Z", "message": "fix: address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b448c3824eedc617647aa599be346a3b754b6fe", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/0b448c3824eedc617647aa599be346a3b754b6fe", "committedDate": "2021-02-01T09:34:51Z", "message": "Merge branch 'master' into commit-stats2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgyNDExMzk5", "url": "https://github.com/googleapis/java-spanner/pull/544#pullrequestreview-582411399", "createdAt": "2021-02-03T14:19:01Z", "commit": {"oid": "0b448c3824eedc617647aa599be346a3b754b6fe"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDoxOTowMVrOIfEfmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDoxOTo0N1rOIfEijQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1MDM5Mw==", "bodyText": "The assume here is surprising. Why would this be sometimes be true and sometimes not true in this one test method?", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r569450393", "createdAt": "2021-02-03T14:19:01Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionTest.java", "diffHunk": "@@ -630,4 +631,23 @@ public Long run(TransactionContext transaction) throws Exception {\n       assertThat(e.getErrorCode()).isEqualTo(ErrorCode.INVALID_ARGUMENT);\n     }\n   }\n+\n+  @Test\n+  public void transactionRunnerReturnsCommitStats() {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b448c3824eedc617647aa599be346a3b754b6fe"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1MTE0OQ==", "bodyText": "you can use assertNotNull here. Truth doesn't add anything for simple cases.", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r569451149", "createdAt": "2021-02-03T14:19:47Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionTest.java", "diffHunk": "@@ -630,4 +631,23 @@ public Long run(TransactionContext transaction) throws Exception {\n       assertThat(e.getErrorCode()).isEqualTo(ErrorCode.INVALID_ARGUMENT);\n     }\n   }\n+\n+  @Test\n+  public void transactionRunnerReturnsCommitStats() {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    final String key = uniqueKey();\n+    TransactionRunner runner = client.readWriteTransaction(Options.commitStats());\n+    runner.run(\n+        new TransactionCallable<Void>() {\n+          @Override\n+          public Void run(TransactionContext transaction) throws Exception {\n+            transaction.buffer(\n+                Mutation.newInsertBuilder(\"T\").set(\"K\").to(key).set(\"V\").to(0).build());\n+            return null;\n+          }\n+        });\n+    assertThat(runner.getCommitResponse().getCommitStats()).isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b448c3824eedc617647aa599be346a3b754b6fe"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83039fbbc31d93d35ba0343c651bee3a872d6fd0", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/83039fbbc31d93d35ba0343c651bee3a872d6fd0", "committedDate": "2021-02-03T17:07:45Z", "message": "Merge branch 'master' into commit-stats2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57ea714b5d5bae5a91178351efd98c8c6272037a", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/57ea714b5d5bae5a91178351efd98c8c6272037a", "committedDate": "2021-02-03T17:20:16Z", "message": "chore: use junit assertion instead of truth"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66c5f88b55836abf4912e1031e504ef5d2abe9c3", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/66c5f88b55836abf4912e1031e504ef5d2abe9c3", "committedDate": "2021-02-04T07:41:12Z", "message": "chore: replace truth asserts with junit asserts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d17973b81e2903cbab466b7a3bb6e577f707c8b", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/1d17973b81e2903cbab466b7a3bb6e577f707c8b", "committedDate": "2021-02-05T14:49:22Z", "message": "chore: replace truth assertions with junit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48ef21be5bcf41f8cacfa1eaceaab5726624240c", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/48ef21be5bcf41f8cacfa1eaceaab5726624240c", "committedDate": "2021-02-08T17:51:11Z", "message": "chore: cleanup test and variable names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/1f33c42743920b21a8b70cf008f55f8983d49620", "committedDate": "2021-02-09T10:45:43Z", "message": "fix: rename test method and variables"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkxMTkwNzI0", "url": "https://github.com/googleapis/java-spanner/pull/544#pullrequestreview-591190724", "createdAt": "2021-02-16T12:47:28Z", "commit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxMjo0NzoyOFrOImE4mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxMzowMjo1MVrOImFcYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njc5NjgyNA==", "bodyText": "will throw --> throws\nper Google style", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576796824", "createdAt": "2021-02-16T12:47:28Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncRunner.java", "diffHunk": "@@ -56,4 +56,10 @@\n    * {@link ExecutionException} if the transaction did not commit.\n    */\n   ApiFuture<Timestamp> getCommitTimestamp();\n+\n+  /**\n+   * Returns the {@link CommitResponse} of this transaction. {@link ApiFuture#get()} will throw an", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njc5ODEzNA==", "bodyText": "letting it slide because it isn't changed in this PR, but catching Throwable is only rarely what you want. This is probably worth filing a bug on.", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576798134", "createdAt": "2021-02-16T12:49:45Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncRunnerImpl.java", "diffHunk": "@@ -66,16 +74,30 @@ public R run(TransactionContext transaction) throws Exception {\n         });\n   }\n \n-  private void setCommitTimestamp() {\n+  private void setCommitResponse() {\n     try {\n-      commitTimestamp.set(delegate.getCommitTimestamp());\n+      commitResponse.set(delegate.getCommitResponse());\n     } catch (Throwable t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njc5OTI1MQ==", "bodyText": "no abbreviated variable names per google style.\nConcretely I did not know what this was when I read it below and had to scroll up to find out.", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576799251", "createdAt": "2021-02-16T12:51:42Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AsyncTransactionManagerImpl.java", "diffHunk": "@@ -132,29 +133,37 @@ public void onError(Throwable t) {\n           SpannerExceptionFactory.newSpannerException(\n               ErrorCode.ABORTED, \"Transaction already aborted\"));\n     }\n-    ApiFuture<Timestamp> res = txn.commitAsync();\n+    ApiFuture<CommitResponse> res = txn.commitAsync();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMDI1MQ==", "bodyText": "will be --> are", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576800251", "createdAt": "2021-02-16T12:53:34Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/CommitStats.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2021 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * Commit statistics are returned by a read/write transaction if specifically requested by passing\n+ * in {@link Options#commitStats()} to the transaction.\n+ */\n+public class CommitStats {\n+  private final long mutationCount;\n+\n+  private CommitStats(long mutationCount) {\n+    this.mutationCount = mutationCount;\n+  }\n+\n+  static CommitStats fromProto(com.google.spanner.v1.CommitResponse.CommitStats proto) {\n+    Preconditions.checkNotNull(proto);\n+    return new CommitStats(proto.getMutationCount());\n+  }\n+\n+  /**\n+   * The number of mutations that were executed by the transaction. Insert and update operations\n+   * count with the multiplicity of the number of columns they affect. For example, inserting a new\n+   * record may count as five mutations, if values are inserted into five columns. Delete and delete\n+   * range operations count as one mutation regardless of the number of columns affected. Deleting a\n+   * row from a parent table that has the ON DELETE CASCADE annotation is also counted as one\n+   * mutation regardless of the number of interleaved child rows present. The exception to this is\n+   * if there are secondary indexes defined on rows being deleted, then the changes to the secondary\n+   * indexes will be counted individually. For example, if a table has 2 secondary indexes, deleting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMDQyMA==", "bodyText": "will count --> counts", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576800420", "createdAt": "2021-02-16T12:53:50Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/CommitStats.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2021 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * Commit statistics are returned by a read/write transaction if specifically requested by passing\n+ * in {@link Options#commitStats()} to the transaction.\n+ */\n+public class CommitStats {\n+  private final long mutationCount;\n+\n+  private CommitStats(long mutationCount) {\n+    this.mutationCount = mutationCount;\n+  }\n+\n+  static CommitStats fromProto(com.google.spanner.v1.CommitResponse.CommitStats proto) {\n+    Preconditions.checkNotNull(proto);\n+    return new CommitStats(proto.getMutationCount());\n+  }\n+\n+  /**\n+   * The number of mutations that were executed by the transaction. Insert and update operations\n+   * count with the multiplicity of the number of columns they affect. For example, inserting a new\n+   * record may count as five mutations, if values are inserted into five columns. Delete and delete\n+   * range operations count as one mutation regardless of the number of columns affected. Deleting a\n+   * row from a parent table that has the ON DELETE CASCADE annotation is also counted as one\n+   * mutation regardless of the number of interleaved child rows present. The exception to this is\n+   * if there are secondary indexes defined on rows being deleted, then the changes to the secondary\n+   * indexes will be counted individually. For example, if a table has 2 secondary indexes, deleting\n+   * a range of rows in the table will count as 1 mutation for the table, plus 2 mutations for each", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMjkxMA==", "bodyText": "@RunWith(MockitoJUnitRunner.class) would auto-initialize your mocks", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576802910", "createdAt": "2021-02-16T12:57:50Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/AsyncTransactionManagerImplTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2021 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+import com.google.api.core.ApiFutures;\n+import com.google.cloud.Timestamp;\n+import io.opencensus.trace.Span;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.Mock;\n+\n+@RunWith(JUnit4.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMzY0NQ==", "bodyText": "assertNotEquals", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576803645", "createdAt": "2021-02-16T12:58:48Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -221,22 +225,57 @@ public void queryEquality() {\n   }\n \n   @Test\n-  public void testFromTransactionOptions() {\n+  public void testFromTransactionOptions_toStringNoOptions() {\n     Options opts = Options.fromTransactionOptions();\n     assertThat(opts.toString()).isEqualTo(\"\");\n   }\n \n   @Test\n-  public void testTransactionOptionsEquality() {\n-    Options o1;\n-    Options o2;\n+  public void testFromTransactionOptions_toStringWithCommitStats() {\n+    Options options = Options.fromTransactionOptions(Options.commitStats());\n+    assertThat(options.toString()).contains(\"withCommitStats: true\");\n+  }\n \n-    o1 = Options.fromTransactionOptions();\n-    o2 = Options.fromTransactionOptions();\n-    assertThat(o1.equals(o2)).isTrue();\n+  @Test\n+  public void testTransactionOptions_noOptionsAreEqual() {\n+    Options option1 = Options.fromTransactionOptions();\n+    Options option2 = Options.fromTransactionOptions();\n+    assertTrue(option1.equals(option2));\n+  }\n \n-    o2 = Options.fromReadOptions(Options.prefetchChunks(1));\n-    assertThat(o1.equals(o2)).isFalse();\n+  @Test\n+  public void testTransactionOptions_withCommitStatsAreEqual() {\n+    Options option1 = Options.fromTransactionOptions(Options.commitStats());\n+    Options option2 = Options.fromTransactionOptions(Options.commitStats());\n+    assertTrue(option1.equals(option2));\n+  }\n+\n+  @Test\n+  public void testTransactionOptions_withCommitStatsAndOtherOptionAreNotEqual() {\n+    Options option1 = Options.fromTransactionOptions(Options.commitStats());\n+    Options option2 = Options.fromQueryOptions(Options.prefetchChunks(10));\n+    assertFalse(option1.equals(option2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMzc4Mw==", "bodyText": "assertEquals", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576803783", "createdAt": "2021-02-16T12:58:58Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -221,22 +225,57 @@ public void queryEquality() {\n   }\n \n   @Test\n-  public void testFromTransactionOptions() {\n+  public void testFromTransactionOptions_toStringNoOptions() {\n     Options opts = Options.fromTransactionOptions();\n     assertThat(opts.toString()).isEqualTo(\"\");\n   }\n \n   @Test\n-  public void testTransactionOptionsEquality() {\n-    Options o1;\n-    Options o2;\n+  public void testFromTransactionOptions_toStringWithCommitStats() {\n+    Options options = Options.fromTransactionOptions(Options.commitStats());\n+    assertThat(options.toString()).contains(\"withCommitStats: true\");\n+  }\n \n-    o1 = Options.fromTransactionOptions();\n-    o2 = Options.fromTransactionOptions();\n-    assertThat(o1.equals(o2)).isTrue();\n+  @Test\n+  public void testTransactionOptions_noOptionsAreEqual() {\n+    Options option1 = Options.fromTransactionOptions();\n+    Options option2 = Options.fromTransactionOptions();\n+    assertTrue(option1.equals(option2));\n+  }\n \n-    o2 = Options.fromReadOptions(Options.prefetchChunks(1));\n-    assertThat(o1.equals(o2)).isFalse();\n+  @Test\n+  public void testTransactionOptions_withCommitStatsAreEqual() {\n+    Options option1 = Options.fromTransactionOptions(Options.commitStats());\n+    Options option2 = Options.fromTransactionOptions(Options.commitStats());\n+    assertTrue(option1.equals(option2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwMzgzMw==", "bodyText": "assertEquals", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576803833", "createdAt": "2021-02-16T12:59:05Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/OptionsTest.java", "diffHunk": "@@ -221,22 +225,57 @@ public void queryEquality() {\n   }\n \n   @Test\n-  public void testFromTransactionOptions() {\n+  public void testFromTransactionOptions_toStringNoOptions() {\n     Options opts = Options.fromTransactionOptions();\n     assertThat(opts.toString()).isEqualTo(\"\");\n   }\n \n   @Test\n-  public void testTransactionOptionsEquality() {\n-    Options o1;\n-    Options o2;\n+  public void testFromTransactionOptions_toStringWithCommitStats() {\n+    Options options = Options.fromTransactionOptions(Options.commitStats());\n+    assertThat(options.toString()).contains(\"withCommitStats: true\");\n+  }\n \n-    o1 = Options.fromTransactionOptions();\n-    o2 = Options.fromTransactionOptions();\n-    assertThat(o1.equals(o2)).isTrue();\n+  @Test\n+  public void testTransactionOptions_noOptionsAreEqual() {\n+    Options option1 = Options.fromTransactionOptions();\n+    Options option2 = Options.fromTransactionOptions();\n+    assertTrue(option1.equals(option2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwNTQ0MA==", "bodyText": "This one scares me since it looks like an infinite loop Could you add a counter with a maximum number of retries before failure?", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576805440", "createdAt": "2021-02-16T13:01:44Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionManagerTest.java", "diffHunk": "@@ -212,4 +214,31 @@ public void abortAndRetry() throws InterruptedException {\n       manager2.close();\n     }\n   }\n+\n+  @SuppressWarnings(\"resource\")\n+  @Test\n+  public void testTransactionManagerReturnsCommitStats() throws InterruptedException {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    try (TransactionManager manager = client.transactionManager(Options.commitStats())) {\n+      TransactionContext transaction = manager.begin();\n+      while (true) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjgwNTk4Nw==", "bodyText": "BUG! Thread.sleep takes milliseconds. No need to divide by 1000.", "url": "https://github.com/googleapis/java-spanner/pull/544#discussion_r576805987", "createdAt": "2021-02-16T13:02:51Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionManagerTest.java", "diffHunk": "@@ -212,4 +214,31 @@ public void abortAndRetry() throws InterruptedException {\n       manager2.close();\n     }\n   }\n+\n+  @SuppressWarnings(\"resource\")\n+  @Test\n+  public void testTransactionManagerReturnsCommitStats() throws InterruptedException {\n+    assumeFalse(\"Emulator does not return commit statistics\", isUsingEmulator());\n+    try (TransactionManager manager = client.transactionManager(Options.commitStats())) {\n+      TransactionContext transaction = manager.begin();\n+      while (true) {\n+        transaction.buffer(\n+            Mutation.newInsertBuilder(\"T\")\n+                .set(\"K\")\n+                .to(\"KeyCommitStats\")\n+                .set(\"BoolValue\")\n+                .to(true)\n+                .build());\n+        try {\n+          manager.commit();\n+          assertNotNull(manager.getCommitResponse().getCommitStats());\n+          assertEquals(2L, manager.getCommitResponse().getCommitStats().getMutationCount());\n+          break;\n+        } catch (AbortedException e) {\n+          Thread.sleep(e.getRetryDelayInMillis() / 1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d45ace4c1af0c4691b1fdfc2a1a74b88e4f53f8", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/7d45ace4c1af0c4691b1fdfc2a1a74b88e4f53f8", "committedDate": "2021-02-16T14:14:24Z", "message": "fix: address review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 973, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}