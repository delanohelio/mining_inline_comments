{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2OTM4OTAy", "number": 608, "reviewThreads": {"totalCount": 45, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTozNDo1M1rOE2Noig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNFQxNDowODozM1rOFeHudw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjgxOTMwOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/pom.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTozNDo1M1rOHu67oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzoyMjoxMFrOHvhn9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2MjA4MA==", "bodyText": "This was a missing piece of configuration that was still in the JDBC repository, but that belongs in the Connection API. It is a Maven profile for automatically generating tests for new client side SQL statements.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r518962080", "createdAt": "2020-11-06T19:34:53Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/pom.xml", "diffHunk": "@@ -377,5 +377,38 @@\n         </plugins>\n       </build>\n     </profile>\n+    <profile>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47b57ea6427a00c5826af6797607b3b06fba58e7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4OTc5NQ==", "bodyText": "Could we add this as a separate PR? Otherwise we won't have this until the commit stats is merged into master.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r519489795", "createdAt": "2020-11-08T23:00:59Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/pom.xml", "diffHunk": "@@ -377,5 +377,38 @@\n         </plugins>\n       </build>\n     </profile>\n+    <profile>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2MjA4MA=="}, "originalCommit": {"oid": "47b57ea6427a00c5826af6797607b3b06fba58e7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU5NjAyMQ==", "bodyText": "Good point, I've added #611 for that, and I'll remove it from this PR.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r519596021", "createdAt": "2020-11-09T07:22:10Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/pom.xml", "diffHunk": "@@ -377,5 +377,38 @@\n         </plugins>\n       </build>\n     </profile>\n+    <profile>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2MjA4MA=="}, "originalCommit": {"oid": "47b57ea6427a00c5826af6797607b3b06fba58e7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NjQ4MDk4OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/resources/com/google/cloud/spanner/connection/ClientSideStatementsTest.sql", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMjo1OTo0MlrOHvbIdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzoxNjoyMlrOHvhYAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4OTY1NQ==", "bodyText": "Is this part of this PR? Maybe we forgot to do something in the query stats (optimizer_version) feature?", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r519489655", "createdAt": "2020-11-08T22:59:42Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/test/resources/com/google/cloud/spanner/connection/ClientSideStatementsTest.sql", "diffHunk": "@@ -1931,9148 +1931,11005 @@ NEW_CONNECTION;\n @EXPECT EXCEPTION INVALID_ARGUMENT\n show variable/-read_only_staleness;\n NEW_CONNECTION;\n-begin;\n+show variable optimizer_version;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1063ced85f2ae88d1e6270eeaf95785f324a79ed"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU5MTkzNw==", "bodyText": "I forgot to regenerate the test sql files for the optimizer_version feature, so that's why that is included here. The generator does not support generating tests for only some features, so it's impossible to keep that change separate from the changes for CommitStats without completely rewriting the generator.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r519591937", "createdAt": "2020-11-09T07:16:22Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/resources/com/google/cloud/spanner/connection/ClientSideStatementsTest.sql", "diffHunk": "@@ -1931,9148 +1931,11005 @@ NEW_CONNECTION;\n @EXPECT EXCEPTION INVALID_ARGUMENT\n show variable/-read_only_staleness;\n NEW_CONNECTION;\n-begin;\n+show variable optimizer_version;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4OTY1NQ=="}, "originalCommit": {"oid": "1063ced85f2ae88d1e6270eeaf95785f324a79ed"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODI3MjY1OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/CommitResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDoyNjoyMlrOIfE3Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNzo1ODowM1rOIfPUMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1NjM5NQ==", "bodyText": "worth a test", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569456395", "createdAt": "2021-02-03T14:26:22Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/CommitResponse.java", "diffHunk": "@@ -34,6 +34,11 @@ public Timestamp getCommitTimestamp() {\n     return Timestamp.fromProto(proto.getCommitTimestamp());\n   }\n \n+  /** @return true if the {@link CommitResponse} includes {@link CommitStats}. */\n+  public boolean hasCommitStats() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTYyNzY5Ng==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569627696", "createdAt": "2021-02-03T17:58:03Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/CommitResponse.java", "diffHunk": "@@ -34,6 +34,11 @@ public Timestamp getCommitTimestamp() {\n     return Timestamp.fromProto(proto.getCommitTimestamp());\n   }\n \n+  /** @return true if the {@link CommitResponse} includes {@link CommitStats}. */\n+  public boolean hasCommitStats() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1NjM5NQ=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODI4MjkzOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionStatementExecutorImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDoyODoxOFrOIfE9TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNzo1OTo0MFrOIfPY0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1Nzk5Nw==", "bodyText": "This is a little too complex to read as a ternary. Consider using if blocks.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569457997", "createdAt": "2021-02-03T14:28:18Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionStatementExecutorImpl.java", "diffHunk": "@@ -170,6 +181,26 @@ public StatementResult statementShowCommitTimestamp() {\n         \"COMMIT_TIMESTAMP\", getConnection().getCommitTimestampOrNull(), SHOW_COMMIT_TIMESTAMP);\n   }\n \n+  @Override\n+  public StatementResult statementShowCommitResponse() {\n+    CommitResponse response = getConnection().getCommitResponseOrNull();\n+    CommitStats stats =\n+        response == null || !response.hasCommitStats() ? null : response.getCommitStats();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTYyODg4Mg==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569628882", "createdAt": "2021-02-03T17:59:40Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionStatementExecutorImpl.java", "diffHunk": "@@ -170,6 +181,26 @@ public StatementResult statementShowCommitTimestamp() {\n         \"COMMIT_TIMESTAMP\", getConnection().getCommitTimestampOrNull(), SHOW_COMMIT_TIMESTAMP);\n   }\n \n+  @Override\n+  public StatementResult statementShowCommitResponse() {\n+    CommitResponse response = getConnection().getCommitResponseOrNull();\n+    CommitStats stats =\n+        response == null || !response.hasCommitStats() ? null : response.getCommitStats();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1Nzk5Nw=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODI4NDQyOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionStatementExecutorImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDoyODozM1rOIfE-HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxODowMzowNVrOIfPhNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1ODIwNA==", "bodyText": "rs --> resultSet per google style", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569458204", "createdAt": "2021-02-03T14:28:33Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionStatementExecutorImpl.java", "diffHunk": "@@ -170,6 +181,26 @@ public StatementResult statementShowCommitTimestamp() {\n         \"COMMIT_TIMESTAMP\", getConnection().getCommitTimestampOrNull(), SHOW_COMMIT_TIMESTAMP);\n   }\n \n+  @Override\n+  public StatementResult statementShowCommitResponse() {\n+    CommitResponse response = getConnection().getCommitResponseOrNull();\n+    CommitStats stats =\n+        response == null || !response.hasCommitStats() ? null : response.getCommitStats();\n+    ResultSet rs =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTYzMTAyOA==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569631028", "createdAt": "2021-02-03T18:03:05Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionStatementExecutorImpl.java", "diffHunk": "@@ -170,6 +181,26 @@ public StatementResult statementShowCommitTimestamp() {\n         \"COMMIT_TIMESTAMP\", getConnection().getCommitTimestampOrNull(), SHOW_COMMIT_TIMESTAMP);\n   }\n \n+  @Override\n+  public StatementResult statementShowCommitResponse() {\n+    CommitResponse response = getConnection().getCommitResponseOrNull();\n+    CommitStats stats =\n+        response == null || !response.hasCommitStats() ? null : response.getCommitStats();\n+    ResultSet rs =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1ODIwNA=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODI4ODQyOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/DdlBatch.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDoyOToxNlrOIfFAaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxOTowNDo1MFrOIfR-ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1ODc5Mg==", "bodyText": "needs a test", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569458792", "createdAt": "2021-02-03T14:29:16Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/DdlBatch.java", "diffHunk": "@@ -168,6 +169,17 @@ public Timestamp getCommitTimestampOrNull() {\n     return null;\n   }\n \n+  @Override\n+  public CommitResponse getCommitResponse() {\n+    throw SpannerExceptionFactory.newSpannerException(\n+        ErrorCode.FAILED_PRECONDITION, \"There is no commit response available for DDL batches.\");\n+  }\n+\n+  @Override\n+  public CommitResponse getCommitResponseOrNull() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTY3MTI2OA==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569671268", "createdAt": "2021-02-03T19:04:50Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/DdlBatch.java", "diffHunk": "@@ -168,6 +169,17 @@ public Timestamp getCommitTimestampOrNull() {\n     return null;\n   }\n \n+  @Override\n+  public CommitResponse getCommitResponse() {\n+    throw SpannerExceptionFactory.newSpannerException(\n+        ErrorCode.FAILED_PRECONDITION, \"There is no commit response available for DDL batches.\");\n+  }\n+\n+  @Override\n+  public CommitResponse getCommitResponseOrNull() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1ODc5Mg=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODI5NTg3OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/DdlBatch.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDozMDo0NFrOIfFFCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNFQxODoxODoxM1rOIrOOWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1OTk3Nw==", "bodyText": "This is a code smell suggests that perhaps getCommitResponse does not belong in the superclass/interface in the first place since it doesn't apply to all subclasses.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569459977", "createdAt": "2021-02-03T14:30:44Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/DdlBatch.java", "diffHunk": "@@ -168,6 +169,17 @@ public Timestamp getCommitTimestampOrNull() {\n     return null;\n   }\n \n+  @Override\n+  public CommitResponse getCommitResponse() {\n+    throw SpannerExceptionFactory.newSpannerException(\n+        ErrorCode.FAILED_PRECONDITION, \"There is no commit response available for DDL batches.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTY4OTM3NA==", "bodyText": "This is a package private class (extending from a package private interface), so it is not something that client applications will deal with. Client applications only interact with the Connection interface. (And client applications in this case is only intended to be frameworks /drivers that implement a declarative connection-type interface, such as JDBC.)\nThese declarative style APIs often mean that certain methods are only applicable in certain states, and this is what is also reflected in these classes. The method that client applications will interact with is Connection#getCommitResponse(). This method will delegate the actual response to the at that moment active UnitOfWork on the Connection. The different UnitOfWork implementations will respond based on what they support, which may also be that they do not support it.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569689374", "createdAt": "2021-02-03T19:29:15Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/DdlBatch.java", "diffHunk": "@@ -168,6 +169,17 @@ public Timestamp getCommitTimestampOrNull() {\n     return null;\n   }\n \n+  @Override\n+  public CommitResponse getCommitResponse() {\n+    throw SpannerExceptionFactory.newSpannerException(\n+        ErrorCode.FAILED_PRECONDITION, \"There is no commit response available for DDL batches.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1OTk3Nw=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTk4Njg0OQ==", "bodyText": "Have you considered returning an empty object or null instead?\nIf clients really won't see this, fine. However it's not enough that this class is non-public. They could still invoke this method if they get an instance of it, even while only knowing its supertype.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r581986849", "createdAt": "2021-02-24T14:07:26Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/DdlBatch.java", "diffHunk": "@@ -168,6 +169,17 @@ public Timestamp getCommitTimestampOrNull() {\n     return null;\n   }\n \n+  @Override\n+  public CommitResponse getCommitResponse() {\n+    throw SpannerExceptionFactory.newSpannerException(\n+        ErrorCode.FAILED_PRECONDITION, \"There is no commit response available for DDL batches.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1OTk3Nw=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjE5MjcyOA==", "bodyText": "Returning null or an empty object here would only move the logic to the ConnectionImpl class, which should throw an exception if it is not in a valid state to return CommitStats at that moment (for example because a DDL batch is active). This logic is therefore delegated to the concrete implementations of UnitOfWork.\nThis class and its super types are all package private and or not accessible from outside the library.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r582192728", "createdAt": "2021-02-24T18:18:13Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/DdlBatch.java", "diffHunk": "@@ -168,6 +169,17 @@ public Timestamp getCommitTimestampOrNull() {\n     return null;\n   }\n \n+  @Override\n+  public CommitResponse getCommitResponse() {\n+    throw SpannerExceptionFactory.newSpannerException(\n+        ErrorCode.FAILED_PRECONDITION, \"There is no commit response available for DDL batches.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1OTk3Nw=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODI5OTI4OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/DmlBatch.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDozMToyNVrOIfFHLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxOToyOToyMVrOIfTFWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2MDUyNw==", "bodyText": "Doubles my suspicion that this doesn't belong in the superclass.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569460527", "createdAt": "2021-02-03T14:31:25Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/DmlBatch.java", "diffHunk": "@@ -119,6 +120,17 @@ public Timestamp getCommitTimestampOrNull() {\n     return null;\n   }\n \n+  @Override\n+  public CommitResponse getCommitResponse() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTY4OTQzNQ==", "bodyText": "See above.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569689435", "createdAt": "2021-02-03T19:29:21Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/DmlBatch.java", "diffHunk": "@@ -119,6 +120,17 @@ public Timestamp getCommitTimestampOrNull() {\n     return null;\n   }\n \n+  @Override\n+  public CommitResponse getCommitResponse() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2MDUyNw=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODMwMTY4OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadOnlyTransaction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDozMTo1N1rOIfFIsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxOToyOTozNFrOIfTFzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2MDkxNQ==", "bodyText": "Now there are three instances where this method doesn't make sense.\nMaybe you can construct a commit response for these cases where the server doesn't return one, but maybe the API isn't in the right place.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569460915", "createdAt": "2021-02-03T14:31:57Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadOnlyTransaction.java", "diffHunk": "@@ -136,6 +137,18 @@ public Timestamp getCommitTimestampOrNull() {\n     return null;\n   }\n \n+  @Override\n+  public CommitResponse getCommitResponse() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTY4OTU1MA==", "bodyText": "See above.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569689550", "createdAt": "2021-02-03T19:29:34Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadOnlyTransaction.java", "diffHunk": "@@ -136,6 +137,18 @@ public Timestamp getCommitTimestampOrNull() {\n     return null;\n   }\n \n+  @Override\n+  public CommitResponse getCommitResponse() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2MDkxNQ=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODMxNjk2OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadWriteTransaction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDozNTowNlrOIfFSfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxOTowODo0OFrOIfSPpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2MzQyMQ==", "bodyText": "I originally thought this meant the response wasn't available yet, but if it means this object doesn't support commit responses, then I'm again suspecting the API needs some further thought.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569463421", "createdAt": "2021-02-03T14:35:06Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadWriteTransaction.java", "diffHunk": "@@ -254,19 +265,30 @@ public Timestamp getReadTimestampOrNull() {\n     return null;\n   }\n \n-  private boolean hasCommitTimestamp() {\n-    return commitTimestampFuture != null;\n+  private boolean hasCommitResponse() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTY3NTY4Nw==", "bodyText": "For this class your initial thought is correct. This indicates that the commit response is not yet available, because the transaction has not yet committed. Once the transaction has been committed, a commit response will be available.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569675687", "createdAt": "2021-02-03T19:08:48Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadWriteTransaction.java", "diffHunk": "@@ -254,19 +265,30 @@ public Timestamp getReadTimestampOrNull() {\n     return null;\n   }\n \n-  private boolean hasCommitTimestamp() {\n-    return commitTimestampFuture != null;\n+  private boolean hasCommitResponse() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2MzQyMQ=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODMyMTI1OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/UnitOfWork.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDozNTo1NVrOIfFVOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxOTozMDowM1rOIfTHIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2NDEyMg==", "bodyText": "Will throw --> Throws", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569464122", "createdAt": "2021-02-03T14:35:55Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/UnitOfWork.java", "diffHunk": "@@ -142,6 +143,18 @@ public boolean isActive() {\n   /** @return the commit timestamp of this transaction or null if there is no commit timestamp. */\n   Timestamp getCommitTimestampOrNull();\n \n+  /**\n+   * @return the {@link CommitResponse} of this transaction. Will throw a {@link SpannerException}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTY4OTg5MA==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569689890", "createdAt": "2021-02-03T19:30:03Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/UnitOfWork.java", "diffHunk": "@@ -142,6 +143,18 @@ public boolean isActive() {\n   /** @return the commit timestamp of this transaction or null if there is no commit timestamp. */\n   Timestamp getCommitTimestampOrNull();\n \n+  /**\n+   * @return the {@link CommitResponse} of this transaction. Will throw a {@link SpannerException}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2NDEyMg=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODMyMjQxOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/UnitOfWork.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDozNjowNlrOIfFV4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxOTozMDoyNVrOIfTICw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2NDI5MQ==", "bodyText": "no period", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569464291", "createdAt": "2021-02-03T14:36:06Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/UnitOfWork.java", "diffHunk": "@@ -142,6 +143,18 @@ public boolean isActive() {\n   /** @return the commit timestamp of this transaction or null if there is no commit timestamp. */\n   Timestamp getCommitTimestampOrNull();\n \n+  /**\n+   * @return the {@link CommitResponse} of this transaction. Will throw a {@link SpannerException}\n+   *     if there is no {@link CommitResponse}.\n+   */\n+  CommitResponse getCommitResponse();\n+\n+  /**\n+   * @return the {@link CommitResponse} of this transaction or null if there is no {@link\n+   *     CommitResponse}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTY5MDEyMw==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569690123", "createdAt": "2021-02-03T19:30:25Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/UnitOfWork.java", "diffHunk": "@@ -142,6 +143,18 @@ public boolean isActive() {\n   /** @return the commit timestamp of this transaction or null if there is no commit timestamp. */\n   Timestamp getCommitTimestampOrNull();\n \n+  /**\n+   * @return the {@link CommitResponse} of this transaction. Will throw a {@link SpannerException}\n+   *     if there is no {@link CommitResponse}.\n+   */\n+  CommitResponse getCommitResponse();\n+\n+  /**\n+   * @return the {@link CommitResponse} of this transaction or null if there is no {@link\n+   *     CommitResponse}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2NDI5MQ=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODMyODM3OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/UnitOfWork.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDozNzoyMFrOIfFZvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwOTozMDo0N1rOIp-V6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2NTI3Ng==", "bodyText": "You don't need both these methods. Even if these methods are left here, all we need is a single getCommitResponse method that returns a commit response or null.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569465276", "createdAt": "2021-02-03T14:37:20Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/UnitOfWork.java", "diffHunk": "@@ -142,6 +143,18 @@ public boolean isActive() {\n   /** @return the commit timestamp of this transaction or null if there is no commit timestamp. */\n   Timestamp getCommitTimestampOrNull();\n \n+  /**\n+   * @return the {@link CommitResponse} of this transaction. Will throw a {@link SpannerException}\n+   *     if there is no {@link CommitResponse}.\n+   */\n+  CommitResponse getCommitResponse();\n+\n+  /**\n+   * @return the {@link CommitResponse} of this transaction or null if there is no {@link\n+   *     CommitResponse}.\n+   */\n+  CommitResponse getCommitResponseOrNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTY5NzE1MA==", "bodyText": "This is not intended for public use (it's a package private interface). The reason that there are two different versions is that some APIs require a method to throw an error if the connection / transaction is not in a valid state for a specific method call, and in other cases it expects it to return null.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569697150", "createdAt": "2021-02-03T19:41:32Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/UnitOfWork.java", "diffHunk": "@@ -142,6 +143,18 @@ public boolean isActive() {\n   /** @return the commit timestamp of this transaction or null if there is no commit timestamp. */\n   Timestamp getCommitTimestampOrNull();\n \n+  /**\n+   * @return the {@link CommitResponse} of this transaction. Will throw a {@link SpannerException}\n+   *     if there is no {@link CommitResponse}.\n+   */\n+  CommitResponse getCommitResponse();\n+\n+  /**\n+   * @return the {@link CommitResponse} of this transaction or null if there is no {@link\n+   *     CommitResponse}.\n+   */\n+  CommitResponse getCommitResponseOrNull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2NTI3Ng=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE5MDg5Nw==", "bodyText": "Which APIs? It sounds like the responsibility for interpreting and handling a null return or an exception belongs in those methods.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570190897", "createdAt": "2021-02-04T12:39:18Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/UnitOfWork.java", "diffHunk": "@@ -142,6 +143,18 @@ public boolean isActive() {\n   /** @return the commit timestamp of this transaction or null if there is no commit timestamp. */\n   Timestamp getCommitTimestampOrNull();\n \n+  /**\n+   * @return the {@link CommitResponse} of this transaction. Will throw a {@link SpannerException}\n+   *     if there is no {@link CommitResponse}.\n+   */\n+  CommitResponse getCommitResponse();\n+\n+  /**\n+   * @return the {@link CommitResponse} of this transaction or null if there is no {@link\n+   *     CommitResponse}.\n+   */\n+  CommitResponse getCommitResponseOrNull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2NTI3Ng=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDg4Mzk0NA==", "bodyText": "The two APIs being served are:\n\nThe Connection interface with its getCommitResponse() and other similar methods. These all throw an exception if they are called while the Connection is in an invalid state for the method.\nThe interpreted SQL interface which will return a ResultSet with a null value if there is no commit response available at that moment.\n\nThe Connection interface could use the getCommitResponseOrNull() method, check for a null value and then throw an exception. The disadvantage of that would be that the Connection does not know why the value is null, and can therefore only throw an exception with a generic message. By delegating the exception that should be thrown to the UnitOfWork, the UnitOfWork can throw an exception with a more specific message indicating why there is no commit response.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r580883944", "createdAt": "2021-02-23T09:30:47Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/UnitOfWork.java", "diffHunk": "@@ -142,6 +143,18 @@ public boolean isActive() {\n   /** @return the commit timestamp of this transaction or null if there is no commit timestamp. */\n   Timestamp getCommitTimestampOrNull();\n \n+  /**\n+   * @return the {@link CommitResponse} of this transaction. Will throw a {@link SpannerException}\n+   *     if there is no {@link CommitResponse}.\n+   */\n+  CommitResponse getCommitResponse();\n+\n+  /**\n+   * @return the {@link CommitResponse} of this transaction or null if there is no {@link\n+   *     CommitResponse}.\n+   */\n+  CommitResponse getCommitResponseOrNull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2NTI3Ng=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODMzMzYzOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/AbstractConnectionImplTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDozODoxOVrOIfFdBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QyMDoxOTo1NlrOIfVAwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2NjExOQ==", "bodyText": "if blocks in tests are code smells. Only one path is taken and tested. Does isGetCommitTimestampAllowed() return true or false here?", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569466119", "createdAt": "2021-02-03T14:38:19Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/AbstractConnectionImplTest.java", "diffHunk": "@@ -735,6 +735,22 @@ public void testGetCommitTimestamp() {\n     }\n   }\n \n+  @Test\n+  public void testGetCommitResponse() {\n+    try (Connection connection = getConnection()) {\n+      if (isGetCommitTimestampAllowed()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTcyMTAyNA==", "bodyText": "This and the other methods in this abstract test class are used to test that a Connection responds correctly in all possible states that it can be. The specific state of a Connection is implemented in a concrete subclass, and that determines whether isGetCommitTimestampAllowed() will return true or false.\nExample 1: ConnectionImplAutocommitReadWriteNoActionsTest verifies that a connection that is in autocommit read/write mode and has not yet executed any statements, responds correctly to the state-dependent methods. isGetCommitTimestampAllowed() returns false, as the connection has not executed a commit. getCommitResponse() should therefore not return a result / throw an exception.\nExample 2: ConnectionImplAutocommitReadWriteAfterTemporaryTransactionTest verifies that a connection in autocommit read/write mode that has just successfully executed an ad-hoc transaction does return a commit response. isGetCommitTimestampAllowed() therefore returns true for this implementation.\nThis set of test classes is used to generate a SQL script that can also be used for the same Connection API in other client languages.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569721024", "createdAt": "2021-02-03T20:19:56Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/AbstractConnectionImplTest.java", "diffHunk": "@@ -735,6 +735,22 @@ public void testGetCommitTimestamp() {\n     }\n   }\n \n+  @Test\n+  public void testGetCommitResponse() {\n+    try (Connection connection = getConnection()) {\n+      if (isGetCommitTimestampAllowed()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2NjExOQ=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODMzNzUzOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDozOTowM1rOIfFfgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxOTo0ODoyMlrOIfTz7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2Njc1NQ==", "bodyText": "assertTrue is simpler", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569466755", "createdAt": "2021-02-03T14:39:03Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +630,68 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(true)));\n+\n+      res = subject.execute(Statement.of(\"set return_commit_stats=false\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteSetReturnCommitStatsInvalidValue() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      try {\n+        subject.execute(Statement.of(\"set return_commit_stats=yes\"));\n+        fail(\"Missing expected exception\");\n+      } catch (SpannerException e) {\n+        assertThat(e.getErrorCode(), is(equalTo(ErrorCode.INVALID_ARGUMENT)));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteGetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"show variable return_commit_stats\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.RESULT_SET)));\n+      assertThat(res.getResultSet().next(), is(true));\n+      assertThat(res.getResultSet().getBoolean(\"RETURN_COMMIT_STATS\"), is(equalTo(false)));\n+\n+      subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      res = subject.execute(Statement.of(\"show variable return_commit_stats\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.RESULT_SET)));\n+      assertThat(res.getResultSet().next(), is(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTcwMTM1Ng==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569701356", "createdAt": "2021-02-03T19:48:22Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +630,68 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(true)));\n+\n+      res = subject.execute(Statement.of(\"set return_commit_stats=false\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteSetReturnCommitStatsInvalidValue() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      try {\n+        subject.execute(Statement.of(\"set return_commit_stats=yes\"));\n+        fail(\"Missing expected exception\");\n+      } catch (SpannerException e) {\n+        assertThat(e.getErrorCode(), is(equalTo(ErrorCode.INVALID_ARGUMENT)));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteGetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"show variable return_commit_stats\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.RESULT_SET)));\n+      assertThat(res.getResultSet().next(), is(true));\n+      assertThat(res.getResultSet().getBoolean(\"RETURN_COMMIT_STATS\"), is(equalTo(false)));\n+\n+      subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      res = subject.execute(Statement.of(\"show variable return_commit_stats\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.RESULT_SET)));\n+      assertThat(res.getResultSet().next(), is(true));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2Njc1NQ=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODMzODQ2OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDozOToxNlrOIfFgLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxOTo0ODoyN1rOIfT0Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2NjkyNQ==", "bodyText": "assertFalse", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569466925", "createdAt": "2021-02-03T14:39:16Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +630,68 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(true)));\n+\n+      res = subject.execute(Statement.of(\"set return_commit_stats=false\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteSetReturnCommitStatsInvalidValue() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      try {\n+        subject.execute(Statement.of(\"set return_commit_stats=yes\"));\n+        fail(\"Missing expected exception\");\n+      } catch (SpannerException e) {\n+        assertThat(e.getErrorCode(), is(equalTo(ErrorCode.INVALID_ARGUMENT)));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteGetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTcwMTQwNw==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569701407", "createdAt": "2021-02-03T19:48:27Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +630,68 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(true)));\n+\n+      res = subject.execute(Statement.of(\"set return_commit_stats=false\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteSetReturnCommitStatsInvalidValue() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      try {\n+        subject.execute(Statement.of(\"set return_commit_stats=yes\"));\n+        fail(\"Missing expected exception\");\n+      } catch (SpannerException e) {\n+        assertThat(e.getErrorCode(), is(equalTo(ErrorCode.INVALID_ARGUMENT)));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteGetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2NjkyNQ=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODMzOTY0OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDozOToyOVrOIfFg4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxOTo0ODo1MlrOIfT1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2NzEwNQ==", "bodyText": "res --> result", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569467105", "createdAt": "2021-02-03T14:39:29Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +630,68 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(true)));\n+\n+      res = subject.execute(Statement.of(\"set return_commit_stats=false\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteSetReturnCommitStatsInvalidValue() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      try {\n+        subject.execute(Statement.of(\"set return_commit_stats=yes\"));\n+        fail(\"Missing expected exception\");\n+      } catch (SpannerException e) {\n+        assertThat(e.getErrorCode(), is(equalTo(ErrorCode.INVALID_ARGUMENT)));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteGetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"show variable return_commit_stats\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTcwMTY4OA==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569701688", "createdAt": "2021-02-03T19:48:52Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +630,68 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(true)));\n+\n+      res = subject.execute(Statement.of(\"set return_commit_stats=false\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteSetReturnCommitStatsInvalidValue() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      try {\n+        subject.execute(Statement.of(\"set return_commit_stats=yes\"));\n+        fail(\"Missing expected exception\");\n+      } catch (SpannerException e) {\n+        assertThat(e.getErrorCode(), is(equalTo(ErrorCode.INVALID_ARGUMENT)));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteGetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"show variable return_commit_stats\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2NzEwNQ=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODM0MTY3OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDozOTo1NFrOIfFiJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxOTo1MDo1NlrOIfT6bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2NzQyOA==", "bodyText": "avoid reassigning local variables", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569467428", "createdAt": "2021-02-03T14:39:54Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +630,68 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(true)));\n+\n+      res = subject.execute(Statement.of(\"set return_commit_stats=false\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteSetReturnCommitStatsInvalidValue() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      try {\n+        subject.execute(Statement.of(\"set return_commit_stats=yes\"));\n+        fail(\"Missing expected exception\");\n+      } catch (SpannerException e) {\n+        assertThat(e.getErrorCode(), is(equalTo(ErrorCode.INVALID_ARGUMENT)));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteGetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"show variable return_commit_stats\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.RESULT_SET)));\n+      assertThat(res.getResultSet().next(), is(true));\n+      assertThat(res.getResultSet().getBoolean(\"RETURN_COMMIT_STATS\"), is(equalTo(false)));\n+\n+      subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      res = subject.execute(Statement.of(\"show variable return_commit_stats\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTcwMzAyMg==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569703022", "createdAt": "2021-02-03T19:50:56Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +630,68 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(true)));\n+\n+      res = subject.execute(Statement.of(\"set return_commit_stats=false\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteSetReturnCommitStatsInvalidValue() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      try {\n+        subject.execute(Statement.of(\"set return_commit_stats=yes\"));\n+        fail(\"Missing expected exception\");\n+      } catch (SpannerException e) {\n+        assertThat(e.getErrorCode(), is(equalTo(ErrorCode.INVALID_ARGUMENT)));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteGetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"show variable return_commit_stats\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.RESULT_SET)));\n+      assertThat(res.getResultSet().next(), is(true));\n+      assertThat(res.getResultSet().getBoolean(\"RETURN_COMMIT_STATS\"), is(equalTo(false)));\n+\n+      subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      res = subject.execute(Statement.of(\"show variable return_commit_stats\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2NzQyOA=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODM0NDgzOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDo0MDozMFrOIfFkFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxOTo1MjoyMlrOIfT99g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2NzkyNQ==", "bodyText": "assertNotNull", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569467925", "createdAt": "2021-02-03T14:40:30Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -749,6 +821,43 @@ public void testExecuteGetCommitTimestamp() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteGetCommitResponse() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      subject.beginTransaction();\n+      subject.executeQuery(Statement.of(AbstractConnectionImplTest.SELECT)).next();\n+      subject.commit();\n+      StatementResult res = subject.execute(Statement.of(\"show variable commit_response\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.RESULT_SET)));\n+      assertThat(res.getResultSet().next(), is(true));\n+      assertThat(res.getResultSet().getTimestamp(\"COMMIT_TIMESTAMP\"), is(notNullValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTcwMzkyNg==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569703926", "createdAt": "2021-02-03T19:52:22Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -749,6 +821,43 @@ public void testExecuteGetCommitTimestamp() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteGetCommitResponse() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      subject.beginTransaction();\n+      subject.executeQuery(Statement.of(AbstractConnectionImplTest.SELECT)).next();\n+      subject.commit();\n+      StatementResult res = subject.execute(Statement.of(\"show variable commit_response\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.RESULT_SET)));\n+      assertThat(res.getResultSet().next(), is(true));\n+      assertThat(res.getResultSet().getTimestamp(\"COMMIT_TIMESTAMP\"), is(notNullValue()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2NzkyNQ=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODM0NTg3OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDo0MDo0MVrOIfFksg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxOTo1NDowOFrOIfUCHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2ODA4Mg==", "bodyText": "result", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569468082", "createdAt": "2021-02-03T14:40:41Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -749,6 +821,43 @@ public void testExecuteGetCommitTimestamp() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteGetCommitResponse() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      subject.beginTransaction();\n+      subject.executeQuery(Statement.of(AbstractConnectionImplTest.SELECT)).next();\n+      subject.commit();\n+      StatementResult res = subject.execute(Statement.of(\"show variable commit_response\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.RESULT_SET)));\n+      assertThat(res.getResultSet().next(), is(true));\n+      assertThat(res.getResultSet().getTimestamp(\"COMMIT_TIMESTAMP\"), is(notNullValue()));\n+      assertThat(res.getResultSet().isNull(\"MUTATION_COUNT\"), is(true));\n+      assertThat(res.getResultSet().next(), is(false));\n+    }\n+\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI + \";returnCommitStats=true\")\n+                .build())) {\n+      subject.beginTransaction();\n+      subject.executeQuery(Statement.of(AbstractConnectionImplTest.SELECT)).next();\n+      subject.commit();\n+      StatementResult res = subject.execute(Statement.of(\"show variable commit_response\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTcwNDk5MQ==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569704991", "createdAt": "2021-02-03T19:54:08Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -749,6 +821,43 @@ public void testExecuteGetCommitTimestamp() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteGetCommitResponse() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      subject.beginTransaction();\n+      subject.executeQuery(Statement.of(AbstractConnectionImplTest.SELECT)).next();\n+      subject.commit();\n+      StatementResult res = subject.execute(Statement.of(\"show variable commit_response\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.RESULT_SET)));\n+      assertThat(res.getResultSet().next(), is(true));\n+      assertThat(res.getResultSet().getTimestamp(\"COMMIT_TIMESTAMP\"), is(notNullValue()));\n+      assertThat(res.getResultSet().isNull(\"MUTATION_COUNT\"), is(true));\n+      assertThat(res.getResultSet().next(), is(false));\n+    }\n+\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI + \";returnCommitStats=true\")\n+                .build())) {\n+      subject.beginTransaction();\n+      subject.executeQuery(Statement.of(AbstractConnectionImplTest.SELECT)).next();\n+      subject.commit();\n+      StatementResult res = subject.execute(Statement.of(\"show variable commit_response\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2ODA4Mg=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODM0NjcwOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDo0MDo1MVrOIfFlQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxOTo1NToyM1rOIfUFLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2ODIyNQ==", "bodyText": "assertNull", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569468225", "createdAt": "2021-02-03T14:40:51Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -749,6 +821,43 @@ public void testExecuteGetCommitTimestamp() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteGetCommitResponse() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      subject.beginTransaction();\n+      subject.executeQuery(Statement.of(AbstractConnectionImplTest.SELECT)).next();\n+      subject.commit();\n+      StatementResult res = subject.execute(Statement.of(\"show variable commit_response\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.RESULT_SET)));\n+      assertThat(res.getResultSet().next(), is(true));\n+      assertThat(res.getResultSet().getTimestamp(\"COMMIT_TIMESTAMP\"), is(notNullValue()));\n+      assertThat(res.getResultSet().isNull(\"MUTATION_COUNT\"), is(true));\n+      assertThat(res.getResultSet().next(), is(false));\n+    }\n+\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI + \";returnCommitStats=true\")\n+                .build())) {\n+      subject.beginTransaction();\n+      subject.executeQuery(Statement.of(AbstractConnectionImplTest.SELECT)).next();\n+      subject.commit();\n+      StatementResult res = subject.execute(Statement.of(\"show variable commit_response\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.RESULT_SET)));\n+      assertThat(res.getResultSet().next(), is(true));\n+      assertThat(res.getResultSet().getTimestamp(\"COMMIT_TIMESTAMP\"), is(notNullValue()));\n+      assertThat(res.getResultSet().isNull(\"MUTATION_COUNT\"), is(false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTcwNTc3NA==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569705774", "createdAt": "2021-02-03T19:55:23Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -749,6 +821,43 @@ public void testExecuteGetCommitTimestamp() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteGetCommitResponse() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      subject.beginTransaction();\n+      subject.executeQuery(Statement.of(AbstractConnectionImplTest.SELECT)).next();\n+      subject.commit();\n+      StatementResult res = subject.execute(Statement.of(\"show variable commit_response\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.RESULT_SET)));\n+      assertThat(res.getResultSet().next(), is(true));\n+      assertThat(res.getResultSet().getTimestamp(\"COMMIT_TIMESTAMP\"), is(notNullValue()));\n+      assertThat(res.getResultSet().isNull(\"MUTATION_COUNT\"), is(true));\n+      assertThat(res.getResultSet().next(), is(false));\n+    }\n+\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI + \";returnCommitStats=true\")\n+                .build())) {\n+      subject.beginTransaction();\n+      subject.executeQuery(Statement.of(AbstractConnectionImplTest.SELECT)).next();\n+      subject.commit();\n+      StatementResult res = subject.execute(Statement.of(\"show variable commit_response\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.RESULT_SET)));\n+      assertThat(res.getResultSet().next(), is(true));\n+      assertThat(res.getResultSet().getTimestamp(\"COMMIT_TIMESTAMP\"), is(notNullValue()));\n+      assertThat(res.getResultSet().isNull(\"MUTATION_COUNT\"), is(false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2ODIyNQ=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODM0NzQ5OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/it/ITCommitResponseTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDo0MTowMFrOIfFlvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxOTo1NTo0NVrOIfUGMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2ODM0OA==", "bodyText": "2021", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569468348", "createdAt": "2021-02-03T14:41:00Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/it/ITCommitResponseTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2020 Google LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTcwNjAzNA==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569706034", "createdAt": "2021-02-03T19:55:45Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/it/ITCommitResponseTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2020 Google LLC", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2ODM0OA=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODM0ODk0OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/it/ITCommitResponseTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDo0MToyMFrOIfFmug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QyMDowMDoxOFrOIfURTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2ODYwMg==", "bodyText": "assertNotNull", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569468602", "createdAt": "2021-02-03T14:41:20Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/it/ITCommitResponseTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.connection.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.spanner.KeySet;\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.Statement;\n+import com.google.cloud.spanner.connection.ITAbstractSpannerTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCommitResponseTest extends ITAbstractSpannerTest {\n+  @Override\n+  public void appendConnectionUri(StringBuilder uri) {\n+    uri.append(\";autocommit=false\");\n+  }\n+\n+  @Override\n+  public boolean doCreateDefaultTestTable() {\n+    return true;\n+  }\n+\n+  @Before\n+  public void clearTestData() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.bufferedWrite(Mutation.delete(\"TEST\", KeySet.all()));\n+      connection.commit();\n+    }\n+  }\n+\n+  @Test\n+  public void testDefaultNoCommitStats() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.bufferedWrite(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      connection.commit();\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTcwODg3OA==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569708878", "createdAt": "2021-02-03T20:00:18Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/it/ITCommitResponseTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.connection.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.spanner.KeySet;\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.Statement;\n+import com.google.cloud.spanner.connection.ITAbstractSpannerTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCommitResponseTest extends ITAbstractSpannerTest {\n+  @Override\n+  public void appendConnectionUri(StringBuilder uri) {\n+    uri.append(\";autocommit=false\");\n+  }\n+\n+  @Override\n+  public boolean doCreateDefaultTestTable() {\n+    return true;\n+  }\n+\n+  @Before\n+  public void clearTestData() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.bufferedWrite(Mutation.delete(\"TEST\", KeySet.all()));\n+      connection.commit();\n+    }\n+  }\n+\n+  @Test\n+  public void testDefaultNoCommitStats() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.bufferedWrite(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      connection.commit();\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2ODYwMg=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODM1MDU4OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/it/ITCommitResponseTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDo0MTo0M1rOIfFnxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QyMDowMDo1OVrOIfUS1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2ODg3MQ==", "bodyText": "rs --> resultSet", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569468871", "createdAt": "2021-02-03T14:41:43Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/it/ITCommitResponseTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.connection.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.spanner.KeySet;\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.Statement;\n+import com.google.cloud.spanner.connection.ITAbstractSpannerTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCommitResponseTest extends ITAbstractSpannerTest {\n+  @Override\n+  public void appendConnectionUri(StringBuilder uri) {\n+    uri.append(\";autocommit=false\");\n+  }\n+\n+  @Override\n+  public boolean doCreateDefaultTestTable() {\n+    return true;\n+  }\n+\n+  @Before\n+  public void clearTestData() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.bufferedWrite(Mutation.delete(\"TEST\", KeySet.all()));\n+      connection.commit();\n+    }\n+  }\n+\n+  @Test\n+  public void testDefaultNoCommitStats() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.bufferedWrite(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      connection.commit();\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isFalse();\n+    }\n+  }\n+\n+  @Test\n+  public void testReturnCommitStats() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.setReturnCommitStats(true);\n+      connection.bufferedWrite(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      connection.commit();\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isTrue();\n+      assertThat(connection.getCommitResponse().getCommitStats().getMutationCount()).isEqualTo(2L);\n+    }\n+  }\n+\n+  @Test\n+  public void testReturnCommitStatsUsingSql() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.execute(Statement.of(\"SET RETURN_COMMIT_STATS=TRUE\"));\n+      connection.bufferedWrite(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      connection.commit();\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isTrue();\n+      assertThat(connection.getCommitResponse().getCommitStats().getMutationCount()).isEqualTo(2L);\n+      try (ResultSet rs =\n+          connection.execute(Statement.of(\"SHOW VARIABLE COMMIT_RESPONSE\")).getResultSet()) {\n+        assertThat(rs.next()).isTrue();\n+        assertThat(rs.getTimestamp(\"COMMIT_TIMESTAMP\")).isNotNull();\n+        assertThat(rs.getLong(\"MUTATION_COUNT\")).isEqualTo(2L);\n+        assertThat(rs.getString(\"OVERLOAD_DELAY\")).isNotNull();\n+        assertThat(rs.next()).isFalse();\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testAutocommitDefaultNoCommitStats() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.setAutocommit(true);\n+      connection.write(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isFalse();\n+    }\n+  }\n+\n+  @Test\n+  public void testAutocommitReturnCommitStats() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.setAutocommit(true);\n+      connection.setReturnCommitStats(true);\n+      connection.write(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isTrue();\n+      assertThat(connection.getCommitResponse().getCommitStats().getMutationCount()).isEqualTo(2L);\n+    }\n+  }\n+\n+  @Test\n+  public void testAutocommitReturnCommitStatsUsingSql() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.execute(Statement.of(\"SET AUTOCOMMIT=TRUE\"));\n+      connection.execute(Statement.of(\"SET RETURN_COMMIT_STATS=TRUE\"));\n+      connection.write(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isTrue();\n+      assertThat(connection.getCommitResponse().getCommitStats().getMutationCount()).isEqualTo(2L);\n+      try (ResultSet rs =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTcwOTI3MA==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569709270", "createdAt": "2021-02-03T20:00:59Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/it/ITCommitResponseTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.connection.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.spanner.KeySet;\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.Statement;\n+import com.google.cloud.spanner.connection.ITAbstractSpannerTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCommitResponseTest extends ITAbstractSpannerTest {\n+  @Override\n+  public void appendConnectionUri(StringBuilder uri) {\n+    uri.append(\";autocommit=false\");\n+  }\n+\n+  @Override\n+  public boolean doCreateDefaultTestTable() {\n+    return true;\n+  }\n+\n+  @Before\n+  public void clearTestData() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.bufferedWrite(Mutation.delete(\"TEST\", KeySet.all()));\n+      connection.commit();\n+    }\n+  }\n+\n+  @Test\n+  public void testDefaultNoCommitStats() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.bufferedWrite(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      connection.commit();\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isFalse();\n+    }\n+  }\n+\n+  @Test\n+  public void testReturnCommitStats() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.setReturnCommitStats(true);\n+      connection.bufferedWrite(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      connection.commit();\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isTrue();\n+      assertThat(connection.getCommitResponse().getCommitStats().getMutationCount()).isEqualTo(2L);\n+    }\n+  }\n+\n+  @Test\n+  public void testReturnCommitStatsUsingSql() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.execute(Statement.of(\"SET RETURN_COMMIT_STATS=TRUE\"));\n+      connection.bufferedWrite(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      connection.commit();\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isTrue();\n+      assertThat(connection.getCommitResponse().getCommitStats().getMutationCount()).isEqualTo(2L);\n+      try (ResultSet rs =\n+          connection.execute(Statement.of(\"SHOW VARIABLE COMMIT_RESPONSE\")).getResultSet()) {\n+        assertThat(rs.next()).isTrue();\n+        assertThat(rs.getTimestamp(\"COMMIT_TIMESTAMP\")).isNotNull();\n+        assertThat(rs.getLong(\"MUTATION_COUNT\")).isEqualTo(2L);\n+        assertThat(rs.getString(\"OVERLOAD_DELAY\")).isNotNull();\n+        assertThat(rs.next()).isFalse();\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testAutocommitDefaultNoCommitStats() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.setAutocommit(true);\n+      connection.write(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isFalse();\n+    }\n+  }\n+\n+  @Test\n+  public void testAutocommitReturnCommitStats() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.setAutocommit(true);\n+      connection.setReturnCommitStats(true);\n+      connection.write(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isTrue();\n+      assertThat(connection.getCommitResponse().getCommitStats().getMutationCount()).isEqualTo(2L);\n+    }\n+  }\n+\n+  @Test\n+  public void testAutocommitReturnCommitStatsUsingSql() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.execute(Statement.of(\"SET AUTOCOMMIT=TRUE\"));\n+      connection.execute(Statement.of(\"SET RETURN_COMMIT_STATS=TRUE\"));\n+      connection.write(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isTrue();\n+      assertThat(connection.getCommitResponse().getCommitStats().getMutationCount()).isEqualTo(2L);\n+      try (ResultSet rs =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2ODg3MQ=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODM1Mjg3OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/it/ITCommitResponseTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDo0MjoxMVrOIfFpOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QyMDowMTowN1rOIfUTIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2OTI0MA==", "bodyText": "in general, avoid Truth for assertions that are simpler in JUnit", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569469240", "createdAt": "2021-02-03T14:42:11Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/it/ITCommitResponseTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.connection.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.spanner.KeySet;\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.Statement;\n+import com.google.cloud.spanner.connection.ITAbstractSpannerTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCommitResponseTest extends ITAbstractSpannerTest {\n+  @Override\n+  public void appendConnectionUri(StringBuilder uri) {\n+    uri.append(\";autocommit=false\");\n+  }\n+\n+  @Override\n+  public boolean doCreateDefaultTestTable() {\n+    return true;\n+  }\n+\n+  @Before\n+  public void clearTestData() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.bufferedWrite(Mutation.delete(\"TEST\", KeySet.all()));\n+      connection.commit();\n+    }\n+  }\n+\n+  @Test\n+  public void testDefaultNoCommitStats() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.bufferedWrite(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      connection.commit();\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isFalse();\n+    }\n+  }\n+\n+  @Test\n+  public void testReturnCommitStats() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.setReturnCommitStats(true);\n+      connection.bufferedWrite(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      connection.commit();\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isTrue();\n+      assertThat(connection.getCommitResponse().getCommitStats().getMutationCount()).isEqualTo(2L);\n+    }\n+  }\n+\n+  @Test\n+  public void testReturnCommitStatsUsingSql() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.execute(Statement.of(\"SET RETURN_COMMIT_STATS=TRUE\"));\n+      connection.bufferedWrite(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      connection.commit();\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isTrue();\n+      assertThat(connection.getCommitResponse().getCommitStats().getMutationCount()).isEqualTo(2L);\n+      try (ResultSet rs =\n+          connection.execute(Statement.of(\"SHOW VARIABLE COMMIT_RESPONSE\")).getResultSet()) {\n+        assertThat(rs.next()).isTrue();\n+        assertThat(rs.getTimestamp(\"COMMIT_TIMESTAMP\")).isNotNull();\n+        assertThat(rs.getLong(\"MUTATION_COUNT\")).isEqualTo(2L);\n+        assertThat(rs.getString(\"OVERLOAD_DELAY\")).isNotNull();\n+        assertThat(rs.next()).isFalse();\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testAutocommitDefaultNoCommitStats() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.setAutocommit(true);\n+      connection.write(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isFalse();\n+    }\n+  }\n+\n+  @Test\n+  public void testAutocommitReturnCommitStats() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.setAutocommit(true);\n+      connection.setReturnCommitStats(true);\n+      connection.write(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isTrue();\n+      assertThat(connection.getCommitResponse().getCommitStats().getMutationCount()).isEqualTo(2L);\n+    }\n+  }\n+\n+  @Test\n+  public void testAutocommitReturnCommitStatsUsingSql() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.execute(Statement.of(\"SET AUTOCOMMIT=TRUE\"));\n+      connection.execute(Statement.of(\"SET RETURN_COMMIT_STATS=TRUE\"));\n+      connection.write(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isTrue();\n+      assertThat(connection.getCommitResponse().getCommitStats().getMutationCount()).isEqualTo(2L);\n+      try (ResultSet rs =\n+          connection.execute(Statement.of(\"SHOW VARIABLE COMMIT_RESPONSE\")).getResultSet()) {\n+        assertThat(rs.next()).isTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTcwOTM0NQ==", "bodyText": "Replaced all in this file.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569709345", "createdAt": "2021-02-03T20:01:07Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/it/ITCommitResponseTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.connection.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.spanner.KeySet;\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.Statement;\n+import com.google.cloud.spanner.connection.ITAbstractSpannerTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCommitResponseTest extends ITAbstractSpannerTest {\n+  @Override\n+  public void appendConnectionUri(StringBuilder uri) {\n+    uri.append(\";autocommit=false\");\n+  }\n+\n+  @Override\n+  public boolean doCreateDefaultTestTable() {\n+    return true;\n+  }\n+\n+  @Before\n+  public void clearTestData() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.bufferedWrite(Mutation.delete(\"TEST\", KeySet.all()));\n+      connection.commit();\n+    }\n+  }\n+\n+  @Test\n+  public void testDefaultNoCommitStats() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.bufferedWrite(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      connection.commit();\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isFalse();\n+    }\n+  }\n+\n+  @Test\n+  public void testReturnCommitStats() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.setReturnCommitStats(true);\n+      connection.bufferedWrite(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      connection.commit();\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isTrue();\n+      assertThat(connection.getCommitResponse().getCommitStats().getMutationCount()).isEqualTo(2L);\n+    }\n+  }\n+\n+  @Test\n+  public void testReturnCommitStatsUsingSql() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.execute(Statement.of(\"SET RETURN_COMMIT_STATS=TRUE\"));\n+      connection.bufferedWrite(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      connection.commit();\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isTrue();\n+      assertThat(connection.getCommitResponse().getCommitStats().getMutationCount()).isEqualTo(2L);\n+      try (ResultSet rs =\n+          connection.execute(Statement.of(\"SHOW VARIABLE COMMIT_RESPONSE\")).getResultSet()) {\n+        assertThat(rs.next()).isTrue();\n+        assertThat(rs.getTimestamp(\"COMMIT_TIMESTAMP\")).isNotNull();\n+        assertThat(rs.getLong(\"MUTATION_COUNT\")).isEqualTo(2L);\n+        assertThat(rs.getString(\"OVERLOAD_DELAY\")).isNotNull();\n+        assertThat(rs.next()).isFalse();\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testAutocommitDefaultNoCommitStats() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.setAutocommit(true);\n+      connection.write(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isFalse();\n+    }\n+  }\n+\n+  @Test\n+  public void testAutocommitReturnCommitStats() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.setAutocommit(true);\n+      connection.setReturnCommitStats(true);\n+      connection.write(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isTrue();\n+      assertThat(connection.getCommitResponse().getCommitStats().getMutationCount()).isEqualTo(2L);\n+    }\n+  }\n+\n+  @Test\n+  public void testAutocommitReturnCommitStatsUsingSql() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.execute(Statement.of(\"SET AUTOCOMMIT=TRUE\"));\n+      connection.execute(Statement.of(\"SET RETURN_COMMIT_STATS=TRUE\"));\n+      connection.write(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isTrue();\n+      assertThat(connection.getCommitResponse().getCommitStats().getMutationCount()).isEqualTo(2L);\n+      try (ResultSet rs =\n+          connection.execute(Statement.of(\"SHOW VARIABLE COMMIT_RESPONSE\")).getResultSet()) {\n+        assertThat(rs.next()).isTrue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2OTI0MA=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODM1ODA5OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionManagerAsyncTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDo0MzoxN1rOIfFswQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QyMDozMTo0N1rOIfVbZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ3MDE0NQ==", "bodyText": "Changes in this class don't immediately appear specific to this PR. Can you break this into a separate PR?", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569470145", "createdAt": "2021-02-03T14:43:17Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionManagerAsyncTest.java", "diffHunk": "@@ -224,6 +222,8 @@ public void testRollback() throws InterruptedException {\n     }\n   }\n \n+  @Ignore(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTcyNzg0NA==", "bodyText": "It seems that that had already been done. I've brought this and the commit-stats2 up to date with the latest changes from master, and there is are differences anymore in this class between this branch and master.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569727844", "createdAt": "2021-02-03T20:31:47Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionManagerAsyncTest.java", "diffHunk": "@@ -224,6 +222,8 @@ public void testRollback() throws InterruptedException {\n     }\n   }\n \n+  @Ignore(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ3MDE0NQ=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5MjkxODExOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/CommitResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxMjoxOToxOFrOIfw-rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNzoyMDoxNVrOIf-qxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE3OTI0NQ==", "bodyText": "nit: no period", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570179245", "createdAt": "2021-02-04T12:19:18Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/CommitResponse.java", "diffHunk": "@@ -41,6 +41,11 @@ public Timestamp getCommitTimestamp() {\n     return Timestamp.fromProto(proto.getCommitTimestamp());\n   }\n \n+  /** @return true if the {@link CommitResponse} includes {@link CommitStats}. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQwMzUyNQ==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570403525", "createdAt": "2021-02-04T17:20:15Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/CommitResponse.java", "diffHunk": "@@ -41,6 +41,11 @@ public Timestamp getCommitTimestamp() {\n     return Timestamp.fromProto(proto.getCommitTimestamp());\n   }\n \n+  /** @return true if the {@link CommitResponse} includes {@link CommitStats}. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE3OTI0NQ=="}, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5MjkxOTY5OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/Connection.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxMjoxOTo0NlrOIfw_nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNzoyMDowOVrOIf-qhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE3OTQ4NQ==", "bodyText": "nit: no period", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570179485", "createdAt": "2021-02-04T12:19:46Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/Connection.java", "diffHunk": "@@ -438,6 +439,15 @@\n    */\n   String getOptimizerVersion();\n \n+  /**\n+   * Sets whether this connection should request commit statistics from Cloud Spanner for read/write\n+   * transactions and DML statements in autocommit mode.\n+   */\n+  void setReturnCommitStats(boolean returnCommitStats);\n+\n+  /** @return true if this connection requests commit statistics from Cloud Spanner. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQwMzQ2MQ==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570403461", "createdAt": "2021-02-04T17:20:09Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/Connection.java", "diffHunk": "@@ -438,6 +439,15 @@\n    */\n   String getOptimizerVersion();\n \n+  /**\n+   * Sets whether this connection should request commit statistics from Cloud Spanner for read/write\n+   * transactions and DML statements in autocommit mode.\n+   */\n+  void setReturnCommitStats(boolean returnCommitStats);\n+\n+  /** @return true if this connection requests commit statistics from Cloud Spanner. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE3OTQ4NQ=="}, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5MjkyMTAxOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/Connection.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxMjoyMDowNFrOIfxAXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNzoyMDowM1rOIf-qHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE3OTY3Ng==", "bodyText": "will throw --> throws", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570179676", "createdAt": "2021-02-04T12:20:04Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/Connection.java", "diffHunk": "@@ -632,6 +642,17 @@\n    */\n   Timestamp getCommitTimestamp();\n \n+  /**\n+   * @return the {@link CommitResponse} of the last {@link TransactionMode#READ_WRITE_TRANSACTION}\n+   *     transaction. This method will throw a {@link SpannerException} if there is no last {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQwMzM1Ng==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570403356", "createdAt": "2021-02-04T17:20:03Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/Connection.java", "diffHunk": "@@ -632,6 +642,17 @@\n    */\n   Timestamp getCommitTimestamp();\n \n+  /**\n+   * @return the {@link CommitResponse} of the last {@link TransactionMode#READ_WRITE_TRANSACTION}\n+   *     transaction. This method will throw a {@link SpannerException} if there is no last {@link", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE3OTY3Ng=="}, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5MjkyNTE5OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/Connection.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxMjoyMToxMVrOIfxCzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNzoxOTo1OFrOIf-p1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE4MDMwMQ==", "bodyText": "per google style avoid Latin i.e. Perhaps rewrite as\nTransactionMode#READ_WRITE_TRANSACTION} transaction. That is, if the last transaction was a {@link", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570180301", "createdAt": "2021-02-04T12:21:11Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/Connection.java", "diffHunk": "@@ -632,6 +642,17 @@\n    */\n   Timestamp getCommitTimestamp();\n \n+  /**\n+   * @return the {@link CommitResponse} of the last {@link TransactionMode#READ_WRITE_TRANSACTION}\n+   *     transaction. This method will throw a {@link SpannerException} if there is no last {@link\n+   *     TransactionMode#READ_WRITE_TRANSACTION} transaction (i.e. the last transaction was a {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQwMzI4NA==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570403284", "createdAt": "2021-02-04T17:19:58Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/Connection.java", "diffHunk": "@@ -632,6 +642,17 @@\n    */\n   Timestamp getCommitTimestamp();\n \n+  /**\n+   * @return the {@link CommitResponse} of the last {@link TransactionMode#READ_WRITE_TRANSACTION}\n+   *     transaction. This method will throw a {@link SpannerException} if there is no last {@link\n+   *     TransactionMode#READ_WRITE_TRANSACTION} transaction (i.e. the last transaction was a {@link", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE4MDMwMQ=="}, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5Mjk1MDE0OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxMjoyNzo0MFrOIfxR0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNjozNzowN1rOIf8qbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE4NDE0Nw==", "bodyText": "I still don't see why both getCommitResponseOrNull and getCommitResponse exist. Why not just getCommitResponse that returns null if there's no unit of work?", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570184147", "createdAt": "2021-02-04T12:27:40Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionImpl.java", "diffHunk": "@@ -574,6 +578,31 @@ Timestamp getCommitTimestampOrNull() {\n         : this.currentUnitOfWork.getCommitTimestampOrNull();\n   }\n \n+  @Override\n+  public CommitResponse getCommitResponse() {\n+    ConnectionPreconditions.checkState(!isClosed(), CLOSED_ERROR_MSG);\n+    ConnectionPreconditions.checkState(\n+        this.currentUnitOfWork != null, \"There is no transaction on this connection\");\n+    return this.currentUnitOfWork.getCommitResponse();\n+  }\n+\n+  CommitResponse getCommitResponseOrNull() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM3MDY2OA==", "bodyText": "These two methods serve two different APIs that behave differently:\n\nThe Connection interface contains several methods that return the current state of the connection or of the last statement. The chosen pattern for that API is to throw an exception if the Connection is not in a valid state for the method to be called. I don't think we should deviate from that pattern for one method. This also somewhat reflects the standard in JDBC, where most methods also throw an exception if the Connection is not in a valid state for the method. See for example the commit() method. (Although this is not 100% true in all cases, as some other JDBC methods have a different contract, and allows you to call it in what seems to be an illogical state. Calling setAutoCommit is for example allowed during a transaction, and will automatically commit the transaction if the auto commit mode).\nThe Connection API also contains a simple SQL parser that can be used to get and set the state of a connection. This 'API' is lenient, and will return null when a value is requested that is not available at that moment. This SQL parser uses the getCommitResponseOrNull and other similar methods.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570370668", "createdAt": "2021-02-04T16:37:07Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionImpl.java", "diffHunk": "@@ -574,6 +578,31 @@ Timestamp getCommitTimestampOrNull() {\n         : this.currentUnitOfWork.getCommitTimestampOrNull();\n   }\n \n+  @Override\n+  public CommitResponse getCommitResponse() {\n+    ConnectionPreconditions.checkState(!isClosed(), CLOSED_ERROR_MSG);\n+    ConnectionPreconditions.checkState(\n+        this.currentUnitOfWork != null, \"There is no transaction on this connection\");\n+    return this.currentUnitOfWork.getCommitResponse();\n+  }\n+\n+  CommitResponse getCommitResponseOrNull() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE4NDE0Nw=="}, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5Mjk1MzI4OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxMjoyODoyNFrOIfxTnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNjo0MDozOFrOIf81GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE4NDYwNw==", "bodyText": "Is it useful to check the connection state here? What breaks if this field is set or read on a closed connection?", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570184607", "createdAt": "2021-02-04T12:28:24Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionImpl.java", "diffHunk": "@@ -574,6 +578,31 @@ Timestamp getCommitTimestampOrNull() {\n         : this.currentUnitOfWork.getCommitTimestampOrNull();\n   }\n \n+  @Override\n+  public CommitResponse getCommitResponse() {\n+    ConnectionPreconditions.checkState(!isClosed(), CLOSED_ERROR_MSG);\n+    ConnectionPreconditions.checkState(\n+        this.currentUnitOfWork != null, \"There is no transaction on this connection\");\n+    return this.currentUnitOfWork.getCommitResponse();\n+  }\n+\n+  CommitResponse getCommitResponseOrNull() {\n+    ConnectionPreconditions.checkState(!isClosed(), CLOSED_ERROR_MSG);\n+    return this.currentUnitOfWork == null ? null : this.currentUnitOfWork.getCommitResponseOrNull();\n+  }\n+\n+  @Override\n+  public void setReturnCommitStats(boolean returnCommitStats) {\n+    ConnectionPreconditions.checkState(!isClosed(), CLOSED_ERROR_MSG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM3MzQwMQ==", "bodyText": "This also follows the standard of the other methods in this class, as well as the default behavior in JDBC, where all methods throw an exception if it is called on a closed connection. See for example getAutoCommit().", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570373401", "createdAt": "2021-02-04T16:40:38Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionImpl.java", "diffHunk": "@@ -574,6 +578,31 @@ Timestamp getCommitTimestampOrNull() {\n         : this.currentUnitOfWork.getCommitTimestampOrNull();\n   }\n \n+  @Override\n+  public CommitResponse getCommitResponse() {\n+    ConnectionPreconditions.checkState(!isClosed(), CLOSED_ERROR_MSG);\n+    ConnectionPreconditions.checkState(\n+        this.currentUnitOfWork != null, \"There is no transaction on this connection\");\n+    return this.currentUnitOfWork.getCommitResponse();\n+  }\n+\n+  CommitResponse getCommitResponseOrNull() {\n+    ConnectionPreconditions.checkState(!isClosed(), CLOSED_ERROR_MSG);\n+    return this.currentUnitOfWork == null ? null : this.currentUnitOfWork.getCommitResponseOrNull();\n+  }\n+\n+  @Override\n+  public void setReturnCommitStats(boolean returnCommitStats) {\n+    ConnectionPreconditions.checkState(!isClosed(), CLOSED_ERROR_MSG);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE4NDYwNw=="}, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5Mjk1OTY0OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionOptions.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxMjoyOTo1NlrOIfxXVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNFQxODoxMTo1OVrOIrN9DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE4NTU1OQ==", "bodyText": "The constant is less clear than the string itself and doesn't help. It's only used in one obvious place.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570185559", "createdAt": "2021-02-04T12:29:56Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionOptions.java", "diffHunk": "@@ -184,6 +185,8 @@ public String getDefaultValue() {\n   private static final String USER_AGENT_PROPERTY_NAME = \"userAgent\";\n   /** Query optimizer version to use for a connection. */\n   private static final String OPTIMIZER_VERSION_PROPERTY_NAME = \"optimizerVersion\";\n+  /** Query optimizer version to use for a connection. */\n+  private static final String RETURN_COMMIT_STATS_PROPERTY_NAME = \"returnCommitStats\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM5Njg0MQ==", "bodyText": "It's used in two places (in the parseReturnCommitStats and to create the set of valid properties). But it's not something that can change in the future, as it would break existing connection URLs. I would prefer to change this in a separate PR, so the entire list of constants can be changed at once, instead of having one parameter that is handled differently from the rest.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570396841", "createdAt": "2021-02-04T17:10:58Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionOptions.java", "diffHunk": "@@ -184,6 +185,8 @@ public String getDefaultValue() {\n   private static final String USER_AGENT_PROPERTY_NAME = \"userAgent\";\n   /** Query optimizer version to use for a connection. */\n   private static final String OPTIMIZER_VERSION_PROPERTY_NAME = \"optimizerVersion\";\n+  /** Query optimizer version to use for a connection. */\n+  private static final String RETURN_COMMIT_STATS_PROPERTY_NAME = \"returnCommitStats\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE4NTU1OQ=="}, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTk4MDAxOA==", "bodyText": "Generally, this is not how Google handles this situation. You don't have to, and probably shouldn't, change the existing code in this PR. However all new code should be as clean as possible, even when that introduces inconsistencies with existing code. If that means one parameter is handled differently than the rest, so be it. Otherwise initial problems simply replicate across the code base over time.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r581980018", "createdAt": "2021-02-24T13:58:42Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionOptions.java", "diffHunk": "@@ -184,6 +185,8 @@ public String getDefaultValue() {\n   private static final String USER_AGENT_PROPERTY_NAME = \"userAgent\";\n   /** Query optimizer version to use for a connection. */\n   private static final String OPTIMIZER_VERSION_PROPERTY_NAME = \"optimizerVersion\";\n+  /** Query optimizer version to use for a connection. */\n+  private static final String RETURN_COMMIT_STATS_PROPERTY_NAME = \"returnCommitStats\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE4NTU1OQ=="}, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjE4ODMwMQ==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r582188301", "createdAt": "2021-02-24T18:11:59Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionOptions.java", "diffHunk": "@@ -184,6 +185,8 @@ public String getDefaultValue() {\n   private static final String USER_AGENT_PROPERTY_NAME = \"userAgent\";\n   /** Query optimizer version to use for a connection. */\n   private static final String OPTIMIZER_VERSION_PROPERTY_NAME = \"optimizerVersion\";\n+  /** Query optimizer version to use for a connection. */\n+  private static final String RETURN_COMMIT_STATS_PROPERTY_NAME = \"returnCommitStats\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE4NTU1OQ=="}, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5Mjk1OTk3OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionOptions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxMjozMDowMlrOIfxXig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNzoxMTowNlrOIf-RBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE4NTYxMA==", "bodyText": "copy pasta", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570185610", "createdAt": "2021-02-04T12:30:02Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionOptions.java", "diffHunk": "@@ -184,6 +185,8 @@ public String getDefaultValue() {\n   private static final String USER_AGENT_PROPERTY_NAME = \"userAgent\";\n   /** Query optimizer version to use for a connection. */\n   private static final String OPTIMIZER_VERSION_PROPERTY_NAME = \"optimizerVersion\";\n+  /** Query optimizer version to use for a connection. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDM5NjkzNQ==", "bodyText": "Fixed.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570396935", "createdAt": "2021-02-04T17:11:06Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionOptions.java", "diffHunk": "@@ -184,6 +185,8 @@ public String getDefaultValue() {\n   private static final String USER_AGENT_PROPERTY_NAME = \"userAgent\";\n   /** Query optimizer version to use for a connection. */\n   private static final String OPTIMIZER_VERSION_PROPERTY_NAME = \"optimizerVersion\";\n+  /** Query optimizer version to use for a connection. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE4NTYxMA=="}, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5Mjk2NTY5OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionOptions.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxMjozMTozN1rOIfxbKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNFQxODoxMjowN1rOIrN9dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE4NjUzNg==", "bodyText": "false is clearer than a constant whose value is 600 lines up.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570186536", "createdAt": "2021-02-04T12:31:37Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionOptions.java", "diffHunk": "@@ -634,6 +641,12 @@ static String parseOptimizerVersion(String uri) {\n     return value != null ? value : DEFAULT_OPTIMIZER_VERSION;\n   }\n \n+  @VisibleForTesting\n+  static boolean parseReturnCommitStats(String uri) {\n+    String value = parseUriProperty(uri, RETURN_COMMIT_STATS_PROPERTY_NAME);\n+    return value != null ? Boolean.valueOf(value) : DEFAULT_RETURN_COMMIT_STATS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQwMzk3OQ==", "bodyText": "While it would make it clearer here, it also makes it harder to get an overview of what the all the default values of a new connection is, as you would have to scroll through the different parse methods. Now the default values for all connection properties are grouped in one place.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570403979", "createdAt": "2021-02-04T17:20:53Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionOptions.java", "diffHunk": "@@ -634,6 +641,12 @@ static String parseOptimizerVersion(String uri) {\n     return value != null ? value : DEFAULT_OPTIMIZER_VERSION;\n   }\n \n+  @VisibleForTesting\n+  static boolean parseReturnCommitStats(String uri) {\n+    String value = parseUriProperty(uri, RETURN_COMMIT_STATS_PROPERTY_NAME);\n+    return value != null ? Boolean.valueOf(value) : DEFAULT_RETURN_COMMIT_STATS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE4NjUzNg=="}, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTk4MTQzOA==", "bodyText": "That sounds like a good case for docs or comments.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r581981438", "createdAt": "2021-02-24T14:00:23Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionOptions.java", "diffHunk": "@@ -634,6 +641,12 @@ static String parseOptimizerVersion(String uri) {\n     return value != null ? value : DEFAULT_OPTIMIZER_VERSION;\n   }\n \n+  @VisibleForTesting\n+  static boolean parseReturnCommitStats(String uri) {\n+    String value = parseUriProperty(uri, RETURN_COMMIT_STATS_PROPERTY_NAME);\n+    return value != null ? Boolean.valueOf(value) : DEFAULT_RETURN_COMMIT_STATS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE4NjUzNg=="}, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjE4ODQwNA==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r582188404", "createdAt": "2021-02-24T18:12:07Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionOptions.java", "diffHunk": "@@ -634,6 +641,12 @@ static String parseOptimizerVersion(String uri) {\n     return value != null ? value : DEFAULT_OPTIMIZER_VERSION;\n   }\n \n+  @VisibleForTesting\n+  static boolean parseReturnCommitStats(String uri) {\n+    String value = parseUriProperty(uri, RETURN_COMMIT_STATS_PROPERTY_NAME);\n+    return value != null ? Boolean.valueOf(value) : DEFAULT_RETURN_COMMIT_STATS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE4NjUzNg=="}, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5MzAxMzQ3OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxMjo0NDozMlrOIfx37g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNzoyNTowN1rOIf-3lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE5MzkwMg==", "bodyText": "Isn't this just a value class? You don't need to mock it.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570193902", "createdAt": "2021-02-04T12:44:32Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -103,6 +110,12 @@ public void commit() {\n       Timestamp commitTimestamp = Timestamp.now();\n       commitResponse = mock(CommitResponse.class);\n       when(commitResponse.getCommitTimestamp()).thenReturn(commitTimestamp);\n+      if (returnCommitStats) {\n+        CommitStats stats = mock(CommitStats.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQwNjgwNg==", "bodyText": "True, it is just a value class, but its constructor and static create method are not accessible from here. This test class is in the .connection sub-package, while CommitStats is in com.google.cloud.spanner.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570406806", "createdAt": "2021-02-04T17:25:07Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -103,6 +110,12 @@ public void commit() {\n       Timestamp commitTimestamp = Timestamp.now();\n       commitResponse = mock(CommitResponse.class);\n       when(commitResponse.getCommitTimestamp()).thenReturn(commitTimestamp);\n+      if (returnCommitStats) {\n+        CommitStats stats = mock(CommitStats.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE5MzkwMg=="}, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5MzAxNTg0OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxMjo0NToxMFrOIfx5ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNzoyNjowN1rOIf-6hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE5NDI3Ng==", "bodyText": "assertFalse is simpler and easier to read", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570194276", "createdAt": "2021-02-04T12:45:10Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +633,70 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQwNzU1Nw==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570407557", "createdAt": "2021-02-04T17:26:07Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +633,70 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE5NDI3Ng=="}, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5MzAxNzA0OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxMjo0NToyNlrOIfx6Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNzoyNjozNlrOIf-8BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE5NDQ0Ng==", "bodyText": "assertTrue", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570194446", "createdAt": "2021-02-04T12:45:26Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +633,70 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(true)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQwNzk0MA==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570407940", "createdAt": "2021-02-04T17:26:36Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +633,70 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(true)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE5NDQ0Ng=="}, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5MzAxNzgxOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxMjo0NTozM1rOIfx6cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNzoyNjo1M1rOIf-8ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE5NDU0NA==", "bodyText": "assertFalse is simpler and easier to read", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570194544", "createdAt": "2021-02-04T12:45:33Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +633,70 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(true)));\n+\n+      res = subject.execute(Statement.of(\"set return_commit_stats=false\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQwODEzMQ==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570408131", "createdAt": "2021-02-04T17:26:53Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +633,70 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(true)));\n+\n+      res = subject.execute(Statement.of(\"set return_commit_stats=false\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE5NDU0NA=="}, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5MzAxODg2OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxMjo0NTo0N1rOIfx7AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNzoyNzowOVrOIf-9og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE5NDY4OQ==", "bodyText": "res --> result", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570194689", "createdAt": "2021-02-04T12:45:47Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +633,70 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"set return_commit_stats=true\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQwODM1NA==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570408354", "createdAt": "2021-02-04T17:27:09Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +633,70 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"set return_commit_stats=true\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE5NDY4OQ=="}, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5MzAxOTU0OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxMjo0NTo1NlrOIfx7Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNzoyNzozOVrOIf-_Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE5NDc3OA==", "bodyText": "assertFalse is simpler and easier to read", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570194778", "createdAt": "2021-02-04T12:45:56Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +633,70 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(true)));\n+\n+      res = subject.execute(Statement.of(\"set return_commit_stats=false\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteSetReturnCommitStatsInvalidValue() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQwODcyNw==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570408727", "createdAt": "2021-02-04T17:27:39Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +633,70 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(true)));\n+\n+      res = subject.execute(Statement.of(\"set return_commit_stats=false\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteSetReturnCommitStatsInvalidValue() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE5NDc3OA=="}, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5MzA0MDM0OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxMjo1MDo1OVrOIfyHyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxNzozNjozMFrOIf_XzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE5Nzk2MQ==", "bodyText": "If you muse use Truth, then the way to write this is\nassertThat(e.getErrorCode()).isEqualTo(ErrorCode.INVALID_ARGUMENT)\n\nbut frankly you're better off not even using truth for basic equality, same as, null, non-null, and true and false comparisons. Truth is better reserved for more complex comparisons that JUnit doesn't natively support.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570197961", "createdAt": "2021-02-04T12:50:59Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +633,70 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(true)));\n+\n+      res = subject.execute(Statement.of(\"set return_commit_stats=false\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteSetReturnCommitStatsInvalidValue() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      try {\n+        subject.execute(Statement.of(\"set return_commit_stats=yes\"));\n+        fail(\"Missing expected exception\");\n+      } catch (SpannerException e) {\n+        assertThat(e.getErrorCode(), is(equalTo(ErrorCode.INVALID_ARGUMENT)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDQxNTA1Mg==", "bodyText": "This is actually not Truth, but Hamcrest. That was what this entire client library initially used, and most classes have gradually been migrated to Truth. This class has not.\nI'll stick to JUnit for the simpler comparisons from now on.\n(And changed this specific one to JUnit)", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570415052", "createdAt": "2021-02-04T17:36:30Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +633,70 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(true)));\n+\n+      res = subject.execute(Statement.of(\"set return_commit_stats=false\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteSetReturnCommitStatsInvalidValue() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      try {\n+        subject.execute(Statement.of(\"set return_commit_stats=yes\"));\n+        fail(\"Missing expected exception\");\n+      } catch (SpannerException e) {\n+        assertThat(e.getErrorCode(), is(equalTo(ErrorCode.INVALID_ARGUMENT)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE5Nzk2MQ=="}, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY3MTI0NTg1OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionOptions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNFQxNDowMToyNVrOIrBYHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNFQxNzo1NToxNVrOIrNNpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTk4MjIzOA==", "bodyText": "Only the initial value? If it changes, this still returns the initial value? That's surprising. Hmm, looks like it's final so no need to say initial. probably rewrite as, \"whether connections created by this {@link ConnectionOptions} return commit stats\"", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r581982238", "createdAt": "2021-02-24T14:01:25Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionOptions.java", "diffHunk": "@@ -823,6 +836,13 @@ QueryOptions getQueryOptions() {\n     return queryOptions;\n   }\n \n+  /**\n+   * The initial returnCommitStats value for connections created by this {@link ConnectionOptions}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7540c3194bb412710bbbe4d2cc677c1d2c6f41fb"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjE3NjE2NA==", "bodyText": "Changed to Whether connections created by this {@link ConnectionOptions} return commit stats\nThe 'initial' part reflects that fact that while this value is final for the ConnectionOptions, it can still be changed on any Connection that is created from this ConnectionOptions through the Connection#setReturnCommitStats(boolean) method, or by executing the SET RETURN_COMMIT_STATS = TRUE|FALSE sql statement.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r582176164", "createdAt": "2021-02-24T17:55:15Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionOptions.java", "diffHunk": "@@ -823,6 +836,13 @@ QueryOptions getQueryOptions() {\n     return queryOptions;\n   }\n \n+  /**\n+   * The initial returnCommitStats value for connections created by this {@link ConnectionOptions}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTk4MjIzOA=="}, "originalCommit": {"oid": "7540c3194bb412710bbbe4d2cc677c1d2c6f41fb"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY3MTI4MTMyOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadWriteTransaction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNFQxNDowODoyNVrOIrBtfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNFQxODoxOTowN1rOIrOQ5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTk4NzcwOA==", "bodyText": "not been committed", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r581987708", "createdAt": "2021-02-24T14:08:25Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadWriteTransaction.java", "diffHunk": "@@ -254,19 +265,30 @@ public Timestamp getReadTimestampOrNull() {\n     return null;\n   }\n \n-  private boolean hasCommitTimestamp() {\n-    return commitTimestampFuture != null;\n+  private boolean hasCommitResponse() {\n+    return commitResponseFuture != null;\n   }\n \n   @Override\n   public Timestamp getCommitTimestamp() {\n-    ConnectionPreconditions.checkState(hasCommitTimestamp(), \"This transaction has not committed.\");\n-    return get(commitTimestampFuture);\n+    ConnectionPreconditions.checkState(hasCommitResponse(), \"This transaction has not committed.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7540c3194bb412710bbbe4d2cc677c1d2c6f41fb"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjE5MzM4MA==", "bodyText": "done", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r582193380", "createdAt": "2021-02-24T18:19:07Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadWriteTransaction.java", "diffHunk": "@@ -254,19 +265,30 @@ public Timestamp getReadTimestampOrNull() {\n     return null;\n   }\n \n-  private boolean hasCommitTimestamp() {\n-    return commitTimestampFuture != null;\n+  private boolean hasCommitResponse() {\n+    return commitResponseFuture != null;\n   }\n \n   @Override\n   public Timestamp getCommitTimestamp() {\n-    ConnectionPreconditions.checkState(hasCommitTimestamp(), \"This transaction has not committed.\");\n-    return get(commitTimestampFuture);\n+    ConnectionPreconditions.checkState(hasCommitResponse(), \"This transaction has not committed.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTk4NzcwOA=="}, "originalCommit": {"oid": "7540c3194bb412710bbbe4d2cc677c1d2c6f41fb"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY3MTI4MTgzOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadWriteTransaction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNFQxNDowODozM1rOIrBt1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNFQxODoxOToxMVrOIrORBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTk4Nzc5Ng==", "bodyText": "not been committed", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r581987796", "createdAt": "2021-02-24T14:08:33Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadWriteTransaction.java", "diffHunk": "@@ -254,19 +265,30 @@ public Timestamp getReadTimestampOrNull() {\n     return null;\n   }\n \n-  private boolean hasCommitTimestamp() {\n-    return commitTimestampFuture != null;\n+  private boolean hasCommitResponse() {\n+    return commitResponseFuture != null;\n   }\n \n   @Override\n   public Timestamp getCommitTimestamp() {\n-    ConnectionPreconditions.checkState(hasCommitTimestamp(), \"This transaction has not committed.\");\n-    return get(commitTimestampFuture);\n+    ConnectionPreconditions.checkState(hasCommitResponse(), \"This transaction has not committed.\");\n+    return get(commitResponseFuture).getCommitTimestamp();\n   }\n \n   @Override\n   public Timestamp getCommitTimestampOrNull() {\n-    return hasCommitTimestamp() ? get(commitTimestampFuture) : null;\n+    return hasCommitResponse() ? get(commitResponseFuture).getCommitTimestamp() : null;\n+  }\n+\n+  @Override\n+  public CommitResponse getCommitResponse() {\n+    ConnectionPreconditions.checkState(hasCommitResponse(), \"This transaction has not committed.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7540c3194bb412710bbbe4d2cc677c1d2c6f41fb"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjE5MzQxNQ==", "bodyText": "done", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r582193415", "createdAt": "2021-02-24T18:19:11Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadWriteTransaction.java", "diffHunk": "@@ -254,19 +265,30 @@ public Timestamp getReadTimestampOrNull() {\n     return null;\n   }\n \n-  private boolean hasCommitTimestamp() {\n-    return commitTimestampFuture != null;\n+  private boolean hasCommitResponse() {\n+    return commitResponseFuture != null;\n   }\n \n   @Override\n   public Timestamp getCommitTimestamp() {\n-    ConnectionPreconditions.checkState(hasCommitTimestamp(), \"This transaction has not committed.\");\n-    return get(commitTimestampFuture);\n+    ConnectionPreconditions.checkState(hasCommitResponse(), \"This transaction has not committed.\");\n+    return get(commitResponseFuture).getCommitTimestamp();\n   }\n \n   @Override\n   public Timestamp getCommitTimestampOrNull() {\n-    return hasCommitTimestamp() ? get(commitTimestampFuture) : null;\n+    return hasCommitResponse() ? get(commitResponseFuture).getCommitTimestamp() : null;\n+  }\n+\n+  @Override\n+  public CommitResponse getCommitResponse() {\n+    ConnectionPreconditions.checkState(hasCommitResponse(), \"This transaction has not committed.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTk4Nzc5Ng=="}, "originalCommit": {"oid": "7540c3194bb412710bbbe4d2cc677c1d2c6f41fb"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3320, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}