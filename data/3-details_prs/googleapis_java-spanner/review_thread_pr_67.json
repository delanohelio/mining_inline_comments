{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMjg3Njgx", "number": 67, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOToxODo1NFrODeky8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDozMTozM1rODg5tBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzg2NzM4OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPool.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOToxODo1NFrOFnyYnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNDo0MjowM1rOFsV9Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI2NDI4NA==", "bodyText": "@olavloite I added these counters based on my understanding, let me know if there is a better way to get these (acquired and released sessions) values.", "url": "https://github.com/googleapis/java-spanner/pull/67#discussion_r377264284", "createdAt": "2020-02-10T19:18:54Z", "author": {"login": "mayurkale22"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPool.java", "diffHunk": "@@ -1346,9 +1359,11 @@ PooledSession getReadSession() throws SpannerException {\n           readWaiters.add(waiter);\n         } else {\n           span.addAnnotation(\"Acquired read write session\");\n+          numSessionsAcquired++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac25485719558a2545bd63b21d35e3c9063772e9"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0MTQzOQ==", "bodyText": "There's no variable currently keeping track of this, but there is one that comes very close: numSessionsInUse. If you really want to keep track of the number of sessions acquired and the number of sessions released back into the pool, then you should add the increase statements of these variables at the exact same places as where numSessionsInUse is increased and decreased.\nThe maintainer never checks out a session from the pool in the same way as that user code can do. Checking for session leaks from the maintainer is therefore not possible by using any of these values. Other parts of the client library never checks out a session from the pool independently from any user code. That means that there is no way to measure whether a session leak is caused by a bug in user code or a bug in the client library. To the session pool, they will always look the same.", "url": "https://github.com/googleapis/java-spanner/pull/67#discussion_r382041439", "createdAt": "2020-02-20T14:42:03Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPool.java", "diffHunk": "@@ -1346,9 +1359,11 @@ PooledSession getReadSession() throws SpannerException {\n           readWaiters.add(waiter);\n         } else {\n           span.addAnnotation(\"Acquired read write session\");\n+          numSessionsAcquired++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI2NDI4NA=="}, "originalCommit": {"oid": "ac25485719558a2545bd63b21d35e3c9063772e9"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODIxODQyOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDowNToyMlrOFrW4lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDowNToyMlrOFrW4lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAwODAyMw==", "bodyText": "I don't think releasing sessions is the same as closing the session pool. Releasing is to do with the user handing the session back to the pool. Closing is shutting down the connection all together.\nI think you want to add this to releaseSession on line 1522.", "url": "https://github.com/googleapis/java-spanner/pull/67#discussion_r381008023", "createdAt": "2020-02-19T00:05:22Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPool.java", "diffHunk": "@@ -795,6 +799,7 @@ public TransactionRunner readWriteTransaction() {\n     @Override\n     public void close() {\n       synchronized (lock) {\n+        numSessionsReleased++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a0692549ce6a69fcab12602b482a390d184c5b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODIyMTg5OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDowNzoyNFrOFrW6uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDowNzoyNFrOFrW6uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAwODU3MQ==", "bodyText": "I think you can remove this as well.", "url": "https://github.com/googleapis/java-spanner/pull/67#discussion_r381008571", "createdAt": "2020-02-19T00:07:24Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPool.java", "diffHunk": "@@ -1025,6 +1030,7 @@ private void closeIdleSessions(Instant currTime) {\n           }\n           numSessionsToClose -= sessionsToClose.size();\n         }\n+        numSessionsReleased += sessionsToClose.size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a0692549ce6a69fcab12602b482a390d184c5b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODI2NDM5OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SessionPoolTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMDozMTozM1rOFrXUnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjoyNjo1MVrOFslVPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNTE5OQ==", "bodyText": "@skuruppu thanks for the suggestions. I made the changes, but somehow test results look fishy to me. After change, NUM_RELEASED_SESSIONS == 5 and NUM_ACQUIRED_SESSIONS == 0.", "url": "https://github.com/googleapis/java-spanner/pull/67#discussion_r381015199", "createdAt": "2020-02-19T00:31:33Z", "author": {"login": "mayurkale22"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SessionPoolTest.java", "diffHunk": "@@ -1628,7 +1628,7 @@ public Void call() {\n     assertThat(record.getMetrics())\n         .containsEntry(MetricRegistryConstants.NUM_ACQUIRED_SESSIONS, 0L);\n     assertThat(record.getMetrics())\n-        .containsEntry(MetricRegistryConstants.NUM_RELEASED_SESSIONS, 3L);\n+        .containsEntry(MetricRegistryConstants.NUM_RELEASED_SESSIONS, 5L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d397a4aa010c88fea569e9b155813a7148afcfb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc0ODYxNA==", "bodyText": "I think I was partially wrong. It turns out that releaseSession() is only used internally. So you can get calls to this function due to the session pool doing keep alive requests (e.g. check out session to send a \"select 1\" then release it back to the pool). I think this is why you're seeing the number of released sessions being higher than you expected.\nI also just realized that getReadSession() docs say to call Session.close() when you're done with the sessions. It seems that sessions acquired by the user will get closed and sessions acquired by the client library gets released.\n@olavloite did I understand this correctly?", "url": "https://github.com/googleapis/java-spanner/pull/67#discussion_r381748614", "createdAt": "2020-02-20T04:47:09Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SessionPoolTest.java", "diffHunk": "@@ -1628,7 +1628,7 @@ public Void call() {\n     assertThat(record.getMetrics())\n         .containsEntry(MetricRegistryConstants.NUM_ACQUIRED_SESSIONS, 0L);\n     assertThat(record.getMetrics())\n-        .containsEntry(MetricRegistryConstants.NUM_RELEASED_SESSIONS, 3L);\n+        .containsEntry(MetricRegistryConstants.NUM_RELEASED_SESSIONS, 5L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNTE5OQ=="}, "originalCommit": {"oid": "5d397a4aa010c88fea569e9b155813a7148afcfb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc0OTAwNw==", "bodyText": "I don't understand why NUM_ACQUIRED_SESSIONS is zero though. I would've thought calling getReadSession() would increment this.", "url": "https://github.com/googleapis/java-spanner/pull/67#discussion_r381749007", "createdAt": "2020-02-20T04:48:07Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SessionPoolTest.java", "diffHunk": "@@ -1628,7 +1628,7 @@ public Void call() {\n     assertThat(record.getMetrics())\n         .containsEntry(MetricRegistryConstants.NUM_ACQUIRED_SESSIONS, 0L);\n     assertThat(record.getMetrics())\n-        .containsEntry(MetricRegistryConstants.NUM_RELEASED_SESSIONS, 3L);\n+        .containsEntry(MetricRegistryConstants.NUM_RELEASED_SESSIONS, 5L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNTE5OQ=="}, "originalCommit": {"oid": "5d397a4aa010c88fea569e9b155813a7148afcfb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA2ODg1Mg==", "bodyText": "I also just realized that getReadSession() docs say to call Session.close() when you're done with the sessions. It seems that sessions acquired by the user will get closed and sessions acquired by the client library gets released.\n\nThat is correct(ish), but the naming of the Session.close() method is a little bit confusing in this case. This is roughly what is going on in the session pool regarding checking out, closing, releasing etc.:\n\nUser code will never see a session. Instead, user code sees different types of transactions (read/write, read-only, single use) and ResultSets. A session is automatically checked out from the session pool by the client library when one is needed for a transaction requested by user code. Checking out a session is always one of the methods getReadSession or getReadWriteSession. A session leak can be caused by user code if it fails to end a transaction or to close a ResultSet.\nThe getReadSession and getReadWriteSession methods return a PooledSession instance. The close method of this class will check whether the session is still considered valid, and if so, release it into the pool (releaseSession()) or delete it (invalidateSession()).\nSo technically, only the client library checks sessions out and releases them back into the session pool. User code never does (directly).\nIn addition to the above, there is also the PoolMaintainer: The PoolMaintainer never really checks a session out from the pool, although the keepAlive method does do something that comes very close: It manually removes a session from the inventory of the pool, executes a ping request and then calls releaseSession() to add it back to the inventory. This is not tracked by the session pool as a session that is checked out and back in again, and should also be treated separately from all the other measurements for session leaks.\n\nRegarding the current test results with NUM_RELEASED_SESSIONS == 5 and NUM_ACQUIRED_SESSIONS == 0. This is because the NUM_ACQUIRED_SESSIONS is only increased if a session could be acquired without causing a wait, and the 2 sessions that are being checked out, are being checked out directly after the session pool has been created. The pool therefore has not had the time to create any sessions yet, which will place both requests in a (very short) wait before they can be served.\nNUM_RELEASED_SESSIONS is 5 because it is counting all calls to releaseSession. That method is also called when a session is created and released into the pool. You should only count the number of calls to PooledSession#close() (see also my comment above).", "url": "https://github.com/googleapis/java-spanner/pull/67#discussion_r382068852", "createdAt": "2020-02-20T15:22:23Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SessionPoolTest.java", "diffHunk": "@@ -1628,7 +1628,7 @@ public Void call() {\n     assertThat(record.getMetrics())\n         .containsEntry(MetricRegistryConstants.NUM_ACQUIRED_SESSIONS, 0L);\n     assertThat(record.getMetrics())\n-        .containsEntry(MetricRegistryConstants.NUM_RELEASED_SESSIONS, 3L);\n+        .containsEntry(MetricRegistryConstants.NUM_RELEASED_SESSIONS, 5L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNTE5OQ=="}, "originalCommit": {"oid": "5d397a4aa010c88fea569e9b155813a7148afcfb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI5MzMwOQ==", "bodyText": "@olavloite would like to get your eyes on this.", "url": "https://github.com/googleapis/java-spanner/pull/67#discussion_r382293309", "createdAt": "2020-02-20T22:26:51Z", "author": {"login": "mayurkale22"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SessionPoolTest.java", "diffHunk": "@@ -1628,7 +1628,7 @@ public Void call() {\n     assertThat(record.getMetrics())\n         .containsEntry(MetricRegistryConstants.NUM_ACQUIRED_SESSIONS, 0L);\n     assertThat(record.getMetrics())\n-        .containsEntry(MetricRegistryConstants.NUM_RELEASED_SESSIONS, 3L);\n+        .containsEntry(MetricRegistryConstants.NUM_RELEASED_SESSIONS, 5L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAxNTE5OQ=="}, "originalCommit": {"oid": "5d397a4aa010c88fea569e9b155813a7148afcfb"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3202, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}