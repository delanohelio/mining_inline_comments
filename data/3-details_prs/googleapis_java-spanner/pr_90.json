{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMDg1NzI5", "number": 90, "title": "feat: add backend query options", "bodyText": "Adds the ability to set QueryOptions when running Cloud Spanner queries. For now, only setting the query_optimizer_version is added.\nQueryOptions can be configured through the following mechanisms:\n\nThrough the SPANNER_OPTIMIZER_VERSION environment variable.\nAt Spanner level using SpannerOptions.newBuilder().setDefaultQueryOptions(DatabaseId, QueryOptions).\nAt query level using Statement.newBuilder(String).withQueryOptions(QueryOptions).\n\nIf the options are configured through multiple mechanisms then:\n\nOptions set at an environment variable level will override options configured at the SpannerOptions level.\nOptions set at a query-level will override options set at either the SpannerOptions or environment variable level.\n\nIf no options are set, the optimizer version will default to:\n\nThe optimizer version the database is pinned to.\nIf the database is not pinned to a specific version, then the Cloud Spanner backend will use the \"latest\" version.", "createdAt": "2020-03-03T17:39:40Z", "url": "https://github.com/googleapis/java-spanner/pull/90", "merged": true, "mergeCommit": {"oid": "e96e17246bee9691171b46857806d03d1f8e19b4"}, "closed": true, "closedAt": "2020-03-12T15:35:57Z", "author": {"login": "olavloite"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcLzZ7uAFqTM3MDg3MjQyNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcM78FYAH2gAyMzgzMDg1NzI5OjA5NmUzZmIzOGFlYWY5OGQ1MjI1ZDk1ZmJiYTZjNGYzZjU0NGExOGI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODcyNDI0", "url": "https://github.com/googleapis/java-spanner/pull/90#pullrequestreview-370872424", "createdAt": "2020-03-09T00:36:54Z", "commit": {"oid": "831c262c35e51ae995cdb2cf3c6cc1f2a84294ba"}, "state": "APPROVED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMDozNjo1NFrOFzYiog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMTowNjowNlrOFzYvAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMzc3OA==", "bodyText": "Since most of this refactoring and extra checks for arguments is not related to the query options work, would it be ok to move this to a separate PR?", "url": "https://github.com/googleapis/java-spanner/pull/90#discussion_r389423778", "createdAt": "2020-03-09T00:36:54Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractReadContext.java", "diffHunk": "@@ -148,27 +247,24 @@ public void onTransactionMetadata(Transaction transaction) {\n     @GuardedBy(\"txnLock\")\n     private ByteString transactionId;\n \n-    MultiUseReadOnlyTransaction(\n-        SessionImpl session, TimestampBound bound, SpannerRpc rpc, int defaultPrefetchChunks) {\n-      super(session, rpc, defaultPrefetchChunks);\n+    MultiUseReadOnlyTransaction(Builder builder) {\n+      super(builder);\n       checkArgument(\n-          bound.getMode() != TimestampBound.Mode.MAX_STALENESS\n-              && bound.getMode() != TimestampBound.Mode.MIN_READ_TIMESTAMP,\n-          \"Bounded staleness mode %s is not supported for multi-use read-only transactions.\"\n-              + \" Create a single-use read or read-only transaction instead.\",\n-          bound.getMode());\n-      this.bound = bound;\n-    }\n-\n-    MultiUseReadOnlyTransaction(\n-        SessionImpl session,\n-        ByteString transactionId,\n-        Timestamp timestamp,\n-        SpannerRpc rpc,\n-        int defaultPrefetchChunks) {\n-      super(session, rpc, defaultPrefetchChunks);\n-      this.transactionId = transactionId;\n-      this.timestamp = timestamp;\n+          !(builder.bound != null && builder.transactionId != null)\n+              && !(builder.bound == null && builder.transactionId == null),\n+          \"Either TimestampBound or TransactionId must be specified\");\n+      if (builder.bound != null) {\n+        checkArgument(\n+            builder.bound.getMode() != TimestampBound.Mode.MAX_STALENESS\n+                && builder.bound.getMode() != TimestampBound.Mode.MIN_READ_TIMESTAMP,\n+            \"Bounded staleness mode %s is not supported for multi-use read-only transactions.\"\n+                + \" Create a single-use read or read-only transaction instead.\",\n+            builder.bound.getMode());\n+        this.bound = builder.bound;\n+      } else {\n+        this.timestamp = builder.timestamp;\n+        this.transactionId = builder.transactionId;\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831c262c35e51ae995cdb2cf3c6cc1f2a84294ba"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyNTk4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    SpannerImpl implWithouQueryOptions = new SpannerImpl(rpc, optionsWithoutQueryOptions)) {\n          \n          \n            \n                    SpannerImpl implWithoutQueryOptions = new SpannerImpl(rpc, optionsWithoutQueryOptions)) {", "url": "https://github.com/googleapis/java-spanner/pull/90#discussion_r389425982", "createdAt": "2020-03-09T00:57:44Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SpannerImplTest.java", "diffHunk": "@@ -88,6 +89,47 @@ public void getDbclientAgainGivesSame() {\n     assertThat(databaseClient1).isSameInstanceAs(databaseClient);\n   }\n \n+  @Test\n+  public void queryOptions() {\n+    QueryOptions queryOptions = QueryOptions.newBuilder().setOptimizerVersion(\"2\").build();\n+    QueryOptions defaultOptions = QueryOptions.getDefaultInstance();\n+    DatabaseId db = DatabaseId.of(\"p\", \"i\", \"d\");\n+    DatabaseId otherDb = DatabaseId.of(\"p\", \"i\", \"other\");\n+\n+    // Create a SpannerOptions with and without default query options.\n+    SpannerOptions optionsWithQueryOptions =\n+        new SpannerOptions.Builder(SpannerOptions.getDefaultInstance()) {\n+          @Override\n+          QueryOptions getEnvironmentQueryOptions() {\n+            // Override and return default instance to prevent environment variables from\n+            // interfering with the test case.\n+            return QueryOptions.getDefaultInstance();\n+          }\n+        }.setDefaultQueryOptions(db, queryOptions).build();\n+    SpannerOptions optionsWithoutQueryOptions =\n+        new SpannerOptions.Builder(SpannerOptions.getDefaultInstance()) {\n+          @Override\n+          QueryOptions getEnvironmentQueryOptions() {\n+            // Override and return default instance to prevent environment variables from\n+            // interfering with the test case.\n+            return QueryOptions.getDefaultInstance();\n+          }\n+        }.build();\n+\n+    try (SpannerImpl implWithQueryOptions = new SpannerImpl(rpc, optionsWithQueryOptions);\n+        SpannerImpl implWithouQueryOptions = new SpannerImpl(rpc, optionsWithoutQueryOptions)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831c262c35e51ae995cdb2cf3c6cc1f2a84294ba"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyNjEwNQ==", "bodyText": "Please remove this.", "url": "https://github.com/googleapis/java-spanner/pull/90#discussion_r389426105", "createdAt": "2020-03-09T00:58:40Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SpannerOptionsTest.java", "diffHunk": "@@ -427,4 +428,56 @@ public void testSetEmulatorHostWithProtocol() {\n     assertThat(options.getHost()).isEqualTo(\"http://localhost:1234\");\n     assertThat(options.getEndpoint()).isEqualTo(\"localhost:1234\");\n   }\n+\n+  @Test\n+  public void testDefaultQueryOptions() {\n+    SpannerOptions.useEnvironment(\n+        new SpannerOptions.SpannerEnvironment() {\n+          @Override\n+          public String getOptimizerVersion() {\n+            return \"\";\n+          }\n+\n+          @Override\n+          public String getOptimizerStatisticsPackage() {\n+            return \"\";\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831c262c35e51ae995cdb2cf3c6cc1f2a84294ba"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyNjE2NQ==", "bodyText": "Please remove this as well.", "url": "https://github.com/googleapis/java-spanner/pull/90#discussion_r389426165", "createdAt": "2020-03-09T00:59:14Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SpannerOptionsTest.java", "diffHunk": "@@ -427,4 +428,56 @@ public void testSetEmulatorHostWithProtocol() {\n     assertThat(options.getHost()).isEqualTo(\"http://localhost:1234\");\n     assertThat(options.getEndpoint()).isEqualTo(\"localhost:1234\");\n   }\n+\n+  @Test\n+  public void testDefaultQueryOptions() {\n+    SpannerOptions.useEnvironment(\n+        new SpannerOptions.SpannerEnvironment() {\n+          @Override\n+          public String getOptimizerVersion() {\n+            return \"\";\n+          }\n+\n+          @Override\n+          public String getOptimizerStatisticsPackage() {\n+            return \"\";\n+          }\n+        });\n+    SpannerOptions options =\n+        SpannerOptions.newBuilder()\n+            .setDefaultQueryOptions(\n+                DatabaseId.of(\"p\", \"i\", \"d\"),\n+                QueryOptions.newBuilder().setOptimizerVersion(\"1\").build())\n+            .build();\n+    assertThat(options.getDefaultQueryOptions(DatabaseId.of(\"p\", \"i\", \"d\")))\n+        .isEqualTo(QueryOptions.newBuilder().setOptimizerVersion(\"1\").build());\n+    assertThat(options.getDefaultQueryOptions(DatabaseId.of(\"p\", \"i\", \"o\")))\n+        .isEqualTo(QueryOptions.getDefaultInstance());\n+\n+    // Now simulate that the user has set an environment variable for the query optimizer version.\n+    SpannerOptions.useEnvironment(\n+        new SpannerOptions.SpannerEnvironment() {\n+          @Override\n+          public String getOptimizerVersion() {\n+            return \"2\";\n+          }\n+\n+          @Override\n+          public String getOptimizerStatisticsPackage() {\n+            return \"\";\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831c262c35e51ae995cdb2cf3c6cc1f2a84294ba"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyNjc4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // Check that the last query was executed using a custom optimizer version and statistics\n          \n          \n            \n                  // package.\n          \n          \n            \n                  // Check that the last query was executed using a custom optimizer version.", "url": "https://github.com/googleapis/java-spanner/pull/90#discussion_r389426784", "createdAt": "2020-03-09T01:04:52Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java", "diffHunk": "@@ -701,4 +707,125 @@ public Long run(TransactionContext transaction) throws Exception {\n     assertThat(client1.pool.getNumberOfSessionsInPool(), is(equalTo(minSessions)));\n     assertThat(client2.pool.getNumberOfSessionsInPool(), is(equalTo(minSessions)));\n   }\n+\n+  @Test\n+  public void testBackendQueryOptions() {\n+    // Use a Spanner instance with MinSession=0 and WriteFraction=0.0 to prevent background requests\n+    // from the session pool interfering with the test case.\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder()\n+            .setProjectId(\"[PROJECT]\")\n+            .setChannelProvider(channelProvider)\n+            .setCredentials(NoCredentials.getInstance())\n+            .setSessionPoolOption(\n+                SessionPoolOptions.newBuilder()\n+                    .setMinSessions(0)\n+                    .setWriteSessionsFraction(0.0f)\n+                    .build())\n+            .build()\n+            .getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(\"[PROJECT]\", \"[INSTANCE]\", \"[DATABASE\"));\n+      try (ResultSet rs =\n+          client\n+              .singleUse()\n+              .executeQuery(\n+                  Statement.newBuilder(SELECT1.getSql())\n+                      .withQueryOptions(QueryOptions.newBuilder().setOptimizerVersion(\"1\").build())\n+                      .build())) {\n+        // Just iterate over the results to execute the query.\n+        while (rs.next()) {}\n+      }\n+      // Check that the last query was executed using a custom optimizer version and statistics\n+      // package.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831c262c35e51ae995cdb2cf3c6cc1f2a84294ba"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyNjgzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // Check that the last query was executed using a custom optimizer version and statistics\n          \n          \n            \n                  // package.\n          \n          \n            \n                  // Check that the last query was executed using a custom optimizer version.", "url": "https://github.com/googleapis/java-spanner/pull/90#discussion_r389426838", "createdAt": "2020-03-09T01:05:27Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java", "diffHunk": "@@ -701,4 +707,125 @@ public Long run(TransactionContext transaction) throws Exception {\n     assertThat(client1.pool.getNumberOfSessionsInPool(), is(equalTo(minSessions)));\n     assertThat(client2.pool.getNumberOfSessionsInPool(), is(equalTo(minSessions)));\n   }\n+\n+  @Test\n+  public void testBackendQueryOptions() {\n+    // Use a Spanner instance with MinSession=0 and WriteFraction=0.0 to prevent background requests\n+    // from the session pool interfering with the test case.\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder()\n+            .setProjectId(\"[PROJECT]\")\n+            .setChannelProvider(channelProvider)\n+            .setCredentials(NoCredentials.getInstance())\n+            .setSessionPoolOption(\n+                SessionPoolOptions.newBuilder()\n+                    .setMinSessions(0)\n+                    .setWriteSessionsFraction(0.0f)\n+                    .build())\n+            .build()\n+            .getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(\"[PROJECT]\", \"[INSTANCE]\", \"[DATABASE\"));\n+      try (ResultSet rs =\n+          client\n+              .singleUse()\n+              .executeQuery(\n+                  Statement.newBuilder(SELECT1.getSql())\n+                      .withQueryOptions(QueryOptions.newBuilder().setOptimizerVersion(\"1\").build())\n+                      .build())) {\n+        // Just iterate over the results to execute the query.\n+        while (rs.next()) {}\n+      }\n+      // Check that the last query was executed using a custom optimizer version and statistics\n+      // package.\n+      List<AbstractMessage> requests = mockSpanner.getRequests();\n+      assertThat(requests).isNotEmpty();\n+      assertThat(requests.get(requests.size() - 1)).isInstanceOf(ExecuteSqlRequest.class);\n+      ExecuteSqlRequest request = (ExecuteSqlRequest) requests.get(requests.size() - 1);\n+      assertThat(request.getQueryOptions()).isNotNull();\n+      assertThat(request.getQueryOptions().getOptimizerVersion()).isEqualTo(\"1\");\n+    }\n+  }\n+\n+  @Test\n+  public void testBackendQueryOptionsWithAnalyzeQuery() {\n+    // Use a Spanner instance with MinSession=0 and WriteFraction=0.0 to prevent background requests\n+    // from the session pool interfering with the test case.\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder()\n+            .setProjectId(\"[PROJECT]\")\n+            .setChannelProvider(channelProvider)\n+            .setCredentials(NoCredentials.getInstance())\n+            .setSessionPoolOption(\n+                SessionPoolOptions.newBuilder()\n+                    .setMinSessions(0)\n+                    .setWriteSessionsFraction(0.0f)\n+                    .build())\n+            .build()\n+            .getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(\"[PROJECT]\", \"[INSTANCE]\", \"[DATABASE\"));\n+      try (ReadOnlyTransaction tx = client.readOnlyTransaction()) {\n+        try (ResultSet rs =\n+            tx.analyzeQuery(\n+                Statement.newBuilder(SELECT1.getSql())\n+                    .withQueryOptions(QueryOptions.newBuilder().setOptimizerVersion(\"1\").build())\n+                    .build(),\n+                QueryAnalyzeMode.PROFILE)) {\n+          // Just iterate over the results to execute the query.\n+          while (rs.next()) {}\n+        }\n+      }\n+      // Check that the last query was executed using a custom optimizer version and statistics\n+      // package.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831c262c35e51ae995cdb2cf3c6cc1f2a84294ba"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyNjk0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // Check that the last query was executed using a custom optimizer version and statistics\n          \n          \n            \n                  // package.\n          \n          \n            \n                  // Check that the last query was executed using a custom optimizer version.", "url": "https://github.com/googleapis/java-spanner/pull/90#discussion_r389426947", "createdAt": "2020-03-09T01:06:06Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java", "diffHunk": "@@ -701,4 +707,125 @@ public Long run(TransactionContext transaction) throws Exception {\n     assertThat(client1.pool.getNumberOfSessionsInPool(), is(equalTo(minSessions)));\n     assertThat(client2.pool.getNumberOfSessionsInPool(), is(equalTo(minSessions)));\n   }\n+\n+  @Test\n+  public void testBackendQueryOptions() {\n+    // Use a Spanner instance with MinSession=0 and WriteFraction=0.0 to prevent background requests\n+    // from the session pool interfering with the test case.\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder()\n+            .setProjectId(\"[PROJECT]\")\n+            .setChannelProvider(channelProvider)\n+            .setCredentials(NoCredentials.getInstance())\n+            .setSessionPoolOption(\n+                SessionPoolOptions.newBuilder()\n+                    .setMinSessions(0)\n+                    .setWriteSessionsFraction(0.0f)\n+                    .build())\n+            .build()\n+            .getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(\"[PROJECT]\", \"[INSTANCE]\", \"[DATABASE\"));\n+      try (ResultSet rs =\n+          client\n+              .singleUse()\n+              .executeQuery(\n+                  Statement.newBuilder(SELECT1.getSql())\n+                      .withQueryOptions(QueryOptions.newBuilder().setOptimizerVersion(\"1\").build())\n+                      .build())) {\n+        // Just iterate over the results to execute the query.\n+        while (rs.next()) {}\n+      }\n+      // Check that the last query was executed using a custom optimizer version and statistics\n+      // package.\n+      List<AbstractMessage> requests = mockSpanner.getRequests();\n+      assertThat(requests).isNotEmpty();\n+      assertThat(requests.get(requests.size() - 1)).isInstanceOf(ExecuteSqlRequest.class);\n+      ExecuteSqlRequest request = (ExecuteSqlRequest) requests.get(requests.size() - 1);\n+      assertThat(request.getQueryOptions()).isNotNull();\n+      assertThat(request.getQueryOptions().getOptimizerVersion()).isEqualTo(\"1\");\n+    }\n+  }\n+\n+  @Test\n+  public void testBackendQueryOptionsWithAnalyzeQuery() {\n+    // Use a Spanner instance with MinSession=0 and WriteFraction=0.0 to prevent background requests\n+    // from the session pool interfering with the test case.\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder()\n+            .setProjectId(\"[PROJECT]\")\n+            .setChannelProvider(channelProvider)\n+            .setCredentials(NoCredentials.getInstance())\n+            .setSessionPoolOption(\n+                SessionPoolOptions.newBuilder()\n+                    .setMinSessions(0)\n+                    .setWriteSessionsFraction(0.0f)\n+                    .build())\n+            .build()\n+            .getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(\"[PROJECT]\", \"[INSTANCE]\", \"[DATABASE\"));\n+      try (ReadOnlyTransaction tx = client.readOnlyTransaction()) {\n+        try (ResultSet rs =\n+            tx.analyzeQuery(\n+                Statement.newBuilder(SELECT1.getSql())\n+                    .withQueryOptions(QueryOptions.newBuilder().setOptimizerVersion(\"1\").build())\n+                    .build(),\n+                QueryAnalyzeMode.PROFILE)) {\n+          // Just iterate over the results to execute the query.\n+          while (rs.next()) {}\n+        }\n+      }\n+      // Check that the last query was executed using a custom optimizer version and statistics\n+      // package.\n+      List<AbstractMessage> requests = mockSpanner.getRequests();\n+      assertThat(requests).isNotEmpty();\n+      assertThat(requests.get(requests.size() - 1)).isInstanceOf(ExecuteSqlRequest.class);\n+      ExecuteSqlRequest request = (ExecuteSqlRequest) requests.get(requests.size() - 1);\n+      assertThat(request.getQueryOptions()).isNotNull();\n+      assertThat(request.getQueryOptions().getOptimizerVersion()).isEqualTo(\"1\");\n+      assertThat(request.getQueryMode()).isEqualTo(QueryMode.PROFILE);\n+    }\n+  }\n+\n+  @Test\n+  public void testBackendPartitionQueryOptions() {\n+    // Use a Spanner instance with MinSession=0 and WriteFraction=0.0 to prevent background requests\n+    // from the session pool interfering with the test case.\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder()\n+            .setProjectId(\"[PROJECT]\")\n+            .setChannelProvider(channelProvider)\n+            .setCredentials(NoCredentials.getInstance())\n+            .setSessionPoolOption(\n+                SessionPoolOptions.newBuilder()\n+                    .setMinSessions(0)\n+                    .setWriteSessionsFraction(0.0f)\n+                    .build())\n+            .build()\n+            .getService()) {\n+      BatchClient client =\n+          spanner.getBatchClient(DatabaseId.of(\"[PROJECT]\", \"[INSTANCE]\", \"[DATABASE\"));\n+      BatchReadOnlyTransaction transaction =\n+          client.batchReadOnlyTransaction(TimestampBound.strong());\n+      List<Partition> partitions =\n+          transaction.partitionQuery(\n+              PartitionOptions.newBuilder().setMaxPartitions(10L).build(),\n+              Statement.newBuilder(SELECT1.getSql())\n+                  .withQueryOptions(QueryOptions.newBuilder().setOptimizerVersion(\"1\").build())\n+                  .build());\n+      try (ResultSet rs = transaction.execute(partitions.get(0))) {\n+        // Just iterate over the results to execute the query.\n+        while (rs.next()) {}\n+      }\n+      // Check that the last query was executed using a custom optimizer version and statistics\n+      // package.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831c262c35e51ae995cdb2cf3c6cc1f2a84294ba"}, "originalPosition": 139}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b1a52986283ee2002c4f8b51cb1dc5cfb3bc4e0", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/0b1a52986283ee2002c4f8b51cb1dc5cfb3bc4e0", "committedDate": "2020-03-12T12:39:56Z", "message": "feat: add backend query options\n\nAdds support for setting QueryOptions that will be used by the backend\nto execute queries."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "160970b2e241677e59c9dd8f60fe9b33d8a77dea", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/160970b2e241677e59c9dd8f60fe9b33d8a77dea", "committedDate": "2020-03-12T12:39:56Z", "message": "fix: set QueryOptions on Statement\n\nQueryOptions should be an option on a Statement instead of a parameter\nto the executeQuery method. By setting these options on a Statement, it\nis possible to use it with analyzeQuery as well."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e6b7992fb580e551b6d01298edddc66e477d3fc", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/7e6b7992fb580e551b6d01298edddc66e477d3fc", "committedDate": "2020-03-12T12:39:56Z", "message": "feat: add toBuilder() method to Statement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d27b3a75c2c406f91bd7264c03a846b3941a54cc", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/d27b3a75c2c406f91bd7264c03a846b3941a54cc", "committedDate": "2020-03-12T12:39:56Z", "message": "fix: code review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "624f0e15a060a1c2e856d7214d7f24cd2a55fa64", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/624f0e15a060a1c2e856d7214d7f24cd2a55fa64", "committedDate": "2020-03-10T10:00:12Z", "message": "fix: code review comments"}, "afterCommit": {"oid": "d27b3a75c2c406f91bd7264c03a846b3941a54cc", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/d27b3a75c2c406f91bd7264c03a846b3941a54cc", "committedDate": "2020-03-12T12:39:56Z", "message": "fix: code review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "096e3fb38aeaf98d5225d95fbba6c4f3f544a18b", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/096e3fb38aeaf98d5225d95fbba6c4f3f544a18b", "committedDate": "2020-03-12T13:43:12Z", "message": "fix: remove unused interface and class"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 875, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}