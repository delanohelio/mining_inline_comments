{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNDAxNjY4", "number": 152, "title": "perf: prepare sessions with r/w tx in-process", "bodyText": "Preparing sessions with a read/write transaction using a background executor works well as long as that executor is not being overloaded. When the executor has reached its limit, it is more efficient to allow the read/write transaction to be created in-process, as that scales with the number of user threads available, instead of being limited to the fixed thread pool of the background executor.\nFixes #151\nBenchmarks - Before change\n\n\n\nBenchmark\n(incStep)\nTime (ms)\n\n\n\n\nSessionPoolBenchmark.burstWrite\n1\n4683.78\n\n\nSessionPoolBenchmark.burstWrite\n10\n4800.407\n\n\nSessionPoolBenchmark.burstWrite\n20\n4763.488\n\n\nSessionPoolBenchmark.burstWrite\n25\n4741.395\n\n\nSessionPoolBenchmark.burstWrite\n30\n4687.498\n\n\nSessionPoolBenchmark.burstWrite\n40\n4740.128\n\n\nSessionPoolBenchmark.burstWrite\n50\n4723.155\n\n\nSessionPoolBenchmark.burstWrite\n100\n4779.078\n\n\n\nBenchmarks - After change\n\n\n\nBenchmark\n(incStep)\nTime (ms)\n\n\n\n\nSessionPoolBenchmark.burstWrite\n1\n1191.581\n\n\nSessionPoolBenchmark.burstWrite\n10\n994.402\n\n\nSessionPoolBenchmark.burstWrite\n20\n955.75\n\n\nSessionPoolBenchmark.burstWrite\n25\n916.664\n\n\nSessionPoolBenchmark.burstWrite\n30\n898.538\n\n\nSessionPoolBenchmark.burstWrite\n40\n952.803\n\n\nSessionPoolBenchmark.burstWrite\n50\n906.222\n\n\nSessionPoolBenchmark.burstWrite\n100\n1151.83", "createdAt": "2020-04-14T20:36:55Z", "url": "https://github.com/googleapis/java-spanner/pull/152", "merged": true, "mergeCommit": {"oid": "2db27ce048efafaa3c28b097de33518747011465"}, "closed": true, "closedAt": "2020-04-22T06:11:03Z", "author": {"login": "olavloite"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYLypAAH2gAyNDAzNDAxNjY4OjllMDhlZTNkOGJjOGU1M2E0MGYxMjdjYzk2ODI4NzU5NjI3ZjBjNWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaBo7DgH2gAyNDAzNDAxNjY4OjliYWYxOTdmNDQxYmRlNjllNjc3OGJkNTY5NDk1NzAzY2ZmZDJmZDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9e08ee3d8bc8e53a40f127cc96828759627f0c5a", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/9e08ee3d8bc8e53a40f127cc96828759627f0c5a", "committedDate": "2020-04-16T12:24:32Z", "message": "perf: prepare sessions with r/w tx in-process\n\nPreparing sessions with a read/write transaction using a background\nexecutor works well as long as that executor is not being overloaded.\nWhen the executor has reached its limit, it is more efficient to allow\nthe read/write transaction to be created in-process, as that scales\nwith the number of user threads available, instead of being limited to\nthe fixed thread pool of the background executor.\n\nFixes #151"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8cb79a50fad1981cdd804e41267b689455271ac8", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/8cb79a50fad1981cdd804e41267b689455271ac8", "committedDate": "2020-04-14T20:29:08Z", "message": "perf: prepare sessions with r/w tx in-process\n\nPreparing sessions with a read/write transaction using a background\nexecutor works well as long as that executor is not being overloaded.\nWhen the executor has reached its limit, it is more efficient to allow\nthe read/write transaction to be created in-process, as that scales\nwith the number of user threads available, instead of being limited to\nthe fixed thread pool of the background executor.\n\nFixes #151"}, "afterCommit": {"oid": "9e08ee3d8bc8e53a40f127cc96828759627f0c5a", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/9e08ee3d8bc8e53a40f127cc96828759627f0c5a", "committedDate": "2020-04-16T12:24:32Z", "message": "perf: prepare sessions with r/w tx in-process\n\nPreparing sessions with a read/write transaction using a background\nexecutor works well as long as that executor is not being overloaded.\nWhen the executor has reached its limit, it is more efficient to allow\nthe read/write transaction to be created in-process, as that scales\nwith the number of user threads available, instead of being limited to\nthe fixed thread pool of the background executor.\n\nFixes #151"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3Nzk3NTk0", "url": "https://github.com/googleapis/java-spanner/pull/152#pullrequestreview-397797594", "createdAt": "2020-04-22T02:21:22Z", "commit": {"oid": "9e08ee3d8bc8e53a40f127cc96828759627f0c5a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjoyMToyMlrOGJgWCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjoyMToyMlrOGJgWCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYyMDI5OQ==", "bodyText": "I don't quite understand this. Why is the waiter being added to readWaiters if inProcessPrepare? Aren't we trying to create a read/write session here?\nI suppose I don't understand why it makes a difference if this is done in-process.", "url": "https://github.com/googleapis/java-spanner/pull/152#discussion_r412620299", "createdAt": "2020-04-22T02:21:22Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPool.java", "diffHunk": "@@ -1416,46 +1436,93 @@ PooledSession getReadSession() throws SpannerException {\n   PooledSession getReadWriteSession() {\n     Span span = Tracing.getTracer().getCurrentSpan();\n     span.addAnnotation(\"Acquiring read write session\");\n-    Waiter waiter = null;\n     PooledSession sess = null;\n-    synchronized (lock) {\n-      if (closureFuture != null) {\n-        span.addAnnotation(\"Pool has been closed\");\n-        throw new IllegalStateException(\"Pool has been closed\");\n+    // Loop to retry SessionNotFoundExceptions that might occur during in-process prepare of a\n+    // session.\n+    while (true) {\n+      Waiter waiter = null;\n+      boolean inProcessPrepare = false;\n+      synchronized (lock) {\n+        if (closureFuture != null) {\n+          span.addAnnotation(\"Pool has been closed\");\n+          throw new IllegalStateException(\"Pool has been closed\");\n+        }\n+        if (resourceNotFoundException != null) {\n+          span.addAnnotation(\"Database has been deleted\");\n+          throw SpannerExceptionFactory.newSpannerException(\n+              ErrorCode.NOT_FOUND,\n+              String.format(\n+                  \"The session pool has been invalidated because a previous RPC returned 'Database not found': %s\",\n+                  resourceNotFoundException.getMessage()),\n+              resourceNotFoundException);\n+        }\n+        sess = writePreparedSessions.poll();\n+        if (sess == null) {\n+          if (numSessionsBeingPrepared <= prepareThreadPoolSize) {\n+            if (numSessionsBeingPrepared <= readWriteWaiters.size()) {\n+              PooledSession readSession = readSessions.poll();\n+              if (readSession != null) {\n+                span.addAnnotation(\n+                    \"Acquired read only session. Preparing for read write transaction\");\n+                prepareSession(readSession);\n+              } else {\n+                span.addAnnotation(\"No session available\");\n+                maybeCreateSession();\n+              }\n+            }\n+          } else {\n+            inProcessPrepare = true;\n+            numSessionsInProcessPrepared++;\n+            PooledSession readSession = readSessions.poll();\n+            if (readSession != null) {\n+              // Create a read/write transaction in-process if there is already a queue for prepared\n+              // sessions. This is more efficient than doing it asynchronously, as it scales with\n+              // the number of user threads. The thread pool for asynchronously preparing sessions\n+              // is fixed.\n+              span.addAnnotation(\n+                  \"Acquired read only session. Preparing in-process for read write transaction\");\n+              sess = readSession;\n+            } else {\n+              span.addAnnotation(\"No session available\");\n+              maybeCreateSession();\n+            }\n+          }\n+          if (sess == null) {\n+            waiter = new Waiter();\n+            if (inProcessPrepare) {\n+              readWaiters.add(waiter);\n+            } else {\n+              readWriteWaiters.add(waiter);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e08ee3d8bc8e53a40f127cc96828759627f0c5a"}, "originalPosition": 127}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3Nzk4MjI2", "url": "https://github.com/googleapis/java-spanner/pull/152#pullrequestreview-397798226", "createdAt": "2020-04-22T02:23:21Z", "commit": {"oid": "9e08ee3d8bc8e53a40f127cc96828759627f0c5a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcb403db3e798c4f6d8e6aaa7e1bccda89b5ef3e", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/fcb403db3e798c4f6d8e6aaa7e1bccda89b5ef3e", "committedDate": "2020-04-22T05:40:12Z", "message": "merge: merge latest from master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9baf197f441bde69e6778bd569495703cffd2fd9", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/9baf197f441bde69e6778bd569495703cffd2fd9", "committedDate": "2020-04-22T05:42:43Z", "message": "docs: add comment on why we create a read waiter"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 893, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}