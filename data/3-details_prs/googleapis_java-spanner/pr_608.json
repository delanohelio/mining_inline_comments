{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2OTM4OTAy", "number": 608, "title": "feat!: add CommitStats to Connection API", "bodyText": "Adds support for CommitStats to the Connection API.", "createdAt": "2020-11-06T19:34:07Z", "url": "https://github.com/googleapis/java-spanner/pull/608", "merged": true, "mergeCommit": {"oid": "b2b1191763cd47ca39849bdf93292ed5ef3e0c8a"}, "closed": true, "closedAt": "2021-02-24T22:49:26Z", "author": {"login": "olavloite"}, "timelineItems": {"totalCount": 57, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVpBsQAH2gAyNTE2OTM4OTAyOjM4NzIxOTk0YTBkZDE1ODk3MjNiNGE1NzJkZTljNDkyYTc1MzM3YjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd9VHLqAH2gAyNTE2OTM4OTAyOmY4NjI1NWU2OTBkMjAyMjlmMGIzODI1YjNjMzUzYmQ2ZTllNjFkZGE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "38721994a0dd1589723b4a572de9c492a75337b6", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/38721994a0dd1589723b4a572de9c492a75337b6", "committedDate": "2020-10-24T10:57:36Z", "message": "feat!: add support for CommitStats\n\nAdds support for returning CommitStats from read/write transactions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "def876854f2dad9fe1568cd419f439f2b28fd1e6", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/def876854f2dad9fe1568cd419f439f2b28fd1e6", "committedDate": "2020-10-24T11:47:42Z", "message": "fix: add clirr ignored differences"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5372dae4e6470401cbfcd2db1e071ab9db7ca7c8", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/5372dae4e6470401cbfcd2db1e071ab9db7ca7c8", "committedDate": "2020-10-31T07:26:51Z", "message": "Merge branch 'master' into commit-stats2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34fbda64201c9690b6a5b5619050c86cdb32d897", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/34fbda64201c9690b6a5b5619050c86cdb32d897", "committedDate": "2020-10-31T07:30:04Z", "message": "fix: error message should start with getCommitResponse\n\nCo-authored-by: skuruppu <skuruppu@google.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f61c2ab991eec6c028e31f65e27dcc1295e17e9", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/8f61c2ab991eec6c028e31f65e27dcc1295e17e9", "committedDate": "2020-11-06T12:06:33Z", "message": "Merge branch 'master' into commit-stats2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47b57ea6427a00c5826af6797607b3b06fba58e7", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/47b57ea6427a00c5826af6797607b3b06fba58e7", "committedDate": "2020-11-06T19:32:56Z", "message": "feat: add CommitStats to Connection API"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1NDM3MjAx", "url": "https://github.com/googleapis/java-spanner/pull/608#pullrequestreview-525437201", "createdAt": "2020-11-06T19:34:53Z", "commit": {"oid": "47b57ea6427a00c5826af6797607b3b06fba58e7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTozNDo1M1rOHu67oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTozNDo1M1rOHu67oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2MjA4MA==", "bodyText": "This was a missing piece of configuration that was still in the JDBC repository, but that belongs in the Connection API. It is a Maven profile for automatically generating tests for new client side SQL statements.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r518962080", "createdAt": "2020-11-06T19:34:53Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/pom.xml", "diffHunk": "@@ -377,5 +377,38 @@\n         </plugins>\n       </build>\n     </profile>\n+    <profile>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47b57ea6427a00c5826af6797607b3b06fba58e7"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9014bcb4ed381e3a62c297cdaa429e65236d4a0", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/a9014bcb4ed381e3a62c297cdaa429e65236d4a0", "committedDate": "2020-11-06T19:41:48Z", "message": "fix: combine commit timestamp and response methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1063ced85f2ae88d1e6270eeaf95785f324a79ed", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/1063ced85f2ae88d1e6270eeaf95785f324a79ed", "committedDate": "2020-11-07T07:00:20Z", "message": "fix: clirr-diff and add some tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1ODU0Nzk3", "url": "https://github.com/googleapis/java-spanner/pull/608#pullrequestreview-525854797", "createdAt": "2020-11-08T22:59:42Z", "commit": {"oid": "1063ced85f2ae88d1e6270eeaf95785f324a79ed"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMjo1OTo0MlrOHvbIdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMzowMDo1OVrOHvbJAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4OTY1NQ==", "bodyText": "Is this part of this PR? Maybe we forgot to do something in the query stats (optimizer_version) feature?", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r519489655", "createdAt": "2020-11-08T22:59:42Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/test/resources/com/google/cloud/spanner/connection/ClientSideStatementsTest.sql", "diffHunk": "@@ -1931,9148 +1931,11005 @@ NEW_CONNECTION;\n @EXPECT EXCEPTION INVALID_ARGUMENT\n show variable/-read_only_staleness;\n NEW_CONNECTION;\n-begin;\n+show variable optimizer_version;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1063ced85f2ae88d1e6270eeaf95785f324a79ed"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4OTc5NQ==", "bodyText": "Could we add this as a separate PR? Otherwise we won't have this until the commit stats is merged into master.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r519489795", "createdAt": "2020-11-08T23:00:59Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/pom.xml", "diffHunk": "@@ -377,5 +377,38 @@\n         </plugins>\n       </build>\n     </profile>\n+    <profile>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk2MjA4MA=="}, "originalCommit": {"oid": "47b57ea6427a00c5826af6797607b3b06fba58e7"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f56c29506bb0611c98729ae9916519e358179b4", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/2f56c29506bb0611c98729ae9916519e358179b4", "committedDate": "2020-11-09T07:22:52Z", "message": "fix: remove profile change from this PR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NzE3NDg1", "url": "https://github.com/googleapis/java-spanner/pull/608#pullrequestreview-526717485", "createdAt": "2020-11-09T22:48:44Z", "commit": {"oid": "2f56c29506bb0611c98729ae9916519e358179b4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "041b34de0ba334d01dc70052712fec17fa049b7c", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/041b34de0ba334d01dc70052712fec17fa049b7c", "committedDate": "2020-12-05T09:27:25Z", "message": "Merge branch 'master' into commit-stats2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df7273a59f1766a941dd43ef8afb24f9698f75ec", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/df7273a59f1766a941dd43ef8afb24f9698f75ec", "committedDate": "2020-12-05T09:36:34Z", "message": "Merge branch 'master' into connection-api-commit-stats"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82990542eef1c43d58b50ace3e54c36406ef9d9a", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/82990542eef1c43d58b50ace3e54c36406ef9d9a", "committedDate": "2020-12-10T19:12:11Z", "message": "fix: remove overload delay"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b710a76f3cf947a2df5576f0c1c5eda3b43b9ff", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/9b710a76f3cf947a2df5576f0c1c5eda3b43b9ff", "committedDate": "2020-12-10T19:12:16Z", "message": "Merge branch 'master' into commit-stats2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a2e55557678fd5345bb411282db4d7b8d00512d", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/9a2e55557678fd5345bb411282db4d7b8d00512d", "committedDate": "2020-12-11T17:13:14Z", "message": "Merge branch 'master' into connection-api-commit-stats"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57a10a8c52a50ac749077de6b05f7132cc4027fa", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/57a10a8c52a50ac749077de6b05f7132cc4027fa", "committedDate": "2020-12-11T17:20:23Z", "message": "fix: remove overload delay"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88c2d838f0d789fb4a15f08c897195304bc18114", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/88c2d838f0d789fb4a15f08c897195304bc18114", "committedDate": "2020-12-11T17:21:02Z", "message": "Merge branch 'commit-stats2' into connection-api-commit-stats"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/043555d3a2ea76755c5e8a7725edaa65ed0418cc", "committedDate": "2020-12-11T17:35:19Z", "message": "fix: fix test failure"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczMzQ3ODY5", "url": "https://github.com/googleapis/java-spanner/pull/608#pullrequestreview-573347869", "createdAt": "2021-01-21T13:53:19Z", "commit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c15641f07c55dea211aa714f45d9f7da8201aaa", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/8c15641f07c55dea211aa714f45d9f7da8201aaa", "committedDate": "2021-01-23T13:51:09Z", "message": "Merge branch 'master' into commit-stats2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "919cf028377a3dc224c5c870b8129aae52d1f911", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/919cf028377a3dc224c5c870b8129aae52d1f911", "committedDate": "2021-01-23T13:51:34Z", "message": "chore: cleanup after merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97ec9175bee38ba64aadb960d6efdf57a5ad2b20", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/97ec9175bee38ba64aadb960d6efdf57a5ad2b20", "committedDate": "2021-01-23T14:01:16Z", "message": "fix: update copyright years of new files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afeb0fd86a8248a244a5b52cbf4e2065db65bf30", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/afeb0fd86a8248a244a5b52cbf4e2065db65bf30", "committedDate": "2021-01-23T14:25:16Z", "message": "test: fix flaky test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8524526a0588ae7d942199a2f831473b70d4a0d1", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/8524526a0588ae7d942199a2f831473b70d4a0d1", "committedDate": "2021-01-23T15:20:09Z", "message": "test: skip commit stats tests on emulator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06b3e22760a5d5a968717250f0f260cc2d7ecf11", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/06b3e22760a5d5a968717250f0f260cc2d7ecf11", "committedDate": "2021-01-23T15:32:35Z", "message": "test: missed one commit stats tests against emulator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c17d16efddb1839884376c6066faadce8181684", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/1c17d16efddb1839884376c6066faadce8181684", "committedDate": "2021-01-23T15:47:36Z", "message": "test: skip another emulator test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "664b87daf36668699cbc54dfc544ef64616f6da2", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/664b87daf36668699cbc54dfc544ef64616f6da2", "committedDate": "2021-01-23T19:45:21Z", "message": "test: add missing test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6573a0f7fe07f75ab9ed8e0e1d474540b5cb6b70", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/6573a0f7fe07f75ab9ed8e0e1d474540b5cb6b70", "committedDate": "2021-01-30T16:10:03Z", "message": "fix: address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b448c3824eedc617647aa599be346a3b754b6fe", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/0b448c3824eedc617647aa599be346a3b754b6fe", "committedDate": "2021-02-01T09:34:51Z", "message": "Merge branch 'master' into commit-stats2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgyNDE5NDIy", "url": "https://github.com/googleapis/java-spanner/pull/608#pullrequestreview-582419422", "createdAt": "2021-02-03T14:26:22Z", "commit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDoyNjoyMlrOIfE3Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDo0MzoxN1rOIfFswQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1NjM5NQ==", "bodyText": "worth a test", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569456395", "createdAt": "2021-02-03T14:26:22Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/CommitResponse.java", "diffHunk": "@@ -34,6 +34,11 @@ public Timestamp getCommitTimestamp() {\n     return Timestamp.fromProto(proto.getCommitTimestamp());\n   }\n \n+  /** @return true if the {@link CommitResponse} includes {@link CommitStats}. */\n+  public boolean hasCommitStats() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1Nzk5Nw==", "bodyText": "This is a little too complex to read as a ternary. Consider using if blocks.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569457997", "createdAt": "2021-02-03T14:28:18Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionStatementExecutorImpl.java", "diffHunk": "@@ -170,6 +181,26 @@ public StatementResult statementShowCommitTimestamp() {\n         \"COMMIT_TIMESTAMP\", getConnection().getCommitTimestampOrNull(), SHOW_COMMIT_TIMESTAMP);\n   }\n \n+  @Override\n+  public StatementResult statementShowCommitResponse() {\n+    CommitResponse response = getConnection().getCommitResponseOrNull();\n+    CommitStats stats =\n+        response == null || !response.hasCommitStats() ? null : response.getCommitStats();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1ODIwNA==", "bodyText": "rs --> resultSet per google style", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569458204", "createdAt": "2021-02-03T14:28:33Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionStatementExecutorImpl.java", "diffHunk": "@@ -170,6 +181,26 @@ public StatementResult statementShowCommitTimestamp() {\n         \"COMMIT_TIMESTAMP\", getConnection().getCommitTimestampOrNull(), SHOW_COMMIT_TIMESTAMP);\n   }\n \n+  @Override\n+  public StatementResult statementShowCommitResponse() {\n+    CommitResponse response = getConnection().getCommitResponseOrNull();\n+    CommitStats stats =\n+        response == null || !response.hasCommitStats() ? null : response.getCommitStats();\n+    ResultSet rs =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1ODc5Mg==", "bodyText": "needs a test", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569458792", "createdAt": "2021-02-03T14:29:16Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/DdlBatch.java", "diffHunk": "@@ -168,6 +169,17 @@ public Timestamp getCommitTimestampOrNull() {\n     return null;\n   }\n \n+  @Override\n+  public CommitResponse getCommitResponse() {\n+    throw SpannerExceptionFactory.newSpannerException(\n+        ErrorCode.FAILED_PRECONDITION, \"There is no commit response available for DDL batches.\");\n+  }\n+\n+  @Override\n+  public CommitResponse getCommitResponseOrNull() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1OTk3Nw==", "bodyText": "This is a code smell suggests that perhaps getCommitResponse does not belong in the superclass/interface in the first place since it doesn't apply to all subclasses.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569459977", "createdAt": "2021-02-03T14:30:44Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/DdlBatch.java", "diffHunk": "@@ -168,6 +169,17 @@ public Timestamp getCommitTimestampOrNull() {\n     return null;\n   }\n \n+  @Override\n+  public CommitResponse getCommitResponse() {\n+    throw SpannerExceptionFactory.newSpannerException(\n+        ErrorCode.FAILED_PRECONDITION, \"There is no commit response available for DDL batches.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2MDUyNw==", "bodyText": "Doubles my suspicion that this doesn't belong in the superclass.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569460527", "createdAt": "2021-02-03T14:31:25Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/DmlBatch.java", "diffHunk": "@@ -119,6 +120,17 @@ public Timestamp getCommitTimestampOrNull() {\n     return null;\n   }\n \n+  @Override\n+  public CommitResponse getCommitResponse() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2MDkxNQ==", "bodyText": "Now there are three instances where this method doesn't make sense.\nMaybe you can construct a commit response for these cases where the server doesn't return one, but maybe the API isn't in the right place.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569460915", "createdAt": "2021-02-03T14:31:57Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadOnlyTransaction.java", "diffHunk": "@@ -136,6 +137,18 @@ public Timestamp getCommitTimestampOrNull() {\n     return null;\n   }\n \n+  @Override\n+  public CommitResponse getCommitResponse() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2MzQyMQ==", "bodyText": "I originally thought this meant the response wasn't available yet, but if it means this object doesn't support commit responses, then I'm again suspecting the API needs some further thought.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569463421", "createdAt": "2021-02-03T14:35:06Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadWriteTransaction.java", "diffHunk": "@@ -254,19 +265,30 @@ public Timestamp getReadTimestampOrNull() {\n     return null;\n   }\n \n-  private boolean hasCommitTimestamp() {\n-    return commitTimestampFuture != null;\n+  private boolean hasCommitResponse() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2NDEyMg==", "bodyText": "Will throw --> Throws", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569464122", "createdAt": "2021-02-03T14:35:55Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/UnitOfWork.java", "diffHunk": "@@ -142,6 +143,18 @@ public boolean isActive() {\n   /** @return the commit timestamp of this transaction or null if there is no commit timestamp. */\n   Timestamp getCommitTimestampOrNull();\n \n+  /**\n+   * @return the {@link CommitResponse} of this transaction. Will throw a {@link SpannerException}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2NDI5MQ==", "bodyText": "no period", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569464291", "createdAt": "2021-02-03T14:36:06Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/UnitOfWork.java", "diffHunk": "@@ -142,6 +143,18 @@ public boolean isActive() {\n   /** @return the commit timestamp of this transaction or null if there is no commit timestamp. */\n   Timestamp getCommitTimestampOrNull();\n \n+  /**\n+   * @return the {@link CommitResponse} of this transaction. Will throw a {@link SpannerException}\n+   *     if there is no {@link CommitResponse}.\n+   */\n+  CommitResponse getCommitResponse();\n+\n+  /**\n+   * @return the {@link CommitResponse} of this transaction or null if there is no {@link\n+   *     CommitResponse}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2NTI3Ng==", "bodyText": "You don't need both these methods. Even if these methods are left here, all we need is a single getCommitResponse method that returns a commit response or null.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569465276", "createdAt": "2021-02-03T14:37:20Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/UnitOfWork.java", "diffHunk": "@@ -142,6 +143,18 @@ public boolean isActive() {\n   /** @return the commit timestamp of this transaction or null if there is no commit timestamp. */\n   Timestamp getCommitTimestampOrNull();\n \n+  /**\n+   * @return the {@link CommitResponse} of this transaction. Will throw a {@link SpannerException}\n+   *     if there is no {@link CommitResponse}.\n+   */\n+  CommitResponse getCommitResponse();\n+\n+  /**\n+   * @return the {@link CommitResponse} of this transaction or null if there is no {@link\n+   *     CommitResponse}.\n+   */\n+  CommitResponse getCommitResponseOrNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2NjExOQ==", "bodyText": "if blocks in tests are code smells. Only one path is taken and tested. Does isGetCommitTimestampAllowed() return true or false here?", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569466119", "createdAt": "2021-02-03T14:38:19Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/AbstractConnectionImplTest.java", "diffHunk": "@@ -735,6 +735,22 @@ public void testGetCommitTimestamp() {\n     }\n   }\n \n+  @Test\n+  public void testGetCommitResponse() {\n+    try (Connection connection = getConnection()) {\n+      if (isGetCommitTimestampAllowed()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2Njc1NQ==", "bodyText": "assertTrue is simpler", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569466755", "createdAt": "2021-02-03T14:39:03Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +630,68 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(true)));\n+\n+      res = subject.execute(Statement.of(\"set return_commit_stats=false\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteSetReturnCommitStatsInvalidValue() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      try {\n+        subject.execute(Statement.of(\"set return_commit_stats=yes\"));\n+        fail(\"Missing expected exception\");\n+      } catch (SpannerException e) {\n+        assertThat(e.getErrorCode(), is(equalTo(ErrorCode.INVALID_ARGUMENT)));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteGetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"show variable return_commit_stats\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.RESULT_SET)));\n+      assertThat(res.getResultSet().next(), is(true));\n+      assertThat(res.getResultSet().getBoolean(\"RETURN_COMMIT_STATS\"), is(equalTo(false)));\n+\n+      subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      res = subject.execute(Statement.of(\"show variable return_commit_stats\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.RESULT_SET)));\n+      assertThat(res.getResultSet().next(), is(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2NjkyNQ==", "bodyText": "assertFalse", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569466925", "createdAt": "2021-02-03T14:39:16Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +630,68 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(true)));\n+\n+      res = subject.execute(Statement.of(\"set return_commit_stats=false\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteSetReturnCommitStatsInvalidValue() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      try {\n+        subject.execute(Statement.of(\"set return_commit_stats=yes\"));\n+        fail(\"Missing expected exception\");\n+      } catch (SpannerException e) {\n+        assertThat(e.getErrorCode(), is(equalTo(ErrorCode.INVALID_ARGUMENT)));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteGetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2NzEwNQ==", "bodyText": "res --> result", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569467105", "createdAt": "2021-02-03T14:39:29Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +630,68 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(true)));\n+\n+      res = subject.execute(Statement.of(\"set return_commit_stats=false\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteSetReturnCommitStatsInvalidValue() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      try {\n+        subject.execute(Statement.of(\"set return_commit_stats=yes\"));\n+        fail(\"Missing expected exception\");\n+      } catch (SpannerException e) {\n+        assertThat(e.getErrorCode(), is(equalTo(ErrorCode.INVALID_ARGUMENT)));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteGetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"show variable return_commit_stats\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2NzQyOA==", "bodyText": "avoid reassigning local variables", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569467428", "createdAt": "2021-02-03T14:39:54Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +630,68 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(true)));\n+\n+      res = subject.execute(Statement.of(\"set return_commit_stats=false\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteSetReturnCommitStatsInvalidValue() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      try {\n+        subject.execute(Statement.of(\"set return_commit_stats=yes\"));\n+        fail(\"Missing expected exception\");\n+      } catch (SpannerException e) {\n+        assertThat(e.getErrorCode(), is(equalTo(ErrorCode.INVALID_ARGUMENT)));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteGetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"show variable return_commit_stats\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.RESULT_SET)));\n+      assertThat(res.getResultSet().next(), is(true));\n+      assertThat(res.getResultSet().getBoolean(\"RETURN_COMMIT_STATS\"), is(equalTo(false)));\n+\n+      subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      res = subject.execute(Statement.of(\"show variable return_commit_stats\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2NzkyNQ==", "bodyText": "assertNotNull", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569467925", "createdAt": "2021-02-03T14:40:30Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -749,6 +821,43 @@ public void testExecuteGetCommitTimestamp() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteGetCommitResponse() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      subject.beginTransaction();\n+      subject.executeQuery(Statement.of(AbstractConnectionImplTest.SELECT)).next();\n+      subject.commit();\n+      StatementResult res = subject.execute(Statement.of(\"show variable commit_response\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.RESULT_SET)));\n+      assertThat(res.getResultSet().next(), is(true));\n+      assertThat(res.getResultSet().getTimestamp(\"COMMIT_TIMESTAMP\"), is(notNullValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2ODA4Mg==", "bodyText": "result", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569468082", "createdAt": "2021-02-03T14:40:41Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -749,6 +821,43 @@ public void testExecuteGetCommitTimestamp() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteGetCommitResponse() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      subject.beginTransaction();\n+      subject.executeQuery(Statement.of(AbstractConnectionImplTest.SELECT)).next();\n+      subject.commit();\n+      StatementResult res = subject.execute(Statement.of(\"show variable commit_response\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.RESULT_SET)));\n+      assertThat(res.getResultSet().next(), is(true));\n+      assertThat(res.getResultSet().getTimestamp(\"COMMIT_TIMESTAMP\"), is(notNullValue()));\n+      assertThat(res.getResultSet().isNull(\"MUTATION_COUNT\"), is(true));\n+      assertThat(res.getResultSet().next(), is(false));\n+    }\n+\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI + \";returnCommitStats=true\")\n+                .build())) {\n+      subject.beginTransaction();\n+      subject.executeQuery(Statement.of(AbstractConnectionImplTest.SELECT)).next();\n+      subject.commit();\n+      StatementResult res = subject.execute(Statement.of(\"show variable commit_response\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2ODIyNQ==", "bodyText": "assertNull", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569468225", "createdAt": "2021-02-03T14:40:51Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -749,6 +821,43 @@ public void testExecuteGetCommitTimestamp() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteGetCommitResponse() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      subject.beginTransaction();\n+      subject.executeQuery(Statement.of(AbstractConnectionImplTest.SELECT)).next();\n+      subject.commit();\n+      StatementResult res = subject.execute(Statement.of(\"show variable commit_response\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.RESULT_SET)));\n+      assertThat(res.getResultSet().next(), is(true));\n+      assertThat(res.getResultSet().getTimestamp(\"COMMIT_TIMESTAMP\"), is(notNullValue()));\n+      assertThat(res.getResultSet().isNull(\"MUTATION_COUNT\"), is(true));\n+      assertThat(res.getResultSet().next(), is(false));\n+    }\n+\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI + \";returnCommitStats=true\")\n+                .build())) {\n+      subject.beginTransaction();\n+      subject.executeQuery(Statement.of(AbstractConnectionImplTest.SELECT)).next();\n+      subject.commit();\n+      StatementResult res = subject.execute(Statement.of(\"show variable commit_response\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.RESULT_SET)));\n+      assertThat(res.getResultSet().next(), is(true));\n+      assertThat(res.getResultSet().getTimestamp(\"COMMIT_TIMESTAMP\"), is(notNullValue()));\n+      assertThat(res.getResultSet().isNull(\"MUTATION_COUNT\"), is(false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2ODM0OA==", "bodyText": "2021", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569468348", "createdAt": "2021-02-03T14:41:00Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/it/ITCommitResponseTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2020 Google LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2ODYwMg==", "bodyText": "assertNotNull", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569468602", "createdAt": "2021-02-03T14:41:20Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/it/ITCommitResponseTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.connection.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.spanner.KeySet;\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.Statement;\n+import com.google.cloud.spanner.connection.ITAbstractSpannerTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCommitResponseTest extends ITAbstractSpannerTest {\n+  @Override\n+  public void appendConnectionUri(StringBuilder uri) {\n+    uri.append(\";autocommit=false\");\n+  }\n+\n+  @Override\n+  public boolean doCreateDefaultTestTable() {\n+    return true;\n+  }\n+\n+  @Before\n+  public void clearTestData() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.bufferedWrite(Mutation.delete(\"TEST\", KeySet.all()));\n+      connection.commit();\n+    }\n+  }\n+\n+  @Test\n+  public void testDefaultNoCommitStats() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.bufferedWrite(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      connection.commit();\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2ODg3MQ==", "bodyText": "rs --> resultSet", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569468871", "createdAt": "2021-02-03T14:41:43Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/it/ITCommitResponseTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.connection.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.spanner.KeySet;\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.Statement;\n+import com.google.cloud.spanner.connection.ITAbstractSpannerTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCommitResponseTest extends ITAbstractSpannerTest {\n+  @Override\n+  public void appendConnectionUri(StringBuilder uri) {\n+    uri.append(\";autocommit=false\");\n+  }\n+\n+  @Override\n+  public boolean doCreateDefaultTestTable() {\n+    return true;\n+  }\n+\n+  @Before\n+  public void clearTestData() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.bufferedWrite(Mutation.delete(\"TEST\", KeySet.all()));\n+      connection.commit();\n+    }\n+  }\n+\n+  @Test\n+  public void testDefaultNoCommitStats() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.bufferedWrite(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      connection.commit();\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isFalse();\n+    }\n+  }\n+\n+  @Test\n+  public void testReturnCommitStats() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.setReturnCommitStats(true);\n+      connection.bufferedWrite(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      connection.commit();\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isTrue();\n+      assertThat(connection.getCommitResponse().getCommitStats().getMutationCount()).isEqualTo(2L);\n+    }\n+  }\n+\n+  @Test\n+  public void testReturnCommitStatsUsingSql() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.execute(Statement.of(\"SET RETURN_COMMIT_STATS=TRUE\"));\n+      connection.bufferedWrite(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      connection.commit();\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isTrue();\n+      assertThat(connection.getCommitResponse().getCommitStats().getMutationCount()).isEqualTo(2L);\n+      try (ResultSet rs =\n+          connection.execute(Statement.of(\"SHOW VARIABLE COMMIT_RESPONSE\")).getResultSet()) {\n+        assertThat(rs.next()).isTrue();\n+        assertThat(rs.getTimestamp(\"COMMIT_TIMESTAMP\")).isNotNull();\n+        assertThat(rs.getLong(\"MUTATION_COUNT\")).isEqualTo(2L);\n+        assertThat(rs.getString(\"OVERLOAD_DELAY\")).isNotNull();\n+        assertThat(rs.next()).isFalse();\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testAutocommitDefaultNoCommitStats() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.setAutocommit(true);\n+      connection.write(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isFalse();\n+    }\n+  }\n+\n+  @Test\n+  public void testAutocommitReturnCommitStats() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.setAutocommit(true);\n+      connection.setReturnCommitStats(true);\n+      connection.write(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isTrue();\n+      assertThat(connection.getCommitResponse().getCommitStats().getMutationCount()).isEqualTo(2L);\n+    }\n+  }\n+\n+  @Test\n+  public void testAutocommitReturnCommitStatsUsingSql() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.execute(Statement.of(\"SET AUTOCOMMIT=TRUE\"));\n+      connection.execute(Statement.of(\"SET RETURN_COMMIT_STATS=TRUE\"));\n+      connection.write(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isTrue();\n+      assertThat(connection.getCommitResponse().getCommitStats().getMutationCount()).isEqualTo(2L);\n+      try (ResultSet rs =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2OTI0MA==", "bodyText": "in general, avoid Truth for assertions that are simpler in JUnit", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569469240", "createdAt": "2021-02-03T14:42:11Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/it/ITCommitResponseTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.connection.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.spanner.KeySet;\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.Statement;\n+import com.google.cloud.spanner.connection.ITAbstractSpannerTest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCommitResponseTest extends ITAbstractSpannerTest {\n+  @Override\n+  public void appendConnectionUri(StringBuilder uri) {\n+    uri.append(\";autocommit=false\");\n+  }\n+\n+  @Override\n+  public boolean doCreateDefaultTestTable() {\n+    return true;\n+  }\n+\n+  @Before\n+  public void clearTestData() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.bufferedWrite(Mutation.delete(\"TEST\", KeySet.all()));\n+      connection.commit();\n+    }\n+  }\n+\n+  @Test\n+  public void testDefaultNoCommitStats() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.bufferedWrite(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      connection.commit();\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isFalse();\n+    }\n+  }\n+\n+  @Test\n+  public void testReturnCommitStats() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.setReturnCommitStats(true);\n+      connection.bufferedWrite(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      connection.commit();\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isTrue();\n+      assertThat(connection.getCommitResponse().getCommitStats().getMutationCount()).isEqualTo(2L);\n+    }\n+  }\n+\n+  @Test\n+  public void testReturnCommitStatsUsingSql() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.execute(Statement.of(\"SET RETURN_COMMIT_STATS=TRUE\"));\n+      connection.bufferedWrite(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      connection.commit();\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isTrue();\n+      assertThat(connection.getCommitResponse().getCommitStats().getMutationCount()).isEqualTo(2L);\n+      try (ResultSet rs =\n+          connection.execute(Statement.of(\"SHOW VARIABLE COMMIT_RESPONSE\")).getResultSet()) {\n+        assertThat(rs.next()).isTrue();\n+        assertThat(rs.getTimestamp(\"COMMIT_TIMESTAMP\")).isNotNull();\n+        assertThat(rs.getLong(\"MUTATION_COUNT\")).isEqualTo(2L);\n+        assertThat(rs.getString(\"OVERLOAD_DELAY\")).isNotNull();\n+        assertThat(rs.next()).isFalse();\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testAutocommitDefaultNoCommitStats() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.setAutocommit(true);\n+      connection.write(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isFalse();\n+    }\n+  }\n+\n+  @Test\n+  public void testAutocommitReturnCommitStats() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.setAutocommit(true);\n+      connection.setReturnCommitStats(true);\n+      connection.write(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isTrue();\n+      assertThat(connection.getCommitResponse().getCommitStats().getMutationCount()).isEqualTo(2L);\n+    }\n+  }\n+\n+  @Test\n+  public void testAutocommitReturnCommitStatsUsingSql() {\n+    try (ITConnection connection = createConnection()) {\n+      connection.execute(Statement.of(\"SET AUTOCOMMIT=TRUE\"));\n+      connection.execute(Statement.of(\"SET RETURN_COMMIT_STATS=TRUE\"));\n+      connection.write(\n+          Mutation.newInsertBuilder(\"TEST\").set(\"ID\").to(1L).set(\"NAME\").to(\"TEST\").build());\n+      assertThat(connection.getCommitResponse()).isNotNull();\n+      assertThat(connection.getCommitResponse().getCommitTimestamp()).isNotNull();\n+      assertThat(connection.getCommitResponse().hasCommitStats()).isTrue();\n+      assertThat(connection.getCommitResponse().getCommitStats().getMutationCount()).isEqualTo(2L);\n+      try (ResultSet rs =\n+          connection.execute(Statement.of(\"SHOW VARIABLE COMMIT_RESPONSE\")).getResultSet()) {\n+        assertThat(rs.next()).isTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ3MDE0NQ==", "bodyText": "Changes in this class don't immediately appear specific to this PR. Can you break this into a separate PR?", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r569470145", "createdAt": "2021-02-03T14:43:17Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionManagerAsyncTest.java", "diffHunk": "@@ -224,6 +222,8 @@ public void testRollback() throws InterruptedException {\n     }\n   }\n \n+  @Ignore(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83039fbbc31d93d35ba0343c651bee3a872d6fd0", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/83039fbbc31d93d35ba0343c651bee3a872d6fd0", "committedDate": "2021-02-03T17:07:45Z", "message": "Merge branch 'master' into commit-stats2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57ea714b5d5bae5a91178351efd98c8c6272037a", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/57ea714b5d5bae5a91178351efd98c8c6272037a", "committedDate": "2021-02-03T17:20:16Z", "message": "chore: use junit assertion instead of truth"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74f595192dea3e2462a176e3ddd17a9ad08d197d", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/74f595192dea3e2462a176e3ddd17a9ad08d197d", "committedDate": "2021-02-03T17:38:58Z", "message": "Merge branch 'master' into connection-api-commit-stats"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b077e457d40dd1f64c20a9f7d897313f78ea4e9", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/1b077e457d40dd1f64c20a9f7d897313f78ea4e9", "committedDate": "2021-02-03T17:47:23Z", "message": "chore: cleanup after merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea061f8750e4e7f4058b885cd72f3ca25576b0c6", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/ea061f8750e4e7f4058b885cd72f3ca25576b0c6", "committedDate": "2021-02-03T17:52:55Z", "message": "Merge branch 'commit-stats2' into connection-api-commit-stats"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51fb048de3aa12c5a1775eb339a1c3a6304d3864", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/51fb048de3aa12c5a1775eb339a1c3a6304d3864", "committedDate": "2021-02-03T20:21:48Z", "message": "fix: address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66c5f88b55836abf4912e1031e504ef5d2abe9c3", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/66c5f88b55836abf4912e1031e504ef5d2abe9c3", "committedDate": "2021-02-04T07:41:12Z", "message": "chore: replace truth asserts with junit asserts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd9bf114a284b0ece16f3275c6777218aaa8ab11", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/bd9bf114a284b0ece16f3275c6777218aaa8ab11", "committedDate": "2021-02-04T07:46:43Z", "message": "Merge branch 'commit-stats2' into connection-api-commit-stats"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/b351d08d7567bc2a84213f1106b7e7f7fa56886e", "committedDate": "2021-02-04T08:00:52Z", "message": "test: skip CommitStats integration tests on emulator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgzMzMzNzc1", "url": "https://github.com/googleapis/java-spanner/pull/608#pullrequestreview-583333775", "createdAt": "2021-02-04T12:19:18Z", "commit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "state": "DISMISSED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxMjoxOToxOFrOIfw-rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxMjo1MDo1OVrOIfyHyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE3OTI0NQ==", "bodyText": "nit: no period", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570179245", "createdAt": "2021-02-04T12:19:18Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/CommitResponse.java", "diffHunk": "@@ -41,6 +41,11 @@ public Timestamp getCommitTimestamp() {\n     return Timestamp.fromProto(proto.getCommitTimestamp());\n   }\n \n+  /** @return true if the {@link CommitResponse} includes {@link CommitStats}. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE3OTQ4NQ==", "bodyText": "nit: no period", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570179485", "createdAt": "2021-02-04T12:19:46Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/Connection.java", "diffHunk": "@@ -438,6 +439,15 @@\n    */\n   String getOptimizerVersion();\n \n+  /**\n+   * Sets whether this connection should request commit statistics from Cloud Spanner for read/write\n+   * transactions and DML statements in autocommit mode.\n+   */\n+  void setReturnCommitStats(boolean returnCommitStats);\n+\n+  /** @return true if this connection requests commit statistics from Cloud Spanner. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE3OTY3Ng==", "bodyText": "will throw --> throws", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570179676", "createdAt": "2021-02-04T12:20:04Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/Connection.java", "diffHunk": "@@ -632,6 +642,17 @@\n    */\n   Timestamp getCommitTimestamp();\n \n+  /**\n+   * @return the {@link CommitResponse} of the last {@link TransactionMode#READ_WRITE_TRANSACTION}\n+   *     transaction. This method will throw a {@link SpannerException} if there is no last {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE4MDMwMQ==", "bodyText": "per google style avoid Latin i.e. Perhaps rewrite as\nTransactionMode#READ_WRITE_TRANSACTION} transaction. That is, if the last transaction was a {@link", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570180301", "createdAt": "2021-02-04T12:21:11Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/Connection.java", "diffHunk": "@@ -632,6 +642,17 @@\n    */\n   Timestamp getCommitTimestamp();\n \n+  /**\n+   * @return the {@link CommitResponse} of the last {@link TransactionMode#READ_WRITE_TRANSACTION}\n+   *     transaction. This method will throw a {@link SpannerException} if there is no last {@link\n+   *     TransactionMode#READ_WRITE_TRANSACTION} transaction (i.e. the last transaction was a {@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE4NDE0Nw==", "bodyText": "I still don't see why both getCommitResponseOrNull and getCommitResponse exist. Why not just getCommitResponse that returns null if there's no unit of work?", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570184147", "createdAt": "2021-02-04T12:27:40Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionImpl.java", "diffHunk": "@@ -574,6 +578,31 @@ Timestamp getCommitTimestampOrNull() {\n         : this.currentUnitOfWork.getCommitTimestampOrNull();\n   }\n \n+  @Override\n+  public CommitResponse getCommitResponse() {\n+    ConnectionPreconditions.checkState(!isClosed(), CLOSED_ERROR_MSG);\n+    ConnectionPreconditions.checkState(\n+        this.currentUnitOfWork != null, \"There is no transaction on this connection\");\n+    return this.currentUnitOfWork.getCommitResponse();\n+  }\n+\n+  CommitResponse getCommitResponseOrNull() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE4NDYwNw==", "bodyText": "Is it useful to check the connection state here? What breaks if this field is set or read on a closed connection?", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570184607", "createdAt": "2021-02-04T12:28:24Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionImpl.java", "diffHunk": "@@ -574,6 +578,31 @@ Timestamp getCommitTimestampOrNull() {\n         : this.currentUnitOfWork.getCommitTimestampOrNull();\n   }\n \n+  @Override\n+  public CommitResponse getCommitResponse() {\n+    ConnectionPreconditions.checkState(!isClosed(), CLOSED_ERROR_MSG);\n+    ConnectionPreconditions.checkState(\n+        this.currentUnitOfWork != null, \"There is no transaction on this connection\");\n+    return this.currentUnitOfWork.getCommitResponse();\n+  }\n+\n+  CommitResponse getCommitResponseOrNull() {\n+    ConnectionPreconditions.checkState(!isClosed(), CLOSED_ERROR_MSG);\n+    return this.currentUnitOfWork == null ? null : this.currentUnitOfWork.getCommitResponseOrNull();\n+  }\n+\n+  @Override\n+  public void setReturnCommitStats(boolean returnCommitStats) {\n+    ConnectionPreconditions.checkState(!isClosed(), CLOSED_ERROR_MSG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE4NTU1OQ==", "bodyText": "The constant is less clear than the string itself and doesn't help. It's only used in one obvious place.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570185559", "createdAt": "2021-02-04T12:29:56Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionOptions.java", "diffHunk": "@@ -184,6 +185,8 @@ public String getDefaultValue() {\n   private static final String USER_AGENT_PROPERTY_NAME = \"userAgent\";\n   /** Query optimizer version to use for a connection. */\n   private static final String OPTIMIZER_VERSION_PROPERTY_NAME = \"optimizerVersion\";\n+  /** Query optimizer version to use for a connection. */\n+  private static final String RETURN_COMMIT_STATS_PROPERTY_NAME = \"returnCommitStats\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE4NTYxMA==", "bodyText": "copy pasta", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570185610", "createdAt": "2021-02-04T12:30:02Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionOptions.java", "diffHunk": "@@ -184,6 +185,8 @@ public String getDefaultValue() {\n   private static final String USER_AGENT_PROPERTY_NAME = \"userAgent\";\n   /** Query optimizer version to use for a connection. */\n   private static final String OPTIMIZER_VERSION_PROPERTY_NAME = \"optimizerVersion\";\n+  /** Query optimizer version to use for a connection. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE4NjUzNg==", "bodyText": "false is clearer than a constant whose value is 600 lines up.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570186536", "createdAt": "2021-02-04T12:31:37Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionOptions.java", "diffHunk": "@@ -634,6 +641,12 @@ static String parseOptimizerVersion(String uri) {\n     return value != null ? value : DEFAULT_OPTIMIZER_VERSION;\n   }\n \n+  @VisibleForTesting\n+  static boolean parseReturnCommitStats(String uri) {\n+    String value = parseUriProperty(uri, RETURN_COMMIT_STATS_PROPERTY_NAME);\n+    return value != null ? Boolean.valueOf(value) : DEFAULT_RETURN_COMMIT_STATS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE5MDg5Nw==", "bodyText": "Which APIs? It sounds like the responsibility for interpreting and handling a null return or an exception belongs in those methods.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570190897", "createdAt": "2021-02-04T12:39:18Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/UnitOfWork.java", "diffHunk": "@@ -142,6 +143,18 @@ public boolean isActive() {\n   /** @return the commit timestamp of this transaction or null if there is no commit timestamp. */\n   Timestamp getCommitTimestampOrNull();\n \n+  /**\n+   * @return the {@link CommitResponse} of this transaction. Will throw a {@link SpannerException}\n+   *     if there is no {@link CommitResponse}.\n+   */\n+  CommitResponse getCommitResponse();\n+\n+  /**\n+   * @return the {@link CommitResponse} of this transaction or null if there is no {@link\n+   *     CommitResponse}.\n+   */\n+  CommitResponse getCommitResponseOrNull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ2NTI3Ng=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE5MzkwMg==", "bodyText": "Isn't this just a value class? You don't need to mock it.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570193902", "createdAt": "2021-02-04T12:44:32Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -103,6 +110,12 @@ public void commit() {\n       Timestamp commitTimestamp = Timestamp.now();\n       commitResponse = mock(CommitResponse.class);\n       when(commitResponse.getCommitTimestamp()).thenReturn(commitTimestamp);\n+      if (returnCommitStats) {\n+        CommitStats stats = mock(CommitStats.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE5NDI3Ng==", "bodyText": "assertFalse is simpler and easier to read", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570194276", "createdAt": "2021-02-04T12:45:10Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +633,70 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE5NDQ0Ng==", "bodyText": "assertTrue", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570194446", "createdAt": "2021-02-04T12:45:26Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +633,70 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(true)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE5NDU0NA==", "bodyText": "assertFalse is simpler and easier to read", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570194544", "createdAt": "2021-02-04T12:45:33Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +633,70 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(true)));\n+\n+      res = subject.execute(Statement.of(\"set return_commit_stats=false\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE5NDY4OQ==", "bodyText": "res --> result", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570194689", "createdAt": "2021-02-04T12:45:47Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +633,70 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"set return_commit_stats=true\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE5NDc3OA==", "bodyText": "assertFalse is simpler and easier to read", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570194778", "createdAt": "2021-02-04T12:45:56Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +633,70 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(true)));\n+\n+      res = subject.execute(Statement.of(\"set return_commit_stats=false\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteSetReturnCommitStatsInvalidValue() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE5Nzk2MQ==", "bodyText": "If you muse use Truth, then the way to write this is\nassertThat(e.getErrorCode()).isEqualTo(ErrorCode.INVALID_ARGUMENT)\n\nbut frankly you're better off not even using truth for basic equality, same as, null, non-null, and true and false comparisons. Truth is better reserved for more complex comparisons that JUnit doesn't natively support.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r570197961", "createdAt": "2021-02-04T12:50:59Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/ConnectionImplTest.java", "diffHunk": "@@ -620,6 +633,70 @@ public void testExecuteGetOptimizerVersion() {\n     }\n   }\n \n+  @Test\n+  public void testExecuteSetReturnCommitStats() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      StatementResult res = subject.execute(Statement.of(\"set return_commit_stats=true\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(true)));\n+\n+      res = subject.execute(Statement.of(\"set return_commit_stats=false\"));\n+      assertThat(res.getResultType(), is(equalTo(ResultType.NO_RESULT)));\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+    }\n+  }\n+\n+  @Test\n+  public void testExecuteSetReturnCommitStatsInvalidValue() {\n+    try (ConnectionImpl subject =\n+        createConnection(\n+            ConnectionOptions.newBuilder()\n+                .setCredentials(NoCredentials.getInstance())\n+                .setUri(URI)\n+                .build())) {\n+      assertThat(subject.isReturnCommitStats(), is(equalTo(false)));\n+\n+      try {\n+        subject.execute(Statement.of(\"set return_commit_stats=yes\"));\n+        fail(\"Missing expected exception\");\n+      } catch (SpannerException e) {\n+        assertThat(e.getErrorCode(), is(equalTo(ErrorCode.INVALID_ARGUMENT)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 115}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da0e434392ce03abb9f5a9317f544c59f11cbe8d", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/da0e434392ce03abb9f5a9317f544c59f11cbe8d", "committedDate": "2021-02-04T17:38:43Z", "message": "fix: address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d17973b81e2903cbab466b7a3bb6e577f707c8b", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/1d17973b81e2903cbab466b7a3bb6e577f707c8b", "committedDate": "2021-02-05T14:49:22Z", "message": "chore: replace truth assertions with junit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2531cbcd0c243f27b7d750982bc3ab6e6e9ec6a", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/a2531cbcd0c243f27b7d750982bc3ab6e6e9ec6a", "committedDate": "2021-02-05T14:53:33Z", "message": "Merge branch 'commit-stats2' into connection-api-commit-stats"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c01152d9a25c590a13928bb60495ce245c437921", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/c01152d9a25c590a13928bb60495ce245c437921", "committedDate": "2021-02-05T15:10:07Z", "message": "test: add additional tests + replace truth with junit assertions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf0a7bddeb0f7cfadb6139570192a35ecd1570c9", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/bf0a7bddeb0f7cfadb6139570192a35ecd1570c9", "committedDate": "2021-02-05T15:55:45Z", "message": "fix: fix wrong error code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48ef21be5bcf41f8cacfa1eaceaab5726624240c", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/48ef21be5bcf41f8cacfa1eaceaab5726624240c", "committedDate": "2021-02-08T17:51:11Z", "message": "chore: cleanup test and variable names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f33c42743920b21a8b70cf008f55f8983d49620", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/1f33c42743920b21a8b70cf008f55f8983d49620", "committedDate": "2021-02-09T10:45:43Z", "message": "fix: rename test method and variables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d45ace4c1af0c4691b1fdfc2a1a74b88e4f53f8", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/7d45ace4c1af0c4691b1fdfc2a1a74b88e4f53f8", "committedDate": "2021-02-16T14:14:24Z", "message": "fix: address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkxMzA2NzE4", "url": "https://github.com/googleapis/java-spanner/pull/608#pullrequestreview-591306718", "createdAt": "2021-02-16T14:57:17Z", "commit": {"oid": "bf0a7bddeb0f7cfadb6139570192a35ecd1570c9"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcb9eda98da9027a0afeb4df948b4533140a216f", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/fcb9eda98da9027a0afeb4df948b4533140a216f", "committedDate": "2021-02-16T15:13:45Z", "message": "Merge branch 'commit-stats2' into connection-api-commit-stats"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "682b84984490b4b252e7cf69a0f7eebfab9a6ff6", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/682b84984490b4b252e7cf69a0f7eebfab9a6ff6", "committedDate": "2021-02-23T08:54:38Z", "message": "Merge branch 'master' into connection-api-commit-stats"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e341a9148742279ac68a2b49e70fad9e1d196e8", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/0e341a9148742279ac68a2b49e70fad9e1d196e8", "committedDate": "2021-02-23T09:37:47Z", "message": "chore: remove unnecessary changes + JUnit assertions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7540c3194bb412710bbbe4d2cc677c1d2c6f41fb", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/7540c3194bb412710bbbe4d2cc677c1d2c6f41fb", "committedDate": "2021-02-23T13:34:04Z", "message": "fix: remove reference to overload_delay"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk3NTA1MDQx", "url": "https://github.com/googleapis/java-spanner/pull/608#pullrequestreview-597505041", "createdAt": "2021-02-24T13:58:41Z", "commit": {"oid": "7540c3194bb412710bbbe4d2cc677c1d2c6f41fb"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNFQxMzo1ODo0MlrOIrBPcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNFQxNDowODozM1rOIrBt1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTk4MDAxOA==", "bodyText": "Generally, this is not how Google handles this situation. You don't have to, and probably shouldn't, change the existing code in this PR. However all new code should be as clean as possible, even when that introduces inconsistencies with existing code. If that means one parameter is handled differently than the rest, so be it. Otherwise initial problems simply replicate across the code base over time.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r581980018", "createdAt": "2021-02-24T13:58:42Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionOptions.java", "diffHunk": "@@ -184,6 +185,8 @@ public String getDefaultValue() {\n   private static final String USER_AGENT_PROPERTY_NAME = \"userAgent\";\n   /** Query optimizer version to use for a connection. */\n   private static final String OPTIMIZER_VERSION_PROPERTY_NAME = \"optimizerVersion\";\n+  /** Query optimizer version to use for a connection. */\n+  private static final String RETURN_COMMIT_STATS_PROPERTY_NAME = \"returnCommitStats\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE4NTU1OQ=="}, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTk4MTQzOA==", "bodyText": "That sounds like a good case for docs or comments.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r581981438", "createdAt": "2021-02-24T14:00:23Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionOptions.java", "diffHunk": "@@ -634,6 +641,12 @@ static String parseOptimizerVersion(String uri) {\n     return value != null ? value : DEFAULT_OPTIMIZER_VERSION;\n   }\n \n+  @VisibleForTesting\n+  static boolean parseReturnCommitStats(String uri) {\n+    String value = parseUriProperty(uri, RETURN_COMMIT_STATS_PROPERTY_NAME);\n+    return value != null ? Boolean.valueOf(value) : DEFAULT_RETURN_COMMIT_STATS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDE4NjUzNg=="}, "originalCommit": {"oid": "b351d08d7567bc2a84213f1106b7e7f7fa56886e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTk4MjIzOA==", "bodyText": "Only the initial value? If it changes, this still returns the initial value? That's surprising. Hmm, looks like it's final so no need to say initial. probably rewrite as, \"whether connections created by this {@link ConnectionOptions} return commit stats\"", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r581982238", "createdAt": "2021-02-24T14:01:25Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ConnectionOptions.java", "diffHunk": "@@ -823,6 +836,13 @@ QueryOptions getQueryOptions() {\n     return queryOptions;\n   }\n \n+  /**\n+   * The initial returnCommitStats value for connections created by this {@link ConnectionOptions}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7540c3194bb412710bbbe4d2cc677c1d2c6f41fb"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTk4Njg0OQ==", "bodyText": "Have you considered returning an empty object or null instead?\nIf clients really won't see this, fine. However it's not enough that this class is non-public. They could still invoke this method if they get an instance of it, even while only knowing its supertype.", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r581986849", "createdAt": "2021-02-24T14:07:26Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/DdlBatch.java", "diffHunk": "@@ -168,6 +169,17 @@ public Timestamp getCommitTimestampOrNull() {\n     return null;\n   }\n \n+  @Override\n+  public CommitResponse getCommitResponse() {\n+    throw SpannerExceptionFactory.newSpannerException(\n+        ErrorCode.FAILED_PRECONDITION, \"There is no commit response available for DDL batches.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ1OTk3Nw=="}, "originalCommit": {"oid": "043555d3a2ea76755c5e8a7725edaa65ed0418cc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTk4NzcwOA==", "bodyText": "not been committed", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r581987708", "createdAt": "2021-02-24T14:08:25Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadWriteTransaction.java", "diffHunk": "@@ -254,19 +265,30 @@ public Timestamp getReadTimestampOrNull() {\n     return null;\n   }\n \n-  private boolean hasCommitTimestamp() {\n-    return commitTimestampFuture != null;\n+  private boolean hasCommitResponse() {\n+    return commitResponseFuture != null;\n   }\n \n   @Override\n   public Timestamp getCommitTimestamp() {\n-    ConnectionPreconditions.checkState(hasCommitTimestamp(), \"This transaction has not committed.\");\n-    return get(commitTimestampFuture);\n+    ConnectionPreconditions.checkState(hasCommitResponse(), \"This transaction has not committed.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7540c3194bb412710bbbe4d2cc677c1d2c6f41fb"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTk4Nzc5Ng==", "bodyText": "not been committed", "url": "https://github.com/googleapis/java-spanner/pull/608#discussion_r581987796", "createdAt": "2021-02-24T14:08:33Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/ReadWriteTransaction.java", "diffHunk": "@@ -254,19 +265,30 @@ public Timestamp getReadTimestampOrNull() {\n     return null;\n   }\n \n-  private boolean hasCommitTimestamp() {\n-    return commitTimestampFuture != null;\n+  private boolean hasCommitResponse() {\n+    return commitResponseFuture != null;\n   }\n \n   @Override\n   public Timestamp getCommitTimestamp() {\n-    ConnectionPreconditions.checkState(hasCommitTimestamp(), \"This transaction has not committed.\");\n-    return get(commitTimestampFuture);\n+    ConnectionPreconditions.checkState(hasCommitResponse(), \"This transaction has not committed.\");\n+    return get(commitResponseFuture).getCommitTimestamp();\n   }\n \n   @Override\n   public Timestamp getCommitTimestampOrNull() {\n-    return hasCommitTimestamp() ? get(commitTimestampFuture) : null;\n+    return hasCommitResponse() ? get(commitResponseFuture).getCommitTimestamp() : null;\n+  }\n+\n+  @Override\n+  public CommitResponse getCommitResponse() {\n+    ConnectionPreconditions.checkState(hasCommitResponse(), \"This transaction has not committed.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7540c3194bb412710bbbe4d2cc677c1d2c6f41fb"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f86255e690d20229f0b3825b3c353bd6e9e61dda", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/f86255e690d20229f0b3825b3c353bd6e9e61dda", "committedDate": "2021-02-24T18:22:28Z", "message": "chore: address review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 991, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}