{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5MDAzMTQx", "number": 734, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxOTowODo1MlrOFEtCgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxOToyMjozM1rOFEtK6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNDc2NTQ2OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxOTowODo1MlrOIE4Jdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxOTowODo1MlrOIE4Jdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk4NTE0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            callSettings =\n          \n          \n            \n                                callSettings\n          \n          \n            \n                                    .toBuilder()\n          \n          \n            \n                                    .setRetryableCodes(codes)\n          \n          \n            \n                                    .build();\n          \n          \n            \n                            callSettings = callSettings.toBuilder().setRetryableCodes(codes).build();", "url": "https://github.com/googleapis/java-spanner/pull/734#discussion_r541985143", "createdAt": "2020-12-13T19:08:52Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java", "diffHunk": "@@ -428,7 +435,37 @@ public GapicSpannerRpc(final SpannerOptions options) {\n               .setCredentialsProvider(credentialsProvider)\n               .setStreamWatchdogProvider(watchdogProvider)\n               .build();\n-      this.databaseAdminStub = GrpcDatabaseAdminStub.create(this.databaseAdminStubSettings);\n+      GrpcStubCallableFactory factory =\n+          new GrpcDatabaseAdminCallableFactory() {\n+            @Override\n+            public <RequestT, ResponseT> UnaryCallable<RequestT, ResponseT> createUnaryCallable(\n+                GrpcCallSettings<RequestT, ResponseT> grpcCallSettings,\n+                UnaryCallSettings<RequestT, ResponseT> callSettings,\n+                ClientContext clientContext) {\n+              // Make GetOperation retry on RESOURCE_EXHAUSTED to prevent polling operations from\n+              // failing with an Administrative requests limit exceeded error.\n+              if (grpcCallSettings\n+                  .getMethodDescriptor()\n+                  .getFullMethodName()\n+                  .equals(\"google.longrunning.Operations/GetOperation\")) {\n+                Set<StatusCode.Code> codes =\n+                    ImmutableSet.<StatusCode.Code>builderWithExpectedSize(\n+                            callSettings.getRetryableCodes().size() + 1)\n+                        .addAll(callSettings.getRetryableCodes())\n+                        .add(StatusCode.Code.RESOURCE_EXHAUSTED)\n+                        .build();\n+                callSettings =\n+                    callSettings\n+                        .toBuilder()\n+                        .setRetryableCodes(codes)\n+                        .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85ca6794d1223983744369b0419507a69ce31ff3"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNDc4Njk5OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxOToyMjozM1rOIE4TCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToxMjoxMFrOIHKLIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk4NzU5Mw==", "bodyText": "It would be preferable if this could be changed in the generated code, but I don't know whether that is possible considering this comes from the generic com.google.longrunning.stub.OperationsStub.", "url": "https://github.com/googleapis/java-spanner/pull/734#discussion_r541987593", "createdAt": "2020-12-13T19:22:33Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java", "diffHunk": "@@ -428,7 +435,33 @@ public GapicSpannerRpc(final SpannerOptions options) {\n               .setCredentialsProvider(credentialsProvider)\n               .setStreamWatchdogProvider(watchdogProvider)\n               .build();\n-      this.databaseAdminStub = GrpcDatabaseAdminStub.create(this.databaseAdminStubSettings);\n+      GrpcStubCallableFactory factory =\n+          new GrpcDatabaseAdminCallableFactory() {\n+            @Override\n+            public <RequestT, ResponseT> UnaryCallable<RequestT, ResponseT> createUnaryCallable(\n+                GrpcCallSettings<RequestT, ResponseT> grpcCallSettings,\n+                UnaryCallSettings<RequestT, ResponseT> callSettings,\n+                ClientContext clientContext) {\n+              // Make GetOperation retry on RESOURCE_EXHAUSTED to prevent polling operations from\n+              // failing with an Administrative requests limit exceeded error.\n+              if (grpcCallSettings\n+                  .getMethodDescriptor()\n+                  .getFullMethodName()\n+                  .equals(\"google.longrunning.Operations/GetOperation\")) {\n+                Set<StatusCode.Code> codes =\n+                    ImmutableSet.<StatusCode.Code>builderWithExpectedSize(\n+                            callSettings.getRetryableCodes().size() + 1)\n+                        .addAll(callSettings.getRetryableCodes())\n+                        .add(StatusCode.Code.RESOURCE_EXHAUSTED)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "167ae14cc0e0e60f48e87b69236acf75017d56d4"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk1MzA5OQ==", "bodyText": "It seems we would need this only for fixing the tests (correct me if I am wrong). If that is the case, changing production behaviour to fix those might not be the best path forward. Could we inject different behaviour in test only.\nOn another note, do we still need this change now that the tests seem to be working as expected?", "url": "https://github.com/googleapis/java-spanner/pull/734#discussion_r542953099", "createdAt": "2020-12-15T00:30:40Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java", "diffHunk": "@@ -428,7 +435,33 @@ public GapicSpannerRpc(final SpannerOptions options) {\n               .setCredentialsProvider(credentialsProvider)\n               .setStreamWatchdogProvider(watchdogProvider)\n               .build();\n-      this.databaseAdminStub = GrpcDatabaseAdminStub.create(this.databaseAdminStubSettings);\n+      GrpcStubCallableFactory factory =\n+          new GrpcDatabaseAdminCallableFactory() {\n+            @Override\n+            public <RequestT, ResponseT> UnaryCallable<RequestT, ResponseT> createUnaryCallable(\n+                GrpcCallSettings<RequestT, ResponseT> grpcCallSettings,\n+                UnaryCallSettings<RequestT, ResponseT> callSettings,\n+                ClientContext clientContext) {\n+              // Make GetOperation retry on RESOURCE_EXHAUSTED to prevent polling operations from\n+              // failing with an Administrative requests limit exceeded error.\n+              if (grpcCallSettings\n+                  .getMethodDescriptor()\n+                  .getFullMethodName()\n+                  .equals(\"google.longrunning.Operations/GetOperation\")) {\n+                Set<StatusCode.Code> codes =\n+                    ImmutableSet.<StatusCode.Code>builderWithExpectedSize(\n+                            callSettings.getRetryableCodes().size() + 1)\n+                        .addAll(callSettings.getRetryableCodes())\n+                        .add(StatusCode.Code.RESOURCE_EXHAUSTED)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk4NzU5Mw=="}, "originalCommit": {"oid": "167ae14cc0e0e60f48e87b69236acf75017d56d4"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM3NzYzNQ==", "bodyText": "I've updated the PR to only change this behavior if SpannerOptions#setAutoThrottleAdministrativeRequests has been set. This means that it will only be enabled for (integration) tests.", "url": "https://github.com/googleapis/java-spanner/pull/734#discussion_r544377635", "createdAt": "2020-12-16T15:12:10Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java", "diffHunk": "@@ -428,7 +435,33 @@ public GapicSpannerRpc(final SpannerOptions options) {\n               .setCredentialsProvider(credentialsProvider)\n               .setStreamWatchdogProvider(watchdogProvider)\n               .build();\n-      this.databaseAdminStub = GrpcDatabaseAdminStub.create(this.databaseAdminStubSettings);\n+      GrpcStubCallableFactory factory =\n+          new GrpcDatabaseAdminCallableFactory() {\n+            @Override\n+            public <RequestT, ResponseT> UnaryCallable<RequestT, ResponseT> createUnaryCallable(\n+                GrpcCallSettings<RequestT, ResponseT> grpcCallSettings,\n+                UnaryCallSettings<RequestT, ResponseT> callSettings,\n+                ClientContext clientContext) {\n+              // Make GetOperation retry on RESOURCE_EXHAUSTED to prevent polling operations from\n+              // failing with an Administrative requests limit exceeded error.\n+              if (grpcCallSettings\n+                  .getMethodDescriptor()\n+                  .getFullMethodName()\n+                  .equals(\"google.longrunning.Operations/GetOperation\")) {\n+                Set<StatusCode.Code> codes =\n+                    ImmutableSet.<StatusCode.Code>builderWithExpectedSize(\n+                            callSettings.getRetryableCodes().size() + 1)\n+                        .addAll(callSettings.getRetryableCodes())\n+                        .add(StatusCode.Code.RESOURCE_EXHAUSTED)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk4NzU5Mw=="}, "originalCommit": {"oid": "167ae14cc0e0e60f48e87b69236acf75017d56d4"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3278, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}