{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NDE0Mzg2", "number": 379, "title": "feat: support setting timeout per RPC", "bodyText": "The Spanner client allows a user to set custom timeouts while creating a SpannerOptions instance, but these timeouts are static and are applied to all invocations of the RPCs. This change introduces the possibility to set custom timeouts and other call options on a per-RPC basis.\nThis feature will also be very useful for the Async Connection API, as it will allow applying the statement timeouts for async calls on a per RPC-invocation basis.\nFixes #378", "createdAt": "2020-08-10T10:28:05Z", "url": "https://github.com/googleapis/java-spanner/pull/379", "merged": true, "mergeCommit": {"oid": "5d115d49b988b3fc1c59ae41ee53d7c5a83b4d11"}, "closed": true, "closedAt": "2020-08-25T12:25:40Z", "author": {"login": "olavloite"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9foAYgH2gAyNDY1NDE0Mzg2OmVjNGNjMzAzYTRlNzFkZDlhZTUwNzEyNDEzMWE4MTcyMjUyYTE2NDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdB8UNKAFqTQ3MzEwNDg1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ec4cc303a4e71dd9ae507124131a8172252a1648", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/ec4cc303a4e71dd9ae507124131a8172252a1648", "committedDate": "2020-08-10T10:26:13Z", "message": "feat: support setting timeout per RPC\n\nThe Spanner client allows a user to set custom timeouts while creating a\nSpannerOptions instance, but these timeouts are static and are applied to\nall invocations of the RPCs. This change introduces the possibility to set\ncustom timeouts and other call options on a per-RPC basis.\n\nFixes #378"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd2715702423eedc8c9e907e6ccf1e33876f6074", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/dd2715702423eedc8c9e907e6ccf1e33876f6074", "committedDate": "2020-08-10T13:14:39Z", "message": "fix: change grpc deps from test to compile scope"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MTYyOTE5", "url": "https://github.com/googleapis/java-spanner/pull/379#pullrequestreview-468162919", "createdAt": "2020-08-17T04:52:48Z", "commit": {"oid": "dd2715702423eedc8c9e907e6ccf1e33876f6074"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNDo1Mjo0OFrOHBZpCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNDo1Mjo0OFrOHBZpCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIzMDczMQ==", "bodyText": "Why do we remove this? This seems to be related to the failed test:\n[ERROR] 7002: com.google.cloud.spanner.spi.v1.GapicSpannerRpc: Method 'public com.google.spanner.v1.ResultSet executePartitionedDml(com.google.spanner.v1.ExecuteSqlRequest, java.util.Map)' has been removed\n[ERROR] 7002: com.google.cloud.spanner.spi.v1.SpannerRpc: Method 'public com.google.spanner.v1.ResultSet executePartitionedDml(com.google.spanner.v1.ExecuteSqlRequest, java.util.Map)' has been removed", "url": "https://github.com/googleapis/java-spanner/pull/379#discussion_r471230731", "createdAt": "2020-08-17T04:52:48Z", "author": {"login": "hengfengli"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/SpannerRpc.java", "diffHunk": "@@ -287,8 +287,6 @@ StreamingCall read(\n   ApiFuture<ResultSet> executeQueryAsync(\n       ExecuteSqlRequest request, @Nullable Map<Option, ?> options);\n \n-  ResultSet executePartitionedDml(ExecuteSqlRequest request, @Nullable Map<Option, ?> options);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2715702423eedc8c9e907e6ccf1e33876f6074"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MTY3MjYy", "url": "https://github.com/googleapis/java-spanner/pull/379#pullrequestreview-468167262", "createdAt": "2020-08-17T05:11:13Z", "commit": {"oid": "dd2715702423eedc8c9e907e6ccf1e33876f6074"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNToxMToxM1rOHBZ4PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNToxMToxM1rOHBZ4PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIzNDYyMA==", "bodyText": "udate to update", "url": "https://github.com/googleapis/java-spanner/pull/379#discussion_r471234620", "createdAt": "2020-08-17T05:11:13Z", "author": {"login": "hengfengli"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpcTest.java", "diffHunk": "@@ -336,11 +367,93 @@ public void testNoCallCredentials() {\n             .setCredentials(STATIC_CREDENTIALS)\n             .build();\n     GapicSpannerRpc rpc = new GapicSpannerRpc(options);\n-    assertThat(rpc.newCallContext(optionsMap, \"/some/resource\").getCallOptions().getCredentials())\n+    assertThat(\n+            rpc.newCallContext(\n+                    optionsMap,\n+                    \"/some/resource\",\n+                    GetSessionRequest.getDefaultInstance(),\n+                    SpannerGrpc.getGetSessionMethod())\n+                .getCallOptions()\n+                .getCredentials())\n         .isNull();\n     rpc.shutdown();\n   }\n \n+  private static final class TimeoutHolder {\n+    private Duration timeout;\n+  }\n+\n+  @Test\n+  public void testCallContextTimeout() {\n+    // Create a CallContextConfigurator that uses a variable timeout value.\n+    final TimeoutHolder timeoutHolder = new TimeoutHolder();\n+    CallContextConfigurator configurator =\n+        new CallContextConfigurator() {\n+          @Override\n+          public <ReqT, RespT> ApiCallContext configure(\n+              ApiCallContext context, ReqT request, MethodDescriptor<ReqT, RespT> method) {\n+            // Only configure a timeout for the ExecuteSql method when the request has a ,\n+            // as this method is used for executing DML statements.\n+            if (request instanceof ExecuteSqlRequest\n+                && method.equals(SpannerGrpc.getExecuteSqlMethod())) {\n+              ExecuteSqlRequest sqlRequest = (ExecuteSqlRequest) request;\n+              // Sequence numbers are only assigned for DML statements, which means that\n+              // this is an udate statement.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2715702423eedc8c9e907e6ccf1e33876f6074"}, "originalPosition": 144}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MTY3NDU1", "url": "https://github.com/googleapis/java-spanner/pull/379#pullrequestreview-468167455", "createdAt": "2020-08-17T05:11:58Z", "commit": {"oid": "dd2715702423eedc8c9e907e6ccf1e33876f6074"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNToxMTo1OVrOHBZ47A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNToxMTo1OVrOHBZ47A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIzNDc5Ng==", "bodyText": "This sentence is not finished yet.", "url": "https://github.com/googleapis/java-spanner/pull/379#discussion_r471234796", "createdAt": "2020-08-17T05:11:59Z", "author": {"login": "hengfengli"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpcTest.java", "diffHunk": "@@ -336,11 +367,93 @@ public void testNoCallCredentials() {\n             .setCredentials(STATIC_CREDENTIALS)\n             .build();\n     GapicSpannerRpc rpc = new GapicSpannerRpc(options);\n-    assertThat(rpc.newCallContext(optionsMap, \"/some/resource\").getCallOptions().getCredentials())\n+    assertThat(\n+            rpc.newCallContext(\n+                    optionsMap,\n+                    \"/some/resource\",\n+                    GetSessionRequest.getDefaultInstance(),\n+                    SpannerGrpc.getGetSessionMethod())\n+                .getCallOptions()\n+                .getCredentials())\n         .isNull();\n     rpc.shutdown();\n   }\n \n+  private static final class TimeoutHolder {\n+    private Duration timeout;\n+  }\n+\n+  @Test\n+  public void testCallContextTimeout() {\n+    // Create a CallContextConfigurator that uses a variable timeout value.\n+    final TimeoutHolder timeoutHolder = new TimeoutHolder();\n+    CallContextConfigurator configurator =\n+        new CallContextConfigurator() {\n+          @Override\n+          public <ReqT, RespT> ApiCallContext configure(\n+              ApiCallContext context, ReqT request, MethodDescriptor<ReqT, RespT> method) {\n+            // Only configure a timeout for the ExecuteSql method when the request has a ,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2715702423eedc8c9e907e6ccf1e33876f6074"}, "originalPosition": 138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MTc1NTQ4", "url": "https://github.com/googleapis/java-spanner/pull/379#pullrequestreview-468175548", "createdAt": "2020-08-17T05:40:26Z", "commit": {"oid": "dd2715702423eedc8c9e907e6ccf1e33876f6074"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNTo0MDoyNlrOHBaU-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNTo0MDoyNlrOHBaU-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI0MTk3Nw==", "bodyText": "So this given timeout is for every ExecuteQuery inside this context? If two ExecuteQuery calls are inside this context, each of them will be limited by the 1ns timeout, right?", "url": "https://github.com/googleapis/java-spanner/pull/379#discussion_r471241977", "createdAt": "2020-08-17T05:40:26Z", "author": {"login": "hengfengli"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java", "diffHunk": "@@ -1548,4 +1550,40 @@ public void testReadDoesNotIncludeStatement() {\n       assertThat(e.getMessage()).doesNotContain(\"Statement:\");\n     }\n   }\n+\n+  @Test\n+  public void testSpecificTimeout() {\n+    mockSpanner.setExecuteStreamingSqlExecutionTime(\n+        SimulatedExecutionTime.ofMinimumAndRandomTime(10000, 0));\n+    final DatabaseClient client =\n+        spanner.getDatabaseClient(DatabaseId.of(TEST_PROJECT, TEST_INSTANCE, TEST_DATABASE));\n+    Context.current()\n+        .withValue(\n+            SpannerOptions.CALL_CONTEXT_CONFIGURATOR_KEY,\n+            SpannerCallContextTimeoutConfigurator.create()\n+                .withExecuteQueryTimeout(Duration.ofNanos(1L)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2715702423eedc8c9e907e6ccf1e33876f6074"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MTgzODQ2", "url": "https://github.com/googleapis/java-spanner/pull/379#pullrequestreview-468183846", "createdAt": "2020-08-17T06:05:02Z", "commit": {"oid": "dd2715702423eedc8c9e907e6ccf1e33876f6074"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "547a3c3136eeb7ba72942fe1031d622a29e0d61b", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/547a3c3136eeb7ba72942fe1031d622a29e0d61b", "committedDate": "2020-08-17T09:01:11Z", "message": "fix: address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4Mzc4MDM5", "url": "https://github.com/googleapis/java-spanner/pull/379#pullrequestreview-468378039", "createdAt": "2020-08-17T11:21:53Z", "commit": {"oid": "547a3c3136eeb7ba72942fe1031d622a29e0d61b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4571e58a8a6b44fba75e86cb0e77ecf6e3fd2086", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/4571e58a8a6b44fba75e86cb0e77ecf6e3fd2086", "committedDate": "2020-08-17T13:23:23Z", "message": "fix: resolve review comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMTA0ODUx", "url": "https://github.com/googleapis/java-spanner/pull/379#pullrequestreview-473104851", "createdAt": "2020-08-24T03:58:04Z", "commit": {"oid": "4571e58a8a6b44fba75e86cb0e77ecf6e3fd2086"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMzo1ODowNFrOHFTy2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMzo1ODowNFrOHFTy2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMyOTI0MQ==", "bodyText": "nit (don't have to change this, just a suggestion): it might be easier to test this / encapsulate the logic if we use a visitor pattern.", "url": "https://github.com/googleapis/java-spanner/pull/379#discussion_r475329241", "createdAt": "2020-08-24T03:58:04Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerOptions.java", "diffHunk": "@@ -121,6 +129,324 @@\n     CallCredentials getCallCredentials();\n   }\n \n+  /** Context key for the {@link CallContextConfigurator} to use. */\n+  public static final Context.Key<CallContextConfigurator> CALL_CONTEXT_CONFIGURATOR_KEY =\n+      Context.key(\"call-context-configurator\");\n+\n+  /**\n+   * {@link CallContextConfigurator} can be used to modify the {@link ApiCallContext} for one or\n+   * more specific RPCs. This can be used to set specific timeout value for RPCs or use specific\n+   * {@link CallCredentials} for an RPC. The {@link CallContextConfigurator} must be set as a value\n+   * on the {@link Context} using the {@link SpannerOptions#CALL_CONTEXT_CONFIGURATOR_KEY} key.\n+   *\n+   * <p>This API is meant for advanced users. Most users should instead use the {@link\n+   * SpannerCallContextTimeoutConfigurator} for setting timeouts per RPC.\n+   *\n+   * <p>Example usage:\n+   *\n+   * <pre>{@code\n+   * CallContextConfigurator configurator =\n+   *     new CallContextConfigurator() {\n+   *       public <ReqT, RespT> ApiCallContext configure(\n+   *           ApiCallContext context, ReqT request, MethodDescriptor<ReqT, RespT> method) {\n+   *         if (method == SpannerGrpc.getExecuteBatchDmlMethod()) {\n+   *           return GrpcCallContext.createDefault()\n+   *               .withCallOptions(CallOptions.DEFAULT.withDeadlineAfter(60L, TimeUnit.SECONDS));\n+   *         }\n+   *         return null;\n+   *       }\n+   *     };\n+   * Context context =\n+   *     Context.current().withValue(SpannerOptions.CALL_CONTEXT_CONFIGURATOR_KEY, configurator);\n+   * context.run(\n+   *     new Runnable() {\n+   *       public void run() {\n+   *         try {\n+   *           client\n+   *               .readWriteTransaction()\n+   *               .run(\n+   *                   new TransactionCallable<long[]>() {\n+   *                     public long[] run(TransactionContext transaction) throws Exception {\n+   *                       return transaction.batchUpdate(\n+   *                           ImmutableList.of(statement1, statement2));\n+   *                     }\n+   *                   });\n+   *         } catch (SpannerException e) {\n+   *           if (e.getErrorCode() == ErrorCode.DEADLINE_EXCEEDED) {\n+   *             // handle timeout exception.\n+   *           }\n+   *         }\n+   *       }\n+   *     });\n+   * }</pre>\n+   */\n+  public static interface CallContextConfigurator {\n+    /**\n+     * Configure a {@link ApiCallContext} for a specific RPC call.\n+     *\n+     * @param context The default context. This can be used to inspect the current values.\n+     * @param request The request that will be sent.\n+     * @param method The method that is being called.\n+     * @return An {@link ApiCallContext} that will be merged with the default {@link\n+     *     ApiCallContext}. If <code>null</code> is returned, no changes to the default {@link\n+     *     ApiCallContext} will be made.\n+     */\n+    @Nullable\n+    <ReqT, RespT> ApiCallContext configure(\n+        ApiCallContext context, ReqT request, MethodDescriptor<ReqT, RespT> method);\n+  }\n+\n+  private enum SpannerMethod {\n+    COMMIT {\n+      @Override\n+      <ReqT, RespT> boolean isMethod(ReqT request, MethodDescriptor<ReqT, RespT> method) {\n+        return method == SpannerGrpc.getCommitMethod();\n+      }\n+    },\n+    ROLLBACK {\n+      @Override\n+      <ReqT, RespT> boolean isMethod(ReqT request, MethodDescriptor<ReqT, RespT> method) {\n+        return method == SpannerGrpc.getRollbackMethod();\n+      }\n+    },\n+\n+    EXECUTE_QUERY {\n+      @Override\n+      <ReqT, RespT> boolean isMethod(ReqT request, MethodDescriptor<ReqT, RespT> method) {\n+        // This also matches with Partitioned DML calls, but that call will override any timeout\n+        // settings anyway.\n+        return method == SpannerGrpc.getExecuteStreamingSqlMethod();\n+      }\n+    },\n+    READ {\n+      @Override\n+      <ReqT, RespT> boolean isMethod(ReqT request, MethodDescriptor<ReqT, RespT> method) {\n+        return method == SpannerGrpc.getStreamingReadMethod();\n+      }\n+    },\n+    EXECUTE_UPDATE {\n+      @Override\n+      <ReqT, RespT> boolean isMethod(ReqT request, MethodDescriptor<ReqT, RespT> method) {\n+        if (method == SpannerGrpc.getExecuteSqlMethod()) {\n+          ExecuteSqlRequest sqlRequest = (ExecuteSqlRequest) request;\n+          return sqlRequest.getSeqno() != 0L;\n+        }\n+        return false;\n+      }\n+    },\n+    BATCH_UPDATE {\n+      @Override\n+      <ReqT, RespT> boolean isMethod(ReqT request, MethodDescriptor<ReqT, RespT> method) {\n+        return method == SpannerGrpc.getExecuteBatchDmlMethod();\n+      }\n+    },\n+\n+    PARTITION_QUERY {\n+      @Override\n+      <ReqT, RespT> boolean isMethod(ReqT request, MethodDescriptor<ReqT, RespT> method) {\n+        return method == SpannerGrpc.getPartitionQueryMethod();\n+      }\n+    },\n+    PARTITION_READ {\n+      @Override\n+      <ReqT, RespT> boolean isMethod(ReqT request, MethodDescriptor<ReqT, RespT> method) {\n+        return method == SpannerGrpc.getPartitionReadMethod();\n+      }\n+    };\n+\n+    abstract <ReqT, RespT> boolean isMethod(ReqT request, MethodDescriptor<ReqT, RespT> method);\n+\n+    static <ReqT, RespT> SpannerMethod valueOf(ReqT request, MethodDescriptor<ReqT, RespT> method) {\n+      for (SpannerMethod m : SpannerMethod.values()) {\n+        if (m.isMethod(request, method)) {\n+          return m;\n+        }\n+      }\n+      return null;\n+    }\n+  }\n+\n+  /**\n+   * Helper class to configure timeouts for specific Spanner RPCs. The {@link\n+   * SpannerCallContextTimeoutConfigurator} must be set as a value on the {@link Context} using the\n+   * {@link SpannerOptions#CALL_CONTEXT_CONFIGURATOR_KEY} key.\n+   *\n+   * <p>Example usage:\n+   *\n+   * <pre>{@code\n+   * // Create a context with a ExecuteQuery timeout of 10 seconds.\n+   * Context context =\n+   *     Context.current()\n+   *         .withValue(\n+   *             SpannerOptions.CALL_CONTEXT_CONFIGURATOR_KEY,\n+   *             SpannerCallContextTimeoutConfigurator.create()\n+   *                 .withExecuteQueryTimeout(Duration.ofSeconds(10L)));\n+   * context.run(\n+   *     new Runnable() {\n+   *       public void run() {\n+   *         try (ResultSet rs =\n+   *             client\n+   *                 .singleUse()\n+   *                 .executeQuery(\n+   *                     Statement.of(\n+   *                         \"SELECT SingerId, FirstName, LastName FROM Singers ORDER BY LastName\"))) {\n+   *           while (rs.next()) {\n+   *             System.out.printf(\"%d %s %s%n\", rs.getLong(0), rs.getString(1), rs.getString(2));\n+   *           }\n+   *         } catch (SpannerException e) {\n+   *           if (e.getErrorCode() == ErrorCode.DEADLINE_EXCEEDED) {\n+   *             // Handle timeout.\n+   *           }\n+   *         }\n+   *       }\n+   *     });\n+   * }</pre>\n+   */\n+  public static class SpannerCallContextTimeoutConfigurator implements CallContextConfigurator {\n+    private Duration commitTimeout;\n+    private Duration rollbackTimeout;\n+\n+    private Duration executeQueryTimeout;\n+    private Duration executeUpdateTimeout;\n+    private Duration batchUpdateTimeout;\n+    private Duration readTimeout;\n+\n+    private Duration partitionQueryTimeout;\n+    private Duration partitionReadTimeout;\n+\n+    public static SpannerCallContextTimeoutConfigurator create() {\n+      return new SpannerCallContextTimeoutConfigurator();\n+    }\n+\n+    private SpannerCallContextTimeoutConfigurator() {}\n+\n+    @Override\n+    public <ReqT, RespT> ApiCallContext configure(\n+        ApiCallContext context, ReqT request, MethodDescriptor<ReqT, RespT> method) {\n+      SpannerMethod spannerMethod = SpannerMethod.valueOf(request, method);\n+      if (spannerMethod == null) {\n+        return null;\n+      }\n+      switch (SpannerMethod.valueOf(request, method)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4571e58a8a6b44fba75e86cb0e77ecf6e3fd2086"}, "originalPosition": 239}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 811, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}