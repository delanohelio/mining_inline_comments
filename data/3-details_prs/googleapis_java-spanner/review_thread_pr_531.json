{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3MTcxMTE3", "number": 531, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzo0ODo0MFrOEwHeTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzo0ODo0MFrOEwHeTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODg5NTUwOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzo0ODo0MFrOHleo4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjozMzo1M1rOHl1XLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA2MTM0Nw==", "bodyText": "What do you think about WriteOption in place of TransactionOption?", "url": "https://github.com/googleapis/java-spanner/pull/531#discussion_r509061347", "createdAt": "2020-10-21T07:48:40Z", "author": {"login": "mayurkale22"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseClient.java", "diffHunk": "@@ -52,6 +53,35 @@\n    */\n   Timestamp write(Iterable<Mutation> mutations) throws SpannerException;\n \n+  /**\n+   * Writes the given mutations atomically to the database with the given options.\n+   *\n+   * <p>This method uses retries and replay protection internally, which means that the mutations\n+   * are applied exactly once on success, or not at all if an error is returned, regardless of any\n+   * failures in the underlying network. Note that if the call is cancelled or reaches deadline, it\n+   * is not possible to know whether the mutations were applied without performing a subsequent\n+   * database operation, but the mutations will have been applied at most once.\n+   *\n+   * <p>Example of blind write.\n+   *\n+   * <pre>{@code\n+   * long singerId = my_singer_id;\n+   * Mutation mutation = Mutation.newInsertBuilder(\"Singer\")\n+   *         .set(\"SingerId\")\n+   *         .to(singerId)\n+   *         .set(\"FirstName\")\n+   *         .to(\"Billy\")\n+   *         .set(\"LastName\")\n+   *         .to(\"Joel\")\n+   *         .build();\n+   * dbClient.writeWithOptions(Collections.singletonList(mutation));\n+   * }</pre>\n+   *\n+   * @return a response with the timestamp at which the write was committed\n+   */\n+  CommitResponse writeWithOptions(Iterable<Mutation> mutations, TransactionOption... options)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dd32d1096da8ae47af4b03aaf0a9c706ebddfea"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA2OTIwMw==", "bodyText": "Thiago and I had a short discussion about this, and we think TransactionOption is better in this case, as we intend to also use this for options that we will need for normal read/write transactions.", "url": "https://github.com/googleapis/java-spanner/pull/531#discussion_r509069203", "createdAt": "2020-10-21T08:01:09Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseClient.java", "diffHunk": "@@ -52,6 +53,35 @@\n    */\n   Timestamp write(Iterable<Mutation> mutations) throws SpannerException;\n \n+  /**\n+   * Writes the given mutations atomically to the database with the given options.\n+   *\n+   * <p>This method uses retries and replay protection internally, which means that the mutations\n+   * are applied exactly once on success, or not at all if an error is returned, regardless of any\n+   * failures in the underlying network. Note that if the call is cancelled or reaches deadline, it\n+   * is not possible to know whether the mutations were applied without performing a subsequent\n+   * database operation, but the mutations will have been applied at most once.\n+   *\n+   * <p>Example of blind write.\n+   *\n+   * <pre>{@code\n+   * long singerId = my_singer_id;\n+   * Mutation mutation = Mutation.newInsertBuilder(\"Singer\")\n+   *         .set(\"SingerId\")\n+   *         .to(singerId)\n+   *         .set(\"FirstName\")\n+   *         .to(\"Billy\")\n+   *         .set(\"LastName\")\n+   *         .to(\"Joel\")\n+   *         .build();\n+   * dbClient.writeWithOptions(Collections.singletonList(mutation));\n+   * }</pre>\n+   *\n+   * @return a response with the timestamp at which the write was committed\n+   */\n+  CommitResponse writeWithOptions(Iterable<Mutation> mutations, TransactionOption... options)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA2MTM0Nw=="}, "originalCommit": {"oid": "5dd32d1096da8ae47af4b03aaf0a9c706ebddfea"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzMzY0NQ==", "bodyText": "Ok sgtm", "url": "https://github.com/googleapis/java-spanner/pull/531#discussion_r509433645", "createdAt": "2020-10-21T16:33:53Z", "author": {"login": "mayurkale22"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseClient.java", "diffHunk": "@@ -52,6 +53,35 @@\n    */\n   Timestamp write(Iterable<Mutation> mutations) throws SpannerException;\n \n+  /**\n+   * Writes the given mutations atomically to the database with the given options.\n+   *\n+   * <p>This method uses retries and replay protection internally, which means that the mutations\n+   * are applied exactly once on success, or not at all if an error is returned, regardless of any\n+   * failures in the underlying network. Note that if the call is cancelled or reaches deadline, it\n+   * is not possible to know whether the mutations were applied without performing a subsequent\n+   * database operation, but the mutations will have been applied at most once.\n+   *\n+   * <p>Example of blind write.\n+   *\n+   * <pre>{@code\n+   * long singerId = my_singer_id;\n+   * Mutation mutation = Mutation.newInsertBuilder(\"Singer\")\n+   *         .set(\"SingerId\")\n+   *         .to(singerId)\n+   *         .set(\"FirstName\")\n+   *         .to(\"Billy\")\n+   *         .set(\"LastName\")\n+   *         .to(\"Joel\")\n+   *         .build();\n+   * dbClient.writeWithOptions(Collections.singletonList(mutation));\n+   * }</pre>\n+   *\n+   * @return a response with the timestamp at which the write was committed\n+   */\n+  CommitResponse writeWithOptions(Iterable<Mutation> mutations, TransactionOption... options)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA2MTM0Nw=="}, "originalCommit": {"oid": "5dd32d1096da8ae47af4b03aaf0a9c706ebddfea"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3297, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}