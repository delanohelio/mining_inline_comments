{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4ODYzNjcy", "number": 181, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMzo0MjozOFrOD2d_sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzoxMToyMlrOD2heEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDQxMTM3OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPool.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMzo0MjozOFrOGMPazw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzoxMDo1OFrOGMUEwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ4ODcxOQ==", "bodyText": "In the previous logic, we executed this logic also for PERMISSION_DENIED errors. It doesn't anymore. Is this a problem?", "url": "https://github.com/googleapis/java-spanner/pull/181#discussion_r415488719", "createdAt": "2020-04-27T03:42:38Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPool.java", "diffHunk": "@@ -1696,25 +1716,30 @@ private void handlePrepareSessionFailure(\n     synchronized (lock) {\n       if (isSessionNotFound(e)) {\n         invalidateSession(session);\n-      } else if (isDatabaseOrInstanceNotFound(e) || isPermissionDenied(e)) {\n-        // Database has been deleted or the user has no permission to write to this database. We\n-        // should stop trying to prepare any transactions. Also propagate the error to all waiters,\n-        // as any further waiting is pointless.\n+      } else if (shouldStopPrepareSessions(e)) {\n+        // Database has been deleted or the user has no permission to write to this database, or\n+        // there is some other semi-permanent error. We should stop trying to prepare any\n+        // transactions. Also propagate the error to all waiters if the database or instance has\n+        // been deleted, as any further waiting is pointless.\n+        stopAutomaticPrepare = true;\n         while (readWriteWaiters.size() > 0) {\n           readWriteWaiters.poll().put(e);\n         }\n         while (readWaiters.size() > 0) {\n           readWaiters.poll().put(e);\n         }\n-        // Remove the session from the pool.\n-        allSessions.remove(session);\n-        if (isClosed()) {\n-          decrementPendingClosures(1);\n+        if (isDatabaseOrInstanceNotFound(e)) {\n+          // Remove the session from the pool.\n+          if (isClosed()) {\n+            decrementPendingClosures(1);\n+          }\n+          allSessions.remove(session);\n+          this.resourceNotFoundException =\n+              MoreObjects.firstNonNull(\n+                  this.resourceNotFoundException, (ResourceNotFoundException) e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cfe1062db7cfd06cc0890558132f1b0f40c1620"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2NDk5NA==", "bodyText": "No, it is still executed for PERMISSION_DENIED errors, but that is now covered by the general error handling that also handles other types of errors. The specific errors DatabaseNotFound and InstanceNotFound are handled specifically, as these should not allow the normal operation of the session pool to be restarted once the error does no longer occur. The reasoning behind that is that a DatabaseNotFound exception can only be fixed by creating a new database with the same name as the old one, but that is still a new database.\nThe other errors, such as PERMISSION_DENIED and now also for examle FAILED_PRECONDITION, should allow the session pool to restart the automatic preparing of sessions once the error has been fixed. This could be granting the user the necessary permissions or changing the state of database to fulfill all requirements.", "url": "https://github.com/googleapis/java-spanner/pull/181#discussion_r415564994", "createdAt": "2020-04-27T07:10:58Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPool.java", "diffHunk": "@@ -1696,25 +1716,30 @@ private void handlePrepareSessionFailure(\n     synchronized (lock) {\n       if (isSessionNotFound(e)) {\n         invalidateSession(session);\n-      } else if (isDatabaseOrInstanceNotFound(e) || isPermissionDenied(e)) {\n-        // Database has been deleted or the user has no permission to write to this database. We\n-        // should stop trying to prepare any transactions. Also propagate the error to all waiters,\n-        // as any further waiting is pointless.\n+      } else if (shouldStopPrepareSessions(e)) {\n+        // Database has been deleted or the user has no permission to write to this database, or\n+        // there is some other semi-permanent error. We should stop trying to prepare any\n+        // transactions. Also propagate the error to all waiters if the database or instance has\n+        // been deleted, as any further waiting is pointless.\n+        stopAutomaticPrepare = true;\n         while (readWriteWaiters.size() > 0) {\n           readWriteWaiters.poll().put(e);\n         }\n         while (readWaiters.size() > 0) {\n           readWaiters.poll().put(e);\n         }\n-        // Remove the session from the pool.\n-        allSessions.remove(session);\n-        if (isClosed()) {\n-          decrementPendingClosures(1);\n+        if (isDatabaseOrInstanceNotFound(e)) {\n+          // Remove the session from the pool.\n+          if (isClosed()) {\n+            decrementPendingClosures(1);\n+          }\n+          allSessions.remove(session);\n+          this.resourceNotFoundException =\n+              MoreObjects.firstNonNull(\n+                  this.resourceNotFoundException, (ResourceNotFoundException) e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ4ODcxOQ=="}, "originalCommit": {"oid": "3cfe1062db7cfd06cc0890558132f1b0f40c1620"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDk4MDY0OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzoxMToyMlrOGMUFqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzoxMToyMlrOGMUFqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU2NTIyNw==", "bodyText": "This test case covers the PERMISSION_DENIED case discussed above.", "url": "https://github.com/googleapis/java-spanner/pull/181#discussion_r415565227", "createdAt": "2020-04-27T07:11:22Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java", "diffHunk": "@@ -469,12 +469,25 @@ public void testDatabaseOrInstanceDoesNotExistOnReplenish() throws Exception {\n \n   @Test\n   public void testPermissionDeniedOnPrepareSession() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cfe1062db7cfd06cc0890558132f1b0f40c1620"}, "originalPosition": 3}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3174, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}