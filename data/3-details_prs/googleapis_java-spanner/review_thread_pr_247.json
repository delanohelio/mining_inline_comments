{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NTc0NDk5", "number": 247, "reviewThreads": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0Mzo1N1rOED4p0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNTowOTo0N1rOEE7vxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTA5MzkzOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/BackupTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0Mzo1N1rOGhKiTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMTowNDowN1rOGiYjew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyODgxMw==", "bodyText": "nit: please add a \"missing expected exception\" message", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437428813", "createdAt": "2020-06-09T13:43:57Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/BackupTest.java", "diffHunk": "@@ -102,8 +102,12 @@ public void createWithoutSource() {\n             .newBackupBuilder(BackupId.of(\"test-project\", \"dest-instance\", \"backup-id\"))\n             .setExpireTime(expireTime)\n             .build();\n-    expectedException.expect(IllegalStateException.class);\n-    backup.create();\n+    try {\n+      backup.create();\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcwNzA2Nw==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r438707067", "createdAt": "2020-06-11T11:04:07Z", "author": {"login": "suraj-qlogic"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/BackupTest.java", "diffHunk": "@@ -102,8 +102,12 @@ public void createWithoutSource() {\n             .newBackupBuilder(BackupId.of(\"test-project\", \"dest-instance\", \"backup-id\"))\n             .setExpireTime(expireTime)\n             .build();\n-    expectedException.expect(IllegalStateException.class);\n-    backup.create();\n+    try {\n+      backup.create();\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyODgxMw=="}, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTA5NDgxOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/BackupTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0NDowNVrOGhKi0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMTowNDoxOFrOGiYjwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyODk0Nw==", "bodyText": "nit: please add a \"missing expected exception\" message", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437428947", "createdAt": "2020-06-09T13:44:05Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/BackupTest.java", "diffHunk": "@@ -113,8 +117,12 @@ public void createWithoutExpireTime() {\n             .newBackupBuilder(BackupId.of(\"test-project\", \"instance-id\", \"backup-id\"))\n             .setDatabase(DatabaseId.of(\"test-project\", \"instance-id\", \"src-database\"))\n             .build();\n-    expectedException.expect(IllegalStateException.class);\n-    backup.create();\n+    try {\n+      backup.create();\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcwNzEzOA==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r438707138", "createdAt": "2020-06-11T11:04:18Z", "author": {"login": "suraj-qlogic"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/BackupTest.java", "diffHunk": "@@ -113,8 +117,12 @@ public void createWithoutExpireTime() {\n             .newBackupBuilder(BackupId.of(\"test-project\", \"instance-id\", \"backup-id\"))\n             .setDatabase(DatabaseId.of(\"test-project\", \"instance-id\", \"src-database\"))\n             .build();\n-    expectedException.expect(IllegalStateException.class);\n-    backup.create();\n+    try {\n+      backup.create();\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyODk0Nw=="}, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTA5Njc1OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/BackupTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0NDoyNFrOGhKkBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMTowNDoyN1rOGiYkAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyOTI1Mw==", "bodyText": "nit: please add a \"missing expected exception\" message", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437429253", "createdAt": "2020-06-09T13:44:24Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/BackupTest.java", "diffHunk": "@@ -207,8 +215,12 @@ public void updateExpireTimeWithoutExpireTime() {\n         dbClient\n             .newBackupBuilder(BackupId.of(\"test-project\", \"test-instance\", \"test-backup\"))\n             .build();\n-    expectedException.expect(IllegalStateException.class);\n-    backup.updateExpireTime();\n+    try {\n+      backup.updateExpireTime();\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcwNzIwMA==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r438707200", "createdAt": "2020-06-11T11:04:27Z", "author": {"login": "suraj-qlogic"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/BackupTest.java", "diffHunk": "@@ -207,8 +215,12 @@ public void updateExpireTimeWithoutExpireTime() {\n         dbClient\n             .newBackupBuilder(BackupId.of(\"test-project\", \"test-instance\", \"test-backup\"))\n             .build();\n-    expectedException.expect(IllegalStateException.class);\n-    backup.updateExpireTime();\n+    try {\n+      backup.updateExpireTime();\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyOTI1Mw=="}, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTA5NzY0OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/BackupTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0NDozMlrOGhKkiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMTowNDozNVrOGiYkOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyOTM4Nw==", "bodyText": "nit: please add a \"missing expected exception\" message", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437429387", "createdAt": "2020-06-09T13:44:32Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/BackupTest.java", "diffHunk": "@@ -228,8 +240,12 @@ public void restoreWithoutDestination() {\n         dbClient\n             .newBackupBuilder(BackupId.of(\"test-project\", \"test-instance\", \"test-backup\"))\n             .build();\n-    expectedException.expect(NullPointerException.class);\n-    backup.restore(null);\n+    try {\n+      backup.restore(null);\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcwNzI1OQ==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r438707259", "createdAt": "2020-06-11T11:04:35Z", "author": {"login": "suraj-qlogic"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/BackupTest.java", "diffHunk": "@@ -228,8 +240,12 @@ public void restoreWithoutDestination() {\n         dbClient\n             .newBackupBuilder(BackupId.of(\"test-project\", \"test-instance\", \"test-backup\"))\n             .build();\n-    expectedException.expect(NullPointerException.class);\n-    backup.restore(null);\n+    try {\n+      backup.restore(null);\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyOTM4Nw=="}, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTEwOTA4OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/BackupTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0NjoxNFrOGhKrcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMTowNDo0N1rOGiYkmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzMTE1Mg==", "bodyText": "nit: This check is (almost) superfluous. e is already guaranteed to be a (subclass of) NullPointerException because of  the catch clause. I would recommend changing this line to be consistent with the other checks for a non-null message, or otherwise no check at all if the message is expected to be null here.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437431152", "createdAt": "2020-06-09T13:46:14Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/BackupTest.java", "diffHunk": "@@ -228,8 +240,12 @@ public void restoreWithoutDestination() {\n         dbClient\n             .newBackupBuilder(BackupId.of(\"test-project\", \"test-instance\", \"test-backup\"))\n             .build();\n-    expectedException.expect(NullPointerException.class);\n-    backup.restore(null);\n+    try {\n+      backup.restore(null);\n+      fail(\"\");\n+    } catch (NullPointerException e) {\n+      assertEquals(NullPointerException.class, e.getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcwNzM1Mw==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r438707353", "createdAt": "2020-06-11T11:04:47Z", "author": {"login": "suraj-qlogic"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/BackupTest.java", "diffHunk": "@@ -228,8 +240,12 @@ public void restoreWithoutDestination() {\n         dbClient\n             .newBackupBuilder(BackupId.of(\"test-project\", \"test-instance\", \"test-backup\"))\n             .build();\n-    expectedException.expect(NullPointerException.class);\n-    backup.restore(null);\n+    try {\n+      backup.restore(null);\n+      fail(\"\");\n+    } catch (NullPointerException e) {\n+      assertEquals(NullPointerException.class, e.getClass());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzMTE1Mg=="}, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTE4MTUxOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SessionImplTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1NzoyMVrOGhLY0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjowNTowMFrOGiaONw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0Mjc3MA==", "bodyText": "Please add a `fail(\"missing exception\") call before the end of the try block. Otherwise, this test case will succeed if no exception is thrown.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437442770", "createdAt": "2020-06-09T13:57:21Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SessionImplTest.java", "diffHunk": "@@ -313,29 +322,32 @@ public void transactionClosesOldSingleUseContext() {\n \n     // Note that we don't even run the transaction - just preparing the runner is sufficient.\n     session.readWriteTransaction();\n-\n-    expectedException.expect(IllegalStateException.class);\n-    expectedException.expectMessage(\"invalidated\");\n-    ctx.read(\"Dummy\", KeySet.all(), Arrays.asList(\"C\"));\n+    try {\n+      ctx.read(\"Dummy\", KeySet.all(), Arrays.asList(\"C\"));\n+      fail(\"Expected exception\");\n+    } catch (IllegalStateException ex) {\n+      assertThat(ex.getMessage()).contains(\"invalidated\");\n+    }\n   }\n \n   @Test\n   public void singleUseContextClosesTransaction() {\n     TransactionRunner runner = session.readWriteTransaction();\n \n     session.singleUse(TimestampBound.strong());\n-\n-    expectedException.expect(IllegalStateException.class);\n-    expectedException.expectMessage(\"invalidated\");\n-    runner.run(\n-        new TransactionRunner.TransactionCallable<Void>() {\n-          @Nullable\n-          @Override\n-          public Void run(TransactionContext transaction) throws SpannerException {\n-            fail(\"Unexpected call to transaction body\");\n-            return null;\n-          }\n-        });\n+    try {\n+      runner.run(\n+          new TransactionRunner.TransactionCallable<Void>() {\n+            @Nullable\n+            @Override\n+            public Void run(TransactionContext transaction) throws SpannerException {\n+              fail(\"Unexpected call to transaction body\");\n+              return null;\n+            }\n+          });\n+    } catch (IllegalStateException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNDM5MQ==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r438734391", "createdAt": "2020-06-11T12:05:00Z", "author": {"login": "suraj-qlogic"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SessionImplTest.java", "diffHunk": "@@ -313,29 +322,32 @@ public void transactionClosesOldSingleUseContext() {\n \n     // Note that we don't even run the transaction - just preparing the runner is sufficient.\n     session.readWriteTransaction();\n-\n-    expectedException.expect(IllegalStateException.class);\n-    expectedException.expectMessage(\"invalidated\");\n-    ctx.read(\"Dummy\", KeySet.all(), Arrays.asList(\"C\"));\n+    try {\n+      ctx.read(\"Dummy\", KeySet.all(), Arrays.asList(\"C\"));\n+      fail(\"Expected exception\");\n+    } catch (IllegalStateException ex) {\n+      assertThat(ex.getMessage()).contains(\"invalidated\");\n+    }\n   }\n \n   @Test\n   public void singleUseContextClosesTransaction() {\n     TransactionRunner runner = session.readWriteTransaction();\n \n     session.singleUse(TimestampBound.strong());\n-\n-    expectedException.expect(IllegalStateException.class);\n-    expectedException.expectMessage(\"invalidated\");\n-    runner.run(\n-        new TransactionRunner.TransactionCallable<Void>() {\n-          @Nullable\n-          @Override\n-          public Void run(TransactionContext transaction) throws SpannerException {\n-            fail(\"Unexpected call to transaction body\");\n-            return null;\n-          }\n-        });\n+    try {\n+      runner.run(\n+          new TransactionRunner.TransactionCallable<Void>() {\n+            @Nullable\n+            @Override\n+            public Void run(TransactionContext transaction) throws SpannerException {\n+              fail(\"Unexpected call to transaction body\");\n+              return null;\n+            }\n+          });\n+    } catch (IllegalStateException ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0Mjc3MA=="}, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTE5MTg0OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SessionPoolTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1OToxMVrOGhLfsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjowNTowOVrOGiaOew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NDUzMA==", "bodyText": "nit: Here and below, please add a text like \"Expected exception\"", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437444530", "createdAt": "2020-06-09T13:59:11Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SessionPoolTest.java", "diffHunk": "@@ -511,8 +508,12 @@ public void run() {\n     // Suppress expected leakedSession warning.\n     leakedSession.clearLeakedException();\n     pool.closeAsync(new SpannerImpl.ClosedException());\n-    expectedException.expect(IllegalStateException.class);\n-    pool.getReadSession();\n+    try {\n+      pool.getReadSession();\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNDQ1OQ==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r438734459", "createdAt": "2020-06-11T12:05:09Z", "author": {"login": "suraj-qlogic"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SessionPoolTest.java", "diffHunk": "@@ -511,8 +508,12 @@ public void run() {\n     // Suppress expected leakedSession warning.\n     leakedSession.clearLeakedException();\n     pool.closeAsync(new SpannerImpl.ClosedException());\n-    expectedException.expect(IllegalStateException.class);\n-    pool.getReadSession();\n+    try {\n+      pool.getReadSession();\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NDUzMA=="}, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTE5NTU1OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SpanTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowMDowMlrOGhLiWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjowNToyMVrOGiaO2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NTIwOQ==", "bodyText": "nit: Here and below, please add a text like \"Expected exception\"", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437445209", "createdAt": "2020-06-09T14:00:02Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SpanTest.java", "diffHunk": "@@ -231,23 +227,27 @@ public void tearDown() {\n \n   @Test\n   public void singleUseNonRetryableErrorOnNext() {\n-    expectedException.expect(SpannerMatchers.isSpannerException(ErrorCode.FAILED_PRECONDITION));\n     try (ResultSet rs = client.singleUse().executeQuery(SELECT1AND2)) {\n       mockSpanner.addException(FAILED_PRECONDITION);\n       while (rs.next()) {\n         // Just consume the result set.\n+        fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNDU1Mw==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r438734553", "createdAt": "2020-06-11T12:05:21Z", "author": {"login": "suraj-qlogic"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SpanTest.java", "diffHunk": "@@ -231,23 +227,27 @@ public void tearDown() {\n \n   @Test\n   public void singleUseNonRetryableErrorOnNext() {\n-    expectedException.expect(SpannerMatchers.isSpannerException(ErrorCode.FAILED_PRECONDITION));\n     try (ResultSet rs = client.singleUse().executeQuery(SELECT1AND2)) {\n       mockSpanner.addException(FAILED_PRECONDITION);\n       while (rs.next()) {\n         // Just consume the result set.\n+        fail(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NTIwOQ=="}, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTIwNjU3OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/StatementTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowMjoyNVrOGhLpVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjowNToyOVrOGiaPGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0Njk5Nw==", "bodyText": "nit: Here and below, please add a text like \"Expected exception\"", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437446997", "createdAt": "2020-06-09T14:02:25Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/StatementTest.java", "diffHunk": "@@ -103,33 +101,47 @@ public void bindReplacement() {\n   public void incompleteBinding() {\n     Statement.Builder builder = Statement.newBuilder(\"SELECT @v\");\n     builder.bind(\"v\");\n-    expectedException.expect(IllegalStateException.class);\n-    builder.build();\n+    try {\n+      builder.build();\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNDYxOA==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r438734618", "createdAt": "2020-06-11T12:05:29Z", "author": {"login": "suraj-qlogic"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/StatementTest.java", "diffHunk": "@@ -103,33 +101,47 @@ public void bindReplacement() {\n   public void incompleteBinding() {\n     Statement.Builder builder = Statement.newBuilder(\"SELECT @v\");\n     builder.bind(\"v\");\n-    expectedException.expect(IllegalStateException.class);\n-    builder.build();\n+    try {\n+      builder.build();\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0Njk5Nw=="}, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTIwODk3OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/TimestampBoundTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowMjo1N1rOGhLq1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjowNTozN1rOGiaPXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NzM4MA==", "bodyText": "nit: Here and below, please add a text like \"Expected exception\"", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437447380", "createdAt": "2020-06-09T14:02:57Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/TimestampBoundTest.java", "diffHunk": "@@ -90,8 +89,12 @@ public void exactStaleness() {\n \n   @Test\n   public void exactStalenessNegative() {\n-    expectedException.expect(IllegalArgumentException.class);\n-    TimestampBound.ofExactStaleness(-1, TimeUnit.SECONDS);\n+    try {\n+      TimestampBound.ofExactStaleness(-1, TimeUnit.SECONDS);\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNDY4NQ==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r438734685", "createdAt": "2020-06-11T12:05:37Z", "author": {"login": "suraj-qlogic"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/TimestampBoundTest.java", "diffHunk": "@@ -90,8 +89,12 @@ public void exactStaleness() {\n \n   @Test\n   public void exactStalenessNegative() {\n-    expectedException.expect(IllegalArgumentException.class);\n-    TimestampBound.ofExactStaleness(-1, TimeUnit.SECONDS);\n+    try {\n+      TimestampBound.ofExactStaleness(-1, TimeUnit.SECONDS);\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NzM4MA=="}, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTIwOTk3OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/TransactionManagerImplTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowMzowOVrOGhLreA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjowNTo0NlrOGiaPsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NzU0NA==", "bodyText": "nit: Here and below, please add a text like \"Expected exception\"", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437447544", "createdAt": "2020-06-09T14:03:09Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/TransactionManagerImplTest.java", "diffHunk": "@@ -86,26 +83,42 @@ public void beginCalledTwiceFails() {\n     when(session.newTransaction()).thenReturn(txn);\n     assertThat(manager.begin()).isEqualTo(txn);\n     assertThat(manager.getState()).isEqualTo(TransactionState.STARTED);\n-    exception.expect(IllegalStateException.class);\n-    manager.begin();\n+    try {\n+      manager.begin();\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNDc3MQ==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r438734771", "createdAt": "2020-06-11T12:05:46Z", "author": {"login": "suraj-qlogic"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/TransactionManagerImplTest.java", "diffHunk": "@@ -86,26 +83,42 @@ public void beginCalledTwiceFails() {\n     when(session.newTransaction()).thenReturn(txn);\n     assertThat(manager.begin()).isEqualTo(txn);\n     assertThat(manager.getState()).isEqualTo(TransactionState.STARTED);\n-    exception.expect(IllegalStateException.class);\n-    manager.begin();\n+    try {\n+      manager.begin();\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NzU0NA=="}, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTIxMjI0OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/TypeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowMzozM1rOGhLsyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjowNTo1N1rOGiaQHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0Nzg4Mw==", "bodyText": "nit: Here and below, please add a text like \"Expected exception\"", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437447883", "createdAt": "2020-06-09T14:03:33Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/TypeTest.java", "diffHunk": "@@ -289,34 +288,46 @@ public void emptyStruct() {\n   @Test\n   public void structFieldIndexNotFound() {\n     Type t = Type.struct(StructField.of(\"f1\", Type.int64()));\n-\n-    expectedException.expect(IllegalArgumentException.class);\n-    expectedException.expectMessage(\"Field not found: f2\");\n-    t.getFieldIndex(\"f2\");\n+    try {\n+      t.getFieldIndex(\"f2\");\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNDg3OA==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r438734878", "createdAt": "2020-06-11T12:05:57Z", "author": {"login": "suraj-qlogic"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/TypeTest.java", "diffHunk": "@@ -289,34 +288,46 @@ public void emptyStruct() {\n   @Test\n   public void structFieldIndexNotFound() {\n     Type t = Type.struct(StructField.of(\"f1\", Type.int64()));\n-\n-    expectedException.expect(IllegalArgumentException.class);\n-    expectedException.expectMessage(\"Field not found: f2\");\n-    t.getFieldIndex(\"f2\");\n+    try {\n+      t.getFieldIndex(\"f2\");\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0Nzg4Mw=="}, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTIxMzU0OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/ValueTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowMzo0OVrOGhLtjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjo1Njo0MVrOGib2tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0ODA3OQ==", "bodyText": "nit: Here and below, please add a text like \"Expected exception\"", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437448079", "createdAt": "2020-06-09T14:03:49Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/ValueTest.java", "diffHunk": "@@ -85,10 +83,12 @@ public void boolWrapperNull() {\n     assertThat(v.getType()).isEqualTo(Type.bool());\n     assertThat(v.isNull()).isTrue();\n     assertThat(v.toString()).isEqualTo(NULL_STRING);\n-\n-    expectedException.expect(IllegalStateException.class);\n-    expectedException.expectMessage(\"null value\");\n-    v.getBool();\n+    try {\n+      v.getBool();\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2MTE0Mg==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r438761142", "createdAt": "2020-06-11T12:56:41Z", "author": {"login": "suraj-qlogic"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/ValueTest.java", "diffHunk": "@@ -85,10 +83,12 @@ public void boolWrapperNull() {\n     assertThat(v.getType()).isEqualTo(Type.bool());\n     assertThat(v.isNull()).isTrue();\n     assertThat(v.toString()).isEqualTo(NULL_STRING);\n-\n-    expectedException.expect(IllegalStateException.class);\n-    expectedException.expectMessage(\"null value\");\n-    v.getBool();\n+    try {\n+      v.getBool();\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0ODA3OQ=="}, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTIxODg5OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/DmlBatchTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowNDo1MVrOGhLw6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjowNjoxNlrOGiaQoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0ODkzNw==", "bodyText": "nit: Here and below, please add a text like \"Expected exception\"", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437448937", "createdAt": "2020-06-09T14:04:51Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/DmlBatchTest.java", "diffHunk": "@@ -63,23 +62,35 @@ private DmlBatch createSubject(UnitOfWork transaction) {\n   @Test\n   public void testExecuteQuery() {\n     DmlBatch batch = createSubject();\n-    exception.expect(SpannerExceptionMatcher.matchCode(ErrorCode.FAILED_PRECONDITION));\n-    batch.executeQuery(mock(ParsedStatement.class), AnalyzeMode.NONE);\n+    try {\n+      batch.executeQuery(mock(ParsedStatement.class), AnalyzeMode.NONE);\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNTAwOQ==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r438735009", "createdAt": "2020-06-11T12:06:16Z", "author": {"login": "suraj-qlogic"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/DmlBatchTest.java", "diffHunk": "@@ -63,23 +62,35 @@ private DmlBatch createSubject(UnitOfWork transaction) {\n   @Test\n   public void testExecuteQuery() {\n     DmlBatch batch = createSubject();\n-    exception.expect(SpannerExceptionMatcher.matchCode(ErrorCode.FAILED_PRECONDITION));\n-    batch.executeQuery(mock(ParsedStatement.class), AnalyzeMode.NONE);\n+    try {\n+      batch.executeQuery(mock(ParsedStatement.class), AnalyzeMode.NONE);\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0ODkzNw=="}, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTIyMzU0OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/StatementTimeoutTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowNTo1MVrOGhLz6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjowNjoyN1rOGiaQ8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0OTcwNg==", "bodyText": "nit: Here and below, please add a text like \"Expected exception\"", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437449706", "createdAt": "2020-06-09T14:05:51Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/StatementTimeoutTest.java", "diffHunk": "@@ -273,8 +272,12 @@ public void testTimeoutExceptionReadOnlyAutocommit() {\n                 .build())) {\n       connection.setReadOnly(true);\n       connection.setStatementTimeout(TIMEOUT_FOR_SLOW_STATEMENTS, TimeUnit.MILLISECONDS);\n-      expected.expect(SpannerExceptionMatcher.matchCode(ErrorCode.DEADLINE_EXCEEDED));\n-      connection.executeQuery(Statement.of(SLOW_SELECT));\n+      try {\n+        connection.executeQuery(Statement.of(SLOW_SELECT));\n+        fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNTA4OA==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r438735088", "createdAt": "2020-06-11T12:06:27Z", "author": {"login": "suraj-qlogic"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/StatementTimeoutTest.java", "diffHunk": "@@ -273,8 +272,12 @@ public void testTimeoutExceptionReadOnlyAutocommit() {\n                 .build())) {\n       connection.setReadOnly(true);\n       connection.setStatementTimeout(TIMEOUT_FOR_SLOW_STATEMENTS, TimeUnit.MILLISECONDS);\n-      expected.expect(SpannerExceptionMatcher.matchCode(ErrorCode.DEADLINE_EXCEEDED));\n-      connection.executeQuery(Statement.of(SLOW_SELECT));\n+      try {\n+        connection.executeQuery(Statement.of(SLOW_SELECT));\n+        fail(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0OTcwNg=="}, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTIyODM3OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/StatementTimeoutTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowNjo1M1rOGhL3EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzowMTo1M1rOGicCPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1MDUxMg==", "bodyText": "Add a fail(\"Expected exception\") to prevent the test case from succeeding in case of no error.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437450512", "createdAt": "2020-06-09T14:06:53Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/StatementTimeoutTest.java", "diffHunk": "@@ -1048,9 +1110,9 @@ public void run() {\n               },\n               WAIT_BEFORE_CANCEL,\n               TimeUnit.MILLISECONDS);\n-\n-      expected.expect(SpannerExceptionMatcher.matchCode(ErrorCode.CANCELLED));\n       connection.runBatch();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 330}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2NDA5NA==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r438764094", "createdAt": "2020-06-11T13:01:53Z", "author": {"login": "suraj-qlogic"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/StatementTimeoutTest.java", "diffHunk": "@@ -1048,9 +1110,9 @@ public void run() {\n               },\n               WAIT_BEFORE_CANCEL,\n               TimeUnit.MILLISECONDS);\n-\n-      expected.expect(SpannerExceptionMatcher.matchCode(ErrorCode.CANCELLED));\n       connection.runBatch();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1MDUxMg=="}, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 330}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTIzMDE4OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/StatementTimeoutTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowNzoxN1rOGhL4Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowNzoxN1rOGhL4Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1MDgwMw==", "bodyText": "Add a fail(\"Expected exception\") to prevent the test case from succeeding in case of no error.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437450803", "createdAt": "2020-06-09T14:07:17Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/StatementTimeoutTest.java", "diffHunk": "@@ -1073,8 +1135,9 @@ public void run() {\n               WAIT_BEFORE_CANCEL,\n               TimeUnit.MILLISECONDS);\n \n-      expected.expect(SpannerExceptionMatcher.matchCode(ErrorCode.CANCELLED));\n       connection.execute(Statement.of(SLOW_DDL));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 341}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTIzMDgxOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/StatementTimeoutTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowNzoyNlrOGhL4nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzowMDowNlrOGib-Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1MDkwOQ==", "bodyText": "Add a fail(\"Expected exception\") to prevent the test case from succeeding in case of no error.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437450909", "createdAt": "2020-06-09T14:07:26Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/StatementTimeoutTest.java", "diffHunk": "@@ -1133,8 +1197,9 @@ public void testTimeoutExceptionDdlBatch() {\n       // the following statement will NOT timeout as the statement is only buffered locally\n       connection.execute(Statement.of(SLOW_DDL));\n       // the commit sends the statement to the server and should timeout\n-      expected.expect(SpannerExceptionMatcher.matchCode(ErrorCode.DEADLINE_EXCEEDED));\n       connection.runBatch();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 363}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2MzEwMg==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r438763102", "createdAt": "2020-06-11T13:00:06Z", "author": {"login": "suraj-qlogic"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/StatementTimeoutTest.java", "diffHunk": "@@ -1133,8 +1197,9 @@ public void testTimeoutExceptionDdlBatch() {\n       // the following statement will NOT timeout as the statement is only buffered locally\n       connection.execute(Statement.of(SLOW_DDL));\n       // the commit sends the statement to the server and should timeout\n-      expected.expect(SpannerExceptionMatcher.matchCode(ErrorCode.DEADLINE_EXCEEDED));\n       connection.runBatch();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1MDkwOQ=="}, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 363}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTIzNzQyOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/it/ITTransactionModeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowODo1OFrOGhL9FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjoxMDoxOVrOGiaX-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1MjA1Mw==", "bodyText": "nit: Here and below, add an \"Expected exception\" message.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437452053", "createdAt": "2020-06-09T14:08:58Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/it/ITTransactionModeTest.java", "diffHunk": "@@ -142,8 +140,12 @@ public void testDoNotAllowBufferedWriteInReadOnlyTransaction() {\n     try (ITConnection connection = createConnection()) {\n       connection.execute(Statement.of(\"SET TRANSACTION READ ONLY\"));\n       assertThat(connection.isAutocommit(), is(false));\n-      exception.expect(SpannerExceptionMatcher.matchCode(ErrorCode.FAILED_PRECONDITION));\n-      connection.bufferedWrite(Mutation.newInsertBuilder(\"FOO\").set(\"ID\").to(1L).build());\n+      try {\n+        connection.bufferedWrite(Mutation.newInsertBuilder(\"FOO\").set(\"ID\").to(1L).build());\n+        fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNjg5MQ==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r438736891", "createdAt": "2020-06-11T12:10:19Z", "author": {"login": "suraj-qlogic"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/it/ITTransactionModeTest.java", "diffHunk": "@@ -142,8 +140,12 @@ public void testDoNotAllowBufferedWriteInReadOnlyTransaction() {\n     try (ITConnection connection = createConnection()) {\n       connection.execute(Statement.of(\"SET TRANSACTION READ ONLY\"));\n       assertThat(connection.isAutocommit(), is(false));\n-      exception.expect(SpannerExceptionMatcher.matchCode(ErrorCode.FAILED_PRECONDITION));\n-      connection.bufferedWrite(Mutation.newInsertBuilder(\"FOO\").set(\"ID\").to(1L).build());\n+      try {\n+        connection.bufferedWrite(Mutation.newInsertBuilder(\"FOO\").set(\"ID\").to(1L).build());\n+        fail(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1MjA1Mw=="}, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTIzODgzOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITClosedSessionTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowOToxN1rOGhL9-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjoxMDoyOVrOGiaYQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1MjI4MQ==", "bodyText": "nit: Add an \"Expected exception\" message.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437452281", "createdAt": "2020-06-09T14:09:17Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITClosedSessionTest.java", "diffHunk": "@@ -94,9 +93,11 @@ public void testSingleUseNoRecreation() {\n     // This should trigger an exception with code NOT_FOUND and the text 'Session not found'.\n     client.setAllowSessionReplacing(false);\n     client.invalidateNextSession();\n-    expectedException.expect(SessionNotFoundException.class);\n     try (ResultSet rs = Statement.of(\"SELECT 1\").executeQuery(client.singleUse())) {\n       rs.next();\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNjk2Mw==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r438736963", "createdAt": "2020-06-11T12:10:29Z", "author": {"login": "suraj-qlogic"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITClosedSessionTest.java", "diffHunk": "@@ -94,9 +93,11 @@ public void testSingleUseNoRecreation() {\n     // This should trigger an exception with code NOT_FOUND and the text 'Session not found'.\n     client.setAllowSessionReplacing(false);\n     client.invalidateNextSession();\n-    expectedException.expect(SessionNotFoundException.class);\n     try (ResultSet rs = Statement.of(\"SELECT 1\").executeQuery(client.singleUse())) {\n       rs.next();\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1MjI4MQ=="}, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTI0MTMwOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITClosedSessionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowOTo1MFrOGhL_ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowOTo1MFrOGhL_ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1MjY4Mg==", "bodyText": "Add a fail(\"Expected exception\") statement to prevent the test case succeeding in case of no error.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437452682", "createdAt": "2020-06-09T14:09:50Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITClosedSessionTest.java", "diffHunk": "@@ -169,10 +170,11 @@ public void testReadOnlyTransaction() {\n   public void testReadOnlyTransactionNoRecreation() {\n     client.setAllowSessionReplacing(false);\n     client.invalidateNextSession();\n-    expectedException.expect(SessionNotFoundException.class);\n     try (ReadOnlyTransaction txn = client.readOnlyTransaction()) {\n       try (ResultSet rs = txn.executeQuery(Statement.of(\"SELECT 1\"))) {\n         rs.next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTI0NzgxOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITClosedSessionTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDoxMToxM1rOGhMDtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjoxNzoyMVrOGialWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1Mzc0OQ==", "bodyText": "Add  a fail(\"Expected exception\") to prevent false positives.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437453749", "createdAt": "2020-06-09T14:11:13Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITClosedSessionTest.java", "diffHunk": "@@ -221,18 +223,21 @@ public Void run(TransactionContext transaction) throws Exception {\n   public void testReadWriteTransactionNoRecreation() {\n     client.setAllowSessionReplacing(false);\n     client.invalidateNextSession();\n-    expectedException.expect(SessionNotFoundException.class);\n-    TransactionRunner txn = client.readWriteTransaction();\n-    txn.run(\n-        new TransactionCallable<Void>() {\n-          @Override\n-          public Void run(TransactionContext transaction) throws Exception {\n-            try (ResultSet rs = transaction.executeQuery(Statement.of(\"SELECT 1\"))) {\n-              rs.next();\n+    try {\n+      TransactionRunner txn = client.readWriteTransaction();\n+      txn.run(\n+          new TransactionCallable<Void>() {\n+            @Override\n+            public Void run(TransactionContext transaction) throws Exception {\n+              try (ResultSet rs = transaction.executeQuery(Statement.of(\"SELECT 1\"))) {\n+                rs.next();\n+              }\n+              return null;\n             }\n-            return null;\n-          }\n-        });\n+          });\n+    } catch (SessionNotFoundException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc0MDMxNQ==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r438740315", "createdAt": "2020-06-11T12:17:21Z", "author": {"login": "suraj-qlogic"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITClosedSessionTest.java", "diffHunk": "@@ -221,18 +223,21 @@ public Void run(TransactionContext transaction) throws Exception {\n   public void testReadWriteTransactionNoRecreation() {\n     client.setAllowSessionReplacing(false);\n     client.invalidateNextSession();\n-    expectedException.expect(SessionNotFoundException.class);\n-    TransactionRunner txn = client.readWriteTransaction();\n-    txn.run(\n-        new TransactionCallable<Void>() {\n-          @Override\n-          public Void run(TransactionContext transaction) throws Exception {\n-            try (ResultSet rs = transaction.executeQuery(Statement.of(\"SELECT 1\"))) {\n-              rs.next();\n+    try {\n+      TransactionRunner txn = client.readWriteTransaction();\n+      txn.run(\n+          new TransactionCallable<Void>() {\n+            @Override\n+            public Void run(TransactionContext transaction) throws Exception {\n+              try (ResultSet rs = transaction.executeQuery(Statement.of(\"SELECT 1\"))) {\n+                rs.next();\n+              }\n+              return null;\n             }\n-            return null;\n-          }\n-        });\n+          });\n+    } catch (SessionNotFoundException ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1Mzc0OQ=="}, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTI3MjA4OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITClosedSessionTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDoxNjoyOFrOGhMTTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMzo0MDo0N1rOGidrPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1Nzc0MQ==", "bodyText": "Add fail(\"Expected exception\").", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437457741", "createdAt": "2020-06-09T14:16:28Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITClosedSessionTest.java", "diffHunk": "@@ -265,14 +270,15 @@ public void testTransactionManager() throws InterruptedException {\n   public void testTransactionManagerNoRecreation() throws InterruptedException {\n     client.setAllowSessionReplacing(false);\n     client.invalidateNextSession();\n-    expectedException.expect(SessionNotFoundException.class);\n     try (TransactionManager manager = client.transactionManager()) {\n       TransactionContext txn = manager.begin();\n       while (true) {\n         try (ResultSet rs = txn.executeQuery(Statement.of(\"SELECT 1\"))) {\n           rs.next();\n         }\n       }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2OTUyNA==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r438769524", "createdAt": "2020-06-11T13:11:07Z", "author": {"login": "suraj-qlogic"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITClosedSessionTest.java", "diffHunk": "@@ -265,14 +270,15 @@ public void testTransactionManager() throws InterruptedException {\n   public void testTransactionManagerNoRecreation() throws InterruptedException {\n     client.setAllowSessionReplacing(false);\n     client.invalidateNextSession();\n-    expectedException.expect(SessionNotFoundException.class);\n     try (TransactionManager manager = client.transactionManager()) {\n       TransactionContext txn = manager.begin();\n       while (true) {\n         try (ResultSet rs = txn.executeQuery(Statement.of(\"SELECT 1\"))) {\n           rs.next();\n         }\n       }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1Nzc0MQ=="}, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc5MDk3NA==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r438790974", "createdAt": "2020-06-11T13:40:47Z", "author": {"login": "suraj-qlogic"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITClosedSessionTest.java", "diffHunk": "@@ -265,14 +270,15 @@ public void testTransactionManager() throws InterruptedException {\n   public void testTransactionManagerNoRecreation() throws InterruptedException {\n     client.setAllowSessionReplacing(false);\n     client.invalidateNextSession();\n-    expectedException.expect(SessionNotFoundException.class);\n     try (TransactionManager manager = client.transactionManager()) {\n       TransactionContext txn = manager.begin();\n       while (true) {\n         try (ResultSet rs = txn.executeQuery(Statement.of(\"SELECT 1\"))) {\n           rs.next();\n         }\n       }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1Nzc0MQ=="}, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTI4NDQ3OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITQueryTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDoxOToxMFrOGhMbJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjo1NTozN1rOGib0Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1OTc0OQ==", "bodyText": "nit: Here and below, add \"Expected exception\" message.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437459749", "createdAt": "2020-06-09T14:19:10Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITQueryTest.java", "diffHunk": "@@ -78,9 +76,13 @@ public void simple() {\n \n   @Test\n   public void badQuery() {\n-    expectedException.expect(isSpannerException(ErrorCode.INVALID_ARGUMENT));\n-    expectedException.expectMessage(\"Unrecognized name: Apples\");\n-    execute(Statement.of(\"SELECT Apples AND Oranges\"), Type.int64());\n+    try {\n+      execute(Statement.of(\"SELECT Apples AND Oranges\"), Type.int64());\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2MDUzOA==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r438760538", "createdAt": "2020-06-11T12:55:37Z", "author": {"login": "suraj-qlogic"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITQueryTest.java", "diffHunk": "@@ -78,9 +76,13 @@ public void simple() {\n \n   @Test\n   public void badQuery() {\n-    expectedException.expect(isSpannerException(ErrorCode.INVALID_ARGUMENT));\n-    expectedException.expectMessage(\"Unrecognized name: Apples\");\n-    execute(Statement.of(\"SELECT Apples AND Oranges\"), Type.int64());\n+    try {\n+      execute(Statement.of(\"SELECT Apples AND Oranges\"), Type.int64());\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1OTc0OQ=="}, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTI4NzEyOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionManagerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDoxOTo0N1rOGhMc9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjo1NTo1MFrOGib04g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2MDIxNA==", "bodyText": "nit: Add \"Expected exception\" message.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437460214", "createdAt": "2020-06-09T14:19:47Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionManagerTest.java", "diffHunk": "@@ -115,8 +113,12 @@ public void invalidInsert() throws InterruptedException {\n       }\n       assertThat(manager.getState()).isEqualTo(TransactionState.COMMIT_FAILED);\n       // We cannot retry for non aborted errors.\n-      expectedException.expect(IllegalStateException.class);\n-      manager.resetForRetry();\n+      try {\n+        manager.resetForRetry();\n+        fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2MDY3NA==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r438760674", "createdAt": "2020-06-11T12:55:50Z", "author": {"login": "suraj-qlogic"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionManagerTest.java", "diffHunk": "@@ -115,8 +113,12 @@ public void invalidInsert() throws InterruptedException {\n       }\n       assertThat(manager.getState()).isEqualTo(TransactionState.COMMIT_FAILED);\n       // We cannot retry for non aborted errors.\n-      expectedException.expect(IllegalStateException.class);\n-      manager.resetForRetry();\n+      try {\n+        manager.resetForRetry();\n+        fail(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2MDIxNA=="}, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTI4ODEzOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITWriteTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDoxOTo1N1rOGhMdlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjo1NjowMFrOGib1Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2MDM3NQ==", "bodyText": "nit: Here and below, add \"Expected exception\" message.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437460375", "createdAt": "2020-06-09T14:19:57Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITWriteTest.java", "diffHunk": "@@ -163,8 +161,12 @@ public void writeAlreadyExists() {\n   @Ignore // TODO(user): Fix this - backend currently accepts empty mutation.\n   @Test\n   public void emptyWrite() {\n-    expectedException.expect(isSpannerException(ErrorCode.INVALID_ARGUMENT));\n-    client.write(Arrays.<Mutation>asList());\n+    try {\n+      client.write(Arrays.<Mutation>asList());\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2MDc2Mw==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r438760763", "createdAt": "2020-06-11T12:56:00Z", "author": {"login": "suraj-qlogic"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITWriteTest.java", "diffHunk": "@@ -163,8 +161,12 @@ public void writeAlreadyExists() {\n   @Ignore // TODO(user): Fix this - backend currently accepts empty mutation.\n   @Test\n   public void emptyWrite() {\n-    expectedException.expect(isSpannerException(ErrorCode.INVALID_ARGUMENT));\n-    client.write(Arrays.<Mutation>asList());\n+    try {\n+      client.write(Arrays.<Mutation>asList());\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2MDM3NQ=="}, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjA4MzYxOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SessionPoolOptionsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNTowNzozOVrOGi3MDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzoxMDo1NFrOGi5fDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIwODk3NA==", "bodyText": "I'm not a huge fan of this repetition. Can we rewrite it as follows?\ntry {\n  SessionPoolOptions options =\n      SessionPoolOptions.newBuilder()\n          .setMinSessions(minSessions)\n          .setMaxSessions(maxSessions)\n          .build();\n\n  if (minSessions > maxSessions) {\n    fail(\"Expected exception\");\n  }\n\n  assertThat(minSessions).isEqualTo(options.getMinSessions());\n  assertThat(maxSessions).isEqualTo(options.getMaxSessions());\n} catch (IllegalArgumentException ex) {\n  if (minSessions <= maxSessions) {\n    throw ex;\n  }\n\n  assertNotNull(ex.getMessage());\n}", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r439208974", "createdAt": "2020-06-12T05:07:39Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SessionPoolOptionsTest.java", "diffHunk": "@@ -50,16 +49,26 @@\n   @Test\n   public void setMinMaxSessions() {\n     if (minSessions > maxSessions) {\n-      expectedException.expect(IllegalArgumentException.class);\n-    }\n-    SessionPoolOptions options =\n-        SessionPoolOptions.newBuilder()\n-            .setMinSessions(minSessions)\n-            .setMaxSessions(maxSessions)\n-            .build();\n+      try {\n+        SessionPoolOptions options =\n+            SessionPoolOptions.newBuilder()\n+                .setMinSessions(minSessions)\n+                .setMaxSessions(maxSessions)\n+                .build();\n+        fail(\"Expected exception\");\n+      } catch (IllegalArgumentException ex) {\n+        assertNotNull(ex.getMessage());\n+      }\n+    } else {\n+      SessionPoolOptions options =\n+          SessionPoolOptions.newBuilder()\n+              .setMinSessions(minSessions)\n+              .setMaxSessions(maxSessions)\n+              .build();\n \n-    assertThat(minSessions).isEqualTo(options.getMinSessions());\n-    assertThat(maxSessions).isEqualTo(options.getMaxSessions());\n+      assertThat(minSessions).isEqualTo(options.getMinSessions());\n+      assertThat(maxSessions).isEqualTo(options.getMaxSessions());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc0fe06f64f146542ce3026bf6576bd452b2a86"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI0NjYwNw==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r439246607", "createdAt": "2020-06-12T07:10:54Z", "author": {"login": "suraj-qlogic"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SessionPoolOptionsTest.java", "diffHunk": "@@ -50,16 +49,26 @@\n   @Test\n   public void setMinMaxSessions() {\n     if (minSessions > maxSessions) {\n-      expectedException.expect(IllegalArgumentException.class);\n-    }\n-    SessionPoolOptions options =\n-        SessionPoolOptions.newBuilder()\n-            .setMinSessions(minSessions)\n-            .setMaxSessions(maxSessions)\n-            .build();\n+      try {\n+        SessionPoolOptions options =\n+            SessionPoolOptions.newBuilder()\n+                .setMinSessions(minSessions)\n+                .setMaxSessions(maxSessions)\n+                .build();\n+        fail(\"Expected exception\");\n+      } catch (IllegalArgumentException ex) {\n+        assertNotNull(ex.getMessage());\n+      }\n+    } else {\n+      SessionPoolOptions options =\n+          SessionPoolOptions.newBuilder()\n+              .setMinSessions(minSessions)\n+              .setMaxSessions(maxSessions)\n+              .build();\n \n-    assertThat(minSessions).isEqualTo(options.getMinSessions());\n-    assertThat(maxSessions).isEqualTo(options.getMaxSessions());\n+      assertThat(minSessions).isEqualTo(options.getMinSessions());\n+      assertThat(maxSessions).isEqualTo(options.getMaxSessions());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIwODk3NA=="}, "originalCommit": {"oid": "6bc0fe06f64f146542ce3026bf6576bd452b2a86"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjA4NjQ2OnYy", "diffSide": "LEFT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SpannerGaxRetryTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNTowOTo0N1rOGi3N4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNTo0ODo0OFrOGi3z1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIwOTQ0MQ==", "bodyText": "Did @olavloite confirm that this is not needed?", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r439209441", "createdAt": "2020-06-12T05:09:47Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SpannerGaxRetryTest.java", "diffHunk": "@@ -303,18 +318,13 @@ public void singleUseExecuteStreamingSqlUnavailable() {\n \n   @Test\n   public void readWriteTransactionTimeout() {\n-    expectedException.expect(SpannerMatchers.isSpannerException(ErrorCode.DEADLINE_EXCEEDED));\n     mockSpanner.setBeginTransactionExecutionTime(ONE_SECOND);\n-    TransactionRunner runner = clientWithTimeout.readWriteTransaction();\n-    long updateCount =\n-        runner.run(\n-            new TransactionCallable<Long>() {\n-              @Override\n-              public Long run(TransactionContext transaction) throws Exception {\n-                return transaction.executeUpdate(UPDATE_STATEMENT);\n-              }\n-            });\n-    assertThat(updateCount, is(equalTo(UPDATE_COUNT)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc0fe06f64f146542ce3026bf6576bd452b2a86"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIxNzM0Nw==", "bodyText": "Yes, this part of the code will be unreachable. The database client that is used for these tests have configured MinSessions=0, which means that the error for BeginTransaction should bubble up to the user when a read/write transaction is requested.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r439217347", "createdAt": "2020-06-12T05:41:48Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SpannerGaxRetryTest.java", "diffHunk": "@@ -303,18 +318,13 @@ public void singleUseExecuteStreamingSqlUnavailable() {\n \n   @Test\n   public void readWriteTransactionTimeout() {\n-    expectedException.expect(SpannerMatchers.isSpannerException(ErrorCode.DEADLINE_EXCEEDED));\n     mockSpanner.setBeginTransactionExecutionTime(ONE_SECOND);\n-    TransactionRunner runner = clientWithTimeout.readWriteTransaction();\n-    long updateCount =\n-        runner.run(\n-            new TransactionCallable<Long>() {\n-              @Override\n-              public Long run(TransactionContext transaction) throws Exception {\n-                return transaction.executeUpdate(UPDATE_STATEMENT);\n-              }\n-            });\n-    assertThat(updateCount, is(equalTo(UPDATE_COUNT)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIwOTQ0MQ=="}, "originalCommit": {"oid": "6bc0fe06f64f146542ce3026bf6576bd452b2a86"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIxOTE1OQ==", "bodyText": "Perfect, thanks for confirming.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r439219159", "createdAt": "2020-06-12T05:48:48Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SpannerGaxRetryTest.java", "diffHunk": "@@ -303,18 +318,13 @@ public void singleUseExecuteStreamingSqlUnavailable() {\n \n   @Test\n   public void readWriteTransactionTimeout() {\n-    expectedException.expect(SpannerMatchers.isSpannerException(ErrorCode.DEADLINE_EXCEEDED));\n     mockSpanner.setBeginTransactionExecutionTime(ONE_SECOND);\n-    TransactionRunner runner = clientWithTimeout.readWriteTransaction();\n-    long updateCount =\n-        runner.run(\n-            new TransactionCallable<Long>() {\n-              @Override\n-              public Long run(TransactionContext transaction) throws Exception {\n-                return transaction.executeUpdate(UPDATE_STATEMENT);\n-              }\n-            });\n-    assertThat(updateCount, is(equalTo(UPDATE_COUNT)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIwOTQ0MQ=="}, "originalCommit": {"oid": "6bc0fe06f64f146542ce3026bf6576bd452b2a86"}, "originalPosition": 133}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3192, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}