{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0MTY2MTUz", "number": 665, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxMzo1MDo0M1rOFRbxpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xNlQxMDo1MjowNlrOGLEcMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzODI1MTg4OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/clirr-ignored-differences.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxMzo1MDo0M1rOIX3V5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xNlQwMDoxOToxMFrOJuCuYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg5NDg4Nw==", "bodyText": "This change might break customers and probably should have a major version bump.", "url": "https://github.com/googleapis/java-spanner/pull/665#discussion_r561894887", "createdAt": "2021-01-21T13:50:43Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/clirr-ignored-differences.xml", "diffHunk": "@@ -406,4 +406,10 @@\n     <className>com/google/cloud/spanner/AbstractLazyInitializer</className>\n     <method>java.lang.Object initialize()</method>\n   </difference>\n+  \n+  <difference>\n+    <differenceType>7013</differenceType>\n+    <className>com/google/cloud/spanner/InstanceInfo$Builder</className>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e241e257f2624893a18b252b73d5844c54a3fd1f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3MjM2NQ==", "bodyText": "The added method was in an unnecessary abstract builder class. I've removed the abstract class and renamed the concrete subclass to be equal to this abstract class. This way the change is non-breaking. The entry has been removed from ignored-diffs.", "url": "https://github.com/googleapis/java-spanner/pull/665#discussion_r570072365", "createdAt": "2021-02-04T09:31:29Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/clirr-ignored-differences.xml", "diffHunk": "@@ -406,4 +406,10 @@\n     <className>com/google/cloud/spanner/AbstractLazyInitializer</className>\n     <method>java.lang.Object initialize()</method>\n   </difference>\n+  \n+  <difference>\n+    <differenceType>7013</differenceType>\n+    <className>com/google/cloud/spanner/InstanceInfo$Builder</className>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg5NDg4Nw=="}, "originalCommit": {"oid": "e241e257f2624893a18b252b73d5844c54a3fd1f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MjI1ODkxMg==", "bodyText": "Added a default implementation to the method in order to avoid the breaking change.", "url": "https://github.com/googleapis/java-spanner/pull/665#discussion_r652258912", "createdAt": "2021-06-16T00:19:10Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/clirr-ignored-differences.xml", "diffHunk": "@@ -406,4 +406,10 @@\n     <className>com/google/cloud/spanner/AbstractLazyInitializer</className>\n     <method>java.lang.Object initialize()</method>\n   </difference>\n+  \n+  <difference>\n+    <differenceType>7013</differenceType>\n+    <className>com/google/cloud/spanner/InstanceInfo$Builder</className>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg5NDg4Nw=="}, "originalCommit": {"oid": "e241e257f2624893a18b252b73d5844c54a3fd1f"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE0MjU5MjA2OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/InstanceAdminClientImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xNlQxMDo0OTozNlrOJuV97Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xOFQwMToxMDo0M1rOJvxtlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MjU3NDE4OQ==", "bodyText": "This field is superfluous and adds an unnecessary indirection. Inline it. In general, do not use named constants for user visible strings.", "url": "https://github.com/googleapis/java-spanner/pull/665#discussion_r652574189", "createdAt": "2021-06-16T10:49:36Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/InstanceAdminClientImpl.java", "diffHunk": "@@ -47,6 +47,8 @@ protected Policy fromPb(com.google.iam.v1.Policy policyPb) {\n     }\n   }\n \n+  static final String NOT_BOTH_NODE_COUNT_AND_PROCESSING_UNITS =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc178921927d28ceb54ba49f195752c44ce45f82"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDA3NzMzMw==", "bodyText": "Inlined it.", "url": "https://github.com/googleapis/java-spanner/pull/665#discussion_r654077333", "createdAt": "2021-06-18T01:10:43Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/InstanceAdminClientImpl.java", "diffHunk": "@@ -47,6 +47,8 @@ protected Policy fromPb(com.google.iam.v1.Policy policyPb) {\n     }\n   }\n \n+  static final String NOT_BOTH_NODE_COUNT_AND_PROCESSING_UNITS =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MjU3NDE4OQ=="}, "originalCommit": {"oid": "dc178921927d28ceb54ba49f195752c44ce45f82"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE0MjU5NTE3OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/InstanceInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xNlQxMDo1MDoyN1rOJuV_4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xOFQwMToxMTowMlrOJvxt1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MjU3NDY5MA==", "bodyText": "Must or can? If must, then \"Exactly one of\"", "url": "https://github.com/googleapis/java-spanner/pull/665#discussion_r652574690", "createdAt": "2021-06-16T10:50:27Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/InstanceInfo.java", "diffHunk": "@@ -68,8 +77,22 @@ static FieldMask toFieldMask(InstanceField... fields) {\n \n     public abstract Builder setDisplayName(String displayName);\n \n+    /**\n+     * Sets the number of nodes for the instance. Only one of processing units or node count must be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc178921927d28ceb54ba49f195752c44ce45f82"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDA3NzM5OQ==", "bodyText": "Must, changed the wording to \"Exactly one of\"", "url": "https://github.com/googleapis/java-spanner/pull/665#discussion_r654077399", "createdAt": "2021-06-18T01:11:02Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/InstanceInfo.java", "diffHunk": "@@ -68,8 +77,22 @@ static FieldMask toFieldMask(InstanceField... fields) {\n \n     public abstract Builder setDisplayName(String displayName);\n \n+    /**\n+     * Sets the number of nodes for the instance. Only one of processing units or node count must be", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MjU3NDY5MA=="}, "originalCommit": {"oid": "dc178921927d28ceb54ba49f195752c44ce45f82"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE0MjU5NTczOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/InstanceInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xNlQxMDo1MDozNlrOJuWAQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xOFQwMToxMTowOFrOJvxt8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MjU3NDc4Ng==", "bodyText": "ditto", "url": "https://github.com/googleapis/java-spanner/pull/665#discussion_r652574786", "createdAt": "2021-06-16T10:50:36Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/InstanceInfo.java", "diffHunk": "@@ -68,8 +77,22 @@ static FieldMask toFieldMask(InstanceField... fields) {\n \n     public abstract Builder setDisplayName(String displayName);\n \n+    /**\n+     * Sets the number of nodes for the instance. Only one of processing units or node count must be\n+     * set when creating a new instance.\n+     */\n     public abstract Builder setNodeCount(int nodeCount);\n \n+    /**\n+     * Sets the number of processing units for the instance. Only one of processing units or node", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc178921927d28ceb54ba49f195752c44ce45f82"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDA3NzQyNQ==", "bodyText": "Must, changed the wording to \"Exactly one of\"", "url": "https://github.com/googleapis/java-spanner/pull/665#discussion_r654077425", "createdAt": "2021-06-18T01:11:08Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/InstanceInfo.java", "diffHunk": "@@ -68,8 +77,22 @@ static FieldMask toFieldMask(InstanceField... fields) {\n \n     public abstract Builder setDisplayName(String displayName);\n \n+    /**\n+     * Sets the number of nodes for the instance. Only one of processing units or node count must be\n+     * set when creating a new instance.\n+     */\n     public abstract Builder setNodeCount(int nodeCount);\n \n+    /**\n+     * Sets the number of processing units for the instance. Only one of processing units or node", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MjU3NDc4Ng=="}, "originalCommit": {"oid": "dc178921927d28ceb54ba49f195752c44ce45f82"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE0MjU5ODI1OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/InstanceInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xNlQxMDo1MToxMlrOJuWByA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xOFQwMToxMToyNlrOJvxuSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MjU3NTE3Ng==", "bodyText": "i.e. --> \"That is\" per google tech writing style guide", "url": "https://github.com/googleapis/java-spanner/pull/665#discussion_r652575176", "createdAt": "2021-06-16T10:51:12Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/InstanceInfo.java", "diffHunk": "@@ -68,8 +77,22 @@ static FieldMask toFieldMask(InstanceField... fields) {\n \n     public abstract Builder setDisplayName(String displayName);\n \n+    /**\n+     * Sets the number of nodes for the instance. Only one of processing units or node count must be\n+     * set when creating a new instance.\n+     */\n     public abstract Builder setNodeCount(int nodeCount);\n \n+    /**\n+     * Sets the number of processing units for the instance. Only one of processing units or node\n+     * count must be set when creating a new instance. Processing units must be between 1 and 999\n+     * (inclusive) when creating a new instance with node count = 0. Processing units from 1000 and\n+     * up must always be a multiple of 1000 (i.e. equal to an integer number of nodes).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc178921927d28ceb54ba49f195752c44ce45f82"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDA3NzUxNA==", "bodyText": "Changed the wording to \"that is\" instead of \"i.e.\"", "url": "https://github.com/googleapis/java-spanner/pull/665#discussion_r654077514", "createdAt": "2021-06-18T01:11:26Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/InstanceInfo.java", "diffHunk": "@@ -68,8 +77,22 @@ static FieldMask toFieldMask(InstanceField... fields) {\n \n     public abstract Builder setDisplayName(String displayName);\n \n+    /**\n+     * Sets the number of nodes for the instance. Only one of processing units or node count must be\n+     * set when creating a new instance.\n+     */\n     public abstract Builder setNodeCount(int nodeCount);\n \n+    /**\n+     * Sets the number of processing units for the instance. Only one of processing units or node\n+     * count must be set when creating a new instance. Processing units must be between 1 and 999\n+     * (inclusive) when creating a new instance with node count = 0. Processing units from 1000 and\n+     * up must always be a multiple of 1000 (i.e. equal to an integer number of nodes).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MjU3NTE3Ng=="}, "originalCommit": {"oid": "dc178921927d28ceb54ba49f195752c44ce45f82"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDE0MjYwMjcyOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/InstanceAdminClientImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xNlQxMDo1MjowNlrOJuWETw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xOFQwMToxMTo0M1rOJvxuoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MjU3NTgyMw==", "bodyText": "in tests compare against the expected literal value, not a constant from the model code, so the test catches mistakes in constant definitions.", "url": "https://github.com/googleapis/java-spanner/pull/665#discussion_r652575823", "createdAt": "2021-06-16T10:52:06Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/InstanceAdminClientImplTest.java", "diffHunk": "@@ -128,9 +144,49 @@ public void createInstance() throws Exception {\n   }\n \n   @Test\n-  public void getInstance() {\n+  public void testCreateInstanceWithProcessingUnits() throws Exception {\n+    OperationFuture<com.google.spanner.admin.instance.v1.Instance, CreateInstanceMetadata>\n+        rawOperationFuture =\n+            OperationFutureUtil.immediateOperationFuture(\n+                \"createInstance\",\n+                getInstanceProtoWithProcessingUnits(),\n+                CreateInstanceMetadata.getDefaultInstance());\n+    when(rpc.createInstance(\n+            \"projects/\" + PROJECT_ID, INSTANCE_ID, getInstanceProtoWithProcessingUnits()))\n+        .thenReturn(rawOperationFuture);\n+    OperationFuture<Instance, CreateInstanceMetadata> operation =\n+        client.createInstance(\n+            InstanceInfo.newBuilder(InstanceId.of(PROJECT_ID, INSTANCE_ID))\n+                .setInstanceConfigId(InstanceConfigId.of(PROJECT_ID, CONFIG_ID))\n+                .setProcessingUnits(10)\n+                .build());\n+    assertTrue(operation.isDone());\n+    assertEquals(INSTANCE_NAME, operation.get().getId().getName());\n+  }\n+\n+  @Test\n+  public void testCreateInstanceWithBothNodeCountAndProcessingUnits() throws Exception {\n+    try {\n+      client.createInstance(\n+          InstanceInfo.newBuilder(InstanceId.of(PROJECT_ID, INSTANCE_ID))\n+              .setInstanceConfigId(InstanceConfigId.of(PROJECT_ID, CONFIG_ID))\n+              .setNodeCount(1)\n+              .setProcessingUnits(100)\n+              .build());\n+      fail(\"missing expected exception\");\n+    } catch (IllegalArgumentException e) {\n+      assertTrue(\n+          e.getMessage()\n+              .contains(InstanceAdminClientImpl.NOT_BOTH_NODE_COUNT_AND_PROCESSING_UNITS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc178921927d28ceb54ba49f195752c44ce45f82"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDA3NzYwMA==", "bodyText": "Comparing against literal value now.", "url": "https://github.com/googleapis/java-spanner/pull/665#discussion_r654077600", "createdAt": "2021-06-18T01:11:43Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/InstanceAdminClientImplTest.java", "diffHunk": "@@ -128,9 +144,49 @@ public void createInstance() throws Exception {\n   }\n \n   @Test\n-  public void getInstance() {\n+  public void testCreateInstanceWithProcessingUnits() throws Exception {\n+    OperationFuture<com.google.spanner.admin.instance.v1.Instance, CreateInstanceMetadata>\n+        rawOperationFuture =\n+            OperationFutureUtil.immediateOperationFuture(\n+                \"createInstance\",\n+                getInstanceProtoWithProcessingUnits(),\n+                CreateInstanceMetadata.getDefaultInstance());\n+    when(rpc.createInstance(\n+            \"projects/\" + PROJECT_ID, INSTANCE_ID, getInstanceProtoWithProcessingUnits()))\n+        .thenReturn(rawOperationFuture);\n+    OperationFuture<Instance, CreateInstanceMetadata> operation =\n+        client.createInstance(\n+            InstanceInfo.newBuilder(InstanceId.of(PROJECT_ID, INSTANCE_ID))\n+                .setInstanceConfigId(InstanceConfigId.of(PROJECT_ID, CONFIG_ID))\n+                .setProcessingUnits(10)\n+                .build());\n+    assertTrue(operation.isDone());\n+    assertEquals(INSTANCE_NAME, operation.get().getId().getName());\n+  }\n+\n+  @Test\n+  public void testCreateInstanceWithBothNodeCountAndProcessingUnits() throws Exception {\n+    try {\n+      client.createInstance(\n+          InstanceInfo.newBuilder(InstanceId.of(PROJECT_ID, INSTANCE_ID))\n+              .setInstanceConfigId(InstanceConfigId.of(PROJECT_ID, CONFIG_ID))\n+              .setNodeCount(1)\n+              .setProcessingUnits(100)\n+              .build());\n+      fail(\"missing expected exception\");\n+    } catch (IllegalArgumentException e) {\n+      assertTrue(\n+          e.getMessage()\n+              .contains(InstanceAdminClientImpl.NOT_BOTH_NODE_COUNT_AND_PROCESSING_UNITS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MjU3NTgyMw=="}, "originalCommit": {"oid": "dc178921927d28ceb54ba49f195752c44ce45f82"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3248, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}