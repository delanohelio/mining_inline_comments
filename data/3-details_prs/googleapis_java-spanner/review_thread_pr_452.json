{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxNTAwNDMw", "number": 452, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNzoxNTozNVrOEpWD7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwODo1Nzo1N1rOFOklgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNzg4NTI2OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITPitrUpdateDatabaseTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNzoxNTozNVrOHa9YHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMDo0NTo0MFrOHbpNuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAzMDYyMg==", "bodyText": "This query will list the OPTION_VALUE of all databases on the test instance. If this test is executed against an existing instance with multiple databases having a version_retention_period, it could fail.", "url": "https://github.com/googleapis/java-spanner/pull/452#discussion_r498030622", "createdAt": "2020-10-01T07:15:35Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITPitrUpdateDatabaseTest.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.cloud.spanner.testing.EmulatorSpannerHelper.isUsingEmulator;\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.fail;\n+import static org.junit.Assume.assumeFalse;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.ErrorCode;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.SpannerException;\n+import com.google.cloud.spanner.Statement;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.threeten.bp.Duration;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITPitrUpdateDatabaseTest {\n+\n+  private static final Duration OPERATION_TIMEOUT = Duration.ofMinutes(2);\n+  private static final String VERSION_RETENTION_PERIOD = \"7d\";\n+\n+  @ClassRule public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static DatabaseAdminClient dbAdminClient;\n+  private static DatabaseClient dbClient;\n+  private static String instanceId;\n+  private static String databaseId;\n+\n+  @BeforeClass\n+  public static void setUp() throws Exception {\n+    assumeFalse(\"PITR-lite features are not supported by the emulator\", isUsingEmulator());\n+\n+    final RemoteSpannerHelper testHelper = env.getTestHelper();\n+    final String projectId = testHelper.getOptions().getProjectId();\n+    instanceId = testHelper.getInstanceId().getInstance();\n+    databaseId = testHelper.getUniqueDatabaseId();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+\n+    createDatabase(dbAdminClient, instanceId, databaseId, Collections.<String>emptyList());\n+    updateVersionRetentionPeriod(dbAdminClient, instanceId, databaseId, VERSION_RETENTION_PERIOD);\n+\n+    dbClient =\n+        testHelper.getClient().getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() {\n+    if (!isUsingEmulator()) {\n+      dbAdminClient.dropDatabase(instanceId, databaseId);\n+    }\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughGetDatabase() {\n+    final Database database = dbAdminClient.getDatabase(instanceId, databaseId);\n+\n+    assertThat(database.getVersionRetentionPeriod()).isEqualTo(VERSION_RETENTION_PERIOD);\n+    assertThat(database.getEarliestVersionTime()).isNotNull();\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughListDatabases() {\n+    final Page<Database> page = dbAdminClient.listDatabases(instanceId);\n+\n+    for (Database database : page.iterateAll()) {\n+      if (!database.getId().getDatabase().equals(databaseId)) {\n+        continue;\n+      }\n+      assertThat(database.getVersionRetentionPeriod()).isEqualTo(VERSION_RETENTION_PERIOD);\n+      assertThat(database.getEarliestVersionTime()).isNotNull();\n+    }\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughGetDatabaseDdl() {\n+    final List<String> ddls = dbAdminClient.getDatabaseDdl(instanceId, databaseId);\n+\n+    boolean hasVersionRetentionPeriodStatement = false;\n+    for (String ddl : ddls) {\n+      hasVersionRetentionPeriodStatement =\n+          ddl.contains(\"version_retention_period = '\" + VERSION_RETENTION_PERIOD + \"'\");\n+      if (hasVersionRetentionPeriodStatement) {\n+        break;\n+      }\n+    }\n+    assertThat(hasVersionRetentionPeriodStatement).isTrue();\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughInformationSchema() {\n+    final ResultSet rs =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6abbab71ff4273cf0e6322c2f052dc6bedf1cfb"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU1NDI0Nw==", "bodyText": "I am wondering how could this happen, since I am using the dbClient for which we need to specify a database to create. Or maybe I am missing something?\nThat query is also mentioned in the pitr-lite specification on how to get the version_retention_period of a database, but I wonder if we missed something. In the current tests, specifying the schema_name as '' works in our internal tests.", "url": "https://github.com/googleapis/java-spanner/pull/452#discussion_r498554247", "createdAt": "2020-10-01T23:08:12Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITPitrUpdateDatabaseTest.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.cloud.spanner.testing.EmulatorSpannerHelper.isUsingEmulator;\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.fail;\n+import static org.junit.Assume.assumeFalse;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.ErrorCode;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.SpannerException;\n+import com.google.cloud.spanner.Statement;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.threeten.bp.Duration;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITPitrUpdateDatabaseTest {\n+\n+  private static final Duration OPERATION_TIMEOUT = Duration.ofMinutes(2);\n+  private static final String VERSION_RETENTION_PERIOD = \"7d\";\n+\n+  @ClassRule public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static DatabaseAdminClient dbAdminClient;\n+  private static DatabaseClient dbClient;\n+  private static String instanceId;\n+  private static String databaseId;\n+\n+  @BeforeClass\n+  public static void setUp() throws Exception {\n+    assumeFalse(\"PITR-lite features are not supported by the emulator\", isUsingEmulator());\n+\n+    final RemoteSpannerHelper testHelper = env.getTestHelper();\n+    final String projectId = testHelper.getOptions().getProjectId();\n+    instanceId = testHelper.getInstanceId().getInstance();\n+    databaseId = testHelper.getUniqueDatabaseId();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+\n+    createDatabase(dbAdminClient, instanceId, databaseId, Collections.<String>emptyList());\n+    updateVersionRetentionPeriod(dbAdminClient, instanceId, databaseId, VERSION_RETENTION_PERIOD);\n+\n+    dbClient =\n+        testHelper.getClient().getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() {\n+    if (!isUsingEmulator()) {\n+      dbAdminClient.dropDatabase(instanceId, databaseId);\n+    }\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughGetDatabase() {\n+    final Database database = dbAdminClient.getDatabase(instanceId, databaseId);\n+\n+    assertThat(database.getVersionRetentionPeriod()).isEqualTo(VERSION_RETENTION_PERIOD);\n+    assertThat(database.getEarliestVersionTime()).isNotNull();\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughListDatabases() {\n+    final Page<Database> page = dbAdminClient.listDatabases(instanceId);\n+\n+    for (Database database : page.iterateAll()) {\n+      if (!database.getId().getDatabase().equals(databaseId)) {\n+        continue;\n+      }\n+      assertThat(database.getVersionRetentionPeriod()).isEqualTo(VERSION_RETENTION_PERIOD);\n+      assertThat(database.getEarliestVersionTime()).isNotNull();\n+    }\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughGetDatabaseDdl() {\n+    final List<String> ddls = dbAdminClient.getDatabaseDdl(instanceId, databaseId);\n+\n+    boolean hasVersionRetentionPeriodStatement = false;\n+    for (String ddl : ddls) {\n+      hasVersionRetentionPeriodStatement =\n+          ddl.contains(\"version_retention_period = '\" + VERSION_RETENTION_PERIOD + \"'\");\n+      if (hasVersionRetentionPeriodStatement) {\n+        break;\n+      }\n+    }\n+    assertThat(hasVersionRetentionPeriodStatement).isTrue();\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughInformationSchema() {\n+    final ResultSet rs =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAzMDYyMg=="}, "originalCommit": {"oid": "e6abbab71ff4273cf0e6322c2f052dc6bedf1cfb"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc0ODg1Nw==", "bodyText": "Sorry, you're completely right. I forgot that the INFORMATION_SCHEMA is always database-specific.", "url": "https://github.com/googleapis/java-spanner/pull/452#discussion_r498748857", "createdAt": "2020-10-02T10:45:40Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITPitrUpdateDatabaseTest.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.cloud.spanner.testing.EmulatorSpannerHelper.isUsingEmulator;\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.fail;\n+import static org.junit.Assume.assumeFalse;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.ErrorCode;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.SpannerException;\n+import com.google.cloud.spanner.Statement;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.threeten.bp.Duration;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITPitrUpdateDatabaseTest {\n+\n+  private static final Duration OPERATION_TIMEOUT = Duration.ofMinutes(2);\n+  private static final String VERSION_RETENTION_PERIOD = \"7d\";\n+\n+  @ClassRule public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static DatabaseAdminClient dbAdminClient;\n+  private static DatabaseClient dbClient;\n+  private static String instanceId;\n+  private static String databaseId;\n+\n+  @BeforeClass\n+  public static void setUp() throws Exception {\n+    assumeFalse(\"PITR-lite features are not supported by the emulator\", isUsingEmulator());\n+\n+    final RemoteSpannerHelper testHelper = env.getTestHelper();\n+    final String projectId = testHelper.getOptions().getProjectId();\n+    instanceId = testHelper.getInstanceId().getInstance();\n+    databaseId = testHelper.getUniqueDatabaseId();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+\n+    createDatabase(dbAdminClient, instanceId, databaseId, Collections.<String>emptyList());\n+    updateVersionRetentionPeriod(dbAdminClient, instanceId, databaseId, VERSION_RETENTION_PERIOD);\n+\n+    dbClient =\n+        testHelper.getClient().getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() {\n+    if (!isUsingEmulator()) {\n+      dbAdminClient.dropDatabase(instanceId, databaseId);\n+    }\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughGetDatabase() {\n+    final Database database = dbAdminClient.getDatabase(instanceId, databaseId);\n+\n+    assertThat(database.getVersionRetentionPeriod()).isEqualTo(VERSION_RETENTION_PERIOD);\n+    assertThat(database.getEarliestVersionTime()).isNotNull();\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughListDatabases() {\n+    final Page<Database> page = dbAdminClient.listDatabases(instanceId);\n+\n+    for (Database database : page.iterateAll()) {\n+      if (!database.getId().getDatabase().equals(databaseId)) {\n+        continue;\n+      }\n+      assertThat(database.getVersionRetentionPeriod()).isEqualTo(VERSION_RETENTION_PERIOD);\n+      assertThat(database.getEarliestVersionTime()).isNotNull();\n+    }\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughGetDatabaseDdl() {\n+    final List<String> ddls = dbAdminClient.getDatabaseDdl(instanceId, databaseId);\n+\n+    boolean hasVersionRetentionPeriodStatement = false;\n+    for (String ddl : ddls) {\n+      hasVersionRetentionPeriodStatement =\n+          ddl.contains(\"version_retention_period = '\" + VERSION_RETENTION_PERIOD + \"'\");\n+      if (hasVersionRetentionPeriodStatement) {\n+        break;\n+      }\n+    }\n+    assertThat(hasVersionRetentionPeriodStatement).isTrue();\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughInformationSchema() {\n+    final ResultSet rs =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAzMDYyMg=="}, "originalCommit": {"oid": "e6abbab71ff4273cf0e6322c2f052dc6bedf1cfb"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNzg5MDAwOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITPitrUpdateDatabaseTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNzoxNjo1NVrOHa9a-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMzoxMDozOVrOHbdYFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAzMTM1NA==", "bodyText": "nit: The ResultSet is created using a single-use read context and it is fully consumed, so it will be closed, but I would say that it is good practice to always close the ResultSet when you are done with it.", "url": "https://github.com/googleapis/java-spanner/pull/452#discussion_r498031354", "createdAt": "2020-10-01T07:16:55Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITPitrUpdateDatabaseTest.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.cloud.spanner.testing.EmulatorSpannerHelper.isUsingEmulator;\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.fail;\n+import static org.junit.Assume.assumeFalse;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.ErrorCode;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.SpannerException;\n+import com.google.cloud.spanner.Statement;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.threeten.bp.Duration;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITPitrUpdateDatabaseTest {\n+\n+  private static final Duration OPERATION_TIMEOUT = Duration.ofMinutes(2);\n+  private static final String VERSION_RETENTION_PERIOD = \"7d\";\n+\n+  @ClassRule public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static DatabaseAdminClient dbAdminClient;\n+  private static DatabaseClient dbClient;\n+  private static String instanceId;\n+  private static String databaseId;\n+\n+  @BeforeClass\n+  public static void setUp() throws Exception {\n+    assumeFalse(\"PITR-lite features are not supported by the emulator\", isUsingEmulator());\n+\n+    final RemoteSpannerHelper testHelper = env.getTestHelper();\n+    final String projectId = testHelper.getOptions().getProjectId();\n+    instanceId = testHelper.getInstanceId().getInstance();\n+    databaseId = testHelper.getUniqueDatabaseId();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+\n+    createDatabase(dbAdminClient, instanceId, databaseId, Collections.<String>emptyList());\n+    updateVersionRetentionPeriod(dbAdminClient, instanceId, databaseId, VERSION_RETENTION_PERIOD);\n+\n+    dbClient =\n+        testHelper.getClient().getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() {\n+    if (!isUsingEmulator()) {\n+      dbAdminClient.dropDatabase(instanceId, databaseId);\n+    }\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughGetDatabase() {\n+    final Database database = dbAdminClient.getDatabase(instanceId, databaseId);\n+\n+    assertThat(database.getVersionRetentionPeriod()).isEqualTo(VERSION_RETENTION_PERIOD);\n+    assertThat(database.getEarliestVersionTime()).isNotNull();\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughListDatabases() {\n+    final Page<Database> page = dbAdminClient.listDatabases(instanceId);\n+\n+    for (Database database : page.iterateAll()) {\n+      if (!database.getId().getDatabase().equals(databaseId)) {\n+        continue;\n+      }\n+      assertThat(database.getVersionRetentionPeriod()).isEqualTo(VERSION_RETENTION_PERIOD);\n+      assertThat(database.getEarliestVersionTime()).isNotNull();\n+    }\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughGetDatabaseDdl() {\n+    final List<String> ddls = dbAdminClient.getDatabaseDdl(instanceId, databaseId);\n+\n+    boolean hasVersionRetentionPeriodStatement = false;\n+    for (String ddl : ddls) {\n+      hasVersionRetentionPeriodStatement =\n+          ddl.contains(\"version_retention_period = '\" + VERSION_RETENTION_PERIOD + \"'\");\n+      if (hasVersionRetentionPeriodStatement) {\n+        break;\n+      }\n+    }\n+    assertThat(hasVersionRetentionPeriodStatement).isTrue();\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughInformationSchema() {\n+    final ResultSet rs =\n+        dbClient\n+            .singleUse()\n+            .executeQuery(\n+                Statement.of(\n+                    \"SELECT OPTION_VALUE AS version_retention_period \"\n+                        + \"FROM INFORMATION_SCHEMA.DATABASE_OPTIONS \"\n+                        + \"WHERE SCHEMA_NAME = '' AND OPTION_NAME = 'version_retention_period'\"));\n+\n+    String versionRetentionPeriod = null;\n+    while (rs.next()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6abbab71ff4273cf0e6322c2f052dc6bedf1cfb"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU1NDkwMw==", "bodyText": "Good point, added the close call.", "url": "https://github.com/googleapis/java-spanner/pull/452#discussion_r498554903", "createdAt": "2020-10-01T23:10:39Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITPitrUpdateDatabaseTest.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.cloud.spanner.testing.EmulatorSpannerHelper.isUsingEmulator;\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.fail;\n+import static org.junit.Assume.assumeFalse;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.ErrorCode;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.ResultSet;\n+import com.google.cloud.spanner.SpannerException;\n+import com.google.cloud.spanner.Statement;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.threeten.bp.Duration;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITPitrUpdateDatabaseTest {\n+\n+  private static final Duration OPERATION_TIMEOUT = Duration.ofMinutes(2);\n+  private static final String VERSION_RETENTION_PERIOD = \"7d\";\n+\n+  @ClassRule public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static DatabaseAdminClient dbAdminClient;\n+  private static DatabaseClient dbClient;\n+  private static String instanceId;\n+  private static String databaseId;\n+\n+  @BeforeClass\n+  public static void setUp() throws Exception {\n+    assumeFalse(\"PITR-lite features are not supported by the emulator\", isUsingEmulator());\n+\n+    final RemoteSpannerHelper testHelper = env.getTestHelper();\n+    final String projectId = testHelper.getOptions().getProjectId();\n+    instanceId = testHelper.getInstanceId().getInstance();\n+    databaseId = testHelper.getUniqueDatabaseId();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+\n+    createDatabase(dbAdminClient, instanceId, databaseId, Collections.<String>emptyList());\n+    updateVersionRetentionPeriod(dbAdminClient, instanceId, databaseId, VERSION_RETENTION_PERIOD);\n+\n+    dbClient =\n+        testHelper.getClient().getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() {\n+    if (!isUsingEmulator()) {\n+      dbAdminClient.dropDatabase(instanceId, databaseId);\n+    }\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughGetDatabase() {\n+    final Database database = dbAdminClient.getDatabase(instanceId, databaseId);\n+\n+    assertThat(database.getVersionRetentionPeriod()).isEqualTo(VERSION_RETENTION_PERIOD);\n+    assertThat(database.getEarliestVersionTime()).isNotNull();\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughListDatabases() {\n+    final Page<Database> page = dbAdminClient.listDatabases(instanceId);\n+\n+    for (Database database : page.iterateAll()) {\n+      if (!database.getId().getDatabase().equals(databaseId)) {\n+        continue;\n+      }\n+      assertThat(database.getVersionRetentionPeriod()).isEqualTo(VERSION_RETENTION_PERIOD);\n+      assertThat(database.getEarliestVersionTime()).isNotNull();\n+    }\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughGetDatabaseDdl() {\n+    final List<String> ddls = dbAdminClient.getDatabaseDdl(instanceId, databaseId);\n+\n+    boolean hasVersionRetentionPeriodStatement = false;\n+    for (String ddl : ddls) {\n+      hasVersionRetentionPeriodStatement =\n+          ddl.contains(\"version_retention_period = '\" + VERSION_RETENTION_PERIOD + \"'\");\n+      if (hasVersionRetentionPeriodStatement) {\n+        break;\n+      }\n+    }\n+    assertThat(hasVersionRetentionPeriodStatement).isTrue();\n+  }\n+\n+  @Test\n+  public void returnsTheVersionRetentionPeriodSetThroughInformationSchema() {\n+    final ResultSet rs =\n+        dbClient\n+            .singleUse()\n+            .executeQuery(\n+                Statement.of(\n+                    \"SELECT OPTION_VALUE AS version_retention_period \"\n+                        + \"FROM INFORMATION_SCHEMA.DATABASE_OPTIONS \"\n+                        + \"WHERE SCHEMA_NAME = '' AND OPTION_NAME = 'version_retention_period'\"));\n+\n+    String versionRetentionPeriod = null;\n+    while (rs.next()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAzMTM1NA=="}, "originalCommit": {"oid": "e6abbab71ff4273cf0e6322c2f052dc6bedf1cfb"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTQ5NzcyOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo0NTowOVrOH5rDwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTo0MzozN1rOH6I-cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIzNjM1Mw==", "bodyText": "nit: Could we have a more elaborate comment on this method? And also for getEarliestVersionTime. I don't think everyone will understand what these fields mean.", "url": "https://github.com/googleapis/java-spanner/pull/452#discussion_r530236353", "createdAt": "2020-11-25T09:45:09Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseInfo.java", "diffHunk": "@@ -129,6 +155,16 @@ public Timestamp getCreateTime() {\n     return createTime;\n   }\n \n+  /** Returns the version retention period of the database. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b39676f42716a90b8f3f18ceb97e3271d55314b3"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyNjUxNQ==", "bodyText": "Added more information to both params, let me know if there are satisfactory.", "url": "https://github.com/googleapis/java-spanner/pull/452#discussion_r530726515", "createdAt": "2020-11-26T01:43:37Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseInfo.java", "diffHunk": "@@ -129,6 +155,16 @@ public Timestamp getCreateTime() {\n     return createTime;\n   }\n \n+  /** Returns the version retention period of the database. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIzNjM1Mw=="}, "originalCommit": {"oid": "b39676f42716a90b8f3f18ceb97e3271d55314b3"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODIyOTI3OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwODo1NjozN1rOITaqwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwNzoyMDozN1rOIUF0Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzIzMDc4NQ==", "bodyText": "nit: Should we consider naming this variable databaseVersionTime to make it clearer that this relates to the version of the database that is being / has been backed up?", "url": "https://github.com/googleapis/java-spanner/pull/452#discussion_r557230785", "createdAt": "2021-01-14T08:56:37Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "diffHunk": "@@ -55,6 +67,7 @@\n     protected final BackupId id;\n     private State state = State.UNSPECIFIED;\n     private Timestamp expireTime;\n+    private Timestamp versionTime;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7b616ced2de136773246e76f95a2687db27611"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzgwNzk2NQ==", "bodyText": "I am trying to keep the naming one to one with the proto fields. I did try to add some javadoc in the setVersionTime that explains more about the field.\nLet me know if this is not clear enough though, and I could make this change.", "url": "https://github.com/googleapis/java-spanner/pull/452#discussion_r557807965", "createdAt": "2021-01-15T01:36:00Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "diffHunk": "@@ -55,6 +67,7 @@\n     protected final BackupId id;\n     private State state = State.UNSPECIFIED;\n     private Timestamp expireTime;\n+    private Timestamp versionTime;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzIzMDc4NQ=="}, "originalCommit": {"oid": "6e7b616ced2de136773246e76f95a2687db27611"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzkzNzczMQ==", "bodyText": "I am trying to keep the naming one to one with the proto fields.\n\nThat is reasonable and also makes it easier for users to search for documentation online.", "url": "https://github.com/googleapis/java-spanner/pull/452#discussion_r557937731", "createdAt": "2021-01-15T07:20:37Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "diffHunk": "@@ -55,6 +67,7 @@\n     protected final BackupId id;\n     private State state = State.UNSPECIFIED;\n     private Timestamp expireTime;\n+    private Timestamp versionTime;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzIzMDc4NQ=="}, "originalCommit": {"oid": "6e7b616ced2de136773246e76f95a2687db27611"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODIzODEwOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/Database.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwODo1Nzo1N1rOITawaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwMTozNjoxNFrOIT95oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzIzMjIzMg==", "bodyText": "nit: Wouldn't it be better to make the builder accept null values instead of having to wrap these calls in if-statements every time it is set?", "url": "https://github.com/googleapis/java-spanner/pull/452#discussion_r557232232", "createdAt": "2021-01-14T08:57:57Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/Database.java", "diffHunk": "@@ -118,8 +118,17 @@ public boolean exists() {\n     Preconditions.checkArgument(\n         backup.getInstanceId().equals(getId().getInstanceId()),\n         \"The instance of the backup must be equal to the instance of this database.\");\n-    return dbClient.createBackup(\n-        instance(), backup.getId().getBackup(), database(), backup.getExpireTime());\n+\n+    final BackupInfo.Builder backupBuilder =\n+        dbClient\n+            .newBackupBuilder(backup.getId())\n+            .setDatabase(getId())\n+            .setExpireTime(backup.getExpireTime());\n+    if (backup.getVersionTime() != null) {\n+      backupBuilder.setVersionTime(backup.getVersionTime());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e7b616ced2de136773246e76f95a2687db27611"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzgwODAzMg==", "bodyText": "Good point, made this change.", "url": "https://github.com/googleapis/java-spanner/pull/452#discussion_r557808032", "createdAt": "2021-01-15T01:36:14Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/Database.java", "diffHunk": "@@ -118,8 +118,17 @@ public boolean exists() {\n     Preconditions.checkArgument(\n         backup.getInstanceId().equals(getId().getInstanceId()),\n         \"The instance of the backup must be equal to the instance of this database.\");\n-    return dbClient.createBackup(\n-        instance(), backup.getId().getBackup(), database(), backup.getExpireTime());\n+\n+    final BackupInfo.Builder backupBuilder =\n+        dbClient\n+            .newBackupBuilder(backup.getId())\n+            .setDatabase(getId())\n+            .setExpireTime(backup.getExpireTime());\n+    if (backup.getVersionTime() != null) {\n+      backupBuilder.setVersionTime(backup.getVersionTime());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzIzMjIzMg=="}, "originalCommit": {"oid": "6e7b616ced2de136773246e76f95a2687db27611"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3337, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}