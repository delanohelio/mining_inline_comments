{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1NDA4MjA2", "number": 666, "title": "feat!: customer-managed encryption keys for Spanner", "bodyText": "Implements CMEK functionality for Spanner.", "createdAt": "2020-11-23T02:21:35Z", "url": "https://github.com/googleapis/java-spanner/pull/666", "merged": true, "mergeCommit": {"oid": "8338116dffe847931cae1212333af04338ea1d45"}, "closed": true, "closedAt": "2021-03-18T04:58:43Z", "author": {"login": "thiagotnunes"}, "timelineItems": {"totalCount": 54, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfjA4wAFqTUzNzA5MDg4OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABeEKBdmAH2gAyNTI1NDA4MjA2OjA5ZmI4NTA3MDk2ODBiZGMxZjlkNmU0MDA3N2ZlNzNlMDg5NjQ5YTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MDkwODg5", "url": "https://github.com/googleapis/java-spanner/pull/666#pullrequestreview-537090889", "createdAt": "2020-11-24T05:36:28Z", "commit": {"oid": "1b85d7e96ff78524dad4766e6c09527ea4a39cd2"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTozNjoyOFrOH4sqsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTozNjozMVrOH4sqzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIxNDEyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n          \n          \n            \n              public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n          \n          \n            \n            \n          \n          \n            \n              @ClassRule\n          \n          \n            \n              public static final String SPANNER_PRODUCTION_ACCOUNT =\n          \n          \n            \n                  \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n          \n          \n            \n              public static final String KMS_KEY_ENCRYPTER_DECRYPTER =\n          \n          \n            \n                  \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n          \n          \n            \n              @ClassRule public static IntegrationTestEnv env = new IntegrationTestEnv();", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529214128", "createdAt": "2020-11-24T05:36:28Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b85d7e96ff78524dad4766e6c09527ea4a39cd2"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIxNDEzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  dbAdminClient\n          \n          \n            \n                      .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());\n          \n          \n            \n                  dbAdminClient.dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529214134", "createdAt": "2020-11-24T05:36:29Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    // for (CryptoKey key : keys) {\n+    //   for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+    //       .iterateAll()) {\n+    //     kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+    //   }\n+    // }\n+    for (DatabaseId db : dbs) {\n+      dbAdminClient\n+          .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b85d7e96ff78524dad4766e6c09527ea4a39cd2"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIxNDEzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n          \n          \n            \n                final InstanceId instanceId = testHelper.getInstanceId();\n          \n          \n            \n                final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n          \n          \n            \n                final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n          \n          \n            \n                final String backupId = randomBackupId();\n          \n          \n            \n            \n          \n          \n            \n                final CryptoKey key = createKey(randomKeyId());\n          \n          \n            \n                final Database sourceDatabase = dbAdminClient\n          \n          \n            \n                    .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n          \n          \n            \n                    .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n          \n          \n            \n                    .build();\n          \n          \n            \n                final Backup backup = dbAdminClient\n          \n          \n            \n                    .newBackupBuilder(BackupId.of(\n          \n          \n            \n                        testHelper.getInstanceId(),\n          \n          \n            \n                        backupId\n          \n          \n            \n                    ))\n          \n          \n            \n                    .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n          \n          \n            \n                    .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n          \n          \n            \n                    .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n          \n          \n            \n                    .build();\n          \n          \n            \n                final Restore restore = dbAdminClient\n          \n          \n            \n              public void createsEncryptedDatabaseBackupAndRestore()\n          \n          \n            \n                  throws ExecutionException, InterruptedException {\n          \n          \n            \n                final Database sourceDatabase =\n          \n          \n            \n                    dbAdminClient\n          \n          \n            \n                        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n          \n          \n            \n                        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n          \n          \n            \n                        .build();\n          \n          \n            \n                final Backup backup =\n          \n          \n            \n                    dbAdminClient\n          \n          \n            \n                        .newBackupBuilder(BackupId.of(testHelper.getInstanceId(), backupId))\n          \n          \n            \n                        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n          \n          \n            \n                        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n          \n          \n            \n                        .setExpireTime(\n          \n          \n            \n                            com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n          \n          \n            \n                        .build();\n          \n          \n            \n                final Restore restore =\n          \n          \n            \n                    dbAdminClient\n          \n          \n            \n                        .newRestoreBuilder(\n          \n          \n            \n                            BackupId.of(testHelper.getInstanceId(), backupId),\n          \n          \n            \n                            DatabaseId.of(testHelper.getInstanceId(), destinationDatabaseId))\n          \n          \n            \n                        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n          \n          \n            \n                        .build();", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529214138", "createdAt": "2020-11-24T05:36:29Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    // for (CryptoKey key : keys) {\n+    //   for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+    //       .iterateAll()) {\n+    //     kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+    //   }\n+    // }\n+    for (DatabaseId db : dbs) {\n+      dbAdminClient\n+          .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());\n+    }\n+    for (BackupId backup : backups) {\n+      dbAdminClient.deleteBackup(backup.getInstanceId().getInstance(), backup.getBackup());\n+    }\n+    kmsClient.close();\n+  }\n+\n+  @Test\n+  public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n+    final InstanceId instanceId = testHelper.getInstanceId();\n+    final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String backupId = randomBackupId();\n+\n+    final CryptoKey key = createKey(randomKeyId());\n+    final Database sourceDatabase = dbAdminClient\n+        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+    final Backup backup = dbAdminClient\n+        .newBackupBuilder(BackupId.of(\n+            testHelper.getInstanceId(),\n+            backupId\n+        ))\n+        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n+        .build();\n+    final Restore restore = dbAdminClient", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b85d7e96ff78524dad4766e6c09527ea4a39cd2"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIxNDE0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final LocationName locationName = LocationName.of(\n          \n          \n            \n                    testHelper.getOptions().getProjectId(),\n          \n          \n            \n                    KMS_KEY_LOCATION\n          \n          \n            \n                );\n          \n          \n            \n                final KeyRing keyRing = createOrRetrieveKeyRing(locationName);\n          \n          \n            \n                final Timestamp.Builder rotationTime = Timestamp\n          \n          \n            \n                    .newBuilder()\n          \n          \n            \n                    .setSeconds(after7DaysInSeconds());\n          \n          \n            \n            \n          \n          \n            \n                final CryptoKey cryptoKeyInput = CryptoKey.newBuilder()\n          \n          \n            \n                    .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n          \n          \n            \n                    .setNextRotationTime(rotationTime)\n          \n          \n            \n                    .build();\n          \n          \n            \n                final CryptoKey cryptoKey = kmsClient\n          \n          \n            \n                    .createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n          \n          \n            \n            \n          \n          \n            \n                final Policy policy = kmsClient.getIamPolicy(cryptoKey.getName());\n          \n          \n            \n                final Binding binding = Binding\n          \n          \n            \n                final LocationName locationName =\n          \n          \n            \n                    LocationName.of(testHelper.getOptions().getProjectId(), KMS_KEY_LOCATION);\n          \n          \n            \n                final Timestamp.Builder rotationTime = Timestamp.newBuilder().setSeconds(after7DaysInSeconds());\n          \n          \n            \n                final CryptoKey cryptoKeyInput =\n          \n          \n            \n                    CryptoKey.newBuilder()\n          \n          \n            \n                        .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n          \n          \n            \n                        .setNextRotationTime(rotationTime)\n          \n          \n            \n                        .build();\n          \n          \n            \n                final CryptoKey cryptoKey =\n          \n          \n            \n                    kmsClient.createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n          \n          \n            \n                final Binding binding =\n          \n          \n            \n                    Binding.newBuilder()\n          \n          \n            \n                        .addMembers(SPANNER_PRODUCTION_ACCOUNT)\n          \n          \n            \n                        .setRole(KMS_KEY_ENCRYPTER_DECRYPTER)\n          \n          \n            \n                        .build();", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529214144", "createdAt": "2020-11-24T05:36:30Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    // for (CryptoKey key : keys) {\n+    //   for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+    //       .iterateAll()) {\n+    //     kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+    //   }\n+    // }\n+    for (DatabaseId db : dbs) {\n+      dbAdminClient\n+          .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());\n+    }\n+    for (BackupId backup : backups) {\n+      dbAdminClient.deleteBackup(backup.getInstanceId().getInstance(), backup.getBackup());\n+    }\n+    kmsClient.close();\n+  }\n+\n+  @Test\n+  public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n+    final InstanceId instanceId = testHelper.getInstanceId();\n+    final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String backupId = randomBackupId();\n+\n+    final CryptoKey key = createKey(randomKeyId());\n+    final Database sourceDatabase = dbAdminClient\n+        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+    final Backup backup = dbAdminClient\n+        .newBackupBuilder(BackupId.of(\n+            testHelper.getInstanceId(),\n+            backupId\n+        ))\n+        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n+        .build();\n+    final Restore restore = dbAdminClient\n+        .newRestoreBuilder(\n+            BackupId.of(testHelper.getInstanceId(), backupId),\n+            DatabaseId.of(testHelper.getInstanceId(), destinationDatabaseId)\n+        )\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+\n+    final Database createdDatabase = createDatabase(sourceDatabase);\n+    final Backup createdBackup = createBackup(backup);\n+    final Database restoredDatabase = restoreDatabase(restore);\n+\n+    assertThat(createdDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(createdDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+    assertThat(createdBackup.getEncryptionInfo().getKmsKeyVersion()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+  }\n+\n+  private String randomKeyId() {\n+    return KMS_KEY_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private String randomBackupId() {\n+    return BACKUP_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private CryptoKey createKey(final String keyId) {\n+    final LocationName locationName = LocationName.of(\n+        testHelper.getOptions().getProjectId(),\n+        KMS_KEY_LOCATION\n+    );\n+    final KeyRing keyRing = createOrRetrieveKeyRing(locationName);\n+    final Timestamp.Builder rotationTime = Timestamp\n+        .newBuilder()\n+        .setSeconds(after7DaysInSeconds());\n+\n+    final CryptoKey cryptoKeyInput = CryptoKey.newBuilder()\n+        .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n+        .setNextRotationTime(rotationTime)\n+        .build();\n+    final CryptoKey cryptoKey = kmsClient\n+        .createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n+\n+    final Policy policy = kmsClient.getIamPolicy(cryptoKey.getName());\n+    final Binding binding = Binding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b85d7e96ff78524dad4766e6c09527ea4a39cd2"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIxNDE0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    TimeUnit.MILLISECONDS\n          \n          \n            \n                );\n          \n          \n            \n              }\n          \n          \n            \n                    TimeUnit.MILLISECONDS);\n          \n          \n            \n                      KeyRingName.of(locationName.getProject(), locationName.getLocation(), KMS_KEY_RING_ID));", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529214148", "createdAt": "2020-11-24T05:36:30Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    // for (CryptoKey key : keys) {\n+    //   for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+    //       .iterateAll()) {\n+    //     kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+    //   }\n+    // }\n+    for (DatabaseId db : dbs) {\n+      dbAdminClient\n+          .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());\n+    }\n+    for (BackupId backup : backups) {\n+      dbAdminClient.deleteBackup(backup.getInstanceId().getInstance(), backup.getBackup());\n+    }\n+    kmsClient.close();\n+  }\n+\n+  @Test\n+  public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n+    final InstanceId instanceId = testHelper.getInstanceId();\n+    final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String backupId = randomBackupId();\n+\n+    final CryptoKey key = createKey(randomKeyId());\n+    final Database sourceDatabase = dbAdminClient\n+        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+    final Backup backup = dbAdminClient\n+        .newBackupBuilder(BackupId.of(\n+            testHelper.getInstanceId(),\n+            backupId\n+        ))\n+        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n+        .build();\n+    final Restore restore = dbAdminClient\n+        .newRestoreBuilder(\n+            BackupId.of(testHelper.getInstanceId(), backupId),\n+            DatabaseId.of(testHelper.getInstanceId(), destinationDatabaseId)\n+        )\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+\n+    final Database createdDatabase = createDatabase(sourceDatabase);\n+    final Backup createdBackup = createBackup(backup);\n+    final Database restoredDatabase = restoreDatabase(restore);\n+\n+    assertThat(createdDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(createdDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+    assertThat(createdBackup.getEncryptionInfo().getKmsKeyVersion()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+  }\n+\n+  private String randomKeyId() {\n+    return KMS_KEY_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private String randomBackupId() {\n+    return BACKUP_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private CryptoKey createKey(final String keyId) {\n+    final LocationName locationName = LocationName.of(\n+        testHelper.getOptions().getProjectId(),\n+        KMS_KEY_LOCATION\n+    );\n+    final KeyRing keyRing = createOrRetrieveKeyRing(locationName);\n+    final Timestamp.Builder rotationTime = Timestamp\n+        .newBuilder()\n+        .setSeconds(after7DaysInSeconds());\n+\n+    final CryptoKey cryptoKeyInput = CryptoKey.newBuilder()\n+        .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n+        .setNextRotationTime(rotationTime)\n+        .build();\n+    final CryptoKey cryptoKey = kmsClient\n+        .createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n+\n+    final Policy policy = kmsClient.getIamPolicy(cryptoKey.getName());\n+    final Binding binding = Binding\n+        .newBuilder()\n+        .addMembers(SPANNER_PRODUCTION_ACCOUNT)\n+        .setRole(KMS_KEY_ENCRYPTER_DECRYPTER)\n+        .build();\n+    final Policy newPolicy = policy.toBuilder().addBindings(binding).build();\n+    kmsClient.setIamPolicy(cryptoKey.getName(), newPolicy);\n+\n+    keys.add(cryptoKey);\n+    return cryptoKey;\n+  }\n+\n+  private long after7DaysInSeconds() {\n+    return TimeUnit.SECONDS.convert(\n+        System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(7L, TimeUnit.DAYS),\n+        TimeUnit.MILLISECONDS\n+    );\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b85d7e96ff78524dad4766e6c09527ea4a39cd2"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIxNDE1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final OperationFuture<Database, CreateDatabaseMetadata> op = dbAdminClient\n          \n          \n            \n                    .createDatabase(database, Collections.<String>emptyList());\n          \n          \n            \n                final OperationFuture<Database, CreateDatabaseMetadata> op =\n          \n          \n            \n                    dbAdminClient.createDatabase(database, Collections.<String>emptyList());", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529214151", "createdAt": "2020-11-24T05:36:31Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    // for (CryptoKey key : keys) {\n+    //   for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+    //       .iterateAll()) {\n+    //     kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+    //   }\n+    // }\n+    for (DatabaseId db : dbs) {\n+      dbAdminClient\n+          .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());\n+    }\n+    for (BackupId backup : backups) {\n+      dbAdminClient.deleteBackup(backup.getInstanceId().getInstance(), backup.getBackup());\n+    }\n+    kmsClient.close();\n+  }\n+\n+  @Test\n+  public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n+    final InstanceId instanceId = testHelper.getInstanceId();\n+    final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String backupId = randomBackupId();\n+\n+    final CryptoKey key = createKey(randomKeyId());\n+    final Database sourceDatabase = dbAdminClient\n+        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+    final Backup backup = dbAdminClient\n+        .newBackupBuilder(BackupId.of(\n+            testHelper.getInstanceId(),\n+            backupId\n+        ))\n+        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n+        .build();\n+    final Restore restore = dbAdminClient\n+        .newRestoreBuilder(\n+            BackupId.of(testHelper.getInstanceId(), backupId),\n+            DatabaseId.of(testHelper.getInstanceId(), destinationDatabaseId)\n+        )\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+\n+    final Database createdDatabase = createDatabase(sourceDatabase);\n+    final Backup createdBackup = createBackup(backup);\n+    final Database restoredDatabase = restoreDatabase(restore);\n+\n+    assertThat(createdDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(createdDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+    assertThat(createdBackup.getEncryptionInfo().getKmsKeyVersion()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+  }\n+\n+  private String randomKeyId() {\n+    return KMS_KEY_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private String randomBackupId() {\n+    return BACKUP_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private CryptoKey createKey(final String keyId) {\n+    final LocationName locationName = LocationName.of(\n+        testHelper.getOptions().getProjectId(),\n+        KMS_KEY_LOCATION\n+    );\n+    final KeyRing keyRing = createOrRetrieveKeyRing(locationName);\n+    final Timestamp.Builder rotationTime = Timestamp\n+        .newBuilder()\n+        .setSeconds(after7DaysInSeconds());\n+\n+    final CryptoKey cryptoKeyInput = CryptoKey.newBuilder()\n+        .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n+        .setNextRotationTime(rotationTime)\n+        .build();\n+    final CryptoKey cryptoKey = kmsClient\n+        .createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n+\n+    final Policy policy = kmsClient.getIamPolicy(cryptoKey.getName());\n+    final Binding binding = Binding\n+        .newBuilder()\n+        .addMembers(SPANNER_PRODUCTION_ACCOUNT)\n+        .setRole(KMS_KEY_ENCRYPTER_DECRYPTER)\n+        .build();\n+    final Policy newPolicy = policy.toBuilder().addBindings(binding).build();\n+    kmsClient.setIamPolicy(cryptoKey.getName(), newPolicy);\n+\n+    keys.add(cryptoKey);\n+    return cryptoKey;\n+  }\n+\n+  private long after7DaysInSeconds() {\n+    return TimeUnit.SECONDS.convert(\n+        System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(7L, TimeUnit.DAYS),\n+        TimeUnit.MILLISECONDS\n+    );\n+  }\n+\n+  private KeyRing createOrRetrieveKeyRing(final LocationName locationName) {\n+    try {\n+      return kmsClient.getKeyRing(\n+          KeyRingName.of(locationName.getProject(), locationName.getLocation(), KMS_KEY_RING_ID)\n+      );\n+    } catch (NotFoundException e) {\n+      return kmsClient.createKeyRing(locationName, KMS_KEY_RING_ID, KeyRing.getDefaultInstance());\n+    }\n+  }\n+\n+  private Database createDatabase(final Database database)\n+      throws ExecutionException, InterruptedException {\n+    final OperationFuture<Database, CreateDatabaseMetadata> op = dbAdminClient\n+        .createDatabase(database, Collections.<String>emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b85d7e96ff78524dad4766e6c09527ea4a39cd2"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIxNDE1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final OperationFuture<Backup, CreateBackupMetadata> op = dbAdminClient\n          \n          \n            \n                    .createBackup(backup);\n          \n          \n            \n                final OperationFuture<Backup, CreateBackupMetadata> op = dbAdminClient.createBackup(backup);", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529214154", "createdAt": "2020-11-24T05:36:31Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    // for (CryptoKey key : keys) {\n+    //   for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+    //       .iterateAll()) {\n+    //     kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+    //   }\n+    // }\n+    for (DatabaseId db : dbs) {\n+      dbAdminClient\n+          .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());\n+    }\n+    for (BackupId backup : backups) {\n+      dbAdminClient.deleteBackup(backup.getInstanceId().getInstance(), backup.getBackup());\n+    }\n+    kmsClient.close();\n+  }\n+\n+  @Test\n+  public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n+    final InstanceId instanceId = testHelper.getInstanceId();\n+    final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String backupId = randomBackupId();\n+\n+    final CryptoKey key = createKey(randomKeyId());\n+    final Database sourceDatabase = dbAdminClient\n+        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+    final Backup backup = dbAdminClient\n+        .newBackupBuilder(BackupId.of(\n+            testHelper.getInstanceId(),\n+            backupId\n+        ))\n+        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n+        .build();\n+    final Restore restore = dbAdminClient\n+        .newRestoreBuilder(\n+            BackupId.of(testHelper.getInstanceId(), backupId),\n+            DatabaseId.of(testHelper.getInstanceId(), destinationDatabaseId)\n+        )\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+\n+    final Database createdDatabase = createDatabase(sourceDatabase);\n+    final Backup createdBackup = createBackup(backup);\n+    final Database restoredDatabase = restoreDatabase(restore);\n+\n+    assertThat(createdDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(createdDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+    assertThat(createdBackup.getEncryptionInfo().getKmsKeyVersion()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+  }\n+\n+  private String randomKeyId() {\n+    return KMS_KEY_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private String randomBackupId() {\n+    return BACKUP_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private CryptoKey createKey(final String keyId) {\n+    final LocationName locationName = LocationName.of(\n+        testHelper.getOptions().getProjectId(),\n+        KMS_KEY_LOCATION\n+    );\n+    final KeyRing keyRing = createOrRetrieveKeyRing(locationName);\n+    final Timestamp.Builder rotationTime = Timestamp\n+        .newBuilder()\n+        .setSeconds(after7DaysInSeconds());\n+\n+    final CryptoKey cryptoKeyInput = CryptoKey.newBuilder()\n+        .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n+        .setNextRotationTime(rotationTime)\n+        .build();\n+    final CryptoKey cryptoKey = kmsClient\n+        .createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n+\n+    final Policy policy = kmsClient.getIamPolicy(cryptoKey.getName());\n+    final Binding binding = Binding\n+        .newBuilder()\n+        .addMembers(SPANNER_PRODUCTION_ACCOUNT)\n+        .setRole(KMS_KEY_ENCRYPTER_DECRYPTER)\n+        .build();\n+    final Policy newPolicy = policy.toBuilder().addBindings(binding).build();\n+    kmsClient.setIamPolicy(cryptoKey.getName(), newPolicy);\n+\n+    keys.add(cryptoKey);\n+    return cryptoKey;\n+  }\n+\n+  private long after7DaysInSeconds() {\n+    return TimeUnit.SECONDS.convert(\n+        System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(7L, TimeUnit.DAYS),\n+        TimeUnit.MILLISECONDS\n+    );\n+  }\n+\n+  private KeyRing createOrRetrieveKeyRing(final LocationName locationName) {\n+    try {\n+      return kmsClient.getKeyRing(\n+          KeyRingName.of(locationName.getProject(), locationName.getLocation(), KMS_KEY_RING_ID)\n+      );\n+    } catch (NotFoundException e) {\n+      return kmsClient.createKeyRing(locationName, KMS_KEY_RING_ID, KeyRing.getDefaultInstance());\n+    }\n+  }\n+\n+  private Database createDatabase(final Database database)\n+      throws ExecutionException, InterruptedException {\n+    final OperationFuture<Database, CreateDatabaseMetadata> op = dbAdminClient\n+        .createDatabase(database, Collections.<String>emptyList());\n+    final Database createdDatabase = op.get();\n+    dbs.add(createdDatabase.getId());\n+\n+    return createdDatabase;\n+  }\n+\n+  private Backup createBackup(final Backup backup) throws ExecutionException, InterruptedException {\n+    final OperationFuture<Backup, CreateBackupMetadata> op = dbAdminClient\n+        .createBackup(backup);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b85d7e96ff78524dad4766e6c09527ea4a39cd2"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIxNDE1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final OperationFuture<Database, RestoreDatabaseMetadata> op = dbAdminClient\n          \n          \n            \n                    .restoreDatabase(restore);\n          \n          \n            \n                final Database database = op.get();\n          \n          \n            \n                final OperationFuture<Database, RestoreDatabaseMetadata> op =\n          \n          \n            \n                    dbAdminClient.restoreDatabase(restore);", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529214156", "createdAt": "2020-11-24T05:36:31Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    // for (CryptoKey key : keys) {\n+    //   for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+    //       .iterateAll()) {\n+    //     kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+    //   }\n+    // }\n+    for (DatabaseId db : dbs) {\n+      dbAdminClient\n+          .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());\n+    }\n+    for (BackupId backup : backups) {\n+      dbAdminClient.deleteBackup(backup.getInstanceId().getInstance(), backup.getBackup());\n+    }\n+    kmsClient.close();\n+  }\n+\n+  @Test\n+  public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n+    final InstanceId instanceId = testHelper.getInstanceId();\n+    final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String backupId = randomBackupId();\n+\n+    final CryptoKey key = createKey(randomKeyId());\n+    final Database sourceDatabase = dbAdminClient\n+        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+    final Backup backup = dbAdminClient\n+        .newBackupBuilder(BackupId.of(\n+            testHelper.getInstanceId(),\n+            backupId\n+        ))\n+        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n+        .build();\n+    final Restore restore = dbAdminClient\n+        .newRestoreBuilder(\n+            BackupId.of(testHelper.getInstanceId(), backupId),\n+            DatabaseId.of(testHelper.getInstanceId(), destinationDatabaseId)\n+        )\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+\n+    final Database createdDatabase = createDatabase(sourceDatabase);\n+    final Backup createdBackup = createBackup(backup);\n+    final Database restoredDatabase = restoreDatabase(restore);\n+\n+    assertThat(createdDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(createdDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+    assertThat(createdBackup.getEncryptionInfo().getKmsKeyVersion()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+  }\n+\n+  private String randomKeyId() {\n+    return KMS_KEY_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private String randomBackupId() {\n+    return BACKUP_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private CryptoKey createKey(final String keyId) {\n+    final LocationName locationName = LocationName.of(\n+        testHelper.getOptions().getProjectId(),\n+        KMS_KEY_LOCATION\n+    );\n+    final KeyRing keyRing = createOrRetrieveKeyRing(locationName);\n+    final Timestamp.Builder rotationTime = Timestamp\n+        .newBuilder()\n+        .setSeconds(after7DaysInSeconds());\n+\n+    final CryptoKey cryptoKeyInput = CryptoKey.newBuilder()\n+        .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n+        .setNextRotationTime(rotationTime)\n+        .build();\n+    final CryptoKey cryptoKey = kmsClient\n+        .createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n+\n+    final Policy policy = kmsClient.getIamPolicy(cryptoKey.getName());\n+    final Binding binding = Binding\n+        .newBuilder()\n+        .addMembers(SPANNER_PRODUCTION_ACCOUNT)\n+        .setRole(KMS_KEY_ENCRYPTER_DECRYPTER)\n+        .build();\n+    final Policy newPolicy = policy.toBuilder().addBindings(binding).build();\n+    kmsClient.setIamPolicy(cryptoKey.getName(), newPolicy);\n+\n+    keys.add(cryptoKey);\n+    return cryptoKey;\n+  }\n+\n+  private long after7DaysInSeconds() {\n+    return TimeUnit.SECONDS.convert(\n+        System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(7L, TimeUnit.DAYS),\n+        TimeUnit.MILLISECONDS\n+    );\n+  }\n+\n+  private KeyRing createOrRetrieveKeyRing(final LocationName locationName) {\n+    try {\n+      return kmsClient.getKeyRing(\n+          KeyRingName.of(locationName.getProject(), locationName.getLocation(), KMS_KEY_RING_ID)\n+      );\n+    } catch (NotFoundException e) {\n+      return kmsClient.createKeyRing(locationName, KMS_KEY_RING_ID, KeyRing.getDefaultInstance());\n+    }\n+  }\n+\n+  private Database createDatabase(final Database database)\n+      throws ExecutionException, InterruptedException {\n+    final OperationFuture<Database, CreateDatabaseMetadata> op = dbAdminClient\n+        .createDatabase(database, Collections.<String>emptyList());\n+    final Database createdDatabase = op.get();\n+    dbs.add(createdDatabase.getId());\n+\n+    return createdDatabase;\n+  }\n+\n+  private Backup createBackup(final Backup backup) throws ExecutionException, InterruptedException {\n+    final OperationFuture<Backup, CreateBackupMetadata> op = dbAdminClient\n+        .createBackup(backup);\n+    final Backup createdBackup = op.get();\n+    dbs.add(createdBackup.getDatabase());\n+    backups.add(backup.getId());\n+\n+    return createdBackup;\n+  }\n+\n+  private Database restoreDatabase(final Restore restore)\n+      throws ExecutionException, InterruptedException {\n+    final OperationFuture<Database, RestoreDatabaseMetadata> op = dbAdminClient\n+        .restoreDatabase(restore);\n+    final Database database = op.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b85d7e96ff78524dad4766e6c09527ea4a39cd2"}, "originalPosition": 228}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MDk4ODQ5", "url": "https://github.com/googleapis/java-spanner/pull/666#pullrequestreview-537098849", "createdAt": "2020-11-24T05:59:19Z", "commit": {"oid": "9369fe36505d386d5a04f35a08e08644eb3e6425"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTo1OToyMFrOH4tF0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTo1OToyMVrOH4tF3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIyMTA3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n          \n          \n            \n              public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n          \n          \n            \n            \n          \n          \n            \n              @ClassRule\n          \n          \n            \n              public static final String SPANNER_PRODUCTION_ACCOUNT =\n          \n          \n            \n                  \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n          \n          \n            \n              public static final String KMS_KEY_ENCRYPTER_DECRYPTER =\n          \n          \n            \n                  \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n          \n          \n            \n              @ClassRule public static IntegrationTestEnv env = new IntegrationTestEnv();", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529221073", "createdAt": "2020-11-24T05:59:20Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.CryptoKeyVersion;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  // FIXME: This should not be hardcoded\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  // FIXME: This should not be hardcoded\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9369fe36505d386d5a04f35a08e08644eb3e6425"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIyMTA3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n          \n          \n            \n                      .iterateAll()) {\n          \n          \n            \n                    kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n          \n          \n            \n                  }\n          \n          \n            \n                  for (CryptoKeyVersion keyVersion :\n          \n          \n            \n                      kmsClient.listCryptoKeyVersions(key.getName()).iterateAll()) {\n          \n          \n            \n                  dbAdminClient.dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529221074", "createdAt": "2020-11-24T05:59:20Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.CryptoKeyVersion;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  // FIXME: This should not be hardcoded\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  // FIXME: This should not be hardcoded\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    for (CryptoKey key : keys) {\n+      for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+          .iterateAll()) {\n+        kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9369fe36505d386d5a04f35a08e08644eb3e6425"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIyMTA3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n          \n          \n            \n                final InstanceId instanceId = testHelper.getInstanceId();\n          \n          \n            \n                final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n          \n          \n            \n                final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n          \n          \n            \n                final String backupId = randomBackupId();\n          \n          \n            \n            \n          \n          \n            \n                final CryptoKey key = createKey(randomKeyId());\n          \n          \n            \n                final Database sourceDatabase = dbAdminClient\n          \n          \n            \n                    .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n          \n          \n            \n                    .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n          \n          \n            \n                    .build();\n          \n          \n            \n                final Backup backup = dbAdminClient\n          \n          \n            \n                    .newBackupBuilder(BackupId.of(\n          \n          \n            \n                        testHelper.getInstanceId(),\n          \n          \n            \n                        backupId\n          \n          \n            \n                    ))\n          \n          \n            \n                    .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n          \n          \n            \n                    .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n          \n          \n            \n                    .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n          \n          \n            \n                    .build();\n          \n          \n            \n                final Restore restore = dbAdminClient\n          \n          \n            \n              public void createsEncryptedDatabaseBackupAndRestore()\n          \n          \n            \n                  throws ExecutionException, InterruptedException {\n          \n          \n            \n                final Database sourceDatabase =\n          \n          \n            \n                    dbAdminClient\n          \n          \n            \n                        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n          \n          \n            \n                        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n          \n          \n            \n                        .build();\n          \n          \n            \n                final Backup backup =\n          \n          \n            \n                    dbAdminClient\n          \n          \n            \n                        .newBackupBuilder(BackupId.of(testHelper.getInstanceId(), backupId))\n          \n          \n            \n                        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n          \n          \n            \n                        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n          \n          \n            \n                        .setExpireTime(\n          \n          \n            \n                            com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n          \n          \n            \n                        .build();\n          \n          \n            \n                final Restore restore =\n          \n          \n            \n                    dbAdminClient\n          \n          \n            \n                        .newRestoreBuilder(\n          \n          \n            \n                            BackupId.of(testHelper.getInstanceId(), backupId),\n          \n          \n            \n                            DatabaseId.of(testHelper.getInstanceId(), destinationDatabaseId))\n          \n          \n            \n                        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n          \n          \n            \n                        .build();", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529221076", "createdAt": "2020-11-24T05:59:20Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.CryptoKeyVersion;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  // FIXME: This should not be hardcoded\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  // FIXME: This should not be hardcoded\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    for (CryptoKey key : keys) {\n+      for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+          .iterateAll()) {\n+        kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+      }\n+    }\n+    for (DatabaseId db : dbs) {\n+      dbAdminClient\n+          .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());\n+    }\n+    for (BackupId backup : backups) {\n+      dbAdminClient.deleteBackup(backup.getInstanceId().getInstance(), backup.getBackup());\n+    }\n+    kmsClient.close();\n+  }\n+\n+  @Test\n+  public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n+    final InstanceId instanceId = testHelper.getInstanceId();\n+    final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String backupId = randomBackupId();\n+\n+    final CryptoKey key = createKey(randomKeyId());\n+    final Database sourceDatabase = dbAdminClient\n+        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+    final Backup backup = dbAdminClient\n+        .newBackupBuilder(BackupId.of(\n+            testHelper.getInstanceId(),\n+            backupId\n+        ))\n+        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n+        .build();\n+    final Restore restore = dbAdminClient", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9369fe36505d386d5a04f35a08e08644eb3e6425"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIyMTA4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final LocationName locationName = LocationName.of(\n          \n          \n            \n                    testHelper.getOptions().getProjectId(),\n          \n          \n            \n                    KMS_KEY_LOCATION\n          \n          \n            \n                );\n          \n          \n            \n                final KeyRing keyRing = createOrRetrieveKeyRing(locationName);\n          \n          \n            \n                final Timestamp.Builder rotationTime = Timestamp\n          \n          \n            \n                    .newBuilder()\n          \n          \n            \n                    .setSeconds(after7DaysInSeconds());\n          \n          \n            \n            \n          \n          \n            \n                final CryptoKey cryptoKeyInput = CryptoKey.newBuilder()\n          \n          \n            \n                    .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n          \n          \n            \n                    .setNextRotationTime(rotationTime)\n          \n          \n            \n                    .build();\n          \n          \n            \n                final CryptoKey cryptoKey = kmsClient\n          \n          \n            \n                    .createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n          \n          \n            \n            \n          \n          \n            \n                final Policy policy = kmsClient.getIamPolicy(cryptoKey.getName());\n          \n          \n            \n                final Binding binding = Binding\n          \n          \n            \n                final LocationName locationName =\n          \n          \n            \n                    LocationName.of(testHelper.getOptions().getProjectId(), KMS_KEY_LOCATION);\n          \n          \n            \n                final Timestamp.Builder rotationTime = Timestamp.newBuilder().setSeconds(after7DaysInSeconds());\n          \n          \n            \n                final CryptoKey cryptoKeyInput =\n          \n          \n            \n                    CryptoKey.newBuilder()\n          \n          \n            \n                        .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n          \n          \n            \n                        .setNextRotationTime(rotationTime)\n          \n          \n            \n                        .build();\n          \n          \n            \n                final CryptoKey cryptoKey =\n          \n          \n            \n                    kmsClient.createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n          \n          \n            \n                final Binding binding =\n          \n          \n            \n                    Binding.newBuilder()\n          \n          \n            \n                        .addMembers(SPANNER_PRODUCTION_ACCOUNT)\n          \n          \n            \n                        .setRole(KMS_KEY_ENCRYPTER_DECRYPTER)\n          \n          \n            \n                        .build();", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529221080", "createdAt": "2020-11-24T05:59:20Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.CryptoKeyVersion;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  // FIXME: This should not be hardcoded\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  // FIXME: This should not be hardcoded\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    for (CryptoKey key : keys) {\n+      for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+          .iterateAll()) {\n+        kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+      }\n+    }\n+    for (DatabaseId db : dbs) {\n+      dbAdminClient\n+          .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());\n+    }\n+    for (BackupId backup : backups) {\n+      dbAdminClient.deleteBackup(backup.getInstanceId().getInstance(), backup.getBackup());\n+    }\n+    kmsClient.close();\n+  }\n+\n+  @Test\n+  public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n+    final InstanceId instanceId = testHelper.getInstanceId();\n+    final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String backupId = randomBackupId();\n+\n+    final CryptoKey key = createKey(randomKeyId());\n+    final Database sourceDatabase = dbAdminClient\n+        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+    final Backup backup = dbAdminClient\n+        .newBackupBuilder(BackupId.of(\n+            testHelper.getInstanceId(),\n+            backupId\n+        ))\n+        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n+        .build();\n+    final Restore restore = dbAdminClient\n+        .newRestoreBuilder(\n+            BackupId.of(testHelper.getInstanceId(), backupId),\n+            DatabaseId.of(testHelper.getInstanceId(), destinationDatabaseId)\n+        )\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+\n+    final Database createdDatabase = createDatabase(sourceDatabase);\n+    final Backup createdBackup = createBackup(backup);\n+    final Database restoredDatabase = restoreDatabase(restore);\n+\n+    assertThat(createdDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(createdDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+    assertThat(createdBackup.getEncryptionInfo().getKmsKeyVersion()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+  }\n+\n+  private String randomKeyId() {\n+    return KMS_KEY_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private String randomBackupId() {\n+    return BACKUP_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private CryptoKey createKey(final String keyId) {\n+    final LocationName locationName = LocationName.of(\n+        testHelper.getOptions().getProjectId(),\n+        KMS_KEY_LOCATION\n+    );\n+    final KeyRing keyRing = createOrRetrieveKeyRing(locationName);\n+    final Timestamp.Builder rotationTime = Timestamp\n+        .newBuilder()\n+        .setSeconds(after7DaysInSeconds());\n+\n+    final CryptoKey cryptoKeyInput = CryptoKey.newBuilder()\n+        .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n+        .setNextRotationTime(rotationTime)\n+        .build();\n+    final CryptoKey cryptoKey = kmsClient\n+        .createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n+\n+    final Policy policy = kmsClient.getIamPolicy(cryptoKey.getName());\n+    final Binding binding = Binding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9369fe36505d386d5a04f35a08e08644eb3e6425"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIyMTA4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    TimeUnit.MILLISECONDS\n          \n          \n            \n                );\n          \n          \n            \n              }\n          \n          \n            \n                    TimeUnit.MILLISECONDS);\n          \n          \n            \n                      KeyRingName.of(locationName.getProject(), locationName.getLocation(), KMS_KEY_RING_ID));", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529221082", "createdAt": "2020-11-24T05:59:21Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.CryptoKeyVersion;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  // FIXME: This should not be hardcoded\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  // FIXME: This should not be hardcoded\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    for (CryptoKey key : keys) {\n+      for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+          .iterateAll()) {\n+        kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+      }\n+    }\n+    for (DatabaseId db : dbs) {\n+      dbAdminClient\n+          .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());\n+    }\n+    for (BackupId backup : backups) {\n+      dbAdminClient.deleteBackup(backup.getInstanceId().getInstance(), backup.getBackup());\n+    }\n+    kmsClient.close();\n+  }\n+\n+  @Test\n+  public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n+    final InstanceId instanceId = testHelper.getInstanceId();\n+    final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String backupId = randomBackupId();\n+\n+    final CryptoKey key = createKey(randomKeyId());\n+    final Database sourceDatabase = dbAdminClient\n+        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+    final Backup backup = dbAdminClient\n+        .newBackupBuilder(BackupId.of(\n+            testHelper.getInstanceId(),\n+            backupId\n+        ))\n+        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n+        .build();\n+    final Restore restore = dbAdminClient\n+        .newRestoreBuilder(\n+            BackupId.of(testHelper.getInstanceId(), backupId),\n+            DatabaseId.of(testHelper.getInstanceId(), destinationDatabaseId)\n+        )\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+\n+    final Database createdDatabase = createDatabase(sourceDatabase);\n+    final Backup createdBackup = createBackup(backup);\n+    final Database restoredDatabase = restoreDatabase(restore);\n+\n+    assertThat(createdDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(createdDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+    assertThat(createdBackup.getEncryptionInfo().getKmsKeyVersion()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+  }\n+\n+  private String randomKeyId() {\n+    return KMS_KEY_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private String randomBackupId() {\n+    return BACKUP_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private CryptoKey createKey(final String keyId) {\n+    final LocationName locationName = LocationName.of(\n+        testHelper.getOptions().getProjectId(),\n+        KMS_KEY_LOCATION\n+    );\n+    final KeyRing keyRing = createOrRetrieveKeyRing(locationName);\n+    final Timestamp.Builder rotationTime = Timestamp\n+        .newBuilder()\n+        .setSeconds(after7DaysInSeconds());\n+\n+    final CryptoKey cryptoKeyInput = CryptoKey.newBuilder()\n+        .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n+        .setNextRotationTime(rotationTime)\n+        .build();\n+    final CryptoKey cryptoKey = kmsClient\n+        .createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n+\n+    final Policy policy = kmsClient.getIamPolicy(cryptoKey.getName());\n+    final Binding binding = Binding\n+        .newBuilder()\n+        .addMembers(SPANNER_PRODUCTION_ACCOUNT)\n+        .setRole(KMS_KEY_ENCRYPTER_DECRYPTER)\n+        .build();\n+    final Policy newPolicy = policy.toBuilder().addBindings(binding).build();\n+    kmsClient.setIamPolicy(cryptoKey.getName(), newPolicy);\n+\n+    keys.add(cryptoKey);\n+    return cryptoKey;\n+  }\n+\n+  private long after7DaysInSeconds() {\n+    return TimeUnit.SECONDS.convert(\n+        System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(7L, TimeUnit.DAYS),\n+        TimeUnit.MILLISECONDS\n+    );\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9369fe36505d386d5a04f35a08e08644eb3e6425"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIyMTA4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final OperationFuture<Database, CreateDatabaseMetadata> op = dbAdminClient\n          \n          \n            \n                    .createDatabase(database, Collections.<String>emptyList());\n          \n          \n            \n                final OperationFuture<Database, CreateDatabaseMetadata> op =\n          \n          \n            \n                    dbAdminClient.createDatabase(database, Collections.<String>emptyList());", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529221084", "createdAt": "2020-11-24T05:59:21Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.CryptoKeyVersion;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  // FIXME: This should not be hardcoded\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  // FIXME: This should not be hardcoded\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    for (CryptoKey key : keys) {\n+      for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+          .iterateAll()) {\n+        kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+      }\n+    }\n+    for (DatabaseId db : dbs) {\n+      dbAdminClient\n+          .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());\n+    }\n+    for (BackupId backup : backups) {\n+      dbAdminClient.deleteBackup(backup.getInstanceId().getInstance(), backup.getBackup());\n+    }\n+    kmsClient.close();\n+  }\n+\n+  @Test\n+  public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n+    final InstanceId instanceId = testHelper.getInstanceId();\n+    final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String backupId = randomBackupId();\n+\n+    final CryptoKey key = createKey(randomKeyId());\n+    final Database sourceDatabase = dbAdminClient\n+        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+    final Backup backup = dbAdminClient\n+        .newBackupBuilder(BackupId.of(\n+            testHelper.getInstanceId(),\n+            backupId\n+        ))\n+        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n+        .build();\n+    final Restore restore = dbAdminClient\n+        .newRestoreBuilder(\n+            BackupId.of(testHelper.getInstanceId(), backupId),\n+            DatabaseId.of(testHelper.getInstanceId(), destinationDatabaseId)\n+        )\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+\n+    final Database createdDatabase = createDatabase(sourceDatabase);\n+    final Backup createdBackup = createBackup(backup);\n+    final Database restoredDatabase = restoreDatabase(restore);\n+\n+    assertThat(createdDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(createdDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+    assertThat(createdBackup.getEncryptionInfo().getKmsKeyVersion()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+  }\n+\n+  private String randomKeyId() {\n+    return KMS_KEY_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private String randomBackupId() {\n+    return BACKUP_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private CryptoKey createKey(final String keyId) {\n+    final LocationName locationName = LocationName.of(\n+        testHelper.getOptions().getProjectId(),\n+        KMS_KEY_LOCATION\n+    );\n+    final KeyRing keyRing = createOrRetrieveKeyRing(locationName);\n+    final Timestamp.Builder rotationTime = Timestamp\n+        .newBuilder()\n+        .setSeconds(after7DaysInSeconds());\n+\n+    final CryptoKey cryptoKeyInput = CryptoKey.newBuilder()\n+        .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n+        .setNextRotationTime(rotationTime)\n+        .build();\n+    final CryptoKey cryptoKey = kmsClient\n+        .createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n+\n+    final Policy policy = kmsClient.getIamPolicy(cryptoKey.getName());\n+    final Binding binding = Binding\n+        .newBuilder()\n+        .addMembers(SPANNER_PRODUCTION_ACCOUNT)\n+        .setRole(KMS_KEY_ENCRYPTER_DECRYPTER)\n+        .build();\n+    final Policy newPolicy = policy.toBuilder().addBindings(binding).build();\n+    kmsClient.setIamPolicy(cryptoKey.getName(), newPolicy);\n+\n+    keys.add(cryptoKey);\n+    return cryptoKey;\n+  }\n+\n+  private long after7DaysInSeconds() {\n+    return TimeUnit.SECONDS.convert(\n+        System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(7L, TimeUnit.DAYS),\n+        TimeUnit.MILLISECONDS\n+    );\n+  }\n+\n+  private KeyRing createOrRetrieveKeyRing(final LocationName locationName) {\n+    try {\n+      return kmsClient.getKeyRing(\n+          KeyRingName.of(locationName.getProject(), locationName.getLocation(), KMS_KEY_RING_ID)\n+      );\n+    } catch (NotFoundException e) {\n+      return kmsClient.createKeyRing(locationName, KMS_KEY_RING_ID, KeyRing.getDefaultInstance());\n+    }\n+  }\n+\n+  private Database createDatabase(final Database database)\n+      throws ExecutionException, InterruptedException {\n+    final OperationFuture<Database, CreateDatabaseMetadata> op = dbAdminClient\n+        .createDatabase(database, Collections.<String>emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9369fe36505d386d5a04f35a08e08644eb3e6425"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIyMTA4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final OperationFuture<Backup, CreateBackupMetadata> op = dbAdminClient\n          \n          \n            \n                    .createBackup(backup);\n          \n          \n            \n                final OperationFuture<Backup, CreateBackupMetadata> op = dbAdminClient.createBackup(backup);", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529221086", "createdAt": "2020-11-24T05:59:21Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.CryptoKeyVersion;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  // FIXME: This should not be hardcoded\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  // FIXME: This should not be hardcoded\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    for (CryptoKey key : keys) {\n+      for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+          .iterateAll()) {\n+        kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+      }\n+    }\n+    for (DatabaseId db : dbs) {\n+      dbAdminClient\n+          .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());\n+    }\n+    for (BackupId backup : backups) {\n+      dbAdminClient.deleteBackup(backup.getInstanceId().getInstance(), backup.getBackup());\n+    }\n+    kmsClient.close();\n+  }\n+\n+  @Test\n+  public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n+    final InstanceId instanceId = testHelper.getInstanceId();\n+    final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String backupId = randomBackupId();\n+\n+    final CryptoKey key = createKey(randomKeyId());\n+    final Database sourceDatabase = dbAdminClient\n+        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+    final Backup backup = dbAdminClient\n+        .newBackupBuilder(BackupId.of(\n+            testHelper.getInstanceId(),\n+            backupId\n+        ))\n+        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n+        .build();\n+    final Restore restore = dbAdminClient\n+        .newRestoreBuilder(\n+            BackupId.of(testHelper.getInstanceId(), backupId),\n+            DatabaseId.of(testHelper.getInstanceId(), destinationDatabaseId)\n+        )\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+\n+    final Database createdDatabase = createDatabase(sourceDatabase);\n+    final Backup createdBackup = createBackup(backup);\n+    final Database restoredDatabase = restoreDatabase(restore);\n+\n+    assertThat(createdDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(createdDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+    assertThat(createdBackup.getEncryptionInfo().getKmsKeyVersion()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+  }\n+\n+  private String randomKeyId() {\n+    return KMS_KEY_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private String randomBackupId() {\n+    return BACKUP_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private CryptoKey createKey(final String keyId) {\n+    final LocationName locationName = LocationName.of(\n+        testHelper.getOptions().getProjectId(),\n+        KMS_KEY_LOCATION\n+    );\n+    final KeyRing keyRing = createOrRetrieveKeyRing(locationName);\n+    final Timestamp.Builder rotationTime = Timestamp\n+        .newBuilder()\n+        .setSeconds(after7DaysInSeconds());\n+\n+    final CryptoKey cryptoKeyInput = CryptoKey.newBuilder()\n+        .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n+        .setNextRotationTime(rotationTime)\n+        .build();\n+    final CryptoKey cryptoKey = kmsClient\n+        .createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n+\n+    final Policy policy = kmsClient.getIamPolicy(cryptoKey.getName());\n+    final Binding binding = Binding\n+        .newBuilder()\n+        .addMembers(SPANNER_PRODUCTION_ACCOUNT)\n+        .setRole(KMS_KEY_ENCRYPTER_DECRYPTER)\n+        .build();\n+    final Policy newPolicy = policy.toBuilder().addBindings(binding).build();\n+    kmsClient.setIamPolicy(cryptoKey.getName(), newPolicy);\n+\n+    keys.add(cryptoKey);\n+    return cryptoKey;\n+  }\n+\n+  private long after7DaysInSeconds() {\n+    return TimeUnit.SECONDS.convert(\n+        System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(7L, TimeUnit.DAYS),\n+        TimeUnit.MILLISECONDS\n+    );\n+  }\n+\n+  private KeyRing createOrRetrieveKeyRing(final LocationName locationName) {\n+    try {\n+      return kmsClient.getKeyRing(\n+          KeyRingName.of(locationName.getProject(), locationName.getLocation(), KMS_KEY_RING_ID)\n+      );\n+    } catch (NotFoundException e) {\n+      return kmsClient.createKeyRing(locationName, KMS_KEY_RING_ID, KeyRing.getDefaultInstance());\n+    }\n+  }\n+\n+  private Database createDatabase(final Database database)\n+      throws ExecutionException, InterruptedException {\n+    final OperationFuture<Database, CreateDatabaseMetadata> op = dbAdminClient\n+        .createDatabase(database, Collections.<String>emptyList());\n+    final Database createdDatabase = op.get();\n+    dbs.add(createdDatabase.getId());\n+\n+    return createdDatabase;\n+  }\n+\n+  private Backup createBackup(final Backup backup) throws ExecutionException, InterruptedException {\n+    final OperationFuture<Backup, CreateBackupMetadata> op = dbAdminClient\n+        .createBackup(backup);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9369fe36505d386d5a04f35a08e08644eb3e6425"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIyMTA4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final OperationFuture<Database, RestoreDatabaseMetadata> op = dbAdminClient\n          \n          \n            \n                    .restoreDatabase(restore);\n          \n          \n            \n                final Database database = op.get();\n          \n          \n            \n                final OperationFuture<Database, RestoreDatabaseMetadata> op =\n          \n          \n            \n                    dbAdminClient.restoreDatabase(restore);", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529221087", "createdAt": "2020-11-24T05:59:21Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.CryptoKeyVersion;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  // FIXME: This should not be hardcoded\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  // FIXME: This should not be hardcoded\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    for (CryptoKey key : keys) {\n+      for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+          .iterateAll()) {\n+        kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+      }\n+    }\n+    for (DatabaseId db : dbs) {\n+      dbAdminClient\n+          .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());\n+    }\n+    for (BackupId backup : backups) {\n+      dbAdminClient.deleteBackup(backup.getInstanceId().getInstance(), backup.getBackup());\n+    }\n+    kmsClient.close();\n+  }\n+\n+  @Test\n+  public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n+    final InstanceId instanceId = testHelper.getInstanceId();\n+    final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String backupId = randomBackupId();\n+\n+    final CryptoKey key = createKey(randomKeyId());\n+    final Database sourceDatabase = dbAdminClient\n+        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+    final Backup backup = dbAdminClient\n+        .newBackupBuilder(BackupId.of(\n+            testHelper.getInstanceId(),\n+            backupId\n+        ))\n+        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n+        .build();\n+    final Restore restore = dbAdminClient\n+        .newRestoreBuilder(\n+            BackupId.of(testHelper.getInstanceId(), backupId),\n+            DatabaseId.of(testHelper.getInstanceId(), destinationDatabaseId)\n+        )\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+\n+    final Database createdDatabase = createDatabase(sourceDatabase);\n+    final Backup createdBackup = createBackup(backup);\n+    final Database restoredDatabase = restoreDatabase(restore);\n+\n+    assertThat(createdDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(createdDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+    assertThat(createdBackup.getEncryptionInfo().getKmsKeyVersion()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+  }\n+\n+  private String randomKeyId() {\n+    return KMS_KEY_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private String randomBackupId() {\n+    return BACKUP_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private CryptoKey createKey(final String keyId) {\n+    final LocationName locationName = LocationName.of(\n+        testHelper.getOptions().getProjectId(),\n+        KMS_KEY_LOCATION\n+    );\n+    final KeyRing keyRing = createOrRetrieveKeyRing(locationName);\n+    final Timestamp.Builder rotationTime = Timestamp\n+        .newBuilder()\n+        .setSeconds(after7DaysInSeconds());\n+\n+    final CryptoKey cryptoKeyInput = CryptoKey.newBuilder()\n+        .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n+        .setNextRotationTime(rotationTime)\n+        .build();\n+    final CryptoKey cryptoKey = kmsClient\n+        .createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n+\n+    final Policy policy = kmsClient.getIamPolicy(cryptoKey.getName());\n+    final Binding binding = Binding\n+        .newBuilder()\n+        .addMembers(SPANNER_PRODUCTION_ACCOUNT)\n+        .setRole(KMS_KEY_ENCRYPTER_DECRYPTER)\n+        .build();\n+    final Policy newPolicy = policy.toBuilder().addBindings(binding).build();\n+    kmsClient.setIamPolicy(cryptoKey.getName(), newPolicy);\n+\n+    keys.add(cryptoKey);\n+    return cryptoKey;\n+  }\n+\n+  private long after7DaysInSeconds() {\n+    return TimeUnit.SECONDS.convert(\n+        System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(7L, TimeUnit.DAYS),\n+        TimeUnit.MILLISECONDS\n+    );\n+  }\n+\n+  private KeyRing createOrRetrieveKeyRing(final LocationName locationName) {\n+    try {\n+      return kmsClient.getKeyRing(\n+          KeyRingName.of(locationName.getProject(), locationName.getLocation(), KMS_KEY_RING_ID)\n+      );\n+    } catch (NotFoundException e) {\n+      return kmsClient.createKeyRing(locationName, KMS_KEY_RING_ID, KeyRing.getDefaultInstance());\n+    }\n+  }\n+\n+  private Database createDatabase(final Database database)\n+      throws ExecutionException, InterruptedException {\n+    final OperationFuture<Database, CreateDatabaseMetadata> op = dbAdminClient\n+        .createDatabase(database, Collections.<String>emptyList());\n+    final Database createdDatabase = op.get();\n+    dbs.add(createdDatabase.getId());\n+\n+    return createdDatabase;\n+  }\n+\n+  private Backup createBackup(final Backup backup) throws ExecutionException, InterruptedException {\n+    final OperationFuture<Backup, CreateBackupMetadata> op = dbAdminClient\n+        .createBackup(backup);\n+    final Backup createdBackup = op.get();\n+    dbs.add(createdBackup.getDatabase());\n+    backups.add(backup.getId());\n+\n+    return createdBackup;\n+  }\n+\n+  private Database restoreDatabase(final Restore restore)\n+      throws ExecutionException, InterruptedException {\n+    final OperationFuture<Database, RestoreDatabaseMetadata> op = dbAdminClient\n+        .restoreDatabase(restore);\n+    final Database database = op.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9369fe36505d386d5a04f35a08e08644eb3e6425"}, "originalPosition": 231}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9369fe36505d386d5a04f35a08e08644eb3e6425", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/9369fe36505d386d5a04f35a08e08644eb3e6425", "committedDate": "2020-11-24T05:56:46Z", "message": "fix: fixes clirr errors"}, "afterCommit": {"oid": "c4ff25ad30b3c590865dac8546445067f941ef89", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/c4ff25ad30b3c590865dac8546445067f941ef89", "committedDate": "2020-11-24T07:17:32Z", "message": "fix: ignores failing cmek tests\n\nIgnores the failing CMEK tests until the backend support is enabled in\nproduction."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MzA4MzMy", "url": "https://github.com/googleapis/java-spanner/pull/666#pullrequestreview-538308332", "createdAt": "2020-11-25T09:34:58Z", "commit": {"oid": "c4ff25ad30b3c590865dac8546445067f941ef89"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTozNDo1OFrOH5qoOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTozNDo1OFrOH5qoOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIyOTMwNg==", "bodyText": "Shouldn't we be using the wrapper classes here instead of the generated classes?", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r530229306", "createdAt": "2020-11-25T09:34:58Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "diffHunk": "@@ -18,6 +18,8 @@\n \n import com.google.api.client.util.Preconditions;\n import com.google.cloud.Timestamp;\n+import com.google.spanner.admin.database.v1.EncryptionConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4ff25ad30b3c590865dac8546445067f941ef89"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc151963a8cc4c62cb37e6dafcb48be25f96fd66", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/fc151963a8cc4c62cb37e6dafcb48be25f96fd66", "committedDate": "2020-11-26T01:29:56Z", "message": "fix: uses wrapper encryption info for backups"}, "afterCommit": {"oid": "e5867c560730702604729f609254a22a5d5b47ab", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/e5867c560730702604729f609254a22a5d5b47ab", "committedDate": "2021-01-21T02:36:52Z", "message": "fix: uses wrapper encryption info for backups"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e5867c560730702604729f609254a22a5d5b47ab", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/e5867c560730702604729f609254a22a5d5b47ab", "committedDate": "2021-01-21T02:36:52Z", "message": "fix: uses wrapper encryption info for backups"}, "afterCommit": {"oid": "7c979bd80b421c116b3b93f054d64e7fab30db07", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/7c979bd80b421c116b3b93f054d64e7fab30db07", "committedDate": "2021-01-21T02:53:00Z", "message": "fix: uses wrapper encryption info for backups"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczMzQzODY2", "url": "https://github.com/googleapis/java-spanner/pull/666#pullrequestreview-573343866", "createdAt": "2021-01-21T13:49:00Z", "commit": {"oid": "7c979bd80b421c116b3b93f054d64e7fab30db07"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxMzo0OTowMFrOIX3RPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxMzo0OTowMFrOIX3RPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg5MzY5Mw==", "bodyText": "This change will break customers and requires a major version bump. This is not optional.", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r561893693", "createdAt": "2021-01-21T13:49:00Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/clirr-ignored-differences.xml", "diffHunk": "@@ -453,4 +453,71 @@\n     <className>com/google/cloud/spanner/TransactionContext</className>\n     <method>com.google.api.core.ApiFuture executeUpdateAsync(com.google.cloud.spanner.Statement)</method>\n   </difference>\n+\n+  <!-- Support creating encrypted databases -->\n+  <difference>\n+    <differenceType>7004</differenceType>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c979bd80b421c116b3b93f054d64e7fab30db07"}, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7c979bd80b421c116b3b93f054d64e7fab30db07", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/7c979bd80b421c116b3b93f054d64e7fab30db07", "committedDate": "2021-01-21T02:53:00Z", "message": "fix: uses wrapper encryption info for backups"}, "afterCommit": {"oid": "1e05535225ce053727f9d6e2a16181c5e182ccb0", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/1e05535225ce053727f9d6e2a16181c5e182ccb0", "committedDate": "2021-01-25T00:17:28Z", "message": "fix: fixes clirr issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgyNDQxNTcw", "url": "https://github.com/googleapis/java-spanner/pull/666#pullrequestreview-582441570", "createdAt": "2021-02-03T14:46:11Z", "commit": {"oid": "8762a96f87aa3ff76f9e59cf850022c0904f0e48"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDo0NjoxMVrOIfF2Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDo0ODoyN1rOIfF9jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ3MjU3OA==", "bodyText": "not the key itself but only the version of the key?", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r569472578", "createdAt": "2021-02-03T14:46:11Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "diffHunk": "@@ -28,8 +28,22 @@\n \n     abstract Builder setSize(long size);\n \n+    /**\n+     * Output only.\n+     *\n+     * <p>The customer-manager encryption key version used to encrypt the backup.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8762a96f87aa3ff76f9e59cf850022c0904f0e48"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ3Mjc0Ng==", "bodyText": "What does this mean?", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r569472746", "createdAt": "2021-02-03T14:46:24Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "diffHunk": "@@ -28,8 +28,22 @@\n \n     abstract Builder setSize(long size);\n \n+    /**\n+     * Output only.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8762a96f87aa3ff76f9e59cf850022c0904f0e48"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ3MzExNQ==", "bodyText": "delete \"to be\"\nit's --> its", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r569473115", "createdAt": "2021-02-03T14:46:50Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "diffHunk": "@@ -152,6 +186,24 @@ public long getSize() {\n     return size;\n   }\n \n+  /**\n+   * Returns the {@link EncryptionConfigInfo} to be used to encrypt the backup during it's creation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8762a96f87aa3ff76f9e59cf850022c0904f0e48"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ3MzY3Mw==", "bodyText": "delete", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r569473673", "createdAt": "2021-02-03T14:47:34Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "diffHunk": "@@ -152,6 +186,24 @@ public long getSize() {\n     return size;\n   }\n \n+  /**\n+   * Returns the {@link EncryptionConfigInfo} to be used to encrypt the backup during it's creation.\n+   * Returns <code>null</code> if no customer-managed encryption key should be used.\n+   */\n+  public EncryptionConfigInfo getEncryptionConfigInfo() {\n+    return encryptionConfigInfo;\n+  }\n+\n+  /**\n+   * Returns the {@link EncryptionInfo} of the backup if the backup is encrypted, or <code>null\n+   * </code> if this backup is not encrypted.\n+   *\n+   * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8762a96f87aa3ff76f9e59cf850022c0904f0e48"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ3NDQ0NA==", "bodyText": "Instead of returning null is there a config info that indicates no encryption?", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r569474444", "createdAt": "2021-02-03T14:48:27Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "diffHunk": "@@ -152,6 +186,24 @@ public long getSize() {\n     return size;\n   }\n \n+  /**\n+   * Returns the {@link EncryptionConfigInfo} to be used to encrypt the backup during it's creation.\n+   * Returns <code>null</code> if no customer-managed encryption key should be used.\n+   */\n+  public EncryptionConfigInfo getEncryptionConfigInfo() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8762a96f87aa3ff76f9e59cf850022c0904f0e48"}, "originalPosition": 91}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5accdf3f7b927c4c82ca26846e8626c4a0679775", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/5accdf3f7b927c4c82ca26846e8626c4a0679775", "committedDate": "2021-02-08T02:09:11Z", "message": "fix: addresses PR comments"}, "afterCommit": {"oid": "00dbe8990fcd2dd8e43b70ef106fb6ee0de534bc", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/00dbe8990fcd2dd8e43b70ef106fb6ee0de534bc", "committedDate": "2021-02-22T05:43:57Z", "message": "Merge branch 'master' of github.com:googleapis/java-spanner into cmek"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afec193c74f2794e4291355a5cd81ef042e23f62", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/afec193c74f2794e4291355a5cd81ef042e23f62", "committedDate": "2021-03-10T03:00:28Z", "message": "feat: add support for encrypted databases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98a1143dc15d4b60c33a5210de33caad01915419", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/98a1143dc15d4b60c33a5210de33caad01915419", "committedDate": "2021-03-10T03:01:00Z", "message": "fix: fix deps and clirr failures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad03175414e4c04f2940c253ffdb6072086b1ccb", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/ad03175414e4c04f2940c253ffdb6072086b1ccb", "committedDate": "2021-03-10T03:01:02Z", "message": "tests: add additional tests for keys"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eff38fffab2584e6b1647e6bb8b007d3458b30c5", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/eff38fffab2584e6b1647e6bb8b007d3458b30c5", "committedDate": "2021-03-10T03:01:02Z", "message": "tests: remove IT and add unit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84da677fc72997aca38dec8b669aa69c23f2a449", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/84da677fc72997aca38dec8b669aa69c23f2a449", "committedDate": "2021-03-10T03:01:02Z", "message": "fix: set null instead of default instance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "981e1a6c85750342bcfdf6f7ee888037df864d1b", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/981e1a6c85750342bcfdf6f7ee888037df864d1b", "committedDate": "2021-03-10T03:01:02Z", "message": "fix: does not set encryption info if null\n\nDoes not set encryption info in the request if it is null"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7101d04a3e1deab381c07fa235eb492130f0b827", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/7101d04a3e1deab381c07fa235eb492130f0b827", "committedDate": "2021-03-10T03:01:02Z", "message": "fix: fixes dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e98e1febd2701ae2e538d120f17cff13b786f6e", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/7e98e1febd2701ae2e538d120f17cff13b786f6e", "committedDate": "2021-03-10T03:11:35Z", "message": "feature: adds support for encrypted backup\n\nAdds the possibility to set encryption config info in the creation of a\nbackup."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13fe320eb40c0f9bee37ade0059fc861cc9a9e0c", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/13fe320eb40c0f9bee37ade0059fc861cc9a9e0c", "committedDate": "2021-03-10T03:11:36Z", "message": "feature: adds support for restoring encrypted dbs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc64e382706e38ef516d52817ed6350530015871", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/fc64e382706e38ef516d52817ed6350530015871", "committedDate": "2021-03-10T03:11:36Z", "message": "Revert \"tests: remove IT and add unit\"\n\nThis reverts commit cc19cf2efd32007ecd351c3b0c1b5942256c31ce."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62284078087da32105bc8ed43845965ef18901e2", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/62284078087da32105bc8ed43845965ef18901e2", "committedDate": "2021-03-10T03:11:36Z", "message": "fix: makes the setEncryptionConfigInfo public\n\nThis is so a backup can be encrypted"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca62bc271c5cb812ce44c9d41f008abfe79e0bc4", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/ca62bc271c5cb812ce44c9d41f008abfe79e0bc4", "committedDate": "2021-03-10T03:11:36Z", "message": "feature: adds tests for cmek\n\nAdds tests for creating encrypted database, creating encrypted backups\nand restoring encrypted databases."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4906c652ff14df2e84368b11c5f55baef6be250", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/a4906c652ff14df2e84368b11c5f55baef6be250", "committedDate": "2021-03-10T03:11:36Z", "message": "fix: removes keys after test finishes\n\nDestroy keys used in CMEK tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec294ed1cd04ba9239c3b573a79dff493b46239d", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/ec294ed1cd04ba9239c3b573a79dff493b46239d", "committedDate": "2021-03-10T03:11:36Z", "message": "fix: fixes clirr errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7d79455adbc2dfb3a7f1e41a43fb078a5f3b04e", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/b7d79455adbc2dfb3a7f1e41a43fb078a5f3b04e", "committedDate": "2021-03-10T03:11:36Z", "message": "fix: ignores failing cmek tests\n\nIgnores the failing CMEK tests until the backend support is enabled in\nproduction."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "428950b98f5fa062a578466dd1b5bf7689a05503", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/428950b98f5fa062a578466dd1b5bf7689a05503", "committedDate": "2021-03-10T03:12:07Z", "message": "fix: uses wrapper encryption info for backups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44cbb331490e077d52305f7b1be1d3d8842e85ee", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/44cbb331490e077d52305f7b1be1d3d8842e85ee", "committedDate": "2021-03-10T03:12:09Z", "message": "fix: fixes clirr issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "489dfeaca1161e7face181b325d4f51d53ccc49d", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/489dfeaca1161e7face181b325d4f51d53ccc49d", "committedDate": "2021-03-10T03:12:09Z", "message": "fix: re-orders clirr issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f4e7d5ad9a483065f02647d666112e4d51a8f6d", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/8f4e7d5ad9a483065f02647d666112e4d51a8f6d", "committedDate": "2021-03-10T03:12:09Z", "message": "fix: addresses PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "060ee646f298040957ba25111b71a6ece8549ea4", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/060ee646f298040957ba25111b71a6ece8549ea4", "committedDate": "2021-03-10T03:18:38Z", "message": "test: fixes database admin client tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "00dbe8990fcd2dd8e43b70ef106fb6ee0de534bc", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/00dbe8990fcd2dd8e43b70ef106fb6ee0de534bc", "committedDate": "2021-02-22T05:43:57Z", "message": "Merge branch 'master' of github.com:googleapis/java-spanner into cmek"}, "afterCommit": {"oid": "060ee646f298040957ba25111b71a6ece8549ea4", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/060ee646f298040957ba25111b71a6ece8549ea4", "committedDate": "2021-03-10T03:18:38Z", "message": "test: fixes database admin client tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da2d9a0ce29d2c1e1dce10cc1ddf2cd712fd579a", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/da2d9a0ce29d2c1e1dce10cc1ddf2cd712fd579a", "committedDate": "2021-03-11T00:36:33Z", "message": "chore: re-formats the code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3c651bb39115a8c85a165cb390e6aeec5f99b72", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/e3c651bb39115a8c85a165cb390e6aeec5f99b72", "committedDate": "2021-03-11T00:39:19Z", "message": "chore: fixes clirr checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6787996d62fd22c858559eb44adce82fc29e8dea", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/6787996d62fd22c858559eb44adce82fc29e8dea", "committedDate": "2021-03-11T10:42:29Z", "message": "tests: adds unit tests for domain classes\n\nAdds unit tests for EncryptionConfigInfo, EncryptionConfig, Backup and\nRestore."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3ebd34262189dadfa23f8006d2a94265c1da42c", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/c3ebd34262189dadfa23f8006d2a94265c1da42c", "committedDate": "2021-03-12T01:46:37Z", "message": "chore: renames EncryptionConfigInfo\n\nRenames EncryptionConfigInfo to EncryptionConfig in order to mirror what\nis the protobuf definition."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d234d91ecb579f2ecefadf1a1e9a9c846a8fc6a", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/7d234d91ecb579f2ecefadf1a1e9a9c846a8fc6a", "committedDate": "2021-03-12T03:33:14Z", "message": "tests: do not create a key on CMEK test\n\nInstead use an existing key and fails if the key is not present."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjEwNzg2ODcy", "url": "https://github.com/googleapis/java-spanner/pull/666#pullrequestreview-610786872", "createdAt": "2021-03-12T13:35:14Z", "commit": {"oid": "7d234d91ecb579f2ecefadf1a1e9a9c846a8fc6a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjEwNzg4MTU3", "url": "https://github.com/googleapis/java-spanner/pull/666#pullrequestreview-610788157", "createdAt": "2021-03-12T13:36:47Z", "commit": {"oid": "7d234d91ecb579f2ecefadf1a1e9a9c846a8fc6a"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3027533d748dd22b71ea3c0f388db8553fa1484f", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/3027533d748dd22b71ea3c0f388db8553fa1484f", "committedDate": "2021-03-15T00:55:59Z", "message": "feat: allows multiple encryption configs\n\nAllows customer managed encryption for create databases (google default\nencryption is just nullifying the value here).\nAllows customer managed encryption, google default encryption and\ndatabase encryption for create backups.\nAllows customer managed encryption, google default encryption and backup\nencryption for restore databases."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7229feeaf6cb2639627690f4c2b8d8739761ec1", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/f7229feeaf6cb2639627690f4c2b8d8739761ec1", "committedDate": "2021-03-15T01:06:22Z", "message": "docs: adds java doc to Restore class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d182b8316bf78322f22dcc7d48d6955cecd844f7", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/d182b8316bf78322f22dcc7d48d6955cecd844f7", "committedDate": "2021-03-15T01:40:25Z", "message": "chore: refactors pom.xml\n\nUses variables to define project id and instance id for running\nintegration tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbf91d0894af3a12dbcf4d6fb41bf3b9205ad3c7", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/fbf91d0894af3a12dbcf4d6fb41bf3b9205ad3c7", "committedDate": "2021-03-15T01:41:02Z", "message": "test: fixes cmek integration test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9ef38220e331d1ad9fa54423806e566a29d02aa", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/f9ef38220e331d1ad9fa54423806e566a29d02aa", "committedDate": "2021-03-15T02:58:44Z", "message": "chore: fixes linting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c865a0ad0c4e3c6a5d7c9b18227d240ffba335e5", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/c865a0ad0c4e3c6a5d7c9b18227d240ffba335e5", "committedDate": "2021-03-15T02:59:34Z", "message": "Revert \"chore: refactors pom.xml\"\n\nThis reverts commit d182b8316bf78322f22dcc7d48d6955cecd844f7."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "811ad2c8f87dd2948525014bf06b69c3dcfc5768", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/811ad2c8f87dd2948525014bf06b69c3dcfc5768", "committedDate": "2021-03-15T04:06:04Z", "message": "test: unifies cmek backup and restore tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f9db7397787e57e43f6d0d006a04eecb145c6d9", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/4f9db7397787e57e43f6d0d006a04eecb145c6d9", "committedDate": "2021-03-16T00:00:07Z", "message": "Merge branch 'master' of github.com:googleapis/java-spanner into cmek"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/d78baf32c654d61d767d2ed168d42d591add4f47", "committedDate": "2021-03-16T06:00:45Z", "message": "chore: adds toString to encryption classes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5OTc5MDg0", "url": "https://github.com/googleapis/java-spanner/pull/666#pullrequestreview-539979084", "createdAt": "2020-11-27T13:26:58Z", "commit": {"oid": "fc151963a8cc4c62cb37e6dafcb48be25f96fd66"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QwODowMDozM1rOI4L47g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QwODozMToyN1rOI4NE1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTc4NTk2Ng==", "bodyText": "nit: This formatting seems strange", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595785966", "createdAt": "2021-03-17T08:00:33Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "diffHunk": "@@ -174,6 +217,23 @@ public long getSize() {\n     return size;\n   }\n \n+  /**\n+   * Returns the {@link BackupEncryptionConfig} to encrypt the backup during its creation. Returns\n+   * <code>\n+   * null</code> if no customer-managed encryption key should be used.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTc4ODQ1Ng==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * google's default encryption, is a customer managed encryption with a provided key. If no\n          \n          \n            \n                 * Google's default encryption, is a customer managed encryption with a provided key. If no", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595788456", "createdAt": "2021-03-17T08:05:08Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseInfo.java", "diffHunk": "@@ -34,6 +35,15 @@\n \n     abstract Builder setEarliestVersionTime(Timestamp earliestVersionTime);\n \n+    /**\n+     * Optional for creating a new backup.\n+     *\n+     * <p>The encryption configuration to be used for the database. The only encryption, other than\n+     * google's default encryption, is a customer managed encryption with a provided key. If no", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTc4ODcyMw==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * encryption is provided, google's default encryption will be used.\n          \n          \n            \n                 * encryption is provided, Google's default encryption will be used.", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595788723", "createdAt": "2021-03-17T08:05:31Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseInfo.java", "diffHunk": "@@ -34,6 +35,15 @@\n \n     abstract Builder setEarliestVersionTime(Timestamp earliestVersionTime);\n \n+    /**\n+     * Optional for creating a new backup.\n+     *\n+     * <p>The encryption configuration to be used for the database. The only encryption, other than\n+     * google's default encryption, is a customer managed encryption with a provided key. If no\n+     * encryption is provided, google's default encryption will be used.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTc4OTM4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2020 Google LLC\n          \n          \n            \n             * Copyright 2021 Google LLC", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595789387", "createdAt": "2021-03-17T08:06:37Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/Restore.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Google LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTc5MzM0NQ==", "bodyText": "I don't think we need this interface. It seems that it is only referenced by the other interfaces that extend this, but this specific marker interface is never used.", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595793345", "createdAt": "2021-03-17T08:13:07Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/encryption/EncryptionConfig.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2021 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.encryption;\n+\n+import com.google.api.core.InternalApi;\n+\n+/**\n+ * Marker interface for encryption configurations that can be applied on databases, backups and\n+ * restores.\n+ */\n+@InternalApi\n+public interface EncryptionConfig {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTc5NzQ5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2020 Google LLC\n          \n          \n            \n             * Copyright 2021 Google LLC", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595797492", "createdAt": "2021-03-17T08:19:45Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/encryption/EncryptionInfo.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2020 Google LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTgwMDIyNg==", "bodyText": "I don't think it is guaranteed that backupInfo.getExpireTime() will always be set, so this could cause a NullPointerException.", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595800226", "createdAt": "2021-03-17T08:24:06Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java", "diffHunk": "@@ -1145,15 +1152,31 @@ public Database call() throws Exception {\n \n   @Override\n   public OperationFuture<Backup, CreateBackupMetadata> createBackup(\n-      final String instanceName, final String backupId, final Backup backup)\n-      throws SpannerException {\n-    CreateBackupRequest request =\n+      final com.google.cloud.spanner.Backup backupInfo) throws SpannerException {\n+    final String instanceName = backupInfo.getInstanceId().getName();\n+    final String databaseName = backupInfo.getDatabase().getName();\n+    final String backupId = backupInfo.getId().getBackup();\n+    final Backup.Builder backupBuilder =\n+        com.google.spanner.admin.database.v1.Backup.newBuilder()\n+            .setDatabase(databaseName)\n+            .setExpireTime(backupInfo.getExpireTime().toProto());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTgwMjk2Nw==", "bodyText": "I think we should check for these conditions in the builder for BackupInfo to ensure that they are actually filled. So that would mean that the build() method of the builder should fail if these fields have not been set.", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595802967", "createdAt": "2021-03-17T08:27:56Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/SpannerRpc.java", "diffHunk": "@@ -216,26 +220,22 @@ public String getNextPageToken() {\n       throws SpannerException;\n \n   /**\n-   * Creates a new backup from the source database specified in the {@link Backup} instance.\n+   * Creates a new backup from the source database specified in the {@link\n+   * com.google.cloud.spanner.Backup} instance.\n    *\n-   * @param instanceName the name of the instance where the backup should be created.\n-   * @param backupId the id of the backup to create.\n-   * @param backup the backup to create. The database and expireTime fields of the backup must be\n-   *     filled.\n+   * @param backupInfo the backup to create. The instance, database and expireTime fields of the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTgwNDk3NQ==", "bodyText": "nit: This line can be removed", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595804975", "createdAt": "2021-03-17T08:30:49Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/encryption/EncryptionConfigProtoMapperTest.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2021 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.spanner.encryption;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import com.google.spanner.admin.database.v1.CreateBackupEncryptionConfig;\n+import com.google.spanner.admin.database.v1.EncryptionConfig;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig;\n+import org.junit.Test;\n+\n+/** Unit tests for {@link com.google.cloud.spanner.encryption.EncryptionConfigProtoMapper} */\n+public class EncryptionConfigProtoMapperTest {\n+\n+  public static final String KMS_KEY_NAME = \"kms-key-name\";\n+\n+  @Test\n+  public void testEncryptionConfig() {\n+    final EncryptionConfig expected =\n+        EncryptionConfig.newBuilder().setKmsKeyName(KMS_KEY_NAME).build();\n+\n+    final EncryptionConfig actual =\n+        EncryptionConfigProtoMapper.encryptionConfig(new CustomerManagedEncryption(KMS_KEY_NAME));\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test\n+  public void testCreateBackupConfigCustomerManagedEncryption() {\n+    final CreateBackupEncryptionConfig expected =\n+        CreateBackupEncryptionConfig.newBuilder()\n+            .setEncryptionType(\n+                CreateBackupEncryptionConfig.EncryptionType.CUSTOMER_MANAGED_ENCRYPTION)\n+            .setKmsKeyName(KMS_KEY_NAME)\n+            .build();\n+\n+    final CreateBackupEncryptionConfig actual =\n+        EncryptionConfigProtoMapper.createBackupEncryptionConfig(\n+            new CustomerManagedEncryption(KMS_KEY_NAME));\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test\n+  public void testCreateBackupConfigGoogleDefaultEncryption() {\n+    final CreateBackupEncryptionConfig expected =\n+        CreateBackupEncryptionConfig.newBuilder()\n+            .setEncryptionType(\n+                CreateBackupEncryptionConfig.EncryptionType.GOOGLE_DEFAULT_ENCRYPTION)\n+            .build();\n+\n+    final CreateBackupEncryptionConfig actual =\n+        EncryptionConfigProtoMapper.createBackupEncryptionConfig(GoogleDefaultEncryption.INSTANCE);\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test\n+  public void testCreateBackupConfigUseDatabaseEncryption() {\n+    final CreateBackupEncryptionConfig expected =\n+        CreateBackupEncryptionConfig.newBuilder()\n+            .setEncryptionType(CreateBackupEncryptionConfig.EncryptionType.USE_DATABASE_ENCRYPTION)\n+            .build();\n+\n+    final CreateBackupEncryptionConfig actual =\n+        EncryptionConfigProtoMapper.createBackupEncryptionConfig(UseDatabaseEncryption.INSTANCE);\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testCreateBackupInvalidEncryption() {\n+    EncryptionConfigProtoMapper.createBackupEncryptionConfig(null);\n+    fail(\"Create backup encryption config with invalid encryption should fail\");\n+  }\n+\n+  @Test\n+  public void testRestoreDatabaseConfigCustomerManagedEncryption() {\n+    final RestoreDatabaseEncryptionConfig expected =\n+        RestoreDatabaseEncryptionConfig.newBuilder()\n+            .setEncryptionType(\n+                RestoreDatabaseEncryptionConfig.EncryptionType.CUSTOMER_MANAGED_ENCRYPTION)\n+            .setKmsKeyName(KMS_KEY_NAME)\n+            .build();\n+\n+    final RestoreDatabaseEncryptionConfig actual =\n+        EncryptionConfigProtoMapper.restoreDatabaseEncryptionConfig(\n+            new CustomerManagedEncryption(KMS_KEY_NAME));\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test\n+  public void testRestoreDatabaseConfigGoogleDefaultEncryption() {\n+    final RestoreDatabaseEncryptionConfig expected =\n+        RestoreDatabaseEncryptionConfig.newBuilder()\n+            .setEncryptionType(\n+                RestoreDatabaseEncryptionConfig.EncryptionType.GOOGLE_DEFAULT_ENCRYPTION)\n+            .build();\n+\n+    final RestoreDatabaseEncryptionConfig actual =\n+        EncryptionConfigProtoMapper.restoreDatabaseEncryptionConfig(\n+            GoogleDefaultEncryption.INSTANCE);\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test\n+  public void testRestoreDatabaseConfigUseBackupEncryption() {\n+    final RestoreDatabaseEncryptionConfig expected =\n+        RestoreDatabaseEncryptionConfig.newBuilder()\n+            .setEncryptionType(\n+                RestoreDatabaseEncryptionConfig.EncryptionType\n+                    .USE_CONFIG_DEFAULT_OR_BACKUP_ENCRYPTION)\n+            .build();\n+\n+    final RestoreDatabaseEncryptionConfig actual =\n+        EncryptionConfigProtoMapper.restoreDatabaseEncryptionConfig(UseBackupEncryption.INSTANCE);\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testRestoreDatabaseConfigInvalidEncryption() {\n+    EncryptionConfigProtoMapper.restoreDatabaseEncryptionConfig(null);\n+    fail(\"Restore database encryption config with invalid encryption should fail\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTgwNTEwNg==", "bodyText": "nit: This line can be removed", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595805106", "createdAt": "2021-03-17T08:31:02Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/encryption/EncryptionConfigProtoMapperTest.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2021 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.spanner.encryption;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import com.google.spanner.admin.database.v1.CreateBackupEncryptionConfig;\n+import com.google.spanner.admin.database.v1.EncryptionConfig;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig;\n+import org.junit.Test;\n+\n+/** Unit tests for {@link com.google.cloud.spanner.encryption.EncryptionConfigProtoMapper} */\n+public class EncryptionConfigProtoMapperTest {\n+\n+  public static final String KMS_KEY_NAME = \"kms-key-name\";\n+\n+  @Test\n+  public void testEncryptionConfig() {\n+    final EncryptionConfig expected =\n+        EncryptionConfig.newBuilder().setKmsKeyName(KMS_KEY_NAME).build();\n+\n+    final EncryptionConfig actual =\n+        EncryptionConfigProtoMapper.encryptionConfig(new CustomerManagedEncryption(KMS_KEY_NAME));\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test\n+  public void testCreateBackupConfigCustomerManagedEncryption() {\n+    final CreateBackupEncryptionConfig expected =\n+        CreateBackupEncryptionConfig.newBuilder()\n+            .setEncryptionType(\n+                CreateBackupEncryptionConfig.EncryptionType.CUSTOMER_MANAGED_ENCRYPTION)\n+            .setKmsKeyName(KMS_KEY_NAME)\n+            .build();\n+\n+    final CreateBackupEncryptionConfig actual =\n+        EncryptionConfigProtoMapper.createBackupEncryptionConfig(\n+            new CustomerManagedEncryption(KMS_KEY_NAME));\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test\n+  public void testCreateBackupConfigGoogleDefaultEncryption() {\n+    final CreateBackupEncryptionConfig expected =\n+        CreateBackupEncryptionConfig.newBuilder()\n+            .setEncryptionType(\n+                CreateBackupEncryptionConfig.EncryptionType.GOOGLE_DEFAULT_ENCRYPTION)\n+            .build();\n+\n+    final CreateBackupEncryptionConfig actual =\n+        EncryptionConfigProtoMapper.createBackupEncryptionConfig(GoogleDefaultEncryption.INSTANCE);\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test\n+  public void testCreateBackupConfigUseDatabaseEncryption() {\n+    final CreateBackupEncryptionConfig expected =\n+        CreateBackupEncryptionConfig.newBuilder()\n+            .setEncryptionType(CreateBackupEncryptionConfig.EncryptionType.USE_DATABASE_ENCRYPTION)\n+            .build();\n+\n+    final CreateBackupEncryptionConfig actual =\n+        EncryptionConfigProtoMapper.createBackupEncryptionConfig(UseDatabaseEncryption.INSTANCE);\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testCreateBackupInvalidEncryption() {\n+    EncryptionConfigProtoMapper.createBackupEncryptionConfig(null);\n+    fail(\"Create backup encryption config with invalid encryption should fail\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTgwNTM5Nw==", "bodyText": "nit: This line can be removed", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595805397", "createdAt": "2021-03-17T08:31:27Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/encryption/EncryptionConfigsTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2021 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.spanner.encryption;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n+\n+/** Unit tests for {@link EncryptionConfigs} */\n+public class EncryptionConfigsTest {\n+\n+  @Test\n+  public void testCustomerManagedEncryption() {\n+    final CustomerManagedEncryption expected = new CustomerManagedEncryption(\"kms-key-name\");\n+\n+    final CustomerManagedEncryption actual =\n+        EncryptionConfigs.customerManagedEncryption(\"kms-key-name\");\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testCustomerManagedEncryptionNullKeyName() {\n+    EncryptionConfigs.customerManagedEncryption(null);\n+    fail(\"Customer managed encryption with null key should fail\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2493bcf01c6088a0e78a70f5a2e51dca823ada1c", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/2493bcf01c6088a0e78a70f5a2e51dca823ada1c", "committedDate": "2021-03-17T10:24:27Z", "message": "docs: updates DatabaseInfo javadoc\n\nCo-authored-by: Knut Olav L\u00f8ite <koloite@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3fe9ab44e2fb54dfc4dff21c6e14845739849cc", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/d3fe9ab44e2fb54dfc4dff21c6e14845739849cc", "committedDate": "2021-03-17T10:24:56Z", "message": "docs: updates Restore javadocs\n\nCo-authored-by: Knut Olav L\u00f8ite <koloite@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ff8a8902541a1f512ea392680219afcb336fdf3", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/3ff8a8902541a1f512ea392680219afcb336fdf3", "committedDate": "2021-03-17T10:25:11Z", "message": "docs: updates DatabaseInfo javadocs\n\nCo-authored-by: Knut Olav L\u00f8ite <koloite@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acecbfe3bd029e76128701c67107f289b21ace19", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/acecbfe3bd029e76128701c67107f289b21ace19", "committedDate": "2021-03-17T10:46:54Z", "message": "fix: addresses PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf9f047ae8dcf7ba197f20481a93a4b47e84a05b", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/cf9f047ae8dcf7ba197f20481a93a4b47e84a05b", "committedDate": "2021-03-17T10:15:52Z", "message": "Update google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseInfo.java\n\nCo-authored-by: Knut Olav L\u00f8ite <koloite@gmail.com>"}, "afterCommit": {"oid": "acecbfe3bd029e76128701c67107f289b21ace19", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/acecbfe3bd029e76128701c67107f289b21ace19", "committedDate": "2021-03-17T10:46:54Z", "message": "fix: addresses PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09fb850709680bdc1f9d6e40077fe73e089649a3", "author": {"user": {"login": "thiagotnunes", "name": "Thiago Nunes"}}, "url": "https://github.com/googleapis/java-spanner/commit/09fb850709680bdc1f9d6e40077fe73e089649a3", "committedDate": "2021-03-17T23:24:44Z", "message": "tests: reformats"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 922, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}