{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1OTI4NTUx", "number": 707, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo1OTo1M1rOFDvnJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo1OTo1M1rOFDvnJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDcwMTE5OnYy", "diffSide": "RIGHT", "path": "samples/snippets/src/main/java/com/example/spanner/StatementTimeoutExample.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo1OTo1M1rOIDi-3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwMDoxMTo0OFrOIGlt0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4OTc5MA==", "bodyText": "How does this work in a multiprocessing environment when several processes are trying to test this at the same time?", "url": "https://github.com/googleapis/java-spanner/pull/707#discussion_r540589790", "createdAt": "2020-12-10T23:59:53Z", "author": {"login": "lesv"}, "path": "samples/snippets/src/main/java/com/example/spanner/StatementTimeoutExample.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+import com.google.api.gax.grpc.GrpcCallContext;\n+import com.google.api.gax.rpc.ApiCallContext;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.SpannerOptions.CallContextConfigurator;\n+import com.google.cloud.spanner.Statement;\n+import com.google.cloud.spanner.TransactionContext;\n+import com.google.cloud.spanner.TransactionRunner.TransactionCallable;\n+import com.google.spanner.v1.SpannerGrpc;\n+import io.grpc.CallOptions;\n+import io.grpc.Context;\n+import io.grpc.MethodDescriptor;\n+import java.util.concurrent.TimeUnit;\n+\n+class StatementTimeoutExample {\n+\n+  static void executeSqlWithTimeout() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder().setProjectId(projectId).build().getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+      executeSqlWithTimeout(client);\n+    }\n+  }\n+\n+  static void executeSqlWithTimeout(DatabaseClient client) {\n+    CallContextConfigurator configurator = new CallContextConfigurator() {\n+      public <ReqT, RespT> ApiCallContext configure(ApiCallContext context, ReqT request,\n+          MethodDescriptor<ReqT, RespT> method) {\n+        // DML uses the ExecuteSql RPC.\n+        if (method == SpannerGrpc.getExecuteSqlMethod()) {\n+          return GrpcCallContext.createDefault()\n+              .withCallOptions(CallOptions.DEFAULT.withDeadlineAfter(60L, TimeUnit.SECONDS));\n+        }\n+        // Return null to indicate that the default should be used for other methods.\n+        return null;\n+      }\n+    };\n+    // Create a context that uses the custom call configuration.\n+    Context context =\n+        Context.current().withValue(SpannerOptions.CALL_CONTEXT_CONFIGURATOR_KEY, configurator);\n+    // Run the transaction in the custom context.\n+    context.run(new Runnable() {\n+      public void run() {\n+        client.readWriteTransaction().run(new TransactionCallable<long[]>() {\n+          public long[] run(TransactionContext transaction) throws Exception {\n+            String sql = \"INSERT Singers (SingerId, FirstName, LastName)\\n\"\n+                + \"VALUES (20, 'George', 'Washington')\";\n+            long rowCount = transaction.executeUpdate(Statement.of(sql));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f794dd43665b618e51002204b651049ea5aa013b"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY5NjQ1Mg==", "bodyText": "Each test run always creates a database that is only used for that test run:\n\n  \n    \n      java-spanner/samples/snippets/src/test/java/com/example/spanner/SpannerStandaloneExamplesIT.java\n    \n    \n        Lines 80 to 95\n      in\n      f794dd4\n    \n    \n    \n    \n\n        \n          \n           dbClient \n        \n\n        \n          \n               .createDatabase( \n        \n\n        \n          \n                   instanceId, \n        \n\n        \n          \n                   databaseId, \n        \n\n        \n          \n                   ImmutableList.of( \n        \n\n        \n          \n                       \"CREATE TABLE Singers (\" \n        \n\n        \n          \n                           + \"  SingerId   INT64 NOT NULL,\" \n        \n\n        \n          \n                           + \"  FirstName  STRING(1024),\" \n        \n\n        \n          \n                           + \"  LastName   STRING(1024),\" \n        \n\n        \n          \n                           + \"  SingerInfo BYTES(MAX)\" \n        \n\n        \n          \n                           + \") PRIMARY KEY (SingerId)\", \n        \n\n        \n          \n                       \"CREATE TABLE Venues (\" \n        \n\n        \n          \n                           + \"VenueId INT64 NOT NULL,\" \n        \n\n        \n          \n                           + \"Revenue NUMERIC\" \n        \n\n        \n          \n                           + \") PRIMARY KEY (VenueId)\")) \n        \n\n        \n          \n               .get();", "url": "https://github.com/googleapis/java-spanner/pull/707#discussion_r540696452", "createdAt": "2020-12-11T05:16:25Z", "author": {"login": "olavloite"}, "path": "samples/snippets/src/main/java/com/example/spanner/StatementTimeoutExample.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+import com.google.api.gax.grpc.GrpcCallContext;\n+import com.google.api.gax.rpc.ApiCallContext;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.SpannerOptions.CallContextConfigurator;\n+import com.google.cloud.spanner.Statement;\n+import com.google.cloud.spanner.TransactionContext;\n+import com.google.cloud.spanner.TransactionRunner.TransactionCallable;\n+import com.google.spanner.v1.SpannerGrpc;\n+import io.grpc.CallOptions;\n+import io.grpc.Context;\n+import io.grpc.MethodDescriptor;\n+import java.util.concurrent.TimeUnit;\n+\n+class StatementTimeoutExample {\n+\n+  static void executeSqlWithTimeout() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder().setProjectId(projectId).build().getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+      executeSqlWithTimeout(client);\n+    }\n+  }\n+\n+  static void executeSqlWithTimeout(DatabaseClient client) {\n+    CallContextConfigurator configurator = new CallContextConfigurator() {\n+      public <ReqT, RespT> ApiCallContext configure(ApiCallContext context, ReqT request,\n+          MethodDescriptor<ReqT, RespT> method) {\n+        // DML uses the ExecuteSql RPC.\n+        if (method == SpannerGrpc.getExecuteSqlMethod()) {\n+          return GrpcCallContext.createDefault()\n+              .withCallOptions(CallOptions.DEFAULT.withDeadlineAfter(60L, TimeUnit.SECONDS));\n+        }\n+        // Return null to indicate that the default should be used for other methods.\n+        return null;\n+      }\n+    };\n+    // Create a context that uses the custom call configuration.\n+    Context context =\n+        Context.current().withValue(SpannerOptions.CALL_CONTEXT_CONFIGURATOR_KEY, configurator);\n+    // Run the transaction in the custom context.\n+    context.run(new Runnable() {\n+      public void run() {\n+        client.readWriteTransaction().run(new TransactionCallable<long[]>() {\n+          public long[] run(TransactionContext transaction) throws Exception {\n+            String sql = \"INSERT Singers (SingerId, FirstName, LastName)\\n\"\n+                + \"VALUES (20, 'George', 'Washington')\";\n+            long rowCount = transaction.executeUpdate(Statement.of(sql));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4OTc5MA=="}, "originalCommit": {"oid": "f794dd43665b618e51002204b651049ea5aa013b"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc3MzcwNw==", "bodyText": "Should work to create and drop db before and after each test, but dbs need be unique so they don't overlap. Will dbs be unique with current use of instanceid/databseId?", "url": "https://github.com/googleapis/java-spanner/pull/707#discussion_r543773707", "createdAt": "2020-12-15T23:55:10Z", "author": {"login": "eaball35"}, "path": "samples/snippets/src/main/java/com/example/spanner/StatementTimeoutExample.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+import com.google.api.gax.grpc.GrpcCallContext;\n+import com.google.api.gax.rpc.ApiCallContext;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.SpannerOptions.CallContextConfigurator;\n+import com.google.cloud.spanner.Statement;\n+import com.google.cloud.spanner.TransactionContext;\n+import com.google.cloud.spanner.TransactionRunner.TransactionCallable;\n+import com.google.spanner.v1.SpannerGrpc;\n+import io.grpc.CallOptions;\n+import io.grpc.Context;\n+import io.grpc.MethodDescriptor;\n+import java.util.concurrent.TimeUnit;\n+\n+class StatementTimeoutExample {\n+\n+  static void executeSqlWithTimeout() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder().setProjectId(projectId).build().getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+      executeSqlWithTimeout(client);\n+    }\n+  }\n+\n+  static void executeSqlWithTimeout(DatabaseClient client) {\n+    CallContextConfigurator configurator = new CallContextConfigurator() {\n+      public <ReqT, RespT> ApiCallContext configure(ApiCallContext context, ReqT request,\n+          MethodDescriptor<ReqT, RespT> method) {\n+        // DML uses the ExecuteSql RPC.\n+        if (method == SpannerGrpc.getExecuteSqlMethod()) {\n+          return GrpcCallContext.createDefault()\n+              .withCallOptions(CallOptions.DEFAULT.withDeadlineAfter(60L, TimeUnit.SECONDS));\n+        }\n+        // Return null to indicate that the default should be used for other methods.\n+        return null;\n+      }\n+    };\n+    // Create a context that uses the custom call configuration.\n+    Context context =\n+        Context.current().withValue(SpannerOptions.CALL_CONTEXT_CONFIGURATOR_KEY, configurator);\n+    // Run the transaction in the custom context.\n+    context.run(new Runnable() {\n+      public void run() {\n+        client.readWriteTransaction().run(new TransactionCallable<long[]>() {\n+          public long[] run(TransactionContext transaction) throws Exception {\n+            String sql = \"INSERT Singers (SingerId, FirstName, LastName)\\n\"\n+                + \"VALUES (20, 'George', 'Washington')\";\n+            long rowCount = transaction.executeUpdate(Statement.of(sql));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4OTc5MA=="}, "originalCommit": {"oid": "f794dd43665b618e51002204b651049ea5aa013b"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc4MDMwNA==", "bodyText": "Yes, the databaseId is uniquely generated for each test run by taking the system property as a base id and appending a UUID:\n\nGetting the base databaseId: \n  \n    \n      java-spanner/samples/snippets/src/test/java/com/example/spanner/SpannerStandaloneExamplesIT.java\n    \n    \n         Line 52\n      in\n      e6a34d9\n    \n    \n    \n    \n\n        \n          \n           private static String databaseId = SpannerSampleIT.formatForTest(baseDatabaseId); \n        \n    \n  \n\n\nAppending a UUID: \n  \n    \n      java-spanner/samples/snippets/src/test/java/com/example/spanner/SpannerSampleIT.java\n    \n    \n        Lines 439 to 441\n      in\n      2b3775a\n    \n    \n    \n    \n\n        \n          \n           static String formatForTest(String name) { \n        \n\n        \n          \n             return name + \"-\" + UUID.randomUUID().toString().substring(0, DBID_LENGTH); \n        \n\n        \n          \n           }", "url": "https://github.com/googleapis/java-spanner/pull/707#discussion_r543780304", "createdAt": "2020-12-16T00:11:48Z", "author": {"login": "olavloite"}, "path": "samples/snippets/src/main/java/com/example/spanner/StatementTimeoutExample.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example.spanner;\n+\n+import com.google.api.gax.grpc.GrpcCallContext;\n+import com.google.api.gax.rpc.ApiCallContext;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.Spanner;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.SpannerOptions.CallContextConfigurator;\n+import com.google.cloud.spanner.Statement;\n+import com.google.cloud.spanner.TransactionContext;\n+import com.google.cloud.spanner.TransactionRunner.TransactionCallable;\n+import com.google.spanner.v1.SpannerGrpc;\n+import io.grpc.CallOptions;\n+import io.grpc.Context;\n+import io.grpc.MethodDescriptor;\n+import java.util.concurrent.TimeUnit;\n+\n+class StatementTimeoutExample {\n+\n+  static void executeSqlWithTimeout() {\n+    // TODO(developer): Replace these variables before running the sample.\n+    String projectId = \"my-project\";\n+    String instanceId = \"my-instance\";\n+    String databaseId = \"my-database\";\n+\n+    try (Spanner spanner =\n+        SpannerOptions.newBuilder().setProjectId(projectId).build().getService()) {\n+      DatabaseClient client =\n+          spanner.getDatabaseClient(DatabaseId.of(projectId, instanceId, databaseId));\n+      executeSqlWithTimeout(client);\n+    }\n+  }\n+\n+  static void executeSqlWithTimeout(DatabaseClient client) {\n+    CallContextConfigurator configurator = new CallContextConfigurator() {\n+      public <ReqT, RespT> ApiCallContext configure(ApiCallContext context, ReqT request,\n+          MethodDescriptor<ReqT, RespT> method) {\n+        // DML uses the ExecuteSql RPC.\n+        if (method == SpannerGrpc.getExecuteSqlMethod()) {\n+          return GrpcCallContext.createDefault()\n+              .withCallOptions(CallOptions.DEFAULT.withDeadlineAfter(60L, TimeUnit.SECONDS));\n+        }\n+        // Return null to indicate that the default should be used for other methods.\n+        return null;\n+      }\n+    };\n+    // Create a context that uses the custom call configuration.\n+    Context context =\n+        Context.current().withValue(SpannerOptions.CALL_CONTEXT_CONFIGURATOR_KEY, configurator);\n+    // Run the transaction in the custom context.\n+    context.run(new Runnable() {\n+      public void run() {\n+        client.readWriteTransaction().run(new TransactionCallable<long[]>() {\n+          public long[] run(TransactionContext transaction) throws Exception {\n+            String sql = \"INSERT Singers (SingerId, FirstName, LastName)\\n\"\n+                + \"VALUES (20, 'George', 'Washington')\";\n+            long rowCount = transaction.executeUpdate(Statement.of(sql));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4OTc5MA=="}, "originalCommit": {"oid": "f794dd43665b618e51002204b651049ea5aa013b"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3273, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}