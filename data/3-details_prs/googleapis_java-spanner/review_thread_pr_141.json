{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMTI0MzI0", "number": 141, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwOTo1MToyM1rODv6zyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjozNDowOVrODwMHKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTczMTk1OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwOTo1MToyM1rOGCntIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjoyNzoyN1rOGDDKGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQwMDg2Nw==", "bodyText": "I think we don't specify retry settings for non-idempotent RPCs. Do you know what this will default to then?", "url": "https://github.com/googleapis/java-spanner/pull/141#discussion_r405400867", "createdAt": "2020-04-08T09:51:23Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java", "diffHunk": "@@ -584,30 +780,92 @@ public Database getDatabase(String databaseName) throws SpannerException {\n \n   @Override\n   public OperationFuture<Backup, CreateBackupMetadata> createBackup(\n-      String instanceName, String backupId, Backup backup) throws SpannerException {\n-    acquireAdministrativeRequestsRateLimiter();\n+      final String instanceName, final String backupId, final Backup backup)\n+      throws SpannerException {\n     CreateBackupRequest request =\n         CreateBackupRequest.newBuilder()\n             .setParent(instanceName)\n             .setBackupId(backupId)\n             .setBackup(backup)\n             .build();\n-    GrpcCallContext context = newCallContext(null, instanceName);\n-    return databaseAdminStub.createBackupOperationCallable().futureCall(request, context);\n+    OperationFutureCallable<CreateBackupRequest, Backup, CreateBackupMetadata> callable =\n+        new OperationFutureCallable<CreateBackupRequest, Backup, CreateBackupMetadata>(\n+            CreateBackupMetadata.class,\n+            databaseAdminStub.createBackupOperationCallable(),\n+            request,\n+            instanceName,\n+            new OperationsLister() {\n+              @Override\n+              public Paginated<Operation> listOperations(String nextPageToken) {\n+                return listBackupOperations(\n+                    instanceName,\n+                    0,\n+                    String.format(\n+                        \"(metadata.name:%s) AND (metadata.@type:type.googleapis.com/%s)\",\n+                        String.format(\"%s/backups/%s\", instanceName, backupId),\n+                        CreateBackupMetadata.getDescriptor().getFullName()),\n+                    nextPageToken);\n+              }\n+            },\n+            new Function<CreateBackupMetadata, Timestamp>() {\n+              @Override\n+              public Timestamp apply(CreateBackupMetadata input) {\n+                return input.getProgress().getStartTime();\n+              }\n+            });\n+    return RetryHelper.runWithRetries(\n+        callable,\n+        databaseAdminStubSettings\n+            .createBackupOperationSettings()\n+            .getInitialCallSettings()\n+            .getRetrySettings(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "771ae9037fa3b503c76c49264ec7d093dc64b169"}, "originalPosition": 349}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQwNTUyNQ==", "bodyText": "There are defaults defined in the gapic configuration file as well, but those are already overridden by the client library. The defaults are set in the constructor of SpannerOptions.Builder:\n\n  \n    \n      java-spanner/google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerOptions.java\n    \n    \n        Lines 242 to 295\n      in\n      9e5a1cd\n    \n    \n    \n    \n\n        \n          \n           private Builder() { \n        \n\n        \n          \n             // Manually set retry and polling settings that work. \n        \n\n        \n          \n             OperationTimedPollAlgorithm longRunningPollingAlgorithm = \n        \n\n        \n          \n                 OperationTimedPollAlgorithm.create( \n        \n\n        \n          \n                     RetrySettings.newBuilder() \n        \n\n        \n          \n                         .setInitialRpcTimeout(Duration.ofSeconds(60L)) \n        \n\n        \n          \n                         .setMaxRpcTimeout(Duration.ofSeconds(600L)) \n        \n\n        \n          \n                         .setInitialRetryDelay(Duration.ofSeconds(20L)) \n        \n\n        \n          \n                         .setMaxRetryDelay(Duration.ofSeconds(45L)) \n        \n\n        \n          \n                         .setRetryDelayMultiplier(1.5) \n        \n\n        \n          \n                         .setRpcTimeoutMultiplier(1.5) \n        \n\n        \n          \n                         .setTotalTimeout(Duration.ofHours(48L)) \n        \n\n        \n          \n                         .build()); \n        \n\n        \n          \n             RetrySettings longRunningRetrySettings = \n        \n\n        \n          \n                 RetrySettings.newBuilder() \n        \n\n        \n          \n                     .setInitialRpcTimeout(Duration.ofSeconds(60L)) \n        \n\n        \n          \n                     .setMaxRpcTimeout(Duration.ofSeconds(600L)) \n        \n\n        \n          \n                     .setInitialRetryDelay(Duration.ofSeconds(20L)) \n        \n\n        \n          \n                     .setMaxRetryDelay(Duration.ofSeconds(45L)) \n        \n\n        \n          \n                     .setRetryDelayMultiplier(1.5) \n        \n\n        \n          \n                     .setRpcTimeoutMultiplier(1.5) \n        \n\n        \n          \n                     .setTotalTimeout(Duration.ofHours(48L)) \n        \n\n        \n          \n                     .build(); \n        \n\n        \n          \n             databaseAdminStubSettingsBuilder \n        \n\n        \n          \n                 .createDatabaseOperationSettings() \n        \n\n        \n          \n                 .setPollingAlgorithm(longRunningPollingAlgorithm) \n        \n\n        \n          \n                 .setInitialCallSettings( \n        \n\n        \n          \n                     UnaryCallSettings \n        \n\n        \n          \n                         .<CreateDatabaseRequest, OperationSnapshot>newUnaryCallSettingsBuilder() \n        \n\n        \n          \n                         .setRetrySettings(longRunningRetrySettings) \n        \n\n        \n          \n                         .build()); \n        \n\n        \n          \n             databaseAdminStubSettingsBuilder \n        \n\n        \n          \n                 .createBackupOperationSettings() \n        \n\n        \n          \n                 .setPollingAlgorithm(longRunningPollingAlgorithm) \n        \n\n        \n          \n                 .setInitialCallSettings( \n        \n\n        \n          \n                     UnaryCallSettings \n        \n\n        \n          \n                         .<CreateBackupRequest, OperationSnapshot>newUnaryCallSettingsBuilder() \n        \n\n        \n          \n                         .setRetrySettings(longRunningRetrySettings) \n        \n\n        \n          \n                         .build()); \n        \n\n        \n          \n             databaseAdminStubSettingsBuilder \n        \n\n        \n          \n                 .restoreDatabaseOperationSettings() \n        \n\n        \n          \n                 .setPollingAlgorithm(longRunningPollingAlgorithm) \n        \n\n        \n          \n                 .setInitialCallSettings( \n        \n\n        \n          \n                     UnaryCallSettings \n        \n\n        \n          \n                         .<RestoreDatabaseRequest, OperationSnapshot>newUnaryCallSettingsBuilder() \n        \n\n        \n          \n                         .setRetrySettings(longRunningRetrySettings) \n        \n\n        \n          \n                         .build()); \n        \n\n        \n          \n             databaseAdminStubSettingsBuilder \n        \n\n        \n          \n                 .deleteBackupSettings() \n        \n\n        \n          \n                 .setRetrySettings(longRunningRetrySettings); \n        \n\n        \n          \n             databaseAdminStubSettingsBuilder \n        \n\n        \n          \n                 .updateBackupSettings() \n        \n\n        \n          \n                 .setRetrySettings(longRunningRetrySettings); \n        \n\n        \n          \n           }", "url": "https://github.com/googleapis/java-spanner/pull/141#discussion_r405405525", "createdAt": "2020-04-08T09:59:05Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java", "diffHunk": "@@ -584,30 +780,92 @@ public Database getDatabase(String databaseName) throws SpannerException {\n \n   @Override\n   public OperationFuture<Backup, CreateBackupMetadata> createBackup(\n-      String instanceName, String backupId, Backup backup) throws SpannerException {\n-    acquireAdministrativeRequestsRateLimiter();\n+      final String instanceName, final String backupId, final Backup backup)\n+      throws SpannerException {\n     CreateBackupRequest request =\n         CreateBackupRequest.newBuilder()\n             .setParent(instanceName)\n             .setBackupId(backupId)\n             .setBackup(backup)\n             .build();\n-    GrpcCallContext context = newCallContext(null, instanceName);\n-    return databaseAdminStub.createBackupOperationCallable().futureCall(request, context);\n+    OperationFutureCallable<CreateBackupRequest, Backup, CreateBackupMetadata> callable =\n+        new OperationFutureCallable<CreateBackupRequest, Backup, CreateBackupMetadata>(\n+            CreateBackupMetadata.class,\n+            databaseAdminStub.createBackupOperationCallable(),\n+            request,\n+            instanceName,\n+            new OperationsLister() {\n+              @Override\n+              public Paginated<Operation> listOperations(String nextPageToken) {\n+                return listBackupOperations(\n+                    instanceName,\n+                    0,\n+                    String.format(\n+                        \"(metadata.name:%s) AND (metadata.@type:type.googleapis.com/%s)\",\n+                        String.format(\"%s/backups/%s\", instanceName, backupId),\n+                        CreateBackupMetadata.getDescriptor().getFullName()),\n+                    nextPageToken);\n+              }\n+            },\n+            new Function<CreateBackupMetadata, Timestamp>() {\n+              @Override\n+              public Timestamp apply(CreateBackupMetadata input) {\n+                return input.getProgress().getStartTime();\n+              }\n+            });\n+    return RetryHelper.runWithRetries(\n+        callable,\n+        databaseAdminStubSettings\n+            .createBackupOperationSettings()\n+            .getInitialCallSettings()\n+            .getRetrySettings(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQwMDg2Nw=="}, "originalCommit": {"oid": "771ae9037fa3b503c76c49264ec7d093dc64b169"}, "originalPosition": 349}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg1MDY1MA==", "bodyText": "So does this mean that the Java client library has its own retrying settings which are different from the gapic config file?", "url": "https://github.com/googleapis/java-spanner/pull/141#discussion_r405850650", "createdAt": "2020-04-08T22:27:27Z", "author": {"login": "hengfengli"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java", "diffHunk": "@@ -584,30 +780,92 @@ public Database getDatabase(String databaseName) throws SpannerException {\n \n   @Override\n   public OperationFuture<Backup, CreateBackupMetadata> createBackup(\n-      String instanceName, String backupId, Backup backup) throws SpannerException {\n-    acquireAdministrativeRequestsRateLimiter();\n+      final String instanceName, final String backupId, final Backup backup)\n+      throws SpannerException {\n     CreateBackupRequest request =\n         CreateBackupRequest.newBuilder()\n             .setParent(instanceName)\n             .setBackupId(backupId)\n             .setBackup(backup)\n             .build();\n-    GrpcCallContext context = newCallContext(null, instanceName);\n-    return databaseAdminStub.createBackupOperationCallable().futureCall(request, context);\n+    OperationFutureCallable<CreateBackupRequest, Backup, CreateBackupMetadata> callable =\n+        new OperationFutureCallable<CreateBackupRequest, Backup, CreateBackupMetadata>(\n+            CreateBackupMetadata.class,\n+            databaseAdminStub.createBackupOperationCallable(),\n+            request,\n+            instanceName,\n+            new OperationsLister() {\n+              @Override\n+              public Paginated<Operation> listOperations(String nextPageToken) {\n+                return listBackupOperations(\n+                    instanceName,\n+                    0,\n+                    String.format(\n+                        \"(metadata.name:%s) AND (metadata.@type:type.googleapis.com/%s)\",\n+                        String.format(\"%s/backups/%s\", instanceName, backupId),\n+                        CreateBackupMetadata.getDescriptor().getFullName()),\n+                    nextPageToken);\n+              }\n+            },\n+            new Function<CreateBackupMetadata, Timestamp>() {\n+              @Override\n+              public Timestamp apply(CreateBackupMetadata input) {\n+                return input.getProgress().getStartTime();\n+              }\n+            });\n+    return RetryHelper.runWithRetries(\n+        callable,\n+        databaseAdminStubSettings\n+            .createBackupOperationSettings()\n+            .getInitialCallSettings()\n+            .getRetrySettings(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQwMDg2Nw=="}, "originalCommit": {"oid": "771ae9037fa3b503c76c49264ec7d093dc64b169"}, "originalPosition": 349}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODU2NjgxOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerOptions.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjozNDowOVrOGDDUCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzoyNjozM1rOGDMtbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg1MzE5Mw==", "bodyText": "Why do we need to manually specify the retryable codes here? In the gapic config file (https://github.com/googleapis/googleapis/blob/d741cd976975c745d0199987aff0e908b8352992/google/spanner/admin/database/v1/spanner_admin_database_grpc_service_config.json#L58-L67), updateBackup will retry DEADLINE_EXCEEDED and UNAVAILABLE. Shouldn't this code be auto-generated?\nI guess Java gapic code generator is using a different config file: https://github.com/googleapis/googleapis/blob/master/google/spanner/admin/database/v1/spanner_admin_database_gapic.yaml#L83-L86.", "url": "https://github.com/googleapis/java-spanner/pull/141#discussion_r405853193", "createdAt": "2020-04-08T22:34:09Z", "author": {"login": "hengfengli"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerOptions.java", "diffHunk": "@@ -291,7 +292,8 @@ private Builder() {\n           .setRetrySettings(longRunningRetrySettings);\n       databaseAdminStubSettingsBuilder\n           .updateBackupSettings()\n-          .setRetrySettings(longRunningRetrySettings);\n+          .setRetrySettings(longRunningRetrySettings)\n+          .setRetryableCodes(StatusCode.Code.DEADLINE_EXCEEDED, StatusCode.Code.UNAVAILABLE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "771ae9037fa3b503c76c49264ec7d093dc64b169"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg1NDAyNw==", "bodyText": "Just curious: why do we manually set retrying settings instead of using the default values from the gapic config file?", "url": "https://github.com/googleapis/java-spanner/pull/141#discussion_r405854027", "createdAt": "2020-04-08T22:36:17Z", "author": {"login": "hengfengli"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerOptions.java", "diffHunk": "@@ -291,7 +292,8 @@ private Builder() {\n           .setRetrySettings(longRunningRetrySettings);\n       databaseAdminStubSettingsBuilder\n           .updateBackupSettings()\n-          .setRetrySettings(longRunningRetrySettings);\n+          .setRetrySettings(longRunningRetrySettings)\n+          .setRetryableCodes(StatusCode.Code.DEADLINE_EXCEEDED, StatusCode.Code.UNAVAILABLE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg1MzE5Mw=="}, "originalCommit": {"oid": "771ae9037fa3b503c76c49264ec7d093dc64b169"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNDE4OA==", "bodyText": "I had a lot of problems / transient errors using the default values when working on the backups feature. So I set the values manually to try to find settings that did work, so that we can set them back to the default config.\nSo the Java client should definitely not continue to use custom retry settings. Once we have verified that these settings work well, we should set these as the default in the config file.", "url": "https://github.com/googleapis/java-spanner/pull/141#discussion_r406004188", "createdAt": "2020-04-09T07:20:22Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerOptions.java", "diffHunk": "@@ -291,7 +292,8 @@ private Builder() {\n           .setRetrySettings(longRunningRetrySettings);\n       databaseAdminStubSettingsBuilder\n           .updateBackupSettings()\n-          .setRetrySettings(longRunningRetrySettings);\n+          .setRetrySettings(longRunningRetrySettings)\n+          .setRetryableCodes(StatusCode.Code.DEADLINE_EXCEEDED, StatusCode.Code.UNAVAILABLE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg1MzE5Mw=="}, "originalCommit": {"oid": "771ae9037fa3b503c76c49264ec7d093dc64b169"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNzE1MQ==", "bodyText": "And yes, the Java client (and I think also the other clients, but I'm not 100% sure) use the retry settings in https://github.com/googleapis/googleapis/blob/master/google/spanner/admin/database/v1/spanner_admin_database_gapic.yaml. So that means for example that the default config for UpdateBackup is non-idempotent.", "url": "https://github.com/googleapis/java-spanner/pull/141#discussion_r406007151", "createdAt": "2020-04-09T07:26:33Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerOptions.java", "diffHunk": "@@ -291,7 +292,8 @@ private Builder() {\n           .setRetrySettings(longRunningRetrySettings);\n       databaseAdminStubSettingsBuilder\n           .updateBackupSettings()\n-          .setRetrySettings(longRunningRetrySettings);\n+          .setRetrySettings(longRunningRetrySettings)\n+          .setRetryableCodes(StatusCode.Code.DEADLINE_EXCEEDED, StatusCode.Code.UNAVAILABLE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg1MzE5Mw=="}, "originalCommit": {"oid": "771ae9037fa3b503c76c49264ec7d093dc64b169"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3232, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}