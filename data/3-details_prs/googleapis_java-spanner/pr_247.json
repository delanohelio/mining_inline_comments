{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NTc0NDk5", "number": 247, "title": "chore: remove usage of deprecated ExpectedException none() method", "bodyText": "Fixes #222", "createdAt": "2020-06-02T13:11:03Z", "url": "https://github.com/googleapis/java-spanner/pull/247", "merged": true, "mergeCommit": {"oid": "867dd33120a150ebc58bf6be39a00e8d6901d797"}, "closed": true, "closedAt": "2020-06-12T10:03:36Z", "author": {"login": "suraj-qlogic"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcngMVnABqjM0MDAxNzQ3MjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqf70nAFqTQyOTYxODAwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "460af6eb2682c1d931dde1f67815cca861c65768", "author": {"user": {"login": "suraj-qlogic", "name": "Suraj Dhamecha"}}, "url": "https://github.com/googleapis/java-spanner/commit/460af6eb2682c1d931dde1f67815cca861c65768", "committedDate": "2020-06-02T10:08:01Z", "message": "chore: remove usage of deprecated ExpectedException none() method"}, "afterCommit": {"oid": "8ba17a034de66b129a2cf9d45b3323f44466cc04", "author": {"user": {"login": "suraj-qlogic", "name": "Suraj Dhamecha"}}, "url": "https://github.com/googleapis/java-spanner/commit/8ba17a034de66b129a2cf9d45b3323f44466cc04", "committedDate": "2020-06-03T02:38:07Z", "message": "chore: remove usage of deprecated ExpectedException none() method"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fceb2846b8fbb591ec63689477d1f7dfba245a35", "author": {"user": {"login": "suraj-qlogic", "name": "Suraj Dhamecha"}}, "url": "https://github.com/googleapis/java-spanner/commit/fceb2846b8fbb591ec63689477d1f7dfba245a35", "committedDate": "2020-06-03T13:16:51Z", "message": "chore: fix build failure"}, "afterCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151", "author": {"user": {"login": "suraj-qlogic", "name": "Suraj Dhamecha"}}, "url": "https://github.com/googleapis/java-spanner/commit/34e3f384d3a211dd5033ae5f2f95750fbbc9a151", "committedDate": "2020-06-05T04:55:45Z", "message": "chore: fix build failure"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MTY0MzAz", "url": "https://github.com/googleapis/java-spanner/pull/247#pullrequestreview-427164303", "createdAt": "2020-06-09T13:43:57Z", "commit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo0Mzo1N1rOGhKiTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDoxOTo1N1rOGhMdlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyODgxMw==", "bodyText": "nit: please add a \"missing expected exception\" message", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437428813", "createdAt": "2020-06-09T13:43:57Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/BackupTest.java", "diffHunk": "@@ -102,8 +102,12 @@ public void createWithoutSource() {\n             .newBackupBuilder(BackupId.of(\"test-project\", \"dest-instance\", \"backup-id\"))\n             .setExpireTime(expireTime)\n             .build();\n-    expectedException.expect(IllegalStateException.class);\n-    backup.create();\n+    try {\n+      backup.create();\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyODk0Nw==", "bodyText": "nit: please add a \"missing expected exception\" message", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437428947", "createdAt": "2020-06-09T13:44:05Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/BackupTest.java", "diffHunk": "@@ -113,8 +117,12 @@ public void createWithoutExpireTime() {\n             .newBackupBuilder(BackupId.of(\"test-project\", \"instance-id\", \"backup-id\"))\n             .setDatabase(DatabaseId.of(\"test-project\", \"instance-id\", \"src-database\"))\n             .build();\n-    expectedException.expect(IllegalStateException.class);\n-    backup.create();\n+    try {\n+      backup.create();\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyOTI1Mw==", "bodyText": "nit: please add a \"missing expected exception\" message", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437429253", "createdAt": "2020-06-09T13:44:24Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/BackupTest.java", "diffHunk": "@@ -207,8 +215,12 @@ public void updateExpireTimeWithoutExpireTime() {\n         dbClient\n             .newBackupBuilder(BackupId.of(\"test-project\", \"test-instance\", \"test-backup\"))\n             .build();\n-    expectedException.expect(IllegalStateException.class);\n-    backup.updateExpireTime();\n+    try {\n+      backup.updateExpireTime();\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyOTM4Nw==", "bodyText": "nit: please add a \"missing expected exception\" message", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437429387", "createdAt": "2020-06-09T13:44:32Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/BackupTest.java", "diffHunk": "@@ -228,8 +240,12 @@ public void restoreWithoutDestination() {\n         dbClient\n             .newBackupBuilder(BackupId.of(\"test-project\", \"test-instance\", \"test-backup\"))\n             .build();\n-    expectedException.expect(NullPointerException.class);\n-    backup.restore(null);\n+    try {\n+      backup.restore(null);\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzMTE1Mg==", "bodyText": "nit: This check is (almost) superfluous. e is already guaranteed to be a (subclass of) NullPointerException because of  the catch clause. I would recommend changing this line to be consistent with the other checks for a non-null message, or otherwise no check at all if the message is expected to be null here.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437431152", "createdAt": "2020-06-09T13:46:14Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/BackupTest.java", "diffHunk": "@@ -228,8 +240,12 @@ public void restoreWithoutDestination() {\n         dbClient\n             .newBackupBuilder(BackupId.of(\"test-project\", \"test-instance\", \"test-backup\"))\n             .build();\n-    expectedException.expect(NullPointerException.class);\n-    backup.restore(null);\n+    try {\n+      backup.restore(null);\n+      fail(\"\");\n+    } catch (NullPointerException e) {\n+      assertEquals(NullPointerException.class, e.getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0Mjc3MA==", "bodyText": "Please add a `fail(\"missing exception\") call before the end of the try block. Otherwise, this test case will succeed if no exception is thrown.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437442770", "createdAt": "2020-06-09T13:57:21Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SessionImplTest.java", "diffHunk": "@@ -313,29 +322,32 @@ public void transactionClosesOldSingleUseContext() {\n \n     // Note that we don't even run the transaction - just preparing the runner is sufficient.\n     session.readWriteTransaction();\n-\n-    expectedException.expect(IllegalStateException.class);\n-    expectedException.expectMessage(\"invalidated\");\n-    ctx.read(\"Dummy\", KeySet.all(), Arrays.asList(\"C\"));\n+    try {\n+      ctx.read(\"Dummy\", KeySet.all(), Arrays.asList(\"C\"));\n+      fail(\"Expected exception\");\n+    } catch (IllegalStateException ex) {\n+      assertThat(ex.getMessage()).contains(\"invalidated\");\n+    }\n   }\n \n   @Test\n   public void singleUseContextClosesTransaction() {\n     TransactionRunner runner = session.readWriteTransaction();\n \n     session.singleUse(TimestampBound.strong());\n-\n-    expectedException.expect(IllegalStateException.class);\n-    expectedException.expectMessage(\"invalidated\");\n-    runner.run(\n-        new TransactionRunner.TransactionCallable<Void>() {\n-          @Nullable\n-          @Override\n-          public Void run(TransactionContext transaction) throws SpannerException {\n-            fail(\"Unexpected call to transaction body\");\n-            return null;\n-          }\n-        });\n+    try {\n+      runner.run(\n+          new TransactionRunner.TransactionCallable<Void>() {\n+            @Nullable\n+            @Override\n+            public Void run(TransactionContext transaction) throws SpannerException {\n+              fail(\"Unexpected call to transaction body\");\n+              return null;\n+            }\n+          });\n+    } catch (IllegalStateException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NDUzMA==", "bodyText": "nit: Here and below, please add a text like \"Expected exception\"", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437444530", "createdAt": "2020-06-09T13:59:11Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SessionPoolTest.java", "diffHunk": "@@ -511,8 +508,12 @@ public void run() {\n     // Suppress expected leakedSession warning.\n     leakedSession.clearLeakedException();\n     pool.closeAsync(new SpannerImpl.ClosedException());\n-    expectedException.expect(IllegalStateException.class);\n-    pool.getReadSession();\n+    try {\n+      pool.getReadSession();\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NTIwOQ==", "bodyText": "nit: Here and below, please add a text like \"Expected exception\"", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437445209", "createdAt": "2020-06-09T14:00:02Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SpanTest.java", "diffHunk": "@@ -231,23 +227,27 @@ public void tearDown() {\n \n   @Test\n   public void singleUseNonRetryableErrorOnNext() {\n-    expectedException.expect(SpannerMatchers.isSpannerException(ErrorCode.FAILED_PRECONDITION));\n     try (ResultSet rs = client.singleUse().executeQuery(SELECT1AND2)) {\n       mockSpanner.addException(FAILED_PRECONDITION);\n       while (rs.next()) {\n         // Just consume the result set.\n+        fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0Njk5Nw==", "bodyText": "nit: Here and below, please add a text like \"Expected exception\"", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437446997", "createdAt": "2020-06-09T14:02:25Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/StatementTest.java", "diffHunk": "@@ -103,33 +101,47 @@ public void bindReplacement() {\n   public void incompleteBinding() {\n     Statement.Builder builder = Statement.newBuilder(\"SELECT @v\");\n     builder.bind(\"v\");\n-    expectedException.expect(IllegalStateException.class);\n-    builder.build();\n+    try {\n+      builder.build();\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NzM4MA==", "bodyText": "nit: Here and below, please add a text like \"Expected exception\"", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437447380", "createdAt": "2020-06-09T14:02:57Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/TimestampBoundTest.java", "diffHunk": "@@ -90,8 +89,12 @@ public void exactStaleness() {\n \n   @Test\n   public void exactStalenessNegative() {\n-    expectedException.expect(IllegalArgumentException.class);\n-    TimestampBound.ofExactStaleness(-1, TimeUnit.SECONDS);\n+    try {\n+      TimestampBound.ofExactStaleness(-1, TimeUnit.SECONDS);\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NzU0NA==", "bodyText": "nit: Here and below, please add a text like \"Expected exception\"", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437447544", "createdAt": "2020-06-09T14:03:09Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/TransactionManagerImplTest.java", "diffHunk": "@@ -86,26 +83,42 @@ public void beginCalledTwiceFails() {\n     when(session.newTransaction()).thenReturn(txn);\n     assertThat(manager.begin()).isEqualTo(txn);\n     assertThat(manager.getState()).isEqualTo(TransactionState.STARTED);\n-    exception.expect(IllegalStateException.class);\n-    manager.begin();\n+    try {\n+      manager.begin();\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0Nzg4Mw==", "bodyText": "nit: Here and below, please add a text like \"Expected exception\"", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437447883", "createdAt": "2020-06-09T14:03:33Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/TypeTest.java", "diffHunk": "@@ -289,34 +288,46 @@ public void emptyStruct() {\n   @Test\n   public void structFieldIndexNotFound() {\n     Type t = Type.struct(StructField.of(\"f1\", Type.int64()));\n-\n-    expectedException.expect(IllegalArgumentException.class);\n-    expectedException.expectMessage(\"Field not found: f2\");\n-    t.getFieldIndex(\"f2\");\n+    try {\n+      t.getFieldIndex(\"f2\");\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0ODA3OQ==", "bodyText": "nit: Here and below, please add a text like \"Expected exception\"", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437448079", "createdAt": "2020-06-09T14:03:49Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/ValueTest.java", "diffHunk": "@@ -85,10 +83,12 @@ public void boolWrapperNull() {\n     assertThat(v.getType()).isEqualTo(Type.bool());\n     assertThat(v.isNull()).isTrue();\n     assertThat(v.toString()).isEqualTo(NULL_STRING);\n-\n-    expectedException.expect(IllegalStateException.class);\n-    expectedException.expectMessage(\"null value\");\n-    v.getBool();\n+    try {\n+      v.getBool();\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0ODkzNw==", "bodyText": "nit: Here and below, please add a text like \"Expected exception\"", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437448937", "createdAt": "2020-06-09T14:04:51Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/DmlBatchTest.java", "diffHunk": "@@ -63,23 +62,35 @@ private DmlBatch createSubject(UnitOfWork transaction) {\n   @Test\n   public void testExecuteQuery() {\n     DmlBatch batch = createSubject();\n-    exception.expect(SpannerExceptionMatcher.matchCode(ErrorCode.FAILED_PRECONDITION));\n-    batch.executeQuery(mock(ParsedStatement.class), AnalyzeMode.NONE);\n+    try {\n+      batch.executeQuery(mock(ParsedStatement.class), AnalyzeMode.NONE);\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0OTcwNg==", "bodyText": "nit: Here and below, please add a text like \"Expected exception\"", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437449706", "createdAt": "2020-06-09T14:05:51Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/StatementTimeoutTest.java", "diffHunk": "@@ -273,8 +272,12 @@ public void testTimeoutExceptionReadOnlyAutocommit() {\n                 .build())) {\n       connection.setReadOnly(true);\n       connection.setStatementTimeout(TIMEOUT_FOR_SLOW_STATEMENTS, TimeUnit.MILLISECONDS);\n-      expected.expect(SpannerExceptionMatcher.matchCode(ErrorCode.DEADLINE_EXCEEDED));\n-      connection.executeQuery(Statement.of(SLOW_SELECT));\n+      try {\n+        connection.executeQuery(Statement.of(SLOW_SELECT));\n+        fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1MDUxMg==", "bodyText": "Add a fail(\"Expected exception\") to prevent the test case from succeeding in case of no error.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437450512", "createdAt": "2020-06-09T14:06:53Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/StatementTimeoutTest.java", "diffHunk": "@@ -1048,9 +1110,9 @@ public void run() {\n               },\n               WAIT_BEFORE_CANCEL,\n               TimeUnit.MILLISECONDS);\n-\n-      expected.expect(SpannerExceptionMatcher.matchCode(ErrorCode.CANCELLED));\n       connection.runBatch();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 330}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1MDgwMw==", "bodyText": "Add a fail(\"Expected exception\") to prevent the test case from succeeding in case of no error.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437450803", "createdAt": "2020-06-09T14:07:17Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/StatementTimeoutTest.java", "diffHunk": "@@ -1073,8 +1135,9 @@ public void run() {\n               WAIT_BEFORE_CANCEL,\n               TimeUnit.MILLISECONDS);\n \n-      expected.expect(SpannerExceptionMatcher.matchCode(ErrorCode.CANCELLED));\n       connection.execute(Statement.of(SLOW_DDL));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 341}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1MDkwOQ==", "bodyText": "Add a fail(\"Expected exception\") to prevent the test case from succeeding in case of no error.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437450909", "createdAt": "2020-06-09T14:07:26Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/StatementTimeoutTest.java", "diffHunk": "@@ -1133,8 +1197,9 @@ public void testTimeoutExceptionDdlBatch() {\n       // the following statement will NOT timeout as the statement is only buffered locally\n       connection.execute(Statement.of(SLOW_DDL));\n       // the commit sends the statement to the server and should timeout\n-      expected.expect(SpannerExceptionMatcher.matchCode(ErrorCode.DEADLINE_EXCEEDED));\n       connection.runBatch();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 363}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1MjA1Mw==", "bodyText": "nit: Here and below, add an \"Expected exception\" message.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437452053", "createdAt": "2020-06-09T14:08:58Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/connection/it/ITTransactionModeTest.java", "diffHunk": "@@ -142,8 +140,12 @@ public void testDoNotAllowBufferedWriteInReadOnlyTransaction() {\n     try (ITConnection connection = createConnection()) {\n       connection.execute(Statement.of(\"SET TRANSACTION READ ONLY\"));\n       assertThat(connection.isAutocommit(), is(false));\n-      exception.expect(SpannerExceptionMatcher.matchCode(ErrorCode.FAILED_PRECONDITION));\n-      connection.bufferedWrite(Mutation.newInsertBuilder(\"FOO\").set(\"ID\").to(1L).build());\n+      try {\n+        connection.bufferedWrite(Mutation.newInsertBuilder(\"FOO\").set(\"ID\").to(1L).build());\n+        fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1MjI4MQ==", "bodyText": "nit: Add an \"Expected exception\" message.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437452281", "createdAt": "2020-06-09T14:09:17Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITClosedSessionTest.java", "diffHunk": "@@ -94,9 +93,11 @@ public void testSingleUseNoRecreation() {\n     // This should trigger an exception with code NOT_FOUND and the text 'Session not found'.\n     client.setAllowSessionReplacing(false);\n     client.invalidateNextSession();\n-    expectedException.expect(SessionNotFoundException.class);\n     try (ResultSet rs = Statement.of(\"SELECT 1\").executeQuery(client.singleUse())) {\n       rs.next();\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1MjY4Mg==", "bodyText": "Add a fail(\"Expected exception\") statement to prevent the test case succeeding in case of no error.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437452682", "createdAt": "2020-06-09T14:09:50Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITClosedSessionTest.java", "diffHunk": "@@ -169,10 +170,11 @@ public void testReadOnlyTransaction() {\n   public void testReadOnlyTransactionNoRecreation() {\n     client.setAllowSessionReplacing(false);\n     client.invalidateNextSession();\n-    expectedException.expect(SessionNotFoundException.class);\n     try (ReadOnlyTransaction txn = client.readOnlyTransaction()) {\n       try (ResultSet rs = txn.executeQuery(Statement.of(\"SELECT 1\"))) {\n         rs.next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1Mzc0OQ==", "bodyText": "Add  a fail(\"Expected exception\") to prevent false positives.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437453749", "createdAt": "2020-06-09T14:11:13Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITClosedSessionTest.java", "diffHunk": "@@ -221,18 +223,21 @@ public Void run(TransactionContext transaction) throws Exception {\n   public void testReadWriteTransactionNoRecreation() {\n     client.setAllowSessionReplacing(false);\n     client.invalidateNextSession();\n-    expectedException.expect(SessionNotFoundException.class);\n-    TransactionRunner txn = client.readWriteTransaction();\n-    txn.run(\n-        new TransactionCallable<Void>() {\n-          @Override\n-          public Void run(TransactionContext transaction) throws Exception {\n-            try (ResultSet rs = transaction.executeQuery(Statement.of(\"SELECT 1\"))) {\n-              rs.next();\n+    try {\n+      TransactionRunner txn = client.readWriteTransaction();\n+      txn.run(\n+          new TransactionCallable<Void>() {\n+            @Override\n+            public Void run(TransactionContext transaction) throws Exception {\n+              try (ResultSet rs = transaction.executeQuery(Statement.of(\"SELECT 1\"))) {\n+                rs.next();\n+              }\n+              return null;\n             }\n-            return null;\n-          }\n-        });\n+          });\n+    } catch (SessionNotFoundException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1Nzc0MQ==", "bodyText": "Add fail(\"Expected exception\").", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437457741", "createdAt": "2020-06-09T14:16:28Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITClosedSessionTest.java", "diffHunk": "@@ -265,14 +270,15 @@ public void testTransactionManager() throws InterruptedException {\n   public void testTransactionManagerNoRecreation() throws InterruptedException {\n     client.setAllowSessionReplacing(false);\n     client.invalidateNextSession();\n-    expectedException.expect(SessionNotFoundException.class);\n     try (TransactionManager manager = client.transactionManager()) {\n       TransactionContext txn = manager.begin();\n       while (true) {\n         try (ResultSet rs = txn.executeQuery(Statement.of(\"SELECT 1\"))) {\n           rs.next();\n         }\n       }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1OTc0OQ==", "bodyText": "nit: Here and below, add \"Expected exception\" message.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437459749", "createdAt": "2020-06-09T14:19:10Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITQueryTest.java", "diffHunk": "@@ -78,9 +76,13 @@ public void simple() {\n \n   @Test\n   public void badQuery() {\n-    expectedException.expect(isSpannerException(ErrorCode.INVALID_ARGUMENT));\n-    expectedException.expectMessage(\"Unrecognized name: Apples\");\n-    execute(Statement.of(\"SELECT Apples AND Oranges\"), Type.int64());\n+    try {\n+      execute(Statement.of(\"SELECT Apples AND Oranges\"), Type.int64());\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2MDIxNA==", "bodyText": "nit: Add \"Expected exception\" message.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437460214", "createdAt": "2020-06-09T14:19:47Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITTransactionManagerTest.java", "diffHunk": "@@ -115,8 +113,12 @@ public void invalidInsert() throws InterruptedException {\n       }\n       assertThat(manager.getState()).isEqualTo(TransactionState.COMMIT_FAILED);\n       // We cannot retry for non aborted errors.\n-      expectedException.expect(IllegalStateException.class);\n-      manager.resetForRetry();\n+      try {\n+        manager.resetForRetry();\n+        fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2MDM3NQ==", "bodyText": "nit: Here and below, add \"Expected exception\" message.", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r437460375", "createdAt": "2020-06-09T14:19:57Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITWriteTest.java", "diffHunk": "@@ -163,8 +161,12 @@ public void writeAlreadyExists() {\n   @Ignore // TODO(user): Fix this - backend currently accepts empty mutation.\n   @Test\n   public void emptyWrite() {\n-    expectedException.expect(isSpannerException(ErrorCode.INVALID_ARGUMENT));\n-    client.write(Arrays.<Mutation>asList());\n+    try {\n+      client.write(Arrays.<Mutation>asList());\n+      fail(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151"}, "originalPosition": 35}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "34e3f384d3a211dd5033ae5f2f95750fbbc9a151", "author": {"user": {"login": "suraj-qlogic", "name": "Suraj Dhamecha"}}, "url": "https://github.com/googleapis/java-spanner/commit/34e3f384d3a211dd5033ae5f2f95750fbbc9a151", "committedDate": "2020-06-05T04:55:45Z", "message": "chore: fix build failure"}, "afterCommit": {"oid": "c3303421ecd42ebc598173752c6addd30671ab0b", "author": {"user": {"login": "suraj-qlogic", "name": "Suraj Dhamecha"}}, "url": "https://github.com/googleapis/java-spanner/commit/c3303421ecd42ebc598173752c6addd30671ab0b", "committedDate": "2020-06-11T05:14:50Z", "message": "chore: fix build failure"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d56c77ca1e577f656ab0eac1a3eee791fefdf4ff", "author": {"user": {"login": "suraj-qlogic", "name": "Suraj Dhamecha"}}, "url": "https://github.com/googleapis/java-spanner/commit/d56c77ca1e577f656ab0eac1a3eee791fefdf4ff", "committedDate": "2020-06-11T10:53:09Z", "message": "feat: fix review changes"}, "afterCommit": {"oid": "62410113cd831d85938fbb3cf8e175be501ce1e0", "author": {"user": {"login": "suraj-qlogic", "name": "Suraj Dhamecha"}}, "url": "https://github.com/googleapis/java-spanner/commit/62410113cd831d85938fbb3cf8e175be501ce1e0", "committedDate": "2020-06-11T10:56:25Z", "message": "chore: fix review changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MjQ3MDk4", "url": "https://github.com/googleapis/java-spanner/pull/247#pullrequestreview-429247098", "createdAt": "2020-06-11T20:02:28Z", "commit": {"oid": "6bc0fe06f64f146542ce3026bf6576bd452b2a86"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NDYzNzU1", "url": "https://github.com/googleapis/java-spanner/pull/247#pullrequestreview-429463755", "createdAt": "2020-06-12T05:07:38Z", "commit": {"oid": "6bc0fe06f64f146542ce3026bf6576bd452b2a86"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNTowNzozOVrOGi3MDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNTowOTo0N1rOGi3N4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIwODk3NA==", "bodyText": "I'm not a huge fan of this repetition. Can we rewrite it as follows?\ntry {\n  SessionPoolOptions options =\n      SessionPoolOptions.newBuilder()\n          .setMinSessions(minSessions)\n          .setMaxSessions(maxSessions)\n          .build();\n\n  if (minSessions > maxSessions) {\n    fail(\"Expected exception\");\n  }\n\n  assertThat(minSessions).isEqualTo(options.getMinSessions());\n  assertThat(maxSessions).isEqualTo(options.getMaxSessions());\n} catch (IllegalArgumentException ex) {\n  if (minSessions <= maxSessions) {\n    throw ex;\n  }\n\n  assertNotNull(ex.getMessage());\n}", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r439208974", "createdAt": "2020-06-12T05:07:39Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SessionPoolOptionsTest.java", "diffHunk": "@@ -50,16 +49,26 @@\n   @Test\n   public void setMinMaxSessions() {\n     if (minSessions > maxSessions) {\n-      expectedException.expect(IllegalArgumentException.class);\n-    }\n-    SessionPoolOptions options =\n-        SessionPoolOptions.newBuilder()\n-            .setMinSessions(minSessions)\n-            .setMaxSessions(maxSessions)\n-            .build();\n+      try {\n+        SessionPoolOptions options =\n+            SessionPoolOptions.newBuilder()\n+                .setMinSessions(minSessions)\n+                .setMaxSessions(maxSessions)\n+                .build();\n+        fail(\"Expected exception\");\n+      } catch (IllegalArgumentException ex) {\n+        assertNotNull(ex.getMessage());\n+      }\n+    } else {\n+      SessionPoolOptions options =\n+          SessionPoolOptions.newBuilder()\n+              .setMinSessions(minSessions)\n+              .setMaxSessions(maxSessions)\n+              .build();\n \n-    assertThat(minSessions).isEqualTo(options.getMinSessions());\n-    assertThat(maxSessions).isEqualTo(options.getMaxSessions());\n+      assertThat(minSessions).isEqualTo(options.getMinSessions());\n+      assertThat(maxSessions).isEqualTo(options.getMaxSessions());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc0fe06f64f146542ce3026bf6576bd452b2a86"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIwOTQ0MQ==", "bodyText": "Did @olavloite confirm that this is not needed?", "url": "https://github.com/googleapis/java-spanner/pull/247#discussion_r439209441", "createdAt": "2020-06-12T05:09:47Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SpannerGaxRetryTest.java", "diffHunk": "@@ -303,18 +318,13 @@ public void singleUseExecuteStreamingSqlUnavailable() {\n \n   @Test\n   public void readWriteTransactionTimeout() {\n-    expectedException.expect(SpannerMatchers.isSpannerException(ErrorCode.DEADLINE_EXCEEDED));\n     mockSpanner.setBeginTransactionExecutionTime(ONE_SECOND);\n-    TransactionRunner runner = clientWithTimeout.readWriteTransaction();\n-    long updateCount =\n-        runner.run(\n-            new TransactionCallable<Long>() {\n-              @Override\n-              public Long run(TransactionContext transaction) throws Exception {\n-                return transaction.executeUpdate(UPDATE_STATEMENT);\n-              }\n-            });\n-    assertThat(updateCount, is(equalTo(UPDATE_COUNT)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bc0fe06f64f146542ce3026bf6576bd452b2a86"}, "originalPosition": 133}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5b483be88481119da35c9e72065017b2aeaf5e7", "author": {"user": {"login": "suraj-qlogic", "name": "Suraj Dhamecha"}}, "url": "https://github.com/googleapis/java-spanner/commit/a5b483be88481119da35c9e72065017b2aeaf5e7", "committedDate": "2020-06-12T06:47:03Z", "message": "chore: remove usage of deprecated ExpectedException none() method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e54b714065b5c78b99c0376d8dc7eb8e235acfb6", "author": {"user": {"login": "suraj-qlogic", "name": "Suraj Dhamecha"}}, "url": "https://github.com/googleapis/java-spanner/commit/e54b714065b5c78b99c0376d8dc7eb8e235acfb6", "committedDate": "2020-06-12T06:47:03Z", "message": "chore: fix build failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c634d29e7b495a91c93e8c939a515bc8a2151ec", "author": {"user": {"login": "suraj-qlogic", "name": "Suraj Dhamecha"}}, "url": "https://github.com/googleapis/java-spanner/commit/6c634d29e7b495a91c93e8c939a515bc8a2151ec", "committedDate": "2020-06-12T06:47:04Z", "message": "chore: fix review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90e495a459a35e5199bd8526ee42b0489da35543", "author": {"user": {"login": "suraj-qlogic", "name": "Suraj Dhamecha"}}, "url": "https://github.com/googleapis/java-spanner/commit/90e495a459a35e5199bd8526ee42b0489da35543", "committedDate": "2020-06-12T06:47:04Z", "message": "chore: fix review changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6bc0fe06f64f146542ce3026bf6576bd452b2a86", "author": {"user": {"login": "suraj-qlogic", "name": "Suraj Dhamecha"}}, "url": "https://github.com/googleapis/java-spanner/commit/6bc0fe06f64f146542ce3026bf6576bd452b2a86", "committedDate": "2020-06-11T13:30:18Z", "message": "chore: fix review changes"}, "afterCommit": {"oid": "90e495a459a35e5199bd8526ee42b0489da35543", "author": {"user": {"login": "suraj-qlogic", "name": "Suraj Dhamecha"}}, "url": "https://github.com/googleapis/java-spanner/commit/90e495a459a35e5199bd8526ee42b0489da35543", "committedDate": "2020-06-12T06:47:04Z", "message": "chore: fix review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c3f491f3fbed6d0e67e01bf858e069c897d6fec", "author": {"user": {"login": "suraj-qlogic", "name": "Suraj Dhamecha"}}, "url": "https://github.com/googleapis/java-spanner/commit/3c3f491f3fbed6d0e67e01bf858e069c897d6fec", "committedDate": "2020-06-12T07:00:09Z", "message": "chore: fix review changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NjE4MDAx", "url": "https://github.com/googleapis/java-spanner/pull/247#pullrequestreview-429618001", "createdAt": "2020-06-12T10:03:18Z", "commit": {"oid": "3c3f491f3fbed6d0e67e01bf858e069c897d6fec"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 846, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}