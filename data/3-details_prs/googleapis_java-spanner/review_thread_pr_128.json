{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzODgyMTQ1", "number": 128, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMzozOTo0OFrODretVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMDowMjozMlrODr4KEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTE4NDg0OnYy", "diffSide": "LEFT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/MetricRegistryConstants.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMzozOTo0OFrOF72Uow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzozNToxM1rOGcmCqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMwMDMyMw==", "bodyText": "I'm worried for anyone relying on this metric already in their monitoring? What is the process for deprecating metrics in OpenCensus? Is there some monitoring to figure out if someone is exporting it?", "url": "https://github.com/googleapis/java-spanner/pull/128#discussion_r398300323", "createdAt": "2020-03-26T03:39:48Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/MetricRegistryConstants.java", "diffHunk": "@@ -46,20 +55,20 @@\n   // The Metric name and description\n   static final String MAX_IN_USE_SESSIONS = \"cloud.google.com/java/spanner/max_in_use_sessions\";\n   static final String MAX_ALLOWED_SESSIONS = \"cloud.google.com/java/spanner/max_allowed_sessions\";\n-  static final String IN_USE_SESSIONS = \"cloud.google.com/java/spanner/in_use_sessions\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4afe128245100fa8c77a92772b242a2da5653175"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxMTcyNw==", "bodyText": "What is the process for deprecating metrics in OpenCensus?\n\nIn OC, (usually) we first mark the existing API as deprecated and keep it for 18 months before removing it. I think the feature is fairly new and looks safe to remove it with a note in the Changelog.\n\nIs there some monitoring to figure out if someone is exporting it?\n\nI think it is feasible to see the ingested metrics in stackdriver, but I haven't done it personally.\n\nI'm worried for anyone relying on this metric already in their monitoring?\n\nAnother option is keep existing(IN_USE_SESSIONS) metric along with new metric. In this case, in_use_sessions data will be accounted/exported twice.\nWDYT?", "url": "https://github.com/googleapis/java-spanner/pull/128#discussion_r430911727", "createdAt": "2020-05-27T07:29:30Z", "author": {"login": "mayurkale22"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/MetricRegistryConstants.java", "diffHunk": "@@ -46,20 +55,20 @@\n   // The Metric name and description\n   static final String MAX_IN_USE_SESSIONS = \"cloud.google.com/java/spanner/max_in_use_sessions\";\n   static final String MAX_ALLOWED_SESSIONS = \"cloud.google.com/java/spanner/max_allowed_sessions\";\n-  static final String IN_USE_SESSIONS = \"cloud.google.com/java/spanner/in_use_sessions\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMwMDMyMw=="}, "originalCommit": {"oid": "4afe128245100fa8c77a92772b242a2da5653175"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5NTQyOQ==", "bodyText": "Ok, I think you're right that this is relatively new. We will mark this in the Changelog.", "url": "https://github.com/googleapis/java-spanner/pull/128#discussion_r432395429", "createdAt": "2020-05-29T10:26:17Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/MetricRegistryConstants.java", "diffHunk": "@@ -46,20 +55,20 @@\n   // The Metric name and description\n   static final String MAX_IN_USE_SESSIONS = \"cloud.google.com/java/spanner/max_in_use_sessions\";\n   static final String MAX_ALLOWED_SESSIONS = \"cloud.google.com/java/spanner/max_allowed_sessions\";\n-  static final String IN_USE_SESSIONS = \"cloud.google.com/java/spanner/in_use_sessions\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMwMDMyMw=="}, "originalCommit": {"oid": "4afe128245100fa8c77a92772b242a2da5653175"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5NjMzOA==", "bodyText": "If you can include something about this in the PR description, that would be great. Then we can copy it in when doing the release.", "url": "https://github.com/googleapis/java-spanner/pull/128#discussion_r432396338", "createdAt": "2020-05-29T10:28:11Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/MetricRegistryConstants.java", "diffHunk": "@@ -46,20 +55,20 @@\n   // The Metric name and description\n   static final String MAX_IN_USE_SESSIONS = \"cloud.google.com/java/spanner/max_in_use_sessions\";\n   static final String MAX_ALLOWED_SESSIONS = \"cloud.google.com/java/spanner/max_allowed_sessions\";\n-  static final String IN_USE_SESSIONS = \"cloud.google.com/java/spanner/in_use_sessions\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMwMDMyMw=="}, "originalCommit": {"oid": "4afe128245100fa8c77a92772b242a2da5653175"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzNjU4Nw==", "bodyText": "done", "url": "https://github.com/googleapis/java-spanner/pull/128#discussion_r432636587", "createdAt": "2020-05-29T17:35:13Z", "author": {"login": "mayurkale22"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/MetricRegistryConstants.java", "diffHunk": "@@ -46,20 +55,20 @@\n   // The Metric name and description\n   static final String MAX_IN_USE_SESSIONS = \"cloud.google.com/java/spanner/max_in_use_sessions\";\n   static final String MAX_ALLOWED_SESSIONS = \"cloud.google.com/java/spanner/max_allowed_sessions\";\n-  static final String IN_USE_SESSIONS = \"cloud.google.com/java/spanner/in_use_sessions\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMwMDMyMw=="}, "originalCommit": {"oid": "4afe128245100fa8c77a92772b242a2da5653175"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzM0ODcwOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/MetricRegistryConstants.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMzo1OTozN1rOF8erKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMDowMToyN1rOF9iXUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2MTQ0OA==", "bodyText": "write session is num_write_prepared_session while read doesn't have 'prepared' word in it. Is that deliberate?\nis consistency in naming important? If so then num_sessions_being_prepared should be renamed to num_being_prepared_session", "url": "https://github.com/googleapis/java-spanner/pull/128#discussion_r398961448", "createdAt": "2020-03-26T23:59:37Z", "author": {"login": "rghetia"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/MetricRegistryConstants.java", "diffHunk": "@@ -30,12 +30,21 @@\n       LabelKey.create(\"instance_id\", \"Name of the instance\");\n   private static final LabelKey LIBRARY_VERSION =\n       LabelKey.create(\"library_version\", \"Library version\");\n+  private static final LabelKey SESSION_TYPE = LabelKey.create(\"Type\", \"Type of the Sessions\");\n \n   /** The label value is used to represent missing value. */\n   private static final LabelValue UNSET_LABEL = LabelValue.create(null);\n \n+  static final LabelValue NUM_IN_USE_SESSIONS = LabelValue.create(\"num_in_use_sessions\");\n+  static final LabelValue NUM_SESSIONS_BEING_PREPARED =\n+      LabelValue.create(\"num_sessions_being_prepared\");\n+  static final LabelValue NUM_READ_SESSIONS = LabelValue.create(\"num_read_sessions\");\n+  static final LabelValue NUM_WRITE_SESSIONS = LabelValue.create(\"num_write_prepared_sessions\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48e8ec96deccd5658b70f4a92b279f5b02e98e50"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2NzgzMQ==", "bodyText": "@skuruppu what do you suggest?", "url": "https://github.com/googleapis/java-spanner/pull/128#discussion_r398967831", "createdAt": "2020-03-27T00:21:00Z", "author": {"login": "mayurkale22"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/MetricRegistryConstants.java", "diffHunk": "@@ -30,12 +30,21 @@\n       LabelKey.create(\"instance_id\", \"Name of the instance\");\n   private static final LabelKey LIBRARY_VERSION =\n       LabelKey.create(\"library_version\", \"Library version\");\n+  private static final LabelKey SESSION_TYPE = LabelKey.create(\"Type\", \"Type of the Sessions\");\n \n   /** The label value is used to represent missing value. */\n   private static final LabelValue UNSET_LABEL = LabelValue.create(null);\n \n+  static final LabelValue NUM_IN_USE_SESSIONS = LabelValue.create(\"num_in_use_sessions\");\n+  static final LabelValue NUM_SESSIONS_BEING_PREPARED =\n+      LabelValue.create(\"num_sessions_being_prepared\");\n+  static final LabelValue NUM_READ_SESSIONS = LabelValue.create(\"num_read_sessions\");\n+  static final LabelValue NUM_WRITE_SESSIONS = LabelValue.create(\"num_write_prepared_sessions\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2MTQ0OA=="}, "originalCommit": {"oid": "48e8ec96deccd5658b70f4a92b279f5b02e98e50"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA3MDQ4MA==", "bodyText": "Regarding num_write_prepared_session vs read sessions not having the word prepared: That is intentional. Sessions themselves are not read-only or read/write, but a portion of the sessions in the pool is prepared with a read/write transaction for direct use. So if a user application wants to execute a read/write transaction, the pool returns a session that already has a prepared read/write transaction associated with it.", "url": "https://github.com/googleapis/java-spanner/pull/128#discussion_r400070480", "createdAt": "2020-03-30T10:01:27Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/MetricRegistryConstants.java", "diffHunk": "@@ -30,12 +30,21 @@\n       LabelKey.create(\"instance_id\", \"Name of the instance\");\n   private static final LabelKey LIBRARY_VERSION =\n       LabelKey.create(\"library_version\", \"Library version\");\n+  private static final LabelKey SESSION_TYPE = LabelKey.create(\"Type\", \"Type of the Sessions\");\n \n   /** The label value is used to represent missing value. */\n   private static final LabelValue UNSET_LABEL = LabelValue.create(null);\n \n+  static final LabelValue NUM_IN_USE_SESSIONS = LabelValue.create(\"num_in_use_sessions\");\n+  static final LabelValue NUM_SESSIONS_BEING_PREPARED =\n+      LabelValue.create(\"num_sessions_being_prepared\");\n+  static final LabelValue NUM_READ_SESSIONS = LabelValue.create(\"num_read_sessions\");\n+  static final LabelValue NUM_WRITE_SESSIONS = LabelValue.create(\"num_write_prepared_sessions\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2MTQ0OA=="}, "originalCommit": {"oid": "48e8ec96deccd5658b70f4a92b279f5b02e98e50"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzM1NDQxOnYy", "diffSide": "LEFT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SessionPoolTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMDowMjozMlrOF8eutA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoxNDo0MVrOGa8SPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2MjM1Ng==", "bodyText": "No test for new Gauges?", "url": "https://github.com/googleapis/java-spanner/pull/128#discussion_r398962356", "createdAt": "2020-03-27T00:02:32Z", "author": {"login": "rghetia"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SessionPoolTest.java", "diffHunk": "@@ -1638,7 +1637,6 @@ public Void call() {\n         .containsEntry(MetricRegistryConstants.NUM_ACQUIRED_SESSIONS, 3L);\n     assertThat(record.getMetrics())\n         .containsEntry(MetricRegistryConstants.NUM_RELEASED_SESSIONS, 3L);\n-    assertThat(record.getMetrics()).containsEntry(MetricRegistryConstants.IN_USE_SESSIONS, 0L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48e8ec96deccd5658b70f4a92b279f5b02e98e50"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwMzg2OA==", "bodyText": "Added test to validate newly added Metric. I had to modify MetricRegistryTestUtils to support and test multiple timeseries entries. PTAL when you get a chance.", "url": "https://github.com/googleapis/java-spanner/pull/128#discussion_r430903868", "createdAt": "2020-05-27T07:14:41Z", "author": {"login": "mayurkale22"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/SessionPoolTest.java", "diffHunk": "@@ -1638,7 +1637,6 @@ public Void call() {\n         .containsEntry(MetricRegistryConstants.NUM_ACQUIRED_SESSIONS, 3L);\n     assertThat(record.getMetrics())\n         .containsEntry(MetricRegistryConstants.NUM_RELEASED_SESSIONS, 3L);\n-    assertThat(record.getMetrics()).containsEntry(MetricRegistryConstants.IN_USE_SESSIONS, 0L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2MjM1Ng=="}, "originalCommit": {"oid": "48e8ec96deccd5658b70f4a92b279f5b02e98e50"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3226, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}