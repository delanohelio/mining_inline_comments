{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1NDA4MjA2", "number": 666, "reviewThreads": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTozNjoyOFrOE8hqcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QwODozMToyN1rOFm4MdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTAxNTU1OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTozNjoyOFrOH4sqsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTozNjoyOFrOH4sqsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIxNDEyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n          \n          \n            \n              public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n          \n          \n            \n            \n          \n          \n            \n              @ClassRule\n          \n          \n            \n              public static final String SPANNER_PRODUCTION_ACCOUNT =\n          \n          \n            \n                  \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n          \n          \n            \n              public static final String KMS_KEY_ENCRYPTER_DECRYPTER =\n          \n          \n            \n                  \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n          \n          \n            \n              @ClassRule public static IntegrationTestEnv env = new IntegrationTestEnv();", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529214128", "createdAt": "2020-11-24T05:36:28Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b85d7e96ff78524dad4766e6c09527ea4a39cd2"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTAxNTYwOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTozNjoyOVrOH4sqtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTozNjoyOVrOH4sqtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIxNDEzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  dbAdminClient\n          \n          \n            \n                      .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());\n          \n          \n            \n                  dbAdminClient.dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529214134", "createdAt": "2020-11-24T05:36:29Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    // for (CryptoKey key : keys) {\n+    //   for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+    //       .iterateAll()) {\n+    //     kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+    //   }\n+    // }\n+    for (DatabaseId db : dbs) {\n+      dbAdminClient\n+          .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b85d7e96ff78524dad4766e6c09527ea4a39cd2"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTAxNTYyOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTozNjoyOVrOH4squg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTozNjoyOVrOH4squg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIxNDEzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n          \n          \n            \n                final InstanceId instanceId = testHelper.getInstanceId();\n          \n          \n            \n                final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n          \n          \n            \n                final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n          \n          \n            \n                final String backupId = randomBackupId();\n          \n          \n            \n            \n          \n          \n            \n                final CryptoKey key = createKey(randomKeyId());\n          \n          \n            \n                final Database sourceDatabase = dbAdminClient\n          \n          \n            \n                    .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n          \n          \n            \n                    .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n          \n          \n            \n                    .build();\n          \n          \n            \n                final Backup backup = dbAdminClient\n          \n          \n            \n                    .newBackupBuilder(BackupId.of(\n          \n          \n            \n                        testHelper.getInstanceId(),\n          \n          \n            \n                        backupId\n          \n          \n            \n                    ))\n          \n          \n            \n                    .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n          \n          \n            \n                    .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n          \n          \n            \n                    .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n          \n          \n            \n                    .build();\n          \n          \n            \n                final Restore restore = dbAdminClient\n          \n          \n            \n              public void createsEncryptedDatabaseBackupAndRestore()\n          \n          \n            \n                  throws ExecutionException, InterruptedException {\n          \n          \n            \n                final Database sourceDatabase =\n          \n          \n            \n                    dbAdminClient\n          \n          \n            \n                        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n          \n          \n            \n                        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n          \n          \n            \n                        .build();\n          \n          \n            \n                final Backup backup =\n          \n          \n            \n                    dbAdminClient\n          \n          \n            \n                        .newBackupBuilder(BackupId.of(testHelper.getInstanceId(), backupId))\n          \n          \n            \n                        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n          \n          \n            \n                        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n          \n          \n            \n                        .setExpireTime(\n          \n          \n            \n                            com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n          \n          \n            \n                        .build();\n          \n          \n            \n                final Restore restore =\n          \n          \n            \n                    dbAdminClient\n          \n          \n            \n                        .newRestoreBuilder(\n          \n          \n            \n                            BackupId.of(testHelper.getInstanceId(), backupId),\n          \n          \n            \n                            DatabaseId.of(testHelper.getInstanceId(), destinationDatabaseId))\n          \n          \n            \n                        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n          \n          \n            \n                        .build();", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529214138", "createdAt": "2020-11-24T05:36:29Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    // for (CryptoKey key : keys) {\n+    //   for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+    //       .iterateAll()) {\n+    //     kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+    //   }\n+    // }\n+    for (DatabaseId db : dbs) {\n+      dbAdminClient\n+          .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());\n+    }\n+    for (BackupId backup : backups) {\n+      dbAdminClient.deleteBackup(backup.getInstanceId().getInstance(), backup.getBackup());\n+    }\n+    kmsClient.close();\n+  }\n+\n+  @Test\n+  public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n+    final InstanceId instanceId = testHelper.getInstanceId();\n+    final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String backupId = randomBackupId();\n+\n+    final CryptoKey key = createKey(randomKeyId());\n+    final Database sourceDatabase = dbAdminClient\n+        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+    final Backup backup = dbAdminClient\n+        .newBackupBuilder(BackupId.of(\n+            testHelper.getInstanceId(),\n+            backupId\n+        ))\n+        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n+        .build();\n+    final Restore restore = dbAdminClient", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b85d7e96ff78524dad4766e6c09527ea4a39cd2"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTAxNTY4OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTozNjozMFrOH4sqwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTozNjozMFrOH4sqwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIxNDE0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final LocationName locationName = LocationName.of(\n          \n          \n            \n                    testHelper.getOptions().getProjectId(),\n          \n          \n            \n                    KMS_KEY_LOCATION\n          \n          \n            \n                );\n          \n          \n            \n                final KeyRing keyRing = createOrRetrieveKeyRing(locationName);\n          \n          \n            \n                final Timestamp.Builder rotationTime = Timestamp\n          \n          \n            \n                    .newBuilder()\n          \n          \n            \n                    .setSeconds(after7DaysInSeconds());\n          \n          \n            \n            \n          \n          \n            \n                final CryptoKey cryptoKeyInput = CryptoKey.newBuilder()\n          \n          \n            \n                    .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n          \n          \n            \n                    .setNextRotationTime(rotationTime)\n          \n          \n            \n                    .build();\n          \n          \n            \n                final CryptoKey cryptoKey = kmsClient\n          \n          \n            \n                    .createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n          \n          \n            \n            \n          \n          \n            \n                final Policy policy = kmsClient.getIamPolicy(cryptoKey.getName());\n          \n          \n            \n                final Binding binding = Binding\n          \n          \n            \n                final LocationName locationName =\n          \n          \n            \n                    LocationName.of(testHelper.getOptions().getProjectId(), KMS_KEY_LOCATION);\n          \n          \n            \n                final Timestamp.Builder rotationTime = Timestamp.newBuilder().setSeconds(after7DaysInSeconds());\n          \n          \n            \n                final CryptoKey cryptoKeyInput =\n          \n          \n            \n                    CryptoKey.newBuilder()\n          \n          \n            \n                        .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n          \n          \n            \n                        .setNextRotationTime(rotationTime)\n          \n          \n            \n                        .build();\n          \n          \n            \n                final CryptoKey cryptoKey =\n          \n          \n            \n                    kmsClient.createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n          \n          \n            \n                final Binding binding =\n          \n          \n            \n                    Binding.newBuilder()\n          \n          \n            \n                        .addMembers(SPANNER_PRODUCTION_ACCOUNT)\n          \n          \n            \n                        .setRole(KMS_KEY_ENCRYPTER_DECRYPTER)\n          \n          \n            \n                        .build();", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529214144", "createdAt": "2020-11-24T05:36:30Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    // for (CryptoKey key : keys) {\n+    //   for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+    //       .iterateAll()) {\n+    //     kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+    //   }\n+    // }\n+    for (DatabaseId db : dbs) {\n+      dbAdminClient\n+          .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());\n+    }\n+    for (BackupId backup : backups) {\n+      dbAdminClient.deleteBackup(backup.getInstanceId().getInstance(), backup.getBackup());\n+    }\n+    kmsClient.close();\n+  }\n+\n+  @Test\n+  public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n+    final InstanceId instanceId = testHelper.getInstanceId();\n+    final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String backupId = randomBackupId();\n+\n+    final CryptoKey key = createKey(randomKeyId());\n+    final Database sourceDatabase = dbAdminClient\n+        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+    final Backup backup = dbAdminClient\n+        .newBackupBuilder(BackupId.of(\n+            testHelper.getInstanceId(),\n+            backupId\n+        ))\n+        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n+        .build();\n+    final Restore restore = dbAdminClient\n+        .newRestoreBuilder(\n+            BackupId.of(testHelper.getInstanceId(), backupId),\n+            DatabaseId.of(testHelper.getInstanceId(), destinationDatabaseId)\n+        )\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+\n+    final Database createdDatabase = createDatabase(sourceDatabase);\n+    final Backup createdBackup = createBackup(backup);\n+    final Database restoredDatabase = restoreDatabase(restore);\n+\n+    assertThat(createdDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(createdDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+    assertThat(createdBackup.getEncryptionInfo().getKmsKeyVersion()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+  }\n+\n+  private String randomKeyId() {\n+    return KMS_KEY_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private String randomBackupId() {\n+    return BACKUP_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private CryptoKey createKey(final String keyId) {\n+    final LocationName locationName = LocationName.of(\n+        testHelper.getOptions().getProjectId(),\n+        KMS_KEY_LOCATION\n+    );\n+    final KeyRing keyRing = createOrRetrieveKeyRing(locationName);\n+    final Timestamp.Builder rotationTime = Timestamp\n+        .newBuilder()\n+        .setSeconds(after7DaysInSeconds());\n+\n+    final CryptoKey cryptoKeyInput = CryptoKey.newBuilder()\n+        .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n+        .setNextRotationTime(rotationTime)\n+        .build();\n+    final CryptoKey cryptoKey = kmsClient\n+        .createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n+\n+    final Policy policy = kmsClient.getIamPolicy(cryptoKey.getName());\n+    final Binding binding = Binding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b85d7e96ff78524dad4766e6c09527ea4a39cd2"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTAxNTcwOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTozNjozMFrOH4sqxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTozNjozMFrOH4sqxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIxNDE0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    TimeUnit.MILLISECONDS\n          \n          \n            \n                );\n          \n          \n            \n              }\n          \n          \n            \n                    TimeUnit.MILLISECONDS);\n          \n          \n            \n                      KeyRingName.of(locationName.getProject(), locationName.getLocation(), KMS_KEY_RING_ID));", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529214148", "createdAt": "2020-11-24T05:36:30Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    // for (CryptoKey key : keys) {\n+    //   for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+    //       .iterateAll()) {\n+    //     kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+    //   }\n+    // }\n+    for (DatabaseId db : dbs) {\n+      dbAdminClient\n+          .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());\n+    }\n+    for (BackupId backup : backups) {\n+      dbAdminClient.deleteBackup(backup.getInstanceId().getInstance(), backup.getBackup());\n+    }\n+    kmsClient.close();\n+  }\n+\n+  @Test\n+  public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n+    final InstanceId instanceId = testHelper.getInstanceId();\n+    final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String backupId = randomBackupId();\n+\n+    final CryptoKey key = createKey(randomKeyId());\n+    final Database sourceDatabase = dbAdminClient\n+        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+    final Backup backup = dbAdminClient\n+        .newBackupBuilder(BackupId.of(\n+            testHelper.getInstanceId(),\n+            backupId\n+        ))\n+        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n+        .build();\n+    final Restore restore = dbAdminClient\n+        .newRestoreBuilder(\n+            BackupId.of(testHelper.getInstanceId(), backupId),\n+            DatabaseId.of(testHelper.getInstanceId(), destinationDatabaseId)\n+        )\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+\n+    final Database createdDatabase = createDatabase(sourceDatabase);\n+    final Backup createdBackup = createBackup(backup);\n+    final Database restoredDatabase = restoreDatabase(restore);\n+\n+    assertThat(createdDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(createdDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+    assertThat(createdBackup.getEncryptionInfo().getKmsKeyVersion()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+  }\n+\n+  private String randomKeyId() {\n+    return KMS_KEY_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private String randomBackupId() {\n+    return BACKUP_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private CryptoKey createKey(final String keyId) {\n+    final LocationName locationName = LocationName.of(\n+        testHelper.getOptions().getProjectId(),\n+        KMS_KEY_LOCATION\n+    );\n+    final KeyRing keyRing = createOrRetrieveKeyRing(locationName);\n+    final Timestamp.Builder rotationTime = Timestamp\n+        .newBuilder()\n+        .setSeconds(after7DaysInSeconds());\n+\n+    final CryptoKey cryptoKeyInput = CryptoKey.newBuilder()\n+        .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n+        .setNextRotationTime(rotationTime)\n+        .build();\n+    final CryptoKey cryptoKey = kmsClient\n+        .createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n+\n+    final Policy policy = kmsClient.getIamPolicy(cryptoKey.getName());\n+    final Binding binding = Binding\n+        .newBuilder()\n+        .addMembers(SPANNER_PRODUCTION_ACCOUNT)\n+        .setRole(KMS_KEY_ENCRYPTER_DECRYPTER)\n+        .build();\n+    final Policy newPolicy = policy.toBuilder().addBindings(binding).build();\n+    kmsClient.setIamPolicy(cryptoKey.getName(), newPolicy);\n+\n+    keys.add(cryptoKey);\n+    return cryptoKey;\n+  }\n+\n+  private long after7DaysInSeconds() {\n+    return TimeUnit.SECONDS.convert(\n+        System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(7L, TimeUnit.DAYS),\n+        TimeUnit.MILLISECONDS\n+    );\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b85d7e96ff78524dad4766e6c09527ea4a39cd2"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTAxNTczOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTozNjozMVrOH4sqxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTozNjozMVrOH4sqxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIxNDE1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final OperationFuture<Database, CreateDatabaseMetadata> op = dbAdminClient\n          \n          \n            \n                    .createDatabase(database, Collections.<String>emptyList());\n          \n          \n            \n                final OperationFuture<Database, CreateDatabaseMetadata> op =\n          \n          \n            \n                    dbAdminClient.createDatabase(database, Collections.<String>emptyList());", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529214151", "createdAt": "2020-11-24T05:36:31Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    // for (CryptoKey key : keys) {\n+    //   for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+    //       .iterateAll()) {\n+    //     kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+    //   }\n+    // }\n+    for (DatabaseId db : dbs) {\n+      dbAdminClient\n+          .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());\n+    }\n+    for (BackupId backup : backups) {\n+      dbAdminClient.deleteBackup(backup.getInstanceId().getInstance(), backup.getBackup());\n+    }\n+    kmsClient.close();\n+  }\n+\n+  @Test\n+  public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n+    final InstanceId instanceId = testHelper.getInstanceId();\n+    final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String backupId = randomBackupId();\n+\n+    final CryptoKey key = createKey(randomKeyId());\n+    final Database sourceDatabase = dbAdminClient\n+        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+    final Backup backup = dbAdminClient\n+        .newBackupBuilder(BackupId.of(\n+            testHelper.getInstanceId(),\n+            backupId\n+        ))\n+        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n+        .build();\n+    final Restore restore = dbAdminClient\n+        .newRestoreBuilder(\n+            BackupId.of(testHelper.getInstanceId(), backupId),\n+            DatabaseId.of(testHelper.getInstanceId(), destinationDatabaseId)\n+        )\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+\n+    final Database createdDatabase = createDatabase(sourceDatabase);\n+    final Backup createdBackup = createBackup(backup);\n+    final Database restoredDatabase = restoreDatabase(restore);\n+\n+    assertThat(createdDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(createdDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+    assertThat(createdBackup.getEncryptionInfo().getKmsKeyVersion()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+  }\n+\n+  private String randomKeyId() {\n+    return KMS_KEY_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private String randomBackupId() {\n+    return BACKUP_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private CryptoKey createKey(final String keyId) {\n+    final LocationName locationName = LocationName.of(\n+        testHelper.getOptions().getProjectId(),\n+        KMS_KEY_LOCATION\n+    );\n+    final KeyRing keyRing = createOrRetrieveKeyRing(locationName);\n+    final Timestamp.Builder rotationTime = Timestamp\n+        .newBuilder()\n+        .setSeconds(after7DaysInSeconds());\n+\n+    final CryptoKey cryptoKeyInput = CryptoKey.newBuilder()\n+        .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n+        .setNextRotationTime(rotationTime)\n+        .build();\n+    final CryptoKey cryptoKey = kmsClient\n+        .createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n+\n+    final Policy policy = kmsClient.getIamPolicy(cryptoKey.getName());\n+    final Binding binding = Binding\n+        .newBuilder()\n+        .addMembers(SPANNER_PRODUCTION_ACCOUNT)\n+        .setRole(KMS_KEY_ENCRYPTER_DECRYPTER)\n+        .build();\n+    final Policy newPolicy = policy.toBuilder().addBindings(binding).build();\n+    kmsClient.setIamPolicy(cryptoKey.getName(), newPolicy);\n+\n+    keys.add(cryptoKey);\n+    return cryptoKey;\n+  }\n+\n+  private long after7DaysInSeconds() {\n+    return TimeUnit.SECONDS.convert(\n+        System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(7L, TimeUnit.DAYS),\n+        TimeUnit.MILLISECONDS\n+    );\n+  }\n+\n+  private KeyRing createOrRetrieveKeyRing(final LocationName locationName) {\n+    try {\n+      return kmsClient.getKeyRing(\n+          KeyRingName.of(locationName.getProject(), locationName.getLocation(), KMS_KEY_RING_ID)\n+      );\n+    } catch (NotFoundException e) {\n+      return kmsClient.createKeyRing(locationName, KMS_KEY_RING_ID, KeyRing.getDefaultInstance());\n+    }\n+  }\n+\n+  private Database createDatabase(final Database database)\n+      throws ExecutionException, InterruptedException {\n+    final OperationFuture<Database, CreateDatabaseMetadata> op = dbAdminClient\n+        .createDatabase(database, Collections.<String>emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b85d7e96ff78524dad4766e6c09527ea4a39cd2"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTAxNTc1OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTozNjozMVrOH4sqyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTozNjozMVrOH4sqyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIxNDE1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final OperationFuture<Backup, CreateBackupMetadata> op = dbAdminClient\n          \n          \n            \n                    .createBackup(backup);\n          \n          \n            \n                final OperationFuture<Backup, CreateBackupMetadata> op = dbAdminClient.createBackup(backup);", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529214154", "createdAt": "2020-11-24T05:36:31Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    // for (CryptoKey key : keys) {\n+    //   for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+    //       .iterateAll()) {\n+    //     kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+    //   }\n+    // }\n+    for (DatabaseId db : dbs) {\n+      dbAdminClient\n+          .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());\n+    }\n+    for (BackupId backup : backups) {\n+      dbAdminClient.deleteBackup(backup.getInstanceId().getInstance(), backup.getBackup());\n+    }\n+    kmsClient.close();\n+  }\n+\n+  @Test\n+  public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n+    final InstanceId instanceId = testHelper.getInstanceId();\n+    final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String backupId = randomBackupId();\n+\n+    final CryptoKey key = createKey(randomKeyId());\n+    final Database sourceDatabase = dbAdminClient\n+        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+    final Backup backup = dbAdminClient\n+        .newBackupBuilder(BackupId.of(\n+            testHelper.getInstanceId(),\n+            backupId\n+        ))\n+        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n+        .build();\n+    final Restore restore = dbAdminClient\n+        .newRestoreBuilder(\n+            BackupId.of(testHelper.getInstanceId(), backupId),\n+            DatabaseId.of(testHelper.getInstanceId(), destinationDatabaseId)\n+        )\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+\n+    final Database createdDatabase = createDatabase(sourceDatabase);\n+    final Backup createdBackup = createBackup(backup);\n+    final Database restoredDatabase = restoreDatabase(restore);\n+\n+    assertThat(createdDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(createdDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+    assertThat(createdBackup.getEncryptionInfo().getKmsKeyVersion()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+  }\n+\n+  private String randomKeyId() {\n+    return KMS_KEY_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private String randomBackupId() {\n+    return BACKUP_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private CryptoKey createKey(final String keyId) {\n+    final LocationName locationName = LocationName.of(\n+        testHelper.getOptions().getProjectId(),\n+        KMS_KEY_LOCATION\n+    );\n+    final KeyRing keyRing = createOrRetrieveKeyRing(locationName);\n+    final Timestamp.Builder rotationTime = Timestamp\n+        .newBuilder()\n+        .setSeconds(after7DaysInSeconds());\n+\n+    final CryptoKey cryptoKeyInput = CryptoKey.newBuilder()\n+        .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n+        .setNextRotationTime(rotationTime)\n+        .build();\n+    final CryptoKey cryptoKey = kmsClient\n+        .createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n+\n+    final Policy policy = kmsClient.getIamPolicy(cryptoKey.getName());\n+    final Binding binding = Binding\n+        .newBuilder()\n+        .addMembers(SPANNER_PRODUCTION_ACCOUNT)\n+        .setRole(KMS_KEY_ENCRYPTER_DECRYPTER)\n+        .build();\n+    final Policy newPolicy = policy.toBuilder().addBindings(binding).build();\n+    kmsClient.setIamPolicy(cryptoKey.getName(), newPolicy);\n+\n+    keys.add(cryptoKey);\n+    return cryptoKey;\n+  }\n+\n+  private long after7DaysInSeconds() {\n+    return TimeUnit.SECONDS.convert(\n+        System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(7L, TimeUnit.DAYS),\n+        TimeUnit.MILLISECONDS\n+    );\n+  }\n+\n+  private KeyRing createOrRetrieveKeyRing(final LocationName locationName) {\n+    try {\n+      return kmsClient.getKeyRing(\n+          KeyRingName.of(locationName.getProject(), locationName.getLocation(), KMS_KEY_RING_ID)\n+      );\n+    } catch (NotFoundException e) {\n+      return kmsClient.createKeyRing(locationName, KMS_KEY_RING_ID, KeyRing.getDefaultInstance());\n+    }\n+  }\n+\n+  private Database createDatabase(final Database database)\n+      throws ExecutionException, InterruptedException {\n+    final OperationFuture<Database, CreateDatabaseMetadata> op = dbAdminClient\n+        .createDatabase(database, Collections.<String>emptyList());\n+    final Database createdDatabase = op.get();\n+    dbs.add(createdDatabase.getId());\n+\n+    return createdDatabase;\n+  }\n+\n+  private Backup createBackup(final Backup backup) throws ExecutionException, InterruptedException {\n+    final OperationFuture<Backup, CreateBackupMetadata> op = dbAdminClient\n+        .createBackup(backup);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b85d7e96ff78524dad4766e6c09527ea4a39cd2"}, "originalPosition": 216}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTAxNTc3OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTozNjozMVrOH4sqzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTozNjozMVrOH4sqzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIxNDE1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final OperationFuture<Database, RestoreDatabaseMetadata> op = dbAdminClient\n          \n          \n            \n                    .restoreDatabase(restore);\n          \n          \n            \n                final Database database = op.get();\n          \n          \n            \n                final OperationFuture<Database, RestoreDatabaseMetadata> op =\n          \n          \n            \n                    dbAdminClient.restoreDatabase(restore);", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529214156", "createdAt": "2020-11-24T05:36:31Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    // for (CryptoKey key : keys) {\n+    //   for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+    //       .iterateAll()) {\n+    //     kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+    //   }\n+    // }\n+    for (DatabaseId db : dbs) {\n+      dbAdminClient\n+          .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());\n+    }\n+    for (BackupId backup : backups) {\n+      dbAdminClient.deleteBackup(backup.getInstanceId().getInstance(), backup.getBackup());\n+    }\n+    kmsClient.close();\n+  }\n+\n+  @Test\n+  public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n+    final InstanceId instanceId = testHelper.getInstanceId();\n+    final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String backupId = randomBackupId();\n+\n+    final CryptoKey key = createKey(randomKeyId());\n+    final Database sourceDatabase = dbAdminClient\n+        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+    final Backup backup = dbAdminClient\n+        .newBackupBuilder(BackupId.of(\n+            testHelper.getInstanceId(),\n+            backupId\n+        ))\n+        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n+        .build();\n+    final Restore restore = dbAdminClient\n+        .newRestoreBuilder(\n+            BackupId.of(testHelper.getInstanceId(), backupId),\n+            DatabaseId.of(testHelper.getInstanceId(), destinationDatabaseId)\n+        )\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+\n+    final Database createdDatabase = createDatabase(sourceDatabase);\n+    final Backup createdBackup = createBackup(backup);\n+    final Database restoredDatabase = restoreDatabase(restore);\n+\n+    assertThat(createdDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(createdDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+    assertThat(createdBackup.getEncryptionInfo().getKmsKeyVersion()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+  }\n+\n+  private String randomKeyId() {\n+    return KMS_KEY_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private String randomBackupId() {\n+    return BACKUP_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private CryptoKey createKey(final String keyId) {\n+    final LocationName locationName = LocationName.of(\n+        testHelper.getOptions().getProjectId(),\n+        KMS_KEY_LOCATION\n+    );\n+    final KeyRing keyRing = createOrRetrieveKeyRing(locationName);\n+    final Timestamp.Builder rotationTime = Timestamp\n+        .newBuilder()\n+        .setSeconds(after7DaysInSeconds());\n+\n+    final CryptoKey cryptoKeyInput = CryptoKey.newBuilder()\n+        .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n+        .setNextRotationTime(rotationTime)\n+        .build();\n+    final CryptoKey cryptoKey = kmsClient\n+        .createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n+\n+    final Policy policy = kmsClient.getIamPolicy(cryptoKey.getName());\n+    final Binding binding = Binding\n+        .newBuilder()\n+        .addMembers(SPANNER_PRODUCTION_ACCOUNT)\n+        .setRole(KMS_KEY_ENCRYPTER_DECRYPTER)\n+        .build();\n+    final Policy newPolicy = policy.toBuilder().addBindings(binding).build();\n+    kmsClient.setIamPolicy(cryptoKey.getName(), newPolicy);\n+\n+    keys.add(cryptoKey);\n+    return cryptoKey;\n+  }\n+\n+  private long after7DaysInSeconds() {\n+    return TimeUnit.SECONDS.convert(\n+        System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(7L, TimeUnit.DAYS),\n+        TimeUnit.MILLISECONDS\n+    );\n+  }\n+\n+  private KeyRing createOrRetrieveKeyRing(final LocationName locationName) {\n+    try {\n+      return kmsClient.getKeyRing(\n+          KeyRingName.of(locationName.getProject(), locationName.getLocation(), KMS_KEY_RING_ID)\n+      );\n+    } catch (NotFoundException e) {\n+      return kmsClient.createKeyRing(locationName, KMS_KEY_RING_ID, KeyRing.getDefaultInstance());\n+    }\n+  }\n+\n+  private Database createDatabase(final Database database)\n+      throws ExecutionException, InterruptedException {\n+    final OperationFuture<Database, CreateDatabaseMetadata> op = dbAdminClient\n+        .createDatabase(database, Collections.<String>emptyList());\n+    final Database createdDatabase = op.get();\n+    dbs.add(createdDatabase.getId());\n+\n+    return createdDatabase;\n+  }\n+\n+  private Backup createBackup(final Backup backup) throws ExecutionException, InterruptedException {\n+    final OperationFuture<Backup, CreateBackupMetadata> op = dbAdminClient\n+        .createBackup(backup);\n+    final Backup createdBackup = op.get();\n+    dbs.add(createdBackup.getDatabase());\n+    backups.add(backup.getId());\n+\n+    return createdBackup;\n+  }\n+\n+  private Database restoreDatabase(final Restore restore)\n+      throws ExecutionException, InterruptedException {\n+    final OperationFuture<Database, RestoreDatabaseMetadata> op = dbAdminClient\n+        .restoreDatabase(restore);\n+    final Database database = op.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b85d7e96ff78524dad4766e6c09527ea4a39cd2"}, "originalPosition": 228}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTA1OTU3OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTo1OToyMFrOH4tF0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTo1OToyMFrOH4tF0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIyMTA3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n          \n          \n            \n              public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n          \n          \n            \n            \n          \n          \n            \n              @ClassRule\n          \n          \n            \n              public static final String SPANNER_PRODUCTION_ACCOUNT =\n          \n          \n            \n                  \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n          \n          \n            \n              public static final String KMS_KEY_ENCRYPTER_DECRYPTER =\n          \n          \n            \n                  \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n          \n          \n            \n              @ClassRule public static IntegrationTestEnv env = new IntegrationTestEnv();", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529221073", "createdAt": "2020-11-24T05:59:20Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.CryptoKeyVersion;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  // FIXME: This should not be hardcoded\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  // FIXME: This should not be hardcoded\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9369fe36505d386d5a04f35a08e08644eb3e6425"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTA1OTU4OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTo1OToyMFrOH4tF0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTo1OToyMFrOH4tF0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIyMTA3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n          \n          \n            \n                      .iterateAll()) {\n          \n          \n            \n                    kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n          \n          \n            \n                  }\n          \n          \n            \n                  for (CryptoKeyVersion keyVersion :\n          \n          \n            \n                      kmsClient.listCryptoKeyVersions(key.getName()).iterateAll()) {\n          \n          \n            \n                  dbAdminClient.dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529221074", "createdAt": "2020-11-24T05:59:20Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.CryptoKeyVersion;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  // FIXME: This should not be hardcoded\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  // FIXME: This should not be hardcoded\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    for (CryptoKey key : keys) {\n+      for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+          .iterateAll()) {\n+        kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9369fe36505d386d5a04f35a08e08644eb3e6425"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTA1OTYwOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTo1OToyMFrOH4tF1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTo1OToyMFrOH4tF1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIyMTA3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n          \n          \n            \n                final InstanceId instanceId = testHelper.getInstanceId();\n          \n          \n            \n                final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n          \n          \n            \n                final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n          \n          \n            \n                final String backupId = randomBackupId();\n          \n          \n            \n            \n          \n          \n            \n                final CryptoKey key = createKey(randomKeyId());\n          \n          \n            \n                final Database sourceDatabase = dbAdminClient\n          \n          \n            \n                    .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n          \n          \n            \n                    .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n          \n          \n            \n                    .build();\n          \n          \n            \n                final Backup backup = dbAdminClient\n          \n          \n            \n                    .newBackupBuilder(BackupId.of(\n          \n          \n            \n                        testHelper.getInstanceId(),\n          \n          \n            \n                        backupId\n          \n          \n            \n                    ))\n          \n          \n            \n                    .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n          \n          \n            \n                    .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n          \n          \n            \n                    .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n          \n          \n            \n                    .build();\n          \n          \n            \n                final Restore restore = dbAdminClient\n          \n          \n            \n              public void createsEncryptedDatabaseBackupAndRestore()\n          \n          \n            \n                  throws ExecutionException, InterruptedException {\n          \n          \n            \n                final Database sourceDatabase =\n          \n          \n            \n                    dbAdminClient\n          \n          \n            \n                        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n          \n          \n            \n                        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n          \n          \n            \n                        .build();\n          \n          \n            \n                final Backup backup =\n          \n          \n            \n                    dbAdminClient\n          \n          \n            \n                        .newBackupBuilder(BackupId.of(testHelper.getInstanceId(), backupId))\n          \n          \n            \n                        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n          \n          \n            \n                        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n          \n          \n            \n                        .setExpireTime(\n          \n          \n            \n                            com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n          \n          \n            \n                        .build();\n          \n          \n            \n                final Restore restore =\n          \n          \n            \n                    dbAdminClient\n          \n          \n            \n                        .newRestoreBuilder(\n          \n          \n            \n                            BackupId.of(testHelper.getInstanceId(), backupId),\n          \n          \n            \n                            DatabaseId.of(testHelper.getInstanceId(), destinationDatabaseId))\n          \n          \n            \n                        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n          \n          \n            \n                        .build();", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529221076", "createdAt": "2020-11-24T05:59:20Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.CryptoKeyVersion;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  // FIXME: This should not be hardcoded\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  // FIXME: This should not be hardcoded\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    for (CryptoKey key : keys) {\n+      for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+          .iterateAll()) {\n+        kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+      }\n+    }\n+    for (DatabaseId db : dbs) {\n+      dbAdminClient\n+          .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());\n+    }\n+    for (BackupId backup : backups) {\n+      dbAdminClient.deleteBackup(backup.getInstanceId().getInstance(), backup.getBackup());\n+    }\n+    kmsClient.close();\n+  }\n+\n+  @Test\n+  public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n+    final InstanceId instanceId = testHelper.getInstanceId();\n+    final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String backupId = randomBackupId();\n+\n+    final CryptoKey key = createKey(randomKeyId());\n+    final Database sourceDatabase = dbAdminClient\n+        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+    final Backup backup = dbAdminClient\n+        .newBackupBuilder(BackupId.of(\n+            testHelper.getInstanceId(),\n+            backupId\n+        ))\n+        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n+        .build();\n+    final Restore restore = dbAdminClient", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9369fe36505d386d5a04f35a08e08644eb3e6425"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTA1OTYzOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTo1OToyMFrOH4tF2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTo1OToyMFrOH4tF2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIyMTA4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final LocationName locationName = LocationName.of(\n          \n          \n            \n                    testHelper.getOptions().getProjectId(),\n          \n          \n            \n                    KMS_KEY_LOCATION\n          \n          \n            \n                );\n          \n          \n            \n                final KeyRing keyRing = createOrRetrieveKeyRing(locationName);\n          \n          \n            \n                final Timestamp.Builder rotationTime = Timestamp\n          \n          \n            \n                    .newBuilder()\n          \n          \n            \n                    .setSeconds(after7DaysInSeconds());\n          \n          \n            \n            \n          \n          \n            \n                final CryptoKey cryptoKeyInput = CryptoKey.newBuilder()\n          \n          \n            \n                    .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n          \n          \n            \n                    .setNextRotationTime(rotationTime)\n          \n          \n            \n                    .build();\n          \n          \n            \n                final CryptoKey cryptoKey = kmsClient\n          \n          \n            \n                    .createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n          \n          \n            \n            \n          \n          \n            \n                final Policy policy = kmsClient.getIamPolicy(cryptoKey.getName());\n          \n          \n            \n                final Binding binding = Binding\n          \n          \n            \n                final LocationName locationName =\n          \n          \n            \n                    LocationName.of(testHelper.getOptions().getProjectId(), KMS_KEY_LOCATION);\n          \n          \n            \n                final Timestamp.Builder rotationTime = Timestamp.newBuilder().setSeconds(after7DaysInSeconds());\n          \n          \n            \n                final CryptoKey cryptoKeyInput =\n          \n          \n            \n                    CryptoKey.newBuilder()\n          \n          \n            \n                        .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n          \n          \n            \n                        .setNextRotationTime(rotationTime)\n          \n          \n            \n                        .build();\n          \n          \n            \n                final CryptoKey cryptoKey =\n          \n          \n            \n                    kmsClient.createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n          \n          \n            \n                final Binding binding =\n          \n          \n            \n                    Binding.newBuilder()\n          \n          \n            \n                        .addMembers(SPANNER_PRODUCTION_ACCOUNT)\n          \n          \n            \n                        .setRole(KMS_KEY_ENCRYPTER_DECRYPTER)\n          \n          \n            \n                        .build();", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529221080", "createdAt": "2020-11-24T05:59:20Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.CryptoKeyVersion;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  // FIXME: This should not be hardcoded\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  // FIXME: This should not be hardcoded\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    for (CryptoKey key : keys) {\n+      for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+          .iterateAll()) {\n+        kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+      }\n+    }\n+    for (DatabaseId db : dbs) {\n+      dbAdminClient\n+          .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());\n+    }\n+    for (BackupId backup : backups) {\n+      dbAdminClient.deleteBackup(backup.getInstanceId().getInstance(), backup.getBackup());\n+    }\n+    kmsClient.close();\n+  }\n+\n+  @Test\n+  public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n+    final InstanceId instanceId = testHelper.getInstanceId();\n+    final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String backupId = randomBackupId();\n+\n+    final CryptoKey key = createKey(randomKeyId());\n+    final Database sourceDatabase = dbAdminClient\n+        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+    final Backup backup = dbAdminClient\n+        .newBackupBuilder(BackupId.of(\n+            testHelper.getInstanceId(),\n+            backupId\n+        ))\n+        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n+        .build();\n+    final Restore restore = dbAdminClient\n+        .newRestoreBuilder(\n+            BackupId.of(testHelper.getInstanceId(), backupId),\n+            DatabaseId.of(testHelper.getInstanceId(), destinationDatabaseId)\n+        )\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+\n+    final Database createdDatabase = createDatabase(sourceDatabase);\n+    final Backup createdBackup = createBackup(backup);\n+    final Database restoredDatabase = restoreDatabase(restore);\n+\n+    assertThat(createdDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(createdDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+    assertThat(createdBackup.getEncryptionInfo().getKmsKeyVersion()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+  }\n+\n+  private String randomKeyId() {\n+    return KMS_KEY_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private String randomBackupId() {\n+    return BACKUP_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private CryptoKey createKey(final String keyId) {\n+    final LocationName locationName = LocationName.of(\n+        testHelper.getOptions().getProjectId(),\n+        KMS_KEY_LOCATION\n+    );\n+    final KeyRing keyRing = createOrRetrieveKeyRing(locationName);\n+    final Timestamp.Builder rotationTime = Timestamp\n+        .newBuilder()\n+        .setSeconds(after7DaysInSeconds());\n+\n+    final CryptoKey cryptoKeyInput = CryptoKey.newBuilder()\n+        .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n+        .setNextRotationTime(rotationTime)\n+        .build();\n+    final CryptoKey cryptoKey = kmsClient\n+        .createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n+\n+    final Policy policy = kmsClient.getIamPolicy(cryptoKey.getName());\n+    final Binding binding = Binding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9369fe36505d386d5a04f35a08e08644eb3e6425"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTA1OTY0OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTo1OToyMVrOH4tF2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTo1OToyMVrOH4tF2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIyMTA4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    TimeUnit.MILLISECONDS\n          \n          \n            \n                );\n          \n          \n            \n              }\n          \n          \n            \n                    TimeUnit.MILLISECONDS);\n          \n          \n            \n                      KeyRingName.of(locationName.getProject(), locationName.getLocation(), KMS_KEY_RING_ID));", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529221082", "createdAt": "2020-11-24T05:59:21Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.CryptoKeyVersion;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  // FIXME: This should not be hardcoded\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  // FIXME: This should not be hardcoded\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    for (CryptoKey key : keys) {\n+      for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+          .iterateAll()) {\n+        kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+      }\n+    }\n+    for (DatabaseId db : dbs) {\n+      dbAdminClient\n+          .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());\n+    }\n+    for (BackupId backup : backups) {\n+      dbAdminClient.deleteBackup(backup.getInstanceId().getInstance(), backup.getBackup());\n+    }\n+    kmsClient.close();\n+  }\n+\n+  @Test\n+  public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n+    final InstanceId instanceId = testHelper.getInstanceId();\n+    final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String backupId = randomBackupId();\n+\n+    final CryptoKey key = createKey(randomKeyId());\n+    final Database sourceDatabase = dbAdminClient\n+        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+    final Backup backup = dbAdminClient\n+        .newBackupBuilder(BackupId.of(\n+            testHelper.getInstanceId(),\n+            backupId\n+        ))\n+        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n+        .build();\n+    final Restore restore = dbAdminClient\n+        .newRestoreBuilder(\n+            BackupId.of(testHelper.getInstanceId(), backupId),\n+            DatabaseId.of(testHelper.getInstanceId(), destinationDatabaseId)\n+        )\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+\n+    final Database createdDatabase = createDatabase(sourceDatabase);\n+    final Backup createdBackup = createBackup(backup);\n+    final Database restoredDatabase = restoreDatabase(restore);\n+\n+    assertThat(createdDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(createdDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+    assertThat(createdBackup.getEncryptionInfo().getKmsKeyVersion()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+  }\n+\n+  private String randomKeyId() {\n+    return KMS_KEY_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private String randomBackupId() {\n+    return BACKUP_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private CryptoKey createKey(final String keyId) {\n+    final LocationName locationName = LocationName.of(\n+        testHelper.getOptions().getProjectId(),\n+        KMS_KEY_LOCATION\n+    );\n+    final KeyRing keyRing = createOrRetrieveKeyRing(locationName);\n+    final Timestamp.Builder rotationTime = Timestamp\n+        .newBuilder()\n+        .setSeconds(after7DaysInSeconds());\n+\n+    final CryptoKey cryptoKeyInput = CryptoKey.newBuilder()\n+        .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n+        .setNextRotationTime(rotationTime)\n+        .build();\n+    final CryptoKey cryptoKey = kmsClient\n+        .createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n+\n+    final Policy policy = kmsClient.getIamPolicy(cryptoKey.getName());\n+    final Binding binding = Binding\n+        .newBuilder()\n+        .addMembers(SPANNER_PRODUCTION_ACCOUNT)\n+        .setRole(KMS_KEY_ENCRYPTER_DECRYPTER)\n+        .build();\n+    final Policy newPolicy = policy.toBuilder().addBindings(binding).build();\n+    kmsClient.setIamPolicy(cryptoKey.getName(), newPolicy);\n+\n+    keys.add(cryptoKey);\n+    return cryptoKey;\n+  }\n+\n+  private long after7DaysInSeconds() {\n+    return TimeUnit.SECONDS.convert(\n+        System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(7L, TimeUnit.DAYS),\n+        TimeUnit.MILLISECONDS\n+    );\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9369fe36505d386d5a04f35a08e08644eb3e6425"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTA1OTY1OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTo1OToyMVrOH4tF3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTo1OToyMVrOH4tF3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIyMTA4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final OperationFuture<Database, CreateDatabaseMetadata> op = dbAdminClient\n          \n          \n            \n                    .createDatabase(database, Collections.<String>emptyList());\n          \n          \n            \n                final OperationFuture<Database, CreateDatabaseMetadata> op =\n          \n          \n            \n                    dbAdminClient.createDatabase(database, Collections.<String>emptyList());", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529221084", "createdAt": "2020-11-24T05:59:21Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.CryptoKeyVersion;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  // FIXME: This should not be hardcoded\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  // FIXME: This should not be hardcoded\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    for (CryptoKey key : keys) {\n+      for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+          .iterateAll()) {\n+        kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+      }\n+    }\n+    for (DatabaseId db : dbs) {\n+      dbAdminClient\n+          .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());\n+    }\n+    for (BackupId backup : backups) {\n+      dbAdminClient.deleteBackup(backup.getInstanceId().getInstance(), backup.getBackup());\n+    }\n+    kmsClient.close();\n+  }\n+\n+  @Test\n+  public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n+    final InstanceId instanceId = testHelper.getInstanceId();\n+    final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String backupId = randomBackupId();\n+\n+    final CryptoKey key = createKey(randomKeyId());\n+    final Database sourceDatabase = dbAdminClient\n+        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+    final Backup backup = dbAdminClient\n+        .newBackupBuilder(BackupId.of(\n+            testHelper.getInstanceId(),\n+            backupId\n+        ))\n+        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n+        .build();\n+    final Restore restore = dbAdminClient\n+        .newRestoreBuilder(\n+            BackupId.of(testHelper.getInstanceId(), backupId),\n+            DatabaseId.of(testHelper.getInstanceId(), destinationDatabaseId)\n+        )\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+\n+    final Database createdDatabase = createDatabase(sourceDatabase);\n+    final Backup createdBackup = createBackup(backup);\n+    final Database restoredDatabase = restoreDatabase(restore);\n+\n+    assertThat(createdDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(createdDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+    assertThat(createdBackup.getEncryptionInfo().getKmsKeyVersion()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+  }\n+\n+  private String randomKeyId() {\n+    return KMS_KEY_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private String randomBackupId() {\n+    return BACKUP_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private CryptoKey createKey(final String keyId) {\n+    final LocationName locationName = LocationName.of(\n+        testHelper.getOptions().getProjectId(),\n+        KMS_KEY_LOCATION\n+    );\n+    final KeyRing keyRing = createOrRetrieveKeyRing(locationName);\n+    final Timestamp.Builder rotationTime = Timestamp\n+        .newBuilder()\n+        .setSeconds(after7DaysInSeconds());\n+\n+    final CryptoKey cryptoKeyInput = CryptoKey.newBuilder()\n+        .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n+        .setNextRotationTime(rotationTime)\n+        .build();\n+    final CryptoKey cryptoKey = kmsClient\n+        .createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n+\n+    final Policy policy = kmsClient.getIamPolicy(cryptoKey.getName());\n+    final Binding binding = Binding\n+        .newBuilder()\n+        .addMembers(SPANNER_PRODUCTION_ACCOUNT)\n+        .setRole(KMS_KEY_ENCRYPTER_DECRYPTER)\n+        .build();\n+    final Policy newPolicy = policy.toBuilder().addBindings(binding).build();\n+    kmsClient.setIamPolicy(cryptoKey.getName(), newPolicy);\n+\n+    keys.add(cryptoKey);\n+    return cryptoKey;\n+  }\n+\n+  private long after7DaysInSeconds() {\n+    return TimeUnit.SECONDS.convert(\n+        System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(7L, TimeUnit.DAYS),\n+        TimeUnit.MILLISECONDS\n+    );\n+  }\n+\n+  private KeyRing createOrRetrieveKeyRing(final LocationName locationName) {\n+    try {\n+      return kmsClient.getKeyRing(\n+          KeyRingName.of(locationName.getProject(), locationName.getLocation(), KMS_KEY_RING_ID)\n+      );\n+    } catch (NotFoundException e) {\n+      return kmsClient.createKeyRing(locationName, KMS_KEY_RING_ID, KeyRing.getDefaultInstance());\n+    }\n+  }\n+\n+  private Database createDatabase(final Database database)\n+      throws ExecutionException, InterruptedException {\n+    final OperationFuture<Database, CreateDatabaseMetadata> op = dbAdminClient\n+        .createDatabase(database, Collections.<String>emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9369fe36505d386d5a04f35a08e08644eb3e6425"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTA1OTY2OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTo1OToyMVrOH4tF3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTo1OToyMVrOH4tF3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIyMTA4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final OperationFuture<Backup, CreateBackupMetadata> op = dbAdminClient\n          \n          \n            \n                    .createBackup(backup);\n          \n          \n            \n                final OperationFuture<Backup, CreateBackupMetadata> op = dbAdminClient.createBackup(backup);", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529221086", "createdAt": "2020-11-24T05:59:21Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.CryptoKeyVersion;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  // FIXME: This should not be hardcoded\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  // FIXME: This should not be hardcoded\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    for (CryptoKey key : keys) {\n+      for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+          .iterateAll()) {\n+        kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+      }\n+    }\n+    for (DatabaseId db : dbs) {\n+      dbAdminClient\n+          .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());\n+    }\n+    for (BackupId backup : backups) {\n+      dbAdminClient.deleteBackup(backup.getInstanceId().getInstance(), backup.getBackup());\n+    }\n+    kmsClient.close();\n+  }\n+\n+  @Test\n+  public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n+    final InstanceId instanceId = testHelper.getInstanceId();\n+    final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String backupId = randomBackupId();\n+\n+    final CryptoKey key = createKey(randomKeyId());\n+    final Database sourceDatabase = dbAdminClient\n+        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+    final Backup backup = dbAdminClient\n+        .newBackupBuilder(BackupId.of(\n+            testHelper.getInstanceId(),\n+            backupId\n+        ))\n+        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n+        .build();\n+    final Restore restore = dbAdminClient\n+        .newRestoreBuilder(\n+            BackupId.of(testHelper.getInstanceId(), backupId),\n+            DatabaseId.of(testHelper.getInstanceId(), destinationDatabaseId)\n+        )\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+\n+    final Database createdDatabase = createDatabase(sourceDatabase);\n+    final Backup createdBackup = createBackup(backup);\n+    final Database restoredDatabase = restoreDatabase(restore);\n+\n+    assertThat(createdDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(createdDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+    assertThat(createdBackup.getEncryptionInfo().getKmsKeyVersion()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+  }\n+\n+  private String randomKeyId() {\n+    return KMS_KEY_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private String randomBackupId() {\n+    return BACKUP_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private CryptoKey createKey(final String keyId) {\n+    final LocationName locationName = LocationName.of(\n+        testHelper.getOptions().getProjectId(),\n+        KMS_KEY_LOCATION\n+    );\n+    final KeyRing keyRing = createOrRetrieveKeyRing(locationName);\n+    final Timestamp.Builder rotationTime = Timestamp\n+        .newBuilder()\n+        .setSeconds(after7DaysInSeconds());\n+\n+    final CryptoKey cryptoKeyInput = CryptoKey.newBuilder()\n+        .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n+        .setNextRotationTime(rotationTime)\n+        .build();\n+    final CryptoKey cryptoKey = kmsClient\n+        .createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n+\n+    final Policy policy = kmsClient.getIamPolicy(cryptoKey.getName());\n+    final Binding binding = Binding\n+        .newBuilder()\n+        .addMembers(SPANNER_PRODUCTION_ACCOUNT)\n+        .setRole(KMS_KEY_ENCRYPTER_DECRYPTER)\n+        .build();\n+    final Policy newPolicy = policy.toBuilder().addBindings(binding).build();\n+    kmsClient.setIamPolicy(cryptoKey.getName(), newPolicy);\n+\n+    keys.add(cryptoKey);\n+    return cryptoKey;\n+  }\n+\n+  private long after7DaysInSeconds() {\n+    return TimeUnit.SECONDS.convert(\n+        System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(7L, TimeUnit.DAYS),\n+        TimeUnit.MILLISECONDS\n+    );\n+  }\n+\n+  private KeyRing createOrRetrieveKeyRing(final LocationName locationName) {\n+    try {\n+      return kmsClient.getKeyRing(\n+          KeyRingName.of(locationName.getProject(), locationName.getLocation(), KMS_KEY_RING_ID)\n+      );\n+    } catch (NotFoundException e) {\n+      return kmsClient.createKeyRing(locationName, KMS_KEY_RING_ID, KeyRing.getDefaultInstance());\n+    }\n+  }\n+\n+  private Database createDatabase(final Database database)\n+      throws ExecutionException, InterruptedException {\n+    final OperationFuture<Database, CreateDatabaseMetadata> op = dbAdminClient\n+        .createDatabase(database, Collections.<String>emptyList());\n+    final Database createdDatabase = op.get();\n+    dbs.add(createdDatabase.getId());\n+\n+    return createdDatabase;\n+  }\n+\n+  private Backup createBackup(final Backup backup) throws ExecutionException, InterruptedException {\n+    final OperationFuture<Backup, CreateBackupMetadata> op = dbAdminClient\n+        .createBackup(backup);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9369fe36505d386d5a04f35a08e08644eb3e6425"}, "originalPosition": 219}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTA1OTY3OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTo1OToyMVrOH4tF3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNTo1OToyMVrOH4tF3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTIyMTA4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final OperationFuture<Database, RestoreDatabaseMetadata> op = dbAdminClient\n          \n          \n            \n                    .restoreDatabase(restore);\n          \n          \n            \n                final Database database = op.get();\n          \n          \n            \n                final OperationFuture<Database, RestoreDatabaseMetadata> op =\n          \n          \n            \n                    dbAdminClient.restoreDatabase(restore);", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r529221087", "createdAt": "2020-11-24T05:59:21Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITCmek.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.api.gax.longrunning.OperationFuture;\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.kms.v1.CryptoKey;\n+import com.google.cloud.kms.v1.CryptoKey.CryptoKeyPurpose;\n+import com.google.cloud.kms.v1.CryptoKeyVersion;\n+import com.google.cloud.kms.v1.KeyManagementServiceClient;\n+import com.google.cloud.kms.v1.KeyRing;\n+import com.google.cloud.kms.v1.KeyRingName;\n+import com.google.cloud.kms.v1.LocationName;\n+import com.google.cloud.spanner.Backup;\n+import com.google.cloud.spanner.BackupId;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseAdminClient;\n+import com.google.cloud.spanner.DatabaseId;\n+import com.google.cloud.spanner.EncryptionConfigInfo;\n+import com.google.cloud.spanner.InstanceId;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.Restore;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.iam.v1.Binding;\n+import com.google.iam.v1.Policy;\n+import com.google.protobuf.Timestamp;\n+import com.google.spanner.admin.database.v1.CreateBackupMetadata;\n+import com.google.spanner.admin.database.v1.CreateDatabaseMetadata;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseMetadata;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITCmek {\n+\n+  private static final String BACKUP_ID_PREFIX = \"spanner-test-backup\";\n+  // FIXME: This should not be hardcoded\n+  private static final String KMS_KEY_LOCATION = \"eur5\";\n+  private static final String KMS_KEY_RING_ID = \"spanner-test-keyring\";\n+  private static final String KMS_KEY_ID_PREFIX = \"spanner-test-key\";\n+  private static final List<CryptoKey> keys = new ArrayList<>();\n+  private static final List<DatabaseId> dbs = new ArrayList<>();\n+  private static final List<BackupId> backups = new ArrayList<>();\n+  // FIXME: This should not be hardcoded\n+  public static final String SPANNER_PRODUCTION_ACCOUNT = \"serviceAccount:service-353504090643@gcp-sa-spanner.iam.gserviceaccount.com\";\n+  public static final String KMS_KEY_ENCRYPTER_DECRYPTER = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\";\n+\n+  @ClassRule\n+  public static IntegrationTestEnv env = new IntegrationTestEnv();\n+  private static KeyManagementServiceClient kmsClient;\n+  private static DatabaseAdminClient dbAdminClient;\n+\n+  private static RemoteSpannerHelper testHelper;\n+  private static Random random;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws IOException {\n+    testHelper = env.getTestHelper();\n+    dbAdminClient = testHelper.getClient().getDatabaseAdminClient();\n+    kmsClient = KeyManagementServiceClient.create();\n+    random = new Random();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() {\n+    for (CryptoKey key : keys) {\n+      for (CryptoKeyVersion keyVersion : kmsClient.listCryptoKeyVersions(key.getName())\n+          .iterateAll()) {\n+        kmsClient.destroyCryptoKeyVersion(keyVersion.getName());\n+      }\n+    }\n+    for (DatabaseId db : dbs) {\n+      dbAdminClient\n+          .dropDatabase(db.getInstanceId().getInstance(), db.getDatabase());\n+    }\n+    for (BackupId backup : backups) {\n+      dbAdminClient.deleteBackup(backup.getInstanceId().getInstance(), backup.getBackup());\n+    }\n+    kmsClient.close();\n+  }\n+\n+  @Test\n+  public void createsEncryptedDatabaseBackupAndRestore() throws ExecutionException, InterruptedException {\n+    final InstanceId instanceId = testHelper.getInstanceId();\n+    final String sourceDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String destinationDatabaseId = testHelper.getUniqueDatabaseId();\n+    final String backupId = randomBackupId();\n+\n+    final CryptoKey key = createKey(randomKeyId());\n+    final Database sourceDatabase = dbAdminClient\n+        .newDatabaseBuilder(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+    final Backup backup = dbAdminClient\n+        .newBackupBuilder(BackupId.of(\n+            testHelper.getInstanceId(),\n+            backupId\n+        ))\n+        .setDatabase(DatabaseId.of(instanceId, sourceDatabaseId))\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .setExpireTime(com.google.cloud.Timestamp.ofTimeSecondsAndNanos(after7DaysInSeconds(), 0))\n+        .build();\n+    final Restore restore = dbAdminClient\n+        .newRestoreBuilder(\n+            BackupId.of(testHelper.getInstanceId(), backupId),\n+            DatabaseId.of(testHelper.getInstanceId(), destinationDatabaseId)\n+        )\n+        .setEncryptionConfigInfo(EncryptionConfigInfo.ofKey(key.getName()))\n+        .build();\n+\n+    final Database createdDatabase = createDatabase(sourceDatabase);\n+    final Backup createdBackup = createBackup(backup);\n+    final Database restoredDatabase = restoreDatabase(restore);\n+\n+    assertThat(createdDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(createdDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+    assertThat(createdBackup.getEncryptionInfo().getKmsKeyVersion()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo()).isNotNull();\n+    assertThat(restoredDatabase.getEncryptionConfigInfo().getKmsKeyName()).isEqualTo(key.getName());\n+  }\n+\n+  private String randomKeyId() {\n+    return KMS_KEY_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private String randomBackupId() {\n+    return BACKUP_ID_PREFIX + random.nextInt();\n+  }\n+\n+  private CryptoKey createKey(final String keyId) {\n+    final LocationName locationName = LocationName.of(\n+        testHelper.getOptions().getProjectId(),\n+        KMS_KEY_LOCATION\n+    );\n+    final KeyRing keyRing = createOrRetrieveKeyRing(locationName);\n+    final Timestamp.Builder rotationTime = Timestamp\n+        .newBuilder()\n+        .setSeconds(after7DaysInSeconds());\n+\n+    final CryptoKey cryptoKeyInput = CryptoKey.newBuilder()\n+        .setPurpose(CryptoKeyPurpose.ENCRYPT_DECRYPT)\n+        .setNextRotationTime(rotationTime)\n+        .build();\n+    final CryptoKey cryptoKey = kmsClient\n+        .createCryptoKey(KeyRingName.parse(keyRing.getName()), keyId, cryptoKeyInput);\n+\n+    final Policy policy = kmsClient.getIamPolicy(cryptoKey.getName());\n+    final Binding binding = Binding\n+        .newBuilder()\n+        .addMembers(SPANNER_PRODUCTION_ACCOUNT)\n+        .setRole(KMS_KEY_ENCRYPTER_DECRYPTER)\n+        .build();\n+    final Policy newPolicy = policy.toBuilder().addBindings(binding).build();\n+    kmsClient.setIamPolicy(cryptoKey.getName(), newPolicy);\n+\n+    keys.add(cryptoKey);\n+    return cryptoKey;\n+  }\n+\n+  private long after7DaysInSeconds() {\n+    return TimeUnit.SECONDS.convert(\n+        System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(7L, TimeUnit.DAYS),\n+        TimeUnit.MILLISECONDS\n+    );\n+  }\n+\n+  private KeyRing createOrRetrieveKeyRing(final LocationName locationName) {\n+    try {\n+      return kmsClient.getKeyRing(\n+          KeyRingName.of(locationName.getProject(), locationName.getLocation(), KMS_KEY_RING_ID)\n+      );\n+    } catch (NotFoundException e) {\n+      return kmsClient.createKeyRing(locationName, KMS_KEY_RING_ID, KeyRing.getDefaultInstance());\n+    }\n+  }\n+\n+  private Database createDatabase(final Database database)\n+      throws ExecutionException, InterruptedException {\n+    final OperationFuture<Database, CreateDatabaseMetadata> op = dbAdminClient\n+        .createDatabase(database, Collections.<String>emptyList());\n+    final Database createdDatabase = op.get();\n+    dbs.add(createdDatabase.getId());\n+\n+    return createdDatabase;\n+  }\n+\n+  private Backup createBackup(final Backup backup) throws ExecutionException, InterruptedException {\n+    final OperationFuture<Backup, CreateBackupMetadata> op = dbAdminClient\n+        .createBackup(backup);\n+    final Backup createdBackup = op.get();\n+    dbs.add(createdBackup.getDatabase());\n+    backups.add(backup.getId());\n+\n+    return createdBackup;\n+  }\n+\n+  private Database restoreDatabase(final Restore restore)\n+      throws ExecutionException, InterruptedException {\n+    final OperationFuture<Database, RestoreDatabaseMetadata> op = dbAdminClient\n+        .restoreDatabase(restore);\n+    final Database database = op.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9369fe36505d386d5a04f35a08e08644eb3e6425"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTQ1MzEwOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTozNDo1OFrOH5qoOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTozMDozOVrOH6IxQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIyOTMwNg==", "bodyText": "Shouldn't we be using the wrapper classes here instead of the generated classes?", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r530229306", "createdAt": "2020-11-25T09:34:58Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "diffHunk": "@@ -18,6 +18,8 @@\n \n import com.google.api.client.util.Preconditions;\n import com.google.cloud.Timestamp;\n+import com.google.spanner.admin.database.v1.EncryptionConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4ff25ad30b3c590865dac8546445067f941ef89"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMzEzNg==", "bodyText": "Oh thanks for pointing that out, I fixed it and created a wrapper class for the EncryptionInfo as well.", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r530723136", "createdAt": "2020-11-26T01:30:39Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "diffHunk": "@@ -18,6 +18,8 @@\n \n import com.google.api.client.util.Preconditions;\n import com.google.cloud.Timestamp;\n+import com.google.spanner.admin.database.v1.EncryptionConfig;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIyOTMwNg=="}, "originalCommit": {"oid": "c4ff25ad30b3c590865dac8546445067f941ef89"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzODI0NDI0OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/clirr-ignored-differences.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxMzo0OTowMFrOIX3RPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQwNDo1MjoxN1rOIcVMNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg5MzY5Mw==", "bodyText": "This change will break customers and requires a major version bump. This is not optional.", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r561893693", "createdAt": "2021-01-21T13:49:00Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/clirr-ignored-differences.xml", "diffHunk": "@@ -453,4 +453,71 @@\n     <className>com/google/cloud/spanner/TransactionContext</className>\n     <method>com.google.api.core.ApiFuture executeUpdateAsync(com.google.cloud.spanner.Statement)</method>\n   </difference>\n+\n+  <!-- Support creating encrypted databases -->\n+  <difference>\n+    <differenceType>7004</differenceType>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c979bd80b421c116b3b93f054d64e7fab30db07"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzQwODY1Nw==", "bodyText": "Modified the clirr differences to include only the interface / implementation changes required for this feature (removed the ones for the generated code). Since we need to set the encryption info we will need to break the interface here (meaning we will need a major version bump).", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r563408657", "createdAt": "2021-01-25T00:21:17Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/clirr-ignored-differences.xml", "diffHunk": "@@ -453,4 +453,71 @@\n     <className>com/google/cloud/spanner/TransactionContext</className>\n     <method>com.google.api.core.ApiFuture executeUpdateAsync(com.google.cloud.spanner.Statement)</method>\n   </difference>\n+\n+  <!-- Support creating encrypted databases -->\n+  <difference>\n+    <differenceType>7004</differenceType>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg5MzY5Mw=="}, "originalCommit": {"oid": "7c979bd80b421c116b3b93f054d64e7fab30db07"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjU3ODIyOA==", "bodyText": "Marked the PR as breaking.", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r566578228", "createdAt": "2021-01-29T04:52:17Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/clirr-ignored-differences.xml", "diffHunk": "@@ -453,4 +453,71 @@\n     <className>com/google/cloud/spanner/TransactionContext</className>\n     <method>com.google.api.core.ApiFuture executeUpdateAsync(com.google.cloud.spanner.Statement)</method>\n   </difference>\n+\n+  <!-- Support creating encrypted databases -->\n+  <difference>\n+    <differenceType>7004</differenceType>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg5MzY5Mw=="}, "originalCommit": {"oid": "7c979bd80b421c116b3b93f054d64e7fab30db07"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODM3MzY2OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDo0NjoxMVrOIfF2Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQwMjowNjoxOFrOIhQbwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ3MjU3OA==", "bodyText": "not the key itself but only the version of the key?", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r569472578", "createdAt": "2021-02-03T14:46:11Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "diffHunk": "@@ -28,8 +28,22 @@\n \n     abstract Builder setSize(long size);\n \n+    /**\n+     * Output only.\n+     *\n+     * <p>The customer-manager encryption key version used to encrypt the backup.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8762a96f87aa3ff76f9e59cf850022c0904f0e48"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTc0MzE2OA==", "bodyText": "Updated the comment to the proto comment.", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r571743168", "createdAt": "2021-02-08T02:06:18Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "diffHunk": "@@ -28,8 +28,22 @@\n \n     abstract Builder setSize(long size);\n \n+    /**\n+     * Output only.\n+     *\n+     * <p>The customer-manager encryption key version used to encrypt the backup.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ3MjU3OA=="}, "originalCommit": {"oid": "8762a96f87aa3ff76f9e59cf850022c0904f0e48"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODM3NDc1OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDo0NjoyNFrOIfF26g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQwMjowNjoxNVrOIhQbuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ3Mjc0Ng==", "bodyText": "What does this mean?", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r569472746", "createdAt": "2021-02-03T14:46:24Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "diffHunk": "@@ -28,8 +28,22 @@\n \n     abstract Builder setSize(long size);\n \n+    /**\n+     * Output only.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8762a96f87aa3ff76f9e59cf850022c0904f0e48"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTc0MzE2MA==", "bodyText": "Updated the comment to the proto comment.", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r571743160", "createdAt": "2021-02-08T02:06:15Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "diffHunk": "@@ -28,8 +28,22 @@\n \n     abstract Builder setSize(long size);\n \n+    /**\n+     * Output only.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ3Mjc0Ng=="}, "originalCommit": {"oid": "8762a96f87aa3ff76f9e59cf850022c0904f0e48"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODM3NzA5OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDo0Njo1MFrOIfF4Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQwMjowNjoyNlrOIhQb4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ3MzExNQ==", "bodyText": "delete \"to be\"\nit's --> its", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r569473115", "createdAt": "2021-02-03T14:46:50Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "diffHunk": "@@ -152,6 +186,24 @@ public long getSize() {\n     return size;\n   }\n \n+  /**\n+   * Returns the {@link EncryptionConfigInfo} to be used to encrypt the backup during it's creation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8762a96f87aa3ff76f9e59cf850022c0904f0e48"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTc0MzIwMA==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r571743200", "createdAt": "2021-02-08T02:06:26Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "diffHunk": "@@ -152,6 +186,24 @@ public long getSize() {\n     return size;\n   }\n \n+  /**\n+   * Returns the {@link EncryptionConfigInfo} to be used to encrypt the backup during it's creation.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ3MzExNQ=="}, "originalCommit": {"oid": "8762a96f87aa3ff76f9e59cf850022c0904f0e48"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODM4MDUyOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDo0NzozNFrOIfF6iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQwMjowNjozNlrOIhQb-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ3MzY3Mw==", "bodyText": "delete", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r569473673", "createdAt": "2021-02-03T14:47:34Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "diffHunk": "@@ -152,6 +186,24 @@ public long getSize() {\n     return size;\n   }\n \n+  /**\n+   * Returns the {@link EncryptionConfigInfo} to be used to encrypt the backup during it's creation.\n+   * Returns <code>null</code> if no customer-managed encryption key should be used.\n+   */\n+  public EncryptionConfigInfo getEncryptionConfigInfo() {\n+    return encryptionConfigInfo;\n+  }\n+\n+  /**\n+   * Returns the {@link EncryptionInfo} of the backup if the backup is encrypted, or <code>null\n+   * </code> if this backup is not encrypted.\n+   *\n+   * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8762a96f87aa3ff76f9e59cf850022c0904f0e48"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTc0MzIyNw==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r571743227", "createdAt": "2021-02-08T02:06:36Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "diffHunk": "@@ -152,6 +186,24 @@ public long getSize() {\n     return size;\n   }\n \n+  /**\n+   * Returns the {@link EncryptionConfigInfo} to be used to encrypt the backup during it's creation.\n+   * Returns <code>null</code> if no customer-managed encryption key should be used.\n+   */\n+  public EncryptionConfigInfo getEncryptionConfigInfo() {\n+    return encryptionConfigInfo;\n+  }\n+\n+  /**\n+   * Returns the {@link EncryptionInfo} of the backup if the backup is encrypted, or <code>null\n+   * </code> if this backup is not encrypted.\n+   *\n+   * @return", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ3MzY3Mw=="}, "originalCommit": {"oid": "8762a96f87aa3ff76f9e59cf850022c0904f0e48"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4ODM4NTczOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDo0ODoyN1rOIfF9jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQwMjowODozM1rOIhQduA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ3NDQ0NA==", "bodyText": "Instead of returning null is there a config info that indicates no encryption?", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r569474444", "createdAt": "2021-02-03T14:48:27Z", "author": {"login": "elharo"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "diffHunk": "@@ -152,6 +186,24 @@ public long getSize() {\n     return size;\n   }\n \n+  /**\n+   * Returns the {@link EncryptionConfigInfo} to be used to encrypt the backup during it's creation.\n+   * Returns <code>null</code> if no customer-managed encryption key should be used.\n+   */\n+  public EncryptionConfigInfo getEncryptionConfigInfo() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8762a96f87aa3ff76f9e59cf850022c0904f0e48"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTc0MzY3Mg==", "bodyText": "Not at the moment.", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r571743672", "createdAt": "2021-02-08T02:08:33Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "diffHunk": "@@ -152,6 +186,24 @@ public long getSize() {\n     return size;\n   }\n \n+  /**\n+   * Returns the {@link EncryptionConfigInfo} to be used to encrypt the backup during it's creation.\n+   * Returns <code>null</code> if no customer-managed encryption key should be used.\n+   */\n+  public EncryptionConfigInfo getEncryptionConfigInfo() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ3NDQ0NA=="}, "originalCommit": {"oid": "8762a96f87aa3ff76f9e59cf850022c0904f0e48"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc2Mjk4MzEyOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QwODowMDozM1rOI4L47g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QxMDoxNzoyOFrOI4R3EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTc4NTk2Ng==", "bodyText": "nit: This formatting seems strange", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595785966", "createdAt": "2021-03-17T08:00:33Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "diffHunk": "@@ -174,6 +217,23 @@ public long getSize() {\n     return size;\n   }\n \n+  /**\n+   * Returns the {@link BackupEncryptionConfig} to encrypt the backup during its creation. Returns\n+   * <code>\n+   * null</code> if no customer-managed encryption key should be used.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTg4Mzc5Mw==", "bodyText": "Fixed.", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595883793", "createdAt": "2021-03-17T10:17:28Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/BackupInfo.java", "diffHunk": "@@ -174,6 +217,23 @@ public long getSize() {\n     return size;\n   }\n \n+  /**\n+   * Returns the {@link BackupEncryptionConfig} to encrypt the backup during its creation. Returns\n+   * <code>\n+   * null</code> if no customer-managed encryption key should be used.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTc4NTk2Ng=="}, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc2Mjk5OTIwOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QwODowNTowOFrOI4MCqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QwODowNTowOFrOI4MCqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTc4ODQ1Ng==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * google's default encryption, is a customer managed encryption with a provided key. If no\n          \n          \n            \n                 * Google's default encryption, is a customer managed encryption with a provided key. If no", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595788456", "createdAt": "2021-03-17T08:05:08Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseInfo.java", "diffHunk": "@@ -34,6 +35,15 @@\n \n     abstract Builder setEarliestVersionTime(Timestamp earliestVersionTime);\n \n+    /**\n+     * Optional for creating a new backup.\n+     *\n+     * <p>The encryption configuration to be used for the database. The only encryption, other than\n+     * google's default encryption, is a customer managed encryption with a provided key. If no", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc2MzAwMTEzOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QwODowNTozMVrOI4MDsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QwODowNTozMVrOI4MDsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTc4ODcyMw==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * encryption is provided, google's default encryption will be used.\n          \n          \n            \n                 * encryption is provided, Google's default encryption will be used.", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595788723", "createdAt": "2021-03-17T08:05:31Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseInfo.java", "diffHunk": "@@ -34,6 +35,15 @@\n \n     abstract Builder setEarliestVersionTime(Timestamp earliestVersionTime);\n \n+    /**\n+     * Optional for creating a new backup.\n+     *\n+     * <p>The encryption configuration to be used for the database. The only encryption, other than\n+     * google's default encryption, is a customer managed encryption with a provided key. If no\n+     * encryption is provided, google's default encryption will be used.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc2MzAwNTUxOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/Restore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QwODowNjozN1rOI4MGSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QwODowNjozN1rOI4MGSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTc4OTM4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2020 Google LLC\n          \n          \n            \n             * Copyright 2021 Google LLC", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595789387", "createdAt": "2021-03-17T08:06:37Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/Restore.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Google LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc2MzAzMTI4OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/encryption/EncryptionConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QwODoxMzowN1rOI4MVwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QxMDoxNzozN1rOI4R3iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTc5MzM0NQ==", "bodyText": "I don't think we need this interface. It seems that it is only referenced by the other interfaces that extend this, but this specific marker interface is never used.", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595793345", "createdAt": "2021-03-17T08:13:07Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/encryption/EncryptionConfig.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2021 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.encryption;\n+\n+import com.google.api.core.InternalApi;\n+\n+/**\n+ * Marker interface for encryption configurations that can be applied on databases, backups and\n+ * restores.\n+ */\n+@InternalApi\n+public interface EncryptionConfig {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTg4MzkxNQ==", "bodyText": "Removed.", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595883915", "createdAt": "2021-03-17T10:17:37Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/encryption/EncryptionConfig.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2021 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.encryption;\n+\n+import com.google.api.core.InternalApi;\n+\n+/**\n+ * Marker interface for encryption configurations that can be applied on databases, backups and\n+ * restores.\n+ */\n+@InternalApi\n+public interface EncryptionConfig {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTc5MzM0NQ=="}, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc2MzA1ODA4OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/encryption/EncryptionInfo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QwODoxOTo0NVrOI4Ml9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QwODoxOTo0NVrOI4Ml9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTc5NzQ5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2020 Google LLC\n          \n          \n            \n             * Copyright 2021 Google LLC", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595797492", "createdAt": "2021-03-17T08:19:45Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/encryption/EncryptionInfo.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2020 Google LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc2MzA3NTQ5OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QwODoyNDowNlrOI4Mwog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QxMDozMTo0M1rOI4ScuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTgwMDIyNg==", "bodyText": "I don't think it is guaranteed that backupInfo.getExpireTime() will always be set, so this could cause a NullPointerException.", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595800226", "createdAt": "2021-03-17T08:24:06Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java", "diffHunk": "@@ -1145,15 +1152,31 @@ public Database call() throws Exception {\n \n   @Override\n   public OperationFuture<Backup, CreateBackupMetadata> createBackup(\n-      final String instanceName, final String backupId, final Backup backup)\n-      throws SpannerException {\n-    CreateBackupRequest request =\n+      final com.google.cloud.spanner.Backup backupInfo) throws SpannerException {\n+    final String instanceName = backupInfo.getInstanceId().getName();\n+    final String databaseName = backupInfo.getDatabase().getName();\n+    final String backupId = backupInfo.getId().getBackup();\n+    final Backup.Builder backupBuilder =\n+        com.google.spanner.admin.database.v1.Backup.newBuilder()\n+            .setDatabase(databaseName)\n+            .setExpireTime(backupInfo.getExpireTime().toProto());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTg5MzQzMg==", "bodyText": "We shouldn't be able to create a backup without an expire time:\n\n  \n    \n      java-spanner/google-cloud-spanner/src/main/java/com/google/cloud/spanner/Backup.java\n    \n    \n        Lines 64 to 65\n      in\n      32fdd60\n    \n    \n    \n    \n\n        \n          \n           Preconditions.checkState( \n        \n\n        \n          \n               getExpireTime() != null, \"Cannot create a backup without an expire time\"); \n        \n    \n  \n\n\nI moved these checks into the database client instead (with illegal argument exception, instead of illegal state exceptions), so that we prevent the creation of a Backup without the necessary parameters.", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595893432", "createdAt": "2021-03-17T10:31:43Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/GapicSpannerRpc.java", "diffHunk": "@@ -1145,15 +1152,31 @@ public Database call() throws Exception {\n \n   @Override\n   public OperationFuture<Backup, CreateBackupMetadata> createBackup(\n-      final String instanceName, final String backupId, final Backup backup)\n-      throws SpannerException {\n-    CreateBackupRequest request =\n+      final com.google.cloud.spanner.Backup backupInfo) throws SpannerException {\n+    final String instanceName = backupInfo.getInstanceId().getName();\n+    final String databaseName = backupInfo.getDatabase().getName();\n+    final String backupId = backupInfo.getId().getBackup();\n+    final Backup.Builder backupBuilder =\n+        com.google.spanner.admin.database.v1.Backup.newBuilder()\n+            .setDatabase(databaseName)\n+            .setExpireTime(backupInfo.getExpireTime().toProto());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTgwMDIyNg=="}, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc2MzA5MzMzOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/SpannerRpc.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QwODoyNzo1NlrOI4M7Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QxMDo0NjoxNFrOI4TDXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTgwMjk2Nw==", "bodyText": "I think we should check for these conditions in the builder for BackupInfo to ensure that they are actually filled. So that would mean that the build() method of the builder should fail if these fields have not been set.", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595802967", "createdAt": "2021-03-17T08:27:56Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/SpannerRpc.java", "diffHunk": "@@ -216,26 +220,22 @@ public String getNextPageToken() {\n       throws SpannerException;\n \n   /**\n-   * Creates a new backup from the source database specified in the {@link Backup} instance.\n+   * Creates a new backup from the source database specified in the {@link\n+   * com.google.cloud.spanner.Backup} instance.\n    *\n-   * @param instanceName the name of the instance where the backup should be created.\n-   * @param backupId the id of the backup to create.\n-   * @param backup the backup to create. The database and expireTime fields of the backup must be\n-   *     filled.\n+   * @param backupInfo the backup to create. The instance, database and expireTime fields of the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTkwMzMyNA==", "bodyText": "We can not do this in the builder itself, because there are times where the backup can be built without some of the necessary information. For instance:\n\nbackup.reload()\nbackup.delete()\nbackup.updateExpireTime()\n\nFor this reason I moved the checks into the DatabaseAdminClientImpl.createBackup instead.", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595903324", "createdAt": "2021-03-17T10:46:14Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/spi/v1/SpannerRpc.java", "diffHunk": "@@ -216,26 +220,22 @@ public String getNextPageToken() {\n       throws SpannerException;\n \n   /**\n-   * Creates a new backup from the source database specified in the {@link Backup} instance.\n+   * Creates a new backup from the source database specified in the {@link\n+   * com.google.cloud.spanner.Backup} instance.\n    *\n-   * @param instanceName the name of the instance where the backup should be created.\n-   * @param backupId the id of the backup to create.\n-   * @param backup the backup to create. The database and expireTime fields of the backup must be\n-   *     filled.\n+   * @param backupInfo the backup to create. The instance, database and expireTime fields of the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTgwMjk2Nw=="}, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc2MzEwNjE2OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/encryption/EncryptionConfigProtoMapperTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QwODozMDo0OVrOI4NDLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QxMDozNToxM1rOI4Slng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTgwNDk3NQ==", "bodyText": "nit: This line can be removed", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595804975", "createdAt": "2021-03-17T08:30:49Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/encryption/EncryptionConfigProtoMapperTest.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2021 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.spanner.encryption;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import com.google.spanner.admin.database.v1.CreateBackupEncryptionConfig;\n+import com.google.spanner.admin.database.v1.EncryptionConfig;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig;\n+import org.junit.Test;\n+\n+/** Unit tests for {@link com.google.cloud.spanner.encryption.EncryptionConfigProtoMapper} */\n+public class EncryptionConfigProtoMapperTest {\n+\n+  public static final String KMS_KEY_NAME = \"kms-key-name\";\n+\n+  @Test\n+  public void testEncryptionConfig() {\n+    final EncryptionConfig expected =\n+        EncryptionConfig.newBuilder().setKmsKeyName(KMS_KEY_NAME).build();\n+\n+    final EncryptionConfig actual =\n+        EncryptionConfigProtoMapper.encryptionConfig(new CustomerManagedEncryption(KMS_KEY_NAME));\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test\n+  public void testCreateBackupConfigCustomerManagedEncryption() {\n+    final CreateBackupEncryptionConfig expected =\n+        CreateBackupEncryptionConfig.newBuilder()\n+            .setEncryptionType(\n+                CreateBackupEncryptionConfig.EncryptionType.CUSTOMER_MANAGED_ENCRYPTION)\n+            .setKmsKeyName(KMS_KEY_NAME)\n+            .build();\n+\n+    final CreateBackupEncryptionConfig actual =\n+        EncryptionConfigProtoMapper.createBackupEncryptionConfig(\n+            new CustomerManagedEncryption(KMS_KEY_NAME));\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test\n+  public void testCreateBackupConfigGoogleDefaultEncryption() {\n+    final CreateBackupEncryptionConfig expected =\n+        CreateBackupEncryptionConfig.newBuilder()\n+            .setEncryptionType(\n+                CreateBackupEncryptionConfig.EncryptionType.GOOGLE_DEFAULT_ENCRYPTION)\n+            .build();\n+\n+    final CreateBackupEncryptionConfig actual =\n+        EncryptionConfigProtoMapper.createBackupEncryptionConfig(GoogleDefaultEncryption.INSTANCE);\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test\n+  public void testCreateBackupConfigUseDatabaseEncryption() {\n+    final CreateBackupEncryptionConfig expected =\n+        CreateBackupEncryptionConfig.newBuilder()\n+            .setEncryptionType(CreateBackupEncryptionConfig.EncryptionType.USE_DATABASE_ENCRYPTION)\n+            .build();\n+\n+    final CreateBackupEncryptionConfig actual =\n+        EncryptionConfigProtoMapper.createBackupEncryptionConfig(UseDatabaseEncryption.INSTANCE);\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testCreateBackupInvalidEncryption() {\n+    EncryptionConfigProtoMapper.createBackupEncryptionConfig(null);\n+    fail(\"Create backup encryption config with invalid encryption should fail\");\n+  }\n+\n+  @Test\n+  public void testRestoreDatabaseConfigCustomerManagedEncryption() {\n+    final RestoreDatabaseEncryptionConfig expected =\n+        RestoreDatabaseEncryptionConfig.newBuilder()\n+            .setEncryptionType(\n+                RestoreDatabaseEncryptionConfig.EncryptionType.CUSTOMER_MANAGED_ENCRYPTION)\n+            .setKmsKeyName(KMS_KEY_NAME)\n+            .build();\n+\n+    final RestoreDatabaseEncryptionConfig actual =\n+        EncryptionConfigProtoMapper.restoreDatabaseEncryptionConfig(\n+            new CustomerManagedEncryption(KMS_KEY_NAME));\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test\n+  public void testRestoreDatabaseConfigGoogleDefaultEncryption() {\n+    final RestoreDatabaseEncryptionConfig expected =\n+        RestoreDatabaseEncryptionConfig.newBuilder()\n+            .setEncryptionType(\n+                RestoreDatabaseEncryptionConfig.EncryptionType.GOOGLE_DEFAULT_ENCRYPTION)\n+            .build();\n+\n+    final RestoreDatabaseEncryptionConfig actual =\n+        EncryptionConfigProtoMapper.restoreDatabaseEncryptionConfig(\n+            GoogleDefaultEncryption.INSTANCE);\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test\n+  public void testRestoreDatabaseConfigUseBackupEncryption() {\n+    final RestoreDatabaseEncryptionConfig expected =\n+        RestoreDatabaseEncryptionConfig.newBuilder()\n+            .setEncryptionType(\n+                RestoreDatabaseEncryptionConfig.EncryptionType\n+                    .USE_CONFIG_DEFAULT_OR_BACKUP_ENCRYPTION)\n+            .build();\n+\n+    final RestoreDatabaseEncryptionConfig actual =\n+        EncryptionConfigProtoMapper.restoreDatabaseEncryptionConfig(UseBackupEncryption.INSTANCE);\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testRestoreDatabaseConfigInvalidEncryption() {\n+    EncryptionConfigProtoMapper.restoreDatabaseEncryptionConfig(null);\n+    fail(\"Restore database encryption config with invalid encryption should fail\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTg5NTcxMA==", "bodyText": "Removed.", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595895710", "createdAt": "2021-03-17T10:35:13Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/encryption/EncryptionConfigProtoMapperTest.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2021 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.spanner.encryption;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import com.google.spanner.admin.database.v1.CreateBackupEncryptionConfig;\n+import com.google.spanner.admin.database.v1.EncryptionConfig;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig;\n+import org.junit.Test;\n+\n+/** Unit tests for {@link com.google.cloud.spanner.encryption.EncryptionConfigProtoMapper} */\n+public class EncryptionConfigProtoMapperTest {\n+\n+  public static final String KMS_KEY_NAME = \"kms-key-name\";\n+\n+  @Test\n+  public void testEncryptionConfig() {\n+    final EncryptionConfig expected =\n+        EncryptionConfig.newBuilder().setKmsKeyName(KMS_KEY_NAME).build();\n+\n+    final EncryptionConfig actual =\n+        EncryptionConfigProtoMapper.encryptionConfig(new CustomerManagedEncryption(KMS_KEY_NAME));\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test\n+  public void testCreateBackupConfigCustomerManagedEncryption() {\n+    final CreateBackupEncryptionConfig expected =\n+        CreateBackupEncryptionConfig.newBuilder()\n+            .setEncryptionType(\n+                CreateBackupEncryptionConfig.EncryptionType.CUSTOMER_MANAGED_ENCRYPTION)\n+            .setKmsKeyName(KMS_KEY_NAME)\n+            .build();\n+\n+    final CreateBackupEncryptionConfig actual =\n+        EncryptionConfigProtoMapper.createBackupEncryptionConfig(\n+            new CustomerManagedEncryption(KMS_KEY_NAME));\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test\n+  public void testCreateBackupConfigGoogleDefaultEncryption() {\n+    final CreateBackupEncryptionConfig expected =\n+        CreateBackupEncryptionConfig.newBuilder()\n+            .setEncryptionType(\n+                CreateBackupEncryptionConfig.EncryptionType.GOOGLE_DEFAULT_ENCRYPTION)\n+            .build();\n+\n+    final CreateBackupEncryptionConfig actual =\n+        EncryptionConfigProtoMapper.createBackupEncryptionConfig(GoogleDefaultEncryption.INSTANCE);\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test\n+  public void testCreateBackupConfigUseDatabaseEncryption() {\n+    final CreateBackupEncryptionConfig expected =\n+        CreateBackupEncryptionConfig.newBuilder()\n+            .setEncryptionType(CreateBackupEncryptionConfig.EncryptionType.USE_DATABASE_ENCRYPTION)\n+            .build();\n+\n+    final CreateBackupEncryptionConfig actual =\n+        EncryptionConfigProtoMapper.createBackupEncryptionConfig(UseDatabaseEncryption.INSTANCE);\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testCreateBackupInvalidEncryption() {\n+    EncryptionConfigProtoMapper.createBackupEncryptionConfig(null);\n+    fail(\"Create backup encryption config with invalid encryption should fail\");\n+  }\n+\n+  @Test\n+  public void testRestoreDatabaseConfigCustomerManagedEncryption() {\n+    final RestoreDatabaseEncryptionConfig expected =\n+        RestoreDatabaseEncryptionConfig.newBuilder()\n+            .setEncryptionType(\n+                RestoreDatabaseEncryptionConfig.EncryptionType.CUSTOMER_MANAGED_ENCRYPTION)\n+            .setKmsKeyName(KMS_KEY_NAME)\n+            .build();\n+\n+    final RestoreDatabaseEncryptionConfig actual =\n+        EncryptionConfigProtoMapper.restoreDatabaseEncryptionConfig(\n+            new CustomerManagedEncryption(KMS_KEY_NAME));\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test\n+  public void testRestoreDatabaseConfigGoogleDefaultEncryption() {\n+    final RestoreDatabaseEncryptionConfig expected =\n+        RestoreDatabaseEncryptionConfig.newBuilder()\n+            .setEncryptionType(\n+                RestoreDatabaseEncryptionConfig.EncryptionType.GOOGLE_DEFAULT_ENCRYPTION)\n+            .build();\n+\n+    final RestoreDatabaseEncryptionConfig actual =\n+        EncryptionConfigProtoMapper.restoreDatabaseEncryptionConfig(\n+            GoogleDefaultEncryption.INSTANCE);\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test\n+  public void testRestoreDatabaseConfigUseBackupEncryption() {\n+    final RestoreDatabaseEncryptionConfig expected =\n+        RestoreDatabaseEncryptionConfig.newBuilder()\n+            .setEncryptionType(\n+                RestoreDatabaseEncryptionConfig.EncryptionType\n+                    .USE_CONFIG_DEFAULT_OR_BACKUP_ENCRYPTION)\n+            .build();\n+\n+    final RestoreDatabaseEncryptionConfig actual =\n+        EncryptionConfigProtoMapper.restoreDatabaseEncryptionConfig(UseBackupEncryption.INSTANCE);\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testRestoreDatabaseConfigInvalidEncryption() {\n+    EncryptionConfigProtoMapper.restoreDatabaseEncryptionConfig(null);\n+    fail(\"Restore database encryption config with invalid encryption should fail\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTgwNDk3NQ=="}, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc2MzEwNzA0OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/encryption/EncryptionConfigProtoMapperTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QwODozMTowMlrOI4NDsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QxMDozNToxOVrOI4Sl5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTgwNTEwNg==", "bodyText": "nit: This line can be removed", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595805106", "createdAt": "2021-03-17T08:31:02Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/encryption/EncryptionConfigProtoMapperTest.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2021 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.spanner.encryption;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import com.google.spanner.admin.database.v1.CreateBackupEncryptionConfig;\n+import com.google.spanner.admin.database.v1.EncryptionConfig;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig;\n+import org.junit.Test;\n+\n+/** Unit tests for {@link com.google.cloud.spanner.encryption.EncryptionConfigProtoMapper} */\n+public class EncryptionConfigProtoMapperTest {\n+\n+  public static final String KMS_KEY_NAME = \"kms-key-name\";\n+\n+  @Test\n+  public void testEncryptionConfig() {\n+    final EncryptionConfig expected =\n+        EncryptionConfig.newBuilder().setKmsKeyName(KMS_KEY_NAME).build();\n+\n+    final EncryptionConfig actual =\n+        EncryptionConfigProtoMapper.encryptionConfig(new CustomerManagedEncryption(KMS_KEY_NAME));\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test\n+  public void testCreateBackupConfigCustomerManagedEncryption() {\n+    final CreateBackupEncryptionConfig expected =\n+        CreateBackupEncryptionConfig.newBuilder()\n+            .setEncryptionType(\n+                CreateBackupEncryptionConfig.EncryptionType.CUSTOMER_MANAGED_ENCRYPTION)\n+            .setKmsKeyName(KMS_KEY_NAME)\n+            .build();\n+\n+    final CreateBackupEncryptionConfig actual =\n+        EncryptionConfigProtoMapper.createBackupEncryptionConfig(\n+            new CustomerManagedEncryption(KMS_KEY_NAME));\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test\n+  public void testCreateBackupConfigGoogleDefaultEncryption() {\n+    final CreateBackupEncryptionConfig expected =\n+        CreateBackupEncryptionConfig.newBuilder()\n+            .setEncryptionType(\n+                CreateBackupEncryptionConfig.EncryptionType.GOOGLE_DEFAULT_ENCRYPTION)\n+            .build();\n+\n+    final CreateBackupEncryptionConfig actual =\n+        EncryptionConfigProtoMapper.createBackupEncryptionConfig(GoogleDefaultEncryption.INSTANCE);\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test\n+  public void testCreateBackupConfigUseDatabaseEncryption() {\n+    final CreateBackupEncryptionConfig expected =\n+        CreateBackupEncryptionConfig.newBuilder()\n+            .setEncryptionType(CreateBackupEncryptionConfig.EncryptionType.USE_DATABASE_ENCRYPTION)\n+            .build();\n+\n+    final CreateBackupEncryptionConfig actual =\n+        EncryptionConfigProtoMapper.createBackupEncryptionConfig(UseDatabaseEncryption.INSTANCE);\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testCreateBackupInvalidEncryption() {\n+    EncryptionConfigProtoMapper.createBackupEncryptionConfig(null);\n+    fail(\"Create backup encryption config with invalid encryption should fail\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTg5NTc4Mw==", "bodyText": "Removed.", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595895783", "createdAt": "2021-03-17T10:35:19Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/encryption/EncryptionConfigProtoMapperTest.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2021 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.spanner.encryption;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import com.google.spanner.admin.database.v1.CreateBackupEncryptionConfig;\n+import com.google.spanner.admin.database.v1.EncryptionConfig;\n+import com.google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig;\n+import org.junit.Test;\n+\n+/** Unit tests for {@link com.google.cloud.spanner.encryption.EncryptionConfigProtoMapper} */\n+public class EncryptionConfigProtoMapperTest {\n+\n+  public static final String KMS_KEY_NAME = \"kms-key-name\";\n+\n+  @Test\n+  public void testEncryptionConfig() {\n+    final EncryptionConfig expected =\n+        EncryptionConfig.newBuilder().setKmsKeyName(KMS_KEY_NAME).build();\n+\n+    final EncryptionConfig actual =\n+        EncryptionConfigProtoMapper.encryptionConfig(new CustomerManagedEncryption(KMS_KEY_NAME));\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test\n+  public void testCreateBackupConfigCustomerManagedEncryption() {\n+    final CreateBackupEncryptionConfig expected =\n+        CreateBackupEncryptionConfig.newBuilder()\n+            .setEncryptionType(\n+                CreateBackupEncryptionConfig.EncryptionType.CUSTOMER_MANAGED_ENCRYPTION)\n+            .setKmsKeyName(KMS_KEY_NAME)\n+            .build();\n+\n+    final CreateBackupEncryptionConfig actual =\n+        EncryptionConfigProtoMapper.createBackupEncryptionConfig(\n+            new CustomerManagedEncryption(KMS_KEY_NAME));\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test\n+  public void testCreateBackupConfigGoogleDefaultEncryption() {\n+    final CreateBackupEncryptionConfig expected =\n+        CreateBackupEncryptionConfig.newBuilder()\n+            .setEncryptionType(\n+                CreateBackupEncryptionConfig.EncryptionType.GOOGLE_DEFAULT_ENCRYPTION)\n+            .build();\n+\n+    final CreateBackupEncryptionConfig actual =\n+        EncryptionConfigProtoMapper.createBackupEncryptionConfig(GoogleDefaultEncryption.INSTANCE);\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test\n+  public void testCreateBackupConfigUseDatabaseEncryption() {\n+    final CreateBackupEncryptionConfig expected =\n+        CreateBackupEncryptionConfig.newBuilder()\n+            .setEncryptionType(CreateBackupEncryptionConfig.EncryptionType.USE_DATABASE_ENCRYPTION)\n+            .build();\n+\n+    final CreateBackupEncryptionConfig actual =\n+        EncryptionConfigProtoMapper.createBackupEncryptionConfig(UseDatabaseEncryption.INSTANCE);\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testCreateBackupInvalidEncryption() {\n+    EncryptionConfigProtoMapper.createBackupEncryptionConfig(null);\n+    fail(\"Create backup encryption config with invalid encryption should fail\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTgwNTEwNg=="}, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc2MzEwOTAxOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/encryption/EncryptionConfigsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QwODozMToyN1rOI4NE1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xN1QxMDozNToyNVrOI4SmPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTgwNTM5Nw==", "bodyText": "nit: This line can be removed", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595805397", "createdAt": "2021-03-17T08:31:27Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/encryption/EncryptionConfigsTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2021 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.spanner.encryption;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n+\n+/** Unit tests for {@link EncryptionConfigs} */\n+public class EncryptionConfigsTest {\n+\n+  @Test\n+  public void testCustomerManagedEncryption() {\n+    final CustomerManagedEncryption expected = new CustomerManagedEncryption(\"kms-key-name\");\n+\n+    final CustomerManagedEncryption actual =\n+        EncryptionConfigs.customerManagedEncryption(\"kms-key-name\");\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testCustomerManagedEncryptionNullKeyName() {\n+    EncryptionConfigs.customerManagedEncryption(null);\n+    fail(\"Customer managed encryption with null key should fail\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTg5NTg3MA==", "bodyText": "Removed.", "url": "https://github.com/googleapis/java-spanner/pull/666#discussion_r595895870", "createdAt": "2021-03-17T10:35:25Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/encryption/EncryptionConfigsTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2021 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.cloud.spanner.encryption;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n+\n+/** Unit tests for {@link EncryptionConfigs} */\n+public class EncryptionConfigsTest {\n+\n+  @Test\n+  public void testCustomerManagedEncryption() {\n+    final CustomerManagedEncryption expected = new CustomerManagedEncryption(\"kms-key-name\");\n+\n+    final CustomerManagedEncryption actual =\n+        EncryptionConfigs.customerManagedEncryption(\"kms-key-name\");\n+\n+    assertEquals(expected, actual);\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testCustomerManagedEncryptionNullKeyName() {\n+    EncryptionConfigs.customerManagedEncryption(null);\n+    fail(\"Customer managed encryption with null key should fail\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTgwNTM5Nw=="}, "originalCommit": {"oid": "d78baf32c654d61d767d2ed168d42d591add4f47"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3258, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}