{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1OTQyMzQ0", "number": 423, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMzozNjozOFrOEi83pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMzozNjozOFrOEi83pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDg0MzI0OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractLazyInitializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwMzozNjozOFrOHRC0pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNDozMDo1NVrOHRDhpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYzNDA4NA==", "bodyText": "Could we use composition instead of inheritance (pass in the initialiser function instead of overriding it)?", "url": "https://github.com/googleapis/java-spanner/pull/423#discussion_r487634084", "createdAt": "2020-09-14T03:36:38Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractLazyInitializer.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner;\n+\n+/**\n+ * Generic {@link AbstractLazyInitializer} for any heavy-weight object that might throw an exception\n+ * during initialization. The underlying object is initialized at most once.\n+ */\n+public abstract class AbstractLazyInitializer<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be9ddd1b62104527f3b7bb5cc9c4a53889a8fb8d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY0NTYwNQ==", "bodyText": "That would be possible, but as we have to support Java 7, that would mean that we would have to use com.google.cloud.base.Function in the public interface. I think that it is more idiomatic to use inheritance than composition for Java 7 (once we drop Java 7 support, I would agree that using composition would be a lot nicer in this case).", "url": "https://github.com/googleapis/java-spanner/pull/423#discussion_r487645605", "createdAt": "2020-09-14T04:30:55Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/AbstractLazyInitializer.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner;\n+\n+/**\n+ * Generic {@link AbstractLazyInitializer} for any heavy-weight object that might throw an exception\n+ * during initialization. The underlying object is initialized at most once.\n+ */\n+public abstract class AbstractLazyInitializer<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYzNDA4NA=="}, "originalCommit": {"oid": "be9ddd1b62104527f3b7bb5cc9c4a53889a8fb8d"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3327, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}