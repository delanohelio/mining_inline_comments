{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzOTQ1MjI3", "number": 360, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMToyMjo0NlrOEQbXfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMzozMzo1MFrOERr5Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjYxMDUzOnYy", "diffSide": "LEFT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/PartitionedDMLTransaction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMToyMjo0NlrOG0ktIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMToyMjo0NlrOG0ktIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc4MDUxNA==", "bodyText": "This method was just moved down (after the public methods).", "url": "https://github.com/googleapis/java-spanner/pull/360#discussion_r457780514", "createdAt": "2020-07-21T01:22:46Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/PartitionedDMLTransaction.java", "diffHunk": "@@ -55,23 +56,6 @@\n     this.rpc = rpc;\n   }\n \n-  private ByteString initTransaction() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a1d6902c3ea7b2751d70b0c83e6d0f6793b5451"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjYxMTIxOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/PartitionedDMLTransaction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMToyMzowNlrOG0kthw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMToyMzowNlrOG0kthw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc4MDYxNQ==", "bodyText": "In this catch block we retry on EOS exception.", "url": "https://github.com/googleapis/java-spanner/pull/360#discussion_r457780615", "createdAt": "2020-07-21T01:23:06Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/PartitionedDMLTransaction.java", "diffHunk": "@@ -127,20 +111,24 @@ long executeStreamingPartitionedUpdate(final Statement statement, final Duration\n                 }\n               }\n               break;\n-            } catch (UnavailableException e) {\n+            } catch (UnavailableException | InternalException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a1d6902c3ea7b2751d70b0c83e6d0f6793b5451"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjYxMzA2OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/PartitionedDMLTransaction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMToyNDowOFrOG0kunQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNDo1ODo1NVrOG1SunA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc4MDg5Mw==", "bodyText": "This is hacky, but unfortunately we do not get a specific exception for this error, so we have to proxy through the exception message. This follows the approach taken in the bigquery client: https://github.com/googleapis/java-bigquerystorage/pull/263/files.", "url": "https://github.com/googleapis/java-spanner/pull/360#discussion_r457780893", "createdAt": "2020-07-21T01:24:08Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/PartitionedDMLTransaction.java", "diffHunk": "@@ -174,4 +162,27 @@ public void invalidate() {\n   // No-op method needed to implement SessionTransaction interface.\n   @Override\n   public void setSpan(Span span) {}\n+\n+  private ByteString initTransaction() {\n+    final BeginTransactionRequest request =\n+        BeginTransactionRequest.newBuilder()\n+            .setSession(session.getName())\n+            .setOptions(\n+                TransactionOptions.newBuilder()\n+                    .setPartitionedDml(TransactionOptions.PartitionedDml.getDefaultInstance()))\n+            .build();\n+    Transaction txn = rpc.beginTransaction(request, session.getOptions());\n+    if (txn.getId().isEmpty()) {\n+      throw SpannerExceptionFactory.newSpannerException(\n+          ErrorCode.INTERNAL,\n+          \"Failed to init transaction, missing transaction id\\n\" + session.getName());\n+    }\n+    return txn.getId();\n+  }\n+\n+  private boolean shouldResumeOrRestartTransaction(Exception e) {\n+    return e instanceof UnavailableException\n+        || (e instanceof InternalException\n+            && e.getMessage().contains(\"Received unexpected EOS on DATA frame from server\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a1d6902c3ea7b2751d70b0c83e6d0f6793b5451"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzNDU1Ng==", "bodyText": "The same error is also retried for streaming queries, and this check could probably use the existing check in SpannerExceptionFactory: \n  \n    \n      java-spanner/google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerExceptionFactory.java\n    \n    \n         Line 233\n      in\n      b264100\n    \n    \n    \n    \n\n        \n          \n           private static boolean isRetryable(ErrorCode code, @Nullable Throwable cause) { \n        \n    \n  \n\n. It's still just as hacky, but it would keep it confined to one method.", "url": "https://github.com/googleapis/java-spanner/pull/360#discussion_r458534556", "createdAt": "2020-07-22T04:58:55Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/PartitionedDMLTransaction.java", "diffHunk": "@@ -174,4 +162,27 @@ public void invalidate() {\n   // No-op method needed to implement SessionTransaction interface.\n   @Override\n   public void setSpan(Span span) {}\n+\n+  private ByteString initTransaction() {\n+    final BeginTransactionRequest request =\n+        BeginTransactionRequest.newBuilder()\n+            .setSession(session.getName())\n+            .setOptions(\n+                TransactionOptions.newBuilder()\n+                    .setPartitionedDml(TransactionOptions.PartitionedDml.getDefaultInstance()))\n+            .build();\n+    Transaction txn = rpc.beginTransaction(request, session.getOptions());\n+    if (txn.getId().isEmpty()) {\n+      throw SpannerExceptionFactory.newSpannerException(\n+          ErrorCode.INTERNAL,\n+          \"Failed to init transaction, missing transaction id\\n\" + session.getName());\n+    }\n+    return txn.getId();\n+  }\n+\n+  private boolean shouldResumeOrRestartTransaction(Exception e) {\n+    return e instanceof UnavailableException\n+        || (e instanceof InternalException\n+            && e.getMessage().contains(\"Received unexpected EOS on DATA frame from server\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc4MDg5Mw=="}, "originalCommit": {"oid": "8a1d6902c3ea7b2751d70b0c83e6d0f6793b5451"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjAzNTE4OnYy", "diffSide": "LEFT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerExceptionFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNjo1ODoyMlrOG1-VrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNjo1ODoyMlrOG1-VrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0OTA2OA==", "bodyText": "I extracted these predicates into their own classes that are now exposed to the PartitionedDmlTransaction. This was the cleanest / lowest impact way I could find to de-duplicate the EOS retryable logic.", "url": "https://github.com/googleapis/java-spanner/pull/360#discussion_r459249068", "createdAt": "2020-07-23T06:58:22Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerExceptionFactory.java", "diffHunk": "@@ -257,35 +256,8 @@ private static boolean hasCauseMatching(\n   }\n \n   private static class Matchers {\n-    static final Predicate<Throwable> isRetryableInternalError =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1450589f590dff2511ebe0d309e142019443fdb"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTgwNDQyOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/IsRetryableInternalError.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMzozMzo1MFrOG2iNhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNDozMjo0MVrOG2i2Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgzNjgwNA==", "bodyText": "Here and below, if we could remove the references to internal issues that would be great. I don't know why they were there before. Folks working on this repo are unlikely to have access to those so no point exposing them.", "url": "https://github.com/googleapis/java-spanner/pull/360#discussion_r459836804", "createdAt": "2020-07-24T03:33:50Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/IsRetryableInternalError.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner;\n+\n+import com.google.api.gax.rpc.InternalException;\n+import com.google.common.base.Predicate;\n+import io.grpc.Status;\n+import io.grpc.StatusRuntimeException;\n+\n+public class IsRetryableInternalError implements Predicate<Throwable> {\n+\n+  private static final String HTTP2_ERROR_MESSAGE = \"HTTP/2 error code: INTERNAL_ERROR\";\n+  private static final String CONNECTION_CLOSED_ERROR_MESSAGE =\n+      \"Connection closed with unknown cause\";\n+  private static final String EOS_ERROR_MESSAGE =\n+      \"Received unexpected EOS on DATA frame from server\";\n+\n+  @Override\n+  public boolean apply(Throwable cause) {\n+    if (isInternalError(cause)) {\n+      if (cause.getMessage().contains(HTTP2_ERROR_MESSAGE)) {\n+        // See b/25451313.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ff90921cfdffd2f59f6011deef97c60c23365a5"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg0NzI1NA==", "bodyText": "No worries, will tackle this in a following PR.", "url": "https://github.com/googleapis/java-spanner/pull/360#discussion_r459847254", "createdAt": "2020-07-24T04:32:41Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/IsRetryableInternalError.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner;\n+\n+import com.google.api.gax.rpc.InternalException;\n+import com.google.common.base.Predicate;\n+import io.grpc.Status;\n+import io.grpc.StatusRuntimeException;\n+\n+public class IsRetryableInternalError implements Predicate<Throwable> {\n+\n+  private static final String HTTP2_ERROR_MESSAGE = \"HTTP/2 error code: INTERNAL_ERROR\";\n+  private static final String CONNECTION_CLOSED_ERROR_MESSAGE =\n+      \"Connection closed with unknown cause\";\n+  private static final String EOS_ERROR_MESSAGE =\n+      \"Received unexpected EOS on DATA frame from server\";\n+\n+  @Override\n+  public boolean apply(Throwable cause) {\n+    if (isInternalError(cause)) {\n+      if (cause.getMessage().contains(HTTP2_ERROR_MESSAGE)) {\n+        // See b/25451313.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgzNjgwNA=="}, "originalCommit": {"oid": "1ff90921cfdffd2f59f6011deef97c60c23365a5"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3153, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}