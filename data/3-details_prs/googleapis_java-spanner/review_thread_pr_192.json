{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzOTkzMzcx", "number": 192, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMzo1Nzo1MFrOD8RtyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMToyNjo0M1rOEHx90w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTMxNDAxOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITSpannerOptionsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMzo1Nzo1MFrOGVHh_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMDoxNjo1MVrOGVH2vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc5NjY2OQ==", "bodyText": "Would it be possible to test an end to end compression and verify that the compressor is actually used.", "url": "https://github.com/googleapis/java-spanner/pull/192#discussion_r424796669", "createdAt": "2020-05-13T23:57:50Z", "author": {"login": "rven1"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITSpannerOptionsTest.java", "diffHunk": "@@ -168,6 +168,27 @@ public void testMultipleSpannersFromSameSpannerOptions() throws InterruptedExcep\n     assertThat(getNumberOfThreadsWithName(SPANNER_THREAD_NAME)).isAtMost(baseThreadCount);\n   }\n \n+  @Test\n+  public void testCompression() {\n+    for (String compressorName : new String[] {\"gzip\", \"identity\", null}) {\n+      SpannerOptions options =\n+          env.getTestHelper().getOptions().toBuilder().setCompressorName(compressorName).build();\n+      try (Spanner spanner = options.getService()) {\n+        DatabaseClient client = spanner.getDatabaseClient(db.getId());\n+        try (ResultSet rs =\n+            client\n+                .singleUse()\n+                .executeQuery(Statement.of(\"SELECT 1 AS COL1 UNION ALL SELECT 2 AS COL2\"))) {\n+          assertThat(rs.next()).isTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b8a82e7ba9904e6d169ff90a1f166b76f9d49ba"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgwMTk4Mw==", "bodyText": "Yes absolutely. Once the support is in the staging environment, we can run this IT against it to test the change. @olavloite I'll give you a heads up when the feature is available in staging.", "url": "https://github.com/googleapis/java-spanner/pull/192#discussion_r424801983", "createdAt": "2020-05-14T00:16:51Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITSpannerOptionsTest.java", "diffHunk": "@@ -168,6 +168,27 @@ public void testMultipleSpannersFromSameSpannerOptions() throws InterruptedExcep\n     assertThat(getNumberOfThreadsWithName(SPANNER_THREAD_NAME)).isAtMost(baseThreadCount);\n   }\n \n+  @Test\n+  public void testCompression() {\n+    for (String compressorName : new String[] {\"gzip\", \"identity\", null}) {\n+      SpannerOptions options =\n+          env.getTestHelper().getOptions().toBuilder().setCompressorName(compressorName).build();\n+      try (Spanner spanner = options.getService()) {\n+        DatabaseClient client = spanner.getDatabaseClient(db.getId());\n+        try (ResultSet rs =\n+            client\n+                .singleUse()\n+                .executeQuery(Statement.of(\"SELECT 1 AS COL1 UNION ALL SELECT 2 AS COL2\"))) {\n+          assertThat(rs.next()).isTrue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc5NjY2OQ=="}, "originalCommit": {"oid": "8b8a82e7ba9904e6d169ff90a1f166b76f9d49ba"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTk0MTMxOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMToyNjo0M1rOGnWIDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNjo0OTowOFrOGnbfJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkxMDE1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *   <li><code>null</code>: Use default comporession\n          \n          \n            \n                 *   <li><code>null</code>: Use default compression", "url": "https://github.com/googleapis/java-spanner/pull/192#discussion_r443910158", "createdAt": "2020-06-23T01:26:43Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerOptions.java", "diffHunk": "@@ -558,6 +565,28 @@ public Builder setCallCredentialsProvider(CallCredentialsProvider callCredential\n       return this;\n     }\n \n+    /**\n+     * Sets the compression to use for all gRPC calls. The compressor must be a valid name known in\n+     * the {@link CompressorRegistry}.\n+     *\n+     * <p>Supported values are:\n+     *\n+     * <ul>\n+     *   <li>gzip: Enable gzip compression\n+     *   <li>identity: Disable compression\n+     *   <li><code>null</code>: Use default comporession", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e51823f54bb84ccc14736773e7023495ccc514"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk5Nzk5MA==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/192#discussion_r443997990", "createdAt": "2020-06-23T06:49:08Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerOptions.java", "diffHunk": "@@ -558,6 +565,28 @@ public Builder setCallCredentialsProvider(CallCredentialsProvider callCredential\n       return this;\n     }\n \n+    /**\n+     * Sets the compression to use for all gRPC calls. The compressor must be a valid name known in\n+     * the {@link CompressorRegistry}.\n+     *\n+     * <p>Supported values are:\n+     *\n+     * <ul>\n+     *   <li>gzip: Enable gzip compression\n+     *   <li>identity: Disable compression\n+     *   <li><code>null</code>: Use default comporession", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkxMDE1OA=="}, "originalCommit": {"oid": "28e51823f54bb84ccc14736773e7023495ccc514"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3179, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}