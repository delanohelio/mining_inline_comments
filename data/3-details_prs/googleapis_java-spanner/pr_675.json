{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5ODQ4OTkz", "number": 675, "title": "chore: add DirectPath fallback integration test", "bodyText": "Add a DirectPath fallback test for spanner. The test is basically the same as what we have for bigtable (https://github.com/googleapis/java-bigtable/blob/master/google-cloud-bigtable/src/test/java/com/google/cloud/bigtable/data/v2/it/DirectPathFallbackIT.java). The logic of the test is:\n\nFirst wait until DirectPath traffic is observed;\nBlackhole DirectPath ipv4 and ipv6 IP, and wait until the client fallback to use CFE;\nUnblackhole DirectPath ipv4 and ipv6 traffic, and the client should upgrade back to use DirectPath again.\n\nThe DirectPath and CFE traffic are distinguished by peer IP.", "createdAt": "2020-11-30T22:28:47Z", "url": "https://github.com/googleapis/java-spanner/pull/675", "merged": true, "mergeCommit": {"oid": "789dcdeaa065ac4e998eb72722454e6dc86eedc5"}, "closed": true, "closedAt": "2020-12-02T22:54:33Z", "author": {"login": "mohanli-ml"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdhtHhmgFqTU0MTM0NzYyNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdms9SDgFqTU1MzU4MTIxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMzQ3NjI1", "url": "https://github.com/googleapis/java-spanner/pull/675#pullrequestreview-541347625", "createdAt": "2020-11-30T22:30:41Z", "commit": {"oid": "143ea64d5c73443bc316a1b33e749d1770819715"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjozMDo0MVrOH8QcDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMjozMDo0MVrOH8QcEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk0NTkzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static com.google.common.truth.Truth.assertThat;\n          \n          \n            \n            import static com.google.common.truth.Truth.assertWithMessage;\n          \n          \n            \n            import static com.google.common.truth.Truth.assertWithMessage;", "url": "https://github.com/googleapis/java-spanner/pull/675#discussion_r532945934", "createdAt": "2020-11-30T22:30:41Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITDirectPathFallback.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*\n+ * Copyright 2017 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth.assertWithMessage;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "143ea64d5c73443bc316a1b33e749d1770819715"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk0NTkzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import com.google.cloud.spanner.SpannerOptions;\n          \n          \n            \n            import com.google.cloud.spanner.Struct;\n          \n          \n            \n            import com.google.cloud.spanner.SpannerOptions;", "url": "https://github.com/googleapis/java-spanner/pull/675#discussion_r532945936", "createdAt": "2020-11-30T22:30:41Z", "author": {"login": "yoshi-code-bot"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITDirectPathFallback.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*\n+ * Copyright 2017 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import com.google.api.core.ApiFunction;\n+import com.google.api.gax.core.FixedCredentialsProvider;\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.oauth2.ComputeEngineCredentials;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.Key;\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.Struct;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "143ea64d5c73443bc316a1b33e749d1770819715"}, "originalPosition": 33}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "143ea64d5c73443bc316a1b33e749d1770819715", "author": {"user": {"login": "mohanli-ml", "name": "Mohan Li"}}, "url": "https://github.com/googleapis/java-spanner/commit/143ea64d5c73443bc316a1b33e749d1770819715", "committedDate": "2020-11-30T22:22:39Z", "message": "chore: add DirectPath fallback integration test"}, "afterCommit": {"oid": "9c44cfc4c8228713539552229f4d9432acc07441", "author": {"user": {"login": "mohanli-ml", "name": "Mohan Li"}}, "url": "https://github.com/googleapis/java-spanner/commit/9c44cfc4c8228713539552229f4d9432acc07441", "committedDate": "2020-12-01T00:26:02Z", "message": "chore: add DirectPath fallback integration test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9c44cfc4c8228713539552229f4d9432acc07441", "author": {"user": {"login": "mohanli-ml", "name": "Mohan Li"}}, "url": "https://github.com/googleapis/java-spanner/commit/9c44cfc4c8228713539552229f4d9432acc07441", "committedDate": "2020-12-01T00:26:02Z", "message": "chore: add DirectPath fallback integration test"}, "afterCommit": {"oid": "e04a5a5d3a317fc2ea61a10a973ce454e64f23e7", "author": {"user": {"login": "mohanli-ml", "name": "Mohan Li"}}, "url": "https://github.com/googleapis/java-spanner/commit/e04a5a5d3a317fc2ea61a10a973ce454e64f23e7", "committedDate": "2020-12-01T03:19:16Z", "message": "chore: add DirectPath fallback integration test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMzYzNzM1", "url": "https://github.com/googleapis/java-spanner/pull/675#pullrequestreview-541363735", "createdAt": "2020-11-30T23:01:19Z", "commit": {"oid": "143ea64d5c73443bc316a1b33e749d1770819715"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMzowMToxOVrOH8RQ_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMzowNDowNFrOH8RVKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk1OTQ4NQ==", "bodyText": "Could we print a message / exit the test if something goes wrong here? Also, could we catch only Exception instead of Throwable?", "url": "https://github.com/googleapis/java-spanner/pull/675#discussion_r532959485", "createdAt": "2020-11-30T23:01:19Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITDirectPathFallback.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*\n+ * Copyright 2017 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import com.google.api.core.ApiFunction;\n+import com.google.api.gax.core.FixedCredentialsProvider;\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.oauth2.ComputeEngineCredentials;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.Key;\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.Struct;\n+import com.google.cloud.spanner.TimestampBound;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.common.base.Stopwatch;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.alts.ComputeEngineChannelBuilder;\n+import io.grpc.netty.shaded.io.grpc.netty.NettyChannelBuilder;\n+import io.grpc.netty.shaded.io.netty.channel.ChannelDuplexHandler;\n+import io.grpc.netty.shaded.io.netty.channel.ChannelFactory;\n+import io.grpc.netty.shaded.io.netty.channel.ChannelHandlerContext;\n+import io.grpc.netty.shaded.io.netty.channel.ChannelPromise;\n+import io.grpc.netty.shaded.io.netty.channel.EventLoopGroup;\n+import io.grpc.netty.shaded.io.netty.channel.nio.NioEventLoopGroup;\n+import io.grpc.netty.shaded.io.netty.channel.socket.nio.NioSocketChannel;\n+import io.grpc.netty.shaded.io.netty.util.ReferenceCountUtil;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Test DirectPath fallback behavior by injecting a ChannelHandler into the netty stack that will\n+ * disrupt IPv6 communications.\n+ *\n+ * <p>WARNING: this test can only be run on a GCE VM and will explicitly ignore\n+ * GOOGLE_APPLICATION_CREDENTIALS and use the service account associated with the VM.\n+ */\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITDirectPathFallback {\n+  // A threshold of completed read calls to observe to ascertain IPv6 is working.\n+  // This was determined experimentally to account for both gRPC-LB RPCs and Bigtable api RPCs.\n+  private static final int MIN_COMPLETE_READ_CALLS = 40;\n+  private static final int NUM_RPCS_TO_SEND = 20;\n+\n+  // IP address prefixes allocated for DirectPath backends.\n+  private static final String DP_IPV6_PREFIX = \"2001:4860:8040\";\n+  private static final String DP_IPV4_PREFIX = \"34.126\";\n+\n+  @ClassRule public static IntegrationTestEnv env = new IntegrationTestEnv();\n+\n+  private AtomicBoolean blackholeDpAddr = new AtomicBoolean();\n+  private AtomicInteger numBlocked = new AtomicInteger();\n+  private AtomicInteger numDpAddrRead = new AtomicInteger();\n+  private boolean isDpAddr;\n+\n+  private ChannelFactory<NioSocketChannel> channelFactory;\n+  private EventLoopGroup eventLoopGroup;\n+  private RemoteSpannerHelper testHelper;\n+\n+  private static final String TABLE_NAME = \"TestTable\";\n+  private static final List<String> ALL_COLUMNS = Arrays.asList(\"Key\", \"StringValue\");\n+  private static Database db;\n+  private static DatabaseClient client;\n+\n+  private static final String DIRECT_PATH_ENDPOINT = \"aa423245250f2bbf.sandbox.googleapis.com:443\";\n+\n+  public ITDirectPathFallback() {\n+    // Create a transport channel provider that can intercept ipv6 packets.\n+    channelFactory = new MyChannelFactory();\n+    eventLoopGroup = new NioEventLoopGroup();\n+  }\n+\n+  @Before\n+  public void setup() throws IOException {\n+    // Get default spanner options for Ingetration test\n+    SpannerOptions.Builder builder = env.getTestHelper().getOptions().toBuilder();\n+    // Set instrumented transport provider\n+    builder.setChannelProvider(\n+        InstantiatingGrpcChannelProvider.newBuilder()\n+            .setAttemptDirectPath(true)\n+            .setEndpoint(DIRECT_PATH_ENDPOINT)\n+            .setPoolSize(1)\n+            .setChannelConfigurator(\n+                new ApiFunction<ManagedChannelBuilder, ManagedChannelBuilder>() {\n+                  @Override\n+                  public ManagedChannelBuilder apply(ManagedChannelBuilder builder) {\n+                    injectNettyChannelHandler(builder);\n+                    // Fail fast when blackhole is active\n+                    builder.keepAliveTime(1, TimeUnit.SECONDS);\n+                    builder.keepAliveTimeout(1, TimeUnit.SECONDS);\n+                    return builder;\n+                  }\n+                })\n+            .build());\n+    // Forcefully ignore GOOGLE_APPLICATION_CREDENTIALS\n+    builder.setCredentials(\n+        FixedCredentialsProvider.create(ComputeEngineCredentials.create()).getCredentials());\n+\n+    // Create a new testHelper with the instrumented transport provider\n+    try {\n+      testHelper = RemoteSpannerHelper.create(builder.build(), env.getTestHelper().getInstanceId());\n+    } catch (Throwable t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "143ea64d5c73443bc316a1b33e749d1770819715"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk1OTg5Mg==", "bodyText": "Do we have to wait for 2 minutes for this test? This slows down the whole integration suite when running locally.", "url": "https://github.com/googleapis/java-spanner/pull/675#discussion_r532959892", "createdAt": "2020-11-30T23:02:20Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITDirectPathFallback.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*\n+ * Copyright 2017 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import com.google.api.core.ApiFunction;\n+import com.google.api.gax.core.FixedCredentialsProvider;\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.oauth2.ComputeEngineCredentials;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.Key;\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.Struct;\n+import com.google.cloud.spanner.TimestampBound;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.common.base.Stopwatch;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.alts.ComputeEngineChannelBuilder;\n+import io.grpc.netty.shaded.io.grpc.netty.NettyChannelBuilder;\n+import io.grpc.netty.shaded.io.netty.channel.ChannelDuplexHandler;\n+import io.grpc.netty.shaded.io.netty.channel.ChannelFactory;\n+import io.grpc.netty.shaded.io.netty.channel.ChannelHandlerContext;\n+import io.grpc.netty.shaded.io.netty.channel.ChannelPromise;\n+import io.grpc.netty.shaded.io.netty.channel.EventLoopGroup;\n+import io.grpc.netty.shaded.io.netty.channel.nio.NioEventLoopGroup;\n+import io.grpc.netty.shaded.io.netty.channel.socket.nio.NioSocketChannel;\n+import io.grpc.netty.shaded.io.netty.util.ReferenceCountUtil;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Test DirectPath fallback behavior by injecting a ChannelHandler into the netty stack that will\n+ * disrupt IPv6 communications.\n+ *\n+ * <p>WARNING: this test can only be run on a GCE VM and will explicitly ignore\n+ * GOOGLE_APPLICATION_CREDENTIALS and use the service account associated with the VM.\n+ */\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITDirectPathFallback {\n+  // A threshold of completed read calls to observe to ascertain IPv6 is working.\n+  // This was determined experimentally to account for both gRPC-LB RPCs and Bigtable api RPCs.\n+  private static final int MIN_COMPLETE_READ_CALLS = 40;\n+  private static final int NUM_RPCS_TO_SEND = 20;\n+\n+  // IP address prefixes allocated for DirectPath backends.\n+  private static final String DP_IPV6_PREFIX = \"2001:4860:8040\";\n+  private static final String DP_IPV4_PREFIX = \"34.126\";\n+\n+  @ClassRule public static IntegrationTestEnv env = new IntegrationTestEnv();\n+\n+  private AtomicBoolean blackholeDpAddr = new AtomicBoolean();\n+  private AtomicInteger numBlocked = new AtomicInteger();\n+  private AtomicInteger numDpAddrRead = new AtomicInteger();\n+  private boolean isDpAddr;\n+\n+  private ChannelFactory<NioSocketChannel> channelFactory;\n+  private EventLoopGroup eventLoopGroup;\n+  private RemoteSpannerHelper testHelper;\n+\n+  private static final String TABLE_NAME = \"TestTable\";\n+  private static final List<String> ALL_COLUMNS = Arrays.asList(\"Key\", \"StringValue\");\n+  private static Database db;\n+  private static DatabaseClient client;\n+\n+  private static final String DIRECT_PATH_ENDPOINT = \"aa423245250f2bbf.sandbox.googleapis.com:443\";\n+\n+  public ITDirectPathFallback() {\n+    // Create a transport channel provider that can intercept ipv6 packets.\n+    channelFactory = new MyChannelFactory();\n+    eventLoopGroup = new NioEventLoopGroup();\n+  }\n+\n+  @Before\n+  public void setup() throws IOException {\n+    // Get default spanner options for Ingetration test\n+    SpannerOptions.Builder builder = env.getTestHelper().getOptions().toBuilder();\n+    // Set instrumented transport provider\n+    builder.setChannelProvider(\n+        InstantiatingGrpcChannelProvider.newBuilder()\n+            .setAttemptDirectPath(true)\n+            .setEndpoint(DIRECT_PATH_ENDPOINT)\n+            .setPoolSize(1)\n+            .setChannelConfigurator(\n+                new ApiFunction<ManagedChannelBuilder, ManagedChannelBuilder>() {\n+                  @Override\n+                  public ManagedChannelBuilder apply(ManagedChannelBuilder builder) {\n+                    injectNettyChannelHandler(builder);\n+                    // Fail fast when blackhole is active\n+                    builder.keepAliveTime(1, TimeUnit.SECONDS);\n+                    builder.keepAliveTimeout(1, TimeUnit.SECONDS);\n+                    return builder;\n+                  }\n+                })\n+            .build());\n+    // Forcefully ignore GOOGLE_APPLICATION_CREDENTIALS\n+    builder.setCredentials(\n+        FixedCredentialsProvider.create(ComputeEngineCredentials.create()).getCredentials());\n+\n+    // Create a new testHelper with the instrumented transport provider\n+    try {\n+      testHelper = RemoteSpannerHelper.create(builder.build(), env.getTestHelper().getInstanceId());\n+    } catch (Throwable t) {\n+    }\n+\n+    db =\n+        testHelper.createTestDatabase(\n+            \"CREATE TABLE TestTable (\"\n+                + \"  Key                STRING(MAX) NOT NULL,\"\n+                + \"  StringValue        STRING(MAX),\"\n+                + \") PRIMARY KEY (Key)\",\n+            \"CREATE INDEX TestTableByValue ON TestTable(StringValue)\",\n+            \"CREATE INDEX TestTableByValueDesc ON TestTable(StringValue DESC)\");\n+    client = testHelper.getDatabaseClient(db);\n+    List<Mutation> mutations = new ArrayList<>();\n+    for (int i = 0; i < 3; ++i) {\n+      mutations.add(\n+          Mutation.newInsertOrUpdateBuilder(TABLE_NAME)\n+              .set(\"Key\")\n+              .to(\"k\" + i)\n+              .set(\"StringValue\")\n+              .to(\"v\" + i)\n+              .build());\n+    }\n+    client.write(mutations);\n+  }\n+\n+  @After\n+  public void teardown() {\n+    if (testHelper != null) {\n+      testHelper.cleanUp();\n+      testHelper.getClient().close();\n+    }\n+    if (eventLoopGroup != null) {\n+      eventLoopGroup.shutdownGracefully();\n+    }\n+  }\n+\n+  @Test\n+  public void testFallback() throws InterruptedException, TimeoutException {\n+    // Precondition: wait for DirectPath to connect\n+    assertWithMessage(\"Failed to observe RPCs over DirectPath\").that(exerciseDirectPath()).isTrue();\n+\n+    // Enable the blackhole, which will prevent communication with grpclb and thus DirectPath.\n+    blackholeDpAddr.set(true);\n+\n+    // Send a request, which should be routed over IPv4 and CFE.\n+    client.singleUse(TimestampBound.strong()).readRow(TABLE_NAME, Key.of(\"k0\"), ALL_COLUMNS);\n+\n+    // Verify that the above check was meaningful, by verifying that the blackhole actually dropped\n+    // packets.\n+    assertWithMessage(\"Failed to detect any IPv6 traffic in blackhole\")\n+        .that(numBlocked.get())\n+        .isGreaterThan(0);\n+\n+    // Make sure that the client will start reading from IPv6 again by sending new requests and\n+    // checking the injected IPv6 counter has been updated.\n+    blackholeDpAddr.set(false);\n+\n+    assertWithMessage(\"Failed to upgrade back to DirectPath\").that(exerciseDirectPath()).isTrue();\n+  }\n+\n+  private boolean exerciseDirectPath() throws InterruptedException, TimeoutException {\n+    Stopwatch stopwatch = Stopwatch.createStarted();\n+    numDpAddrRead.set(0);\n+\n+    boolean seenEnough = false;\n+\n+    while (!seenEnough && stopwatch.elapsed(TimeUnit.MINUTES) < 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "143ea64d5c73443bc316a1b33e749d1770819715"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjk2MDU1NA==", "bodyText": "Does this test pass locally? Will be users be able to run these (if not, maybe we should put them under the direct path profile, which is not enabled by default)?", "url": "https://github.com/googleapis/java-spanner/pull/675#discussion_r532960554", "createdAt": "2020-11-30T23:04:04Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITDirectPathFallback.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*\n+ * Copyright 2017 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth.assertWithMessage;\n+\n+import com.google.api.core.ApiFunction;\n+import com.google.api.gax.core.FixedCredentialsProvider;\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.oauth2.ComputeEngineCredentials;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.Key;\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.Struct;\n+import com.google.cloud.spanner.TimestampBound;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.common.base.Stopwatch;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.alts.ComputeEngineChannelBuilder;\n+import io.grpc.netty.shaded.io.grpc.netty.NettyChannelBuilder;\n+import io.grpc.netty.shaded.io.netty.channel.ChannelDuplexHandler;\n+import io.grpc.netty.shaded.io.netty.channel.ChannelFactory;\n+import io.grpc.netty.shaded.io.netty.channel.ChannelHandlerContext;\n+import io.grpc.netty.shaded.io.netty.channel.ChannelPromise;\n+import io.grpc.netty.shaded.io.netty.channel.EventLoopGroup;\n+import io.grpc.netty.shaded.io.netty.channel.nio.NioEventLoopGroup;\n+import io.grpc.netty.shaded.io.netty.channel.socket.nio.NioSocketChannel;\n+import io.grpc.netty.shaded.io.netty.util.ReferenceCountUtil;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Test DirectPath fallback behavior by injecting a ChannelHandler into the netty stack that will\n+ * disrupt IPv6 communications.\n+ *\n+ * <p>WARNING: this test can only be run on a GCE VM and will explicitly ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "143ea64d5c73443bc316a1b33e749d1770819715"}, "originalPosition": 72}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e04a5a5d3a317fc2ea61a10a973ce454e64f23e7", "author": {"user": {"login": "mohanli-ml", "name": "Mohan Li"}}, "url": "https://github.com/googleapis/java-spanner/commit/e04a5a5d3a317fc2ea61a10a973ce454e64f23e7", "committedDate": "2020-12-01T03:19:16Z", "message": "chore: add DirectPath fallback integration test"}, "afterCommit": {"oid": "fc4c71f9c807883ba2ca6abbd9f95cb55c000169", "author": {"user": {"login": "mohanli-ml", "name": "Mohan Li"}}, "url": "https://github.com/googleapis/java-spanner/commit/fc4c71f9c807883ba2ca6abbd9f95cb55c000169", "committedDate": "2020-12-01T06:09:36Z", "message": "chore: add DirectPath fallback integration test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMTc3NzUz", "url": "https://github.com/googleapis/java-spanner/pull/675#pullrequestreview-542177753", "createdAt": "2020-12-01T18:23:22Z", "commit": {"oid": "fc4c71f9c807883ba2ca6abbd9f95cb55c000169"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODoyMzoyMlrOH86Byw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODoyNzoyMVrOH86LkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyNzMzOQ==", "bodyText": "nit: 2020", "url": "https://github.com/googleapis/java-spanner/pull/675#discussion_r533627339", "createdAt": "2020-12-01T18:23:22Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITDirectPathFallback.java", "diffHunk": "@@ -0,0 +1,305 @@\n+/*\n+ * Copyright 2017 Google LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc4c71f9c807883ba2ca6abbd9f95cb55c000169"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyODUzMg==", "bodyText": "I assume that this is temporary and will be replaced by a environment variable or similar at a later moment?", "url": "https://github.com/googleapis/java-spanner/pull/675#discussion_r533628532", "createdAt": "2020-12-01T18:25:15Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITDirectPathFallback.java", "diffHunk": "@@ -0,0 +1,305 @@\n+/*\n+ * Copyright 2017 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+import static com.google.common.truth.TruthJUnit.assume;\n+\n+import com.google.api.core.ApiFunction;\n+import com.google.api.gax.core.FixedCredentialsProvider;\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.oauth2.ComputeEngineCredentials;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.Key;\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.TimestampBound;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.common.base.Stopwatch;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.alts.ComputeEngineChannelBuilder;\n+import io.grpc.netty.shaded.io.grpc.netty.NettyChannelBuilder;\n+import io.grpc.netty.shaded.io.netty.channel.ChannelDuplexHandler;\n+import io.grpc.netty.shaded.io.netty.channel.ChannelFactory;\n+import io.grpc.netty.shaded.io.netty.channel.ChannelHandlerContext;\n+import io.grpc.netty.shaded.io.netty.channel.ChannelPromise;\n+import io.grpc.netty.shaded.io.netty.channel.EventLoopGroup;\n+import io.grpc.netty.shaded.io.netty.channel.nio.NioEventLoopGroup;\n+import io.grpc.netty.shaded.io.netty.channel.socket.nio.NioSocketChannel;\n+import io.grpc.netty.shaded.io.netty.util.ReferenceCountUtil;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Test DirectPath fallback behavior by injecting a ChannelHandler into the netty stack that will\n+ * disrupt IPv6 communications.\n+ *\n+ * <p>WARNING: this test can only be run on a GCE VM and will explicitly ignore\n+ * GOOGLE_APPLICATION_CREDENTIALS and use the service account associated with the VM.\n+ */\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITDirectPathFallback {\n+  // A threshold of completed read calls to observe to ascertain IPv6 is working.\n+  // This was determined experimentally to account for both gRPC-LB RPCs and Bigtable api RPCs.\n+  private static final int MIN_COMPLETE_READ_CALLS = 40;\n+  private static final int NUM_RPCS_TO_SEND = 20;\n+\n+  // IP address prefixes allocated for DirectPath backends.\n+  private static final String DP_IPV6_PREFIX = \"2001:4860:8040\";\n+  private static final String DP_IPV4_PREFIX = \"34.126\";\n+\n+  @ClassRule public static IntegrationTestEnv env = new IntegrationTestEnv();\n+\n+  private AtomicBoolean blackholeDpAddr = new AtomicBoolean();\n+  private AtomicInteger numBlocked = new AtomicInteger();\n+  private AtomicInteger numDpAddrRead = new AtomicInteger();\n+  private boolean isDpAddr;\n+\n+  private ChannelFactory<NioSocketChannel> channelFactory;\n+  private EventLoopGroup eventLoopGroup;\n+  private RemoteSpannerHelper testHelper;\n+\n+  private static final String TABLE_NAME = \"TestTable\";\n+  private static final List<String> ALL_COLUMNS = Arrays.asList(\"Key\", \"StringValue\");\n+  private static Database db;\n+  private static DatabaseClient client;\n+\n+  private static final String DIRECT_PATH_ENDPOINT = \"aa423245250f2bbf.sandbox.googleapis.com:443\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc4c71f9c807883ba2ca6abbd9f95cb55c000169"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyOTg0MQ==", "bodyText": "nit: Could we remove these indexes? I don't think they are relevant for this test, and creating and maintaining secondary indexes are expensive operations.", "url": "https://github.com/googleapis/java-spanner/pull/675#discussion_r533629841", "createdAt": "2020-12-01T18:27:21Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITDirectPathFallback.java", "diffHunk": "@@ -0,0 +1,305 @@\n+/*\n+ * Copyright 2017 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.spanner.it;\n+\n+import static com.google.common.truth.Truth.assertWithMessage;\n+import static com.google.common.truth.TruthJUnit.assume;\n+\n+import com.google.api.core.ApiFunction;\n+import com.google.api.gax.core.FixedCredentialsProvider;\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.oauth2.ComputeEngineCredentials;\n+import com.google.cloud.spanner.Database;\n+import com.google.cloud.spanner.DatabaseClient;\n+import com.google.cloud.spanner.IntegrationTestEnv;\n+import com.google.cloud.spanner.Key;\n+import com.google.cloud.spanner.Mutation;\n+import com.google.cloud.spanner.ParallelIntegrationTest;\n+import com.google.cloud.spanner.SpannerOptions;\n+import com.google.cloud.spanner.TimestampBound;\n+import com.google.cloud.spanner.testing.RemoteSpannerHelper;\n+import com.google.common.base.Stopwatch;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.alts.ComputeEngineChannelBuilder;\n+import io.grpc.netty.shaded.io.grpc.netty.NettyChannelBuilder;\n+import io.grpc.netty.shaded.io.netty.channel.ChannelDuplexHandler;\n+import io.grpc.netty.shaded.io.netty.channel.ChannelFactory;\n+import io.grpc.netty.shaded.io.netty.channel.ChannelHandlerContext;\n+import io.grpc.netty.shaded.io.netty.channel.ChannelPromise;\n+import io.grpc.netty.shaded.io.netty.channel.EventLoopGroup;\n+import io.grpc.netty.shaded.io.netty.channel.nio.NioEventLoopGroup;\n+import io.grpc.netty.shaded.io.netty.channel.socket.nio.NioSocketChannel;\n+import io.grpc.netty.shaded.io.netty.util.ReferenceCountUtil;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Test DirectPath fallback behavior by injecting a ChannelHandler into the netty stack that will\n+ * disrupt IPv6 communications.\n+ *\n+ * <p>WARNING: this test can only be run on a GCE VM and will explicitly ignore\n+ * GOOGLE_APPLICATION_CREDENTIALS and use the service account associated with the VM.\n+ */\n+@Category(ParallelIntegrationTest.class)\n+@RunWith(JUnit4.class)\n+public class ITDirectPathFallback {\n+  // A threshold of completed read calls to observe to ascertain IPv6 is working.\n+  // This was determined experimentally to account for both gRPC-LB RPCs and Bigtable api RPCs.\n+  private static final int MIN_COMPLETE_READ_CALLS = 40;\n+  private static final int NUM_RPCS_TO_SEND = 20;\n+\n+  // IP address prefixes allocated for DirectPath backends.\n+  private static final String DP_IPV6_PREFIX = \"2001:4860:8040\";\n+  private static final String DP_IPV4_PREFIX = \"34.126\";\n+\n+  @ClassRule public static IntegrationTestEnv env = new IntegrationTestEnv();\n+\n+  private AtomicBoolean blackholeDpAddr = new AtomicBoolean();\n+  private AtomicInteger numBlocked = new AtomicInteger();\n+  private AtomicInteger numDpAddrRead = new AtomicInteger();\n+  private boolean isDpAddr;\n+\n+  private ChannelFactory<NioSocketChannel> channelFactory;\n+  private EventLoopGroup eventLoopGroup;\n+  private RemoteSpannerHelper testHelper;\n+\n+  private static final String TABLE_NAME = \"TestTable\";\n+  private static final List<String> ALL_COLUMNS = Arrays.asList(\"Key\", \"StringValue\");\n+  private static Database db;\n+  private static DatabaseClient client;\n+\n+  private static final String DIRECT_PATH_ENDPOINT = \"aa423245250f2bbf.sandbox.googleapis.com:443\";\n+  private static final String ATTEMPT_DIRECT_PATH = \"spanner.attempt_directpath\";\n+\n+  public ITDirectPathFallback() {\n+    // Create a transport channel provider that can intercept ipv6 packets.\n+    channelFactory = new MyChannelFactory();\n+    eventLoopGroup = new NioEventLoopGroup();\n+  }\n+\n+  @Before\n+  public void setup() throws IOException, Throwable {\n+    assume()\n+        .withMessage(\"DirectPath integration tests can only run against DirectPathEnv\")\n+        .that(Boolean.getBoolean(ATTEMPT_DIRECT_PATH))\n+        .isTrue();\n+    // Get default spanner options for Ingetration test\n+    SpannerOptions.Builder builder = env.getTestHelper().getOptions().toBuilder();\n+    // Set instrumented transport provider\n+    builder.setChannelProvider(\n+        InstantiatingGrpcChannelProvider.newBuilder()\n+            .setAttemptDirectPath(true)\n+            .setEndpoint(DIRECT_PATH_ENDPOINT)\n+            .setPoolSize(1)\n+            .setChannelConfigurator(\n+                new ApiFunction<ManagedChannelBuilder, ManagedChannelBuilder>() {\n+                  @Override\n+                  public ManagedChannelBuilder apply(ManagedChannelBuilder builder) {\n+                    injectNettyChannelHandler(builder);\n+                    // Fail fast when blackhole is active\n+                    builder.keepAliveTime(1, TimeUnit.SECONDS);\n+                    builder.keepAliveTimeout(1, TimeUnit.SECONDS);\n+                    return builder;\n+                  }\n+                })\n+            .build());\n+    // Forcefully ignore GOOGLE_APPLICATION_CREDENTIALS\n+    builder.setCredentials(\n+        FixedCredentialsProvider.create(ComputeEngineCredentials.create()).getCredentials());\n+\n+    // Create a new testHelper with the instrumented transport provider\n+    testHelper = RemoteSpannerHelper.create(builder.build(), env.getTestHelper().getInstanceId());\n+\n+    db =\n+        testHelper.createTestDatabase(\n+            \"CREATE TABLE TestTable (\"\n+                + \"  Key                STRING(MAX) NOT NULL,\"\n+                + \"  StringValue        STRING(MAX),\"\n+                + \") PRIMARY KEY (Key)\",\n+            \"CREATE INDEX TestTableByValue ON TestTable(StringValue)\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc4c71f9c807883ba2ca6abbd9f95cb55c000169"}, "originalPosition": 150}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d549ed3a14728aba43a1df3a62922c1b52bce61", "author": {"user": {"login": "mohanli-ml", "name": "Mohan Li"}}, "url": "https://github.com/googleapis/java-spanner/commit/3d549ed3a14728aba43a1df3a62922c1b52bce61", "committedDate": "2020-12-01T18:50:27Z", "message": "chore: add DirectPath fallback integration test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc4c71f9c807883ba2ca6abbd9f95cb55c000169", "author": {"user": {"login": "mohanli-ml", "name": "Mohan Li"}}, "url": "https://github.com/googleapis/java-spanner/commit/fc4c71f9c807883ba2ca6abbd9f95cb55c000169", "committedDate": "2020-12-01T06:09:36Z", "message": "chore: add DirectPath fallback integration test"}, "afterCommit": {"oid": "3d549ed3a14728aba43a1df3a62922c1b52bce61", "author": {"user": {"login": "mohanli-ml", "name": "Mohan Li"}}, "url": "https://github.com/googleapis/java-spanner/commit/3d549ed3a14728aba43a1df3a62922c1b52bce61", "committedDate": "2020-12-01T18:50:27Z", "message": "chore: add DirectPath fallback integration test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMzY1MDUy", "url": "https://github.com/googleapis/java-spanner/pull/675#pullrequestreview-542365052", "createdAt": "2020-12-01T22:54:18Z", "commit": {"oid": "3d549ed3a14728aba43a1df3a62922c1b52bce61"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNTI1NDc1", "url": "https://github.com/googleapis/java-spanner/pull/675#pullrequestreview-542525475", "createdAt": "2020-12-02T06:14:05Z", "commit": {"oid": "3d549ed3a14728aba43a1df3a62922c1b52bce61"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNTgxMjEx", "url": "https://github.com/googleapis/java-spanner/pull/675#pullrequestreview-553581211", "createdAt": "2020-12-16T11:08:52Z", "commit": {"oid": "3d549ed3a14728aba43a1df3a62922c1b52bce61"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMTowODo1MlrOIG_9RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMTowODo1MlrOIG_9RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIxMDI0NA==", "bodyText": "It seems that this change is now causing this problem further down the line with the flatten-maven-plugin: googleapis/java-spanner-jdbc#293 (comment)", "url": "https://github.com/googleapis/java-spanner/pull/675#discussion_r544210244", "createdAt": "2020-12-16T11:08:52Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/pom.xml", "diffHunk": "@@ -142,6 +142,16 @@\n       <groupId>io.grpc</groupId>\n       <artifactId>grpc-protobuf</artifactId>\n     </dependency>\n+    <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d549ed3a14728aba43a1df3a62922c1b52bce61"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 927, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}