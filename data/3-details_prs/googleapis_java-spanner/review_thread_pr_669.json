{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NTEwMzk3", "number": 669, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTo0NjoxMVrOE872VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTo0NjoxMVrOE872VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzMwNTgwOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerExceptionFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTo0NjoxMVrOH5WbEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzo0NToyMVrOH6z3Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5ODI1OQ==", "bodyText": "nit: could we extract constants for the literal Strings?", "url": "https://github.com/googleapis/java-spanner/pull/669#discussion_r529898259", "createdAt": "2020-11-24T21:46:11Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerExceptionFactory.java", "diffHunk": "@@ -213,13 +216,31 @@ private static ResourceInfo extractResourceInfo(Throwable cause) {\n     return null;\n   }\n \n+  private static ErrorInfo extractErrorInfo(Throwable cause) {\n+    if (cause != null) {\n+      Metadata trailers = Status.trailersFromThrowable(cause);\n+      if (trailers != null) {\n+        return trailers.get(KEY_ERROR_INFO);\n+      }\n+    }\n+    return null;\n+  }\n+\n   static SpannerException newSpannerExceptionPreformatted(\n       ErrorCode code, @Nullable String message, @Nullable Throwable cause) {\n     // This is the one place in the codebase that is allowed to call constructors directly.\n     DoNotConstructDirectly token = DoNotConstructDirectly.ALLOWED;\n     switch (code) {\n       case ABORTED:\n         return new AbortedException(token, message, cause);\n+      case RESOURCE_EXHAUSTED:\n+        ErrorInfo info = extractErrorInfo(cause);\n+        if (info != null\n+            && info.getMetadataMap().containsKey(\"quota_limit\")\n+            && \"AdminMethodQuotaPerMinutePerProject\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc862ab2270cdeea506e181b7745bba14d85e19"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyOTE2Ng==", "bodyText": "Done", "url": "https://github.com/googleapis/java-spanner/pull/669#discussion_r531429166", "createdAt": "2020-11-27T07:45:21Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerExceptionFactory.java", "diffHunk": "@@ -213,13 +216,31 @@ private static ResourceInfo extractResourceInfo(Throwable cause) {\n     return null;\n   }\n \n+  private static ErrorInfo extractErrorInfo(Throwable cause) {\n+    if (cause != null) {\n+      Metadata trailers = Status.trailersFromThrowable(cause);\n+      if (trailers != null) {\n+        return trailers.get(KEY_ERROR_INFO);\n+      }\n+    }\n+    return null;\n+  }\n+\n   static SpannerException newSpannerExceptionPreformatted(\n       ErrorCode code, @Nullable String message, @Nullable Throwable cause) {\n     // This is the one place in the codebase that is allowed to call constructors directly.\n     DoNotConstructDirectly token = DoNotConstructDirectly.ALLOWED;\n     switch (code) {\n       case ABORTED:\n         return new AbortedException(token, message, cause);\n+      case RESOURCE_EXHAUSTED:\n+        ErrorInfo info = extractErrorInfo(cause);\n+        if (info != null\n+            && info.getMetadataMap().containsKey(\"quota_limit\")\n+            && \"AdminMethodQuotaPerMinutePerProject\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5ODI1OQ=="}, "originalCommit": {"oid": "4fc862ab2270cdeea506e181b7745bba14d85e19"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3260, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}