{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5MzIyMjA0", "number": 501, "title": "fix: close executor when closing pool", "bodyText": "Shutdown the executor that maintains the pool when the pool is closing.", "createdAt": "2020-10-07T15:07:50Z", "url": "https://github.com/googleapis/java-spanner/pull/501", "merged": true, "mergeCommit": {"oid": "208674632b20b37f51b828c1c4cc76c91154952b"}, "closed": true, "closedAt": "2020-10-09T02:49:04Z", "author": {"login": "olavloite"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQOZZVAH2gAyNDk5MzIyMjA0Ojg3ODg0YWMyYWJkMDU1YmVlOWRhMzAzMzgwZTJlOTZmY2QxYzllNjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQs_PFgFqTUwNTMyNDU1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "87884ac2abd055bee9da303380e2e96fcd1c9e69", "author": {"user": {"login": "olavloite", "name": "Knut Olav L\u00f8ite"}}, "url": "https://github.com/googleapis/java-spanner/commit/87884ac2abd055bee9da303380e2e96fcd1c9e69", "committedDate": "2020-10-07T15:06:26Z", "message": "fix: close executor when closing pool"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzOTg1MDYz", "url": "https://github.com/googleapis/java-spanner/pull/501#pullrequestreview-503985063", "createdAt": "2020-10-07T15:08:55Z", "commit": {"oid": "87884ac2abd055bee9da303380e2e96fcd1c9e69"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTowODo1NVrOHd4J1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTowODo1NVrOHd4J1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA5MDc3NA==", "bodyText": "The only real change here is the addition of the finally block, but GitHub thinks there is a lot more changed because of the changed indentation and formatting.", "url": "https://github.com/googleapis/java-spanner/pull/501#discussion_r501090774", "createdAt": "2020-10-07T15:08:55Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/SpannerPool.java", "diffHunk": "@@ -390,26 +390,34 @@ void checkAndCloseSpanners(CheckAndCloseSpannersMode mode) {\n           keysStillInUse.add(entry.getKey());\n         }\n       }\n-      if (keysStillInUse.isEmpty() || mode == CheckAndCloseSpannersMode.WARN) {\n-        if (!keysStillInUse.isEmpty()) {\n+      try {\n+        if (keysStillInUse.isEmpty() || mode == CheckAndCloseSpannersMode.WARN) {\n+          if (!keysStillInUse.isEmpty()) {\n+            logLeakedConnections(keysStillInUse);\n+            logger.log(\n+                Level.WARNING,\n+                \"There is/are \"\n+                    + keysStillInUse.size()\n+                    + \" connection(s) still open.\"\n+                    + \" Close all connections before stopping the application\");\n+          }\n+          // Force close all Spanner instances by passing in a value that will always be less than\n+          // the\n+          // difference between the current time and the close time of a connection.\n+          closeUnusedSpanners(Long.MIN_VALUE);\n+        } else {\n           logLeakedConnections(keysStillInUse);\n-          logger.log(\n-              Level.WARNING,\n+          throw SpannerExceptionFactory.newSpannerException(\n+              ErrorCode.FAILED_PRECONDITION,\n               \"There is/are \"\n                   + keysStillInUse.size()\n-                  + \" connection(s) still open.\"\n-                  + \" Close all connections before stopping the application\");\n+                  + \" connection(s) still open. Close all connections before calling closeSpanner()\");\n         }\n-        // Force close all Spanner instances by passing in a value that will always be less than the\n-        // difference between the current time and the close time of a connection.\n-        closeUnusedSpanners(Long.MIN_VALUE);\n-      } else {\n-        logLeakedConnections(keysStillInUse);\n-        throw SpannerExceptionFactory.newSpannerException(\n-            ErrorCode.FAILED_PRECONDITION,\n-            \"There is/are \"\n-                + keysStillInUse.size()\n-                + \" connection(s) still open. Close all connections before calling closeSpanner()\");\n+      } finally {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87884ac2abd055bee9da303380e2e96fcd1c9e69"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MzIwMTM3", "url": "https://github.com/googleapis/java-spanner/pull/501#pullrequestreview-504320137", "createdAt": "2020-10-07T22:47:53Z", "commit": {"oid": "87884ac2abd055bee9da303380e2e96fcd1c9e69"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMjo0Nzo1M1rOHeIK9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMjo0Nzo1M1rOHeIK9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1MzIwNQ==", "bodyText": "Can this throw an exception?", "url": "https://github.com/googleapis/java-spanner/pull/501#discussion_r501353205", "createdAt": "2020-10-07T22:47:53Z", "author": {"login": "thiagotnunes"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/connection/SpannerPool.java", "diffHunk": "@@ -390,26 +390,34 @@ void checkAndCloseSpanners(CheckAndCloseSpannersMode mode) {\n           keysStillInUse.add(entry.getKey());\n         }\n       }\n-      if (keysStillInUse.isEmpty() || mode == CheckAndCloseSpannersMode.WARN) {\n-        if (!keysStillInUse.isEmpty()) {\n+      try {\n+        if (keysStillInUse.isEmpty() || mode == CheckAndCloseSpannersMode.WARN) {\n+          if (!keysStillInUse.isEmpty()) {\n+            logLeakedConnections(keysStillInUse);\n+            logger.log(\n+                Level.WARNING,\n+                \"There is/are \"\n+                    + keysStillInUse.size()\n+                    + \" connection(s) still open.\"\n+                    + \" Close all connections before stopping the application\");\n+          }\n+          // Force close all Spanner instances by passing in a value that will always be less than\n+          // the\n+          // difference between the current time and the close time of a connection.\n+          closeUnusedSpanners(Long.MIN_VALUE);\n+        } else {\n           logLeakedConnections(keysStillInUse);\n-          logger.log(\n-              Level.WARNING,\n+          throw SpannerExceptionFactory.newSpannerException(\n+              ErrorCode.FAILED_PRECONDITION,\n               \"There is/are \"\n                   + keysStillInUse.size()\n-                  + \" connection(s) still open.\"\n-                  + \" Close all connections before stopping the application\");\n+                  + \" connection(s) still open. Close all connections before calling closeSpanner()\");\n         }\n-        // Force close all Spanner instances by passing in a value that will always be less than the\n-        // difference between the current time and the close time of a connection.\n-        closeUnusedSpanners(Long.MIN_VALUE);\n-      } else {\n-        logLeakedConnections(keysStillInUse);\n-        throw SpannerExceptionFactory.newSpannerException(\n-            ErrorCode.FAILED_PRECONDITION,\n-            \"There is/are \"\n-                + keysStillInUse.size()\n-                + \" connection(s) still open. Close all connections before calling closeSpanner()\");\n+      } finally {\n+        if (closerService != null) {\n+          closerService.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87884ac2abd055bee9da303380e2e96fcd1c9e69"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MzI0NTU2", "url": "https://github.com/googleapis/java-spanner/pull/501#pullrequestreview-505324556", "createdAt": "2020-10-09T02:44:55Z", "commit": {"oid": "87884ac2abd055bee9da303380e2e96fcd1c9e69"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1018, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}