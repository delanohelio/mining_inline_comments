{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNjEzNTMw", "number": 34, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMjo0OTo0NFrODYX4uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMzozMjozNVrODYtKbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODgzNzY5OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseNotFoundException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMjo0OTo0NFrOFeMmiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNjo0MDozMFrOFgR1nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIwODA3NQ==", "bodyText": "2020", "url": "https://github.com/googleapis/java-spanner/pull/34#discussion_r367208075", "createdAt": "2020-01-16T02:49:44Z", "author": {"login": "skuruppu"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseNotFoundException.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2019 Google LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd2ceed9ca7dd43e7ee4de08ad97186fff62063"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM5MTAwNw==", "bodyText": "Done.", "url": "https://github.com/googleapis/java-spanner/pull/34#discussion_r369391007", "createdAt": "2020-01-22T06:40:30Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/DatabaseNotFoundException.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2019 Google LLC", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIwODA3NQ=="}, "originalCommit": {"oid": "cdd2ceed9ca7dd43e7ee4de08ad97186fff62063"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjI1NjQ1OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMjozNjozM1rOFetYOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNzo0Njo1MVrOFfP4hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0NTA4MQ==", "bodyText": "nits: use else if?", "url": "https://github.com/googleapis/java-spanner/pull/34#discussion_r367745081", "createdAt": "2020-01-17T02:36:33Z", "author": {"login": "hengfengli"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPool.java", "diffHunk": "@@ -775,6 +776,15 @@ public void close() {\n       if (lastException != null && isSessionNotFound(lastException)) {\n         invalidateSession(this);\n       } else {\n+        if (lastException != null && isDatabaseNotFound(lastException)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd2ceed9ca7dd43e7ee4de08ad97186fff62063"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDQwNg==", "bodyText": "That wouldn't work, as the else block also contains a non-conditional block underneath this if-block.", "url": "https://github.com/googleapis/java-spanner/pull/34#discussion_r368310406", "createdAt": "2020-01-19T17:46:51Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SessionPool.java", "diffHunk": "@@ -775,6 +776,15 @@ public void close() {\n       if (lastException != null && isSessionNotFound(lastException)) {\n         invalidateSession(this);\n       } else {\n+        if (lastException != null && isDatabaseNotFound(lastException)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0NTA4MQ=="}, "originalCommit": {"oid": "cdd2ceed9ca7dd43e7ee4de08ad97186fff62063"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjI2OTAzOnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerExceptionFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMjo0NzoxOVrOFetf_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNzo1NDoyNlrOFfP5_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0NzA2OA==", "bodyText": "Why use a regex matching instead of message.contains()? I mean that it is very sensitive to any small text/format change in the message.", "url": "https://github.com/googleapis/java-spanner/pull/34#discussion_r367747068", "createdAt": "2020-01-17T02:47:19Z", "author": {"login": "hengfengli"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerExceptionFactory.java", "diffHunk": "@@ -176,6 +182,8 @@ private static SpannerException newSpannerExceptionPreformatted(\n       case NOT_FOUND:\n         if (message != null && message.contains(\"Session not found\")) {\n           return new SessionNotFoundException(token, message, cause);\n+        } else if (message != null && DATABASE_NOT_FOUND_MSG_PATTERN.matcher(message).matches()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd2ceed9ca7dd43e7ee4de08ad97186fff62063"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDc4MA==", "bodyText": "The reason I added the extensive regex matching for this exception is that it could be thrown by basically any RPC, and I worry about situations where the text 'Database not found' is used as part of the input, and then also returned by the server as part of an error message. I also added an integration test to ensure that the matching does stay in sync with the backend. But maybe I'm a little bit too paranoid here...", "url": "https://github.com/googleapis/java-spanner/pull/34#discussion_r368310780", "createdAt": "2020-01-19T17:54:26Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/main/java/com/google/cloud/spanner/SpannerExceptionFactory.java", "diffHunk": "@@ -176,6 +182,8 @@ private static SpannerException newSpannerExceptionPreformatted(\n       case NOT_FOUND:\n         if (message != null && message.contains(\"Session not found\")) {\n           return new SessionNotFoundException(token, message, cause);\n+        } else if (message != null && DATABASE_NOT_FOUND_MSG_PATTERN.matcher(message).matches()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0NzA2OA=="}, "originalCommit": {"oid": "cdd2ceed9ca7dd43e7ee4de08ad97186fff62063"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjI5MDk1OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMzowNzowOVrOFettew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNzo1NzowNFrOFfP6jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MDUyMw==", "bodyText": "nits: I feel that a hardcoded message is more clear here, because if the message in the code has been mistakenly changed, this test will let it pass instead of finding out the difference.", "url": "https://github.com/googleapis/java-spanner/pull/34#discussion_r367750523", "createdAt": "2020-01-17T03:07:09Z", "author": {"login": "hengfengli"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java", "diffHunk": "@@ -51,8 +51,21 @@\n \n @RunWith(JUnit4.class)\n public class DatabaseClientImplTest {\n-  private static final String DATABASE_DOES_NOT_EXIST_MSG =\n-      \"Database not found: projects/<project>/instances/<instance>/databases/<database> resource_type: \\\"type.googleapis.com/google.spanner.admin.database.v1.Database\\\" resource_name: \\\"projects/<project>/instances/<instance>/databases/<database>\\\" description: \\\"Database does not exist.\\\"\";\n+  private static final String DATABASE_NOT_FOUND_FORMAT =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd2ceed9ca7dd43e7ee4de08ad97186fff62063"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDkyNA==", "bodyText": "Good point. I changed it back to a hard coded string.", "url": "https://github.com/googleapis/java-spanner/pull/34#discussion_r368310924", "createdAt": "2020-01-19T17:57:04Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/DatabaseClientImplTest.java", "diffHunk": "@@ -51,8 +51,21 @@\n \n @RunWith(JUnit4.class)\n public class DatabaseClientImplTest {\n-  private static final String DATABASE_DOES_NOT_EXIST_MSG =\n-      \"Database not found: projects/<project>/instances/<instance>/databases/<database> resource_type: \\\"type.googleapis.com/google.spanner.admin.database.v1.Database\\\" resource_name: \\\"projects/<project>/instances/<instance>/databases/<database>\\\" description: \\\"Database does not exist.\\\"\";\n+  private static final String DATABASE_NOT_FOUND_FORMAT =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1MDUyMw=="}, "originalCommit": {"oid": "cdd2ceed9ca7dd43e7ee4de08ad97186fff62063"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjMyMzY3OnYy", "diffSide": "RIGHT", "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITDatabaseTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMzozMjozNVrOFet_8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNzo1ODowMVrOFfP6tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1NTI0OA==", "bodyText": "I guess we should break the while here once we get the error.", "url": "https://github.com/googleapis/java-spanner/pull/34#discussion_r367755248", "createdAt": "2020-01-17T03:32:35Z", "author": {"login": "hengfengli"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITDatabaseTest.java", "diffHunk": "@@ -43,4 +54,68 @@ public void badDdl() {\n \n     env.getTestHelper().createTestDatabase(\"CREATE TABLE T ( Illegal Way To Define A Table )\");\n   }\n+\n+  @Test\n+  public void databaseDeletedTest() throws Exception {\n+    // Create a test db, do a query, then delete it and verify that it returns\n+    // DatabaseNotFoundExceptions.\n+    Database db = env.getTestHelper().createTestDatabase();\n+    DatabaseClient client = env.getTestHelper().getClient().getDatabaseClient(db.getId());\n+    try (ResultSet rs = client.singleUse().executeQuery(Statement.of(\"SELECT 1\"))) {\n+      assertThat(rs.next()).isTrue();\n+      assertThat(rs.getLong(0)).isEqualTo(1L);\n+      assertThat(rs.next()).isFalse();\n+    }\n+\n+    // Delete the database.\n+    db.drop();\n+    // We need to wait a little before Spanner actually starts sending DatabaseNotFound errors.\n+    ExponentialBackOff backoff =\n+        new ExponentialBackOff.Builder()\n+            .setInitialIntervalMillis(1000)\n+            .setMaxElapsedTimeMillis(35000)\n+            .setMaxIntervalMillis(5000)\n+            .build();\n+    DatabaseNotFoundException notFoundException = null;\n+    long millis = 0L;\n+    while ((millis = backoff.nextBackOffMillis()) != ExponentialBackOff.STOP) {\n+      Thread.sleep(millis);\n+      // Queries to this database should eventually return DatabaseNotFoundExceptions.\n+      try (ResultSet rs = client.singleUse().executeQuery(Statement.of(\"SELECT 1\"))) {\n+        rs.next();\n+      } catch (DatabaseNotFoundException e) {\n+        // This is what we expect.\n+        notFoundException = e;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd2ceed9ca7dd43e7ee4de08ad97186fff62063"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDk2NQ==", "bodyText": "Yep, good catch.", "url": "https://github.com/googleapis/java-spanner/pull/34#discussion_r368310965", "createdAt": "2020-01-19T17:58:01Z", "author": {"login": "olavloite"}, "path": "google-cloud-spanner/src/test/java/com/google/cloud/spanner/it/ITDatabaseTest.java", "diffHunk": "@@ -43,4 +54,68 @@ public void badDdl() {\n \n     env.getTestHelper().createTestDatabase(\"CREATE TABLE T ( Illegal Way To Define A Table )\");\n   }\n+\n+  @Test\n+  public void databaseDeletedTest() throws Exception {\n+    // Create a test db, do a query, then delete it and verify that it returns\n+    // DatabaseNotFoundExceptions.\n+    Database db = env.getTestHelper().createTestDatabase();\n+    DatabaseClient client = env.getTestHelper().getClient().getDatabaseClient(db.getId());\n+    try (ResultSet rs = client.singleUse().executeQuery(Statement.of(\"SELECT 1\"))) {\n+      assertThat(rs.next()).isTrue();\n+      assertThat(rs.getLong(0)).isEqualTo(1L);\n+      assertThat(rs.next()).isFalse();\n+    }\n+\n+    // Delete the database.\n+    db.drop();\n+    // We need to wait a little before Spanner actually starts sending DatabaseNotFound errors.\n+    ExponentialBackOff backoff =\n+        new ExponentialBackOff.Builder()\n+            .setInitialIntervalMillis(1000)\n+            .setMaxElapsedTimeMillis(35000)\n+            .setMaxIntervalMillis(5000)\n+            .build();\n+    DatabaseNotFoundException notFoundException = null;\n+    long millis = 0L;\n+    while ((millis = backoff.nextBackOffMillis()) != ExponentialBackOff.STOP) {\n+      Thread.sleep(millis);\n+      // Queries to this database should eventually return DatabaseNotFoundExceptions.\n+      try (ResultSet rs = client.singleUse().executeQuery(Statement.of(\"SELECT 1\"))) {\n+        rs.next();\n+      } catch (DatabaseNotFoundException e) {\n+        // This is what we expect.\n+        notFoundException = e;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc1NTI0OA=="}, "originalCommit": {"oid": "cdd2ceed9ca7dd43e7ee4de08ad97186fff62063"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3239, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}