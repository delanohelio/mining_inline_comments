{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMDA2Nzc4", "number": 1030, "title": "\u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0430 \u041f\u043e\u0434\u0440\u044f\u0434 \u0438\u0434\u0443\u0449\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438", "bodyText": "\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\n\n\u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438\n\n\n\n\n\n\nCloses: #958\n\u0427\u0435\u043a\u043b\u0438\u0441\u0442\n\n\n\u041e\u0431\u0449\u0438\u0435\n\n \u0412\u0435\u0442\u043a\u0430 PR \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0430 \u0438\u0437 develop\n \u041e\u0442\u043b\u0430\u0434\u043e\u0447\u043d\u044b\u0435, \u0437\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0438 \u043f\u0440\u043e\u0447\u0438\u0435, \u043d\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0435 \u0441\u043c\u044b\u0441\u043b\u0430 \u0443\u0447\u0430\u0441\u0442\u043a\u0438 \u043a\u043e\u0434\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u044b\n \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u043a\u0440\u044b\u0442\u044b \u0442\u0435\u0441\u0442\u0430\u043c\u0438\n \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u0435\u0440\u0435\u0434 \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b (\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u043b \u043a\u043e\u043c\u0430\u043d\u0434\u0443 gradlew precommit)\n\n\u0414\u043b\u044f \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\n\n \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043e \u0434\u043b\u044f \u043e\u0431\u043e\u0438\u0445 \u044f\u0437\u044b\u043a\u043e\u0432 (\u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439 \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u0435\u043d)\n\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e", "createdAt": "2020-04-10T17:59:09Z", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030", "merged": true, "mergeCommit": {"oid": "8f653ac77e735786df66d2a85891db25e2e246c9"}, "closed": true, "closedAt": "2020-04-21T14:54:15Z", "author": {"login": "artbear"}, "timelineItems": {"totalCount": 61, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWTnXygH2gAyNDAyMDA2Nzc4OmNjYjUzZDQ4MGQ0YTVhNWU3NGVmYTRlMmI0YWI1ZmY2ZTBmMDI5OTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZ04XSgH2gAyNDAyMDA2Nzc4Ojg3ODU1MDlhYWRkNTVlMzI5MGRiMWY4NmY3NTIxMTNmMmI1M2ViY2Y=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ccb53d480d4a5a5e74efa4e2b4ab5ff6e0f02995", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/ccb53d480d4a5a5e74efa4e2b4ab5ff6e0f02995", "committedDate": "2020-04-10T16:23:37Z", "message": "\u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0430 \u041f\u043e\u0434\u0440\u044f\u0434 \u0438\u0434\u0443\u0449\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ab3194db45131718c0747a5ae9692a2e9ce088f", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/8ab3194db45131718c0747a5ae9692a2e9ce088f", "committedDate": "2020-04-10T16:54:25Z", "message": "Merge branch 'develop' into ConsecutiveEmptyLines-958\n\n# Conflicts:\n#\tdocs/en/diagnostics/index.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef2436c756f2fccde286a6e43b90cb11b55781e9", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/ef2436c756f2fccde286a6e43b90cb11b55781e9", "committedDate": "2020-04-10T17:51:38Z", "message": "\u0434\u043e\u0431\u0430\u0432\u0438\u043b \"\u0445\u0438\u0442\u0440\u044b\u0435\" \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11c5d98f46da328ba600e233fc6116a33cc34460", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/11c5d98f46da328ba600e233fc6116a33cc34460", "committedDate": "2020-04-10T17:57:29Z", "message": "\u0441\u043b\u0435\u0433\u043a\u0430 \u0443\u0442\u043e\u0447\u043d\u0438\u043b \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043a\u0443 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u0432 \u0441\u0442\u0440\u043e\u043a"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNjE3MzU0", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#pullrequestreview-391617354", "createdAt": "2020-04-10T19:22:38Z", "commit": {"oid": "11c5d98f46da328ba600e233fc6116a33cc34460"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f51dc9db4930568319f483633b797caf85c47edf", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/f51dc9db4930568319f483633b797caf85c47edf", "committedDate": "2020-04-10T20:13:23Z", "message": "\u0443\u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043b\u0441\u044f \u043e\u0442 AbstractDiagnostic \u0438 \u043f\u0435\u0440\u0435\u0433\u0440\u0443\u0437\u0438\u043b \u043c\u0435\u0442\u043e\u0434 check()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b429d9fd686ecc606c97d01049739f7096a64cf5", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/b429d9fd686ecc606c97d01049739f7096a64cf5", "committedDate": "2020-04-10T20:52:57Z", "message": "\u043e\u0431\u043b\u0435\u0433\u0447\u0438\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043f\u0440\u0430\u0432\u0438\u043b\u0430"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d83c6a8b1296f994a46dc61a28a5477ce18a3ee", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/9d83c6a8b1296f994a46dc61a28a5477ce18a3ee", "committedDate": "2020-04-10T21:05:53Z", "message": "\u0435\u0449\u0435 \u0443\u043b\u0443\u0447\u0448\u0438\u043b \u0438 \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4703e94a58f6a825793ddbade04a287465a05261", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/4703e94a58f6a825793ddbade04a287465a05261", "committedDate": "2020-04-10T21:23:06Z", "message": "\u0443\u0441\u043a\u043e\u0440\u0438\u043b \u0434\u043b\u044f \u0441\u043b\u0443\u0447\u0430\u044f \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u0444\u0430\u0439\u043b\u0430"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d535c2765bd4e6bcfd52f5ec9a77375f7d81bd81", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/d535c2765bd4e6bcfd52f5ec9a77375f7d81bd81", "committedDate": "2020-04-10T21:40:27Z", "message": "\u0443\u0431\u0440\u0430\u043b \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0439 \u043a\u043e\u0434"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "508bbc076d705ddccace7231bbd044b593416d48", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/508bbc076d705ddccace7231bbd044b593416d48", "committedDate": "2020-04-10T22:17:35Z", "message": "\u0435\u0449\u0435 \u0441\u043b\u0435\u0433\u043a\u0430 \u0443\u0441\u043a\u043e\u0440\u0438\u043b\n\n+ \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0443\u044e \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0443"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59331806ffec6342c0bcc5f1814273ab559d04e0", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/59331806ffec6342c0bcc5f1814273ab559d04e0", "committedDate": "2020-04-10T22:49:23Z", "message": "\u043f\u043e\u0434\u0441\u043c\u043e\u0442\u0440\u0435\u043b \u0432 \u0441\u043e\u0441\u0435\u0434\u043d\u0435\u043c \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74f6e396ac7925b26b00b23c9d42fe263e9ae5a8", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/74f6e396ac7925b26b00b23c9d42fe263e9ae5a8", "committedDate": "2020-04-11T09:18:05Z", "message": "\u0434\u043e\u0431\u0430\u0432\u0438\u043b .map(token -> token.getLine()).distinct() \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "affd4cb6a510e1737a0fd97631663c9d66d6b9f5", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/affd4cb6a510e1737a0fd97631663c9d66d6b9f5", "committedDate": "2020-04-11T09:25:59Z", "message": "Merge remote-tracking branch 'origin/develop' into ConsecutiveEmptyLines-958\n\n# Conflicts:\n#\t.github/workflows/bechmark.yml"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzUyNjMw", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#pullrequestreview-391752630", "createdAt": "2020-04-11T09:50:05Z", "commit": {"oid": "affd4cb6a510e1737a0fd97631663c9d66d6b9f5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1MDowNVrOGEL8gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1MDowNVrOGEL8gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MzIwMg==", "bodyText": "\u0425\u0430\u0440\u0434\u043a\u043e\u0434.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407043202", "createdAt": "2020-04-11T09:50:05Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.Range;\n+\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic {\n+  private static final Pattern EMPTY_LINES_REGEX = Pattern.compile(\"^(\\\\s*[\\\\n\\\\r]+\\\\s*){2,}\");\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int[] prevLineStorage = {0};\n+    tokens.stream()\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEach(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine > prevLine + 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "affd4cb6a510e1737a0fd97631663c9d66d6b9f5"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1df10e2309f6ded95b7bec46c29d3c1785af69a", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/c1df10e2309f6ded95b7bec46c29d3c1785af69a", "committedDate": "2020-04-11T10:11:15Z", "message": "\u0434\u043e\u0431\u0430\u0432\u0438\u043b \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u044b \u0431\u0435\u0437 \u0444\u0430\u0439\u043b\u043e\u0432, \u0442\u043e\u043b\u044c\u043a\u043e \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16de0c9a0afd4158450c33bd3baae59b8c2bc013", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/16de0c9a0afd4158450c33bd3baae59b8c2bc013", "committedDate": "2020-04-11T10:11:42Z", "message": "\u0440\u0430\u0441\u0448\u0438\u0440\u0438\u043b \u0442\u0435\u0441\u0442\u044b, \u0434\u043e\u0431\u0430\u0432\u0438\u0432 \u0442\u0435\u0441\u0442\u044b \u043d\u0430 CR \u0438 \u0442\u0430\u0431\u0443\u043b\u044f\u0446\u0438\u044e"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzUzOTE0", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#pullrequestreview-391753914", "createdAt": "2020-04-11T10:11:06Z", "commit": {"oid": "affd4cb6a510e1737a0fd97631663c9d66d6b9f5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDoxMTowNlrOGEMD7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDoxMTowNlrOGEMD7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NTEwMw==", "bodyText": "\u0410 \u0447\u0442\u043e \u043e\u043d\u043e \u0442\u0430\u043c \u043f\u043e\u0439\u043c\u0430\u043b\u043e? \u0422\u0430\u043c \u0436\u0435 \u043e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u043e\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430. \u0418 \u043f\u043e\u043c\u043e\u0435\u043c\u0443 \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u0435 \u043f\u043e\u0432\u0435\u0441\u0438\u0442\u0441\u044f \u043d\u0430 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407045103", "createdAt": "2020-04-11T10:11:06Z", "author": {"login": "asosnoviy"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<ConsecutiveEmptyLinesDiagnostic> {\n+  ConsecutiveEmptyLinesDiagnosticTest() {\n+    super(ConsecutiveEmptyLinesDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test() {\n+\n+    List<Diagnostic> diagnostics = getDiagnostics();\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasRange(6, 0, 7, 0)\n+      .hasRange(11, 0, 12, 0)\n+      .hasRange(15, 0, 16, 0)\n+      .hasRange(18, 0, 19, 0)\n+      .hasRange(23, 0, 24, 0)\n+      .hasRange(27, 0, 28, 0)\n+      .hasRange(30, 0, 31, 0)\n+      .hasRange(34, 0, 35, 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "affd4cb6a510e1737a0fd97631663c9d66d6b9f5"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad659ff05af6c22d2fa59392d45cb119aa6bfada", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/ad659ff05af6c22d2fa59392d45cb119aa6bfada", "committedDate": "2020-04-11T11:32:11Z", "message": "\u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043b \u0443\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0435\u0435 \u0438\u043c\u044f \u043c\u0435\u0442\u043e\u0434\u0430 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "008efc328a29c27611fc6b8aa431a86b56aae114", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/008efc328a29c27611fc6b8aa431a86b56aae114", "committedDate": "2020-04-11T11:43:10Z", "message": "\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "973dcb5c3f56a09b29df7a756cc3368199c42eef", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/973dcb5c3f56a09b29df7a756cc3368199c42eef", "committedDate": "2020-04-11T11:43:53Z", "message": "\u0437\u0430\u0438\u043d\u043b\u0430\u0439\u043d\u0438\u043b \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fe921de6fe8306ee2a987aa4e79d47aa603a76d", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/2fe921de6fe8306ee2a987aa4e79d47aa603a76d", "committedDate": "2020-04-11T16:24:52Z", "message": "\u0443\u0431\u0440\u0430\u043b \u043f\u0440\u043e\u0431\u0435\u043b\u044b"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eed65af6fa813a3d7b8a87cf83d336edbaf8bc27", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/eed65af6fa813a3d7b8a87cf83d336edbaf8bc27", "committedDate": "2020-04-11T19:36:26Z", "message": "\u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u043e\u0432 + \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043a\u0432\u0438\u043a-\u0444\u0438\u043a\u0441"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/b2a0ce520b41cdf56e65a8d4083fceed02f94fe8", "committedDate": "2020-04-11T19:36:42Z", "message": "\u0434\u043e\u0431\u0430\u0432\u0438\u043b \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzk2MjQ3", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#pullrequestreview-391796247", "createdAt": "2020-04-11T19:59:05Z", "commit": {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTo1OTowNVrOGEPsoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDowMjo0N1rOGEPt7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDY3Mg==", "bodyText": "\u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043d\u043e\u0435 - \u0431\u043e\u043b\u044c\u0448\u0435 2\u0445 \u043c\u043e\u0436\u043d\u043e, \u043c\u0435\u043d\u044c\u0448\u0435 \u043d\u0435\u0442?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407104672", "createdAt": "2020-04-11T19:59:05Z", "author": {"login": "asosnoviy"}, "path": "docs/diagnostics/ConsecutiveEmptyLines.md", "diffHunk": "@@ -0,0 +1,51 @@\n+# \u041f\u043e\u0434\u0440\u044f\u0434 \u0438\u0434\u0443\u0449\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 (ConsecutiveEmptyLines)\n+\n+| \u0422\u0438\u043f | \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f<br/>\u044f\u0437\u044b\u043a\u0438 | \u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c | \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u0430<br/>\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e | \u0412\u0440\u0435\u043c\u044f \u043d\u0430<br/>\u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 (\u043c\u0438\u043d) | \u0422\u044d\u0433\u0438 |\n+| :-: | :-: | :-: | :-: | :-: | :-: |\n+| `\u0414\u0435\u0444\u0435\u043a\u0442 \u043a\u043e\u0434\u0430` | `BSL`<br/>`OS` | `\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439` | `\u0414\u0430` | `1` | `badpractice` |\n+\n+## \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \n+\n+| \u0418\u043c\u044f | \u0422\u0438\u043f | \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 | \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e |\n+| :-: | :-: | :-- | :-: |\n+| `allowedEmptyLinesCount` | `\u0426\u0435\u043b\u043e\u0435` | ```\u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a``` | ```2``` |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNTAwNw==", "bodyText": "allowedEmptyLinesCount\", 3 - \u043c\u043e\u0436\u043d\u043e 3 \u043f\u043e\u0434\u0440\u044f\u0434, \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435\u0442\n.hasRange(29, 0, 31, 0) - \u0418\u0445 \u0442\u0430\u043c \u0432\u0441\u0435\u0433\u043e 3.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407105007", "createdAt": "2020-04-11T20:02:47Z", "author": {"login": "asosnoviy"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.util.TestUtils;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<ConsecutiveEmptyLinesDiagnostic> {\n+  ConsecutiveEmptyLinesDiagnosticTest() {\n+    super(ConsecutiveEmptyLinesDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test_CRLF_And_Spaces() {\n+    checkModuleText(false);\n+  }\n+\n+  @Test\n+  void test_CR_And_Spaces_And_Tab() {\n+    checkModuleText(true);\n+  }\n+\n+  void checkModuleText(boolean use_CR_WithTab) {\n+\n+    String module = getText();\n+\n+    if (use_CR_WithTab){\n+      module = module.replace(\"\\n\", \"\\r\");\n+      module = module.replace(\"  \", \"\\t\");\n+    }\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 1, 0)\n+      .hasRange(5, 0, 6, 0)\n+      .hasRange(10, 0, 11, 0)\n+      .hasRange(14, 0, 15, 0)\n+      .hasRange(17, 0, 18, 0)\n+      .hasRange(22, 0, 23, 0)\n+      .hasRange(26, 0, 27, 0)\n+      .hasRange(29, 0, 31, 0)\n+      .hasRange(33, 0, 34, 0)\n+      .hasSize(9)\n+    ;\n+\n+  }\n+\n+  @Test\n+  void test_ConfigureEmptyLineParam() {\n+    Map<String, Object> configuration = diagnosticInstance.getInfo().getDefaultConfiguration();\n+    configuration.put(\"allowedEmptyLinesCount\", 3);\n+    diagnosticInstance.configure(configuration);\n+\n+    List<Diagnostic> diagnostics = getDiagnostics();\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(29, 0, 31, 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzk4MTk0", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#pullrequestreview-391798194", "createdAt": "2020-04-11T20:28:33Z", "commit": {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDoyODozM1rOGEP3Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDoyODozM1rOGEP3Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNzQyNg==", "bodyText": "\u041a\u0430\u0436\u0435\u0442\u0441\u044f \u044d\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u043d\u0430\u0434\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043e\u0432.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407107426", "createdAt": "2020-04-11T20:28:33Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+  private static final Pattern DEFAULT_EMPTY_LINES_REGEX = Pattern.compile(\"^(\\\\s*[\\\\n\\\\r]+\\\\s*){2,}\");\n+  private Pattern emptyLinesRegex = DEFAULT_EMPTY_LINES_REGEX;\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 2;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    if (configuration == null){\n+      return;\n+    }\n+    this.allowedEmptyLinesCount = (Integer) configuration.getOrDefault(\"allowedEmptyLinesCount\", allowedEmptyLinesCount);\n+    emptyLinesRegex = Pattern.compile(DEFAULT_EMPTY_LINES_REGEX.pattern()\n+      .replace(\"2\", \"\" + allowedEmptyLinesCount));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzk4NjE2", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#pullrequestreview-391798616", "createdAt": "2020-04-11T20:33:44Z", "commit": {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDozMzo0NFrOGEP5lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDozMzo0NFrOGEP5lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNzk5MA==", "bodyText": "\u042d\u0442\u043e \u0442\u043e\u0447\u043d\u043e \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 PR", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407107990", "createdAt": "2020-04-11T20:33:44Z", "author": {"login": "asosnoviy"}, "path": "docs/contributing/DiagnostcAddSettings.md", "diffHunk": "@@ -43,12 +43,12 @@\n \n \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u0435\u0441\u0442 \u0434\u043b\u044f \u0441\u043b\u0443\u0447\u0430\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438.  \n \u0422\u0435\u0441\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043e \u0432\u0441\u0435 \u0442\u043e\u0442 \u0436\u0435 \u043a\u043b\u0430\u0441\u0441 \u0442\u0435\u0441\u0442\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 _(\u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438)_. \u0412 \u043d\u0430\u0447\u0430\u043b\u0435 \u0442\u0435\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438, \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b \u043e\u0431\u0449\u0438\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432.  \n-\u0414\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0438\u0437 \u0442\u0435\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u043f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434 `getDefaultDiagnosticConfiguration()` \u0438\u0437 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 `diagnosticInstance.getInfo()`. \u0417\u0430\u0442\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430, \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0443, \u043e\u0431\u0440\u0430\u0442\u0438\u0432\u0448\u0438\u0441\u044c \u043a \u043c\u0435\u0442\u043e\u0434\u0443 `configure`.  \n+\u0414\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0438\u0437 \u0442\u0435\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u043f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434 `getDefaultConfiguration()` \u0438\u0437 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 `diagnosticInstance.getInfo()`. \u0417\u0430\u0442\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430, \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0443, \u043e\u0431\u0440\u0430\u0442\u0438\u0432\u0448\u0438\u0441\u044c \u043a \u043c\u0435\u0442\u043e\u0434\u0443 `configure`.  \n \u041f\u0440\u0438\u043c\u0435\u0440\n \n ```java\n // \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438\n-Map<String, Object> configuration = diagnosticInstance.getInfo().getDefaultDiagnosticConfiguration();\n+Map<String, Object> configuration = diagnosticInstance.getInfo().getDefaultConfiguration();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3134c96cbafd8d10999ec2b67510384a4bea332b", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/3134c96cbafd8d10999ec2b67510384a4bea332b", "committedDate": "2020-04-11T22:57:02Z", "message": "\u0443\u0442\u043e\u0447\u043d\u0438\u043b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0bdb686770302deafdb1172c7831bbfa38dc8fd", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/b0bdb686770302deafdb1172c7831bbfa38dc8fd", "committedDate": "2020-04-11T23:02:47Z", "message": "\u0435\u0449\u0435 \u0443\u0441\u043a\u043e\u0440\u0438\u043b, \u0434\u043e\u0431\u0430\u0432\u0438\u0432 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxODExNjgx", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#pullrequestreview-391811681", "createdAt": "2020-04-12T00:54:51Z", "commit": {"oid": "b0bdb686770302deafdb1172c7831bbfa38dc8fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwMDo1NDo1MVrOGERLIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwMDo1NDo1MVrOGERLIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODg2Nw==", "bodyText": "https://t.me/bsl_language_server/38546", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407128867", "createdAt": "2020-04-12T00:54:51Z", "author": {"login": "asosnoviy"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java", "diffHunk": "@@ -62,6 +62,11 @@\n     return getDiagnostics(documentContext);\n   }\n \n+  protected List<Diagnostic> getDiagnosticsForText(String textDocumentContent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0bdb686770302deafdb1172c7831bbfa38dc8fd"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxODExNzI2", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#pullrequestreview-391811726", "createdAt": "2020-04-12T00:55:39Z", "commit": {"oid": "b0bdb686770302deafdb1172c7831bbfa38dc8fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwMDo1NTo0MFrOGERLXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwMDo1NTo0MFrOGERLXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODkyNQ==", "bodyText": "\u0411\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407128925", "createdAt": "2020-04-12T00:55:40Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/DocumentContext.java", "diffHunk": "@@ -98,6 +98,8 @@ public String getContent() {\n   }\n \n   public String[] getContentList() {\n+    // \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 - \u0432 DocumentContext.contentList \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0444\u0430\u0439\u043b\u0435\n+    // \u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c ConsecutiveEmptyLinesDiagnostic - \u043c\u0435\u0442\u043e\u0434 getQuickFixes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0bdb686770302deafdb1172c7831bbfa38dc8fd"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdf3d9f94f20100dec1f3e5d0f7b01729fe43e0b", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/bdf3d9f94f20100dec1f3e5d0f7b01729fe43e0b", "committedDate": "2020-04-12T12:23:50Z", "message": "\u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043b \u0432\u043d\u0435\u0441\u0435\u043d\u043d\u0443\u044e \u043e\u0448\u0438\u0431\u043a\u0443 + \u0434\u043e\u0431\u0430\u0432\u0438\u043b \u043c\u0435\u043b\u043a\u0438\u0445 \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u043e\u0432 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438\n\n\u0442\u0430\u043a\u0436\u0435 \u0443\u0442\u043e\u0447\u043d\u0438\u043b \u043c\u0435\u0442\u043e\u0434 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4435d4bd3bafed4f90a3b4f0459958f76522b7bf", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/4435d4bd3bafed4f90a3b4f0459958f76522b7bf", "committedDate": "2020-04-12T12:46:15Z", "message": "\u0443\u0431\u0440\u0430\u043b \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439, \u0442.\u043a. \u0437\u0430\u0432\u0435\u043b \u0441\u043f\u0435\u0446.\u0438\u0448\u0443\u0437 \u043d\u0430 \u044d\u0442\u0443 \u0442\u0435\u043c\u0443"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxODkxMTU1", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#pullrequestreview-391891155", "createdAt": "2020-04-12T20:09:13Z", "commit": {"oid": "4435d4bd3bafed4f90a3b4f0459958f76522b7bf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMDowOToxM1rOGEYWPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMDowOToxM1rOGEYWPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI0NjM5OQ==", "bodyText": "\u0412\u0441\u0435 \u0435\u0449\u0435 \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u044e \u0437\u0430\u0447\u0435\u043c \u0442\u0443\u0442 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043a\u0430. \u041f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u044e \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 \u043d\u0435\u0435.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407246399", "createdAt": "2020-04-12T20:09:13Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+  private static final Pattern DEFAULT_EMPTY_LINES_REGEX = Pattern.compile(\"^(\\\\s*[\\\\n\\\\r]+\\\\s*){2,}\");\n+  private Pattern emptyLinesRegex = DEFAULT_EMPTY_LINES_REGEX;\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    if (configuration == null){\n+      return;\n+    }\n+    super.configure(configuration);\n+    this.allowedEmptyLinesCount = (Integer) configuration.getOrDefault(\"allowedEmptyLinesCount\", allowedEmptyLinesCount);\n+    emptyLinesRegex = Pattern.compile(DEFAULT_EMPTY_LINES_REGEX.pattern()\n+      .replace(\"2\", \"\" + (allowedEmptyLinesCount + 1)));\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    tokens.stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    checkLastToken(tokens, prevLineStorage[0], documentContext);\n+  }\n+\n+  private void checkLastToken(List<Token> tokens, int prevLine, DocumentContext documentContext) {\n+    // \u0435\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043f\u0430\u0440\u0441\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d \u0441 \u0442\u0435\u043c \u0436\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438,\n+    // \u0447\u0442\u043e \u0438 \u0442\u043e\u043a\u0435\u043d, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432. \u0432 \u0442\u0435\u0441\u0442\u0435 \u044d\u0442\u043e\u0442 \u043a\u0435\u0439\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f.\n+    final var lastIndex = tokens.size() - 1;\n+    if (isOnlyWhiteSpacesLines(tokens.get(lastIndex))) {\n+      var eofToken = documentContext.getTokens().get(documentContext.getTokens().size() - 1).getTokenSource().nextToken();\n+      addIssue(prevLine, eofToken.getLine());\n+    }\n+  }\n+\n+  private boolean isOnlyWhiteSpacesLines(Token token) {\n+    return isWhiteSpace(token)\n+      && emptyLinesRegex.matcher(token.getText()).matches();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4435d4bd3bafed4f90a3b4f0459958f76522b7bf"}, "originalPosition": 122}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "621b5839137483fa332369c40c096b306f0c162b", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/621b5839137483fa332369c40c096b306f0c162b", "committedDate": "2020-04-13T08:59:03Z", "message": "Merge branch 'develop' into ConsecutiveEmptyLines-958"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/83b05dd62577e92a9f076c140eaedfd24e06388c", "committedDate": "2020-04-13T09:18:46Z", "message": "\u0418\u0437\u0431\u0430\u0432\u0438\u043b\u0441\u044f \u043e\u0442 \u0443\u0441\u0442\u0430\u0440\u0435\u0432\u0448\u0438\u0445 \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432\n\n\u043f\u0435\u0440\u0435\u043d\u0435\u0441 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0439 \u0445\u0435\u043b\u043f\u0435\u0440 \u0432 \u0441\u0432\u043e\u0439 \u043a\u043b\u0430\u0441\u0441 \u0442\u0435\u0441\u0442\u0430"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMDUwMzk3", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#pullrequestreview-392050397", "createdAt": "2020-04-13T09:34:42Z", "commit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwOTozNDo0MlrOGEhvLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwOTozNDo0MlrOGEhvLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQwMDIzNg==", "bodyText": "\u041c\u043d\u0435 \u043f\u0440\u0430\u0432\u0434\u0430 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e \u0447\u0442\u043e \u044d\u0442\u043e? \u0418 \u0434\u043b\u044f \u0447\u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407400236", "createdAt": "2020-04-13T09:34:42Z", "author": {"login": "asosnoviy"}, "path": ".editorconfig", "diffHunk": "@@ -2,3 +2,5 @@\n trim_trailing_whitespace = false\n [src/test/resources/providers/format.bsl]\n trim_trailing_whitespace = false\n+[src/test/resources/diagnostics/ConsecutiveEmptyLinesDiagnostic.bsl]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMDYyOTU1", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#pullrequestreview-392062955", "createdAt": "2020-04-13T10:06:07Z", "commit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMDowNjowN1rOGEiYtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMDowNjowN1rOGEiYtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQxMDg2OA==", "bodyText": "\u0414\u0430\u0432\u0430\u0439 \u0432\u043e\u0442 \u044d\u0442\u043e \u0432\u0441\u0435 \u0442\u043e\u0436\u0435, \u043f\u043e\u043a\u0430 \u0432 \u0442\u0435\u0441\u0442, \u0447\u0442\u043e\u0431\u044b \u0432 \u041f\u0420 \u0431\u044b\u043b\u0430 \u0438\u043c\u0435\u043d\u043d\u043e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0430.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407410868", "createdAt": "2020-04-13T10:06:07Z", "author": {"login": "asosnoviy"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java", "diffHunk": "@@ -101,14 +101,23 @@ protected DocumentContext getDocumentContext() {\n \n   @SneakyThrows\n   protected DocumentContext getDocumentContext(String SimpleFileName) {\n+    String textDocumentContent = getText(SimpleFileName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNDY3Njc5", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#pullrequestreview-392467679", "createdAt": "2020-04-13T21:56:06Z", "commit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTo1NjowNlrOGE2v9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTo1NjowNlrOGE2v9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NDUwMw==", "bodyText": "\u0410 \u043e\u0442\u043a\u0443\u0434\u0430 \u0442\u0443\u0442 \u043b\u0438\u0448\u043d\u044f\u044f \u0441\u0442\u0440\u043e\u043a\u0430?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407744503", "createdAt": "2020-04-13T21:56:06Z", "author": {"login": "asosnoviy"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.util.TestUtils;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<ConsecutiveEmptyLinesDiagnostic> {\n+  ConsecutiveEmptyLinesDiagnosticTest() {\n+    super(ConsecutiveEmptyLinesDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test_EmptyTwoFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 1, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLinesWithSpaces() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \" \\n\" +\n+      \" \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_WorseEmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \"  \\n\" +\n+      \"  \u041c\u0435\u0442\u043e\u04341(); //\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438  \\n\" +\n+      \"\\n\" +\n+      \"  \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(3, 0, 4, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 3, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyLastLines() {\n+    String module = \"\u041f\u0435\u0440\u0435\u043c \u0410;\\n\" +\n+      \"\\n\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 140}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff1e6813534ca756ac73b74639fa63b35f0f7689", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/ff1e6813534ca756ac73b74639fa63b35f0f7689", "committedDate": "2020-04-14T08:14:49Z", "message": "\u0443\u0434\u0430\u043b\u0438\u043b \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "981950ecdd092f66cd5ff47585cdfb2e48bef42b", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/981950ecdd092f66cd5ff47585cdfb2e48bef42b", "committedDate": "2020-04-14T08:15:15Z", "message": "Merge branch 'develop' into ConsecutiveEmptyLines-958"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNzQxMDEx", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#pullrequestreview-392741011", "createdAt": "2020-04-14T09:08:47Z", "commit": {"oid": "ff1e6813534ca756ac73b74639fa63b35f0f7689"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTowODo0N1rOGFFSsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTowODo0N1rOGFFSsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4Mjc3MQ==", "bodyText": "\u0412\u043e\u0442 \u044d\u0442\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043a\u0430\u043a\u0442\u043e \u0440\u0430\u0437\u0440\u0443\u043b\u0438\u0442\u044c\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u044f EOF", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407982771", "createdAt": "2020-04-14T09:08:47Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    tokens.stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    checkLastToken(tokens, prevLineStorage[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1e6813534ca756ac73b74639fa63b35f0f7689"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNzQxNDQ5", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#pullrequestreview-392741449", "createdAt": "2020-04-14T09:09:23Z", "commit": {"oid": "ff1e6813534ca756ac73b74639fa63b35f0f7689"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTowOToyM1rOGFFUKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTowOToyM1rOGFFUKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4MzE0NQ==", "bodyText": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u043d\u0443\u0436\u043d\u0430?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407983145", "createdAt": "2020-04-14T09:09:23Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    tokens.stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    checkLastToken(tokens, prevLineStorage[0]);\n+  }\n+\n+  private void checkLastToken(List<Token> tokens, int prevLine) {\n+    // \u0435\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043f\u0430\u0440\u0441\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d \u0441 \u0442\u0435\u043c \u0436\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438,\n+    // \u0447\u0442\u043e \u0438 \u0442\u043e\u043a\u0435\u043d, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432. \u0432 \u0442\u0435\u0441\u0442\u0435 \u044d\u0442\u043e\u0442 \u043a\u0435\u0439\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f.\n+    var eofLine = getEofToken(tokens).getLine();\n+    if (eofLine - prevLine > allowedEmptyLinesCount){\n+      addIssue(prevLine, eofLine);\n+    }\n+  }\n+\n+  private static Token getEofToken(List<Token> tokens) {\n+    final var lastIndex = tokens.size() - 1;\n+    return tokens.get(lastIndex).getTokenSource().nextToken();\n+  }\n+\n+  private static boolean isWhiteSpace(Token token) {\n+    return token.getChannel() == Token.HIDDEN_CHANNEL && token.getType() == BSLLexer.WHITE_SPACE;\n+  }\n+\n+  private void addIssue(int startEmptyLine, int lastEmptyLine) {\n+    Range range = Ranges.create(startEmptyLine, 0, lastEmptyLine - 1, 0);\n+    diagnosticStorage.addDiagnostic(range);\n+  }\n+\n+  @Override\n+  public List<CodeAction> getQuickFixes(\n+      List<Diagnostic> diagnostics, CodeActionParams params, DocumentContext documentContext) {\n+\n+    List<TextEdit> textEdits = new ArrayList<>();\n+\n+    diagnostics.forEach((Diagnostic diagnostic) -> {\n+      Range range = diagnostic.getRange();\n+\n+      Range newRange = Ranges.create(range.getStart().getLine(), 0, range.getEnd().getLine() + 1, 0);\n+      // \u0438\u0437-\u0437\u0430 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0432 DocumentContext.contentList \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0444\u0430\u0439\u043b\u0435\n+      // \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0434\u0435\u043b\u0430\u0442\u044c \u0442\u0430\u043a\u0443\u044e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443\n+      try {\n+        documentContext.getText(newRange);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1e6813534ca756ac73b74639fa63b35f0f7689"}, "originalPosition": 132}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyODgxNDI5", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#pullrequestreview-392881429", "createdAt": "2020-04-14T12:34:24Z", "commit": {"oid": "ff1e6813534ca756ac73b74639fa63b35f0f7689"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjozNDoyNFrOGFMa6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjozNDoyNFrOGFMa6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5OTU2Mg==", "bodyText": "\u0410 \u0440\u0430\u0437\u0432\u0435 WHITE_SPACE \u0431\u044b\u0432\u0430\u044e\u0442 \u043d\u0435 \u0432 HIDDEN_CHANNEL ?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408099562", "createdAt": "2020-04-14T12:34:24Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    tokens.stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    checkLastToken(tokens, prevLineStorage[0]);\n+  }\n+\n+  private void checkLastToken(List<Token> tokens, int prevLine) {\n+    // \u0435\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043f\u0430\u0440\u0441\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d \u0441 \u0442\u0435\u043c \u0436\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438,\n+    // \u0447\u0442\u043e \u0438 \u0442\u043e\u043a\u0435\u043d, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432. \u0432 \u0442\u0435\u0441\u0442\u0435 \u044d\u0442\u043e\u0442 \u043a\u0435\u0439\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f.\n+    var eofLine = getEofToken(tokens).getLine();\n+    if (eofLine - prevLine > allowedEmptyLinesCount){\n+      addIssue(prevLine, eofLine);\n+    }\n+  }\n+\n+  private static Token getEofToken(List<Token> tokens) {\n+    final var lastIndex = tokens.size() - 1;\n+    return tokens.get(lastIndex).getTokenSource().nextToken();\n+  }\n+\n+  private static boolean isWhiteSpace(Token token) {\n+    return token.getChannel() == Token.HIDDEN_CHANNEL && token.getType() == BSLLexer.WHITE_SPACE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1e6813534ca756ac73b74639fa63b35f0f7689"}, "originalPosition": 111}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d349138721a968454888606a60128eff9185122", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/6d349138721a968454888606a60128eff9185122", "committedDate": "2020-04-14T12:35:29Z", "message": "\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u043f\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f EOF \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0442\u043e\u043a\u0435\u043d\u043e\u0432"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23c984626a287143b1d201fdd40490dabf72416f", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/23c984626a287143b1d201fdd40490dabf72416f", "committedDate": "2020-04-14T12:38:28Z", "message": "\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u0432 \u043a\u043e\u043d\u0446\u0435 \u043c\u043e\u0434\u0443\u043b\u044f\n\n\u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u044b \u043a\u0432\u0438\u043a-\u0444\u0438\u043a\u0441\u043e\u0432 \u0434\u043b\u044f \u0441\u0442\u0440\u043e\u043a"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "890c65954bfc9c50dd76adfa5eba85ea30c971ae", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/890c65954bfc9c50dd76adfa5eba85ea30c971ae", "committedDate": "2020-04-14T12:38:52Z", "message": "\u0434\u043e\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u043b\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043a\u0432\u0438\u043a-\u0444\u0438\u043a\u0441\u043e\u0432 \u0434\u043b\u044f \u0441\u0442\u0440\u043e\u043a"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyOTEwNTQ5", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#pullrequestreview-392910549", "createdAt": "2020-04-14T13:11:10Z", "commit": {"oid": "890c65954bfc9c50dd76adfa5eba85ea30c971ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzoxMToxMFrOGFN4yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzoxMToxMFrOGFN4yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEyMzU5NQ==", "bodyText": "\u042d\u0442\u043e \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432 \u043c\u0435\u0442\u043e\u0434 \u043d\u0435 \u043e\u0431\u043b\u0435\u0433\u0447\u0430\u0435\u0442 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u043a\u0430\u0436\u0435\u0442\u0441\u044f \u043b\u0443\u0447\u0448\u0435 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043e\u0431\u0440\u0430\u0442\u043d\u043e. \u0418 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u0440\u043e \u043a\u0430\u043a\u0438\u0435 \u0442\u043e \u0442\u043e\u043a\u0435\u043d\u044b. \u041d\u043e \u043c\u0435\u0442\u043e\u0434 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0442\u043e\u0436\u0435 \u0441\u0430\u043c\u043e\u0435 \u0447\u0442\u043e \u0438 \u0432 85\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u043d\u043e \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c  \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c prevLineStorage[0]. \u0424\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044e \u0446\u0438\u043a\u043b\u0430.\n\u041f\u0441. \u041d\u0430\u0433\u043d\u0430\u043b.  \u041f\u0435\u0440\u0432\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0434\u0440\u0443\u0433\u043e\u0439", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408123595", "createdAt": "2020-04-14T13:11:10Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    // \u0431\u0435\u0437 EOF \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430\n+    tokens.subList(0, tokens.size() - 1)\n+      .stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    var eofLine = getEofToken(tokens).getLine();\n+    checkLastToken(eofLine, prevLineStorage[0]);\n+  }\n+\n+  private void checkLastToken(int eofLine, int prevLine) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "890c65954bfc9c50dd76adfa5eba85ea30c971ae"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyOTkzMTY4", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#pullrequestreview-392993168", "createdAt": "2020-04-14T14:38:38Z", "commit": {"oid": "890c65954bfc9c50dd76adfa5eba85ea30c971ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDozODozOVrOGFR3VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDozODozOVrOGFR3VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4ODc1Nw==", "bodyText": "\u041a\u0430\u0436\u0435\u0442\u0441\u044f \u044d\u0442\u0430 \u0432\u0435\u0442\u043a\u0430 \u043b\u0438\u0448\u043d\u044f\u044f", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408188757", "createdAt": "2020-04-14T14:38:39Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    // \u0431\u0435\u0437 EOF \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430\n+    tokens.subList(0, tokens.size() - 1)\n+      .stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "890c65954bfc9c50dd76adfa5eba85ea30c971ae"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyOTk1NTgx", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#pullrequestreview-392995581", "createdAt": "2020-04-14T14:41:07Z", "commit": {"oid": "890c65954bfc9c50dd76adfa5eba85ea30c971ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0MTowOFrOGFR_Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0MTowOFrOGFR_Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5MDc1OQ==", "bodyText": "\u0422\u043e\u0436\u0435 \u043d\u0435\u043f\u043e\u043d\u044f\u0442\u043d\u043e\u0435 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432 \u043c\u0435\u0442\u043e\u0434 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438. \u0417\u0430 \u0432\u044b\u0437\u043e\u0432\u043e\u043c \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u0430\u0441\u043a\u0438\u0440\u043a\u0443\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u043e\u0432", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408190759", "createdAt": "2020-04-14T14:41:08Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    // \u0431\u0435\u0437 EOF \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430\n+    tokens.subList(0, tokens.size() - 1)\n+      .stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    var eofLine = getEofToken(tokens).getLine();\n+    checkLastToken(eofLine, prevLineStorage[0]);\n+  }\n+\n+  private void checkLastToken(int eofLine, int prevLine) {\n+    // \u0435\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043f\u0430\u0440\u0441\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d \u0441 \u0442\u0435\u043c \u0436\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438,\n+    // \u0447\u0442\u043e \u0438 \u0442\u043e\u043a\u0435\u043d, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432. \u0432 \u0442\u0435\u0441\u0442\u0435 \u044d\u0442\u043e\u0442 \u043a\u0435\u0439\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f.\n+    if (eofLine - prevLine > allowedEmptyLinesCount){\n+      addIssue(prevLine, eofLine);\n+    }\n+  }\n+\n+  private static Token getEofToken(List<Token> tokens) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "890c65954bfc9c50dd76adfa5eba85ea30c971ae"}, "originalPosition": 106}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c42fb1986fdc6c11b08da45e687a9cdd662e3cc", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/1c42fb1986fdc6c11b08da45e687a9cdd662e3cc", "committedDate": "2020-04-14T20:05:12Z", "message": "\u0443\u043f\u0440\u043e\u0441\u0442\u0438\u043b \u043a\u043e\u0434, \u0438\u0437\u0431\u0430\u0432\u0438\u043b\u0441\u044f \u043e\u0442 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\n\n- \u0443\u0431\u0440\u0430\u043b \u043d\u0435\u043d\u0443\u0436\u043d\u0443\u044e \u0437\u0430\u0449\u0438\u0442\u0443 \u043e\u0442 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442-\u0444\u0430\u0439\u043b\u0435,\n\u0442.\u043a. \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u0435\u0441\u0442\u044c \u043c\u0438\u043d\u0438-\u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u044b, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044e\u0449\u0438\u0435 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u044b"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0f6039de4f899c556e04f083ffcbd7d56a286d1", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/c0f6039de4f899c556e04f083ffcbd7d56a286d1", "committedDate": "2020-04-15T16:45:56Z", "message": "Merge remote-tracking branch 'origin/develop' into ConsecutiveEmptyLines-958\n\n# Conflicts:\n#\tbuild.gradle.kts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfa6aeb322967856015a5b458c37e58f1e6a8094", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/dfa6aeb322967856015a5b458c37e58f1e6a8094", "committedDate": "2020-04-15T16:56:06Z", "message": "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0430\u0432\u0438\u043b \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f precommit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6db1f3e9f74ef711088916607c4b0bddc1ada40", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/c6db1f3e9f74ef711088916607c4b0bddc1ada40", "committedDate": "2020-04-15T17:12:20Z", "message": "Merge remote-tracking branch 'origin/develop' into ConsecutiveEmptyLines-958\n\n# Conflicts:\n#\tdocs/en/diagnostics/index.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d91edd1f5ce1bc22846f949d93cd5d960e642b2e", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/d91edd1f5ce1bc22846f949d93cd5d960e642b2e", "committedDate": "2020-04-15T17:17:28Z", "message": "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0430\u0432\u0438\u043b \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f precommit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzOTkyMTAz", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#pullrequestreview-393992103", "createdAt": "2020-04-15T17:37:38Z", "commit": {"oid": "d91edd1f5ce1bc22846f949d93cd5d960e642b2e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzozNzozOFrOGGEdoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzozNzozOFrOGGEdoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxNzc2MA==", "bodyText": "\u0410 \u0432\u043e\u0442 \u044d\u0442\u043e \u043d\u0435 \u043d\u0430\u0434\u043e \u0431\u044b\u043b\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0438\u0442\u044c =(", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r409017760", "createdAt": "2020-04-15T17:37:38Z", "author": {"login": "asosnoviy"}, "path": "src/test/resources/cli/test.bsl", "diffHunk": "@@ -1 +1 @@\n-\u0421\u043e\u043e\u0431\u0449\u0438\u0442\u044c(\"\u041f\u0440\u0438\u0432\u0435\u0442, \u043c\u0438\u0440!\");\n+\u0421\u043e\u043e\u0431\u0449\u0438\u0442\u044c(\"\u041f\u0440\u0438\u0432\u0435\u0442, \u043c\u0438\u0440!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d91edd1f5ce1bc22846f949d93cd5d960e642b2e"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODk5MjUx", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#pullrequestreview-395899251", "createdAt": "2020-04-18T09:45:29Z", "commit": {"oid": "d91edd1f5ce1bc22846f949d93cd5d960e642b2e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwOTo0NTozMFrOGHpq0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwOTo0NTozMFrOGHpq0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTkyMw==", "bodyText": "@artbear \u0440\u0430\u0441\u0441\u043a\u0430\u0436\u0438, \u043f\u043b\u0437, \u0447\u0442\u043e \u043d\u0435 \u0442\u0430\u043a \u0441 EOF?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r410675923", "createdAt": "2020-04-18T09:45:30Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int[] prevLineStorage = {0};\n+    // \u0431\u0435\u0437 EOF, \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d91edd1f5ce1bc22846f949d93cd5d960e642b2e"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODk5MjY2", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#pullrequestreview-395899266", "createdAt": "2020-04-18T09:45:46Z", "commit": {"oid": "d91edd1f5ce1bc22846f949d93cd5d960e642b2e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwOTo0NTo0N1rOGHpq6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwOTo0NTo0N1rOGHpq6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTk0NA==", "bodyText": "\u043d\u0430\u0434\u043e \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0434\u043e\u043a\u0443 \u0432 \u043f\u043e\u0440\u044f\u0434\u043e\u043a", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r410675944", "createdAt": "2020-04-18T09:45:47Z", "author": {"login": "nixel2007"}, "path": "docs/diagnostics/ConsecutiveEmptyLines.md", "diffHunk": "@@ -0,0 +1,51 @@\n+# \u041f\u043e\u0434\u0440\u044f\u0434 \u0438\u0434\u0443\u0449\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 (ConsecutiveEmptyLines)\n+\n+| \u0422\u0438\u043f | \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f<br/>\u044f\u0437\u044b\u043a\u0438 | \u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c | \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u0430<br/>\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e | \u0412\u0440\u0435\u043c\u044f \u043d\u0430<br/>\u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 (\u043c\u0438\u043d) | \u0422\u044d\u0433\u0438 |\n+| :-: | :-: | :-: | :-: | :-: | :-: |\n+| `\u0414\u0435\u0444\u0435\u043a\u0442 \u043a\u043e\u0434\u0430` | `BSL`<br/>`OS` | `\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439` | `\u0414\u0430` | `1` | `badpractice` |\n+\n+## \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \n+\n+| \u0418\u043c\u044f | \u0422\u0438\u043f | \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 | \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e |\n+| :-: | :-: | :-- | :-: |\n+| `allowedEmptyLinesCount` | `\u0426\u0435\u043b\u043e\u0435` | ```\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a``` | ```1``` |\n+\n+<!-- \u0411\u043b\u043e\u043a\u0438 \u0432\u044b\u0448\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438, \u043d\u0435 \u0442\u0440\u043e\u0433\u0430\u0442\u044c -->\n+## \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438\n+<!-- \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0432\u0440\u0443\u0447\u043d\u0443\u044e. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u043c \u044f\u0437\u044b\u043a\u043e\u043c \u043e\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043c\u044b\u0441\u043b \u0438 \u0441\u0445\u0435\u043c\u0443 \u0440\u0430\u0431\u043e\u0442\u0443 -->\n+\n+\u0414\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0431\u043b\u043e\u043a\u043e\u0432 \u043a\u043e\u0434\u0430 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432\u0441\u0442\u0430\u0432\u043a\u0430 \u043f\u0443\u0441\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438. \n+\n+\u0412\u0441\u0442\u0430\u0432\u043a\u0430 2-\u0445 \u0438 \u0431\u043e\u043b\u0435\u0435 \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u043d\u0435 \u043d\u0435\u0441\u0435\u0442 \u0434\u0430\u043d\u043d\u043e\u0439 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0438 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u0431\u0435\u0441\u0441\u043c\u044b\u0441\u043b\u0435\u043d\u043d\u043e\u043c\u0443 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u044e \u0434\u043b\u0438\u043d\u044b \u043c\u0435\u0442\u043e\u0434\u0430 \u0438\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044f.\n+<!-- \u0411\u043b\u043e\u043a\u0438 \u043d\u0438\u0436\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438, \u043d\u0435 \u0442\u0440\u043e\u0433\u0430\u0442\u044c -->\n+\n+### \u042d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u0434\u0430", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d91edd1f5ce1bc22846f949d93cd5d960e642b2e"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfe096a1b47277441edade1dd65e7e12f26c408f", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/bfe096a1b47277441edade1dd65e7e12f26c408f", "committedDate": "2020-04-18T11:11:52Z", "message": "Merge remote-tracking branch 'origin/develop' into ConsecutiveEmptyLines-958"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18e1a978b2f4c8f4ef80d513c7d5ec1638d72605", "author": {"user": {"login": "artbear", "name": "Artur Ayukhanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/18e1a978b2f4c8f4ef80d513c7d5ec1638d72605", "committedDate": "2020-04-19T10:06:26Z", "message": "\u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043b \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8785509aadd55e3290db1f86f752113f2b53ebcf", "author": {"user": {"login": "nixel2007", "name": "Nikita Fedkin"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/8785509aadd55e3290db1f86f752113f2b53ebcf", "committedDate": "2020-04-21T14:50:49Z", "message": "fix qf"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4914, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}