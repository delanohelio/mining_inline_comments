{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0NjUzOTYw", "number": 1082, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOTo1MDoyNFrODypsWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTo0NjowNFrODy1mdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDM4NDg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/InvalidCharacterInFileDiagnostic.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOTo1MDoyNFrOGG0xag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOToxNzoyM1rOGHGbfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwOTI1OA==", "bodyText": "LINE_COMMENT \u0432 HIDDEN  \u043a\u0430\u043d\u0430\u043b\u0435", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1082#discussion_r409809258", "createdAt": "2020-04-16T19:50:24Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/InvalidCharacterInFileDiagnostic.java", "diffHunk": "@@ -69,31 +71,36 @@\n       \"])\",\n     Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n \n+  private final String diagnosticMessageDash;\n+  private final String diagnosticMessageSpace;\n+\n   public InvalidCharacterInFileDiagnostic(DiagnosticInfo info) {\n     super(info);\n+    diagnosticMessageDash = info.getResourceString(\"diagnosticMessageDash\");\n+    diagnosticMessageSpace = info.getResourceString(\"diagnosticMessageSpace\");\n   }\n \n   @Override\n   public ParseTree visitFile(BSLParser.FileContext ctx) {\n-    documentContext\n-      .getTokens()\n-      .stream()\n-      .filter((Token token) -> ILLEGAL_DASH_PATTERN.matcher(token.getText()).find())\n-      .forEach(token ->\n-        diagnosticStorage.addDiagnostic(\n-          token,\n-          info.getResourceString(\"diagnosticMessageDash\"))\n-      );\n \n     documentContext\n       .getTokens()\n       .stream()\n-      .filter((Token token) -> ILLEGAL_SPACE_PATTERN.matcher(token.getText()).find())\n+      .filter((Token token) -> token.getChannel() == Lexer.HIDDEN || token.getType() == BSLLexer.STRING\n+          || token.getType() == BSLLexer.LINE_COMMENT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dc1f3a85b9b8f9611318c381c617633b254faf7"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA5ODU1OQ==", "bodyText": "\u0430\u0433\u0430, \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u043b. \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043b", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1082#discussion_r410098559", "createdAt": "2020-04-17T09:17:23Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/InvalidCharacterInFileDiagnostic.java", "diffHunk": "@@ -69,31 +71,36 @@\n       \"])\",\n     Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n \n+  private final String diagnosticMessageDash;\n+  private final String diagnosticMessageSpace;\n+\n   public InvalidCharacterInFileDiagnostic(DiagnosticInfo info) {\n     super(info);\n+    diagnosticMessageDash = info.getResourceString(\"diagnosticMessageDash\");\n+    diagnosticMessageSpace = info.getResourceString(\"diagnosticMessageSpace\");\n   }\n \n   @Override\n   public ParseTree visitFile(BSLParser.FileContext ctx) {\n-    documentContext\n-      .getTokens()\n-      .stream()\n-      .filter((Token token) -> ILLEGAL_DASH_PATTERN.matcher(token.getText()).find())\n-      .forEach(token ->\n-        diagnosticStorage.addDiagnostic(\n-          token,\n-          info.getResourceString(\"diagnosticMessageDash\"))\n-      );\n \n     documentContext\n       .getTokens()\n       .stream()\n-      .filter((Token token) -> ILLEGAL_SPACE_PATTERN.matcher(token.getText()).find())\n+      .filter((Token token) -> token.getChannel() == Lexer.HIDDEN || token.getType() == BSLLexer.STRING\n+          || token.getType() == BSLLexer.LINE_COMMENT)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgwOTI1OA=="}, "originalCommit": {"oid": "0dc1f3a85b9b8f9611318c381c617633b254faf7"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NjMzNTkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/InvalidCharacterInFileDiagnostic.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTo0NjowNFrOGHHZGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxOTowMzoyOFrOGHtbOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExNDMzMA==", "bodyText": "STRING \u043d\u0435 \u043e\u0434\u0438\u043d\u043e\u043a", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1082#discussion_r410114330", "createdAt": "2020-04-17T09:46:04Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/InvalidCharacterInFileDiagnostic.java", "diffHunk": "@@ -69,31 +71,35 @@\n       \"])\",\n     Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n \n+  private final String diagnosticMessageDash;\n+  private final String diagnosticMessageSpace;\n+\n   public InvalidCharacterInFileDiagnostic(DiagnosticInfo info) {\n     super(info);\n+    diagnosticMessageDash = info.getResourceString(\"diagnosticMessageDash\");\n+    diagnosticMessageSpace = info.getResourceString(\"diagnosticMessageSpace\");\n   }\n \n   @Override\n   public ParseTree visitFile(BSLParser.FileContext ctx) {\n-    documentContext\n-      .getTokens()\n-      .stream()\n-      .filter((Token token) -> ILLEGAL_DASH_PATTERN.matcher(token.getText()).find())\n-      .forEach(token ->\n-        diagnosticStorage.addDiagnostic(\n-          token,\n-          info.getResourceString(\"diagnosticMessageDash\"))\n-      );\n \n     documentContext\n       .getTokens()\n       .stream()\n-      .filter((Token token) -> ILLEGAL_SPACE_PATTERN.matcher(token.getText()).find())\n+      .filter((Token token) -> token.getChannel() == Lexer.HIDDEN || token.getType() == BSLLexer.STRING)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05d0d9872ca11749ede8e3c7c964573bcf6d8c68"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE5MjY3Ng==", "bodyText": "\u0436\u0435\u0441\u0442\u044c. \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u044e", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1082#discussion_r410192676", "createdAt": "2020-04-17T12:35:52Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/InvalidCharacterInFileDiagnostic.java", "diffHunk": "@@ -69,31 +71,35 @@\n       \"])\",\n     Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n \n+  private final String diagnosticMessageDash;\n+  private final String diagnosticMessageSpace;\n+\n   public InvalidCharacterInFileDiagnostic(DiagnosticInfo info) {\n     super(info);\n+    diagnosticMessageDash = info.getResourceString(\"diagnosticMessageDash\");\n+    diagnosticMessageSpace = info.getResourceString(\"diagnosticMessageSpace\");\n   }\n \n   @Override\n   public ParseTree visitFile(BSLParser.FileContext ctx) {\n-    documentContext\n-      .getTokens()\n-      .stream()\n-      .filter((Token token) -> ILLEGAL_DASH_PATTERN.matcher(token.getText()).find())\n-      .forEach(token ->\n-        diagnosticStorage.addDiagnostic(\n-          token,\n-          info.getResourceString(\"diagnosticMessageDash\"))\n-      );\n \n     documentContext\n       .getTokens()\n       .stream()\n-      .filter((Token token) -> ILLEGAL_SPACE_PATTERN.matcher(token.getText()).find())\n+      .filter((Token token) -> token.getChannel() == Lexer.HIDDEN || token.getType() == BSLLexer.STRING)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExNDMzMA=="}, "originalCommit": {"oid": "05d0d9872ca11749ede8e3c7c964573bcf6d8c68"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczMjA3NA==", "bodyText": "\u041c\u043d\u043e\u0433\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0441\u0435 \u0435\u0449\u0435 \u043d\u0435 \u043e\u0442\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1082#discussion_r410732074", "createdAt": "2020-04-18T18:20:02Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/InvalidCharacterInFileDiagnostic.java", "diffHunk": "@@ -69,31 +71,35 @@\n       \"])\",\n     Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n \n+  private final String diagnosticMessageDash;\n+  private final String diagnosticMessageSpace;\n+\n   public InvalidCharacterInFileDiagnostic(DiagnosticInfo info) {\n     super(info);\n+    diagnosticMessageDash = info.getResourceString(\"diagnosticMessageDash\");\n+    diagnosticMessageSpace = info.getResourceString(\"diagnosticMessageSpace\");\n   }\n \n   @Override\n   public ParseTree visitFile(BSLParser.FileContext ctx) {\n-    documentContext\n-      .getTokens()\n-      .stream()\n-      .filter((Token token) -> ILLEGAL_DASH_PATTERN.matcher(token.getText()).find())\n-      .forEach(token ->\n-        diagnosticStorage.addDiagnostic(\n-          token,\n-          info.getResourceString(\"diagnosticMessageDash\"))\n-      );\n \n     documentContext\n       .getTokens()\n       .stream()\n-      .filter((Token token) -> ILLEGAL_SPACE_PATTERN.matcher(token.getText()).find())\n+      .filter((Token token) -> token.getChannel() == Lexer.HIDDEN || token.getType() == BSLLexer.STRING)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExNDMzMA=="}, "originalCommit": {"oid": "05d0d9872ca11749ede8e3c7c964573bcf6d8c68"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDczNzQ2Nw==", "bodyText": "\u0441\u0434\u0435\u043b\u0430\u043d\u043e. \u043c\u0443\u043b\u044c\u0442\u0438-\u0441\u0442\u0440\u043e\u043a\u0438 \u0442\u0430\u043a\u0436\u0435 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1082#discussion_r410737467", "createdAt": "2020-04-18T19:03:28Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/InvalidCharacterInFileDiagnostic.java", "diffHunk": "@@ -69,31 +71,35 @@\n       \"])\",\n     Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n \n+  private final String diagnosticMessageDash;\n+  private final String diagnosticMessageSpace;\n+\n   public InvalidCharacterInFileDiagnostic(DiagnosticInfo info) {\n     super(info);\n+    diagnosticMessageDash = info.getResourceString(\"diagnosticMessageDash\");\n+    diagnosticMessageSpace = info.getResourceString(\"diagnosticMessageSpace\");\n   }\n \n   @Override\n   public ParseTree visitFile(BSLParser.FileContext ctx) {\n-    documentContext\n-      .getTokens()\n-      .stream()\n-      .filter((Token token) -> ILLEGAL_DASH_PATTERN.matcher(token.getText()).find())\n-      .forEach(token ->\n-        diagnosticStorage.addDiagnostic(\n-          token,\n-          info.getResourceString(\"diagnosticMessageDash\"))\n-      );\n \n     documentContext\n       .getTokens()\n       .stream()\n-      .filter((Token token) -> ILLEGAL_SPACE_PATTERN.matcher(token.getText()).find())\n+      .filter((Token token) -> token.getChannel() == Lexer.HIDDEN || token.getType() == BSLLexer.STRING)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExNDMzMA=="}, "originalCommit": {"oid": "05d0d9872ca11749ede8e3c7c964573bcf6d8c68"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4752, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}