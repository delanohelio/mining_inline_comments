{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMTk1NDI4", "number": 1413, "title": "\u0414\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0430: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u041c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0434\u0430\u0442", "bodyText": "\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\n\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0430 \u043c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0434\u0430\u0442 \u0432 \u043a\u043e\u0434\u0435 \u0434\u043b\u044f \u043b\u0438\u0442\u0435\u0440\u0430\u043b\u043e\u0432 \u0434\u0430\u0442\u044b, \u043a\u0430\u043a \u043e\u043d\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0432 bsl-parser, \u0438 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0414\u0430\u0442\u0430(), \u0442\u0443\u0442 \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u043e\u0435 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435\n\u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438\nCloses: #575\n\u0427\u0435\u043a\u043b\u0438\u0441\u0442\n\u041e\u0431\u0449\u0438\u0435\n\n \u0412\u0435\u0442\u043a\u0430 PR \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0430 \u0438\u0437 develop\n \u041e\u0442\u043b\u0430\u0434\u043e\u0447\u043d\u044b\u0435, \u0437\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0438 \u043f\u0440\u043e\u0447\u0438\u0435, \u043d\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0435 \u0441\u043c\u044b\u0441\u043b\u0430 \u0443\u0447\u0430\u0441\u0442\u043a\u0438 \u043a\u043e\u0434\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u044b\n \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u043a\u0440\u044b\u0442\u044b \u0442\u0435\u0441\u0442\u0430\u043c\u0438\n \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u0435\u0440\u0435\u0434 \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b (\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u043b \u043a\u043e\u043c\u0430\u043d\u0434\u0443 gradlew precommit)\n\n\u0414\u043b\u044f \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\n\n \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043e \u0434\u043b\u044f \u043e\u0431\u043e\u0438\u0445 \u044f\u0437\u044b\u043a\u043e\u0432 (\u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439 \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u0435\u043d)\n\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\n\u041f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 gradlew precommit \u0437\u0430\u043e\u0434\u043d\u043e \u043f\u043e\u043c\u0435\u043d\u044f\u043b\u0438\u0441\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0430\u0432\u0442\u043e\u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u0434\u0440\u0443\u0433\u0438\u0445 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0430\u0445 - \u0432\u0438\u0434\u0438\u043c\u043e, \u0438\u0445 \u043f\u0440\u0430\u0432\u0438\u043b\u0438 \u0432\u0440\u0443\u0447\u043d\u0443\u044e?", "createdAt": "2020-10-30T18:08:00Z", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413", "merged": true, "mergeCommit": {"oid": "a2d65fc034e75c83cb61e9f4592295565930a0f2"}, "closed": true, "closedAt": "2020-11-07T13:43:50Z", "author": {"login": "para11ax"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXqgNKgH2gAyNTEzMTk1NDI4OmJiNjQ3Zjk5NmE4MTQ4ZTQwM2U3Mjk4MDgzMjVmYzgzNWY0MzUzZWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdaLyxsgH2gAyNTEzMTk1NDI4OmM4OGNhMDhkZjg5OWI5NmFkZmZiZGU3Yzc5ZmM4ODQ1MWRkNzIyYzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bb647f996a8148e403e729808325fc835f4353ea", "author": {"user": null}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/bb647f996a8148e403e729808325fc835f4353ea", "committedDate": "2020-10-30T17:48:41Z", "message": "\u043c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u0442\u044b \u043e\u0441\u043d. \u0444\u0430\u0439\u043b\u044b"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "578c29e47411dabdf83925113112da29390c244f", "author": {"user": null}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/578c29e47411dabdf83925113112da29390c244f", "committedDate": "2020-10-30T17:53:08Z", "message": "\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 gradlew precommit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNDQzNDYz", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#pullrequestreview-521443463", "createdAt": "2020-11-02T09:08:56Z", "commit": {"oid": "578c29e47411dabdf83925113112da29390c244f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTowODo1N1rOHr7qOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTowODo1N1rOHr7qOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgyODI4Mw==", "bodyText": "\u0434\u0443\u043c\u0430\u044e, \u043c\u043e\u0436\u043d\u043e \u0435\u0449\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c BRAINOVERLOAD", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r515828283", "createdAt": "2020-11-02T09:08:57Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.bsl.parser.BSLParserRuleContext;\n+import com.github._1c_syntax.utils.CaseInsensitivePattern;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.MINOR,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578c29e47411dabdf83925113112da29390c244f"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNDQ1NzU4", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#pullrequestreview-521445758", "createdAt": "2020-11-02T09:12:04Z", "commit": {"oid": "578c29e47411dabdf83925113112da29390c244f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOToxMjowNFrOHr7xAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOToxMjowNFrOHr7xAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzMDAxNg==", "bodyText": "\u0437\u0434\u0435\u0441\u044c \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u043e\u0438\u0437\u043e\u0439\u0442\u0438 \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432\u043d\u0443\u0442\u0440\u0438 \u0441\u043f\u0438\u0441\u043a\u0430.\n\u043b\u0443\u0447\u0448\u0435 \u0443 authorizedDates \u0443\u0431\u0440\u0430\u0442\u044c final (\u0434\u0430, \u0438\u0434\u0435\u044f \u0431\u0443\u0434\u0435\u0442 \u0440\u0443\u0433\u0430\u0442\u044c\u0441\u044f, \u043d\u043e \u044d\u0442\u043e\u0442 \u0432\u043e\u0440\u043d\u0438\u043d\u0433 \u043c\u043e\u0436\u043d\u043e \u043e\u043f\u0443\u0441\u0442\u0438\u0442\u044c), \u043f\u0435\u0440\u0435\u0434\u0435\u043b\u0430\u0442\u044c \u0435\u0433\u043e \u043d\u0430 Set (\u0442.\u043a. \u043d\u0430\u043c \u043d\u0435 \u0432\u0430\u0436\u0435\u043d \u043f\u043e\u0440\u044f\u0434\u043e\u043a, \u0438 Set \u043a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0435\u0435), \u0430 \u0432 \u044d\u0442\u043e\u043c \u043c\u0435\u0442\u043e\u0434\u0435 \u043e\u0431\u044a\u044f\u0432\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0439 HashSet \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043d\u0435\u0433\u043e.\n\u0415\u0441\u043b\u0438 \u0445\u043e\u0447\u0435\u0442\u0441\u044f \u043f\u043e\u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441 \u043b\u044f\u043c\u0431\u0434\u0430\u043c\u0438 \u0438 \u0441\u0442\u0440\u0438\u043c\u0430\u043c\u0438, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u0435\u0440\u043d\u0443\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0430\u0431\u043e\u0442\u044b split \u0432 Arrays.stream, trim \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e map \u043d\u0430 \u0441\u0442\u0440\u0438\u043c\u0435, \u0430 \u043f\u043e\u0442\u043e\u043c \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u044d\u0442\u043e \u0432\u0441\u0435 \u0432 Set \u0447\u0435\u0440\u0435\u0437 Collectors.toSet.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r515830016", "createdAt": "2020-11-02T09:12:04Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.bsl.parser.BSLParserRuleContext;\n+import com.github._1c_syntax.utils.CaseInsensitivePattern;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.MINOR,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class MagicDateDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final String DEFAULT_AUTHORIZED_DATES = \"00010101,00010101000000,000101010000\";\n+\n+  @DiagnosticParameter(\n+    type = String.class,\n+    defaultValue = \"\" + DEFAULT_AUTHORIZED_DATES\n+  )\n+  private final List<String> authorizedDates = new ArrayList<>(Arrays.asList(DEFAULT_AUTHORIZED_DATES.split(\",\")));\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    String authorizedDatesString =\n+      (String) configuration.getOrDefault(\"authorizedDates\", DEFAULT_AUTHORIZED_DATES);\n+    for (String s : authorizedDatesString.split(\",\")) {\n+      this.authorizedDates.add(s.trim());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578c29e47411dabdf83925113112da29390c244f"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNDQ3NDky", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#pullrequestreview-521447492", "createdAt": "2020-11-02T09:14:17Z", "commit": {"oid": "578c29e47411dabdf83925113112da29390c244f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOToxNDoxN1rOHr71Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOToxNDoxN1rOHr71Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzMTExOQ==", "bodyText": "\u042d\u0442\u043e\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f, \u0447\u0442\u043e \u043f\u0435\u0440\u0435\u0434 \u043d\u0430\u043c\u0438 \u0434\u0430\u0442\u0430, \u0434\u0430?\n\u041f\u043e\u0447\u0435\u043c\u0443 \u043d\u0435 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u043b\u0438\u0442\u0435\u0440\u0430\u043b \u0442\u0438\u043f\u0430 DATETIME \u0438\u0437 \u043f\u0430\u0440\u0441\u0435\u0440\u0430?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r515831119", "createdAt": "2020-11-02T09:14:17Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.bsl.parser.BSLParserRuleContext;\n+import com.github._1c_syntax.utils.CaseInsensitivePattern;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.MINOR,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class MagicDateDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final String DEFAULT_AUTHORIZED_DATES = \"00010101,00010101000000,000101010000\";\n+\n+  @DiagnosticParameter(\n+    type = String.class,\n+    defaultValue = \"\" + DEFAULT_AUTHORIZED_DATES\n+  )\n+  private final List<String> authorizedDates = new ArrayList<>(Arrays.asList(DEFAULT_AUTHORIZED_DATES.split(\",\")));\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    String authorizedDatesString =\n+      (String) configuration.getOrDefault(\"authorizedDates\", DEFAULT_AUTHORIZED_DATES);\n+    for (String s : authorizedDatesString.split(\",\")) {\n+      this.authorizedDates.add(s.trim());\n+    }\n+  }\n+\n+  private static final Pattern methodPattern = CaseInsensitivePattern.compile(\n+    \"\u0414\u0430\u0442\u0430|Date\"\n+  );\n+\n+  private static final Pattern paramPattern = CaseInsensitivePattern.compile(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578c29e47411dabdf83925113112da29390c244f"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNDQ5Nzgw", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#pullrequestreview-521449780", "createdAt": "2020-11-02T09:17:14Z", "commit": {"oid": "578c29e47411dabdf83925113112da29390c244f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOToxNzoxNFrOHr78hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOToxNzoxNFrOHr78hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzMjk2Nw==", "bodyText": "\"\\\\D\" \u0442\u043e\u0436\u0435 \u0432 \u0441\u0442\u0430\u0442\u0438\u043a \u0444\u0438\u043b\u0434 \u0441 \u0442\u0438\u043f\u043e\u043c Pattern. \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043e\u043a - \u044d\u0442\u043e \u0434\u043e\u0440\u043e\u0433\u043e.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r515832967", "createdAt": "2020-11-02T09:17:14Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.bsl.parser.BSLParserRuleContext;\n+import com.github._1c_syntax.utils.CaseInsensitivePattern;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.MINOR,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class MagicDateDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final String DEFAULT_AUTHORIZED_DATES = \"00010101,00010101000000,000101010000\";\n+\n+  @DiagnosticParameter(\n+    type = String.class,\n+    defaultValue = \"\" + DEFAULT_AUTHORIZED_DATES\n+  )\n+  private final List<String> authorizedDates = new ArrayList<>(Arrays.asList(DEFAULT_AUTHORIZED_DATES.split(\",\")));\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    String authorizedDatesString =\n+      (String) configuration.getOrDefault(\"authorizedDates\", DEFAULT_AUTHORIZED_DATES);\n+    for (String s : authorizedDatesString.split(\",\")) {\n+      this.authorizedDates.add(s.trim());\n+    }\n+  }\n+\n+  private static final Pattern methodPattern = CaseInsensitivePattern.compile(\n+    \"\u0414\u0430\u0442\u0430|Date\"\n+  );\n+\n+  private static final Pattern paramPattern = CaseInsensitivePattern.compile(\n+    \"\\\"\\\\d{8}.*\"\n+  );\n+\n+  @Override\n+  public ParseTree visitGlobalMethodCall(BSLParser.GlobalMethodCallContext ctx) {\n+    Optional.of(ctx)\n+      .filter(it -> methodPattern.matcher(it.methodName().getText()).matches())\n+      .map(BSLParser.GlobalMethodCallContext::doCall)\n+      .map(BSLParser.DoCallContext::callParamList)\n+      .filter(callParamList -> paramPattern.matcher(callParamList.getText()).matches())\n+      .ifPresent(this::checkExclAddDiagnostic);\n+\n+    return super.visitGlobalMethodCall(ctx);\n+  }\n+\n+  @Override\n+  public ParseTree visitConstValue(BSLParser.ConstValueContext ctx) {\n+    TerminalNode tNode = ctx.DATETIME();\n+    if (tNode != null) {\n+      checkExclAddDiagnostic(ctx);\n+    }\n+\n+    return ctx;\n+  }\n+\n+  private void checkExclAddDiagnostic(BSLParserRuleContext ctx){\n+    String checked = ctx.getText();\n+    if (checked != null && !isExcluded(checked)) {\n+      ParserRuleContext expression;\n+      if (ctx instanceof BSLParser.CallParamListContext){\n+        expression = ctx.getParent().getParent().getParent().getParent().getParent();\n+      }\n+      else {\n+        expression = ctx.getParent().getParent();\n+      }\n+      if (expression instanceof BSLParser.ExpressionContext\n+        && (!isAssignExpression((BSLParser.ExpressionContext) expression))) {\n+        diagnosticStorage.addDiagnostic(ctx.stop, info.getMessage(checked));\n+      }\n+    }\n+  }\n+\n+  private boolean isExcluded(String sIn) {\n+    String s = sIn.replaceAll(\"\\\\D\",\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578c29e47411dabdf83925113112da29390c244f"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNDUwMTg4", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#pullrequestreview-521450188", "createdAt": "2020-11-02T09:17:46Z", "commit": {"oid": "578c29e47411dabdf83925113112da29390c244f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOToxNzo0NlrOHr79sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOToxNzo0NlrOHr79sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzMzI2Ng==", "bodyText": "\u0435\u0441\u043b\u0438 authorizedDates \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0447\u0435\u0440\u0435\u0437 Set, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0447\u0435\u0440\u0435\u0437 authorizedDates.contains. \u0441\u0435\u0439\u0447\u0430\u0441 \u0442\u043e\u0436\u0435 \u043c\u043e\u0436\u043d\u043e (\u0441 List), \u043d\u043e \u0441 Set \u0431\u0443\u0434\u0435\u0442 \u0431\u044b\u0441\u0442\u0440\u0435\u0435.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r515833266", "createdAt": "2020-11-02T09:17:46Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.bsl.parser.BSLParserRuleContext;\n+import com.github._1c_syntax.utils.CaseInsensitivePattern;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.MINOR,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class MagicDateDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final String DEFAULT_AUTHORIZED_DATES = \"00010101,00010101000000,000101010000\";\n+\n+  @DiagnosticParameter(\n+    type = String.class,\n+    defaultValue = \"\" + DEFAULT_AUTHORIZED_DATES\n+  )\n+  private final List<String> authorizedDates = new ArrayList<>(Arrays.asList(DEFAULT_AUTHORIZED_DATES.split(\",\")));\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    String authorizedDatesString =\n+      (String) configuration.getOrDefault(\"authorizedDates\", DEFAULT_AUTHORIZED_DATES);\n+    for (String s : authorizedDatesString.split(\",\")) {\n+      this.authorizedDates.add(s.trim());\n+    }\n+  }\n+\n+  private static final Pattern methodPattern = CaseInsensitivePattern.compile(\n+    \"\u0414\u0430\u0442\u0430|Date\"\n+  );\n+\n+  private static final Pattern paramPattern = CaseInsensitivePattern.compile(\n+    \"\\\"\\\\d{8}.*\"\n+  );\n+\n+  @Override\n+  public ParseTree visitGlobalMethodCall(BSLParser.GlobalMethodCallContext ctx) {\n+    Optional.of(ctx)\n+      .filter(it -> methodPattern.matcher(it.methodName().getText()).matches())\n+      .map(BSLParser.GlobalMethodCallContext::doCall)\n+      .map(BSLParser.DoCallContext::callParamList)\n+      .filter(callParamList -> paramPattern.matcher(callParamList.getText()).matches())\n+      .ifPresent(this::checkExclAddDiagnostic);\n+\n+    return super.visitGlobalMethodCall(ctx);\n+  }\n+\n+  @Override\n+  public ParseTree visitConstValue(BSLParser.ConstValueContext ctx) {\n+    TerminalNode tNode = ctx.DATETIME();\n+    if (tNode != null) {\n+      checkExclAddDiagnostic(ctx);\n+    }\n+\n+    return ctx;\n+  }\n+\n+  private void checkExclAddDiagnostic(BSLParserRuleContext ctx){\n+    String checked = ctx.getText();\n+    if (checked != null && !isExcluded(checked)) {\n+      ParserRuleContext expression;\n+      if (ctx instanceof BSLParser.CallParamListContext){\n+        expression = ctx.getParent().getParent().getParent().getParent().getParent();\n+      }\n+      else {\n+        expression = ctx.getParent().getParent();\n+      }\n+      if (expression instanceof BSLParser.ExpressionContext\n+        && (!isAssignExpression((BSLParser.ExpressionContext) expression))) {\n+        diagnosticStorage.addDiagnostic(ctx.stop, info.getMessage(checked));\n+      }\n+    }\n+  }\n+\n+  private boolean isExcluded(String sIn) {\n+    String s = sIn.replaceAll(\"\\\\D\",\"\");\n+    for (String elem : this.authorizedDates) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578c29e47411dabdf83925113112da29390c244f"}, "originalPosition": 120}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNDUxMTA4", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#pullrequestreview-521451108", "createdAt": "2020-11-02T09:19:04Z", "commit": {"oid": "578c29e47411dabdf83925113112da29390c244f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOToxOTowNFrOHr8AfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOToxOTowNFrOHr8AfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzMzk4MA==", "bodyText": "\u043d\u0435 \u0441\u043e\u0432\u0441\u0435\u043c \u043f\u043e\u043d\u0438\u043c\u0430\u044e, \u0447\u0442\u043e \u0442\u0443\u0442 \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f. \u0434\u043b\u044f assignment \u0435\u0441\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0442\u0438\u043f \u0443\u0437\u043b\u0430. \u041c\u043e\u0436\u0435\u0448\u044c \u043f\u043e\u044f\u0441\u043d\u0438\u0442\u044c?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r515833980", "createdAt": "2020-11-02T09:19:04Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.bsl.parser.BSLParserRuleContext;\n+import com.github._1c_syntax.utils.CaseInsensitivePattern;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.MINOR,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class MagicDateDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final String DEFAULT_AUTHORIZED_DATES = \"00010101,00010101000000,000101010000\";\n+\n+  @DiagnosticParameter(\n+    type = String.class,\n+    defaultValue = \"\" + DEFAULT_AUTHORIZED_DATES\n+  )\n+  private final List<String> authorizedDates = new ArrayList<>(Arrays.asList(DEFAULT_AUTHORIZED_DATES.split(\",\")));\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    String authorizedDatesString =\n+      (String) configuration.getOrDefault(\"authorizedDates\", DEFAULT_AUTHORIZED_DATES);\n+    for (String s : authorizedDatesString.split(\",\")) {\n+      this.authorizedDates.add(s.trim());\n+    }\n+  }\n+\n+  private static final Pattern methodPattern = CaseInsensitivePattern.compile(\n+    \"\u0414\u0430\u0442\u0430|Date\"\n+  );\n+\n+  private static final Pattern paramPattern = CaseInsensitivePattern.compile(\n+    \"\\\"\\\\d{8}.*\"\n+  );\n+\n+  @Override\n+  public ParseTree visitGlobalMethodCall(BSLParser.GlobalMethodCallContext ctx) {\n+    Optional.of(ctx)\n+      .filter(it -> methodPattern.matcher(it.methodName().getText()).matches())\n+      .map(BSLParser.GlobalMethodCallContext::doCall)\n+      .map(BSLParser.DoCallContext::callParamList)\n+      .filter(callParamList -> paramPattern.matcher(callParamList.getText()).matches())\n+      .ifPresent(this::checkExclAddDiagnostic);\n+\n+    return super.visitGlobalMethodCall(ctx);\n+  }\n+\n+  @Override\n+  public ParseTree visitConstValue(BSLParser.ConstValueContext ctx) {\n+    TerminalNode tNode = ctx.DATETIME();\n+    if (tNode != null) {\n+      checkExclAddDiagnostic(ctx);\n+    }\n+\n+    return ctx;\n+  }\n+\n+  private void checkExclAddDiagnostic(BSLParserRuleContext ctx){\n+    String checked = ctx.getText();\n+    if (checked != null && !isExcluded(checked)) {\n+      ParserRuleContext expression;\n+      if (ctx instanceof BSLParser.CallParamListContext){\n+        expression = ctx.getParent().getParent().getParent().getParent().getParent();\n+      }\n+      else {\n+        expression = ctx.getParent().getParent();\n+      }\n+      if (expression instanceof BSLParser.ExpressionContext\n+        && (!isAssignExpression((BSLParser.ExpressionContext) expression))) {\n+        diagnosticStorage.addDiagnostic(ctx.stop, info.getMessage(checked));\n+      }\n+    }\n+  }\n+\n+  private boolean isExcluded(String sIn) {\n+    String s = sIn.replaceAll(\"\\\\D\",\"\");\n+    for (String elem : this.authorizedDates) {\n+      if (s.compareTo(elem) == 0) {\n+        return true;\n+      }\n+    }\n+\n+    return false;\n+  }\n+\n+  private static boolean isAssignExpression(BSLParser.ExpressionContext expression) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578c29e47411dabdf83925113112da29390c244f"}, "originalPosition": 129}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzOTkwNzU2", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#pullrequestreview-523990756", "createdAt": "2020-11-05T07:41:50Z", "commit": {"oid": "578c29e47411dabdf83925113112da29390c244f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzo0MTo1MVrOHt2xVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzo0MTo1MVrOHt2xVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0NTMzMw==", "bodyText": "\u043e\u0434\u043d\u0430 \u043c\u0438\u043d\u0443\u0442\u0430 - \u044d\u0442\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 \u043a\u043e\u0434\u044d\u043a\u0448\u0435\u043d \u0441\u0434\u0435\u043b\u0430\u0442\u044c )", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r517845333", "createdAt": "2020-11-05T07:41:51Z", "author": {"login": "theshadowco"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.bsl.parser.BSLParserRuleContext;\n+import com.github._1c_syntax.utils.CaseInsensitivePattern;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.MINOR,\n+  minutesToFix = 1,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578c29e47411dabdf83925113112da29390c244f"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzOTkyNjE0", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#pullrequestreview-523992614", "createdAt": "2020-11-05T07:45:06Z", "commit": {"oid": "578c29e47411dabdf83925113112da29390c244f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzo0NTowNlrOHt23UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzo1MToyOFrOHt3CbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0Njg2NA==", "bodyText": "\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043d\u0430\u0434 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438 \u0441\u0442\u043e\u0438\u0442 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c, \u0430 \u0442\u0430\u043a\u0436\u0435, \u043f\u043e \u043a\u043e\u043d\u0432\u0435\u043d\u0446\u0438\u0438, static final - \u044d\u0442\u043e \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b \u0438 \u0438\u0445 \u0438\u043c\u044f \u0432 \u0432\u0435\u0440\u0445\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435 \u043f\u0438\u0448\u0435\u0442\u0441\u044f", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r517846864", "createdAt": "2020-11-05T07:45:06Z", "author": {"login": "theshadowco"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.bsl.parser.BSLParserRuleContext;\n+import com.github._1c_syntax.utils.CaseInsensitivePattern;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.MINOR,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class MagicDateDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final String DEFAULT_AUTHORIZED_DATES = \"00010101,00010101000000,000101010000\";\n+\n+  @DiagnosticParameter(\n+    type = String.class,\n+    defaultValue = \"\" + DEFAULT_AUTHORIZED_DATES\n+  )\n+  private final List<String> authorizedDates = new ArrayList<>(Arrays.asList(DEFAULT_AUTHORIZED_DATES.split(\",\")));\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    String authorizedDatesString =\n+      (String) configuration.getOrDefault(\"authorizedDates\", DEFAULT_AUTHORIZED_DATES);\n+    for (String s : authorizedDatesString.split(\",\")) {\n+      this.authorizedDates.add(s.trim());\n+    }\n+  }\n+\n+  private static final Pattern methodPattern = CaseInsensitivePattern.compile(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578c29e47411dabdf83925113112da29390c244f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0OTcwOQ==", "bodyText": "\u0437\u0434\u0435\u0441\u044c \u043e\u0431\u044b\u0433\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u043c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0434\u0430\u0442\u044b \u0441\u0442\u0440\u043e\u043a\u043e\u0439, \u0430 \u043a\u0430\u043a \u0436\u0435\nMagicDate = Date(1985, 09, 26, 08, 15, 00);\nDeathDay = Date(3999, 12, 31);\nEmpty = Date(1, 1, 1);", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#discussion_r517849709", "createdAt": "2020-11-05T07:51:28Z", "author": {"login": "theshadowco"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MagicDateDiagnostic.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.bsl.parser.BSLParserRuleContext;\n+import com.github._1c_syntax.utils.CaseInsensitivePattern;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+import org.antlr.v4.runtime.tree.TerminalNode;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.MINOR,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class MagicDateDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final String DEFAULT_AUTHORIZED_DATES = \"00010101,00010101000000,000101010000\";\n+\n+  @DiagnosticParameter(\n+    type = String.class,\n+    defaultValue = \"\" + DEFAULT_AUTHORIZED_DATES\n+  )\n+  private final List<String> authorizedDates = new ArrayList<>(Arrays.asList(DEFAULT_AUTHORIZED_DATES.split(\",\")));\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    String authorizedDatesString =\n+      (String) configuration.getOrDefault(\"authorizedDates\", DEFAULT_AUTHORIZED_DATES);\n+    for (String s : authorizedDatesString.split(\",\")) {\n+      this.authorizedDates.add(s.trim());\n+    }\n+  }\n+\n+  private static final Pattern methodPattern = CaseInsensitivePattern.compile(\n+    \"\u0414\u0430\u0442\u0430|Date\"\n+  );\n+\n+  private static final Pattern paramPattern = CaseInsensitivePattern.compile(\n+    \"\\\"\\\\d{8}.*\"\n+  );\n+\n+  @Override\n+  public ParseTree visitGlobalMethodCall(BSLParser.GlobalMethodCallContext ctx) {\n+    Optional.of(ctx)\n+      .filter(it -> methodPattern.matcher(it.methodName().getText()).matches())\n+      .map(BSLParser.GlobalMethodCallContext::doCall)\n+      .map(BSLParser.DoCallContext::callParamList)\n+      .filter(callParamList -> paramPattern.matcher(callParamList.getText()).matches())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578c29e47411dabdf83925113112da29390c244f"}, "originalPosition": 85}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09118d1a1065e7d44bc30c714ad2bb062673f698", "author": {"user": null}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/09118d1a1065e7d44bc30c714ad2bb062673f698", "committedDate": "2020-11-05T13:14:38Z", "message": "\u043c\u0430\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u0442\u044b - \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u043e\u0441\u043b\u0435 \u0440\u0435\u0432\u044c\u044e"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1NjUyNTY3", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1413#pullrequestreview-525652567", "createdAt": "2020-11-07T13:19:58Z", "commit": {"oid": "09118d1a1065e7d44bc30c714ad2bb062673f698"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c88ca08df899b96adffbde7c79fc88451dd722c6", "author": {"user": {"login": "nixel2007", "name": "Nikita Fedkin"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/c88ca08df899b96adffbde7c79fc88451dd722c6", "committedDate": "2020-11-07T13:43:41Z", "message": "Merge branch 'develop' into feature/issue575"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4677, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}