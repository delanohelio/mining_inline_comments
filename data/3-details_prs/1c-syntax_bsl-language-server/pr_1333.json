{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4NDM0NjQ4", "number": 1333, "title": "\u042d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a", "bodyText": "\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\n\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u043a\u043e\u0434 \u044d\u043a\u0448\u0435\u043d \u0434\u043b\u044f \u044d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a.\n\u0415\u0441\u043b\u0438 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0430 \u043e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u043f\u043e\u0432\u0435\u0441\u0438\u0442\u044c \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0443.\n\u0415\u0441\u043b\u0438 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u043a \u043d\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d.\n\u041f\u0440\u0438 \u043b\u044e\u0431\u043e\u043c \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u043d\u0430 \u0432\u0435\u0441\u044c \u0444\u0430\u0439\u043b.\n\u041f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u044d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043b\u0438\u0431\u043e \u0432\u0441\u0435 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u043b\u0438\u0431\u043e \u043f\u043e \u043e\u0434\u043d\u043e\u0439 \u0438\u0437 \u043f\u043e\u043f\u0430\u0432\u0448\u0438\u0445 \u0432 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435.\n\u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438\n\n\n\n\n\n\nCloses: #1104\n\u0427\u0435\u043a\u043b\u0438\u0441\u0442\n\n\n\u041e\u0431\u0449\u0438\u0435\n\n \u0412\u0435\u0442\u043a\u0430 PR \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0430 \u0438\u0437 develop\n \u041e\u0442\u043b\u0430\u0434\u043e\u0447\u043d\u044b\u0435, \u0437\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0438 \u043f\u0440\u043e\u0447\u0438\u0435, \u043d\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0435 \u0441\u043c\u044b\u0441\u043b\u0430 \u0443\u0447\u0430\u0441\u0442\u043a\u0438 \u043a\u043e\u0434\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u044b\n \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u043a\u0440\u044b\u0442\u044b \u0442\u0435\u0441\u0442\u0430\u043c\u0438\n \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u0435\u0440\u0435\u0434 \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b (\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u043b \u043a\u043e\u043c\u0430\u043d\u0434\u0443 gradlew precommit)\n\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e", "createdAt": "2020-08-16T11:48:51Z", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1333", "merged": true, "mergeCommit": {"oid": "0b5846c319b9755913d689f0df236a85a6b6d095"}, "closed": true, "closedAt": "2020-11-02T06:34:00Z", "author": {"login": "qtLex"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdG48nCAFqTQ4NDIyMzAxOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYVss5gBqjM5NDU1NDM0MzU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MjIzMDE5", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1333#pullrequestreview-484223019", "createdAt": "2020-09-08T14:53:33Z", "commit": {"oid": "85fa54e2ddb266f41aec1e145db2c4b9fae8c31c"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo1MzozM1rOHOhEWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNTowMTowMFrOHOhfhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4Mzg5Nw==", "bodyText": "\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0435\u0435 \u0432 \u0440\u0435\u0441\u0443\u0440\u0441\u044b \u0432\u044b\u043d\u0435\u0441\u0442\u0438, \u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043c\u0435\u0441\u0442\u0430 \u0442\u043e\u0436\u0435", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1333#discussion_r484983897", "createdAt": "2020-09-08T14:53:33Z", "author": {"login": "theshadowco"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/codeactions/DisableDiagnosticTriggeringSupplier.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.codeactions;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ScriptVariant;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionKind;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+import org.jetbrains.annotations.NotNull;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+\n+@Component\n+public class DisableDiagnosticTriggeringSupplier implements CodeActionSupplier {\n+\n+  private static final String DISABLE_ALL_DIAGNOSTIC = \"BSLLS-off\";\n+  private List<CodeAction> result;\n+  private CodeActionParams params;\n+  private DocumentContext documentContext;\n+  private Optional<Token> lastTokenSelectedInLine;\n+  private boolean isOneLineRange;\n+  private boolean isEnglish;\n+\n+  /**\n+   * \u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 {@code CodeAction} \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043b\u0443\u0436\u0435\u0431\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u0435\n+   * \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438.\n+   * \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432 \u0442\u0440\u0435\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\u0445:\n+   * 1. \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435\n+   * 2. \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u0430\u0440\u043e\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432\n+   * 3. \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432\u043e \u0432\u0441\u0435\u043c \u0444\u0430\u0439\u043b\u0435\n+   *\n+   * @param params          \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432\u044b\u0437\u043e\u0432\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 {@code codeAction}\n+   * @param documentContext \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f\n+   * @return {@code List<CodeAction>} \u0435\u0441\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044c \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439,\n+   * \u043f\u0443\u0441\u0442\u043e\u0439 {@code List} \u0435\u0441\u043b\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f\n+   */\n+  @Override\n+  public List<CodeAction> getCodeActions(CodeActionParams params, DocumentContext documentContext) {\n+\n+    initParams(params, documentContext);\n+\n+    if (!params.getContext().getDiagnostics().isEmpty()) {\n+      actionDisableDiagnosticInLine();\n+      actionDisableDiagnosticInRegion();\n+      actionDisableDiagnosticInFile();\n+    }\n+\n+    actionDisableAllDiagnosticInLine();\n+    actionDisableAllDiagnosticInRegion();\n+    actionDisableAllDiagnosticInFile();\n+    return result;\n+\n+  }\n+\n+  private void initParams(CodeActionParams params, DocumentContext documentContext) {\n+    this.result = new ArrayList<>();\n+    this.params = params;\n+    this.documentContext = documentContext;\n+    this.isEnglish = documentContext\n+      .getServerContext()\n+      .getConfiguration()\n+      .getScriptVariant() == ScriptVariant.ENGLISH;\n+\n+    lastTokenSelectedInLine = Optional.empty();\n+\n+    if (params.getRange().getStart() == null || params.getRange().getEnd() == null) {\n+      return;\n+    }\n+\n+    isOneLineRange = params.getRange().getStart().getLine() == params.getRange().getEnd().getLine();\n+\n+    lastTokenSelectedInLine = documentContext\n+      .getTokens()\n+      .stream()\n+      .filter(token -> token.getLine() == params.getRange().getEnd().getLine() + 1)\n+      .max(Comparator.comparingInt(Token::getCharPositionInLine));\n+  }\n+\n+  private void actionDisableDiagnosticInLine() {\n+    if ((lastTokenSelectedInLine.isEmpty() || !isOneLineRange)) {\n+      return;\n+    }\n+\n+    result.addAll(\n+      params.getContext()\n+        .getDiagnostics()\n+        .stream()\n+        .map(Diagnostic::getCode)\n+        .map(Either::getLeft)\n+        .distinct()\n+        .map(name -> {\n+          Token last = lastTokenSelectedInLine.get();\n+          Range range = Ranges.create(\n+            params.getRange().getStart().getLine(),\n+            last.getCharPositionInLine() + last.getText().length(),\n+            params.getRange().getStart().getLine(),\n+            last.getCharPositionInLine() + last.getText().length()\n+          );\n+\n+          TextEdit textEdit = new TextEdit(range, String.format(\" // BSLLS:%s-off\", name));\n+          String codeActionTitle = String.format(\n+            isEnglish ? \"Disable %s in line\" : \"\u041e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c %s \u0432 \u0441\u0442\u0440\u043e\u043a\u0435\",\n+            name\n+          );\n+          return createCodeAction(codeActionTitle, Collections.singletonList(textEdit));\n+        })\n+        .collect(Collectors.toList())\n+    );\n+  }\n+\n+  @NotNull\n+  private CodeAction createCodeAction(String title, List<TextEdit> edits) {\n+    Map<String, List<TextEdit>> changes = Map.of(documentContext.getUri().toString(), edits);\n+    WorkspaceEdit edit = new WorkspaceEdit();\n+    edit.setChanges(changes);\n+\n+    CodeAction codeAction = new CodeAction(title);\n+    codeAction.setDiagnostics(new ArrayList<>());\n+    codeAction.setKind(CodeActionKind.Refactor);\n+    codeAction.setEdit(edit);\n+    return codeAction;\n+  }\n+\n+  private void actionDisableDiagnosticInRegion() {\n+    if (lastTokenSelectedInLine.isEmpty() || isOneLineRange) {\n+      return;\n+    }\n+\n+    result.addAll(\n+      params.getContext()\n+        .getDiagnostics()\n+        .stream()\n+        .map(Diagnostic::getCode)\n+        .map(Either::getLeft)\n+        .distinct()\n+        .map(name -> {\n+          List<TextEdit> edits = new ArrayList<>();\n+\n+          Range disableRange = Ranges.create(\n+            params.getRange().getStart().getLine(),\n+            0,\n+            params.getRange().getStart().getLine(),\n+            0\n+          );\n+          TextEdit disableTextEdit = new TextEdit(disableRange, String.format(\"// BSLLS:%s-off%n\", name));\n+          edits.add(disableTextEdit);\n+\n+          Token last = lastTokenSelectedInLine.get();\n+          Range enableRange = Ranges.create(\n+            params.getRange().getEnd().getLine(),\n+            last.getCharPositionInLine() + last.getText().length(),\n+            params.getRange().getEnd().getLine(),\n+            last.getCharPositionInLine() + last.getText().length()\n+          );\n+          TextEdit enableTextEdit = new TextEdit(enableRange, String.format(\"%n// BSLLS:%s-on%n\", name));\n+          edits.add(enableTextEdit);\n+\n+          String codeActionTitle = String.format(\n+            isEnglish ? \"Disable %s in range\" : \"\u041e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c %s \u0432 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043e\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435\",\n+            name\n+          );\n+          return createCodeAction(codeActionTitle, edits);\n+        })\n+        .collect(Collectors.toList())\n+    );\n+  }\n+\n+  private void actionDisableDiagnosticInFile() {\n+    result.addAll(\n+      params.getContext()\n+        .getDiagnostics()\n+        .stream()\n+        .map(Diagnostic::getCode)\n+        .map(Either::getLeft)\n+        .distinct()\n+        .map(name -> {\n+          TextEdit textEdit = new TextEdit(\n+            Ranges.create(0, 0, 0, 0),\n+            String.format(\"// BSLLS:%s-off%n\", name)\n+          );\n+          String codeActionTitle = String.format(\n+            isEnglish ? \"Disable %s in file\" : \"\u041e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c %s \u0432 \u0444\u0430\u0439\u043b\u0435\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85fa54e2ddb266f41aec1e145db2c4b9fae8c31c"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4NDYwNw==", "bodyText": "\u0430 \u043f\u043e\u0447\u0435\u043c\u0443 \u043d\u0435 \u043f\u043e\u0434\u043e\u0448\u0435\u043b \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u043a\u0430\u043a \u0432 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0430\u0445?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1333#discussion_r484984607", "createdAt": "2020-09-08T14:54:30Z", "author": {"login": "theshadowco"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/codeactions/DisableDiagnosticTriggeringSupplier.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.codeactions;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ScriptVariant;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionKind;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+import org.jetbrains.annotations.NotNull;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+\n+@Component\n+public class DisableDiagnosticTriggeringSupplier implements CodeActionSupplier {\n+\n+  private static final String DISABLE_ALL_DIAGNOSTIC = \"BSLLS-off\";\n+  private List<CodeAction> result;\n+  private CodeActionParams params;\n+  private DocumentContext documentContext;\n+  private Optional<Token> lastTokenSelectedInLine;\n+  private boolean isOneLineRange;\n+  private boolean isEnglish;\n+\n+  /**\n+   * \u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 {@code CodeAction} \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043b\u0443\u0436\u0435\u0431\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u0435\n+   * \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438.\n+   * \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432 \u0442\u0440\u0435\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\u0445:\n+   * 1. \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435\n+   * 2. \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u0430\u0440\u043e\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432\n+   * 3. \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432\u043e \u0432\u0441\u0435\u043c \u0444\u0430\u0439\u043b\u0435\n+   *\n+   * @param params          \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432\u044b\u0437\u043e\u0432\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 {@code codeAction}\n+   * @param documentContext \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f\n+   * @return {@code List<CodeAction>} \u0435\u0441\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044c \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439,\n+   * \u043f\u0443\u0441\u0442\u043e\u0439 {@code List} \u0435\u0441\u043b\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f\n+   */\n+  @Override\n+  public List<CodeAction> getCodeActions(CodeActionParams params, DocumentContext documentContext) {\n+\n+    initParams(params, documentContext);\n+\n+    if (!params.getContext().getDiagnostics().isEmpty()) {\n+      actionDisableDiagnosticInLine();\n+      actionDisableDiagnosticInRegion();\n+      actionDisableDiagnosticInFile();\n+    }\n+\n+    actionDisableAllDiagnosticInLine();\n+    actionDisableAllDiagnosticInRegion();\n+    actionDisableAllDiagnosticInFile();\n+    return result;\n+\n+  }\n+\n+  private void initParams(CodeActionParams params, DocumentContext documentContext) {\n+    this.result = new ArrayList<>();\n+    this.params = params;\n+    this.documentContext = documentContext;\n+    this.isEnglish = documentContext", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85fa54e2ddb266f41aec1e145db2c4b9fae8c31c"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4NTIzMQ==", "bodyText": "\u0441\u0442\u043e\u0438\u0442 \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u0434\u0430", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1333#discussion_r484985231", "createdAt": "2020-09-08T14:55:19Z", "author": {"login": "theshadowco"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/codeactions/DisableDiagnosticTriggeringSupplier.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.codeactions;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ScriptVariant;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionKind;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+import org.jetbrains.annotations.NotNull;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+\n+@Component\n+public class DisableDiagnosticTriggeringSupplier implements CodeActionSupplier {\n+\n+  private static final String DISABLE_ALL_DIAGNOSTIC = \"BSLLS-off\";\n+  private List<CodeAction> result;\n+  private CodeActionParams params;\n+  private DocumentContext documentContext;\n+  private Optional<Token> lastTokenSelectedInLine;\n+  private boolean isOneLineRange;\n+  private boolean isEnglish;\n+\n+  /**\n+   * \u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 {@code CodeAction} \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043b\u0443\u0436\u0435\u0431\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u0435\n+   * \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438.\n+   * \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432 \u0442\u0440\u0435\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\u0445:\n+   * 1. \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435\n+   * 2. \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u0430\u0440\u043e\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432\n+   * 3. \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432\u043e \u0432\u0441\u0435\u043c \u0444\u0430\u0439\u043b\u0435\n+   *\n+   * @param params          \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432\u044b\u0437\u043e\u0432\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 {@code codeAction}\n+   * @param documentContext \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f\n+   * @return {@code List<CodeAction>} \u0435\u0441\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044c \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439,\n+   * \u043f\u0443\u0441\u0442\u043e\u0439 {@code List} \u0435\u0441\u043b\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f\n+   */\n+  @Override\n+  public List<CodeAction> getCodeActions(CodeActionParams params, DocumentContext documentContext) {\n+\n+    initParams(params, documentContext);\n+\n+    if (!params.getContext().getDiagnostics().isEmpty()) {\n+      actionDisableDiagnosticInLine();\n+      actionDisableDiagnosticInRegion();\n+      actionDisableDiagnosticInFile();\n+    }\n+\n+    actionDisableAllDiagnosticInLine();\n+    actionDisableAllDiagnosticInRegion();\n+    actionDisableAllDiagnosticInFile();\n+    return result;\n+\n+  }\n+\n+  private void initParams(CodeActionParams params, DocumentContext documentContext) {\n+    this.result = new ArrayList<>();\n+    this.params = params;\n+    this.documentContext = documentContext;\n+    this.isEnglish = documentContext\n+      .getServerContext()\n+      .getConfiguration()\n+      .getScriptVariant() == ScriptVariant.ENGLISH;\n+\n+    lastTokenSelectedInLine = Optional.empty();\n+\n+    if (params.getRange().getStart() == null || params.getRange().getEnd() == null) {\n+      return;\n+    }\n+\n+    isOneLineRange = params.getRange().getStart().getLine() == params.getRange().getEnd().getLine();\n+\n+    lastTokenSelectedInLine = documentContext\n+      .getTokens()\n+      .stream()\n+      .filter(token -> token.getLine() == params.getRange().getEnd().getLine() + 1)\n+      .max(Comparator.comparingInt(Token::getCharPositionInLine));\n+  }\n+\n+  private void actionDisableDiagnosticInLine() {\n+    if ((lastTokenSelectedInLine.isEmpty() || !isOneLineRange)) {\n+      return;\n+    }\n+\n+    result.addAll(\n+      params.getContext()\n+        .getDiagnostics()\n+        .stream()\n+        .map(Diagnostic::getCode)\n+        .map(Either::getLeft)\n+        .distinct()\n+        .map(name -> {\n+          Token last = lastTokenSelectedInLine.get();\n+          Range range = Ranges.create(\n+            params.getRange().getStart().getLine(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85fa54e2ddb266f41aec1e145db2c4b9fae8c31c"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4NTQxNA==", "bodyText": "\u0441\u0442\u043e\u0438\u0442 \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u0432 \u0440\u0435\u0441\u0443\u0440\u0441\u044b", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1333#discussion_r484985414", "createdAt": "2020-09-08T14:55:36Z", "author": {"login": "theshadowco"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/codeactions/DisableDiagnosticTriggeringSupplier.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.codeactions;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ScriptVariant;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionKind;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+import org.jetbrains.annotations.NotNull;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+\n+@Component\n+public class DisableDiagnosticTriggeringSupplier implements CodeActionSupplier {\n+\n+  private static final String DISABLE_ALL_DIAGNOSTIC = \"BSLLS-off\";\n+  private List<CodeAction> result;\n+  private CodeActionParams params;\n+  private DocumentContext documentContext;\n+  private Optional<Token> lastTokenSelectedInLine;\n+  private boolean isOneLineRange;\n+  private boolean isEnglish;\n+\n+  /**\n+   * \u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 {@code CodeAction} \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043b\u0443\u0436\u0435\u0431\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u0435\n+   * \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438.\n+   * \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432 \u0442\u0440\u0435\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\u0445:\n+   * 1. \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435\n+   * 2. \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u0430\u0440\u043e\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432\n+   * 3. \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432\u043e \u0432\u0441\u0435\u043c \u0444\u0430\u0439\u043b\u0435\n+   *\n+   * @param params          \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432\u044b\u0437\u043e\u0432\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 {@code codeAction}\n+   * @param documentContext \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f\n+   * @return {@code List<CodeAction>} \u0435\u0441\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044c \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439,\n+   * \u043f\u0443\u0441\u0442\u043e\u0439 {@code List} \u0435\u0441\u043b\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f\n+   */\n+  @Override\n+  public List<CodeAction> getCodeActions(CodeActionParams params, DocumentContext documentContext) {\n+\n+    initParams(params, documentContext);\n+\n+    if (!params.getContext().getDiagnostics().isEmpty()) {\n+      actionDisableDiagnosticInLine();\n+      actionDisableDiagnosticInRegion();\n+      actionDisableDiagnosticInFile();\n+    }\n+\n+    actionDisableAllDiagnosticInLine();\n+    actionDisableAllDiagnosticInRegion();\n+    actionDisableAllDiagnosticInFile();\n+    return result;\n+\n+  }\n+\n+  private void initParams(CodeActionParams params, DocumentContext documentContext) {\n+    this.result = new ArrayList<>();\n+    this.params = params;\n+    this.documentContext = documentContext;\n+    this.isEnglish = documentContext\n+      .getServerContext()\n+      .getConfiguration()\n+      .getScriptVariant() == ScriptVariant.ENGLISH;\n+\n+    lastTokenSelectedInLine = Optional.empty();\n+\n+    if (params.getRange().getStart() == null || params.getRange().getEnd() == null) {\n+      return;\n+    }\n+\n+    isOneLineRange = params.getRange().getStart().getLine() == params.getRange().getEnd().getLine();\n+\n+    lastTokenSelectedInLine = documentContext\n+      .getTokens()\n+      .stream()\n+      .filter(token -> token.getLine() == params.getRange().getEnd().getLine() + 1)\n+      .max(Comparator.comparingInt(Token::getCharPositionInLine));\n+  }\n+\n+  private void actionDisableDiagnosticInLine() {\n+    if ((lastTokenSelectedInLine.isEmpty() || !isOneLineRange)) {\n+      return;\n+    }\n+\n+    result.addAll(\n+      params.getContext()\n+        .getDiagnostics()\n+        .stream()\n+        .map(Diagnostic::getCode)\n+        .map(Either::getLeft)\n+        .distinct()\n+        .map(name -> {\n+          Token last = lastTokenSelectedInLine.get();\n+          Range range = Ranges.create(\n+            params.getRange().getStart().getLine(),\n+            last.getCharPositionInLine() + last.getText().length(),\n+            params.getRange().getStart().getLine(),\n+            last.getCharPositionInLine() + last.getText().length()\n+          );\n+\n+          TextEdit textEdit = new TextEdit(range, String.format(\" // BSLLS:%s-off\", name));\n+          String codeActionTitle = String.format(\n+            isEnglish ? \"Disable %s in line\" : \"\u041e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c %s \u0432 \u0441\u0442\u0440\u043e\u043a\u0435\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85fa54e2ddb266f41aec1e145db2c4b9fae8c31c"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4NzYyNg==", "bodyText": "\u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u0434\u0430", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1333#discussion_r484987626", "createdAt": "2020-09-08T14:57:26Z", "author": {"login": "theshadowco"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/codeactions/DisableDiagnosticTriggeringSupplier.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.codeactions;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ScriptVariant;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionKind;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+import org.jetbrains.annotations.NotNull;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+\n+@Component\n+public class DisableDiagnosticTriggeringSupplier implements CodeActionSupplier {\n+\n+  private static final String DISABLE_ALL_DIAGNOSTIC = \"BSLLS-off\";\n+  private List<CodeAction> result;\n+  private CodeActionParams params;\n+  private DocumentContext documentContext;\n+  private Optional<Token> lastTokenSelectedInLine;\n+  private boolean isOneLineRange;\n+  private boolean isEnglish;\n+\n+  /**\n+   * \u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 {@code CodeAction} \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043b\u0443\u0436\u0435\u0431\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u0435\n+   * \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438.\n+   * \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432 \u0442\u0440\u0435\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\u0445:\n+   * 1. \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435\n+   * 2. \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u0430\u0440\u043e\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432\n+   * 3. \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432\u043e \u0432\u0441\u0435\u043c \u0444\u0430\u0439\u043b\u0435\n+   *\n+   * @param params          \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432\u044b\u0437\u043e\u0432\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 {@code codeAction}\n+   * @param documentContext \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f\n+   * @return {@code List<CodeAction>} \u0435\u0441\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044c \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439,\n+   * \u043f\u0443\u0441\u0442\u043e\u0439 {@code List} \u0435\u0441\u043b\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f\n+   */\n+  @Override\n+  public List<CodeAction> getCodeActions(CodeActionParams params, DocumentContext documentContext) {\n+\n+    initParams(params, documentContext);\n+\n+    if (!params.getContext().getDiagnostics().isEmpty()) {\n+      actionDisableDiagnosticInLine();\n+      actionDisableDiagnosticInRegion();\n+      actionDisableDiagnosticInFile();\n+    }\n+\n+    actionDisableAllDiagnosticInLine();\n+    actionDisableAllDiagnosticInRegion();\n+    actionDisableAllDiagnosticInFile();\n+    return result;\n+\n+  }\n+\n+  private void initParams(CodeActionParams params, DocumentContext documentContext) {\n+    this.result = new ArrayList<>();\n+    this.params = params;\n+    this.documentContext = documentContext;\n+    this.isEnglish = documentContext\n+      .getServerContext()\n+      .getConfiguration()\n+      .getScriptVariant() == ScriptVariant.ENGLISH;\n+\n+    lastTokenSelectedInLine = Optional.empty();\n+\n+    if (params.getRange().getStart() == null || params.getRange().getEnd() == null) {\n+      return;\n+    }\n+\n+    isOneLineRange = params.getRange().getStart().getLine() == params.getRange().getEnd().getLine();\n+\n+    lastTokenSelectedInLine = documentContext\n+      .getTokens()\n+      .stream()\n+      .filter(token -> token.getLine() == params.getRange().getEnd().getLine() + 1)\n+      .max(Comparator.comparingInt(Token::getCharPositionInLine));\n+  }\n+\n+  private void actionDisableDiagnosticInLine() {\n+    if ((lastTokenSelectedInLine.isEmpty() || !isOneLineRange)) {\n+      return;\n+    }\n+\n+    result.addAll(\n+      params.getContext()\n+        .getDiagnostics()\n+        .stream()\n+        .map(Diagnostic::getCode)\n+        .map(Either::getLeft)\n+        .distinct()\n+        .map(name -> {\n+          Token last = lastTokenSelectedInLine.get();\n+          Range range = Ranges.create(\n+            params.getRange().getStart().getLine(),\n+            last.getCharPositionInLine() + last.getText().length(),\n+            params.getRange().getStart().getLine(),\n+            last.getCharPositionInLine() + last.getText().length()\n+          );\n+\n+          TextEdit textEdit = new TextEdit(range, String.format(\" // BSLLS:%s-off\", name));\n+          String codeActionTitle = String.format(\n+            isEnglish ? \"Disable %s in line\" : \"\u041e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c %s \u0432 \u0441\u0442\u0440\u043e\u043a\u0435\",\n+            name\n+          );\n+          return createCodeAction(codeActionTitle, Collections.singletonList(textEdit));\n+        })\n+        .collect(Collectors.toList())\n+    );\n+  }\n+\n+  @NotNull\n+  private CodeAction createCodeAction(String title, List<TextEdit> edits) {\n+    Map<String, List<TextEdit>> changes = Map.of(documentContext.getUri().toString(), edits);\n+    WorkspaceEdit edit = new WorkspaceEdit();\n+    edit.setChanges(changes);\n+\n+    CodeAction codeAction = new CodeAction(title);\n+    codeAction.setDiagnostics(new ArrayList<>());\n+    codeAction.setKind(CodeActionKind.Refactor);\n+    codeAction.setEdit(edit);\n+    return codeAction;\n+  }\n+\n+  private void actionDisableDiagnosticInRegion() {\n+    if (lastTokenSelectedInLine.isEmpty() || isOneLineRange) {\n+      return;\n+    }\n+\n+    result.addAll(\n+      params.getContext()\n+        .getDiagnostics()\n+        .stream()\n+        .map(Diagnostic::getCode)\n+        .map(Either::getLeft)\n+        .distinct()\n+        .map(name -> {\n+          List<TextEdit> edits = new ArrayList<>();\n+\n+          Range disableRange = Ranges.create(\n+            params.getRange().getStart().getLine(),\n+            0,\n+            params.getRange().getStart().getLine(),\n+            0\n+          );\n+          TextEdit disableTextEdit = new TextEdit(disableRange, String.format(\"// BSLLS:%s-off%n\", name));\n+          edits.add(disableTextEdit);\n+\n+          Token last = lastTokenSelectedInLine.get();\n+          Range enableRange = Ranges.create(\n+            params.getRange().getEnd().getLine(),\n+            last.getCharPositionInLine() + last.getText().length(),\n+            params.getRange().getEnd().getLine(),\n+            last.getCharPositionInLine() + last.getText().length()\n+          );\n+          TextEdit enableTextEdit = new TextEdit(enableRange, String.format(\"%n// BSLLS:%s-on%n\", name));\n+          edits.add(enableTextEdit);\n+\n+          String codeActionTitle = String.format(\n+            isEnglish ? \"Disable %s in range\" : \"\u041e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c %s \u0432 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043e\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435\",\n+            name\n+          );\n+          return createCodeAction(codeActionTitle, edits);\n+        })\n+        .collect(Collectors.toList())\n+    );\n+  }\n+\n+  private void actionDisableDiagnosticInFile() {\n+    result.addAll(\n+      params.getContext()\n+        .getDiagnostics()\n+        .stream()\n+        .map(Diagnostic::getCode)\n+        .map(Either::getLeft)\n+        .distinct()\n+        .map(name -> {\n+          TextEdit textEdit = new TextEdit(\n+            Ranges.create(0, 0, 0, 0),\n+            String.format(\"// BSLLS:%s-off%n\", name)\n+          );\n+          String codeActionTitle = String.format(\n+            isEnglish ? \"Disable %s in file\" : \"\u041e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c %s \u0432 \u0444\u0430\u0439\u043b\u0435\",\n+            name\n+          );\n+          return createCodeAction(codeActionTitle, Collections.singletonList(textEdit));\n+        })\n+        .collect(Collectors.toList())\n+    );\n+  }\n+\n+  private void actionDisableAllDiagnosticInLine() {\n+    if (lastTokenSelectedInLine.isEmpty() || !isOneLineRange) {\n+      return;\n+    }\n+\n+    Token last = lastTokenSelectedInLine.get();\n+    Range range = Ranges.create(\n+      params.getRange().getStart().getLine(),\n+      last.getCharPositionInLine() + last.getText().length(),\n+      params.getRange().getStart().getLine(),\n+      last.getCharPositionInLine() + last.getText().length()\n+    );\n+\n+    TextEdit textEdit = new TextEdit(range, \"// \" + DISABLE_ALL_DIAGNOSTIC);\n+    String codeActionTitle = isEnglish\n+      ? \"Disable all diagnostic in line\"\n+      : \"\u041e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435\";\n+    result.add(createCodeAction(codeActionTitle, Collections.singletonList(textEdit)));\n+  }\n+\n+  private void actionDisableAllDiagnosticInRegion() {\n+    if (lastTokenSelectedInLine.isEmpty() || isOneLineRange) {\n+      return;\n+    }\n+\n+    List<TextEdit> edits = new ArrayList<>();\n+\n+    Range disableRange = Ranges.create(\n+      params.getRange().getStart().getLine(),\n+      0,\n+      params.getRange().getStart().getLine(),\n+      0\n+    );\n+    TextEdit disableTextEdit = new TextEdit(disableRange, \"// \" + DISABLE_ALL_DIAGNOSTIC + \"%n\");\n+    edits.add(disableTextEdit);\n+\n+    Token last = lastTokenSelectedInLine.get();\n+    Range enableRange = Ranges.create(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85fa54e2ddb266f41aec1e145db2c4b9fae8c31c"}, "originalPosition": 263}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk5MDg1NA==", "bodyText": "\u0441\u0442\u043e\u0438\u0442 \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u043f\u0440\u0430\u0432\u044b\u0439 \u043e\u043f\u0435\u0440\u0430\u043d\u0434", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1333#discussion_r484990854", "createdAt": "2020-09-08T15:01:00Z", "author": {"login": "theshadowco"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/codeactions/DisableDiagnosticTriggeringSupplier.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.codeactions;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ScriptVariant;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionKind;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+import org.jetbrains.annotations.NotNull;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+\n+@Component\n+public class DisableDiagnosticTriggeringSupplier implements CodeActionSupplier {\n+\n+  private static final String DISABLE_ALL_DIAGNOSTIC = \"BSLLS-off\";\n+  private List<CodeAction> result;\n+  private CodeActionParams params;\n+  private DocumentContext documentContext;\n+  private Optional<Token> lastTokenSelectedInLine;\n+  private boolean isOneLineRange;\n+  private boolean isEnglish;\n+\n+  /**\n+   * \u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 {@code CodeAction} \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043b\u0443\u0436\u0435\u0431\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u0435\n+   * \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438.\n+   * \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432 \u0442\u0440\u0435\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\u0445:\n+   * 1. \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435\n+   * 2. \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u0430\u0440\u043e\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432\n+   * 3. \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432\u043e \u0432\u0441\u0435\u043c \u0444\u0430\u0439\u043b\u0435\n+   *\n+   * @param params          \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432\u044b\u0437\u043e\u0432\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 {@code codeAction}\n+   * @param documentContext \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f\n+   * @return {@code List<CodeAction>} \u0435\u0441\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044c \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439,\n+   * \u043f\u0443\u0441\u0442\u043e\u0439 {@code List} \u0435\u0441\u043b\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f\n+   */\n+  @Override\n+  public List<CodeAction> getCodeActions(CodeActionParams params, DocumentContext documentContext) {\n+\n+    initParams(params, documentContext);\n+\n+    if (!params.getContext().getDiagnostics().isEmpty()) {\n+      actionDisableDiagnosticInLine();\n+      actionDisableDiagnosticInRegion();\n+      actionDisableDiagnosticInFile();\n+    }\n+\n+    actionDisableAllDiagnosticInLine();\n+    actionDisableAllDiagnosticInRegion();\n+    actionDisableAllDiagnosticInFile();\n+    return result;\n+\n+  }\n+\n+  private void initParams(CodeActionParams params, DocumentContext documentContext) {\n+    this.result = new ArrayList<>();\n+    this.params = params;\n+    this.documentContext = documentContext;\n+    this.isEnglish = documentContext\n+      .getServerContext()\n+      .getConfiguration()\n+      .getScriptVariant() == ScriptVariant.ENGLISH;\n+\n+    lastTokenSelectedInLine = Optional.empty();\n+\n+    if (params.getRange().getStart() == null || params.getRange().getEnd() == null) {\n+      return;\n+    }\n+\n+    isOneLineRange = params.getRange().getStart().getLine() == params.getRange().getEnd().getLine();\n+\n+    lastTokenSelectedInLine = documentContext\n+      .getTokens()\n+      .stream()\n+      .filter(token -> token.getLine() == params.getRange().getEnd().getLine() + 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85fa54e2ddb266f41aec1e145db2c4b9fae8c31c"}, "originalPosition": 110}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "85fa54e2ddb266f41aec1e145db2c4b9fae8c31c", "author": {"user": null}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/85fa54e2ddb266f41aec1e145db2c4b9fae8c31c", "committedDate": "2020-08-18T19:39:16Z", "message": "\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u0439 sonar"}, "afterCommit": {"oid": "61498ad9c692c7fa1ddc81d613159b8d233af952", "author": {"user": {"login": "qtLex", "name": "Eduard Ivanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/61498ad9c692c7fa1ddc81d613159b8d233af952", "committedDate": "2020-10-04T19:20:38Z", "message": "\u041f\u043e\u043d\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u043c\u0435\u0442\u043e\u0434\u0430"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "61498ad9c692c7fa1ddc81d613159b8d233af952", "author": {"user": {"login": "qtLex", "name": "Eduard Ivanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/61498ad9c692c7fa1ddc81d613159b8d233af952", "committedDate": "2020-10-04T19:20:38Z", "message": "\u041f\u043e\u043d\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u043c\u0435\u0442\u043e\u0434\u0430"}, "afterCommit": {"oid": "18ecd68116215f37aa9cde65da2fcd75db714bdb", "author": {"user": {"login": "qtLex", "name": "Eduard Ivanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/18ecd68116215f37aa9cde65da2fcd75db714bdb", "committedDate": "2020-10-07T18:33:56Z", "message": "\u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430 \u0437\u0430 \u043c\u0430\u0441\u0442\u0435\u0440\u043e\u043c"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "18ecd68116215f37aa9cde65da2fcd75db714bdb", "author": {"user": {"login": "qtLex", "name": "Eduard Ivanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/18ecd68116215f37aa9cde65da2fcd75db714bdb", "committedDate": "2020-10-07T18:33:56Z", "message": "\u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430 \u0437\u0430 \u043c\u0430\u0441\u0442\u0435\u0440\u043e\u043c"}, "afterCommit": {"oid": "6b4488fb79bad4667098d44831a09ae000c76e56", "author": {"user": {"login": "qtLex", "name": "Eduard Ivanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/6b4488fb79bad4667098d44831a09ae000c76e56", "committedDate": "2020-10-15T19:32:40Z", "message": "\u0412\u044b\u043d\u0435\u0441 \u0432 \u0440\u0435\u0441\u0443\u0440\u0441\u044b \u0438\u043c\u0435\u043d\u0430 \u043a\u043e\u0434\u044d\u043a\u0448\u0435\u043d\u043e\u0432"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6b4488fb79bad4667098d44831a09ae000c76e56", "author": {"user": {"login": "qtLex", "name": "Eduard Ivanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/6b4488fb79bad4667098d44831a09ae000c76e56", "committedDate": "2020-10-15T19:32:40Z", "message": "\u0412\u044b\u043d\u0435\u0441 \u0432 \u0440\u0435\u0441\u0443\u0440\u0441\u044b \u0438\u043c\u0435\u043d\u0430 \u043a\u043e\u0434\u044d\u043a\u0448\u0435\u043d\u043e\u0432"}, "afterCommit": {"oid": "0066b54adadf9119f45a564d8c673406a77acbec", "author": {"user": {"login": "qtLex", "name": "Eduard Ivanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/0066b54adadf9119f45a564d8c673406a77acbec", "committedDate": "2020-10-16T16:48:12Z", "message": "\u0412\u044b\u043d\u0435\u0441 \u0432 \u0440\u0435\u0441\u0443\u0440\u0441\u044b \u0438\u043c\u0435\u043d\u0430 \u043a\u043e\u0434\u044d\u043a\u0448\u0435\u043d\u043e\u0432"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNDIxOTAz", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1333#pullrequestreview-511421903", "createdAt": "2020-10-19T05:33:07Z", "commit": {"oid": "0066b54adadf9119f45a564d8c673406a77acbec"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNTozMzowN1rOHj96ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNTozNDozM1rOHj99Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ3NjY0Mw==", "bodyText": "\u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0438 \u043c\u0435\u0442\u043e\u0434 \u043d\u0438\u0436\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442 \u043d\u0430 98%, \u0430\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0437\u0430 \u043d\u0438\u043c - \u043d\u0430 85.\n\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u044d\u043a\u0448\u0435\u043d\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u043e\u0438\u0442 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u043e\u043c", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1333#discussion_r507476643", "createdAt": "2020-10-19T05:33:07Z", "author": {"login": "theshadowco"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/codeactions/DisableDiagnosticTriggeringSupplier.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.codeactions;\n+\n+import com.github._1c_syntax.bsl.languageserver.configuration.Language;\n+import com.github._1c_syntax.bsl.languageserver.configuration.LanguageServerConfiguration;\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.languageserver.utils.Resources;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionKind;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+import org.jetbrains.annotations.NotNull;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+\n+@Component\n+public class DisableDiagnosticTriggeringSupplier implements CodeActionSupplier {\n+\n+  private static final String ALL_DIAGNOSTIC_NAME = \"\";\n+  private final Language language;\n+  private List<CodeAction> result;\n+  private CodeActionParams params;\n+  private DocumentContext documentContext;\n+  private Optional<Token> lastTokenSelectedInLine;\n+  private boolean isOneLineRange;\n+\n+  public DisableDiagnosticTriggeringSupplier(LanguageServerConfiguration languageServerConfiguration) {\n+    this.language = languageServerConfiguration.getLanguage();\n+  }\n+\n+  /**\n+   * \u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 {@code CodeAction} \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043b\u0443\u0436\u0435\u0431\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u0435\n+   * \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438.\n+   * \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432 \u0442\u0440\u0435\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\u0445:\n+   * 1. \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435\n+   * 2. \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u0430\u0440\u043e\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432\n+   * 3. \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432\u043e \u0432\u0441\u0435\u043c \u0444\u0430\u0439\u043b\u0435\n+   *\n+   * @param params          \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432\u044b\u0437\u043e\u0432\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 {@code codeAction}\n+   * @param documentContext \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f\n+   * @return {@code List<CodeAction>} \u0435\u0441\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044c \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439,\n+   * \u043f\u0443\u0441\u0442\u043e\u0439 {@code List} \u0435\u0441\u043b\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f\n+   */\n+  @Override\n+  public List<CodeAction> getCodeActions(CodeActionParams params, DocumentContext documentContext) {\n+\n+    initParams(params, documentContext);\n+\n+    if (!params.getContext().getDiagnostics().isEmpty()) {\n+      actionDisableDiagnosticInLine();\n+      actionDisableDiagnosticInRegion();\n+      actionDisableDiagnosticInFile();\n+    }\n+\n+    actionDisableAllDiagnosticInLine();\n+    actionDisableAllDiagnosticInRegion();\n+    actionDisableAllDiagnosticInFile();\n+    return result;\n+\n+  }\n+\n+  private void initParams(CodeActionParams params, DocumentContext documentContext) {\n+    this.result = new ArrayList<>();\n+    this.params = params;\n+    this.documentContext = documentContext;\n+\n+    lastTokenSelectedInLine = Optional.empty();\n+\n+    if (params.getRange().getStart() == null || params.getRange().getEnd() == null) {\n+      return;\n+    }\n+\n+    isOneLineRange = params.getRange().getStart().getLine() == params.getRange().getEnd().getLine();\n+    var selectedLineNumber = params.getRange().getEnd().getLine() + 1;\n+\n+    lastTokenSelectedInLine = documentContext\n+      .getTokens()\n+      .stream()\n+      .filter(token -> token.getLine() == selectedLineNumber)\n+      .max(Comparator.comparingInt(Token::getCharPositionInLine));\n+  }\n+\n+  private void actionDisableDiagnosticInLine() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0066b54adadf9119f45a564d8c673406a77acbec"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ3NzI5MQ==", "bodyText": "\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0440\u0435\u043d\u0434\u0436\u0430 \u043a\u043e\u043f\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0432 createInRegionTextEdits, \u0432\u044b\u043d\u0435\u0441\u0438 \u0432 \u043c\u0435\u0442\u043e\u0434", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1333#discussion_r507477291", "createdAt": "2020-10-19T05:34:33Z", "author": {"login": "theshadowco"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/codeactions/DisableDiagnosticTriggeringSupplier.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.codeactions;\n+\n+import com.github._1c_syntax.bsl.languageserver.configuration.Language;\n+import com.github._1c_syntax.bsl.languageserver.configuration.LanguageServerConfiguration;\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.languageserver.utils.Resources;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionKind;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+import org.jetbrains.annotations.NotNull;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+\n+@Component\n+public class DisableDiagnosticTriggeringSupplier implements CodeActionSupplier {\n+\n+  private static final String ALL_DIAGNOSTIC_NAME = \"\";\n+  private final Language language;\n+  private List<CodeAction> result;\n+  private CodeActionParams params;\n+  private DocumentContext documentContext;\n+  private Optional<Token> lastTokenSelectedInLine;\n+  private boolean isOneLineRange;\n+\n+  public DisableDiagnosticTriggeringSupplier(LanguageServerConfiguration languageServerConfiguration) {\n+    this.language = languageServerConfiguration.getLanguage();\n+  }\n+\n+  /**\n+   * \u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 {@code CodeAction} \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043b\u0443\u0436\u0435\u0431\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u0435\n+   * \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438.\n+   * \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432 \u0442\u0440\u0435\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\u0445:\n+   * 1. \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435\n+   * 2. \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u0430\u0440\u043e\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432\n+   * 3. \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432\u043e \u0432\u0441\u0435\u043c \u0444\u0430\u0439\u043b\u0435\n+   *\n+   * @param params          \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432\u044b\u0437\u043e\u0432\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 {@code codeAction}\n+   * @param documentContext \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f\n+   * @return {@code List<CodeAction>} \u0435\u0441\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044c \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439,\n+   * \u043f\u0443\u0441\u0442\u043e\u0439 {@code List} \u0435\u0441\u043b\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f\n+   */\n+  @Override\n+  public List<CodeAction> getCodeActions(CodeActionParams params, DocumentContext documentContext) {\n+\n+    initParams(params, documentContext);\n+\n+    if (!params.getContext().getDiagnostics().isEmpty()) {\n+      actionDisableDiagnosticInLine();\n+      actionDisableDiagnosticInRegion();\n+      actionDisableDiagnosticInFile();\n+    }\n+\n+    actionDisableAllDiagnosticInLine();\n+    actionDisableAllDiagnosticInRegion();\n+    actionDisableAllDiagnosticInFile();\n+    return result;\n+\n+  }\n+\n+  private void initParams(CodeActionParams params, DocumentContext documentContext) {\n+    this.result = new ArrayList<>();\n+    this.params = params;\n+    this.documentContext = documentContext;\n+\n+    lastTokenSelectedInLine = Optional.empty();\n+\n+    if (params.getRange().getStart() == null || params.getRange().getEnd() == null) {\n+      return;\n+    }\n+\n+    isOneLineRange = params.getRange().getStart().getLine() == params.getRange().getEnd().getLine();\n+    var selectedLineNumber = params.getRange().getEnd().getLine() + 1;\n+\n+    lastTokenSelectedInLine = documentContext\n+      .getTokens()\n+      .stream()\n+      .filter(token -> token.getLine() == selectedLineNumber)\n+      .max(Comparator.comparingInt(Token::getCharPositionInLine));\n+  }\n+\n+  private void actionDisableDiagnosticInLine() {\n+    if (lastTokenSelectedInLine.isEmpty() || !isOneLineRange) {\n+      return;\n+    }\n+\n+    result.addAll(\n+      params.getContext()\n+        .getDiagnostics()\n+        .stream()\n+        .map(Diagnostic::getCode)\n+        .map(Either::getLeft)\n+        .distinct()\n+        .map(name -> createCodeAction(getMessage(\"line\", name), createInLineTextEdits(\":\" + name)))\n+        .collect(Collectors.toList())\n+    );\n+  }\n+\n+  private void actionDisableDiagnosticInRegion() {\n+    if (lastTokenSelectedInLine.isEmpty() || isOneLineRange) {\n+      return;\n+    }\n+\n+    result.addAll(\n+      params.getContext()\n+        .getDiagnostics()\n+        .stream()\n+        .map(Diagnostic::getCode)\n+        .map(Either::getLeft)\n+        .distinct()\n+        .map(name -> createCodeAction(getMessage(\"range\", name), createInRegionTextEdits(\":\" + name)))\n+        .collect(Collectors.toList())\n+    );\n+  }\n+\n+  private void actionDisableDiagnosticInFile() {\n+    result.addAll(\n+      params.getContext()\n+        .getDiagnostics()\n+        .stream()\n+        .map(Diagnostic::getCode)\n+        .map(Either::getLeft)\n+        .distinct()\n+        .map(name -> createCodeAction(getMessage(\"file\", name), createInFileTextEdits(\":\" + name)))\n+        .collect(Collectors.toList())\n+    );\n+  }\n+\n+  private void actionDisableAllDiagnosticInLine() {\n+    if (lastTokenSelectedInLine.isEmpty() || !isOneLineRange) {\n+      return;\n+    }\n+\n+    result.add(createCodeAction(getMessage(\"lineAll\"), createInLineTextEdits(ALL_DIAGNOSTIC_NAME)));\n+  }\n+\n+  private void actionDisableAllDiagnosticInRegion() {\n+    if (lastTokenSelectedInLine.isEmpty() || isOneLineRange) {\n+      return;\n+    }\n+\n+    result.add(createCodeAction(getMessage(\"rangeAll\"), createInRegionTextEdits(ALL_DIAGNOSTIC_NAME)));\n+  }\n+\n+  private void actionDisableAllDiagnosticInFile() {\n+    result.add(createCodeAction(getMessage(\"fileAll\"), createInFileTextEdits(ALL_DIAGNOSTIC_NAME)));\n+  }\n+\n+  private List<TextEdit> createInLineTextEdits(String diagnosticName) {\n+    Token last = lastTokenSelectedInLine.get();\n+    Range range = Ranges.create(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0066b54adadf9119f45a564d8c673406a77acbec"}, "originalPosition": 186}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNTA3NTU2", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1333#pullrequestreview-511507556", "createdAt": "2020-10-19T08:08:13Z", "commit": {"oid": "0066b54adadf9119f45a564d8c673406a77acbec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwODowODoxM1rOHkCeCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwODowODoxM1rOHkCeCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU1MTI0Mw==", "bodyText": "\u041d\u0435 \u0441\u0442\u043e\u0438\u0442 \u0442\u0430\u043a \u0434\u0435\u043b\u0430\u0442\u044c. \u042f\u0437\u044b\u043a \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u0432 \u0440\u0430\u043d\u0442\u0430\u0439\u043c\u0435, \u0430 \u0441\u0430\u043f\u043f\u043b\u0430\u0435\u0440 \u044d\u0442\u043e\u0433\u043e \u043d\u0435 \u0437\u0430\u043c\u0435\u0442\u0438\u0442 (\u0442.\u043a. \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0438\u043d\u0433\u043b\u0442\u043e\u043d\u043e\u043c)", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1333#discussion_r507551243", "createdAt": "2020-10-19T08:08:13Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/codeactions/DisableDiagnosticTriggeringSupplier.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.codeactions;\n+\n+import com.github._1c_syntax.bsl.languageserver.configuration.Language;\n+import com.github._1c_syntax.bsl.languageserver.configuration.LanguageServerConfiguration;\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.languageserver.utils.Resources;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionKind;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+import org.jetbrains.annotations.NotNull;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+\n+@Component\n+public class DisableDiagnosticTriggeringSupplier implements CodeActionSupplier {\n+\n+  private static final String ALL_DIAGNOSTIC_NAME = \"\";\n+  private final Language language;\n+  private List<CodeAction> result;\n+  private CodeActionParams params;\n+  private DocumentContext documentContext;\n+  private Optional<Token> lastTokenSelectedInLine;\n+  private boolean isOneLineRange;\n+\n+  public DisableDiagnosticTriggeringSupplier(LanguageServerConfiguration languageServerConfiguration) {\n+    this.language = languageServerConfiguration.getLanguage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0066b54adadf9119f45a564d8c673406a77acbec"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNTA5MTUx", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1333#pullrequestreview-511509151", "createdAt": "2020-10-19T08:10:13Z", "commit": {"oid": "0066b54adadf9119f45a564d8c673406a77acbec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwODoxMDoxM1rOHkCi5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwODoxMDoxM1rOHkCi5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU1MjQ4NQ==", "bodyText": "\u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e \u0432\u043c\u0435\u0441\u0442\u043e \u044d\u0442\u0438\u0445 \u0434\u0432\u0443\u0445 \u043c\u0430\u043f\u043e\u0432 \u0441\u0442\u043e\u0438\u0442 \u0432\u0437\u044f\u0442\u044c DiagnosticCode#getStringValue https://1c-syntax.github.io/bsl-language-server/dev/javadoc/com/github/_1c_syntax/bsl/languageserver/diagnostics/metadata/DiagnosticCode.html#getStringValue()", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1333#discussion_r507552485", "createdAt": "2020-10-19T08:10:13Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/codeactions/DisableDiagnosticTriggeringSupplier.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.codeactions;\n+\n+import com.github._1c_syntax.bsl.languageserver.configuration.Language;\n+import com.github._1c_syntax.bsl.languageserver.configuration.LanguageServerConfiguration;\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.languageserver.utils.Resources;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionKind;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+import org.jetbrains.annotations.NotNull;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+\n+@Component\n+public class DisableDiagnosticTriggeringSupplier implements CodeActionSupplier {\n+\n+  private static final String ALL_DIAGNOSTIC_NAME = \"\";\n+  private final Language language;\n+  private List<CodeAction> result;\n+  private CodeActionParams params;\n+  private DocumentContext documentContext;\n+  private Optional<Token> lastTokenSelectedInLine;\n+  private boolean isOneLineRange;\n+\n+  public DisableDiagnosticTriggeringSupplier(LanguageServerConfiguration languageServerConfiguration) {\n+    this.language = languageServerConfiguration.getLanguage();\n+  }\n+\n+  /**\n+   * \u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 {@code CodeAction} \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043b\u0443\u0436\u0435\u0431\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u0435\n+   * \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438.\n+   * \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432 \u0442\u0440\u0435\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\u0445:\n+   * 1. \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435\n+   * 2. \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u0430\u0440\u043e\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432\n+   * 3. \u041e\u0442\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u043d\u0438\u044f \u0432\u043e \u0432\u0441\u0435\u043c \u0444\u0430\u0439\u043b\u0435\n+   *\n+   * @param params          \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432\u044b\u0437\u043e\u0432\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 {@code codeAction}\n+   * @param documentContext \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f\n+   * @return {@code List<CodeAction>} \u0435\u0441\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044c \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439,\n+   * \u043f\u0443\u0441\u0442\u043e\u0439 {@code List} \u0435\u0441\u043b\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f\n+   */\n+  @Override\n+  public List<CodeAction> getCodeActions(CodeActionParams params, DocumentContext documentContext) {\n+\n+    initParams(params, documentContext);\n+\n+    if (!params.getContext().getDiagnostics().isEmpty()) {\n+      actionDisableDiagnosticInLine();\n+      actionDisableDiagnosticInRegion();\n+      actionDisableDiagnosticInFile();\n+    }\n+\n+    actionDisableAllDiagnosticInLine();\n+    actionDisableAllDiagnosticInRegion();\n+    actionDisableAllDiagnosticInFile();\n+    return result;\n+\n+  }\n+\n+  private void initParams(CodeActionParams params, DocumentContext documentContext) {\n+    this.result = new ArrayList<>();\n+    this.params = params;\n+    this.documentContext = documentContext;\n+\n+    lastTokenSelectedInLine = Optional.empty();\n+\n+    if (params.getRange().getStart() == null || params.getRange().getEnd() == null) {\n+      return;\n+    }\n+\n+    isOneLineRange = params.getRange().getStart().getLine() == params.getRange().getEnd().getLine();\n+    var selectedLineNumber = params.getRange().getEnd().getLine() + 1;\n+\n+    lastTokenSelectedInLine = documentContext\n+      .getTokens()\n+      .stream()\n+      .filter(token -> token.getLine() == selectedLineNumber)\n+      .max(Comparator.comparingInt(Token::getCharPositionInLine));\n+  }\n+\n+  private void actionDisableDiagnosticInLine() {\n+    if (lastTokenSelectedInLine.isEmpty() || !isOneLineRange) {\n+      return;\n+    }\n+\n+    result.addAll(\n+      params.getContext()\n+        .getDiagnostics()\n+        .stream()\n+        .map(Diagnostic::getCode)\n+        .map(Either::getLeft)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0066b54adadf9119f45a564d8c673406a77acbec"}, "originalPosition": 127}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "57da249ca7c53220c6cc9e574275509cf94d3986", "author": {"user": {"login": "qtLex", "name": "Eduard Ivanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/57da249ca7c53220c6cc9e574275509cf94d3986", "committedDate": "2020-10-19T19:00:57Z", "message": "\u0423\u0431\u0440\u0430\u043b \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0435\u0441\u044f \u0443\u0447\u0430\u0441\u0442\u043a\u0438"}, "afterCommit": {"oid": "e157054844ac050a95fd295edad42b180b612aa4", "author": {"user": {"login": "qtLex", "name": "Eduard Ivanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/e157054844ac050a95fd295edad42b180b612aa4", "committedDate": "2020-10-20T09:49:10Z", "message": "\u0423\u0431\u0440\u0430\u043b \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0435\u0441\u044f \u0443\u0447\u0430\u0441\u0442\u043a\u0438"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d85cdfcb9b2bf94d7fe4b5b36c9188dd72e013d0", "author": {"user": {"login": "qtLex", "name": "Eduard Ivanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/d85cdfcb9b2bf94d7fe4b5b36c9188dd72e013d0", "committedDate": "2020-11-01T20:07:47Z", "message": "code action complite"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78e3c43328f66a8b52899035e396b62f8c978028", "author": {"user": null}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/78e3c43328f66a8b52899035e396b62f8c978028", "committedDate": "2020-11-01T20:07:47Z", "message": "\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u0439 sonar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4098ad1d80c6033309238fdffe9f83551068d2e4", "author": {"user": {"login": "qtLex", "name": "Eduard Ivanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/4098ad1d80c6033309238fdffe9f83551068d2e4", "committedDate": "2020-11-01T20:07:47Z", "message": "\u0423\u0431\u0440\u0430\u043b \u043b\u0438\u0448\u043d\u0435\u0435 \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2496376df0b2c7883ba749a5824cfaebf8622903", "author": {"user": {"login": "qtLex", "name": "Eduard Ivanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/2496376df0b2c7883ba749a5824cfaebf8622903", "committedDate": "2020-11-01T20:07:47Z", "message": "\u041f\u043e\u043d\u044f\u0442\u043d\u043e\u0441\u0442\u044c \u043c\u0435\u0442\u043e\u0434\u0430"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d3314340d75d8e15e54cd09feadf415d7220938", "author": {"user": {"login": "qtLex", "name": "Eduard Ivanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/0d3314340d75d8e15e54cd09feadf415d7220938", "committedDate": "2020-11-01T20:07:47Z", "message": "\u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0442\u0435\u043a\u0441\u0442\u0430 \u0437\u0430 \u043c\u0430\u0441\u0442\u0435\u0440\u043e\u043c"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11cdecba85a8d58cf0b8a3a01f83a399def80ddf", "author": {"user": {"login": "qtLex", "name": "Eduard Ivanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/11cdecba85a8d58cf0b8a3a01f83a399def80ddf", "committedDate": "2020-11-01T20:07:47Z", "message": "\u0412\u044b\u043d\u0435\u0441 \u0432 \u0440\u0435\u0441\u0443\u0440\u0441\u044b \u0438\u043c\u0435\u043d\u0430 \u043a\u043e\u0434\u044d\u043a\u0448\u0435\u043d\u043e\u0432"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c70758f4d635cf9e33a4403601edbf6ab75e9fd7", "author": {"user": {"login": "qtLex", "name": "Eduard Ivanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/c70758f4d635cf9e33a4403601edbf6ab75e9fd7", "committedDate": "2020-11-01T20:07:47Z", "message": "\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u043b \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u044f"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03b5641f188b0b97d8753e2bfcfc075e110a35bf", "author": {"user": {"login": "qtLex", "name": "Eduard Ivanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/03b5641f188b0b97d8753e2bfcfc075e110a35bf", "committedDate": "2020-11-01T20:07:47Z", "message": "\u0423\u0431\u0440\u0430\u043b \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0435\u0441\u044f \u0443\u0447\u0430\u0441\u0442\u043a\u0438"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e157054844ac050a95fd295edad42b180b612aa4", "author": {"user": {"login": "qtLex", "name": "Eduard Ivanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/e157054844ac050a95fd295edad42b180b612aa4", "committedDate": "2020-10-20T09:49:10Z", "message": "\u0423\u0431\u0440\u0430\u043b \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0435\u0441\u044f \u0443\u0447\u0430\u0441\u0442\u043a\u0438"}, "afterCommit": {"oid": "03b5641f188b0b97d8753e2bfcfc075e110a35bf", "author": {"user": {"login": "qtLex", "name": "Eduard Ivanov"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/03b5641f188b0b97d8753e2bfcfc075e110a35bf", "committedDate": "2020-11-01T20:07:47Z", "message": "\u0423\u0431\u0440\u0430\u043b \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0435\u0441\u044f \u0443\u0447\u0430\u0441\u0442\u043a\u0438"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4627, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}