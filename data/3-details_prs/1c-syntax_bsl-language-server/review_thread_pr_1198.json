{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4OTcwMjI4", "number": 1198, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNTo0ODoxNVrOD9P4MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODozMDoyN1rOD9St3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTQ5ODcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNTo0ODoxNVrOGWoSBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxMzowMDoyM1rOGcycsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MTgyOQ==", "bodyText": "\u043f\u0440\u043e\u0431\u0435\u043b \u043f\u043e\u0441\u043b\u0435 //", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r426381829", "createdAt": "2020-05-18T05:48:15Z", "author": {"login": "theshadowco"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputer.java", "diffHunk": "@@ -39,13 +41,20 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.stream.Collectors;\n \n public final class MethodSymbolComputer\n   extends BSLParserBaseVisitor<ParseTree>\n   implements Computer<List<MethodSymbol>> {\n \n+  //\u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0430\u044f \u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u044d\u0442\u0438\u0445 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0430 \u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u0445 \u0432 MethodSymbolComputerTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgzOTg1OA==", "bodyText": "\u0441\u0434\u0435\u043b\u0430\u043d\u043e", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r432839858", "createdAt": "2020-05-30T13:00:23Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputer.java", "diffHunk": "@@ -39,13 +41,20 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.stream.Collectors;\n \n public final class MethodSymbolComputer\n   extends BSLParserBaseVisitor<ParseTree>\n   implements Computer<List<MethodSymbol>> {\n \n+  //\u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0430\u044f \u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u044d\u0442\u0438\u0445 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0430 \u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u0445 \u0432 MethodSymbolComputerTest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MTgyOQ=="}, "originalCommit": {"oid": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTUwNzIxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNTo1MjozMVrOGWoW4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxMzozMDoxNFrOGcyk3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MzA3Mg==", "bodyText": "\u043d\u0430\u0434\u043e \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0432 \u0444\u0430\u0439\u043b \u043f\u043e \u043e\u0431\u044b\u0447\u0438\u044f\u043c", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r426383072", "createdAt": "2020-05-18T05:52:31Z", "author": {"login": "theshadowco"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java", "diffHunk": "@@ -131,6 +155,239 @@ void testParseError() {\n \n   }\n \n+  @Test\n+  void testCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0MTk1MA==", "bodyText": "\u0441\u0434\u0435\u043b\u0430\u043b \u043f\u043e \"\u043e\u0431\u044b\u0447\u0430\u044f\u043c\" - \u043f\u0435\u0440\u0435\u043d\u0435\u0441 \u0432 \u043e\u0431\u0449\u0438\u0439 \u0444\u0430\u0439\u043b", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r432841950", "createdAt": "2020-05-30T13:30:14Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java", "diffHunk": "@@ -131,6 +155,239 @@ void testParseError() {\n \n   }\n \n+  @Test\n+  void testCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MzA3Mg=="}, "originalCommit": {"oid": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTUwNzc1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNTo1Mjo0NFrOGWoXJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxMzozMDozM1rOGcyk8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MzE0Mw==", "bodyText": "\u0432 \u0444\u0430\u0439\u043b", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r426383143", "createdAt": "2020-05-18T05:52:44Z", "author": {"login": "theshadowco"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java", "diffHunk": "@@ -131,6 +155,239 @@ void testParseError() {\n \n   }\n \n+  @Test\n+  void testCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04346()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04346\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAtServerNoContext() {\n+\n+    String module = \"&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MzIyNg==", "bodyText": "\u0438 \u043d\u0438\u0436\u0435 \u0442\u043e\u0436\u0435", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r426383226", "createdAt": "2020-05-18T05:53:01Z", "author": {"login": "theshadowco"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java", "diffHunk": "@@ -131,6 +155,239 @@ void testParseError() {\n \n   }\n \n+  @Test\n+  void testCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04346()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04346\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAtServerNoContext() {\n+\n+    String module = \"&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MzE0Mw=="}, "originalCommit": {"oid": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0MTk2Mg==", "bodyText": "\u0441\u0434\u0435\u043b\u0430\u043b \u043f\u043e \"\u043e\u0431\u044b\u0447\u0430\u044f\u043c\" - \u043f\u0435\u0440\u0435\u043d\u0435\u0441 \u0432 \u043e\u0431\u0449\u0438\u0439 \u0444\u0430\u0439\u043b", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r432841962", "createdAt": "2020-05-30T13:30:21Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java", "diffHunk": "@@ -131,6 +155,239 @@ void testParseError() {\n \n   }\n \n+  @Test\n+  void testCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04346()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04346\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAtServerNoContext() {\n+\n+    String module = \"&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MzE0Mw=="}, "originalCommit": {"oid": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0MTk3MA==", "bodyText": "\u0441\u0434\u0435\u043b\u0430\u043b \u043f\u043e \"\u043e\u0431\u044b\u0447\u0430\u044f\u043c\" - \u043f\u0435\u0440\u0435\u043d\u0435\u0441 \u0432 \u043e\u0431\u0449\u0438\u0439 \u0444\u0430\u0439\u043b - \u0432\u0441\u0435 \u0442\u0435\u0441\u0442\u044b", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r432841970", "createdAt": "2020-05-30T13:30:33Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java", "diffHunk": "@@ -131,6 +155,239 @@ void testParseError() {\n \n   }\n \n+  @Test\n+  void testCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04346()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04346\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAtServerNoContext() {\n+\n+    String module = \"&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MzE0Mw=="}, "originalCommit": {"oid": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTUxMDU4OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNTo1NDoxN1rOGWoY5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxMzowMDozNFrOGcycwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MzU5MQ==", "bodyText": "\u043f\u0440\u043e\u0431\u0435\u043b \u043f\u043e\u0441\u043b\u0435 //", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r426383591", "createdAt": "2020-05-18T05:54:17Z", "author": {"login": "theshadowco"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java", "diffHunk": "@@ -131,6 +155,239 @@ void testParseError() {\n \n   }\n \n+  @Test\n+  void testCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04346()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04346\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAtServerNoContext() {\n+\n+    String module = \"&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04347()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04347\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_SERVER_NO_CONTEXT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testSeveralCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04348()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04348\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testNonCompilerDirectiveAndNonAnnotation() {\n+\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04349()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04349\");\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testAnnotation() {\n+\n+    String module = \"&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043410()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(1);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.AFTER);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotation() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043411()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotationOtherOrder() {\n+\n+    String module = \"&\u041f\u043e\u0441\u043b\u0435\\n&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043412()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotationForFunction() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u041c\u0435\u0442\u043e\u043413()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u0424\u0443\u043d\u043a\u0446\u0438\u0438\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  private static void checkCompilerDirective_for_AtClient_AndAnnotation_After(String module) {\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(1);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.AFTER);\n+  }\n+\n+  @Test\n+  void testSeveralAnnotationsForFunction() {\n+\n+    String module = \"&\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f1\\n\" +\n+      \"&\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f2\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043414() \u042d\u043a\u0441\u043f\u043e\u0440\u0442\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(2);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.CUSTOM);\n+    assertThat(annotations.get(1)).isEqualTo(Annotation.CUSTOM);\n+  }\n+\n+  // \u0435\u0441\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 \u0443\u043f\u0440.\u0444\u043e\u0440\u043c\u044b\n+  // \u043f\u0440\u0438 \u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0441 \u0434\u0440\u0443\u0433\u043e\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u043e\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u043c\u0435\u043d\u043d\u043e \u043e\u043d\u0430\n+  // \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u0440\u044f\u0434\u043e\u043a 1\n+  //&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //\u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u043b\u0430\u0434\u0447\u0438\u043a\u0435 \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0422\u0430\u0431\u043b\u0438\u0446\u0430\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n+  // \u0438\u043b\u0438 \u043f\u043e\u0440\u044f\u0434\u043e\u043a 2\n+  //&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //\u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e\n+  //\u0442.\u0435. \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u044d\u0442\u0438\u0445 2\u0445 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432 \u043d\u0435 \u0432\u0430\u0436\u0435\u043d, \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.\n+  // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u043b \u043d\u0430 8.3.15\n+\n+  @Test\n+  void testSeveralDirectivesWithoutContext() {\n+\n+    String module = \"&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +\n+      \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043415()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\\n\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_SERVER_NO_CONTEXT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+\n+  }\n+\n+  @Test\n+  void testSeveralDirectivesWithoutContextReverse() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +\n+      \"&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043416()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\\n\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_SERVER_NO_CONTEXT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+\n+  }\n+\n+  // \u0435\u0441\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b\n+  // \u043f\u0440\u0438 \u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0441 \u0434\u0440\u0443\u0433\u043e\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u043e\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u043c\u0435\u043d\u043d\u043e \u043e\u043d\u0430\n+  //  \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u043b \u043d\u0430 8.3.15\n+  //\u043f\u043e\u0440\u044f\u0434\u043e\u043a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgzOTg3NA==", "bodyText": "\u0441\u0434\u0435\u043b\u0430\u043d\u043e", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r432839874", "createdAt": "2020-05-30T13:00:34Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java", "diffHunk": "@@ -131,6 +155,239 @@ void testParseError() {\n \n   }\n \n+  @Test\n+  void testCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04346()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04346\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAtServerNoContext() {\n+\n+    String module = \"&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04347()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04347\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_SERVER_NO_CONTEXT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testSeveralCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04348()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04348\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testNonCompilerDirectiveAndNonAnnotation() {\n+\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04349()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04349\");\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testAnnotation() {\n+\n+    String module = \"&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043410()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(1);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.AFTER);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotation() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043411()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotationOtherOrder() {\n+\n+    String module = \"&\u041f\u043e\u0441\u043b\u0435\\n&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043412()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotationForFunction() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u041c\u0435\u0442\u043e\u043413()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u0424\u0443\u043d\u043a\u0446\u0438\u0438\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  private static void checkCompilerDirective_for_AtClient_AndAnnotation_After(String module) {\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(1);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.AFTER);\n+  }\n+\n+  @Test\n+  void testSeveralAnnotationsForFunction() {\n+\n+    String module = \"&\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f1\\n\" +\n+      \"&\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f2\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043414() \u042d\u043a\u0441\u043f\u043e\u0440\u0442\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(2);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.CUSTOM);\n+    assertThat(annotations.get(1)).isEqualTo(Annotation.CUSTOM);\n+  }\n+\n+  // \u0435\u0441\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 \u0443\u043f\u0440.\u0444\u043e\u0440\u043c\u044b\n+  // \u043f\u0440\u0438 \u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0441 \u0434\u0440\u0443\u0433\u043e\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u043e\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u043c\u0435\u043d\u043d\u043e \u043e\u043d\u0430\n+  // \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u0440\u044f\u0434\u043e\u043a 1\n+  //&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //\u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u043b\u0430\u0434\u0447\u0438\u043a\u0435 \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0422\u0430\u0431\u043b\u0438\u0446\u0430\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n+  // \u0438\u043b\u0438 \u043f\u043e\u0440\u044f\u0434\u043e\u043a 2\n+  //&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //\u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e\n+  //\u0442.\u0435. \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u044d\u0442\u0438\u0445 2\u0445 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432 \u043d\u0435 \u0432\u0430\u0436\u0435\u043d, \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.\n+  // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u043b \u043d\u0430 8.3.15\n+\n+  @Test\n+  void testSeveralDirectivesWithoutContext() {\n+\n+    String module = \"&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +\n+      \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043415()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\\n\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_SERVER_NO_CONTEXT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+\n+  }\n+\n+  @Test\n+  void testSeveralDirectivesWithoutContextReverse() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +\n+      \"&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043416()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\\n\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_SERVER_NO_CONTEXT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+\n+  }\n+\n+  // \u0435\u0441\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b\n+  // \u043f\u0440\u0438 \u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0441 \u0434\u0440\u0443\u0433\u043e\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u043e\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u043c\u0435\u043d\u043d\u043e \u043e\u043d\u0430\n+  //  \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u043b \u043d\u0430 8.3.15\n+  //\u043f\u043e\u0440\u044f\u0434\u043e\u043a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4MzU5MQ=="}, "originalCommit": {"oid": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTUyNjM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNjowMjo1MFrOGWoiYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxMzowMDo0MVrOGcycyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4NjAxOQ==", "bodyText": "\u0438\u043c\u044f \u043a\u0430\u043f\u0441\u043e\u043c, \u043d\u0435?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r426386019", "createdAt": "2020-05-18T06:02:50Z", "author": {"login": "theshadowco"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputer.java", "diffHunk": "@@ -39,13 +41,20 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.stream.Collectors;\n \n public final class MethodSymbolComputer\n   extends BSLParserBaseVisitor<ParseTree>\n   implements Computer<List<MethodSymbol>> {\n \n+  //\u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0430\u044f \u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u044d\u0442\u0438\u0445 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0430 \u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u0445 \u0432 MethodSymbolComputerTest\n+  private static final Set<Integer> specialCompilerDirectivesTokenTypes = Set.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgzOTg4MQ==", "bodyText": "\u0441\u0434\u0435\u043b\u0430\u043d\u043e", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r432839881", "createdAt": "2020-05-30T13:00:41Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputer.java", "diffHunk": "@@ -39,13 +41,20 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.stream.Collectors;\n \n public final class MethodSymbolComputer\n   extends BSLParserBaseVisitor<ParseTree>\n   implements Computer<List<MethodSymbol>> {\n \n+  //\u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0430\u044f \u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u044d\u0442\u0438\u0445 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0430 \u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u0445 \u0432 MethodSymbolComputerTest\n+  private static final Set<Integer> specialCompilerDirectivesTokenTypes = Set.of(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4NjAxOQ=="}, "originalCommit": {"oid": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTkxMDUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODoxNzoxNlrOGWsO4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxMzowMDo1MVrOGcyc2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ0NjU2Mw==", "bodyText": "\u043b\u0443\u0447\u0448\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043d\u0430 isPresent/isEmpty. \u0442\u043e\u0433\u0434\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439 \u0448\u0430\u0433 \u043d\u0435 \u043d\u0443\u0436\u0435\u043d", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r426446563", "createdAt": "2020-05-18T08:17:16Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputer.java", "diffHunk": "@@ -177,4 +208,19 @@ private static String getParameterName(TerminalNode identifier) {\n       .map(ParseTree::getText)\n       .orElse(\"<UNKNOWN_IDENTIFIER>\");\n   }\n+\n+  private static List<Annotation> getAnnotations(List<? extends BSLParser.AnnotationContext> annotationContext) {\n+    final List<Annotation> annotations;\n+    if (annotationContext.isEmpty()) {\n+      annotations = Collections.emptyList();\n+    } else {\n+      annotations = annotationContext.stream()\n+        .map(annotation -> annotation.getStop().getType())\n+        .map(Annotation::of)\n+        .map(optionalAnnotation -> optionalAnnotation.orElse(null))\n+        .filter(Objects::nonNull)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgzOTg5Ng==", "bodyText": "\u0441\u0434\u0435\u043b\u0430\u043d\u043e", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r432839896", "createdAt": "2020-05-30T13:00:51Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputer.java", "diffHunk": "@@ -177,4 +208,19 @@ private static String getParameterName(TerminalNode identifier) {\n       .map(ParseTree::getText)\n       .orElse(\"<UNKNOWN_IDENTIFIER>\");\n   }\n+\n+  private static List<Annotation> getAnnotations(List<? extends BSLParser.AnnotationContext> annotationContext) {\n+    final List<Annotation> annotations;\n+    if (annotationContext.isEmpty()) {\n+      annotations = Collections.emptyList();\n+    } else {\n+      annotations = annotationContext.stream()\n+        .map(annotation -> annotation.getStop().getType())\n+        .map(Annotation::of)\n+        .map(optionalAnnotation -> optionalAnnotation.orElse(null))\n+        .filter(Objects::nonNull)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ0NjU2Mw=="}, "originalCommit": {"oid": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTkzNTM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/symbol/annotations/Annotation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODoyMzo0NVrOGWseVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxMDo1MToxOVrOGc4M7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1MDUxNw==", "bodyText": "\u0434\u043b\u044f \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0439 \u0431\u044b\u043b\u043e \u0431\u044b \u0435\u0449\u0435 \u043f\u043e\u043b\u0435\u0437\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0438\u043c\u0435\u043d\u0438 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 (\u0432\u0430\u0436\u043d\u043e \u0434\u043b\u044f custom) \u0438 \u0441\u043f\u0438\u0441\u043a\u0435 \u0435\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432. \u0442.\u0435. \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u0442\u044c Annotation \u0432 AnnotationKind (\u043a\u0430\u043a \u0442\u044b \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u043b \u0432 \u0430\u043f\u0438), \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 (\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0434\u0430\u0436\u0435 \u0441\u0438\u043c\u0432\u043e\u043b) Annotation.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r426450517", "createdAt": "2020-05-18T08:23:45Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/symbol/annotations/Annotation.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.context.symbol.annotations;\n+\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+public enum Annotation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkzNDEyNw==", "bodyText": "\u0441\u0434\u0435\u043b\u0430\u043d\u043e.\n\n\u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e\u0431 \u0438\u043c\u0435\u043d\u0438 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0438 \u0438 \u0441\u043f\u0438\u0441\u043a\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\n\u0432\u044b\u0434\u0435\u043b\u0435\u043d\u044b \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b Annotation, AnnotationKind \u0438 AnnotationParameterDefinition", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r432934127", "createdAt": "2020-05-31T10:51:19Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/symbol/annotations/Annotation.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.context.symbol.annotations;\n+\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+public enum Annotation {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1MDUxNw=="}, "originalCommit": {"oid": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTk1MDEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/symbol/annotations/CompilerDirective.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODoyNzoxMFrOGWsnJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxMzowMTowMlrOGcyc6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1Mjc3Mw==", "bodyText": "CompilerDirectiveKind", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r426452773", "createdAt": "2020-05-18T08:27:10Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/symbol/annotations/CompilerDirective.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.context.symbol.annotations;\n+\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+public enum CompilerDirective {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgzOTkxMw==", "bodyText": "\u043f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043b", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r432839913", "createdAt": "2020-05-30T13:01:02Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/symbol/annotations/CompilerDirective.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.context.symbol.annotations;\n+\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+public enum CompilerDirective {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1Mjc3Mw=="}, "originalCommit": {"oid": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTk1ODIxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODoyOToxMVrOGWssIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxMzowMToxM1rOGcyc8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1NDA1MQ==", "bodyText": "\u042d\u0442\u043e\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u043d\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u043b\u0438\u0431\u043e \u0432 MethodSymbol \u043b\u0438\u0431\u043e \u0432 MethodSymbolComputer (\u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u0435\u0435)", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r426454051", "createdAt": "2020-05-18T08:29:11Z", "author": {"login": "nixel2007"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java", "diffHunk": "@@ -131,6 +155,239 @@ void testParseError() {\n \n   }\n \n+  @Test\n+  void testCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04346()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04346\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAtServerNoContext() {\n+\n+    String module = \"&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04347()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04347\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_SERVER_NO_CONTEXT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testSeveralCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04348()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04348\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testNonCompilerDirectiveAndNonAnnotation() {\n+\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04349()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04349\");\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testAnnotation() {\n+\n+    String module = \"&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043410()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(1);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.AFTER);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotation() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043411()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotationOtherOrder() {\n+\n+    String module = \"&\u041f\u043e\u0441\u043b\u0435\\n&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043412()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotationForFunction() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u041c\u0435\u0442\u043e\u043413()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u0424\u0443\u043d\u043a\u0446\u0438\u0438\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  private static void checkCompilerDirective_for_AtClient_AndAnnotation_After(String module) {\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(1);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.AFTER);\n+  }\n+\n+  @Test\n+  void testSeveralAnnotationsForFunction() {\n+\n+    String module = \"&\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f1\\n\" +\n+      \"&\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f2\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043414() \u042d\u043a\u0441\u043f\u043e\u0440\u0442\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(2);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.CUSTOM);\n+    assertThat(annotations.get(1)).isEqualTo(Annotation.CUSTOM);\n+  }\n+\n+  // \u0435\u0441\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 \u0443\u043f\u0440.\u0444\u043e\u0440\u043c\u044b", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgzOTkyMw==", "bodyText": "\u043f\u0435\u0440\u0435\u043d\u0435\u0441 \u0432 MethodSymbolComputer", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r432839923", "createdAt": "2020-05-30T13:01:13Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java", "diffHunk": "@@ -131,6 +155,239 @@ void testParseError() {\n \n   }\n \n+  @Test\n+  void testCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04346()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04346\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAtServerNoContext() {\n+\n+    String module = \"&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04347()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04347\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_SERVER_NO_CONTEXT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testSeveralCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04348()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04348\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testNonCompilerDirectiveAndNonAnnotation() {\n+\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04349()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04349\");\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testAnnotation() {\n+\n+    String module = \"&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043410()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(1);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.AFTER);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotation() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043411()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotationOtherOrder() {\n+\n+    String module = \"&\u041f\u043e\u0441\u043b\u0435\\n&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043412()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotationForFunction() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u041c\u0435\u0442\u043e\u043413()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u0424\u0443\u043d\u043a\u0446\u0438\u0438\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  private static void checkCompilerDirective_for_AtClient_AndAnnotation_After(String module) {\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(1);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.AFTER);\n+  }\n+\n+  @Test\n+  void testSeveralAnnotationsForFunction() {\n+\n+    String module = \"&\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f1\\n\" +\n+      \"&\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f2\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043414() \u042d\u043a\u0441\u043f\u043e\u0440\u0442\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(2);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.CUSTOM);\n+    assertThat(annotations.get(1)).isEqualTo(Annotation.CUSTOM);\n+  }\n+\n+  // \u0435\u0441\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 \u0443\u043f\u0440.\u0444\u043e\u0440\u043c\u044b", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1NDA1MQ=="}, "originalCommit": {"oid": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTk2MzgwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODozMDoyN1rOGWsvag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxMzoxNDoxOFrOGcygcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1NDg5MA==", "bodyText": "\u0430 \u0442\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u043b \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043d\u0430 \u0442\u0440\u0435\u0445 \u0438 \u0431\u043e\u043b\u0435\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u0430\u0445?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r426454890", "createdAt": "2020-05-18T08:30:27Z", "author": {"login": "nixel2007"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java", "diffHunk": "@@ -131,6 +155,239 @@ void testParseError() {\n \n   }\n \n+  @Test\n+  void testCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04346()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04346\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAtServerNoContext() {\n+\n+    String module = \"&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04347()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04347\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_SERVER_NO_CONTEXT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testSeveralCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04348()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04348\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testNonCompilerDirectiveAndNonAnnotation() {\n+\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04349()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04349\");\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testAnnotation() {\n+\n+    String module = \"&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043410()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(1);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.AFTER);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotation() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043411()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotationOtherOrder() {\n+\n+    String module = \"&\u041f\u043e\u0441\u043b\u0435\\n&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043412()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotationForFunction() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u041c\u0435\u0442\u043e\u043413()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u0424\u0443\u043d\u043a\u0446\u0438\u0438\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  private static void checkCompilerDirective_for_AtClient_AndAnnotation_After(String module) {\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(1);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.AFTER);\n+  }\n+\n+  @Test\n+  void testSeveralAnnotationsForFunction() {\n+\n+    String module = \"&\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f1\\n\" +\n+      \"&\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f2\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043414() \u042d\u043a\u0441\u043f\u043e\u0440\u0442\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(2);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.CUSTOM);\n+    assertThat(annotations.get(1)).isEqualTo(Annotation.CUSTOM);\n+  }\n+\n+  // \u0435\u0441\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 \u0443\u043f\u0440.\u0444\u043e\u0440\u043c\u044b\n+  // \u043f\u0440\u0438 \u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0441 \u0434\u0440\u0443\u0433\u043e\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u043e\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u043c\u0435\u043d\u043d\u043e \u043e\u043d\u0430\n+  // \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u0440\u044f\u0434\u043e\u043a 1\n+  //&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //\u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u043b\u0430\u0434\u0447\u0438\u043a\u0435 \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0422\u0430\u0431\u043b\u0438\u0446\u0430\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n+  // \u0438\u043b\u0438 \u043f\u043e\u0440\u044f\u0434\u043e\u043a 2\n+  //&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //\u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e\n+  //\u0442.\u0435. \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u044d\u0442\u0438\u0445 2\u0445 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432 \u043d\u0435 \u0432\u0430\u0436\u0435\u043d, \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk2OTQ5NA==", "bodyText": "@nixel2007 \u043d\u0430 3\u0445 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u0430\u0445 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u043b, \u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u043e\u0448\u0438\u0431\u043a\u0430\u043c\u0438, \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435, \u0447\u0442\u043e \u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u0445.\n\u0438\u043b\u0438 \u0442\u044b \u043f\u0440\u043e 3 \u0438 \u0431\u043e\u043b\u0435\u0435, \u043a\u043e\u0433\u0434\u0430 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u044b \u0435\u0441\u0442\u044c?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r431969494", "createdAt": "2020-05-28T16:30:51Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java", "diffHunk": "@@ -131,6 +155,239 @@ void testParseError() {\n \n   }\n \n+  @Test\n+  void testCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04346()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04346\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAtServerNoContext() {\n+\n+    String module = \"&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04347()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04347\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_SERVER_NO_CONTEXT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testSeveralCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04348()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04348\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testNonCompilerDirectiveAndNonAnnotation() {\n+\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04349()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04349\");\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testAnnotation() {\n+\n+    String module = \"&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043410()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(1);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.AFTER);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotation() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043411()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotationOtherOrder() {\n+\n+    String module = \"&\u041f\u043e\u0441\u043b\u0435\\n&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043412()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotationForFunction() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u041c\u0435\u0442\u043e\u043413()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u0424\u0443\u043d\u043a\u0446\u0438\u0438\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  private static void checkCompilerDirective_for_AtClient_AndAnnotation_After(String module) {\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(1);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.AFTER);\n+  }\n+\n+  @Test\n+  void testSeveralAnnotationsForFunction() {\n+\n+    String module = \"&\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f1\\n\" +\n+      \"&\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f2\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043414() \u042d\u043a\u0441\u043f\u043e\u0440\u0442\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(2);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.CUSTOM);\n+    assertThat(annotations.get(1)).isEqualTo(Annotation.CUSTOM);\n+  }\n+\n+  // \u0435\u0441\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 \u0443\u043f\u0440.\u0444\u043e\u0440\u043c\u044b\n+  // \u043f\u0440\u0438 \u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0441 \u0434\u0440\u0443\u0433\u043e\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u043e\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u043c\u0435\u043d\u043d\u043e \u043e\u043d\u0430\n+  // \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u0440\u044f\u0434\u043e\u043a 1\n+  //&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //\u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u043b\u0430\u0434\u0447\u0438\u043a\u0435 \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0422\u0430\u0431\u043b\u0438\u0446\u0430\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n+  // \u0438\u043b\u0438 \u043f\u043e\u0440\u044f\u0434\u043e\u043a 2\n+  //&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //\u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e\n+  //\u0442.\u0435. \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u044d\u0442\u0438\u0445 2\u0445 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432 \u043d\u0435 \u0432\u0430\u0436\u0435\u043d, \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1NDg5MA=="}, "originalCommit": {"oid": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk3MDA3Mg==", "bodyText": "\u043f\u0440\u043e \u0440\u0430\u0437\u043d\u044b\u0435 - \u0434\u0430, \u043f\u043e\u043d\u044f\u043b. \u0430 \u0432\u043e\u0442 \u043f\u0440\u043e \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 - \u0445\u043e\u0440\u043e\u0448\u043e \u0431\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r431970072", "createdAt": "2020-05-28T16:31:49Z", "author": {"login": "nixel2007"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java", "diffHunk": "@@ -131,6 +155,239 @@ void testParseError() {\n \n   }\n \n+  @Test\n+  void testCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04346()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04346\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAtServerNoContext() {\n+\n+    String module = \"&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04347()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04347\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_SERVER_NO_CONTEXT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testSeveralCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04348()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04348\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testNonCompilerDirectiveAndNonAnnotation() {\n+\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04349()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04349\");\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testAnnotation() {\n+\n+    String module = \"&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043410()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(1);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.AFTER);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotation() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043411()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotationOtherOrder() {\n+\n+    String module = \"&\u041f\u043e\u0441\u043b\u0435\\n&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043412()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotationForFunction() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u041c\u0435\u0442\u043e\u043413()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u0424\u0443\u043d\u043a\u0446\u0438\u0438\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  private static void checkCompilerDirective_for_AtClient_AndAnnotation_After(String module) {\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(1);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.AFTER);\n+  }\n+\n+  @Test\n+  void testSeveralAnnotationsForFunction() {\n+\n+    String module = \"&\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f1\\n\" +\n+      \"&\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f2\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043414() \u042d\u043a\u0441\u043f\u043e\u0440\u0442\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(2);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.CUSTOM);\n+    assertThat(annotations.get(1)).isEqualTo(Annotation.CUSTOM);\n+  }\n+\n+  // \u0435\u0441\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 \u0443\u043f\u0440.\u0444\u043e\u0440\u043c\u044b\n+  // \u043f\u0440\u0438 \u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0441 \u0434\u0440\u0443\u0433\u043e\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u043e\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u043c\u0435\u043d\u043d\u043e \u043e\u043d\u0430\n+  // \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u0440\u044f\u0434\u043e\u043a 1\n+  //&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //\u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u043b\u0430\u0434\u0447\u0438\u043a\u0435 \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0422\u0430\u0431\u043b\u0438\u0446\u0430\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n+  // \u0438\u043b\u0438 \u043f\u043e\u0440\u044f\u0434\u043e\u043a 2\n+  //&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //\u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e\n+  //\u0442.\u0435. \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u044d\u0442\u0438\u0445 2\u0445 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432 \u043d\u0435 \u0432\u0430\u0436\u0435\u043d, \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1NDg5MA=="}, "originalCommit": {"oid": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0MDQ2Mw==", "bodyText": "\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043b \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u044b.\n\n\n\u0415\u0441\u043b\u0438 \u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u0443\u0431\u043b\u044c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0430\u0440\u0443 &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435 \u0438 &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435 \u043f\u0440\u043e\u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c 2 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0437, \u043e\u0448\u0438\u0431\u043e\u043a \u043d\u0435 \u0432\u044b\u0434\u0430\u0435\u0442\u0441\u044f.\n\n\n\u0435\u0441\u043b\u0438 \u0432\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043b\u044e\u0431\u0443\u044e \u0434\u0440\u0443\u0433\u0443\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u0443 (\u043e\u0434\u0438\u043d \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0437), \u0442\u043e \u0432\u044b\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0438\u043d\u0442\u0430\u043a\u0441-\u043e\u0448\u0438\u0431\u043a\u0430, \u043a\u0430\u043a \u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u0445\n\n\n\u0434\u043b\u044f \u043f\u0430\u0440 &\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0438 &\u041c\u043e\u044f\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e\n\n\n\u0442.\u0435. \u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u0435\u0442\u0441\u044f \u0442\u0430\u043a\u0436\u0435 \u0438 \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r432840463", "createdAt": "2020-05-30T13:09:27Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java", "diffHunk": "@@ -131,6 +155,239 @@ void testParseError() {\n \n   }\n \n+  @Test\n+  void testCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04346()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04346\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAtServerNoContext() {\n+\n+    String module = \"&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04347()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04347\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_SERVER_NO_CONTEXT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testSeveralCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04348()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04348\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testNonCompilerDirectiveAndNonAnnotation() {\n+\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04349()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04349\");\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testAnnotation() {\n+\n+    String module = \"&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043410()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(1);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.AFTER);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotation() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043411()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotationOtherOrder() {\n+\n+    String module = \"&\u041f\u043e\u0441\u043b\u0435\\n&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043412()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotationForFunction() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u041c\u0435\u0442\u043e\u043413()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u0424\u0443\u043d\u043a\u0446\u0438\u0438\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  private static void checkCompilerDirective_for_AtClient_AndAnnotation_After(String module) {\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(1);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.AFTER);\n+  }\n+\n+  @Test\n+  void testSeveralAnnotationsForFunction() {\n+\n+    String module = \"&\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f1\\n\" +\n+      \"&\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f2\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043414() \u042d\u043a\u0441\u043f\u043e\u0440\u0442\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(2);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.CUSTOM);\n+    assertThat(annotations.get(1)).isEqualTo(Annotation.CUSTOM);\n+  }\n+\n+  // \u0435\u0441\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 \u0443\u043f\u0440.\u0444\u043e\u0440\u043c\u044b\n+  // \u043f\u0440\u0438 \u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0441 \u0434\u0440\u0443\u0433\u043e\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u043e\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u043c\u0435\u043d\u043d\u043e \u043e\u043d\u0430\n+  // \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u0440\u044f\u0434\u043e\u043a 1\n+  //&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //\u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u043b\u0430\u0434\u0447\u0438\u043a\u0435 \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0422\u0430\u0431\u043b\u0438\u0446\u0430\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n+  // \u0438\u043b\u0438 \u043f\u043e\u0440\u044f\u0434\u043e\u043a 2\n+  //&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //\u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e\n+  //\u0442.\u0435. \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u044d\u0442\u0438\u0445 2\u0445 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432 \u043d\u0435 \u0432\u0430\u0436\u0435\u043d, \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1NDg5MA=="}, "originalCommit": {"oid": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0MDgxNg==", "bodyText": "\u0442\u0435\u0441\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0442\u0430\u043a\u0436\u0435 \u0441\u0434\u0435\u043b\u0430\u043b", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1198#discussion_r432840816", "createdAt": "2020-05-30T13:14:18Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/context/computer/MethodSymbolComputerTest.java", "diffHunk": "@@ -131,6 +155,239 @@ void testParseError() {\n \n   }\n \n+  @Test\n+  void testCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04346()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04346\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAtServerNoContext() {\n+\n+    String module = \"&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04347()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04347\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_SERVER_NO_CONTEXT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testSeveralCompilerDirective() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04348()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04348\");\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testNonCompilerDirectiveAndNonAnnotation() {\n+\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u04349()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getName()).isEqualTo(\"\u041c\u0435\u0442\u043e\u04349\");\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    assertThat(methodSymbol.getAnnotations()).hasSize(0);\n+  }\n+\n+  @Test\n+  void testAnnotation() {\n+\n+    String module = \"&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043410()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(1);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.AFTER);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotation() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043411()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotationOtherOrder() {\n+\n+    String module = \"&\u041f\u043e\u0441\u043b\u0435\\n&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043412()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  @Test\n+  void testCompilerDirectiveAndAnnotationForFunction() {\n+\n+    String module = \"&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\\n&\u041f\u043e\u0441\u043b\u0435\\n\" +\n+      \"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u041c\u0435\u0442\u043e\u043413()\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u0424\u0443\u043d\u043a\u0446\u0438\u0438\";\n+\n+    checkCompilerDirective_for_AtClient_AndAnnotation_After(module);\n+  }\n+\n+  private static void checkCompilerDirective_for_AtClient_AndAnnotation_After(String module) {\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    assertThat(methods).hasSize(1);\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().orElse(null)).isEqualTo(CompilerDirective.AT_CLIENT);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(1);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.AFTER);\n+  }\n+\n+  @Test\n+  void testSeveralAnnotationsForFunction() {\n+\n+    String module = \"&\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f1\\n\" +\n+      \"&\u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044f2\\n\" +\n+      \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041c\u0435\u0442\u043e\u043414() \u042d\u043a\u0441\u043f\u043e\u0440\u0442\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<MethodSymbol> methods = getMethodSymbols(module);\n+\n+    var methodSymbol = methods.get(0);\n+    assertThat(methodSymbol.getCompilerDirective().isPresent()).isEqualTo(false);\n+    var annotations = methodSymbol.getAnnotations();\n+    assertThat(annotations).hasSize(2);\n+    assertThat(annotations.get(0)).isEqualTo(Annotation.CUSTOM);\n+    assertThat(annotations.get(1)).isEqualTo(Annotation.CUSTOM);\n+  }\n+\n+  // \u0435\u0441\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430 \u0432 \u043c\u043e\u0434\u0443\u043b\u0435 \u0443\u043f\u0440.\u0444\u043e\u0440\u043c\u044b\n+  // \u043f\u0440\u0438 \u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0441 \u0434\u0440\u0443\u0433\u043e\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432\u043e\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u043c\u0435\u043d\u043d\u043e \u043e\u043d\u0430\n+  // \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u0440\u044f\u0434\u043e\u043a 1\n+  //&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //\u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u043b\u0430\u0434\u0447\u0438\u043a\u0435 \u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0422\u0430\u0431\u043b\u0438\u0446\u0430\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n+  // \u0438\u043b\u0438 \u043f\u043e\u0440\u044f\u0434\u043e\u043a 2\n+  //&\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //&\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n+  //\u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e\n+  //\u0442.\u0435. \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u044d\u0442\u0438\u0445 2\u0445 \u0434\u0438\u0440\u0435\u043a\u0442\u0438\u0432 \u043d\u0435 \u0432\u0430\u0436\u0435\u043d, \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f &\u041d\u0430\u041a\u043b\u0438\u0435\u043d\u0442\u0435\u041d\u0430\u0421\u0435\u0440\u0432\u0435\u0440\u0435\u0411\u0435\u0437\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1NDg5MA=="}, "originalCommit": {"oid": "bcef4573d0d05fb03ba9887ac38732ab3ba4e75c"}, "originalPosition": 197}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4824, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}