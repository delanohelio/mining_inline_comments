{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MDIyNDkz", "number": 1255, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo1ODo1NVrOEKI5fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToxMDoxOVrOEKJOjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDY3MDA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/codeactions/GenerateStandardRegionsSupplier.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo1ODo1NVrOGrAmVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo1ODo1NVrOGrAmVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc1MTc2NQ==", "bodyText": "\u0432\u043e\u0442 \u044d\u0442\u0443 \u0434\u043e\u043a\u0443 \u0431\u044b \u043f\u0440\u044f\u043c\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 CodeActionSupplier. \u0442\u043e\u0433\u0434\u0430 \u0437\u0434\u0435\u0441\u044c \u043e\u043d\u0430 \u0431\u0443\u0434\u0435\u0442/\u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c inherited.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1255#discussion_r447751765", "createdAt": "2020-06-30T14:58:55Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/codeactions/GenerateStandardRegionsSupplier.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.codeactions;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.context.FileType;\n+import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n+import com.github._1c_syntax.bsl.languageserver.utils.Regions;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ScriptVariant;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionKind;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * {@code Supplier} {@code codeAction} \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445\n+ * \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439\n+ */\n+public class GenerateStandardRegionsSupplier implements CodeActionSupplier{\n+\n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c27838603d8dc3d798e00533aea1f75eda51b7ce"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDY3MzQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/codeactions/GenerateStandardRegionsSupplier.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDo1OTozMlrOGrAoXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo0MTozM1rOGrCjcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc1MjI4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * \u043f\u0443\u0441\u0442\u043e\u0439 {@code ArrayList} \u0435\u0441\u043b\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f\n          \n          \n            \n               * \u043f\u0443\u0441\u0442\u043e\u0439 {@code List} \u0435\u0441\u043b\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1255#discussion_r447752286", "createdAt": "2020-06-30T14:59:32Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/codeactions/GenerateStandardRegionsSupplier.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.codeactions;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.context.FileType;\n+import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n+import com.github._1c_syntax.bsl.languageserver.utils.Regions;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ScriptVariant;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionKind;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * {@code Supplier} {@code codeAction} \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445\n+ * \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439\n+ */\n+public class GenerateStandardRegionsSupplier implements CodeActionSupplier{\n+\n+  /**\n+   * \u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 {@code CodeAction} \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445\n+   * \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 1\u0421\n+   * @param params \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432\u044b\u0437\u043e\u0432\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 {@code codeAction}\n+   * @param documentContext \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f\n+   * @return {@code List<CodeAction>} \u0435\u0441\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044c \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439,\n+   * \u043f\u0443\u0441\u0442\u043e\u0439 {@code ArrayList} \u0435\u0441\u043b\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c27838603d8dc3d798e00533aea1f75eda51b7ce"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4Mzc5Mg==", "bodyText": "done", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1255#discussion_r447783792", "createdAt": "2020-06-30T15:41:33Z", "author": {"login": "EightM"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/codeactions/GenerateStandardRegionsSupplier.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.codeactions;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.context.FileType;\n+import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n+import com.github._1c_syntax.bsl.languageserver.utils.Regions;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ScriptVariant;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionKind;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * {@code Supplier} {@code codeAction} \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445\n+ * \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439\n+ */\n+public class GenerateStandardRegionsSupplier implements CodeActionSupplier{\n+\n+  /**\n+   * \u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 {@code CodeAction} \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445\n+   * \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 1\u0421\n+   * @param params \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432\u044b\u0437\u043e\u0432\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 {@code codeAction}\n+   * @param documentContext \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f\n+   * @return {@code List<CodeAction>} \u0435\u0441\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044c \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439,\n+   * \u043f\u0443\u0441\u0442\u043e\u0439 {@code ArrayList} \u0435\u0441\u043b\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc1MjI4Ng=="}, "originalCommit": {"oid": "c27838603d8dc3d798e00533aea1f75eda51b7ce"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDY4NTQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/codeactions/GenerateStandardRegionsSupplier.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTowMTo1NVrOGrAvvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo0MTo0M1rOGrCj7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc1NDE3Mw==", "bodyText": "\u043d\u0435 \u043d\u0443\u0436\u0435\u043d \u043b\u0438 \u043c\u0435\u0436\u0434\u0443 \u041e\u0431\u043b\u0430\u0441\u0442\u044c \u0438 \u041a\u043e\u043d\u0435\u0446\u041e\u0431\u043b\u0430\u0441\u0442\u0438 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d %n?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1255#discussion_r447754173", "createdAt": "2020-06-30T15:01:55Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/codeactions/GenerateStandardRegionsSupplier.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.codeactions;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.context.FileType;\n+import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n+import com.github._1c_syntax.bsl.languageserver.utils.Regions;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ScriptVariant;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionKind;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * {@code Supplier} {@code codeAction} \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445\n+ * \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439\n+ */\n+public class GenerateStandardRegionsSupplier implements CodeActionSupplier{\n+\n+  /**\n+   * \u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 {@code CodeAction} \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445\n+   * \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 1\u0421\n+   * @param params \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432\u044b\u0437\u043e\u0432\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 {@code codeAction}\n+   * @param documentContext \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f\n+   * @return {@code List<CodeAction>} \u0435\u0441\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044c \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439,\n+   * \u043f\u0443\u0441\u0442\u043e\u0439 {@code ArrayList} \u0435\u0441\u043b\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f\n+   */\n+  @Override\n+  public List<CodeAction> getCodeActions(CodeActionParams params, DocumentContext documentContext) {\n+    List<CodeAction> codeActions = new ArrayList<>();\n+\n+    ModuleType moduleType = documentContext.getModuleType();\n+    ScriptVariant configurationLanguage = documentContext.getServerContext().getConfiguration().getScriptVariant();\n+    Set<String> neededStandardRegions = Regions.getStandardRegionsNamesByModuleType(moduleType, configurationLanguage);\n+    Set<String> documentRegionsNames = documentContext.getSymbolTree().getModuleLevelRegions().stream()\n+      .map(RegionSymbol::getName)\n+      .collect(Collectors.toSet());\n+    neededStandardRegions.removeAll(documentRegionsNames);\n+    FileType fileType = documentContext.getFileType();\n+\n+    if (neededStandardRegions.isEmpty() || fileType == FileType.OS) {\n+      return codeActions;\n+    }\n+\n+    String regionFormat =\n+      configurationLanguage == ScriptVariant.ENGLISH ? \"#Region %s%n#EndRegion%n\" : \"#\u041e\u0431\u043b\u0430\u0441\u0442\u044c %s%n#\u041a\u043e\u043d\u0435\u0446\u041e\u0431\u043b\u0430\u0441\u0442\u0438%n\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c27838603d8dc3d798e00533aea1f75eda51b7ce"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4MzkxNg==", "bodyText": "\u0414\u043e\u0431\u0430\u0432\u0438\u043b", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1255#discussion_r447783916", "createdAt": "2020-06-30T15:41:43Z", "author": {"login": "EightM"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/codeactions/GenerateStandardRegionsSupplier.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.codeactions;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.context.FileType;\n+import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n+import com.github._1c_syntax.bsl.languageserver.utils.Regions;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ScriptVariant;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionKind;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * {@code Supplier} {@code codeAction} \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445\n+ * \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439\n+ */\n+public class GenerateStandardRegionsSupplier implements CodeActionSupplier{\n+\n+  /**\n+   * \u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 {@code CodeAction} \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445\n+   * \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 1\u0421\n+   * @param params \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432\u044b\u0437\u043e\u0432\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 {@code codeAction}\n+   * @param documentContext \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f\n+   * @return {@code List<CodeAction>} \u0435\u0441\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044c \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439,\n+   * \u043f\u0443\u0441\u0442\u043e\u0439 {@code ArrayList} \u0435\u0441\u043b\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f\n+   */\n+  @Override\n+  public List<CodeAction> getCodeActions(CodeActionParams params, DocumentContext documentContext) {\n+    List<CodeAction> codeActions = new ArrayList<>();\n+\n+    ModuleType moduleType = documentContext.getModuleType();\n+    ScriptVariant configurationLanguage = documentContext.getServerContext().getConfiguration().getScriptVariant();\n+    Set<String> neededStandardRegions = Regions.getStandardRegionsNamesByModuleType(moduleType, configurationLanguage);\n+    Set<String> documentRegionsNames = documentContext.getSymbolTree().getModuleLevelRegions().stream()\n+      .map(RegionSymbol::getName)\n+      .collect(Collectors.toSet());\n+    neededStandardRegions.removeAll(documentRegionsNames);\n+    FileType fileType = documentContext.getFileType();\n+\n+    if (neededStandardRegions.isEmpty() || fileType == FileType.OS) {\n+      return codeActions;\n+    }\n+\n+    String regionFormat =\n+      configurationLanguage == ScriptVariant.ENGLISH ? \"#Region %s%n#EndRegion%n\" : \"#\u041e\u0431\u043b\u0430\u0441\u0442\u044c %s%n#\u041a\u043e\u043d\u0435\u0446\u041e\u0431\u043b\u0430\u0441\u0442\u0438%n\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc1NDE3Mw=="}, "originalCommit": {"oid": "c27838603d8dc3d798e00533aea1f75eda51b7ce"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDcxNzAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/codeactions/GenerateStandardRegionsSupplier.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTowODo0OVrOGrBECA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo0NTowNlrOGrCtLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc1OTM2OA==", "bodyText": "\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0447\u0442\u043e \u0441 Map.of \u043a\u043e\u0434 \u0431\u0443\u0434\u0435\u0442 \u0447\u0443\u0442\u044c \u043f\u043e\u0447\u0438\u0449\u0435.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1255#discussion_r447759368", "createdAt": "2020-06-30T15:08:49Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/codeactions/GenerateStandardRegionsSupplier.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.codeactions;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.context.FileType;\n+import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n+import com.github._1c_syntax.bsl.languageserver.utils.Regions;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ScriptVariant;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionKind;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * {@code Supplier} {@code codeAction} \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445\n+ * \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439\n+ */\n+public class GenerateStandardRegionsSupplier implements CodeActionSupplier{\n+\n+  /**\n+   * \u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 {@code CodeAction} \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445\n+   * \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 1\u0421\n+   * @param params \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432\u044b\u0437\u043e\u0432\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 {@code codeAction}\n+   * @param documentContext \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f\n+   * @return {@code List<CodeAction>} \u0435\u0441\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044c \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439,\n+   * \u043f\u0443\u0441\u0442\u043e\u0439 {@code ArrayList} \u0435\u0441\u043b\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f\n+   */\n+  @Override\n+  public List<CodeAction> getCodeActions(CodeActionParams params, DocumentContext documentContext) {\n+    List<CodeAction> codeActions = new ArrayList<>();\n+\n+    ModuleType moduleType = documentContext.getModuleType();\n+    ScriptVariant configurationLanguage = documentContext.getServerContext().getConfiguration().getScriptVariant();\n+    Set<String> neededStandardRegions = Regions.getStandardRegionsNamesByModuleType(moduleType, configurationLanguage);\n+    Set<String> documentRegionsNames = documentContext.getSymbolTree().getModuleLevelRegions().stream()\n+      .map(RegionSymbol::getName)\n+      .collect(Collectors.toSet());\n+    neededStandardRegions.removeAll(documentRegionsNames);\n+    FileType fileType = documentContext.getFileType();\n+\n+    if (neededStandardRegions.isEmpty() || fileType == FileType.OS) {\n+      return codeActions;\n+    }\n+\n+    String regionFormat =\n+      configurationLanguage == ScriptVariant.ENGLISH ? \"#Region %s%n#EndRegion%n\" : \"#\u041e\u0431\u043b\u0430\u0441\u0442\u044c %s%n#\u041a\u043e\u043d\u0435\u0446\u041e\u0431\u043b\u0430\u0441\u0442\u0438%n\";\n+\n+    String result = neededStandardRegions.stream()\n+      .map(s -> String .format(regionFormat, s))\n+      .collect(Collectors.joining(\"\\n\"));\n+    TextEdit textEdit = new TextEdit(params.getRange(), result);\n+\n+    WorkspaceEdit edit = new WorkspaceEdit();\n+    Map<String, List<TextEdit>> changes = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c27838603d8dc3d798e00533aea1f75eda51b7ce"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4NjI4Nw==", "bodyText": "\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u043b", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1255#discussion_r447786287", "createdAt": "2020-06-30T15:45:06Z", "author": {"login": "EightM"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/codeactions/GenerateStandardRegionsSupplier.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.codeactions;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.context.FileType;\n+import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n+import com.github._1c_syntax.bsl.languageserver.utils.Regions;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ScriptVariant;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionKind;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * {@code Supplier} {@code codeAction} \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445\n+ * \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439\n+ */\n+public class GenerateStandardRegionsSupplier implements CodeActionSupplier{\n+\n+  /**\n+   * \u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 {@code CodeAction} \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445\n+   * \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 1\u0421\n+   * @param params \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432\u044b\u0437\u043e\u0432\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 {@code codeAction}\n+   * @param documentContext \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f\n+   * @return {@code List<CodeAction>} \u0435\u0441\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044c \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439,\n+   * \u043f\u0443\u0441\u0442\u043e\u0439 {@code ArrayList} \u0435\u0441\u043b\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f\n+   */\n+  @Override\n+  public List<CodeAction> getCodeActions(CodeActionParams params, DocumentContext documentContext) {\n+    List<CodeAction> codeActions = new ArrayList<>();\n+\n+    ModuleType moduleType = documentContext.getModuleType();\n+    ScriptVariant configurationLanguage = documentContext.getServerContext().getConfiguration().getScriptVariant();\n+    Set<String> neededStandardRegions = Regions.getStandardRegionsNamesByModuleType(moduleType, configurationLanguage);\n+    Set<String> documentRegionsNames = documentContext.getSymbolTree().getModuleLevelRegions().stream()\n+      .map(RegionSymbol::getName)\n+      .collect(Collectors.toSet());\n+    neededStandardRegions.removeAll(documentRegionsNames);\n+    FileType fileType = documentContext.getFileType();\n+\n+    if (neededStandardRegions.isEmpty() || fileType == FileType.OS) {\n+      return codeActions;\n+    }\n+\n+    String regionFormat =\n+      configurationLanguage == ScriptVariant.ENGLISH ? \"#Region %s%n#EndRegion%n\" : \"#\u041e\u0431\u043b\u0430\u0441\u0442\u044c %s%n#\u041a\u043e\u043d\u0435\u0446\u041e\u0431\u043b\u0430\u0441\u0442\u0438%n\";\n+\n+    String result = neededStandardRegions.stream()\n+      .map(s -> String .format(regionFormat, s))\n+      .collect(Collectors.joining(\"\\n\"));\n+    TextEdit textEdit = new TextEdit(params.getRange(), result);\n+\n+    WorkspaceEdit edit = new WorkspaceEdit();\n+    Map<String, List<TextEdit>> changes = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc1OTM2OA=="}, "originalCommit": {"oid": "c27838603d8dc3d798e00533aea1f75eda51b7ce"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDcyMDMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/codeactions/GenerateStandardRegionsSupplier.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTowOTozM1rOGrBGNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo0NToxNFrOGrCtjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc1OTkyNA==", "bodyText": "\u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0437\u0434\u0435\u0441\u044c \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0434\u0435\u043b\u0430\u0442\u044c List.of(codeAction), \u0430 \u0432\u044b\u0448\u0435 (\u043d\u0430 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u0440\u0435\u0442\u0443\u0440\u043d\u0435) \u0432\u044b\u0439\u0442\u0438 \u0441 Collections.emptyList", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1255#discussion_r447759924", "createdAt": "2020-06-30T15:09:33Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/codeactions/GenerateStandardRegionsSupplier.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.codeactions;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.context.FileType;\n+import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n+import com.github._1c_syntax.bsl.languageserver.utils.Regions;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ScriptVariant;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionKind;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * {@code Supplier} {@code codeAction} \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445\n+ * \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439\n+ */\n+public class GenerateStandardRegionsSupplier implements CodeActionSupplier{\n+\n+  /**\n+   * \u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 {@code CodeAction} \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445\n+   * \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 1\u0421\n+   * @param params \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432\u044b\u0437\u043e\u0432\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 {@code codeAction}\n+   * @param documentContext \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f\n+   * @return {@code List<CodeAction>} \u0435\u0441\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044c \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439,\n+   * \u043f\u0443\u0441\u0442\u043e\u0439 {@code ArrayList} \u0435\u0441\u043b\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f\n+   */\n+  @Override\n+  public List<CodeAction> getCodeActions(CodeActionParams params, DocumentContext documentContext) {\n+    List<CodeAction> codeActions = new ArrayList<>();\n+\n+    ModuleType moduleType = documentContext.getModuleType();\n+    ScriptVariant configurationLanguage = documentContext.getServerContext().getConfiguration().getScriptVariant();\n+    Set<String> neededStandardRegions = Regions.getStandardRegionsNamesByModuleType(moduleType, configurationLanguage);\n+    Set<String> documentRegionsNames = documentContext.getSymbolTree().getModuleLevelRegions().stream()\n+      .map(RegionSymbol::getName)\n+      .collect(Collectors.toSet());\n+    neededStandardRegions.removeAll(documentRegionsNames);\n+    FileType fileType = documentContext.getFileType();\n+\n+    if (neededStandardRegions.isEmpty() || fileType == FileType.OS) {\n+      return codeActions;\n+    }\n+\n+    String regionFormat =\n+      configurationLanguage == ScriptVariant.ENGLISH ? \"#Region %s%n#EndRegion%n\" : \"#\u041e\u0431\u043b\u0430\u0441\u0442\u044c %s%n#\u041a\u043e\u043d\u0435\u0446\u041e\u0431\u043b\u0430\u0441\u0442\u0438%n\";\n+\n+    String result = neededStandardRegions.stream()\n+      .map(s -> String .format(regionFormat, s))\n+      .collect(Collectors.joining(\"\\n\"));\n+    TextEdit textEdit = new TextEdit(params.getRange(), result);\n+\n+    WorkspaceEdit edit = new WorkspaceEdit();\n+    Map<String, List<TextEdit>> changes = new HashMap<>();\n+    changes.put(documentContext.getUri().toString(), Collections.singletonList(textEdit));\n+    edit.setChanges(changes);\n+\n+    CodeAction codeAction = new CodeAction(\"Generate missing regions\");\n+    codeAction.setDiagnostics(new ArrayList<>());\n+    codeAction.setKind(CodeActionKind.Refactor);\n+    codeAction.setEdit(edit);\n+    codeActions.add(codeAction);\n+\n+    return codeActions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c27838603d8dc3d798e00533aea1f75eda51b7ce"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4NjM4MA==", "bodyText": "\u0418\u0441\u043f\u0440\u0430\u0432\u0438\u043b", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1255#discussion_r447786380", "createdAt": "2020-06-30T15:45:14Z", "author": {"login": "EightM"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/codeactions/GenerateStandardRegionsSupplier.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.codeactions;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.context.FileType;\n+import com.github._1c_syntax.bsl.languageserver.context.symbol.RegionSymbol;\n+import com.github._1c_syntax.bsl.languageserver.utils.Regions;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ScriptVariant;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionKind;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * {@code Supplier} {@code codeAction} \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445\n+ * \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439\n+ */\n+public class GenerateStandardRegionsSupplier implements CodeActionSupplier{\n+\n+  /**\n+   * \u041f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442 {@code CodeAction} \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445\n+   * \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 1\u0421\n+   * @param params \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432\u044b\u0437\u043e\u0432\u0430 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 {@code codeAction}\n+   * @param documentContext \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f\n+   * @return {@code List<CodeAction>} \u0435\u0441\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044c \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439,\n+   * \u043f\u0443\u0441\u0442\u043e\u0439 {@code ArrayList} \u0435\u0441\u043b\u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u0435\u0439 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f\n+   */\n+  @Override\n+  public List<CodeAction> getCodeActions(CodeActionParams params, DocumentContext documentContext) {\n+    List<CodeAction> codeActions = new ArrayList<>();\n+\n+    ModuleType moduleType = documentContext.getModuleType();\n+    ScriptVariant configurationLanguage = documentContext.getServerContext().getConfiguration().getScriptVariant();\n+    Set<String> neededStandardRegions = Regions.getStandardRegionsNamesByModuleType(moduleType, configurationLanguage);\n+    Set<String> documentRegionsNames = documentContext.getSymbolTree().getModuleLevelRegions().stream()\n+      .map(RegionSymbol::getName)\n+      .collect(Collectors.toSet());\n+    neededStandardRegions.removeAll(documentRegionsNames);\n+    FileType fileType = documentContext.getFileType();\n+\n+    if (neededStandardRegions.isEmpty() || fileType == FileType.OS) {\n+      return codeActions;\n+    }\n+\n+    String regionFormat =\n+      configurationLanguage == ScriptVariant.ENGLISH ? \"#Region %s%n#EndRegion%n\" : \"#\u041e\u0431\u043b\u0430\u0441\u0442\u044c %s%n#\u041a\u043e\u043d\u0435\u0446\u041e\u0431\u043b\u0430\u0441\u0442\u0438%n\";\n+\n+    String result = neededStandardRegions.stream()\n+      .map(s -> String .format(regionFormat, s))\n+      .collect(Collectors.joining(\"\\n\"));\n+    TextEdit textEdit = new TextEdit(params.getRange(), result);\n+\n+    WorkspaceEdit edit = new WorkspaceEdit();\n+    Map<String, List<TextEdit>> changes = new HashMap<>();\n+    changes.put(documentContext.getUri().toString(), Collections.singletonList(textEdit));\n+    edit.setChanges(changes);\n+\n+    CodeAction codeAction = new CodeAction(\"Generate missing regions\");\n+    codeAction.setDiagnostics(new ArrayList<>());\n+    codeAction.setKind(CodeActionKind.Refactor);\n+    codeAction.setEdit(edit);\n+    codeActions.add(codeAction);\n+\n+    return codeActions;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc1OTkyNA=="}, "originalCommit": {"oid": "c27838603d8dc3d798e00533aea1f75eda51b7ce"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDcyMzk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/utils/Regions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToxMDoxOVrOGrBIgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToxMDoxOVrOGrBIgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2MDUxNA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1255#discussion_r447760514", "createdAt": "2020-06-30T15:10:19Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/utils/Regions.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.utils;\n+\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ScriptVariant;\n+import com.github._1c_syntax.utils.CaseInsensitivePattern;\n+import lombok.experimental.UtilityClass;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u043c\u0438 \u043e\u0431\u043b\u0430\u0441\u0442\u044f\u043c\u0438 1\u0421\n+ */\n+@UtilityClass\n+public class Regions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c27838603d8dc3d798e00533aea1f75eda51b7ce"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4851, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}