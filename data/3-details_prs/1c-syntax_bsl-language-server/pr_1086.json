{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MTk4MDg1", "number": 1086, "title": "\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\u0430", "bodyText": "\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\n\n\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0430 \"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\"\n\u0421\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438\n\n\n\n\n\n\nCloses: #1079\n\u0427\u0435\u043a\u043b\u0438\u0441\u0442\n\n\n\u041e\u0431\u0449\u0438\u0435\n\n \u0412\u0435\u0442\u043a\u0430 PR \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0430 \u0438\u0437 develop\n \u041e\u0442\u043b\u0430\u0434\u043e\u0447\u043d\u044b\u0435, \u0437\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0438 \u043f\u0440\u043e\u0447\u0438\u0435, \u043d\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0435 \u0441\u043c\u044b\u0441\u043b\u0430 \u0443\u0447\u0430\u0441\u0442\u043a\u0438 \u043a\u043e\u0434\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u044b\n \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u043a\u0440\u044b\u0442\u044b \u0442\u0435\u0441\u0442\u0430\u043c\u0438\n \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043f\u0435\u0440\u0435\u0434 \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b (\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u043b \u043a\u043e\u043c\u0430\u043d\u0434\u0443 gradlew precommit)\n\n\u0414\u043b\u044f \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\n\n \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043e \u0434\u043b\u044f \u043e\u0431\u043e\u0438\u0445 \u044f\u0437\u044b\u043a\u043e\u0432 (\u043f\u0435\u0440\u0435\u0432\u043e\u0434 \u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439 \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u0435\u043d)\n\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e", "createdAt": "2020-04-17T15:26:39Z", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086", "merged": true, "mergeCommit": {"oid": "df525816eaed68f64e988317d9150e9d2778dd21"}, "closed": true, "closedAt": "2020-04-20T14:49:42Z", "author": {"login": "otymko"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYi74zgH2gAyNDA1MTk4MDg1OjI5ZmMwZDJlNWI5MjZiNWU2MjI5MzUwZDk2YWQ0ODBjZmNlZWM3N2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZhAkwgFqTM5NjU3NTg5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "29fc0d2e5b926b5e6229350d96ad480cfceec77c", "author": {"user": {"login": "otymko", "name": "Oleg Tymko"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/29fc0d2e5b926b5e6229350d96ad480cfceec77c", "committedDate": "2020-04-17T15:22:27Z", "message": "\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0430\u0446\u0438\u044f \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d85c2fff267e1b76da5d3c83d7b1a74757b848bf", "author": {"user": {"login": "otymko", "name": "Oleg Tymko"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/d85c2fff267e1b76da5d3c83d7b1a74757b848bf", "committedDate": "2020-04-17T15:22:51Z", "message": "\u0422\u0435\u0441\u0442\u044b"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2974178b66ce481b442f425739ef76edf4432f47", "author": {"user": {"login": "otymko", "name": "Oleg Tymko"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/2974178b66ce481b442f425739ef76edf4432f47", "committedDate": "2020-04-17T15:23:32Z", "message": "\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f + \u043f\u0440\u0435\u043a\u043e\u043c\u043c\u0438\u0442"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODkxMDg3", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#pullrequestreview-395891087", "createdAt": "2020-04-18T07:40:56Z", "commit": {"oid": "2974178b66ce481b442f425739ef76edf4432f47"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNzo0MDo1NlrOGHo6ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNzo0MDo1NlrOGHo6ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2MzUzMA==", "bodyText": "\u0421\u043b\u0438\u0448\u043a\u043e\u043c \u0434\u043e\u043b\u0433\u043e \u0436\u0435? \u041a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044e \u0432\u0441\u0442\u0430\u0432\u0438\u0442 \u044d\u0442\u043e \u043f\u0430\u0440\u0430 \u0442\u0440\u043e\u0439\u043a\u0430 \u043c\u0438\u043d\u0443\u0442", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r410663530", "createdAt": "2020-04-18T07:40:56Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,\n+  severity = DiagnosticSeverity.CRITICAL,\n+  scope = DiagnosticScope.BSL,\n+  modules = {\n+    ModuleType.ObjectModule\n+  },\n+  minutesToFix = 10,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2974178b66ce481b442f425739ef76edf4432f47"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODk1NDQ1", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#pullrequestreview-395895445", "createdAt": "2020-04-18T08:47:43Z", "commit": {"oid": "2974178b66ce481b442f425739ef76edf4432f47"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwODo0Nzo0M1rOGHpS8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwODo0Nzo0M1rOGHpS8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2OTgxMA==", "bodyText": "&&", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r410669810", "createdAt": "2020-04-18T08:47:43Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,\n+  severity = DiagnosticSeverity.CRITICAL,\n+  scope = DiagnosticScope.BSL,\n+  modules = {\n+    ModuleType.ObjectModule\n+  },\n+  minutesToFix = 10,\n+  tags = {\n+    DiagnosticTag.STANDARD,\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.UNPREDICTABLE\n+  }\n+\n+)\n+public class DataExchangeLoadingDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final String SUB_NAMES = \"^(\u041f\u0435\u0440\u0435\u0434\u0417\u0430\u043f\u0438\u0441\u044c\u044e|\u041f\u0440\u0438\u0417\u0430\u043f\u0438\u0441\u0438|\u041f\u0435\u0440\u0435\u0434\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c|BeforeWrite|BeforeDelete|OnWrite)$\";\n+  private static final String CONDITION =\n+    \"\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430=\u0418\u0441\u0442\u0438\u043d\u0430|\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430|DataExchange.Load=True|DataExchange.Load\";\n+\n+  private static final Pattern searchSubNames = Pattern.compile(\n+    SUB_NAMES,\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+  private static final Pattern searchCondition = Pattern.compile(\n+    CONDITION,\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+\n+  public DataExchangeLoadingDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public ParseTree visitProcDeclaration(BSLParser.ProcDeclarationContext ctx) {\n+    var subName = ctx.subName();\n+    if (subName != null) {\n+      if (searchSubNames.matcher(subName.getText()).matches() && needCreateIssue(ctx)) {\n+        diagnosticStorage.addDiagnostic(ctx);\n+      }\n+    }\n+    return ctx;\n+  }\n+\n+  private boolean needCreateIssue(BSLParser.ProcDeclarationContext ctx) {\n+    BSLParser.ProcedureContext procedureContext = (BSLParser.ProcedureContext) ctx.getParent();\n+    var statements = procedureContext.subCodeBlock().codeBlock().statement();\n+    if (statements != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2974178b66ce481b442f425739ef76edf4432f47"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODk4NDc0", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#pullrequestreview-395898474", "createdAt": "2020-04-18T09:32:27Z", "commit": {"oid": "2974178b66ce481b442f425739ef76edf4432f47"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwOTozMjoyN1rOGHpmNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwOTozMjoyN1rOGHpmNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NDc0MQ==", "bodyText": "\u0432\u0430\u043d\u0433\u0443\u044e \u0441\u0442\u0440\u0435\u043b\u044f\u043d\u0438\u0435 \u043f\u0440\u0438 \u043d\u0430\u0431\u043e\u0440\u0435 \u043a\u043e\u0434\u0430 \u0432 vsc.\n\u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0432 Optional.ofNullable().map().map().map() ?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r410674741", "createdAt": "2020-04-18T09:32:27Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,\n+  severity = DiagnosticSeverity.CRITICAL,\n+  scope = DiagnosticScope.BSL,\n+  modules = {\n+    ModuleType.ObjectModule\n+  },\n+  minutesToFix = 10,\n+  tags = {\n+    DiagnosticTag.STANDARD,\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.UNPREDICTABLE\n+  }\n+\n+)\n+public class DataExchangeLoadingDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final String SUB_NAMES = \"^(\u041f\u0435\u0440\u0435\u0434\u0417\u0430\u043f\u0438\u0441\u044c\u044e|\u041f\u0440\u0438\u0417\u0430\u043f\u0438\u0441\u0438|\u041f\u0435\u0440\u0435\u0434\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c|BeforeWrite|BeforeDelete|OnWrite)$\";\n+  private static final String CONDITION =\n+    \"\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430=\u0418\u0441\u0442\u0438\u043d\u0430|\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430|DataExchange.Load=True|DataExchange.Load\";\n+\n+  private static final Pattern searchSubNames = Pattern.compile(\n+    SUB_NAMES,\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+  private static final Pattern searchCondition = Pattern.compile(\n+    CONDITION,\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+\n+  public DataExchangeLoadingDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public ParseTree visitProcDeclaration(BSLParser.ProcDeclarationContext ctx) {\n+    var subName = ctx.subName();\n+    if (subName != null) {\n+      if (searchSubNames.matcher(subName.getText()).matches() && needCreateIssue(ctx)) {\n+        diagnosticStorage.addDiagnostic(ctx);\n+      }\n+    }\n+    return ctx;\n+  }\n+\n+  private boolean needCreateIssue(BSLParser.ProcDeclarationContext ctx) {\n+    BSLParser.ProcedureContext procedureContext = (BSLParser.ProcedureContext) ctx.getParent();\n+    var statements = procedureContext.subCodeBlock().codeBlock().statement();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2974178b66ce481b442f425739ef76edf4432f47"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODk4NTUz", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#pullrequestreview-395898553", "createdAt": "2020-04-18T09:33:40Z", "commit": {"oid": "2974178b66ce481b442f425739ef76edf4432f47"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwOTozMzo0MFrOGHpmvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwOTozMzo0MFrOGHpmvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NDg3OA==", "bodyText": "\u0437\u0434\u0435\u0441\u044c \u0442\u043e\u0447\u043d\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u043b\u043e\u0432\u0438\u0442\u044c NPE", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r410674878", "createdAt": "2020-04-18T09:33:40Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,\n+  severity = DiagnosticSeverity.CRITICAL,\n+  scope = DiagnosticScope.BSL,\n+  modules = {\n+    ModuleType.ObjectModule\n+  },\n+  minutesToFix = 10,\n+  tags = {\n+    DiagnosticTag.STANDARD,\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.UNPREDICTABLE\n+  }\n+\n+)\n+public class DataExchangeLoadingDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final String SUB_NAMES = \"^(\u041f\u0435\u0440\u0435\u0434\u0417\u0430\u043f\u0438\u0441\u044c\u044e|\u041f\u0440\u0438\u0417\u0430\u043f\u0438\u0441\u0438|\u041f\u0435\u0440\u0435\u0434\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c|BeforeWrite|BeforeDelete|OnWrite)$\";\n+  private static final String CONDITION =\n+    \"\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430=\u0418\u0441\u0442\u0438\u043d\u0430|\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430|DataExchange.Load=True|DataExchange.Load\";\n+\n+  private static final Pattern searchSubNames = Pattern.compile(\n+    SUB_NAMES,\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+  private static final Pattern searchCondition = Pattern.compile(\n+    CONDITION,\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+\n+  public DataExchangeLoadingDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public ParseTree visitProcDeclaration(BSLParser.ProcDeclarationContext ctx) {\n+    var subName = ctx.subName();\n+    if (subName != null) {\n+      if (searchSubNames.matcher(subName.getText()).matches() && needCreateIssue(ctx)) {\n+        diagnosticStorage.addDiagnostic(ctx);\n+      }\n+    }\n+    return ctx;\n+  }\n+\n+  private boolean needCreateIssue(BSLParser.ProcDeclarationContext ctx) {\n+    BSLParser.ProcedureContext procedureContext = (BSLParser.ProcedureContext) ctx.getParent();\n+    var statements = procedureContext.subCodeBlock().codeBlock().statement();\n+    if (statements != null) {\n+      if (!statements.isEmpty()) {\n+        return !foundLoadConditionWithReturn(statements.get(0));\n+      }\n+    }\n+    return true;\n+  }\n+\n+  private boolean foundLoadConditionWithReturn(BSLParser.StatementContext ctx) {\n+    var ifStatement = ctx.compoundStatement().ifStatement();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2974178b66ce481b442f425739ef76edf4432f47"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODk4NjE0", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#pullrequestreview-395898614", "createdAt": "2020-04-18T09:34:31Z", "commit": {"oid": "2974178b66ce481b442f425739ef76edf4432f47"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwOTozNDozMlrOGHpnLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwOTozNDozMlrOGHpnLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NDk4OA==", "bodyText": "\u0437\u0434\u0435\u0441\u044c IOOBE", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r410674988", "createdAt": "2020-04-18T09:34:32Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,\n+  severity = DiagnosticSeverity.CRITICAL,\n+  scope = DiagnosticScope.BSL,\n+  modules = {\n+    ModuleType.ObjectModule\n+  },\n+  minutesToFix = 10,\n+  tags = {\n+    DiagnosticTag.STANDARD,\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.UNPREDICTABLE\n+  }\n+\n+)\n+public class DataExchangeLoadingDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final String SUB_NAMES = \"^(\u041f\u0435\u0440\u0435\u0434\u0417\u0430\u043f\u0438\u0441\u044c\u044e|\u041f\u0440\u0438\u0417\u0430\u043f\u0438\u0441\u0438|\u041f\u0435\u0440\u0435\u0434\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c|BeforeWrite|BeforeDelete|OnWrite)$\";\n+  private static final String CONDITION =\n+    \"\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430=\u0418\u0441\u0442\u0438\u043d\u0430|\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430|DataExchange.Load=True|DataExchange.Load\";\n+\n+  private static final Pattern searchSubNames = Pattern.compile(\n+    SUB_NAMES,\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+  private static final Pattern searchCondition = Pattern.compile(\n+    CONDITION,\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+\n+  public DataExchangeLoadingDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public ParseTree visitProcDeclaration(BSLParser.ProcDeclarationContext ctx) {\n+    var subName = ctx.subName();\n+    if (subName != null) {\n+      if (searchSubNames.matcher(subName.getText()).matches() && needCreateIssue(ctx)) {\n+        diagnosticStorage.addDiagnostic(ctx);\n+      }\n+    }\n+    return ctx;\n+  }\n+\n+  private boolean needCreateIssue(BSLParser.ProcDeclarationContext ctx) {\n+    BSLParser.ProcedureContext procedureContext = (BSLParser.ProcedureContext) ctx.getParent();\n+    var statements = procedureContext.subCodeBlock().codeBlock().statement();\n+    if (statements != null) {\n+      if (!statements.isEmpty()) {\n+        return !foundLoadConditionWithReturn(statements.get(0));\n+      }\n+    }\n+    return true;\n+  }\n+\n+  private boolean foundLoadConditionWithReturn(BSLParser.StatementContext ctx) {\n+    var ifStatement = ctx.compoundStatement().ifStatement();\n+    if (ifStatement != null) {\n+      var ifBranch = ifStatement.ifBranch();\n+      var text = ifBranch.expression().getText();\n+      return searchCondition.matcher(text).find() && foundReturnStatement(ifBranch);\n+    }\n+    return false;\n+  }\n+\n+  private boolean foundReturnStatement(BSLParser.IfBranchContext ctx) {\n+    var ifStatements = ctx.codeBlock().statement();\n+    if (ifStatements != null) {\n+      var itemStatement = ifStatements.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2974178b66ce481b442f425739ef76edf4432f47"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODk4NjE5", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#pullrequestreview-395898619", "createdAt": "2020-04-18T09:34:45Z", "commit": {"oid": "2974178b66ce481b442f425739ef76edf4432f47"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwOTozNDo0NVrOGHpnQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwOTozNDo0NVrOGHpnQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTAwOQ==", "bodyText": "\u0438 \u0437\u0434\u0435\u0441\u044c \u0432\u0440\u043e\u0434\u0435 \u0442\u043e\u0436\u0435 NPE \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r410675009", "createdAt": "2020-04-18T09:34:45Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,\n+  severity = DiagnosticSeverity.CRITICAL,\n+  scope = DiagnosticScope.BSL,\n+  modules = {\n+    ModuleType.ObjectModule\n+  },\n+  minutesToFix = 10,\n+  tags = {\n+    DiagnosticTag.STANDARD,\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.UNPREDICTABLE\n+  }\n+\n+)\n+public class DataExchangeLoadingDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final String SUB_NAMES = \"^(\u041f\u0435\u0440\u0435\u0434\u0417\u0430\u043f\u0438\u0441\u044c\u044e|\u041f\u0440\u0438\u0417\u0430\u043f\u0438\u0441\u0438|\u041f\u0435\u0440\u0435\u0434\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c|BeforeWrite|BeforeDelete|OnWrite)$\";\n+  private static final String CONDITION =\n+    \"\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430=\u0418\u0441\u0442\u0438\u043d\u0430|\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430|DataExchange.Load=True|DataExchange.Load\";\n+\n+  private static final Pattern searchSubNames = Pattern.compile(\n+    SUB_NAMES,\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+  private static final Pattern searchCondition = Pattern.compile(\n+    CONDITION,\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+\n+  public DataExchangeLoadingDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public ParseTree visitProcDeclaration(BSLParser.ProcDeclarationContext ctx) {\n+    var subName = ctx.subName();\n+    if (subName != null) {\n+      if (searchSubNames.matcher(subName.getText()).matches() && needCreateIssue(ctx)) {\n+        diagnosticStorage.addDiagnostic(ctx);\n+      }\n+    }\n+    return ctx;\n+  }\n+\n+  private boolean needCreateIssue(BSLParser.ProcDeclarationContext ctx) {\n+    BSLParser.ProcedureContext procedureContext = (BSLParser.ProcedureContext) ctx.getParent();\n+    var statements = procedureContext.subCodeBlock().codeBlock().statement();\n+    if (statements != null) {\n+      if (!statements.isEmpty()) {\n+        return !foundLoadConditionWithReturn(statements.get(0));\n+      }\n+    }\n+    return true;\n+  }\n+\n+  private boolean foundLoadConditionWithReturn(BSLParser.StatementContext ctx) {\n+    var ifStatement = ctx.compoundStatement().ifStatement();\n+    if (ifStatement != null) {\n+      var ifBranch = ifStatement.ifBranch();\n+      var text = ifBranch.expression().getText();\n+      return searchCondition.matcher(text).find() && foundReturnStatement(ifBranch);\n+    }\n+    return false;\n+  }\n+\n+  private boolean foundReturnStatement(BSLParser.IfBranchContext ctx) {\n+    var ifStatements = ctx.codeBlock().statement();\n+    if (ifStatements != null) {\n+      var itemStatement = ifStatements.get(0);\n+      return itemStatement.compoundStatement().returnStatement() != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2974178b66ce481b442f425739ef76edf4432f47"}, "originalPosition": 104}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd648c9e958115c709e7590815ff99ea72dfe24a", "author": {"user": {"login": "otymko", "name": "Oleg Tymko"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/bd648c9e958115c709e7590815ff99ea72dfe24a", "committedDate": "2020-04-18T16:06:39Z", "message": "\u043f\u0435\u0440\u0435\u0445\u043e\u0434 \u043d\u0430 \u0441\u0442\u0440\u0438\u043c\u044b, \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u0435 \u043a\u043e\u0434\u0430, \u0432\u0440\u0435\u043c\u044f \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u043e \u0434\u043e 5 \u043c\u0438\u043d, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0435\u0449\u0435 \u0442\u0438\u043f\u044b \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u0432 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5e66d4df31d18afc734d16091d4da63f6e74d6b", "author": {"user": {"login": "otymko", "name": "Oleg Tymko"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/c5e66d4df31d18afc734d16091d4da63f6e74d6b", "committedDate": "2020-04-18T16:07:00Z", "message": "\u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u0432 \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u0445 (\u043f\u0435\u0440\u0435\u043f\u0443\u0442\u0430\u043d\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7668555c5e4fa7db13334250a86028e65c2baa6", "author": {"user": {"login": "otymko", "name": "Oleg Tymko"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/e7668555c5e4fa7db13334250a86028e65c2baa6", "committedDate": "2020-04-20T05:06:27Z", "message": "\u043f\u043e\u0438\u0441\u043a \u043f\u0435\u0440\u0432\u043e\u0433\u043e statement \u0432 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e false"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "570ff3dd9af5ee0301dd53b4b6a9ed6eb46cd1b8", "author": {"user": {"login": "otymko", "name": "Oleg Tymko"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/570ff3dd9af5ee0301dd53b4b6a9ed6eb46cd1b8", "committedDate": "2020-04-20T05:10:41Z", "message": "Precommit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MTQzMTI4", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#pullrequestreview-396143128", "createdAt": "2020-04-20T05:12:00Z", "commit": {"oid": "570ff3dd9af5ee0301dd53b4b6a9ed6eb46cd1b8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNToxMjowMFrOGIDYrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNToxMjowMFrOGIDYrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA5NzI2MQ==", "bodyText": "\u041c\u043d\u0435 \u043d\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u044d\u0442\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430, \u043d\u043e \u043f\u043e\u043a\u0430 \u043d\u0438\u0447\u0435\u0433\u043e \u043b\u0443\u0447\u0448\u0435 \u043d\u0435 \u043f\u0440\u0438\u0434\u0443\u043c\u0430\u043b.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r411097261", "createdAt": "2020-04-20T05:12:00Z", "author": {"login": "otymko"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.DiagnosticHelper;\n+import com.github._1c_syntax.bsl.languageserver.utils.Trees;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,\n+  severity = DiagnosticSeverity.CRITICAL,\n+  scope = DiagnosticScope.BSL,\n+  modules = {\n+    ModuleType.ObjectModule,\n+    ModuleType.RecordSetModule,\n+    ModuleType.ValueManagerModule\n+  },\n+  minutesToFix = 5,\n+  tags = {\n+    DiagnosticTag.STANDARD,\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.UNPREDICTABLE\n+  }\n+\n+)\n+public class DataExchangeLoadingDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final Pattern searchSubNames = Pattern.compile(\n+    \"^(\u041f\u0435\u0440\u0435\u0434\u0417\u0430\u043f\u0438\u0441\u044c\u044e|\u041f\u0440\u0438\u0417\u0430\u043f\u0438\u0441\u0438|\u041f\u0435\u0440\u0435\u0434\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c|BeforeWrite|BeforeDelete|OnWrite)$\",\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+  private static final Pattern searchCondition = Pattern.compile(\n+    \"\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430=\u0418\u0441\u0442\u0438\u043d\u0430|\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430|DataExchange.Load=True|DataExchange.Load\",\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+\n+  private static final boolean FIND_FIRST = false;\n+\n+  @DiagnosticParameter(\n+    type = Boolean.class,\n+    defaultValue = \"\" + FIND_FIRST\n+  )\n+  private boolean findFirst = FIND_FIRST;\n+\n+  public DataExchangeLoadingDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    if (configuration == null) return;\n+    DiagnosticHelper.configureDiagnostic(this, configuration, \"findFirst\");\n+  }\n+\n+  @Override\n+  public ParseTree visitProcDeclaration(BSLParser.ProcDeclarationContext ctx) {\n+    Optional.of(ctx)\n+      .map(BSLParser.ProcDeclarationContext::subName)\n+      .filter(subName ->\n+        searchSubNames.matcher(subName.getText()).find()\n+          && !checkPassed(ctx)\n+      )\n+      .flatMap(context ->\n+        Optional.of(documentContext.getSymbolTree())\n+          .map(symbolTree -> symbolTree.getMethodSymbol((BSLParser.SubContext) getSubContext(ctx)))\n+          .get())\n+      .ifPresent(methodSymbol -> diagnosticStorage.addDiagnostic(methodSymbol.getSubNameRange()));\n+    return ctx;\n+  }\n+\n+  private boolean checkPassed(BSLParser.ProcDeclarationContext ctx) {\n+    AtomicInteger orderStatement = new AtomicInteger();\n+    return Optional.of(ctx)\n+      .map(BSLParser.ProcDeclarationContext::getParent)\n+      .map(BSLParser.ProcedureContext.class::cast)\n+      .map(BSLParser.ProcedureContext::subCodeBlock)\n+      .map(BSLParser.SubCodeBlockContext::codeBlock)\n+      .map(BSLParser.CodeBlockContext::statement)\n+      .flatMap(context -> context.stream()\n+        .filter(statement -> {\n+          orderStatement.getAndIncrement();\n+          if (findFirst && orderStatement.get() > 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "570ff3dd9af5ee0301dd53b4b6a9ed6eb46cd1b8"}, "originalPosition": 114}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f678c57a9f4c6893e5132e1a322e2b38f65c557", "author": {"user": {"login": "otymko", "name": "Oleg Tymko"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/2f678c57a9f4c6893e5132e1a322e2b38f65c557", "committedDate": "2020-04-20T05:23:53Z", "message": "qf"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NDc2NjU2", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#pullrequestreview-396476656", "createdAt": "2020-04-20T13:55:59Z", "commit": {"oid": "2f678c57a9f4c6893e5132e1a322e2b38f65c557"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMzo1NTo1OVrOGIVvvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMzo1NTo1OVrOGIVvvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM5ODA3OQ==", "bodyText": "\u044d\u0442\u043e \u0443\u0436\u0435 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e, \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u044b \u0441\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r411398079", "createdAt": "2020-04-20T13:55:59Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.DiagnosticHelper;\n+import com.github._1c_syntax.bsl.languageserver.utils.Trees;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,\n+  severity = DiagnosticSeverity.CRITICAL,\n+  scope = DiagnosticScope.BSL,\n+  modules = {\n+    ModuleType.ObjectModule,\n+    ModuleType.RecordSetModule,\n+    ModuleType.ValueManagerModule\n+  },\n+  minutesToFix = 5,\n+  tags = {\n+    DiagnosticTag.STANDARD,\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.UNPREDICTABLE\n+  }\n+\n+)\n+public class DataExchangeLoadingDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final Pattern searchSubNames = Pattern.compile(\n+    \"^(\u041f\u0435\u0440\u0435\u0434\u0417\u0430\u043f\u0438\u0441\u044c\u044e|\u041f\u0440\u0438\u0417\u0430\u043f\u0438\u0441\u0438|\u041f\u0435\u0440\u0435\u0434\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c|BeforeWrite|BeforeDelete|OnWrite)$\",\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+  private static final Pattern searchCondition = Pattern.compile(\n+    \"\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430=\u0418\u0441\u0442\u0438\u043d\u0430|\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430|DataExchange.Load=True|DataExchange.Load\",\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+\n+  private static final boolean FIND_FIRST = false;\n+\n+  @DiagnosticParameter(\n+    type = Boolean.class,\n+    defaultValue = \"\" + FIND_FIRST\n+  )\n+  private boolean findFirst = FIND_FIRST;\n+\n+  public DataExchangeLoadingDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f678c57a9f4c6893e5132e1a322e2b38f65c557"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f75f9f0e3c5753cd60cbf95798538b7d65e5e258", "author": {"user": {"login": "otymko", "name": "Oleg Tymko"}}, "url": "https://github.com/1c-syntax/bsl-language-server/commit/f75f9f0e3c5753cd60cbf95798538b7d65e5e258", "committedDate": "2020-04-20T14:32:50Z", "message": "\u0443\u0431\u0440\u0430\u043b \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0439 configure"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NTUzNjgz", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#pullrequestreview-396553683", "createdAt": "2020-04-20T15:17:51Z", "commit": {"oid": "f75f9f0e3c5753cd60cbf95798538b7d65e5e258"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNToxNzo1MVrOGIZvcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNToxNzo1MVrOGIZvcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2MzUzOA==", "bodyText": "\u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442 FIND_FIRST \u043d\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0441\u0432\u043e\u0435\u043c\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e ( @otymko\nFALSE \u0436\u0435", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r411463538", "createdAt": "2020-04-20T15:17:51Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.DiagnosticHelper;\n+import com.github._1c_syntax.bsl.languageserver.utils.Trees;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,\n+  severity = DiagnosticSeverity.CRITICAL,\n+  scope = DiagnosticScope.BSL,\n+  modules = {\n+    ModuleType.ObjectModule,\n+    ModuleType.RecordSetModule,\n+    ModuleType.ValueManagerModule\n+  },\n+  minutesToFix = 5,\n+  tags = {\n+    DiagnosticTag.STANDARD,\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.UNPREDICTABLE\n+  }\n+\n+)\n+public class DataExchangeLoadingDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final Pattern searchSubNames = Pattern.compile(\n+    \"^(\u041f\u0435\u0440\u0435\u0434\u0417\u0430\u043f\u0438\u0441\u044c\u044e|\u041f\u0440\u0438\u0417\u0430\u043f\u0438\u0441\u0438|\u041f\u0435\u0440\u0435\u0434\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c|BeforeWrite|BeforeDelete|OnWrite)$\",\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+  private static final Pattern searchCondition = Pattern.compile(\n+    \"\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430=\u0418\u0441\u0442\u0438\u043d\u0430|\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430|DataExchange.Load=True|DataExchange.Load\",\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+\n+  private static final boolean FIND_FIRST = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f75f9f0e3c5753cd60cbf95798538b7d65e5e258"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NTYxOTI3", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#pullrequestreview-396561927", "createdAt": "2020-04-20T15:26:42Z", "commit": {"oid": "f75f9f0e3c5753cd60cbf95798538b7d65e5e258"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNToyNjo0MlrOGIaLNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNToyNjo0MlrOGIaLNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3MDY0Ng==", "bodyText": "\u0421\u043e\u043d\u0430\u0440\u041b\u0438\u043d\u0442 \u0432\u044b\u0434\u0430\u0435\u0442 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f, \u0434\u0430 \u0438 \u0418\u0434\u0435\u044f \u0440\u0443\u0433\u0430\u0435\u0442\u0441\u044f (", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r411470646", "createdAt": "2020-04-20T15:26:42Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.DiagnosticHelper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f75f9f0e3c5753cd60cbf95798538b7d65e5e258"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NTYzMDcw", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#pullrequestreview-396563070", "createdAt": "2020-04-20T15:27:55Z", "commit": {"oid": "f75f9f0e3c5753cd60cbf95798538b7d65e5e258"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNToyNzo1NVrOGIaO6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNToyNzo1NVrOGIaO6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3MTU5Mg==", "bodyText": "\u043e\u043f\u0430\u0441\u043d\u0430\u044f \u0436\u0435 \u0448\u0442\u0443\u043a\u0430?\n\nmap() \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u0443\u0441\u0442\u043e\u0439 Optional \u0438 get \u0442\u0443\u043f\u043e \u0440\u0443\u0445\u043d\u0435\u0442.\n\u0430 \u0437\u0434\u0435\u0441\u044c \u0434\u0430\u0436\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043d\u0435\u0442 (\n@otymko @nixel2007", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r411471592", "createdAt": "2020-04-20T15:27:55Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.DiagnosticHelper;\n+import com.github._1c_syntax.bsl.languageserver.utils.Trees;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,\n+  severity = DiagnosticSeverity.CRITICAL,\n+  scope = DiagnosticScope.BSL,\n+  modules = {\n+    ModuleType.ObjectModule,\n+    ModuleType.RecordSetModule,\n+    ModuleType.ValueManagerModule\n+  },\n+  minutesToFix = 5,\n+  tags = {\n+    DiagnosticTag.STANDARD,\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.UNPREDICTABLE\n+  }\n+\n+)\n+public class DataExchangeLoadingDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final Pattern searchSubNames = Pattern.compile(\n+    \"^(\u041f\u0435\u0440\u0435\u0434\u0417\u0430\u043f\u0438\u0441\u044c\u044e|\u041f\u0440\u0438\u0417\u0430\u043f\u0438\u0441\u0438|\u041f\u0435\u0440\u0435\u0434\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c|BeforeWrite|BeforeDelete|OnWrite)$\",\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+  private static final Pattern searchCondition = Pattern.compile(\n+    \"\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430=\u0418\u0441\u0442\u0438\u043d\u0430|\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430|DataExchange.Load=True|DataExchange.Load\",\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+\n+  private static final boolean FIND_FIRST = false;\n+\n+  @DiagnosticParameter(\n+    type = Boolean.class,\n+    defaultValue = \"\" + FIND_FIRST\n+  )\n+  private boolean findFirst = FIND_FIRST;\n+\n+  public DataExchangeLoadingDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public ParseTree visitProcDeclaration(BSLParser.ProcDeclarationContext ctx) {\n+    Optional.of(ctx)\n+      .map(BSLParser.ProcDeclarationContext::subName)\n+      .filter(subName ->\n+        searchSubNames.matcher(subName.getText()).find()\n+          && !checkPassed(ctx)\n+      )\n+      .flatMap(context ->\n+        Optional.of(documentContext.getSymbolTree())\n+          .map(symbolTree -> symbolTree.getMethodSymbol((BSLParser.SubContext) getSubContext(ctx)))\n+          .get())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f75f9f0e3c5753cd60cbf95798538b7d65e5e258"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NTc1ODk1", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#pullrequestreview-396575895", "createdAt": "2020-04-20T15:41:40Z", "commit": {"oid": "f75f9f0e3c5753cd60cbf95798538b7d65e5e258"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNTo0MTo0MVrOGIa5rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNTo0MTo0MVrOGIa5rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4MjU0MA==", "bodyText": "\u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043a\u0430 \"\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430\" \u0438 \u0442.\u043f. \u043d\u0435\u0432\u0435\u0440\u043d\u0430\u044f.\n. \u0432 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043a\u0435 \u0438\u043c\u0435\u0435\u0442 \u0441\u043f\u0435\u0446.\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0442\u0435\u0431\u0435 \u043d\u0443\u0436\u043d\u043e \u0432\u043c\u0435\u0441\u0442\u043e \u043d\u0435\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \"\\.\" \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0438\u043c\u0435\u043d\u043d\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u0442\u043e\u0447\u043a\u0430 \u0432 \u0442\u0435\u043a\u0441\u0442\u0435.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1086#discussion_r411482540", "createdAt": "2020-04-20T15:41:41Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/DataExchangeLoadingDiagnostic.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.DiagnosticHelper;\n+import com.github._1c_syntax.bsl.languageserver.utils.Trees;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.mdclasses.metadata.additional.ModuleType;\n+import org.antlr.v4.runtime.ParserRuleContext;\n+import org.antlr.v4.runtime.tree.ParseTree;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,\n+  severity = DiagnosticSeverity.CRITICAL,\n+  scope = DiagnosticScope.BSL,\n+  modules = {\n+    ModuleType.ObjectModule,\n+    ModuleType.RecordSetModule,\n+    ModuleType.ValueManagerModule\n+  },\n+  minutesToFix = 5,\n+  tags = {\n+    DiagnosticTag.STANDARD,\n+    DiagnosticTag.BADPRACTICE,\n+    DiagnosticTag.UNPREDICTABLE\n+  }\n+\n+)\n+public class DataExchangeLoadingDiagnostic extends AbstractVisitorDiagnostic {\n+\n+  private static final Pattern searchSubNames = Pattern.compile(\n+    \"^(\u041f\u0435\u0440\u0435\u0434\u0417\u0430\u043f\u0438\u0441\u044c\u044e|\u041f\u0440\u0438\u0417\u0430\u043f\u0438\u0441\u0438|\u041f\u0435\u0440\u0435\u0434\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c|BeforeWrite|BeforeDelete|OnWrite)$\",\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+  private static final Pattern searchCondition = Pattern.compile(\n+    \"\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430=\u0418\u0441\u0442\u0438\u043d\u0430|\u041e\u0431\u043c\u0435\u043d\u0414\u0430\u043d\u043d\u044b\u043c\u0438.\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430|DataExchange.Load=True|DataExchange.Load\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f75f9f0e3c5753cd60cbf95798538b7d65e5e258"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4723, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}