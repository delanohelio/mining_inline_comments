{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNTgyMDQz", "number": 1141, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwOToyOTozMFrOD3jDWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMjowODo1MVrOD3mNcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTcyNTcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/UnsafeSafeModeMethodCallDiagnostic.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwOToyOTozMFrOGN23Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDoyNzozN1rOGN4vmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE4MzQ5NQ==", "bodyText": "\u043d\u0435 \u043d\u0430\u0441\u0442\u0430\u0438\u0432\u0430\u044e, \u043d\u043e \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u044e\u0437\u0430\u0442\u044c CaseInsestivityPatter.compile", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1141#discussion_r417183495", "createdAt": "2020-04-29T09:29:30Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/UnsafeSafeModeMethodCallDiagnostic.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Trees;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,\n+  severity = DiagnosticSeverity.BLOCKER,\n+  scope = DiagnosticScope.BSL,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.STANDARD,\n+    DiagnosticTag.DEPRECATED,\n+    DiagnosticTag.ERROR\n+  }\n+\n+)\n+public class UnsafeSafeModeMethodCallDiagnostic extends AbstractFindMethodDiagnostic {\n+\n+  private static final Pattern SAFE_MODE_METHOD_NAME = Pattern.compile(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a844e88fefcc25af5bbbdedcdb6af048f4887bc0"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE5MjM3Ng==", "bodyText": "\u0410 \u0435\u0433\u043e \u0434\u043e\u0442\u044f\u043d\u0443\u043b\u0438 \u0434\u043e \u0431\u0441\u043b \u043b\u0441?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1141#discussion_r417192376", "createdAt": "2020-04-29T09:45:31Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/UnsafeSafeModeMethodCallDiagnostic.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Trees;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,\n+  severity = DiagnosticSeverity.BLOCKER,\n+  scope = DiagnosticScope.BSL,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.STANDARD,\n+    DiagnosticTag.DEPRECATED,\n+    DiagnosticTag.ERROR\n+  }\n+\n+)\n+public class UnsafeSafeModeMethodCallDiagnostic extends AbstractFindMethodDiagnostic {\n+\n+  private static final Pattern SAFE_MODE_METHOD_NAME = Pattern.compile(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE4MzQ5NQ=="}, "originalCommit": {"oid": "a844e88fefcc25af5bbbdedcdb6af048f4887bc0"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxNDM2Mg==", "bodyText": "\u0412\u043c\u0435\u0441\u0442\u0435 \u0441 \u043c\u043e\u0434\u0443\u043b\u044f\u043c\u0438 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0437\u0430\u0435\u0445\u0430\u0442\u044c", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1141#discussion_r417214362", "createdAt": "2020-04-29T10:27:37Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/UnsafeSafeModeMethodCallDiagnostic.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Trees;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,\n+  severity = DiagnosticSeverity.BLOCKER,\n+  scope = DiagnosticScope.BSL,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.STANDARD,\n+    DiagnosticTag.DEPRECATED,\n+    DiagnosticTag.ERROR\n+  }\n+\n+)\n+public class UnsafeSafeModeMethodCallDiagnostic extends AbstractFindMethodDiagnostic {\n+\n+  private static final Pattern SAFE_MODE_METHOD_NAME = Pattern.compile(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE4MzQ5NQ=="}, "originalCommit": {"oid": "a844e88fefcc25af5bbbdedcdb6af048f4887bc0"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTk0MjY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/UnsafeSafeModeMethodCallDiagnostic.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDozNDozOFrOGN4-LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMTo0NDoxM1rOGN7Elw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxODA5Mg==", "bodyText": "\u0412\u044b\u043a\u0438\u043d\u044c return \u0432 \u043a\u043e\u043d\u0435\u0446 \u043c\u0435\u0442\u043e\u0434\u0430", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1141#discussion_r417218092", "createdAt": "2020-04-29T10:34:38Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/UnsafeSafeModeMethodCallDiagnostic.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticCompatibilityMode;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Trees;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,\n+  severity = DiagnosticSeverity.BLOCKER,\n+  scope = DiagnosticScope.BSL,\n+  compatibilityMode = DiagnosticCompatibilityMode.COMPATIBILITY_MODE_8_3_1,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.STANDARD,\n+    DiagnosticTag.DEPRECATED,\n+    DiagnosticTag.ERROR\n+  }\n+\n+)\n+public class UnsafeSafeModeMethodCallDiagnostic extends AbstractFindMethodDiagnostic {\n+\n+  private static final Pattern SAFE_MODE_METHOD_NAME = Pattern.compile(\n+    \"(\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0439\u0420\u0435\u0436\u0438\u043c|SafeMode)\",\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n+  );\n+\n+  public UnsafeSafeModeMethodCallDiagnostic(DiagnosticInfo info) {\n+    super(info, SAFE_MODE_METHOD_NAME);\n+  }\n+\n+  @Override\n+  protected boolean checkMethodCall(BSLParser.MethodCallContext ctx) {\n+    return false;\n+  }\n+\n+  @Override\n+  protected boolean checkGlobalMethodCall(BSLParser.GlobalMethodCallContext ctx) {\n+\n+    var rootIfNode = Trees.getRootParent(ctx, BSLParser.RULE_ifStatement);\n+    var rootExpressionNode = Trees.getRootParent(ctx, BSLParser.RULE_expression);\n+    var currentRootMember = Trees.getRootParent(ctx, BSLParser.RULE_member);\n+    if (rootIfNode == null || rootExpressionNode == null || currentRootMember == null) {\n+      return false;\n+    }\n+\n+    int indexOfCurrentMemberNode = rootExpressionNode.children.indexOf(currentRootMember);\n+    if (indexOfCurrentMemberNode != rootExpressionNode.getChildCount() - 1) {\n+      var nextNode = rootExpressionNode.children.get(indexOfCurrentMemberNode + 1);\n+      return !(Trees.nodeContains(nextNode, BSLParser.RULE_compareOperation));\n+    } else {\n+      return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee3ca7fc2724d0a6f7e20572347b2e767e48a7be"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI1MjUwMw==", "bodyText": "\u2714\ufe0f", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1141#discussion_r417252503", "createdAt": "2020-04-29T11:44:13Z", "author": {"login": "EightM"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/UnsafeSafeModeMethodCallDiagnostic.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticCompatibilityMode;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Trees;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,\n+  severity = DiagnosticSeverity.BLOCKER,\n+  scope = DiagnosticScope.BSL,\n+  compatibilityMode = DiagnosticCompatibilityMode.COMPATIBILITY_MODE_8_3_1,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.STANDARD,\n+    DiagnosticTag.DEPRECATED,\n+    DiagnosticTag.ERROR\n+  }\n+\n+)\n+public class UnsafeSafeModeMethodCallDiagnostic extends AbstractFindMethodDiagnostic {\n+\n+  private static final Pattern SAFE_MODE_METHOD_NAME = Pattern.compile(\n+    \"(\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0439\u0420\u0435\u0436\u0438\u043c|SafeMode)\",\n+    Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE\n+  );\n+\n+  public UnsafeSafeModeMethodCallDiagnostic(DiagnosticInfo info) {\n+    super(info, SAFE_MODE_METHOD_NAME);\n+  }\n+\n+  @Override\n+  protected boolean checkMethodCall(BSLParser.MethodCallContext ctx) {\n+    return false;\n+  }\n+\n+  @Override\n+  protected boolean checkGlobalMethodCall(BSLParser.GlobalMethodCallContext ctx) {\n+\n+    var rootIfNode = Trees.getRootParent(ctx, BSLParser.RULE_ifStatement);\n+    var rootExpressionNode = Trees.getRootParent(ctx, BSLParser.RULE_expression);\n+    var currentRootMember = Trees.getRootParent(ctx, BSLParser.RULE_member);\n+    if (rootIfNode == null || rootExpressionNode == null || currentRootMember == null) {\n+      return false;\n+    }\n+\n+    int indexOfCurrentMemberNode = rootExpressionNode.children.indexOf(currentRootMember);\n+    if (indexOfCurrentMemberNode != rootExpressionNode.getChildCount() - 1) {\n+      var nextNode = rootExpressionNode.children.get(indexOfCurrentMemberNode + 1);\n+      return !(Trees.nodeContains(nextNode, BSLParser.RULE_compareOperation));\n+    } else {\n+      return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxODA5Mg=="}, "originalCommit": {"oid": "ee3ca7fc2724d0a6f7e20572347b2e767e48a7be"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjI0MzA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/UnsafeSafeModeMethodCallDiagnostic.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMjowODo1MVrOGN71sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMjowODo1MVrOGN71sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI2NTA3NA==", "bodyText": "\u043d\u0435 \u0441\u0442\u043e\u0438\u0442 \u043b\u0438 \u043f\u043e\u0432\u0435\u0441\u0438\u0442\u044c Security?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1141#discussion_r417265074", "createdAt": "2020-04-29T12:08:51Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/UnsafeSafeModeMethodCallDiagnostic.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticCompatibilityMode;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticScope;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Trees;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.ERROR,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3aed6538e109602920eb735af45f218ccccb9d7"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4788, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}