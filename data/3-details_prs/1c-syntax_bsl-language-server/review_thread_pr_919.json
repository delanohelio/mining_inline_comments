{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NDQzNDgw", "number": 919, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMzoyMDowNVrODbkWoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNzoyMzozNlrODbp92Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjMzNzYxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/SmokyTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMzoyMDowNVrOFjIEkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNzoyMTo1MVrOFjQ4Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3NjcyMw==", "bodyText": "\u042f \u0432\u043e\u0442 \u044d\u0442\u043e\u0433\u043e \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u044e. \u0417\u0430\u0447\u0435\u043c? \u041a\u0430\u043a\u0438\u0435 \u043a\u0435\u0439\u0441\u044b \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043a\u0440\u044b\u0442\u044c, \u0447\u0442\u043e \u043d\u0435 \u043f\u043e\u043a\u0440\u043e\u0435\u0442\u0441\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u043e\u043c \u0432\u0441\u0435\u0445 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/919#discussion_r372376723", "createdAt": "2020-01-29T13:20:05Z", "author": {"login": "nixel2007"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/SmokyTest.java", "diffHunk": "@@ -64,17 +70,62 @@ void testIdenticalRanges() {\n         diagnosticProvider.computeDiagnostics(documentContext).stream()\n           .filter(diagnostic ->\n             (diagnostic.getRange() != null\n-                && diagnostic.getRange().getEnd().equals(diagnostic.getRange().getStart()))\n+              && diagnostic.getRange().getEnd().equals(diagnostic.getRange().getStart()))\n               || (diagnostic.getRelatedInformation() != null\n-                && diagnostic.getRelatedInformation().stream()\n-                  .anyMatch(relation -> relation.getLocation() != null\n-                    && relation.getLocation().getRange() != null\n-                    && relation.getLocation().getRange().getEnd().equals(relation.getLocation().getRange().getStart())))\n+              && diagnostic.getRelatedInformation().stream()\n+              .anyMatch(relation -> relation.getLocation() != null\n+                && relation.getLocation().getRange() != null\n+                && relation.getLocation().getRange().getEnd().equals(relation.getLocation().getRange().getStart())))\n           )\n           .collect(Collectors.toCollection(() -> diagnostics));\n       });\n \n     assertThat(diagnostics).isEmpty();\n   }\n \n+  @SneakyThrows\n+  @Test\n+  void testIAllDiagnostics() {\n+\n+    // \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u0441\u0435 \u0444\u0430\u0439\u043b\u044b \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432\n+    var srcDir = \"./src/test/resources/\";\n+    var fixtures = FileUtils.listFiles(\n+      Paths.get(srcDir).toAbsolutePath().toFile(), new String[]{\"bsl\", \"os\"}, true);\n+\n+    // \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043a\u043e\u0434\u044b \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a \u0438 \u043f\u043e\u043b\u043e\u0436\u0438\u043c \u0432 \u043c\u0430\u043f\u0443 \"\u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u043c\"\n+    Map<String, Either<Boolean, Map<String, Object>>> diagnostics = new HashMap<>();\n+    DiagnosticSupplier.getDiagnosticClasses().stream()\n+      .map(diagnosticClass -> (new DiagnosticInfo(diagnosticClass).getCode()))\n+      .forEach(diagnosticCode -> diagnostics.put(diagnosticCode, Either.forLeft(false)));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0578fa0995235e6865b060e4db840c2e1579fdd8"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUyMDAyOQ==", "bodyText": "\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043f\u0430\u0434\u0430\u044e\u0442 2 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438.\n\u0415\u0441\u043b\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0441\u043a\u043e\u043f\u043e\u043c, \u0443\u043f\u0430\u0434\u0435\u0442 \u043e\u0434\u043d\u0430, \u043f\u0440\u043e \u0432\u0442\u043e\u0440\u0443\u044e \u043d\u0435 \u0443\u0437\u043d\u0430\u0435\u043c, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043c \u043f\u0435\u0440\u0432\u0443\u044e, \u0430 \u0442\u0430\u043a, \u0442\u043e\u0447\u043d\u043e \u0443\u0437\u043d\u0430\u0435\u043c", "url": "https://github.com/1c-syntax/bsl-language-server/pull/919#discussion_r372520029", "createdAt": "2020-01-29T17:19:50Z", "author": {"login": "theshadowco"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/SmokyTest.java", "diffHunk": "@@ -64,17 +70,62 @@ void testIdenticalRanges() {\n         diagnosticProvider.computeDiagnostics(documentContext).stream()\n           .filter(diagnostic ->\n             (diagnostic.getRange() != null\n-                && diagnostic.getRange().getEnd().equals(diagnostic.getRange().getStart()))\n+              && diagnostic.getRange().getEnd().equals(diagnostic.getRange().getStart()))\n               || (diagnostic.getRelatedInformation() != null\n-                && diagnostic.getRelatedInformation().stream()\n-                  .anyMatch(relation -> relation.getLocation() != null\n-                    && relation.getLocation().getRange() != null\n-                    && relation.getLocation().getRange().getEnd().equals(relation.getLocation().getRange().getStart())))\n+              && diagnostic.getRelatedInformation().stream()\n+              .anyMatch(relation -> relation.getLocation() != null\n+                && relation.getLocation().getRange() != null\n+                && relation.getLocation().getRange().getEnd().equals(relation.getLocation().getRange().getStart())))\n           )\n           .collect(Collectors.toCollection(() -> diagnostics));\n       });\n \n     assertThat(diagnostics).isEmpty();\n   }\n \n+  @SneakyThrows\n+  @Test\n+  void testIAllDiagnostics() {\n+\n+    // \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u0441\u0435 \u0444\u0430\u0439\u043b\u044b \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432\n+    var srcDir = \"./src/test/resources/\";\n+    var fixtures = FileUtils.listFiles(\n+      Paths.get(srcDir).toAbsolutePath().toFile(), new String[]{\"bsl\", \"os\"}, true);\n+\n+    // \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043a\u043e\u0434\u044b \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a \u0438 \u043f\u043e\u043b\u043e\u0436\u0438\u043c \u0432 \u043c\u0430\u043f\u0443 \"\u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u043c\"\n+    Map<String, Either<Boolean, Map<String, Object>>> diagnostics = new HashMap<>();\n+    DiagnosticSupplier.getDiagnosticClasses().stream()\n+      .map(diagnosticClass -> (new DiagnosticInfo(diagnosticClass).getCode()))\n+      .forEach(diagnosticCode -> diagnostics.put(diagnosticCode, Either.forLeft(false)));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3NjcyMw=="}, "originalCommit": {"oid": "0578fa0995235e6865b060e4db840c2e1579fdd8"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUyMDI1OA==", "bodyText": "\u043c\u043e\u0433\u0443 \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c, \u0443\u0431\u0440\u0430\u0432 \u044d\u0442\u043e\u0442 \u0432\u0430\u0440\u0438\u0430\u043d\u0442", "url": "https://github.com/1c-syntax/bsl-language-server/pull/919#discussion_r372520258", "createdAt": "2020-01-29T17:20:19Z", "author": {"login": "theshadowco"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/SmokyTest.java", "diffHunk": "@@ -64,17 +70,62 @@ void testIdenticalRanges() {\n         diagnosticProvider.computeDiagnostics(documentContext).stream()\n           .filter(diagnostic ->\n             (diagnostic.getRange() != null\n-                && diagnostic.getRange().getEnd().equals(diagnostic.getRange().getStart()))\n+              && diagnostic.getRange().getEnd().equals(diagnostic.getRange().getStart()))\n               || (diagnostic.getRelatedInformation() != null\n-                && diagnostic.getRelatedInformation().stream()\n-                  .anyMatch(relation -> relation.getLocation() != null\n-                    && relation.getLocation().getRange() != null\n-                    && relation.getLocation().getRange().getEnd().equals(relation.getLocation().getRange().getStart())))\n+              && diagnostic.getRelatedInformation().stream()\n+              .anyMatch(relation -> relation.getLocation() != null\n+                && relation.getLocation().getRange() != null\n+                && relation.getLocation().getRange().getEnd().equals(relation.getLocation().getRange().getStart())))\n           )\n           .collect(Collectors.toCollection(() -> diagnostics));\n       });\n \n     assertThat(diagnostics).isEmpty();\n   }\n \n+  @SneakyThrows\n+  @Test\n+  void testIAllDiagnostics() {\n+\n+    // \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u0441\u0435 \u0444\u0430\u0439\u043b\u044b \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432\n+    var srcDir = \"./src/test/resources/\";\n+    var fixtures = FileUtils.listFiles(\n+      Paths.get(srcDir).toAbsolutePath().toFile(), new String[]{\"bsl\", \"os\"}, true);\n+\n+    // \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043a\u043e\u0434\u044b \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a \u0438 \u043f\u043e\u043b\u043e\u0436\u0438\u043c \u0432 \u043c\u0430\u043f\u0443 \"\u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u043c\"\n+    Map<String, Either<Boolean, Map<String, Object>>> diagnostics = new HashMap<>();\n+    DiagnosticSupplier.getDiagnosticClasses().stream()\n+      .map(diagnosticClass -> (new DiagnosticInfo(diagnosticClass).getCode()))\n+      .forEach(diagnosticCode -> diagnostics.put(diagnosticCode, Either.forLeft(false)));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3NjcyMw=="}, "originalCommit": {"oid": "0578fa0995235e6865b060e4db840c2e1579fdd8"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUyMTA2Mw==", "bodyText": "\u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u044e \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c. \u0438 \u0432\u0440\u0435\u043c\u044f \u0442\u0435\u0441\u0442\u0430 \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u0442\u0441\u044f \u0437\u0430\u043e\u0434\u043d\u043e.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/919#discussion_r372521063", "createdAt": "2020-01-29T17:21:51Z", "author": {"login": "nixel2007"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/SmokyTest.java", "diffHunk": "@@ -64,17 +70,62 @@ void testIdenticalRanges() {\n         diagnosticProvider.computeDiagnostics(documentContext).stream()\n           .filter(diagnostic ->\n             (diagnostic.getRange() != null\n-                && diagnostic.getRange().getEnd().equals(diagnostic.getRange().getStart()))\n+              && diagnostic.getRange().getEnd().equals(diagnostic.getRange().getStart()))\n               || (diagnostic.getRelatedInformation() != null\n-                && diagnostic.getRelatedInformation().stream()\n-                  .anyMatch(relation -> relation.getLocation() != null\n-                    && relation.getLocation().getRange() != null\n-                    && relation.getLocation().getRange().getEnd().equals(relation.getLocation().getRange().getStart())))\n+              && diagnostic.getRelatedInformation().stream()\n+              .anyMatch(relation -> relation.getLocation() != null\n+                && relation.getLocation().getRange() != null\n+                && relation.getLocation().getRange().getEnd().equals(relation.getLocation().getRange().getStart())))\n           )\n           .collect(Collectors.toCollection(() -> diagnostics));\n       });\n \n     assertThat(diagnostics).isEmpty();\n   }\n \n+  @SneakyThrows\n+  @Test\n+  void testIAllDiagnostics() {\n+\n+    // \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u0441\u0435 \u0444\u0430\u0439\u043b\u044b \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432\n+    var srcDir = \"./src/test/resources/\";\n+    var fixtures = FileUtils.listFiles(\n+      Paths.get(srcDir).toAbsolutePath().toFile(), new String[]{\"bsl\", \"os\"}, true);\n+\n+    // \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043a\u043e\u0434\u044b \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a \u0438 \u043f\u043e\u043b\u043e\u0436\u0438\u043c \u0432 \u043c\u0430\u043f\u0443 \"\u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u043c\"\n+    Map<String, Either<Boolean, Map<String, Object>>> diagnostics = new HashMap<>();\n+    DiagnosticSupplier.getDiagnosticClasses().stream()\n+      .map(diagnosticClass -> (new DiagnosticInfo(diagnosticClass).getCode()))\n+      .forEach(diagnosticCode -> diagnostics.put(diagnosticCode, Either.forLeft(false)));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3NjcyMw=="}, "originalCommit": {"oid": "0578fa0995235e6865b060e4db840c2e1579fdd8"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzI1NzIxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/SmokyTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNzoyMzozNlrOFjQ72Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNzoyMzo1MFrOFjQ8cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUyMTk0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Paths.get(srcDir).toAbsolutePath().toFile(), new String[]{\"bsl\", \"os\"}, true);\n          \n          \n            \n                  new File(srcDir), new String[]{\"bsl\", \"os\"}, true);", "url": "https://github.com/1c-syntax/bsl-language-server/pull/919#discussion_r372521945", "createdAt": "2020-01-29T17:23:36Z", "author": {"login": "nixel2007"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/SmokyTest.java", "diffHunk": "@@ -64,17 +70,62 @@ void testIdenticalRanges() {\n         diagnosticProvider.computeDiagnostics(documentContext).stream()\n           .filter(diagnostic ->\n             (diagnostic.getRange() != null\n-                && diagnostic.getRange().getEnd().equals(diagnostic.getRange().getStart()))\n+              && diagnostic.getRange().getEnd().equals(diagnostic.getRange().getStart()))\n               || (diagnostic.getRelatedInformation() != null\n-                && diagnostic.getRelatedInformation().stream()\n-                  .anyMatch(relation -> relation.getLocation() != null\n-                    && relation.getLocation().getRange() != null\n-                    && relation.getLocation().getRange().getEnd().equals(relation.getLocation().getRange().getStart())))\n+              && diagnostic.getRelatedInformation().stream()\n+              .anyMatch(relation -> relation.getLocation() != null\n+                && relation.getLocation().getRange() != null\n+                && relation.getLocation().getRange().getEnd().equals(relation.getLocation().getRange().getStart())))\n           )\n           .collect(Collectors.toCollection(() -> diagnostics));\n       });\n \n     assertThat(diagnostics).isEmpty();\n   }\n \n+  @SneakyThrows\n+  @Test\n+  void testIAllDiagnostics() {\n+\n+    // \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u0441\u0435 \u0444\u0430\u0439\u043b\u044b \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432\n+    var srcDir = \"./src/test/resources/\";\n+    var fixtures = FileUtils.listFiles(\n+      Paths.get(srcDir).toAbsolutePath().toFile(), new String[]{\"bsl\", \"os\"}, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0578fa0995235e6865b060e4db840c2e1579fdd8"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUyMjA5OQ==", "bodyText": "\u0438\u043b\u0438 \u0442\u0430\u043a \u043d\u0435 \u043f\u0440\u043e\u043a\u0430\u0442\u0438\u0442?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/919#discussion_r372522099", "createdAt": "2020-01-29T17:23:50Z", "author": {"login": "nixel2007"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/SmokyTest.java", "diffHunk": "@@ -64,17 +70,62 @@ void testIdenticalRanges() {\n         diagnosticProvider.computeDiagnostics(documentContext).stream()\n           .filter(diagnostic ->\n             (diagnostic.getRange() != null\n-                && diagnostic.getRange().getEnd().equals(diagnostic.getRange().getStart()))\n+              && diagnostic.getRange().getEnd().equals(diagnostic.getRange().getStart()))\n               || (diagnostic.getRelatedInformation() != null\n-                && diagnostic.getRelatedInformation().stream()\n-                  .anyMatch(relation -> relation.getLocation() != null\n-                    && relation.getLocation().getRange() != null\n-                    && relation.getLocation().getRange().getEnd().equals(relation.getLocation().getRange().getStart())))\n+              && diagnostic.getRelatedInformation().stream()\n+              .anyMatch(relation -> relation.getLocation() != null\n+                && relation.getLocation().getRange() != null\n+                && relation.getLocation().getRange().getEnd().equals(relation.getLocation().getRange().getStart())))\n           )\n           .collect(Collectors.toCollection(() -> diagnostics));\n       });\n \n     assertThat(diagnostics).isEmpty();\n   }\n \n+  @SneakyThrows\n+  @Test\n+  void testIAllDiagnostics() {\n+\n+    // \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u0441\u0435 \u0444\u0430\u0439\u043b\u044b \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432\n+    var srcDir = \"./src/test/resources/\";\n+    var fixtures = FileUtils.listFiles(\n+      Paths.get(srcDir).toAbsolutePath().toFile(), new String[]{\"bsl\", \"os\"}, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUyMTk0NQ=="}, "originalCommit": {"oid": "0578fa0995235e6865b060e4db840c2e1579fdd8"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4882, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}