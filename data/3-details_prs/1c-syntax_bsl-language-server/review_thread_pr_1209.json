{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMzk4NTMz", "number": 1209, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOToyNjo1N1rOD_UqYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOToyNjo1N1rOD_UqYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzI1NDExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/UsingCancelParameterDiagnostic.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOToyNjo1N1rOGZ67Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOToyNzo0M1rOGZ68vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgzMzAyMg==", "bodyText": "\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0431\u044b \u043f\u043e\u043c\u0435\u0442\u043a\u0443 \u043f\u0435\u0440\u0435\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1209#discussion_r429833022", "createdAt": "2020-05-25T09:26:57Z", "author": {"login": "otymko"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/UsingCancelParameterDiagnostic.java", "diffHunk": "@@ -73,23 +73,22 @@ public ParseTree visitSub(BSLParser.SubContext ctx) {\n       return ctx;\n     }\n \n-    int skip = 0;\n     Collection<ParseTree> assigns = Trees.findAllRuleNodes(ctx, BSLParser.RULE_assignment);\n \n-    List<ParseTree> tree = assigns.stream()\n+    List<BSLParserRuleContext> tree = assigns.stream()\n       .filter(\n         node -> cancelPattern.matcher(((BSLParser.AssignmentContext) node).lValue()\n           .getText())\n           .matches()\n-      ).collect(Collectors.toList());\n-\n-    tree.stream().skip(skip).forEach(\n-      (ParseTree ident) -> {\n-        if (!rightPartIsValid((BSLParser.AssignmentContext) ident)) {\n-          diagnosticStorage.addDiagnostic((BSLParserRuleContext) ident.getParent());\n-        }\n-      }\n-    );\n+      )\n+      .map(BSLParserRuleContext.class::cast)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b770dce85d659e1860c978d37d072c7fd76a9a1"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgzMzQwNg==", "bodyText": "\u0443\u0436\u0435 \u043d\u0435 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e )", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1209#discussion_r429833406", "createdAt": "2020-05-25T09:27:43Z", "author": {"login": "otymko"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/UsingCancelParameterDiagnostic.java", "diffHunk": "@@ -73,23 +73,22 @@ public ParseTree visitSub(BSLParser.SubContext ctx) {\n       return ctx;\n     }\n \n-    int skip = 0;\n     Collection<ParseTree> assigns = Trees.findAllRuleNodes(ctx, BSLParser.RULE_assignment);\n \n-    List<ParseTree> tree = assigns.stream()\n+    List<BSLParserRuleContext> tree = assigns.stream()\n       .filter(\n         node -> cancelPattern.matcher(((BSLParser.AssignmentContext) node).lValue()\n           .getText())\n           .matches()\n-      ).collect(Collectors.toList());\n-\n-    tree.stream().skip(skip).forEach(\n-      (ParseTree ident) -> {\n-        if (!rightPartIsValid((BSLParser.AssignmentContext) ident)) {\n-          diagnosticStorage.addDiagnostic((BSLParserRuleContext) ident.getParent());\n-        }\n-      }\n-    );\n+      )\n+      .map(BSLParserRuleContext.class::cast)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTgzMzAyMg=="}, "originalCommit": {"oid": "5b770dce85d659e1860c978d37d072c7fd76a9a1"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4832, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}