{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYxNDI5NTUw", "number": 1319, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQyMToxOTo1M1rOEUUhww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQyMTozNTo1M1rOEUUl4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzQzMjk5OnYy", "diffSide": "RIGHT", "path": "src/main/resources/application.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQyMToxOTo1M1rOG6gZHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQyMTozMzo1M1rOG6gdXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAwMTMxMQ==", "bodyText": "\u0412\u043e\u0442 \u044d\u0442\u0430 \u0448\u0442\u0443\u043a\u0430 \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0438\u0437-\u0437\u0430 \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u0430 \u0432\u0435\u0440\u0441\u0438\u0439 slf4j \u0432 \u0441\u043f\u0440\u0438\u043d\u0433-\u0431\u0443\u0442\u0435 \u0438 \u0443 \u043d\u0430\u0441. \u043d\u0430\u0434\u043e \u043f\u043e\u0447\u0438\u043d\u0438\u0442\u044c \u0438 \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u0441\u043f\u0440\u0438\u043d\u0433\u043e\u0432\u043e\u0435 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u043e\u043d\u043e \u043a\u043b\u0435\u0432\u043e\u0435 (\u0438 \u0440\u0430\u0437\u043d\u043e\u0446\u0432\u0435\u0442\u043d\u043e\u0435)", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1319#discussion_r464001311", "createdAt": "2020-08-01T21:19:53Z", "author": {"login": "nixel2007"}, "path": "src/main/resources/application.properties", "diffHunk": "@@ -1,3 +1,4 @@\n spring.main.web-application-type=none\n spring.main.banner-mode=off\n spring.main.log-startup-info=false\n+logging.level.org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler=warn", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07c5130b9bb74d37364c66623c555452eaaf86c2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAwMjM5OA==", "bodyText": "\u0417\u0430\u043e\u0434\u043d\u043e \u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 --debug \u0432 cli, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043e\u0442\u043b\u0430\u0434\u043e\u0447\u043d\u044b\u0435 \u043b\u043e\u0433\u0438", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1319#discussion_r464002398", "createdAt": "2020-08-01T21:33:53Z", "author": {"login": "nixel2007"}, "path": "src/main/resources/application.properties", "diffHunk": "@@ -1,3 +1,4 @@\n spring.main.web-application-type=none\n spring.main.banner-mode=off\n spring.main.log-startup-info=false\n+logging.level.org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler=warn", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAwMTMxMQ=="}, "originalCommit": {"oid": "07c5130b9bb74d37364c66623c555452eaaf86c2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzQ0MzU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/configuration/watcher/ConfigurationFileSystemWatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQyMTozNTo1M1rOG6geAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQyMTozNTo1M1rOG6geAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAwMjU2MA==", "bodyText": "\u0422\u0443\u0442 \u043f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u043c\u043d\u043e\u0433\u043e\u0440\u0430\u0437\u043e\u0432\u0430\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0438\u0441\u0430. \u042d\u0442\u043e \u0432\u0440\u043e\u0434\u0435 \u043d\u0435 \u0441\u0442\u0440\u0430\u0448\u043d\u043e (\u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437), \u043d\u043e \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u043a\u0440\u0430\u0441\u0438\u0432\u043e + \u0433\u0430\u0434\u0438\u0442 \u0432 \u043b\u043e\u0433. \u042f \u0441\u0434\u0435\u043b\u0430\u043b \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d\u043d\u044b\u0445 Path \u0432 Set, \u043d\u043e \u0437\u0430\u0431\u044b\u043b \u043f\u0443\u0448\u043d\u0443\u0442\u044c. \u0417\u0430\u0432\u0442\u0440\u0430 \u0434\u043e\u043a\u0438\u043d\u0443.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1319#discussion_r464002560", "createdAt": "2020-08-01T21:35:53Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/configuration/watcher/ConfigurationFileSystemWatcher.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.configuration.watcher;\n+\n+import com.github._1c_syntax.bsl.languageserver.configuration.LanguageServerConfiguration;\n+import com.github._1c_syntax.utils.Absolute;\n+import lombok.RequiredArgsConstructor;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Component;\n+\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Path;\n+import java.nio.file.WatchEvent;\n+import java.nio.file.WatchKey;\n+import java.nio.file.WatchService;\n+\n+import static java.nio.file.StandardWatchEventKinds.ENTRY_CREATE;\n+import static java.nio.file.StandardWatchEventKinds.ENTRY_DELETE;\n+import static java.nio.file.StandardWatchEventKinds.ENTRY_MODIFY;\n+\n+@Component\n+@Slf4j\n+@RequiredArgsConstructor\n+public class ConfigurationFileSystemWatcher {\n+\n+  private final LanguageServerConfiguration configuration;\n+  private final ConfigurationFileChangeListener listener;\n+\n+  private WatchService watchService;\n+\n+  @PostConstruct\n+  public void init() throws IOException {\n+    watchService = FileSystems.getDefault().newWatchService();\n+    registerWatchService(configuration.getConfigurationFile());\n+  }\n+\n+  @PreDestroy\n+  public void onDestroy() throws IOException {\n+    watchService.close();\n+  }\n+\n+  @SneakyThrows\n+  @Scheduled(fixedDelay = 5000L)\n+  public void watch() {\n+    WatchKey key;\n+    // save last modified date to de-duplicate events\n+    long lastModified = 0L;\n+    while ((key = watchService.take()) != null) {\n+      for (WatchEvent<?> watchEvent : key.pollEvents()) {\n+        Path context = (Path) watchEvent.context();\n+        if (context == null) {\n+          continue;\n+        }\n+        File file = context.toFile();\n+        if (isConfigurationFile(file) && file.lastModified() != lastModified) {\n+          lastModified = file.lastModified();\n+          listener.onChange(file, watchEvent.kind());\n+        }\n+      }\n+\n+      key.reset();\n+    }\n+  }\n+\n+  @EventListener\n+  public void handleEvent(LanguageServerConfigurationFileChange event) {\n+    registerWatchService(event.getSource());\n+  }\n+\n+  @SneakyThrows\n+  private void registerWatchService(File configurationFile) {\n+    Path configurationDir = Absolute.path(configurationFile).getParent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07c5130b9bb74d37364c66623c555452eaaf86c2"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4666, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}