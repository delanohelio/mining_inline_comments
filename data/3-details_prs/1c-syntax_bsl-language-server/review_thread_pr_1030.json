{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMDA2Nzc4", "number": 1030, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1MDowNVrODw7owA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwOTo0NTo0N1rODzNEYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM1MzI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwOTo1MDowNVrOGEL8gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMTo0NDoyMFrOGEMmZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MzIwMg==", "bodyText": "\u0425\u0430\u0440\u0434\u043a\u043e\u0434.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407043202", "createdAt": "2020-04-11T09:50:05Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.Range;\n+\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic {\n+  private static final Pattern EMPTY_LINES_REGEX = Pattern.compile(\"^(\\\\s*[\\\\n\\\\r]+\\\\s*){2,}\");\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int[] prevLineStorage = {0};\n+    tokens.stream()\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEach(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine > prevLine + 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "affd4cb6a510e1737a0fd97631663c9d66d6b9f5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NTg1Mw==", "bodyText": "\u043f\u043e\u0447\u0435\u043c\u0443? \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a.\n\u044f \u043f\u043e\u043a\u0430 \u043b\u0443\u0447\u0448\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043d\u0435 \u0432\u0438\u0436\u0443 (\n\u0435\u0441\u043b\u0438 \u0432\u0438\u0434\u0438\u0448\u044c, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438 \u0441\u0432\u043e\u0439.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407045853", "createdAt": "2020-04-11T10:18:49Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.Range;\n+\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic {\n+  private static final Pattern EMPTY_LINES_REGEX = Pattern.compile(\"^(\\\\s*[\\\\n\\\\r]+\\\\s*){2,}\");\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int[] prevLineStorage = {0};\n+    tokens.stream()\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEach(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine > prevLine + 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MzIwMg=="}, "originalCommit": {"oid": "affd4cb6a510e1737a0fd97631663c9d66d6b9f5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0Njk1NA==", "bodyText": "\u041f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e 2 \u044d\u0442\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438. \u041c\u043d\u0435 \u0432\u043e\u0442 2 \u043f\u0440\u043e\u0431\u0435\u043b\u0430 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e, \u0430 \u043d\u0430 3\u043c \u043d\u0430\u0434\u043e \u043e\u0440\u0430\u0442\u044c.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407046954", "createdAt": "2020-04-11T10:29:54Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.Range;\n+\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic {\n+  private static final Pattern EMPTY_LINES_REGEX = Pattern.compile(\"^(\\\\s*[\\\\n\\\\r]+\\\\s*){2,}\");\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int[] prevLineStorage = {0};\n+    tokens.stream()\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEach(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine > prevLine + 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MzIwMg=="}, "originalCommit": {"oid": "affd4cb6a510e1737a0fd97631663c9d66d6b9f5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NzI0MQ==", "bodyText": "\u0430\u0433\u0430, \u043f\u0440\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u043b\u043e\u0433\u0438\u0447\u043d\u043e. \u0441\u0434\u0435\u043b\u0430\u044e.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407047241", "createdAt": "2020-04-11T10:33:14Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.Range;\n+\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic {\n+  private static final Pattern EMPTY_LINES_REGEX = Pattern.compile(\"^(\\\\s*[\\\\n\\\\r]+\\\\s*){2,}\");\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int[] prevLineStorage = {0};\n+    tokens.stream()\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEach(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine > prevLine + 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MzIwMg=="}, "originalCommit": {"oid": "affd4cb6a510e1737a0fd97631663c9d66d6b9f5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1MzkyNg==", "bodyText": "\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407053926", "createdAt": "2020-04-11T11:44:20Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.Range;\n+\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic {\n+  private static final Pattern EMPTY_LINES_REGEX = Pattern.compile(\"^(\\\\s*[\\\\n\\\\r]+\\\\s*){2,}\");\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int[] prevLineStorage = {0};\n+    tokens.stream()\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEach(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine > prevLine + 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0MzIwMg=="}, "originalCommit": {"oid": "affd4cb6a510e1737a0fd97631663c9d66d6b9f5"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM2OTA3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDoxMTowNlrOGEMD7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTozOTo0M1rOGEPkxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NTEwMw==", "bodyText": "\u0410 \u0447\u0442\u043e \u043e\u043d\u043e \u0442\u0430\u043c \u043f\u043e\u0439\u043c\u0430\u043b\u043e? \u0422\u0430\u043c \u0436\u0435 \u043e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u043e\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430. \u0418 \u043f\u043e\u043c\u043e\u0435\u043c\u0443 \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u0435 \u043f\u043e\u0432\u0435\u0441\u0438\u0442\u0441\u044f \u043d\u0430 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407045103", "createdAt": "2020-04-11T10:11:06Z", "author": {"login": "asosnoviy"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<ConsecutiveEmptyLinesDiagnostic> {\n+  ConsecutiveEmptyLinesDiagnosticTest() {\n+    super(ConsecutiveEmptyLinesDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test() {\n+\n+    List<Diagnostic> diagnostics = getDiagnostics();\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasRange(6, 0, 7, 0)\n+      .hasRange(11, 0, 12, 0)\n+      .hasRange(15, 0, 16, 0)\n+      .hasRange(18, 0, 19, 0)\n+      .hasRange(23, 0, 24, 0)\n+      .hasRange(27, 0, 28, 0)\n+      .hasRange(30, 0, 31, 0)\n+      .hasRange(34, 0, 35, 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "affd4cb6a510e1737a0fd97631663c9d66d6b9f5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NTUzNw==", "bodyText": "\u043f\u043e\u0447\u0435\u043c\u0443 \u043e\u0434\u043d\u0430?\n\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0438\u0434\u0438\u0442 2 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0430 \u0441\u043a\u0440\u0438\u043d\u0435, \u0432\u0435\u0440\u043d\u043e?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407045537", "createdAt": "2020-04-11T10:15:44Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<ConsecutiveEmptyLinesDiagnostic> {\n+  ConsecutiveEmptyLinesDiagnosticTest() {\n+    super(ConsecutiveEmptyLinesDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test() {\n+\n+    List<Diagnostic> diagnostics = getDiagnostics();\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasRange(6, 0, 7, 0)\n+      .hasRange(11, 0, 12, 0)\n+      .hasRange(15, 0, 16, 0)\n+      .hasRange(18, 0, 19, 0)\n+      .hasRange(23, 0, 24, 0)\n+      .hasRange(27, 0, 28, 0)\n+      .hasRange(30, 0, 31, 0)\n+      .hasRange(34, 0, 35, 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NTEwMw=="}, "originalCommit": {"oid": "affd4cb6a510e1737a0fd97631663c9d66d6b9f5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NjI1NA==", "bodyText": "\u043d\u0443 \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043d\u043e\u043c\u0435\u0440\u0430 \u0441\u0442\u0440\u043e\u043a 34 \u0438 35 \u0432\u0438\u0434\u043d\u044b \u043d\u0430 \u0441\u043a\u0440\u0438\u043d\u0435.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407046254", "createdAt": "2020-04-11T10:22:52Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<ConsecutiveEmptyLinesDiagnostic> {\n+  ConsecutiveEmptyLinesDiagnosticTest() {\n+    super(ConsecutiveEmptyLinesDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test() {\n+\n+    List<Diagnostic> diagnostics = getDiagnostics();\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasRange(6, 0, 7, 0)\n+      .hasRange(11, 0, 12, 0)\n+      .hasRange(15, 0, 16, 0)\n+      .hasRange(18, 0, 19, 0)\n+      .hasRange(23, 0, 24, 0)\n+      .hasRange(27, 0, 28, 0)\n+      .hasRange(30, 0, 31, 0)\n+      .hasRange(34, 0, 35, 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NTEwMw=="}, "originalCommit": {"oid": "affd4cb6a510e1737a0fd97631663c9d66d6b9f5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NjY4NA==", "bodyText": "\u041c\u043e\u0436\u0435\u0442 \u044d\u0442\u043e \u043d\u0430 \u0413\u0425 \u0432\u0438\u0434\u043d\u043e \u043f\u043e \u0434\u0440\u0443\u0433\u043e\u043c\u0443\n\n\u041f\u0440\u043e\u0432\u0435\u0440\u044c \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0430 \u0412\u0421\u0426", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407046684", "createdAt": "2020-04-11T10:27:30Z", "author": {"login": "asosnoviy"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<ConsecutiveEmptyLinesDiagnostic> {\n+  ConsecutiveEmptyLinesDiagnosticTest() {\n+    super(ConsecutiveEmptyLinesDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test() {\n+\n+    List<Diagnostic> diagnostics = getDiagnostics();\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasRange(6, 0, 7, 0)\n+      .hasRange(11, 0, 12, 0)\n+      .hasRange(15, 0, 16, 0)\n+      .hasRange(18, 0, 19, 0)\n+      .hasRange(23, 0, 24, 0)\n+      .hasRange(27, 0, 28, 0)\n+      .hasRange(30, 0, 31, 0)\n+      .hasRange(34, 0, 35, 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NTEwMw=="}, "originalCommit": {"oid": "affd4cb6a510e1737a0fd97631663c9d66d6b9f5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NzIwNQ==", "bodyText": "\u043d\u0430 \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u0435 \u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b, \u043a\u0430\u043a \u0432 \u0418\u0414\u0415\u0410 \u0432\u0438\u0434\u043d\u043e.\n\u043d\u0430 35 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0438\u0434\u0435\u043d \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u0443\u0440\u0441\u043e\u0440.\n\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044e\u0441\u044c - \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432\u0438\u0434\u043d\u044b 2 \u0441\u0442\u0440\u043e\u043a\u0438, \u0447\u0442\u043e \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u043e\u0439 \u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0442\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430.\n\u041f\u0440\u043e\u0432\u0435\u0440\u044c \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0430 \u0412\u0421\u0426 - \u043d\u0435 \u043f\u043e\u043d\u044f\u043b, \u043f\u043e\u044f\u0441\u043d\u0438.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407047205", "createdAt": "2020-04-11T10:32:55Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<ConsecutiveEmptyLinesDiagnostic> {\n+  ConsecutiveEmptyLinesDiagnosticTest() {\n+    super(ConsecutiveEmptyLinesDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test() {\n+\n+    List<Diagnostic> diagnostics = getDiagnostics();\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasRange(6, 0, 7, 0)\n+      .hasRange(11, 0, 12, 0)\n+      .hasRange(15, 0, 16, 0)\n+      .hasRange(18, 0, 19, 0)\n+      .hasRange(23, 0, 24, 0)\n+      .hasRange(27, 0, 28, 0)\n+      .hasRange(30, 0, 31, 0)\n+      .hasRange(34, 0, 35, 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NTEwMw=="}, "originalCommit": {"oid": "affd4cb6a510e1737a0fd97631663c9d66d6b9f5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1Mzk1NQ==", "bodyText": "\u0440\u0435\u0448\u0438\u043b\u0438 \u044d\u0442\u043e \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u0435?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407053955", "createdAt": "2020-04-11T11:44:50Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<ConsecutiveEmptyLinesDiagnostic> {\n+  ConsecutiveEmptyLinesDiagnosticTest() {\n+    super(ConsecutiveEmptyLinesDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test() {\n+\n+    List<Diagnostic> diagnostics = getDiagnostics();\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasRange(6, 0, 7, 0)\n+      .hasRange(11, 0, 12, 0)\n+      .hasRange(15, 0, 16, 0)\n+      .hasRange(18, 0, 19, 0)\n+      .hasRange(23, 0, 24, 0)\n+      .hasRange(27, 0, 28, 0)\n+      .hasRange(30, 0, 31, 0)\n+      .hasRange(34, 0, 35, 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NTEwMw=="}, "originalCommit": {"oid": "affd4cb6a510e1737a0fd97631663c9d66d6b9f5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwMjY2Mw==", "bodyText": "\u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e. \u043f\u0440\u043e\u0432\u0435\u0440\u0435\u043d\u043e \u0432 \u0412\u0421\u0426", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407102663", "createdAt": "2020-04-11T19:39:43Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<ConsecutiveEmptyLinesDiagnostic> {\n+  ConsecutiveEmptyLinesDiagnosticTest() {\n+    super(ConsecutiveEmptyLinesDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test() {\n+\n+    List<Diagnostic> diagnostics = getDiagnostics();\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasRange(6, 0, 7, 0)\n+      .hasRange(11, 0, 12, 0)\n+      .hasRange(15, 0, 16, 0)\n+      .hasRange(18, 0, 19, 0)\n+      .hasRange(23, 0, 24, 0)\n+      .hasRange(27, 0, 28, 0)\n+      .hasRange(30, 0, 31, 0)\n+      .hasRange(34, 0, 35, 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NTEwMw=="}, "originalCommit": {"oid": "affd4cb6a510e1737a0fd97631663c9d66d6b9f5"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjg1MTk3OnYy", "diffSide": "RIGHT", "path": "docs/diagnostics/ConsecutiveEmptyLines.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTo1OTowNVrOGEPsoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMjo1NTowMlrOGEQonw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDY3Mg==", "bodyText": "\u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043d\u043e\u0435 - \u0431\u043e\u043b\u044c\u0448\u0435 2\u0445 \u043c\u043e\u0436\u043d\u043e, \u043c\u0435\u043d\u044c\u0448\u0435 \u043d\u0435\u0442?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407104672", "createdAt": "2020-04-11T19:59:05Z", "author": {"login": "asosnoviy"}, "path": "docs/diagnostics/ConsecutiveEmptyLines.md", "diffHunk": "@@ -0,0 +1,51 @@\n+# \u041f\u043e\u0434\u0440\u044f\u0434 \u0438\u0434\u0443\u0449\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 (ConsecutiveEmptyLines)\n+\n+| \u0422\u0438\u043f | \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f<br/>\u044f\u0437\u044b\u043a\u0438 | \u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c | \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u0430<br/>\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e | \u0412\u0440\u0435\u043c\u044f \u043d\u0430<br/>\u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 (\u043c\u0438\u043d) | \u0422\u044d\u0433\u0438 |\n+| :-: | :-: | :-: | :-: | :-: | :-: |\n+| `\u0414\u0435\u0444\u0435\u043a\u0442 \u043a\u043e\u0434\u0430` | `BSL`<br/>`OS` | `\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439` | `\u0414\u0430` | `1` | `badpractice` |\n+\n+## \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \n+\n+| \u0418\u043c\u044f | \u0422\u0438\u043f | \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 | \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e |\n+| :-: | :-: | :-- | :-: |\n+| `allowedEmptyLinesCount` | `\u0426\u0435\u043b\u043e\u0435` | ```\u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a``` | ```2``` |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyMDAzMQ==", "bodyText": "\u041e\u043f\u0435\u0447\u0430\u0442\u0430\u043b\u0441\u044f. \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044e.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407120031", "createdAt": "2020-04-11T22:55:02Z", "author": {"login": "artbear"}, "path": "docs/diagnostics/ConsecutiveEmptyLines.md", "diffHunk": "@@ -0,0 +1,51 @@\n+# \u041f\u043e\u0434\u0440\u044f\u0434 \u0438\u0434\u0443\u0449\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 (ConsecutiveEmptyLines)\n+\n+| \u0422\u0438\u043f | \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f<br/>\u044f\u0437\u044b\u043a\u0438 | \u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c | \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u0430<br/>\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e | \u0412\u0440\u0435\u043c\u044f \u043d\u0430<br/>\u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 (\u043c\u0438\u043d) | \u0422\u044d\u0433\u0438 |\n+| :-: | :-: | :-: | :-: | :-: | :-: |\n+| `\u0414\u0435\u0444\u0435\u043a\u0442 \u043a\u043e\u0434\u0430` | `BSL`<br/>`OS` | `\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439` | `\u0414\u0430` | `1` | `badpractice` |\n+\n+## \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \n+\n+| \u0418\u043c\u044f | \u0422\u0438\u043f | \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 | \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e |\n+| :-: | :-: | :-- | :-: |\n+| `allowedEmptyLinesCount` | `\u0426\u0435\u043b\u043e\u0435` | ```\u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a``` | ```2``` |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDY3Mg=="}, "originalCommit": {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjg1NDc2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDowMjo0N1rOGEPt7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMjo1NToyMVrOGEQotg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNTAwNw==", "bodyText": "allowedEmptyLinesCount\", 3 - \u043c\u043e\u0436\u043d\u043e 3 \u043f\u043e\u0434\u0440\u044f\u0434, \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435\u0442\n.hasRange(29, 0, 31, 0) - \u0418\u0445 \u0442\u0430\u043c \u0432\u0441\u0435\u0433\u043e 3.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407105007", "createdAt": "2020-04-11T20:02:47Z", "author": {"login": "asosnoviy"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.util.TestUtils;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<ConsecutiveEmptyLinesDiagnostic> {\n+  ConsecutiveEmptyLinesDiagnosticTest() {\n+    super(ConsecutiveEmptyLinesDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test_CRLF_And_Spaces() {\n+    checkModuleText(false);\n+  }\n+\n+  @Test\n+  void test_CR_And_Spaces_And_Tab() {\n+    checkModuleText(true);\n+  }\n+\n+  void checkModuleText(boolean use_CR_WithTab) {\n+\n+    String module = getText();\n+\n+    if (use_CR_WithTab){\n+      module = module.replace(\"\\n\", \"\\r\");\n+      module = module.replace(\"  \", \"\\t\");\n+    }\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 1, 0)\n+      .hasRange(5, 0, 6, 0)\n+      .hasRange(10, 0, 11, 0)\n+      .hasRange(14, 0, 15, 0)\n+      .hasRange(17, 0, 18, 0)\n+      .hasRange(22, 0, 23, 0)\n+      .hasRange(26, 0, 27, 0)\n+      .hasRange(29, 0, 31, 0)\n+      .hasRange(33, 0, 34, 0)\n+      .hasSize(9)\n+    ;\n+\n+  }\n+\n+  @Test\n+  void test_ConfigureEmptyLineParam() {\n+    Map<String, Object> configuration = diagnosticInstance.getInfo().getDefaultConfiguration();\n+    configuration.put(\"allowedEmptyLinesCount\", 3);\n+    diagnosticInstance.configure(configuration);\n+\n+    List<Diagnostic> diagnostics = getDiagnostics();\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(29, 0, 31, 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyMDA1NA==", "bodyText": "\u0434\u0430, \u043e\u0448\u0438\u0431\u043a\u0430 \u0432 \u0442\u0435\u0441\u0442\u0435. \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u044e", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407120054", "createdAt": "2020-04-11T22:55:21Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.util.TestUtils;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<ConsecutiveEmptyLinesDiagnostic> {\n+  ConsecutiveEmptyLinesDiagnosticTest() {\n+    super(ConsecutiveEmptyLinesDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test_CRLF_And_Spaces() {\n+    checkModuleText(false);\n+  }\n+\n+  @Test\n+  void test_CR_And_Spaces_And_Tab() {\n+    checkModuleText(true);\n+  }\n+\n+  void checkModuleText(boolean use_CR_WithTab) {\n+\n+    String module = getText();\n+\n+    if (use_CR_WithTab){\n+      module = module.replace(\"\\n\", \"\\r\");\n+      module = module.replace(\"  \", \"\\t\");\n+    }\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 1, 0)\n+      .hasRange(5, 0, 6, 0)\n+      .hasRange(10, 0, 11, 0)\n+      .hasRange(14, 0, 15, 0)\n+      .hasRange(17, 0, 18, 0)\n+      .hasRange(22, 0, 23, 0)\n+      .hasRange(26, 0, 27, 0)\n+      .hasRange(29, 0, 31, 0)\n+      .hasRange(33, 0, 34, 0)\n+      .hasSize(9)\n+    ;\n+\n+  }\n+\n+  @Test\n+  void test_ConfigureEmptyLineParam() {\n+    Map<String, Object> configuration = diagnosticInstance.getInfo().getDefaultConfiguration();\n+    configuration.put(\"allowedEmptyLinesCount\", 3);\n+    diagnosticInstance.configure(configuration);\n+\n+    List<Diagnostic> diagnostics = getDiagnostics();\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(29, 0, 31, 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNTAwNw=="}, "originalCommit": {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjg3NDIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDoyODozM1rOGEP3Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODoyOTo1M1rOGFDyug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNzQyNg==", "bodyText": "\u041a\u0430\u0436\u0435\u0442\u0441\u044f \u044d\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u043d\u0430\u0434\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043e\u0432.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407107426", "createdAt": "2020-04-11T20:28:33Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+  private static final Pattern DEFAULT_EMPTY_LINES_REGEX = Pattern.compile(\"^(\\\\s*[\\\\n\\\\r]+\\\\s*){2,}\");\n+  private Pattern emptyLinesRegex = DEFAULT_EMPTY_LINES_REGEX;\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 2;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    if (configuration == null){\n+      return;\n+    }\n+    this.allowedEmptyLinesCount = (Integer) configuration.getOrDefault(\"allowedEmptyLinesCount\", allowedEmptyLinesCount);\n+    emptyLinesRegex = Pattern.compile(DEFAULT_EMPTY_LINES_REGEX.pattern()\n+      .replace(\"2\", \"\" + allowedEmptyLinesCount));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExOTI3MA==", "bodyText": "\u043d\u0443\u0436\u043d\u043e \u0434\u043b\u044f \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0439 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043a\u0438.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407119270", "createdAt": "2020-04-11T22:46:24Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+  private static final Pattern DEFAULT_EMPTY_LINES_REGEX = Pattern.compile(\"^(\\\\s*[\\\\n\\\\r]+\\\\s*){2,}\");\n+  private Pattern emptyLinesRegex = DEFAULT_EMPTY_LINES_REGEX;\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 2;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    if (configuration == null){\n+      return;\n+    }\n+    this.allowedEmptyLinesCount = (Integer) configuration.getOrDefault(\"allowedEmptyLinesCount\", allowedEmptyLinesCount);\n+    emptyLinesRegex = Pattern.compile(DEFAULT_EMPTY_LINES_REGEX.pattern()\n+      .replace(\"2\", \"\" + allowedEmptyLinesCount));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNzQyNg=="}, "originalCommit": {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQwMDgyMw==", "bodyText": "\u041a\u0430\u0436\u0435\u0442\u0441\u044f \u044d\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u043d\u0430\u0434\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043e\u0432, \u0442.\u043a. \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435\u0442 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043a\u0438.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407400823", "createdAt": "2020-04-13T09:36:29Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+  private static final Pattern DEFAULT_EMPTY_LINES_REGEX = Pattern.compile(\"^(\\\\s*[\\\\n\\\\r]+\\\\s*){2,}\");\n+  private Pattern emptyLinesRegex = DEFAULT_EMPTY_LINES_REGEX;\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 2;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    if (configuration == null){\n+      return;\n+    }\n+    this.allowedEmptyLinesCount = (Integer) configuration.getOrDefault(\"allowedEmptyLinesCount\", allowedEmptyLinesCount);\n+    emptyLinesRegex = Pattern.compile(DEFAULT_EMPTY_LINES_REGEX.pattern()\n+      .replace(\"2\", \"\" + allowedEmptyLinesCount));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNzQyNg=="}, "originalCommit": {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwMjA5Nw==", "bodyText": "@artbear \u041d\u0443 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0436\u0435.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407702097", "createdAt": "2020-04-13T20:29:53Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+  private static final Pattern DEFAULT_EMPTY_LINES_REGEX = Pattern.compile(\"^(\\\\s*[\\\\n\\\\r]+\\\\s*){2,}\");\n+  private Pattern emptyLinesRegex = DEFAULT_EMPTY_LINES_REGEX;\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 2;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    if (configuration == null){\n+      return;\n+    }\n+    this.allowedEmptyLinesCount = (Integer) configuration.getOrDefault(\"allowedEmptyLinesCount\", allowedEmptyLinesCount);\n+    emptyLinesRegex = Pattern.compile(DEFAULT_EMPTY_LINES_REGEX.pattern()\n+      .replace(\"2\", \"\" + allowedEmptyLinesCount));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNzQyNg=="}, "originalCommit": {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzNDg2Ng==", "bodyText": "\u044d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0435\u0449\u0435 \u0432\u0447\u0435\u0440\u0430 \u0443\u0434\u0430\u043b\u0435\u043d.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407934866", "createdAt": "2020-04-14T07:51:20Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+  private static final Pattern DEFAULT_EMPTY_LINES_REGEX = Pattern.compile(\"^(\\\\s*[\\\\n\\\\r]+\\\\s*){2,}\");\n+  private Pattern emptyLinesRegex = DEFAULT_EMPTY_LINES_REGEX;\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 2;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    if (configuration == null){\n+      return;\n+    }\n+    this.allowedEmptyLinesCount = (Integer) configuration.getOrDefault(\"allowedEmptyLinesCount\", allowedEmptyLinesCount);\n+    emptyLinesRegex = Pattern.compile(DEFAULT_EMPTY_LINES_REGEX.pattern()\n+      .replace(\"2\", \"\" + allowedEmptyLinesCount));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNzQyNg=="}, "originalCommit": {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0MTYzNA==", "bodyText": "\u041d\u0435 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0439 \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u043b\u0437, \u0443\u0441\u0442\u0430\u044e \u043b\u0438\u0441\u0442\u0430\u0442\u044c \u0442\u0443\u0434\u0430 \u0441\u044e\u0434\u0430. \u041d\u0430\u0434\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0435\u0441\u044c \u043c\u0435\u0442\u043e\u0434.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407941634", "createdAt": "2020-04-14T08:02:24Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+  private static final Pattern DEFAULT_EMPTY_LINES_REGEX = Pattern.compile(\"^(\\\\s*[\\\\n\\\\r]+\\\\s*){2,}\");\n+  private Pattern emptyLinesRegex = DEFAULT_EMPTY_LINES_REGEX;\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 2;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    if (configuration == null){\n+      return;\n+    }\n+    this.allowedEmptyLinesCount = (Integer) configuration.getOrDefault(\"allowedEmptyLinesCount\", allowedEmptyLinesCount);\n+    emptyLinesRegex = Pattern.compile(DEFAULT_EMPTY_LINES_REGEX.pattern()\n+      .replace(\"2\", \"\" + allowedEmptyLinesCount));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNzQyNg=="}, "originalCommit": {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1ODIwMg==", "bodyText": "\u0434\u0430, \u043f\u043e\u0447\u0435\u043c\u0443-\u0442\u043e \u0437\u0430\u0431\u044b\u043b \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 (\n\u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0442\u044c \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u044f \u043d\u0435 \u0431\u0443\u0434\u0443,\n\u0442\u044b \u0441\u0430\u043c, \u043f\u043b\u0438\u0437, \u043d\u0435 \u0437\u0430\u0431\u044b\u0432\u0430\u0439 \u0438\u0445 \u0442\u043e\u0433\u0434\u0430 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0442\u044c, \u0435\u0441\u043b\u0438 \u0437\u0430\u043c\u0435\u0447\u0430\u043d\u0438\u0435 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407958202", "createdAt": "2020-04-14T08:29:53Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+  private static final Pattern DEFAULT_EMPTY_LINES_REGEX = Pattern.compile(\"^(\\\\s*[\\\\n\\\\r]+\\\\s*){2,}\");\n+  private Pattern emptyLinesRegex = DEFAULT_EMPTY_LINES_REGEX;\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 2;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    if (configuration == null){\n+      return;\n+    }\n+    this.allowedEmptyLinesCount = (Integer) configuration.getOrDefault(\"allowedEmptyLinesCount\", allowedEmptyLinesCount);\n+    emptyLinesRegex = Pattern.compile(DEFAULT_EMPTY_LINES_REGEX.pattern()\n+      .replace(\"2\", \"\" + allowedEmptyLinesCount));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNzQyNg=="}, "originalCommit": {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjg3OTA0OnYy", "diffSide": "RIGHT", "path": "docs/contributing/DiagnostcAddSettings.md", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDozMzo0NFrOGEP5lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxMDo1MDoxN1rOGEUVvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNzk5MA==", "bodyText": "\u042d\u0442\u043e \u0442\u043e\u0447\u043d\u043e \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 PR", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407107990", "createdAt": "2020-04-11T20:33:44Z", "author": {"login": "asosnoviy"}, "path": "docs/contributing/DiagnostcAddSettings.md", "diffHunk": "@@ -43,12 +43,12 @@\n \n \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u0435\u0441\u0442 \u0434\u043b\u044f \u0441\u043b\u0443\u0447\u0430\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438.  \n \u0422\u0435\u0441\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043e \u0432\u0441\u0435 \u0442\u043e\u0442 \u0436\u0435 \u043a\u043b\u0430\u0441\u0441 \u0442\u0435\u0441\u0442\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 _(\u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438)_. \u0412 \u043d\u0430\u0447\u0430\u043b\u0435 \u0442\u0435\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438, \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b \u043e\u0431\u0449\u0438\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432.  \n-\u0414\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0438\u0437 \u0442\u0435\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u043f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434 `getDefaultDiagnosticConfiguration()` \u0438\u0437 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 `diagnosticInstance.getInfo()`. \u0417\u0430\u0442\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430, \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0443, \u043e\u0431\u0440\u0430\u0442\u0438\u0432\u0448\u0438\u0441\u044c \u043a \u043c\u0435\u0442\u043e\u0434\u0443 `configure`.  \n+\u0414\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0438\u0437 \u0442\u0435\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u043f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434 `getDefaultConfiguration()` \u0438\u0437 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 `diagnosticInstance.getInfo()`. \u0417\u0430\u0442\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430, \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0443, \u043e\u0431\u0440\u0430\u0442\u0438\u0432\u0448\u0438\u0441\u044c \u043a \u043c\u0435\u0442\u043e\u0434\u0443 `configure`.  \n \u041f\u0440\u0438\u043c\u0435\u0440\n \n ```java\n // \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438\n-Map<String, Object> configuration = diagnosticInstance.getInfo().getDefaultDiagnosticConfiguration();\n+Map<String, Object> configuration = diagnosticInstance.getInfo().getDefaultConfiguration();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExOTIzNA==", "bodyText": "\u0438\u0433\u0440\u0430 \"\u0434\u043e\u0441\u0442\u0430\u043d\u044c \u043a\u043e\u043d\u0442\u0440\u0438\u0431\u044c\u044e\u0442\u043e\u0440\u0430\" \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u0442\u0441\u044f?\n\u044d\u0442\u043e \u043a\u043e\u043f\u0435\u0435\u0447\u043d\u043e\u0435 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u043d\u043e\u0441\u0438\u0442\u044c \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u041f\u0420? \u043d\u0443-\u043d\u0443", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407119234", "createdAt": "2020-04-11T22:45:51Z", "author": {"login": "artbear"}, "path": "docs/contributing/DiagnostcAddSettings.md", "diffHunk": "@@ -43,12 +43,12 @@\n \n \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u0435\u0441\u0442 \u0434\u043b\u044f \u0441\u043b\u0443\u0447\u0430\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438.  \n \u0422\u0435\u0441\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043e \u0432\u0441\u0435 \u0442\u043e\u0442 \u0436\u0435 \u043a\u043b\u0430\u0441\u0441 \u0442\u0435\u0441\u0442\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 _(\u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438)_. \u0412 \u043d\u0430\u0447\u0430\u043b\u0435 \u0442\u0435\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438, \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b \u043e\u0431\u0449\u0438\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432.  \n-\u0414\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0438\u0437 \u0442\u0435\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u043f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434 `getDefaultDiagnosticConfiguration()` \u0438\u0437 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 `diagnosticInstance.getInfo()`. \u0417\u0430\u0442\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430, \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0443, \u043e\u0431\u0440\u0430\u0442\u0438\u0432\u0448\u0438\u0441\u044c \u043a \u043c\u0435\u0442\u043e\u0434\u0443 `configure`.  \n+\u0414\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0438\u0437 \u0442\u0435\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u043f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434 `getDefaultConfiguration()` \u0438\u0437 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 `diagnosticInstance.getInfo()`. \u0417\u0430\u0442\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430, \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0443, \u043e\u0431\u0440\u0430\u0442\u0438\u0432\u0448\u0438\u0441\u044c \u043a \u043c\u0435\u0442\u043e\u0434\u0443 `configure`.  \n \u041f\u0440\u0438\u043c\u0435\u0440\n \n ```java\n // \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438\n-Map<String, Object> configuration = diagnosticInstance.getInfo().getDefaultDiagnosticConfiguration();\n+Map<String, Object> configuration = diagnosticInstance.getInfo().getDefaultConfiguration();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNzk5MA=="}, "originalCommit": {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyNjY5Mg==", "bodyText": "\u0414\u0430, \u043d\u0443\u0436\u043d\u043e. \u0421\u0442\u0440\u0430\u043d\u043d\u043e, \u0447\u0442\u043e \u0442\u0435\u0431\u0435 \u044d\u0442\u043e \u043d\u0430\u0434\u043e \u043e\u0431\u044a\u044f\u0441\u043d\u044f\u0442\u044c.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407126692", "createdAt": "2020-04-12T00:24:32Z", "author": {"login": "asosnoviy"}, "path": "docs/contributing/DiagnostcAddSettings.md", "diffHunk": "@@ -43,12 +43,12 @@\n \n \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u0435\u0441\u0442 \u0434\u043b\u044f \u0441\u043b\u0443\u0447\u0430\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438.  \n \u0422\u0435\u0441\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043e \u0432\u0441\u0435 \u0442\u043e\u0442 \u0436\u0435 \u043a\u043b\u0430\u0441\u0441 \u0442\u0435\u0441\u0442\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 _(\u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438)_. \u0412 \u043d\u0430\u0447\u0430\u043b\u0435 \u0442\u0435\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438, \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b \u043e\u0431\u0449\u0438\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432.  \n-\u0414\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0438\u0437 \u0442\u0435\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u043f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434 `getDefaultDiagnosticConfiguration()` \u0438\u0437 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 `diagnosticInstance.getInfo()`. \u0417\u0430\u0442\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430, \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0443, \u043e\u0431\u0440\u0430\u0442\u0438\u0432\u0448\u0438\u0441\u044c \u043a \u043c\u0435\u0442\u043e\u0434\u0443 `configure`.  \n+\u0414\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0438\u0437 \u0442\u0435\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u043f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434 `getDefaultConfiguration()` \u0438\u0437 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 `diagnosticInstance.getInfo()`. \u0417\u0430\u0442\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430, \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0443, \u043e\u0431\u0440\u0430\u0442\u0438\u0432\u0448\u0438\u0441\u044c \u043a \u043c\u0435\u0442\u043e\u0434\u0443 `configure`.  \n \u041f\u0440\u0438\u043c\u0435\u0440\n \n ```java\n // \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438\n-Map<String, Object> configuration = diagnosticInstance.getInfo().getDefaultDiagnosticConfiguration();\n+Map<String, Object> configuration = diagnosticInstance.getInfo().getDefaultConfiguration();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNzk5MA=="}, "originalCommit": {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3MTkxMg==", "bodyText": "\u043d\u0435 \u0441\u043e\u0433\u043b\u0430\u0448\u0443\u0441\u044c.\n\u0435\u0434\u0438\u043d\u0438\u0447\u043d\u043e\u0435 \u041f\u041e\u041f\u0423\u0422\u041d\u041e\u0415 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0432\u044b\u043d\u043e\u0441\u0438\u0442\u044c \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u041f\u0420 - \u044d\u0442\u043e \u043f\u043e\u043b\u043d\u044b\u0439 \u0430\u0445\u0442\u0443\u043d\u0433.\n\u043a\u043e\u043d\u0442\u0440\u0438\u0431\u044c\u044e\u0442\u043e\u0440 \u043f\u0440\u0438\u043d\u043e\u0441\u0438\u0442 \u043f\u043e\u043b\u044c\u0437\u0443, \u043d\u0430\u0448\u0435\u043b, \u0443\u0432\u0438\u0434\u0435\u043b, \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043b, \u0430 \u0435\u0433\u043e \u0437\u0430\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0438\u0442\u044c \u0435\u0449\u0435 \u043a\u0443\u0447\u0443 \u0443\u0441\u0438\u043b\u0438\u0439 - \u043e\u0447\u0435\u043d\u044c \u043d\u0435\u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u0438\u0432\u043d\u043e.\n\u0434\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0439, \u043a\u043e\u043d\u0435\u0447\u043d\u043e, \u043d\u0443\u0436\u0435\u043d \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u041f\u0420, \u043d\u043e \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u044b\u0439 \u0444\u0438\u043a\u0441\n@nixel2007 @theshadowco @otymko \u0447\u0442\u043e \u0441\u043a\u0430\u0436\u0435\u0442\u0435 ?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407171912", "createdAt": "2020-04-12T09:28:38Z", "author": {"login": "artbear"}, "path": "docs/contributing/DiagnostcAddSettings.md", "diffHunk": "@@ -43,12 +43,12 @@\n \n \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u0435\u0441\u0442 \u0434\u043b\u044f \u0441\u043b\u0443\u0447\u0430\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438.  \n \u0422\u0435\u0441\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043e \u0432\u0441\u0435 \u0442\u043e\u0442 \u0436\u0435 \u043a\u043b\u0430\u0441\u0441 \u0442\u0435\u0441\u0442\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 _(\u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438)_. \u0412 \u043d\u0430\u0447\u0430\u043b\u0435 \u0442\u0435\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438, \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b \u043e\u0431\u0449\u0438\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432.  \n-\u0414\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0438\u0437 \u0442\u0435\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u043f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434 `getDefaultDiagnosticConfiguration()` \u0438\u0437 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 `diagnosticInstance.getInfo()`. \u0417\u0430\u0442\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430, \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0443, \u043e\u0431\u0440\u0430\u0442\u0438\u0432\u0448\u0438\u0441\u044c \u043a \u043c\u0435\u0442\u043e\u0434\u0443 `configure`.  \n+\u0414\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0438\u0437 \u0442\u0435\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u043f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434 `getDefaultConfiguration()` \u0438\u0437 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 `diagnosticInstance.getInfo()`. \u0417\u0430\u0442\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430, \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0443, \u043e\u0431\u0440\u0430\u0442\u0438\u0432\u0448\u0438\u0441\u044c \u043a \u043c\u0435\u0442\u043e\u0434\u0443 `configure`.  \n \u041f\u0440\u0438\u043c\u0435\u0440\n \n ```java\n // \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438\n-Map<String, Object> configuration = diagnosticInstance.getInfo().getDefaultDiagnosticConfiguration();\n+Map<String, Object> configuration = diagnosticInstance.getInfo().getDefaultConfiguration();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNzk5MA=="}, "originalCommit": {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3OTk0Mg==", "bodyText": "\u0427\u0435\u0440\u0435\u043f\u0438\u043a\u043d\u0443\u043b \u043a\u043e\u043c\u043c\u0438\u0442 \u0438 \u0432\u043b\u0438\u043b \u0432 \u0434\u0435\u0432\u0435\u043b\u043e\u043f", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407179942", "createdAt": "2020-04-12T10:42:45Z", "author": {"login": "asosnoviy"}, "path": "docs/contributing/DiagnostcAddSettings.md", "diffHunk": "@@ -43,12 +43,12 @@\n \n \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u0435\u0441\u0442 \u0434\u043b\u044f \u0441\u043b\u0443\u0447\u0430\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438.  \n \u0422\u0435\u0441\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043e \u0432\u0441\u0435 \u0442\u043e\u0442 \u0436\u0435 \u043a\u043b\u0430\u0441\u0441 \u0442\u0435\u0441\u0442\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 _(\u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438)_. \u0412 \u043d\u0430\u0447\u0430\u043b\u0435 \u0442\u0435\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438, \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b \u043e\u0431\u0449\u0438\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432.  \n-\u0414\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0438\u0437 \u0442\u0435\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u043f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434 `getDefaultDiagnosticConfiguration()` \u0438\u0437 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 `diagnosticInstance.getInfo()`. \u0417\u0430\u0442\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430, \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0443, \u043e\u0431\u0440\u0430\u0442\u0438\u0432\u0448\u0438\u0441\u044c \u043a \u043c\u0435\u0442\u043e\u0434\u0443 `configure`.  \n+\u0414\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0438\u0437 \u0442\u0435\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u043f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434 `getDefaultConfiguration()` \u0438\u0437 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 `diagnosticInstance.getInfo()`. \u0417\u0430\u0442\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430, \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0443, \u043e\u0431\u0440\u0430\u0442\u0438\u0432\u0448\u0438\u0441\u044c \u043a \u043c\u0435\u0442\u043e\u0434\u0443 `configure`.  \n \u041f\u0440\u0438\u043c\u0435\u0440\n \n ```java\n // \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438\n-Map<String, Object> configuration = diagnosticInstance.getInfo().getDefaultDiagnosticConfiguration();\n+Map<String, Object> configuration = diagnosticInstance.getInfo().getDefaultConfiguration();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNzk5MA=="}, "originalCommit": {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4MDExMQ==", "bodyText": "\u0442\u044b \u0437\u0430\u0431\u044b\u043b, \u0447\u0442\u043e \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0440\u0438\u0431\u044c\u044e\u0442\u043e\u0440\u0430 \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u0432\u0435\u0442\u043a\u0430\u043c \u041d\u0410\u041c\u041d\u041e\u0413\u041e \u0431\u043e\u043b\u044c\u0448\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 (", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407180111", "createdAt": "2020-04-12T10:44:09Z", "author": {"login": "artbear"}, "path": "docs/contributing/DiagnostcAddSettings.md", "diffHunk": "@@ -43,12 +43,12 @@\n \n \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u0435\u0441\u0442 \u0434\u043b\u044f \u0441\u043b\u0443\u0447\u0430\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438.  \n \u0422\u0435\u0441\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043e \u0432\u0441\u0435 \u0442\u043e\u0442 \u0436\u0435 \u043a\u043b\u0430\u0441\u0441 \u0442\u0435\u0441\u0442\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 _(\u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438)_. \u0412 \u043d\u0430\u0447\u0430\u043b\u0435 \u0442\u0435\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438, \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b \u043e\u0431\u0449\u0438\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432.  \n-\u0414\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0438\u0437 \u0442\u0435\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u043f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434 `getDefaultDiagnosticConfiguration()` \u0438\u0437 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 `diagnosticInstance.getInfo()`. \u0417\u0430\u0442\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430, \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0443, \u043e\u0431\u0440\u0430\u0442\u0438\u0432\u0448\u0438\u0441\u044c \u043a \u043c\u0435\u0442\u043e\u0434\u0443 `configure`.  \n+\u0414\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0438\u0437 \u0442\u0435\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u043f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434 `getDefaultConfiguration()` \u0438\u0437 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 `diagnosticInstance.getInfo()`. \u0417\u0430\u0442\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430, \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0443, \u043e\u0431\u0440\u0430\u0442\u0438\u0432\u0448\u0438\u0441\u044c \u043a \u043c\u0435\u0442\u043e\u0434\u0443 `configure`.  \n \u041f\u0440\u0438\u043c\u0435\u0440\n \n ```java\n // \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438\n-Map<String, Object> configuration = diagnosticInstance.getInfo().getDefaultDiagnosticConfiguration();\n+Map<String, Object> configuration = diagnosticInstance.getInfo().getDefaultConfiguration();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNzk5MA=="}, "originalCommit": {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4MDIyMA==", "bodyText": "\u0430\u0433\u0430, \u0443\u0432\u0438\u0434\u0435\u043b, \u0447\u0442\u043e \u0442\u044b \u0432\u043b\u0438\u043b.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407180220", "createdAt": "2020-04-12T10:45:20Z", "author": {"login": "artbear"}, "path": "docs/contributing/DiagnostcAddSettings.md", "diffHunk": "@@ -43,12 +43,12 @@\n \n \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u0435\u0441\u0442 \u0434\u043b\u044f \u0441\u043b\u0443\u0447\u0430\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438.  \n \u0422\u0435\u0441\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043e \u0432\u0441\u0435 \u0442\u043e\u0442 \u0436\u0435 \u043a\u043b\u0430\u0441\u0441 \u0442\u0435\u0441\u0442\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 _(\u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438)_. \u0412 \u043d\u0430\u0447\u0430\u043b\u0435 \u0442\u0435\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438, \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b \u043e\u0431\u0449\u0438\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432.  \n-\u0414\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0438\u0437 \u0442\u0435\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u043f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434 `getDefaultDiagnosticConfiguration()` \u0438\u0437 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 `diagnosticInstance.getInfo()`. \u0417\u0430\u0442\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430, \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0443, \u043e\u0431\u0440\u0430\u0442\u0438\u0432\u0448\u0438\u0441\u044c \u043a \u043c\u0435\u0442\u043e\u0434\u0443 `configure`.  \n+\u0414\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0438\u0437 \u0442\u0435\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u043f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434 `getDefaultConfiguration()` \u0438\u0437 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 `diagnosticInstance.getInfo()`. \u0417\u0430\u0442\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430, \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0443, \u043e\u0431\u0440\u0430\u0442\u0438\u0432\u0448\u0438\u0441\u044c \u043a \u043c\u0435\u0442\u043e\u0434\u0443 `configure`.  \n \u041f\u0440\u0438\u043c\u0435\u0440\n \n ```java\n // \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438\n-Map<String, Object> configuration = diagnosticInstance.getInfo().getDefaultDiagnosticConfiguration();\n+Map<String, Object> configuration = diagnosticInstance.getInfo().getDefaultConfiguration();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNzk5MA=="}, "originalCommit": {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4MDczNQ==", "bodyText": "\u0442\u044b \u0437\u0430\u0431\u044b\u043b, \u0447\u0442\u043e \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0440\u0438\u0431\u044c\u044e\u0442\u043e\u0440\u0430 \u0431\u0435\u0437 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u0432\u0435\u0442\u043a\u0430\u043c \u041d\u0410\u041c\u041d\u041e\u0413\u041e \u0431\u043e\u043b\u044c\u0448\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 (\n\n\u0414\u0443\u043c\u0430\u044e \u0441\u0442\u043e\u043b\u044c\u043a\u043e \u0436\u0435. \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0435\u0442\u043a\u0443, \u0447\u0435\u0440\u0435\u043f\u0438\u043a\u043d\u0443\u0442\u044c, \u043f\u0443\u0448\u043d\u0443\u0442\u044c, \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440. 4 \u043a\u043b\u0438\u043a\u0430 \u0432 \u043a\u0440\u0430\u043a\u0435\u043d\u0435.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407180735", "createdAt": "2020-04-12T10:50:17Z", "author": {"login": "asosnoviy"}, "path": "docs/contributing/DiagnostcAddSettings.md", "diffHunk": "@@ -43,12 +43,12 @@\n \n \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u0435\u0441\u0442 \u0434\u043b\u044f \u0441\u043b\u0443\u0447\u0430\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438.  \n \u0422\u0435\u0441\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043e \u0432\u0441\u0435 \u0442\u043e\u0442 \u0436\u0435 \u043a\u043b\u0430\u0441\u0441 \u0442\u0435\u0441\u0442\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 _(\u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438)_. \u0412 \u043d\u0430\u0447\u0430\u043b\u0435 \u0442\u0435\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438, \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b \u043e\u0431\u0449\u0438\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0442\u0435\u0441\u0442\u043e\u0432.  \n-\u0414\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0438\u0437 \u0442\u0435\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u043f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434 `getDefaultDiagnosticConfiguration()` \u0438\u0437 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 `diagnosticInstance.getInfo()`. \u0417\u0430\u0442\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430, \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0443, \u043e\u0431\u0440\u0430\u0442\u0438\u0432\u0448\u0438\u0441\u044c \u043a \u043c\u0435\u0442\u043e\u0434\u0443 `configure`.  \n+\u0414\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0438\u0437 \u0442\u0435\u0441\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u043f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434 `getDefaultConfiguration()` \u0438\u0437 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 `diagnosticInstance.getInfo()`. \u0417\u0430\u0442\u0435\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430, \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0443, \u043e\u0431\u0440\u0430\u0442\u0438\u0432\u0448\u0438\u0441\u044c \u043a \u043c\u0435\u0442\u043e\u0434\u0443 `configure`.  \n \u041f\u0440\u0438\u043c\u0435\u0440\n \n ```java\n // \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438\n-Map<String, Object> configuration = diagnosticInstance.getInfo().getDefaultDiagnosticConfiguration();\n+Map<String, Object> configuration = diagnosticInstance.getInfo().getDefaultConfiguration();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNzk5MA=="}, "originalCommit": {"oid": "b2a0ce520b41cdf56e65a8d4083fceed02f94fe8"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzA1NjA0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java", "isResolved": true, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwMDo1NDo1MVrOGERLIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwOToyMDozNVrOGEhbKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODg2Nw==", "bodyText": "https://t.me/bsl_language_server/38546", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407128867", "createdAt": "2020-04-12T00:54:51Z", "author": {"login": "asosnoviy"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java", "diffHunk": "@@ -62,6 +62,11 @@\n     return getDiagnostics(documentContext);\n   }\n \n+  protected List<Diagnostic> getDiagnosticsForText(String textDocumentContent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0bdb686770302deafdb1172c7831bbfa38dc8fd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3MTU4Ng==", "bodyText": "\u044f \u043f\u043e\u044f\u0441\u043d\u044f\u043b \u043f\u0440\u0438\u0447\u0438\u043d\u044b, \u043f\u043e\u0447\u0435\u043c\u0443 \u043d\u0443\u0436\u0435\u043d \u043e\u0434\u0438\u043d \u043c\u0435\u0442\u043e\u0434 \u0432\u043c\u0435\u0441\u0442\u043e 2\u0445 \u0441\u0442\u0440\u043e\u043a \u043a\u043e\u0434\u0430.\n\u0447\u0442\u043e\u0431\u044b \u0432 \u041a\u0410\u0416\u0414\u041e\u041c \u0442\u0435\u0441\u0442\u0435 \u043d\u0435 \u043f\u0440\u0438\u0448\u043b\u043e\u0441\u044c \u043f\u0438\u0441\u0430\u0442\u044c \u044d\u0442\u0438 \u0414\u0412\u0415 \u0441\u0442\u0440\u043e\u0447\u043a\u0438 \u043a\u043e\u0434\u0430.\n\u0410 \u043c\u043d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432\u0441\u0435\u0433\u043e \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443 \u043a\u043e\u0434\u0430 \u0437\u0430 \u0441\u0447\u0435\u0442 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0442\u0435\u0441\u0442\u043e\u0432, \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043e\u0431\u043e\u0439\u0442\u0438\u0441\u044c \u043e\u0434\u043d\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u043c \u0444\u0430\u0439\u043b\u043e\u043c \u0438 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0442\u044c \u0438\u0437 \u043d\u0435\u0433\u043e \u043d\u0443\u0436\u043d\u044b\u0435 \u043a\u0435\u0439\u0441\u044b.\n\u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 - \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0437\u043b\u043e. \u0414\u0430\u0436\u0435 \u0432\u0441\u0435\u0433\u043e \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u0447\u043a\u0438.\n\u0434\u043b\u044f \u043c\u0435\u043d\u044f \u044d\u0442\u043e \u0430\u0437\u044b \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u0434\u0430.\n@nixel2007 \u0440\u0435\u0448\u0430\u0439", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407171586", "createdAt": "2020-04-12T09:25:30Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java", "diffHunk": "@@ -62,6 +62,11 @@\n     return getDiagnostics(documentContext);\n   }\n \n+  protected List<Diagnostic> getDiagnosticsForText(String textDocumentContent) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODg2Nw=="}, "originalCommit": {"oid": "b0bdb686770302deafdb1172c7831bbfa38dc8fd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3ODY3Nw==", "bodyText": "\"\u0432 \u041a\u0410\u0416\u0414\u041e\u041c\" - \u042d\u0442\u043e \u0432 \u043e\u0434\u043d\u043e\u043c.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407178677", "createdAt": "2020-04-12T10:30:15Z", "author": {"login": "asosnoviy"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java", "diffHunk": "@@ -62,6 +62,11 @@\n     return getDiagnostics(documentContext);\n   }\n \n+  protected List<Diagnostic> getDiagnosticsForText(String textDocumentContent) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODg2Nw=="}, "originalCommit": {"oid": "b0bdb686770302deafdb1172c7831bbfa38dc8fd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4MjkzNw==", "bodyText": "\u043f\u043e\u0434\u0443\u043c\u0430\u0439 \u0434\u0430\u043b\u044c\u0448\u0435, \u043d\u0435 \u0446\u0438\u043a\u043b\u0438\u0441\u044c \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435.\n\u0435\u0441\u043b\u0438 \u044e\u0437\u0430\u0442\u044c \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0435 \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u044b \u0441 \u0442\u0435\u0441\u0442-\u043a\u0435\u0439\u0441\u0430\u043c\u0438 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a, \u0431\u0435\u0437 \u0444\u0430\u0439\u043b\u043e\u0432, \u043f\u043e\u043b\u0443\u0447\u0438\u043c\n\u043a\u0443\u0447\u0443 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0430\n\u043f\u0441\u0435\u0432\u0434\u043e\u043a\u043e\u0434:\n\n\u0441\u0442\u0440\u043e\u043a\u0430 = \"\u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043c\u043e\u0434\u0443\u043b\u044c\"\n\u0434\u043e\u043f.\u0441\u0442\u0440\u043e\u043a\u0430 - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\n\u0434\u043e\u043f.\u0441\u0442\u0440\u043e\u043a\u0430 - \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\n\u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0430\u0441\u0441\u0435\u0440\u0442\u044b\n\n\u0432 \u041a\u0410\u0416\u0414\u041e\u041c \u0442\u0435\u0441\u0442\u0435 \u0431\u0443\u0434\u0435\u0442 \u0442\u0430\u043a.\n\u0438 \u0437\u0430\u0447\u0435\u043c \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0440\u0430\u0437\u0434\u0443\u0432\u0430\u0442\u044c \u043a\u043e\u0434 \u0442\u0435\u0441\u0442\u043e\u0432? \u0435\u0441\u043b\u0438 \u043c\u043e\u0436\u043d\u043e \u0445\u043e\u0442\u044f \u0431\u044b \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0438\u0445 \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u0442\u044c?\n\u0443 \u043c\u0435\u043d\u044f \u0435\u0441\u0442\u044c \u043e\u043f\u044b\u0442 \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0433\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043c\u0435\u043b\u043a\u0438\u0445 \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u043e\u0432 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0439,\n\u043e\u0447\u0435\u043d\u044c \u0443\u0434\u043e\u0431\u043d\u043e \u043d\u0435 \u0440\u0430\u0437\u0434\u0443\u0432\u0430\u0442\u044c \u043a\u043e\u0434 \u0442\u0435\u0441\u0442\u043e\u0432,\n\u0430 \u043f\u0438\u0441\u0430\u0442\u044c \u0438\u0445, \u0432\u044b\u0434\u0435\u043b\u044f\u044f \u043e\u0431\u0449\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432 \u043c\u0435\u0442\u043e\u0434\u044b-\u0445\u0435\u043b\u043f\u0435\u0440\u044b, \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u044f \u0447\u0438\u0442\u0430\u0431\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u0442\u0435\u0441\u0442\u043e\u0432", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407182937", "createdAt": "2020-04-12T11:12:07Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java", "diffHunk": "@@ -62,6 +62,11 @@\n     return getDiagnostics(documentContext);\n   }\n \n+  protected List<Diagnostic> getDiagnosticsForText(String textDocumentContent) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODg2Nw=="}, "originalCommit": {"oid": "b0bdb686770302deafdb1172c7831bbfa38dc8fd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4MzQ5Ng==", "bodyText": "\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u044c \u0412\u042b\u0414\u0415\u041b\u042f\u0422\u042c \u0441\u043b\u043e\u0432\u0430, \u0447\u0438\u0442\u0430\u0442\u044c \u0443\u043c\u0435\u0435\u043c. \u0410 \u043f\u043e \u043f\u043e\u0432\u043e\u0434\u0439 \u0440\u0430\u0437\u0434\u0443\u0432\u0430\u043d\u0438\u044f \u0438 \u0445\u0435\u043b\u043f\u0435\u0440\u043e\u0432, \u043d\u0435 \u043d\u0430\u0434\u043e \u043f\u043b\u043e\u0434\u0438\u0442\u044c \u0445\u0435\u043b\u043f\u0435\u0440\u044b \u0431\u0435\u0437 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438. \u0425\u043e\u0440\u043e\u0448\u0435\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u043e 3\u0445 \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439. \u041a\u043e\u0433\u0434\u0430 \u0442\u0440\u0438 \u0442\u0435\u0441\u0442\u0430 \u0431\u0443\u0434\u0435\u0442, \u0442\u043e\u0433\u0434\u0430 \u0438 \u043d\u0443\u0436\u043d\u044b \u0442\u0432\u043e\u0438 \u0445\u0435\u043b\u043f\u0435\u0440\u044b. \u0418 \u043a\u0430\u043a  \u0441\u043a\u0430\u0437\u0430\u043b\u0438 \u0432 \u0442\u0435\u043b\u0435\u0433\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c \u041f\u0420 \u0441 \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0435\u043c.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407183496", "createdAt": "2020-04-12T11:17:27Z", "author": {"login": "asosnoviy"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java", "diffHunk": "@@ -62,6 +62,11 @@\n     return getDiagnostics(documentContext);\n   }\n \n+  protected List<Diagnostic> getDiagnosticsForText(String textDocumentContent) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODg2Nw=="}, "originalCommit": {"oid": "b0bdb686770302deafdb1172c7831bbfa38dc8fd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE5MTA1Ng==", "bodyText": "\u0441\u0434\u0435\u043b\u0430\u043b \u043a\u043e\u043c\u043c\u0438\u0442 \u0441 \u043c\u0435\u043b\u043a\u0438\u043c\u0438 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c\u0438 \u0442\u0435\u0441\u0442-\u043a\u0435\u0439\u0441\u0430\u043c\u0438.\n13 \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u043e\u0432 \u0432\u043c\u0435\u0441\u0442\u043e \u0440\u0430\u043d\u043d\u0438\u0445 4\n\u0438 \u0432\u043e\u0442 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u044c, \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437 \u043d\u0438\u0445 \u043f\u0438\u0441\u0430\u0442\u044c \u044d\u0442\u0438 \u0434\u0443\u0431\u043b\u0438?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407191056", "createdAt": "2020-04-12T12:25:51Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java", "diffHunk": "@@ -62,6 +62,11 @@\n     return getDiagnostics(documentContext);\n   }\n \n+  protected List<Diagnostic> getDiagnosticsForText(String textDocumentContent) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODg2Nw=="}, "originalCommit": {"oid": "b0bdb686770302deafdb1172c7831bbfa38dc8fd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE5MTEzOQ==", "bodyText": "\u0437\u0430\u043e\u0434\u043d\u043e \u043c\u0435\u043b\u043a\u0438\u0435 \u0442\u0435\u0441\u0442\u044b \u043f\u043e\u043c\u043e\u0433\u043b\u0438 \u043d\u0430\u0439\u0442\u0438 \u0432\u043d\u0435\u0441\u0435\u043d\u043d\u0443\u044e \u043e\u0448\u0438\u0431\u043a\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u044f \u043f\u0440\u043e\u043f\u0443\u0441\u0442\u0438\u043b, \u0438\u043c\u0435\u044f \u043b\u0438\u0448\u044c \u043e\u0431\u0449\u0438\u0439 \u043d\u0430\u0431\u043e\u0440 \u043a\u0435\u0439\u0441\u043e\u0432 )", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407191139", "createdAt": "2020-04-12T12:26:40Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java", "diffHunk": "@@ -62,6 +62,11 @@\n     return getDiagnostics(documentContext);\n   }\n \n+  protected List<Diagnostic> getDiagnosticsForText(String textDocumentContent) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODg2Nw=="}, "originalCommit": {"oid": "b0bdb686770302deafdb1172c7831bbfa38dc8fd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE5MTQ3Mw==", "bodyText": "\u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u0432\u0441\u0435-\u0442\u0430\u043a\u0438 \u043d\u0443\u0436\u0435\u043d \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u041f\u0420 ?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407191473", "createdAt": "2020-04-12T12:29:19Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java", "diffHunk": "@@ -62,6 +62,11 @@\n     return getDiagnostics(documentContext);\n   }\n \n+  protected List<Diagnostic> getDiagnosticsForText(String textDocumentContent) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODg2Nw=="}, "originalCommit": {"oid": "b0bdb686770302deafdb1172c7831bbfa38dc8fd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI0NjA3Nw==", "bodyText": "\u041d\u0443 \u0442\u044b \u0438 \u0443\u043f\u0435\u0440\u0442\u044b\u0439. \u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0438 \u043c\u0435\u0442\u043e\u0434 \u0438\u0437 \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u043e\u0433\u043e \u0432 \u0441\u0432\u043e\u0439 \u0442\u0435\u0441\u0442. \u041f\u043e \u043c\u043d\u0435, \u0442\u0430\u043a \u0440\u0430\u0437\u043d\u0438\u0446\u044b 0, \u0447\u0442\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u0430\u0445, \u0447\u0442\u043e \u0442\u0435\u043a\u0441\u0442\u043e\u043c. \u0422\u043e\u043b\u044c\u043a\u043e \u0444\u0430\u0439\u043b \u044f \u0435\u0449\u0435 \u043c\u043e\u0433\u0443 \u0412\u0421\u0426 \u043e\u0439 \u043e\u0442\u043a\u0440\u044b\u0442\u044c.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407246077", "createdAt": "2020-04-12T20:06:23Z", "author": {"login": "asosnoviy"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java", "diffHunk": "@@ -62,6 +62,11 @@\n     return getDiagnostics(documentContext);\n   }\n \n+  protected List<Diagnostic> getDiagnosticsForText(String textDocumentContent) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODg2Nw=="}, "originalCommit": {"oid": "b0bdb686770302deafdb1172c7831bbfa38dc8fd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM5NTExMg==", "bodyText": "\u043f\u0435\u0440\u0435\u043d\u0435\u0441 \u0432 \u0441\u0432\u043e\u0439 \u043a\u043b\u0430\u0441\u0441.\n\u043c\u0435\u043b\u043a\u0438\u0435 \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u044b \u0443\u0434\u043e\u0431\u043d\u044b \u043f\u0440\u0438 \u0422\u0414\u0414 \u0438 \u043f\u0440\u0438 \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u043a\u0430\u0445.\n\u0441\u0440\u0430\u0437\u0443 \u0432\u0438\u0434\u043d\u043e, \u043a\u0430\u043a\u043e\u0439 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439 \u043f\u0430\u0434\u0430\u0435\u0442.\n\u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442\u0441\u044f \u0438 \u0443\u0441\u043a\u043e\u0440\u044f\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407395112", "createdAt": "2020-04-13T09:20:35Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java", "diffHunk": "@@ -62,6 +62,11 @@\n     return getDiagnostics(documentContext);\n   }\n \n+  protected List<Diagnostic> getDiagnosticsForText(String textDocumentContent) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODg2Nw=="}, "originalCommit": {"oid": "b0bdb686770302deafdb1172c7831bbfa38dc8fd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzA1NjQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/DocumentContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwMDo1NTo0MFrOGERLXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxMjo0NzowMlrOGEVHbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODkyNQ==", "bodyText": "\u0411\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407128925", "createdAt": "2020-04-12T00:55:40Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/DocumentContext.java", "diffHunk": "@@ -98,6 +98,8 @@ public String getContent() {\n   }\n \n   public String[] getContentList() {\n+    // \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 - \u0432 DocumentContext.contentList \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0444\u0430\u0439\u043b\u0435\n+    // \u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c ConsecutiveEmptyLinesDiagnostic - \u043c\u0435\u0442\u043e\u0434 getQuickFixes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0bdb686770302deafdb1172c7831bbfa38dc8fd"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE5MzQ1NQ==", "bodyText": "\u0443\u0434\u0430\u043b\u0438\u043b, \u0442\u043a.. \u0437\u0430\u0432\u0435\u043b \u0438\u0448\u0443\u0437", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407193455", "createdAt": "2020-04-12T12:47:02Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/context/DocumentContext.java", "diffHunk": "@@ -98,6 +98,8 @@ public String getContent() {\n   }\n \n   public String[] getContentList() {\n+    // \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 - \u0432 DocumentContext.contentList \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0444\u0430\u0439\u043b\u0435\n+    // \u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c ConsecutiveEmptyLinesDiagnostic - \u043c\u0435\u0442\u043e\u0434 getQuickFixes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODkyNQ=="}, "originalCommit": {"oid": "b0bdb686770302deafdb1172c7831bbfa38dc8fd"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzk5Nzc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQyMDowOToxM1rOGEYWPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwOToxOTozN1rOGEhZmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI0NjM5OQ==", "bodyText": "\u0412\u0441\u0435 \u0435\u0449\u0435 \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u044e \u0437\u0430\u0447\u0435\u043c \u0442\u0443\u0442 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043a\u0430. \u041f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u044e \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 \u043d\u0435\u0435.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407246399", "createdAt": "2020-04-12T20:09:13Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+  private static final Pattern DEFAULT_EMPTY_LINES_REGEX = Pattern.compile(\"^(\\\\s*[\\\\n\\\\r]+\\\\s*){2,}\");\n+  private Pattern emptyLinesRegex = DEFAULT_EMPTY_LINES_REGEX;\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    if (configuration == null){\n+      return;\n+    }\n+    super.configure(configuration);\n+    this.allowedEmptyLinesCount = (Integer) configuration.getOrDefault(\"allowedEmptyLinesCount\", allowedEmptyLinesCount);\n+    emptyLinesRegex = Pattern.compile(DEFAULT_EMPTY_LINES_REGEX.pattern()\n+      .replace(\"2\", \"\" + (allowedEmptyLinesCount + 1)));\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    tokens.stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    checkLastToken(tokens, prevLineStorage[0], documentContext);\n+  }\n+\n+  private void checkLastToken(List<Token> tokens, int prevLine, DocumentContext documentContext) {\n+    // \u0435\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043f\u0430\u0440\u0441\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d \u0441 \u0442\u0435\u043c \u0436\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438,\n+    // \u0447\u0442\u043e \u0438 \u0442\u043e\u043a\u0435\u043d, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432. \u0432 \u0442\u0435\u0441\u0442\u0435 \u044d\u0442\u043e\u0442 \u043a\u0435\u0439\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f.\n+    final var lastIndex = tokens.size() - 1;\n+    if (isOnlyWhiteSpacesLines(tokens.get(lastIndex))) {\n+      var eofToken = documentContext.getTokens().get(documentContext.getTokens().size() - 1).getTokenSource().nextToken();\n+      addIssue(prevLine, eofToken.getLine());\n+    }\n+  }\n+\n+  private boolean isOnlyWhiteSpacesLines(Token token) {\n+    return isWhiteSpace(token)\n+      && emptyLinesRegex.matcher(token.getText()).matches();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4435d4bd3bafed4f90a3b4f0459958f76522b7bf"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM5NDcxNA==", "bodyText": "\u0434\u0430, \u043d\u0435 \u043d\u0443\u0436\u043d\u0430. \u0443\u0431\u0440\u0430\u043b", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407394714", "createdAt": "2020-04-13T09:19:37Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+  private static final Pattern DEFAULT_EMPTY_LINES_REGEX = Pattern.compile(\"^(\\\\s*[\\\\n\\\\r]+\\\\s*){2,}\");\n+  private Pattern emptyLinesRegex = DEFAULT_EMPTY_LINES_REGEX;\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    if (configuration == null){\n+      return;\n+    }\n+    super.configure(configuration);\n+    this.allowedEmptyLinesCount = (Integer) configuration.getOrDefault(\"allowedEmptyLinesCount\", allowedEmptyLinesCount);\n+    emptyLinesRegex = Pattern.compile(DEFAULT_EMPTY_LINES_REGEX.pattern()\n+      .replace(\"2\", \"\" + (allowedEmptyLinesCount + 1)));\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    tokens.stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    checkLastToken(tokens, prevLineStorage[0], documentContext);\n+  }\n+\n+  private void checkLastToken(List<Token> tokens, int prevLine, DocumentContext documentContext) {\n+    // \u0435\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043f\u0430\u0440\u0441\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d \u0441 \u0442\u0435\u043c \u0436\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438,\n+    // \u0447\u0442\u043e \u0438 \u0442\u043e\u043a\u0435\u043d, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432. \u0432 \u0442\u0435\u0441\u0442\u0435 \u044d\u0442\u043e\u0442 \u043a\u0435\u0439\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f.\n+    final var lastIndex = tokens.size() - 1;\n+    if (isOnlyWhiteSpacesLines(tokens.get(lastIndex))) {\n+      var eofToken = documentContext.getTokens().get(documentContext.getTokens().size() - 1).getTokenSource().nextToken();\n+      addIssue(prevLine, eofToken.getLine());\n+    }\n+  }\n+\n+  private boolean isOnlyWhiteSpacesLines(Token token) {\n+    return isWhiteSpace(token)\n+      && emptyLinesRegex.matcher(token.getText()).matches();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI0NjM5OQ=="}, "originalCommit": {"oid": "4435d4bd3bafed4f90a3b4f0459958f76522b7bf"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTA4NTIzOnYy", "diffSide": "RIGHT", "path": ".editorconfig", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwOTozNDo0MlrOGEhvLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDowNzowNVrOGFe8rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQwMDIzNg==", "bodyText": "\u041c\u043d\u0435 \u043f\u0440\u0430\u0432\u0434\u0430 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e \u0447\u0442\u043e \u044d\u0442\u043e? \u0418 \u0434\u043b\u044f \u0447\u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407400236", "createdAt": "2020-04-13T09:34:42Z", "author": {"login": "asosnoviy"}, "path": ".editorconfig", "diffHunk": "@@ -2,3 +2,5 @@\n trim_trailing_whitespace = false\n [src/test/resources/providers/format.bsl]\n trim_trailing_whitespace = false\n+[src/test/resources/diagnostics/ConsecutiveEmptyLinesDiagnostic.bsl]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQyMjM0MA==", "bodyText": "\u0431\u0435\u0437 \u044d\u0442\u043e\u0433\u043e \u043e\u0431\u0440\u0435\u0437\u0430\u043b\u0438\u0441\u044c \u043f\u0440\u043e\u0431\u0435\u043b\u044b \u043d\u0430 \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445.\n\u0430 \u044d\u0442\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0439 \u043a\u0435\u0439\u0441 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407422340", "createdAt": "2020-04-13T10:42:25Z", "author": {"login": "artbear"}, "path": ".editorconfig", "diffHunk": "@@ -2,3 +2,5 @@\n trim_trailing_whitespace = false\n [src/test/resources/providers/format.bsl]\n trim_trailing_whitespace = false\n+[src/test/resources/diagnostics/ConsecutiveEmptyLinesDiagnostic.bsl]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQwMDIzNg=="}, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NTMyMg==", "bodyText": "\u0410 \u043a\u0430\u043a\u0430\u044f \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u0431\u0435\u043b\u044b \u0432 \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0438\u043b\u0438 \u043d\u0435\u0442 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432 \u0432 \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a\u0430\u0445?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407745322", "createdAt": "2020-04-13T21:58:00Z", "author": {"login": "asosnoviy"}, "path": ".editorconfig", "diffHunk": "@@ -2,3 +2,5 @@\n trim_trailing_whitespace = false\n [src/test/resources/providers/format.bsl]\n trim_trailing_whitespace = false\n+[src/test/resources/diagnostics/ConsecutiveEmptyLinesDiagnostic.bsl]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQwMDIzNg=="}, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzNTM0Ng==", "bodyText": "\u0442\u0430\u043a\u0438\u0435 \u0442\u0435\u0441\u0442-\u043a\u0435\u0439\u0441\u044b \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 \u0447\u0435\u0440\u043d\u044b\u043c \u044f\u0449\u0438\u043a\u043e\u043c.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407935346", "createdAt": "2020-04-14T07:52:10Z", "author": {"login": "artbear"}, "path": ".editorconfig", "diffHunk": "@@ -2,3 +2,5 @@\n trim_trailing_whitespace = false\n [src/test/resources/providers/format.bsl]\n trim_trailing_whitespace = false\n+[src/test/resources/diagnostics/ConsecutiveEmptyLinesDiagnostic.bsl]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQwMDIzNg=="}, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzNzkxOQ==", "bodyText": "\u0422\u043e \u0435\u0441\u0442\u044c \u0435\u0441\u043b\u0438 \u0443\u0431\u0440\u0430\u0442\u044c \u0442\u0435\u0441\u0442\u044b \u0443\u043f\u0430\u0434\u0443\u0442?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407937919", "createdAt": "2020-04-14T07:56:25Z", "author": {"login": "asosnoviy"}, "path": ".editorconfig", "diffHunk": "@@ -2,3 +2,5 @@\n trim_trailing_whitespace = false\n [src/test/resources/providers/format.bsl]\n trim_trailing_whitespace = false\n+[src/test/resources/diagnostics/ConsecutiveEmptyLinesDiagnostic.bsl]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQwMDIzNg=="}, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwMzExOQ==", "bodyText": "\u0443\u0431\u0440\u0430\u043b", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408403119", "createdAt": "2020-04-14T20:07:05Z", "author": {"login": "artbear"}, "path": ".editorconfig", "diffHunk": "@@ -2,3 +2,5 @@\n trim_trailing_whitespace = false\n [src/test/resources/providers/format.bsl]\n trim_trailing_whitespace = false\n+[src/test/resources/diagnostics/ConsecutiveEmptyLinesDiagnostic.bsl]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQwMDIzNg=="}, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTE1NDU5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMDowNjowN1rOGEiYtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjo0MDoyN1rOGFMpvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQxMDg2OA==", "bodyText": "\u0414\u0430\u0432\u0430\u0439 \u0432\u043e\u0442 \u044d\u0442\u043e \u0432\u0441\u0435 \u0442\u043e\u0436\u0435, \u043f\u043e\u043a\u0430 \u0432 \u0442\u0435\u0441\u0442, \u0447\u0442\u043e\u0431\u044b \u0432 \u041f\u0420 \u0431\u044b\u043b\u0430 \u0438\u043c\u0435\u043d\u043d\u043e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0430.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407410868", "createdAt": "2020-04-13T10:06:07Z", "author": {"login": "asosnoviy"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java", "diffHunk": "@@ -101,14 +101,23 @@ protected DocumentContext getDocumentContext() {\n \n   @SneakyThrows\n   protected DocumentContext getDocumentContext(String SimpleFileName) {\n+    String textDocumentContent = getText(SimpleFileName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQyMzIyNw==", "bodyText": "\u044d\u0442\u043e \u0436\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u0438 \u0432\u0441\u0435. \u0437\u0430\u0447\u0435\u043c \u044d\u0442\u043e \u0443\u0434\u0430\u043b\u044f\u0442\u044c??", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407423227", "createdAt": "2020-04-13T10:45:14Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java", "diffHunk": "@@ -101,14 +101,23 @@ protected DocumentContext getDocumentContext() {\n \n   @SneakyThrows\n   protected DocumentContext getDocumentContext(String SimpleFileName) {\n+    String textDocumentContent = getText(SimpleFileName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQxMDg2OA=="}, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQyMzQ5Mw==", "bodyText": "\u044f \u0438\u0437\u0431\u0430\u0432\u0438\u043b\u0441\u044f \u043e\u0442 \u0434\u0443\u0431\u043b\u0435\u0439 \u043a\u043e\u0434\u0430 \u0438 \u0432\u044b\u0434\u0435\u043b\u0438\u043b \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u0438", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407423493", "createdAt": "2020-04-13T10:46:14Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java", "diffHunk": "@@ -101,14 +101,23 @@ protected DocumentContext getDocumentContext() {\n \n   @SneakyThrows\n   protected DocumentContext getDocumentContext(String SimpleFileName) {\n+    String textDocumentContent = getText(SimpleFileName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQxMDg2OA=="}, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwMjU3Mg==", "bodyText": "\u0447\u0442\u043e\u0431\u044b \u0432 \u041f\u0420 \u0431\u044b\u043b\u0430 \u0438\u043c\u0435\u043d\u043d\u043e \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0430.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407702572", "createdAt": "2020-04-13T20:30:43Z", "author": {"login": "asosnoviy"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java", "diffHunk": "@@ -101,14 +101,23 @@ protected DocumentContext getDocumentContext() {\n \n   @SneakyThrows\n   protected DocumentContext getDocumentContext(String SimpleFileName) {\n+    String textDocumentContent = getText(SimpleFileName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQxMDg2OA=="}, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk2MjY2MA==", "bodyText": "\u0432\u043e\u0442 \u0441\u0435\u0439\u0447\u0430\u0441 \u044f \u0432\u044b\u044f\u0441\u043d\u0438\u043b, \u0447\u0442\u043e\n1 \u043c\u0435\u0442\u043e\u0434\u044b AbstractDiagnosticTest::getQuickFixes \u043d\u0435 \u0443\u043c\u0435\u044e\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u043c documentContext, \u0430 \u0443\u043c\u0435\u044e\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0442\u044c \u0435\u0433\u043e \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438, \u0434\u0430\u043b\u0435\u0435 \u0438\u043c\u0435\u043d\u0438 \u0442\u0435\u0441\u0442-\u0444\u0430\u0439\u043b\u0430 \u0438 \u0442.\u043f.\n\n\u043a\u043e\u0434 \u043d\u0438\u0436\u0435\n\n2 \u0430 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043c\u0435\u0442\u043e\u0434 AbstractDiagnosticTest::getQuickFixes, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0437 \u043d\u0438\u0445 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u043c (\n\nprivate List<CodeAction> getQuickFixes(DocumentContext documentContext, List<Diagnostic> diagnostics, Range range)\n\n\u0430 \u043c\u043d\u0435 \u044d\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u0430 \u0434\u043b\u044f \u0441\u0442\u0440\u043e\u043a\u0438.\n\u0412\u043e\u043f\u0440\u043e\u0441 - \u043c\u043d\u0435 \u0442\u0430\u043a\u0436\u0435 \u043d\u0443\u0436\u043d\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0441\u0432\u043e\u0435\u043c \u043a\u043b\u0430\u0441\u0441\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0438\u043b\u0438 \u0432\u0441\u0435-\u0442\u0430\u043a\u0438 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 AbstractDiagnosticTest?\n\n\u0435\u0441\u043b\u0438 \u044f \u0431\u0443\u0434\u0443 \u0434\u0435\u043b\u0430\u0442\u044c \u0432 \u0441\u0432\u043e\u0435\u043c, \u0442\u043e\u0433\u0434\u0430 \u0442\u0443\u043f\u043e \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u043a\u043e\u0434 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u043a\u043e\u043f\u0438\u043f\u0430\u0441\u0442\u0438\u0442\u044c (\n\u0430 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 - \u043f\u0440\u043e\u0441\u0442\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0442\u0435\u043a\u0442\u0435\u0434 \u043c\u0435\u0442\u043e\u0434\n\n  protected List<CodeAction> getQuickFixes(Diagnostic diagnostic, DocumentContext documentContext) {\n    return getQuickFixes(documentContext, Collections.singletonList(diagnostic), diagnostic.getRange());\n  }\n\n\n\u0438 \u043c\u0435\u043b\u043a\u0438\u0439 \u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u043d\u0433 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u043c\u0435\u0442\u043e\u0434\u0430\nprotected List getQuickFixes(Diagnostic diagnostic) {\nreturn getQuickFixes(diagnostic, documentContext);\n}\n\n\u043a\u043e\u0434 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0441\u0435\u0439\u0447\u0430\u0441\n  protected List<CodeAction> getQuickFixes(Diagnostic diagnostic) {\n    DocumentContext documentContext = getDocumentContext();\n    return getQuickFixes(documentContext, Collections.singletonList(diagnostic), diagnostic.getRange());\n  }\n\n  protected List<CodeAction> getQuickFixes(Diagnostic diagnostic, Range range) {\n    DocumentContext documentContext = getDocumentContext();\n    return getQuickFixes(documentContext, Collections.singletonList(diagnostic), range);\n  }\n\n  protected List<CodeAction> getQuickFixes(Range range) {\n    DocumentContext documentContext = getDocumentContext();\n    List<Diagnostic> diagnostics = this.diagnosticInstance.getDiagnostics(documentContext);\n\n    return getQuickFixes(documentContext, diagnostics, range);\n  }\n\n  private List<CodeAction> getQuickFixes(DocumentContext documentContext, List<Diagnostic> diagnostics, Range range) {", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407962660", "createdAt": "2020-04-14T08:37:24Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java", "diffHunk": "@@ -101,14 +101,23 @@ protected DocumentContext getDocumentContext() {\n \n   @SneakyThrows\n   protected DocumentContext getDocumentContext(String SimpleFileName) {\n+    String textDocumentContent = getText(SimpleFileName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQxMDg2OA=="}, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk2NjU0NQ==", "bodyText": "\u0430 \u043c\u0435\u043b\u043a\u0438\u0439 \u0442\u0435\u0441\u0442 \u043d\u0443\u0436\u0435\u043d \u0434\u043b\u044f \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u043e\u0442\u043b\u0430\u0434\u043a\u0438\\\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043a\u0432\u0438\u043a-\u0444\u0438\u043a\u0441\u0430 \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430 \u043f\u043e\u0441\u043b\u0435 \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u043a\u0438 contentList", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407966545", "createdAt": "2020-04-14T08:43:24Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java", "diffHunk": "@@ -101,14 +101,23 @@ protected DocumentContext getDocumentContext() {\n \n   @SneakyThrows\n   protected DocumentContext getDocumentContext(String SimpleFileName) {\n+    String textDocumentContent = getText(SimpleFileName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQxMDg2OA=="}, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwMTMzMw==", "bodyText": "@asosnoviy ? #1030 (comment)", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408001333", "createdAt": "2020-04-14T09:37:44Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java", "diffHunk": "@@ -101,14 +101,23 @@ protected DocumentContext getDocumentContext() {\n \n   @SneakyThrows\n   protected DocumentContext getDocumentContext(String SimpleFileName) {\n+    String textDocumentContent = getText(SimpleFileName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQxMDg2OA=="}, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxMjAyNQ==", "bodyText": "\u0410\u0440\u0442\u0443\u0440, \u043c\u043d\u0435 \u0442\u044f\u0436\u0435\u043b\u043e \u043e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u0431\u0435\u0433\u043b\u043e \u0447\u0438\u0442\u0430\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438, \u0441\u043a\u0438\u043b\u0430 \u043d\u0435 \u0445\u0432\u0430\u0442\u0430\u0435\u0442. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u043d\u0435 \u043d\u0430\u0434\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u044c \u0442\u0432\u043e\u0439 \u043f\u0443\u0442\u044c. \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u043d\u0435 \u043d\u0430\u0434\u043e \u0434\u0430\u0432\u0430\u0442\u044c \u041f\u0420 \u0440\u0430\u0441\u043f\u043e\u043b\u0437\u0430\u0442\u044c\u0441\u044f, \u0438 \u0441\u043b\u0435\u0434\u0438\u0442\u044c \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u043d\u0435 \u043f\u0440\u043e\u0442\u0435\u043a\u0430\u043b\u0430.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408012025", "createdAt": "2020-04-14T09:54:13Z", "author": {"login": "asosnoviy"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java", "diffHunk": "@@ -101,14 +101,23 @@ protected DocumentContext getDocumentContext() {\n \n   @SneakyThrows\n   protected DocumentContext getDocumentContext(String SimpleFileName) {\n+    String textDocumentContent = getText(SimpleFileName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQxMDg2OA=="}, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMzM1Ng==", "bodyText": "\u044f \u0432\u043d\u0435\u0441 \u043f\u0440\u0430\u0432\u043a\u0438, \u043f\u0440\u0438\u0448\u043b\u043e\u0441\u044c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043e\u0434\u0438\u043d \u043f\u0440\u043e\u0442\u0435\u043a\u0442\u0435\u0434-\u043c\u0435\u0442\u043e\u0434 \u0432 \u0431\u0430\u0437\u043e\u0432\u044b\u0439 AbstractDiagnosticTest \u0438 \u043e\u0442\u0440\u0435\u0444\u0430\u043a\u0442\u043e\u0440\u0438\u0442\u044c 2\u0439 \u0434\u043b\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408103356", "createdAt": "2020-04-14T12:40:27Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/AbstractDiagnosticTest.java", "diffHunk": "@@ -101,14 +101,23 @@ protected DocumentContext getDocumentContext() {\n \n   @SneakyThrows\n   protected DocumentContext getDocumentContext(String SimpleFileName) {\n+    String textDocumentContent = getText(SimpleFileName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQxMDg2OA=="}, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTI4OTY3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "isResolved": true, "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTo1NjowNlrOGE2v9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjowMzoyOVrOGFV4zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NDUwMw==", "bodyText": "\u0410 \u043e\u0442\u043a\u0443\u0434\u0430 \u0442\u0443\u0442 \u043b\u0438\u0448\u043d\u044f\u044f \u0441\u0442\u0440\u043e\u043a\u0430?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407744503", "createdAt": "2020-04-13T21:56:06Z", "author": {"login": "asosnoviy"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.util.TestUtils;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<ConsecutiveEmptyLinesDiagnostic> {\n+  ConsecutiveEmptyLinesDiagnosticTest() {\n+    super(ConsecutiveEmptyLinesDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test_EmptyTwoFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 1, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLinesWithSpaces() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \" \\n\" +\n+      \" \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_WorseEmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \"  \\n\" +\n+      \"  \u041c\u0435\u0442\u043e\u04341(); //\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438  \\n\" +\n+      \"\\n\" +\n+      \"  \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(3, 0, 4, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 3, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyLastLines() {\n+    String module = \"\u041f\u0435\u0440\u0435\u043c \u0410;\\n\" +\n+      \"\\n\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzNTgxOQ==", "bodyText": "\u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u043a\u0430\u043a \u0434\u0432\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430.\n\u0437\u043d\u0430\u0447\u0438\u0442, \u043d\u0443\u0436\u043d\u043e \u0438\u0445 \u0442\u0430\u043a\u0436\u0435 \u0443\u0431\u0440\u0430\u0442\u044c.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407935819", "createdAt": "2020-04-14T07:52:57Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.util.TestUtils;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<ConsecutiveEmptyLinesDiagnostic> {\n+  ConsecutiveEmptyLinesDiagnosticTest() {\n+    super(ConsecutiveEmptyLinesDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test_EmptyTwoFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 1, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLinesWithSpaces() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \" \\n\" +\n+      \" \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_WorseEmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \"  \\n\" +\n+      \"  \u041c\u0435\u0442\u043e\u04341(); //\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438  \\n\" +\n+      \"\\n\" +\n+      \"  \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(3, 0, 4, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 3, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyLastLines() {\n+    String module = \"\u041f\u0435\u0440\u0435\u043c \u0410;\\n\" +\n+      \"\\n\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NDUwMw=="}, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0Nzk1Nw==", "bodyText": "\u0410 \u043f\u043e\u0447\u0435\u043c\u0443 \u0442\u0430\u043a? \u041f\u043e\u0447\u0435\u043c\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0438\u0434\u0438\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0435\u0442?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407947957", "createdAt": "2020-04-14T08:13:10Z", "author": {"login": "asosnoviy"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.util.TestUtils;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<ConsecutiveEmptyLinesDiagnostic> {\n+  ConsecutiveEmptyLinesDiagnosticTest() {\n+    super(ConsecutiveEmptyLinesDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test_EmptyTwoFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 1, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLinesWithSpaces() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \" \\n\" +\n+      \" \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_WorseEmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \"  \\n\" +\n+      \"  \u041c\u0435\u0442\u043e\u04341(); //\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438  \\n\" +\n+      \"\\n\" +\n+      \"  \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(3, 0, 4, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 3, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyLastLines() {\n+    String module = \"\u041f\u0435\u0440\u0435\u043c \u0410;\\n\" +\n+      \"\\n\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NDUwMw=="}, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0OTcyOA==", "bodyText": "\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438 \u043f\u0430\u0440\u0441\u0435\u0440 https://github.com/1c-syntax/bsl-language-server/pull/1035/files#diff-392475fdf2bc320d17762ed97109a121R80\n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438 \u0447\u0442\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u043e\u0441\u044c. \u0422\u0430\u043c \u0434\u043e\u043b\u0436\u0435\u043d \u043d\u0430\u0447\u0430\u0442\u044c \u043f\u0440\u0438\u0435\u0437\u0436\u0430\u0442\u044c EOF \u0432 \u0445\u0438\u0434\u0434\u0435\u043d \u0447\u0435\u043d\u0435\u043b\u0435.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407949728", "createdAt": "2020-04-14T08:16:03Z", "author": {"login": "asosnoviy"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.util.TestUtils;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<ConsecutiveEmptyLinesDiagnostic> {\n+  ConsecutiveEmptyLinesDiagnosticTest() {\n+    super(ConsecutiveEmptyLinesDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test_EmptyTwoFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 1, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLinesWithSpaces() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \" \\n\" +\n+      \" \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_WorseEmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \"  \\n\" +\n+      \"  \u041c\u0435\u0442\u043e\u04341(); //\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438  \\n\" +\n+      \"\\n\" +\n+      \"  \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(3, 0, 4, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 3, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyLastLines() {\n+    String module = \"\u041f\u0435\u0440\u0435\u043c \u0410;\\n\" +\n+      \"\\n\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NDUwMw=="}, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1NjI2NA==", "bodyText": "\u0418 \u0440\u0435\u0431\u0435\u0439\u0437 \u043e\u0442 \u043c\u0430\u0441\u0442\u0435\u0440\u0430, \u0447\u0442\u043e \u0431\u044b \u0444\u0438\u043a\u0441 \u043f\u043e \u041b\u0430\u0439\u043d\u041a\u043e\u043d\u0442\u0435\u043d\u0442 \u0431\u044b\u043b", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407956264", "createdAt": "2020-04-14T08:26:57Z", "author": {"login": "asosnoviy"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.util.TestUtils;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<ConsecutiveEmptyLinesDiagnostic> {\n+  ConsecutiveEmptyLinesDiagnosticTest() {\n+    super(ConsecutiveEmptyLinesDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test_EmptyTwoFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 1, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLinesWithSpaces() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \" \\n\" +\n+      \" \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_WorseEmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \"  \\n\" +\n+      \"  \u041c\u0435\u0442\u043e\u04341(); //\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438  \\n\" +\n+      \"\\n\" +\n+      \"  \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(3, 0, 4, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 3, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyLastLines() {\n+    String module = \"\u041f\u0435\u0440\u0435\u043c \u0410;\\n\" +\n+      \"\\n\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NDUwMw=="}, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk2NTk0NA==", "bodyText": "\u0412\u043e\u0442 \u0442\u0443\u0442 \u043e\u043d\u043e \u0436\u0435? https://github.com/1c-syntax/bsl-language-server/pull/1030/files#diff-dcd33f17f4f2202a869987da8a2f2ca2R215\n\u041c\u044b \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0447\u0435\u0440\u0435\u0437 \u0413\u0425 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0435\u0442, \u0430 \u0432 \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440\u0435 \u0435\u0441\u0442\u044c?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407965944", "createdAt": "2020-04-14T08:42:26Z", "author": {"login": "asosnoviy"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.util.TestUtils;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<ConsecutiveEmptyLinesDiagnostic> {\n+  ConsecutiveEmptyLinesDiagnosticTest() {\n+    super(ConsecutiveEmptyLinesDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test_EmptyTwoFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 1, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLinesWithSpaces() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \" \\n\" +\n+      \" \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_WorseEmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \"  \\n\" +\n+      \"  \u041c\u0435\u0442\u043e\u04341(); //\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438  \\n\" +\n+      \"\\n\" +\n+      \"  \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(3, 0, 4, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 3, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyLastLines() {\n+    String module = \"\u041f\u0435\u0440\u0435\u043c \u0410;\\n\" +\n+      \"\\n\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NDUwMw=="}, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3Njk1OQ==", "bodyText": "\u0418 \u0440\u0435\u0431\u0435\u0439\u0437 \u043e\u0442 \u043c\u0430\u0441\u0442\u0435\u0440\u0430, \u0447\u0442\u043e \u0431\u044b \u0444\u0438\u043a\u0441 \u043f\u043e \u041b\u0430\u0439\u043d\u041a\u043e\u043d\u0442\u0435\u043d\u0442 \u0431\u044b\u043b\n\n\u043d\u0435 \u043f\u043e\u043d\u044f\u043b. \u043f\u043e\u044f\u0441\u043d\u0438.\n\u044f \u0432\u0435\u0442\u043a\u0443 \u0434\u0435\u0432\u0435\u043b\u043e\u043f \u043a \u0441\u0435\u0431\u0435 \u0432 \u0432\u0435\u0442\u043a\u0443 \u0441\u043c\u0435\u0440\u0436\u0438\u043b. \u043d\u0430 \u043d\u0435\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044e \u0441 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u043c\u0438 ContentList", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407976959", "createdAt": "2020-04-14T08:59:39Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.util.TestUtils;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<ConsecutiveEmptyLinesDiagnostic> {\n+  ConsecutiveEmptyLinesDiagnosticTest() {\n+    super(ConsecutiveEmptyLinesDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test_EmptyTwoFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 1, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLinesWithSpaces() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \" \\n\" +\n+      \" \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_WorseEmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \"  \\n\" +\n+      \"  \u041c\u0435\u0442\u043e\u04341(); //\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438  \\n\" +\n+      \"\\n\" +\n+      \"  \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(3, 0, 4, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 3, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyLastLines() {\n+    String module = \"\u041f\u0435\u0440\u0435\u043c \u0410;\\n\" +\n+      \"\\n\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NDUwMw=="}, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3ODMwMw==", "bodyText": "\u043e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u0443\u0441\u0442\u0430\u044f, \u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 EOF\n\u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e \u0432\u0438\u0434\u043d\u043e \u0434\u0432\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e\u0441\u043b\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0432\u0435\u0440\u043d\u043e?\n\u043e\u0442 \u043d\u0438\u0445 \u0438 \u043d\u0443\u0436\u043d\u043e \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407978303", "createdAt": "2020-04-14T09:01:40Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.util.TestUtils;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<ConsecutiveEmptyLinesDiagnostic> {\n+  ConsecutiveEmptyLinesDiagnosticTest() {\n+    super(ConsecutiveEmptyLinesDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test_EmptyTwoFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 1, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLinesWithSpaces() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \" \\n\" +\n+      \" \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_WorseEmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \"  \\n\" +\n+      \"  \u041c\u0435\u0442\u043e\u04341(); //\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438  \\n\" +\n+      \"\\n\" +\n+      \"  \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(3, 0, 4, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 3, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyLastLines() {\n+    String module = \"\u041f\u0435\u0440\u0435\u043c \u0410;\\n\" +\n+      \"\\n\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NDUwMw=="}, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4MDA4Ng==", "bodyText": "\u0413\u0425 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442,  \u0447\u0442\u043e 34 \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f.\n\u0410 \u0432 \u0442\u0435\u0441\u0442\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u043e\u0434\u043d\u0443 \u0431\u043e\u043b\u044c\u0448\u0435", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407980086", "createdAt": "2020-04-14T09:04:38Z", "author": {"login": "asosnoviy"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.util.TestUtils;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<ConsecutiveEmptyLinesDiagnostic> {\n+  ConsecutiveEmptyLinesDiagnosticTest() {\n+    super(ConsecutiveEmptyLinesDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test_EmptyTwoFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 1, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLinesWithSpaces() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \" \\n\" +\n+      \" \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_WorseEmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \"  \\n\" +\n+      \"  \u041c\u0435\u0442\u043e\u04341(); //\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438  \\n\" +\n+      \"\\n\" +\n+      \"  \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(3, 0, 4, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 3, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyLastLines() {\n+    String module = \"\u041f\u0435\u0440\u0435\u043c \u0410;\\n\" +\n+      \"\\n\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NDUwMw=="}, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4NDI0MA==", "bodyText": "\u041f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0442\u0435\u0441\u0442\u043e\u0432, \u043d\u0435 \u043e\u0431\u0440\u0430\u0449\u0430\u0439 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u043d\u0430 \u043d\u0438\u0445.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407984240", "createdAt": "2020-04-14T09:11:07Z", "author": {"login": "asosnoviy"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.util.TestUtils;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<ConsecutiveEmptyLinesDiagnostic> {\n+  ConsecutiveEmptyLinesDiagnosticTest() {\n+    super(ConsecutiveEmptyLinesDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test_EmptyTwoFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 1, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLinesWithSpaces() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \" \\n\" +\n+      \" \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_WorseEmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \"  \\n\" +\n+      \"  \u041c\u0435\u0442\u043e\u04341(); //\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438  \\n\" +\n+      \"\\n\" +\n+      \"  \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(3, 0, 4, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 3, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyLastLines() {\n+    String module = \"\u041f\u0435\u0440\u0435\u043c \u0410;\\n\" +\n+      \"\\n\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NDUwMw=="}, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwMTU2Mw==", "bodyText": "\u0422\u043e\u043b\u044c\u043a\u043e \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043a\u0432\u0438\u043a\u0444\u0438\u043a\u0441\u0430 \u041e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 (\u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0439\u0447\u0430\u0441 35), \u0434\u043e\u043b\u0436\u043d\u0430 \u043e\u0441\u0442\u0430\u0442\u044c\u0441\u044f.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408001563", "createdAt": "2020-04-14T09:38:04Z", "author": {"login": "asosnoviy"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.util.TestUtils;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<ConsecutiveEmptyLinesDiagnostic> {\n+  ConsecutiveEmptyLinesDiagnosticTest() {\n+    super(ConsecutiveEmptyLinesDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test_EmptyTwoFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 1, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLinesWithSpaces() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \" \\n\" +\n+      \" \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_WorseEmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \"  \\n\" +\n+      \"  \u041c\u0435\u0442\u043e\u04341(); //\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438  \\n\" +\n+      \"\\n\" +\n+      \"  \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(3, 0, 4, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 3, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyLastLines() {\n+    String module = \"\u041f\u0435\u0440\u0435\u043c \u0410;\\n\" +\n+      \"\\n\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NDUwMw=="}, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NDY2OQ==", "bodyText": "\u0432\u0440\u043e\u0434\u0435 \u0432\u0441\u0435 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e. \u0442\u0435\u043f\u0435\u0440\u044c \u0432\u0441\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442.\n\u0435\u0441\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u0438\u043d\u0438-\u044e\u043d\u0438\u0442-\u0442\u0435\u0441\u0442\u044b.\n\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408254669", "createdAt": "2020-04-14T16:03:29Z", "author": {"login": "artbear"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnosticTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.util.TestUtils;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.github._1c_syntax.bsl.languageserver.util.Assertions.assertThat;\n+\n+class ConsecutiveEmptyLinesDiagnosticTest extends AbstractDiagnosticTest<ConsecutiveEmptyLinesDiagnostic> {\n+  ConsecutiveEmptyLinesDiagnosticTest() {\n+    super(ConsecutiveEmptyLinesDiagnostic.class);\n+  }\n+\n+  @Test\n+  void test_EmptyTwoFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 1, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeFirstLines() {\n+    String module = \"  \\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(0, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyTwoInnerLinesWithSpaces() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \" \\n\" +\n+      \" \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_WorseEmptyTwoInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()  \\n\" +\n+      \"  \\n\" +\n+      \"  \u041c\u0435\u0442\u043e\u04341(); //\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438  \\n\" +\n+      \"\\n\" +\n+      \"  \\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(3, 0, 4, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyThreeInnerLines() {\n+    String module = \"\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u041f\u0435\u0440\u0432\u0430\u044f()\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\\n\" +\n+      \"\u041a\u043e\u043d\u0435\u0446\u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 3, 0)\n+      .hasSize(1)\n+    ;\n+  }\n+\n+  @Test\n+  void test_EmptyLastLines() {\n+    String module = \"\u041f\u0435\u0440\u0435\u043c \u0410;\\n\" +\n+      \"\\n\";\n+\n+    List<Diagnostic> diagnostics = getDiagnosticsForText(module);\n+\n+    assertThat(diagnostics, true)\n+      .hasRange(1, 0, 2, 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NDUwMw=="}, "originalCommit": {"oid": "83b05dd62577e92a9f076c140eaedfd24e06388c"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjg2MTQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTowODo0N1rOGFFSsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTozNjoxNVrOGFGXpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4Mjc3MQ==", "bodyText": "\u0412\u043e\u0442 \u044d\u0442\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043a\u0430\u043a\u0442\u043e \u0440\u0430\u0437\u0440\u0443\u043b\u0438\u0442\u044c\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u043f\u043e\u044f\u0432\u043b\u0435\u043d\u0438\u044f EOF", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407982771", "createdAt": "2020-04-14T09:08:47Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    tokens.stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    checkLastToken(tokens, prevLineStorage[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1e6813534ca756ac73b74639fa63b35f0f7689"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwMDQyMQ==", "bodyText": "\u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435 \u043d\u0435 \u0441\u043e\u0432\u0441\u0435\u043c )\n\u043e\u0442\u043b\u0438\u0447\u043d\u043e, \u0447\u0442\u043e \u043f\u043e\u044f\u0432\u0438\u043b\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d \u0415\u041e\u0424.\n\u043d\u043e \u044f \u0435\u0433\u043e \u0431\u0443\u0434\u0443\u0442 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e, \u043a\u0430\u043a \u0441\u0435\u0439\u0447\u0430\u0441 \u0432 \u043a\u043e\u0434\u0435.\n\u043f\u0440\u043e\u0441\u0442\u043e \u043a\u043e\u0434 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u0430 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044e \u043d\u0430\nprivate static Token getEofToken(List tokens) {\nfinal var lastIndex = tokens.size() - 1;\n//    return tokens.get(lastIndex).getTokenSource().nextToken();\nreturn tokens.get(lastIndex);\n}\n\n\n1 \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0446\u0438\u043a\u043b\u0430 \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0430\u043c \u043d\u0435 \u043f\u0440\u0438\u0448\u043b\u043e\u0441\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c, \u0447\u0442\u043e \u044d\u0442\u043e \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d\n\n\n2 \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u0432 \u0444\u0430\u0439\u043b\u0435 \u0441\u043f\u0435\u0446.\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430.\n\u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0432\u044b\u0434\u0435\u043b\u044f\u043b\u043e\u0441\u044c, \u043a\u0430\u043a \u0443 \u0442\u0435\u0431\u044f \u043d\u0430 \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u0435\n\n\n\u043a\u0441\u0442\u0430\u0442\u0438, \u043d\u0430 \u044d\u0442\u043e\u043c \u0436\u0435 \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u0435 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432\u0438\u0434\u043d\u044b \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u043a, \u0430 \u043d\u0435 \u0442\u0430\u043a, \u043a\u0430\u043a \u043d\u0430 \u0433\u0438\u0442\u0445\u0430\u0431\u0435\n\n\n\n3 \u043d\u0443 \u0438 \u043a\u0432\u0438\u043a\u0441-\u0444\u0438\u043a\u0441\u0435 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u0415\u041e\u0424 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408000421", "createdAt": "2020-04-14T09:36:15Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    tokens.stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    checkLastToken(tokens, prevLineStorage[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4Mjc3MQ=="}, "originalCommit": {"oid": "ff1e6813534ca756ac73b74639fa63b35f0f7689"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjg2Mzg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTowOToyM1rOGFFUKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTozNzoxMVrOGFGZ9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4MzE0NQ==", "bodyText": "\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u043d\u0443\u0436\u043d\u0430?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r407983145", "createdAt": "2020-04-14T09:09:23Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    tokens.stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    checkLastToken(tokens, prevLineStorage[0]);\n+  }\n+\n+  private void checkLastToken(List<Token> tokens, int prevLine) {\n+    // \u0435\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043f\u0430\u0440\u0441\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d \u0441 \u0442\u0435\u043c \u0436\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438,\n+    // \u0447\u0442\u043e \u0438 \u0442\u043e\u043a\u0435\u043d, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432. \u0432 \u0442\u0435\u0441\u0442\u0435 \u044d\u0442\u043e\u0442 \u043a\u0435\u0439\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f.\n+    var eofLine = getEofToken(tokens).getLine();\n+    if (eofLine - prevLine > allowedEmptyLinesCount){\n+      addIssue(prevLine, eofLine);\n+    }\n+  }\n+\n+  private static Token getEofToken(List<Token> tokens) {\n+    final var lastIndex = tokens.size() - 1;\n+    return tokens.get(lastIndex).getTokenSource().nextToken();\n+  }\n+\n+  private static boolean isWhiteSpace(Token token) {\n+    return token.getChannel() == Token.HIDDEN_CHANNEL && token.getType() == BSLLexer.WHITE_SPACE;\n+  }\n+\n+  private void addIssue(int startEmptyLine, int lastEmptyLine) {\n+    Range range = Ranges.create(startEmptyLine, 0, lastEmptyLine - 1, 0);\n+    diagnosticStorage.addDiagnostic(range);\n+  }\n+\n+  @Override\n+  public List<CodeAction> getQuickFixes(\n+      List<Diagnostic> diagnostics, CodeActionParams params, DocumentContext documentContext) {\n+\n+    List<TextEdit> textEdits = new ArrayList<>();\n+\n+    diagnostics.forEach((Diagnostic diagnostic) -> {\n+      Range range = diagnostic.getRange();\n+\n+      Range newRange = Ranges.create(range.getStart().getLine(), 0, range.getEnd().getLine() + 1, 0);\n+      // \u0438\u0437-\u0437\u0430 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0432 DocumentContext.contentList \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0444\u0430\u0439\u043b\u0435\n+      // \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0434\u0435\u043b\u0430\u0442\u044c \u0442\u0430\u043a\u0443\u044e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443\n+      try {\n+        documentContext.getText(newRange);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1e6813534ca756ac73b74639fa63b35f0f7689"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwMTAxMg==", "bodyText": "\u043d\u0443\u0436\u043d\u0430 ( \u043d\u043e \u0442\u0435\u043f\u0435\u0440\u044c \u0431\u0435\u0437 try, \u043a\u043e\u043d\u0435\u0447\u043d\u043e. \u043e\u0442\u043f\u0438\u0441\u0430\u043b\u0441\u044f \u0447\u0443\u0442\u044c \u0432\u044b\u0448\u0435\n\n\u0438 \u043a\u0432\u0438\u043a\u0441-\u0444\u0438\u043a\u0441\u0435 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c, \u0447\u0442\u043e\u0431\u044b \u0415\u041e\u0424 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408001012", "createdAt": "2020-04-14T09:37:11Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    tokens.stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    checkLastToken(tokens, prevLineStorage[0]);\n+  }\n+\n+  private void checkLastToken(List<Token> tokens, int prevLine) {\n+    // \u0435\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043f\u0430\u0440\u0441\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d \u0441 \u0442\u0435\u043c \u0436\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438,\n+    // \u0447\u0442\u043e \u0438 \u0442\u043e\u043a\u0435\u043d, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432. \u0432 \u0442\u0435\u0441\u0442\u0435 \u044d\u0442\u043e\u0442 \u043a\u0435\u0439\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f.\n+    var eofLine = getEofToken(tokens).getLine();\n+    if (eofLine - prevLine > allowedEmptyLinesCount){\n+      addIssue(prevLine, eofLine);\n+    }\n+  }\n+\n+  private static Token getEofToken(List<Token> tokens) {\n+    final var lastIndex = tokens.size() - 1;\n+    return tokens.get(lastIndex).getTokenSource().nextToken();\n+  }\n+\n+  private static boolean isWhiteSpace(Token token) {\n+    return token.getChannel() == Token.HIDDEN_CHANNEL && token.getType() == BSLLexer.WHITE_SPACE;\n+  }\n+\n+  private void addIssue(int startEmptyLine, int lastEmptyLine) {\n+    Range range = Ranges.create(startEmptyLine, 0, lastEmptyLine - 1, 0);\n+    diagnosticStorage.addDiagnostic(range);\n+  }\n+\n+  @Override\n+  public List<CodeAction> getQuickFixes(\n+      List<Diagnostic> diagnostics, CodeActionParams params, DocumentContext documentContext) {\n+\n+    List<TextEdit> textEdits = new ArrayList<>();\n+\n+    diagnostics.forEach((Diagnostic diagnostic) -> {\n+      Range range = diagnostic.getRange();\n+\n+      Range newRange = Ranges.create(range.getStart().getLine(), 0, range.getEnd().getLine() + 1, 0);\n+      // \u0438\u0437-\u0437\u0430 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0432 DocumentContext.contentList \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0444\u0430\u0439\u043b\u0435\n+      // \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0434\u0435\u043b\u0430\u0442\u044c \u0442\u0430\u043a\u0443\u044e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443\n+      try {\n+        documentContext.getText(newRange);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4MzE0NQ=="}, "originalCommit": {"oid": "ff1e6813534ca756ac73b74639fa63b35f0f7689"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzYwNDQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjozNDoyNFrOGFMa6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDowNTo0OVrOGFe6Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5OTU2Mg==", "bodyText": "\u0410 \u0440\u0430\u0437\u0432\u0435 WHITE_SPACE \u0431\u044b\u0432\u0430\u044e\u0442 \u043d\u0435 \u0432 HIDDEN_CHANNEL ?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408099562", "createdAt": "2020-04-14T12:34:24Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    tokens.stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    checkLastToken(tokens, prevLineStorage[0]);\n+  }\n+\n+  private void checkLastToken(List<Token> tokens, int prevLine) {\n+    // \u0435\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043f\u0430\u0440\u0441\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d \u0441 \u0442\u0435\u043c \u0436\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438,\n+    // \u0447\u0442\u043e \u0438 \u0442\u043e\u043a\u0435\u043d, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432. \u0432 \u0442\u0435\u0441\u0442\u0435 \u044d\u0442\u043e\u0442 \u043a\u0435\u0439\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f.\n+    var eofLine = getEofToken(tokens).getLine();\n+    if (eofLine - prevLine > allowedEmptyLinesCount){\n+      addIssue(prevLine, eofLine);\n+    }\n+  }\n+\n+  private static Token getEofToken(List<Token> tokens) {\n+    final var lastIndex = tokens.size() - 1;\n+    return tokens.get(lastIndex).getTokenSource().nextToken();\n+  }\n+\n+  private static boolean isWhiteSpace(Token token) {\n+    return token.getChannel() == Token.HIDDEN_CHANNEL && token.getType() == BSLLexer.WHITE_SPACE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1e6813534ca756ac73b74639fa63b35f0f7689"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5MTI3OQ==", "bodyText": "\u041f\u043e\u0441\u043b\u0435 \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u044f \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u043c\u0435\u0442\u043e\u0434 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c\u0441\u044f \u043d\u0435 \u043d\u0443\u0436\u043d\u044b\u043c. \u0418\u043d\u043b\u0430\u0439\u043d \u0432 \u0441\u0442\u0440\u0438\u043c\u0435 \u043f\u0440\u043e\u0449\u0435 \u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408191279", "createdAt": "2020-04-14T14:41:49Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    tokens.stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    checkLastToken(tokens, prevLineStorage[0]);\n+  }\n+\n+  private void checkLastToken(List<Token> tokens, int prevLine) {\n+    // \u0435\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043f\u0430\u0440\u0441\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d \u0441 \u0442\u0435\u043c \u0436\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438,\n+    // \u0447\u0442\u043e \u0438 \u0442\u043e\u043a\u0435\u043d, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432. \u0432 \u0442\u0435\u0441\u0442\u0435 \u044d\u0442\u043e\u0442 \u043a\u0435\u0439\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f.\n+    var eofLine = getEofToken(tokens).getLine();\n+    if (eofLine - prevLine > allowedEmptyLinesCount){\n+      addIssue(prevLine, eofLine);\n+    }\n+  }\n+\n+  private static Token getEofToken(List<Token> tokens) {\n+    final var lastIndex = tokens.size() - 1;\n+    return tokens.get(lastIndex).getTokenSource().nextToken();\n+  }\n+\n+  private static boolean isWhiteSpace(Token token) {\n+    return token.getChannel() == Token.HIDDEN_CHANNEL && token.getType() == BSLLexer.WHITE_SPACE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5OTU2Mg=="}, "originalCommit": {"oid": "ff1e6813534ca756ac73b74639fa63b35f0f7689"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NDA3Ng==", "bodyText": "\u0410 \u0440\u0430\u0437\u0432\u0435 WHITE_SPACE \u0431\u044b\u0432\u0430\u044e\u0442 \u043d\u0435 \u0432 HIDDEN_CHANNEL ?\n\n\u0443 \u0442\u0435\u0431\u044f \u0436\u0435 \u043d\u0430 \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u0435 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u044d\u0442\u043e\u0442 \u043a\u0430\u043d\u0430\u043b.\n\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043b \u0431\u0435\u0437 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043d\u0430 WHITE_SPACE - \u0442\u0435\u0441\u0442\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u044b, \u043f\u0430\u0434\u0430\u044e\u0442.\n\n\u041f\u043e\u0441\u043b\u0435 \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u044f \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u043c\u0435\u0442\u043e\u0434 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c\u0441\u044f \u043d\u0435 \u043d\u0443\u0436\u043d\u044b\u043c. \u0418\u043d\u043b\u0430\u0439\u043d \u0432 \u0441\u0442\u0440\u0438\u043c\u0435 \u043f\u0440\u043e\u0449\u0435 \u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f\n\n\u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 ).\n\u043c\u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434, \u0447\u0435\u0442\u043a\u043e \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0439, \u0447\u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f.\n\u0431\u0435\u0437 \u043c\u0435\u0442\u043e\u0434\u0430 \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432\u043e\u0442 \u0442\u0430\u043a\u043e\u0435\n'.filter(token -> token.getChannel() != Token.HIDDEN_CHANNEL || token.getType() != BSLLexer.WHITE_SPACE)'\n\u043c\u043e\u0435 \u0438\u043c\u0445\u043e - \u0441\u0442\u0430\u043b\u043e \u043c\u043d\u0435\u0435 \u043f\u043e\u043d\u044f\u0442\u043d\u043e.\n\u0435\u0441\u043b\u0438 \u043f\u043e\u0441\u043b\u0435 \u043f\u0440\u043e\u0447\u0442\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430 \u0442\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0448\u044c, \u0447\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 \u043c\u0435\u0442\u043e\u0434\u0430, \u0443\u0431\u0435\u0440\u0443.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408254076", "createdAt": "2020-04-14T16:02:37Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    tokens.stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    checkLastToken(tokens, prevLineStorage[0]);\n+  }\n+\n+  private void checkLastToken(List<Token> tokens, int prevLine) {\n+    // \u0435\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043f\u0430\u0440\u0441\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d \u0441 \u0442\u0435\u043c \u0436\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438,\n+    // \u0447\u0442\u043e \u0438 \u0442\u043e\u043a\u0435\u043d, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432. \u0432 \u0442\u0435\u0441\u0442\u0435 \u044d\u0442\u043e\u0442 \u043a\u0435\u0439\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f.\n+    var eofLine = getEofToken(tokens).getLine();\n+    if (eofLine - prevLine > allowedEmptyLinesCount){\n+      addIssue(prevLine, eofLine);\n+    }\n+  }\n+\n+  private static Token getEofToken(List<Token> tokens) {\n+    final var lastIndex = tokens.size() - 1;\n+    return tokens.get(lastIndex).getTokenSource().nextToken();\n+  }\n+\n+  private static boolean isWhiteSpace(Token token) {\n+    return token.getChannel() == Token.HIDDEN_CHANNEL && token.getType() == BSLLexer.WHITE_SPACE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5OTU2Mg=="}, "originalCommit": {"oid": "ff1e6813534ca756ac73b74639fa63b35f0f7689"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NTk2Mw==", "bodyText": "\u0410 \u0431\u0435\u0437 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043d\u0430 HIDDEN_CHANNEL?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408255963", "createdAt": "2020-04-14T16:05:13Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    tokens.stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    checkLastToken(tokens, prevLineStorage[0]);\n+  }\n+\n+  private void checkLastToken(List<Token> tokens, int prevLine) {\n+    // \u0435\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043f\u0430\u0440\u0441\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d \u0441 \u0442\u0435\u043c \u0436\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438,\n+    // \u0447\u0442\u043e \u0438 \u0442\u043e\u043a\u0435\u043d, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432. \u0432 \u0442\u0435\u0441\u0442\u0435 \u044d\u0442\u043e\u0442 \u043a\u0435\u0439\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f.\n+    var eofLine = getEofToken(tokens).getLine();\n+    if (eofLine - prevLine > allowedEmptyLinesCount){\n+      addIssue(prevLine, eofLine);\n+    }\n+  }\n+\n+  private static Token getEofToken(List<Token> tokens) {\n+    final var lastIndex = tokens.size() - 1;\n+    return tokens.get(lastIndex).getTokenSource().nextToken();\n+  }\n+\n+  private static boolean isWhiteSpace(Token token) {\n+    return token.getChannel() == Token.HIDDEN_CHANNEL && token.getType() == BSLLexer.WHITE_SPACE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5OTU2Mg=="}, "originalCommit": {"oid": "ff1e6813534ca756ac73b74639fa63b35f0f7689"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM5MTg2MA==", "bodyText": ".filter(token -> token.getType() != BSLLexer.WHITE_SPACE)\n\u0430\u0433\u0430, \u0442\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442.  \u0437\u0430\u0438\u043d\u043b\u0430\u0439\u043d\u0438\u043b.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408391860", "createdAt": "2020-04-14T19:46:42Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    tokens.stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    checkLastToken(tokens, prevLineStorage[0]);\n+  }\n+\n+  private void checkLastToken(List<Token> tokens, int prevLine) {\n+    // \u0435\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043f\u0430\u0440\u0441\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d \u0441 \u0442\u0435\u043c \u0436\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438,\n+    // \u0447\u0442\u043e \u0438 \u0442\u043e\u043a\u0435\u043d, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432. \u0432 \u0442\u0435\u0441\u0442\u0435 \u044d\u0442\u043e\u0442 \u043a\u0435\u0439\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f.\n+    var eofLine = getEofToken(tokens).getLine();\n+    if (eofLine - prevLine > allowedEmptyLinesCount){\n+      addIssue(prevLine, eofLine);\n+    }\n+  }\n+\n+  private static Token getEofToken(List<Token> tokens) {\n+    final var lastIndex = tokens.size() - 1;\n+    return tokens.get(lastIndex).getTokenSource().nextToken();\n+  }\n+\n+  private static boolean isWhiteSpace(Token token) {\n+    return token.getChannel() == Token.HIDDEN_CHANNEL && token.getType() == BSLLexer.WHITE_SPACE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5OTU2Mg=="}, "originalCommit": {"oid": "ff1e6813534ca756ac73b74639fa63b35f0f7689"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwMjQ1MA==", "bodyText": "\u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e, \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u0448\u044c?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408402450", "createdAt": "2020-04-14T20:05:49Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    tokens.stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    checkLastToken(tokens, prevLineStorage[0]);\n+  }\n+\n+  private void checkLastToken(List<Token> tokens, int prevLine) {\n+    // \u0435\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043f\u0430\u0440\u0441\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d \u0441 \u0442\u0435\u043c \u0436\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438,\n+    // \u0447\u0442\u043e \u0438 \u0442\u043e\u043a\u0435\u043d, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432. \u0432 \u0442\u0435\u0441\u0442\u0435 \u044d\u0442\u043e\u0442 \u043a\u0435\u0439\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f.\n+    var eofLine = getEofToken(tokens).getLine();\n+    if (eofLine - prevLine > allowedEmptyLinesCount){\n+      addIssue(prevLine, eofLine);\n+    }\n+  }\n+\n+  private static Token getEofToken(List<Token> tokens) {\n+    final var lastIndex = tokens.size() - 1;\n+    return tokens.get(lastIndex).getTokenSource().nextToken();\n+  }\n+\n+  private static boolean isWhiteSpace(Token token) {\n+    return token.getChannel() == Token.HIDDEN_CHANNEL && token.getType() == BSLLexer.WHITE_SPACE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5OTU2Mg=="}, "originalCommit": {"oid": "ff1e6813534ca756ac73b74639fa63b35f0f7689"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzc1Njk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzoxMToxMFrOGFN4yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDowNjowOFrOGFe6wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEyMzU5NQ==", "bodyText": "\u042d\u0442\u043e \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432 \u043c\u0435\u0442\u043e\u0434 \u043d\u0435 \u043e\u0431\u043b\u0435\u0433\u0447\u0430\u0435\u0442 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u043a\u0430\u0436\u0435\u0442\u0441\u044f \u043b\u0443\u0447\u0448\u0435 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043e\u0431\u0440\u0430\u0442\u043d\u043e. \u0418 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043f\u0440\u043e \u043a\u0430\u043a\u0438\u0435 \u0442\u043e \u0442\u043e\u043a\u0435\u043d\u044b. \u041d\u043e \u043c\u0435\u0442\u043e\u0434 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0442\u043e\u0436\u0435 \u0441\u0430\u043c\u043e\u0435 \u0447\u0442\u043e \u0438 \u0432 85\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u043d\u043e \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c  \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c prevLineStorage[0]. \u0424\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044e \u0446\u0438\u043a\u043b\u0430.\n\u041f\u0441. \u041d\u0430\u0433\u043d\u0430\u043b.  \u041f\u0435\u0440\u0432\u044b\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0434\u0440\u0443\u0433\u043e\u0439", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408123595", "createdAt": "2020-04-14T13:11:10Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    // \u0431\u0435\u0437 EOF \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430\n+    tokens.subList(0, tokens.size() - 1)\n+      .stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    var eofLine = getEofToken(tokens).getLine();\n+    checkLastToken(eofLine, prevLineStorage[0]);\n+  }\n+\n+  private void checkLastToken(int eofLine, int prevLine) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "890c65954bfc9c50dd76adfa5eba85ea30c971ae"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NTExNQ==", "bodyText": "\u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0435?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408255115", "createdAt": "2020-04-14T16:04:03Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    // \u0431\u0435\u0437 EOF \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430\n+    tokens.subList(0, tokens.size() - 1)\n+      .stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    var eofLine = getEofToken(tokens).getLine();\n+    checkLastToken(eofLine, prevLineStorage[0]);\n+  }\n+\n+  private void checkLastToken(int eofLine, int prevLine) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEyMzU5NQ=="}, "originalCommit": {"oid": "890c65954bfc9c50dd76adfa5eba85ea30c971ae"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1ODI3OA==", "bodyText": "\u0418\u043c\u0445\u043e \u0442\u0440\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0435 \u0434\u043e\u0441\u0442\u043e\u0439\u043d\u044b \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u044f", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408258278", "createdAt": "2020-04-14T16:08:31Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    // \u0431\u0435\u0437 EOF \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430\n+    tokens.subList(0, tokens.size() - 1)\n+      .stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    var eofLine = getEofToken(tokens).getLine();\n+    checkLastToken(eofLine, prevLineStorage[0]);\n+  }\n+\n+  private void checkLastToken(int eofLine, int prevLine) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEyMzU5NQ=="}, "originalCommit": {"oid": "890c65954bfc9c50dd76adfa5eba85ea30c971ae"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2NTIyNQ==", "bodyText": "\u0438\u043b\u0438 85\u044e \u0441\u044e\u0434\u0430 \u043a\u0430\u043a \u0442\u043e \u0437\u0430\u043f\u0438\u0445\u0430\u0442\u044c. \u0410 \u0442\u043e \u0432\u0440\u043e\u0434\u0435 \u0432 \u043c\u0435\u0442\u043e\u0434\u0435, \u043d\u043e \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u043a\u043e\u043f\u0438\u043f\u0430\u0441\u0442\u0430.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408265225", "createdAt": "2020-04-14T16:18:30Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    // \u0431\u0435\u0437 EOF \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430\n+    tokens.subList(0, tokens.size() - 1)\n+      .stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    var eofLine = getEofToken(tokens).getLine();\n+    checkLastToken(eofLine, prevLineStorage[0]);\n+  }\n+\n+  private void checkLastToken(int eofLine, int prevLine) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEyMzU5NQ=="}, "originalCommit": {"oid": "890c65954bfc9c50dd76adfa5eba85ea30c971ae"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwMjYyNQ==", "bodyText": "\u0434\u0430, \u0438\u0437\u0431\u0430\u0432\u0438\u043b\u0441\u044f \u043e\u0442 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0434\u0443\u0431\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.\n\u0441\u043c\u043e\u0442\u0440\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408402625", "createdAt": "2020-04-14T20:06:08Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    // \u0431\u0435\u0437 EOF \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430\n+    tokens.subList(0, tokens.size() - 1)\n+      .stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    var eofLine = getEofToken(tokens).getLine();\n+    checkLastToken(eofLine, prevLineStorage[0]);\n+  }\n+\n+  private void checkLastToken(int eofLine, int prevLine) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEyMzU5NQ=="}, "originalCommit": {"oid": "890c65954bfc9c50dd76adfa5eba85ea30c971ae"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDE2MjYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDozODozOVrOGFR3VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjowNDoxN1rOGFV7Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4ODc1Nw==", "bodyText": "\u041a\u0430\u0436\u0435\u0442\u0441\u044f \u044d\u0442\u0430 \u0432\u0435\u0442\u043a\u0430 \u043b\u0438\u0448\u043d\u044f\u044f", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408188757", "createdAt": "2020-04-14T14:38:39Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    // \u0431\u0435\u0437 EOF \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430\n+    tokens.subList(0, tokens.size() - 1)\n+      .stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "890c65954bfc9c50dd76adfa5eba85ea30c971ae"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NTMxOA==", "bodyText": "\u0430\u0433\u0430, \u043b\u0438\u0448\u043d\u044f\u044f, \u0443\u0431\u0438\u0440\u0430\u044e.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408255318", "createdAt": "2020-04-14T16:04:17Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    // \u0431\u0435\u0437 EOF \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430\n+    tokens.subList(0, tokens.size() - 1)\n+      .stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4ODc1Nw=="}, "originalCommit": {"oid": "890c65954bfc9c50dd76adfa5eba85ea30c971ae"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDE3NTA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0MTowOFrOGFR_Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDowNjo0MVrOGFe7wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5MDc1OQ==", "bodyText": "\u0422\u043e\u0436\u0435 \u043d\u0435\u043f\u043e\u043d\u044f\u0442\u043d\u043e\u0435 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432 \u043c\u0435\u0442\u043e\u0434 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438. \u0417\u0430 \u0432\u044b\u0437\u043e\u0432\u043e\u043c \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u0430\u0441\u043a\u0438\u0440\u043a\u0443\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u043e\u0432", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408190759", "createdAt": "2020-04-14T14:41:08Z", "author": {"login": "asosnoviy"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    // \u0431\u0435\u0437 EOF \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430\n+    tokens.subList(0, tokens.size() - 1)\n+      .stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    var eofLine = getEofToken(tokens).getLine();\n+    checkLastToken(eofLine, prevLineStorage[0]);\n+  }\n+\n+  private void checkLastToken(int eofLine, int prevLine) {\n+    // \u0435\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043f\u0430\u0440\u0441\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d \u0441 \u0442\u0435\u043c \u0436\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438,\n+    // \u0447\u0442\u043e \u0438 \u0442\u043e\u043a\u0435\u043d, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432. \u0432 \u0442\u0435\u0441\u0442\u0435 \u044d\u0442\u043e\u0442 \u043a\u0435\u0439\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f.\n+    if (eofLine - prevLine > allowedEmptyLinesCount){\n+      addIssue(prevLine, eofLine);\n+    }\n+  }\n+\n+  private static Token getEofToken(List<Token> tokens) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "890c65954bfc9c50dd76adfa5eba85ea30c971ae"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0ODYyNQ==", "bodyText": "\u043c\u0435\u0442\u043e\u0434 getEofToken \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 2\u0445 \u043c\u0435\u0441\u0442\u0430\u0445 - \u0432 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0435 \u0438 \u0432 \u043a\u0432\u0438\u043a-\u0444\u0438\u043a\u0441\u0435.\n\u0441\u0447\u0438\u0442\u0430\u044e, \u0447\u0442\u043e \u043e\u043d \u043f\u043e\u043b\u0435\u0437\u0435\u043d.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408248625", "createdAt": "2020-04-14T15:55:10Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    // \u0431\u0435\u0437 EOF \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430\n+    tokens.subList(0, tokens.size() - 1)\n+      .stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    var eofLine = getEofToken(tokens).getLine();\n+    checkLastToken(eofLine, prevLineStorage[0]);\n+  }\n+\n+  private void checkLastToken(int eofLine, int prevLine) {\n+    // \u0435\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043f\u0430\u0440\u0441\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d \u0441 \u0442\u0435\u043c \u0436\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438,\n+    // \u0447\u0442\u043e \u0438 \u0442\u043e\u043a\u0435\u043d, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432. \u0432 \u0442\u0435\u0441\u0442\u0435 \u044d\u0442\u043e\u0442 \u043a\u0435\u0439\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f.\n+    if (eofLine - prevLine > allowedEmptyLinesCount){\n+      addIssue(prevLine, eofLine);\n+    }\n+  }\n+\n+  private static Token getEofToken(List<Token> tokens) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5MDc1OQ=="}, "originalCommit": {"oid": "890c65954bfc9c50dd76adfa5eba85ea30c971ae"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwMjg4Mg==", "bodyText": "\u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u0434\u0435\u043b\u0430\u043b \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434, \u0442\u0435\u043f\u0435\u0440\u044c \u044d\u0442\u043e\nprivate static int getEofTokenLine(List tokens) {\nreturn tokens.get(tokens.size() - 1).getLine();\n}", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r408402882", "createdAt": "2020-04-14T20:06:41Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int nonAllowedEmptyLinesCount = allowedEmptyLinesCount + 1;\n+    final int[] prevLineStorage = {0};\n+    // \u0431\u0435\u0437 EOF \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430\n+    tokens.subList(0, tokens.size() - 1)\n+      .stream()\n+      .filter(token -> !isWhiteSpace(token))\n+      .map(Token::getLine)\n+      .distinct()\n+      .forEachOrdered(currLine -> {\n+\n+        var prevLine = prevLineStorage[0];\n+        if (currLine - prevLine > nonAllowedEmptyLinesCount) {\n+            addIssue(prevLine, currLine - 1);\n+        } else if (prevLine == 1 && currLine - 1 > nonAllowedEmptyLinesCount) {\n+          // \u0435\u0441\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u0434\u0432\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0443\u0441\u0442\u044b\u0435\n+          addIssue(0, currLine - 1);\n+        }\n+        prevLineStorage[0] = currLine;\n+      });\n+\n+    var eofLine = getEofToken(tokens).getLine();\n+    checkLastToken(eofLine, prevLineStorage[0]);\n+  }\n+\n+  private void checkLastToken(int eofLine, int prevLine) {\n+    // \u0435\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u0444\u0430\u0439\u043b\u0430 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u043f\u0430\u0440\u0441\u0435\u0440 \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d \u0441 \u0442\u0435\u043c \u0436\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438,\n+    // \u0447\u0442\u043e \u0438 \u0442\u043e\u043a\u0435\u043d, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432. \u0432 \u0442\u0435\u0441\u0442\u0435 \u044d\u0442\u043e\u0442 \u043a\u0435\u0439\u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f.\n+    if (eofLine - prevLine > allowedEmptyLinesCount){\n+      addIssue(prevLine, eofLine);\n+    }\n+  }\n+\n+  private static Token getEofToken(List<Token> tokens) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5MDc1OQ=="}, "originalCommit": {"oid": "890c65954bfc9c50dd76adfa5eba85ea30c971ae"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTM5MDI1OnYy", "diffSide": "RIGHT", "path": "src/test/resources/cli/test.bsl", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzozNzozOFrOGGEdoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOToyMzo1NFrOGGIQFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxNzc2MA==", "bodyText": "\u0410 \u0432\u043e\u0442 \u044d\u0442\u043e \u043d\u0435 \u043d\u0430\u0434\u043e \u0431\u044b\u043b\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0438\u0442\u044c =(", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r409017760", "createdAt": "2020-04-15T17:37:38Z", "author": {"login": "asosnoviy"}, "path": "src/test/resources/cli/test.bsl", "diffHunk": "@@ -1 +1 @@\n-\u0421\u043e\u043e\u0431\u0449\u0438\u0442\u044c(\"\u041f\u0440\u0438\u0432\u0435\u0442, \u043c\u0438\u0440!\");\n+\u0421\u043e\u043e\u0431\u0449\u0438\u0442\u044c(\"\u041f\u0440\u0438\u0432\u0435\u0442, \u043c\u0438\u0440!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d91edd1f5ce1bc22846f949d93cd5d960e642b2e"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3MDkyMw==", "bodyText": "\u043e\u043d\u043e \u043a\u0430\u043a-\u0442\u043e \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u043e\u043c \u043f\u043e\u044f\u0432\u0438\u043b\u043e\u0441\u044c (", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r409070923", "createdAt": "2020-04-15T19:07:58Z", "author": {"login": "artbear"}, "path": "src/test/resources/cli/test.bsl", "diffHunk": "@@ -1 +1 @@\n-\u0421\u043e\u043e\u0431\u0449\u0438\u0442\u044c(\"\u041f\u0440\u0438\u0432\u0435\u0442, \u043c\u0438\u0440!\");\n+\u0421\u043e\u043e\u0431\u0449\u0438\u0442\u044c(\"\u041f\u0440\u0438\u0432\u0435\u0442, \u043c\u0438\u0440!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxNzc2MA=="}, "originalCommit": {"oid": "d91edd1f5ce1bc22846f949d93cd5d960e642b2e"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3OTgyOA==", "bodyText": "\u0414\u0430 \u044d\u0442\u043e \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0442 \u043a\u0430\u043a\u043e\u0439\u0442\u043e \u043e\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u0438\u044f EOF.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r409079828", "createdAt": "2020-04-15T19:23:54Z", "author": {"login": "asosnoviy"}, "path": "src/test/resources/cli/test.bsl", "diffHunk": "@@ -1 +1 @@\n-\u0421\u043e\u043e\u0431\u0449\u0438\u0442\u044c(\"\u041f\u0440\u0438\u0432\u0435\u0442, \u043c\u0438\u0440!\");\n+\u0421\u043e\u043e\u0431\u0449\u0438\u0442\u044c(\"\u041f\u0440\u0438\u0432\u0435\u0442, \u043c\u0438\u0440!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxNzc2MA=="}, "originalCommit": {"oid": "d91edd1f5ce1bc22846f949d93cd5d960e642b2e"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDE4MDY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwOTo0NTozMFrOGHpq0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDoyNTo0NVrOGIXNHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTkyMw==", "bodyText": "@artbear \u0440\u0430\u0441\u0441\u043a\u0430\u0436\u0438, \u043f\u043b\u0437, \u0447\u0442\u043e \u043d\u0435 \u0442\u0430\u043a \u0441 EOF?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r410675923", "createdAt": "2020-04-18T09:45:30Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int[] prevLineStorage = {0};\n+    // \u0431\u0435\u0437 EOF, \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d91edd1f5ce1bc22846f949d93cd5d960e642b2e"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY4NDAyMw==", "bodyText": "\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0442\u043e\u043a\u0435\u043d (\u0415\u041e\u0424) \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e, \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430.\n\u0442.\u043a. \u043e\u043d \u0442\u043e\u0447\u043d\u043e \u0435\u0441\u0442\u044c \u0432\u0441\u0435\u0433\u0434\u0430, \u043d\u043e \u0434\u043b\u044f \u043d\u0435\u0433\u043e \u043d\u0443\u0436\u043d\u0430 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a, \u0447\u0442\u043e \u0432\u0438\u0434\u043d\u043e \u0438\u0437 \u043a\u043e\u0434\u0430 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r410684023", "createdAt": "2020-04-18T11:10:22Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int[] prevLineStorage = {0};\n+    // \u0431\u0435\u0437 EOF, \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTkyMw=="}, "originalCommit": {"oid": "d91edd1f5ce1bc22846f949d93cd5d960e642b2e"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY4NDE5MA==", "bodyText": "\u042f \u0432\u0438\u0436\u0443, \u0447\u0442\u043e \u043e\u043d \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u0434\u0440\u0443\u0433\u043e\u043c\u0443, \u043d\u043e \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u044e \u0437\u0430\u0447\u0435\u043c.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r410684190", "createdAt": "2020-04-18T11:12:26Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int[] prevLineStorage = {0};\n+    // \u0431\u0435\u0437 EOF, \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTkyMw=="}, "originalCommit": {"oid": "d91edd1f5ce1bc22846f949d93cd5d960e642b2e"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg2OTUxNQ==", "bodyText": "\u044f \u0443\u0436\u0435 \u043f\u0438\u0441\u0430\u043b \u0432\u044b\u0448\u0435 - \u0435\u0441\u043b\u0438 \u0432 \u043a\u043e\u043d\u0446\u0435 \u043c\u043e\u0434\u0443\u043b\u044f \u0435\u0441\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438, \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a, \u0447\u0442\u043e \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u043d\u0430 \u043e\u0434\u043d\u0443 \u0431\u043e\u043b\u044c\u0448\u0435 )\n\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u043a\u043e\u043d\u0446\u0435 \u043e\u0434\u043d\u0430 \u043f\u0443\u0441\u0442\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438 \u0415\u041e\u0424, \u0430 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432\u0438\u0434\u043d\u043e \u0434\u0432\u0435.\n\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0432 \u043a\u043e\u043d\u0446\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u043d\u0430 \u043e\u0434\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u0443 \u043c\u0435\u043d\u044c\u0448\u0435.\n\u0432\u044b\u0448\u0435 \u0431\u044b\u043b \u0441\u043a\u0440\u0438\u043d. \u043f\u043e\u0432\u0442\u043e\u0440\u044e \u0435\u0433\u043e", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r410869515", "createdAt": "2020-04-19T10:10:49Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int[] prevLineStorage = {0};\n+    // \u0431\u0435\u0437 EOF, \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTkyMw=="}, "originalCommit": {"oid": "d91edd1f5ce1bc22846f949d93cd5d960e642b2e"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg2OTYzMg==", "bodyText": "\u0442.\u0435. 35 \u043d\u0430 \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u0435 - \u044d\u0442\u043e \u0415\u041e\u0424, \u0442\u0430\u043c \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435\u0442.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r410869632", "createdAt": "2020-04-19T10:11:31Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int[] prevLineStorage = {0};\n+    // \u0431\u0435\u0437 EOF, \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTkyMw=="}, "originalCommit": {"oid": "d91edd1f5ce1bc22846f949d93cd5d960e642b2e"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg2OTcwOA==", "bodyText": "\u0435\u0441\u0442\u044c \u043c\u0438\u043d\u0438-\u0442\u0435\u0441\u0442\u044b \u043d\u0430 \u044d\u0442\u043e\u0442 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0439, \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438, \u0435\u0441\u043b\u0438 \u0445\u043e\u0447\u0435\u0448\u044c.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r410869708", "createdAt": "2020-04-19T10:11:56Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int[] prevLineStorage = {0};\n+    // \u0431\u0435\u0437 EOF, \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTkyMw=="}, "originalCommit": {"oid": "d91edd1f5ce1bc22846f949d93cd5d960e642b2e"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE4MTYyNA==", "bodyText": "@nixel2007 \u0435\u0441\u043b\u0438 \u043e\u0442\u0432\u0435\u0442\u0438\u043b, \u0437\u0430\u043a\u0440\u043e\u0435\u0448\u044c \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0435?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r411181624", "createdAt": "2020-04-20T08:14:41Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int[] prevLineStorage = {0};\n+    // \u0431\u0435\u0437 EOF, \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTkyMw=="}, "originalCommit": {"oid": "d91edd1f5ce1bc22846f949d93cd5d960e642b2e"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxMDQ5OQ==", "bodyText": "\u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a, \u0447\u0442\u043e \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u043d\u0430 \u043e\u0434\u043d\u0443 \u0431\u043e\u043b\u044c\u0448\u0435 )\n\n\u0442\u043e\u043b\u044c\u043a\u043e \u0432 VSCode. \u0432 \u0441\u043e\u043d\u0430\u0440\u0435 \u0438 \u0433\u0438\u0442\u0445\u0430\u0431\u0435 EOF \u043d\u0435 \u0440\u0438\u0441\u0443\u0435\u0442\u0441\u044f.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r411410499", "createdAt": "2020-04-20T14:11:31Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int[] prevLineStorage = {0};\n+    // \u0431\u0435\u0437 EOF, \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTkyMw=="}, "originalCommit": {"oid": "d91edd1f5ce1bc22846f949d93cd5d960e642b2e"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMTk4Mw==", "bodyText": "\u0442\u043e\u043b\u044c\u043a\u043e \u0432 VSCode. \u0432 \u0441\u043e\u043d\u0430\u0440\u0435 \u0438 \u0433\u0438\u0442\u0445\u0430\u0431\u0435 EOF \u043d\u0435 \u0440\u0438\u0441\u0443\u0435\u0442\u0441\u044f.\n\n\u043d\u0443 \u0434\u0430, \u0442\u0430\u043a \u0438 \u0435\u0441\u0442\u044c. \u0438 \u0447\u0435\u043c \u044d\u0442\u043e \u043f\u043b\u043e\u0445\u043e?\n\u043a\u0432\u0438\u043a-\u0444\u0438\u043a\u0441 \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c.\n\u0434\u0430 \u0438 \u0432 \u0441\u043e\u043d\u0430\u0440\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043e.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r411421983", "createdAt": "2020-04-20T14:25:45Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/ConsecutiveEmptyLinesDiagnostic.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.providers.CodeActionProvider;\n+import com.github._1c_syntax.bsl.languageserver.utils.Ranges;\n+import com.github._1c_syntax.bsl.parser.BSLLexer;\n+import org.antlr.v4.runtime.Token;\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextEdit;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+\n+)\n+public class ConsecutiveEmptyLinesDiagnostic extends AbstractDiagnostic implements QuickFixProvider {\n+\n+  private static final int DEFAULT_ALLOWED_EMPTY_LINES_COUNT = 1;\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_ALLOWED_EMPTY_LINES_COUNT\n+  )\n+  private int allowedEmptyLinesCount = DEFAULT_ALLOWED_EMPTY_LINES_COUNT;\n+\n+  public ConsecutiveEmptyLinesDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    final var tokens = documentContext.getTokens();\n+    if (tokens.isEmpty()){\n+      return;\n+    }\n+\n+    final int[] prevLineStorage = {0};\n+    // \u0431\u0435\u0437 EOF, \u0442.\u043a. \u0435\u0433\u043e \u043f\u0440\u043e\u0449\u0435 \u0438 \u0447\u0443\u0442\u044c \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0432\u043d\u0435 \u0446\u0438\u043a\u043b\u0430", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTkyMw=="}, "originalCommit": {"oid": "d91edd1f5ce1bc22846f949d93cd5d960e642b2e"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDE4MDgyOnYy", "diffSide": "RIGHT", "path": "docs/diagnostics/ConsecutiveEmptyLines.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwOTo0NTo0N1rOGHpq6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODoxNDoyNVrOGIIhow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTk0NA==", "bodyText": "\u043d\u0430\u0434\u043e \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0434\u043e\u043a\u0443 \u0432 \u043f\u043e\u0440\u044f\u0434\u043e\u043a", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r410675944", "createdAt": "2020-04-18T09:45:47Z", "author": {"login": "nixel2007"}, "path": "docs/diagnostics/ConsecutiveEmptyLines.md", "diffHunk": "@@ -0,0 +1,51 @@\n+# \u041f\u043e\u0434\u0440\u044f\u0434 \u0438\u0434\u0443\u0449\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 (ConsecutiveEmptyLines)\n+\n+| \u0422\u0438\u043f | \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f<br/>\u044f\u0437\u044b\u043a\u0438 | \u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c | \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u0430<br/>\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e | \u0412\u0440\u0435\u043c\u044f \u043d\u0430<br/>\u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 (\u043c\u0438\u043d) | \u0422\u044d\u0433\u0438 |\n+| :-: | :-: | :-: | :-: | :-: | :-: |\n+| `\u0414\u0435\u0444\u0435\u043a\u0442 \u043a\u043e\u0434\u0430` | `BSL`<br/>`OS` | `\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439` | `\u0414\u0430` | `1` | `badpractice` |\n+\n+## \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \n+\n+| \u0418\u043c\u044f | \u0422\u0438\u043f | \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 | \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e |\n+| :-: | :-: | :-- | :-: |\n+| `allowedEmptyLinesCount` | `\u0426\u0435\u043b\u043e\u0435` | ```\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a``` | ```1``` |\n+\n+<!-- \u0411\u043b\u043e\u043a\u0438 \u0432\u044b\u0448\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438, \u043d\u0435 \u0442\u0440\u043e\u0433\u0430\u0442\u044c -->\n+## \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438\n+<!-- \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0432\u0440\u0443\u0447\u043d\u0443\u044e. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u043c \u044f\u0437\u044b\u043a\u043e\u043c \u043e\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043c\u044b\u0441\u043b \u0438 \u0441\u0445\u0435\u043c\u0443 \u0440\u0430\u0431\u043e\u0442\u0443 -->\n+\n+\u0414\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0431\u043b\u043e\u043a\u043e\u0432 \u043a\u043e\u0434\u0430 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432\u0441\u0442\u0430\u0432\u043a\u0430 \u043f\u0443\u0441\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438. \n+\n+\u0412\u0441\u0442\u0430\u0432\u043a\u0430 2-\u0445 \u0438 \u0431\u043e\u043b\u0435\u0435 \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u043d\u0435 \u043d\u0435\u0441\u0435\u0442 \u0434\u0430\u043d\u043d\u043e\u0439 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0438 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u0431\u0435\u0441\u0441\u043c\u044b\u0441\u043b\u0435\u043d\u043d\u043e\u043c\u0443 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u044e \u0434\u043b\u0438\u043d\u044b \u043c\u0435\u0442\u043e\u0434\u0430 \u0438\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044f.\n+<!-- \u0411\u043b\u043e\u043a\u0438 \u043d\u0438\u0436\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438, \u043d\u0435 \u0442\u0440\u043e\u0433\u0430\u0442\u044c -->\n+\n+### \u042d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u0434\u0430", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d91edd1f5ce1bc22846f949d93cd5d960e642b2e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg2ODg1Ng==", "bodyText": "\u0434\u043e\u043a\u0430 \u043f\u043e\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r410868856", "createdAt": "2020-04-19T10:06:46Z", "author": {"login": "artbear"}, "path": "docs/diagnostics/ConsecutiveEmptyLines.md", "diffHunk": "@@ -0,0 +1,51 @@\n+# \u041f\u043e\u0434\u0440\u044f\u0434 \u0438\u0434\u0443\u0449\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 (ConsecutiveEmptyLines)\n+\n+| \u0422\u0438\u043f | \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f<br/>\u044f\u0437\u044b\u043a\u0438 | \u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c | \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u0430<br/>\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e | \u0412\u0440\u0435\u043c\u044f \u043d\u0430<br/>\u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 (\u043c\u0438\u043d) | \u0422\u044d\u0433\u0438 |\n+| :-: | :-: | :-: | :-: | :-: | :-: |\n+| `\u0414\u0435\u0444\u0435\u043a\u0442 \u043a\u043e\u0434\u0430` | `BSL`<br/>`OS` | `\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439` | `\u0414\u0430` | `1` | `badpractice` |\n+\n+## \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \n+\n+| \u0418\u043c\u044f | \u0422\u0438\u043f | \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 | \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e |\n+| :-: | :-: | :-- | :-: |\n+| `allowedEmptyLinesCount` | `\u0426\u0435\u043b\u043e\u0435` | ```\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a``` | ```1``` |\n+\n+<!-- \u0411\u043b\u043e\u043a\u0438 \u0432\u044b\u0448\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438, \u043d\u0435 \u0442\u0440\u043e\u0433\u0430\u0442\u044c -->\n+## \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438\n+<!-- \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0432\u0440\u0443\u0447\u043d\u0443\u044e. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u043c \u044f\u0437\u044b\u043a\u043e\u043c \u043e\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043c\u044b\u0441\u043b \u0438 \u0441\u0445\u0435\u043c\u0443 \u0440\u0430\u0431\u043e\u0442\u0443 -->\n+\n+\u0414\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0431\u043b\u043e\u043a\u043e\u0432 \u043a\u043e\u0434\u0430 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432\u0441\u0442\u0430\u0432\u043a\u0430 \u043f\u0443\u0441\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438. \n+\n+\u0412\u0441\u0442\u0430\u0432\u043a\u0430 2-\u0445 \u0438 \u0431\u043e\u043b\u0435\u0435 \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u043d\u0435 \u043d\u0435\u0441\u0435\u0442 \u0434\u0430\u043d\u043d\u043e\u0439 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0438 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u0431\u0435\u0441\u0441\u043c\u044b\u0441\u043b\u0435\u043d\u043d\u043e\u043c\u0443 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u044e \u0434\u043b\u0438\u043d\u044b \u043c\u0435\u0442\u043e\u0434\u0430 \u0438\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044f.\n+<!-- \u0411\u043b\u043e\u043a\u0438 \u043d\u0438\u0436\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438, \u043d\u0435 \u0442\u0440\u043e\u0433\u0430\u0442\u044c -->\n+\n+### \u042d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u0434\u0430", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTk0NA=="}, "originalCommit": {"oid": "d91edd1f5ce1bc22846f949d93cd5d960e642b2e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE4MTQ3NQ==", "bodyText": "@nixel2007 \u0437\u0430\u043a\u0440\u043e\u0435\u0448\u044c \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0435?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1030#discussion_r411181475", "createdAt": "2020-04-20T08:14:25Z", "author": {"login": "artbear"}, "path": "docs/diagnostics/ConsecutiveEmptyLines.md", "diffHunk": "@@ -0,0 +1,51 @@\n+# \u041f\u043e\u0434\u0440\u044f\u0434 \u0438\u0434\u0443\u0449\u0438\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 (ConsecutiveEmptyLines)\n+\n+| \u0422\u0438\u043f | \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f<br/>\u044f\u0437\u044b\u043a\u0438 | \u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c | \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u0430<br/>\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e | \u0412\u0440\u0435\u043c\u044f \u043d\u0430<br/>\u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 (\u043c\u0438\u043d) | \u0422\u044d\u0433\u0438 |\n+| :-: | :-: | :-: | :-: | :-: | :-: |\n+| `\u0414\u0435\u0444\u0435\u043a\u0442 \u043a\u043e\u0434\u0430` | `BSL`<br/>`OS` | `\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439` | `\u0414\u0430` | `1` | `badpractice` |\n+\n+## \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \n+\n+| \u0418\u043c\u044f | \u0422\u0438\u043f | \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 | \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e |\n+| :-: | :-: | :-- | :-: |\n+| `allowedEmptyLinesCount` | `\u0426\u0435\u043b\u043e\u0435` | ```\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a``` | ```1``` |\n+\n+<!-- \u0411\u043b\u043e\u043a\u0438 \u0432\u044b\u0448\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438, \u043d\u0435 \u0442\u0440\u043e\u0433\u0430\u0442\u044c -->\n+## \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438\n+<!-- \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0432\u0440\u0443\u0447\u043d\u0443\u044e. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u043c \u044f\u0437\u044b\u043a\u043e\u043c \u043e\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043c\u044b\u0441\u043b \u0438 \u0441\u0445\u0435\u043c\u0443 \u0440\u0430\u0431\u043e\u0442\u0443 -->\n+\n+\u0414\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0431\u043b\u043e\u043a\u043e\u0432 \u043a\u043e\u0434\u0430 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432\u0441\u0442\u0430\u0432\u043a\u0430 \u043f\u0443\u0441\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438. \n+\n+\u0412\u0441\u0442\u0430\u0432\u043a\u0430 2-\u0445 \u0438 \u0431\u043e\u043b\u0435\u0435 \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a \u043d\u0435 \u043d\u0435\u0441\u0435\u0442 \u0434\u0430\u043d\u043d\u043e\u0439 \u0446\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0438 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a \u0431\u0435\u0441\u0441\u043c\u044b\u0441\u043b\u0435\u043d\u043d\u043e\u043c\u0443 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u044e \u0434\u043b\u0438\u043d\u044b \u043c\u0435\u0442\u043e\u0434\u0430 \u0438\u043b\u0438 \u043c\u043e\u0434\u0443\u043b\u044f.\n+<!-- \u0411\u043b\u043e\u043a\u0438 \u043d\u0438\u0436\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438, \u043d\u0435 \u0442\u0440\u043e\u0433\u0430\u0442\u044c -->\n+\n+### \u042d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u0434\u0430", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY3NTk0NA=="}, "originalCommit": {"oid": "d91edd1f5ce1bc22846f949d93cd5d960e642b2e"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4932, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}