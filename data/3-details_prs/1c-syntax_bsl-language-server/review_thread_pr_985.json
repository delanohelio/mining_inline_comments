{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0Njg2NDEx", "number": 985, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTowNzoxOFrODluW-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzo0NzoyM1rODmTBjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODgzNDQ5OnYy", "diffSide": "RIGHT", "path": "docs/diagnostics/Typo.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTowNzoxOFrOFyxl9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo1MjoyMVrOFyy9cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4NTY1NQ==", "bodyText": "\u041d\u0430\u043f\u0438\u0448\u0438 \u043f\u043e\u0431\u043e\u043b\u044c\u0448\u0435", "url": "https://github.com/1c-syntax/bsl-language-server/pull/985#discussion_r388785655", "createdAt": "2020-03-06T09:07:18Z", "author": {"login": "theshadowco"}, "path": "docs/diagnostics/Typo.md", "diffHunk": "@@ -0,0 +1,62 @@\n+# \u041e\u043f\u0435\u0447\u0430\u0442\u043a\u0430 (Typo)\n+\n+| \u0422\u0438\u043f | \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f<br/>\u044f\u0437\u044b\u043a\u0438 | \u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c | \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u0430<br/>\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e | \u0412\u0440\u0435\u043c\u044f \u043d\u0430<br/>\u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 (\u043c\u0438\u043d) | \u0422\u044d\u0433\u0438 |\n+| :-: | :-: | :-: | :-: | :-: | :-: |\n+| `\u0414\u0435\u0444\u0435\u043a\u0442 \u043a\u043e\u0434\u0430` | `BSL`<br/>`OS` | `\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439` | `\u0414\u0430` | `1` | `badpractice` |\n+\n+## \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \n+\n+| \u0418\u043c\u044f | \u0422\u0438\u043f | \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 | \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e |\n+| :-: | :-: | :-- | :-: |\n+| `userWordsToIgnore` | `\u0421\u0442\u0440\u043e\u043a\u0430` | ```\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439``` | `````` |\n+| `minWordLength` | `\u0426\u0435\u043b\u043e\u0435` | ```\u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\u044b\u0445 \u0441\u043b\u043e\u0432``` | ```3``` |\n+\n+<!-- \u0411\u043b\u043e\u043a\u0438 \u0432\u044b\u0448\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438, \u043d\u0435 \u0442\u0440\u043e\u0433\u0430\u0442\u044c -->\n+## \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438\n+<!-- \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0432\u0440\u0443\u0447\u043d\u0443\u044e. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u043c \u044f\u0437\u044b\u043a\u043e\u043c \u043e\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043c\u044b\u0441\u043b \u0438 \u0441\u0445\u0435\u043c\u0443 \u0440\u0430\u0431\u043e\u0442\u0443 -->\n+\u041e\u0440\u0444\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430 ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e58c2c16753028e6f457669699f910161174a5c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwODA1MQ==", "bodyText": "@theshadowco Done", "url": "https://github.com/1c-syntax/bsl-language-server/pull/985#discussion_r388808051", "createdAt": "2020-03-06T09:52:21Z", "author": {"login": "EightM"}, "path": "docs/diagnostics/Typo.md", "diffHunk": "@@ -0,0 +1,62 @@\n+# \u041e\u043f\u0435\u0447\u0430\u0442\u043a\u0430 (Typo)\n+\n+| \u0422\u0438\u043f | \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f<br/>\u044f\u0437\u044b\u043a\u0438 | \u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c | \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u0430<br/>\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e | \u0412\u0440\u0435\u043c\u044f \u043d\u0430<br/>\u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 (\u043c\u0438\u043d) | \u0422\u044d\u0433\u0438 |\n+| :-: | :-: | :-: | :-: | :-: | :-: |\n+| `\u0414\u0435\u0444\u0435\u043a\u0442 \u043a\u043e\u0434\u0430` | `BSL`<br/>`OS` | `\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439` | `\u0414\u0430` | `1` | `badpractice` |\n+\n+## \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \n+\n+| \u0418\u043c\u044f | \u0422\u0438\u043f | \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 | \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e |\n+| :-: | :-: | :-- | :-: |\n+| `userWordsToIgnore` | `\u0421\u0442\u0440\u043e\u043a\u0430` | ```\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439``` | `````` |\n+| `minWordLength` | `\u0426\u0435\u043b\u043e\u0435` | ```\u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043b\u0438\u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\u044b\u0445 \u0441\u043b\u043e\u0432``` | ```3``` |\n+\n+<!-- \u0411\u043b\u043e\u043a\u0438 \u0432\u044b\u0448\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438, \u043d\u0435 \u0442\u0440\u043e\u0433\u0430\u0442\u044c -->\n+## \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438\n+<!-- \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0432\u0440\u0443\u0447\u043d\u0443\u044e. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u043c \u044f\u0437\u044b\u043a\u043e\u043c \u043e\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043c\u044b\u0441\u043b \u0438 \u0441\u0445\u0435\u043c\u0443 \u0440\u0430\u0431\u043e\u0442\u0443 -->\n+\u041e\u0440\u0444\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0448\u0438\u0431\u043a\u0430 ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4NTY1NQ=="}, "originalCommit": {"oid": "9e58c2c16753028e6f457669699f910161174a5c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODgzNzk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/TypoDiagnostic.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTowODozNlrOFyxoLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOToyMzo1NVrOFyyD2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4NjIyMg==", "bodyText": "\u041c\u043e\u0436\u0435\u0442 \u0441\u0442\u043e\u0438\u0442 \u0434\u043e\u043f\u0438\u0441\u0430\u0442\u044c \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/985#discussion_r388786222", "createdAt": "2020-03-06T09:08:36Z", "author": {"login": "theshadowco"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/TypoDiagnostic.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import lombok.extern.slf4j.Slf4j;\n+import org.antlr.v4.runtime.Token;\n+import org.apache.commons.lang3.StringUtils;\n+import org.languagetool.JLanguageTool;\n+import org.languagetool.language.AmericanEnglish;\n+import org.languagetool.language.Russian;\n+import org.languagetool.rules.Rule;\n+import org.languagetool.rules.RuleMatch;\n+import org.languagetool.rules.spelling.SpellingCheckRule;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+)\n+\n+@Slf4j\n+public class TypoDiagnostic extends AbstractDiagnostic {\n+\n+  private static final Russian ruLang = new Russian();\n+  private static final AmericanEnglish enLang = new AmericanEnglish();\n+  private static final JLanguageTool ruLangTool = new JLanguageTool(ruLang);\n+  private static final JLanguageTool enLangTool = new JLanguageTool(enLang);\n+  private static Map<String, JLanguageTool> languageToolMap = new HashMap<>();\n+\n+  private static final int DEFAULT_MIN_WORD_LENGTH = 3;\n+  private static final String DEFAULT_USER_WORDS_TO_IGNORE = \"\";\n+\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_MIN_WORD_LENGTH\n+  )\n+  private int minWordLength = DEFAULT_MIN_WORD_LENGTH;\n+\n+  @DiagnosticParameter(\n+    type = String.class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e58c2c16753028e6f457669699f910161174a5c"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MzMwNQ==", "bodyText": "@theshadowco \u0414\u0435\u0444\u043e\u043b\u0442\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u044d\u0442\u043e \u043f\u0443\u0441\u0442\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430. \u041e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0443\u0441\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 IDEA \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u0442 \u043a\u0430\u043a \u0438\u0437\u0431\u044b\u0442\u043e\u0447\u043d\u043e\u0435.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/985#discussion_r388793305", "createdAt": "2020-03-06T09:23:55Z", "author": {"login": "EightM"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/TypoDiagnostic.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import lombok.extern.slf4j.Slf4j;\n+import org.antlr.v4.runtime.Token;\n+import org.apache.commons.lang3.StringUtils;\n+import org.languagetool.JLanguageTool;\n+import org.languagetool.language.AmericanEnglish;\n+import org.languagetool.language.Russian;\n+import org.languagetool.rules.Rule;\n+import org.languagetool.rules.RuleMatch;\n+import org.languagetool.rules.spelling.SpellingCheckRule;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+)\n+\n+@Slf4j\n+public class TypoDiagnostic extends AbstractDiagnostic {\n+\n+  private static final Russian ruLang = new Russian();\n+  private static final AmericanEnglish enLang = new AmericanEnglish();\n+  private static final JLanguageTool ruLangTool = new JLanguageTool(ruLang);\n+  private static final JLanguageTool enLangTool = new JLanguageTool(enLang);\n+  private static Map<String, JLanguageTool> languageToolMap = new HashMap<>();\n+\n+  private static final int DEFAULT_MIN_WORD_LENGTH = 3;\n+  private static final String DEFAULT_USER_WORDS_TO_IGNORE = \"\";\n+\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_MIN_WORD_LENGTH\n+  )\n+  private int minWordLength = DEFAULT_MIN_WORD_LENGTH;\n+\n+  @DiagnosticParameter(\n+    type = String.class", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4NjIyMg=="}, "originalCommit": {"oid": "9e58c2c16753028e6f457669699f910161174a5c"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODg0MzkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/TypoDiagnostic.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOToxMDo0MVrOFyxrnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo1MjozM1rOFyy96w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4NzEwMw==", "bodyText": "\u043b\u0443\u0447\u0448\u0435 \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043e\u043d\u0430\u0440 \u0437\u0430\u0440\u0443\u0433\u0430\u0435\u0442\u0441\u044f", "url": "https://github.com/1c-syntax/bsl-language-server/pull/985#discussion_r388787103", "createdAt": "2020-03-06T09:10:41Z", "author": {"login": "theshadowco"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/TypoDiagnostic.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import lombok.extern.slf4j.Slf4j;\n+import org.antlr.v4.runtime.Token;\n+import org.apache.commons.lang3.StringUtils;\n+import org.languagetool.JLanguageTool;\n+import org.languagetool.language.AmericanEnglish;\n+import org.languagetool.language.Russian;\n+import org.languagetool.rules.Rule;\n+import org.languagetool.rules.RuleMatch;\n+import org.languagetool.rules.spelling.SpellingCheckRule;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+)\n+\n+@Slf4j\n+public class TypoDiagnostic extends AbstractDiagnostic {\n+\n+  private static final Russian ruLang = new Russian();\n+  private static final AmericanEnglish enLang = new AmericanEnglish();\n+  private static final JLanguageTool ruLangTool = new JLanguageTool(ruLang);\n+  private static final JLanguageTool enLangTool = new JLanguageTool(enLang);\n+  private static Map<String, JLanguageTool> languageToolMap = new HashMap<>();\n+\n+  private static final int DEFAULT_MIN_WORD_LENGTH = 3;\n+  private static final String DEFAULT_USER_WORDS_TO_IGNORE = \"\";\n+\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_MIN_WORD_LENGTH\n+  )\n+  private int minWordLength = DEFAULT_MIN_WORD_LENGTH;\n+\n+  @DiagnosticParameter(\n+    type = String.class\n+  )\n+  private String userWordsToIgnore = DEFAULT_USER_WORDS_TO_IGNORE;\n+\n+  public TypoDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    if (configuration == null) {\n+      return;\n+    }\n+    minWordLength = (int) configuration.getOrDefault(\"minWordLength\", minWordLength);\n+    userWordsToIgnore = (String) configuration.getOrDefault(\"userWordsToIgnore\", userWordsToIgnore);\n+  }\n+\n+  private ArrayList<String> getWordsToIgnore() {\n+    String exceptions = info.getResourceString(\"diagnosticExceptions\").replaceAll(\"\\n\", \"\");\n+    return new ArrayList<>(Arrays.asList(exceptions.split(\",\")));\n+  }\n+\n+  private ArrayList<String> getUserWordsToIgnore() {\n+    String exceptions = userWordsToIgnore.replaceAll(\"\\n\", \"\");\n+    return new ArrayList<>(Arrays.asList(exceptions.split(\",\")));\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    String lang = info.getResourceString(\"diagnosticLanguage\");\n+    ArrayList<String> wordsToIgnore = getWordsToIgnore();\n+\n+    languageToolMap.put(\"ru\", ruLangTool);\n+    languageToolMap.put(\"en\", enLangTool);\n+\n+    languageToolMap.get(lang).getAllRules().stream().filter(rule -> !rule.isDictionaryBasedSpellingRule()).map(Rule::getId).forEach(languageToolMap.get(lang)::disableRule);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e58c2c16753028e6f457669699f910161174a5c"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwODE3MQ==", "bodyText": "@theshadowco Done", "url": "https://github.com/1c-syntax/bsl-language-server/pull/985#discussion_r388808171", "createdAt": "2020-03-06T09:52:33Z", "author": {"login": "EightM"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/TypoDiagnostic.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import lombok.extern.slf4j.Slf4j;\n+import org.antlr.v4.runtime.Token;\n+import org.apache.commons.lang3.StringUtils;\n+import org.languagetool.JLanguageTool;\n+import org.languagetool.language.AmericanEnglish;\n+import org.languagetool.language.Russian;\n+import org.languagetool.rules.Rule;\n+import org.languagetool.rules.RuleMatch;\n+import org.languagetool.rules.spelling.SpellingCheckRule;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+)\n+\n+@Slf4j\n+public class TypoDiagnostic extends AbstractDiagnostic {\n+\n+  private static final Russian ruLang = new Russian();\n+  private static final AmericanEnglish enLang = new AmericanEnglish();\n+  private static final JLanguageTool ruLangTool = new JLanguageTool(ruLang);\n+  private static final JLanguageTool enLangTool = new JLanguageTool(enLang);\n+  private static Map<String, JLanguageTool> languageToolMap = new HashMap<>();\n+\n+  private static final int DEFAULT_MIN_WORD_LENGTH = 3;\n+  private static final String DEFAULT_USER_WORDS_TO_IGNORE = \"\";\n+\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_MIN_WORD_LENGTH\n+  )\n+  private int minWordLength = DEFAULT_MIN_WORD_LENGTH;\n+\n+  @DiagnosticParameter(\n+    type = String.class\n+  )\n+  private String userWordsToIgnore = DEFAULT_USER_WORDS_TO_IGNORE;\n+\n+  public TypoDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    if (configuration == null) {\n+      return;\n+    }\n+    minWordLength = (int) configuration.getOrDefault(\"minWordLength\", minWordLength);\n+    userWordsToIgnore = (String) configuration.getOrDefault(\"userWordsToIgnore\", userWordsToIgnore);\n+  }\n+\n+  private ArrayList<String> getWordsToIgnore() {\n+    String exceptions = info.getResourceString(\"diagnosticExceptions\").replaceAll(\"\\n\", \"\");\n+    return new ArrayList<>(Arrays.asList(exceptions.split(\",\")));\n+  }\n+\n+  private ArrayList<String> getUserWordsToIgnore() {\n+    String exceptions = userWordsToIgnore.replaceAll(\"\\n\", \"\");\n+    return new ArrayList<>(Arrays.asList(exceptions.split(\",\")));\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    String lang = info.getResourceString(\"diagnosticLanguage\");\n+    ArrayList<String> wordsToIgnore = getWordsToIgnore();\n+\n+    languageToolMap.put(\"ru\", ruLangTool);\n+    languageToolMap.put(\"en\", enLangTool);\n+\n+    languageToolMap.get(lang).getAllRules().stream().filter(rule -> !rule.isDictionaryBasedSpellingRule()).map(Rule::getId).forEach(languageToolMap.get(lang)::disableRule);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4NzEwMw=="}, "originalCommit": {"oid": "9e58c2c16753028e6f457669699f910161174a5c"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODg0NzkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/TypoDiagnostic.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOToxMjoxM1rOFyxuIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo1Mjo0MlrOFyy-OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4Nzc0NQ==", "bodyText": "\u0421\u0442\u043e\u0438\u0442 \u0437\u0430\u0449\u0438\u0442\u0443 \u043e\u0442 \u043c\u0435\u043d\u044c\u0448\u0435 2\u0445 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c", "url": "https://github.com/1c-syntax/bsl-language-server/pull/985#discussion_r388787745", "createdAt": "2020-03-06T09:12:13Z", "author": {"login": "theshadowco"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/TypoDiagnostic.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import lombok.extern.slf4j.Slf4j;\n+import org.antlr.v4.runtime.Token;\n+import org.apache.commons.lang3.StringUtils;\n+import org.languagetool.JLanguageTool;\n+import org.languagetool.language.AmericanEnglish;\n+import org.languagetool.language.Russian;\n+import org.languagetool.rules.Rule;\n+import org.languagetool.rules.RuleMatch;\n+import org.languagetool.rules.spelling.SpellingCheckRule;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+)\n+\n+@Slf4j\n+public class TypoDiagnostic extends AbstractDiagnostic {\n+\n+  private static final Russian ruLang = new Russian();\n+  private static final AmericanEnglish enLang = new AmericanEnglish();\n+  private static final JLanguageTool ruLangTool = new JLanguageTool(ruLang);\n+  private static final JLanguageTool enLangTool = new JLanguageTool(enLang);\n+  private static Map<String, JLanguageTool> languageToolMap = new HashMap<>();\n+\n+  private static final int DEFAULT_MIN_WORD_LENGTH = 3;\n+  private static final String DEFAULT_USER_WORDS_TO_IGNORE = \"\";\n+\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_MIN_WORD_LENGTH\n+  )\n+  private int minWordLength = DEFAULT_MIN_WORD_LENGTH;\n+\n+  @DiagnosticParameter(\n+    type = String.class\n+  )\n+  private String userWordsToIgnore = DEFAULT_USER_WORDS_TO_IGNORE;\n+\n+  public TypoDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    if (configuration == null) {\n+      return;\n+    }\n+    minWordLength = (int) configuration.getOrDefault(\"minWordLength\", minWordLength);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e58c2c16753028e6f457669699f910161174a5c"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwODI0OQ==", "bodyText": "@theshadowco Done", "url": "https://github.com/1c-syntax/bsl-language-server/pull/985#discussion_r388808249", "createdAt": "2020-03-06T09:52:42Z", "author": {"login": "EightM"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/TypoDiagnostic.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import lombok.extern.slf4j.Slf4j;\n+import org.antlr.v4.runtime.Token;\n+import org.apache.commons.lang3.StringUtils;\n+import org.languagetool.JLanguageTool;\n+import org.languagetool.language.AmericanEnglish;\n+import org.languagetool.language.Russian;\n+import org.languagetool.rules.Rule;\n+import org.languagetool.rules.RuleMatch;\n+import org.languagetool.rules.spelling.SpellingCheckRule;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+)\n+\n+@Slf4j\n+public class TypoDiagnostic extends AbstractDiagnostic {\n+\n+  private static final Russian ruLang = new Russian();\n+  private static final AmericanEnglish enLang = new AmericanEnglish();\n+  private static final JLanguageTool ruLangTool = new JLanguageTool(ruLang);\n+  private static final JLanguageTool enLangTool = new JLanguageTool(enLang);\n+  private static Map<String, JLanguageTool> languageToolMap = new HashMap<>();\n+\n+  private static final int DEFAULT_MIN_WORD_LENGTH = 3;\n+  private static final String DEFAULT_USER_WORDS_TO_IGNORE = \"\";\n+\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_MIN_WORD_LENGTH\n+  )\n+  private int minWordLength = DEFAULT_MIN_WORD_LENGTH;\n+\n+  @DiagnosticParameter(\n+    type = String.class\n+  )\n+  private String userWordsToIgnore = DEFAULT_USER_WORDS_TO_IGNORE;\n+\n+  public TypoDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    if (configuration == null) {\n+      return;\n+    }\n+    minWordLength = (int) configuration.getOrDefault(\"minWordLength\", minWordLength);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4Nzc0NQ=="}, "originalCommit": {"oid": "9e58c2c16753028e6f457669699f910161174a5c"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODg1MDk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/TypoDiagnostic.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOToxMzoxOVrOFyxv_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo1Mjo1MlrOFyy-oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4ODIyMA==", "bodyText": "\u041d\u0430\u0434\u043e \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 \u043d\u0430 \u0447\u0430\u0441\u0442\u0438", "url": "https://github.com/1c-syntax/bsl-language-server/pull/985#discussion_r388788220", "createdAt": "2020-03-06T09:13:19Z", "author": {"login": "theshadowco"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/TypoDiagnostic.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import lombok.extern.slf4j.Slf4j;\n+import org.antlr.v4.runtime.Token;\n+import org.apache.commons.lang3.StringUtils;\n+import org.languagetool.JLanguageTool;\n+import org.languagetool.language.AmericanEnglish;\n+import org.languagetool.language.Russian;\n+import org.languagetool.rules.Rule;\n+import org.languagetool.rules.RuleMatch;\n+import org.languagetool.rules.spelling.SpellingCheckRule;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+)\n+\n+@Slf4j\n+public class TypoDiagnostic extends AbstractDiagnostic {\n+\n+  private static final Russian ruLang = new Russian();\n+  private static final AmericanEnglish enLang = new AmericanEnglish();\n+  private static final JLanguageTool ruLangTool = new JLanguageTool(ruLang);\n+  private static final JLanguageTool enLangTool = new JLanguageTool(enLang);\n+  private static Map<String, JLanguageTool> languageToolMap = new HashMap<>();\n+\n+  private static final int DEFAULT_MIN_WORD_LENGTH = 3;\n+  private static final String DEFAULT_USER_WORDS_TO_IGNORE = \"\";\n+\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_MIN_WORD_LENGTH\n+  )\n+  private int minWordLength = DEFAULT_MIN_WORD_LENGTH;\n+\n+  @DiagnosticParameter(\n+    type = String.class\n+  )\n+  private String userWordsToIgnore = DEFAULT_USER_WORDS_TO_IGNORE;\n+\n+  public TypoDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    if (configuration == null) {\n+      return;\n+    }\n+    minWordLength = (int) configuration.getOrDefault(\"minWordLength\", minWordLength);\n+    userWordsToIgnore = (String) configuration.getOrDefault(\"userWordsToIgnore\", userWordsToIgnore);\n+  }\n+\n+  private ArrayList<String> getWordsToIgnore() {\n+    String exceptions = info.getResourceString(\"diagnosticExceptions\").replaceAll(\"\\n\", \"\");\n+    return new ArrayList<>(Arrays.asList(exceptions.split(\",\")));\n+  }\n+\n+  private ArrayList<String> getUserWordsToIgnore() {\n+    String exceptions = userWordsToIgnore.replaceAll(\"\\n\", \"\");\n+    return new ArrayList<>(Arrays.asList(exceptions.split(\",\")));\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e58c2c16753028e6f457669699f910161174a5c"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwODM1Mw==", "bodyText": "@theshadowco Done", "url": "https://github.com/1c-syntax/bsl-language-server/pull/985#discussion_r388808353", "createdAt": "2020-03-06T09:52:52Z", "author": {"login": "EightM"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/TypoDiagnostic.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import lombok.extern.slf4j.Slf4j;\n+import org.antlr.v4.runtime.Token;\n+import org.apache.commons.lang3.StringUtils;\n+import org.languagetool.JLanguageTool;\n+import org.languagetool.language.AmericanEnglish;\n+import org.languagetool.language.Russian;\n+import org.languagetool.rules.Rule;\n+import org.languagetool.rules.RuleMatch;\n+import org.languagetool.rules.spelling.SpellingCheckRule;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+)\n+\n+@Slf4j\n+public class TypoDiagnostic extends AbstractDiagnostic {\n+\n+  private static final Russian ruLang = new Russian();\n+  private static final AmericanEnglish enLang = new AmericanEnglish();\n+  private static final JLanguageTool ruLangTool = new JLanguageTool(ruLang);\n+  private static final JLanguageTool enLangTool = new JLanguageTool(enLang);\n+  private static Map<String, JLanguageTool> languageToolMap = new HashMap<>();\n+\n+  private static final int DEFAULT_MIN_WORD_LENGTH = 3;\n+  private static final String DEFAULT_USER_WORDS_TO_IGNORE = \"\";\n+\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_MIN_WORD_LENGTH\n+  )\n+  private int minWordLength = DEFAULT_MIN_WORD_LENGTH;\n+\n+  @DiagnosticParameter(\n+    type = String.class\n+  )\n+  private String userWordsToIgnore = DEFAULT_USER_WORDS_TO_IGNORE;\n+\n+  public TypoDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    if (configuration == null) {\n+      return;\n+    }\n+    minWordLength = (int) configuration.getOrDefault(\"minWordLength\", minWordLength);\n+    userWordsToIgnore = (String) configuration.getOrDefault(\"userWordsToIgnore\", userWordsToIgnore);\n+  }\n+\n+  private ArrayList<String> getWordsToIgnore() {\n+    String exceptions = info.getResourceString(\"diagnosticExceptions\").replaceAll(\"\\n\", \"\");\n+    return new ArrayList<>(Arrays.asList(exceptions.split(\",\")));\n+  }\n+\n+  private ArrayList<String> getUserWordsToIgnore() {\n+    String exceptions = userWordsToIgnore.replaceAll(\"\\n\", \"\");\n+    return new ArrayList<>(Arrays.asList(exceptions.split(\",\")));\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4ODIyMA=="}, "originalCommit": {"oid": "9e58c2c16753028e6f457669699f910161174a5c"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODg2ODEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/TypoDiagnostic.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOToxOTowNVrOFyx6eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOTo0MjoxMlrOFyyoWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MDkwNg==", "bodyText": "\u0410 \u0437\u0430\u0447\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u0430, \u0435\u0441\u043b\u0438 \u0432 lang \u0432\u0441\u0435\u0433\u0434\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/985#discussion_r388790906", "createdAt": "2020-03-06T09:19:05Z", "author": {"login": "theshadowco"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/TypoDiagnostic.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import lombok.extern.slf4j.Slf4j;\n+import org.antlr.v4.runtime.Token;\n+import org.apache.commons.lang3.StringUtils;\n+import org.languagetool.JLanguageTool;\n+import org.languagetool.language.AmericanEnglish;\n+import org.languagetool.language.Russian;\n+import org.languagetool.rules.Rule;\n+import org.languagetool.rules.RuleMatch;\n+import org.languagetool.rules.spelling.SpellingCheckRule;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+)\n+\n+@Slf4j\n+public class TypoDiagnostic extends AbstractDiagnostic {\n+\n+  private static final Russian ruLang = new Russian();\n+  private static final AmericanEnglish enLang = new AmericanEnglish();\n+  private static final JLanguageTool ruLangTool = new JLanguageTool(ruLang);\n+  private static final JLanguageTool enLangTool = new JLanguageTool(enLang);\n+  private static Map<String, JLanguageTool> languageToolMap = new HashMap<>();\n+\n+  private static final int DEFAULT_MIN_WORD_LENGTH = 3;\n+  private static final String DEFAULT_USER_WORDS_TO_IGNORE = \"\";\n+\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_MIN_WORD_LENGTH\n+  )\n+  private int minWordLength = DEFAULT_MIN_WORD_LENGTH;\n+\n+  @DiagnosticParameter(\n+    type = String.class\n+  )\n+  private String userWordsToIgnore = DEFAULT_USER_WORDS_TO_IGNORE;\n+\n+  public TypoDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    if (configuration == null) {\n+      return;\n+    }\n+    minWordLength = (int) configuration.getOrDefault(\"minWordLength\", minWordLength);\n+    userWordsToIgnore = (String) configuration.getOrDefault(\"userWordsToIgnore\", userWordsToIgnore);\n+  }\n+\n+  private ArrayList<String> getWordsToIgnore() {\n+    String exceptions = info.getResourceString(\"diagnosticExceptions\").replaceAll(\"\\n\", \"\");\n+    return new ArrayList<>(Arrays.asList(exceptions.split(\",\")));\n+  }\n+\n+  private ArrayList<String> getUserWordsToIgnore() {\n+    String exceptions = userWordsToIgnore.replaceAll(\"\\n\", \"\");\n+    return new ArrayList<>(Arrays.asList(exceptions.split(\",\")));\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    String lang = info.getResourceString(\"diagnosticLanguage\");\n+    ArrayList<String> wordsToIgnore = getWordsToIgnore();\n+\n+    languageToolMap.put(\"ru\", ruLangTool);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e58c2c16753028e6f457669699f910161174a5c"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5NjI4MQ==", "bodyText": "@theshadowco \u041a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u044f LT \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0432 \u0441\u0442\u0430\u0442\u0438\u043a\u0435, \u0434\u043b\u044f \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0442\u043e\u0433\u0434\u0430 \u043a\u0430\u043a \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 diagnosticLanguage \u0432 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u043c \u0431\u043b\u043e\u043a\u0435 \u044f \u043d\u0435 \u043c\u043e\u0433\u0443.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/985#discussion_r388796281", "createdAt": "2020-03-06T09:29:49Z", "author": {"login": "EightM"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/TypoDiagnostic.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import lombok.extern.slf4j.Slf4j;\n+import org.antlr.v4.runtime.Token;\n+import org.apache.commons.lang3.StringUtils;\n+import org.languagetool.JLanguageTool;\n+import org.languagetool.language.AmericanEnglish;\n+import org.languagetool.language.Russian;\n+import org.languagetool.rules.Rule;\n+import org.languagetool.rules.RuleMatch;\n+import org.languagetool.rules.spelling.SpellingCheckRule;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+)\n+\n+@Slf4j\n+public class TypoDiagnostic extends AbstractDiagnostic {\n+\n+  private static final Russian ruLang = new Russian();\n+  private static final AmericanEnglish enLang = new AmericanEnglish();\n+  private static final JLanguageTool ruLangTool = new JLanguageTool(ruLang);\n+  private static final JLanguageTool enLangTool = new JLanguageTool(enLang);\n+  private static Map<String, JLanguageTool> languageToolMap = new HashMap<>();\n+\n+  private static final int DEFAULT_MIN_WORD_LENGTH = 3;\n+  private static final String DEFAULT_USER_WORDS_TO_IGNORE = \"\";\n+\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_MIN_WORD_LENGTH\n+  )\n+  private int minWordLength = DEFAULT_MIN_WORD_LENGTH;\n+\n+  @DiagnosticParameter(\n+    type = String.class\n+  )\n+  private String userWordsToIgnore = DEFAULT_USER_WORDS_TO_IGNORE;\n+\n+  public TypoDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    if (configuration == null) {\n+      return;\n+    }\n+    minWordLength = (int) configuration.getOrDefault(\"minWordLength\", minWordLength);\n+    userWordsToIgnore = (String) configuration.getOrDefault(\"userWordsToIgnore\", userWordsToIgnore);\n+  }\n+\n+  private ArrayList<String> getWordsToIgnore() {\n+    String exceptions = info.getResourceString(\"diagnosticExceptions\").replaceAll(\"\\n\", \"\");\n+    return new ArrayList<>(Arrays.asList(exceptions.split(\",\")));\n+  }\n+\n+  private ArrayList<String> getUserWordsToIgnore() {\n+    String exceptions = userWordsToIgnore.replaceAll(\"\\n\", \"\");\n+    return new ArrayList<>(Arrays.asList(exceptions.split(\",\")));\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    String lang = info.getResourceString(\"diagnosticLanguage\");\n+    ArrayList<String> wordsToIgnore = getWordsToIgnore();\n+\n+    languageToolMap.put(\"ru\", ruLangTool);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MDkwNg=="}, "originalCommit": {"oid": "9e58c2c16753028e6f457669699f910161174a5c"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgwMjY1MA==", "bodyText": "\u041f\u043e\u043d\u044f\u043b", "url": "https://github.com/1c-syntax/bsl-language-server/pull/985#discussion_r388802650", "createdAt": "2020-03-06T09:42:12Z", "author": {"login": "theshadowco"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/TypoDiagnostic.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import lombok.extern.slf4j.Slf4j;\n+import org.antlr.v4.runtime.Token;\n+import org.apache.commons.lang3.StringUtils;\n+import org.languagetool.JLanguageTool;\n+import org.languagetool.language.AmericanEnglish;\n+import org.languagetool.language.Russian;\n+import org.languagetool.rules.Rule;\n+import org.languagetool.rules.RuleMatch;\n+import org.languagetool.rules.spelling.SpellingCheckRule;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+)\n+\n+@Slf4j\n+public class TypoDiagnostic extends AbstractDiagnostic {\n+\n+  private static final Russian ruLang = new Russian();\n+  private static final AmericanEnglish enLang = new AmericanEnglish();\n+  private static final JLanguageTool ruLangTool = new JLanguageTool(ruLang);\n+  private static final JLanguageTool enLangTool = new JLanguageTool(enLang);\n+  private static Map<String, JLanguageTool> languageToolMap = new HashMap<>();\n+\n+  private static final int DEFAULT_MIN_WORD_LENGTH = 3;\n+  private static final String DEFAULT_USER_WORDS_TO_IGNORE = \"\";\n+\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_MIN_WORD_LENGTH\n+  )\n+  private int minWordLength = DEFAULT_MIN_WORD_LENGTH;\n+\n+  @DiagnosticParameter(\n+    type = String.class\n+  )\n+  private String userWordsToIgnore = DEFAULT_USER_WORDS_TO_IGNORE;\n+\n+  public TypoDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    if (configuration == null) {\n+      return;\n+    }\n+    minWordLength = (int) configuration.getOrDefault(\"minWordLength\", minWordLength);\n+    userWordsToIgnore = (String) configuration.getOrDefault(\"userWordsToIgnore\", userWordsToIgnore);\n+  }\n+\n+  private ArrayList<String> getWordsToIgnore() {\n+    String exceptions = info.getResourceString(\"diagnosticExceptions\").replaceAll(\"\\n\", \"\");\n+    return new ArrayList<>(Arrays.asList(exceptions.split(\",\")));\n+  }\n+\n+  private ArrayList<String> getUserWordsToIgnore() {\n+    String exceptions = userWordsToIgnore.replaceAll(\"\\n\", \"\");\n+    return new ArrayList<>(Arrays.asList(exceptions.split(\",\")));\n+  }\n+\n+  @Override\n+  protected void check(DocumentContext documentContext) {\n+\n+    String lang = info.getResourceString(\"diagnosticLanguage\");\n+    ArrayList<String> wordsToIgnore = getWordsToIgnore();\n+\n+    languageToolMap.put(\"ru\", ruLangTool);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MDkwNg=="}, "originalCommit": {"oid": "9e58c2c16753028e6f457669699f910161174a5c"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDg0MTc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/TypoDiagnostic.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzo0NzoyM1rOFzofKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjowMjozN1rOFzu51w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY4NTAzNA==", "bodyText": "@EightM \u044f \u0431\u044b \u0432\u043e\u0442 \u0442\u0443\u0442 \u0442\u043e\u0436\u0435 \u0434\u043e\u043a\u0430\u0442\u0438\u043b \u043c\u043e\u0438 \u043f\u0440\u0430\u0432\u043a\u0438 \u043f\u043e \u0443\u0431\u0438\u0440\u0430\u043d\u0438\u044e \\n \u0438\u0437 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u043b\u043e \u0438\u043d\u0442\u0435\u043d\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a. \u043d\u0443 \u043b\u0438\u0431\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0435\u0433\u043e \u0441\u044e\u0434\u0430, \u044f\u0432\u043d\u043e \u0432\u044b\u0437\u0432\u0430\u0432 intern() \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u043e\u043c", "url": "https://github.com/1c-syntax/bsl-language-server/pull/985#discussion_r389685034", "createdAt": "2020-03-09T13:47:23Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/TypoDiagnostic.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Trees;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.bsl.parser.BSLParserRuleContext;\n+import lombok.extern.slf4j.Slf4j;\n+import org.antlr.v4.runtime.Token;\n+import org.apache.commons.lang3.StringUtils;\n+import org.languagetool.JLanguageTool;\n+import org.languagetool.language.AmericanEnglish;\n+import org.languagetool.language.Russian;\n+import org.languagetool.rules.Rule;\n+import org.languagetool.rules.RuleMatch;\n+import org.languagetool.rules.spelling.SpellingCheckRule;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+)\n+\n+@Slf4j\n+public class TypoDiagnostic extends AbstractDiagnostic {\n+\n+  private static final Russian ruLang = new Russian();\n+  private static final AmericanEnglish enLang = new AmericanEnglish();\n+  private static final JLanguageTool ruLangTool = new JLanguageTool(ruLang);\n+  private static final JLanguageTool enLangTool = new JLanguageTool(enLang);\n+  private static final Map<String, JLanguageTool> languageToolMap = Map.of(\n+    \"en\", enLangTool,\n+    \"ru\", ruLangTool\n+  );\n+\n+  static {\n+    languageToolMap.forEach((lang, languageTool) ->\n+      languageTool.getAllRules().stream()\n+        .filter(rule -> !rule.isDictionaryBasedSpellingRule())\n+        .map(Rule::getId)\n+        .forEach(languageTool::disableRule)\n+    );\n+  }\n+\n+  private static final Pattern SPACES_PATTERN = Pattern.compile(\"\\\\s+\");\n+  private static final Pattern QUOTE_PATTERN = Pattern.compile(\"\\\"\");\n+\n+  private static final Integer[] rulesToFind = new Integer[]{\n+    BSLParser.RULE_string,\n+    BSLParser.RULE_lValue,\n+    BSLParser.RULE_var_name,\n+    BSLParser.RULE_subName\n+  };\n+  private static final Set<Integer> tokenTypes = Set.of(\n+    BSLParser.STRING,\n+    BSLParser.IDENTIFIER\n+  );\n+\n+  private static final int DEFAULT_MIN_WORD_LENGTH = 3;\n+  private static final String DEFAULT_USER_WORDS_TO_IGNORE = \"\";\n+\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_MIN_WORD_LENGTH\n+  )\n+  private int minWordLength = DEFAULT_MIN_WORD_LENGTH;\n+\n+  @DiagnosticParameter(\n+    type = String.class\n+  )\n+  private String userWordsToIgnore = DEFAULT_USER_WORDS_TO_IGNORE;\n+\n+  public TypoDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    if (configuration == null) {\n+      return;\n+    }\n+    minWordLength = Math.max((int) configuration.getOrDefault(\"minWordLength\", minWordLength), 2);\n+    userWordsToIgnore = (String) configuration.getOrDefault(\"userWordsToIgnore\", userWordsToIgnore);\n+  }\n+\n+  private ArrayList<String> getWordsToIgnore() {\n+    String exceptions = info.getResourceString(\"diagnosticExceptions\").replaceAll(\"\\n\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b43714260b11ca9aafaea51f1506ae9edc93f218"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc5MDE2Nw==", "bodyText": "Done", "url": "https://github.com/1c-syntax/bsl-language-server/pull/985#discussion_r389790167", "createdAt": "2020-03-09T16:02:37Z", "author": {"login": "EightM"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/TypoDiagnostic.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.diagnostics;\n+\n+import com.github._1c_syntax.bsl.languageserver.context.DocumentContext;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticInfo;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticMetadata;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticParameter;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticSeverity;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticTag;\n+import com.github._1c_syntax.bsl.languageserver.diagnostics.metadata.DiagnosticType;\n+import com.github._1c_syntax.bsl.languageserver.utils.Trees;\n+import com.github._1c_syntax.bsl.parser.BSLParser;\n+import com.github._1c_syntax.bsl.parser.BSLParserRuleContext;\n+import lombok.extern.slf4j.Slf4j;\n+import org.antlr.v4.runtime.Token;\n+import org.apache.commons.lang3.StringUtils;\n+import org.languagetool.JLanguageTool;\n+import org.languagetool.language.AmericanEnglish;\n+import org.languagetool.language.Russian;\n+import org.languagetool.rules.Rule;\n+import org.languagetool.rules.RuleMatch;\n+import org.languagetool.rules.spelling.SpellingCheckRule;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+@DiagnosticMetadata(\n+  type = DiagnosticType.CODE_SMELL,\n+  severity = DiagnosticSeverity.INFO,\n+  minutesToFix = 1,\n+  tags = {\n+    DiagnosticTag.BADPRACTICE\n+  }\n+)\n+\n+@Slf4j\n+public class TypoDiagnostic extends AbstractDiagnostic {\n+\n+  private static final Russian ruLang = new Russian();\n+  private static final AmericanEnglish enLang = new AmericanEnglish();\n+  private static final JLanguageTool ruLangTool = new JLanguageTool(ruLang);\n+  private static final JLanguageTool enLangTool = new JLanguageTool(enLang);\n+  private static final Map<String, JLanguageTool> languageToolMap = Map.of(\n+    \"en\", enLangTool,\n+    \"ru\", ruLangTool\n+  );\n+\n+  static {\n+    languageToolMap.forEach((lang, languageTool) ->\n+      languageTool.getAllRules().stream()\n+        .filter(rule -> !rule.isDictionaryBasedSpellingRule())\n+        .map(Rule::getId)\n+        .forEach(languageTool::disableRule)\n+    );\n+  }\n+\n+  private static final Pattern SPACES_PATTERN = Pattern.compile(\"\\\\s+\");\n+  private static final Pattern QUOTE_PATTERN = Pattern.compile(\"\\\"\");\n+\n+  private static final Integer[] rulesToFind = new Integer[]{\n+    BSLParser.RULE_string,\n+    BSLParser.RULE_lValue,\n+    BSLParser.RULE_var_name,\n+    BSLParser.RULE_subName\n+  };\n+  private static final Set<Integer> tokenTypes = Set.of(\n+    BSLParser.STRING,\n+    BSLParser.IDENTIFIER\n+  );\n+\n+  private static final int DEFAULT_MIN_WORD_LENGTH = 3;\n+  private static final String DEFAULT_USER_WORDS_TO_IGNORE = \"\";\n+\n+  @DiagnosticParameter(\n+    type = Integer.class,\n+    defaultValue = \"\" + DEFAULT_MIN_WORD_LENGTH\n+  )\n+  private int minWordLength = DEFAULT_MIN_WORD_LENGTH;\n+\n+  @DiagnosticParameter(\n+    type = String.class\n+  )\n+  private String userWordsToIgnore = DEFAULT_USER_WORDS_TO_IGNORE;\n+\n+  public TypoDiagnostic(DiagnosticInfo info) {\n+    super(info);\n+  }\n+\n+  @Override\n+  public void configure(Map<String, Object> configuration) {\n+    if (configuration == null) {\n+      return;\n+    }\n+    minWordLength = Math.max((int) configuration.getOrDefault(\"minWordLength\", minWordLength), 2);\n+    userWordsToIgnore = (String) configuration.getOrDefault(\"userWordsToIgnore\", userWordsToIgnore);\n+  }\n+\n+  private ArrayList<String> getWordsToIgnore() {\n+    String exceptions = info.getResourceString(\"diagnosticExceptions\").replaceAll(\"\\n\", \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY4NTAzNA=="}, "originalCommit": {"oid": "b43714260b11ca9aafaea51f1506ae9edc93f218"}, "originalPosition": 127}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4907, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}