{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1ODg5ODc3", "number": 1346, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNToxNzoyN1rOEhS_JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOTowMjo1NVrOEhYJCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzQ5NTQwOnYy", "diffSide": "LEFT", "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/BSLTextDocumentServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNToxNzoyN1rOHOiLog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNTo0Mzo1M1rOHOjTDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAwMjE0Ng==", "bodyText": "\u042d\u0442\u043e\u0442 \u0442\u0435\u0441\u0442 \u0443\u0436\u0435 \u043d\u0435 \u043d\u0443\u0436\u0435\u043d?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1346#discussion_r485002146", "createdAt": "2020-09-08T15:17:27Z", "author": {"login": "otymko"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/BSLTextDocumentServiceTest.java", "diffHunk": "@@ -230,11 +230,6 @@ void didSave() {\n     textDocumentService.didSave(params);\n   }\n \n-  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e705083c871ce43980a2297185483d44a75875f6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAyMDQyOA==", "bodyText": "null \u0442\u0443\u0434\u0430 \u0442\u043e\u0447\u043d\u043e \u043d\u0435 \u043d\u0443\u0436\u0435\u043d, \u044f \u0435\u0449\u0435 \u0438 \u043d\u0430 \u043f\u0430\u043a\u0435\u0442 nonnull-\u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044e \u043f\u043e\u0432\u0435\u0448\u0443", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1346#discussion_r485020428", "createdAt": "2020-09-08T15:43:53Z", "author": {"login": "nixel2007"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/BSLTextDocumentServiceTest.java", "diffHunk": "@@ -230,11 +230,6 @@ void didSave() {\n     textDocumentService.didSave(params);\n   }\n \n-  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAwMjE0Ng=="}, "originalCommit": {"oid": "e705083c871ce43980a2297185483d44a75875f6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDMzOTkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/cli/lsp/FileAwarePrintWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOTowMjo1NVrOHOqQFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOTowNDowNlrOHOqSgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzNDM1Nw==", "bodyText": "\u0430 \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u043b\u0438 \u0441\u043c\u044b\u0441\u043b\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0440\u0430\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u0441\u0442\u0440\u0438\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1346#discussion_r485134357", "createdAt": "2020-09-08T19:02:55Z", "author": {"login": "theshadowco"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/cli/lsp/FileAwarePrintWriter.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.cli.lsp;\n+\n+import com.github._1c_syntax.bsl.languageserver.configuration.watcher.LanguageServerConfigurationChangeEvent;\n+import com.github._1c_syntax.bsl.languageserver.configuration.watcher.LanguageServerConfigurationFileChangeEvent;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.stereotype.Component;\n+\n+import javax.annotation.CheckForNull;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n+\n+/**\n+ * \u041e\u0431\u0435\u0440\u0442\u043a\u0430 \u043d\u0430\u0434 PrintWriter, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0430\u044f \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u0439 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \"\u043d\u0430-\u043b\u0435\u0442\u0443\",\n+ * \u0432 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0432 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0435 \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u043c {@link PrintWriter}.\n+ */\n+@Component\n+@Slf4j\n+public class FileAwarePrintWriter extends PrintWriter {\n+\n+  private boolean isEmpty = true;\n+  private File file;\n+\n+  /**\n+   * \u041a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u044b\u0432\u043e\u0434 \u0432 /dev/null.\n+   */\n+  public FileAwarePrintWriter() {\n+    super(OutputStream.nullOutputStream());\n+  }\n+\n+  /**\n+   * @param file \u0424\u0430\u0439\u043b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u043d\u044b\u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u044b\u0432\u043e\u0434 PrintWriter\n+   */\n+  public void setFile(@CheckForNull File file) {\n+\n+    // sync on non-private field, cause this#lock is supposed to be used as lock-object. See field description.\n+    synchronized (lock) {\n+      if (Objects.equals(file, this.file)) {\n+        return;\n+      }\n+\n+      this.file = file;\n+\n+      if (file == null) {\n+        closeOutputStream();\n+        return;\n+      }\n+\n+      FileOutputStream fileOutputStream;\n+      try {\n+        // stream is not closed, cause it used as output stream in writer. See this#out field.\n+        fileOutputStream = new FileOutputStream(file);\n+      } catch (FileNotFoundException e) {\n+        LOGGER.error(\"Can't create LSP trace file\", e);\n+        return;\n+      }\n+\n+      if (file.isDirectory()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8e54b53d8e37d4c25508342a1201b4030af62d5"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzNDk3Ng==", "bodyText": "\u0434\u0430, \u043d\u0430\u0434\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u0441\u0442\u0438\u0442\u044c. \u0441\u0443\u0434\u044f \u043f\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044e \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0430 FileOutputStream, \u0435\u0441\u043b\u0438 \u0435\u043c\u0443 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0434\u0430\u044e\u0442 \u043a\u0430\u0442\u0430\u043b\u043e\u0433, \u043e\u043d \u043a\u0438\u0434\u0430\u0435\u0442 \u044d\u043a\u0441\u0435\u043f\u0448\u0435\u043d.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1346#discussion_r485134976", "createdAt": "2020-09-08T19:04:06Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/cli/lsp/FileAwarePrintWriter.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * This file is a part of BSL Language Server.\n+ *\n+ * Copyright \u00a9 2018-2020\n+ * Alexey Sosnoviy <labotamy@gmail.com>, Nikita Gryzlov <nixel2007@gmail.com> and contributors\n+ *\n+ * SPDX-License-Identifier: LGPL-3.0-or-later\n+ *\n+ * BSL Language Server is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3.0 of the License, or (at your option) any later version.\n+ *\n+ * BSL Language Server is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with BSL Language Server.\n+ */\n+package com.github._1c_syntax.bsl.languageserver.cli.lsp;\n+\n+import com.github._1c_syntax.bsl.languageserver.configuration.watcher.LanguageServerConfigurationChangeEvent;\n+import com.github._1c_syntax.bsl.languageserver.configuration.watcher.LanguageServerConfigurationFileChangeEvent;\n+import lombok.SneakyThrows;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.stereotype.Component;\n+\n+import javax.annotation.CheckForNull;\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n+\n+/**\n+ * \u041e\u0431\u0435\u0440\u0442\u043a\u0430 \u043d\u0430\u0434 PrintWriter, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0430\u044f \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0432\u044b\u0445\u043e\u0434\u043d\u043e\u0439 \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \"\u043d\u0430-\u043b\u0435\u0442\u0443\",\n+ * \u0432 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0432 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0435 \u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u043c {@link PrintWriter}.\n+ */\n+@Component\n+@Slf4j\n+public class FileAwarePrintWriter extends PrintWriter {\n+\n+  private boolean isEmpty = true;\n+  private File file;\n+\n+  /**\n+   * \u041a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u044b\u0432\u043e\u0434 \u0432 /dev/null.\n+   */\n+  public FileAwarePrintWriter() {\n+    super(OutputStream.nullOutputStream());\n+  }\n+\n+  /**\n+   * @param file \u0424\u0430\u0439\u043b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u043d\u044b\u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0432\u044b\u0432\u043e\u0434 PrintWriter\n+   */\n+  public void setFile(@CheckForNull File file) {\n+\n+    // sync on non-private field, cause this#lock is supposed to be used as lock-object. See field description.\n+    synchronized (lock) {\n+      if (Objects.equals(file, this.file)) {\n+        return;\n+      }\n+\n+      this.file = file;\n+\n+      if (file == null) {\n+        closeOutputStream();\n+        return;\n+      }\n+\n+      FileOutputStream fileOutputStream;\n+      try {\n+        // stream is not closed, cause it used as output stream in writer. See this#out field.\n+        fileOutputStream = new FileOutputStream(file);\n+      } catch (FileNotFoundException e) {\n+        LOGGER.error(\"Can't create LSP trace file\", e);\n+        return;\n+      }\n+\n+      if (file.isDirectory()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzNDM1Nw=="}, "originalCommit": {"oid": "d8e54b53d8e37d4c25508342a1201b4030af62d5"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4683, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}