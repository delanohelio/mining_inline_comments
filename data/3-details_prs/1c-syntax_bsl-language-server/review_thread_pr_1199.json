{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4OTg4Njk5", "number": 1199, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODozNToyMVrOD9S02w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxMzoyMjowOVrOEDPG-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTk4MTcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MissingSpaceDiagnostic.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODozNToyMVrOGWs6kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwODozNzoxOFrOGcT2rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1Nzc0Nw==", "bodyText": "\u041f\u0435\u0440\u0435\u043d\u0435\u0441\u0438 \u043a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432 \u0432 getDiagnostics, \u043f\u043b\u0437. \u0432 \u0442\u0435\u043e\u0440\u0438\u0438 \u0438\u043d\u0441\u0442\u0430\u043d\u0441 \u0434\u0438\u0430\u0433\u043d\u043e\u0441\u0442\u0438\u043a\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d \u043d\u0435 \u0442\u0435\u043c \u044f\u0437\u044b\u043a\u043e\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u044b\u043b \u0432 \u043c\u043e\u043c\u0435\u043d\u0442 \u0432\u044b\u0437\u043e\u0432\u0430 \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440\u0430.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1199#discussion_r426457747", "createdAt": "2020-05-18T08:35:21Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MissingSpaceDiagnostic.java", "diffHunk": "@@ -104,20 +103,20 @@\n   )\n   private Boolean allowMultipleCommas = DEFAULT_ALLOW_MULTIPLE_COMMAS;\n \n-  private Pattern patternL = compilePattern(listForCheckLeft);\n-  private Pattern patternR = compilePattern(listForCheckRight);\n-  private Pattern patternLr = compilePattern(listForCheckLeftAndRight);\n-  private final Pattern patternNotSpace = compilePattern(\"\\\\S+\");\n+  private @Nullable Pattern patternL = compilePattern(listForCheckLeft);\n+  private @Nullable Pattern patternR = compilePattern(listForCheckRight);\n+  private @Nullable Pattern patternLr = compilePattern(listForCheckLeftAndRight);\n+  private final String mainMessage;\n+  private final String indexWordLeftMsg;\n+  private final String indexWordRightMsg;\n+  private final String indexWordLeftRightMsg;\n \n   public MissingSpaceDiagnostic(DiagnosticInfo info) {\n     super(info);\n-  }\n-\n-  private static List<Token> findTokensByPattern(List<Token> tokens, Pattern pattern) {\n-    return tokens\n-      .parallelStream()\n-      .filter((Token t) -> pattern.matcher(t.getText()).matches())\n-      .collect(Collectors.toList());\n+    mainMessage = this.info.getMessage();\n+    indexWordLeftMsg = this.info.getResourceString(\"wordLeft\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e55af3952d285073878ca93a343fcfde679a9c"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzODYwNg==", "bodyText": "\u0441\u0434\u0435\u043b\u0430\u043d\u043e", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1199#discussion_r432338606", "createdAt": "2020-05-29T08:37:18Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MissingSpaceDiagnostic.java", "diffHunk": "@@ -104,20 +103,20 @@\n   )\n   private Boolean allowMultipleCommas = DEFAULT_ALLOW_MULTIPLE_COMMAS;\n \n-  private Pattern patternL = compilePattern(listForCheckLeft);\n-  private Pattern patternR = compilePattern(listForCheckRight);\n-  private Pattern patternLr = compilePattern(listForCheckLeftAndRight);\n-  private final Pattern patternNotSpace = compilePattern(\"\\\\S+\");\n+  private @Nullable Pattern patternL = compilePattern(listForCheckLeft);\n+  private @Nullable Pattern patternR = compilePattern(listForCheckRight);\n+  private @Nullable Pattern patternLr = compilePattern(listForCheckLeftAndRight);\n+  private final String mainMessage;\n+  private final String indexWordLeftMsg;\n+  private final String indexWordRightMsg;\n+  private final String indexWordLeftRightMsg;\n \n   public MissingSpaceDiagnostic(DiagnosticInfo info) {\n     super(info);\n-  }\n-\n-  private static List<Token> findTokensByPattern(List<Token> tokens, Pattern pattern) {\n-    return tokens\n-      .parallelStream()\n-      .filter((Token t) -> pattern.matcher(t.getText()).matches())\n-      .collect(Collectors.toList());\n+    mainMessage = this.info.getMessage();\n+    indexWordLeftMsg = this.info.getResourceString(\"wordLeft\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1Nzc0Nw=="}, "originalCommit": {"oid": "a1e55af3952d285073878ca93a343fcfde679a9c"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTk4MzAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MissingSpaceDiagnostic.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODozNTo0M1rOGWs7XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwODozNzowNFrOGcT2SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1Nzk0OA==", "bodyText": "&& ? \u043d\u0435 || ?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1199#discussion_r426457948", "createdAt": "2020-05-18T08:35:43Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MissingSpaceDiagnostic.java", "diffHunk": "@@ -154,62 +153,73 @@ private static Pattern compilePattern(String string) {\n   @Override\n   public List<Diagnostic> getDiagnostics(DocumentContext documentContext) {\n \n-    sampleMessage[INDEX_WORD_LEFT] = info.getResourceString(\"wordLeft\");               // \"\u0421\u043b\u0435\u0432\u0430\"\n-    sampleMessage[INDEX_WORD_RIGHT] = info.getResourceString(\"wordRight\");             // \"\u0421\u043f\u0440\u0430\u0432\u0430\"\n-    sampleMessage[INDEX_WORD_LEFT_RIGHT] = info.getResourceString(\"wordLeftAndRight\"); // \"\u0421\u043b\u0435\u0432\u0430 \u0438 \u0441\u043f\u0440\u0430\u0432\u0430\"\n+    if (patternL == null && patternR == null && patternLr == null){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e55af3952d285073878ca93a343fcfde679a9c"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0MDU2Mg==", "bodyText": "@nixel2007 \u0442\u0443\u0442 \u0438\u043c\u0435\u043d\u043d\u043e &&, \u0442.\u043a. \u0435\u0441\u043b\u0438 \u0432\u0441\u0435 3 \u0432 \u043d\u0443\u043b\u044c, \u0442\u043e \u043d\u0435\u0442 \u0441\u043c\u044b\u0441\u043b\u0430 \u0447\u0442\u043e-\u0442\u043e \u0434\u0430\u043b\u044c\u0448\u0435 \u0434\u0435\u043b\u0430\u0442\u044c.\n\u0431\u044b\u0441\u0442\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0438 \u0432\u044b\u0445\u043e\u0434", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1199#discussion_r426740562", "createdAt": "2020-05-18T16:11:38Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MissingSpaceDiagnostic.java", "diffHunk": "@@ -154,62 +153,73 @@ private static Pattern compilePattern(String string) {\n   @Override\n   public List<Diagnostic> getDiagnostics(DocumentContext documentContext) {\n \n-    sampleMessage[INDEX_WORD_LEFT] = info.getResourceString(\"wordLeft\");               // \"\u0421\u043b\u0435\u0432\u0430\"\n-    sampleMessage[INDEX_WORD_RIGHT] = info.getResourceString(\"wordRight\");             // \"\u0421\u043f\u0440\u0430\u0432\u0430\"\n-    sampleMessage[INDEX_WORD_LEFT_RIGHT] = info.getResourceString(\"wordLeftAndRight\"); // \"\u0421\u043b\u0435\u0432\u0430 \u0438 \u0441\u043f\u0440\u0430\u0432\u0430\"\n+    if (patternL == null && patternR == null && patternLr == null){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1Nzk0OA=="}, "originalCommit": {"oid": "a1e55af3952d285073878ca93a343fcfde679a9c"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzODUwNA==", "bodyText": "\u0440\u0435\u0448\u0435\u043d\u043e?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1199#discussion_r432338504", "createdAt": "2020-05-29T08:37:04Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MissingSpaceDiagnostic.java", "diffHunk": "@@ -154,62 +153,73 @@ private static Pattern compilePattern(String string) {\n   @Override\n   public List<Diagnostic> getDiagnostics(DocumentContext documentContext) {\n \n-    sampleMessage[INDEX_WORD_LEFT] = info.getResourceString(\"wordLeft\");               // \"\u0421\u043b\u0435\u0432\u0430\"\n-    sampleMessage[INDEX_WORD_RIGHT] = info.getResourceString(\"wordRight\");             // \"\u0421\u043f\u0440\u0430\u0432\u0430\"\n-    sampleMessage[INDEX_WORD_LEFT_RIGHT] = info.getResourceString(\"wordLeftAndRight\"); // \"\u0421\u043b\u0435\u0432\u0430 \u0438 \u0441\u043f\u0440\u0430\u0432\u0430\"\n+    if (patternL == null && patternR == null && patternLr == null){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1Nzk0OA=="}, "originalCommit": {"oid": "a1e55af3952d285073878ca93a343fcfde679a9c"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjAwMzYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MissingSpaceDiagnostic.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODo0MDo1NFrOGWtH5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwODozNjo0MFrOGcT1Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ2MTE1Ng==", "bodyText": "\u041e\u043f\u0443\u0441\u0442\u0438 \u043f\u043e\u0434 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b, \u043f\u043b\u0437.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1199#discussion_r426461156", "createdAt": "2020-05-18T08:40:54Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MissingSpaceDiagnostic.java", "diffHunk": "@@ -154,62 +153,73 @@ private static Pattern compilePattern(String string) {\n   @Override\n   public List<Diagnostic> getDiagnostics(DocumentContext documentContext) {\n \n-    sampleMessage[INDEX_WORD_LEFT] = info.getResourceString(\"wordLeft\");               // \"\u0421\u043b\u0435\u0432\u0430\"\n-    sampleMessage[INDEX_WORD_RIGHT] = info.getResourceString(\"wordRight\");             // \"\u0421\u043f\u0440\u0430\u0432\u0430\"\n-    sampleMessage[INDEX_WORD_LEFT_RIGHT] = info.getResourceString(\"wordLeftAndRight\"); // \"\u0421\u043b\u0435\u0432\u0430 \u0438 \u0441\u043f\u0440\u0430\u0432\u0430\"\n+    if (patternL == null && patternR == null && patternLr == null){\n+      return Collections.emptyList();\n+    }\n \n     diagnosticStorage.clearDiagnostics();\n \n     List<Token> tokens = documentContext.getTokens();\n-    List<Token> foundTokens;\n-\n-    // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u043b\u0435\u0432\u0430\n-    if (patternL != null) {\n-      foundTokens = findTokensByPattern(tokens, patternL);\n+    boolean noSpaceLeft = false;\n+    boolean noSpaceRight = false;\n \n-      foundTokens.stream()\n-        .filter((Token t) -> noSpaceLeft(tokens, t))\n-        .forEach((Token t) ->\n-          diagnosticStorage.addDiagnostic(t, getErrorMessage(INDEX_WORD_LEFT, t.getText()))\n-        );\n-    }\n+    for (var token:tokens){\n+      boolean checkLeft = false;\n+      boolean checkRight = false;\n \n-    // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u043f\u0440\u0430\u0432\u0430\n-    if (patternR != null) {\n-      foundTokens = findTokensByPattern(tokens, patternR);\n+      final var text = token.getText();\n \n-      foundTokens.stream()\n-        .filter((Token t) -> noSpaceRight(tokens, t))\n-        .forEach((Token t) ->\n-          diagnosticStorage.addDiagnostic(t, getErrorMessage(INDEX_WORD_RIGHT, t.getText()))\n-        );\n-    }\n+      if (patternL != null && patternL.matcher(text).matches()){\n+        noSpaceLeft = noSpaceLeft(tokens, token);\n+        checkLeft = true;\n \n-    // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u043b\u0435\u0432\u0430 \u0438 \u0441\u043f\u0440\u0430\u0432\u0430\n-    if (patternLr != null) {\n-      foundTokens = findTokensByPattern(tokens, patternLr);\n+        if (noSpaceLeft){\n+          addDiagnostic(token, mainMessage, indexWordLeftMsg);\n+        }\n+      }\n+      if (patternR != null && patternR.matcher(text).matches()){\n+        noSpaceRight = noSpaceRight(tokens, token);\n+        checkRight = true;\n \n-      foundTokens.stream()\n-        .filter((Token t) -> noSpaceLeft(tokens, t) && !noSpaceRight(tokens, t))\n-        .forEach((Token t) ->\n-          diagnosticStorage.addDiagnostic(t, getErrorMessage(INDEX_WORD_LEFT, t.getText()))\n-        );\n+        if (noSpaceRight){\n+          addDiagnostic(token, mainMessage, indexWordRightMsg);\n+        }\n+      }\n+      if (patternLr != null && patternLr.matcher(text).matches()){\n+        if (!checkLeft){\n+          noSpaceLeft = noSpaceLeft(tokens, token);\n+        }\n+        if (!checkRight){\n+          noSpaceRight = noSpaceRight(tokens, token);\n+        }\n+        checkLeftRight(token, noSpaceLeft, noSpaceRight);\n+      }\n+    }\n \n-      foundTokens.stream()\n-        .filter((Token t) -> !noSpaceLeft(tokens, t) && noSpaceRight(tokens, t))\n-        .forEach((Token t) ->\n-          diagnosticStorage.addDiagnostic(t, getErrorMessage(INDEX_WORD_RIGHT, t.getText()))\n-        );\n+    return diagnosticStorage.getDiagnostics();\n+  }\n \n-      foundTokens.stream()\n-        .filter((Token t) -> noSpaceLeft(tokens, t) && noSpaceRight(tokens, t))\n-        .forEach((Token t) ->\n-          diagnosticStorage.addDiagnostic(t, getErrorMessage(INDEX_WORD_LEFT_RIGHT, t.getText()))\n-        );\n+  private void checkLeftRight(Token t, boolean noSpaceLeft, boolean noSpaceRight) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e55af3952d285073878ca93a343fcfde679a9c"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0MDA0MQ==", "bodyText": "@nixel2007 \u0442\u043e\u0433\u0434\u0430 \u0432\u0441\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0441\u0434\u0432\u0438\u043d\u0443\u0442\u044c, \u0434\u043e \u043c\u0435\u043d\u044f \u0435\u0449\u0435 \u0431\u044b\u043b \u043a\u043e\u0434 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0434\u043e configure \u0438 getQuickFixes\n\u0441\u0434\u0435\u043b\u0430\u044e", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1199#discussion_r426740041", "createdAt": "2020-05-18T16:10:47Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MissingSpaceDiagnostic.java", "diffHunk": "@@ -154,62 +153,73 @@ private static Pattern compilePattern(String string) {\n   @Override\n   public List<Diagnostic> getDiagnostics(DocumentContext documentContext) {\n \n-    sampleMessage[INDEX_WORD_LEFT] = info.getResourceString(\"wordLeft\");               // \"\u0421\u043b\u0435\u0432\u0430\"\n-    sampleMessage[INDEX_WORD_RIGHT] = info.getResourceString(\"wordRight\");             // \"\u0421\u043f\u0440\u0430\u0432\u0430\"\n-    sampleMessage[INDEX_WORD_LEFT_RIGHT] = info.getResourceString(\"wordLeftAndRight\"); // \"\u0421\u043b\u0435\u0432\u0430 \u0438 \u0441\u043f\u0440\u0430\u0432\u0430\"\n+    if (patternL == null && patternR == null && patternLr == null){\n+      return Collections.emptyList();\n+    }\n \n     diagnosticStorage.clearDiagnostics();\n \n     List<Token> tokens = documentContext.getTokens();\n-    List<Token> foundTokens;\n-\n-    // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u043b\u0435\u0432\u0430\n-    if (patternL != null) {\n-      foundTokens = findTokensByPattern(tokens, patternL);\n+    boolean noSpaceLeft = false;\n+    boolean noSpaceRight = false;\n \n-      foundTokens.stream()\n-        .filter((Token t) -> noSpaceLeft(tokens, t))\n-        .forEach((Token t) ->\n-          diagnosticStorage.addDiagnostic(t, getErrorMessage(INDEX_WORD_LEFT, t.getText()))\n-        );\n-    }\n+    for (var token:tokens){\n+      boolean checkLeft = false;\n+      boolean checkRight = false;\n \n-    // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u043f\u0440\u0430\u0432\u0430\n-    if (patternR != null) {\n-      foundTokens = findTokensByPattern(tokens, patternR);\n+      final var text = token.getText();\n \n-      foundTokens.stream()\n-        .filter((Token t) -> noSpaceRight(tokens, t))\n-        .forEach((Token t) ->\n-          diagnosticStorage.addDiagnostic(t, getErrorMessage(INDEX_WORD_RIGHT, t.getText()))\n-        );\n-    }\n+      if (patternL != null && patternL.matcher(text).matches()){\n+        noSpaceLeft = noSpaceLeft(tokens, token);\n+        checkLeft = true;\n \n-    // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u043b\u0435\u0432\u0430 \u0438 \u0441\u043f\u0440\u0430\u0432\u0430\n-    if (patternLr != null) {\n-      foundTokens = findTokensByPattern(tokens, patternLr);\n+        if (noSpaceLeft){\n+          addDiagnostic(token, mainMessage, indexWordLeftMsg);\n+        }\n+      }\n+      if (patternR != null && patternR.matcher(text).matches()){\n+        noSpaceRight = noSpaceRight(tokens, token);\n+        checkRight = true;\n \n-      foundTokens.stream()\n-        .filter((Token t) -> noSpaceLeft(tokens, t) && !noSpaceRight(tokens, t))\n-        .forEach((Token t) ->\n-          diagnosticStorage.addDiagnostic(t, getErrorMessage(INDEX_WORD_LEFT, t.getText()))\n-        );\n+        if (noSpaceRight){\n+          addDiagnostic(token, mainMessage, indexWordRightMsg);\n+        }\n+      }\n+      if (patternLr != null && patternLr.matcher(text).matches()){\n+        if (!checkLeft){\n+          noSpaceLeft = noSpaceLeft(tokens, token);\n+        }\n+        if (!checkRight){\n+          noSpaceRight = noSpaceRight(tokens, token);\n+        }\n+        checkLeftRight(token, noSpaceLeft, noSpaceRight);\n+      }\n+    }\n \n-      foundTokens.stream()\n-        .filter((Token t) -> !noSpaceLeft(tokens, t) && noSpaceRight(tokens, t))\n-        .forEach((Token t) ->\n-          diagnosticStorage.addDiagnostic(t, getErrorMessage(INDEX_WORD_RIGHT, t.getText()))\n-        );\n+    return diagnosticStorage.getDiagnostics();\n+  }\n \n-      foundTokens.stream()\n-        .filter((Token t) -> noSpaceLeft(tokens, t) && noSpaceRight(tokens, t))\n-        .forEach((Token t) ->\n-          diagnosticStorage.addDiagnostic(t, getErrorMessage(INDEX_WORD_LEFT_RIGHT, t.getText()))\n-        );\n+  private void checkLeftRight(Token t, boolean noSpaceLeft, boolean noSpaceRight) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ2MTE1Ng=="}, "originalCommit": {"oid": "a1e55af3952d285073878ca93a343fcfde679a9c"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzODI3NA==", "bodyText": "\u0441\u0434\u0435\u043b\u0430\u043d\u043e", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1199#discussion_r432338274", "createdAt": "2020-05-29T08:36:40Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MissingSpaceDiagnostic.java", "diffHunk": "@@ -154,62 +153,73 @@ private static Pattern compilePattern(String string) {\n   @Override\n   public List<Diagnostic> getDiagnostics(DocumentContext documentContext) {\n \n-    sampleMessage[INDEX_WORD_LEFT] = info.getResourceString(\"wordLeft\");               // \"\u0421\u043b\u0435\u0432\u0430\"\n-    sampleMessage[INDEX_WORD_RIGHT] = info.getResourceString(\"wordRight\");             // \"\u0421\u043f\u0440\u0430\u0432\u0430\"\n-    sampleMessage[INDEX_WORD_LEFT_RIGHT] = info.getResourceString(\"wordLeftAndRight\"); // \"\u0421\u043b\u0435\u0432\u0430 \u0438 \u0441\u043f\u0440\u0430\u0432\u0430\"\n+    if (patternL == null && patternR == null && patternLr == null){\n+      return Collections.emptyList();\n+    }\n \n     diagnosticStorage.clearDiagnostics();\n \n     List<Token> tokens = documentContext.getTokens();\n-    List<Token> foundTokens;\n-\n-    // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u043b\u0435\u0432\u0430\n-    if (patternL != null) {\n-      foundTokens = findTokensByPattern(tokens, patternL);\n+    boolean noSpaceLeft = false;\n+    boolean noSpaceRight = false;\n \n-      foundTokens.stream()\n-        .filter((Token t) -> noSpaceLeft(tokens, t))\n-        .forEach((Token t) ->\n-          diagnosticStorage.addDiagnostic(t, getErrorMessage(INDEX_WORD_LEFT, t.getText()))\n-        );\n-    }\n+    for (var token:tokens){\n+      boolean checkLeft = false;\n+      boolean checkRight = false;\n \n-    // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u043f\u0440\u0430\u0432\u0430\n-    if (patternR != null) {\n-      foundTokens = findTokensByPattern(tokens, patternR);\n+      final var text = token.getText();\n \n-      foundTokens.stream()\n-        .filter((Token t) -> noSpaceRight(tokens, t))\n-        .forEach((Token t) ->\n-          diagnosticStorage.addDiagnostic(t, getErrorMessage(INDEX_WORD_RIGHT, t.getText()))\n-        );\n-    }\n+      if (patternL != null && patternL.matcher(text).matches()){\n+        noSpaceLeft = noSpaceLeft(tokens, token);\n+        checkLeft = true;\n \n-    // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u043b\u0435\u0432\u0430 \u0438 \u0441\u043f\u0440\u0430\u0432\u0430\n-    if (patternLr != null) {\n-      foundTokens = findTokensByPattern(tokens, patternLr);\n+        if (noSpaceLeft){\n+          addDiagnostic(token, mainMessage, indexWordLeftMsg);\n+        }\n+      }\n+      if (patternR != null && patternR.matcher(text).matches()){\n+        noSpaceRight = noSpaceRight(tokens, token);\n+        checkRight = true;\n \n-      foundTokens.stream()\n-        .filter((Token t) -> noSpaceLeft(tokens, t) && !noSpaceRight(tokens, t))\n-        .forEach((Token t) ->\n-          diagnosticStorage.addDiagnostic(t, getErrorMessage(INDEX_WORD_LEFT, t.getText()))\n-        );\n+        if (noSpaceRight){\n+          addDiagnostic(token, mainMessage, indexWordRightMsg);\n+        }\n+      }\n+      if (patternLr != null && patternLr.matcher(text).matches()){\n+        if (!checkLeft){\n+          noSpaceLeft = noSpaceLeft(tokens, token);\n+        }\n+        if (!checkRight){\n+          noSpaceRight = noSpaceRight(tokens, token);\n+        }\n+        checkLeftRight(token, noSpaceLeft, noSpaceRight);\n+      }\n+    }\n \n-      foundTokens.stream()\n-        .filter((Token t) -> !noSpaceLeft(tokens, t) && noSpaceRight(tokens, t))\n-        .forEach((Token t) ->\n-          diagnosticStorage.addDiagnostic(t, getErrorMessage(INDEX_WORD_RIGHT, t.getText()))\n-        );\n+    return diagnosticStorage.getDiagnostics();\n+  }\n \n-      foundTokens.stream()\n-        .filter((Token t) -> noSpaceLeft(tokens, t) && noSpaceRight(tokens, t))\n-        .forEach((Token t) ->\n-          diagnosticStorage.addDiagnostic(t, getErrorMessage(INDEX_WORD_LEFT_RIGHT, t.getText()))\n-        );\n+  private void checkLeftRight(Token t, boolean noSpaceLeft, boolean noSpaceRight) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ2MTE1Ng=="}, "originalCommit": {"oid": "a1e55af3952d285073878ca93a343fcfde679a9c"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjAwNDYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MissingSpaceDiagnostic.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODo0MToxMFrOGWtIdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwODozNjo0OFrOGcT1ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ2MTMwMA==", "bodyText": "\u0438 \u044d\u0442\u043e\u0442", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1199#discussion_r426461300", "createdAt": "2020-05-18T08:41:10Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MissingSpaceDiagnostic.java", "diffHunk": "@@ -154,62 +153,73 @@ private static Pattern compilePattern(String string) {\n   @Override\n   public List<Diagnostic> getDiagnostics(DocumentContext documentContext) {\n \n-    sampleMessage[INDEX_WORD_LEFT] = info.getResourceString(\"wordLeft\");               // \"\u0421\u043b\u0435\u0432\u0430\"\n-    sampleMessage[INDEX_WORD_RIGHT] = info.getResourceString(\"wordRight\");             // \"\u0421\u043f\u0440\u0430\u0432\u0430\"\n-    sampleMessage[INDEX_WORD_LEFT_RIGHT] = info.getResourceString(\"wordLeftAndRight\"); // \"\u0421\u043b\u0435\u0432\u0430 \u0438 \u0441\u043f\u0440\u0430\u0432\u0430\"\n+    if (patternL == null && patternR == null && patternLr == null){\n+      return Collections.emptyList();\n+    }\n \n     diagnosticStorage.clearDiagnostics();\n \n     List<Token> tokens = documentContext.getTokens();\n-    List<Token> foundTokens;\n-\n-    // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u043b\u0435\u0432\u0430\n-    if (patternL != null) {\n-      foundTokens = findTokensByPattern(tokens, patternL);\n+    boolean noSpaceLeft = false;\n+    boolean noSpaceRight = false;\n \n-      foundTokens.stream()\n-        .filter((Token t) -> noSpaceLeft(tokens, t))\n-        .forEach((Token t) ->\n-          diagnosticStorage.addDiagnostic(t, getErrorMessage(INDEX_WORD_LEFT, t.getText()))\n-        );\n-    }\n+    for (var token:tokens){\n+      boolean checkLeft = false;\n+      boolean checkRight = false;\n \n-    // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u043f\u0440\u0430\u0432\u0430\n-    if (patternR != null) {\n-      foundTokens = findTokensByPattern(tokens, patternR);\n+      final var text = token.getText();\n \n-      foundTokens.stream()\n-        .filter((Token t) -> noSpaceRight(tokens, t))\n-        .forEach((Token t) ->\n-          diagnosticStorage.addDiagnostic(t, getErrorMessage(INDEX_WORD_RIGHT, t.getText()))\n-        );\n-    }\n+      if (patternL != null && patternL.matcher(text).matches()){\n+        noSpaceLeft = noSpaceLeft(tokens, token);\n+        checkLeft = true;\n \n-    // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u043b\u0435\u0432\u0430 \u0438 \u0441\u043f\u0440\u0430\u0432\u0430\n-    if (patternLr != null) {\n-      foundTokens = findTokensByPattern(tokens, patternLr);\n+        if (noSpaceLeft){\n+          addDiagnostic(token, mainMessage, indexWordLeftMsg);\n+        }\n+      }\n+      if (patternR != null && patternR.matcher(text).matches()){\n+        noSpaceRight = noSpaceRight(tokens, token);\n+        checkRight = true;\n \n-      foundTokens.stream()\n-        .filter((Token t) -> noSpaceLeft(tokens, t) && !noSpaceRight(tokens, t))\n-        .forEach((Token t) ->\n-          diagnosticStorage.addDiagnostic(t, getErrorMessage(INDEX_WORD_LEFT, t.getText()))\n-        );\n+        if (noSpaceRight){\n+          addDiagnostic(token, mainMessage, indexWordRightMsg);\n+        }\n+      }\n+      if (patternLr != null && patternLr.matcher(text).matches()){\n+        if (!checkLeft){\n+          noSpaceLeft = noSpaceLeft(tokens, token);\n+        }\n+        if (!checkRight){\n+          noSpaceRight = noSpaceRight(tokens, token);\n+        }\n+        checkLeftRight(token, noSpaceLeft, noSpaceRight);\n+      }\n+    }\n \n-      foundTokens.stream()\n-        .filter((Token t) -> !noSpaceLeft(tokens, t) && noSpaceRight(tokens, t))\n-        .forEach((Token t) ->\n-          diagnosticStorage.addDiagnostic(t, getErrorMessage(INDEX_WORD_RIGHT, t.getText()))\n-        );\n+    return diagnosticStorage.getDiagnostics();\n+  }\n \n-      foundTokens.stream()\n-        .filter((Token t) -> noSpaceLeft(tokens, t) && noSpaceRight(tokens, t))\n-        .forEach((Token t) ->\n-          diagnosticStorage.addDiagnostic(t, getErrorMessage(INDEX_WORD_LEFT_RIGHT, t.getText()))\n-        );\n+  private void checkLeftRight(Token t, boolean noSpaceLeft, boolean noSpaceRight) {\n \n+    String errorMessage = null;\n+    if (noSpaceLeft && !noSpaceRight){\n+      errorMessage = indexWordLeftMsg;\n+    } else {\n+      if (!noSpaceLeft && noSpaceRight) {\n+        errorMessage = indexWordRightMsg;\n+      } else {\n+        if (noSpaceLeft) {\n+          errorMessage = indexWordLeftRightMsg;\n+        }\n+      }\n     }\n+    addDiagnostic(t, mainMessage, errorMessage);\n+  }\n \n-    return diagnosticStorage.getDiagnostics();\n+  private void addDiagnostic(Token t, String mainMessage, String errorMessage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e55af3952d285073878ca93a343fcfde679a9c"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzODM2Mg==", "bodyText": "\u0441\u0434\u0435\u043b\u0430\u043d\u043e", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1199#discussion_r432338362", "createdAt": "2020-05-29T08:36:48Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MissingSpaceDiagnostic.java", "diffHunk": "@@ -154,62 +153,73 @@ private static Pattern compilePattern(String string) {\n   @Override\n   public List<Diagnostic> getDiagnostics(DocumentContext documentContext) {\n \n-    sampleMessage[INDEX_WORD_LEFT] = info.getResourceString(\"wordLeft\");               // \"\u0421\u043b\u0435\u0432\u0430\"\n-    sampleMessage[INDEX_WORD_RIGHT] = info.getResourceString(\"wordRight\");             // \"\u0421\u043f\u0440\u0430\u0432\u0430\"\n-    sampleMessage[INDEX_WORD_LEFT_RIGHT] = info.getResourceString(\"wordLeftAndRight\"); // \"\u0421\u043b\u0435\u0432\u0430 \u0438 \u0441\u043f\u0440\u0430\u0432\u0430\"\n+    if (patternL == null && patternR == null && patternLr == null){\n+      return Collections.emptyList();\n+    }\n \n     diagnosticStorage.clearDiagnostics();\n \n     List<Token> tokens = documentContext.getTokens();\n-    List<Token> foundTokens;\n-\n-    // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u043b\u0435\u0432\u0430\n-    if (patternL != null) {\n-      foundTokens = findTokensByPattern(tokens, patternL);\n+    boolean noSpaceLeft = false;\n+    boolean noSpaceRight = false;\n \n-      foundTokens.stream()\n-        .filter((Token t) -> noSpaceLeft(tokens, t))\n-        .forEach((Token t) ->\n-          diagnosticStorage.addDiagnostic(t, getErrorMessage(INDEX_WORD_LEFT, t.getText()))\n-        );\n-    }\n+    for (var token:tokens){\n+      boolean checkLeft = false;\n+      boolean checkRight = false;\n \n-    // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u043f\u0440\u0430\u0432\u0430\n-    if (patternR != null) {\n-      foundTokens = findTokensByPattern(tokens, patternR);\n+      final var text = token.getText();\n \n-      foundTokens.stream()\n-        .filter((Token t) -> noSpaceRight(tokens, t))\n-        .forEach((Token t) ->\n-          diagnosticStorage.addDiagnostic(t, getErrorMessage(INDEX_WORD_RIGHT, t.getText()))\n-        );\n-    }\n+      if (patternL != null && patternL.matcher(text).matches()){\n+        noSpaceLeft = noSpaceLeft(tokens, token);\n+        checkLeft = true;\n \n-    // \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u043b\u0435\u0432\u0430 \u0438 \u0441\u043f\u0440\u0430\u0432\u0430\n-    if (patternLr != null) {\n-      foundTokens = findTokensByPattern(tokens, patternLr);\n+        if (noSpaceLeft){\n+          addDiagnostic(token, mainMessage, indexWordLeftMsg);\n+        }\n+      }\n+      if (patternR != null && patternR.matcher(text).matches()){\n+        noSpaceRight = noSpaceRight(tokens, token);\n+        checkRight = true;\n \n-      foundTokens.stream()\n-        .filter((Token t) -> noSpaceLeft(tokens, t) && !noSpaceRight(tokens, t))\n-        .forEach((Token t) ->\n-          diagnosticStorage.addDiagnostic(t, getErrorMessage(INDEX_WORD_LEFT, t.getText()))\n-        );\n+        if (noSpaceRight){\n+          addDiagnostic(token, mainMessage, indexWordRightMsg);\n+        }\n+      }\n+      if (patternLr != null && patternLr.matcher(text).matches()){\n+        if (!checkLeft){\n+          noSpaceLeft = noSpaceLeft(tokens, token);\n+        }\n+        if (!checkRight){\n+          noSpaceRight = noSpaceRight(tokens, token);\n+        }\n+        checkLeftRight(token, noSpaceLeft, noSpaceRight);\n+      }\n+    }\n \n-      foundTokens.stream()\n-        .filter((Token t) -> !noSpaceLeft(tokens, t) && noSpaceRight(tokens, t))\n-        .forEach((Token t) ->\n-          diagnosticStorage.addDiagnostic(t, getErrorMessage(INDEX_WORD_RIGHT, t.getText()))\n-        );\n+    return diagnosticStorage.getDiagnostics();\n+  }\n \n-      foundTokens.stream()\n-        .filter((Token t) -> noSpaceLeft(tokens, t) && noSpaceRight(tokens, t))\n-        .forEach((Token t) ->\n-          diagnosticStorage.addDiagnostic(t, getErrorMessage(INDEX_WORD_LEFT_RIGHT, t.getText()))\n-        );\n+  private void checkLeftRight(Token t, boolean noSpaceLeft, boolean noSpaceRight) {\n \n+    String errorMessage = null;\n+    if (noSpaceLeft && !noSpaceRight){\n+      errorMessage = indexWordLeftMsg;\n+    } else {\n+      if (!noSpaceLeft && noSpaceRight) {\n+        errorMessage = indexWordRightMsg;\n+      } else {\n+        if (noSpaceLeft) {\n+          errorMessage = indexWordLeftRightMsg;\n+        }\n+      }\n     }\n+    addDiagnostic(t, mainMessage, errorMessage);\n+  }\n \n-    return diagnosticStorage.getDiagnostics();\n+  private void addDiagnostic(Token t, String mainMessage, String errorMessage) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ2MTMwMA=="}, "originalCommit": {"oid": "a1e55af3952d285073878ca93a343fcfde679a9c"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NjAxMTYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MissingSpaceDiagnostic.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODo0Mjo0N1rOGWtMjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwODozNjoyNlrOGcT0zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ2MjM0OQ==", "bodyText": "\u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043b\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u044b\u0438\u0433\u0440\u044b\u0448\u0430 \u043e\u0442 \u0437\u0430\u043c\u0435\u043d\u044b getTokens \u043d\u0430 getTokensFromDefaultChannel?", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1199#discussion_r426462349", "createdAt": "2020-05-18T08:42:47Z", "author": {"login": "nixel2007"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MissingSpaceDiagnostic.java", "diffHunk": "@@ -154,62 +153,73 @@ private static Pattern compilePattern(String string) {\n   @Override\n   public List<Diagnostic> getDiagnostics(DocumentContext documentContext) {\n \n-    sampleMessage[INDEX_WORD_LEFT] = info.getResourceString(\"wordLeft\");               // \"\u0421\u043b\u0435\u0432\u0430\"\n-    sampleMessage[INDEX_WORD_RIGHT] = info.getResourceString(\"wordRight\");             // \"\u0421\u043f\u0440\u0430\u0432\u0430\"\n-    sampleMessage[INDEX_WORD_LEFT_RIGHT] = info.getResourceString(\"wordLeftAndRight\"); // \"\u0421\u043b\u0435\u0432\u0430 \u0438 \u0441\u043f\u0440\u0430\u0432\u0430\"\n+    if (patternL == null && patternR == null && patternLr == null){\n+      return Collections.emptyList();\n+    }\n \n     diagnosticStorage.clearDiagnostics();\n \n     List<Token> tokens = documentContext.getTokens();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e55af3952d285073878ca93a343fcfde679a9c"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzODEyNg==", "bodyText": "\u0443\u0445. \u043d\u0430\u043a\u043e\u043d\u0435\u0446-\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u0432\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u043a \u0434\u043e\u0440\u0430\u0431\u043e\u0442\u043a\u0435.\n\u0434\u0430, \u0432\u044b\u0438\u0433\u0440\u044b\u0448 \u0435\u0441\u0442\u044c.\n\u0437\u0430\u043e\u0434\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0435\u043b\u0430\u043b \u043a\u043e\u0434 \u043d\u0430 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0442\u043e\u043a\u0435\u043d\u043e\u0432, \u0430 \u043d\u0435 \u043a\u0430\u043a \u0434\u043e \u043c\u043e\u0438\u0445 \u043f\u0440\u0430\u0432\u043e\u043a \u0431\u044b\u043b\u043e.", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1199#discussion_r432338126", "createdAt": "2020-05-29T08:36:26Z", "author": {"login": "artbear"}, "path": "src/main/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MissingSpaceDiagnostic.java", "diffHunk": "@@ -154,62 +153,73 @@ private static Pattern compilePattern(String string) {\n   @Override\n   public List<Diagnostic> getDiagnostics(DocumentContext documentContext) {\n \n-    sampleMessage[INDEX_WORD_LEFT] = info.getResourceString(\"wordLeft\");               // \"\u0421\u043b\u0435\u0432\u0430\"\n-    sampleMessage[INDEX_WORD_RIGHT] = info.getResourceString(\"wordRight\");             // \"\u0421\u043f\u0440\u0430\u0432\u0430\"\n-    sampleMessage[INDEX_WORD_LEFT_RIGHT] = info.getResourceString(\"wordLeftAndRight\"); // \"\u0421\u043b\u0435\u0432\u0430 \u0438 \u0441\u043f\u0440\u0430\u0432\u0430\"\n+    if (patternL == null && patternR == null && patternLr == null){\n+      return Collections.emptyList();\n+    }\n \n     diagnosticStorage.clearDiagnostics();\n \n     List<Token> tokens = documentContext.getTokens();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ2MjM0OQ=="}, "originalCommit": {"oid": "a1e55af3952d285073878ca93a343fcfde679a9c"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODI4NzI5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MissingSpaceDiagnosticTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxMzoyMjowOVrOGgJeNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QxMzoyMjowOVrOGgJeNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM2MjgwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //    assertThat(diagnostics).hasSize(29);", "url": "https://github.com/1c-syntax/bsl-language-server/pull/1199#discussion_r436362804", "createdAt": "2020-06-07T13:22:09Z", "author": {"login": "nixel2007"}, "path": "src/test/java/com/github/_1c_syntax/bsl/languageserver/diagnostics/MissingSpaceDiagnosticTest.java", "diffHunk": "@@ -45,7 +45,7 @@ void test() {\n \n     List<Diagnostic> diagnostics = getDiagnostics();\n \n-    assertThat(diagnostics).hasSize(29);\n+//    assertThat(diagnostics).hasSize(29);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb3b12e42e397d996cc399a388436e60c167e84"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4827, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}