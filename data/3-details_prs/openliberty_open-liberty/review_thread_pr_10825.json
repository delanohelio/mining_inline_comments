{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMjk4Mzc1", "number": 10825, "reviewThreads": {"totalCount": 75, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzozMzo0OVrODgycKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTowMjoyOVrODn8WQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzA3NDM1OnYy", "diffSide": "RIGHT", "path": "dev/cnf/oss_dependencies.maven", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzozMzo0OVrOFrLy7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzozMzo0OVrOFrLy7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyNjM0OA==", "bodyText": "Can you get rid of 4.0.9? Check if used anywhere.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r380826348", "createdAt": "2020-02-18T17:33:49Z", "author": {"login": "jvanhill"}, "path": "dev/cnf/oss_dependencies.maven", "diffHunk": "@@ -72,6 +72,7 @@ com.sun.xml.ws:jaxws-rt:2.2.10\n com.sun.xml.ws:jaxws-tools:2.2.10\n com.sun.xml.ws:policy:2.4\n com.unboundid:unboundid-ldapsdk:4.0.9", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b3f4f64e61a1c4dbbf3a3978252e1030b86fe98"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzA4NDg5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzozNzowOFrOFrL5ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzozNzowOFrOFrL5ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyODA2Mg==", "bodyText": "Missing other parameters.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r380828062", "createdAt": "2020-02-18T17:37:08Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "diffHunk": "@@ -54,30 +61,57 @@\n      * @param bases The base entries to create for this in-memory LDAP server.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b3f4f64e61a1c4dbbf3a3978252e1030b86fe98"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzA4NzY1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzozNzo1N1rOFrL7Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzozODo1MFrOFrL9Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyODQ3NA==", "bodyText": "keystorePIN seems like it should be keystorePassword....", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r380828474", "createdAt": "2020-02-18T17:37:57Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "diffHunk": "@@ -54,30 +61,57 @@\n      * @param bases The base entries to create for this in-memory LDAP server.\n      * @throws Exception If something went wrong\n      */\n-    public InMemoryLDAPServer(String... bases) throws Exception {\n+    public InMemoryLDAPServer(boolean sslEnabled, String keystore, String keystorePIN, String schemaPath, String... bases) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b3f4f64e61a1c4dbbf3a3978252e1030b86fe98"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyODk1OA==", "bodyText": "I would also put the bases parameter first so it matches the default constructor, it is the other parameters that are optional.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r380828958", "createdAt": "2020-02-18T17:38:50Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "diffHunk": "@@ -54,30 +61,57 @@\n      * @param bases The base entries to create for this in-memory LDAP server.\n      * @throws Exception If something went wrong\n      */\n-    public InMemoryLDAPServer(String... bases) throws Exception {\n+    public InMemoryLDAPServer(boolean sslEnabled, String keystore, String keystorePIN, String schemaPath, String... bases) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyODQ3NA=="}, "originalCommit": {"oid": "4b3f4f64e61a1c4dbbf3a3978252e1030b86fe98"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzA5OTEzOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo0MToxMlrOFrMCRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo0Mzo0MVrOFrMHmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMDI3OQ==", "bodyText": "It seems to me that the only difference between when SSL is enabled or not is the listener configs. No need to reproduce the other code. Additionally, seems like we should enable both when SSL is enabled. Given the \"setListenerConfigs\" method name, seems like you can pass in multiple listener configs (LDAP and LDAPS)?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r380830279", "createdAt": "2020-02-18T17:41:12Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "diffHunk": "@@ -54,30 +61,57 @@\n      * @param bases The base entries to create for this in-memory LDAP server.\n      * @throws Exception If something went wrong\n      */\n-    public InMemoryLDAPServer(String... bases) throws Exception {\n+    public InMemoryLDAPServer(boolean sslEnabled, String keystore, String keystorePIN, String schemaPath, String... bases) throws Exception {\n+\n+        if (!sslEnabled) {\n+            config = new InMemoryDirectoryServerConfig(bases);\n+            config.addAdditionalBindCredentials(getBindDN(), getBindPassword());\n+            config.setListenerConfigs(\n+                                      InMemoryListenerConfig.createLDAPConfig(\"LDAP\", // Listener name\n+                                                                              null, // Listen address. (null = listen on all interfaces)\n+                                                                              0, // Listen port (0 = automatically choose an available port)\n+                                                                              null) // StartTLS factory\n+\n+            ); // Client factory\n+\n+        } else {\n+            final SSLUtil serverSSLUtil = new SSLUtil(new KeyStoreKeyManager(keystore, keystorePIN", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b3f4f64e61a1c4dbbf3a3978252e1030b86fe98"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMTQ4MQ==", "bodyText": "Might even consider always enabling LDAP and LDAPS....", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r380831481", "createdAt": "2020-02-18T17:43:24Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "diffHunk": "@@ -54,30 +61,57 @@\n      * @param bases The base entries to create for this in-memory LDAP server.\n      * @throws Exception If something went wrong\n      */\n-    public InMemoryLDAPServer(String... bases) throws Exception {\n+    public InMemoryLDAPServer(boolean sslEnabled, String keystore, String keystorePIN, String schemaPath, String... bases) throws Exception {\n+\n+        if (!sslEnabled) {\n+            config = new InMemoryDirectoryServerConfig(bases);\n+            config.addAdditionalBindCredentials(getBindDN(), getBindPassword());\n+            config.setListenerConfigs(\n+                                      InMemoryListenerConfig.createLDAPConfig(\"LDAP\", // Listener name\n+                                                                              null, // Listen address. (null = listen on all interfaces)\n+                                                                              0, // Listen port (0 = automatically choose an available port)\n+                                                                              null) // StartTLS factory\n+\n+            ); // Client factory\n+\n+        } else {\n+            final SSLUtil serverSSLUtil = new SSLUtil(new KeyStoreKeyManager(keystore, keystorePIN", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMDI3OQ=="}, "originalCommit": {"oid": "4b3f4f64e61a1c4dbbf3a3978252e1030b86fe98"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMTY0MA==", "bodyText": "that would remove the need to change the constructor.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r380831640", "createdAt": "2020-02-18T17:43:41Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "diffHunk": "@@ -54,30 +61,57 @@\n      * @param bases The base entries to create for this in-memory LDAP server.\n      * @throws Exception If something went wrong\n      */\n-    public InMemoryLDAPServer(String... bases) throws Exception {\n+    public InMemoryLDAPServer(boolean sslEnabled, String keystore, String keystorePIN, String schemaPath, String... bases) throws Exception {\n+\n+        if (!sslEnabled) {\n+            config = new InMemoryDirectoryServerConfig(bases);\n+            config.addAdditionalBindCredentials(getBindDN(), getBindPassword());\n+            config.setListenerConfigs(\n+                                      InMemoryListenerConfig.createLDAPConfig(\"LDAP\", // Listener name\n+                                                                              null, // Listen address. (null = listen on all interfaces)\n+                                                                              0, // Listen port (0 = automatically choose an available port)\n+                                                                              null) // StartTLS factory\n+\n+            ); // Client factory\n+\n+        } else {\n+            final SSLUtil serverSSLUtil = new SSLUtil(new KeyStoreKeyManager(keystore, keystorePIN", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMDI3OQ=="}, "originalCommit": {"oid": "4b3f4f64e61a1c4dbbf3a3978252e1030b86fe98"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzEwMzIyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo0MjoxMlrOFrMEnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo0MjoxMlrOFrMEnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMDg3OQ==", "bodyText": "Instead of TLSV1.3, can we pass in a generic TLS (or something similar) that covers any valid TLS version? Then we don't have to come fix this when v4 comes out.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r380830879", "createdAt": "2020-02-18T17:42:12Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "diffHunk": "@@ -54,30 +61,57 @@\n      * @param bases The base entries to create for this in-memory LDAP server.\n      * @throws Exception If something went wrong\n      */\n-    public InMemoryLDAPServer(String... bases) throws Exception {\n+    public InMemoryLDAPServer(boolean sslEnabled, String keystore, String keystorePIN, String schemaPath, String... bases) throws Exception {\n+\n+        if (!sslEnabled) {\n+            config = new InMemoryDirectoryServerConfig(bases);\n+            config.addAdditionalBindCredentials(getBindDN(), getBindPassword());\n+            config.setListenerConfigs(\n+                                      InMemoryListenerConfig.createLDAPConfig(\"LDAP\", // Listener name\n+                                                                              null, // Listen address. (null = listen on all interfaces)\n+                                                                              0, // Listen port (0 = automatically choose an available port)\n+                                                                              null) // StartTLS factory\n+\n+            ); // Client factory\n+\n+        } else {\n+            final SSLUtil serverSSLUtil = new SSLUtil(new KeyStoreKeyManager(keystore, keystorePIN\n+                            .toCharArray(), \"JKS\", \"cert-alias\"), new TrustAllTrustManager());\n+            config = new InMemoryDirectoryServerConfig(bases);\n \n-        config = new InMemoryDirectoryServerConfig(bases);\n-        config.addAdditionalBindCredentials(getBindDN(), getBindPassword());\n-        config.setListenerConfigs(\n-                                  InMemoryListenerConfig.createLDAPConfig(\"LDAP\", // Listener name\n-                                                                          null, // Listen address. (null = listen on all interfaces)\n-                                                                          0, // Listen port (0 = automatically choose an available port)\n-                                                                          null) // StartTLS factory\n-        ); // Client factory\n+            config.addAdditionalBindCredentials(getBindDN(), getBindPassword());\n+\n+            config.setListenerConfigs(InMemoryListenerConfig.createLDAPSConfig(\"LDAPS\", 0, serverSSLUtil.createSSLServerSocketFactory(\"TLSV1.3\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b3f4f64e61a1c4dbbf3a3978252e1030b86fe98"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzEyNzczOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/bnd.bnd", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo0OTozMVrOFrMUDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo0OTozMVrOFrMUDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzNDgyOA==", "bodyText": "Shouldn't have both. Remove 4.0.9.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r380834828", "createdAt": "2020-02-18T17:49:31Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/bnd.bnd", "diffHunk": "@@ -23,7 +23,8 @@ tested.features: \\\n     vmmapi-1.0\n \n -buildpath: \\\n-    com.unboundid:unboundid-ldapsdk;version=latest,\\\n+    com.unboundid:unboundid-ldapsdk;version=4.0.9,\\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b3f4f64e61a1c4dbbf3a3978252e1030b86fe98"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzEyOTEwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo0OTo1M1rOFrMU2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo0OTo1M1rOFrMU2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzNTAzMw==", "bodyText": "Shouldn't have both. Remove 4.0.9.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r380835033", "createdAt": "2020-02-18T17:49:53Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/build.gradle", "diffHunk": "@@ -17,6 +17,7 @@ def appBuildDir = \"${buildDir}/test-application\"\n dependencies { \n   requiredLibs 'com.ibm.ws.componenttest:public.api:1.0.0',\n     'com.unboundid:unboundid-ldapsdk:4.0.9',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b3f4f64e61a1c4dbbf3a3978252e1030b86fe98"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzEzMTUxOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo1MDozNlrOFrMWZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo1MDozNlrOFrMWZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzNTQyOQ==", "bodyText": "Shouldn't have new servers. The old server should still be valid.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r380835429", "createdAt": "2020-02-18T17:50:36Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/build.gradle", "diffHunk": "@@ -131,7 +132,9 @@ autoFVT.doLast {\n     'com.ibm.ws.security.wim.adapter.ldap.fat.readtimeout',\n     'com.ibm.ws.security.wim.adapter.ldap.fat.racf.sdbm',\n     'com.ibm.ws.security.wim.adapter.ldap.fat.return.to.primary',\n-    'com.ibm.ws.security.wim.adapter.ldap.fat.racf.sdbm.basic'\n+    'com.ibm.ws.security.wim.adapter.ldap.fat.racf.sdbm.basic',\n+    'com.ibm.ws.security.wim.adapter.ldap.fat.unboundid.ssl',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b3f4f64e61a1c4dbbf3a3978252e1030b86fe98"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzEzMjkzOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/FATSuite.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo1MTowMFrOFrMXRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo1MTowMFrOFrMXRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzNTY1Mg==", "bodyText": "Shouldn't have new tests. We are only modifying the existing tests.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r380835652", "createdAt": "2020-02-18T17:51:00Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/FATSuite.java", "diffHunk": "@@ -54,6 +54,8 @@\n                 FATLDAPNameTest.class,\n                 FATTestPerformance.class,\n                 FATTestReuseConn.class,\n+                FATTestUnboundIDActiveDirectorywithSSL.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b3f4f64e61a1c4dbbf3a3978252e1030b86fe98"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzEzNDExOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/FATTestUnboundIDActiveDirectorywithSSL.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo1MToyMVrOFrMX_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo1MToyMVrOFrMX_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzNTgzNw==", "bodyText": "Delete this test. Shouldn't have new tests.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r380835837", "createdAt": "2020-02-18T17:51:21Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/FATTestUnboundIDActiveDirectorywithSSL.java", "diffHunk": "@@ -0,0 +1,866 @@\n+/*******************************************************************************", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b3f4f64e61a1c4dbbf3a3978252e1030b86fe98"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzEzNDg4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/FATTestUnboundIDwithSSL.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo1MTozNVrOFrMYew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo1MTozNVrOFrMYew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzNTk2Mw==", "bodyText": "Delete this test. We shouldn't have new tests.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r380835963", "createdAt": "2020-02-18T17:51:35Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/FATTestUnboundIDwithSSL.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*******************************************************************************", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b3f4f64e61a1c4dbbf3a3978252e1030b86fe98"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzMxMjYyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.unboundid.ad.ssl/AD.ldif", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo0NjozN1rOFrOG-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo0NjozN1rOFrOG-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2NDI1MQ==", "bodyText": "Why two AD.ldif files?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r380864251", "createdAt": "2020-02-18T18:46:37Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.unboundid.ad.ssl/AD.ldif", "diffHunk": "@@ -0,0 +1,708 @@\n+dn: DC=SECFVT2,DC=AUSTIN,DC=IBM,DC=COM", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b3f4f64e61a1c4dbbf3a3978252e1030b86fe98"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzMxMzc4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.unboundid.ad.ssl/bootstrap.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo0Njo1OFrOFrOHsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo0Njo1OFrOFrOHsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2NDQzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Copyright (c) 2017 IBM Corporation and others.\n          \n          \n            \n            # Copyright (c) 2017, 2020 IBM Corporation and others.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r380864433", "createdAt": "2020-02-18T18:46:58Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.unboundid.ad.ssl/bootstrap.properties", "diffHunk": "@@ -0,0 +1,13 @@\n+###############################################################################\n+# Copyright (c) 2017 IBM Corporation and others.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b3f4f64e61a1c4dbbf3a3978252e1030b86fe98"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzMxNTY2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.unboundid.ad.ssl/server.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo0NzozOFrOFrOI7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo0Nzo1MlrOFrOJaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2NDc1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Copyright (c) 2017 IBM Corporation and others.\n          \n          \n            \n                Copyright (c) 2020 IBM Corporation and others.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r380864750", "createdAt": "2020-02-18T18:47:38Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.unboundid.ad.ssl/server.xml", "diffHunk": "@@ -0,0 +1,53 @@\n+<!--\n+    Copyright (c) 2017 IBM Corporation and others.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b3f4f64e61a1c4dbbf3a3978252e1030b86fe98"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2NDg3Mg==", "bodyText": "If this file is even needed after removing the new tests.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r380864872", "createdAt": "2020-02-18T18:47:52Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.unboundid.ad.ssl/server.xml", "diffHunk": "@@ -0,0 +1,53 @@\n+<!--\n+    Copyright (c) 2017 IBM Corporation and others.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2NDc1MA=="}, "originalCommit": {"oid": "4b3f4f64e61a1c4dbbf3a3978252e1030b86fe98"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzMxOTAwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.unboundid.ad.ssl/server.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo0ODozN1rOFrOK6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo0ODozN1rOFrOK6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2NTI1OA==", "bodyText": "Weird this wouldn't use properties for bindDN and bindPassword for ldap.server.2.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r380865258", "createdAt": "2020-02-18T18:48:37Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.unboundid.ad.ssl/server.xml", "diffHunk": "@@ -0,0 +1,53 @@\n+<!--\n+    Copyright (c) 2017 IBM Corporation and others.\n+    All rights reserved. This program and the accompanying materials\n+    are made available under the terms of the Eclipse Public License v1.0\n+    which accompanies this distribution, and is available at\n+    http:\\\\www.eclipse.org\\legal\\epl-v10.html\n+   \n+    Contributors:\n+        IBM Corporation - initial API and implementation\n+ -->\n+<server description=\"com.ibm.ws.security.registry.ldap.fat.unboundid.ssl\">\n+\n+\t<include location=\"../fatTestPorts.xml\"/>\n+\n+    <!-- Enable features -->\n+    <featureManager>\n+        <feature>appSecurity-2.0</feature>\n+        <feature>servlet-3.1</feature>\n+        <feature>securitylibertyinternals-1.0</feature>\n+\t\t<feature>ldapRegistry-3.0</feature>\n+    </featureManager>\n+    \n+    <ldapRegistry id=\"ldap\" realm=\"SampleLdapADRealm\" host=\"${ldap.server.2.name}\" port=\"${ldap.server.2.ssl.port}\" ignoreCase=\"true\"  baseDN=\"DC=SECFVT2,DC=AUSTIN,DC=IBM,DC=COM\"\n+\t\tbindDN=\"cn=testuser,cn=users,dc=secfvt2,dc=austin,dc=ibm,dc=com\"\n+\t\tbindPassword=\"testuserpwd\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b3f4f64e61a1c4dbbf3a3978252e1030b86fe98"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzMyMTA5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.unboundid.ssl/AD.ldif", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo0OToxMlrOFrOMIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo0OToxMlrOFrOMIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2NTU2OQ==", "bodyText": "Another LDIF file?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r380865569", "createdAt": "2020-02-18T18:49:12Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.unboundid.ssl/AD.ldif", "diffHunk": "@@ -0,0 +1,708 @@\n+dn: DC=SECFVT2,DC=AUSTIN,DC=IBM,DC=COM", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b3f4f64e61a1c4dbbf3a3978252e1030b86fe98"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzMyMjIwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.unboundid.ssl/ADNewSchema.ldif", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo0OTozMFrOFrOMyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo0OTozMFrOFrOMyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2NTczOA==", "bodyText": "And another LDIF file?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r380865738", "createdAt": "2020-02-18T18:49:30Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.unboundid.ssl/ADNewSchema.ldif", "diffHunk": "@@ -0,0 +1,425 @@\n+################################################################################", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b3f4f64e61a1c4dbbf3a3978252e1030b86fe98"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzMyMjk3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.unboundid.ssl/bootstrap.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo0OTo0N1rOFrONSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo0OTo0N1rOFrONSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2NTg2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Copyright (c) 2017 IBM Corporation and others.\n          \n          \n            \n            # Copyright (c) 2020 IBM Corporation and others.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r380865865", "createdAt": "2020-02-18T18:49:47Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.unboundid.ssl/bootstrap.properties", "diffHunk": "@@ -0,0 +1,13 @@\n+###############################################################################\n+# Copyright (c) 2017 IBM Corporation and others.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b3f4f64e61a1c4dbbf3a3978252e1030b86fe98"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzMyNDU1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.unboundid.ssl/jvm.options", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo1MDoxNFrOFrOOPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo1MDoxNFrOFrOOPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2NjExMA==", "bodyText": "Is this what we do on most tests or do we set it somewhere else?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r380866110", "createdAt": "2020-02-18T18:50:14Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.unboundid.ssl/jvm.options", "diffHunk": "@@ -0,0 +1 @@\n+-Dcom.sun.jndi.ldap.object.disableEndpointIdentification=true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b3f4f64e61a1c4dbbf3a3978252e1030b86fe98"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzMyNTM4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.unboundid.ssl/server.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo1MDoyOVrOFrOOvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo1MDoyOVrOFrOOvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2NjIzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Copyright (c) 2017 IBM Corporation and others.\n          \n          \n            \n                Copyright (c) 2020 IBM Corporation and others.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r380866237", "createdAt": "2020-02-18T18:50:29Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.unboundid.ssl/server.xml", "diffHunk": "@@ -0,0 +1,22 @@\n+<!--\n+    Copyright (c) 2017 IBM Corporation and others.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b3f4f64e61a1c4dbbf3a3978252e1030b86fe98"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzgwODc5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.com.unboundid/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjoxNjowOVrOFuMiJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjoxNjowOVrOFuMiJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4NDE2Nw==", "bodyText": "I would expect we copy the AD.ldif file here as well.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r383984167", "createdAt": "2020-02-25T16:16:09Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/build.gradle", "diffHunk": "@@ -14,4 +14,9 @@\n      from file(\"resources/wimschema.ldif\")\n      into file(\"build/classes/java/main/resources\")\n    }\n+   copy { \n+     from file(\"resources/keystore.jks\")\n+     into file(\"build/classes/java/main/resources\")\n+   }\n+   ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzgwOTg3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryADLDAPServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjoxNjoyN1rOFuMi4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjoxNjoyN1rOFuMi4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4NDM1NA==", "bodyText": "Documentation hasn't been updated for new class. I would explain that this class was created to contain the same data as the Active Directory instance of the ApacheDS stand-alone LDAP servers. This instance wasn't designed to behave like Active Directory.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r383984354", "createdAt": "2020-02-25T16:16:27Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryADLDAPServer.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.com.unboundid;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.net.InetAddress;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+\n+import com.unboundid.ldap.listener.InMemoryDirectoryServer;\n+import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;\n+import com.unboundid.ldap.listener.InMemoryListenerConfig;\n+import com.unboundid.ldap.sdk.DeleteRequest;\n+import com.unboundid.ldap.sdk.Entry;\n+import com.unboundid.ldap.sdk.LDAPConnection;\n+import com.unboundid.ldap.sdk.LDAPException;\n+import com.unboundid.ldap.sdk.Modification;\n+import com.unboundid.ldap.sdk.schema.Schema;\n+import com.unboundid.util.ssl.KeyStoreKeyManager;\n+import com.unboundid.util.ssl.SSLUtil;\n+import com.unboundid.util.ssl.TrustAllTrustManager;\n+\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzgxMjIzOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryADLDAPServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjoxNjo1OVrOFuMkQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjoxNjo1OVrOFuMkQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4NDcwNw==", "bodyText": "I expected this class to extend InMemoryLDAPServer, and therefore not have to reimplement all the code.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r383984707", "createdAt": "2020-02-25T16:16:59Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryADLDAPServer.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.com.unboundid;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.net.InetAddress;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+\n+import com.unboundid.ldap.listener.InMemoryDirectoryServer;\n+import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;\n+import com.unboundid.ldap.listener.InMemoryListenerConfig;\n+import com.unboundid.ldap.sdk.DeleteRequest;\n+import com.unboundid.ldap.sdk.Entry;\n+import com.unboundid.ldap.sdk.LDAPConnection;\n+import com.unboundid.ldap.sdk.LDAPException;\n+import com.unboundid.ldap.sdk.Modification;\n+import com.unboundid.ldap.sdk.schema.Schema;\n+import com.unboundid.util.ssl.KeyStoreKeyManager;\n+import com.unboundid.util.ssl.SSLUtil;\n+import com.unboundid.util.ssl.TrustAllTrustManager;\n+\n+/**\n+ * An in memory UnboundID LDAP server. See ContextPoolTimeoutTest for an example on how to use this.\n+ *\n+ * <br><br>\n+ * Basic steps: Create an instance of this class passing in your base DNs, eg. o=ibm,c=us. Add users\n+ * and groups via entries. Note you will need to build the LDAP tree, so if you want to create\n+ * uid=user1,ou=users,o=ibm,c=us, then you need an entry for ou=users first.\n+ *\n+ * <br><br>\n+ * In addition to the standard classes, the schema has been extended with the following classes:\n+ * <ul>\n+ * <li>wimInetOrgPerson - an extension to the inetOrgPerson class that contains WIM PersonAccount attributes</li>\n+ * <li>wimGroupOfNames - an extension to the groupofNames class that contains WIM Group attributes.</li>\n+ * <li>simulatedMicrosoftSecurityPrincipal - a simulated Active Directory user containing samAccountName and memberOf</li>\n+ * </ul>\n+ *\n+ * You can view the WIM schema in wimschema.ldif.\n+ */\n+public class InMemoryADLDAPServer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzgxODY3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryADLDAPServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjoxODozMVrOFuMoaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjoxODozMVrOFuMoaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4NTc2OQ==", "bodyText": "When you extend from InMemoryLDAPServer, I would re-factor some of this. Really, the difference between the classes is the schema that gets loaded. So you could have the parent-class have a constructor that you can call with the schema that you want to load.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r383985769", "createdAt": "2020-02-25T16:18:31Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryADLDAPServer.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.com.unboundid;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.net.InetAddress;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+\n+import com.unboundid.ldap.listener.InMemoryDirectoryServer;\n+import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;\n+import com.unboundid.ldap.listener.InMemoryListenerConfig;\n+import com.unboundid.ldap.sdk.DeleteRequest;\n+import com.unboundid.ldap.sdk.Entry;\n+import com.unboundid.ldap.sdk.LDAPConnection;\n+import com.unboundid.ldap.sdk.LDAPException;\n+import com.unboundid.ldap.sdk.Modification;\n+import com.unboundid.ldap.sdk.schema.Schema;\n+import com.unboundid.util.ssl.KeyStoreKeyManager;\n+import com.unboundid.util.ssl.SSLUtil;\n+import com.unboundid.util.ssl.TrustAllTrustManager;\n+\n+/**\n+ * An in memory UnboundID LDAP server. See ContextPoolTimeoutTest for an example on how to use this.\n+ *\n+ * <br><br>\n+ * Basic steps: Create an instance of this class passing in your base DNs, eg. o=ibm,c=us. Add users\n+ * and groups via entries. Note you will need to build the LDAP tree, so if you want to create\n+ * uid=user1,ou=users,o=ibm,c=us, then you need an entry for ou=users first.\n+ *\n+ * <br><br>\n+ * In addition to the standard classes, the schema has been extended with the following classes:\n+ * <ul>\n+ * <li>wimInetOrgPerson - an extension to the inetOrgPerson class that contains WIM PersonAccount attributes</li>\n+ * <li>wimGroupOfNames - an extension to the groupofNames class that contains WIM Group attributes.</li>\n+ * <li>simulatedMicrosoftSecurityPrincipal - a simulated Active Directory user containing samAccountName and memberOf</li>\n+ * </ul>\n+ *\n+ * You can view the WIM schema in wimschema.ldif.\n+ */\n+public class InMemoryADLDAPServer {\n+\n+    private static final Class<?> c = InMemoryADLDAPServer.class;\n+\n+    private InMemoryDirectoryServerConfig config = null;\n+    private InMemoryDirectoryServer ds = null;\n+\n+    private static final String keystorePassword = \"LDAPpassword\";\n+    private final String keystore;\n+\n+    /**\n+     * Creates a new instance of the in memory LDAP server. It initializes the directory\n+     * service.\n+     *\n+     * @param bases The base entries to create for this in-memory LDAP server.\n+     * @throws Exception If something went wrong\n+     */\n+    public InMemoryADLDAPServer(String... bases) throws Exception {\n+//        Files.copy(getClass().getResourceAsStream(\"/resources/keystore.jks\"), FileSystems.getDefault().getPath(\"\"), StandardCopyOption.REPLACE_EXISTING);\n+//        Log.info(c, \"InMemoryADLDAPSERVER\", FileSystems.getDefault().getPath(\"keystore.jks\").toString());\n+\n+        File tempkeystore = File.createTempFile(\"keystore\", \".jks\");\n+        InputStream src = c.getResourceAsStream(\"/resources/keystore.jks\");\n+        Files.copy(src, Paths.get(tempkeystore.getAbsolutePath()), StandardCopyOption.REPLACE_EXISTING);\n+        keystore = tempkeystore.getAbsolutePath();\n+        config = new InMemoryDirectoryServerConfig(bases);\n+        config.addAdditionalBindCredentials(getBindDN(), getBindPassword());\n+        config.setListenerConfigs(\n+                                  InMemoryListenerConfig.createLDAPConfig(\"LDAP\", // Listener name\n+                                                                          null, // Listen address. (null = listen on all interfaces)\n+                                                                          0, // Listen port (0 = automatically choose an available port)\n+                                                                          null));// StartTLS factory\n+\n+        final SSLUtil serverSSLUtil = new SSLUtil(new KeyStoreKeyManager(keystore, keystorePassword\n+                        .toCharArray(), \"JKS\", \"cert-alias\"), new TrustAllTrustManager());\n+\n+        config.setListenerConfigs(InMemoryListenerConfig.createLDAPSConfig(\"LDAPS\", 0, serverSSLUtil.createSSLServerSocketFactory()));\n+\n+        /*\n+         * Merge the default schema with our WIM schema. The WIM schema adds wimInetOrgPerson,\n+         * wimGroupOfNames, and simulatedMicrosoftSecurityPrincipal. The wimInetOrgPerson\n+         * adds WIM properties as LDAP attributes so that we do not need to set up a mapping\n+         * between the WIM properties and other existing LDAP attributes.\n+         */\n+        Schema schema = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzgyMTM0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjoxOTowOVrOFuMqFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjoxOTowOVrOFuMqFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4NjE5Ng==", "bodyText": "Why have this if it is commented out? I assume you will want this when you have the new class extend this class.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r383986196", "createdAt": "2020-02-25T16:19:09Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "diffHunk": "@@ -56,28 +67,37 @@\n      */\n     public InMemoryLDAPServer(String... bases) throws Exception {\n \n+        File tempkeystore = File.createTempFile(\"keystore\", \".jks\");\n+        InputStream src = c.getResourceAsStream(\"/resources/keystore.jks\");\n+        Files.copy(src, Paths.get(tempkeystore.getAbsolutePath()), StandardCopyOption.REPLACE_EXISTING);\n+        keystore = tempkeystore.getAbsolutePath();\n         config = new InMemoryDirectoryServerConfig(bases);\n         config.addAdditionalBindCredentials(getBindDN(), getBindPassword());\n         config.setListenerConfigs(\n                                   InMemoryListenerConfig.createLDAPConfig(\"LDAP\", // Listener name\n                                                                           null, // Listen address. (null = listen on all interfaces)\n                                                                           0, // Listen port (0 = automatically choose an available port)\n-                                                                          null) // StartTLS factory\n-        ); // Client factory\n+                                                                          null));// StartTLS factory\n+\n+//        final SSLUtil serverSSLUtil = new SSLUtil(new KeyStoreKeyManager(keystore, keystorePassword", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzgyMzQ4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjoxOTo0NFrOFuMrcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjoxOTo0NFrOFuMrcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4NjU0Nw==", "bodyText": "Why did you add this? Not sure we want JUnit assertions in here.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r383986547", "createdAt": "2020-02-25T16:19:44Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "diffHunk": "@@ -56,28 +67,37 @@\n      */\n     public InMemoryLDAPServer(String... bases) throws Exception {\n \n+        File tempkeystore = File.createTempFile(\"keystore\", \".jks\");\n+        InputStream src = c.getResourceAsStream(\"/resources/keystore.jks\");\n+        Files.copy(src, Paths.get(tempkeystore.getAbsolutePath()), StandardCopyOption.REPLACE_EXISTING);\n+        keystore = tempkeystore.getAbsolutePath();\n         config = new InMemoryDirectoryServerConfig(bases);\n         config.addAdditionalBindCredentials(getBindDN(), getBindPassword());\n         config.setListenerConfigs(\n                                   InMemoryListenerConfig.createLDAPConfig(\"LDAP\", // Listener name\n                                                                           null, // Listen address. (null = listen on all interfaces)\n                                                                           0, // Listen port (0 = automatically choose an available port)\n-                                                                          null) // StartTLS factory\n-        ); // Client factory\n+                                                                          null));// StartTLS factory\n+\n+//        final SSLUtil serverSSLUtil = new SSLUtil(new KeyStoreKeyManager(keystore, keystorePassword\n+//                        .toCharArray(), \"JKS\", \"cert-alias\"), new TrustAllTrustManager());\n+//\n+//        config.setListenerConfigs(InMemoryListenerConfig.createLDAPSConfig(\"LDAPS\", 0, serverSSLUtil.createSSLServerSocketFactory()));\n \n         /*\n          * Merge the default schema with our WIM schema. The WIM schema adds wimInetOrgPerson,\n          * wimGroupOfNames, and simulatedMicrosoftSecurityPrincipal. The wimInetOrgPerson\n          * adds WIM properties as LDAP attributes so that we do not need to set up a mapping\n          * between the WIM properties and other existing LDAP attributes.\n          */\n-\n+        Schema schema = null;\n         InputStream in = getClass().getResourceAsStream(\"/resources/wimschema.ldif\");\n         Schema wimschema = Schema.getSchema(in);\n-        Schema schema = Schema.mergeSchemas(Schema.getDefaultStandardSchema(), wimschema);\n+        schema = Schema.mergeSchemas(Schema.getDefaultStandardSchema(), wimschema);\n         config.setSchema(schema);\n         ds = new InMemoryDirectoryServer(config);\n         ds.startListening();\n+        assertTrue(ds.getListenPort() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzgzMjI5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjoyMTo0MlrOFuMw8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjoyMTo0MlrOFuMw8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4Nzk1Mw==", "bodyText": "In general for this class, I wouldn't have expected so many changes. I can't be sure that you didn't change the test. Methods have been moved around, etc.\nI guess I would expect that the difference would be in the general setup of the LDAP and Liberty server (to dynamically configure the LDAP connection). Most everything else should remain the same. Renaming fields just makes it harder to determine what you really changed.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r383987953", "createdAt": "2020-02-25T16:21:42Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "diffHunk": "@@ -12,6 +12,7 @@\n package com.ibm.ws.security.wim.adapter.ldap.fat;\n \n import static componenttest.topology.utils.LDAPFatUtils.assertDNsEqual;\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzgzNTA3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjoyMjoyMFrOFuMysA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjoyMjoyMFrOFuMysA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4ODQwMA==", "bodyText": "keystorePassword please. I am not sure why UnboundID uses pin, but it is not standard phrasing.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r383988400", "createdAt": "2020-02-25T16:22:20Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "diffHunk": "@@ -42,54 +49,189 @@\n @RunWith(FATRunner.class)\n @Mode(TestMode.FULL)\n public class URAPIs_ADLDAP_SSLTest {\n-    private static LibertyServer server = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl\");\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl\");\n     private static final Class<?> c = URAPIs_ADLDAP_SSLTest.class;\n     private static UserRegistryServletConnection servlet;\n \n-    //private final LeakedPasswordChecker passwordChecker = new LeakedPasswordChecker(server);\n-\n     /** Test rule for testing for expected exceptions. */\n     @Rule\n     public ExpectedException expectedException = ExpectedException.none();\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration initialConfiguration = null;\n+\n+    private static InMemoryADLDAPServer ds;\n+    private static final String BASE_DN = \"DC=SECFVT2,DC=AUSTIN,DC=IBM,DC=COM\";\n+    private static final String USER = \"CN=Users\";\n+    private static String keystorePIN = \"LDAPpassword\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzgzODU3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjoyMzowOVrOFuM0zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjoyMzowOVrOFuM0zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4ODk0Mw==", "bodyText": "put this in the finally", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r383988943", "createdAt": "2020-02-25T16:23:09Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "diffHunk": "@@ -42,54 +49,189 @@\n @RunWith(FATRunner.class)\n @Mode(TestMode.FULL)\n public class URAPIs_ADLDAP_SSLTest {\n-    private static LibertyServer server = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl\");\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl\");\n     private static final Class<?> c = URAPIs_ADLDAP_SSLTest.class;\n     private static UserRegistryServletConnection servlet;\n \n-    //private final LeakedPasswordChecker passwordChecker = new LeakedPasswordChecker(server);\n-\n     /** Test rule for testing for expected exceptions. */\n     @Rule\n     public ExpectedException expectedException = ExpectedException.none();\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration initialConfiguration = null;\n+\n+    private static InMemoryADLDAPServer ds;\n+    private static final String BASE_DN = \"DC=SECFVT2,DC=AUSTIN,DC=IBM,DC=COM\";\n+    private static final String USER = \"CN=Users\";\n+    private static String keystorePIN = \"LDAPpassword\";\n+    private static String KEYSTORE_PATH;\n+    private static String LDIF_PATH;\n \n     /**\n-     * Updates the sample, which is expected to be at the hard-coded path.\n-     * If this test is failing, check this path is correct.\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n      */\n     @BeforeClass\n-    public static void setUp() throws Exception {\n-        // Add LDAP variables to bootstrap properties file\n-        LDAPUtils.addLDAPVariables(server);\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupLdapServer();\n+        updateLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer(\"CWIML4529E\", \"CWIML4537E\", \"CWPKI0041W\");\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Nzg0MDM2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjoyMzozNVrOFuM2AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjoyMzozNVrOFuM2AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4OTI0OA==", "bodyText": "remove commented out code.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r383989248", "createdAt": "2020-02-25T16:23:35Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "diffHunk": "@@ -42,54 +49,189 @@\n @RunWith(FATRunner.class)\n @Mode(TestMode.FULL)\n public class URAPIs_ADLDAP_SSLTest {\n-    private static LibertyServer server = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl\");\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl\");\n     private static final Class<?> c = URAPIs_ADLDAP_SSLTest.class;\n     private static UserRegistryServletConnection servlet;\n \n-    //private final LeakedPasswordChecker passwordChecker = new LeakedPasswordChecker(server);\n-\n     /** Test rule for testing for expected exceptions. */\n     @Rule\n     public ExpectedException expectedException = ExpectedException.none();\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration initialConfiguration = null;\n+\n+    private static InMemoryADLDAPServer ds;\n+    private static final String BASE_DN = \"DC=SECFVT2,DC=AUSTIN,DC=IBM,DC=COM\";\n+    private static final String USER = \"CN=Users\";\n+    private static String keystorePIN = \"LDAPpassword\";\n+    private static String KEYSTORE_PATH;\n+    private static String LDIF_PATH;\n \n     /**\n-     * Updates the sample, which is expected to be at the hard-coded path.\n-     * If this test is failing, check this path is correct.\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n      */\n     @BeforeClass\n-    public static void setUp() throws Exception {\n-        // Add LDAP variables to bootstrap properties file\n-        LDAPUtils.addLDAPVariables(server);\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupLdapServer();\n+        updateLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer(\"CWIML4529E\", \"CWIML4537E\", \"CWPKI0041W\");\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n         Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n-        server.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n-        server.addInstalledAppForValidation(\"userRegistry\");\n-        server.startServer(c.getName() + \".log\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n \n-        //Make sure the application has come up before proceeding\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n         assertNotNull(\"Application userRegistry does not appear to have started.\",\n-                      server.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n         assertNotNull(\"Security service did not report it was ready\",\n-                      server.waitForStringInLog(\"CWWKS0008I\"));\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n         assertNotNull(\"Server did not came up\",\n-                      server.waitForStringInLog(\"CWWKF0011I\"));\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n \n         Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n-        servlet = new UserRegistryServletConnection(server.getHostname(), server.getHttpDefaultPort());\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n \n         if (servlet.getRealm() == null) {\n             Thread.sleep(5000);\n             servlet.getRealm();\n         }\n+\n+        initialConfiguration = libertyServer.getServerConfiguration();\n     }\n \n-    @AfterClass\n-    public static void tearDown() throws Exception {\n-        Log.info(c, \"tearDown\", \"Stopping the server...\");\n-        try {\n-            server.stopServer(\"CWIML4529E\", \"CWIML4537E\", \"CWPKI0041W\");\n-        } finally {\n-            server.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n-        }\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupLdapServer() throws Exception {\n+        String serverPath = libertyServer.getServerRoot();\n+        KEYSTORE_PATH = serverPath + \"/keystore.jks\";\n+        LDIF_PATH = serverPath + \"/AD.ldif\";\n+        Log.info(c, \"setupLdapServer\", \"LDIF Path is \" + LDIF_PATH);\n+        ds = new InMemoryADLDAPServer(BASE_DN);\n+        int entriesAdded = ds.importFromLDIF(true, LDIF_PATH);\n+        Log.info(c, \"setupLdapServer\", \"Adding \" + entriesAdded + \" changes to LDAP Server\");\n+\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void updateLibertyServer() throws Exception {\n+        ServerConfiguration server = initialConfiguration.clone();\n+\n+        LdapRegistry ldap = server.getLdapRegistries().remove(0);\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getListenPort()));\n+        ldap.setBaseDN(BASE_DN);\n+        ldap.setBindDN(InMemoryADLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryADLDAPServer.getBindPassword());\n+        ldap.setSslRef(\"LDAPSSLSettings\");\n+        ldap.setSslEnabled(true);\n+        server.getLdapRegistries().add(ldap);\n+\n+//        ContextPool cp = new ContextPool(true, 0, 2, 1, \"1m\", \"5s\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Nzk0ODY1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl/server.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzowNzowMVrOFuN3gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzowNzowMVrOFuN3gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNjAxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                http:\\\\www.eclipse.org\\legal\\epl-v10.html\n          \n          \n            \n                http://www.eclipse.org/legal/epl-v10.html", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r384006018", "createdAt": "2020-02-25T17:07:01Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl/server.xml", "diffHunk": "@@ -3,87 +3,41 @@\n     All rights reserved. This program and the accompanying materials\n     are made available under the terms of the Eclipse Public License v1.0\n     which accompanies this distribution, and is available at\n-    http://www.eclipse.org/legal/epl-v10.html\n+    http:\\\\www.eclipse.org\\legal\\epl-v10.html", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Nzk1MTY3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl/server.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzowNzo0NFrOFuN5Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzowNzo0NFrOFuN5Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNjQ4Ng==", "bodyText": "I am not really sure why this file has many, if any changes at all. I would expect the test to be identical to what it had been.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r384006486", "createdAt": "2020-02-25T17:07:44Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl/server.xml", "diffHunk": "@@ -3,87 +3,41 @@\n     All rights reserved. This program and the accompanying materials\n     are made available under the terms of the Eclipse Public License v1.0\n     which accompanies this distribution, and is available at\n-    http://www.eclipse.org/legal/epl-v10.html\n+    http:\\\\www.eclipse.org\\legal\\epl-v10.html\n    \n     Contributors:\n         IBM Corporation - initial API and implementation\n  -->\n-<server description=\"new server\">\n+<server description=\"com.ibm.ws.security.registry.ldap.fat.unboundid.ad.ssl\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Nzk1MjU4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl/server.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzowNzo1OFrOFuN51g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzowNzo1OFrOFuN51g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNjYxNA==", "bodyText": "SSL is not even enabled anymore.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r384006614", "createdAt": "2020-02-25T17:07:58Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl/server.xml", "diffHunk": "@@ -3,87 +3,41 @@\n     All rights reserved. This program and the accompanying materials\n     are made available under the terms of the Eclipse Public License v1.0\n     which accompanies this distribution, and is available at\n-    http://www.eclipse.org/legal/epl-v10.html\n+    http:\\\\www.eclipse.org\\legal\\epl-v10.html\n    \n     Contributors:\n         IBM Corporation - initial API and implementation\n  -->\n-<server description=\"new server\">\n+<server description=\"com.ibm.ws.security.registry.ldap.fat.unboundid.ad.ssl\">\n \n \t<include location=\"../fatTestPorts.xml\"/>\n+\n     <!-- Enable features -->\n     <featureManager>\n         <feature>appSecurity-2.0</feature>\n         <feature>servlet-3.1</feature>\n         <feature>securitylibertyinternals-1.0</feature>\n \t\t<feature>ldapRegistry-3.0</feature>\n-\t</featureManager>\n-\n-\t<ldapRegistry id=\"ldap\" realm=\"SampleLdapADRealm\" host=\"${ldap.server.2.name}\" port=\"${ldap.server.2.ssl.port}\" ignoreCase=\"true\"  baseDN=\"cn=users,dc=secfvt2,dc=austin,dc=ibm,dc=com\"\n+    </featureManager>\n+    \n+    <ldapRegistry id=\"ldap\" realm=\"SampleLdapADRealm\" host=\"${ldap.server.2.name}\" port=\"${ldap.server.2.ssl.port}\" ignoreCase=\"true\"  baseDN=\"DC=SECFVT2,DC=AUSTIN,DC=IBM,DC=COM\"\n \t\tbindDN=\"cn=testuser,cn=users,dc=secfvt2,dc=austin,dc=ibm,dc=com\"\n \t\tbindPassword=\"testuserpwd\"\n \t\tldapType=\"Microsoft Active Directory\"\n-\t\tsslEnabled=\"true\"\n+\t\tactivedFilters=\"actived\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Nzk1Njc3OnYy", "diffSide": "LEFT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl/server.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzowOTowMlrOFuN8Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzowOTowMlrOFuN8Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNzIzOQ==", "bodyText": "The failover servers may need to be removed, since we are only bringing up one of them.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r384007239", "createdAt": "2020-02-25T17:09:02Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl/server.xml", "diffHunk": "@@ -3,87 +3,41 @@\n     All rights reserved. This program and the accompanying materials\n     are made available under the terms of the Eclipse Public License v1.0\n     which accompanies this distribution, and is available at\n-    http://www.eclipse.org/legal/epl-v10.html\n+    http:\\\\www.eclipse.org\\legal\\epl-v10.html\n    \n     Contributors:\n         IBM Corporation - initial API and implementation\n  -->\n-<server description=\"new server\">\n+<server description=\"com.ibm.ws.security.registry.ldap.fat.unboundid.ad.ssl\">\n \n \t<include location=\"../fatTestPorts.xml\"/>\n+\n     <!-- Enable features -->\n     <featureManager>\n         <feature>appSecurity-2.0</feature>\n         <feature>servlet-3.1</feature>\n         <feature>securitylibertyinternals-1.0</feature>\n \t\t<feature>ldapRegistry-3.0</feature>\n-\t</featureManager>\n-\n-\t<ldapRegistry id=\"ldap\" realm=\"SampleLdapADRealm\" host=\"${ldap.server.2.name}\" port=\"${ldap.server.2.ssl.port}\" ignoreCase=\"true\"  baseDN=\"cn=users,dc=secfvt2,dc=austin,dc=ibm,dc=com\"\n+    </featureManager>\n+    \n+    <ldapRegistry id=\"ldap\" realm=\"SampleLdapADRealm\" host=\"${ldap.server.2.name}\" port=\"${ldap.server.2.ssl.port}\" ignoreCase=\"true\"  baseDN=\"DC=SECFVT2,DC=AUSTIN,DC=IBM,DC=COM\"\n \t\tbindDN=\"cn=testuser,cn=users,dc=secfvt2,dc=austin,dc=ibm,dc=com\"\n \t\tbindPassword=\"testuserpwd\"\n \t\tldapType=\"Microsoft Active Directory\"\n-\t\tsslEnabled=\"true\"\n+\t\tactivedFilters=\"actived\"\n \t\tsearchTimeout=\"8m\"\n-\t\tsslRef=\"LDAPSSLSettings\" \n-\t\trecursiveSearch=\"true\" >\n-      <ldapEntityType name=\"Group\" searchFilter=\"(ObjectCategory=Group)\">\n-        <objectClass>group</objectClass>\n-      </ldapEntityType>\n-      <ldapEntityType name=\"OrgContainer\">\n-        <rdnProperty name=\"o\" objectClass=\"organization\"/>\n-        <rdnProperty name=\"ou\" objectClass=\"organizationalUnit\"/>\n-        <rdnProperty name=\"dc\" objectClass=\"domain\"/>\n-        <rdnProperty name=\"cn\" objectClass=\"container\"/>\n-        <objectClass>organization</objectClass>\n-        <objectClass>organizationalUnit</objectClass>\n-        <objectClass>domain</objectClass>\n-        <objectClass>container</objectClass>\n-      </ldapEntityType>\n-      <ldapEntityType name=\"PersonAccount\" searchFilter=\"(|(ObjectCategory=User)(ObjectClass=User))\">\n-        <objectClass>user</objectClass>\n-      </ldapEntityType>\n-      <groupProperties>\n-        <memberAttribute name=\"member\" dummyMember=\"uid=dummy\" objectClass=\"group\" scope=\"direct\"/>\n-      </groupProperties>\n-      <attributeConfiguration>\n-      \t<attribute defaultValue=\"544\" name=\"userAccountControl\" entityType=\"PersonAccount\" />\n-      \t<attribute name=\"samAccountName\" propertyName=\"uid\" entityType=\"PersonAccount\" />\n-        <attribute substituteWithValueOf=\"cn\" name=\"samAccountName\" entityType=\"Group\" />\n-        <attribute defaultValue=\"8\" name=\"groupType\" entityType=\"Group\" />\n-        <attribute name=\"unicodePwd\" propertyName=\"password\" syntax=\"unicodePwd\"/>\n-        <attribute name=\"userprincipalname\" propertyName=\"kerberosId\" entityType=\"PersonAccount\" />\n-        <propertiesNotSupported name=\"description\"/>\n-        <propertiesNotSupported name=\"jpegPhoto\"/>\n-        <propertiesNotSupported name=\"labeledURI\"/>\n-        <propertiesNotSupported name=\"carLicense\"/>\n-        <propertiesNotSupported name=\"pager\"/>\n-        <propertiesNotSupported name=\"roomNumber\"/>\n-        <propertiesNotSupported name=\"localityName\"/>\n-        <propertiesNotSupported name=\"stateOrProvinceName\"/>\n-        <propertiesNotSupported name=\"countryName\"/>\n-        <propertiesNotSupported name=\"employeeNumber\"/>\n-        <propertiesNotSupported name=\"employeeType\"/>\n-        <propertiesNotSupported name=\"businessCategory\"/>\n-        <propertiesNotSupported name=\"departmentNumber\"/>\n-        <propertiesNotSupported name=\"homeAddress\"/>\n-        <propertiesNotSupported name=\"businessAddress\"/>\n-      </attributeConfiguration>\n-      <loginProperty>cn</loginProperty>\n-      <contextPool enabled=\"true\" initialSize=\"1\" maxSize=\"0\" timeout=\"0ms\"\n-          waitTime=\"3000ms\" preferredSize=\"3\"/>\n-      <ldapCache>\n-        <attributesCache size=\"4000\" timeout=\"1200ms\" enabled=\"true\" sizeLimit=\"2000\"/>\n-        <searchResultsCache size=\"2000\" timeout=\"600ms\" enabled=\"true\" resultsSizeLimit=\"1000\"/>\n-      </ldapCache>\n-      <failoverServers name=\"failoverLdapServers\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Nzk1NzQxOnYy", "diffSide": "LEFT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl/server.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzowOToxMVrOFuN8qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzowOToxMVrOFuN8qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNzMzNg==", "bodyText": "The failover servers may need to be removed, since we are only bringing up one of them.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r384007336", "createdAt": "2020-02-25T17:09:11Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl/server.xml", "diffHunk": "@@ -3,87 +3,41 @@\n     All rights reserved. This program and the accompanying materials\n     are made available under the terms of the Eclipse Public License v1.0\n     which accompanies this distribution, and is available at\n-    http://www.eclipse.org/legal/epl-v10.html\n+    http:\\\\www.eclipse.org\\legal\\epl-v10.html\n    \n     Contributors:\n         IBM Corporation - initial API and implementation\n  -->\n-<server description=\"new server\">\n+<server description=\"com.ibm.ws.security.registry.ldap.fat.unboundid.ad.ssl\">\n \n \t<include location=\"../fatTestPorts.xml\"/>\n+\n     <!-- Enable features -->\n     <featureManager>\n         <feature>appSecurity-2.0</feature>\n         <feature>servlet-3.1</feature>\n         <feature>securitylibertyinternals-1.0</feature>\n \t\t<feature>ldapRegistry-3.0</feature>\n-\t</featureManager>\n-\n-\t<ldapRegistry id=\"ldap\" realm=\"SampleLdapADRealm\" host=\"${ldap.server.2.name}\" port=\"${ldap.server.2.ssl.port}\" ignoreCase=\"true\"  baseDN=\"cn=users,dc=secfvt2,dc=austin,dc=ibm,dc=com\"\n+    </featureManager>\n+    \n+    <ldapRegistry id=\"ldap\" realm=\"SampleLdapADRealm\" host=\"${ldap.server.2.name}\" port=\"${ldap.server.2.ssl.port}\" ignoreCase=\"true\"  baseDN=\"DC=SECFVT2,DC=AUSTIN,DC=IBM,DC=COM\"\n \t\tbindDN=\"cn=testuser,cn=users,dc=secfvt2,dc=austin,dc=ibm,dc=com\"\n \t\tbindPassword=\"testuserpwd\"\n \t\tldapType=\"Microsoft Active Directory\"\n-\t\tsslEnabled=\"true\"\n+\t\tactivedFilters=\"actived\"\n \t\tsearchTimeout=\"8m\"\n-\t\tsslRef=\"LDAPSSLSettings\" \n-\t\trecursiveSearch=\"true\" >\n-      <ldapEntityType name=\"Group\" searchFilter=\"(ObjectCategory=Group)\">\n-        <objectClass>group</objectClass>\n-      </ldapEntityType>\n-      <ldapEntityType name=\"OrgContainer\">\n-        <rdnProperty name=\"o\" objectClass=\"organization\"/>\n-        <rdnProperty name=\"ou\" objectClass=\"organizationalUnit\"/>\n-        <rdnProperty name=\"dc\" objectClass=\"domain\"/>\n-        <rdnProperty name=\"cn\" objectClass=\"container\"/>\n-        <objectClass>organization</objectClass>\n-        <objectClass>organizationalUnit</objectClass>\n-        <objectClass>domain</objectClass>\n-        <objectClass>container</objectClass>\n-      </ldapEntityType>\n-      <ldapEntityType name=\"PersonAccount\" searchFilter=\"(|(ObjectCategory=User)(ObjectClass=User))\">\n-        <objectClass>user</objectClass>\n-      </ldapEntityType>\n-      <groupProperties>\n-        <memberAttribute name=\"member\" dummyMember=\"uid=dummy\" objectClass=\"group\" scope=\"direct\"/>\n-      </groupProperties>\n-      <attributeConfiguration>\n-      \t<attribute defaultValue=\"544\" name=\"userAccountControl\" entityType=\"PersonAccount\" />\n-      \t<attribute name=\"samAccountName\" propertyName=\"uid\" entityType=\"PersonAccount\" />\n-        <attribute substituteWithValueOf=\"cn\" name=\"samAccountName\" entityType=\"Group\" />\n-        <attribute defaultValue=\"8\" name=\"groupType\" entityType=\"Group\" />\n-        <attribute name=\"unicodePwd\" propertyName=\"password\" syntax=\"unicodePwd\"/>\n-        <attribute name=\"userprincipalname\" propertyName=\"kerberosId\" entityType=\"PersonAccount\" />\n-        <propertiesNotSupported name=\"description\"/>\n-        <propertiesNotSupported name=\"jpegPhoto\"/>\n-        <propertiesNotSupported name=\"labeledURI\"/>\n-        <propertiesNotSupported name=\"carLicense\"/>\n-        <propertiesNotSupported name=\"pager\"/>\n-        <propertiesNotSupported name=\"roomNumber\"/>\n-        <propertiesNotSupported name=\"localityName\"/>\n-        <propertiesNotSupported name=\"stateOrProvinceName\"/>\n-        <propertiesNotSupported name=\"countryName\"/>\n-        <propertiesNotSupported name=\"employeeNumber\"/>\n-        <propertiesNotSupported name=\"employeeType\"/>\n-        <propertiesNotSupported name=\"businessCategory\"/>\n-        <propertiesNotSupported name=\"departmentNumber\"/>\n-        <propertiesNotSupported name=\"homeAddress\"/>\n-        <propertiesNotSupported name=\"businessAddress\"/>\n-      </attributeConfiguration>\n-      <loginProperty>cn</loginProperty>\n-      <contextPool enabled=\"true\" initialSize=\"1\" maxSize=\"0\" timeout=\"0ms\"\n-          waitTime=\"3000ms\" preferredSize=\"3\"/>\n-      <ldapCache>\n-        <attributesCache size=\"4000\" timeout=\"1200ms\" enabled=\"true\" sizeLimit=\"2000\"/>\n-        <searchResultsCache size=\"2000\" timeout=\"600ms\" enabled=\"true\" resultsSizeLimit=\"1000\"/>\n-      </ldapCache>\n-      <failoverServers name=\"failoverLdapServers\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Nzk3MTMzOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoxMjozNlrOFuOE7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoxMjozNlrOFuOE7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwOTQ1NA==", "bodyText": "Update copyright date above.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r384009454", "createdAt": "2020-02-25T17:12:36Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "diffHunk": "@@ -11,13 +11,21 @@\n \n package com.ibm.ws.com.unboundid;\n \n+import static org.junit.Assert.assertTrue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Nzk3Mzg0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoxMzowMlrOFuOGXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxODoxMlrOFz35FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwOTgyMg==", "bodyText": "Update documentation to reflect the method.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r384009822", "createdAt": "2020-02-25T17:13:02Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "diffHunk": "@@ -135,6 +155,15 @@ public void shutDown(boolean b) {\n \n     }\n \n+    /**\n+     * Get the port the server is listening to.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzNzQyOQ==", "bodyText": "This documentation is still wrong.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r389937429", "createdAt": "2020-03-09T20:18:12Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "diffHunk": "@@ -135,6 +155,15 @@ public void shutDown(boolean b) {\n \n     }\n \n+    /**\n+     * Get the port the server is listening to.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwOTgyMg=="}, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Nzk5MTIyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/bnd.bnd", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoxNjo1NFrOFuOQeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoxNjo1NFrOFuOQeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxMjQxMA==", "bodyText": "We are changing these all over, but I wonder if we wouldn't be better suited to just include the JAR in the com.ibm.ws.com.unboundid artifact JAR, then we wouldn't ever need to update these again when we need to update to a newer version.\nYou can use the \"Include-Resource:\" directive in the BND file and it will include the resource in the generated JAR. For example:\nInclude-Resource: \\\n    @${com.unboundid:unboundid-ldapsdk;4.0.14;EXACT}", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r384012410", "createdAt": "2020-02-25T17:16:54Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/bnd.bnd", "diffHunk": "@@ -23,7 +23,7 @@ tested.features: \\\n     vmmapi-1.0\n \n -buildpath: \\\n-    com.unboundid:unboundid-ldapsdk;version=latest,\\\n+    com.unboundid:unboundid-ldapsdk;version=4.0.14,\\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Nzk5MzM3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/bnd.bnd", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoxNzoyNFrOFuORzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoxNzoyNFrOFuORzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxMjc0OQ==", "bodyText": "We are changing these all over, but I wonder if we wouldn't be better suited to just include the JAR in the com.ibm.ws.com.unboundid artifact JAR, then we wouldn't ever need to update these again when we need to update to a newer version.\nYou can use the \"Include-Resource:\" directive in the BND file and it will include the resource in the generated JAR. For example:\nInclude-Resource: \\\n    @${com.unboundid:unboundid-ldapsdk;4.0.14;EXACT}", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r384012749", "createdAt": "2020-02-25T17:17:24Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/bnd.bnd", "diffHunk": "@@ -23,7 +23,7 @@ tested.features: \\\n     vmmapi-1.0\n \n -buildpath: \\\n-    com.unboundid:unboundid-ldapsdk;version=latest,\\\n+    com.unboundid:unboundid-ldapsdk;version=4.0.14,\\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Nzk5NTM5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoxNzo1MlrOFuOTBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoxNzo1MlrOFuOTBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxMzA2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                'com.ibm.ws.security.wim.adapter.ldap.fat.racf.sdbm.basic',\n          \n          \n            \n                'com.ibm.ws.security.wim.adapter.ldap.fat.racf.sdbm.basic'", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r384013060", "createdAt": "2020-02-25T17:17:52Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/build.gradle", "diffHunk": "@@ -131,7 +131,7 @@ autoFVT.doLast {\n     'com.ibm.ws.security.wim.adapter.ldap.fat.readtimeout',\n     'com.ibm.ws.security.wim.adapter.ldap.fat.racf.sdbm',\n     'com.ibm.ws.security.wim.adapter.ldap.fat.return.to.primary',\n-    'com.ibm.ws.security.wim.adapter.ldap.fat.racf.sdbm.basic'\n+    'com.ibm.ws.security.wim.adapter.ldap.fat.racf.sdbm.basic',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Nzk5OTQxOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoxODo1M1rOFuOVeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoxODo1M1rOFuOVeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxMzY4OA==", "bodyText": "If we don't change the server.xml very much, we can simply get the configuration and request the single LDAP server from it and update the connection properties.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r384013688", "createdAt": "2020-02-25T17:18:53Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "diffHunk": "@@ -42,54 +49,189 @@\n @RunWith(FATRunner.class)\n @Mode(TestMode.FULL)\n public class URAPIs_ADLDAP_SSLTest {\n-    private static LibertyServer server = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl\");\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl\");\n     private static final Class<?> c = URAPIs_ADLDAP_SSLTest.class;\n     private static UserRegistryServletConnection servlet;\n \n-    //private final LeakedPasswordChecker passwordChecker = new LeakedPasswordChecker(server);\n-\n     /** Test rule for testing for expected exceptions. */\n     @Rule\n     public ExpectedException expectedException = ExpectedException.none();\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration initialConfiguration = null;\n+\n+    private static InMemoryADLDAPServer ds;\n+    private static final String BASE_DN = \"DC=SECFVT2,DC=AUSTIN,DC=IBM,DC=COM\";\n+    private static final String USER = \"CN=Users\";\n+    private static String keystorePIN = \"LDAPpassword\";\n+    private static String KEYSTORE_PATH;\n+    private static String LDIF_PATH;\n \n     /**\n-     * Updates the sample, which is expected to be at the hard-coded path.\n-     * If this test is failing, check this path is correct.\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n      */\n     @BeforeClass\n-    public static void setUp() throws Exception {\n-        // Add LDAP variables to bootstrap properties file\n-        LDAPUtils.addLDAPVariables(server);\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupLdapServer();\n+        updateLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer(\"CWIML4529E\", \"CWIML4537E\", \"CWPKI0041W\");\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n         Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n-        server.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n-        server.addInstalledAppForValidation(\"userRegistry\");\n-        server.startServer(c.getName() + \".log\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n \n-        //Make sure the application has come up before proceeding\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n         assertNotNull(\"Application userRegistry does not appear to have started.\",\n-                      server.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n         assertNotNull(\"Security service did not report it was ready\",\n-                      server.waitForStringInLog(\"CWWKS0008I\"));\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n         assertNotNull(\"Server did not came up\",\n-                      server.waitForStringInLog(\"CWWKF0011I\"));\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n \n         Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n-        servlet = new UserRegistryServletConnection(server.getHostname(), server.getHttpDefaultPort());\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n \n         if (servlet.getRealm() == null) {\n             Thread.sleep(5000);\n             servlet.getRealm();\n         }\n+\n+        initialConfiguration = libertyServer.getServerConfiguration();\n     }\n \n-    @AfterClass\n-    public static void tearDown() throws Exception {\n-        Log.info(c, \"tearDown\", \"Stopping the server...\");\n-        try {\n-            server.stopServer(\"CWIML4529E\", \"CWIML4537E\", \"CWPKI0041W\");\n-        } finally {\n-            server.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n-        }\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupLdapServer() throws Exception {\n+        String serverPath = libertyServer.getServerRoot();\n+        KEYSTORE_PATH = serverPath + \"/keystore.jks\";\n+        LDIF_PATH = serverPath + \"/AD.ldif\";\n+        Log.info(c, \"setupLdapServer\", \"LDIF Path is \" + LDIF_PATH);\n+        ds = new InMemoryADLDAPServer(BASE_DN);\n+        int entriesAdded = ds.importFromLDIF(true, LDIF_PATH);\n+        Log.info(c, \"setupLdapServer\", \"Adding \" + entriesAdded + \" changes to LDAP Server\");\n+\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void updateLibertyServer() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODAxNzE3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl/AD.ldif", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoyMzowMVrOFuOf3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoyMzowMVrOFuOf3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxNjM1MQ==", "bodyText": "Add a copyright header. See wimschema.ldif for an example.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r384016351", "createdAt": "2020-02-25T17:23:01Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl/AD.ldif", "diffHunk": "@@ -0,0 +1,708 @@\n+dn: DC=SECFVT2,DC=AUSTIN,DC=IBM,DC=COM", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODAxODc1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoyMzoyNFrOFuOg1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoyMzoyNFrOFuOg1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxNjU5OQ==", "bodyText": "Why the looping?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r384016599", "createdAt": "2020-02-25T17:23:24Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "diffHunk": "@@ -285,10 +406,12 @@ public void getUsersWithWildcard() throws Exception {\n      */\n     @Test\n     public void getUsersWithInvalidUser() throws Exception {\n-        String user = \"invalid\";\n-        Log.info(c, \"getUsersWithInvalidUser\", \"Checking with a invalid pattern and limit of 2.\");\n-        SearchResult result = servlet.getUsers(user, 2);\n-        assertEquals(\"There should only be one entry\", 0, result.getList().size());\n+        for (int i = 0; i < 500; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 324}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODAyMDEwOnYy", "diffSide": "LEFT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoyMzo0M1rOFuOhqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoyMzo0M1rOFuOhqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxNjgwOQ==", "bodyText": "Why was this moved?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r384016809", "createdAt": "2020-02-25T17:23:43Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "diffHunk": "@@ -148,16 +292,6 @@ public void getUsersForGroupWithInvalidGroup() throws Exception {\n         servlet.getUsersForGroup(group, 0);\n     }\n \n-    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 256}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODAyMDM5OnYy", "diffSide": "LEFT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoyMzo0OFrOFuOh0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoyMzo0OFrOFuOh0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxNjg1MQ==", "bodyText": "Why was this moved?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r384016851", "createdAt": "2020-02-25T17:23:48Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "diffHunk": "@@ -148,16 +292,6 @@ public void getUsersForGroupWithInvalidGroup() throws Exception {\n         servlet.getUsersForGroup(group, 0);\n     }\n \n-    /**\n-     * Hit the test servlet to see if getRealm works.\n-     * This verifies the various required bundles got installed and are working.\n-     */\n-    @Test\n-    public void getRealm() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 261}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODAyMjA4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoyNDoxMFrOFuOixw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoyNDoxMFrOFuOixw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxNzA5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                    Log.info(c, \"checkPassword\", \"Checking good credentials\");", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r384017095", "createdAt": "2020-02-25T17:24:10Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "diffHunk": "@@ -166,7 +300,7 @@ public void getRealm() throws Exception {\n     public void checkPassword() throws Exception {\n         String user = \"vmmtestuser\";\n         String password = \"vmmtestuserpwd\";\n-        Log.info(c, \"checkPassword\", \"Checking good credentials\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 274}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODAyNDczOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoyNDo1MFrOFuOkXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoyNDo1MFrOFuOkXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxNzUwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    System.out.println(\"getUsersForGroupWithValidGroup: \" + list.toString());", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r384017500", "createdAt": "2020-02-25T17:24:50Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "diffHunk": "@@ -102,6 +244,7 @@ public void getUsersForGroupWithValidGroup() throws Exception {\n         Log.info(c, \"getUsersForGroupWithValidGroup\", \"Checking with a valid group.\");\n         SearchResult result = servlet.getUsersForGroup(group, 0);\n         List<String> list = result.getList();\n+        System.out.println(\"getUsersForGroupWithValidGroup: \" + list.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 240}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODAyNDkyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoyNDo1MlrOFuOkeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoyNDo1MlrOFuOkeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxNzUzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    System.out.print(\"getUsersForGroupWithLimitWithNestedGroup: \" + list.toString());", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r384017530", "createdAt": "2020-02-25T17:24:52Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "diffHunk": "@@ -128,6 +271,7 @@ public void getUsersForGroupWithLimitWithNestedGroup() throws Exception {\n         Log.info(c, \"getUsersForGroupWithLimitWithNestedGroup\", \"Checking with a valid group.\");\n         SearchResult result = servlet.getUsersForGroup(group, 10);\n         List<String> list = result.getList();\n+        System.out.print(\"getUsersForGroupWithLimitWithNestedGroup: \" + list.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 248}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODAyNjUzOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoyNToxNFrOFuOlbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoyNToxNFrOFuOlbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxNzc3NA==", "bodyText": "Why was this moved?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r384017774", "createdAt": "2020-02-25T17:25:14Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "diffHunk": "@@ -42,54 +49,189 @@\n @RunWith(FATRunner.class)\n @Mode(TestMode.FULL)\n public class URAPIs_ADLDAP_SSLTest {\n-    private static LibertyServer server = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl\");\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl\");\n     private static final Class<?> c = URAPIs_ADLDAP_SSLTest.class;\n     private static UserRegistryServletConnection servlet;\n \n-    //private final LeakedPasswordChecker passwordChecker = new LeakedPasswordChecker(server);\n-\n     /** Test rule for testing for expected exceptions. */\n     @Rule\n     public ExpectedException expectedException = ExpectedException.none();\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration initialConfiguration = null;\n+\n+    private static InMemoryADLDAPServer ds;\n+    private static final String BASE_DN = \"DC=SECFVT2,DC=AUSTIN,DC=IBM,DC=COM\";\n+    private static final String USER = \"CN=Users\";\n+    private static String keystorePIN = \"LDAPpassword\";\n+    private static String KEYSTORE_PATH;\n+    private static String LDIF_PATH;\n \n     /**\n-     * Updates the sample, which is expected to be at the hard-coded path.\n-     * If this test is failing, check this path is correct.\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n      */\n     @BeforeClass\n-    public static void setUp() throws Exception {\n-        // Add LDAP variables to bootstrap properties file\n-        LDAPUtils.addLDAPVariables(server);\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupLdapServer();\n+        updateLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer(\"CWIML4529E\", \"CWIML4537E\", \"CWPKI0041W\");\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n         Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n-        server.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n-        server.addInstalledAppForValidation(\"userRegistry\");\n-        server.startServer(c.getName() + \".log\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n \n-        //Make sure the application has come up before proceeding\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n         assertNotNull(\"Application userRegistry does not appear to have started.\",\n-                      server.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n         assertNotNull(\"Security service did not report it was ready\",\n-                      server.waitForStringInLog(\"CWWKS0008I\"));\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n         assertNotNull(\"Server did not came up\",\n-                      server.waitForStringInLog(\"CWWKF0011I\"));\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n \n         Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n-        servlet = new UserRegistryServletConnection(server.getHostname(), server.getHttpDefaultPort());\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n \n         if (servlet.getRealm() == null) {\n             Thread.sleep(5000);\n             servlet.getRealm();\n         }\n+\n+        initialConfiguration = libertyServer.getServerConfiguration();\n     }\n \n-    @AfterClass\n-    public static void tearDown() throws Exception {\n-        Log.info(c, \"tearDown\", \"Stopping the server...\");\n-        try {\n-            server.stopServer(\"CWIML4529E\", \"CWIML4537E\", \"CWPKI0041W\");\n-        } finally {\n-            server.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n-        }\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupLdapServer() throws Exception {\n+        String serverPath = libertyServer.getServerRoot();\n+        KEYSTORE_PATH = serverPath + \"/keystore.jks\";\n+        LDIF_PATH = serverPath + \"/AD.ldif\";\n+        Log.info(c, \"setupLdapServer\", \"LDIF Path is \" + LDIF_PATH);\n+        ds = new InMemoryADLDAPServer(BASE_DN);\n+        int entriesAdded = ds.importFromLDIF(true, LDIF_PATH);\n+        Log.info(c, \"setupLdapServer\", \"Adding \" + entriesAdded + \" changes to LDAP Server\");\n+\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void updateLibertyServer() throws Exception {\n+        ServerConfiguration server = initialConfiguration.clone();\n+\n+        LdapRegistry ldap = server.getLdapRegistries().remove(0);\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getListenPort()));\n+        ldap.setBaseDN(BASE_DN);\n+        ldap.setBindDN(InMemoryADLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryADLDAPServer.getBindPassword());\n+        ldap.setSslRef(\"LDAPSSLSettings\");\n+        ldap.setSslEnabled(true);\n+        server.getLdapRegistries().add(ldap);\n+\n+//        ContextPool cp = new ContextPool(true, 0, 2, 1, \"1m\", \"5s\");\n+//        ldap.setContextPool(cp);\n+//        SearchResultsCache src = new SearchResultsCache();\n+//        src.setEnabled(false); // disable search cache so we can look up the same user over and over again\n+\n+        KeyStore LDAPKeyStore = new KeyStore();\n+        LDAPKeyStore.setId(\"LDAPKeyStore\");\n+        LDAPKeyStore.setLocation(KEYSTORE_PATH);\n+        LDAPKeyStore.setPassword(keystorePIN);\n+\n+        KeyStore LDAPTrustStore = new KeyStore();\n+        LDAPTrustStore.setId(\"LDAPTrustStore\");\n+        LDAPTrustStore.setLocation(KEYSTORE_PATH);\n+        LDAPTrustStore.setPassword(keystorePIN);\n+\n+        server.getKeyStores().add(LDAPKeyStore);\n+        server.getKeyStores().add(LDAPTrustStore);\n+\n+        SSLDefault defaultSettings = new SSLDefault();\n+        defaultSettings.setSslRef(\"DefaultSSLSettings\");\n+        server.setSSLDefault(defaultSettings);\n+\n+        SSL defaultSSL = new SSL();\n+        defaultSSL.setId(\"DefaultSSLSettings\");\n+        defaultSSL.setKeyStoreRef(\"defaultKeyStore\");\n+        server.addSSL(defaultSSL);\n+\n+        SSL sslCfg = new SSL();\n+        sslCfg.setId(\"LDAPSSLSettings\");\n+        sslCfg.setKeyStoreRef(\"LDAPKeyStore\");\n+        sslCfg.setTrustStoreRef(\"LDAPTrustStore\");\n+        server.addSSL(sslCfg);\n+\n+        updateConfigDynamically(libertyServer, server);\n+        Log.info(c, \"updateLibertyServer\", libertyServer.getServerConfigurationPath());\n+    }\n+\n+    /**\n+     * Hit the test servlet to see if getRealm works.\n+     * This verifies the various required bundles got installed and are working.\n+     */\n+    @Test\n+    public void getRealm() throws Exception {\n+        Log.info(c, \"getRealm\", \"Checking expected realm\");\n+        assertEquals(\"SampleLdapADRealm\", servlet.getRealm());\n+    }\n+\n+    /**\n+     * Hit the test servlet to see if getUsers works when passed in a valid user pattern\n+     * and a limit of 2; should only expect to find one entry\n+     * This verifies the various required bundles got installed and are working.\n+     */\n+    @Test\n+    public void getUsers() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODAyNjc0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoyNToxOFrOFuOllQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoyNToxOFrOFuOllQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxNzgxMw==", "bodyText": "Why was this moved?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r384017813", "createdAt": "2020-02-25T17:25:18Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "diffHunk": "@@ -42,54 +49,189 @@\n @RunWith(FATRunner.class)\n @Mode(TestMode.FULL)\n public class URAPIs_ADLDAP_SSLTest {\n-    private static LibertyServer server = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl\");\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl\");\n     private static final Class<?> c = URAPIs_ADLDAP_SSLTest.class;\n     private static UserRegistryServletConnection servlet;\n \n-    //private final LeakedPasswordChecker passwordChecker = new LeakedPasswordChecker(server);\n-\n     /** Test rule for testing for expected exceptions. */\n     @Rule\n     public ExpectedException expectedException = ExpectedException.none();\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration initialConfiguration = null;\n+\n+    private static InMemoryADLDAPServer ds;\n+    private static final String BASE_DN = \"DC=SECFVT2,DC=AUSTIN,DC=IBM,DC=COM\";\n+    private static final String USER = \"CN=Users\";\n+    private static String keystorePIN = \"LDAPpassword\";\n+    private static String KEYSTORE_PATH;\n+    private static String LDIF_PATH;\n \n     /**\n-     * Updates the sample, which is expected to be at the hard-coded path.\n-     * If this test is failing, check this path is correct.\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n      */\n     @BeforeClass\n-    public static void setUp() throws Exception {\n-        // Add LDAP variables to bootstrap properties file\n-        LDAPUtils.addLDAPVariables(server);\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupLdapServer();\n+        updateLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer(\"CWIML4529E\", \"CWIML4537E\", \"CWPKI0041W\");\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n         Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n-        server.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n-        server.addInstalledAppForValidation(\"userRegistry\");\n-        server.startServer(c.getName() + \".log\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n \n-        //Make sure the application has come up before proceeding\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n         assertNotNull(\"Application userRegistry does not appear to have started.\",\n-                      server.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n         assertNotNull(\"Security service did not report it was ready\",\n-                      server.waitForStringInLog(\"CWWKS0008I\"));\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n         assertNotNull(\"Server did not came up\",\n-                      server.waitForStringInLog(\"CWWKF0011I\"));\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n \n         Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n-        servlet = new UserRegistryServletConnection(server.getHostname(), server.getHttpDefaultPort());\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n \n         if (servlet.getRealm() == null) {\n             Thread.sleep(5000);\n             servlet.getRealm();\n         }\n+\n+        initialConfiguration = libertyServer.getServerConfiguration();\n     }\n \n-    @AfterClass\n-    public static void tearDown() throws Exception {\n-        Log.info(c, \"tearDown\", \"Stopping the server...\");\n-        try {\n-            server.stopServer(\"CWIML4529E\", \"CWIML4537E\", \"CWPKI0041W\");\n-        } finally {\n-            server.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n-        }\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupLdapServer() throws Exception {\n+        String serverPath = libertyServer.getServerRoot();\n+        KEYSTORE_PATH = serverPath + \"/keystore.jks\";\n+        LDIF_PATH = serverPath + \"/AD.ldif\";\n+        Log.info(c, \"setupLdapServer\", \"LDIF Path is \" + LDIF_PATH);\n+        ds = new InMemoryADLDAPServer(BASE_DN);\n+        int entriesAdded = ds.importFromLDIF(true, LDIF_PATH);\n+        Log.info(c, \"setupLdapServer\", \"Adding \" + entriesAdded + \" changes to LDAP Server\");\n+\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void updateLibertyServer() throws Exception {\n+        ServerConfiguration server = initialConfiguration.clone();\n+\n+        LdapRegistry ldap = server.getLdapRegistries().remove(0);\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getListenPort()));\n+        ldap.setBaseDN(BASE_DN);\n+        ldap.setBindDN(InMemoryADLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryADLDAPServer.getBindPassword());\n+        ldap.setSslRef(\"LDAPSSLSettings\");\n+        ldap.setSslEnabled(true);\n+        server.getLdapRegistries().add(ldap);\n+\n+//        ContextPool cp = new ContextPool(true, 0, 2, 1, \"1m\", \"5s\");\n+//        ldap.setContextPool(cp);\n+//        SearchResultsCache src = new SearchResultsCache();\n+//        src.setEnabled(false); // disable search cache so we can look up the same user over and over again\n+\n+        KeyStore LDAPKeyStore = new KeyStore();\n+        LDAPKeyStore.setId(\"LDAPKeyStore\");\n+        LDAPKeyStore.setLocation(KEYSTORE_PATH);\n+        LDAPKeyStore.setPassword(keystorePIN);\n+\n+        KeyStore LDAPTrustStore = new KeyStore();\n+        LDAPTrustStore.setId(\"LDAPTrustStore\");\n+        LDAPTrustStore.setLocation(KEYSTORE_PATH);\n+        LDAPTrustStore.setPassword(keystorePIN);\n+\n+        server.getKeyStores().add(LDAPKeyStore);\n+        server.getKeyStores().add(LDAPTrustStore);\n+\n+        SSLDefault defaultSettings = new SSLDefault();\n+        defaultSettings.setSslRef(\"DefaultSSLSettings\");\n+        server.setSSLDefault(defaultSettings);\n+\n+        SSL defaultSSL = new SSL();\n+        defaultSSL.setId(\"DefaultSSLSettings\");\n+        defaultSSL.setKeyStoreRef(\"defaultKeyStore\");\n+        server.addSSL(defaultSSL);\n+\n+        SSL sslCfg = new SSL();\n+        sslCfg.setId(\"LDAPSSLSettings\");\n+        sslCfg.setKeyStoreRef(\"LDAPKeyStore\");\n+        sslCfg.setTrustStoreRef(\"LDAPTrustStore\");\n+        server.addSSL(sslCfg);\n+\n+        updateConfigDynamically(libertyServer, server);\n+        Log.info(c, \"updateLibertyServer\", libertyServer.getServerConfigurationPath());\n+    }\n+\n+    /**\n+     * Hit the test servlet to see if getRealm works.\n+     * This verifies the various required bundles got installed and are working.\n+     */\n+    @Test\n+    public void getRealm() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36d3bf1342ac7ecd44ec2ebfd9bc62f9dbe80e7"}, "originalPosition": 216}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjM5ODkzOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.com.unboundid/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDowOTozMlrOFz3now==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDowOTozMlrOFz3now==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzMjk2Mw==", "bodyText": "Thought we could get rid of this jar.doFirst since we do the copy in the Include-Resources in the bnd.bnd.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r389932963", "createdAt": "2020-03-09T20:09:32Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/build.gradle", "diffHunk": "@@ -8,10 +8,17 @@\n  * Contributors:\n  *     IBM Corporation - initial API and implementation\n  *******************************************************************************/\n-\n  jar.doFirst {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea65a0675492d2301db204a93e8b7c53d108553"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjQwMTUwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryADLDAPServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxMDoxOVrOFz3pRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxMDoxOVrOFz3pRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzMzM4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * example on how to use this.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r389933380", "createdAt": "2020-03-09T20:10:19Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryADLDAPServer.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.com.unboundid;\n+\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+/**\n+ * An in memory UnboundID LDAP server designed to contain the same data as the activeDirectory instance of the ApacheDS stand-alone LDAP Servers. See for URAPIs_ADLDAP_SSLTest an\n+ * example on how to use this.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea65a0675492d2301db204a93e8b7c53d108553"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjQwMjIyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryADLDAPServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxMDozM1rOFz3psQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxMDozM1rOFz3psQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzMzQ4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * An in memory UnboundID LDAP server designed to contain the same data as the activeDirectory instance of the ApacheDS stand-alone LDAP Servers. See for URAPIs_ADLDAP_SSLTest an\n          \n          \n            \n             * An in memory UnboundID LDAP server designed to contain the same data as the Active Directory instance of the ApacheDS stand-alone LDAP Servers.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r389933489", "createdAt": "2020-03-09T20:10:33Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryADLDAPServer.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.com.unboundid;\n+\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+/**\n+ * An in memory UnboundID LDAP server designed to contain the same data as the activeDirectory instance of the ApacheDS stand-alone LDAP Servers. See for URAPIs_ADLDAP_SSLTest an", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea65a0675492d2301db204a93e8b7c53d108553"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjQwMzUzOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryADLDAPServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxMDo1NVrOFz3qfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxMDo1NVrOFz3qfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzMzY5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This InMemoryADLDAPServer is currently using a null schema to host the data, this should be replaced in the future with a robust activeDirectory schema design\n          \n          \n            \n             * This InMemoryADLDAPServer is currently using a null schema to host the data, this could be replaced in the future with a robust activeDirectory schema design", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r389933693", "createdAt": "2020-03-09T20:10:55Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryADLDAPServer.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.com.unboundid;\n+\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+/**\n+ * An in memory UnboundID LDAP server designed to contain the same data as the activeDirectory instance of the ApacheDS stand-alone LDAP Servers. See for URAPIs_ADLDAP_SSLTest an\n+ * example on how to use this.\n+ *\n+ * This InMemoryADLDAPServer is currently using a null schema to host the data, this should be replaced in the future with a robust activeDirectory schema design", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea65a0675492d2301db204a93e8b7c53d108553"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjQwOTA5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.com.unboundid/resources/AD.ldif", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxMjozOFrOFz3t6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxMjozOFrOFz3t6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzNDU3MQ==", "bodyText": "Need copyright. See the wimschema.ldif.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r389934571", "createdAt": "2020-03-09T20:12:38Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/resources/AD.ldif", "diffHunk": "@@ -0,0 +1,708 @@\n+dn: DC=SECFVT2,DC=AUSTIN,DC=IBM,DC=COM", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea65a0675492d2301db204a93e8b7c53d108553"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjQxNTQ1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxNDozNlrOFz3x3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxNDozNlrOFz3x3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzNTU4MQ==", "bodyText": "I thought we talked about allowing both LDAP and LDAPS? We were going to add it to a collection and pass it into setListenerConfigs?\nWe would then probably have two ports and require changes to how we get the port (the method in this class).", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r389935581", "createdAt": "2020-03-09T20:14:36Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "diffHunk": "@@ -47,37 +57,66 @@\n     private InMemoryDirectoryServerConfig config = null;\n     private InMemoryDirectoryServer ds = null;\n \n+    private static final String keystorePassword = \"LDAPpassword\";\n+    private String keystore;\n+\n     /**\n      * Creates a new instance of the in memory LDAP server. It initializes the directory\n      * service.\n      *\n      * @param bases The base entries to create for this in-memory LDAP server.\n      * @throws Exception If something went wrong\n      */\n-    public InMemoryLDAPServer(String... bases) throws Exception {\n+    public InMemoryLDAPServer(boolean useWimSchema, boolean useSSLConfig, String... bases) throws Exception {\n \n         config = new InMemoryDirectoryServerConfig(bases);\n         config.addAdditionalBindCredentials(getBindDN(), getBindPassword());\n-        config.setListenerConfigs(\n-                                  InMemoryListenerConfig.createLDAPConfig(\"LDAP\", // Listener name\n-                                                                          null, // Listen address. (null = listen on all interfaces)\n-                                                                          0, // Listen port (0 = automatically choose an available port)\n-                                                                          null) // StartTLS factory\n-        ); // Client factory\n \n+        if (useSSLConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea65a0675492d2301db204a93e8b7c53d108553"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjQyMjg3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxNjo0M1rOFz32WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxNjo0M1rOFz32WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzNjcyOQ==", "bodyText": "This javadoc is wrong, even though you marked the conversation as resolved. Move this Javadoc to the other constructor.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r389936729", "createdAt": "2020-03-09T20:16:43Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "diffHunk": "@@ -47,37 +57,66 @@\n     private InMemoryDirectoryServerConfig config = null;\n     private InMemoryDirectoryServer ds = null;\n \n+    private static final String keystorePassword = \"LDAPpassword\";\n+    private String keystore;\n+\n     /**\n      * Creates a new instance of the in memory LDAP server. It initializes the directory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea65a0675492d2301db204a93e8b7c53d108553"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjQyNDc1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxNzoyNFrOFz33kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxNzoyNFrOFz33kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzNzA0MQ==", "bodyText": "Missing Javadoc. Move the other constructor's javadoc down here.\nMove this in front or right after the other constructor.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r389937041", "createdAt": "2020-03-09T20:17:24Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "diffHunk": "@@ -47,37 +57,66 @@\n     private InMemoryDirectoryServerConfig config = null;\n     private InMemoryDirectoryServer ds = null;\n \n+    private static final String keystorePassword = \"LDAPpassword\";\n+    private String keystore;\n+\n     /**\n      * Creates a new instance of the in memory LDAP server. It initializes the directory\n      * service.\n      *\n      * @param bases The base entries to create for this in-memory LDAP server.\n      * @throws Exception If something went wrong\n      */\n-    public InMemoryLDAPServer(String... bases) throws Exception {\n+    public InMemoryLDAPServer(boolean useWimSchema, boolean useSSLConfig, String... bases) throws Exception {\n \n         config = new InMemoryDirectoryServerConfig(bases);\n         config.addAdditionalBindCredentials(getBindDN(), getBindPassword());\n-        config.setListenerConfigs(\n-                                  InMemoryListenerConfig.createLDAPConfig(\"LDAP\", // Listener name\n-                                                                          null, // Listen address. (null = listen on all interfaces)\n-                                                                          0, // Listen port (0 = automatically choose an available port)\n-                                                                          null) // StartTLS factory\n-        ); // Client factory\n \n+        if (useSSLConfig) {\n+            keystore = extractResourceToFile(\"/resources/keystore.jks\", \"keystore\", \".jks\").getAbsolutePath();\n+            final SSLUtil serverSSLUtil = new SSLUtil(new KeyStoreKeyManager(keystore, keystorePassword\n+                            .toCharArray(), \"JKS\", \"cert-alias\"), new TrustAllTrustManager());\n+            config.setListenerConfigs(InMemoryListenerConfig.createLDAPSConfig(\"LDAPS\", 0, serverSSLUtil.createSSLServerSocketFactory()));\n+        } else {\n+            config.setListenerConfigs(InMemoryListenerConfig.createLDAPConfig(\"LDAP\", null, 0, null));\n+        }\n+        Schema schema = null;\n+        if (useWimSchema) {\n+            InputStream in = getClass().getResourceAsStream(\"/resources/wimschema.ldif\");\n+            Schema wimschema = Schema.getSchema(in);\n+            schema = Schema.mergeSchemas(Schema.getDefaultStandardSchema(), wimschema);\n+        }\n+        config.setSchema(schema);\n+\n+        ds = new InMemoryDirectoryServer(config);\n+        ds.startListening();\n+    }\n+\n+    /**\n+     * Extract a resource from the JAR to a temporary file on the file system. The\n+     * file is marked for deletion on JVM exit.\n+     *\n+     * @param resource The resource from the JAR to extract.\n+     * @param prefix   Prefix for the temporary file.\n+     * @param suffix   Suffix for the temporary file.\n+     * @return The {@link File} instance.\n+     * @throws IOException if there was an issue extracting the file.\n+     */\n+    protected File extractResourceToFile(String resource, String prefix, String suffix) throws IOException {\n+        File tempfile = File.createTempFile(prefix, suffix);\n+        InputStream src = getClass().getResourceAsStream(resource);\n+        Files.copy(src, Paths.get(tempfile.getAbsolutePath()), StandardCopyOption.REPLACE_EXISTING);\n+        return tempfile;\n+    }\n+\n+    public InMemoryLDAPServer(String... bases) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea65a0675492d2301db204a93e8b7c53d108553"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjQyOTEwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxODo0N1rOFz36TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxODo0N1rOFz36TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzNzc0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r389937741", "createdAt": "2020-03-09T20:18:47Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "diffHunk": "@@ -188,4 +236,32 @@ public void silentDelete(String dn) {\n             // if the user or group doesn't exist, that's fine.\n         }\n     }\n+\n+    /**\n+     * Attempts to establish a client connection to the server.\n+     *\n+     * @param options The connection options to use when creating the connection. It may be null if a default set of options should be used.\n+     * @returns The client connection that has been established.\n+     * @throws LDAPException - If a problem is encountered while attempting to create the connection.\n+     */\n+    public LDAPConnection getConnection(String listenerName) throws LDAPException {\n+        return ds.getConnection(listenerName);\n+    }\n+\n+    /*\n+     * Reads entries from the specified LDIF file and adds them to the server, optionally clearing any existing entries before beginning to add the new entries. If an error is\n+     * encountered while adding entries from LDIF then the server will remain populated with the data it held before the import attempt (even if the clear is given with a value of\n+     * true). This method may be used regardless of whether the server is listening for client connections.\n+     *\n+     * @param clear Indicates whether to remove all existing entries prior to adding entries read from LDIF.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea65a0675492d2301db204a93e8b7c53d108553"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjQyOTU5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxODo1N1rOFz36lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxODo1N1rOFz36lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzNzgxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r389937815", "createdAt": "2020-03-09T20:18:57Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "diffHunk": "@@ -188,4 +236,32 @@ public void silentDelete(String dn) {\n             // if the user or group doesn't exist, that's fine.\n         }\n     }\n+\n+    /**\n+     * Attempts to establish a client connection to the server.\n+     *\n+     * @param options The connection options to use when creating the connection. It may be null if a default set of options should be used.\n+     * @returns The client connection that has been established.\n+     * @throws LDAPException - If a problem is encountered while attempting to create the connection.\n+     */\n+    public LDAPConnection getConnection(String listenerName) throws LDAPException {\n+        return ds.getConnection(listenerName);\n+    }\n+\n+    /*\n+     * Reads entries from the specified LDIF file and adds them to the server, optionally clearing any existing entries before beginning to add the new entries. If an error is\n+     * encountered while adding entries from LDIF then the server will remain populated with the data it held before the import attempt (even if the clear is given with a value of\n+     * true). This method may be used regardless of whether the server is listening for client connections.\n+     *\n+     * @param clear Indicates whether to remove all existing entries prior to adding entries read from LDIF.\n+     *\n+     * @param path The path to the LDIF file from which the entries should be read. It must not be null.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea65a0675492d2301db204a93e8b7c53d108553"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjQzMDE5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxOTowOVrOFz36_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoxOTowOVrOFz36_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzNzkxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r389937917", "createdAt": "2020-03-09T20:19:09Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "diffHunk": "@@ -188,4 +236,32 @@ public void silentDelete(String dn) {\n             // if the user or group doesn't exist, that's fine.\n         }\n     }\n+\n+    /**\n+     * Attempts to establish a client connection to the server.\n+     *\n+     * @param options The connection options to use when creating the connection. It may be null if a default set of options should be used.\n+     * @returns The client connection that has been established.\n+     * @throws LDAPException - If a problem is encountered while attempting to create the connection.\n+     */\n+    public LDAPConnection getConnection(String listenerName) throws LDAPException {\n+        return ds.getConnection(listenerName);\n+    }\n+\n+    /*\n+     * Reads entries from the specified LDIF file and adds them to the server, optionally clearing any existing entries before beginning to add the new entries. If an error is\n+     * encountered while adding entries from LDIF then the server will remain populated with the data it held before the import attempt (even if the clear is given with a value of\n+     * true). This method may be used regardless of whether the server is listening for client connections.\n+     *\n+     * @param clear Indicates whether to remove all existing entries prior to adding entries read from LDIF.\n+     *\n+     * @param path The path to the LDIF file from which the entries should be read. It must not be null.\n+     *\n+     * @returns The number of entries read from LDIF and added to the server.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea65a0675492d2301db204a93e8b7c53d108553"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjQzNTIwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoyMDo0OVrOFz3-Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoyMDo0OVrOFz3-Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzODcyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LdapRegistry ldap = serverConfig.getLdapRegistries().remove(0);\n          \n          \n            \n                    LdapRegistry ldap = serverConfig.getLdapRegistries().get(0);", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r389938727", "createdAt": "2020-03-09T20:20:49Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "diffHunk": "@@ -42,54 +45,105 @@\n @RunWith(FATRunner.class)\n @Mode(TestMode.FULL)\n public class URAPIs_ADLDAP_SSLTest {\n-    private static LibertyServer server = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl\");\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl\");\n     private static final Class<?> c = URAPIs_ADLDAP_SSLTest.class;\n     private static UserRegistryServletConnection servlet;\n \n-    //private final LeakedPasswordChecker passwordChecker = new LeakedPasswordChecker(server);\n-\n     /** Test rule for testing for expected exceptions. */\n     @Rule\n     public ExpectedException expectedException = ExpectedException.none();\n+    private static InMemoryADLDAPServer ds;\n+    private static final String BASE_DN = \"DC=SECFVT2,DC=AUSTIN,DC=IBM,DC=COM\";\n \n     /**\n-     * Updates the sample, which is expected to be at the hard-coded path.\n-     * If this test is failing, check this path is correct.\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n      */\n     @BeforeClass\n-    public static void setUp() throws Exception {\n-        // Add LDAP variables to bootstrap properties file\n-        LDAPUtils.addLDAPVariables(server);\n+    public static void setupClass() throws Exception {\n+        setupLdapServer();\n+        setupLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer(\"CWIML4529E\", \"CWIML4537E\", \"CWPKI0041W\");\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+            libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+        }\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n         Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n-        server.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n-        server.addInstalledAppForValidation(\"userRegistry\");\n-        server.startServer(c.getName() + \".log\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+\n+        /*\n+         * Update LDAP configuration with In-Memory Server\n+         */\n+        ServerConfiguration serverConfig = libertyServer.getServerConfiguration();\n+        LdapRegistry ldap = serverConfig.getLdapRegistries().remove(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea65a0675492d2301db204a93e8b7c53d108553"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjQzNTc1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoyMDo1OFrOFz3-dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoyMDo1OFrOFz3-dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzODgwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    serverConfig.getLdapRegistries().add(ldap);", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r389938804", "createdAt": "2020-03-09T20:20:58Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "diffHunk": "@@ -42,54 +45,105 @@\n @RunWith(FATRunner.class)\n @Mode(TestMode.FULL)\n public class URAPIs_ADLDAP_SSLTest {\n-    private static LibertyServer server = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl\");\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl\");\n     private static final Class<?> c = URAPIs_ADLDAP_SSLTest.class;\n     private static UserRegistryServletConnection servlet;\n \n-    //private final LeakedPasswordChecker passwordChecker = new LeakedPasswordChecker(server);\n-\n     /** Test rule for testing for expected exceptions. */\n     @Rule\n     public ExpectedException expectedException = ExpectedException.none();\n+    private static InMemoryADLDAPServer ds;\n+    private static final String BASE_DN = \"DC=SECFVT2,DC=AUSTIN,DC=IBM,DC=COM\";\n \n     /**\n-     * Updates the sample, which is expected to be at the hard-coded path.\n-     * If this test is failing, check this path is correct.\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n      */\n     @BeforeClass\n-    public static void setUp() throws Exception {\n-        // Add LDAP variables to bootstrap properties file\n-        LDAPUtils.addLDAPVariables(server);\n+    public static void setupClass() throws Exception {\n+        setupLdapServer();\n+        setupLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer(\"CWIML4529E\", \"CWIML4537E\", \"CWPKI0041W\");\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+            libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+        }\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n         Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n-        server.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n-        server.addInstalledAppForValidation(\"userRegistry\");\n-        server.startServer(c.getName() + \".log\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+\n+        /*\n+         * Update LDAP configuration with In-Memory Server\n+         */\n+        ServerConfiguration serverConfig = libertyServer.getServerConfiguration();\n+        LdapRegistry ldap = serverConfig.getLdapRegistries().remove(0);\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getListenPort()));\n+        ldap.setBaseDN(BASE_DN);\n+        ldap.setBindDN(InMemoryADLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryADLDAPServer.getBindPassword());\n+        serverConfig.getLdapRegistries().add(ldap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea65a0675492d2301db204a93e8b7c53d108553"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjQzNjg3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoyMToyM1rOFz3_Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoyMToyM1rOFz3_Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzODk5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    libertyServer.getServerConfiguration();", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r389938994", "createdAt": "2020-03-09T20:21:23Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "diffHunk": "@@ -42,54 +45,105 @@\n @RunWith(FATRunner.class)\n @Mode(TestMode.FULL)\n public class URAPIs_ADLDAP_SSLTest {\n-    private static LibertyServer server = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl\");\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl\");\n     private static final Class<?> c = URAPIs_ADLDAP_SSLTest.class;\n     private static UserRegistryServletConnection servlet;\n \n-    //private final LeakedPasswordChecker passwordChecker = new LeakedPasswordChecker(server);\n-\n     /** Test rule for testing for expected exceptions. */\n     @Rule\n     public ExpectedException expectedException = ExpectedException.none();\n+    private static InMemoryADLDAPServer ds;\n+    private static final String BASE_DN = \"DC=SECFVT2,DC=AUSTIN,DC=IBM,DC=COM\";\n \n     /**\n-     * Updates the sample, which is expected to be at the hard-coded path.\n-     * If this test is failing, check this path is correct.\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n      */\n     @BeforeClass\n-    public static void setUp() throws Exception {\n-        // Add LDAP variables to bootstrap properties file\n-        LDAPUtils.addLDAPVariables(server);\n+    public static void setupClass() throws Exception {\n+        setupLdapServer();\n+        setupLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer(\"CWIML4529E\", \"CWIML4537E\", \"CWPKI0041W\");\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+            libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+        }\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n         Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n-        server.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n-        server.addInstalledAppForValidation(\"userRegistry\");\n-        server.startServer(c.getName() + \".log\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+\n+        /*\n+         * Update LDAP configuration with In-Memory Server\n+         */\n+        ServerConfiguration serverConfig = libertyServer.getServerConfiguration();\n+        LdapRegistry ldap = serverConfig.getLdapRegistries().remove(0);\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getListenPort()));\n+        ldap.setBaseDN(BASE_DN);\n+        ldap.setBindDN(InMemoryADLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryADLDAPServer.getBindPassword());\n+        serverConfig.getLdapRegistries().add(ldap);\n+        libertyServer.updateServerConfiguration(serverConfig);\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        libertyServer.startServer(c.getName() + \".log\");\n \n-        //Make sure the application has come up before proceeding\n         assertNotNull(\"Application userRegistry does not appear to have started.\",\n-                      server.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n         assertNotNull(\"Security service did not report it was ready\",\n-                      server.waitForStringInLog(\"CWWKS0008I\"));\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n         assertNotNull(\"Server did not came up\",\n-                      server.waitForStringInLog(\"CWWKF0011I\"));\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n \n         Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n-        servlet = new UserRegistryServletConnection(server.getHostname(), server.getHttpDefaultPort());\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n \n         if (servlet.getRealm() == null) {\n             Thread.sleep(5000);\n             servlet.getRealm();\n         }\n+\n+        libertyServer.getServerConfiguration();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea65a0675492d2301db204a93e8b7c53d108553"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjQzOTg3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoyMjoxOVrOFz4BBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoyMjoxOVrOFz4BBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzOTQ2Mg==", "bodyText": "Why is this moved? Move it back down where it was.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r389939462", "createdAt": "2020-03-09T20:22:19Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "diffHunk": "@@ -155,7 +209,20 @@ public void getUsersForGroupWithInvalidGroup() throws Exception {\n     @Test\n     public void getRealm() throws Exception {\n         Log.info(c, \"getRealm\", \"Checking expected realm\");\n-        assertEquals(\"ADSSLRealm\", servlet.getRealm());\n+        assertEquals(\"SampleLdapADRealm\", servlet.getRealm());\n+    }\n+\n+    /**\n+     * Hit the test servlet to see if getUsers works when passed in a valid user pattern\n+     * and a limit of 2; should only expect to find one entry\n+     * This verifies the various required bundles got installed and are working.\n+     */\n+    @Test\n+    public void getUsers() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea65a0675492d2301db204a93e8b7c53d108553"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjQ0MTQ1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoyMjo1NlrOFz4CJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoyMjo1NlrOFz4CJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzOTc0OA==", "bodyText": "Can we name this back to server? This rename made a bunch of changes that are just churn.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r389939748", "createdAt": "2020-03-09T20:22:56Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "diffHunk": "@@ -42,54 +45,105 @@\n @RunWith(FATRunner.class)\n @Mode(TestMode.FULL)\n public class URAPIs_ADLDAP_SSLTest {\n-    private static LibertyServer server = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl\");\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea65a0675492d2301db204a93e8b7c53d108553"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjQ0NTczOnYy", "diffSide": "LEFT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl/server.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoyNDoyMVrOFz4Evw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoyNDoyMVrOFz4Evw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk0MDQxNQ==", "bodyText": "Why did baseDN change? It should have needed to change if we are running the same test.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r389940415", "createdAt": "2020-03-09T20:24:21Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl/server.xml", "diffHunk": "@@ -19,7 +19,7 @@\n \t\t<feature>ldapRegistry-3.0</feature>\n \t</featureManager>\n \n-\t<ldapRegistry id=\"ldap\" realm=\"SampleLdapADRealm\" host=\"${ldap.server.2.name}\" port=\"${ldap.server.2.ssl.port}\" ignoreCase=\"true\"  baseDN=\"cn=users,dc=secfvt2,dc=austin,dc=ibm,dc=com\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea65a0675492d2301db204a93e8b7c53d108553"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjQ0NzU5OnYy", "diffSide": "LEFT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl/server.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoyNDo1OVrOFz4GCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoyNDo1OVrOFz4GCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk0MDc0NA==", "bodyText": "Change this back, as well as change it back in the test. Lets not change anything we don't need to. The goal here is to NOT change the test as much as possible.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r389940744", "createdAt": "2020-03-09T20:24:59Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl/server.xml", "diffHunk": "@@ -76,14 +76,11 @@\n         <attributesCache size=\"4000\" timeout=\"1200ms\" enabled=\"true\" sizeLimit=\"2000\"/>\n         <searchResultsCache size=\"2000\" timeout=\"600ms\" enabled=\"true\" resultsSizeLimit=\"1000\"/>\n       </ldapCache>\n-      <failoverServers name=\"failoverLdapServers\">\n-\t\t   <server host=\"${ldap.server.6.name}\" port=\"${ldap.server.6.ssl.port}\"/>\n-        </failoverServers>\n \t</ldapRegistry>\n \t\n     <federatedRepository maxSearchResults=\"2000\" searchTimeout=\"400000\">\n-        <primaryRealm name=\"ADSSLRealm\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea65a0675492d2301db204a93e8b7c53d108553"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjQ0ODU1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl/server.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoyNToxNlrOFz4Gmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoyNToxNlrOFz4Gmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk0MDg5MQ==", "bodyText": "Again, why did the base entry change?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r389940891", "createdAt": "2020-03-09T20:25:16Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.ad.ssl/server.xml", "diffHunk": "@@ -76,14 +76,11 @@\n         <attributesCache size=\"4000\" timeout=\"1200ms\" enabled=\"true\" sizeLimit=\"2000\"/>\n         <searchResultsCache size=\"2000\" timeout=\"600ms\" enabled=\"true\" resultsSizeLimit=\"1000\"/>\n       </ldapCache>\n-      <failoverServers name=\"failoverLdapServers\">\n-\t\t   <server host=\"${ldap.server.6.name}\" port=\"${ldap.server.6.ssl.port}\"/>\n-        </failoverServers>\n \t</ldapRegistry>\n \t\n     <federatedRepository maxSearchResults=\"2000\" searchTimeout=\"400000\">\n-        <primaryRealm name=\"ADSSLRealm\">\n-            <participatingBaseEntry name=\"cn=users,dc=secfvt2,dc=austin,dc=ibm,dc=com\"/>\n+        <primaryRealm name=\"SampleLdapADRealm\">\n+            <participatingBaseEntry name=\"DC=SECFVT2,DC=AUSTIN,DC=IBM,DC=COM\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ea65a0675492d2301db204a93e8b7c53d108553"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjA1MDk5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.com.unboundid/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODo0NTo0M1rOF2OvuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODo0NTo0M1rOF2OvuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQwOTAxNw==", "bodyText": "Just delete this file if it is empty.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r392409017", "createdAt": "2020-03-13T18:45:43Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/build.gradle", "diffHunk": "@@ -7,11 +7,4 @@\n  *\n  * Contributors:\n  *     IBM Corporation - initial API and implementation\n- *******************************************************************************/\n-\n- jar.doFirst {\n-   copy { \n-     from file(\"resources/wimschema.ldif\")\n-     into file(\"build/classes/java/main/resources\")\n-   }\n-}\n\\ No newline at end of file\n+ *******************************************************************************/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b30803610993ec8cb72af2c81c46e570dfac3a25"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjA4NjQ4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODo1Nzo1N1rOF2PGew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODo1Nzo1N1rOF2PGew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQxNDg0Mw==", "bodyText": "I am wondering if we really need to pass in the base entry since I assume we are always loading the AD.ldiff file. The base entry probably always needs to be the same.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r392414843", "createdAt": "2020-03-13T18:57:57Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "diffHunk": "@@ -82,14 +134,13 @@ public static void setUp() throws Exception {\n         }\n     }\n \n-    @AfterClass\n-    public static void tearDown() throws Exception {\n-        Log.info(c, \"tearDown\", \"Stopping the server...\");\n-        try {\n-            server.stopServer(\"CWIML4529E\", \"CWIML4537E\", \"CWPKI0041W\");\n-        } finally {\n-            server.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n-        }\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupLdapServer() throws Exception {\n+        ds = new InMemoryADLDAPServer(BASE_DN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b30803610993ec8cb72af2c81c46e570dfac3a25"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjA4NzY4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODo1ODoyMlrOF2PHUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODo1ODoyMlrOF2PHUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQxNTA1OA==", "bodyText": "No reason to leave a commented out line.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //        ldap.setBaseDN(BASE_DN);", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r392415058", "createdAt": "2020-03-13T18:58:22Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "diffHunk": "@@ -46,26 +49,75 @@\n     private static final Class<?> c = URAPIs_ADLDAP_SSLTest.class;\n     private static UserRegistryServletConnection servlet;\n \n-    //private final LeakedPasswordChecker passwordChecker = new LeakedPasswordChecker(server);\n-\n     /** Test rule for testing for expected exceptions. */\n     @Rule\n     public ExpectedException expectedException = ExpectedException.none();\n+    private static InMemoryADLDAPServer ds;\n+    private static final String BASE_DN = \"DC=SECFVT2,DC=AUSTIN,DC=IBM,DC=COM\";\n \n     /**\n-     * Updates the sample, which is expected to be at the hard-coded path.\n-     * If this test is failing, check this path is correct.\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n      */\n     @BeforeClass\n-    public static void setUp() throws Exception {\n-        // Add LDAP variables to bootstrap properties file\n+    public static void setupClass() throws Exception {\n+        setupLdapServer();\n+        setupLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (server != null) {\n+                server.stopServer(\"CWIML4529E\", \"CWIML4537E\", \"CWPKI0041W\");\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+            server.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+        }\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n         LDAPUtils.addLDAPVariables(server);\n         Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n         server.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n         server.addInstalledAppForValidation(\"userRegistry\");\n+\n+        /*\n+         * Update LDAP configuration with In-Memory Server\n+         */\n+        ServerConfiguration serverConfig = server.getServerConfiguration();\n+        LdapRegistry ldap = serverConfig.getLdapRegistries().get(0);\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getListenPort()));\n+//        ldap.setBaseDN(BASE_DN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b30803610993ec8cb72af2c81c46e570dfac3a25"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjA5MDQ3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODo1OTozMlrOF2PJPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODo1OTozMlrOF2PJPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQxNTU1MA==", "bodyText": "Make this a public static final String BASE_ENTRY ... in the new LDAP class.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r392415550", "createdAt": "2020-03-13T18:59:32Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "diffHunk": "@@ -46,26 +49,75 @@\n     private static final Class<?> c = URAPIs_ADLDAP_SSLTest.class;\n     private static UserRegistryServletConnection servlet;\n \n-    //private final LeakedPasswordChecker passwordChecker = new LeakedPasswordChecker(server);\n-\n     /** Test rule for testing for expected exceptions. */\n     @Rule\n     public ExpectedException expectedException = ExpectedException.none();\n+    private static InMemoryADLDAPServer ds;\n+    private static final String BASE_DN = \"DC=SECFVT2,DC=AUSTIN,DC=IBM,DC=COM\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b30803610993ec8cb72af2c81c46e570dfac3a25"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjA5MTE1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODo1OTo0OFrOF2PJsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODo1OTo0OFrOF2PJsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQxNTY2NQ==", "bodyText": "Update copyright above.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r392415665", "createdAt": "2020-03-13T18:59:48Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/URAPIs_ADLDAP_SSLTest.java", "diffHunk": "@@ -27,7 +27,10 @@\n import org.junit.rules.ExpectedException;\n import org.junit.runner.RunWith;\n \n+import com.ibm.websphere.simplicity.config.ServerConfiguration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b30803610993ec8cb72af2c81c46e570dfac3a25"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjA5NzkyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTowMjoyOVrOF2PONg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTowMjoyOVrOF2PONg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQxNjgyMg==", "bodyText": "Can we not listen on both LDAP and LDAPS?\nHow would this effect getListenAddress()?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10825#discussion_r392416822", "createdAt": "2020-03-13T19:02:29Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.com.unboundid/src/com/ibm/ws/com/unboundid/InMemoryLDAPServer.java", "diffHunk": "@@ -47,37 +58,79 @@\n     private InMemoryDirectoryServerConfig config = null;\n     private InMemoryDirectoryServer ds = null;\n \n+    private static final String keystorePassword = \"LDAPpassword\";\n+    private String keystore;\n+\n     /**\n      * Creates a new instance of the in memory LDAP server. It initializes the directory\n      * service.\n      *\n-     * @param bases The base entries to create for this in-memory LDAP server.\n+     * @param useWimSchema      Asking the user if they want to use the default WIM schema\n+     * @param bases             The base entries to create for this in-memory LDAP servers\n+     * @param useSecureListener Use the LDAPS listener\n      * @throws Exception If something went wrong\n      */\n-    public InMemoryLDAPServer(String... bases) throws Exception {\n+    public InMemoryLDAPServer(boolean useWimSchema, boolean useSecureListener, String... bases) throws Exception {\n \n         config = new InMemoryDirectoryServerConfig(bases);\n         config.addAdditionalBindCredentials(getBindDN(), getBindPassword());\n-        config.setListenerConfigs(\n-                                  InMemoryListenerConfig.createLDAPConfig(\"LDAP\", // Listener name\n-                                                                          null, // Listen address. (null = listen on all interfaces)\n-                                                                          0, // Listen port (0 = automatically choose an available port)\n-                                                                          null) // StartTLS factory\n-        ); // Client factory\n \n+        keystore = extractResourceToFile(\"/resources/keystore.jks\", \"keystore\", \".jks\").getAbsolutePath();\n+        final SSLUtil serverSSLUtil = new SSLUtil(new KeyStoreKeyManager(keystore, keystorePassword\n+                        .toCharArray(), \"JKS\", \"cert-alias\"), new TrustAllTrustManager());\n+        ArrayList<InMemoryListenerConfig> configs = new ArrayList<InMemoryListenerConfig>();\n+        InMemoryListenerConfig secure = InMemoryListenerConfig.createLDAPSConfig(\"LDAPS\", 0, serverSSLUtil.createSSLServerSocketFactory());\n+        configs.add(secure);\n+        InMemoryListenerConfig insecure = InMemoryListenerConfig.createLDAPConfig(\"LDAP\", null, 0, null);\n+        configs.add(insecure);\n+        config.setListenerConfigs(configs);\n+        Schema schema = null;\n+        if (useWimSchema) {\n+            InputStream in = getClass().getResourceAsStream(\"/resources/wimschema.ldif\");\n+            Schema wimschema = Schema.getSchema(in);\n+            schema = Schema.mergeSchemas(Schema.getDefaultStandardSchema(), wimschema);\n+        }\n+        config.setSchema(schema);\n+\n+        ds = new InMemoryDirectoryServer(config);\n+        if (useSecureListener)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b30803610993ec8cb72af2c81c46e570dfac3a25"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2111, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}