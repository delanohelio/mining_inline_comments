{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5Njc5ODg4", "number": 15301, "title": "Add some new MP Compatibility tests", "bodyText": "MicroProfile 4.0 features should not be started at the same time as features from older MP specs.\nNor should they be started at the same time as Jakarta EE 9 features.", "createdAt": "2020-12-14T17:23:50Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/15301", "merged": true, "mergeCommit": {"oid": "77f912d20ead8fbf389ad1a29c42eb5491c695ba"}, "closed": true, "closedAt": "2021-01-18T09:45:49Z", "author": {"login": "tevans78"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmJJyyAFqTU1MTY3MDgxNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdwcZlMgFqTU2OTQ1OTUxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNjcwODE1", "url": "https://github.com/OpenLiberty/open-liberty/pull/15301#pullrequestreview-551670815", "createdAt": "2020-12-14T17:26:12Z", "commit": {"oid": "91d3abc3984701df5018714d45e5ce78f187a092"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNzU0MzIx", "url": "https://github.com/OpenLiberty/open-liberty/pull/15301#pullrequestreview-551754321", "createdAt": "2020-12-14T18:11:09Z", "commit": {"oid": "c616af81f9785b96dca6a853129fdae38300ccf5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODoxMTowOVrOIFdk0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODoxMTowOVrOIFdk0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5ODM1Mw==", "bodyText": "I am wondering whether a better fix is to add the jaeger client jar and add the classloader element in the server.xml so that this warning message will not appear any more.", "url": "https://github.com/OpenLiberty/open-liberty/pull/15301#discussion_r542598353", "createdAt": "2020-12-14T18:11:09Z", "author": {"login": "Emily-Jiang"}, "path": "dev/com.ibm.ws.microprofile.4.0_fat/fat/src/com/ibm/ws/microprofile40/fat/suite/MPCompatibleTest.java", "diffHunk": "@@ -0,0 +1,295 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.microprofile40.fat.suite;\n+\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.PropertiesAsset;\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.ShrinkHelper.DeployOptions;\n+import com.ibm.ws.microprofile40.fat.tests.helloworld.HelloWorldApplication;\n+\n+import componenttest.annotation.ExpectedFFDC;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+\n+@RunWith(FATRunner.class)\n+public class MPCompatibleTest {\n+\n+    private static final String SERVER_NAME = \"MPServer\";\n+\n+    @Server(SERVER_NAME)\n+    public static LibertyServer server;\n+\n+    private static final String APP_NAME = \"helloworld\";\n+\n+    private static final String MESSAGE = \"Hello World!\";\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+\n+        PropertiesAsset config = new PropertiesAsset().addProperty(\"message\", MESSAGE);\n+\n+        WebArchive war = ShrinkWrap.create(WebArchive.class, APP_NAME + \".war\")\n+                                   .addPackage(HelloWorldApplication.class.getPackage())\n+                                   .addAsResource(config, \"META-INF/microprofile-config.properties\");\n+\n+        ShrinkHelper.exportDropinAppToServer(server, war, DeployOptions.SERVER_ONLY);\n+    }\n+\n+    /**\n+     * Just microProfile-4.0 ... Should always pass, a sanity check\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.LITE)\n+    public void testMicroProfile40() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40.xml\");\n+            server.startServer();\n+            runGetMethod(200, \"/helloworld/helloworld\", MESSAGE);\n+        } finally {\n+            server.stopServer(\"CWMOT0010W\"); //CWMOT0010W: OpenTracing cannot track JAX-RS requests because an OpentracingTracerFactory class was not provided or client libraries for tracing backend are not in the class path.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c616af81f9785b96dca6a853129fdae38300ccf5"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNzYwOTE3", "url": "https://github.com/OpenLiberty/open-liberty/pull/15301#pullrequestreview-551760917", "createdAt": "2020-12-14T18:14:37Z", "commit": {"oid": "c616af81f9785b96dca6a853129fdae38300ccf5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c616af81f9785b96dca6a853129fdae38300ccf5", "author": {"user": {"login": "tevans78", "name": "Tom Evans"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/c616af81f9785b96dca6a853129fdae38300ccf5", "committedDate": "2020-12-14T17:26:51Z", "message": "fix copyright date"}, "afterCommit": {"oid": "cb57cf2ab0dbb76f29021bb81db5dac6379d02cf", "author": {"user": {"login": "tevans78", "name": "Tom Evans"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/cb57cf2ab0dbb76f29021bb81db5dac6379d02cf", "committedDate": "2021-01-12T13:32:55Z", "message": "Small GraphQL fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2MzY2OTg3", "url": "https://github.com/OpenLiberty/open-liberty/pull/15301#pullrequestreview-566366987", "createdAt": "2021-01-12T15:09:10Z", "commit": {"oid": "206125f728080f5c2fccf8d800d4b17a86f9ac6c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2NTA1NDA5", "url": "https://github.com/OpenLiberty/open-liberty/pull/15301#pullrequestreview-566505409", "createdAt": "2021-01-12T17:28:08Z", "commit": {"oid": "206125f728080f5c2fccf8d800d4b17a86f9ac6c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNzoyODowOFrOISMX7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNzoyODowOFrOISMX7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0ODAxMw==", "bodyText": "Context Propagation won't be released when MP 4.0 is out. Will this cause any issue?", "url": "https://github.com/OpenLiberty/open-liberty/pull/15301#discussion_r555948013", "createdAt": "2021-01-12T17:28:08Z", "author": {"login": "Emily-Jiang"}, "path": "dev/io.openliberty.microprofile.internal_fat/fat/src/io/openliberty/microprofile/internal/test/suite/MPCompatibleTest.java", "diffHunk": "@@ -0,0 +1,346 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.microprofile.internal.test.suite;\n+\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.BeforeClass;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.PropertiesAsset;\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.ShrinkHelper.DeployOptions;\n+\n+import componenttest.annotation.ExpectedFFDC;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import io.openliberty.microprofile.internal.test.helloworld.HelloWorldApplication;\n+import io.openliberty.microprofile.internal.test.helloworld.config.ConfiguredHelloWorldBean;\n+\n+@RunWith(FATRunner.class)\n+public class MPCompatibleTest {\n+\n+    private static final String SERVER_NAME = \"MPCompatibleServer\";\n+\n+    @Server(SERVER_NAME)\n+    public static LibertyServer server;\n+\n+    private static final String APP_NAME = \"helloworld\";\n+\n+    private static final String MESSAGE = \"Hello World!\";\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+\n+        PropertiesAsset config = new PropertiesAsset().addProperty(\"message\", MESSAGE);\n+\n+        WebArchive war = ShrinkWrap.create(WebArchive.class, APP_NAME + \".war\")\n+                                   .addPackage(HelloWorldApplication.class.getPackage())\n+                                   .addPackage(ConfiguredHelloWorldBean.class.getPackage())\n+                                   .addAsResource(config, \"META-INF/microprofile-config.properties\");\n+\n+        ShrinkHelper.exportDropinAppToServer(server, war, DeployOptions.SERVER_ONLY);\n+    }\n+\n+    /**\n+     * Just microProfile-4.0 ... Should always pass, a sanity check\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.LITE)\n+    public void testMicroProfile40() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40.xml\");\n+            server.startServer();\n+            runGetMethod(200, \"/helloworld/helloworld\", MESSAGE);\n+        } finally {\n+            server.stopServer(\"CWMOT0010W\"); //CWMOT0010W: OpenTracing cannot track JAX-RS requests because an OpentracingTracerFactory class was not provided or client libraries for tracing backend are not in the class path.\n+        }\n+    }\n+\n+    /**\n+     * microProfile-4.0 plus concurrent-1.0\n+     * Should pass despite the fact the concurrent-1.0 pulls in the MP Context Propagation 1.0 API feature.\n+     * The MP Context Propagation 1.0 impl should not work with MP 4.0 but pulling in just the API should still be OK.\n+     * TBH this isn't ideal but is just the way the concurrent impl has been designed.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.FULL)\n+    public void testMP40andConcurrent10() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40andConcurrent10.xml\");\n+            server.startServer();\n+            runGetMethod(200, \"/helloworld/helloworld\", MESSAGE);\n+        } finally {\n+            server.stopServer(\"CWMOT0010W\"); //CWMOT0010W: OpenTracing cannot track JAX-RS requests because an OpentracingTracerFactory class was not provided or client libraries for tracing backend are not in the class path.\n+        }\n+    }\n+\n+    /**\n+     * microProfile-4.0 plus concurrent-2.0\n+     * Should fail because concurrent-2.0 depends on eeCompatible-9.0.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.FULL)\n+    @ExpectedFFDC(\"java.lang.IllegalArgumentException\")\n+    public void testMP40andConcurrent20() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40andConcurrent20.xml\");\n+            server.startServerAndValidate(true, //preClean\n+                                          false, //cleanStart\n+                                          false, //validateApps\n+                                          false, //expectStartFailure\n+                                          false); //validateTimedExit\n+        } finally {\n+            server.stopServer(\"CWWKF0044E: The concurrent-2.0 and .* features cannot be loaded at the same time\",\n+                              \"CWWKF0046W: The configuration includes an incompatible combination of features\");\n+        }\n+    }\n+\n+    /**\n+     * microProfile-4.0 plus jakartaee-8.0\n+     * Should always pass\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.FULL)\n+    public void testMP40andEE8() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40andEE8.xml\");\n+            server.startServer();\n+            runGetMethod(200, \"/helloworld/helloworld\", MESSAGE);\n+        } finally {\n+            server.stopServer(\"CWMOT0010W\"); //CWMOT0010W: OpenTracing cannot track JAX-RS requests because an OpentracingTracerFactory class was not provided or client libraries for tracing backend are not in the class path.\n+        }\n+    }\n+\n+    /**\n+     * microProfile-4.0 plus jakartaee-9.0\n+     * Should fail because microProfile-4.0 is not compatible with jakartaee-9.0\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.LITE)\n+    @ExpectedFFDC(\"java.lang.IllegalArgumentException\")\n+    public void testMP40andEE9() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40andEE9.xml\");\n+            server.startServerAndValidate(true, //preClean\n+                                          false, //cleanStart\n+                                          false, //validateApps\n+                                          false, //expectStartFailure\n+                                          false); //validateTimedExit\n+        } finally {\n+            server.stopServer(\"CWWKF0033E: The singleton features .* and .* cannot be loaded at the same time\",\n+                              \"CWWKF0044E: The .* and .* features cannot be loaded at the same time\",\n+                              \"CWWKF0046W: The configuration includes an incompatible combination of features\");\n+        }\n+    }\n+\n+    /**\n+     * microProfile-4.0 plus microProfile-3.3\n+     * Should fail because microProfile-4.0 can not be started at the same time as microProfile-3.3\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.FULL)\n+    @ExpectedFFDC(\"java.lang.IllegalArgumentException\")\n+    public void testMP40andMP33() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40andMP33.xml\");\n+            server.startServerAndValidate(true, //preClean\n+                                          false, //cleanStart\n+                                          false, //validateApps\n+                                          false, //expectStartFailure\n+                                          false); //validateTimedExit\n+        } finally {\n+            server.stopServer(\"CWWKF0033E: The singleton features microProfile-3.3 and microProfile-4.0 cannot be loaded at the same time.\",\n+                              \"CWWKF0046W: The configuration includes an incompatible combination of features\");\n+        }\n+    }\n+\n+    /**\n+     * microProfile-4.0 plus mpConfig-1.4\n+     * Should fail because microProfile-4.0 can not be started at the same time as mpConfig-1.4\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.FULL)\n+    @ExpectedFFDC(\"java.lang.IllegalArgumentException\")\n+    public void testMP40andMPConfig14() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40andMPConfig14.xml\");\n+            server.startServerAndValidate(true, //preClean\n+                                          false, //cleanStart\n+                                          false, //validateApps\n+                                          false, //expectStartFailure\n+                                          false); //validateTimedExit\n+        } finally {\n+            server.stopServer(\"CWWKF0033E: The singleton features mpConfig-1.4 and mpConfig-2.0 cannot be loaded at the same time.\",\n+                              \"CWWKF0046W: The configuration includes an incompatible combination of features\");\n+        }\n+    }\n+\n+    /**\n+     * microProfile-4.0 plus mpContextPropagation-1.0\n+     * Should fail because microProfile-4.0 can not be started at the same time as mpContextPropagation-1.0\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.LITE)\n+    @ExpectedFFDC(\"java.lang.IllegalArgumentException\")\n+    public void testMP40andCtxPropagtion10() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40andMPCtx10.xml\");\n+            server.startServerAndValidate(true, //preClean\n+                                          false, //cleanStart\n+                                          false, //validateApps\n+                                          false, //expectStartFailure\n+                                          false); //validateTimedExit\n+        } finally {\n+            server.stopServer(\"CWWKF0033E: The singleton features io.openliberty.mpCompatible-0.0 and io.openliberty.mpCompatible-4.0 cannot be loaded at the same time.\",\n+                              \"CWWKF0046W: The configuration includes an incompatible combination of features\");\n+        }\n+    }\n+\n+    /**\n+     * microProfile-4.0 plus mpContextPropagation-1.1\n+     * Should always pass\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.LITE)\n+    public void testMP40andCtxPropagtion11() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "206125f728080f5c2fccf8d800d4b17a86f9ac6c"}, "originalPosition": 246}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2NTA2NzI3", "url": "https://github.com/OpenLiberty/open-liberty/pull/15301#pullrequestreview-566506727", "createdAt": "2021-01-12T17:29:41Z", "commit": {"oid": "206125f728080f5c2fccf8d800d4b17a86f9ac6c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNzoyOTo0MVrOISMb9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNzoyOTo0MVrOISMb9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0OTA0NA==", "bodyText": "very odd format.", "url": "https://github.com/OpenLiberty/open-liberty/pull/15301#discussion_r555949044", "createdAt": "2021-01-12T17:29:41Z", "author": {"login": "Emily-Jiang"}, "path": "dev/io.openliberty.microprofile.internal_fat/fat/src/io/openliberty/microprofile/internal/test/suite/MPCompatibleTest.java", "diffHunk": "@@ -0,0 +1,346 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.microprofile.internal.test.suite;\n+\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.BeforeClass;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.PropertiesAsset;\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.ShrinkHelper.DeployOptions;\n+\n+import componenttest.annotation.ExpectedFFDC;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import io.openliberty.microprofile.internal.test.helloworld.HelloWorldApplication;\n+import io.openliberty.microprofile.internal.test.helloworld.config.ConfiguredHelloWorldBean;\n+\n+@RunWith(FATRunner.class)\n+public class MPCompatibleTest {\n+\n+    private static final String SERVER_NAME = \"MPCompatibleServer\";\n+\n+    @Server(SERVER_NAME)\n+    public static LibertyServer server;\n+\n+    private static final String APP_NAME = \"helloworld\";\n+\n+    private static final String MESSAGE = \"Hello World!\";\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+\n+        PropertiesAsset config = new PropertiesAsset().addProperty(\"message\", MESSAGE);\n+\n+        WebArchive war = ShrinkWrap.create(WebArchive.class, APP_NAME + \".war\")\n+                                   .addPackage(HelloWorldApplication.class.getPackage())\n+                                   .addPackage(ConfiguredHelloWorldBean.class.getPackage())\n+                                   .addAsResource(config, \"META-INF/microprofile-config.properties\");\n+\n+        ShrinkHelper.exportDropinAppToServer(server, war, DeployOptions.SERVER_ONLY);\n+    }\n+\n+    /**\n+     * Just microProfile-4.0 ... Should always pass, a sanity check\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.LITE)\n+    public void testMicroProfile40() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40.xml\");\n+            server.startServer();\n+            runGetMethod(200, \"/helloworld/helloworld\", MESSAGE);\n+        } finally {\n+            server.stopServer(\"CWMOT0010W\"); //CWMOT0010W: OpenTracing cannot track JAX-RS requests because an OpentracingTracerFactory class was not provided or client libraries for tracing backend are not in the class path.\n+        }\n+    }\n+\n+    /**\n+     * microProfile-4.0 plus concurrent-1.0\n+     * Should pass despite the fact the concurrent-1.0 pulls in the MP Context Propagation 1.0 API feature.\n+     * The MP Context Propagation 1.0 impl should not work with MP 4.0 but pulling in just the API should still be OK.\n+     * TBH this isn't ideal but is just the way the concurrent impl has been designed.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.FULL)\n+    public void testMP40andConcurrent10() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40andConcurrent10.xml\");\n+            server.startServer();\n+            runGetMethod(200, \"/helloworld/helloworld\", MESSAGE);\n+        } finally {\n+            server.stopServer(\"CWMOT0010W\"); //CWMOT0010W: OpenTracing cannot track JAX-RS requests because an OpentracingTracerFactory class was not provided or client libraries for tracing backend are not in the class path.\n+        }\n+    }\n+\n+    /**\n+     * microProfile-4.0 plus concurrent-2.0\n+     * Should fail because concurrent-2.0 depends on eeCompatible-9.0.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.FULL)\n+    @ExpectedFFDC(\"java.lang.IllegalArgumentException\")\n+    public void testMP40andConcurrent20() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40andConcurrent20.xml\");\n+            server.startServerAndValidate(true, //preClean\n+                                          false, //cleanStart\n+                                          false, //validateApps\n+                                          false, //expectStartFailure\n+                                          false); //validateTimedExit\n+        } finally {\n+            server.stopServer(\"CWWKF0044E: The concurrent-2.0 and .* features cannot be loaded at the same time\",\n+                              \"CWWKF0046W: The configuration includes an incompatible combination of features\");\n+        }\n+    }\n+\n+    /**\n+     * microProfile-4.0 plus jakartaee-8.0\n+     * Should always pass\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.FULL)\n+    public void testMP40andEE8() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40andEE8.xml\");\n+            server.startServer();\n+            runGetMethod(200, \"/helloworld/helloworld\", MESSAGE);\n+        } finally {\n+            server.stopServer(\"CWMOT0010W\"); //CWMOT0010W: OpenTracing cannot track JAX-RS requests because an OpentracingTracerFactory class was not provided or client libraries for tracing backend are not in the class path.\n+        }\n+    }\n+\n+    /**\n+     * microProfile-4.0 plus jakartaee-9.0\n+     * Should fail because microProfile-4.0 is not compatible with jakartaee-9.0\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.LITE)\n+    @ExpectedFFDC(\"java.lang.IllegalArgumentException\")\n+    public void testMP40andEE9() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40andEE9.xml\");\n+            server.startServerAndValidate(true, //preClean\n+                                          false, //cleanStart\n+                                          false, //validateApps\n+                                          false, //expectStartFailure\n+                                          false); //validateTimedExit\n+        } finally {\n+            server.stopServer(\"CWWKF0033E: The singleton features .* and .* cannot be loaded at the same time\",\n+                              \"CWWKF0044E: The .* and .* features cannot be loaded at the same time\",\n+                              \"CWWKF0046W: The configuration includes an incompatible combination of features\");\n+        }\n+    }\n+\n+    /**\n+     * microProfile-4.0 plus microProfile-3.3\n+     * Should fail because microProfile-4.0 can not be started at the same time as microProfile-3.3\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.FULL)\n+    @ExpectedFFDC(\"java.lang.IllegalArgumentException\")\n+    public void testMP40andMP33() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40andMP33.xml\");\n+            server.startServerAndValidate(true, //preClean\n+                                          false, //cleanStart\n+                                          false, //validateApps\n+                                          false, //expectStartFailure\n+                                          false); //validateTimedExit\n+        } finally {\n+            server.stopServer(\"CWWKF0033E: The singleton features microProfile-3.3 and microProfile-4.0 cannot be loaded at the same time.\",\n+                              \"CWWKF0046W: The configuration includes an incompatible combination of features\");\n+        }\n+    }\n+\n+    /**\n+     * microProfile-4.0 plus mpConfig-1.4\n+     * Should fail because microProfile-4.0 can not be started at the same time as mpConfig-1.4\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.FULL)\n+    @ExpectedFFDC(\"java.lang.IllegalArgumentException\")\n+    public void testMP40andMPConfig14() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40andMPConfig14.xml\");\n+            server.startServerAndValidate(true, //preClean\n+                                          false, //cleanStart\n+                                          false, //validateApps\n+                                          false, //expectStartFailure\n+                                          false); //validateTimedExit\n+        } finally {\n+            server.stopServer(\"CWWKF0033E: The singleton features mpConfig-1.4 and mpConfig-2.0 cannot be loaded at the same time.\",\n+                              \"CWWKF0046W: The configuration includes an incompatible combination of features\");\n+        }\n+    }\n+\n+    /**\n+     * microProfile-4.0 plus mpContextPropagation-1.0\n+     * Should fail because microProfile-4.0 can not be started at the same time as mpContextPropagation-1.0\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.LITE)\n+    @ExpectedFFDC(\"java.lang.IllegalArgumentException\")\n+    public void testMP40andCtxPropagtion10() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40andMPCtx10.xml\");\n+            server.startServerAndValidate(true, //preClean\n+                                          false, //cleanStart\n+                                          false, //validateApps\n+                                          false, //expectStartFailure\n+                                          false); //validateTimedExit\n+        } finally {\n+            server.stopServer(\"CWWKF0033E: The singleton features io.openliberty.mpCompatible-0.0 and io.openliberty.mpCompatible-4.0 cannot be loaded at the same time.\",\n+                              \"CWWKF0046W: The configuration includes an incompatible combination of features\");\n+        }\n+    }\n+\n+    /**\n+     * microProfile-4.0 plus mpContextPropagation-1.1\n+     * Should always pass\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.LITE)\n+    public void testMP40andCtxPropagtion11() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40andMPCtx11.xml\");\n+            server.startServer();\n+            runGetMethod(200, \"/helloworld/helloworld\", MESSAGE);\n+        } finally {\n+            server.stopServer(\"CWMOT0010W\"); //CWMOT0010W: OpenTracing cannot track JAX-RS requests because an OpentracingTracerFactory class was not provided or client libraries for tracing backend are not in the class path.\n+        }\n+    }\n+\n+    /**\n+     * microProfile-3.3 plus mpGraphQL-1.0 and mpReactiveMessaging-1.0\n+     * Should pass.\n+     *\n+     * mpGraphQL-1.0 currently produces some warnings that need to be investigated\n+     * https://github.com/OpenLiberty/open-liberty/issues/15496\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.FULL)\n+    @Ignore //TODO: re-enable when issue 15496 has been resolved\n+    public void testMP33plusStandalone() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP33plusStandalone.xml\");\n+            server.startServer();\n+            runGetMethod(200, \"/helloworld/helloworld\", MESSAGE);\n+        } finally {\n+            server.stopServer(\"CWMOT0010W\"); //CWMOT0010W: OpenTracing cannot track JAX-RS requests because an OpentracingTracerFactory class was not provided or client libraries for tracing backend are not in the class path.\n+        }\n+    }\n+\n+    /**\n+     * microProfile-4.0 plus mpGraphQL-1.0\n+     * mpReactiveMessaging-1.0 should be included once the following feature is completed\n+     * https://github.com/OpenLiberty/open-liberty/issues/15440\n+     *\n+     * mpGraphQL-1.0 currently produces some warnings that need to be investigated\n+     * https://github.com/OpenLiberty/open-liberty/issues/15496\n+     *\n+     * Should pass.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.FULL)\n+    @Ignore //TODO: re-enable when issue 15496 has been resolved\n+    public void testMP40plusStandalone() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40plusStandalone.xml\");\n+            server.startServer();\n+            runGetMethod(200, \"/helloworld/helloworld\", MESSAGE);\n+        } finally {\n+            server.stopServer(\"CWMOT0010W\"); //CWMOT0010W: OpenTracing cannot track JAX-RS requests because an OpentracingTracerFactory class was not provided or client libraries for tracing backend are not in the class path.\n+        }\n+    }\n+\n+    private StringBuilder runGetMethod(int exprc, String requestUri, String testOut) throws IOException {\n+        URL url = new URL(\"http://\" + getHost() + \":\" + getPort() + requestUri);\n+        int retcode;\n+        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+        try {\n+            con.setDoInput(true);\n+            con.setDoOutput(true);\n+            con.setUseCaches(false);\n+            con.setRequestMethod(\"GET\");\n+\n+            retcode = con.getResponseCode();\n+\n+            InputStream is = con.getInputStream();\n+            InputStreamReader isr = new InputStreamReader(is);\n+            BufferedReader br = new BufferedReader(isr);\n+\n+            String sep = System.getProperty(\"line.separator\");\n+            StringBuilder lines = new StringBuilder();\n+            for (String line = br.readLine(); line != null; line = br\n+                                                                     .readLine())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "206125f728080f5c2fccf8d800d4b17a86f9ac6c"}, "originalPosition": 322}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2NTEwMjg1", "url": "https://github.com/OpenLiberty/open-liberty/pull/15301#pullrequestreview-566510285", "createdAt": "2021-01-12T17:33:49Z", "commit": {"oid": "206125f728080f5c2fccf8d800d4b17a86f9ac6c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNzozMzo1MFrOISMmdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNzozMzo1MFrOISMmdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk1MTczMg==", "bodyText": "Do we still need this one? Which tests use it?", "url": "https://github.com/OpenLiberty/open-liberty/pull/15301#discussion_r555951732", "createdAt": "2021-01-12T17:33:50Z", "author": {"login": "Emily-Jiang"}, "path": "dev/io.openliberty.microprofile.internal_fat/publish/servers/MPServer/server.xml", "diffHunk": "@@ -0,0 +1,8 @@\n+<server description=\"Server for testing microProfile\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "206125f728080f5c2fccf8d800d4b17a86f9ac6c"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2NTQwMjA1", "url": "https://github.com/OpenLiberty/open-liberty/pull/15301#pullrequestreview-566540205", "createdAt": "2021-01-12T18:10:27Z", "commit": {"oid": "206125f728080f5c2fccf8d800d4b17a86f9ac6c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxODoxMDoyN1rOISOAYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxODoxMDoyN1rOISOAYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk3NDc1NA==", "bodyText": "Might be that this server.xml isn't used any more?", "url": "https://github.com/OpenLiberty/open-liberty/pull/15301#discussion_r555974754", "createdAt": "2021-01-12T18:10:27Z", "author": {"login": "tevans78"}, "path": "dev/io.openliberty.microprofile.internal_fat/publish/servers/MPCompatibleServer/server.xml", "diffHunk": "@@ -0,0 +1,8 @@\n+<server description=\"Server for testing microProfile\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "206125f728080f5c2fccf8d800d4b17a86f9ac6c"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2NzI2MTM1", "url": "https://github.com/OpenLiberty/open-liberty/pull/15301#pullrequestreview-566726135", "createdAt": "2021-01-12T21:44:14Z", "commit": {"oid": "206125f728080f5c2fccf8d800d4b17a86f9ac6c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQyMTo0NDoxNVrOISWk9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQyMTo0NDoxNVrOISWk9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjExNTE4OQ==", "bodyText": "Should you enable this test but add the server error ignore and then add a comment to that issue? When the issue is fixed, the warning can be removed.", "url": "https://github.com/OpenLiberty/open-liberty/pull/15301#discussion_r556115189", "createdAt": "2021-01-12T21:44:15Z", "author": {"login": "Emily-Jiang"}, "path": "dev/io.openliberty.microprofile.internal_fat/fat/src/io/openliberty/microprofile/internal/test/suite/MPCompatibleTest.java", "diffHunk": "@@ -0,0 +1,346 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.microprofile.internal.test.suite;\n+\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.BeforeClass;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.PropertiesAsset;\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.ShrinkHelper.DeployOptions;\n+\n+import componenttest.annotation.ExpectedFFDC;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import io.openliberty.microprofile.internal.test.helloworld.HelloWorldApplication;\n+import io.openliberty.microprofile.internal.test.helloworld.config.ConfiguredHelloWorldBean;\n+\n+@RunWith(FATRunner.class)\n+public class MPCompatibleTest {\n+\n+    private static final String SERVER_NAME = \"MPCompatibleServer\";\n+\n+    @Server(SERVER_NAME)\n+    public static LibertyServer server;\n+\n+    private static final String APP_NAME = \"helloworld\";\n+\n+    private static final String MESSAGE = \"Hello World!\";\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+\n+        PropertiesAsset config = new PropertiesAsset().addProperty(\"message\", MESSAGE);\n+\n+        WebArchive war = ShrinkWrap.create(WebArchive.class, APP_NAME + \".war\")\n+                                   .addPackage(HelloWorldApplication.class.getPackage())\n+                                   .addPackage(ConfiguredHelloWorldBean.class.getPackage())\n+                                   .addAsResource(config, \"META-INF/microprofile-config.properties\");\n+\n+        ShrinkHelper.exportDropinAppToServer(server, war, DeployOptions.SERVER_ONLY);\n+    }\n+\n+    /**\n+     * Just microProfile-4.0 ... Should always pass, a sanity check\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.LITE)\n+    public void testMicroProfile40() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40.xml\");\n+            server.startServer();\n+            runGetMethod(200, \"/helloworld/helloworld\", MESSAGE);\n+        } finally {\n+            server.stopServer(\"CWMOT0010W\"); //CWMOT0010W: OpenTracing cannot track JAX-RS requests because an OpentracingTracerFactory class was not provided or client libraries for tracing backend are not in the class path.\n+        }\n+    }\n+\n+    /**\n+     * microProfile-4.0 plus concurrent-1.0\n+     * Should pass despite the fact the concurrent-1.0 pulls in the MP Context Propagation 1.0 API feature.\n+     * The MP Context Propagation 1.0 impl should not work with MP 4.0 but pulling in just the API should still be OK.\n+     * TBH this isn't ideal but is just the way the concurrent impl has been designed.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.FULL)\n+    public void testMP40andConcurrent10() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40andConcurrent10.xml\");\n+            server.startServer();\n+            runGetMethod(200, \"/helloworld/helloworld\", MESSAGE);\n+        } finally {\n+            server.stopServer(\"CWMOT0010W\"); //CWMOT0010W: OpenTracing cannot track JAX-RS requests because an OpentracingTracerFactory class was not provided or client libraries for tracing backend are not in the class path.\n+        }\n+    }\n+\n+    /**\n+     * microProfile-4.0 plus concurrent-2.0\n+     * Should fail because concurrent-2.0 depends on eeCompatible-9.0.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.FULL)\n+    @ExpectedFFDC(\"java.lang.IllegalArgumentException\")\n+    public void testMP40andConcurrent20() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40andConcurrent20.xml\");\n+            server.startServerAndValidate(true, //preClean\n+                                          false, //cleanStart\n+                                          false, //validateApps\n+                                          false, //expectStartFailure\n+                                          false); //validateTimedExit\n+        } finally {\n+            server.stopServer(\"CWWKF0044E: The concurrent-2.0 and .* features cannot be loaded at the same time\",\n+                              \"CWWKF0046W: The configuration includes an incompatible combination of features\");\n+        }\n+    }\n+\n+    /**\n+     * microProfile-4.0 plus jakartaee-8.0\n+     * Should always pass\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.FULL)\n+    public void testMP40andEE8() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40andEE8.xml\");\n+            server.startServer();\n+            runGetMethod(200, \"/helloworld/helloworld\", MESSAGE);\n+        } finally {\n+            server.stopServer(\"CWMOT0010W\"); //CWMOT0010W: OpenTracing cannot track JAX-RS requests because an OpentracingTracerFactory class was not provided or client libraries for tracing backend are not in the class path.\n+        }\n+    }\n+\n+    /**\n+     * microProfile-4.0 plus jakartaee-9.0\n+     * Should fail because microProfile-4.0 is not compatible with jakartaee-9.0\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.LITE)\n+    @ExpectedFFDC(\"java.lang.IllegalArgumentException\")\n+    public void testMP40andEE9() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40andEE9.xml\");\n+            server.startServerAndValidate(true, //preClean\n+                                          false, //cleanStart\n+                                          false, //validateApps\n+                                          false, //expectStartFailure\n+                                          false); //validateTimedExit\n+        } finally {\n+            server.stopServer(\"CWWKF0033E: The singleton features .* and .* cannot be loaded at the same time\",\n+                              \"CWWKF0044E: The .* and .* features cannot be loaded at the same time\",\n+                              \"CWWKF0046W: The configuration includes an incompatible combination of features\");\n+        }\n+    }\n+\n+    /**\n+     * microProfile-4.0 plus microProfile-3.3\n+     * Should fail because microProfile-4.0 can not be started at the same time as microProfile-3.3\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.FULL)\n+    @ExpectedFFDC(\"java.lang.IllegalArgumentException\")\n+    public void testMP40andMP33() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40andMP33.xml\");\n+            server.startServerAndValidate(true, //preClean\n+                                          false, //cleanStart\n+                                          false, //validateApps\n+                                          false, //expectStartFailure\n+                                          false); //validateTimedExit\n+        } finally {\n+            server.stopServer(\"CWWKF0033E: The singleton features microProfile-3.3 and microProfile-4.0 cannot be loaded at the same time.\",\n+                              \"CWWKF0046W: The configuration includes an incompatible combination of features\");\n+        }\n+    }\n+\n+    /**\n+     * microProfile-4.0 plus mpConfig-1.4\n+     * Should fail because microProfile-4.0 can not be started at the same time as mpConfig-1.4\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.FULL)\n+    @ExpectedFFDC(\"java.lang.IllegalArgumentException\")\n+    public void testMP40andMPConfig14() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40andMPConfig14.xml\");\n+            server.startServerAndValidate(true, //preClean\n+                                          false, //cleanStart\n+                                          false, //validateApps\n+                                          false, //expectStartFailure\n+                                          false); //validateTimedExit\n+        } finally {\n+            server.stopServer(\"CWWKF0033E: The singleton features mpConfig-1.4 and mpConfig-2.0 cannot be loaded at the same time.\",\n+                              \"CWWKF0046W: The configuration includes an incompatible combination of features\");\n+        }\n+    }\n+\n+    /**\n+     * microProfile-4.0 plus mpContextPropagation-1.0\n+     * Should fail because microProfile-4.0 can not be started at the same time as mpContextPropagation-1.0\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.LITE)\n+    @ExpectedFFDC(\"java.lang.IllegalArgumentException\")\n+    public void testMP40andCtxPropagtion10() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40andMPCtx10.xml\");\n+            server.startServerAndValidate(true, //preClean\n+                                          false, //cleanStart\n+                                          false, //validateApps\n+                                          false, //expectStartFailure\n+                                          false); //validateTimedExit\n+        } finally {\n+            server.stopServer(\"CWWKF0033E: The singleton features io.openliberty.mpCompatible-0.0 and io.openliberty.mpCompatible-4.0 cannot be loaded at the same time.\",\n+                              \"CWWKF0046W: The configuration includes an incompatible combination of features\");\n+        }\n+    }\n+\n+    /**\n+     * microProfile-4.0 plus mpContextPropagation-1.1\n+     * Should always pass\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.LITE)\n+    public void testMP40andCtxPropagtion11() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP40andMPCtx11.xml\");\n+            server.startServer();\n+            runGetMethod(200, \"/helloworld/helloworld\", MESSAGE);\n+        } finally {\n+            server.stopServer(\"CWMOT0010W\"); //CWMOT0010W: OpenTracing cannot track JAX-RS requests because an OpentracingTracerFactory class was not provided or client libraries for tracing backend are not in the class path.\n+        }\n+    }\n+\n+    /**\n+     * microProfile-3.3 plus mpGraphQL-1.0 and mpReactiveMessaging-1.0\n+     * Should pass.\n+     *\n+     * mpGraphQL-1.0 currently produces some warnings that need to be investigated\n+     * https://github.com/OpenLiberty/open-liberty/issues/15496\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.FULL)\n+    @Ignore //TODO: re-enable when issue 15496 has been resolved\n+    public void testMP33plusStandalone() throws Exception {\n+        try {\n+            server.setServerConfigurationFromFilePath(\"MP33plusStandalone.xml\");\n+            server.startServer();\n+            runGetMethod(200, \"/helloworld/helloworld\", MESSAGE);\n+        } finally {\n+            server.stopServer(\"CWMOT0010W\"); //CWMOT0010W: OpenTracing cannot track JAX-RS requests because an OpentracingTracerFactory class was not provided or client libraries for tracing backend are not in the class path.\n+        }\n+    }\n+\n+    /**\n+     * microProfile-4.0 plus mpGraphQL-1.0\n+     * mpReactiveMessaging-1.0 should be included once the following feature is completed\n+     * https://github.com/OpenLiberty/open-liberty/issues/15440\n+     *\n+     * mpGraphQL-1.0 currently produces some warnings that need to be investigated\n+     * https://github.com/OpenLiberty/open-liberty/issues/15496\n+     *\n+     * Should pass.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    @Mode(TestMode.FULL)\n+    @Ignore //TODO: re-enable when issue 15496 has been resolved", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "206125f728080f5c2fccf8d800d4b17a86f9ac6c"}, "originalPosition": 292}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a46132376df63c0226fb3b17e05c1ff2ff4fe36", "author": {"user": {"login": "tevans78", "name": "Tom Evans"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/4a46132376df63c0226fb3b17e05c1ff2ff4fe36", "committedDate": "2021-01-15T15:31:15Z", "message": "Consolidate MicroProfile FAT tests into one project and add some MP Compatible tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cd0b11e0058b7edd095cd6c9593fc85a2fb3066", "author": {"user": {"login": "tevans78", "name": "Tom Evans"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/6cd0b11e0058b7edd095cd6c9593fc85a2fb3066", "committedDate": "2021-01-15T15:31:15Z", "message": "Small GraphQL fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9abb2c8fb1dec8edca82a952bb9d4956fb585d3f", "author": {"user": {"login": "tevans78", "name": "Tom Evans"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/9abb2c8fb1dec8edca82a952bb9d4956fb585d3f", "committedDate": "2021-01-15T15:31:16Z", "message": "Ensure correct tests are enabled/disabled"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "206125f728080f5c2fccf8d800d4b17a86f9ac6c", "author": {"user": {"login": "tevans78", "name": "Tom Evans"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/206125f728080f5c2fccf8d800d4b17a86f9ac6c", "committedDate": "2021-01-12T15:02:48Z", "message": "Ensure correct tests are enabled/disabled"}, "afterCommit": {"oid": "be35df0a3bfbffee1c26a6421275baa70f2061ae", "author": {"user": {"login": "tevans78", "name": "Tom Evans"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/be35df0a3bfbffee1c26a6421275baa70f2061ae", "committedDate": "2021-01-15T15:31:16Z", "message": "Refactor IndexInitializer to ensure FFDC is not output from IOException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5759214a10c8e24a176665609a7d0916058501e", "author": {"user": {"login": "tevans78", "name": "Tom Evans"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/a5759214a10c8e24a176665609a7d0916058501e", "committedDate": "2021-01-15T15:34:39Z", "message": "Refactor IndexInitializer to ensure FFDC is not output from IOException"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "be35df0a3bfbffee1c26a6421275baa70f2061ae", "author": {"user": {"login": "tevans78", "name": "Tom Evans"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/be35df0a3bfbffee1c26a6421275baa70f2061ae", "committedDate": "2021-01-15T15:31:16Z", "message": "Refactor IndexInitializer to ensure FFDC is not output from IOException"}, "afterCommit": {"oid": "a5759214a10c8e24a176665609a7d0916058501e", "author": {"user": {"login": "tevans78", "name": "Tom Evans"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/a5759214a10c8e24a176665609a7d0916058501e", "committedDate": "2021-01-15T15:34:39Z", "message": "Refactor IndexInitializer to ensure FFDC is not output from IOException"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5MzkwODc4", "url": "https://github.com/OpenLiberty/open-liberty/pull/15301#pullrequestreview-569390878", "createdAt": "2021-01-15T16:04:42Z", "commit": {"oid": "a5759214a10c8e24a176665609a7d0916058501e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxNjowNDo0MlrOIUiWSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxNjowNDo0MlrOIUiWSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQwNTE5Mg==", "bodyText": "I think we still want the @FFDCIgnore(IOException.class) here so that FFDC is not logged here too.  Otherwise, I think these changes look good.", "url": "https://github.com/OpenLiberty/open-liberty/pull/15301#discussion_r558405192", "createdAt": "2021-01-15T16:04:42Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.io.smallrye.graphql/src/io/smallrye/graphql/servlet/IndexInitializer.java", "diffHunk": "@@ -35,7 +37,7 @@\n  */\n public class IndexInitializer {\n \n-    @FFDCIgnore(IOException.class)\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5759214a10c8e24a176665609a7d0916058501e"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5NDAyMzM1", "url": "https://github.com/OpenLiberty/open-liberty/pull/15301#pullrequestreview-569402335", "createdAt": "2021-01-15T16:18:23Z", "commit": {"oid": "a5759214a10c8e24a176665609a7d0916058501e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5NDU5NTE0", "url": "https://github.com/OpenLiberty/open-liberty/pull/15301#pullrequestreview-569459514", "createdAt": "2021-01-15T17:30:53Z", "commit": {"oid": "a5759214a10c8e24a176665609a7d0916058501e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2625, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}