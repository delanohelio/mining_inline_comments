{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3OTk5NTcy", "number": 10990, "title": "jaxrs - return a HTTP 400 instead of 500 when a POST request contains invalid json", "bodyText": "#10986", "createdAt": "2020-02-20T22:07:45Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/10990", "merged": true, "mergeCommit": {"oid": "584f5a7d1543c21a13c1d35becdb1ab3315937c2"}, "closed": true, "closedAt": "2020-03-20T15:37:31Z", "author": {"login": "WhiteCat22"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcINFXPABqjMwNzUzODQ2NjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKdK92gFqTM2OTEwODQxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "008899fbce0061d1e1405bd292d5e26b1e68734b", "author": {"user": {"login": "WhiteCat22", "name": "Adam Anderson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/008899fbce0061d1e1405bd292d5e26b1e68734b", "committedDate": "2020-02-20T22:05:31Z", "message": "jaxrs - return a HTTP 400 instead of 500 when a POST request contains invalid json"}, "afterCommit": {"oid": "24e1593335862bcc8e20864bb0f2d89572127d95", "author": {"user": {"login": "WhiteCat22", "name": "Adam Anderson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/24e1593335862bcc8e20864bb0f2d89572127d95", "committedDate": "2020-02-26T20:51:47Z", "message": "jaxrs - return a HTTP 400 instead of 500 when a POST request contains invalid json"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "24e1593335862bcc8e20864bb0f2d89572127d95", "author": {"user": {"login": "WhiteCat22", "name": "Adam Anderson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/24e1593335862bcc8e20864bb0f2d89572127d95", "committedDate": "2020-02-26T20:51:47Z", "message": "jaxrs - return a HTTP 400 instead of 500 when a POST request contains invalid json"}, "afterCommit": {"oid": "d1da3adaa1a553049a4b5eb856d6d676e85ce51b", "author": {"user": {"login": "WhiteCat22", "name": "Adam Anderson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/d1da3adaa1a553049a4b5eb856d6d676e85ce51b", "committedDate": "2020-02-28T17:04:07Z", "message": "create a jaxrs FAT test to test invalid JSON"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d1da3adaa1a553049a4b5eb856d6d676e85ce51b", "author": {"user": {"login": "WhiteCat22", "name": "Adam Anderson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/d1da3adaa1a553049a4b5eb856d6d676e85ce51b", "committedDate": "2020-02-28T17:04:07Z", "message": "create a jaxrs FAT test to test invalid JSON"}, "afterCommit": {"oid": "62740f9245baa13eabe3be15286ece304ef53553", "author": {"user": {"login": "WhiteCat22", "name": "Adam Anderson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/62740f9245baa13eabe3be15286ece304ef53553", "committedDate": "2020-03-02T16:59:12Z", "message": "create jaxrs FAT test to test invalid JSON"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "62740f9245baa13eabe3be15286ece304ef53553", "author": {"user": {"login": "WhiteCat22", "name": "Adam Anderson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/62740f9245baa13eabe3be15286ece304ef53553", "committedDate": "2020-03-02T16:59:12Z", "message": "create jaxrs FAT test to test invalid JSON"}, "afterCommit": {"oid": "295d9edbd971ca98876295f97dae97100715252d", "author": {"user": {"login": "WhiteCat22", "name": "Adam Anderson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/295d9edbd971ca98876295f97dae97100715252d", "committedDate": "2020-03-02T17:07:47Z", "message": "10986 - test invalid JSON in a jaxrs request"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MzgwMjky", "url": "https://github.com/OpenLiberty/open-liberty/pull/10990#pullrequestreview-367380292", "createdAt": "2020-03-02T17:20:53Z", "commit": {"oid": "295d9edbd971ca98876295f97dae97100715252d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzoyMDo1M1rOFwoIZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzozMTowMVrOFwodyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUzMzQ3Ng==", "bodyText": "What an oddly-specific vehicle... ;-)", "url": "https://github.com/OpenLiberty/open-liberty/pull/10990#discussion_r386533476", "createdAt": "2020-03-02T17:20:53Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0_fat/test-applications/simpleJson/src/com/ibm/ws/jaxrs/fat/simpleJson/JaxrsJsonClientTestServlet.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs.fat.simpleJson;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.client.ResponseProcessingException;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.DefaultHttpClient;\n+import org.junit.After;\n+import org.junit.Test;\n+\n+import componenttest.app.FATServlet;\n+\n+@WebServlet(urlPatterns = \"/JaxrsJsonClientTestServlet\")\n+public class JaxrsJsonClientTestServlet extends FATServlet {\n+\n+    private static final long serialVersionUID = 4563445389586844836L;\n+\n+    final static String URI_CONTEXT_ROOT = \"http://localhost:\" + Integer.getInteger(\"bvt.prop.HTTP_default\") + \"/simpleJson/\";\n+\n+    private static Client client;\n+\n+    // needed to make requests with invalid json to the server\n+    private static HttpClient httpClient;\n+\n+    @Override\n+    public void init() throws ServletException {\n+        client = ClientBuilder.newClient();\n+//      httpClient = new HttpClientBuilder.create().build();\n+        httpClient = new DefaultHttpClient();\n+    }\n+\n+    @After\n+    private void teardown() {\n+        client.close();\n+        httpClient.getConnectionManager().shutdown();\n+    }\n+\n+    @Test\n+    public void simpleTest() throws Exception {\n+        Car corvette = new Car();\n+        corvette.color = \"red\";\n+        corvette.make = \"Chevrolet\";\n+        corvette.model = \"Corvette\";\n+        corvette.year = 2014;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295d9edbd971ca98876295f97dae97100715252d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUzNDM4Mw==", "bodyText": "You could remove this and just call fail() in the try block after response.readEntity(Foo.class);", "url": "https://github.com/OpenLiberty/open-liberty/pull/10990#discussion_r386534383", "createdAt": "2020-03-02T17:22:33Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0_fat/test-applications/simpleJson/src/com/ibm/ws/jaxrs/fat/simpleJson/JaxrsJsonClientTestServlet.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs.fat.simpleJson;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.client.ResponseProcessingException;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.DefaultHttpClient;\n+import org.junit.After;\n+import org.junit.Test;\n+\n+import componenttest.app.FATServlet;\n+\n+@WebServlet(urlPatterns = \"/JaxrsJsonClientTestServlet\")\n+public class JaxrsJsonClientTestServlet extends FATServlet {\n+\n+    private static final long serialVersionUID = 4563445389586844836L;\n+\n+    final static String URI_CONTEXT_ROOT = \"http://localhost:\" + Integer.getInteger(\"bvt.prop.HTTP_default\") + \"/simpleJson/\";\n+\n+    private static Client client;\n+\n+    // needed to make requests with invalid json to the server\n+    private static HttpClient httpClient;\n+\n+    @Override\n+    public void init() throws ServletException {\n+        client = ClientBuilder.newClient();\n+//      httpClient = new HttpClientBuilder.create().build();\n+        httpClient = new DefaultHttpClient();\n+    }\n+\n+    @After\n+    private void teardown() {\n+        client.close();\n+        httpClient.getConnectionManager().shutdown();\n+    }\n+\n+    @Test\n+    public void simpleTest() throws Exception {\n+        Car corvette = new Car();\n+        corvette.color = \"red\";\n+        corvette.make = \"Chevrolet\";\n+        corvette.model = \"Corvette\";\n+        corvette.year = 2014;\n+\n+        Response response = client.target(URI_CONTEXT_ROOT)\n+                        .path(\"simpleresource/post\")\n+                        .request(MediaType.APPLICATION_JSON_TYPE)\n+                        .post(Entity.json(corvette));\n+        assertEquals(200, response.getStatus());\n+        String actual = response.readEntity(String.class);\n+\n+        assertEquals(\"2014 Chevrolet Corvette\", actual);\n+    }\n+\n+    @Test\n+    public void sendInvalidJson() throws Exception {\n+\n+        HttpPost post = new HttpPost(URI_CONTEXT_ROOT + \"simpleresource/post\");\n+        StringEntity entity = new StringEntity(\"invalid\");\n+        post.setEntity(entity);\n+        post.addHeader(\"Content-Type\", \"application/json\");\n+\n+        HttpResponse response = httpClient.execute(post);\n+        assertEquals(400, response.getStatusLine().getStatusCode());\n+    }\n+\n+    @Test\n+    public void recieveInvalidJson() throws Exception {\n+\n+        Response response = client.target(URI_CONTEXT_ROOT)\n+                        .path(\"badsimpleresource/badresponse\")\n+                        .request(MediaType.APPLICATION_JSON_TYPE)\n+                        .get();\n+\n+        boolean exception = false;\n+        try {\n+            response.readEntity(Foo.class);\n+        } catch (ResponseProcessingException e) {\n+            exception = true;\n+        }\n+\n+        if(!exception) {\n+            fail();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295d9edbd971ca98876295f97dae97100715252d"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUzNjk0Ng==", "bodyText": "Why is this necessary?  Something required by Apache HTTP client?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10990#discussion_r386536946", "createdAt": "2020-03-02T17:27:28Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0_fat/publish/servers/com.ibm.ws.jaxrs.fat.simpleJson/server.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<server>\n+    <featureManager>\n+        <feature>componenttest-1.0</feature>\n+        <feature>jaxrs-2.0</feature>\n+    </featureManager>\n+    \n+  \t<include location=\"../fatTestPorts.xml\"/>\n+  \t<javaPermission className=\"java.io.FilePermission\" name=\"ALL FILES\" actions=\"read\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295d9edbd971ca98876295f97dae97100715252d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUzODI0NQ==", "bodyText": "You can just remove the else keyword here.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10990#discussion_r386538245", "createdAt": "2020-03-02T17:29:44Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0.common/src/org/apache/cxf/jaxrs/utils/JAXRSUtils.java", "diffHunk": "@@ -1435,9 +1437,11 @@ public Object run() throws IOException, WebApplicationException {\n                 });\n             } catch (PrivilegedActionException e) {\n                 Exception e1 = e.getException();\n-                if (e1 instanceof IOException)\n+                if (e1 instanceof JsonParseException) {\n+                    throw new BadRequestException(e1);\n+                } else if (e1 instanceof IOException) {\n                     throw (IOException) e1;\n-                else\n+                } else", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295d9edbd971ca98876295f97dae97100715252d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUzODk1NA==", "bodyText": "I'm not sure that we want to put Jackson dependencies in the JAXRSUtils class.  Is it possible to update the Jackson MBR/MBW to throw BadRequestException instead and then leave JAXRSUtils unchanged?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10990#discussion_r386538954", "createdAt": "2020-03-02T17:31:01Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0.common/src/org/apache/cxf/jaxrs/utils/JAXRSUtils.java", "diffHunk": "@@ -141,6 +142,7 @@\n import org.apache.cxf.message.MessageUtils;\n import org.apache.cxf.phase.PhaseInterceptorChain;\n import org.apache.cxf.service.Service;\n+import org.codehaus.jackson.JsonParseException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295d9edbd971ca98876295f97dae97100715252d"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "295d9edbd971ca98876295f97dae97100715252d", "author": {"user": {"login": "WhiteCat22", "name": "Adam Anderson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/295d9edbd971ca98876295f97dae97100715252d", "committedDate": "2020-03-02T17:07:47Z", "message": "10986 - test invalid JSON in a jaxrs request"}, "afterCommit": {"oid": "fa5ca4d35eb0e75b8cbfa8c93662c67440457fcd", "author": {"user": {"login": "WhiteCat22", "name": "Adam Anderson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/fa5ca4d35eb0e75b8cbfa8c93662c67440457fcd", "committedDate": "2020-03-02T22:52:32Z", "message": "10986 - test invalid JSON in a jaxrs request"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6b624e581dee5bdae60406a808b5b2e5438ae51", "author": {"user": {"login": "WhiteCat22", "name": "Adam Anderson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/f6b624e581dee5bdae60406a808b5b2e5438ae51", "committedDate": "2020-03-02T23:16:11Z", "message": "10986 - jaxrs requests should return 400 instead of 500 when a POST request contains invalid JSON"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f32e005caffb4fb23c701775e4ee1800bfbf1396", "author": {"user": {"login": "WhiteCat22", "name": "Adam Anderson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/f32e005caffb4fb23c701775e4ee1800bfbf1396", "committedDate": "2020-03-02T23:17:09Z", "message": "10986 - test invalid JSON in a jaxrs request"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa5ca4d35eb0e75b8cbfa8c93662c67440457fcd", "author": {"user": {"login": "WhiteCat22", "name": "Adam Anderson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/fa5ca4d35eb0e75b8cbfa8c93662c67440457fcd", "committedDate": "2020-03-02T22:52:32Z", "message": "10986 - test invalid JSON in a jaxrs request"}, "afterCommit": {"oid": "f32e005caffb4fb23c701775e4ee1800bfbf1396", "author": {"user": {"login": "WhiteCat22", "name": "Adam Anderson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/f32e005caffb4fb23c701775e4ee1800bfbf1396", "committedDate": "2020-03-02T23:17:09Z", "message": "10986 - test invalid JSON in a jaxrs request"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MTA4NDEy", "url": "https://github.com/OpenLiberty/open-liberty/pull/10990#pullrequestreview-369108412", "createdAt": "2020-03-04T20:44:33Z", "commit": {"oid": "f32e005caffb4fb23c701775e4ee1800bfbf1396"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3137, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}