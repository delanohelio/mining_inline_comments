{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NjE3ODcw", "number": 10671, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzoyMToxMVrODcTaLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTozNzowNVrODdIvJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDA0NzE5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jaxrs.2.0.cdi.1.2_fat/fat/src/com/ibm/ws/jaxrs20/cdi12/fat/test/ContextandCDI12Test.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzoyMToxMVrOFkSRlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzoyMToxMVrOFkSRlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5MjQ3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.junit.Assert.assertTrue;\n          \n          \n            \n            import static org.junit.Assert.assertEquals;\n          \n      \n    \n    \n  \n\nThis should make a better failure message if the verifySuccess method fails.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10671#discussion_r373592470", "createdAt": "2020-01-31T17:21:11Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0.cdi.1.2_fat/fat/src/com/ibm/ws/jaxrs20/cdi12/fat/test/ContextandCDI12Test.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs20.cdi12.fat.test;\n+\n+import static org.junit.Assert.assertTrue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7675e56c8f3711d1b3d5874a69626d0adc3dc40"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDA3OTI4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jaxrs.2.0.cdi.1.2_fat/fat/src/com/ibm/ws/jaxrs20/cdi12/fat/test/ContextandCDI12Test.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzozMzo0OFrOFkSlsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzozMzo0OFrOFkSlsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5NzYxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(\"Expect to get CDI test message: \" + message, messages.size() == messageSize);\n          \n          \n            \n                    assertEquals(\"Expect to get CDI init test message: \" + message, messageSize, messages.size());", "url": "https://github.com/OpenLiberty/open-liberty/pull/10671#discussion_r373597616", "createdAt": "2020-01-31T17:33:48Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0.cdi.1.2_fat/fat/src/com/ibm/ws/jaxrs20/cdi12/fat/test/ContextandCDI12Test.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs20.cdi12.fat.test;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+\n+@RunWith(FATRunner.class)\n+public class ContextandCDI12Test extends AbstractTest {\n+\n+    public static final String[] ignore_messages =  new String[] { \"CWWKW1001W\" , \"CWWKW1002W\" , \"CWWKE1102W\", \"CWWKE1106W\" , \"CWWKE1107W\" };\n+\n+    @Server(\"com.ibm.ws.jaxrs20.cdi12.fat.contextandCDI\")\n+    public static LibertyServer server;\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+        appname = \"contextandCDI\";\n+        WebArchive app = ShrinkHelper.defaultDropinApp(server, appname, \"com.ibm.ws.jaxrs20.cdi12.fat.contextandCDI\");\n+//        server.startServer();\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n+        server.stopServer(ignore_messages);\n+    }\n+\n+    @Before\n+    public void preTest() {\n+        serverRef = server;\n+    }\n+\n+    @After\n+    public void afterTest() {\n+        serverRef = null;\n+    }\n+    \n+    \n+    public void verifySuccess(String filterName, int messageSize) throws Exception {\n+        String message = filterName + \"#init: servletContext.getServletContextName contextandCDI\";        \n+        List<String> messages = serverRef.findStringsInLogs(message);\n+        assertTrue(\"Expect to get CDI test message: \" + message, messages.size() == messageSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7675e56c8f3711d1b3d5874a69626d0adc3dc40"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDA4MDg2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jaxrs.2.0.cdi.1.2_fat/fat/src/com/ibm/ws/jaxrs20/cdi12/fat/test/ContextandCDI12Test.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzozNDoyM1rOFkSmqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzozNDoyM1rOFkSmqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5Nzg2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(\"Expect to get CDI test message: \" + message, messages.size() == messageSize); \n          \n          \n            \n                    assertEquals(\"Expect to get CDI request test message: \" + message, messageSize, messages.size());", "url": "https://github.com/OpenLiberty/open-liberty/pull/10671#discussion_r373597866", "createdAt": "2020-01-31T17:34:23Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0.cdi.1.2_fat/fat/src/com/ibm/ws/jaxrs20/cdi12/fat/test/ContextandCDI12Test.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs20.cdi12.fat.test;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+\n+@RunWith(FATRunner.class)\n+public class ContextandCDI12Test extends AbstractTest {\n+\n+    public static final String[] ignore_messages =  new String[] { \"CWWKW1001W\" , \"CWWKW1002W\" , \"CWWKE1102W\", \"CWWKE1106W\" , \"CWWKE1107W\" };\n+\n+    @Server(\"com.ibm.ws.jaxrs20.cdi12.fat.contextandCDI\")\n+    public static LibertyServer server;\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+        appname = \"contextandCDI\";\n+        WebArchive app = ShrinkHelper.defaultDropinApp(server, appname, \"com.ibm.ws.jaxrs20.cdi12.fat.contextandCDI\");\n+//        server.startServer();\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n+        server.stopServer(ignore_messages);\n+    }\n+\n+    @Before\n+    public void preTest() {\n+        serverRef = server;\n+    }\n+\n+    @After\n+    public void afterTest() {\n+        serverRef = null;\n+    }\n+    \n+    \n+    public void verifySuccess(String filterName, int messageSize) throws Exception {\n+        String message = filterName + \"#init: servletContext.getServletContextName contextandCDI\";        \n+        List<String> messages = serverRef.findStringsInLogs(message);\n+        assertTrue(\"Expect to get CDI test message: \" + message, messages.size() == messageSize);\n+        message = filterName + \"#filter#requestContext: servletContext.getServletContextName contextandCDI\";        \n+        messages = serverRef.findStringsInLogs(message);\n+        assertTrue(\"Expect to get CDI test message: \" + message, messages.size() == messageSize); ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7675e56c8f3711d1b3d5874a69626d0adc3dc40"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDA5MDk4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jaxrs.2.0.cdi.1.2_fat/fat/src/com/ibm/ws/jaxrs20/cdi12/fat/test/ContextandCDI12Test.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzozODozMFrOFkStJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzozODozMFrOFkStJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU5OTUyNw==", "bodyText": "These should be put in the @Before (to start the server) and @After (to stop it) methods - both methods might need to throw Exception.  Once in those methods, it will apply to all tests, so you can remove these lines from each test method.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10671#discussion_r373599527", "createdAt": "2020-01-31T17:38:30Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0.cdi.1.2_fat/fat/src/com/ibm/ws/jaxrs20/cdi12/fat/test/ContextandCDI12Test.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs20.cdi12.fat.test;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+\n+@RunWith(FATRunner.class)\n+public class ContextandCDI12Test extends AbstractTest {\n+\n+    public static final String[] ignore_messages =  new String[] { \"CWWKW1001W\" , \"CWWKW1002W\" , \"CWWKE1102W\", \"CWWKE1106W\" , \"CWWKE1107W\" };\n+\n+    @Server(\"com.ibm.ws.jaxrs20.cdi12.fat.contextandCDI\")\n+    public static LibertyServer server;\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+        appname = \"contextandCDI\";\n+        WebArchive app = ShrinkHelper.defaultDropinApp(server, appname, \"com.ibm.ws.jaxrs20.cdi12.fat.contextandCDI\");\n+//        server.startServer();\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n+        server.stopServer(ignore_messages);\n+    }\n+\n+    @Before\n+    public void preTest() {\n+        serverRef = server;\n+    }\n+\n+    @After\n+    public void afterTest() {\n+        serverRef = null;\n+    }\n+    \n+    \n+    public void verifySuccess(String filterName, int messageSize) throws Exception {\n+        String message = filterName + \"#init: servletContext.getServletContextName contextandCDI\";        \n+        List<String> messages = serverRef.findStringsInLogs(message);\n+        assertTrue(\"Expect to get CDI test message: \" + message, messages.size() == messageSize);\n+        message = filterName + \"#filter#requestContext: servletContext.getServletContextName contextandCDI\";        \n+        messages = serverRef.findStringsInLogs(message);\n+        assertTrue(\"Expect to get CDI test message: \" + message, messages.size() == messageSize); \n+    }\n+\n+    @Test\n+    public void testContextandCDIResource1() throws Exception {\n+        if (server.isStarted()) {\n+            server.stopServer(ignore_messages); \n+        }        \n+        server.startServer(true);        ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7675e56c8f3711d1b3d5874a69626d0adc3dc40"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDEwNTE5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jaxrs.2.0.cdi.1.2_fat/test-applications/contextandCDI/src/com/ibm/ws/jaxrs20/cdi12/fat/contextandCDI/CDIApplication22.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzo0MzoxNlrOFkS1bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzo0MzoxNlrOFkS1bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYwMTY0Ng==", "bodyText": "Just a thought, but maybe this method could be put in some utils class so that we only need it in one place - then all of the getSingletons() methods that need to invoke it could just call CDIUtils.getBean(<resourceClass>);. What do you think?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10671#discussion_r373601646", "createdAt": "2020-01-31T17:43:16Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0.cdi.1.2_fat/test-applications/contextandCDI/src/com/ibm/ws/jaxrs20/cdi12/fat/contextandCDI/CDIApplication22.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs20.cdi12.fat.contextandCDI;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.spi.CDI;\n+import javax.ws.rs.ApplicationPath;\n+import javax.ws.rs.core.Application;\n+import javax.enterprise.context.Dependent;\n+\n+@Dependent\n+@ApplicationPath(\"contextandCDI22\")\n+public class CDIApplication22 extends Application {\n+\n+    @Override\n+    public Set<Class<?>> getClasses() {\n+\n+        LinkedHashSet<Class<?>> classes = new LinkedHashSet<>();\n+        classes.add(CDIFilter.class);\n+        return classes;\n+        \n+    }\n+    \n+    @Override\n+    public Set<Object> getSingletons() {\n+       \n+        LinkedHashSet<Object> classes = new LinkedHashSet<>();\n+        TestResource resource = getBean(TestResource.class);\n+//        TestResource resource = new TestResource();\n+        classes.add(resource);\n+        return classes;\n+    }\n+    \n+    public <E> E getBean(Class<E> clazz, Annotation... qualifiers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7675e56c8f3711d1b3d5874a69626d0adc3dc40"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDExMTExOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jaxrs.2.0.cdi.1.2_fat/test-applications/contextandCDI/src/com/ibm/ws/jaxrs20/cdi12/fat/contextandCDI/CDIFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzo0NToyNVrOFkS5Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzo0NToyNVrOFkS5Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYwMjU2Mw==", "bodyText": "Just a thought here... I think it is also possible for CDI to inject the ServletContext (using @Inject ServletContext servletContext2; - maybe we could include this in the test too?  That would ensure that ServletContext injection works regardless of who injects it.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10671#discussion_r373602563", "createdAt": "2020-01-31T17:45:25Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0.cdi.1.2_fat/test-applications/contextandCDI/src/com/ibm/ws/jaxrs20/cdi12/fat/contextandCDI/CDIFilter.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs20.cdi12.fat.contextandCDI;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.servlet.ServletContext;\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerRequestFilter;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+import javax.ws.rs.core.Context;\n+\n+@ApplicationScoped\n+public class CDIFilter implements ContainerRequestFilter, ContainerResponseFilter {\n+\n+    @Context ServletContext servletContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7675e56c8f3711d1b3d5874a69626d0adc3dc40"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDExODczOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jaxrs.2.0.cdi.1.2_fat/test-applications/contextandCDI/src/com/ibm/ws/jaxrs20/cdi12/fat/contextandCDI/TestResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzo0ODowOFrOFkS9mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzo0ODowOFrOFkS9mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYwMzczNw==", "bodyText": "It might be good to test ServletContext injection in the resource classes too.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10671#discussion_r373603737", "createdAt": "2020-01-31T17:48:08Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0.cdi.1.2_fat/test-applications/contextandCDI/src/com/ibm/ws/jaxrs20/cdi12/fat/contextandCDI/TestResource.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs20.cdi12.fat.contextandCDI;\n+\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Response;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+@ApplicationScoped\n+@Path(\"resource\")\n+public class TestResource {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7675e56c8f3711d1b3d5874a69626d0adc3dc40"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDEyMzc0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jaxrs.2.0.cdi/src/com/ibm/ws/jaxrs20/cdi/component/JaxRsFactoryImplicitBeanCDICustomizer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzo1MDowOFrOFkTAyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDo1NjoyNlrOFk0L2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYwNDU1NA==", "bodyText": "It seems weird to be importing an \"internal\" package.  Please make sure that the CDI team is ok with us using this class - possibly a better approach would be to put CDI Utils in a different (more public) package.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10671#discussion_r373604554", "createdAt": "2020-01-31T17:50:08Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0.cdi/src/com/ibm/ws/jaxrs20/cdi/component/JaxRsFactoryImplicitBeanCDICustomizer.java", "diffHunk": "@@ -50,6 +50,7 @@\n import com.ibm.websphere.ras.TraceComponent;\n import com.ibm.websphere.ras.annotation.Trivial;\n import com.ibm.ws.cdi.CDIService;\n+import com.ibm.ws.cdi.internal.interfaces.CDIUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7675e56c8f3711d1b3d5874a69626d0adc3dc40"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE0ODA1Ng==", "bodyText": "Ben's new PR #10690", "url": "https://github.com/OpenLiberty/open-liberty/pull/10671#discussion_r374148056", "createdAt": "2020-02-03T14:56:26Z", "author": {"login": "jkoehler22"}, "path": "dev/com.ibm.ws.jaxrs.2.0.cdi/src/com/ibm/ws/jaxrs20/cdi/component/JaxRsFactoryImplicitBeanCDICustomizer.java", "diffHunk": "@@ -50,6 +50,7 @@\n import com.ibm.websphere.ras.TraceComponent;\n import com.ibm.websphere.ras.annotation.Trivial;\n import com.ibm.ws.cdi.CDIService;\n+import com.ibm.ws.cdi.internal.interfaces.CDIUtils;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYwNDU1NA=="}, "originalCommit": {"oid": "c7675e56c8f3711d1b3d5874a69626d0adc3dc40"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODc4NDM3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jaxrs.2.0.cdi.1.2_fat/test-applications/contextandCDI/src/com/ibm/ws/jaxrs20/cdi12/fat/contextandCDI/CDIApplication32.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTozNzowNVrOFlkUwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTozNzowNVrOFlkUwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzNjc3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @SessionScoped@ApplicationPath(\"contextandCDI32\")\n          \n          \n            \n            @SessionScoped\n          \n          \n            \n            @ApplicationPath(\"contextandCDI32\")\n          \n      \n    \n    \n  \n\nDoes this work?  I would've expected that white space would be required between two annotations...", "url": "https://github.com/OpenLiberty/open-liberty/pull/10671#discussion_r374936770", "createdAt": "2020-02-04T21:37:05Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0.cdi.1.2_fat/test-applications/contextandCDI/src/com/ibm/ws/jaxrs20/cdi12/fat/contextandCDI/CDIApplication32.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs20.cdi12.fat.contextandCDI;\n+\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.spi.CDI;\n+import javax.ws.rs.ApplicationPath;\n+import javax.ws.rs.core.Application;\n+import javax.enterprise.context.SessionScoped;\n+import java.io.Serializable;\n+\n+@SessionScoped@ApplicationPath(\"contextandCDI32\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b99a63ff73321849d16e80bbf74e63700788d6"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2199, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}