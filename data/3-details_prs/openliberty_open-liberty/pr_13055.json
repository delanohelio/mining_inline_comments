{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NzYwNDQw", "number": 13055, "title": "Fix for injecting ManagedExecutorService using @Resource into CDI bean", "bodyText": "When an object is registered in JNDI as multiple types, trying to perform @Resource injection from inside a CDI-managed bean would cause validation to fail in some cases.\nFor example:\n@ApplicationScoped\npublic class ResourcesProducer {\n\n    @Resource(lookup = \"concurrent/sampleExecutor\")\n    @Produces\n    private ManagedExecutorService exec;\n}\nThis would result in a validation error from CDI such as:\njavax.enterprise.inject.spi.DefinitionException: CWOWB1007E: The producer field, org.example.app.ResourcesProducer.exec, has type javax.enterprise.concurrent.ManagedExecutorService, which does not match the type of the injected object.\n\tat com.ibm.ws.cdi.impl.weld.injection.EEValidationUtils.throwDefinitionException(EEValidationUtils.java:77)\n\tat com.ibm.ws.cdi.impl.weld.injection.EEValidationUtils.throwDefinitionException(EEValidationUtils.java:81)\n\tat com.ibm.ws.cdi.impl.weld.injection.EEValidationUtils.validateJndiLookup(EEValidationUtils.java:234)\n\tat com.ibm.ws.cdi.impl.weld.injection.EEValidationUtils.validateJndiLookup(EEValidationUtils.java:168)\n\tat com.ibm.ws.cdi.impl.weld.injection.EEValidationUtils.validateResource(EEValidationUtils.java:343)\n\tat com.ibm.ws.cdi.impl.weld.injection.WebSphereInjectionServicesImpl.validateAnnotatedMember(WebSphereInjectionServicesImpl.java:383)\n\tat com.ibm.ws.cdi.impl.weld.injection.WebSphereInjectionServicesImpl.registerInjectionTarget(WebSphereInjectionServicesImpl.java:350)\n\tat org.jboss.weld.manager.InjectionTargetFactoryImpl.postProcess(InjectionTargetFactoryImpl.java:141)\n\tat org.jboss.weld.manager.InjectionTargetFactoryImpl.createInjectionTarget(InjectionTargetFactoryImpl.java:92)\n\tat org.jboss.weld.bean.ManagedBean.<init>(ManagedBean.java:100)\n\tat org.jboss.weld.bean.ManagedBean.of(ManagedBean.java:80)\n\tat org.jboss.weld.bootstrap.AbstractBeanDeployer.createManagedBean(AbstractBeanDeployer.java:274)\n\tat org.jboss.weld.bootstrap.BeanDeployer.createClassBean(BeanDeployer.java:226)\n\tat org.jboss.weld.bootstrap.ConcurrentBeanDeployer$2.doWork(ConcurrentBeanDeployer.java:74)\n\tat org.jboss.weld.bootstrap.ConcurrentBeanDeployer$2.doWork(ConcurrentBeanDeployer.java:71)\n\tat org.jboss.weld.executor.IterativeWorkerTaskFactory$1.call(IterativeWorkerTaskFactory.java:62)\n\tat org.jboss.weld.executor.IterativeWorkerTaskFactory$1.call(IterativeWorkerTaskFactory.java:55)\n\tat com.ibm.ws.threading.internal.PolicyTaskFutureImpl.run(PolicyTaskFutureImpl.java:718)\n\tat com.ibm.ws.threading.internal.PolicyExecutorImpl.runTask(PolicyExecutorImpl.java:1135)\n\tat com.ibm.ws.threading.internal.PolicyExecutorImpl$GlobalPoolTask.run(PolicyExecutorImpl.java:189)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\tat java.base/java.lang.Thread.run(Thread.java:834)\n\nIt appears we already had a special case for this on javax.resource.cci.ConnectionFactory where CDI would actually look up the object from JNDI and check its type, which turned out the be needed for the ExecutorService as well. The proposed solution generalizes that case so the JNDI lookup type check is always performed as a fallback before a validation exception is thrown.", "createdAt": "2020-07-15T21:53:45Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/13055", "merged": true, "mergeCommit": {"oid": "c1426a3a0fd83800d451cf38d40c53ff400ad154"}, "closed": true, "closedAt": "2020-07-30T20:48:37Z", "author": {"login": "aguibert"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1bS1wgFqTQ0OTY0ODg5NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5ZA2LgFqTQ1NjgwNjU3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NjQ4ODk0", "url": "https://github.com/OpenLiberty/open-liberty/pull/13055#pullrequestreview-449648894", "createdAt": "2020-07-16T08:52:05Z", "commit": {"oid": "b9790c43d0e89c962ed892e4f175cbcaa8d8e124"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODo1MjowNVrOGyhZ5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODo1MjowNVrOGyhZ5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYyOTI4Ng==", "bodyText": "I expect that you intended to remove the line above?", "url": "https://github.com/OpenLiberty/open-liberty/pull/13055#discussion_r455629286", "createdAt": "2020-07-16T08:52:05Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.cdi.weld/src/com/ibm/ws/cdi/impl/weld/injection/EEValidationUtils.java", "diffHunk": "@@ -212,26 +212,27 @@ private static void validateJndiLookup(InitialContext c, String lookupString, An\n                 try {\n                     String className = pair.getClassName();\n                     Class<?> jndiClass = cdiArchive.getClassLoader().loadClass(className);\n-                    if (\"javax.resource.cci.ConnectionFactory\".equals(className)) {\n-                        try {\n-                            Object o = c.lookup(lookupName);\n-                            if (o != null) {\n-                                jndiClass = o.getClass();\n-                            }\n-                        } catch (RuntimeException e) {\n-                            // An error occurred while getting the object from JNDI. This may happen\n-                            // at this early point in the initialisation process, but if so we just\n-                            // skip validation.\n-                        }\n-                    } else {\n-                        try {\n-                            jndiClass = cdiArchive.getClassLoader().loadClass(className);\n-                        } catch (ClassNotFoundException ex) {\n-                            // Couldn't load the jndiClass name, can't validate\n-                        }\n+                    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9790c43d0e89c962ed892e4f175cbcaa8d8e124"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b9790c43d0e89c962ed892e4f175cbcaa8d8e124", "author": {"user": {"login": "aguibert", "name": "Andrew Guibert"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/b9790c43d0e89c962ed892e4f175cbcaa8d8e124", "committedDate": "2020-07-15T21:28:08Z", "message": "Generic support for injecting objects from JNDI registered as multiple types"}, "afterCommit": {"oid": "a75e478c02c94c4f3a0f465388480c25994089e1", "author": {"user": {"login": "aguibert", "name": "Andrew Guibert"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/a75e478c02c94c4f3a0f465388480c25994089e1", "committedDate": "2020-07-28T16:24:24Z", "message": "Generic support for injecting objects from JNDI registered as multiple types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3480d8e2443425f031bc8c7df2871ba1b0412383", "author": {"user": {"login": "aguibert", "name": "Andrew Guibert"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/3480d8e2443425f031bc8c7df2871ba1b0412383", "committedDate": "2020-07-28T16:24:39Z", "message": "Reproduce issue for @Inject on ManagedExecutorService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ccdc7c7412c58e91b8ad60f9871d096062819fe", "author": {"user": {"login": "aguibert", "name": "Andrew Guibert"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/1ccdc7c7412c58e91b8ad60f9871d096062819fe", "committedDate": "2020-07-28T16:24:39Z", "message": "Generic support for injecting objects from JNDI registered as multiple types"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a75e478c02c94c4f3a0f465388480c25994089e1", "author": {"user": {"login": "aguibert", "name": "Andrew Guibert"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/a75e478c02c94c4f3a0f465388480c25994089e1", "committedDate": "2020-07-28T16:24:24Z", "message": "Generic support for injecting objects from JNDI registered as multiple types"}, "afterCommit": {"oid": "1ccdc7c7412c58e91b8ad60f9871d096062819fe", "author": {"user": {"login": "aguibert", "name": "Andrew Guibert"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/1ccdc7c7412c58e91b8ad60f9871d096062819fe", "committedDate": "2020-07-28T16:24:39Z", "message": "Generic support for injecting objects from JNDI registered as multiple types"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2ODA2NTc5", "url": "https://github.com/OpenLiberty/open-liberty/pull/13055#pullrequestreview-456806579", "createdAt": "2020-07-28T16:28:19Z", "commit": {"oid": "1ccdc7c7412c58e91b8ad60f9871d096062819fe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2156, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}