{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0NDAwNTQ5", "number": 13881, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDoxMTo0OVrOEij13w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNTowMDoyMVrOEilFFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Njc0MjcxOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.ejbcontainer/src/com/ibm/ws/ejbcontainer/osgi/internal/NameSpaceBinderImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDoxMTo0OVrOHQghsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNzowMDozOFrOHQmtBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA3MjE3Ng==", "bodyText": "should this be called \"localBinding\" or is that a copy paste thing?", "url": "https://github.com/OpenLiberty/open-liberty/pull/13881#discussion_r487072176", "createdAt": "2020-09-11T14:11:49Z", "author": {"login": "olendvcook"}, "path": "dev/com.ibm.ws.ejbcontainer/src/com/ibm/ws/ejbcontainer/osgi/internal/NameSpaceBinderImpl.java", "diffHunk": "@@ -254,21 +259,39 @@ public void bindDefaultEJBRemote(EJBBinding bindingObject, HomeRecord hr) {\n      * To bind to root we register a service to the BundleContext, passing it a Reference Object\n      *\n      * @param bindingObject the EJB Binding information\n-     * @param hr the HomeRecord of the EJB\n-     * @param bindingName the JNDI binding name\n+     * @param hr            the HomeRecord of the EJB\n+     * @param bindingName   the JNDI binding name\n+     * @param isSimpleName  Flag used to force creation of an AmbiguousEJBReference if an\n+     *                          ambiguous simple name binding is detected\n      */\n-    private void bindLegacyRemoteBinding(EJBBinding bindingObject, HomeRecord hr, String bindingName) {\n+    private void bindLegacyRemoteBinding(EJBBinding bindingObject, HomeRecord hr, String bindingName, boolean isSimpleName) {\n         EJBRemoteRuntime remoteRuntime = ejbRemoteRuntimeServiceRef.getService();\n         if (remoteRuntime != null) {\n-\n-            // TODO: If BindingsHelper.ivRemoteBindings.contains(bindingName); we have duplicate bindings\n-            // and need to bind Ambiguous. #11441\n-\n             BindingsHelper bh = BindingsHelper.getRemoteHelper(hr);\n-            bh.ivRemoteBindings.add(bindingName);\n-\n             BundleContext bc = ejbRemoteRuntimeServiceRef.getReference().getBundle().getBundleContext();\n             BeanMetaData bmd = hr.getBeanMetaData();\n+            EJBBinding localBinding = new EJBBinding(bindingObject.homeRecord, bindingObject.interfaceName, bindingObject.interfaceIndex, bindingObject.isLocal);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "287799d96bb8dae6282de766df43d96cc365ffb7"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE3MzM4MQ==", "bodyText": "Updated all usage of 'localBinding' to 'newBinding' to better reflect the intention.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13881#discussion_r487173381", "createdAt": "2020-09-11T17:00:38Z", "author": {"login": "brideck"}, "path": "dev/com.ibm.ws.ejbcontainer/src/com/ibm/ws/ejbcontainer/osgi/internal/NameSpaceBinderImpl.java", "diffHunk": "@@ -254,21 +259,39 @@ public void bindDefaultEJBRemote(EJBBinding bindingObject, HomeRecord hr) {\n      * To bind to root we register a service to the BundleContext, passing it a Reference Object\n      *\n      * @param bindingObject the EJB Binding information\n-     * @param hr the HomeRecord of the EJB\n-     * @param bindingName the JNDI binding name\n+     * @param hr            the HomeRecord of the EJB\n+     * @param bindingName   the JNDI binding name\n+     * @param isSimpleName  Flag used to force creation of an AmbiguousEJBReference if an\n+     *                          ambiguous simple name binding is detected\n      */\n-    private void bindLegacyRemoteBinding(EJBBinding bindingObject, HomeRecord hr, String bindingName) {\n+    private void bindLegacyRemoteBinding(EJBBinding bindingObject, HomeRecord hr, String bindingName, boolean isSimpleName) {\n         EJBRemoteRuntime remoteRuntime = ejbRemoteRuntimeServiceRef.getService();\n         if (remoteRuntime != null) {\n-\n-            // TODO: If BindingsHelper.ivRemoteBindings.contains(bindingName); we have duplicate bindings\n-            // and need to bind Ambiguous. #11441\n-\n             BindingsHelper bh = BindingsHelper.getRemoteHelper(hr);\n-            bh.ivRemoteBindings.add(bindingName);\n-\n             BundleContext bc = ejbRemoteRuntimeServiceRef.getReference().getBundle().getBundleContext();\n             BeanMetaData bmd = hr.getBeanMetaData();\n+            EJBBinding localBinding = new EJBBinding(bindingObject.homeRecord, bindingObject.interfaceName, bindingObject.interfaceIndex, bindingObject.isLocal);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA3MjE3Ng=="}, "originalCommit": {"oid": "287799d96bb8dae6282de766df43d96cc365ffb7"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Njg1NzUwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.ejbcontainer.bindings_fat/bnd.bnd", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDozOTozMVrOHQhqDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNzoxNTozN1rOHQnKZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA5MDcwMQ==", "bodyText": "I know our fat_tools do this as well, but seems odd to have a FAT depend on our internal projects.  Would it work instead to depend on our API : com.ibm.websphere.appserver.api.ejbcontainer??", "url": "https://github.com/OpenLiberty/open-liberty/pull/13881#discussion_r487090701", "createdAt": "2020-09-11T14:39:31Z", "author": {"login": "tkburroughs"}, "path": "dev/com.ibm.ws.ejbcontainer.bindings_fat/bnd.bnd", "diffHunk": "@@ -54,4 +54,6 @@ tested.features: \\\n \tcom.ibm.websphere.javaee.servlet.3.1;version=latest,\\\n \tcom.ibm.websphere.javaee.transaction.1.1;version=latest,\\\n \tcom.ibm.websphere.security;version=latest,\\\n-\tcom.ibm.ws.ejbcontainer.fat_tools;version=latest\n\\ No newline at end of file\n+\tcom.ibm.ws.ejbcontainer.core;version=latest,\\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "287799d96bb8dae6282de766df43d96cc365ffb7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE3MDQzOQ==", "bodyText": "I can give that a try.  I think I added that dependency before I shuffled everything around.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13881#discussion_r487170439", "createdAt": "2020-09-11T16:55:13Z", "author": {"login": "brideck"}, "path": "dev/com.ibm.ws.ejbcontainer.bindings_fat/bnd.bnd", "diffHunk": "@@ -54,4 +54,6 @@ tested.features: \\\n \tcom.ibm.websphere.javaee.servlet.3.1;version=latest,\\\n \tcom.ibm.websphere.javaee.transaction.1.1;version=latest,\\\n \tcom.ibm.websphere.security;version=latest,\\\n-\tcom.ibm.ws.ejbcontainer.fat_tools;version=latest\n\\ No newline at end of file\n+\tcom.ibm.ws.ejbcontainer.core;version=latest,\\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA5MDcwMQ=="}, "originalCommit": {"oid": "287799d96bb8dae6282de766df43d96cc365ffb7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE4MDkwMw==", "bodyText": "Looks like that worked fine.  I removed the remote.portable.core dependency, too.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13881#discussion_r487180903", "createdAt": "2020-09-11T17:15:37Z", "author": {"login": "brideck"}, "path": "dev/com.ibm.ws.ejbcontainer.bindings_fat/bnd.bnd", "diffHunk": "@@ -54,4 +54,6 @@ tested.features: \\\n \tcom.ibm.websphere.javaee.servlet.3.1;version=latest,\\\n \tcom.ibm.websphere.javaee.transaction.1.1;version=latest,\\\n \tcom.ibm.websphere.security;version=latest,\\\n-\tcom.ibm.ws.ejbcontainer.fat_tools;version=latest\n\\ No newline at end of file\n+\tcom.ibm.ws.ejbcontainer.core;version=latest,\\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA5MDcwMQ=="}, "originalCommit": {"oid": "287799d96bb8dae6282de766df43d96cc365ffb7"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjkyODIyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.ejbcontainer/src/com/ibm/ws/ejbcontainer/osgi/internal/naming/EJBLocalNamingHelperImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDo1NTo0NVrOHQiU5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNzowMTowNlrOHQmt9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEwMTY2OA==", "bodyText": "If I saw just this in trace bind: false I would think the bind failed, not that it's not Ambiguous so I'd make this clearer.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13881#discussion_r487101668", "createdAt": "2020-09-11T14:55:45Z", "author": {"login": "olendvcook"}, "path": "dev/com.ibm.ws.ejbcontainer/src/com/ibm/ws/ejbcontainer/osgi/internal/naming/EJBLocalNamingHelperImpl.java", "diffHunk": "@@ -81,18 +87,33 @@ public synchronized void bind(EJBBinding binding, String name) {\n             Tr.entry(tc, \"bind: \" + name);\n         }\n \n+        EJBBinding previousBinding = EJBLocalBindings.get(name);\n+\n+        // There won't be a previous binding for an ambiguous simple binding name\n+        if (isSimpleName) {\n+            localBinding.setAmbiguousReference();\n+            notAmbiguous = false;\n+        }\n+\n+        if (previousBinding != null) {\n+            localBinding.setAmbiguousReference();\n+            localBinding.addJ2EENames(previousBinding.getJ2EENames());\n+            notAmbiguous = false;\n+        }\n+\n         Lock writeLock = javaColonLock.writeLock();\n         writeLock.lock();\n         try {\n-            //TODO: If EJBLocalBindings already contains name, bind ambiguous reference exception\n-            EJBLocalBindings.put(name, binding);\n+            EJBLocalBindings.put(name, localBinding);\n         } finally {\n             writeLock.unlock();\n         }\n \n         if (isTraceOn && tc.isEntryEnabled()) {\n-            Tr.exit(tc, \"bind\");\n+            Tr.exit(tc, \"bind: \" + notAmbiguous);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "287799d96bb8dae6282de766df43d96cc365ffb7"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE3MzYyMA==", "bodyText": "Updated exit message to \"bind: notAmbiguous = \"", "url": "https://github.com/OpenLiberty/open-liberty/pull/13881#discussion_r487173620", "createdAt": "2020-09-11T17:01:06Z", "author": {"login": "brideck"}, "path": "dev/com.ibm.ws.ejbcontainer/src/com/ibm/ws/ejbcontainer/osgi/internal/naming/EJBLocalNamingHelperImpl.java", "diffHunk": "@@ -81,18 +87,33 @@ public synchronized void bind(EJBBinding binding, String name) {\n             Tr.entry(tc, \"bind: \" + name);\n         }\n \n+        EJBBinding previousBinding = EJBLocalBindings.get(name);\n+\n+        // There won't be a previous binding for an ambiguous simple binding name\n+        if (isSimpleName) {\n+            localBinding.setAmbiguousReference();\n+            notAmbiguous = false;\n+        }\n+\n+        if (previousBinding != null) {\n+            localBinding.setAmbiguousReference();\n+            localBinding.addJ2EENames(previousBinding.getJ2EENames());\n+            notAmbiguous = false;\n+        }\n+\n         Lock writeLock = javaColonLock.writeLock();\n         writeLock.lock();\n         try {\n-            //TODO: If EJBLocalBindings already contains name, bind ambiguous reference exception\n-            EJBLocalBindings.put(name, binding);\n+            EJBLocalBindings.put(name, localBinding);\n         } finally {\n             writeLock.unlock();\n         }\n \n         if (isTraceOn && tc.isEntryEnabled()) {\n-            Tr.exit(tc, \"bind\");\n+            Tr.exit(tc, \"bind: \" + notAmbiguous);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEwMTY2OA=="}, "originalCommit": {"oid": "287799d96bb8dae6282de766df43d96cc365ffb7"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Njk0NTQ4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.ejbcontainer/src/com/ibm/ws/ejbcontainer/osgi/internal/naming/LocalColonEJBNamingHelperImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNTowMDoyMVrOHQif7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNzowMToxM1rOHQmuJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEwNDQ5NQ==", "bodyText": "Same here, if I saw just this in trace bind: false I would think the bind failed, not that it's not Ambiguous so I'd make this clearer.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13881#discussion_r487104495", "createdAt": "2020-09-11T15:00:21Z", "author": {"login": "olendvcook"}, "path": "dev/com.ibm.ws.ejbcontainer/src/com/ibm/ws/ejbcontainer/osgi/internal/naming/LocalColonEJBNamingHelperImpl.java", "diffHunk": "@@ -70,25 +74,42 @@ protected void unsetEJBHomeRuntime(ServiceReference<EJBHomeRuntime> ref) {\n     }\n \n     @Override\n-    public synchronized void bind(EJBBinding binding, String name) {\n+    public synchronized boolean bind(EJBBinding binding, String name, boolean isSimpleName) {\n         final boolean isTraceOn = TraceComponent.isAnyTracingEnabled();\n+        boolean notAmbiguous = true;\n+        EJBBinding localBinding = new EJBBinding(binding.homeRecord, binding.interfaceName, binding.interfaceIndex, binding.isLocal);\n+\n         if (isTraceOn && tc.isEntryEnabled()) {\n             Tr.entry(tc, \"bind: \" + name);\n         }\n \n+        EJBBinding previousBinding = localColonEJBBindings.get(name);\n+\n+        // There won't be a previous binding for an ambiguous simple binding name\n+        if (isSimpleName) {\n+            localBinding.setAmbiguousReference();\n+            notAmbiguous = false;\n+        }\n+\n+        if (previousBinding != null) {\n+            localBinding.setAmbiguousReference();\n+            localBinding.addJ2EENames(previousBinding.getJ2EENames());\n+            notAmbiguous = false;\n+        }\n+\n         Lock writeLock = javaColonLock.writeLock();\n         writeLock.lock();\n         try {\n-\n-            //TODO: If LocalColonEJBBindings already contains name, bind ambiguous reference exception\n-            localColonEJBBindings.put(name, binding);\n+            localColonEJBBindings.put(name, localBinding);\n         } finally {\n             writeLock.unlock();\n         }\n \n         if (isTraceOn && tc.isEntryEnabled()) {\n-            Tr.exit(tc, \"bind\");\n+            Tr.exit(tc, \"bind: \" + notAmbiguous);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "287799d96bb8dae6282de766df43d96cc365ffb7"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE3MzY3MA==", "bodyText": "Updated exit message to \"bind: notAmbiguous = \"", "url": "https://github.com/OpenLiberty/open-liberty/pull/13881#discussion_r487173670", "createdAt": "2020-09-11T17:01:13Z", "author": {"login": "brideck"}, "path": "dev/com.ibm.ws.ejbcontainer/src/com/ibm/ws/ejbcontainer/osgi/internal/naming/LocalColonEJBNamingHelperImpl.java", "diffHunk": "@@ -70,25 +74,42 @@ protected void unsetEJBHomeRuntime(ServiceReference<EJBHomeRuntime> ref) {\n     }\n \n     @Override\n-    public synchronized void bind(EJBBinding binding, String name) {\n+    public synchronized boolean bind(EJBBinding binding, String name, boolean isSimpleName) {\n         final boolean isTraceOn = TraceComponent.isAnyTracingEnabled();\n+        boolean notAmbiguous = true;\n+        EJBBinding localBinding = new EJBBinding(binding.homeRecord, binding.interfaceName, binding.interfaceIndex, binding.isLocal);\n+\n         if (isTraceOn && tc.isEntryEnabled()) {\n             Tr.entry(tc, \"bind: \" + name);\n         }\n \n+        EJBBinding previousBinding = localColonEJBBindings.get(name);\n+\n+        // There won't be a previous binding for an ambiguous simple binding name\n+        if (isSimpleName) {\n+            localBinding.setAmbiguousReference();\n+            notAmbiguous = false;\n+        }\n+\n+        if (previousBinding != null) {\n+            localBinding.setAmbiguousReference();\n+            localBinding.addJ2EENames(previousBinding.getJ2EENames());\n+            notAmbiguous = false;\n+        }\n+\n         Lock writeLock = javaColonLock.writeLock();\n         writeLock.lock();\n         try {\n-\n-            //TODO: If LocalColonEJBBindings already contains name, bind ambiguous reference exception\n-            localColonEJBBindings.put(name, binding);\n+            localColonEJBBindings.put(name, localBinding);\n         } finally {\n             writeLock.unlock();\n         }\n \n         if (isTraceOn && tc.isEntryEnabled()) {\n-            Tr.exit(tc, \"bind\");\n+            Tr.exit(tc, \"bind: \" + notAmbiguous);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzEwNDQ5NQ=="}, "originalCommit": {"oid": "287799d96bb8dae6282de766df43d96cc365ffb7"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2791, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}