{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5Mzk3MDky", "number": 11943, "title": "11212 Create SPI for weld extensions", "bodyText": "", "createdAt": "2020-04-27T10:13:37Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943", "merged": true, "mergeCommit": {"oid": "8fd07b7fbbef94751790e5326efbad16a64eea96"}, "closed": true, "closedAt": "2020-05-13T17:13:41Z", "author": {"login": "benjamin-confino"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbsrKGABqjMyNzUwNzY2MjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcg1PDQABqjMzMzExMTM0NzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0066c5ba8dc2a55d7f9188ecb2b5f7d3ce4e5e16", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/0066c5ba8dc2a55d7f9188ecb2b5f7d3ce4e5e16", "committedDate": "2020-04-23T12:11:20Z", "message": "new test for SPI, WIP"}, "afterCommit": {"oid": "9ab9c64dfe7ce16e4e12578928e5c7e87e8a7497", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/9ab9c64dfe7ce16e4e12578928e5c7e87e8a7497", "committedDate": "2020-04-27T10:21:30Z", "message": "new test for SPI, WIP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ab9c64dfe7ce16e4e12578928e5c7e87e8a7497", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/9ab9c64dfe7ce16e4e12578928e5c7e87e8a7497", "committedDate": "2020-04-27T10:21:30Z", "message": "new test for SPI, WIP"}, "afterCommit": {"oid": "d200d9f56f7151ae30bb9eedab00bd0a5f04688c", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/d200d9f56f7151ae30bb9eedab00bd0a5f04688c", "committedDate": "2020-04-27T10:30:33Z", "message": "new test for SPI, WIP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d200d9f56f7151ae30bb9eedab00bd0a5f04688c", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/d200d9f56f7151ae30bb9eedab00bd0a5f04688c", "committedDate": "2020-04-27T10:30:33Z", "message": "new test for SPI, WIP"}, "afterCommit": {"oid": "f24bc843bbbddf17834f49922264e848f5f2a2fb", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/f24bc843bbbddf17834f49922264e848f5f2a2fb", "committedDate": "2020-04-27T10:36:02Z", "message": "new test for SPI, WIP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f24bc843bbbddf17834f49922264e848f5f2a2fb", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/f24bc843bbbddf17834f49922264e848f5f2a2fb", "committedDate": "2020-04-27T10:36:02Z", "message": "new test for SPI, WIP"}, "afterCommit": {"oid": "1ded3c2f8359660ba8135a07926fbfffe2a33070", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/1ded3c2f8359660ba8135a07926fbfffe2a33070", "committedDate": "2020-04-27T10:40:22Z", "message": "new test for SPI, WIP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ded3c2f8359660ba8135a07926fbfffe2a33070", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/1ded3c2f8359660ba8135a07926fbfffe2a33070", "committedDate": "2020-04-27T10:40:22Z", "message": "new test for SPI, WIP"}, "afterCommit": {"oid": "fb2bdc077ce7c2e7186a5ddd41a01dfd0f504a97", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/fb2bdc077ce7c2e7186a5ddd41a01dfd0f504a97", "committedDate": "2020-04-28T15:52:53Z", "message": "new test for SPI"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fb2bdc077ce7c2e7186a5ddd41a01dfd0f504a97", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/fb2bdc077ce7c2e7186a5ddd41a01dfd0f504a97", "committedDate": "2020-04-28T15:52:53Z", "message": "new test for SPI"}, "afterCommit": {"oid": "b0b8502befb895d8c4ae91a6c0d15d89e22e3624", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/b0b8502befb895d8c4ae91a6c0d15d89e22e3624", "committedDate": "2020-04-29T09:34:19Z", "message": "new test for SPI"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MTc3MzEy", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#pullrequestreview-404177312", "createdAt": "2020-05-01T14:07:34Z", "commit": {"oid": "b0b8502befb895d8c4ae91a6c0d15d89e22e3624"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDowNzozNFrOGPKpLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDowNzozNFrOGPKpLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1NjIwNg==", "bodyText": "you probably didn't mean to check this file in", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#discussion_r418556206", "createdAt": "2020-05-01T14:07:34Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.cdi.extension_fat/test-bundles/cdi.spi.extension/src/com/ibm/ws/cdi/extension/spi/test/bundle/SPIMetaData.java.orig", "diffHunk": "@@ -0,0 +1,45 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.cdi.extension.spi.test.bundle;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.enterprise.inject.spi.Extension;\n+\n+import org.osgi.service.component.annotations.Component;\n+\n+import com.ibm.ws.cdi.extension.spi.test.bundle.extension.MyExtension;\n+import com.ibm.ws.cdi.extension.spi.test.bundle.getclass.ClassSPIRegisteredProducer;\n+import com.ibm.ws.cdi.extension.spi.test.bundle.getclass.interceptor.ClassSPIInterceptor;\n+import com.ibm.ws.cdi.extension.spi.test.bundle.getclass.interceptor.Intercept;\n+import com.ibm.wsspi.cdi.extension.WebSphereCDIExtensionMetaData;\n+\n+@Component(service = WebSphereCDIExtensionMetaData.class)\n+public class SPIMetaData implements WebSphereCDIExtensionMetaData {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0b8502befb895d8c4ae91a6c0d15d89e22e3624"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MTc5MjUx", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#pullrequestreview-404179251", "createdAt": "2020-05-01T14:11:06Z", "commit": {"oid": "b0b8502befb895d8c4ae91a6c0d15d89e22e3624"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDoxMTowNlrOGPKu5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDoxMTowNlrOGPKu5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1NzY3MQ==", "bodyText": "javadoc is wrong", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#discussion_r418557671", "createdAt": "2020-05-01T14:11:06Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.cdi.internal/src/com/ibm/ws/cdi/internal/interfaces/CDIRuntime.java", "diffHunk": "@@ -55,6 +56,11 @@\n      */\n     public Iterator<ServiceAndServiceReferencePair<WebSphereCDIExtension>> getExtensionServices();\n \n+    /**\n+     * @return an iterator through all the registered {@link WebSphereCDIExtension} services", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0b8502befb895d8c4ae91a6c0d15d89e22e3624"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MTgwNTEy", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#pullrequestreview-404180512", "createdAt": "2020-05-01T14:13:20Z", "commit": {"oid": "b0b8502befb895d8c4ae91a6c0d15d89e22e3624"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDoxMzoyMFrOGPKy5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDoxMzoyMFrOGPKy5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1ODY5Mg==", "bodyText": "what happens if a class is both WebSphereCDIExtension and WebSphereCDIExtensionMetaData?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#discussion_r418558692", "createdAt": "2020-05-01T14:13:20Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.cdi.weld/src/com/ibm/ws/cdi/impl/CDIContainerImpl.java", "diffHunk": "@@ -582,7 +586,26 @@ public String getCurrentApplicationContextID() {\n                         runtimeExtensionMap.put(serviceID, extensionArchive);\n                     }\n                 }\n+                extensionSet.add(extensionArchive);\n+            }\n+        }\n+\n+        //Now do the exact same thing for extensions coming from the SPI\n+        Iterator<ServiceAndServiceReferencePair<WebSphereCDIExtensionMetaData>> spiExtensions = cdiRuntime.getSPIExtensionServices();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0b8502befb895d8c4ae91a6c0d15d89e22e3624"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MTgyMDk2", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#pullrequestreview-404182096", "createdAt": "2020-05-01T14:16:12Z", "commit": {"oid": "b0b8502befb895d8c4ae91a6c0d15d89e22e3624"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDoxNjoxMlrOGPK4Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDoxNjoxMlrOGPK4Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2MDAwNg==", "bodyText": "Are you sure? Throwing a CDIException would be more consistent.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#discussion_r418560006", "createdAt": "2020-05-01T14:16:12Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.cdi.weld/src/com/ibm/ws/cdi/impl/CDIContainerImpl.java", "diffHunk": "@@ -604,6 +627,37 @@ private ExtensionArchive getProbeExtensionArchive() {\n         return this.probeExtensionArchive;\n     }\n \n+    private ExtensionArchive newSPIExtensionArchive(ServiceReference<WebSphereCDIExtensionMetaData> sr,\n+                                                    WebSphereCDIExtensionMetaData webSphereCDIExtensionMetaData, WebSphereCDIDeployment applicationContext) throws CDIException {\n+        Bundle bundle = sr.getBundle();\n+\n+        Set<Class<? extends Extension>> extensionClasses = webSphereCDIExtensionMetaData.getExtensions();\n+        Set<Extension> extensions = new HashSet<Extension>();\n+        Set<String> extensionClassNames = extensionClasses.stream().map(clazz -> clazz.getCanonicalName()).collect(Collectors.toSet());\n+\n+        for (Class<? extends Extension> clazz : extensionClasses) {\n+            try {\n+                extensions.add(clazz.getDeclaredConstructor().newInstance());\n+            } catch (InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException | SecurityException e) {\n+                // Just emit an FFDC. This will proceed without using the extension.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0b8502befb895d8c4ae91a6c0d15d89e22e3624"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0ODY1ODI5", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#pullrequestreview-404865829", "createdAt": "2020-05-04T10:23:22Z", "commit": {"oid": "b0b8502befb895d8c4ae91a6c0d15d89e22e3624"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMDoyMzoyMlrOGP6g6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMDoyMzoyMlrOGP6g6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM0MDUyMA==", "bodyText": "Document when this method needs to be override?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#discussion_r419340520", "createdAt": "2020-05-04T10:23:22Z", "author": {"login": "Emily-Jiang"}, "path": "dev/com.ibm.ws.cdi.interfaces/src/com/ibm/wsspi/cdi/extension/WebSphereCDIExtensionMetaData.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.wsspi.cdi.extension;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.enterprise.inject.spi.Extension;\n+\n+/**\n+ * This is a *marker* interface for Weld Runtime extensions. All runtime extensions need to register a service\n+ * under this interface. This bundle will find all of the services and then get hold of the bundle classloader and\n+ * pass onto Weld.\n+ *\n+ * To use this class you must implement one of the two methods. If you implement CDIExtensionClasses then it must\n+ * not return the class annotated WebSphereCDIExtensionMetaData.\n+ *\n+ * The class that implements this interface should be annotated with @Component(service = WebSphereCDIExtensionMetaData.class)\n+ *\n+ * For example:\n+ *\n+ * @Component(service = WebSphereCDIExtensionMetaData.class)\n+ *                    public class JwtCDIExtension implements WebSphereCDIExtensionMetaData { ... }\n+ */\n+\n+public interface WebSphereCDIExtensionMetaData {\n+\n+    /**\n+     * All classes returned by this method will be treated as CDI beans. All classes must be in the same archive as your WebSphereCDIExtensionMetaData.\n+     */\n+    default public Set<Class<?>> getBeanClasses() {\n+        return Collections.emptySet();\n+    }\n+\n+    /**\n+     * All classes returned by this method will be treated as CDI extensions.\n+     *\n+     * If a class in returned by this method implements WebSphereCDIExtensionMetaData an IllegalArguementException is thrown.\n+     * This is because it will result in OSGI and Weld independently instantiating the class, while it is unlikely for the\n+     * two instances to conflict, it is best to keep the OSGI service and CDI extension separate.\n+     */\n+    public default Set<Class<? extends Extension>> getExtensions() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0b8502befb895d8c4ae91a6c0d15d89e22e3624"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0ODY3MDAz", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#pullrequestreview-404867003", "createdAt": "2020-05-04T10:25:20Z", "commit": {"oid": "b0b8502befb895d8c4ae91a6c0d15d89e22e3624"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b0b8502befb895d8c4ae91a6c0d15d89e22e3624", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/b0b8502befb895d8c4ae91a6c0d15d89e22e3624", "committedDate": "2020-04-29T09:34:19Z", "message": "new test for SPI"}, "afterCommit": {"oid": "fdb237c0d19d509499c10d68e8b1c472cbf993fc", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/fdb237c0d19d509499c10d68e8b1c472cbf993fc", "committedDate": "2020-05-04T22:13:55Z", "message": "new test for SPI"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fdb237c0d19d509499c10d68e8b1c472cbf993fc", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/fdb237c0d19d509499c10d68e8b1c472cbf993fc", "committedDate": "2020-05-04T22:13:55Z", "message": "new test for SPI"}, "afterCommit": {"oid": "2327b1e291ba78fe277bbe3d42687cd62f94951c", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/2327b1e291ba78fe277bbe3d42687cd62f94951c", "committedDate": "2020-05-06T18:53:27Z", "message": "new test for SPI"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2327b1e291ba78fe277bbe3d42687cd62f94951c", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/2327b1e291ba78fe277bbe3d42687cd62f94951c", "committedDate": "2020-05-06T18:53:27Z", "message": "new test for SPI"}, "afterCommit": {"oid": "290570d91ef47e219a281c8339be98d40dcd2702", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/290570d91ef47e219a281c8339be98d40dcd2702", "committedDate": "2020-05-06T19:01:04Z", "message": "new test for SPI"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ed11cd8170421965e405bf62f8c0ff5b5e773510", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/ed11cd8170421965e405bf62f8c0ff5b5e773510", "committedDate": "2020-05-06T19:07:05Z", "message": "Deprecate WebSphereCDIExtension"}, "afterCommit": {"oid": "60283fc6436a9ea42044dd958973ad349bb1ce66", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/60283fc6436a9ea42044dd958973ad349bb1ce66", "committedDate": "2020-05-07T09:12:31Z", "message": "Deprecate WebSphereCDIExtension"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "60283fc6436a9ea42044dd958973ad349bb1ce66", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/60283fc6436a9ea42044dd958973ad349bb1ce66", "committedDate": "2020-05-07T09:12:31Z", "message": "Deprecate WebSphereCDIExtension"}, "afterCommit": {"oid": "693bd51a4d650b75adaef6ef9c9c7fd6a928900a", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/693bd51a4d650b75adaef6ef9c9c7fd6a928900a", "committedDate": "2020-05-07T09:54:02Z", "message": "Deprecate WebSphereCDIExtension"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5OTAxNDg2", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#pullrequestreview-409901486", "createdAt": "2020-05-12T10:19:33Z", "commit": {"oid": "693bd51a4d650b75adaef6ef9c9c7fd6a928900a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMDoxOTozNFrOGT_-iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMDoxOTozNFrOGT_-iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYyNDMzMQ==", "bodyText": "There should be a space after :", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#discussion_r423624331", "createdAt": "2020-05-12T10:19:34Z", "author": {"login": "Emily-Jiang"}, "path": "dev/com.ibm.websphere.appserver.spi.cdi/bnd.bnd", "diffHunk": "@@ -0,0 +1,26 @@\n+#*******************************************************************************\n+# Copyright (c) 2020 IBM Corporation and others.\n+# All rights reserved. This program and the accompanying materials\n+# are made available under the terms of the Eclipse Public License v1.0\n+# which accompanies this distribution, and is available at\n+# http://www.eclipse.org/legal/epl-v10.html\n+#\n+# Contributors:\n+#     IBM Corporation - initial API and implementation\n+#*******************************************************************************\n+-include= ~../cnf/resources/bnd/bundle.props\n+bVersion: 1.0\n+\n+Bundle-Name: WebSphere CDI Extension SPI\n+Bundle-Description: WebSphere CDI Extension SPI, version ${bVersion}\n+Bundle-SymbolicName: com.ibm.websphere.appserver.spi.cdi\n+\n+Import-Package: io.openliberty.cdi.spi,*\n+\n+Export-Package:io.openliberty.cdi.spi", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "693bd51a4d650b75adaef6ef9c9c7fd6a928900a"}, "originalPosition": 20}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "693bd51a4d650b75adaef6ef9c9c7fd6a928900a", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/693bd51a4d650b75adaef6ef9c9c7fd6a928900a", "committedDate": "2020-05-07T09:54:02Z", "message": "Deprecate WebSphereCDIExtension"}, "afterCommit": {"oid": "eaa1befccd26458223dd9e9d9e4ea5756bbe0619", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/eaa1befccd26458223dd9e9d9e4ea5756bbe0619", "committedDate": "2020-05-12T10:37:11Z", "message": "Deprecate WebSphereCDIExtension"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5OTAyMzA1", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#pullrequestreview-409902305", "createdAt": "2020-05-12T10:20:51Z", "commit": {"oid": "693bd51a4d650b75adaef6ef9c9c7fd6a928900a"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMDoyMDo1MVrOGUABMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMDozNzoxOVrOGUAjsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYyNTAxMA==", "bodyText": "2020", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#discussion_r423625010", "createdAt": "2020-05-12T10:20:51Z", "author": {"login": "Emily-Jiang"}, "path": "dev/com.ibm.ws.cdi.extension_fat/cdi_spi_extension.bnd", "diffHunk": "@@ -0,0 +1,35 @@\n+#*******************************************************************************\n+# Copyright (c) 2018 IBM Corporation and others.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "693bd51a4d650b75adaef6ef9c9c7fd6a928900a"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYyNTM0MA==", "bodyText": "2018->2020", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#discussion_r423625340", "createdAt": "2020-05-12T10:21:30Z", "author": {"login": "Emily-Jiang"}, "path": "dev/com.ibm.ws.cdi.extension_fat/fat/src/com/ibm/ws/cdi12/fat/tests/CDI12ExtensionSPITest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*******************************************************************************\n+ * Copyright (c) 2014, 2018 IBM Corporation and others.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "693bd51a4d650b75adaef6ef9c9c7fd6a928900a"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYyODc4OA==", "bodyText": "copyright 2015->2020\nCan you rename the file to be CDIExtensionMetadata? We should stop mentioning the WebSphere name.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#discussion_r423628788", "createdAt": "2020-05-12T10:27:53Z", "author": {"login": "Emily-Jiang"}, "path": "dev/com.ibm.ws.cdi.interfaces/src/io/openliberty/cdi/spi/WebSphereCDIExtensionMetaData.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015 IBM Corporation and others.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "693bd51a4d650b75adaef6ef9c9c7fd6a928900a"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYyOTQwMQ==", "bodyText": "duplication of need to", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#discussion_r423629401", "createdAt": "2020-05-12T10:29:06Z", "author": {"login": "Emily-Jiang"}, "path": "dev/com.ibm.ws.cdi.interfaces/src/io/openliberty/cdi/spi/WebSphereCDIExtensionMetaData.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.cdi.spi;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.enterprise.inject.spi.Extension;\n+\n+/**\n+ * This is a *marker* interface for Weld Runtime extensions. Liberty features that wish to extend CDI will need to \n+ * need to register a service under this interface. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "693bd51a4d650b75adaef6ef9c9c7fd6a928900a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYyOTc4Ng==", "bodyText": "Weld -> CDI", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#discussion_r423629786", "createdAt": "2020-05-12T10:29:49Z", "author": {"login": "Emily-Jiang"}, "path": "dev/com.ibm.ws.cdi.interfaces/src/io/openliberty/cdi/spi/WebSphereCDIExtensionMetaData.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.cdi.spi;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.enterprise.inject.spi.Extension;\n+\n+/**\n+ * This is a *marker* interface for Weld Runtime extensions. Liberty features that wish to extend CDI will need to ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "693bd51a4d650b75adaef6ef9c9c7fd6a928900a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYzMTg5OA==", "bodyText": "WebSphereCDIExtensionMetaData -> CDIExtensionMetaData. You should add the package for Extension. Also, you can say\nImplementing CDIExtension or javax.enterprise.inject.spi.Extension is mutually exclusive. Otherwise, none desirable behaviour will occur.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#discussion_r423631898", "createdAt": "2020-05-12T10:33:38Z", "author": {"login": "Emily-Jiang"}, "path": "dev/com.ibm.ws.cdi.interfaces/src/io/openliberty/cdi/spi/WebSphereCDIExtensionMetaData.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.cdi.spi;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.enterprise.inject.spi.Extension;\n+\n+/**\n+ * This is a *marker* interface for Weld Runtime extensions. Liberty features that wish to extend CDI will need to \n+ * need to register a service under this interface. \n+ *\n+ * To use this class you must implement one of the two methods. If you implement getBeanClasses() all classes returned by that\n+ * method will be registered with CDI and may be used normally by application code. If you implement getExtensions() then \n+ * all classes returned by that method will be treated as CDI extensions and run when creating the CDI container for each application.\n+ * \n+ * Classes returned from getExtensions() must implement javax.enterprise.inject.spi.Extension. They do *not* and should not be listed in a \n+ * META-INF/services file. It is best practice to not put WebSphereCDIExtensionMetaData and Extension on the same class as that would result", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "693bd51a4d650b75adaef6ef9c9c7fd6a928900a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYzMzEwMA==", "bodyText": "If a class in returned by this method implements WebSphereCDIExtensionMetaData, an IllegalArguementException is thrown.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#discussion_r423633100", "createdAt": "2020-05-12T10:35:53Z", "author": {"login": "Emily-Jiang"}, "path": "dev/com.ibm.ws.cdi.interfaces/src/io/openliberty/cdi/spi/WebSphereCDIExtensionMetaData.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.cdi.spi;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.enterprise.inject.spi.Extension;\n+\n+/**\n+ * This is a *marker* interface for Weld Runtime extensions. Liberty features that wish to extend CDI will need to \n+ * need to register a service under this interface. \n+ *\n+ * To use this class you must implement one of the two methods. If you implement getBeanClasses() all classes returned by that\n+ * method will be registered with CDI and may be used normally by application code. If you implement getExtensions() then \n+ * all classes returned by that method will be treated as CDI extensions and run when creating the CDI container for each application.\n+ * \n+ * Classes returned from getExtensions() must implement javax.enterprise.inject.spi.Extension. They do *not* and should not be listed in a \n+ * META-INF/services file. It is best practice to not put WebSphereCDIExtensionMetaData and Extension on the same class as that would result\n+ * in CDI and OSGI independently instantiating the class.\n+ *\n+ * The class that implements this interface should be annotated with @Component(service = WebSphereCDIExtensionMetaData.class). There are no\n+ * other properties that can be included in the Component annotation. \n+ * \n+ * Here is a worked example of a complete WebSphereCDIExtensionMetaData implementation. \n+ *\n+ * @Component(service = WebSphereCDIExtensionMetaData.class)\n+ * public class SPIMetaData implements WebSphereCDIExtensionMetaData {\n+ * \n+ *     @Override\n+ *     public Set<Class<?>> getBeanClasses() {\n+ *         Set<Class<?>> beans = new HashSet<Class<?>>();\n+ *         //This will register a producer class and expose it's produced beans to applications\n+ *         beans.add(ClassSPIRegisteredProducer.class);\n+ *     }\n+ * }\n+ *     \n+ * A complete bundle that uses WebSphereCDIExtensionMetaData to register CDI beans can be found at: \n+ * com.ibm.ws.cdi.extension_fat/test-bundles/cdi.spi.extension/ \n+ * \n+ * Note the files com.ibm.ws.cdi.extension_fat/cdi_spi_extension.bnd and com.ibm.ws.cdi.extension_fat/publish/features/cdi.spi.extension.mf \n+ * both of which are needed to include a bundle into liberty. com.ibm.ws.cdi.extension_fat/test-applications/SPIExtension.war/ contains a \n+ * simple app that injects the beans provided by cdi.spi.extension.  \n+ */\n+\n+public interface WebSphereCDIExtensionMetaData {\n+\n+    /**\n+     * All classes returned by this method will be registered with CDI. All classes must be in the same archive as your WebSphereCDIExtensionMetaData.\n+     */\n+    default public Set<Class<?>> getBeanClasses() {\n+        return Collections.emptySet();\n+    }\n+\n+    /**\n+     * All classes returned by this method will be treated as CDI extensions.\n+     *\n+     * If a class in returned by this method implements WebSphereCDIExtensionMetaData an IllegalArguementException is thrown.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "693bd51a4d650b75adaef6ef9c9c7fd6a928900a"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYzMzM3Nw==", "bodyText": "2015->2020", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#discussion_r423633377", "createdAt": "2020-05-12T10:36:26Z", "author": {"login": "Emily-Jiang"}, "path": "dev/com.ibm.ws.cdi.interfaces/src/io/openliberty/cdi/spi/package-info.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015 IBM Corporation and others.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "693bd51a4d650b75adaef6ef9c9c7fd6a928900a"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYzMzg0Mg==", "bodyText": "Creating CDI Extension via CDI SPI failed.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#discussion_r423633842", "createdAt": "2020-05-12T10:37:19Z", "author": {"login": "Emily-Jiang"}, "path": "dev/com.ibm.ws.cdi.internal/resources/com/ibm/ws/cdi/internal/resources/CDI.nlsprops", "diffHunk": "@@ -68,3 +68,7 @@ no.injection.target.CWOWB1008E.useraction=Ensure that the archive the class belo\n implicit.bean.scanning.disabled.CWOWB1009W=CWOWB1009W: Implicit bean archives are disabled.\n implicit.bean.scanning.disabled.CWOWB1009W.explanation=Archives are not scanned for CDI beans unless they have a beans.xml file.\n implicit.bean.scanning.disabled.CWOWB1009W.useraction=Ensure that every archive that uses CDI has a beans.xml file or re-enable implicit beans scanning in your server.xml file.\n+\n+spi.extension.failed.to.construct.CWOWB10010E=CWOWB10010E: Failed to create CDI Extension via SPI.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "693bd51a4d650b75adaef6ef9c9c7fd6a928900a"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eaa1befccd26458223dd9e9d9e4ea5756bbe0619", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/eaa1befccd26458223dd9e9d9e4ea5756bbe0619", "committedDate": "2020-05-12T10:37:11Z", "message": "Deprecate WebSphereCDIExtension"}, "afterCommit": {"oid": "3a548e04c1fc16dfaa48d06dc9dbceef8bc6bcd6", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/3a548e04c1fc16dfaa48d06dc9dbceef8bc6bcd6", "committedDate": "2020-05-12T11:11:07Z", "message": "Deprecate WebSphereCDIExtension"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMTg2MTI0", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#pullrequestreview-410186124", "createdAt": "2020-05-12T15:54:23Z", "commit": {"oid": "ec608f76798ac644e8c1b70326bd74aee89b0625"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNTo1NDoyM1rOGUNhLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjoxMjowMVrOGUOSeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg0NjE4OA==", "bodyText": "Remove the first sentence, this is not a marker interface.\n(A marker interface is an interface with no methods)", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#discussion_r423846188", "createdAt": "2020-05-12T15:54:23Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.cdi.interfaces/src/com/ibm/wsspi/cdi/extension/WebSphereCDIExtensionMetaData.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.cdi.spi;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.enterprise.inject.spi.Extension;\n+\n+/**\n+ * This is a *marker* interface for CDI Runtime extensions. Liberty features that wish to extend CDI will need to\n+ * register a service under this interface.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec608f76798ac644e8c1b70326bd74aee89b0625"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg0NjI2MA==", "bodyText": "Use {@code myMethod()} around method names in the javadoc.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * To use this class you must implement one of the two methods. If you implement getBeanClasses() all classes returned by that\n          \n          \n            \n             * method will be registered with CDI and may be used normally by application code. If you implement getExtensions() then\n          \n          \n            \n             * all classes returned by that method will be treated as CDI extensions and run when creating the CDI container for each application.\n          \n          \n            \n             * To use this class you must implement one of the two methods. If you implement getBeanClasses() all classes returned by that\n          \n          \n            \n             * method will be registered with CDI and may be used normally by application code. If you implement getExtensions() then\n          \n          \n            \n             * all classes returned by that method will be treated as CDI extensions any observer methods for container lifecycle events will be called when creating the CDI container for each application.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#discussion_r423846260", "createdAt": "2020-05-12T15:54:30Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.cdi.interfaces/src/com/ibm/wsspi/cdi/extension/WebSphereCDIExtensionMetaData.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.cdi.spi;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.enterprise.inject.spi.Extension;\n+\n+/**\n+ * This is a *marker* interface for CDI Runtime extensions. Liberty features that wish to extend CDI will need to\n+ * register a service under this interface.\n+ *\n+ * To use this class you must implement one of the two methods. If you implement getBeanClasses() all classes returned by that\n+ * method will be registered with CDI and may be used normally by application code. If you implement getExtensions() then\n+ * all classes returned by that method will be treated as CDI extensions and run when creating the CDI container for each application.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec608f76798ac644e8c1b70326bd74aee89b0625"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg0NjQzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Classes returned from getExtensions() must implement javax.enterprise.inject.spi.Extension. They do *not* and should not be listed in a\n          \n          \n            \n             * META-INF/services file. It is best practice to not put CDIExtensionMetaData and javax.enterprise.inject.spi.Extension on the same class\n          \n          \n            \n             * as that would result in CDI and OSGI independently instantiating the class. Even though it is unlikely for the two instances to conflict, \n          \n          \n            \n             * it is best to keep the OSGI service and CDI extension separate. \n          \n          \n            \n             * Classes returned from {@code getExtensions()} must implement {@link javax.enterprise.inject.spi.Extension} but do <b>not</b> need to be listed in a \n          \n          \n            \n             * {@code META-INF/services} file.\n          \n          \n            \n             * \n          \n          \n            \n             * It is best practise that one class should not implement both this interface and {@link javax.enterprise.inject.spi.Extension}\n          \n          \n            \n             * as that would result in CDI and OSGI independently instantiating the class. Even though it is unlikely for the two instances to conflict, \n          \n          \n            \n             * it is best to keep the OSGI service and CDI extension separate.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#discussion_r423846436", "createdAt": "2020-05-12T15:54:45Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.cdi.interfaces/src/com/ibm/wsspi/cdi/extension/WebSphereCDIExtensionMetaData.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.cdi.spi;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.enterprise.inject.spi.Extension;\n+\n+/**\n+ * This is a *marker* interface for CDI Runtime extensions. Liberty features that wish to extend CDI will need to\n+ * register a service under this interface.\n+ *\n+ * To use this class you must implement one of the two methods. If you implement getBeanClasses() all classes returned by that\n+ * method will be registered with CDI and may be used normally by application code. If you implement getExtensions() then\n+ * all classes returned by that method will be treated as CDI extensions and run when creating the CDI container for each application.\n+ *\n+ * Classes returned from getExtensions() must implement javax.enterprise.inject.spi.Extension. They do *not* and should not be listed in a\n+ * META-INF/services file. It is best practice to not put CDIExtensionMetaData and javax.enterprise.inject.spi.Extension on the same class\n+ * as that would result in CDI and OSGI independently instantiating the class. Even though it is unlikely for the two instances to conflict, \n+ * it is best to keep the OSGI service and CDI extension separate. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec608f76798ac644e8c1b70326bd74aee89b0625"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg0NjQ3NA==", "bodyText": "I don't think we need to explicitly call out that service properties aren't required. That's fairly unusual so stating it could be confusing for users who haven't used the old internal interface and this class has enough documentation and examples in it that people who are familiar with the old interface shouldn't be tempted to randomly add them.\nI'd also list the use of the @Component annotation as an example (since there are other ways to register the service) and add configuraitonPolicy=IGNORE as there's no configuration, so adding that is best practise.\nLastly, code should always be in {@code } tags so that it formats properly when rendered to html.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * The class that implements this interface should be annotated with @Component(service = WebSphereCDIExtensionMetaData.class). There are no\n          \n          \n            \n             * other properties that can be included in the Component annotation.\n          \n          \n            \n             * The class that implements this interface should be registered as an OSGi service, for example by annotating it with {@code @Component(service = WebSphereCDIExtensionMetaData.class, configurationPolicy=IGNORE)}.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#discussion_r423846474", "createdAt": "2020-05-12T15:54:48Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.cdi.interfaces/src/com/ibm/wsspi/cdi/extension/WebSphereCDIExtensionMetaData.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.cdi.spi;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.enterprise.inject.spi.Extension;\n+\n+/**\n+ * This is a *marker* interface for CDI Runtime extensions. Liberty features that wish to extend CDI will need to\n+ * register a service under this interface.\n+ *\n+ * To use this class you must implement one of the two methods. If you implement getBeanClasses() all classes returned by that\n+ * method will be registered with CDI and may be used normally by application code. If you implement getExtensions() then\n+ * all classes returned by that method will be treated as CDI extensions and run when creating the CDI container for each application.\n+ *\n+ * Classes returned from getExtensions() must implement javax.enterprise.inject.spi.Extension. They do *not* and should not be listed in a\n+ * META-INF/services file. It is best practice to not put CDIExtensionMetaData and javax.enterprise.inject.spi.Extension on the same class\n+ * as that would result in CDI and OSGI independently instantiating the class. Even though it is unlikely for the two instances to conflict, \n+ * it is best to keep the OSGI service and CDI extension separate. \n+ *\n+ * The class that implements this interface should be annotated with @Component(service = WebSphereCDIExtensionMetaData.class). There are no\n+ * other properties that can be included in the Component annotation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec608f76798ac644e8c1b70326bd74aee89b0625"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1MTA2Mw==", "bodyText": "Javadoc's rendering sucks, I think you need to do this here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @Component(service = WebSphereCDIExtensionMetaData.class)\n          \n          \n            \n             * public class SPIMetaData implements WebSphereCDIExtensionMetaData {\n          \n          \n            \n             *\n          \n          \n            \n             *     @Override\n          \n          \n            \n             *     public Set<Class<?>> getBeanClasses() {\n          \n          \n            \n             *         Set<Class<?>> beans = new HashSet<Class<?>>();\n          \n          \n            \n             *         //This will register a producer class and expose it's produced beans to applications\n          \n          \n            \n             *         beans.add(ClassSPIRegisteredProducer.class);\n          \n          \n            \n             *     }\n          \n          \n            \n             * }\n          \n          \n            \n             * <pre>\n          \n          \n            \n             * @Component(service = WebSphereCDIExtensionMetaData.class)\n          \n          \n            \n             * public class SPIMetaData implements WebSphereCDIExtensionMetaData {\n          \n          \n            \n             *\n          \n          \n            \n             *     @Override\n          \n          \n            \n             *     public Set&lt;Class&lt;?&gt;&gt; getBeanClasses() {\n          \n          \n            \n             *         Set&lt;Class&lt;?&gt;&gt; beans = new HashSet&lt;Class&lt;?&gt;&gt;();\n          \n          \n            \n             *         //This will register a producer class and expose it's produced beans to applications\n          \n          \n            \n             *         beans.add(ClassSPIRegisteredProducer.class);\n          \n          \n            \n             *     }\n          \n          \n            \n             * }\n          \n          \n            \n             * </pre>\n          \n      \n    \n    \n  \n\nNeed to check this renders correctly when generated as html.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#discussion_r423851063", "createdAt": "2020-05-12T16:00:53Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.cdi.interfaces/src/com/ibm/wsspi/cdi/extension/WebSphereCDIExtensionMetaData.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.cdi.spi;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.enterprise.inject.spi.Extension;\n+\n+/**\n+ * This is a *marker* interface for CDI Runtime extensions. Liberty features that wish to extend CDI will need to\n+ * register a service under this interface.\n+ *\n+ * To use this class you must implement one of the two methods. If you implement getBeanClasses() all classes returned by that\n+ * method will be registered with CDI and may be used normally by application code. If you implement getExtensions() then\n+ * all classes returned by that method will be treated as CDI extensions and run when creating the CDI container for each application.\n+ *\n+ * Classes returned from getExtensions() must implement javax.enterprise.inject.spi.Extension. They do *not* and should not be listed in a\n+ * META-INF/services file. It is best practice to not put CDIExtensionMetaData and javax.enterprise.inject.spi.Extension on the same class\n+ * as that would result in CDI and OSGI independently instantiating the class. Even though it is unlikely for the two instances to conflict, \n+ * it is best to keep the OSGI service and CDI extension separate. \n+ *\n+ * The class that implements this interface should be annotated with @Component(service = WebSphereCDIExtensionMetaData.class). There are no\n+ * other properties that can be included in the Component annotation.\n+ *\n+ * Here is a worked example of a complete WebSphereCDIExtensionMetaData implementation.\n+ *\n+ * @Component(service = WebSphereCDIExtensionMetaData.class)\n+ * public class SPIMetaData implements WebSphereCDIExtensionMetaData {\n+ *\n+ *     @Override\n+ *     public Set<Class<?>> getBeanClasses() {\n+ *         Set<Class<?>> beans = new HashSet<Class<?>>();\n+ *         //This will register a producer class and expose it's produced beans to applications\n+ *         beans.add(ClassSPIRegisteredProducer.class);\n+ *     }\n+ * }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec608f76798ac644e8c1b70326bd74aee89b0625"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1MTQ3MA==", "bodyText": "Unsure whether we can reference our test code from our SPI documentation.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#discussion_r423851470", "createdAt": "2020-05-12T16:01:28Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.cdi.interfaces/src/com/ibm/wsspi/cdi/extension/WebSphereCDIExtensionMetaData.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.cdi.spi;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.enterprise.inject.spi.Extension;\n+\n+/**\n+ * This is a *marker* interface for CDI Runtime extensions. Liberty features that wish to extend CDI will need to\n+ * register a service under this interface.\n+ *\n+ * To use this class you must implement one of the two methods. If you implement getBeanClasses() all classes returned by that\n+ * method will be registered with CDI and may be used normally by application code. If you implement getExtensions() then\n+ * all classes returned by that method will be treated as CDI extensions and run when creating the CDI container for each application.\n+ *\n+ * Classes returned from getExtensions() must implement javax.enterprise.inject.spi.Extension. They do *not* and should not be listed in a\n+ * META-INF/services file. It is best practice to not put CDIExtensionMetaData and javax.enterprise.inject.spi.Extension on the same class\n+ * as that would result in CDI and OSGI independently instantiating the class. Even though it is unlikely for the two instances to conflict, \n+ * it is best to keep the OSGI service and CDI extension separate. \n+ *\n+ * The class that implements this interface should be annotated with @Component(service = WebSphereCDIExtensionMetaData.class). There are no\n+ * other properties that can be included in the Component annotation.\n+ *\n+ * Here is a worked example of a complete WebSphereCDIExtensionMetaData implementation.\n+ *\n+ * @Component(service = WebSphereCDIExtensionMetaData.class)\n+ * public class SPIMetaData implements WebSphereCDIExtensionMetaData {\n+ *\n+ *     @Override\n+ *     public Set<Class<?>> getBeanClasses() {\n+ *         Set<Class<?>> beans = new HashSet<Class<?>>();\n+ *         //This will register a producer class and expose it's produced beans to applications\n+ *         beans.add(ClassSPIRegisteredProducer.class);\n+ *     }\n+ * }\n+ *\n+ * A complete bundle that uses WebSphereCDIExtensionMetaData to register CDI beans can be found at:\n+ * com.ibm.ws.cdi.extension_fat/test-bundles/cdi.spi.extension/\n+ *\n+ * Note the files com.ibm.ws.cdi.extension_fat/cdi_spi_extension.bnd and com.ibm.ws.cdi.extension_fat/publish/features/cdi.spi.extension.mf\n+ * both of which are needed to include a bundle into liberty. com.ibm.ws.cdi.extension_fat/test-applications/SPIExtension.war/ contains a\n+ * simple app that injects the beans provided by cdi.spi.extension.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec608f76798ac644e8c1b70326bd74aee89b0625"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1NTYyMg==", "bodyText": "I think we need a better explanation of what \"registered with CDI\" means.\nE.g. Are the returned classes always treated as beans, or are they only treated as beans if they have a bean defining annotation.\nWould it be accurate to say \"classes returned from this method will be found by CDI during type discovery so that they can then be used as beans (or interceptors etc. if annotated as such) by the application.\"", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#discussion_r423855622", "createdAt": "2020-05-12T16:07:35Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.cdi.interfaces/src/com/ibm/wsspi/cdi/extension/WebSphereCDIExtensionMetaData.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.cdi.spi;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.enterprise.inject.spi.Extension;\n+\n+/**\n+ * This is a *marker* interface for CDI Runtime extensions. Liberty features that wish to extend CDI will need to\n+ * register a service under this interface.\n+ *\n+ * To use this class you must implement one of the two methods. If you implement getBeanClasses() all classes returned by that\n+ * method will be registered with CDI and may be used normally by application code. If you implement getExtensions() then\n+ * all classes returned by that method will be treated as CDI extensions and run when creating the CDI container for each application.\n+ *\n+ * Classes returned from getExtensions() must implement javax.enterprise.inject.spi.Extension. They do *not* and should not be listed in a\n+ * META-INF/services file. It is best practice to not put CDIExtensionMetaData and javax.enterprise.inject.spi.Extension on the same class\n+ * as that would result in CDI and OSGI independently instantiating the class. Even though it is unlikely for the two instances to conflict, \n+ * it is best to keep the OSGI service and CDI extension separate. \n+ *\n+ * The class that implements this interface should be annotated with @Component(service = WebSphereCDIExtensionMetaData.class). There are no\n+ * other properties that can be included in the Component annotation.\n+ *\n+ * Here is a worked example of a complete WebSphereCDIExtensionMetaData implementation.\n+ *\n+ * @Component(service = WebSphereCDIExtensionMetaData.class)\n+ * public class SPIMetaData implements WebSphereCDIExtensionMetaData {\n+ *\n+ *     @Override\n+ *     public Set<Class<?>> getBeanClasses() {\n+ *         Set<Class<?>> beans = new HashSet<Class<?>>();\n+ *         //This will register a producer class and expose it's produced beans to applications\n+ *         beans.add(ClassSPIRegisteredProducer.class);\n+ *     }\n+ * }\n+ *\n+ * A complete bundle that uses WebSphereCDIExtensionMetaData to register CDI beans can be found at:\n+ * com.ibm.ws.cdi.extension_fat/test-bundles/cdi.spi.extension/\n+ *\n+ * Note the files com.ibm.ws.cdi.extension_fat/cdi_spi_extension.bnd and com.ibm.ws.cdi.extension_fat/publish/features/cdi.spi.extension.mf\n+ * both of which are needed to include a bundle into liberty. com.ibm.ws.cdi.extension_fat/test-applications/SPIExtension.war/ contains a\n+ * simple app that injects the beans provided by cdi.spi.extension.\n+ */\n+\n+public interface CDIExtensionMetadata {\n+\n+    /**\n+     * All classes returned by this method will be registered with CDI. All classes must be in the same archive as your WebSphereCDIExtensionMetaData.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec608f76798ac644e8c1b70326bd74aee89b0625"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1NzAxNQ==", "bodyText": "I'm not sure we need to say this as the method signature states that only classes extending Extension can be returned.\nIf we do want to say this, use\n@throws IllegalArgumentException if a class returned by this method does not implement javax.enterprise.inject.spi.Extension", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#discussion_r423857015", "createdAt": "2020-05-12T16:09:31Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.cdi.interfaces/src/com/ibm/wsspi/cdi/extension/WebSphereCDIExtensionMetaData.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.cdi.spi;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.enterprise.inject.spi.Extension;\n+\n+/**\n+ * This is a *marker* interface for CDI Runtime extensions. Liberty features that wish to extend CDI will need to\n+ * register a service under this interface.\n+ *\n+ * To use this class you must implement one of the two methods. If you implement getBeanClasses() all classes returned by that\n+ * method will be registered with CDI and may be used normally by application code. If you implement getExtensions() then\n+ * all classes returned by that method will be treated as CDI extensions and run when creating the CDI container for each application.\n+ *\n+ * Classes returned from getExtensions() must implement javax.enterprise.inject.spi.Extension. They do *not* and should not be listed in a\n+ * META-INF/services file. It is best practice to not put CDIExtensionMetaData and javax.enterprise.inject.spi.Extension on the same class\n+ * as that would result in CDI and OSGI independently instantiating the class. Even though it is unlikely for the two instances to conflict, \n+ * it is best to keep the OSGI service and CDI extension separate. \n+ *\n+ * The class that implements this interface should be annotated with @Component(service = WebSphereCDIExtensionMetaData.class). There are no\n+ * other properties that can be included in the Component annotation.\n+ *\n+ * Here is a worked example of a complete WebSphereCDIExtensionMetaData implementation.\n+ *\n+ * @Component(service = WebSphereCDIExtensionMetaData.class)\n+ * public class SPIMetaData implements WebSphereCDIExtensionMetaData {\n+ *\n+ *     @Override\n+ *     public Set<Class<?>> getBeanClasses() {\n+ *         Set<Class<?>> beans = new HashSet<Class<?>>();\n+ *         //This will register a producer class and expose it's produced beans to applications\n+ *         beans.add(ClassSPIRegisteredProducer.class);\n+ *     }\n+ * }\n+ *\n+ * A complete bundle that uses WebSphereCDIExtensionMetaData to register CDI beans can be found at:\n+ * com.ibm.ws.cdi.extension_fat/test-bundles/cdi.spi.extension/\n+ *\n+ * Note the files com.ibm.ws.cdi.extension_fat/cdi_spi_extension.bnd and com.ibm.ws.cdi.extension_fat/publish/features/cdi.spi.extension.mf\n+ * both of which are needed to include a bundle into liberty. com.ibm.ws.cdi.extension_fat/test-applications/SPIExtension.war/ contains a\n+ * simple app that injects the beans provided by cdi.spi.extension.\n+ */\n+\n+public interface CDIExtensionMetadata {\n+\n+    /**\n+     * All classes returned by this method will be registered with CDI. All classes must be in the same archive as your WebSphereCDIExtensionMetaData.\n+     */\n+    default public Set<Class<?>> getBeanClasses() {\n+        return Collections.emptySet();\n+    }\n+\n+    /**\n+     * All classes returned by this method will be treated as CDI extensions.\n+     *\n+     * If a class in returned by this method does not implement javax.enterprise.inject.spi.Extension an IllegalArguementException \n+     * is thrown.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec608f76798ac644e8c1b70326bd74aee89b0625"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1NzU1Mw==", "bodyText": "You need to use <p> instead of a blank line to get a new paragraph when writing javadoc that's going to be rendered as HTML (which this will because it's SPI).", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#discussion_r423857553", "createdAt": "2020-05-12T16:10:17Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.cdi.interfaces/src/com/ibm/wsspi/cdi/extension/WebSphereCDIExtensionMetaData.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.cdi.spi;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.enterprise.inject.spi.Extension;\n+\n+/**\n+ * This is a *marker* interface for CDI Runtime extensions. Liberty features that wish to extend CDI will need to\n+ * register a service under this interface.\n+ *\n+ * To use this class you must implement one of the two methods. If you implement getBeanClasses() all classes returned by that\n+ * method will be registered with CDI and may be used normally by application code. If you implement getExtensions() then\n+ * all classes returned by that method will be treated as CDI extensions and run when creating the CDI container for each application.\n+ *\n+ * Classes returned from getExtensions() must implement javax.enterprise.inject.spi.Extension. They do *not* and should not be listed in a\n+ * META-INF/services file. It is best practice to not put CDIExtensionMetaData and javax.enterprise.inject.spi.Extension on the same class\n+ * as that would result in CDI and OSGI independently instantiating the class. Even though it is unlikely for the two instances to conflict, \n+ * it is best to keep the OSGI service and CDI extension separate. \n+ *\n+ * The class that implements this interface should be annotated with @Component(service = WebSphereCDIExtensionMetaData.class). There are no\n+ * other properties that can be included in the Component annotation.\n+ *\n+ * Here is a worked example of a complete WebSphereCDIExtensionMetaData implementation.\n+ *\n+ * @Component(service = WebSphereCDIExtensionMetaData.class)\n+ * public class SPIMetaData implements WebSphereCDIExtensionMetaData {\n+ *\n+ *     @Override\n+ *     public Set<Class<?>> getBeanClasses() {\n+ *         Set<Class<?>> beans = new HashSet<Class<?>>();\n+ *         //This will register a producer class and expose it's produced beans to applications\n+ *         beans.add(ClassSPIRegisteredProducer.class);\n+ *     }\n+ * }\n+ *\n+ * A complete bundle that uses WebSphereCDIExtensionMetaData to register CDI beans can be found at:\n+ * com.ibm.ws.cdi.extension_fat/test-bundles/cdi.spi.extension/\n+ *\n+ * Note the files com.ibm.ws.cdi.extension_fat/cdi_spi_extension.bnd and com.ibm.ws.cdi.extension_fat/publish/features/cdi.spi.extension.mf\n+ * both of which are needed to include a bundle into liberty. com.ibm.ws.cdi.extension_fat/test-applications/SPIExtension.war/ contains a\n+ * simple app that injects the beans provided by cdi.spi.extension.\n+ */\n+\n+public interface CDIExtensionMetadata {\n+\n+    /**\n+     * All classes returned by this method will be registered with CDI. All classes must be in the same archive as your WebSphereCDIExtensionMetaData.\n+     */\n+    default public Set<Class<?>> getBeanClasses() {\n+        return Collections.emptySet();\n+    }\n+\n+    /**\n+     * All classes returned by this method will be treated as CDI extensions.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec608f76798ac644e8c1b70326bd74aee89b0625"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1NzY2Ng==", "bodyText": "You need to use <p> instead of a blank line to get a new paragraph when writing javadoc that's going to be rendered as HTML (which this will because it's SPI).", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#discussion_r423857666", "createdAt": "2020-05-12T16:10:26Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.cdi.interfaces/src/com/ibm/wsspi/cdi/extension/WebSphereCDIExtensionMetaData.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.cdi.spi;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.enterprise.inject.spi.Extension;\n+\n+/**\n+ * This is a *marker* interface for CDI Runtime extensions. Liberty features that wish to extend CDI will need to\n+ * register a service under this interface.\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec608f76798ac644e8c1b70326bd74aee89b0625"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1ODgxMA==", "bodyText": "Maybe something like \"Override this method if you need to observe CDI container lifecycle events to do something more advanced that just providing additional bean classes.\"", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#discussion_r423858810", "createdAt": "2020-05-12T16:12:01Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.cdi.interfaces/src/com/ibm/wsspi/cdi/extension/WebSphereCDIExtensionMetaData.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.wsspi.cdi.extension;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.enterprise.inject.spi.Extension;\n+\n+/**\n+ * This is a *marker* interface for Weld Runtime extensions. All runtime extensions need to register a service\n+ * under this interface. This bundle will find all of the services and then get hold of the bundle classloader and\n+ * pass onto Weld.\n+ *\n+ * To use this class you must implement one of the two methods. If you implement CDIExtensionClasses then it must\n+ * not return the class annotated WebSphereCDIExtensionMetaData.\n+ *\n+ * The class that implements this interface should be annotated with @Component(service = WebSphereCDIExtensionMetaData.class)\n+ *\n+ * For example:\n+ *\n+ * @Component(service = WebSphereCDIExtensionMetaData.class)\n+ *                    public class JwtCDIExtension implements WebSphereCDIExtensionMetaData { ... }\n+ */\n+\n+public interface WebSphereCDIExtensionMetaData {\n+\n+    /**\n+     * All classes returned by this method will be treated as CDI beans. All classes must be in the same archive as your WebSphereCDIExtensionMetaData.\n+     */\n+    default public Set<Class<?>> getBeanClasses() {\n+        return Collections.emptySet();\n+    }\n+\n+    /**\n+     * All classes returned by this method will be treated as CDI extensions.\n+     *\n+     * If a class in returned by this method implements WebSphereCDIExtensionMetaData an IllegalArguementException is thrown.\n+     * This is because it will result in OSGI and Weld independently instantiating the class, while it is unlikely for the\n+     * two instances to conflict, it is best to keep the OSGI service and CDI extension separate.\n+     */\n+    public default Set<Class<? extends Extension>> getExtensions() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM0MDUyMA=="}, "originalCommit": {"oid": "b0b8502befb895d8c4ae91a6c0d15d89e22e3624"}, "originalPosition": 50}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a548e04c1fc16dfaa48d06dc9dbceef8bc6bcd6", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/3a548e04c1fc16dfaa48d06dc9dbceef8bc6bcd6", "committedDate": "2020-05-12T11:11:07Z", "message": "Deprecate WebSphereCDIExtension"}, "afterCommit": {"oid": "a29a7b3556f5ad2759941d221419afb841c961da", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/a29a7b3556f5ad2759941d221419afb841c961da", "committedDate": "2020-05-12T16:45:31Z", "message": "New test for CDI Extension SPI"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a29a7b3556f5ad2759941d221419afb841c961da", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/a29a7b3556f5ad2759941d221419afb841c961da", "committedDate": "2020-05-12T16:45:31Z", "message": "New test for CDI Extension SPI"}, "afterCommit": {"oid": "ceefbf244307a2b350dad4325c1172844f1e38e6", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/ceefbf244307a2b350dad4325c1172844f1e38e6", "committedDate": "2020-05-12T16:48:12Z", "message": "New test for CDI Extension SPI"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ceefbf244307a2b350dad4325c1172844f1e38e6", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/ceefbf244307a2b350dad4325c1172844f1e38e6", "committedDate": "2020-05-12T16:48:12Z", "message": "New test for CDI Extension SPI"}, "afterCommit": {"oid": "02976250417e171148b63d38e9511358ea4911b6", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/02976250417e171148b63d38e9511358ea4911b6", "committedDate": "2020-05-12T16:53:06Z", "message": "New test for CDI Extension SPI"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "02976250417e171148b63d38e9511358ea4911b6", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/02976250417e171148b63d38e9511358ea4911b6", "committedDate": "2020-05-12T16:53:06Z", "message": "New test for CDI Extension SPI"}, "afterCommit": {"oid": "cd0c67341a3e2df8bec01566f33800a54b84c7f9", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/cd0c67341a3e2df8bec01566f33800a54b84c7f9", "committedDate": "2020-05-12T16:56:12Z", "message": "New test for CDI Extension SPI"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cd0c67341a3e2df8bec01566f33800a54b84c7f9", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/cd0c67341a3e2df8bec01566f33800a54b84c7f9", "committedDate": "2020-05-12T16:56:12Z", "message": "New test for CDI Extension SPI"}, "afterCommit": {"oid": "ba5194a4f492f234520bf48114a59ae5f24fb9a3", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/ba5194a4f492f234520bf48114a59ae5f24fb9a3", "committedDate": "2020-05-12T17:03:22Z", "message": "New test for CDI Extension SPI"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ba5194a4f492f234520bf48114a59ae5f24fb9a3", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/ba5194a4f492f234520bf48114a59ae5f24fb9a3", "committedDate": "2020-05-12T17:03:22Z", "message": "New test for CDI Extension SPI"}, "afterCommit": {"oid": "d2451d03883ec42816e1f902b414ffda03028735", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/d2451d03883ec42816e1f902b414ffda03028735", "committedDate": "2020-05-12T17:06:58Z", "message": "New test for CDI Extension SPI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d9f3d5a4f92e69fab8f4b401c72b2b79acda3c7", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/2d9f3d5a4f92e69fab8f4b401c72b2b79acda3c7", "committedDate": "2020-05-12T17:20:58Z", "message": "create new CDIExtensionMetaData SPI"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d2451d03883ec42816e1f902b414ffda03028735", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/d2451d03883ec42816e1f902b414ffda03028735", "committedDate": "2020-05-12T17:06:58Z", "message": "New test for CDI Extension SPI"}, "afterCommit": {"oid": "dc8c9f147101410efef0ea843e74d5d3016c07a6", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/dc8c9f147101410efef0ea843e74d5d3016c07a6", "committedDate": "2020-05-12T17:21:49Z", "message": "New test for CDI Extension SPI"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMjY1MjA3", "url": "https://github.com/OpenLiberty/open-liberty/pull/11943#pullrequestreview-410265207", "createdAt": "2020-05-12T17:27:27Z", "commit": {"oid": "dc8c9f147101410efef0ea843e74d5d3016c07a6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f36e7f02d89a549b04f3c6eaaa3ca99903450d28", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/f36e7f02d89a549b04f3c6eaaa3ca99903450d28", "committedDate": "2020-05-12T17:29:33Z", "message": "Deprecate WebSphereCDIExtension"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "615ec969c78fe5e8304bc82f6d899d7c45569e70", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/615ec969c78fe5e8304bc82f6d899d7c45569e70", "committedDate": "2020-05-13T09:12:46Z", "message": "New test for CDI Extension SPI"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dc8c9f147101410efef0ea843e74d5d3016c07a6", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/dc8c9f147101410efef0ea843e74d5d3016c07a6", "committedDate": "2020-05-12T17:21:49Z", "message": "New test for CDI Extension SPI"}, "afterCommit": {"oid": "615ec969c78fe5e8304bc82f6d899d7c45569e70", "author": {"user": {"login": "benjamin-confino", "name": "Benjamin Confino"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/615ec969c78fe5e8304bc82f6d899d7c45569e70", "committedDate": "2020-05-13T09:12:46Z", "message": "New test for CDI Extension SPI"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2702, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}