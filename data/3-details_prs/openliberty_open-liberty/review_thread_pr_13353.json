{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MTkyMTQx", "number": 13353, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDo1Njo0NFrOEV_XTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDo1Njo0NFrOEV_XTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDkzNzA4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.kerberos.auth/src/com/ibm/ws/security/kerberos/auth/KerberosService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDo1Njo0NFrOG9D_oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOTozMzo1MlrOG9lkkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY4MTc2MA==", "bodyText": "I just wonder why we do not use WSCallbackHandlerImpl.java instead of Krb5CallbackHandler?", "url": "https://github.com/OpenLiberty/open-liberty/pull/13353#discussion_r466681760", "createdAt": "2020-08-06T20:56:44Z", "author": {"login": "utle"}, "path": "dev/com.ibm.ws.security.kerberos.auth/src/com/ibm/ws/security/kerberos/auth/KerberosService.java", "diffHunk": "@@ -110,28 +123,48 @@ public Path getKeytab() {\n      * @return A valid subject for the supplied principal\n      */\n     public Subject getOrCreateSubject(String principal) throws LoginException {\n+        return getOrCreateSubject(principal, null);\n+    }\n+\n+    /**\n+     * Checks the Subject cache for an existing Subject matching the supplied principal.\n+     * A simple LRU cache is used to store cache Subjects\n+     * If a valid subject is not found in the cache, then a new Kerberos login is performed and\n+     * the resulting Subject is cached.\n+     *\n+     * @param principal The principal to obtain a subject for\n+     * @param pass      The password to be used via CallbackHandler. This will only be used if no password\n+     *                      is found in the credential cache or keytab files first.\n+     * @return A valid subject for the supplied principal\n+     */\n+    public Subject getOrCreateSubject(String principal, SerializableProtectedString pass) throws LoginException {\n         KerberosPrincipal krb5Principal = new KerberosPrincipal(principal);\n         Subject cachedSubject = subjectCache.get(krb5Principal);\n         if (cachedSubject != null) {\n             return cachedSubject;\n         }\n \n-        Subject createdSubject = doKerberosLogin(principal);\n+        Subject createdSubject = doKerberosLogin(principal, pass);\n \n         subjectCache.put(krb5Principal, createdSubject);\n         return createdSubject;\n     }\n \n-    private Subject doKerberosLogin(String principal) throws LoginException {\n+    private Subject doKerberosLogin(String principal, SerializableProtectedString pass) throws LoginException {\n         Subject subject = new Subject();\n         Krb5LoginModuleWrapper krb5 = new Krb5LoginModuleWrapper();\n         Map<String, String> options = new HashMap<String, String>();\n         Map<String, Object> sharedState = new HashMap<String, Object>();\n+        CallbackHandler callback = pass == null ? null : new Krb5CallbackHandler(pass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86698057a3062f0e5005bf6f5f72e80832689eba"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjczODAzNw==", "bodyText": "I didn't know we had WSCallbackHandlerImpl, I could use that but it looks like we'd need to also supply a username for that callback, and here I just want to supply a password specifically for PasswordCallbacks", "url": "https://github.com/OpenLiberty/open-liberty/pull/13353#discussion_r466738037", "createdAt": "2020-08-06T23:25:49Z", "author": {"login": "aguibert"}, "path": "dev/com.ibm.ws.security.kerberos.auth/src/com/ibm/ws/security/kerberos/auth/KerberosService.java", "diffHunk": "@@ -110,28 +123,48 @@ public Path getKeytab() {\n      * @return A valid subject for the supplied principal\n      */\n     public Subject getOrCreateSubject(String principal) throws LoginException {\n+        return getOrCreateSubject(principal, null);\n+    }\n+\n+    /**\n+     * Checks the Subject cache for an existing Subject matching the supplied principal.\n+     * A simple LRU cache is used to store cache Subjects\n+     * If a valid subject is not found in the cache, then a new Kerberos login is performed and\n+     * the resulting Subject is cached.\n+     *\n+     * @param principal The principal to obtain a subject for\n+     * @param pass      The password to be used via CallbackHandler. This will only be used if no password\n+     *                      is found in the credential cache or keytab files first.\n+     * @return A valid subject for the supplied principal\n+     */\n+    public Subject getOrCreateSubject(String principal, SerializableProtectedString pass) throws LoginException {\n         KerberosPrincipal krb5Principal = new KerberosPrincipal(principal);\n         Subject cachedSubject = subjectCache.get(krb5Principal);\n         if (cachedSubject != null) {\n             return cachedSubject;\n         }\n \n-        Subject createdSubject = doKerberosLogin(principal);\n+        Subject createdSubject = doKerberosLogin(principal, pass);\n \n         subjectCache.put(krb5Principal, createdSubject);\n         return createdSubject;\n     }\n \n-    private Subject doKerberosLogin(String principal) throws LoginException {\n+    private Subject doKerberosLogin(String principal, SerializableProtectedString pass) throws LoginException {\n         Subject subject = new Subject();\n         Krb5LoginModuleWrapper krb5 = new Krb5LoginModuleWrapper();\n         Map<String, String> options = new HashMap<String, String>();\n         Map<String, Object> sharedState = new HashMap<String, Object>();\n+        CallbackHandler callback = pass == null ? null : new Krb5CallbackHandler(pass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY4MTc2MA=="}, "originalCommit": {"oid": "86698057a3062f0e5005bf6f5f72e80832689eba"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2MjI2NA==", "bodyText": "I think you can supply null for user name", "url": "https://github.com/OpenLiberty/open-liberty/pull/13353#discussion_r466762264", "createdAt": "2020-08-07T00:55:42Z", "author": {"login": "utle"}, "path": "dev/com.ibm.ws.security.kerberos.auth/src/com/ibm/ws/security/kerberos/auth/KerberosService.java", "diffHunk": "@@ -110,28 +123,48 @@ public Path getKeytab() {\n      * @return A valid subject for the supplied principal\n      */\n     public Subject getOrCreateSubject(String principal) throws LoginException {\n+        return getOrCreateSubject(principal, null);\n+    }\n+\n+    /**\n+     * Checks the Subject cache for an existing Subject matching the supplied principal.\n+     * A simple LRU cache is used to store cache Subjects\n+     * If a valid subject is not found in the cache, then a new Kerberos login is performed and\n+     * the resulting Subject is cached.\n+     *\n+     * @param principal The principal to obtain a subject for\n+     * @param pass      The password to be used via CallbackHandler. This will only be used if no password\n+     *                      is found in the credential cache or keytab files first.\n+     * @return A valid subject for the supplied principal\n+     */\n+    public Subject getOrCreateSubject(String principal, SerializableProtectedString pass) throws LoginException {\n         KerberosPrincipal krb5Principal = new KerberosPrincipal(principal);\n         Subject cachedSubject = subjectCache.get(krb5Principal);\n         if (cachedSubject != null) {\n             return cachedSubject;\n         }\n \n-        Subject createdSubject = doKerberosLogin(principal);\n+        Subject createdSubject = doKerberosLogin(principal, pass);\n \n         subjectCache.put(krb5Principal, createdSubject);\n         return createdSubject;\n     }\n \n-    private Subject doKerberosLogin(String principal) throws LoginException {\n+    private Subject doKerberosLogin(String principal, SerializableProtectedString pass) throws LoginException {\n         Subject subject = new Subject();\n         Krb5LoginModuleWrapper krb5 = new Krb5LoginModuleWrapper();\n         Map<String, String> options = new HashMap<String, String>();\n         Map<String, Object> sharedState = new HashMap<String, Object>();\n+        CallbackHandler callback = pass == null ? null : new Krb5CallbackHandler(pass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY4MTc2MA=="}, "originalCommit": {"oid": "86698057a3062f0e5005bf6f5f72e80832689eba"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIzMTg4OA==", "bodyText": "will change this to WSCallbackHandlerImpl in a follow-on item", "url": "https://github.com/OpenLiberty/open-liberty/pull/13353#discussion_r467231888", "createdAt": "2020-08-07T19:33:52Z", "author": {"login": "aguibert"}, "path": "dev/com.ibm.ws.security.kerberos.auth/src/com/ibm/ws/security/kerberos/auth/KerberosService.java", "diffHunk": "@@ -110,28 +123,48 @@ public Path getKeytab() {\n      * @return A valid subject for the supplied principal\n      */\n     public Subject getOrCreateSubject(String principal) throws LoginException {\n+        return getOrCreateSubject(principal, null);\n+    }\n+\n+    /**\n+     * Checks the Subject cache for an existing Subject matching the supplied principal.\n+     * A simple LRU cache is used to store cache Subjects\n+     * If a valid subject is not found in the cache, then a new Kerberos login is performed and\n+     * the resulting Subject is cached.\n+     *\n+     * @param principal The principal to obtain a subject for\n+     * @param pass      The password to be used via CallbackHandler. This will only be used if no password\n+     *                      is found in the credential cache or keytab files first.\n+     * @return A valid subject for the supplied principal\n+     */\n+    public Subject getOrCreateSubject(String principal, SerializableProtectedString pass) throws LoginException {\n         KerberosPrincipal krb5Principal = new KerberosPrincipal(principal);\n         Subject cachedSubject = subjectCache.get(krb5Principal);\n         if (cachedSubject != null) {\n             return cachedSubject;\n         }\n \n-        Subject createdSubject = doKerberosLogin(principal);\n+        Subject createdSubject = doKerberosLogin(principal, pass);\n \n         subjectCache.put(krb5Principal, createdSubject);\n         return createdSubject;\n     }\n \n-    private Subject doKerberosLogin(String principal) throws LoginException {\n+    private Subject doKerberosLogin(String principal, SerializableProtectedString pass) throws LoginException {\n         Subject subject = new Subject();\n         Krb5LoginModuleWrapper krb5 = new Krb5LoginModuleWrapper();\n         Map<String, String> options = new HashMap<String, String>();\n         Map<String, Object> sharedState = new HashMap<String, Object>();\n+        CallbackHandler callback = pass == null ? null : new Krb5CallbackHandler(pass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY4MTc2MA=="}, "originalCommit": {"oid": "86698057a3062f0e5005bf6f5f72e80832689eba"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2932, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}