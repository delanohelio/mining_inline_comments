{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMzUzODcw", "number": 11665, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzo0NjoyMlrODvrD5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzo0NzoxMFrODvrFGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzE1MTczOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.websphere.jakartaee.el.4.0/src/jakarta/el/FactoryFinder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzo0NjoyMlrOGCPFVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzo0NjoyMlrOGCPFVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk5NzQ2Mw==", "bodyText": "Use IS_SECURITY_ENABLED in place of System.getSecurityManager() != null", "url": "https://github.com/OpenLiberty/open-liberty/pull/11665#discussion_r404997463", "createdAt": "2020-04-07T17:46:22Z", "author": {"login": "pmd1nh"}, "path": "dev/com.ibm.websphere.jakartaee.el.4.0/src/jakarta/el/FactoryFinder.java", "diffHunk": "@@ -18,43 +18,96 @@\n \n package jakarta.el;\n \n-import static java.io.File.separator;\n-\n+import java.io.BufferedReader;\n import java.io.File;\n import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.UnsupportedEncodingException;\n import java.lang.reflect.Constructor;\n-import java.util.Iterator;\n import java.util.Properties;\n import java.util.ServiceLoader;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n \n class FactoryFinder {\n \n+    private static final boolean IS_SECURITY_ENABLED = (System.getSecurityManager() != null);\n+\n+    private static final String SERVICE_RESOURCE_NAME = \"META-INF/services/jakarta.el.ExpressionFactory\";\n+\n+    private static final String PROPERTY_NAME = \"jakarta.el.ExpressionFactory\";\n+\n+    private static final String SEP;\n+    private static final String PROPERTY_FILE;\n+\n+    static {\n+        if (IS_SECURITY_ENABLED) {\n+            SEP = AccessController.doPrivileged(\n+                                                new PrivilegedAction<String>() {\n+                                                    @Override\n+                                                    public String run() {\n+                                                        return System.getProperty(\"file.separator\");\n+                                                    }\n+\n+                                                });\n+            PROPERTY_FILE = AccessController.doPrivileged(\n+                                                          new PrivilegedAction<String>() {\n+                                                              @Override\n+                                                              public String run() {\n+                                                                  return System.getProperty(\"java.home\") + SEP +\n+                                                                         \"lib\" + SEP + \"el.properties\";\n+                                                              }\n+\n+                                                          });\n+        } else {\n+            SEP = System.getProperty(\"file.separator\");\n+            PROPERTY_FILE = System.getProperty(\"java.home\") + SEP + \"lib\" +\n+                            SEP + \"el.properties\";\n+        }\n+    }\n+\n     /**\n      * Creates an instance of the specified class using the specified <code>ClassLoader</code> object.\n      *\n      * @exception ELException if the given class could not be found or could not be instantiated\n      */\n     private static Object newInstance(String className, ClassLoader classLoader, Properties properties) {\n         try {\n-            Class<?> spiClass;\n+            Class<?> instance;\n             if (classLoader == null) {\n-                spiClass = Class.forName(className);\n+                instance = Class.forName(className);\n             } else {\n-                spiClass = classLoader.loadClass(className);\n+                instance = classLoader.loadClass(className);\n             }\n \n             if (properties != null) {\n                 Constructor<?> constr = null;\n                 try {\n-                    constr = spiClass.getConstructor(Properties.class);\n+                    constr = instance.getConstructor(Properties.class);\n                 } catch (Exception ex) {\n                 }\n \n                 if (constr != null) {\n                     return constr.newInstance(properties);\n                 }\n             }\n-            return spiClass.getDeclaredConstructor().newInstance();\n+            if (System.getSecurityManager() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1a7797f8fb75d9b7eff96eb23cba24af08de2a"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzE1NDgzOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.websphere.jakartaee.el.4.0/src/jakarta/el/FactoryFinder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzo0NzoxMFrOGCPHRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzo0NzoxMFrOGCPHRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk5Nzk1OA==", "bodyText": "if (IS_SECURITY_ENABLED)", "url": "https://github.com/OpenLiberty/open-liberty/pull/11665#discussion_r404997958", "createdAt": "2020-04-07T17:47:10Z", "author": {"login": "pmd1nh"}, "path": "dev/com.ibm.websphere.jakartaee.el.4.0/src/jakarta/el/FactoryFinder.java", "diffHunk": "@@ -80,56 +133,130 @@ private static Object newInstance(String className, ClassLoader classLoader, Pro\n      * <code>null</code> to indicate that there is no fallback class name\n      * @exception ELException if there is an error\n      */\n-    static Object find(Class<?> serviceClass, String factoryId, String fallbackClassName, Properties properties) {\n+    static Object find(Class<?> serviceClass, Properties properties) {\n         ClassLoader classLoader;\n         try {\n-            classLoader = Thread.currentThread().getContextClassLoader();\n+            if (System.getSecurityManager() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1a7797f8fb75d9b7eff96eb23cba24af08de2a"}, "originalPosition": 114}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1894, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}