{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MjE1NDY1", "number": 12716, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODowMzo1NlrOEHMqvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOTo0MDo1MlrOEI5iaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTgzMDM4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.kernel.boot.ws-server/publish/bin/server.bat", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODowMzo1NlrOGmdP3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoxNzoyN1rOGmdlIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3ODI3MQ==", "bodyText": "Is JAVA_AGENT really needed here? I would think that would only be necessary for a server", "url": "https://github.com/OpenLiberty/open-liberty/pull/12716#discussion_r442978271", "createdAt": "2020-06-19T18:03:56Z", "author": {"login": "brenthdaniel"}, "path": "dev/com.ibm.ws.kernel.boot.ws-server/publish/bin/server.bat", "diffHunk": "@@ -341,15 +341,17 @@ goto:eof\n goto:eof\n \n :package\n-  call:serverEnv\n+  call:serverEnvAndJVMOptions\n+  if not %RC% == 0 goto:eof\n   call:serverExists true\n   if %RC% == 2 goto:eof\n \n-  !JAVA_CMD_QUOTED! !JAVA_PARAMS_QUOTED! --batch-file=--package !PARAMS_QUOTED!\n+  !JAVA_CMD_QUOTED! !JAVA_AGENT_QUOTED! !JVM_OPTIONS! !JAVA_PARAMS_QUOTED! --batch-file=--package !PARAMS_QUOTED!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b97fef4a0b5b0f96509385955103ad5c4d4ddab"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4MzcxMg==", "bodyText": "Whenever I run with Java 8 (without the JAVA_AGENT_QUOTED in the cmd), I get [WARNING ] TRAS0032W: Runtime injection of detailed method trace is not available. Adding the JAVA_AGENT_QUOTED seems to resolve the issue.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12716#discussion_r442983712", "createdAt": "2020-06-19T18:17:27Z", "author": {"login": "hlhoots"}, "path": "dev/com.ibm.ws.kernel.boot.ws-server/publish/bin/server.bat", "diffHunk": "@@ -341,15 +341,17 @@ goto:eof\n goto:eof\n \n :package\n-  call:serverEnv\n+  call:serverEnvAndJVMOptions\n+  if not %RC% == 0 goto:eof\n   call:serverExists true\n   if %RC% == 2 goto:eof\n \n-  !JAVA_CMD_QUOTED! !JAVA_PARAMS_QUOTED! --batch-file=--package !PARAMS_QUOTED!\n+  !JAVA_CMD_QUOTED! !JAVA_AGENT_QUOTED! !JVM_OPTIONS! !JAVA_PARAMS_QUOTED! --batch-file=--package !PARAMS_QUOTED!", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3ODI3MQ=="}, "originalCommit": {"oid": "0b97fef4a0b5b0f96509385955103ad5c4d4ddab"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTgzODMyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.kernel.boot.core/src/com/ibm/ws/kernel/boot/internal/commands/PackageProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODowNzoxMVrOGmdU6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoyNDowMlrOGmdvqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3OTU2Mg==", "bodyText": "You might want to check for null here.. java.specification.version should always be there, but probably best to be safe", "url": "https://github.com/OpenLiberty/open-liberty/pull/12716#discussion_r442979562", "createdAt": "2020-06-19T18:07:11Z", "author": {"login": "brenthdaniel"}, "path": "dev/com.ibm.ws.kernel.boot.core/src/com/ibm/ws/kernel/boot/internal/commands/PackageProcessor.java", "diffHunk": "@@ -170,6 +172,14 @@ protected File buildManifestForIncludeHasRunnable(File installationManifest) thr\n         mf.getMainAttributes().putValue(\"Main-Class\", \"wlp.lib.extract.SelfExtractRun\");\n         mf.getMainAttributes().putValue(\"Server-Name\", processName);\n \n+        // For Java 9, we need to apply the /wlp/lib/platform/java/java9.options to the manifest.\n+        if (!System.getProperty(\"java.specification.version\").startsWith(\"1.\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b97fef4a0b5b0f96509385955103ad5c4d4ddab"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NjQwOQ==", "bodyText": "I will add that null check.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12716#discussion_r442986409", "createdAt": "2020-06-19T18:24:02Z", "author": {"login": "hlhoots"}, "path": "dev/com.ibm.ws.kernel.boot.core/src/com/ibm/ws/kernel/boot/internal/commands/PackageProcessor.java", "diffHunk": "@@ -170,6 +172,14 @@ protected File buildManifestForIncludeHasRunnable(File installationManifest) thr\n         mf.getMainAttributes().putValue(\"Main-Class\", \"wlp.lib.extract.SelfExtractRun\");\n         mf.getMainAttributes().putValue(\"Server-Name\", processName);\n \n+        // For Java 9, we need to apply the /wlp/lib/platform/java/java9.options to the manifest.\n+        if (!System.getProperty(\"java.specification.version\").startsWith(\"1.\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3OTU2Mg=="}, "originalCommit": {"oid": "0b97fef4a0b5b0f96509385955103ad5c4d4ddab"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzYwNTEzOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.kernel.boot.core/src/com/ibm/ws/kernel/boot/internal/commands/PackageProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOToyMDozMlrOGpIlMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOToyMDozMlrOGpIlMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc4NTM5NA==", "bodyText": "the args in java9.options are things we need to run all features available in liberty, but it is likely that the SelfExractRun just needs a subset of these because all it's doing is launching a separate JVM to do the extract and then it exits (I think).\nSo instead of copying things over from java9.options to the manifest at runtime, can we just add the flags necessary to do a clean SelfExtract to the jar's manifest directly?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12716#discussion_r445785394", "createdAt": "2020-06-25T19:20:32Z", "author": {"login": "aguibert"}, "path": "dev/com.ibm.ws.kernel.boot.core/src/com/ibm/ws/kernel/boot/internal/commands/PackageProcessor.java", "diffHunk": "@@ -170,6 +172,13 @@ protected File buildManifestForIncludeHasRunnable(File installationManifest) thr\n         mf.getMainAttributes().putValue(\"Main-Class\", \"wlp.lib.extract.SelfExtractRun\");\n         mf.getMainAttributes().putValue(\"Server-Name\", processName);\n \n+        // For Java 9, we need to apply the /wlp/lib/platform/java/java9.options to the manifest.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50eb6d68e972c039b61e9bbe19d30b4b329826ce"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzY2NzYxOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.kernel.boot.core/src/com/ibm/ws/kernel/boot/internal/commands/PackageProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOTo0MDo1MlrOGpJMgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDoyNzowN1rOGpKmjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5NTQ1Ng==", "bodyText": "Perhaps we should make this a bit more tolerant and just log a warning if the java9.options cannot be found/read? Would be bad if server start blew up on something that was just trying to avoid a warning message.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12716#discussion_r445795456", "createdAt": "2020-06-25T19:40:52Z", "author": {"login": "aguibert"}, "path": "dev/com.ibm.ws.kernel.boot.core/src/com/ibm/ws/kernel/boot/internal/commands/PackageProcessor.java", "diffHunk": "@@ -788,4 +797,39 @@ private boolean java2SecurityEnabled() {\n     private boolean isArchiveJar() {\n         return packageFile.getName().endsWith(\".jar\");\n     }\n+\n+    // Reads the java9.options file\n+    private HashMap<String, String> readJava9Options() throws IOException {\n+        HashMap<String, String> hm = new HashMap<String, String>();\n+        StringBuffer exports = new StringBuffer();\n+        StringBuffer opens = new StringBuffer();\n+        BufferedReader r = new BufferedReader(new FileReader(installRoot.getAbsolutePath() + File.separator + \"lib\" + File.separator + \"platform\" + File.separator + \"java\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50eb6d68e972c039b61e9bbe19d30b4b329826ce"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxODUwOQ==", "bodyText": "I decided to leave as-is.  It will result in:\nCWWKE0056E: Unable to zip up directory due to an IO exception java.io.FileNotFoundException: ${wlp.install.root}\\lib\\platform\\java\\java9.options (The system cannot find the file specified).\nServer test1 package failed. Check server logs for details.\nWhich in my mind tells that their install is not correct when running java 9.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12716#discussion_r445818509", "createdAt": "2020-06-25T20:27:07Z", "author": {"login": "hlhoots"}, "path": "dev/com.ibm.ws.kernel.boot.core/src/com/ibm/ws/kernel/boot/internal/commands/PackageProcessor.java", "diffHunk": "@@ -788,4 +797,39 @@ private boolean java2SecurityEnabled() {\n     private boolean isArchiveJar() {\n         return packageFile.getName().endsWith(\".jar\");\n     }\n+\n+    // Reads the java9.options file\n+    private HashMap<String, String> readJava9Options() throws IOException {\n+        HashMap<String, String> hm = new HashMap<String, String>();\n+        StringBuffer exports = new StringBuffer();\n+        StringBuffer opens = new StringBuffer();\n+        BufferedReader r = new BufferedReader(new FileReader(installRoot.getAbsolutePath() + File.separator + \"lib\" + File.separator + \"platform\" + File.separator + \"java\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc5NTQ1Ng=="}, "originalCommit": {"oid": "50eb6d68e972c039b61e9bbe19d30b4b329826ce"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1543, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}