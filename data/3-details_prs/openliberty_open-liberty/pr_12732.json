{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MDE2OTAz", "number": 12732, "title": "MP-Metrics 3.0 [NoShip]: REST stat metrics to track unmapped exceptions", "bodyText": "#build\n#run-libby-bot", "createdAt": "2020-06-22T15:24:42Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/12732", "merged": true, "mergeCommit": {"oid": "b8600eb783729e38ecf75ef7a9df25242d4292c6"}, "closed": true, "closedAt": "2020-06-30T18:17:08Z", "author": {"login": "Channyboy"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABctyrkbgBqjM0Njg5NjUwMTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwXSd1AFqTQ0MDEyODI4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "408894b4431734a88921007595881fd59209c4b4", "author": {"user": {"login": "Channyboy", "name": "David Chan"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/408894b4431734a88921007595881fd59209c4b4", "committedDate": "2020-06-22T15:23:26Z", "message": "indentation"}, "afterCommit": {"oid": "96f39477df03a48589c406e7811f40f31a948714", "author": {"user": {"login": "Channyboy", "name": "David Chan"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/96f39477df03a48589c406e7811f40f31a948714", "committedDate": "2020-06-22T15:28:33Z", "message": "New jaxrsDefaultExceptionMapper autofeature\n\nThis autofeature starts when it detects mpMetrics-3.0, monitor-1.0 and\njaxrs-2.x have started. This starts the\n`com.ibm.ws.jaxrs.defaultexceptionmapper bundle which contains a\ncallback handler for osgi services that implement the\nDefaultExceptionMapperCallback service. The service contains the\ncallback that is to be called. In this PR the\n`MetricsJaxRsEMCallbackImpl` in\n`com.ibm.ws.microprofile.metrics.3.0.monitor` implements the service.\nWhen an unmapped exception occurs we insert a specific exception header\nto the http response so tha the jaxrs filter can identify and deal with\nit accordingly."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "96f39477df03a48589c406e7811f40f31a948714", "author": {"user": {"login": "Channyboy", "name": "David Chan"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/96f39477df03a48589c406e7811f40f31a948714", "committedDate": "2020-06-22T15:28:33Z", "message": "New jaxrsDefaultExceptionMapper autofeature\n\nThis autofeature starts when it detects mpMetrics-3.0, monitor-1.0 and\njaxrs-2.x have started. This starts the\n`com.ibm.ws.jaxrs.defaultexceptionmapper bundle which contains a\ncallback handler for osgi services that implement the\nDefaultExceptionMapperCallback service. The service contains the\ncallback that is to be called. In this PR the\n`MetricsJaxRsEMCallbackImpl` in\n`com.ibm.ws.microprofile.metrics.3.0.monitor` implements the service.\nWhen an unmapped exception occurs we insert a specific exception header\nto the http response so tha the jaxrs filter can identify and deal with\nit accordingly."}, "afterCommit": {"oid": "4e38a33c76122a54e3db1e0396b7a06491f90d65", "author": {"user": {"login": "Channyboy", "name": "David Chan"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/4e38a33c76122a54e3db1e0396b7a06491f90d65", "committedDate": "2020-06-23T03:01:01Z", "message": "New jaxrsDefaultExceptionMapper autofeature\n\n    This autofeature starts when it detects mpMetrics-3.0, monitor-1.0 and\n    jaxrs-2.x have started. This starts the\n    `com.ibm.ws.jaxrs.defaultexceptionmapper bundle which contains a\n    callback handler for osgi services that implement the\n    DefaultExceptionMapperCallback service. The service contains the\n    callback that is to be called. In this PR the\n    `MetricsJaxRsEMCallbackImpl` in\n    `com.ibm.ws.microprofile.metrics.3.0.monitor` implements the service.\n    When an unmapped exception occurs we insert a specific exception header\n    to the http response so tha the jaxrs filter can identify and deal with\n    it accordingly."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDMzMzk2", "url": "https://github.com/OpenLiberty/open-liberty/pull/12732#pullrequestreview-437033396", "createdAt": "2020-06-24T21:53:28Z", "commit": {"oid": "4e38a33c76122a54e3db1e0396b7a06491f90d65"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTo1MzoyOFrOGokcKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTo1MzoyOFrOGokcKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5MzI1Ng==", "bodyText": "Copyright is missing", "url": "https://github.com/OpenLiberty/open-liberty/pull/12732#discussion_r445193256", "createdAt": "2020-06-24T21:53:28Z", "author": {"login": "fmhwong"}, "path": "dev/com.ibm.ws.microprofile.metrics.3.0.monitor/src/com/ibm/ws/microprofile/metrics/monitor/MetricsJaxRsEMCallbackImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.ibm.ws.microprofile.metrics.monitor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e38a33c76122a54e3db1e0396b7a06491f90d65"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDM1NzA5", "url": "https://github.com/OpenLiberty/open-liberty/pull/12732#pullrequestreview-437035709", "createdAt": "2020-06-24T21:57:55Z", "commit": {"oid": "4e38a33c76122a54e3db1e0396b7a06491f90d65"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTo1Nzo1NVrOGokjrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTo1Nzo1NVrOGokjrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5NTE4MA==", "bodyText": "Irregular indentation", "url": "https://github.com/OpenLiberty/open-liberty/pull/12732#discussion_r445195180", "createdAt": "2020-06-24T21:57:55Z", "author": {"login": "fmhwong"}, "path": "dev/com.ibm.ws.microprofile.metrics.3.0.monitor/src/com/ibm/ws/microprofile/metrics/monitor/MetricsJaxRsEMCallbackImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.ibm.ws.microprofile.metrics.monitor;\n+\n+import com.ibm.ws.jaxrs.defaultexceptionmapper.DefaultExceptionMapperCallback;\n+import com.ibm.ws.microprofile.metrics.impl.SharedMetricRegistries;\n+import com.ibm.ws.runtime.metadata.ComponentMetaData;\n+import com.ibm.ws.threadContext.ComponentMetaDataAccessorImpl;\n+\n+import java.lang.reflect.Method;\n+import java.util.AbstractMap;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.ws.rs.container.ResourceInfo;\n+\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+\n+@Component(service = {\n+\t\tDefaultExceptionMapperCallback.class }, configurationPolicy = ConfigurationPolicy.IGNORE, property = {\n+\t\t\t\t\"service.vendor=IBM\" })\n+public class MetricsJaxRsEMCallbackImpl  implements DefaultExceptionMapperCallback {\n+\n+\t\n+\tpublic static final String EXCEPTION_KEY = MetricsJaxRsEMCallbackImpl.class.getName() + \".Exception\";\n+\t\n+\t\n+\tpublic synchronized static Counter registerOrRetrieveRESTUnmappedExceptionMetric(String fullyQualifiedClassName, String methodSignature) {\n+\t\tMetricRegistry baseMetricRegistry = sharedMetricRegistry.getOrCreate(MetricRegistry.Type.BASE.getName());\n+\t\t\n+\t\tMetadata metadata = Metadata.builder().withType(MetricType.COUNTER).withName(\"REST.request.unmappedException.total\").withDescription(\"REST.request.unmappedException.description\").withDisplayName(\"Total Unmapped Exception Requests\").build();\n+\t\t\n+\t\tTag classTag = new Tag(\"class\", fullyQualifiedClassName);\n+\t\tTag methodTag = new Tag(\"method\", methodSignature);\n+\t\t\n+\t\tCounter counter = baseMetricRegistry.counter(metadata, classTag, methodTag);\n+\t\t\n+\t\tComponentMetaData cmd = ComponentMetaDataAccessorImpl.getComponentMetaDataAccessor().getComponentMetaData();\n+\t\t\n+\t\tsharedMetricRegistry.associateMetricIDToApplication(new MetricID(metadata.getName(), classTag, methodTag), cmd.getJ2EEName().getApplication(), baseMetricRegistry);\n+\t\t\n+\t\treturn counter;\n+\t}\n+\t\n+\t@Override\n+\tpublic Map<String, Object> onDefaultMappedException(Throwable t, int statusCode, ResourceInfo resourceInfo) {\n+\t\tMap.Entry<String, String> classXmethod = resolveSimpleTimerClassMethodTags(resourceInfo);\n+\n+\t\tregisterOrRetrieveRESTUnmappedExceptionMetric(classXmethod.getKey() ,classXmethod.getValue()).inc();\n+\t\t\n+\t\treturn Collections.singletonMap(EXCEPTION_KEY, t);\n+\t}\n+\n+\tstatic SharedMetricRegistries sharedMetricRegistry;\n+\t\n+\t@Reference", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e38a33c76122a54e3db1e0396b7a06491f90d65"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDM1ODg5", "url": "https://github.com/OpenLiberty/open-liberty/pull/12732#pullrequestreview-437035889", "createdAt": "2020-06-24T21:58:19Z", "commit": {"oid": "4e38a33c76122a54e3db1e0396b7a06491f90d65"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTo1ODoxOVrOGokkOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTo1ODoxOVrOGokkOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5NTMyMQ==", "bodyText": "Do you need a null check on resourceInfo?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12732#discussion_r445195321", "createdAt": "2020-06-24T21:58:19Z", "author": {"login": "fmhwong"}, "path": "dev/com.ibm.ws.microprofile.metrics.3.0.monitor/src/com/ibm/ws/microprofile/metrics/monitor/MetricsJaxRsEMCallbackImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.ibm.ws.microprofile.metrics.monitor;\n+\n+import com.ibm.ws.jaxrs.defaultexceptionmapper.DefaultExceptionMapperCallback;\n+import com.ibm.ws.microprofile.metrics.impl.SharedMetricRegistries;\n+import com.ibm.ws.runtime.metadata.ComponentMetaData;\n+import com.ibm.ws.threadContext.ComponentMetaDataAccessorImpl;\n+\n+import java.lang.reflect.Method;\n+import java.util.AbstractMap;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.ws.rs.container.ResourceInfo;\n+\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+\n+@Component(service = {\n+\t\tDefaultExceptionMapperCallback.class }, configurationPolicy = ConfigurationPolicy.IGNORE, property = {\n+\t\t\t\t\"service.vendor=IBM\" })\n+public class MetricsJaxRsEMCallbackImpl  implements DefaultExceptionMapperCallback {\n+\n+\t\n+\tpublic static final String EXCEPTION_KEY = MetricsJaxRsEMCallbackImpl.class.getName() + \".Exception\";\n+\t\n+\t\n+\tpublic synchronized static Counter registerOrRetrieveRESTUnmappedExceptionMetric(String fullyQualifiedClassName, String methodSignature) {\n+\t\tMetricRegistry baseMetricRegistry = sharedMetricRegistry.getOrCreate(MetricRegistry.Type.BASE.getName());\n+\t\t\n+\t\tMetadata metadata = Metadata.builder().withType(MetricType.COUNTER).withName(\"REST.request.unmappedException.total\").withDescription(\"REST.request.unmappedException.description\").withDisplayName(\"Total Unmapped Exception Requests\").build();\n+\t\t\n+\t\tTag classTag = new Tag(\"class\", fullyQualifiedClassName);\n+\t\tTag methodTag = new Tag(\"method\", methodSignature);\n+\t\t\n+\t\tCounter counter = baseMetricRegistry.counter(metadata, classTag, methodTag);\n+\t\t\n+\t\tComponentMetaData cmd = ComponentMetaDataAccessorImpl.getComponentMetaDataAccessor().getComponentMetaData();\n+\t\t\n+\t\tsharedMetricRegistry.associateMetricIDToApplication(new MetricID(metadata.getName(), classTag, methodTag), cmd.getJ2EEName().getApplication(), baseMetricRegistry);\n+\t\t\n+\t\treturn counter;\n+\t}\n+\t\n+\t@Override\n+\tpublic Map<String, Object> onDefaultMappedException(Throwable t, int statusCode, ResourceInfo resourceInfo) {\n+\t\tMap.Entry<String, String> classXmethod = resolveSimpleTimerClassMethodTags(resourceInfo);\n+\n+\t\tregisterOrRetrieveRESTUnmappedExceptionMetric(classXmethod.getKey() ,classXmethod.getValue()).inc();\n+\t\t\n+\t\treturn Collections.singletonMap(EXCEPTION_KEY, t);\n+\t}\n+\n+\tstatic SharedMetricRegistries sharedMetricRegistry;\n+\t\n+\t@Reference\n+    public void getSharedMetricRegistries(SharedMetricRegistries sharedMetricRegistry) {\n+\t\tMetricsJaxRsEMCallbackImpl.sharedMetricRegistry = sharedMetricRegistry;\n+    }\n+\t\n+\t\n+\tprivate Map.Entry<String, String> resolveSimpleTimerClassMethodTags(ResourceInfo resourceInfo) {\n+\t\tClass<?> resourceClass = resourceInfo.getResourceClass();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e38a33c76122a54e3db1e0396b7a06491f90d65"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDQxMzE2", "url": "https://github.com/OpenLiberty/open-liberty/pull/12732#pullrequestreview-437041316", "createdAt": "2020-06-24T22:09:53Z", "commit": {"oid": "4e38a33c76122a54e3db1e0396b7a06491f90d65"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97634f7b5aa1931d2c58a815d656a56d321380e3", "author": {"user": {"login": "Channyboy", "name": "David Chan"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/97634f7b5aa1931d2c58a815d656a56d321380e3", "committedDate": "2020-06-25T17:54:42Z", "message": "New jaxrsDefaultExceptionMapper autofeature\n\n        This autofeature starts when it detects mpMetrics-3.0, monitor-1.0 and\n        jaxrs-2.x have started. This starts the\n        `com.ibm.ws.jaxrs.defaultexceptionmapper bundle which contains a\n        callback handler for osgi services that implement the\n        DefaultExceptionMapperCallback service. The service contains the\n        callback that is to be called. In this PR the\n        `MetricsJaxRsEMCallbackImpl` in\n        `com.ibm.ws.microprofile.metrics.3.0.monitor` implements the service.\n        When an unmapped exception occurs we insert a specific exception header\n        to the http response so tha the jaxrs filter can identify and deal with\n        it accordingly."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e38a33c76122a54e3db1e0396b7a06491f90d65", "author": {"user": {"login": "Channyboy", "name": "David Chan"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/4e38a33c76122a54e3db1e0396b7a06491f90d65", "committedDate": "2020-06-23T03:01:01Z", "message": "New jaxrsDefaultExceptionMapper autofeature\n\n    This autofeature starts when it detects mpMetrics-3.0, monitor-1.0 and\n    jaxrs-2.x have started. This starts the\n    `com.ibm.ws.jaxrs.defaultexceptionmapper bundle which contains a\n    callback handler for osgi services that implement the\n    DefaultExceptionMapperCallback service. The service contains the\n    callback that is to be called. In this PR the\n    `MetricsJaxRsEMCallbackImpl` in\n    `com.ibm.ws.microprofile.metrics.3.0.monitor` implements the service.\n    When an unmapped exception occurs we insert a specific exception header\n    to the http response so tha the jaxrs filter can identify and deal with\n    it accordingly."}, "afterCommit": {"oid": "97634f7b5aa1931d2c58a815d656a56d321380e3", "author": {"user": {"login": "Channyboy", "name": "David Chan"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/97634f7b5aa1931d2c58a815d656a56d321380e3", "committedDate": "2020-06-25T17:54:42Z", "message": "New jaxrsDefaultExceptionMapper autofeature\n\n        This autofeature starts when it detects mpMetrics-3.0, monitor-1.0 and\n        jaxrs-2.x have started. This starts the\n        `com.ibm.ws.jaxrs.defaultexceptionmapper bundle which contains a\n        callback handler for osgi services that implement the\n        DefaultExceptionMapperCallback service. The service contains the\n        callback that is to be called. In this PR the\n        `MetricsJaxRsEMCallbackImpl` in\n        `com.ibm.ws.microprofile.metrics.3.0.monitor` implements the service.\n        When an unmapped exception occurs we insert a specific exception header\n        to the http response so tha the jaxrs filter can identify and deal with\n        it accordingly."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODE4NTk3", "url": "https://github.com/OpenLiberty/open-liberty/pull/12732#pullrequestreview-437818597", "createdAt": "2020-06-25T20:04:38Z", "commit": {"oid": "97634f7b5aa1931d2c58a815d656a56d321380e3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMTI4Mjg2", "url": "https://github.com/OpenLiberty/open-liberty/pull/12732#pullrequestreview-440128286", "createdAt": "2020-06-30T15:22:26Z", "commit": {"oid": "97634f7b5aa1931d2c58a815d656a56d321380e3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2300, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}