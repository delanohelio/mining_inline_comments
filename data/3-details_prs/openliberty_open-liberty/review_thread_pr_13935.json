{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2ODgyNDI3", "number": 13935, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMTozODoxM1rOEjUpDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMTozOToxOFrOEjUqSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDczODA0OnYy", "diffSide": "RIGHT", "path": "dev/io.openliberty.org.jboss.resteasy.common/src/org/jboss/resteasy/plugins/delegates/MediaTypeHeaderDelegate.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMTozODoxM1rOHRnexw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjo0OToyMFrOHSK4CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIzNDY5NQ==", "bodyText": "this has been fixed in RESTEasy, but not yet GA - should be in 4.5.7 when it comes out. maybe mention that in the comment so we know that we can delete this overlay once we pull in 4.5.7 or newer?", "url": "https://github.com/OpenLiberty/open-liberty/pull/13935#discussion_r488234695", "createdAt": "2020-09-14T21:38:13Z", "author": {"login": "andymc12"}, "path": "dev/io.openliberty.org.jboss.resteasy.common/src/org/jboss/resteasy/plugins/delegates/MediaTypeHeaderDelegate.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package org.jboss.resteasy.plugins.delegates;\n+\n+import org.jboss.resteasy.resteasy_jaxrs.i18n.Messages;\n+import org.jboss.resteasy.util.HeaderParameterParser;\n+\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.ext.RuntimeDelegate;\n+\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * @author <a href=\"mailto:bill@burkecentral.com\">Bill Burke</a>\n+ * @version $Revision: 1 $\n+ */\n+public class MediaTypeHeaderDelegate implements RuntimeDelegate.HeaderDelegate\n+{\n+   public static final MediaTypeHeaderDelegate INSTANCE = new MediaTypeHeaderDelegate();\n+\n+   private static Map<String, MediaType> map = new ConcurrentHashMap<String, MediaType>();\n+   private static Map<MediaType, String> reverseMap = new ConcurrentHashMap<MediaType, String>();\n+   private static final int MAX_MT_CACHE_SIZE =\n+                   // Liberty Change", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf31cc20588e019c88d066df07648a216a20c042"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUzNDc4NA==", "bodyText": "If this has been fixed in the resteasy master branch, would it be better to build a snapshot version from there and put it in DHE ... rather than creating a new overlay!?", "url": "https://github.com/OpenLiberty/open-liberty/pull/13935#discussion_r488534784", "createdAt": "2020-09-15T09:46:52Z", "author": {"login": "tevans78"}, "path": "dev/io.openliberty.org.jboss.resteasy.common/src/org/jboss/resteasy/plugins/delegates/MediaTypeHeaderDelegate.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package org.jboss.resteasy.plugins.delegates;\n+\n+import org.jboss.resteasy.resteasy_jaxrs.i18n.Messages;\n+import org.jboss.resteasy.util.HeaderParameterParser;\n+\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.ext.RuntimeDelegate;\n+\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * @author <a href=\"mailto:bill@burkecentral.com\">Bill Burke</a>\n+ * @version $Revision: 1 $\n+ */\n+public class MediaTypeHeaderDelegate implements RuntimeDelegate.HeaderDelegate\n+{\n+   public static final MediaTypeHeaderDelegate INSTANCE = new MediaTypeHeaderDelegate();\n+\n+   private static Map<String, MediaType> map = new ConcurrentHashMap<String, MediaType>();\n+   private static Map<MediaType, String> reverseMap = new ConcurrentHashMap<MediaType, String>();\n+   private static final int MAX_MT_CACHE_SIZE =\n+                   // Liberty Change", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIzNDY5NQ=="}, "originalCommit": {"oid": "bf31cc20588e019c88d066df07648a216a20c042"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2MTE2NA==", "bodyText": "Updated the comment. @tevans78 We plan to upgrade to the newer version of Resteasy before release, these overlay changes are are to enable us to do rapid development. This is currently how we override our CXF implementation for jaxrs-2.0 and jaxrs-2.1\nWe discussed having our own CXF fork and pulling that into OpenLiberty on today's design issues call. I assume we'll have a similar discussion about Resteasy in the future.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13935#discussion_r488761164", "createdAt": "2020-09-15T15:30:05Z", "author": {"login": "WhiteCat22"}, "path": "dev/io.openliberty.org.jboss.resteasy.common/src/org/jboss/resteasy/plugins/delegates/MediaTypeHeaderDelegate.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package org.jboss.resteasy.plugins.delegates;\n+\n+import org.jboss.resteasy.resteasy_jaxrs.i18n.Messages;\n+import org.jboss.resteasy.util.HeaderParameterParser;\n+\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.ext.RuntimeDelegate;\n+\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * @author <a href=\"mailto:bill@burkecentral.com\">Bill Burke</a>\n+ * @version $Revision: 1 $\n+ */\n+public class MediaTypeHeaderDelegate implements RuntimeDelegate.HeaderDelegate\n+{\n+   public static final MediaTypeHeaderDelegate INSTANCE = new MediaTypeHeaderDelegate();\n+\n+   private static Map<String, MediaType> map = new ConcurrentHashMap<String, MediaType>();\n+   private static Map<MediaType, String> reverseMap = new ConcurrentHashMap<MediaType, String>();\n+   private static final int MAX_MT_CACHE_SIZE =\n+                   // Liberty Change", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIzNDY5NQ=="}, "originalCommit": {"oid": "bf31cc20588e019c88d066df07648a216a20c042"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc4MjAwMA==", "bodyText": "Rapid development now but at what service cost if the overlays are never removed ... which is exactly what has happened with CXF. Your aim should be to avoid a fork or overlay unless there is no other choice. In this case there is a choice, the change is already in RESTEasy.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13935#discussion_r488782000", "createdAt": "2020-09-15T15:59:04Z", "author": {"login": "tevans78"}, "path": "dev/io.openliberty.org.jboss.resteasy.common/src/org/jboss/resteasy/plugins/delegates/MediaTypeHeaderDelegate.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package org.jboss.resteasy.plugins.delegates;\n+\n+import org.jboss.resteasy.resteasy_jaxrs.i18n.Messages;\n+import org.jboss.resteasy.util.HeaderParameterParser;\n+\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.ext.RuntimeDelegate;\n+\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * @author <a href=\"mailto:bill@burkecentral.com\">Bill Burke</a>\n+ * @version $Revision: 1 $\n+ */\n+public class MediaTypeHeaderDelegate implements RuntimeDelegate.HeaderDelegate\n+{\n+   public static final MediaTypeHeaderDelegate INSTANCE = new MediaTypeHeaderDelegate();\n+\n+   private static Map<String, MediaType> map = new ConcurrentHashMap<String, MediaType>();\n+   private static Map<MediaType, String> reverseMap = new ConcurrentHashMap<MediaType, String>();\n+   private static final int MAX_MT_CACHE_SIZE =\n+                   // Liberty Change", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIzNDY5NQ=="}, "originalCommit": {"oid": "bf31cc20588e019c88d066df07648a216a20c042"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxNDYwMQ==", "bodyText": "I don't disagree, but I think this conversation is beyond the scope of this PR.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13935#discussion_r488814601", "createdAt": "2020-09-15T16:49:20Z", "author": {"login": "WhiteCat22"}, "path": "dev/io.openliberty.org.jboss.resteasy.common/src/org/jboss/resteasy/plugins/delegates/MediaTypeHeaderDelegate.java", "diffHunk": "@@ -0,0 +1,190 @@\n+package org.jboss.resteasy.plugins.delegates;\n+\n+import org.jboss.resteasy.resteasy_jaxrs.i18n.Messages;\n+import org.jboss.resteasy.util.HeaderParameterParser;\n+\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.ext.RuntimeDelegate;\n+\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * @author <a href=\"mailto:bill@burkecentral.com\">Bill Burke</a>\n+ * @version $Revision: 1 $\n+ */\n+public class MediaTypeHeaderDelegate implements RuntimeDelegate.HeaderDelegate\n+{\n+   public static final MediaTypeHeaderDelegate INSTANCE = new MediaTypeHeaderDelegate();\n+\n+   private static Map<String, MediaType> map = new ConcurrentHashMap<String, MediaType>();\n+   private static Map<MediaType, String> reverseMap = new ConcurrentHashMap<MediaType, String>();\n+   private static final int MAX_MT_CACHE_SIZE =\n+                   // Liberty Change", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIzNDY5NQ=="}, "originalCommit": {"oid": "bf31cc20588e019c88d066df07648a216a20c042"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDc0MTIyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.microprofile.config.1.1.cdi/src/com/ibm/ws/microprofile/config/cdi/ConfigCDIExtension.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMTozOToxOFrOHRngrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNToyNTo0NFrOHSHaaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIzNTE4MA==", "bodyText": "I think I saw this same call to get classloader in other versions of MP Config (besides just 1.1).  It might be good to update them all - when I looked, I saw it in 1.4, but it's a good guess that it needs to be updated in 1.2 and 1.3 too.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13935#discussion_r488235180", "createdAt": "2020-09-14T21:39:18Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.microprofile.config.1.1.cdi/src/com/ibm/ws/microprofile/config/cdi/ConfigCDIExtension.java", "diffHunk": "@@ -60,7 +62,13 @@ protected void addBadInjectionType(Type type) {\n \n     void processInjectionTarget(@Observes ProcessInjectionTarget<?> pit) {\n         Class<?> targetClass = pit.getAnnotatedType().getJavaClass();\n-        ClassLoader classLoader = targetClass.getClassLoader();\n+\n+        ClassLoader classLoader = AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {\n+            @Override\n+            public ClassLoader run() {\n+                return targetClass.getClassLoader();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf31cc20588e019c88d066df07648a216a20c042"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUzNjI1Mw==", "bodyText": "I think Andy is right, there is another getClassLoader in Config14CDIExtension. The 1.2 and 1.3 versions don't have much in since they just inherit from this class.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13935#discussion_r488536253", "createdAt": "2020-09-15T09:49:22Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.microprofile.config.1.1.cdi/src/com/ibm/ws/microprofile/config/cdi/ConfigCDIExtension.java", "diffHunk": "@@ -60,7 +62,13 @@ protected void addBadInjectionType(Type type) {\n \n     void processInjectionTarget(@Observes ProcessInjectionTarget<?> pit) {\n         Class<?> targetClass = pit.getAnnotatedType().getJavaClass();\n-        ClassLoader classLoader = targetClass.getClassLoader();\n+\n+        ClassLoader classLoader = AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {\n+            @Override\n+            public ClassLoader run() {\n+                return targetClass.getClassLoader();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIzNTE4MA=="}, "originalCommit": {"oid": "bf31cc20588e019c88d066df07648a216a20c042"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc1Nzg2NA==", "bodyText": "I've updated Config14CDIExtension as well, thanks for pointing it out.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13935#discussion_r488757864", "createdAt": "2020-09-15T15:25:44Z", "author": {"login": "WhiteCat22"}, "path": "dev/com.ibm.ws.microprofile.config.1.1.cdi/src/com/ibm/ws/microprofile/config/cdi/ConfigCDIExtension.java", "diffHunk": "@@ -60,7 +62,13 @@ protected void addBadInjectionType(Type type) {\n \n     void processInjectionTarget(@Observes ProcessInjectionTarget<?> pit) {\n         Class<?> targetClass = pit.getAnnotatedType().getJavaClass();\n-        ClassLoader classLoader = targetClass.getClassLoader();\n+\n+        ClassLoader classLoader = AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {\n+            @Override\n+            public ClassLoader run() {\n+                return targetClass.getClassLoader();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIzNTE4MA=="}, "originalCommit": {"oid": "bf31cc20588e019c88d066df07648a216a20c042"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2806, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}