{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NDA3ODcz", "number": 10902, "title": "Add test variations for header(\"Expect\", \"100-continue\")", "bodyText": "", "createdAt": "2020-02-14T14:12:00Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/10902", "merged": true, "mergeCommit": {"oid": "54ac6290056dc220e9c446adf3e92ec043daf034"}, "closed": true, "closedAt": "2020-02-19T13:12:32Z", "author": {"login": "jim-krueger"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcEQV03AFqTM1ODk3NDQxOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcEQtIEgFqTM1ODk5MTAxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4OTc0NDE4", "url": "https://github.com/OpenLiberty/open-liberty/pull/10902#pullrequestreview-358974418", "createdAt": "2020-02-14T14:24:06Z", "commit": {"oid": "668015ca110ac4bfc00a77fe2049c8ec9635fd4a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4OTc0NzU0", "url": "https://github.com/OpenLiberty/open-liberty/pull/10902#pullrequestreview-358974754", "createdAt": "2020-02-14T14:24:36Z", "commit": {"oid": "668015ca110ac4bfc00a77fe2049c8ec9635fd4a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fd686229317c0b4a3804549ecd43259f81929d9", "author": {"user": {"login": "jim-krueger", "name": "Jim Krueger"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/6fd686229317c0b4a3804549ecd43259f81929d9", "committedDate": "2020-02-14T14:46:52Z", "message": "Add test variations for header(\"Expect\", \"100-continue\")"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "668015ca110ac4bfc00a77fe2049c8ec9635fd4a", "author": {"user": {"login": "jim-krueger", "name": "Jim Krueger"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/668015ca110ac4bfc00a77fe2049c8ec9635fd4a", "committedDate": "2020-02-14T14:09:30Z", "message": "Add test variations for header(\"Expect\", \"100-continue\")"}, "afterCommit": {"oid": "6fd686229317c0b4a3804549ecd43259f81929d9", "author": {"user": {"login": "jim-krueger", "name": "Jim Krueger"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/6fd686229317c0b4a3804549ecd43259f81929d9", "committedDate": "2020-02-14T14:46:52Z", "message": "Add test variations for header(\"Expect\", \"100-continue\")"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4OTkxMDE5", "url": "https://github.com/OpenLiberty/open-liberty/pull/10902#pullrequestreview-358991019", "createdAt": "2020-02-14T14:47:46Z", "commit": {"oid": "668015ca110ac4bfc00a77fe2049c8ec9635fd4a"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDo0ODoyMFrOFp495Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDo0ODoyMFrOFp495Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2OTI4NQ==", "bodyText": "This does not seem right to me.  It is certainly inconsistent.  I don't think that we want a test case to verify that we behave incorrectly/inconsistently.  Instead, we should probably work with the CXF community to determine the right next step - possibly something like always enabling chunking when the Expect: 100-continue header is specified.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10902#discussion_r379469285", "createdAt": "2020-02-14T14:48:20Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.x_fat_clientProps/test-applications/cxfClientPropsApp/src/jaxrs2x/cxfClientProps/CxfClientPropsTestServlet.java", "diffHunk": "@@ -253,6 +253,37 @@ public void testChunkingThreshold(HttpServletRequest req, HttpServletResponse re\n                        .post(Entity.text(sb.toString()))\n                        .readEntity(String.class);\n         assertEquals(\"30000:30000\", result);\n+        \n+        // Repeating the tests but adding the \"Expect\", \"100-continue\" header.  In this case a 100 will\n+        // be sent prior to the 200 containing the output.  The JDK will catch and handle this 100 and \n+        // JAXRS will only get the 200 response when in streaming mode (which for now is only chunking).  \n+        // If not in chunking then JAXRS will receive the 100 response which will contain no returned data.\n+        client = ClientBuilder.newBuilder()\n+                        .property(\"client.ChunkingThreshold\", \"10000\")\n+                        .build();\n+   \n+        Response response = client.target(\"http://localhost:\" + req.getServerPort() + \"/cxfClientPropsApp/resource/chunking\")\n+                              .request().header(\"Expect\", \"100-continue\")\n+                              .post(Entity.text(sb.toString()));\n+        int status = response.getStatus();\n+        result = response.readEntity(String.class);\n+        \n+        assertEquals(200,status);\n+        assertEquals(\"CHUNKING\", result);\n+\n+        client = ClientBuilder.newBuilder()\n+                        .property(\"client.ChunkingThreshold\", \"40000\")\n+                        .build();\n+        response = client.target(\"http://localhost:\" + req.getServerPort() + \"/cxfClientPropsApp/resource/chunking\")\n+                       .request().header(\"Expect\", \"100-continue\")\n+                       .post(Entity.text(sb.toString()));\n+        status = response.getStatus();\n+        result = response.readEntity(String.class);\n+\n+        // If a 100 response is received then no data will be sent.\n+        assertEquals(100,status);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fd686229317c0b4a3804549ecd43259f81929d9"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3257, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}