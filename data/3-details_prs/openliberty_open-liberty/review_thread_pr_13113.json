{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzODU3NDk0", "number": 13113, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo1NDoyNlrOERJ_UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTowMzo1NVrOES_ejw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDI0OTEyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.jwt/resources/com/ibm/ws/security/jwt/internal/resources/JWTMessages.nlsprops", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo1NDoyNlrOG1tw5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo1NDoyNlrOG1tw5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3NzUwOQ==", "bodyText": "Suggested change:  remove \"intended\" so that the message has \"Obtain a new token for\"", "url": "https://github.com/OpenLiberty/open-liberty/pull/13113#discussion_r458977509", "createdAt": "2020-07-22T17:54:26Z", "author": {"login": "helyarp"}, "path": "dev/com.ibm.ws.security.jwt/resources/com/ibm/ws/security/jwt/internal/resources/JWTMessages.nlsprops", "diffHunk": "@@ -313,3 +313,10 @@ JWT_TRUSTED_ISSUERS_NULL.useraction=Ensure that the JWT configuration that is sp\n SECURITY.JWT.ERROR.WRONG.HTTP.SCHEME=CWWKS6052E: HTTP scheme is used at the specified endpoint: {0}, HTTPS is required.\n SECURITY.JWT.ERROR.WRONG.HTTP.SCHEME.explanation=The specified endpoint requires HTTPS, but HTTP was used in the request URL.\n SECURITY.JWT.ERROR.WRONG.HTTP.SCHEME.useraction=Check the request URL and make sure it uses HTTPS, or change configuration so HTTPS is not required.\n+\n+# Do not translate \"JSON Web Token\", \"AMR\", \"JWT\"\n+# 0=AMR claim of the token, 1=JWT configuration ID, 2=AMR specified in server configuration\n+JWT_AMR_CLAIM_NOT_VALID=CWWKS6053E: The AMR [{0}] of the provided JSON web token (JWT) is not listed as a trusted AMR in the [{1}] JWT configuration. The trusted AMR are [{2}].\n+JWT_AMR_CLAIM_NOT_VALID.explanation=The server configuration specifies which AMR are trusted when validating JWTs. The provided token is not intended for a trusted AMR, so the token cannot be validated.\n+JWT_AMR_CLAIM_NOT_VALID.useraction=Obtain a new token intended for one of the trusted AMR specified in your JWT configuration, or add the AMR specified in the message as a trusted AMR in your JWT configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf654b15a77484fcad9e7bb7bdda3fa15c51e34"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjY1MzQ2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.jwt/resources/OSGI-INF/l10n/metatype.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNzoyMDoxM1rOG4WtOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNzoyMDoxM1rOG4WtOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc0NTQ2Ng==", "bodyText": "Please consider changing \"how user is authenticated\" to \"how the user is authenticated\".", "url": "https://github.com/OpenLiberty/open-liberty/pull/13113#discussion_r461745466", "createdAt": "2020-07-28T17:20:13Z", "author": {"login": "teddyjtorres"}, "path": "dev/com.ibm.ws.security.jwt/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -90,3 +94,6 @@ jwkEndpointUrl.desc=Specifies a JWK end point URL.\n useSystemPropertiesForHttpClientConnections=Use system properties for HTTP client connections\n useSystemPropertiesForHttpClientConnections.desc=Specifies whether to use Java system properties when the JWT Consumer creates HTTP client connections. Set this property to true if you want the connections to use the http* and javax* system properties.\n \n+#Do not translate \"amr\"\n+amrInclude=Authentication methods references in string array\n+amrInclude.desc= Specifies Authentication Methods References so it can enforce step-up authentication and know how user is authenticated. Specify a comma separated list of valid amr claim values to be used.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8550ee341ed627f6a1ac17beba5b3584115e2858"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzE0MjU2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/internal/BuilderImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxOTozNDo1MVrOG4be3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxOTozNDo1MVrOG4be3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgyMzcwOQ==", "bodyText": "Please consider using spaces instead of tabs and ensure correct spacing.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13113#discussion_r461823709", "createdAt": "2020-07-28T19:34:51Z", "author": {"login": "teddyjtorres"}, "path": "dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/internal/BuilderImpl.java", "diffHunk": "@@ -160,6 +164,14 @@ private void setClaimsUsingTheConfig(JwtConfig jwtConfig) throws InvalidBuilderE\n         if (jwtConfig.getSharedKey() != null) {\n             sharedKey = jwtConfig.getSharedKey();\n         }\n+        \n+        if (jwtConfig.getAMRAttributes() != null) {\n+        \ttry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8550ee341ed627f6a1ac17beba5b3584115e2858"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzE0ODg2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/internal/BuilderImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxOTozNjozMFrOG4bigg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxOTozNjozMFrOG4bigg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgyNDY0Mg==", "bodyText": "Please consider using spaces instead of tabs and ensure correct spacing.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13113#discussion_r461824642", "createdAt": "2020-07-28T19:36:30Z", "author": {"login": "teddyjtorres"}, "path": "dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/internal/BuilderImpl.java", "diffHunk": "@@ -814,5 +826,36 @@ private Builder copyClaimsMap(Map<String, Object> map) throws InvalidClaimExcept\n         }\n         return this;\n     }\n+    \n+    /** \n+     * Checks the attributes provided exists in the subject, if so add it to the claims\n+     * as \"amr\" values\n+     * \n+     * @param amrAttr\n+     * @throws Exception\n+     */\n+    private void checkAmrAttrInSubject(List<String> amrAttr) throws Exception {\n+    \tSubject subj = WSSubject.getRunAsSubject();\n+    \tList<Object> amrValues= new ArrayList<Object>();\n+    \tif (subj != null) {\n+    \t\tWSCredential wscred = getWSCredential(subj);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8550ee341ed627f6a1ac17beba5b3584115e2858"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzI0ODMyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/internal/ConsumerUtil.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxOTo1NTo1MlrOG4cbkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMDo0NTo1OVrOG9Iwpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgzOTI0OQ==", "bodyText": "There is a potential for regression in this logic. A previous JWT that included an \"amr\" claim could have been accepted prior to these changes and it will now be rejected.\nPlease review if the intention is to make the amr claim optional if the jwtConsumer has not been configured with a list of AMRs to validate.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13113#discussion_r461839249", "createdAt": "2020-07-28T19:55:52Z", "author": {"login": "teddyjtorres"}, "path": "dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/internal/ConsumerUtil.java", "diffHunk": "@@ -687,5 +695,56 @@ String createDateString(NumericDate date) {\n \t\t// milliseconds\n \t\treturn timeUtils.createDateString(1000 * date.getValue());\n \t}\n+\t\n+\t/**\n+\t * Helper method to get the AMR Claim from the jwtClaims.This method checks\n+\t * if the value is a string and return singletonList or the ArrayList of\n+\t * amrClaims. This is called in validateClaims method\n+\t *\n+\t */\n+\tList<String> getJwtAMRList(JwtClaims jwtClaims) throws MalformedClaimException {\n+\t\tString claimName = \"amr\";\n+\t\tObject amrObject = jwtClaims.getClaimValue(claimName);\n+\t\tif (amrObject instanceof String) {\n+\t\t\treturn Collections.singletonList(jwtClaims.getStringClaimValue(claimName));\n+\t\t} else if (!(amrObject instanceof List) && amrObject != null) {\n+\t\t\tthrow new MalformedClaimException(\n+\t\t\t\t\t\"The value of the 'amr' claim is not an array of strings or a single string value.\");\n+\t\t} else {\n+\t\t\treturn jwtClaims.getStringListClaimValue(claimName);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Verifies that values specified in AMR claim is contained in the\n+\t * authenticationMethodsReferences list. If allowedAMRClaim is not an array\n+\t * then jwtClaims can contain more than required values. If not, then the\n+\t * jwtClaimvalues must be a exact match of an element in the array.\n+\t */\n+\tboolean validateAMRClaim(List<String> allowedAmrClaim, List<String> jwtAMRClaims) {\n+\t\tboolean valid = false;\n+\t\tif (allowedAmrClaim != null && jwtAMRClaims != null) {\n+\t\t\t// If it is not array just check if jwtClaim containsAll and not\n+\t\t\t// equals\n+\t\t\tif (allowedAmrClaim.size() == 1) {\n+\t\t\t\tList<String> allowedAMRSingle = Arrays.asList(allowedAmrClaim.get(0).split(\" \"));\n+\t\t\t\tif (jwtAMRClaims.containsAll(allowedAMRSingle)) {\n+\t\t\t\t\tvalid = true;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tfor (String allowedAMR : allowedAmrClaim) {\n+\t\t\t\t\tList<String> allowedAMRSingle = Arrays.asList(allowedAMR.split(\" \"));\n+\t\t\t\t\tif (jwtAMRClaims.equals(allowedAMRSingle)) {\n+\t\t\t\t\t\tvalid = true;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else if (allowedAmrClaim == null && (jwtAMRClaims == null || jwtAMRClaims.isEmpty())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8550ee341ed627f6a1ac17beba5b3584115e2858"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4ODA3Mg==", "bodyText": "@chunlongliang-ibm This is a default behavior change. Is this what was intended?", "url": "https://github.com/OpenLiberty/open-liberty/pull/13113#discussion_r461888072", "createdAt": "2020-07-28T21:23:38Z", "author": {"login": "teddyjtorres"}, "path": "dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/internal/ConsumerUtil.java", "diffHunk": "@@ -687,5 +695,56 @@ String createDateString(NumericDate date) {\n \t\t// milliseconds\n \t\treturn timeUtils.createDateString(1000 * date.getValue());\n \t}\n+\t\n+\t/**\n+\t * Helper method to get the AMR Claim from the jwtClaims.This method checks\n+\t * if the value is a string and return singletonList or the ArrayList of\n+\t * amrClaims. This is called in validateClaims method\n+\t *\n+\t */\n+\tList<String> getJwtAMRList(JwtClaims jwtClaims) throws MalformedClaimException {\n+\t\tString claimName = \"amr\";\n+\t\tObject amrObject = jwtClaims.getClaimValue(claimName);\n+\t\tif (amrObject instanceof String) {\n+\t\t\treturn Collections.singletonList(jwtClaims.getStringClaimValue(claimName));\n+\t\t} else if (!(amrObject instanceof List) && amrObject != null) {\n+\t\t\tthrow new MalformedClaimException(\n+\t\t\t\t\t\"The value of the 'amr' claim is not an array of strings or a single string value.\");\n+\t\t} else {\n+\t\t\treturn jwtClaims.getStringListClaimValue(claimName);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Verifies that values specified in AMR claim is contained in the\n+\t * authenticationMethodsReferences list. If allowedAMRClaim is not an array\n+\t * then jwtClaims can contain more than required values. If not, then the\n+\t * jwtClaimvalues must be a exact match of an element in the array.\n+\t */\n+\tboolean validateAMRClaim(List<String> allowedAmrClaim, List<String> jwtAMRClaims) {\n+\t\tboolean valid = false;\n+\t\tif (allowedAmrClaim != null && jwtAMRClaims != null) {\n+\t\t\t// If it is not array just check if jwtClaim containsAll and not\n+\t\t\t// equals\n+\t\t\tif (allowedAmrClaim.size() == 1) {\n+\t\t\t\tList<String> allowedAMRSingle = Arrays.asList(allowedAmrClaim.get(0).split(\" \"));\n+\t\t\t\tif (jwtAMRClaims.containsAll(allowedAMRSingle)) {\n+\t\t\t\t\tvalid = true;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tfor (String allowedAMR : allowedAmrClaim) {\n+\t\t\t\t\tList<String> allowedAMRSingle = Arrays.asList(allowedAMR.split(\" \"));\n+\t\t\t\t\tif (jwtAMRClaims.equals(allowedAMRSingle)) {\n+\t\t\t\t\t\tvalid = true;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else if (allowedAmrClaim == null && (jwtAMRClaims == null || jwtAMRClaims.isEmpty())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgzOTI0OQ=="}, "originalCommit": {"oid": "8550ee341ed627f6a1ac17beba5b3584115e2858"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY0MzM2OQ==", "bodyText": "This is a default behavior change and cannot be merged in as coded. A previous JWT that included an \"amr\" claim could have been accepted prior to these changes and it will now be rejected even when a consumer has not been configured with amrValues. Please ensure that a JWT that contains an amr claim is not rejected when amrValues is not configured.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13113#discussion_r466643369", "createdAt": "2020-08-06T19:39:42Z", "author": {"login": "teddyjtorres"}, "path": "dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/internal/ConsumerUtil.java", "diffHunk": "@@ -687,5 +695,56 @@ String createDateString(NumericDate date) {\n \t\t// milliseconds\n \t\treturn timeUtils.createDateString(1000 * date.getValue());\n \t}\n+\t\n+\t/**\n+\t * Helper method to get the AMR Claim from the jwtClaims.This method checks\n+\t * if the value is a string and return singletonList or the ArrayList of\n+\t * amrClaims. This is called in validateClaims method\n+\t *\n+\t */\n+\tList<String> getJwtAMRList(JwtClaims jwtClaims) throws MalformedClaimException {\n+\t\tString claimName = \"amr\";\n+\t\tObject amrObject = jwtClaims.getClaimValue(claimName);\n+\t\tif (amrObject instanceof String) {\n+\t\t\treturn Collections.singletonList(jwtClaims.getStringClaimValue(claimName));\n+\t\t} else if (!(amrObject instanceof List) && amrObject != null) {\n+\t\t\tthrow new MalformedClaimException(\n+\t\t\t\t\t\"The value of the 'amr' claim is not an array of strings or a single string value.\");\n+\t\t} else {\n+\t\t\treturn jwtClaims.getStringListClaimValue(claimName);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Verifies that values specified in AMR claim is contained in the\n+\t * authenticationMethodsReferences list. If allowedAMRClaim is not an array\n+\t * then jwtClaims can contain more than required values. If not, then the\n+\t * jwtClaimvalues must be a exact match of an element in the array.\n+\t */\n+\tboolean validateAMRClaim(List<String> allowedAmrClaim, List<String> jwtAMRClaims) {\n+\t\tboolean valid = false;\n+\t\tif (allowedAmrClaim != null && jwtAMRClaims != null) {\n+\t\t\t// If it is not array just check if jwtClaim containsAll and not\n+\t\t\t// equals\n+\t\t\tif (allowedAmrClaim.size() == 1) {\n+\t\t\t\tList<String> allowedAMRSingle = Arrays.asList(allowedAmrClaim.get(0).split(\" \"));\n+\t\t\t\tif (jwtAMRClaims.containsAll(allowedAMRSingle)) {\n+\t\t\t\t\tvalid = true;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tfor (String allowedAMR : allowedAmrClaim) {\n+\t\t\t\t\tList<String> allowedAMRSingle = Arrays.asList(allowedAMR.split(\" \"));\n+\t\t\t\t\tif (jwtAMRClaims.equals(allowedAMRSingle)) {\n+\t\t\t\t\t\tvalid = true;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else if (allowedAmrClaim == null && (jwtAMRClaims == null || jwtAMRClaims.isEmpty())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgzOTI0OQ=="}, "originalCommit": {"oid": "8550ee341ed627f6a1ac17beba5b3584115e2858"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NzA1Ng==", "bodyText": "I can get rid of this code here and it would take that required part off. @chunlongliang-ibm can confirm if that is what it was intended", "url": "https://github.com/OpenLiberty/open-liberty/pull/13113#discussion_r466657056", "createdAt": "2020-08-06T20:06:52Z", "author": {"login": "AlvinChacko"}, "path": "dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/internal/ConsumerUtil.java", "diffHunk": "@@ -687,5 +695,56 @@ String createDateString(NumericDate date) {\n \t\t// milliseconds\n \t\treturn timeUtils.createDateString(1000 * date.getValue());\n \t}\n+\t\n+\t/**\n+\t * Helper method to get the AMR Claim from the jwtClaims.This method checks\n+\t * if the value is a string and return singletonList or the ArrayList of\n+\t * amrClaims. This is called in validateClaims method\n+\t *\n+\t */\n+\tList<String> getJwtAMRList(JwtClaims jwtClaims) throws MalformedClaimException {\n+\t\tString claimName = \"amr\";\n+\t\tObject amrObject = jwtClaims.getClaimValue(claimName);\n+\t\tif (amrObject instanceof String) {\n+\t\t\treturn Collections.singletonList(jwtClaims.getStringClaimValue(claimName));\n+\t\t} else if (!(amrObject instanceof List) && amrObject != null) {\n+\t\t\tthrow new MalformedClaimException(\n+\t\t\t\t\t\"The value of the 'amr' claim is not an array of strings or a single string value.\");\n+\t\t} else {\n+\t\t\treturn jwtClaims.getStringListClaimValue(claimName);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Verifies that values specified in AMR claim is contained in the\n+\t * authenticationMethodsReferences list. If allowedAMRClaim is not an array\n+\t * then jwtClaims can contain more than required values. If not, then the\n+\t * jwtClaimvalues must be a exact match of an element in the array.\n+\t */\n+\tboolean validateAMRClaim(List<String> allowedAmrClaim, List<String> jwtAMRClaims) {\n+\t\tboolean valid = false;\n+\t\tif (allowedAmrClaim != null && jwtAMRClaims != null) {\n+\t\t\t// If it is not array just check if jwtClaim containsAll and not\n+\t\t\t// equals\n+\t\t\tif (allowedAmrClaim.size() == 1) {\n+\t\t\t\tList<String> allowedAMRSingle = Arrays.asList(allowedAmrClaim.get(0).split(\" \"));\n+\t\t\t\tif (jwtAMRClaims.containsAll(allowedAMRSingle)) {\n+\t\t\t\t\tvalid = true;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tfor (String allowedAMR : allowedAmrClaim) {\n+\t\t\t\t\tList<String> allowedAMRSingle = Arrays.asList(allowedAMR.split(\" \"));\n+\t\t\t\t\tif (jwtAMRClaims.equals(allowedAMRSingle)) {\n+\t\t\t\t\t\tvalid = true;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else if (allowedAmrClaim == null && (jwtAMRClaims == null || jwtAMRClaims.isEmpty())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgzOTI0OQ=="}, "originalCommit": {"oid": "8550ee341ed627f6a1ac17beba5b3584115e2858"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc1OTg0Ng==", "bodyText": "Fixed it in my new code. Although I have a logic that is if the amrConfig is not specified, then validation returns true. Which means if the amrConfig is specified and the jwt doesnt include amr then the validation will fail. Let me know if I need to add any logic there.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13113#discussion_r466759846", "createdAt": "2020-08-07T00:45:59Z", "author": {"login": "AlvinChacko"}, "path": "dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/internal/ConsumerUtil.java", "diffHunk": "@@ -687,5 +695,56 @@ String createDateString(NumericDate date) {\n \t\t// milliseconds\n \t\treturn timeUtils.createDateString(1000 * date.getValue());\n \t}\n+\t\n+\t/**\n+\t * Helper method to get the AMR Claim from the jwtClaims.This method checks\n+\t * if the value is a string and return singletonList or the ArrayList of\n+\t * amrClaims. This is called in validateClaims method\n+\t *\n+\t */\n+\tList<String> getJwtAMRList(JwtClaims jwtClaims) throws MalformedClaimException {\n+\t\tString claimName = \"amr\";\n+\t\tObject amrObject = jwtClaims.getClaimValue(claimName);\n+\t\tif (amrObject instanceof String) {\n+\t\t\treturn Collections.singletonList(jwtClaims.getStringClaimValue(claimName));\n+\t\t} else if (!(amrObject instanceof List) && amrObject != null) {\n+\t\t\tthrow new MalformedClaimException(\n+\t\t\t\t\t\"The value of the 'amr' claim is not an array of strings or a single string value.\");\n+\t\t} else {\n+\t\t\treturn jwtClaims.getStringListClaimValue(claimName);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Verifies that values specified in AMR claim is contained in the\n+\t * authenticationMethodsReferences list. If allowedAMRClaim is not an array\n+\t * then jwtClaims can contain more than required values. If not, then the\n+\t * jwtClaimvalues must be a exact match of an element in the array.\n+\t */\n+\tboolean validateAMRClaim(List<String> allowedAmrClaim, List<String> jwtAMRClaims) {\n+\t\tboolean valid = false;\n+\t\tif (allowedAmrClaim != null && jwtAMRClaims != null) {\n+\t\t\t// If it is not array just check if jwtClaim containsAll and not\n+\t\t\t// equals\n+\t\t\tif (allowedAmrClaim.size() == 1) {\n+\t\t\t\tList<String> allowedAMRSingle = Arrays.asList(allowedAmrClaim.get(0).split(\" \"));\n+\t\t\t\tif (jwtAMRClaims.containsAll(allowedAMRSingle)) {\n+\t\t\t\t\tvalid = true;\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tfor (String allowedAMR : allowedAmrClaim) {\n+\t\t\t\t\tList<String> allowedAMRSingle = Arrays.asList(allowedAMR.split(\" \"));\n+\t\t\t\t\tif (jwtAMRClaims.equals(allowedAMRSingle)) {\n+\t\t\t\t\t\tvalid = true;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else if (allowedAmrClaim == null && (jwtAMRClaims == null || jwtAMRClaims.isEmpty())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgzOTI0OQ=="}, "originalCommit": {"oid": "8550ee341ed627f6a1ac17beba5b3584115e2858"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzQyODY5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.jwt/test/com/ibm/ws/security/jwt/internal/ConsumerUtilTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMDo0NDoxNVrOG4eHpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMDo0NDoxNVrOG4eHpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg2NjkxOQ==", "bodyText": "This new expectation might introduce a regression. A previous JWT that included an \"amr\" claim could have been accepted prior to these changes and it will now be rejected.\nPlease review if the intention is to make the amr claim optional if the jwtConsumer has not been configured with a list of AMRs to validate.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13113#discussion_r461866919", "createdAt": "2020-07-28T20:44:15Z", "author": {"login": "teddyjtorres"}, "path": "dev/com.ibm.ws.security.jwt/test/com/ibm/ws/security/jwt/internal/ConsumerUtilTest.java", "diffHunk": "@@ -1886,6 +1886,61 @@ public void testValidateAlgorithm_algMatch() {\n             outputMgr.failWithThrowable(testName.getMethodName(), t);\n         }\n     }\n+    \n+    /********************************************* validateAMRClaim *********************************************/\n+\n+    /**\n+     * Method under test: {@link ConsumerUtil#validateAMRClaim(List, List)}\n+     */\n+    @Test\n+    public void testValidateAMRClaim() {\n+        try {\n+            List<String> emptyList = new ArrayList<String>();\n+            List<String> singleList = new ArrayList<String>();\n+            singleList.add(\"OTP iris\");\n+            List<String> multipleList = new ArrayList<String>();\n+            multipleList.add(\"OTP iris\");\n+            multipleList.add(\"pwd kba\");\n+\n+            // Null/empty token and allowed amrClaims\n+            assertTrue(\"Validation should have succeeded.\", consumerUtil.validateAMRClaim(null, null));\n+            assertTrue(\"Validation should have succeeded.\", consumerUtil.validateAMRClaim(null, emptyList));\n+            assertFalse(\"Validation should NOT have succeeded.\", consumerUtil.validateAMRClaim(emptyList, null));\n+            assertFalse(\"Validation should NOT have succeeded.\", consumerUtil.validateAMRClaim(emptyList, emptyList));\n+\n+            // Null/empty allowed amr, single amr in the token\n+            assertFalse(\"Validation should NOT have succeeded.\", consumerUtil.validateAMRClaim(null, singleList));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8550ee341ed627f6a1ac17beba5b3584115e2858"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzQ5ODM5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.jwtsso_fat/fat/src/com/ibm/ws/security/jwtsso/fat/ConfigAttributeTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTowMzo1NVrOG4eyJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTowMzo1NVrOG4eyJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg3Nzc5Nw==", "bodyText": "Test description is not consistent with the assertion being performed.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13113#discussion_r461877797", "createdAt": "2020-07-28T21:03:55Z", "author": {"login": "teddyjtorres"}, "path": "dev/com.ibm.ws.security.jwtsso_fat/fat/src/com/ibm/ws/security/jwtsso/fat/ConfigAttributeTests.java", "diffHunk": "@@ -759,4 +759,28 @@ public void test_sslPortNotDefined() throws Exception {\n         validationUtils.validateResult(response, currentAction, expectations);\n     }\n \n+    /**\n+     * Test that the jwtsso cookie respects the webAppSecurity httpOnlyCookies attribute setting.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d9b4d9d9eb1d36e8a3b759288e8c6bc9dac6664"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2958, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}