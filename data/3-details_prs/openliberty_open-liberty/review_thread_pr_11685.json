{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNDc1NDM2", "number": 11685, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODoxODozN1rODwHCwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOTowMzoxOFrODwIClg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzczNjMzOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jpa_spec10_query_fat/publish/servers/JPA10QueryServer/database.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODoxODozN1rOGC7UGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToyMjoxNlrOGC9isg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyMjEzNw==", "bodyText": "If this is supposed to be DB agnostic, do we want to use <properties.derby.embedded?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11685#discussion_r405722137", "createdAt": "2020-04-08T18:18:37Z", "author": {"login": "dazey3"}, "path": "dev/com.ibm.ws.jpa_spec10_query_fat/publish/servers/JPA10QueryServer/database.xml", "diffHunk": "@@ -10,18 +10,30 @@\n  -->\n  <server>\n     <dataSource id=\"jdbc/JPA_DS\" jndiName=\"jdbc/JPA_DS\" fat.modify=\"true\">\n-            <jdbcDriver libraryRef=\"JDBCLib\"/>\n-            <properties.derby.embedded databaseName=\"memory:ds1\" createDatabase=\"create\" user=\"dbuser1\" password=\"{xor}Oz0vKDtu\" />\n+            <jdbcDriver libraryRef=\"AnonymousJDBCLib\"/>\n+            <properties.derby.embedded databaseName=\"memory:ds1\" createDatabase=\"create\" />\n     </dataSource>\n \n     <dataSource id=\"jdbc/JPA_NJTADS\" jndiName=\"jdbc/JPA_NJTADS\" fat.modify=\"true\" transactional=\"false\">\n-            <jdbcDriver libraryRef=\"JDBCLib\"/>\n-            <properties.derby.embedded databaseName=\"memory:ds1\" createDatabase=\"create\" user=\"dbuser1\" password=\"{xor}Oz0vKDtu\" />\n+            <jdbcDriver libraryRef=\"AnonymousJDBCLib\"/>\n+            <properties.derby.embedded databaseName=\"memory:ds1\" createDatabase=\"create\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f50c38b7730c8f605528e334800d326c1f561793"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1ODY0Mg==", "bodyText": "Because the database tooling will replace it.  I followed the example from com.ibm.ws.concurrent.persistent_fat_demo_timers.  Having it there is the correct thing to do.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11685#discussion_r405758642", "createdAt": "2020-04-08T19:22:16Z", "author": {"login": "jgrassel"}, "path": "dev/com.ibm.ws.jpa_spec10_query_fat/publish/servers/JPA10QueryServer/database.xml", "diffHunk": "@@ -10,18 +10,30 @@\n  -->\n  <server>\n     <dataSource id=\"jdbc/JPA_DS\" jndiName=\"jdbc/JPA_DS\" fat.modify=\"true\">\n-            <jdbcDriver libraryRef=\"JDBCLib\"/>\n-            <properties.derby.embedded databaseName=\"memory:ds1\" createDatabase=\"create\" user=\"dbuser1\" password=\"{xor}Oz0vKDtu\" />\n+            <jdbcDriver libraryRef=\"AnonymousJDBCLib\"/>\n+            <properties.derby.embedded databaseName=\"memory:ds1\" createDatabase=\"create\" />\n     </dataSource>\n \n     <dataSource id=\"jdbc/JPA_NJTADS\" jndiName=\"jdbc/JPA_NJTADS\" fat.modify=\"true\" transactional=\"false\">\n-            <jdbcDriver libraryRef=\"JDBCLib\"/>\n-            <properties.derby.embedded databaseName=\"memory:ds1\" createDatabase=\"create\" user=\"dbuser1\" password=\"{xor}Oz0vKDtu\" />\n+            <jdbcDriver libraryRef=\"AnonymousJDBCLib\"/>\n+            <properties.derby.embedded databaseName=\"memory:ds1\" createDatabase=\"create\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyMjEzNw=="}, "originalCommit": {"oid": "f50c38b7730c8f605528e334800d326c1f561793"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzc3ODQyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jpa_spec10_query_fat/test-applications/olgh8014/src/com/ibm/ws/jpa/olgh8014/testlogic/JPATestOLGH8014Logic.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODozMDowNFrOGC7ulg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMDozODowMVrOGEFNrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyODkxOA==", "bodyText": "What was the necessity of changing the test? Was the test failing without this change? What DBs fail without this change?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11685#discussion_r405728918", "createdAt": "2020-04-08T18:30:04Z", "author": {"login": "dazey3"}, "path": "dev/com.ibm.ws.jpa_spec10_query_fat/test-applications/olgh8014/src/com/ibm/ws/jpa/olgh8014/testlogic/JPATestOLGH8014Logic.java", "diffHunk": "@@ -387,7 +387,7 @@ public void testAggregateFunctionsWithPrimitives(TestExecutionContext testExecCt\n                 Assert.assertEquals(new Integer(20), res);\n             } else {\n                 //The specification defined assertion\n-                Assert.assertEquals(new Double(20), res);\n+                Assert.assertEquals(new Double(20).doubleValue(), (double) res, 0.5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f50c38b7730c8f605528e334800d326c1f561793"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1OTI0Mg==", "bodyText": "You might have noticed the last argument, which allows for wriggle room.  Remember how float and decimal values are not precise, and can vary?  (hint: no reputable bank stores an account balance using decimals and floats)", "url": "https://github.com/OpenLiberty/open-liberty/pull/11685#discussion_r405759242", "createdAt": "2020-04-08T19:23:25Z", "author": {"login": "jgrassel"}, "path": "dev/com.ibm.ws.jpa_spec10_query_fat/test-applications/olgh8014/src/com/ibm/ws/jpa/olgh8014/testlogic/JPATestOLGH8014Logic.java", "diffHunk": "@@ -387,7 +387,7 @@ public void testAggregateFunctionsWithPrimitives(TestExecutionContext testExecCt\n                 Assert.assertEquals(new Integer(20), res);\n             } else {\n                 //The specification defined assertion\n-                Assert.assertEquals(new Double(20), res);\n+                Assert.assertEquals(new Double(20).doubleValue(), (double) res, 0.5);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyODkxOA=="}, "originalCommit": {"oid": "f50c38b7730c8f605528e334800d326c1f561793"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyNDQ3OQ==", "bodyText": "So you added the delta as a precaution, but there were no test failures that lead to this change?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11685#discussion_r406324479", "createdAt": "2020-04-09T16:24:26Z", "author": {"login": "dazey3"}, "path": "dev/com.ibm.ws.jpa_spec10_query_fat/test-applications/olgh8014/src/com/ibm/ws/jpa/olgh8014/testlogic/JPATestOLGH8014Logic.java", "diffHunk": "@@ -387,7 +387,7 @@ public void testAggregateFunctionsWithPrimitives(TestExecutionContext testExecCt\n                 Assert.assertEquals(new Integer(20), res);\n             } else {\n                 //The specification defined assertion\n-                Assert.assertEquals(new Double(20), res);\n+                Assert.assertEquals(new Double(20).doubleValue(), (double) res, 0.5);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyODkxOA=="}, "originalCommit": {"oid": "f50c38b7730c8f605528e334800d326c1f561793"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzMDgyMg==", "bodyText": "Without them, Oracle and SQLServer failed because the database did not store the float value exactly the same as as the JVM's value.  So when the query executed, the float value returned was difference.  Because 2.1 != 2.11.  So the third argument is a tolerance for that variance.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11685#discussion_r406430822", "createdAt": "2020-04-09T19:34:02Z", "author": {"login": "jgrassel"}, "path": "dev/com.ibm.ws.jpa_spec10_query_fat/test-applications/olgh8014/src/com/ibm/ws/jpa/olgh8014/testlogic/JPATestOLGH8014Logic.java", "diffHunk": "@@ -387,7 +387,7 @@ public void testAggregateFunctionsWithPrimitives(TestExecutionContext testExecCt\n                 Assert.assertEquals(new Integer(20), res);\n             } else {\n                 //The specification defined assertion\n-                Assert.assertEquals(new Double(20), res);\n+                Assert.assertEquals(new Double(20).doubleValue(), (double) res, 0.5);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyODkxOA=="}, "originalCommit": {"oid": "f50c38b7730c8f605528e334800d326c1f561793"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1OTY3MQ==", "bodyText": "Hmm. That seems like an issue. Customers aren't going to be ok with an arbitrary tolerance tho. Do you have the test results you could send me? Id like to take a look.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11685#discussion_r406459671", "createdAt": "2020-04-09T20:31:03Z", "author": {"login": "dazey3"}, "path": "dev/com.ibm.ws.jpa_spec10_query_fat/test-applications/olgh8014/src/com/ibm/ws/jpa/olgh8014/testlogic/JPATestOLGH8014Logic.java", "diffHunk": "@@ -387,7 +387,7 @@ public void testAggregateFunctionsWithPrimitives(TestExecutionContext testExecCt\n                 Assert.assertEquals(new Integer(20), res);\n             } else {\n                 //The specification defined assertion\n-                Assert.assertEquals(new Double(20), res);\n+                Assert.assertEquals(new Double(20).doubleValue(), (double) res, 0.5);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyODkxOA=="}, "originalCommit": {"oid": "f50c38b7730c8f605528e334800d326c1f561793"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ5MDIzNA==", "bodyText": "Will, this is at the jdbc/database level.  Go ahead and try it with some raw JDBC.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11685#discussion_r406490234", "createdAt": "2020-04-09T21:33:35Z", "author": {"login": "jgrassel"}, "path": "dev/com.ibm.ws.jpa_spec10_query_fat/test-applications/olgh8014/src/com/ibm/ws/jpa/olgh8014/testlogic/JPATestOLGH8014Logic.java", "diffHunk": "@@ -387,7 +387,7 @@ public void testAggregateFunctionsWithPrimitives(TestExecutionContext testExecCt\n                 Assert.assertEquals(new Integer(20), res);\n             } else {\n                 //The specification defined assertion\n-                Assert.assertEquals(new Double(20), res);\n+                Assert.assertEquals(new Double(20).doubleValue(), (double) res, 0.5);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyODkxOA=="}, "originalCommit": {"oid": "f50c38b7730c8f605528e334800d326c1f561793"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkzMjkxMA==", "bodyText": "Maybe these tests are pretty useless then. They were meant to test precise return values, but every database returns a different result.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11685#discussion_r406932910", "createdAt": "2020-04-10T20:38:01Z", "author": {"login": "dazey3"}, "path": "dev/com.ibm.ws.jpa_spec10_query_fat/test-applications/olgh8014/src/com/ibm/ws/jpa/olgh8014/testlogic/JPATestOLGH8014Logic.java", "diffHunk": "@@ -387,7 +387,7 @@ public void testAggregateFunctionsWithPrimitives(TestExecutionContext testExecCt\n                 Assert.assertEquals(new Integer(20), res);\n             } else {\n                 //The specification defined assertion\n-                Assert.assertEquals(new Double(20), res);\n+                Assert.assertEquals(new Double(20).doubleValue(), (double) res, 0.5);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyODkxOA=="}, "originalCommit": {"oid": "f50c38b7730c8f605528e334800d326c1f561793"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzg4NjIxOnYy", "diffSide": "LEFT", "path": "dev/com.ibm.ws.jpa_spec10_query_fat/test-applications/olgh8014/ddl/WEB-INF/classes/JPA_OLGH8014_POPULATE_POSTGRES.ddl", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODo1OToyM1rOGC8x6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDowOTo0N1rOGDnsSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc0NjE1Mg==", "bodyText": "Does ${schemaname} just not work for Postgres? Should this be removed from all the Postgres ddl (JPA_OLGH8294_DELETE_POSTGRES, JPA_OLGH8294_DROP_POSTGRES, JPA_OLGH8014_DELETE_POSTGRES, JPA_OLGH8014_DROP_POSTGRES)?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11685#discussion_r405746152", "createdAt": "2020-04-08T18:59:23Z", "author": {"login": "dazey3"}, "path": "dev/com.ibm.ws.jpa_spec10_query_fat/test-applications/olgh8014/ddl/WEB-INF/classes/JPA_OLGH8014_POPULATE_POSTGRES.ddl", "diffHunk": "@@ -1,2 +1,2 @@\n-INSERT INTO ${schemaname}.SIMPLEENTITYOLGH8014 (KEY_CHAR,ITEM_BIG_DECIMAL1,ITEM_BIG_INTEGER1,ITEM_FLOAT1,ITEM_FLOAT2,ITEM_INTEGER1,ITEM_INTEGER2,ITEM_STRING1) VALUES ('SimpleEntityOLGH80141',11.11,12,13.13,14.15,15,16,'TestString');\n-INSERT INTO ${schemaname}.SIMPLEENTITYOLGH8014 (KEY_CHAR,ITEM_BIG_DECIMAL1,ITEM_BIG_INTEGER1,ITEM_FLOAT1,ITEM_FLOAT2,ITEM_INTEGER1,ITEM_INTEGER2,ITEM_STRING1) VALUES ('SimpleEntityOLGH80142',21.21,22,23.23,24.25,25,26,'TestString');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f50c38b7730c8f605528e334800d326c1f561793"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1OTc2MA==", "bodyText": "I had problems with it, so I got rid of it.  Though yeah, the delete and drop scripts should be consistent. Good catch.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11685#discussion_r405759760", "createdAt": "2020-04-08T19:24:21Z", "author": {"login": "jgrassel"}, "path": "dev/com.ibm.ws.jpa_spec10_query_fat/test-applications/olgh8014/ddl/WEB-INF/classes/JPA_OLGH8014_POPULATE_POSTGRES.ddl", "diffHunk": "@@ -1,2 +1,2 @@\n-INSERT INTO ${schemaname}.SIMPLEENTITYOLGH8014 (KEY_CHAR,ITEM_BIG_DECIMAL1,ITEM_BIG_INTEGER1,ITEM_FLOAT1,ITEM_FLOAT2,ITEM_INTEGER1,ITEM_INTEGER2,ITEM_STRING1) VALUES ('SimpleEntityOLGH80141',11.11,12,13.13,14.15,15,16,'TestString');\n-INSERT INTO ${schemaname}.SIMPLEENTITYOLGH8014 (KEY_CHAR,ITEM_BIG_DECIMAL1,ITEM_BIG_INTEGER1,ITEM_FLOAT1,ITEM_FLOAT2,ITEM_INTEGER1,ITEM_INTEGER2,ITEM_STRING1) VALUES ('SimpleEntityOLGH80142',21.21,22,23.23,24.25,25,26,'TestString');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc0NjE1Mg=="}, "originalCommit": {"oid": "f50c38b7730c8f605528e334800d326c1f561793"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ0OTIyNA==", "bodyText": "fixed", "url": "https://github.com/OpenLiberty/open-liberty/pull/11685#discussion_r406449224", "createdAt": "2020-04-09T20:09:47Z", "author": {"login": "jgrassel"}, "path": "dev/com.ibm.ws.jpa_spec10_query_fat/test-applications/olgh8014/ddl/WEB-INF/classes/JPA_OLGH8014_POPULATE_POSTGRES.ddl", "diffHunk": "@@ -1,2 +1,2 @@\n-INSERT INTO ${schemaname}.SIMPLEENTITYOLGH8014 (KEY_CHAR,ITEM_BIG_DECIMAL1,ITEM_BIG_INTEGER1,ITEM_FLOAT1,ITEM_FLOAT2,ITEM_INTEGER1,ITEM_INTEGER2,ITEM_STRING1) VALUES ('SimpleEntityOLGH80141',11.11,12,13.13,14.15,15,16,'TestString');\n-INSERT INTO ${schemaname}.SIMPLEENTITYOLGH8014 (KEY_CHAR,ITEM_BIG_DECIMAL1,ITEM_BIG_INTEGER1,ITEM_FLOAT1,ITEM_FLOAT2,ITEM_INTEGER1,ITEM_INTEGER2,ITEM_STRING1) VALUES ('SimpleEntityOLGH80142',21.21,22,23.23,24.25,25,26,'TestString');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc0NjE1Mg=="}, "originalCommit": {"oid": "f50c38b7730c8f605528e334800d326c1f561793"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzg5OTc0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jpa_spec10_query_fat/test-applications/olgh8294/web/olgh8294Web.war/WEB-INF/classes/META-INF/persistence.xml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOTowMzoxOFrOGC86yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDowOTo1M1rOGDnsgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc0ODQyNw==", "bodyText": "Was this change needed for a test failure?? I wouldn't think this to be necessary for different databases", "url": "https://github.com/OpenLiberty/open-liberty/pull/11685#discussion_r405748427", "createdAt": "2020-04-08T19:03:18Z", "author": {"login": "dazey3"}, "path": "dev/com.ibm.ws.jpa_spec10_query_fat/test-applications/olgh8294/web/olgh8294Web.war/WEB-INF/classes/META-INF/persistence.xml", "diffHunk": "@@ -35,6 +35,7 @@\n \n     <persistence-unit name=\"OLGH8294_PROPERTY_RL\" transaction-type=\"RESOURCE_LOCAL\">\n         <non-jta-data-source>jdbc/JPA_NJTADS</non-jta-data-source>\n+        <class>com.ibm.ws.jpa.olgh8294.model.SimpleEntityOLGH8294</class>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f50c38b7730c8f605528e334800d326c1f561793"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc2MDE1NA==", "bodyText": "Oh, I needed that to generate the sqlserver ddl (remember, java se environments require  elements, they don't scan for persistent types.  It doesn't hurt anything having it there, but I'll clean it up.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11685#discussion_r405760154", "createdAt": "2020-04-08T19:25:08Z", "author": {"login": "jgrassel"}, "path": "dev/com.ibm.ws.jpa_spec10_query_fat/test-applications/olgh8294/web/olgh8294Web.war/WEB-INF/classes/META-INF/persistence.xml", "diffHunk": "@@ -35,6 +35,7 @@\n \n     <persistence-unit name=\"OLGH8294_PROPERTY_RL\" transaction-type=\"RESOURCE_LOCAL\">\n         <non-jta-data-source>jdbc/JPA_NJTADS</non-jta-data-source>\n+        <class>com.ibm.ws.jpa.olgh8294.model.SimpleEntityOLGH8294</class>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc0ODQyNw=="}, "originalCommit": {"oid": "f50c38b7730c8f605528e334800d326c1f561793"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyNjQ4Mw==", "bodyText": "Thanks. I appreciate cleaning this up, even though I agree there isnt any real issue having it there.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11685#discussion_r406326483", "createdAt": "2020-04-09T16:27:36Z", "author": {"login": "dazey3"}, "path": "dev/com.ibm.ws.jpa_spec10_query_fat/test-applications/olgh8294/web/olgh8294Web.war/WEB-INF/classes/META-INF/persistence.xml", "diffHunk": "@@ -35,6 +35,7 @@\n \n     <persistence-unit name=\"OLGH8294_PROPERTY_RL\" transaction-type=\"RESOURCE_LOCAL\">\n         <non-jta-data-source>jdbc/JPA_NJTADS</non-jta-data-source>\n+        <class>com.ibm.ws.jpa.olgh8294.model.SimpleEntityOLGH8294</class>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc0ODQyNw=="}, "originalCommit": {"oid": "f50c38b7730c8f605528e334800d326c1f561793"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ0OTI4Mw==", "bodyText": "fixed", "url": "https://github.com/OpenLiberty/open-liberty/pull/11685#discussion_r406449283", "createdAt": "2020-04-09T20:09:53Z", "author": {"login": "jgrassel"}, "path": "dev/com.ibm.ws.jpa_spec10_query_fat/test-applications/olgh8294/web/olgh8294Web.war/WEB-INF/classes/META-INF/persistence.xml", "diffHunk": "@@ -35,6 +35,7 @@\n \n     <persistence-unit name=\"OLGH8294_PROPERTY_RL\" transaction-type=\"RESOURCE_LOCAL\">\n         <non-jta-data-source>jdbc/JPA_NJTADS</non-jta-data-source>\n+        <class>com.ibm.ws.jpa.olgh8294.model.SimpleEntityOLGH8294</class>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc0ODQyNw=="}, "originalCommit": {"oid": "f50c38b7730c8f605528e334800d326c1f561793"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1897, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}