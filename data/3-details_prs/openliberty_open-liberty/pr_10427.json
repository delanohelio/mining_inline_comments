{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyODAxMzkx", "number": 10427, "title": "Introspection addition", "bodyText": "", "createdAt": "2020-01-14T19:30:42Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/10427", "merged": true, "mergeCommit": {"oid": "439855f1475168f102599ff233ace5fe71639351"}, "closed": true, "closedAt": "2020-01-15T14:51:38Z", "author": {"login": "ezhou365"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb2fpBNAH2gAyMzYyODAxMzkxOjdmYTZiZmFhMjgzZTMyM2Y5Yjc4ZmNhM2RiNTRlYjJhMTg4OTg3OTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb6mvs_AFqTM0MzI3Mzc2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7fa6bfaa283e323f9b78fca3db54eb2a18898799", "author": {"user": {"login": "ezhou365", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/7fa6bfaa283e323f9b78fca3db54eb2a18898799", "committedDate": "2020-01-02T20:18:42Z", "message": "added beginning of introspect logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6625eb524a8c3784d2477589b8296184a7dc2cb6", "author": {"user": {"login": "ezhou365", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/6625eb524a8c3784d2477589b8296184a7dc2cb6", "committedDate": "2020-01-08T21:15:40Z", "message": "introspect works"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb4be02efb760276b5c50d4c7ce0ec120f6d2e7c", "author": {"user": {"login": "ezhou365", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/eb4be02efb760276b5c50d4c7ce0ec120f6d2e7c", "committedDate": "2020-01-09T16:22:00Z", "message": "Merge remote-tracking branch 'origin/master' into introspection_addition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "baaab0821a01b6ec0090929616b67b7c1fd7496e", "author": {"user": {"login": "ezhou365", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/baaab0821a01b6ec0090929616b67b7c1fd7496e", "committedDate": "2020-01-14T15:42:00Z", "message": "merged in latest metatype code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67990f1e6edd8057049686f79b85a985b1024feb", "author": {"user": {"login": "ezhou365", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/67990f1e6edd8057049686f79b85a985b1024feb", "committedDate": "2020-01-14T16:32:42Z", "message": "latest changes with error messages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2cae041240af1d23e1c8517e48739fa882c2383", "author": {"user": {"login": "ezhou365", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/a2cae041240af1d23e1c8517e48739fa882c2383", "committedDate": "2020-01-14T19:29:45Z", "message": "added correct string processing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "920d99e8617ba14c2217d0f514360b814746a59b", "author": {"user": {"login": "ezhou365", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/920d99e8617ba14c2217d0f514360b814746a59b", "committedDate": "2020-01-14T19:38:14Z", "message": "whitespace:"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyODQ1NzA2", "url": "https://github.com/OpenLiberty/open-liberty/pull/10427#pullrequestreview-342845706", "createdAt": "2020-01-14T21:20:15Z", "commit": {"oid": "920d99e8617ba14c2217d0f514360b814746a59b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMToyMDoxNVrOFdmIrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTozMjo1NlrOFdmeJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3NzgzNg==", "bodyText": "I'd switch this to use the getRequiredConfigAttribute() method that's defined in this class. If you keep this call as you have it now, this will emit a message that says\n\nCWWKS6104W: The configuration attribute [clientId] that is required is missing or empty and a default value is not provided. Verify that the attribute is configured, that it is not empty, and that it does not consist of only white space characters.\n\nThat's technically correct, but the message doesn't tell us which element is missing that attribute. Using the other method will emit this error message:\n\nCWWKS5479E: The configuration attribute [clientId] that is required in the social login configuration [someSpecificSocialRP] is missing or empty. Verify that the attribute is configured, that it is not empty, and that it does not consist of only white space characters.\n\nThat helps a server admin because then they know that the someSpecificSocialRP element was the one with the problem. A server could have a bunch of social login configurations, so not knowing which specific one caused the problem would be a pain.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10427#discussion_r366577836", "createdAt": "2020-01-14T21:20:15Z", "author": {"login": "ayoho"}, "path": "dev/com.ibm.ws.security.social/src/com/ibm/ws/security/social/internal/Oauth2LoginConfigImpl.java", "diffHunk": "@@ -268,6 +272,19 @@ boolean isConfiguredForProxyFlow(Map<String, Object> props) {\n     protected void checkForRequiredConfigAttributesForProxyFlow(Map<String, Object> props) {\n         configUtils.getRequiredConfigAttributeWithConfigId(props, KEY_userApi, uniqueId);\n     }\n+    \n+    boolean isIntrospectConfiguration(Map<String, Object> props) {\n+        String userApiType = configUtils.getConfigAttribute(props, KEY_userApiType);\n+        if (userApiType != null && \"introspect\".equals(userApiType)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+    \n+    protected void checkForRequiredConfigAttributesForIntrospect(Map<String, Object> props) {\n+        configUtils.getRequiredConfigAttribute(props, KEY_clientId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "920d99e8617ba14c2217d0f514360b814746a59b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3OTU1NA==", "bodyText": "Strictly speaking, this just needs to be a SocialLoginConfig object and not a Oauth2LoginConfigImpl object. Making the change would avoid having to do a cast when this class' constructor is called by the runtime. I'd recommend switching it.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10427#discussion_r366579554", "createdAt": "2020-01-14T21:24:23Z", "author": {"login": "ayoho"}, "path": "dev/com.ibm.ws.security.social/src/com/ibm/ws/security/social/internal/utils/IntrospectUserApiUtils.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ * IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.social.internal.utils;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.StringReader;\n+import java.net.HttpURLConnection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.json.Json;\n+import javax.json.JsonObject;\n+import javax.json.JsonObjectBuilder;\n+import javax.json.JsonValue;\n+import javax.json.JsonValue.ValueType;\n+import javax.json.stream.JsonParsingException;\n+import javax.net.ssl.SSLSocketFactory;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.jose4j.lang.JoseException;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Sensitive;\n+import com.ibm.ws.security.common.http.HttpUtils;\n+import com.ibm.ws.security.social.TraceConstants;\n+import com.ibm.ws.security.social.error.SocialLoginException;\n+import com.ibm.ws.security.social.internal.Oauth2LoginConfigImpl;\n+import com.ibm.ws.common.internal.encoder.Base64Coder;\n+\n+public class IntrospectUserApiUtils {\n+\n+    public static final TraceComponent tc = Tr.register(IntrospectUserApiUtils.class, TraceConstants.TRACE_GROUP, TraceConstants.MESSAGE_BUNDLE);\n+\n+    Oauth2LoginConfigImpl config = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "920d99e8617ba14c2217d0f514360b814746a59b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4MzMzMw==", "bodyText": "I just noticed the code that this was based on had a minor mistake. The second argument to this SocialLoginException constructor is an Exception that's the cause of this new exception being thrown. That second argument should be the variable e instead of null.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10427#discussion_r366583333", "createdAt": "2020-01-14T21:32:56Z", "author": {"login": "ayoho"}, "path": "dev/com.ibm.ws.security.social/src/com/ibm/ws/security/social/internal/utils/IntrospectUserApiUtils.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ * IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.social.internal.utils;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.StringReader;\n+import java.net.HttpURLConnection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.json.Json;\n+import javax.json.JsonObject;\n+import javax.json.JsonObjectBuilder;\n+import javax.json.JsonValue;\n+import javax.json.JsonValue.ValueType;\n+import javax.json.stream.JsonParsingException;\n+import javax.net.ssl.SSLSocketFactory;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.jose4j.lang.JoseException;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Sensitive;\n+import com.ibm.ws.security.common.http.HttpUtils;\n+import com.ibm.ws.security.social.TraceConstants;\n+import com.ibm.ws.security.social.error.SocialLoginException;\n+import com.ibm.ws.security.social.internal.Oauth2LoginConfigImpl;\n+import com.ibm.ws.common.internal.encoder.Base64Coder;\n+\n+public class IntrospectUserApiUtils {\n+\n+    public static final TraceComponent tc = Tr.register(IntrospectUserApiUtils.class, TraceConstants.TRACE_GROUP, TraceConstants.MESSAGE_BUNDLE);\n+\n+    Oauth2LoginConfigImpl config = null;\n+\n+    HttpUtils httpUtils = new HttpUtils();\n+\n+    public IntrospectUserApiUtils(Oauth2LoginConfigImpl config) {\n+        this.config = config;\n+    }\n+\n+    public String getUserApiResponse(@Sensitive String accessToken, SSLSocketFactory sslSocketFactory) throws SocialLoginException {\n+        String response = null;\n+        try {\n+            HttpURLConnection connection = sendUserApiRequest(accessToken, sslSocketFactory);\n+            response = readUserApiResponse(connection);\n+        } catch (Exception e) {\n+            throw new SocialLoginException(\"INTROSPECT_ERROR_GETTING_USER_INFO\", e, new Object[] { e });\n+        }\n+        return response;\n+    }\n+\n+    HttpURLConnection sendUserApiRequest(@Sensitive String accessToken, SSLSocketFactory sslSocketFactory) throws IOException, SocialLoginException {\n+        HttpURLConnection connection = httpUtils.createConnection(HttpUtils.RequestMethod.POST, config.getUserApi(), sslSocketFactory);\n+        connection = httpUtils.setHeaders(connection, getUserApiRequestHeaders());\n+        connection.setDoOutput(true);\n+        \n+        OutputStream outputStream = connection.getOutputStream();\n+        String postData = \"token=\" + accessToken;\n+        outputStream.write(postData.getBytes());\n+        outputStream.close();\n+        connection.connect();\n+        return connection;\n+    }\n+\n+    @Sensitive\n+    Map<String, String> getUserApiRequestHeaders() {\n+        Map<String, String> headers = new HashMap<String, String>();\n+        String idAndSecretEncoded = Base64Coder.base64Encode(config.getClientId() + \":\" + config.getClientSecret());\n+\n+        headers.put(\"Authorization\", \"Basic \" + idAndSecretEncoded);\n+        headers.put(\"Accept\", \"application/json\");\n+        headers.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+        return headers;\n+    }\n+\n+    String readUserApiResponse(HttpURLConnection connection) throws IOException, SocialLoginException {\n+        int responseCode = connection.getResponseCode();\n+        String response = httpUtils.readConnectionResponse(connection);\n+        if (responseCode != HttpServletResponse.SC_OK) {\n+            throw new SocialLoginException(\"INTROSPECT_USER_API_BAD_STATUS\", null, new Object[] { responseCode, response });\n+        }\n+        return modifyExistingResponseToJSON(response);\n+    }\n+\n+    String modifyExistingResponseToJSON(String response) throws SocialLoginException {\n+        JsonObject jsonResponse = getJsonResponseIfValid(response);\n+        if(jsonResponse.getBoolean(\"active\")) {\n+            return jsonResponse.toString();\n+        }\n+        else {\n+            throw new SocialLoginException(\"INTROSPECT_USER_API_ACTIVE_NOT_TRUE\",null, null);\n+        }\n+\n+    }\n+\n+    private JsonObject getJsonResponseIfValid(String response) throws SocialLoginException {\n+        if (response == null || response.isEmpty()) {\n+            throw new SocialLoginException(\"INTROSPECT_USER_API_RESPONSE_NULL_EMPTY\", null, null);\n+        }\n+        try {\n+            return Json.createReader(new StringReader(response)).readObject();\n+        } catch (JsonParsingException e) {\n+            throw new SocialLoginException(\"INTROSPECT_USER_API_RESPONSE_NOT_JSON\", null, new Object[] { response, e });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "920d99e8617ba14c2217d0f514360b814746a59b"}, "originalPosition": 115}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8c1d76ab81ee3f807b32a77d1cbcbf6211ac6e5", "author": {"user": {"login": "ezhou365", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/c8c1d76ab81ee3f807b32a77d1cbcbf6211ac6e5", "committedDate": "2020-01-14T21:57:30Z", "message": "made changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMjczNzYx", "url": "https://github.com/OpenLiberty/open-liberty/pull/10427#pullrequestreview-343273761", "createdAt": "2020-01-15T14:51:02Z", "commit": {"oid": "c8c1d76ab81ee3f807b32a77d1cbcbf6211ac6e5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3348, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}