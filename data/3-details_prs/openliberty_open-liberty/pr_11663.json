{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMzMyMTc4", "number": 11663, "title": "Port JCA Dynamic Config", "bodyText": "", "createdAt": "2020-04-07T15:15:41Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/11663", "merged": true, "mergeCommit": {"oid": "a40ec64e0670aa9fdfc8e9c875d3f249db1dbbbf"}, "closed": true, "closedAt": "2020-04-16T14:16:34Z", "author": {"login": "KyleAure"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVUuMdgH2gAyNDAwMzMyMTc4OjQ5NjViY2U5YTYwMTRlYzgyZGZhNTFkOGRhODg2MzVhMDM4OTI3Mzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXn9ZbAFqTM5MjQ2OTk1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4965bce9a6014ec82dfa51d8da88635a03892737", "author": {"user": {"login": "KyleAure", "name": "Kyle Aure"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/4965bce9a6014ec82dfa51d8da88635a03892737", "committedDate": "2020-04-07T15:07:03Z", "message": "init port"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6187544e4a6d01e9e8f40f82ae78542a59528055", "author": {"user": {"login": "KyleAure", "name": "Kyle Aure"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/6187544e4a6d01e9e8f40f82ae78542a59528055", "committedDate": "2020-04-07T15:07:03Z", "message": "get fat running in OL"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNDY5OTUy", "url": "https://github.com/OpenLiberty/open-liberty/pull/11663#pullrequestreview-392469952", "createdAt": "2020-04-13T22:00:27Z", "commit": {"oid": "6187544e4a6d01e9e8f40f82ae78542a59528055"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMjowMDoyOFrOGE23Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzo0MDoxOVrOGFZwYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NjMzMA==", "bodyText": "The comment for this test says \"Verify that connection factory \"eis/cf\" has loginTimeout=100\"  So is loginTimeout=100 the default?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11663#discussion_r407746330", "createdAt": "2020-04-13T22:00:28Z", "author": {"login": "gjwatts"}, "path": "dev/com.ibm.ws.jca_fat_dynamicConfig/fat/src/com/ibm/ws/jca/fat/dynamicConfig/DynaCfgTest.java", "diffHunk": "@@ -0,0 +1,395 @@\n+/*******************************************************************************\n+ * Copyright (c) 2013, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jca.fat.dynamicConfig;\n+\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.EnterpriseArchive;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.config.ActivationSpec;\n+import com.ibm.websphere.simplicity.config.AdminObject;\n+import com.ibm.websphere.simplicity.config.Application;\n+import com.ibm.websphere.simplicity.config.AuthData;\n+import com.ibm.websphere.simplicity.config.ConnectionFactory;\n+import com.ibm.websphere.simplicity.config.Customize;\n+import com.ibm.websphere.simplicity.config.JCAGeneratedProperties;\n+import com.ibm.websphere.simplicity.config.ResourceAdapter;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.FATServletClient;\n+\n+/**\n+ * General tests that involve updating configuration while the server is running.\n+ */\n+@RunWith(FATRunner.class)\n+public class DynaCfgTest extends FATServletClient {\n+\n+    @Server(\"com.ibm.ws.jca.fat.dynamicConfig\")\n+    public static LibertyServer server;\n+\n+    private static final String dynamicConfigTestAppName = \"dynaCfgTestApp\";\n+    private static final String dynamicConfigTestServlet = \"fvtweb\";\n+    private static final String dynamicConfigTestRarName = \"dcra\";\n+    private static final Set<String> appNames = new TreeSet<String>(Arrays.asList(dynamicConfigTestAppName, dynamicConfigTestRarName));\n+\n+    private static ServerConfiguration originalServerConfig;\n+\n+    private static final String[] EMPTY_EXPR_LIST = new String[0];\n+    private static final String[] APP_RECYCLE_EXPR_LIST = new String[] {\n+                                                                         \"CWWKZ0009I.*\" + dynamicConfigTestAppName,\n+                                                                         \"CWWKZ0003I.*\" + dynamicConfigTestAppName\n+    };\n+    private static final String[] APP_AND_RA_RECYCLE_EXPR_LIST = new String[] {\n+                                                                                \"CWWKZ0009I.*\" + dynamicConfigTestAppName,\n+                                                                                \"J2CA7009I.*dcra\",\n+                                                                                \"J2CA700[13]I.*dcra\",\n+                                                                                \"CWWKZ0003I.*\" + dynamicConfigTestAppName\n+    };\n+    private static String[] cleanUpExprs = EMPTY_EXPR_LIST;\n+\n+    /**\n+     * Utility method to run test on server given testName\n+     */\n+    private void runTest(String testName) throws Exception {\n+        runTest(server, dynamicConfigTestServlet, testName);\n+    }\n+\n+    /**\n+     * Utility method to update config and wait for cleanUpExprs in logs\n+     */\n+    private void updateConfig(ServerConfiguration config) throws Exception {\n+        server.setMarkToEndOfLog();\n+        server.updateServerConfiguration(config);\n+        server.waitForConfigUpdateInLogUsingMark(appNames, cleanUpExprs);\n+    }\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+        //Create ear\n+        WebArchive war = ShrinkHelper.buildDefaultApp(dynamicConfigTestServlet, \"web\", \"web.mdb\");\n+        EnterpriseArchive ear = ShrinkWrap.create(EnterpriseArchive.class, dynamicConfigTestAppName + \".ear\")\n+                        .addAsModule(war);\n+        ShrinkHelper.addDirectory(ear, \"test-applications/dynaCfgTestApp/resources\");\n+        ShrinkHelper.exportToServer(server, \"apps\", ear);\n+\n+        //Create rar\n+        ShrinkHelper.defaultRar(server, dynamicConfigTestRarName, \"com.ibm.test.dynamicconfigadapter\");\n+\n+        server.startServer();\n+        originalServerConfig = server.getServerConfiguration().clone();\n+    }\n+\n+    /**\n+     * Before running each test, restore to the original configuration.\n+     *\n+     * @throws Exception\n+     */\n+    @Before\n+    public void setUpPerTest() throws Exception {\n+        //Reset cleanup expressions to an empty list\n+        cleanUpExprs = EMPTY_EXPR_LIST;\n+        //Update server to original config\n+        updateConfig(originalServerConfig);\n+        //Log restoration\n+        Log.info(getClass(), \"setUpPerTest\", \"server configuration restored\");\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n+        if (server.isStarted()) {\n+            server.stopServer(\"CWWKG0007W\", // could not delete from workarea\n+                              \"CWWKE0700W\",\n+                              \"CWWKE0701E.*NullPointerException\", // Remove when FELIX-4682 is fixed and integrated\n+                              \"CNTR4015W\"); // EXPECTED : Warning for not having activation spec in server.xml for all beans on the application, this is OK\n+            if (originalServerConfig != null)\n+                server.updateServerConfiguration(originalServerConfig);\n+        }\n+    }\n+\n+    // Removed a separate test for removing an adminObject because it was duplicated in part of the following test\n+    // Test adding and removing an AdminObject\n+    @Test\n+    public void testAddingAdminObject_List() throws Exception {\n+        ServerConfiguration config = server.getServerConfiguration();\n+        config.getAdminObjects().removeBy(\"jndiName\", \"eis/myAdminObject\");\n+\n+        updateConfig(config);\n+        runTest(\"testAdminObject_NoList\");\n+\n+        updateConfig(originalServerConfig);\n+        runTest(\"testAdminObject_List\");\n+    }\n+\n+    // Add, modify, then remove an activation spec\n+    @Test\n+    public void testAddModifyRemoveActivationSpec() throws Exception {\n+        ServerConfiguration config = server.getServerConfiguration();\n+\n+        // First, need a connection factory to trigger the MDB\n+        // add: <connectionFactory jndiName=\"eis/cf\">\n+        //        <properties.dcra/>\n+        //      </connectionFactory>\n+        ConnectionFactory cf = new ConnectionFactory();\n+        cf.setJndiName(\"eis/cf\");\n+        cf.getProperties_dcra().add(new JCAGeneratedProperties());\n+        config.getConnectionFactories().add(cf);\n+        updateConfig(config);\n+        runTest(\"testActivationSpec_NoMessages\");\n+\n+        // add: <activationSpec id=\"dynaCfgTestApp/fvtweb/DynaCfgMessageDrivenBean\">\n+        //        <properties.dcra/>\n+        //      </activationSpec>\n+        ActivationSpec activationSpec = new ActivationSpec();\n+        activationSpec.setId(\"dynaCfgTestApp/fvtweb/DynaCfgMessageDrivenBean\");\n+        JCAGeneratedProperties properties_dcra = new JCAGeneratedProperties();\n+        activationSpec.getProperties_dcra().add(properties_dcra);\n+        config.getActivationSpecs().add(activationSpec);\n+        updateConfig(config);\n+        runTest(\"testActivationSpec_NoMessages\");\n+\n+        // Enable the mdb-3.2 feature\n+        config.getFeatureManager().getFeatures().add(\"mdb-3.2\");\n+        cleanUpExprs = APP_AND_RA_RECYCLE_EXPR_LIST;\n+        updateConfig(config);\n+        runTest(\"testActivationSpec_MessageOn_0\");\n+\n+        // modify: <properties.dcra messageFilterMax=\"100\"/>\n+        properties_dcra.setMessageFilterMax(\"100\");\n+        cleanUpExprs = APP_RECYCLE_EXPR_LIST;\n+        updateConfig(config);\n+        runTest(\"testActivationSpec_MessageOn_0_100\");\n+\n+        // modify: <properties.dcra messageFilterMax=\"50\" messageFilterMin=\"5\"/>\n+        properties_dcra.setMessageFilterMax(\"50\");\n+        properties_dcra.setMessageFilterMin(\"5\");\n+        updateConfig(config);\n+        runTest(\"testActivationSpec_MessageOn_5_50\");\n+\n+        // remove activationSpec\n+        config.getActivationSpecs().remove(activationSpec);\n+        updateConfig(config);\n+        runTest(\"testActivationSpec_NoMessages\");\n+    }\n+\n+    // Add, modify, then remove a connection factory\n+    @Test\n+    public void testAddModifyRemoveConnectionFactory_CommonDataSource() throws Exception {\n+        runTest(\"testCommonDataSource_None\");\n+\n+        ServerConfiguration config = server.getServerConfiguration();\n+\n+        // add: <connectionFactory id=\"cf\" jndiName=\"eis/${id}\">\n+        //        <properties.dcra loginTimeout=\"60\"/>\n+        //      </connectionFactory>\n+        JCAGeneratedProperties properties_dcra = new JCAGeneratedProperties();\n+        properties_dcra.setLoginTimeout(\"60\");\n+        ConnectionFactory cf = new ConnectionFactory();\n+        cf.setId(\"cf\");\n+        cf.setJndiName(\"eis/${id}\");\n+        cf.getProperties_dcra().add(properties_dcra);\n+        config.getConnectionFactories().add(cf);\n+        updateConfig(config);\n+        runTest(\"testCommonDataSource_LoginTimeout_60\");\n+\n+        // modify: <properties.dcra loginTimeout=\"80\"/>\n+        properties_dcra.setLoginTimeout(\"80\");\n+        cleanUpExprs = APP_RECYCLE_EXPR_LIST;\n+        updateConfig(config);\n+        runTest(\"testCommonDataSource_LoginTimeout_80\");\n+\n+        // modify: <properties.dcra/>\n+        properties_dcra.setLoginTimeout(null);\n+        updateConfig(config);\n+        runTest(\"testCommonDataSource_LoginTimeout_100\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6187544e4a6d01e9e8f40f82ae78542a59528055"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxNzk1OQ==", "bodyText": "Are the request and response parameters needed?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11663#discussion_r408317959", "createdAt": "2020-04-14T17:40:09Z", "author": {"login": "gjwatts"}, "path": "dev/com.ibm.ws.jca_fat_dynamicConfig/test-applications/fvtweb/src/web/DynamicConfigTestServlet.java", "diffHunk": "@@ -0,0 +1,389 @@\n+/*******************************************************************************\n+ * Copyright (c) 2013, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package web;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.lang.reflect.InvocationTargetException;\n+import java.sql.Connection;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import javax.naming.InitialContext;\n+import javax.naming.NameNotFoundException;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.sql.CommonDataSource;\n+import javax.sql.DataSource;\n+\n+import web.mdb.DynaCfgMessageDrivenBean;\n+\n+@WebServlet(\"/*\")\n+public class DynamicConfigTestServlet extends HttpServlet {\n+    private static final long serialVersionUID = 7709282314904580334L;\n+\n+    /**\n+     * Message written to servlet to indicate that is has been successfully invoked.\n+     */\n+    public static final String SUCCESS_MESSAGE = \"SUCCESS\";\n+\n+    @Override\n+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n+        String test = request.getParameter(\"testMethod\");\n+        PrintWriter out = response.getWriter();\n+        out.println(\"Starting \" + test + \"<br>\");\n+        System.out.println(\"-----> \" + test + \" starting\");\n+        try {\n+            getClass().getMethod(test, HttpServletRequest.class, HttpServletResponse.class).invoke(this, request, response);\n+            System.out.println(\"<----- \" + test + \" successful\");\n+            out.println(test + \" \" + SUCCESS_MESSAGE);\n+        } catch (Throwable x) {\n+            if (x instanceof InvocationTargetException)\n+                x = x.getCause();\n+            System.out.println(\"<----- \" + test + \" failed:\");\n+            x.printStackTrace(System.out);\n+            out.println(\"<pre>ERROR in \" + test + \":\");\n+            x.printStackTrace(out);\n+            out.println(\"</pre>\");\n+        }\n+    }\n+\n+    /**\n+     * Verify that a message driven bean is only invoked for a value of 0\n+     *\n+     * @param request  HTTP request\n+     * @param response HTTP response\n+     * @throws Exception if an error occurs.\n+     */\n+    public void testActivationSpec_MessageOn_0(HttpServletRequest request, HttpServletResponse response) throws Exception {\n+        // Note: we abuse the setLoginTimeout interface to trigger sending a message to the MDB\n+        CommonDataSource ds = (CommonDataSource) new InitialContext().lookup(\"eis/cf\");\n+        DynaCfgMessageDrivenBean.messages.clear();\n+        ds.setLoginTimeout(-1);\n+        ds.setLoginTimeout(0);\n+        ds.setLoginTimeout(1);\n+\n+        if (DynaCfgMessageDrivenBean.messages.isEmpty())\n+            throw new Exception(\"Message not sent to MDB\");\n+\n+        if (DynaCfgMessageDrivenBean.messages.size() > 1)\n+            throw new Exception(\"Too many messages sent to MDB: \" + DynaCfgMessageDrivenBean.messages);\n+\n+        String message = DynaCfgMessageDrivenBean.messages.poll();\n+        if (!message.endsWith(\" 0\"))\n+            throw new Exception(\"Unexpected message sent to MDB: \" + message);\n+    }\n+\n+    /**\n+     * Verify that a message driven bean is only invoked for a values within 0 to 100\n+     *\n+     * @param request  HTTP request\n+     * @param response HTTP response\n+     * @throws Exception if an error occurs.\n+     */\n+    public void testActivationSpec_MessageOn_0_100(HttpServletRequest request, HttpServletResponse response) throws Exception {\n+        // Note: we abuse the setLoginTimeout interface to trigger sending a message to the MDB\n+        CommonDataSource ds = (CommonDataSource) new InitialContext().lookup(\"eis/cf\");\n+        DynaCfgMessageDrivenBean.messages.clear();\n+        ds.setLoginTimeout(-1);\n+        ds.setLoginTimeout(0);\n+\n+        if (DynaCfgMessageDrivenBean.messages.isEmpty())\n+            throw new Exception(\"Message not sent to MDB\");\n+\n+        if (DynaCfgMessageDrivenBean.messages.size() > 1)\n+            throw new Exception(\"Too many messages sent to MDB: \" + DynaCfgMessageDrivenBean.messages);\n+\n+        String message = DynaCfgMessageDrivenBean.messages.poll();\n+        if (!message.endsWith(\" 0\"))\n+            throw new Exception(\"Unexpected message sent to MDB: \" + message);\n+\n+        ds.setLoginTimeout(100);\n+        ds.setLoginTimeout(101);\n+\n+        if (DynaCfgMessageDrivenBean.messages.isEmpty())\n+            throw new Exception(\"Second message not sent to MDB\");\n+\n+        if (DynaCfgMessageDrivenBean.messages.size() > 1)\n+            throw new Exception(\"For values 100 and 101, too many messages sent to MDB: \" + DynaCfgMessageDrivenBean.messages);\n+\n+        message = DynaCfgMessageDrivenBean.messages.poll();\n+        if (!message.endsWith(\" 100\"))\n+            throw new Exception(\"Unexpected second message sent to MDB: \" + message);\n+    }\n+\n+    /**\n+     * Verify that a message driven bean is only invoked for a values within 5 to 50\n+     *\n+     * @param request  HTTP request\n+     * @param response HTTP response\n+     * @throws Exception if an error occurs.\n+     */\n+    public void testActivationSpec_MessageOn_5_50(HttpServletRequest request, HttpServletResponse response) throws Exception {\n+        // Note: we abuse the setLoginTimeout interface to trigger sending a message to the MDB\n+        CommonDataSource ds = (CommonDataSource) new InitialContext().lookup(\"eis/cf\");\n+        DynaCfgMessageDrivenBean.messages.clear();\n+        ds.setLoginTimeout(4);\n+        ds.setLoginTimeout(5);\n+\n+        if (DynaCfgMessageDrivenBean.messages.isEmpty())\n+            throw new Exception(\"Message not sent to MDB\");\n+\n+        if (DynaCfgMessageDrivenBean.messages.size() > 1)\n+            throw new Exception(\"Too many messages sent to MDB: \" + DynaCfgMessageDrivenBean.messages);\n+\n+        String message = DynaCfgMessageDrivenBean.messages.poll();\n+        if (!message.endsWith(\" 5\"))\n+            throw new Exception(\"Unexpected message sent to MDB: \" + message);\n+\n+        ds.setLoginTimeout(50);\n+        ds.setLoginTimeout(51);\n+\n+        if (DynaCfgMessageDrivenBean.messages.isEmpty())\n+            throw new Exception(\"Second message not sent to MDB\");\n+\n+        if (DynaCfgMessageDrivenBean.messages.size() > 1)\n+            throw new Exception(\"For values 50 and 51, too many messages sent to MDB: \" + DynaCfgMessageDrivenBean.messages);\n+\n+        message = DynaCfgMessageDrivenBean.messages.poll();\n+        if (!message.endsWith(\" 50\"))\n+            throw new Exception(\"Unexpected second message sent to MDB: \" + message);\n+    }\n+\n+    /**\n+     * Verify that a message driven bean is not invoked\n+     *\n+     * @param request  HTTP request\n+     * @param response HTTP response\n+     * @throws Exception if an error occurs.\n+     */\n+    public void testActivationSpec_NoMessages(HttpServletRequest request, HttpServletResponse response) throws Exception {\n+        // Note: we abuse the setLoginTimeout interface to trigger sending a message to the MDB\n+        CommonDataSource ds = (CommonDataSource) new InitialContext().lookup(\"eis/cf\");\n+        DynaCfgMessageDrivenBean.messages.clear();\n+        ds.setLoginTimeout(-1000);\n+        ds.setLoginTimeout(0);\n+        ds.setLoginTimeout(10);\n+        ds.setLoginTimeout(1000);\n+        if (!DynaCfgMessageDrivenBean.messages.isEmpty())\n+            throw new Exception(\"Unepxected messages sent to MDB: \" + DynaCfgMessageDrivenBean.messages);\n+    }\n+\n+    /**\n+     * Verify that an admin object of type java.util.Date is set to December 1, 2013.\n+     *\n+     * @param request  HTTP request\n+     * @param response HTTP response\n+     * @throws Exception if an error occurs.\n+     */\n+    public void testAdminObject_Date_2013_Dec_1(HttpServletRequest request, HttpServletResponse response) throws Exception {\n+        Calendar cal = new GregorianCalendar();\n+        cal.setTime((Date) new InitialContext().lookup(\"eis/myAdminObject\"));\n+        int year = cal.get(Calendar.YEAR);\n+        if (year != 2013)\n+            throw new Exception(\"Unexpected year: \" + year + \" for date \" + cal);\n+        int month = cal.get(Calendar.MONTH);\n+        if (month != Calendar.DECEMBER)\n+            throw new Exception(\"Unexpected month: \" + month + \" for date \" + cal);\n+        int dayOfMonth = cal.get(Calendar.DAY_OF_MONTH);\n+        if (dayOfMonth != 1)\n+            throw new Exception(\"Unexpected day of month: \" + dayOfMonth + \" for date \" + cal);\n+    }\n+\n+    /**\n+     * Verify that an admin object of type java.util.Date is set to January 1, 2013.\n+     *\n+     * @param request  HTTP request\n+     * @param response HTTP response\n+     * @throws Exception if an error occurs.\n+     */\n+    public void testAdminObject_Date_2013_Jan_1(HttpServletRequest request, HttpServletResponse response) throws Exception {\n+        Calendar cal = new GregorianCalendar();\n+        cal.setTime((Date) new InitialContext().lookup(\"eis/myAdminObject\"));\n+        int year = cal.get(Calendar.YEAR);\n+        if (year != 2013)\n+            throw new Exception(\"Unexpected year: \" + year + \" for date \" + cal);\n+        int month = cal.get(Calendar.MONTH);\n+        if (month != Calendar.JANUARY)\n+            throw new Exception(\"Unexpected month: \" + month + \" for date \" + cal);\n+        int dayOfMonth = cal.get(Calendar.DAY_OF_MONTH);\n+        if (dayOfMonth != 1)\n+            throw new Exception(\"Unexpected day of month: \" + dayOfMonth + \" for date \" + cal);\n+    }\n+\n+    /**\n+     * Verify that an admin object is available as type java.util.List implemented by java.util.LinkedList.\n+     *\n+     * @param request  HTTP request\n+     * @param response HTTP response\n+     * @throws Exception if an error occurs.\n+     */\n+    public void testAdminObject_List(HttpServletRequest request, HttpServletResponse response) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6187544e4a6d01e9e8f40f82ae78542a59528055"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxODA0OA==", "bodyText": "Are the request and response parameters needed?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11663#discussion_r408318048", "createdAt": "2020-04-14T17:40:19Z", "author": {"login": "gjwatts"}, "path": "dev/com.ibm.ws.jca_fat_dynamicConfig/test-applications/fvtweb/src/web/DynamicConfigTestServlet.java", "diffHunk": "@@ -0,0 +1,389 @@\n+/*******************************************************************************\n+ * Copyright (c) 2013, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package web;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.lang.reflect.InvocationTargetException;\n+import java.sql.Connection;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import javax.naming.InitialContext;\n+import javax.naming.NameNotFoundException;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.sql.CommonDataSource;\n+import javax.sql.DataSource;\n+\n+import web.mdb.DynaCfgMessageDrivenBean;\n+\n+@WebServlet(\"/*\")\n+public class DynamicConfigTestServlet extends HttpServlet {\n+    private static final long serialVersionUID = 7709282314904580334L;\n+\n+    /**\n+     * Message written to servlet to indicate that is has been successfully invoked.\n+     */\n+    public static final String SUCCESS_MESSAGE = \"SUCCESS\";\n+\n+    @Override\n+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n+        String test = request.getParameter(\"testMethod\");\n+        PrintWriter out = response.getWriter();\n+        out.println(\"Starting \" + test + \"<br>\");\n+        System.out.println(\"-----> \" + test + \" starting\");\n+        try {\n+            getClass().getMethod(test, HttpServletRequest.class, HttpServletResponse.class).invoke(this, request, response);\n+            System.out.println(\"<----- \" + test + \" successful\");\n+            out.println(test + \" \" + SUCCESS_MESSAGE);\n+        } catch (Throwable x) {\n+            if (x instanceof InvocationTargetException)\n+                x = x.getCause();\n+            System.out.println(\"<----- \" + test + \" failed:\");\n+            x.printStackTrace(System.out);\n+            out.println(\"<pre>ERROR in \" + test + \":\");\n+            x.printStackTrace(out);\n+            out.println(\"</pre>\");\n+        }\n+    }\n+\n+    /**\n+     * Verify that a message driven bean is only invoked for a value of 0\n+     *\n+     * @param request  HTTP request\n+     * @param response HTTP response\n+     * @throws Exception if an error occurs.\n+     */\n+    public void testActivationSpec_MessageOn_0(HttpServletRequest request, HttpServletResponse response) throws Exception {\n+        // Note: we abuse the setLoginTimeout interface to trigger sending a message to the MDB\n+        CommonDataSource ds = (CommonDataSource) new InitialContext().lookup(\"eis/cf\");\n+        DynaCfgMessageDrivenBean.messages.clear();\n+        ds.setLoginTimeout(-1);\n+        ds.setLoginTimeout(0);\n+        ds.setLoginTimeout(1);\n+\n+        if (DynaCfgMessageDrivenBean.messages.isEmpty())\n+            throw new Exception(\"Message not sent to MDB\");\n+\n+        if (DynaCfgMessageDrivenBean.messages.size() > 1)\n+            throw new Exception(\"Too many messages sent to MDB: \" + DynaCfgMessageDrivenBean.messages);\n+\n+        String message = DynaCfgMessageDrivenBean.messages.poll();\n+        if (!message.endsWith(\" 0\"))\n+            throw new Exception(\"Unexpected message sent to MDB: \" + message);\n+    }\n+\n+    /**\n+     * Verify that a message driven bean is only invoked for a values within 0 to 100\n+     *\n+     * @param request  HTTP request\n+     * @param response HTTP response\n+     * @throws Exception if an error occurs.\n+     */\n+    public void testActivationSpec_MessageOn_0_100(HttpServletRequest request, HttpServletResponse response) throws Exception {\n+        // Note: we abuse the setLoginTimeout interface to trigger sending a message to the MDB\n+        CommonDataSource ds = (CommonDataSource) new InitialContext().lookup(\"eis/cf\");\n+        DynaCfgMessageDrivenBean.messages.clear();\n+        ds.setLoginTimeout(-1);\n+        ds.setLoginTimeout(0);\n+\n+        if (DynaCfgMessageDrivenBean.messages.isEmpty())\n+            throw new Exception(\"Message not sent to MDB\");\n+\n+        if (DynaCfgMessageDrivenBean.messages.size() > 1)\n+            throw new Exception(\"Too many messages sent to MDB: \" + DynaCfgMessageDrivenBean.messages);\n+\n+        String message = DynaCfgMessageDrivenBean.messages.poll();\n+        if (!message.endsWith(\" 0\"))\n+            throw new Exception(\"Unexpected message sent to MDB: \" + message);\n+\n+        ds.setLoginTimeout(100);\n+        ds.setLoginTimeout(101);\n+\n+        if (DynaCfgMessageDrivenBean.messages.isEmpty())\n+            throw new Exception(\"Second message not sent to MDB\");\n+\n+        if (DynaCfgMessageDrivenBean.messages.size() > 1)\n+            throw new Exception(\"For values 100 and 101, too many messages sent to MDB: \" + DynaCfgMessageDrivenBean.messages);\n+\n+        message = DynaCfgMessageDrivenBean.messages.poll();\n+        if (!message.endsWith(\" 100\"))\n+            throw new Exception(\"Unexpected second message sent to MDB: \" + message);\n+    }\n+\n+    /**\n+     * Verify that a message driven bean is only invoked for a values within 5 to 50\n+     *\n+     * @param request  HTTP request\n+     * @param response HTTP response\n+     * @throws Exception if an error occurs.\n+     */\n+    public void testActivationSpec_MessageOn_5_50(HttpServletRequest request, HttpServletResponse response) throws Exception {\n+        // Note: we abuse the setLoginTimeout interface to trigger sending a message to the MDB\n+        CommonDataSource ds = (CommonDataSource) new InitialContext().lookup(\"eis/cf\");\n+        DynaCfgMessageDrivenBean.messages.clear();\n+        ds.setLoginTimeout(4);\n+        ds.setLoginTimeout(5);\n+\n+        if (DynaCfgMessageDrivenBean.messages.isEmpty())\n+            throw new Exception(\"Message not sent to MDB\");\n+\n+        if (DynaCfgMessageDrivenBean.messages.size() > 1)\n+            throw new Exception(\"Too many messages sent to MDB: \" + DynaCfgMessageDrivenBean.messages);\n+\n+        String message = DynaCfgMessageDrivenBean.messages.poll();\n+        if (!message.endsWith(\" 5\"))\n+            throw new Exception(\"Unexpected message sent to MDB: \" + message);\n+\n+        ds.setLoginTimeout(50);\n+        ds.setLoginTimeout(51);\n+\n+        if (DynaCfgMessageDrivenBean.messages.isEmpty())\n+            throw new Exception(\"Second message not sent to MDB\");\n+\n+        if (DynaCfgMessageDrivenBean.messages.size() > 1)\n+            throw new Exception(\"For values 50 and 51, too many messages sent to MDB: \" + DynaCfgMessageDrivenBean.messages);\n+\n+        message = DynaCfgMessageDrivenBean.messages.poll();\n+        if (!message.endsWith(\" 50\"))\n+            throw new Exception(\"Unexpected second message sent to MDB: \" + message);\n+    }\n+\n+    /**\n+     * Verify that a message driven bean is not invoked\n+     *\n+     * @param request  HTTP request\n+     * @param response HTTP response\n+     * @throws Exception if an error occurs.\n+     */\n+    public void testActivationSpec_NoMessages(HttpServletRequest request, HttpServletResponse response) throws Exception {\n+        // Note: we abuse the setLoginTimeout interface to trigger sending a message to the MDB\n+        CommonDataSource ds = (CommonDataSource) new InitialContext().lookup(\"eis/cf\");\n+        DynaCfgMessageDrivenBean.messages.clear();\n+        ds.setLoginTimeout(-1000);\n+        ds.setLoginTimeout(0);\n+        ds.setLoginTimeout(10);\n+        ds.setLoginTimeout(1000);\n+        if (!DynaCfgMessageDrivenBean.messages.isEmpty())\n+            throw new Exception(\"Unepxected messages sent to MDB: \" + DynaCfgMessageDrivenBean.messages);\n+    }\n+\n+    /**\n+     * Verify that an admin object of type java.util.Date is set to December 1, 2013.\n+     *\n+     * @param request  HTTP request\n+     * @param response HTTP response\n+     * @throws Exception if an error occurs.\n+     */\n+    public void testAdminObject_Date_2013_Dec_1(HttpServletRequest request, HttpServletResponse response) throws Exception {\n+        Calendar cal = new GregorianCalendar();\n+        cal.setTime((Date) new InitialContext().lookup(\"eis/myAdminObject\"));\n+        int year = cal.get(Calendar.YEAR);\n+        if (year != 2013)\n+            throw new Exception(\"Unexpected year: \" + year + \" for date \" + cal);\n+        int month = cal.get(Calendar.MONTH);\n+        if (month != Calendar.DECEMBER)\n+            throw new Exception(\"Unexpected month: \" + month + \" for date \" + cal);\n+        int dayOfMonth = cal.get(Calendar.DAY_OF_MONTH);\n+        if (dayOfMonth != 1)\n+            throw new Exception(\"Unexpected day of month: \" + dayOfMonth + \" for date \" + cal);\n+    }\n+\n+    /**\n+     * Verify that an admin object of type java.util.Date is set to January 1, 2013.\n+     *\n+     * @param request  HTTP request\n+     * @param response HTTP response\n+     * @throws Exception if an error occurs.\n+     */\n+    public void testAdminObject_Date_2013_Jan_1(HttpServletRequest request, HttpServletResponse response) throws Exception {\n+        Calendar cal = new GregorianCalendar();\n+        cal.setTime((Date) new InitialContext().lookup(\"eis/myAdminObject\"));\n+        int year = cal.get(Calendar.YEAR);\n+        if (year != 2013)\n+            throw new Exception(\"Unexpected year: \" + year + \" for date \" + cal);\n+        int month = cal.get(Calendar.MONTH);\n+        if (month != Calendar.JANUARY)\n+            throw new Exception(\"Unexpected month: \" + month + \" for date \" + cal);\n+        int dayOfMonth = cal.get(Calendar.DAY_OF_MONTH);\n+        if (dayOfMonth != 1)\n+            throw new Exception(\"Unexpected day of month: \" + dayOfMonth + \" for date \" + cal);\n+    }\n+\n+    /**\n+     * Verify that an admin object is available as type java.util.List implemented by java.util.LinkedList.\n+     *\n+     * @param request  HTTP request\n+     * @param response HTTP response\n+     * @throws Exception if an error occurs.\n+     */\n+    public void testAdminObject_List(HttpServletRequest request, HttpServletResponse response) throws Exception {\n+        @SuppressWarnings(\"unchecked\")\n+        List<Object> list = (List<Object>) new InitialContext().lookup(\"eis/myAdminObject\");\n+        list.add(\"testAdminObject_List\");\n+        ((LinkedList<?>) list).removeFirst();\n+    }\n+\n+    /**\n+     * Verify that an admin object is available as type java.util.List implemented by java.util.LinkedList.\n+     *\n+     * @param request  HTTP request\n+     * @param response HTTP response\n+     * @throws Exception if an error occurs.\n+     */\n+    public void testAdminObject_List2(HttpServletRequest request, HttpServletResponse response) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6187544e4a6d01e9e8f40f82ae78542a59528055"}, "originalPosition": 249}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2771, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}