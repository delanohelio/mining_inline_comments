{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MDAyMjM5", "number": 11220, "title": "Adding new JSONObject class for creating new Log events", "bodyText": "This PR is meant to centralize and simplify the creation of JSON logs through a new JSONObject class that handles the formatting and building of the JSON.", "createdAt": "2020-03-06T20:13:39Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/11220", "merged": true, "mergeCommit": {"oid": "320c35742b4280bdb1d9eff82d366f2a26bd2873"}, "closed": true, "closedAt": "2020-04-02T18:56:38Z", "author": {"login": "ellen-lau"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcLFwWRgH2gAyMzg1MDAyMjM5OmYyMjExYjcyMTViYzQ4YjY4OWY3MmQ0MGY3ODQ2MDJkYzM4NzNlZWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTuzcaAFqTM4NjU4OTg2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f2211b7215bc48b689f72d40f784602dc3873eef", "author": {"user": {"login": "ellen-lau", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/f2211b7215bc48b689f72d40f784602dc3873eef", "committedDate": "2020-03-06T20:01:35Z", "message": "Adding new JSONObject class for creating new Log events"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNjUyMjQz", "url": "https://github.com/OpenLiberty/open-liberty/pull/11220#pullrequestreview-370652243", "createdAt": "2020-03-06T21:58:32Z", "commit": {"oid": "f2211b7215bc48b689f72d40f784602dc3873eef"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMTo1ODozM1rOFzItXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMjoyOTowNFrOFzJWeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2NDM4MQ==", "bodyText": "the value of BaseTraceService.getFieldMappingVersion() may have incremented more than once since our last message event.  need to get the current value of that method call before we make our updates and set fieldMappingVersion_Message to that value here.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11220#discussion_r389164381", "createdAt": "2020-03-06T21:58:33Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java", "diffHunk": "@@ -545,50 +509,46 @@ protected static StringBuilder startAuditJsonFields(String hostName, String wlpU\n         return sb;\n     }\n \n-    protected static StringBuilder startMessageJsonFields(String hostName, String wlpUserDir, String serverName) {\n-        StringBuilder sb = new StringBuilder(512);\n+    protected static JSONObjectBuilder startMessageJsonFields(String hostName, String wlpUserDir, String serverName) {\n+        JSONObjectBuilder jsonBuilder = new JSONObject.JSONObjectBuilder();\n \n-        if (BaseTraceService.getIsServerConfigUpdate()) {\n+        if (fieldMappingVersion_Message < BaseTraceService.getFieldMappingVersion())\n             startMessageJsonFields = null;\n-        }\n-        if (startMessageJsonFields != null) {\n-            sb.append(startMessageJsonFields);\n-        } else {\n-            sb.append(\"{\");\n-            if (!(LogTraceData.getTypeKeyJSON(true).equals(OMIT_FIELDS_STRING))) {\n-                sb.append(\"\\\"\");\n-                sb.append(LogTraceData.getTypeKeyJSON(true));\n-                sb.append(MESSAGE_JSON_TYPE_FIELD);\n-            }\n-            addUnchangingFieldsJSON_Message(sb, hostName, wlpUserDir, serverName, true);\n \n-            startMessageJsonFields = sb.toString();\n+        if (startMessageJsonFields != null)\n+            jsonBuilder.addFields(startMessageJsonFields);\n+        else {\n+            //@formatter:off\n+            jsonBuilder.addField(LogTraceData.getTypeKeyJSON(true), CollectorConstants.MESSAGES_LOG_EVENT_TYPE, false, false)\n+            .addField(LogTraceData.getHostKeyJSON(true), hostName, false, false)\n+            .addField(LogTraceData.getUserDirKeyJSON(true), wlpUserDir, false, true)\n+            .addField(LogTraceData.getServerNameKeyJSON(true), serverName, false, false);\n+            //@formatter:on\n+            startMessageJsonFields = jsonBuilder.toString();\n+            fieldMappingVersion_Message++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2211b7215bc48b689f72d40f784602dc3873eef"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE2NzUzOQ==", "bodyText": "fieldMappingVersion_xxx fields need to be marked as volatile", "url": "https://github.com/OpenLiberty/open-liberty/pull/11220#discussion_r389167539", "createdAt": "2020-03-06T22:07:40Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java", "diffHunk": "@@ -70,6 +70,8 @@\n     public final static String LONG_SUFFIX = \"_long\";\n     public static final String LINE_SEPARATOR;\n     public static final String OMIT_FIELDS_STRING = \"@@@OMIT@@@\";\n+    private static int fieldMappingVersion_Message = 0;\n+    private static int fieldMappingVersion_Trace = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2211b7215bc48b689f72d40f784602dc3873eef"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3MTM1Nw==", "bodyText": "message -> trace", "url": "https://github.com/OpenLiberty/open-liberty/pull/11220#discussion_r389171357", "createdAt": "2020-03-06T22:18:08Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java", "diffHunk": "@@ -545,50 +509,46 @@ protected static StringBuilder startAuditJsonFields(String hostName, String wlpU\n         return sb;\n     }\n \n-    protected static StringBuilder startMessageJsonFields(String hostName, String wlpUserDir, String serverName) {\n-        StringBuilder sb = new StringBuilder(512);\n+    protected static JSONObjectBuilder startMessageJsonFields(String hostName, String wlpUserDir, String serverName) {\n+        JSONObjectBuilder jsonBuilder = new JSONObject.JSONObjectBuilder();\n \n-        if (BaseTraceService.getIsServerConfigUpdate()) {\n+        if (fieldMappingVersion_Message < BaseTraceService.getFieldMappingVersion())\n             startMessageJsonFields = null;\n-        }\n-        if (startMessageJsonFields != null) {\n-            sb.append(startMessageJsonFields);\n-        } else {\n-            sb.append(\"{\");\n-            if (!(LogTraceData.getTypeKeyJSON(true).equals(OMIT_FIELDS_STRING))) {\n-                sb.append(\"\\\"\");\n-                sb.append(LogTraceData.getTypeKeyJSON(true));\n-                sb.append(MESSAGE_JSON_TYPE_FIELD);\n-            }\n-            addUnchangingFieldsJSON_Message(sb, hostName, wlpUserDir, serverName, true);\n \n-            startMessageJsonFields = sb.toString();\n+        if (startMessageJsonFields != null)\n+            jsonBuilder.addFields(startMessageJsonFields);\n+        else {\n+            //@formatter:off\n+            jsonBuilder.addField(LogTraceData.getTypeKeyJSON(true), CollectorConstants.MESSAGES_LOG_EVENT_TYPE, false, false)\n+            .addField(LogTraceData.getHostKeyJSON(true), hostName, false, false)\n+            .addField(LogTraceData.getUserDirKeyJSON(true), wlpUserDir, false, true)\n+            .addField(LogTraceData.getServerNameKeyJSON(true), serverName, false, false);\n+            //@formatter:on\n+            startMessageJsonFields = jsonBuilder.toString();\n+            fieldMappingVersion_Message++;\n         }\n-\n-        return sb;\n+        return jsonBuilder;\n     }\n \n-    protected static StringBuilder startTraceJsonFields(String hostName, String wlpUserDir, String serverName) {\n-        StringBuilder sb = new StringBuilder(512);\n+    protected static JSONObjectBuilder startTraceJsonFields(String hostName, String wlpUserDir, String serverName) {\n+        JSONObjectBuilder jsonBuilder = new JSONObject.JSONObjectBuilder();\n \n-        if (BaseTraceService.getIsServerConfigUpdate()) {\n-            startTraceJsonFields = null;\n-        }\n-        if (startTraceJsonFields != null) {\n-            sb.append(startTraceJsonFields);\n-        } else {\n-            sb.append(\"{\");\n-            if (!(LogTraceData.getTypeKeyJSON(false).equals(OMIT_FIELDS_STRING))) {\n-                sb.append(\"\\\"\");\n-                sb.append(LogTraceData.getTypeKeyJSON(false));\n-                sb.append(TRACE_JSON_TYPE_FIELD);\n-            }\n-            addUnchangingFieldsJSON_Trace(sb, hostName, wlpUserDir, serverName, false);\n-\n-            startTraceJsonFields = sb.toString();\n-        }\n+        if (fieldMappingVersion_Message < BaseTraceService.getFieldMappingVersion())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2211b7215bc48b689f72d40f784602dc3873eef"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3MTYyNQ==", "bodyText": "message -> trace", "url": "https://github.com/OpenLiberty/open-liberty/pull/11220#discussion_r389171625", "createdAt": "2020-03-06T22:18:53Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java", "diffHunk": "@@ -545,50 +509,46 @@ protected static StringBuilder startAuditJsonFields(String hostName, String wlpU\n         return sb;\n     }\n \n-    protected static StringBuilder startMessageJsonFields(String hostName, String wlpUserDir, String serverName) {\n-        StringBuilder sb = new StringBuilder(512);\n+    protected static JSONObjectBuilder startMessageJsonFields(String hostName, String wlpUserDir, String serverName) {\n+        JSONObjectBuilder jsonBuilder = new JSONObject.JSONObjectBuilder();\n \n-        if (BaseTraceService.getIsServerConfigUpdate()) {\n+        if (fieldMappingVersion_Message < BaseTraceService.getFieldMappingVersion())\n             startMessageJsonFields = null;\n-        }\n-        if (startMessageJsonFields != null) {\n-            sb.append(startMessageJsonFields);\n-        } else {\n-            sb.append(\"{\");\n-            if (!(LogTraceData.getTypeKeyJSON(true).equals(OMIT_FIELDS_STRING))) {\n-                sb.append(\"\\\"\");\n-                sb.append(LogTraceData.getTypeKeyJSON(true));\n-                sb.append(MESSAGE_JSON_TYPE_FIELD);\n-            }\n-            addUnchangingFieldsJSON_Message(sb, hostName, wlpUserDir, serverName, true);\n \n-            startMessageJsonFields = sb.toString();\n+        if (startMessageJsonFields != null)\n+            jsonBuilder.addFields(startMessageJsonFields);\n+        else {\n+            //@formatter:off\n+            jsonBuilder.addField(LogTraceData.getTypeKeyJSON(true), CollectorConstants.MESSAGES_LOG_EVENT_TYPE, false, false)\n+            .addField(LogTraceData.getHostKeyJSON(true), hostName, false, false)\n+            .addField(LogTraceData.getUserDirKeyJSON(true), wlpUserDir, false, true)\n+            .addField(LogTraceData.getServerNameKeyJSON(true), serverName, false, false);\n+            //@formatter:on\n+            startMessageJsonFields = jsonBuilder.toString();\n+            fieldMappingVersion_Message++;\n         }\n-\n-        return sb;\n+        return jsonBuilder;\n     }\n \n-    protected static StringBuilder startTraceJsonFields(String hostName, String wlpUserDir, String serverName) {\n-        StringBuilder sb = new StringBuilder(512);\n+    protected static JSONObjectBuilder startTraceJsonFields(String hostName, String wlpUserDir, String serverName) {\n+        JSONObjectBuilder jsonBuilder = new JSONObject.JSONObjectBuilder();\n \n-        if (BaseTraceService.getIsServerConfigUpdate()) {\n-            startTraceJsonFields = null;\n-        }\n-        if (startTraceJsonFields != null) {\n-            sb.append(startTraceJsonFields);\n-        } else {\n-            sb.append(\"{\");\n-            if (!(LogTraceData.getTypeKeyJSON(false).equals(OMIT_FIELDS_STRING))) {\n-                sb.append(\"\\\"\");\n-                sb.append(LogTraceData.getTypeKeyJSON(false));\n-                sb.append(TRACE_JSON_TYPE_FIELD);\n-            }\n-            addUnchangingFieldsJSON_Trace(sb, hostName, wlpUserDir, serverName, false);\n-\n-            startTraceJsonFields = sb.toString();\n-        }\n+        if (fieldMappingVersion_Message < BaseTraceService.getFieldMappingVersion())\n+            startMessageJsonFields = null;\n \n-        return sb;\n+        if (startMessageJsonFields != null)\n+            jsonBuilder.addFields(startMessageJsonFields);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2211b7215bc48b689f72d40f784602dc3873eef"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTE3NDkwNg==", "bodyText": "these need to be converted to strings (so they get surrounded by quotes) for backward compatibility", "url": "https://github.com/OpenLiberty/open-liberty/pull/11220#discussion_r389174906", "createdAt": "2020-03-06T22:29:04Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonUtils_JSON.java", "diffHunk": "@@ -331,32 +321,27 @@ private static String jsonifyTraceAndMessage(int maxFieldLength, String wlpUserD\n                 for (KeyValuePair k : extensions) {\n                     String extKey = k.getKey();\n                     if (extKey.endsWith(CollectorJsonHelpers.INT_SUFFIX)) {\n-                        isFirstField &= !CollectorJsonHelpers.addToJSON(sb, LogTraceData.getExtensionNameKeyJSON(isMessageEvent, extKey), Integer.toString(k.getIntValue()),\n-                                                                        false, true, false, isFirstField, true);\n+                        jsonBuilder.addField(LogTraceData.getExtensionNameKeyJSON(isMessageEvent, extKey), k.getIntValue(), false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2211b7215bc48b689f72d40f784602dc3873eef"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f29778597489760d308b78dcda2f586ef342ce71", "author": {"user": {"login": "ellen-lau", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/f29778597489760d308b78dcda2f586ef342ce71", "committedDate": "2020-03-09T04:06:02Z", "message": "Fixes to Message/Trace initial implmentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57a4d81ec4f6a2a94a7d57e64cfe8420c2840767", "author": {"user": {"login": "ellen-lau", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/57a4d81ec4f6a2a94a7d57e64cfe8420c2840767", "committedDate": "2020-03-09T17:39:22Z", "message": "Change update start*JsonFields functionality to updateFieldMappings method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNTUyMzg5", "url": "https://github.com/OpenLiberty/open-liberty/pull/11220#pullrequestreview-371552389", "createdAt": "2020-03-09T21:48:18Z", "commit": {"oid": "57a4d81ec4f6a2a94a7d57e64cfe8420c2840767"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMTo0ODoxOFrOFz6iZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMTo0ODoxOFrOFz6iZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk4MDc3NQ==", "bodyText": "this has to be after the field mappings are updated (ie. after line 596), otherwise you have a race condition.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11220#discussion_r389980775", "createdAt": "2020-03-09T21:48:18Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java", "diffHunk": "@@ -491,6 +485,8 @@ public static void applyJsonFields(String value, Boolean omitJsonFields) {\n             return;\n         }\n \n+        CollectorJsonHelpers.updateFieldMappings();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57a4d81ec4f6a2a94a7d57e64cfe8420c2840767"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34d603c88451e7448d6a2ca62d5cede96a3e89de", "author": {"user": {"login": "ellen-lau", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/34d603c88451e7448d6a2ca62d5cede96a3e89de", "committedDate": "2020-03-09T22:23:47Z", "message": "Moving updateFieldMappings to the end of applyFields"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "33ffdc3d55bd79fd5d222f72927b689fcb5b1897", "author": {"user": {"login": "ellen-lau", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/33ffdc3d55bd79fd5d222f72927b689fcb5b1897", "committedDate": "2020-03-09T22:25:13Z", "message": "JSONObject implementation for field mappable event types"}, "afterCommit": {"oid": "34d603c88451e7448d6a2ca62d5cede96a3e89de", "author": {"user": {"login": "ellen-lau", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/34d603c88451e7448d6a2ca62d5cede96a3e89de", "committedDate": "2020-03-09T22:23:47Z", "message": "Moving updateFieldMappings to the end of applyFields"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "921ff21fb84d30460cbb1ee0fd01051a1de4b8b5", "author": {"user": {"login": "ellen-lau", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/921ff21fb84d30460cbb1ee0fd01051a1de4b8b5", "committedDate": "2020-03-09T22:31:36Z", "message": "JSONObject implementation for field mappable events audit, accesslog, ffdc"}, "afterCommit": {"oid": "34d603c88451e7448d6a2ca62d5cede96a3e89de", "author": {"user": {"login": "ellen-lau", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/34d603c88451e7448d6a2ca62d5cede96a3e89de", "committedDate": "2020-03-09T22:23:47Z", "message": "Moving updateFieldMappings to the end of applyFields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c21684ad05db2dde659d5b29d6da3ef9616632e", "author": {"user": {"login": "ellen-lau", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/5c21684ad05db2dde659d5b29d6da3ef9616632e", "committedDate": "2020-03-09T22:38:20Z", "message": "JSONObject implementation for field mappable events audit, accesslog, ffdc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMTY5NDky", "url": "https://github.com/OpenLiberty/open-liberty/pull/11220#pullrequestreview-372169492", "createdAt": "2020-03-10T17:28:09Z", "commit": {"oid": "5c21684ad05db2dde659d5b29d6da3ef9616632e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoyODoxMFrOF0ZZ3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODozMjo0OFrOF0b4IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4NjQ5NQ==", "bodyText": "space before AuditData", "url": "https://github.com/OpenLiberty/open-liberty/pull/11220#discussion_r390486495", "createdAt": "2020-03-10T17:28:10Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java", "diffHunk": "@@ -490,26 +432,22 @@ protected static StringBuilder startGCJson1_1(String hostName, String wlpUserDir\n         return sb;\n     }\n \n-    protected static StringBuilder startAuditJsonFields(String hostName, String wlpUserDir, String serverName) {\n-        StringBuilder sb = new StringBuilder(2048);\n+    protected static JSONObjectBuilder startAuditJsonFields(String hostName, String wlpUserDir, String serverName) {\n+        JSONObjectBuilder jsonBuilder = new JSONObject.JSONObjectBuilder();\n+        String tempStartFields = startAuditJsonFields;\n \n-        if (BaseTraceService.getIsServerConfigUpdate()) {\n-            startAuditJsonFields = null;\n-        }\n-        if (startAuditJsonFields != null) {\n-            sb.append(startAuditJsonFields);\n+        if (tempStartFields != null) {\n+            jsonBuilder.addFields(tempStartFields);\n         } else {\n-            sb.append(\"{\");\n-            if (!(AuditData.getTypeKeyJSON().equals(OMIT_FIELDS_STRING))) {\n-                sb.append(\"\\\"\");\n-                sb.append(AuditData.getTypeKeyJSON());\n-                sb.append(AUDIT_JSON_TYPE_FIELD);\n-            }\n-            addUnchangingFieldsJSON_Audit(sb, hostName, wlpUserDir, serverName);\n-            startAuditJsonFields = sb.toString();\n+            //@formatter:off\n+            jsonBuilder.addField(AuditData.getTypeKeyJSON(), CollectorConstants.AUDIT_LOG_EVENT_TYPE, false, false)\n+            .addField(AuditData.getHostKeyJSON(), hostName, false, false)\n+            .addField(AuditData.getUserDirKeyJSON(), wlpUserDir, false, true)\n+            .addField( AuditData.getServerNameKeyJSON(), serverName, false, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c21684ad05db2dde659d5b29d6da3ef9616632e"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyMzIzMg==", "bodyText": "check to see if any of the 1_1 methods or fields are still needed", "url": "https://github.com/OpenLiberty/open-liberty/pull/11220#discussion_r390523232", "createdAt": "2020-03-10T18:26:32Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java", "diffHunk": "@@ -57,11 +58,6 @@\n     private static final String AUDIT_JSON_TYPE_FIELD = TYPE_FIELD_PREPPEND + CollectorConstants.AUDIT_LOG_EVENT_TYPE + TYPE_FIELD_APPEND;\n     private static String unchangingFieldsJson = null;\n     private static String unchangingFieldsJson1_1 = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c21684ad05db2dde659d5b29d6da3ef9616632e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyNzAwOA==", "bodyText": "is \"isServerConfigUpdate\" still used?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11220#discussion_r390527008", "createdAt": "2020-03-10T18:32:48Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java", "diffHunk": "@@ -219,10 +220,8 @@\n \n     protected volatile String serverName = null;\n     protected volatile String wlpUserDir = null;\n-\n     private static final String OMIT_FIELDS_STRING = \"@@@OMIT@@@\";\n     private static boolean isServerConfigUpdate = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c21684ad05db2dde659d5b29d6da3ef9616632e"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bab034e8286b2e495d5064b4eda0ff578cfbac4e", "author": {"user": {"login": "ellen-lau", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/bab034e8286b2e495d5064b4eda0ff578cfbac4e", "committedDate": "2020-03-10T21:54:28Z", "message": "Getting rid of isServerConfigUpdate and its getter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d4cc98dc4213411d4137ff94ae3f27280deaa70", "author": {"user": {"login": "ellen-lau", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/7d4cc98dc4213411d4137ff94ae3f27280deaa70", "committedDate": "2020-03-11T17:23:46Z", "message": "Removing all logstashCollector 1_1 related methods and classes; removing GC events from JSON logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e85bfee395dc618d1aae833c5c44390d1145275", "author": {"user": {"login": "ellen-lau", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/1e85bfee395dc618d1aae833c5c44390d1145275", "committedDate": "2020-03-12T16:43:29Z", "message": "Added back missing messageId field, changed ext fields to quoteless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NDQ4MzMx", "url": "https://github.com/OpenLiberty/open-liberty/pull/11220#pullrequestreview-376448331", "createdAt": "2020-03-17T22:27:43Z", "commit": {"oid": "1e85bfee395dc618d1aae833c5c44390d1145275"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3d9f2c46edf9440778956f27d078b499eb64ff6", "author": {"user": {"login": "ellen-lau", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/c3d9f2c46edf9440778956f27d078b499eb64ff6", "committedDate": "2020-03-24T20:14:40Z", "message": "Make console header log and message leader log mappable/omittable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNzM0NDUw", "url": "https://github.com/OpenLiberty/open-liberty/pull/11220#pullrequestreview-380734450", "createdAt": "2020-03-24T22:12:23Z", "commit": {"oid": "c3d9f2c46edf9440778956f27d078b499eb64ff6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoxMjoyNFrOF7FDqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoxODo0MVrOF7FOdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MzE2Mw==", "bodyText": "need to check if fieldMappings is null before doing this?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11220#discussion_r397493163", "createdAt": "2020-03-24T22:12:24Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.kernel.boot.core/src/com/ibm/ws/kernel/boot/internal/KernelBootstrap.java", "diffHunk": "@@ -523,25 +528,58 @@ private static String constructJSONHeader(String consoleLogHeader, BootstrapConf\n         String serverHostName = getServerHostName();\n         String datetime = getDatetime();\n         String sequenceNumber = getSequenceNumber();\n-        //construct json header\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(\"{\\\"type\\\":\\\"liberty_message\\\"\");\n-        sb.append(\",\\\"host\\\":\\\"\");\n-        sb = jsonEscape(sb, serverHostName);\n-        sb.append(\"\\\",\\\"ibm_userDir\\\":\\\"\");\n-        sb = jsonEscape(sb, wlpUserDir);\n-        sb.append(\"\\\",\\\"ibm_serverName\\\":\\\"\");\n-        sb = jsonEscape(sb, serverName);\n-        sb.append(\"\\\",\\\"message\\\":\\\"\");\n-        sb = jsonEscape(sb, consoleLogHeader);\n-        sb.append(\"\\\",\\\"ibm_datetime\\\":\\\"\");\n-        sb = jsonEscape(sb, datetime);\n-        sb.append(\"\\\",\\\"ibm_sequence\\\":\\\"\");\n-        sb = jsonEscape(sb, sequenceNumber);\n-        sb.append(\"\\\"}\");\n-\n-        return sb.toString();\n \n+        //header field names and values\n+        List<String> headerFieldNames = new ArrayList<>(Arrays.asList(\"type\", \"host\", \"ibm_userDir\", \"ibm_serverName\", \"message\", \"ibm_datetime\", \"ibm_sequence\"));\n+        final String[] headerFieldValues = { \"liberty_message\", serverHostName, wlpUserDir, serverName, consoleLogHeader, datetime, sequenceNumber };\n+\n+        final String OMIT_FIELDS_STRING = \"@@@OMIT@@@\";\n+        Boolean omitJsonFields = Boolean.valueOf(System.getenv(\"WLP_LOGGING_OMIT_JSON_FIELD_MAPPINGS\"));\n+\n+        //bootstrap fieldMappings should take precedence\n+        String bsFieldMappings = bootProps.get(\"com.ibm.ws.logging.json.field.mappings\");\n+        String envFieldMappings = System.getenv(\"WLP_LOGGING_JSON_FIELD_MAPPINGS\");\n+        String fieldMappings = bsFieldMappings != null ? bsFieldMappings : envFieldMappings;\n+\n+        String[] keyValuePairs = fieldMappings.split(\",\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d9f2c46edf9440778956f27d078b499eb64ff6"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5NTY4OA==", "bodyText": "need to check if entry[0] is in headerFieldNames first.  if it isn't, and you call headerFieldNames.set(-1,...) you'll get an exception.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11220#discussion_r397495688", "createdAt": "2020-03-24T22:18:02Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.kernel.boot.core/src/com/ibm/ws/kernel/boot/internal/KernelBootstrap.java", "diffHunk": "@@ -523,25 +528,58 @@ private static String constructJSONHeader(String consoleLogHeader, BootstrapConf\n         String serverHostName = getServerHostName();\n         String datetime = getDatetime();\n         String sequenceNumber = getSequenceNumber();\n-        //construct json header\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(\"{\\\"type\\\":\\\"liberty_message\\\"\");\n-        sb.append(\",\\\"host\\\":\\\"\");\n-        sb = jsonEscape(sb, serverHostName);\n-        sb.append(\"\\\",\\\"ibm_userDir\\\":\\\"\");\n-        sb = jsonEscape(sb, wlpUserDir);\n-        sb.append(\"\\\",\\\"ibm_serverName\\\":\\\"\");\n-        sb = jsonEscape(sb, serverName);\n-        sb.append(\"\\\",\\\"message\\\":\\\"\");\n-        sb = jsonEscape(sb, consoleLogHeader);\n-        sb.append(\"\\\",\\\"ibm_datetime\\\":\\\"\");\n-        sb = jsonEscape(sb, datetime);\n-        sb.append(\"\\\",\\\"ibm_sequence\\\":\\\"\");\n-        sb = jsonEscape(sb, sequenceNumber);\n-        sb.append(\"\\\"}\");\n-\n-        return sb.toString();\n \n+        //header field names and values\n+        List<String> headerFieldNames = new ArrayList<>(Arrays.asList(\"type\", \"host\", \"ibm_userDir\", \"ibm_serverName\", \"message\", \"ibm_datetime\", \"ibm_sequence\"));\n+        final String[] headerFieldValues = { \"liberty_message\", serverHostName, wlpUserDir, serverName, consoleLogHeader, datetime, sequenceNumber };\n+\n+        final String OMIT_FIELDS_STRING = \"@@@OMIT@@@\";\n+        Boolean omitJsonFields = Boolean.valueOf(System.getenv(\"WLP_LOGGING_OMIT_JSON_FIELD_MAPPINGS\"));\n+\n+        //bootstrap fieldMappings should take precedence\n+        String bsFieldMappings = bootProps.get(\"com.ibm.ws.logging.json.field.mappings\");\n+        String envFieldMappings = System.getenv(\"WLP_LOGGING_JSON_FIELD_MAPPINGS\");\n+        String fieldMappings = bsFieldMappings != null ? bsFieldMappings : envFieldMappings;\n+\n+        String[] keyValuePairs = fieldMappings.split(\",\");\n+        for (String pair : keyValuePairs) {\n+            pair = pair.trim();\n+            if (pair.endsWith(\":\") && omitJsonFields) //omitJsonFields beta guard\n+                pair = pair + OMIT_FIELDS_STRING;\n+\n+            String[] entry = pair.split(\":\");\n+            entry[0] = entry[0].trim();\n+\n+            if (headerFieldNames.contains(entry[entry.length - 2])) {\n+                if (entry.length == 2 && !pair.endsWith(\":\")) {\n+                    entry[1] = entry[1].trim();\n+                    headerFieldNames.set(headerFieldNames.indexOf(entry[0]), entry[1]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d9f2c46edf9440778956f27d078b499eb64ff6"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5NTkyNw==", "bodyText": "need to check if entry[0] is in headerFieldNames first. (same comment as above)", "url": "https://github.com/OpenLiberty/open-liberty/pull/11220#discussion_r397495927", "createdAt": "2020-03-24T22:18:41Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.kernel.boot.core/src/com/ibm/ws/kernel/boot/internal/KernelBootstrap.java", "diffHunk": "@@ -523,25 +528,58 @@ private static String constructJSONHeader(String consoleLogHeader, BootstrapConf\n         String serverHostName = getServerHostName();\n         String datetime = getDatetime();\n         String sequenceNumber = getSequenceNumber();\n-        //construct json header\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(\"{\\\"type\\\":\\\"liberty_message\\\"\");\n-        sb.append(\",\\\"host\\\":\\\"\");\n-        sb = jsonEscape(sb, serverHostName);\n-        sb.append(\"\\\",\\\"ibm_userDir\\\":\\\"\");\n-        sb = jsonEscape(sb, wlpUserDir);\n-        sb.append(\"\\\",\\\"ibm_serverName\\\":\\\"\");\n-        sb = jsonEscape(sb, serverName);\n-        sb.append(\"\\\",\\\"message\\\":\\\"\");\n-        sb = jsonEscape(sb, consoleLogHeader);\n-        sb.append(\"\\\",\\\"ibm_datetime\\\":\\\"\");\n-        sb = jsonEscape(sb, datetime);\n-        sb.append(\"\\\",\\\"ibm_sequence\\\":\\\"\");\n-        sb = jsonEscape(sb, sequenceNumber);\n-        sb.append(\"\\\"}\");\n-\n-        return sb.toString();\n \n+        //header field names and values\n+        List<String> headerFieldNames = new ArrayList<>(Arrays.asList(\"type\", \"host\", \"ibm_userDir\", \"ibm_serverName\", \"message\", \"ibm_datetime\", \"ibm_sequence\"));\n+        final String[] headerFieldValues = { \"liberty_message\", serverHostName, wlpUserDir, serverName, consoleLogHeader, datetime, sequenceNumber };\n+\n+        final String OMIT_FIELDS_STRING = \"@@@OMIT@@@\";\n+        Boolean omitJsonFields = Boolean.valueOf(System.getenv(\"WLP_LOGGING_OMIT_JSON_FIELD_MAPPINGS\"));\n+\n+        //bootstrap fieldMappings should take precedence\n+        String bsFieldMappings = bootProps.get(\"com.ibm.ws.logging.json.field.mappings\");\n+        String envFieldMappings = System.getenv(\"WLP_LOGGING_JSON_FIELD_MAPPINGS\");\n+        String fieldMappings = bsFieldMappings != null ? bsFieldMappings : envFieldMappings;\n+\n+        String[] keyValuePairs = fieldMappings.split(\",\");\n+        for (String pair : keyValuePairs) {\n+            pair = pair.trim();\n+            if (pair.endsWith(\":\") && omitJsonFields) //omitJsonFields beta guard\n+                pair = pair + OMIT_FIELDS_STRING;\n+\n+            String[] entry = pair.split(\":\");\n+            entry[0] = entry[0].trim();\n+\n+            if (headerFieldNames.contains(entry[entry.length - 2])) {\n+                if (entry.length == 2 && !pair.endsWith(\":\")) {\n+                    entry[1] = entry[1].trim();\n+                    headerFieldNames.set(headerFieldNames.indexOf(entry[0]), entry[1]);\n+\n+                } else if (entry.length == 3 && entry[0].equals(\"message\")) {\n+                    entry[1] = entry[1].trim();\n+                    entry[2] = entry[2].trim();\n+                    headerFieldNames.set(headerFieldNames.indexOf(entry[1]), entry[2]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3d9f2c46edf9440778956f27d078b499eb64ff6"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1755e0f4b6a877dd8981941f03f4455dfc023a95", "author": {"user": {"login": "ellen-lau", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/1755e0f4b6a877dd8981941f03f4455dfc023a95", "committedDate": "2020-03-25T17:07:58Z", "message": "Make sure fieldMappings string is not empty/null, and avoid possible outOfBoundsExceptions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNTI5ODc5", "url": "https://github.com/OpenLiberty/open-liberty/pull/11220#pullrequestreview-381529879", "createdAt": "2020-03-25T20:56:32Z", "commit": {"oid": "1755e0f4b6a877dd8981941f03f4455dfc023a95"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0696f067456d5b88640841df7f6801f24313ed91", "author": {"user": {"login": "ellen-lau", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/0696f067456d5b88640841df7f6801f24313ed91", "committedDate": "2020-04-01T18:11:29Z", "message": "AccessLog JSON fields bytesReceived, responseCode, elapsedTime, should be quoteless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NTg5ODYw", "url": "https://github.com/OpenLiberty/open-liberty/pull/11220#pullrequestreview-386589860", "createdAt": "2020-04-02T16:22:28Z", "commit": {"oid": "0696f067456d5b88640841df7f6801f24313ed91"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3054, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}