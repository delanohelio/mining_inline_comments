{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNTczMTgw", "number": 10801, "title": "Issue 10277: Autonomical algorithm for calculating pollInterval.", "bodyText": "We store two values in the partition table.\n(1) last time we pulled\n(2) time when the last poll slot reserved will trigger\nWe will assign the current poll to use value (2) plus a global poll value to determine when it will poll for tasks next.\nValue (1) is used to detect if any poll intervals have been missed.\nOpenLiberty Pull Requester,\nATTENTION, READ THIS: Updated 4/11/2018 - Read and understand this completely,\nthen delete this entire template. If a reviewer or merger sees this template,\nthey should fail the review or merge.\nIf this code change is fixing a user-visible bug in previously released code, it MUST\nhave an associated issue mentioned in the PR text or description. That Issue also\nMUST be labelled \u201crelease bug\u201d\nThis directs automation to scrape this fix for inclusion in the next release's\nlist of bugs fixed.\nIf this code is NOT for fixing a released bug, for example new function, fixing\na bug in unreleased function, or other improvements that do not affect the\nuser-space, no label is needed. An issue could or could not be used based\non the developer\u2019s discretion, but do still delete this text block.\nFor full details, please see this wiki page:\nhttps://github.com/OpenLiberty/open-liberty/wiki/Open-Liberty-Conventions", "createdAt": "2020-02-07T19:48:46Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/10801", "merged": true, "mergeCommit": {"oid": "2a10344dbb537919775771503dd19c48da7a37d5"}, "closed": true, "closedAt": "2020-02-18T14:22:44Z", "author": {"login": "nmittles"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcCErLngH2gAyMzcyNTczMTgwOjI3NzNkM2U0Nzg1YmQ5N2Q2ODgzNjIyZmQxZTNmNWY4MjU5ZTFkYjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcCGm5lgFqTM1NTQzODc5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2773d3e4785bd97d6883622fd1e3f5f8259e1db6", "author": {"user": {"login": "nmittles", "name": "Nathan Mittlestat"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/2773d3e4785bd97d6883622fd1e3f5f8259e1db6", "committedDate": "2020-02-07T19:40:43Z", "message": "Issue 10277: Autonomical algorithm for calculating pollInterval.\n\nWe store two values in the partition table.\n(1) last time we pulled\n(2) time when the last poll slot reserved will trigger\n\nWe will assign the current poll to use value (2) plus a global poll value to determine when it will poll for tasks next.\nValue (1) is used to detect if any poll intervals have been missed."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NDM4Nzk4", "url": "https://github.com/OpenLiberty/open-liberty/pull/10801#pullrequestreview-355438798", "createdAt": "2020-02-07T21:10:46Z", "commit": {"oid": "2773d3e4785bd97d6883622fd1e3f5f8259e1db6"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMToxMDo0NlrOFnKZTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMToxNjo1NlrOFnKizw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYwOTEwMw==", "bodyText": "Just to be sure you are aware, with this change it is still possible that this could be a time in the past.\nFor example, 25800 / 1000 * 1000 + 600 evaluates to 25600.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10801#discussion_r376609103", "createdAt": "2020-02-07T21:10:46Z", "author": {"login": "njr-11"}, "path": "dev/com.ibm.ws.concurrent.persistent/src/com/ibm/ws/concurrent/persistent/db/DatabaseTaskStore.java", "diffHunk": "@@ -593,7 +593,7 @@ public long findOrCreatePollPartition() throws Exception {\n                 // Initialize to already-expired and eligible for any server to claim.\n                 // Use a fractional second to help avoid accessing the database around the same time as scheduled tasks\n                 // which might be scheduled to run on the hour or minute.\n-                partition.EXPIRY = (System.currentTimeMillis() / 1000 - 1) * 1000 + 600;\n+                partition.EXPIRY = System.currentTimeMillis() / 1000 * 1000 + 600;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2773d3e4785bd97d6883622fd1e3f5f8259e1db6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxMTUzNQ==", "bodyText": "If the current poll itself is slightly late, this could accidentally push us past the threshold and trigger the logic after just one missed poll.  We could guard against this by adding half a poll interval:\nif (now - lastUpdated > missedPollsThreshold * config.pollInterval + config.pollInterval / 2) {", "url": "https://github.com/OpenLiberty/open-liberty/pull/10801#discussion_r376611535", "createdAt": "2020-02-07T21:16:56Z", "author": {"login": "njr-11"}, "path": "dev/com.ibm.ws.concurrent.persistent/src/com/ibm/ws/concurrent/persistent/internal/PersistentExecutorImpl.java", "diffHunk": "@@ -2293,12 +2295,29 @@ private long coordinateNextPoll(Config config) {\n \n                 tranMgr.begin();\n                 try {\n-                    // TODO implement this method. For now, we invoke some basic db operations to demonstrate that what we have so far is working\n                     Object[] expiryAndLastUpdated = taskStore.findPollInfoForUpdate(pollPartitionId);\n                     long expiry = (Long) expiryAndLastUpdated[0];\n                     long lastUpdated = (Long) expiryAndLastUpdated[1];\n-                    taskStore.updatePollInfo(pollPartitionId, System.currentTimeMillis() + config.pollInterval);\n-                    delay = config.pollInterval;\n+                    long now = System.currentTimeMillis();\n+                    int slot = 0;\n+                    final int missedPollsThreshold = 2; // Could be make configurable in the future.\n+\n+                    if (now - lastUpdated > missedPollsThreshold * config.pollInterval) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2773d3e4785bd97d6883622fd1e3f5f8259e1db6"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3165, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}