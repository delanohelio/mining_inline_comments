{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyODMxNzEx", "number": 10428, "title": "First delivery of builder and consumer tests", "bodyText": "Deliver JWT Builder and Consumer FAT tests.", "createdAt": "2020-01-14T20:47:45Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/10428", "merged": true, "mergeCommit": {"oid": "39af87a2aec4c04bad3873e2356edd8ad6db4f19"}, "closed": true, "closedAt": "2020-01-22T16:15:28Z", "author": {"login": "c00crane"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6XMR9AH2gAyMzYyODMxNzExOjc4YmE2MDg5NjhkMzI3MTYzNmZlMWZiOTU0NDhlYmQxODdiZmQ5OTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb8kLmJAFqTM0NjAyNTg3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "78ba608968d3271636fe1fb95448ebd187bfd999", "author": {"user": {"login": "c00crane", "name": "Chris Crane"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/78ba608968d3271636fe1fb95448ebd187bfd999", "committedDate": "2020-01-14T20:43:46Z", "message": "First delivery of builder and consumer tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb930fcaa14e3cab70e0f17a697e2d803e14b6bb", "author": {"user": {"login": "c00crane", "name": "Chris Crane"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/bb930fcaa14e3cab70e0f17a697e2d803e14b6bb", "committedDate": "2020-01-15T00:20:58Z", "message": "fix bad auto-merge and some copyrights"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea45940d0a5e4e4a4f42a5c5b2e2d969bb85a959", "author": {"user": {"login": "c00crane", "name": "Chris Crane"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/ea45940d0a5e4e4a4f42a5c5b2e2d969bb85a959", "committedDate": "2020-01-15T00:52:57Z", "message": "Another automerge fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee1d3942cd065d6700a20d5a19d86e899ce60461", "author": {"user": {"login": "c00crane", "name": "Chris Crane"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/ee1d3942cd065d6700a20d5a19d86e899ce60461", "committedDate": "2020-01-15T19:07:41Z", "message": "Yet some more auto-merge updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3134aba5b0eba67d7e7014a628ce4d0e8dc70244", "author": {"user": {"login": "c00crane", "name": "Chris Crane"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/3134aba5b0eba67d7e7014a628ce4d0e8dc70244", "committedDate": "2020-01-15T21:29:50Z", "message": "unit tests updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7b792e9038400a62890dd0a7aaa7db8568a7aeb", "author": {"user": {"login": "c00crane", "name": "Chris Crane"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/b7b792e9038400a62890dd0a7aaa7db8568a7aeb", "committedDate": "2020-01-15T21:30:38Z", "message": "Merge remote-tracking branch 'origin/integration' into consumer_builder"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MDI1ODcz", "url": "https://github.com/OpenLiberty/open-liberty/pull/10428#pullrequestreview-346025873", "createdAt": "2020-01-21T16:42:40Z", "commit": {"oid": "b7b792e9038400a62890dd0a7aaa7db8568a7aeb"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjo0Mjo0MFrOFgA-2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjo1NzoxOVrOFgBhPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTExNDg0Mg==", "bodyText": "There really isn't a point in having this override method if all it does is call the super.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10428#discussion_r369114842", "createdAt": "2020-01-21T16:42:40Z", "author": {"login": "ayoho"}, "path": "dev/com.ibm.ws.security.fat.common.jwt/src/com/ibm/ws/security/fat/common/jwt/expectations/JwtApiExpectation.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ * IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.fat.common.jwt.expectations;\n+\n+import com.ibm.ws.security.fat.common.expectations.ResponseFullExpectation;\n+import com.ibm.ws.security.fat.common.jwt.JwtConstants;\n+import com.ibm.ws.security.fat.common.jwt.JwtMessageConstants;\n+\n+public class JwtApiExpectation extends ResponseFullExpectation {\n+\n+    public enum ValidationMsgType {\n+        SPECIFIC_CLAIM_API, CLAIM_LIST_MEMBER, CLAIM_FROM_LIST, HEADER_CLAIM_FROM_LIST\n+    }\n+\n+    /**\n+     * @param testAction\n+     * @param searchLocation\n+     * @param checkType\n+     * @param searchFor\n+     * @param failureMsg\n+     */\n+    public JwtApiExpectation(String errorId, String configId) {\n+        super(null, JwtConstants.STRING_MATCHES, JwtMessageConstants.CWWKS6031E_JWT_CONSUMER_CANNOT_PROCESS_STRING + \".+\" + configId + \".+\"\n+                                                 + errorId, \"Response did not show the expected \" + errorId + \" failure.\");\n+    }\n+\n+    public JwtApiExpectation(String checkType, String searchFor, String failureMsg) {\n+        super(checkType, searchFor, failureMsg);\n+    }\n+\n+    public JwtApiExpectation(String testAction, String searchLocation, String checkType, String searchKey, String searchFor, String failureMsg) {\n+        super(testAction, searchLocation, checkType, searchKey, searchFor, failureMsg);\n+    }\n+\n+    public JwtApiExpectation(String key, Object value, ValidationMsgType claimType) {\n+        this(\"\", key, value, claimType);\n+\n+    }\n+\n+    public JwtApiExpectation(String prefix, String key, Object value, ValidationMsgType claimType) {\n+        super(null, JwtConstants.STRING_MATCHES, null, \"Response from test step  did not match expected value.\");\n+        validationKey = key;\n+\n+        // based on what we're trying to check, override the validation value and the check type\n+        switch (claimType) {\n+            case SPECIFIC_CLAIM_API:\n+                checkType = JwtConstants.STRING_MATCHES;\n+                validationValue = buildClaimApiString(prefix, key, value);\n+                break;\n+\n+            case CLAIM_LIST_MEMBER:\n+                if (value == null || value.equals(\"-1\")) {\n+                    checkType = JwtConstants.STRING_DOES_NOT_MATCH;\n+                } else {\n+                    checkType = JwtConstants.STRING_MATCHES;\n+                }\n+                validationValue = buildJsonClaimString(prefix, key, value);\n+                break;\n+\n+            case CLAIM_FROM_LIST:\n+                if (value == null || value.equals(\"-1\")) {\n+                    checkType = JwtConstants.STRING_DOES_NOT_MATCH;\n+                } else {\n+                    checkType = JwtConstants.STRING_MATCHES;\n+                }\n+                validationValue = buildJsonAllClaimString(prefix, JwtConstants.JWT_JSON + JwtConstants.JWT_GETALLCLAIMS, key, value);\n+                break;\n+            case HEADER_CLAIM_FROM_LIST:\n+                if (value == null || value.equals(\"-1\")) {\n+                    checkType = JwtConstants.STRING_DOES_NOT_MATCH;\n+                } else {\n+                    checkType = JwtConstants.STRING_MATCHES;\n+                }\n+                validationValue = buildJsonAllClaimString(prefix, JwtConstants.JWT_TOKEN_HEADER_JSON, key, value);\n+                break;\n+\n+            default:\n+                break;\n+        }\n+    }\n+\n+    public String buildClaimApiString(String prefix, String keyLogName, Object value) {\n+\n+        String builtString = prefix + keyLogName + \".*\" + value;\n+\n+        return builtString;\n+    }\n+\n+    public String buildJsonClaimString(String prefix, String key, Object value) {\n+\n+        String builtString = \"garbage\";\n+        String newValue = \"garbage\";\n+        if (value == null) {\n+            newValue = \":\" + \".*null\";\n+        } else {\n+            if (value.equals(\"-1\")) {\n+                newValue = \":\";\n+            } else {\n+                newValue = value.toString().replace(\"[\", \"\").replace(\"]\", \"\");\n+            }\n+        }\n+        builtString = prefix + JwtConstants.JWT_JSON + \"\\\\{\" + \".*\" + key + \".*\" + newValue + \".*\\\\}\";\n+        return builtString;\n+    }\n+\n+    public String buildJsonAllClaimString(String prefix, String subPrefix, String key, Object value) {\n+\n+        String builtString = \"garbage\";\n+        if (value instanceof Long) {\n+            if (value.equals(-1L)) {\n+                builtString = prefix + subPrefix + \".*\" + key + \".*\";\n+            }\n+        }\n+        builtString = prefix + subPrefix + \".*\" + key + \".*\" + value;\n+\n+        return builtString;\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     *\n+     * @see com.ibm.ws.security.fat.common.expectations.Expectation#validate(java.lang.Object)\n+     */\n+    @Override\n+    protected void validate(Object contentToValidate) throws Exception {\n+//        Log.info(thisClass, \"validate (in JwtClaimExpectations\", checkType);\n+        super.validate(contentToValidate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7b792e9038400a62890dd0a7aaa7db8568a7aeb"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTExNTkzMQ==", "bodyText": "I'd be interested in adding some unit tests for this class down the line. I think some of the regular expressions used here might be a little too loose and open the possibility for false negatives.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10428#discussion_r369115931", "createdAt": "2020-01-21T16:44:29Z", "author": {"login": "ayoho"}, "path": "dev/com.ibm.ws.security.fat.common.jwt/src/com/ibm/ws/security/fat/common/jwt/expectations/JwtApiExpectation.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ * IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.fat.common.jwt.expectations;\n+\n+import com.ibm.ws.security.fat.common.expectations.ResponseFullExpectation;\n+import com.ibm.ws.security.fat.common.jwt.JwtConstants;\n+import com.ibm.ws.security.fat.common.jwt.JwtMessageConstants;\n+\n+public class JwtApiExpectation extends ResponseFullExpectation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7b792e9038400a62890dd0a7aaa7db8568a7aeb"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEyMTg4MA==", "bodyText": "I'm confused by this one - the point of it being a ResponseFullExpectation object is because the search location is the full response, and always will be the full response. An expectation that searches somewhere else would be a different type of expectation.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10428#discussion_r369121880", "createdAt": "2020-01-21T16:54:26Z", "author": {"login": "ayoho"}, "path": "dev/com.ibm.ws.security.fat.common/src/com/ibm/ws/security/fat/common/expectations/ResponseFullExpectation.java", "diffHunk": "@@ -25,6 +25,10 @@ public ResponseFullExpectation(String testAction, String checkType, String searc\n         super(testAction, Constants.RESPONSE_FULL, checkType, searchFor, failureMsg);\n     }\n \n+    public ResponseFullExpectation(String testAction, String searchLocation, String checkType, String searchKey, String searchFor, String failureMsg) {\n+        super(testAction, searchLocation, checkType, searchKey, searchFor, failureMsg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7b792e9038400a62890dd0a7aaa7db8568a7aeb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEyMzY0Nw==", "bodyText": "These shouldn't be here and should be covered by the bnd.bnd file.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10428#discussion_r369123647", "createdAt": "2020-01-21T16:57:19Z", "author": {"login": "ayoho"}, "path": "dev/com.ibm.ws.security.jwt_fat.builder/.classpath", "diffHunk": "@@ -0,0 +1,11 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<classpath>\n+\t<classpathentry kind=\"src\" path=\"src\"/>\n+\t<classpathentry kind=\"src\" path=\"fat/src\"/>\n+\t<classpathentry kind=\"src\" path=\"test-applications/jwtbuilderclient/src\"/>\n+\t<classpathentry kind=\"con\" path=\"aQute.bnd.classpath.container\"/>\n+\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"/com.ibm.ws.security.fat.common\"/>\n+\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"/com.ibm.ws.security.fat.common.jwt\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7b792e9038400a62890dd0a7aaa7db8568a7aeb"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3353, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}