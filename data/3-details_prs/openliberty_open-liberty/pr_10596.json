{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NjE1NzMx", "number": 10596, "title": "Ensure duplicate key exception is avoided attempt 2", "bodyText": "Continued from PR: #10522\nWe have continued to see Duplicate Key exceptions popping up in our SOE builds from this test bucket.  Without JDBC trace I was unable to locate exactly when we are originally creating the row.  My best guess is that by having this timer bean as @Stateless has somehow resulted in more than one bean being created, and therefore more then one attempt to create the same row in the database.\nI wasn't able to recreate this error locally.  But to ensure that this is not possible I have changed the AutomaticDatabase bean to be a @Singleton.  This should ensure that the PostConstruct method is only ever called once.  And added in an extra check to see if the row has previously been created.", "createdAt": "2020-01-27T17:34:03Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/10596", "merged": true, "mergeCommit": {"oid": "fa7f34c606b5187ea07ec78bf8a922d99151e2e4"}, "closed": true, "closedAt": "2020-01-28T14:46:55Z", "author": {"login": "KyleAure"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-gJGSAH2gAyMzY3NjE1NzMxOjE1NTk5MDc0NjJmMmRkZmYzNzRmZTM5MDFkYTI2MjA1ZGExZGZlYTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb-jQqvgFqTM0ODk3MjY1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1559907462f2ddff374fe3901da26205da1dfea4", "author": {"user": {"login": "KyleAure", "name": "Kyle Aure"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/1559907462f2ddff374fe3901da26205da1dfea4", "committedDate": "2020-01-27T17:25:08Z", "message": "Ensure duplicate key exception does not happen"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4OTA5MTA0", "url": "https://github.com/OpenLiberty/open-liberty/pull/10596#pullrequestreview-348909104", "createdAt": "2020-01-27T19:15:42Z", "commit": {"oid": "1559907462f2ddff374fe3901da26205da1dfea4"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOToxNTo0MlrOFiOS7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOToxNTo0N1rOFiOTEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQzMDEyNg==", "bodyText": "Singleton does seem convenient for restricting the table setup, but I think there may be other consequences for timers with respect to locking, so we need to ensure that is really what we want.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10596#discussion_r371430126", "createdAt": "2020-01-27T19:15:42Z", "author": {"login": "njr-11"}, "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java", "diffHunk": "@@ -33,7 +33,7 @@\n  * This class uses the @Schedule annotation.\n  * Using this annotation will start the timer immediately on start and will run every 30 seconds.\n  */\n-@Stateless\n+@Singleton //Ensure only one instance of this Timer is ever created.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1559907462f2ddff374fe3901da26205da1dfea4"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQzMDE2Mg==", "bodyText": "I don't see why we should suppress this error.  If something goes wrong, we should let the test fail and report the problem.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10596#discussion_r371430162", "createdAt": "2020-01-27T19:15:47Z", "author": {"login": "njr-11"}, "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java", "diffHunk": "@@ -88,30 +88,54 @@ private void initTable() throws SQLException {\n             DatabaseMetaData md = conn.getMetaData();\n             ResultSet rs = md.getTables(null, null, \"AUTOMATICDATABASE\", null);\n             while (rs.next()) {\n-                if (rs.getString(\"TABLE_NAME\").equalsIgnoreCase(\"AUTOMATICDATABASE\"))\n+                if (rs.getString(\"TABLE_NAME\").equalsIgnoreCase(\"AUTOMATICDATABASE\")) {\n+                    System.out.println(\"Found table AUTOMATICDATABASE. Skipping creation.\");\n                     return;\n+                }\n             }\n \n             //If not, create it.\n             try (Statement stmt = conn.createStatement()) {\n                 stmt.execute(createTable);\n-            }\n+            } //Let initTableAndRow catch error\n+\n+            System.out.println(\"Created table AUTOMATICDATABASE\");\n         }\n     }\n \n     private void initRow() throws SQLException {\n+        final String checkRow = \"SELECT COUNT(*) FROM AUTOMATICDATABASE WHERE name = ?\";\n         final String createRow = \"INSERT INTO AUTOMATICDATABASE VALUES(?,?)\";\n \n         //create count\n         count = 0;\n \n         try (Connection conn = ds.getConnection()) {\n+            //See if row already exists\n+            try (PreparedStatement pstmt = conn.prepareStatement(checkRow)) {\n+                pstmt.setString(1, name);\n+                ResultSet rs = pstmt.executeQuery();\n+                //If the count of rows is more than 0 then set this true.\n+                //Otherwise, set to false when row is not found, or 0 is returned as a result.\n+                boolean exists = rs.next() ? rs.getInt(1) > 0 : false;\n+                if (exists) {\n+                    System.out.println(\"Found row identified by \" + name + \" in table AUTOMATICDATABASE.  Skipping creation.\");\n+                    return;\n+                }\n+            } catch (SQLException sqle) {\n+                System.out.println(\"Caught exception attempting to find row identified by \" + name + \" in table AUTOMATICDATABASE.\"\n+                                   + \" Continuing on to attempt to create row.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1559907462f2ddff374fe3901da26205da1dfea4"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fb6ea8aeffb26b2de061e3b6ba323fb3b16507e", "author": {"user": {"login": "KyleAure", "name": "Kyle Aure"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/6fb6ea8aeffb26b2de061e3b6ba323fb3b16507e", "committedDate": "2020-01-27T20:53:27Z", "message": "feedback changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4OTcyNjU2", "url": "https://github.com/OpenLiberty/open-liberty/pull/10596#pullrequestreview-348972656", "createdAt": "2020-01-27T21:03:07Z", "commit": {"oid": "6fb6ea8aeffb26b2de061e3b6ba323fb3b16507e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3270, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}