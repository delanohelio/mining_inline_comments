{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1MjA2NjIw", "number": 12104, "title": "Fix for Issue #9579: Fix options method to return the correct allowed headers", "bodyText": "", "createdAt": "2020-05-08T12:18:40Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/12104", "merged": true, "mergeCommit": {"oid": "72144491d320af5a201148e92d42d0a49d6f9b2b"}, "closed": true, "closedAt": "2020-06-25T15:42:37Z", "author": {"login": "jkoehler22"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcfSuaLgFqTQwODI1OTU0NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuJ9FiAFqTQzNjA1NzU3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MjU5NTQ0", "url": "https://github.com/OpenLiberty/open-liberty/pull/12104#pullrequestreview-408259544", "createdAt": "2020-05-08T14:00:18Z", "commit": {"oid": "fd44ba52a0b916570e32d794633ebccbfae01071"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNDowMDoxOVrOGSmlTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNDoyMjowOVrOGSnUoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE1OTY5NQ==", "bodyText": "It's a nit, but let's remove the extraneous comments.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //    @TestServlet(servlet = OptionsTestServlet.class)", "url": "https://github.com/OpenLiberty/open-liberty/pull/12104#discussion_r422159695", "createdAt": "2020-05-08T14:00:19Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0_fat/fat/src/com/ibm/ws/jaxrs20/fat/options/OptionsTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs20.fat.options;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.ws.jaxrs.fat.options.OptionsTestServlet;\n+\n+import componenttest.annotation.Server;\n+import componenttest.annotation.TestServlet;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+\n+\n+@RunWith(FATRunner.class)\n+public class OptionsTest {\n+\n+    private static final String appName = \"optionsApp\";\n+    private static final String optionswar = \"options\";\n+    private static final String app = \"options\";\n+\n+    @Server(\"com.ibm.ws.jaxrs.fat.options\")\n+    @TestServlet(servlet = OptionsTestServlet.class, contextRoot = app)\n+//    @TestServlet(servlet = OptionsTestServlet.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd44ba52a0b916570e32d794633ebccbfae01071"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE1OTg4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //        ShrinkHelper.defaultDropinApp(server, optionswar, \"com.ibm.ws.jaxrs.fat.options\");", "url": "https://github.com/OpenLiberty/open-liberty/pull/12104#discussion_r422159884", "createdAt": "2020-05-08T14:00:37Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0_fat/fat/src/com/ibm/ws/jaxrs20/fat/options/OptionsTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs20.fat.options;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.ws.jaxrs.fat.options.OptionsTestServlet;\n+\n+import componenttest.annotation.Server;\n+import componenttest.annotation.TestServlet;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+\n+\n+@RunWith(FATRunner.class)\n+public class OptionsTest {\n+\n+    private static final String appName = \"optionsApp\";\n+    private static final String optionswar = \"options\";\n+    private static final String app = \"options\";\n+\n+    @Server(\"com.ibm.ws.jaxrs.fat.options\")\n+    @TestServlet(servlet = OptionsTestServlet.class, contextRoot = app)\n+//    @TestServlet(servlet = OptionsTestServlet.class)\n+    public static LibertyServer server;\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+//        ShrinkHelper.defaultDropinApp(server, optionswar, \"com.ibm.ws.jaxrs.fat.options\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd44ba52a0b916570e32d794633ebccbfae01071"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE2MDMwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /*\n          \n          \n            \n                private int getPort() {\n          \n          \n            \n                    return server.getHttpDefaultPort();\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                private String getHost() {\n          \n          \n            \n                    return server.getHostname();\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                @Test\n          \n          \n            \n                public void testSimple() throws IOException {\n          \n          \n            \n                    runGetMethod(200, \"/options/rest/helloworld\", \"Hello World\");\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                private StringBuilder runGetMethod(int exprc, String requestUri, String testOut)\n          \n          \n            \n                                throws IOException {\n          \n          \n            \n                    URL url = new URL(\"http://\" + getHost() + \":\" + getPort() + requestUri);\n          \n          \n            \n                    int retcode;\n          \n          \n            \n                    HttpURLConnection con = (HttpURLConnection) url.openConnection();\n          \n          \n            \n                    try {\n          \n          \n            \n                        con.setDoInput(true);\n          \n          \n            \n                        con.setDoOutput(true);\n          \n          \n            \n                        con.setUseCaches(false);\n          \n          \n            \n                        con.setRequestMethod(\"GET\");\n          \n          \n            \n            \n          \n          \n            \n                        retcode = con.getResponseCode();\n          \n          \n            \n            \n          \n          \n            \n                        InputStream is = con.getInputStream();\n          \n          \n            \n                        InputStreamReader isr = new InputStreamReader(is);\n          \n          \n            \n                        BufferedReader br = new BufferedReader(isr);\n          \n          \n            \n            \n          \n          \n            \n                        String sep = System.getProperty(\"line.separator\");\n          \n          \n            \n                        StringBuilder lines = new StringBuilder();\n          \n          \n            \n                        for (String line = br.readLine(); line != null; line = br\n          \n          \n            \n                                        .readLine())\n          \n          \n            \n                            lines.append(line).append(sep);\n          \n          \n            \n            \n          \n          \n            \n                        if (lines.indexOf(testOut) < 0)\n          \n          \n            \n                            fail(\"Missing success message in output. \" + lines);\n          \n          \n            \n            \n          \n          \n            \n                        if (retcode != exprc)\n          \n          \n            \n                            fail(\"Bad return Code from Get. Expected \" + exprc + \"Got\"\n          \n          \n            \n                                 + retcode);\n          \n          \n            \n            \n          \n          \n            \n                        return lines;\n          \n          \n            \n                    } finally {\n          \n          \n            \n                        con.disconnect();\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n                */", "url": "https://github.com/OpenLiberty/open-liberty/pull/12104#discussion_r422160303", "createdAt": "2020-05-08T14:01:27Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0_fat/fat/src/com/ibm/ws/jaxrs20/fat/options/OptionsTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs20.fat.options;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.ws.jaxrs.fat.options.OptionsTestServlet;\n+\n+import componenttest.annotation.Server;\n+import componenttest.annotation.TestServlet;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+\n+\n+@RunWith(FATRunner.class)\n+public class OptionsTest {\n+\n+    private static final String appName = \"optionsApp\";\n+    private static final String optionswar = \"options\";\n+    private static final String app = \"options\";\n+\n+    @Server(\"com.ibm.ws.jaxrs.fat.options\")\n+    @TestServlet(servlet = OptionsTestServlet.class, contextRoot = app)\n+//    @TestServlet(servlet = OptionsTestServlet.class)\n+    public static LibertyServer server;\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+//        ShrinkHelper.defaultDropinApp(server, optionswar, \"com.ibm.ws.jaxrs.fat.options\");\n+        ShrinkHelper.defaultDropinApp(server, app, \"com.ibm.ws.jaxrs.fat.options\");\n+\n+        // Make sure we don't fail because we try to start an\n+        // already started server\n+        try {\n+            server.startServer(true);\n+        } catch (Exception e) {\n+            System.out.println(e.toString());\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n+        if (server != null) {\n+            server.stopServer();\n+        }\n+    }\n+/*\n+    private int getPort() {\n+        return server.getHttpDefaultPort();\n+    }\n+\n+    private String getHost() {\n+        return server.getHostname();\n+    }\n+\n+    @Test\n+    public void testSimple() throws IOException {\n+        runGetMethod(200, \"/options/rest/helloworld\", \"Hello World\");\n+    }\n+\n+    private StringBuilder runGetMethod(int exprc, String requestUri, String testOut)\n+                    throws IOException {\n+        URL url = new URL(\"http://\" + getHost() + \":\" + getPort() + requestUri);\n+        int retcode;\n+        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+        try {\n+            con.setDoInput(true);\n+            con.setDoOutput(true);\n+            con.setUseCaches(false);\n+            con.setRequestMethod(\"GET\");\n+\n+            retcode = con.getResponseCode();\n+\n+            InputStream is = con.getInputStream();\n+            InputStreamReader isr = new InputStreamReader(is);\n+            BufferedReader br = new BufferedReader(isr);\n+\n+            String sep = System.getProperty(\"line.separator\");\n+            StringBuilder lines = new StringBuilder();\n+            for (String line = br.readLine(); line != null; line = br\n+                            .readLine())\n+                lines.append(line).append(sep);\n+\n+            if (lines.indexOf(testOut) < 0)\n+                fail(\"Missing success message in output. \" + lines);\n+\n+            if (retcode != exprc)\n+                fail(\"Bad return Code from Get. Expected \" + exprc + \"Got\"\n+                     + retcode);\n+\n+            return lines;\n+        } finally {\n+            con.disconnect();\n+        }\n+    }\n+    */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd44ba52a0b916570e32d794633ebccbfae01071"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE2MjY1OA==", "bodyText": "We can delete this code and let the resource classes be auto-discovered.  If you wanted to save more code, you could make one of the resource classes extend Application and add the @ApplicationPath to it.  Either way.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Override\n          \n          \n            \n                public Set<Class<?>> getClasses() {\n          \n          \n            \n                    Set<Class<?>> classes = new HashSet<Class<?>>();\n          \n          \n            \n                    classes.add(OptionsResource.class);\n          \n          \n            \n                    classes.add(OptionsResource2.class);\n          \n          \n            \n                    classes.add(OptionsTestServlet.class);\n          \n          \n            \n                    return classes;\n          \n          \n            \n                }", "url": "https://github.com/OpenLiberty/open-liberty/pull/12104#discussion_r422162658", "createdAt": "2020-05-08T14:05:40Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0_fat/test-applications/options/src/com/ibm/ws/jaxrs/fat/options/OptionsApplication.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs.fat.options;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.ws.rs.ApplicationPath;\n+import javax.ws.rs.core.Application;\n+\n+@ApplicationPath(\"options\")\n+public class OptionsApplication extends Application {\n+\n+    @Override\n+    public Set<Class<?>> getClasses() {\n+        Set<Class<?>> classes = new HashSet<Class<?>>();\n+        classes.add(OptionsResource.class);\n+        classes.add(OptionsResource2.class);\n+        classes.add(OptionsTestServlet.class);\n+        return classes;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd44ba52a0b916570e32d794633ebccbfae01071"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE2Njc2NA==", "bodyText": "Some of the tests might read easier if we use assertFalse(condition) instead of assertTrue(!condition).\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.junit.Assert.assertTrue;\n          \n          \n            \n            import static org.junit.Assert.assertFalse;\n          \n          \n            \n            import static org.junit.Assert.assertTrue;", "url": "https://github.com/OpenLiberty/open-liberty/pull/12104#discussion_r422166764", "createdAt": "2020-05-08T14:13:19Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0_fat/test-applications/options/src/com/ibm/ws/jaxrs/fat/options/OptionsTestServlet.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs.fat.options;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd44ba52a0b916570e32d794633ebccbfae01071"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE2NzE3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(!(response.getHeaderString(\"Allow\").contains(\"DELETE\")));\n          \n          \n            \n                    assertTrue(!(response.getHeaderString(\"Allow\").contains(\"PATCH\")));\n          \n          \n            \n                    assertFalse(response.getHeaderString(\"Allow\").contains(\"DELETE\"));\n          \n          \n            \n                    assertFalse(response.getHeaderString(\"Allow\").contains(\"PATCH\"));", "url": "https://github.com/OpenLiberty/open-liberty/pull/12104#discussion_r422167174", "createdAt": "2020-05-08T14:14:00Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0_fat/test-applications/options/src/com/ibm/ws/jaxrs/fat/options/OptionsTestServlet.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs.fat.options;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.logging.Logger;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+\n+import org.junit.Test;\n+\n+import componenttest.app.FATServlet;\n+\n+@WebServlet(urlPatterns = \"/OptionsTestServlet\")\n+public class OptionsTestServlet extends FATServlet {\n+\n+    private static final String clz = \"OptionsTestServlet\";\n+    private static final Logger LOG = Logger.getLogger(OptionsTestServlet.class.getName());\n+\n+    private Client client;\n+\n+    @Override\n+    public void init() throws ServletException {\n+        client = ClientBuilder.newBuilder().build();\n+    }\n+\n+    @Override\n+    public void destroy() {\n+        client.close();\n+    }\n+\n+\n+    @Test\n+    public void testOptions(HttpServletRequest req, HttpServletResponse resp) throws Exception {\n+\n+        Response response = target(req, \"/options/options/test\").request().options();\n+        assertEquals(200, response.getStatus());\n+        System.out.println(\"testOptions Allowed headers are : \" + response.getHeaderString(\"Allow\"));\n+        assertTrue(response.getHeaderString(\"Allow\").contains(\"GET\"));\n+        assertTrue(response.getHeaderString(\"Allow\").contains(\"PUT\"));\n+        assertTrue(response.getHeaderString(\"Allow\").contains(\"POST\"));\n+        assertTrue(response.getHeaderString(\"Allow\").contains(\"OPTIONS\"));\n+        assertTrue(response.getHeaderString(\"Allow\").contains(\"HEAD\"));\n+        assertTrue(!(response.getHeaderString(\"Allow\").contains(\"DELETE\")));\n+        assertTrue(!(response.getHeaderString(\"Allow\").contains(\"PATCH\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd44ba52a0b916570e32d794633ebccbfae01071"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE2Nzg0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(!(response.getHeaderString(\"Allow\").contains(\"GET\")));\n          \n          \n            \n                    assertTrue(!(response.getHeaderString(\"Allow\").contains(\"PUT\")));\n          \n          \n            \n                    assertTrue(!(response.getHeaderString(\"Allow\").contains(\"POST\")));\n          \n          \n            \n                    assertTrue(response.getHeaderString(\"Allow\").contains(\"DELETE\"));\n          \n          \n            \n                    assertTrue(!(response.getHeaderString(\"Allow\").contains(\"PATCH\")));\n          \n          \n            \n                    assertTrue(response.getHeaderString(\"Allow\").contains(\"OPTIONS\"));\n          \n          \n            \n                    assertTrue(!(response.getHeaderString(\"Allow\").contains(\"HEAD\")));\n          \n          \n            \n                    assertFalse(response.getHeaderString(\"Allow\").contains(\"GET\"));\n          \n          \n            \n                    assertFalse(response.getHeaderString(\"Allow\").contains(\"PUT\"));\n          \n          \n            \n                    assertFalse(response.getHeaderString(\"Allow\").contains(\"POST\"));\n          \n          \n            \n                    assertTrue(response.getHeaderString(\"Allow\").contains(\"DELETE\"));\n          \n          \n            \n                    assertFalse(response.getHeaderString(\"Allow\").contains(\"PATCH\"));\n          \n          \n            \n                    assertTrue(response.getHeaderString(\"Allow\").contains(\"OPTIONS\"));\n          \n          \n            \n                    assertFalse(response.getHeaderString(\"Allow\").contains(\"HEAD\"));", "url": "https://github.com/OpenLiberty/open-liberty/pull/12104#discussion_r422167847", "createdAt": "2020-05-08T14:15:10Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0_fat/test-applications/options/src/com/ibm/ws/jaxrs/fat/options/OptionsTestServlet.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs.fat.options;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.logging.Logger;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.Response;\n+\n+import org.junit.Test;\n+\n+import componenttest.app.FATServlet;\n+\n+@WebServlet(urlPatterns = \"/OptionsTestServlet\")\n+public class OptionsTestServlet extends FATServlet {\n+\n+    private static final String clz = \"OptionsTestServlet\";\n+    private static final Logger LOG = Logger.getLogger(OptionsTestServlet.class.getName());\n+\n+    private Client client;\n+\n+    @Override\n+    public void init() throws ServletException {\n+        client = ClientBuilder.newBuilder().build();\n+    }\n+\n+    @Override\n+    public void destroy() {\n+        client.close();\n+    }\n+\n+\n+    @Test\n+    public void testOptions(HttpServletRequest req, HttpServletResponse resp) throws Exception {\n+\n+        Response response = target(req, \"/options/options/test\").request().options();\n+        assertEquals(200, response.getStatus());\n+        System.out.println(\"testOptions Allowed headers are : \" + response.getHeaderString(\"Allow\"));\n+        assertTrue(response.getHeaderString(\"Allow\").contains(\"GET\"));\n+        assertTrue(response.getHeaderString(\"Allow\").contains(\"PUT\"));\n+        assertTrue(response.getHeaderString(\"Allow\").contains(\"POST\"));\n+        assertTrue(response.getHeaderString(\"Allow\").contains(\"OPTIONS\"));\n+        assertTrue(response.getHeaderString(\"Allow\").contains(\"HEAD\"));\n+        assertTrue(!(response.getHeaderString(\"Allow\").contains(\"DELETE\")));\n+        assertTrue(!(response.getHeaderString(\"Allow\").contains(\"PATCH\")));\n+\n+    }\n+\n+    @Test\n+    public void testOptions2(HttpServletRequest req, HttpServletResponse resp) throws Exception {\n+\n+        Response response = target(req, \"/options/options/test2/1\").request().options();\n+        assertEquals(200, response.getStatus());\n+        System.out.println(\"testOptions2 Allowed headers are : \" + response.getHeaderString(\"Allow\"));\n+        assertTrue(!(response.getHeaderString(\"Allow\").contains(\"GET\")));\n+        assertTrue(!(response.getHeaderString(\"Allow\").contains(\"PUT\")));\n+        assertTrue(!(response.getHeaderString(\"Allow\").contains(\"POST\")));\n+        assertTrue(response.getHeaderString(\"Allow\").contains(\"DELETE\"));\n+        assertTrue(!(response.getHeaderString(\"Allow\").contains(\"PATCH\")));\n+        assertTrue(response.getHeaderString(\"Allow\").contains(\"OPTIONS\"));\n+        assertTrue(!(response.getHeaderString(\"Allow\").contains(\"HEAD\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd44ba52a0b916570e32d794633ebccbfae01071"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE3MTgwOQ==", "bodyText": "This makes me wonder whether users would expect to see both POST and GET returned for the same OPTIONS request, since POST is available for \"/test\", but GET is only available for \"/test/{id}\".\nFor example, if a user does \"OPTIONS /test/123\", if the available methods in the response header included POST, then that might make a user think they could send a request \"POST /test/123\", but in this case, that wouldn't work - but \"GET /test/123\" would.  Likewise, if they did \"OPTIONS /test\", if they get back POST and GET, they will only be able to do \"POST /test\" successfully.\nThe seems to imply that users should expect class- and method-specific metadata from OPTIONS - it says (section 3.3.5):\nOn receipt of an OPTIONS request an implementation MUST either:\n  1. Call a method annotated with a request method designator for OPTIONS or, if none present,\n  2. GenerateanautomaticresponseusingthemetadataprovidedbytheJAX-RSannotationsonthematch-\ning class and its methods.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12104#discussion_r422171809", "createdAt": "2020-05-08T14:22:09Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0_fat/test-applications/options/src/com/ibm/ws/jaxrs/fat/options/OptionsResource.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs.fat.options;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.core.Response;\n+\n+@Path(\"/test\")\n+public class OptionsResource {\n+    @POST\n+    public Response create() {\n+        return Response.ok().build();\n+    }\n+\n+    @GET\n+    @Path(\"/{id}\")\n+    public Response get(@PathParam(\"id\") String id) {\n+        return Response.ok(id).build();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd44ba52a0b916570e32d794633ebccbfae01071"}, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fd44ba52a0b916570e32d794633ebccbfae01071", "author": {"user": {"login": "jkoehler22", "name": "John Koehler"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/fd44ba52a0b916570e32d794633ebccbfae01071", "committedDate": "2020-05-08T12:16:33Z", "message": "Issue #9579: Fix options method to return the correct allowed headers"}, "afterCommit": {"oid": "0c27f7b8d1f257c01249910033d8c6dbf56bd5b6", "author": {"user": {"login": "jkoehler22", "name": "John Koehler"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/0c27f7b8d1f257c01249910033d8c6dbf56bd5b6", "committedDate": "2020-05-13T16:10:17Z", "message": "Issue #9579: Fix options methods that use PathParam to return the correct allowed headers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c27f7b8d1f257c01249910033d8c6dbf56bd5b6", "author": {"user": {"login": "jkoehler22", "name": "John Koehler"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/0c27f7b8d1f257c01249910033d8c6dbf56bd5b6", "committedDate": "2020-05-13T16:10:17Z", "message": "Issue #9579: Fix options methods that use PathParam to return the correct allowed headers"}, "afterCommit": {"oid": "c5b1e2680d7167c02fd8757695931baf2485dda1", "author": {"user": {"login": "jkoehler22", "name": "John Koehler"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/c5b1e2680d7167c02fd8757695931baf2485dda1", "committedDate": "2020-06-04T16:41:35Z", "message": "Issue #9579: Fix options method to return the correct allowed headers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0ODEzMzYx", "url": "https://github.com/OpenLiberty/open-liberty/pull/12104#pullrequestreview-424813361", "createdAt": "2020-06-04T20:43:42Z", "commit": {"oid": "75b2c146d0158b863499c3851ae8dc9f2639bd8a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "75b2c146d0158b863499c3851ae8dc9f2639bd8a", "author": {"user": {"login": "jkoehler22", "name": "John Koehler"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/75b2c146d0158b863499c3851ae8dc9f2639bd8a", "committedDate": "2020-06-04T19:10:07Z", "message": "Issue #9579: Fix options method to return the correct allowed headers"}, "afterCommit": {"oid": "310229518dfdb83f31c5b4a96eb78e5feb9c7881", "author": {"user": {"login": "jkoehler22", "name": "John Koehler"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/310229518dfdb83f31c5b4a96eb78e5feb9c7881", "committedDate": "2020-06-05T16:26:24Z", "message": "Issue #9579: Fix options method to return the correct allowed headers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "26d42eab7efac1b3c88aa5755fdfbc333a8b423a", "author": {"user": {"login": "jkoehler22", "name": "John Koehler"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/26d42eab7efac1b3c88aa5755fdfbc333a8b423a", "committedDate": "2020-06-05T16:38:05Z", "message": "Issue #9579: Fix options method to return the correct allowed headers"}, "afterCommit": {"oid": "3502ce8951a6ba467c0b670573b0d89abc6ac87f", "author": {"user": {"login": "jkoehler22", "name": "John Koehler"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/3502ce8951a6ba467c0b670573b0d89abc6ac87f", "committedDate": "2020-06-16T20:17:46Z", "message": "Issue #9579: Fix options method to return the correct allowed headers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MTg2NTcy", "url": "https://github.com/OpenLiberty/open-liberty/pull/12104#pullrequestreview-435186572", "createdAt": "2020-06-22T18:48:33Z", "commit": {"oid": "3502ce8951a6ba467c0b670573b0d89abc6ac87f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo0ODozM1rOGnM3aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo0ODozM1rOGnM3aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1ODQ0Mw==", "bodyText": "These don't look right.  Are you seeing Java 2 security failures without these? If so, I think we might need to add doPriv blocks in the runtime code to address - I don't see anywhere in the test case (application) code where it is getting a classloader or looking up an org.apache.* system property.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12104#discussion_r443758443", "createdAt": "2020-06-22T18:48:33Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0_fat/publish/servers/com.ibm.ws.jaxrs.fat.options/server.xml", "diffHunk": "@@ -0,0 +1,13 @@\n+<server>\n+    <featureManager>\n+        <feature>jaxrs-2.0</feature>        \n+        <feature>componenttest-1.0</feature>\n+    </featureManager>\n+\n+  \t<include location=\"../fatTestPorts.xml\"/>\n+  \t\n+\t<javaPermission className=\"java.net.SocketPermission\" name=\"*\" actions=\"connect,resolve\"/>\n+    <javaPermission className=\"java.util.PropertyPermission\" name=\"org.apache.commons.logging.*\" actions=\"read\"/>\n+    <javaPermission className=\"java.lang.RuntimePermission\" name=\"getClassLoader\"/> ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3502ce8951a6ba467c0b670573b0d89abc6ac87f"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MTg3Mjgx", "url": "https://github.com/OpenLiberty/open-liberty/pull/12104#pullrequestreview-435187281", "createdAt": "2020-06-22T18:49:34Z", "commit": {"oid": "3502ce8951a6ba467c0b670573b0d89abc6ac87f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo0OTozNFrOGnM5mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo0OTozNFrOGnM5mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc1OTAwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        System.out.println(e.toString());\n          \n          \n            \n                        e.printStackTrace(); // or e.printStackTrace(System.out); if you want it go to sys out instead of sys err - but the stack trace is more valuable than the toString.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12104#discussion_r443759003", "createdAt": "2020-06-22T18:49:34Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0_fat/fat/src/com/ibm/ws/jaxrs20/fat/options/OptionsTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs20.fat.options;\n+\n+import java.io.File;\n+\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.ws.jaxrs.fat.options.OptionsTestServlet;\n+\n+import componenttest.annotation.Server;\n+import componenttest.annotation.TestServlet;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+\n+\n+@RunWith(FATRunner.class)\n+public class OptionsTest {\n+    private static final String CONTEXT_ROOT = \"options\";\n+    private static final String HTTPCLIENT = \"publish/shared/resources/httpclient/\";\n+\n+    @Server(\"com.ibm.ws.jaxrs.fat.options\")\n+    @TestServlet(servlet = OptionsTestServlet.class, contextRoot = CONTEXT_ROOT)\n+    public static LibertyServer server;\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+        WebArchive app = ShrinkHelper.buildDefaultApp(CONTEXT_ROOT, \"com.ibm.ws.jaxrs.fat.options\");\n+        app.addAsLibraries(new File(HTTPCLIENT).listFiles());\n+        ShrinkHelper.exportDropinAppToServer(server, app);\n+        server.addInstalledAppForValidation(CONTEXT_ROOT);\n+\n+\n+        // Make sure we don't fail because we try to start an\n+        // already started server\n+        try {\n+            server.startServer(true);\n+        } catch (Exception e) {\n+            System.out.println(e.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3502ce8951a6ba467c0b670573b0d89abc6ac87f"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c77cfbcf409b17a8c08ae033b14e37e32c2c38d9", "author": {"user": {"login": "jkoehler22", "name": "John Koehler"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/c77cfbcf409b17a8c08ae033b14e37e32c2c38d9", "committedDate": "2020-06-23T18:35:50Z", "message": "Issue #9579: Fix options method to return the correct allowed headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ccce9ad4e1a79e382c3aefe60c33cdeb36dd464", "author": {"user": {"login": "jkoehler22", "name": "John Koehler"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/6ccce9ad4e1a79e382c3aefe60c33cdeb36dd464", "committedDate": "2020-06-23T18:35:50Z", "message": "Issue #9579: Fix options methods that use PathParam to return the correct allowed headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1eeed92d66ff4ee9857b5c62c4371e3d320c0ab9", "author": {"user": {"login": "jkoehler22", "name": "John Koehler"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/1eeed92d66ff4ee9857b5c62c4371e3d320c0ab9", "committedDate": "2020-06-23T18:35:51Z", "message": "Issue #9579: Fix options method to return the correct allowed headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8152d950420a36cf41468271bd6bdf300ef6e78c", "author": {"user": {"login": "jkoehler22", "name": "John Koehler"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/8152d950420a36cf41468271bd6bdf300ef6e78c", "committedDate": "2020-06-23T18:35:51Z", "message": "Issue #9579: Fix options method to return the correct allowed headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d03784fbeb19bee794533601b109f5e8de21f373", "author": {"user": {"login": "jkoehler22", "name": "John Koehler"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/d03784fbeb19bee794533601b109f5e8de21f373", "committedDate": "2020-06-23T18:35:51Z", "message": "Issue #9579: Fix options method to return the correct allowed headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e45bf790611dc85afa6e19af0ba852ba413f4cee", "author": {"user": {"login": "jkoehler22", "name": "John Koehler"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/e45bf790611dc85afa6e19af0ba852ba413f4cee", "committedDate": "2020-06-23T18:35:51Z", "message": "Issue #9579: Fix options method to return the correct allowed headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28aaede3519dff04d9a3ad7577d19fd111bf8821", "author": {"user": {"login": "jkoehler22", "name": "John Koehler"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/28aaede3519dff04d9a3ad7577d19fd111bf8821", "committedDate": "2020-06-23T18:35:52Z", "message": "Issue #9579: Fix options method to return the correct allowed headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49ff81fdbd3a77213532b078196f77bdfd54162a", "author": {"user": {"login": "jkoehler22", "name": "John Koehler"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/49ff81fdbd3a77213532b078196f77bdfd54162a", "committedDate": "2020-06-23T18:35:52Z", "message": "Issue #9579: Fix options method to return the correct allowed headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45cfd0190988c0c472bf11669af865a9a695bc66", "author": {"user": {"login": "jkoehler22", "name": "John Koehler"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/45cfd0190988c0c472bf11669af865a9a695bc66", "committedDate": "2020-06-23T18:35:52Z", "message": "Issue #9579: Fix options method to return the correct allowed headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6febb2086b60ab0e2c00d531a27b433a37ea400e", "author": {"user": {"login": "jkoehler22", "name": "John Koehler"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/6febb2086b60ab0e2c00d531a27b433a37ea400e", "committedDate": "2020-06-23T18:35:53Z", "message": "Issue #9579: Fix options method to return the correct allowed headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76a984c6b253041debf6793e75e1473862beaa62", "author": {"user": {"login": "jkoehler22", "name": "John Koehler"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/76a984c6b253041debf6793e75e1473862beaa62", "committedDate": "2020-06-23T18:35:53Z", "message": "Issue #9579: Fix options method to return the correct allowed headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7890eca482c1fb9aebf7314b5694da625f3d6dd", "author": {"user": {"login": "jkoehler22", "name": "John Koehler"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/f7890eca482c1fb9aebf7314b5694da625f3d6dd", "committedDate": "2020-06-23T18:35:53Z", "message": "Issue #9579: Fix options method to return the correct allowed headers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3502ce8951a6ba467c0b670573b0d89abc6ac87f", "author": {"user": {"login": "jkoehler22", "name": "John Koehler"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/3502ce8951a6ba467c0b670573b0d89abc6ac87f", "committedDate": "2020-06-16T20:17:46Z", "message": "Issue #9579: Fix options method to return the correct allowed headers"}, "afterCommit": {"oid": "f7890eca482c1fb9aebf7314b5694da625f3d6dd", "author": {"user": {"login": "jkoehler22", "name": "John Koehler"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/f7890eca482c1fb9aebf7314b5694da625f3d6dd", "committedDate": "2020-06-23T18:35:53Z", "message": "Issue #9579: Fix options method to return the correct allowed headers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MDU3NTc3", "url": "https://github.com/OpenLiberty/open-liberty/pull/12104#pullrequestreview-436057577", "createdAt": "2020-06-23T18:42:28Z", "commit": {"oid": "f7890eca482c1fb9aebf7314b5694da625f3d6dd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2566, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}