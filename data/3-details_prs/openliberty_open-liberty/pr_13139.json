{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MjY5NjQ5", "number": 13139, "title": "13120: Grpc Server Interceptor tests", "bodyText": "", "createdAt": "2020-07-22T17:58:05Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/13139", "merged": true, "mergeCommit": {"oid": "cd80cc00486542a248bd565df41997e528620f3a"}, "closed": true, "closedAt": "2020-07-24T16:00:23Z", "author": {"login": "loriadi"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3vMP5AFqTQ1NDExMDUzNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3vcMZgFqTQ1NDEyOTYzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MTEwNTM0", "url": "https://github.com/OpenLiberty/open-liberty/pull/13139#pullrequestreview-454110534", "createdAt": "2020-07-23T13:06:01Z", "commit": {"oid": "3fb0f633a16d8b3eea185c038995284e0f6711bf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzowNjowMlrOG2Jl3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzoxMDo0MVrOG2JyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQzMzQzNg==", "bodyText": "STARTUP_TIMEOUT should be corrected to SHORT_TIMEOUT", "url": "https://github.com/OpenLiberty/open-liberty/pull/13139#discussion_r459433436", "createdAt": "2020-07-23T13:06:02Z", "author": {"login": "wtlucy"}, "path": "dev/com.ibm.ws.grpc_fat/fat/src/com/ibm/ws/fat/grpc/ServiceInterceptorTests.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.fat.grpc;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.logging.Logger;\n+\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+\n+import componenttest.annotation.ExpectedFFDC;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.FATServletClient;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.examples.helloworld.GreeterGrpc;\n+import io.grpc.examples.helloworld.GreeterGrpc.GreeterBlockingStub;\n+import io.grpc.examples.helloworld.HelloReply;\n+import io.grpc.examples.helloworld.HelloRequest;\n+\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class ServiceInterceptorTests extends FATServletClient {\n+\n+    protected static final Class<?> c = ServiceInterceptorTests.class;\n+\n+    private static final Logger LOG = Logger.getLogger(c.getName());\n+\n+    public static final int STARTUP_TIMEOUT = 120 * 1000; // 120 seconds\n+    public static final int SHORT_TIMEOUT = 500; // .5 seconds\n+\n+    private static final String DEFAULT_CONFIG_FILE = \"grpc.server.xml\";\n+    private static final String GRPC_ELEMENT = \"grpc.server.grpc.element.xml\";\n+    private static final String GRPC_INTERCEPTOR = \"grpc.server.grpc.interceptor.xml\";\n+    private static final String GRPC_MULTIPLE_INTERCEPTOR = \"grpc.server.multiple.interceptor.xml\";\n+    private static final String GRPC_INVALID_INTERCEPTOR = \"grpc.server.invalid.interceptor.xml\";\n+\n+    private static String serverConfigurationFile = DEFAULT_CONFIG_FILE;\n+\n+    static ManagedChannel worldChannel;\n+    private static GreeterBlockingStub worldServiceBlockingStub;\n+\n+    private static String hws = new String(\"HelloWorldService.war\");\n+\n+    private static final Set<String> appName = Collections.singleton(\"HelloWorldService\");\n+\n+    @Rule\n+    public TestName name = new TestName();\n+\n+    @Server(\"GrpcServerOnly\")\n+    public static LibertyServer grpcServer;\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+        grpcServer.startServer(ServiceInterceptorTests.class.getSimpleName() + \".log\");\n+\n+        LOG.info(\"ServiceInterceptorTests : setUp() : add helloWorldService  app\");\n+        // add all classes from com.ibm.ws.grpc.fat.helloworld.service and io.grpc.examples.helloworld\n+        // to a new app HelloWorldService.war\n+        ShrinkHelper.defaultDropinApp(grpcServer, hws,\n+                                      \"com.ibm.ws.grpc.fat.helloworld.service\",\n+                                      \"io.grpc.examples.helloworld\");\n+\n+        worldChannel = ManagedChannelBuilder.forAddress(grpcServer.getHostname(), grpcServer.getHttpDefaultPort()).usePlaintext().build();\n+        worldServiceBlockingStub = GreeterGrpc.newBlockingStub(worldChannel);\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n+        worldChannel.shutdownNow();\n+        grpcServer.stopServer(\"CWWKT0202W\");\n+    }\n+\n+    /**\n+     * This method is used to set the server.xml\n+     */\n+    private static void setServerConfiguration(LibertyServer server,\n+                                               String serverXML) throws Exception {\n+        System.out.println(\"Entered set server config with xml \" + serverXML);\n+        if (!serverConfigurationFile.equals(serverXML)) {\n+            // Update server.xml\n+            LOG.info(\"ServiceInterceptorTests : setServerConfiguration setServerConfigurationFile to : \" + serverXML);\n+            server.setMarkToEndOfLog();\n+            server.setServerConfigurationFile(serverXML);\n+            server.waitForStringInLog(\"CWWKG0017I\");\n+            serverConfigurationFile = serverXML;\n+        }\n+    }\n+\n+    /**\n+     * Test a single grpc service interceptor\n+     *\n+     * This test adds a grpc element without a grpc interceptor and then updates\n+     * to a grpc element with a grpc interceptor. Make sure the interceptor does not run\n+     * when not configured, and make sure it runs when configured.\n+     *\n+     * <grpc target=\"helloworld.Greeter\" serverInterceptors=\"com.ibm.ws.grpc.fat.helloworld.service.HelloWorldServerInterceptor\"/>\n+     *\n+     * The simple interceptor prints a message to the log.\n+     *\n+     * @throws Exception\n+     *\n+     **/\n+    @Test\n+    public void testSingleServerInterceptor() throws Exception {\n+\n+        // Update to a config file with a <grpc> element with no interceptor\n+        LOG.info(\"ServiceInterceptorTests : testSingleServerInterceptor() : update the server.xml file to one with a </grpc> element with no interceptor\");\n+        setServerConfiguration(grpcServer, GRPC_ELEMENT);\n+        grpcServer.waitForConfigUpdateInLogUsingMark(appName);\n+\n+        // Send a request to the HelloWorld service and check for a response\n+        HelloRequest person = HelloRequest.newBuilder().setName(\"Leigh\").build();\n+        HelloReply greeting = worldServiceBlockingStub.sayHello(person);\n+\n+        //Make sure the reply has Leigh in it\n+        assertTrue(greeting.getMessage().contains(\"Leigh\"));\n+        //Make sure the Interceptor was not called and did not log a message\n+        String interceptorHasRun = grpcServer.verifyStringNotInLogUsingMark(\"com.ibm.ws.grpc.fat.helloworld.service.HelloWorldServerInterceptor has been invoked!\",\n+                                                                            SHORT_TIMEOUT);\n+        if (interceptorHasRun != null) {\n+            Assert.fail(c + \": server.xml with <grpc> element no interceptor ran when it should not have in \" + STARTUP_TIMEOUT + \"ms\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb0f633a16d8b3eea185c038995284e0f6711bf"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQzNjU5NA==", "bodyText": "STARTUP_TIMEOUT should be corrected to SHORT_TIMEOUT", "url": "https://github.com/OpenLiberty/open-liberty/pull/13139#discussion_r459436594", "createdAt": "2020-07-23T13:10:41Z", "author": {"login": "wtlucy"}, "path": "dev/com.ibm.ws.grpc_fat/fat/src/com/ibm/ws/fat/grpc/ServiceConfigTests.java", "diffHunk": "@@ -175,8 +176,7 @@ public void testUpdateGrpcParam() throws Exception {\n         assertTrue(greeting.getMessage().contains(\"Kevin\"));\n         //Make sure the Interceptor was not called and did not logged a message\n         String interceptorHasRun = grpcServer.verifyStringNotInLogUsingMark(\"com.ibm.ws.grpc.fat.helloworld.service.HelloWorldServerInterceptor has been invoked!\",\n-                                                                            STARTUP_TIMEOUT);\n-\n+                                                                            SHORT_TIMEOUT);\n         if (interceptorHasRun != null) {\n             Assert.fail(c + \": server.xml with <grpc> element plus interceptor ran when it should not have in \" + STARTUP_TIMEOUT + \"ms\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb0f633a16d8b3eea185c038995284e0f6711bf"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed46a1eadb7797a2165bba099344ec46c39ff17d", "author": {"user": {"login": "loriadi", "name": "Lori Adington"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/ed46a1eadb7797a2165bba099344ec46c39ff17d", "committedDate": "2020-07-23T13:25:52Z", "message": "13120: Grpc Interceptor tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "967c77f6f7ed7c30e13c2f05b2b067431bc0142c", "author": {"user": {"login": "loriadi", "name": "Lori Adington"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/967c77f6f7ed7c30e13c2f05b2b067431bc0142c", "committedDate": "2020-07-23T13:25:52Z", "message": "13120: Update timers in grpc tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c561c867ce6a5c8340c923c368366affe3989903", "author": {"user": {"login": "loriadi", "name": "Lori Adington"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/c561c867ce6a5c8340c923c368366affe3989903", "committedDate": "2020-07-23T13:25:52Z", "message": "13120: Update message timeouts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3fb0f633a16d8b3eea185c038995284e0f6711bf", "author": {"user": {"login": "loriadi", "name": "Lori Adington"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/3fb0f633a16d8b3eea185c038995284e0f6711bf", "committedDate": "2020-07-22T21:58:09Z", "message": "13120: Update timers in grpc tests"}, "afterCommit": {"oid": "c561c867ce6a5c8340c923c368366affe3989903", "author": {"user": {"login": "loriadi", "name": "Lori Adington"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/c561c867ce6a5c8340c923c368366affe3989903", "committedDate": "2020-07-23T13:25:52Z", "message": "13120: Update message timeouts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MTI5NjM4", "url": "https://github.com/OpenLiberty/open-liberty/pull/13139#pullrequestreview-454129638", "createdAt": "2020-07-23T13:28:16Z", "commit": {"oid": "c561c867ce6a5c8340c923c368366affe3989903"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2020, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}