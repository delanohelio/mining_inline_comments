{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3MTMzODYw", "number": 12467, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOTowMDoyNFrOECsexg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wOVQwMjoxNDozNFrOGfr0FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjYxMzgyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.transport.http/resources/com/ibm/ws/http/channel/internal/resources/httpchannelmessages.nlsprops", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOTowMDoyNFrOGfT4zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOTowMDoyNFrOGfT4zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NDg3OQ==", "bodyText": "Update\n\nAn empty header name was found while parsing the '{0}' configuration. This value will be ignored.\n\nto\n\nAn empty header name was found when the '{0}' configuration was parsed. This value is ignored.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r435484879", "createdAt": "2020-06-04T19:00:24Z", "author": {"login": "Charlotte-Holt"}, "path": "dev/com.ibm.ws.transport.http/resources/com/ibm/ws/http/channel/internal/resources/httpchannelmessages.nlsprops", "diffHunk": "@@ -176,4 +176,16 @@ cookies.samesite.unsupportedWildcard.useraction=Ensure that only a single wildca\n \n cookies.samesite.knownDuplicateName=CWWKT0037W: A cookie name or pattern [{0}], which is marked as a duplicate, was found in the SameSite [{1}] configuration. The [{0}] cookie name or pattern is ignored. Any cookie name or pattern that is defined by the 'lax', 'none', and 'strict' configurations can be defined in only one of the three configurations. \n cookies.samesite.knownDuplicateName.explanation=The specified value was already found by the configuration and mapped to a SameSite value.\n-cookies.samesite.knownDuplicateName.useraction=Ensure that cookie names and patterns are unique across the 'lax', 'none', and 'strict' configuration lists.\n\\ No newline at end of file\n+cookies.samesite.knownDuplicateName.useraction=Ensure that cookie names and patterns are unique across the 'lax', 'none', and 'strict' configuration lists.\n+\n+headers.emptyName=CWWKT0038W: An empty header name was found while parsing the '{0}' configuration. This value will be ignored.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4934ec305261e653dc29ad81f72c14c74616c44"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjYyMDk3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.transport.http/resources/com/ibm/ws/http/channel/internal/resources/httpchannelmessages.nlsprops", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOTowMjo0NlrOGfT9iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOTowMjo0NlrOGfT9iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NjA5MQ==", "bodyText": "Update\n\nA duplicate header name was found in the header [{0}] using the 'set' configuration. All configurations for the [{0}] header will be ignored. Any header defined by the 'set' configuration must contain unique header names.\n\nto\n\nA duplicate header name was found in the [{0}] header using the 'set' configuration. All configurations for the [{0}] header are ignored. Any header that is defined by the 'set' configuration must contain unique header names.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r435486091", "createdAt": "2020-06-04T19:02:46Z", "author": {"login": "Charlotte-Holt"}, "path": "dev/com.ibm.ws.transport.http/resources/com/ibm/ws/http/channel/internal/resources/httpchannelmessages.nlsprops", "diffHunk": "@@ -176,4 +176,16 @@ cookies.samesite.unsupportedWildcard.useraction=Ensure that only a single wildca\n \n cookies.samesite.knownDuplicateName=CWWKT0037W: A cookie name or pattern [{0}], which is marked as a duplicate, was found in the SameSite [{1}] configuration. The [{0}] cookie name or pattern is ignored. Any cookie name or pattern that is defined by the 'lax', 'none', and 'strict' configurations can be defined in only one of the three configurations. \n cookies.samesite.knownDuplicateName.explanation=The specified value was already found by the configuration and mapped to a SameSite value.\n-cookies.samesite.knownDuplicateName.useraction=Ensure that cookie names and patterns are unique across the 'lax', 'none', and 'strict' configuration lists.\n\\ No newline at end of file\n+cookies.samesite.knownDuplicateName.useraction=Ensure that cookie names and patterns are unique across the 'lax', 'none', and 'strict' configuration lists.\n+\n+headers.emptyName=CWWKT0038W: An empty header name was found while parsing the '{0}' configuration. This value will be ignored.\n+headers.emptyName.explanation=The specified header's name is an empty string. A header name must not be empty. \n+headers.emptyName.useraction=Ensure that no header name is empty.  \n+\n+headers.duplicateHeaderName=CWWKT0039W: A duplicate header name was found in the header [{0}] using the 'set' configuration. All configurations for the [{0}] header will be ignored. Any header defined by the 'set' configuration must contain unique header names.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4934ec305261e653dc29ad81f72c14c74616c44"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjYyNTE0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.transport.http/resources/com/ibm/ws/http/channel/internal/resources/httpchannelmessages.nlsprops", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOTowNDowMlrOGfUAHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOTowNDowMlrOGfUAHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4Njc0OQ==", "bodyText": "Update\n\nThe specified header name was already found by the 'set' and/or 'add' configurations.\n\nto\n\nThe specified header name was already found by the 'set' or 'add' configurations.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r435486749", "createdAt": "2020-06-04T19:04:02Z", "author": {"login": "Charlotte-Holt"}, "path": "dev/com.ibm.ws.transport.http/resources/com/ibm/ws/http/channel/internal/resources/httpchannelmessages.nlsprops", "diffHunk": "@@ -176,4 +176,16 @@ cookies.samesite.unsupportedWildcard.useraction=Ensure that only a single wildca\n \n cookies.samesite.knownDuplicateName=CWWKT0037W: A cookie name or pattern [{0}], which is marked as a duplicate, was found in the SameSite [{1}] configuration. The [{0}] cookie name or pattern is ignored. Any cookie name or pattern that is defined by the 'lax', 'none', and 'strict' configurations can be defined in only one of the three configurations. \n cookies.samesite.knownDuplicateName.explanation=The specified value was already found by the configuration and mapped to a SameSite value.\n-cookies.samesite.knownDuplicateName.useraction=Ensure that cookie names and patterns are unique across the 'lax', 'none', and 'strict' configuration lists.\n\\ No newline at end of file\n+cookies.samesite.knownDuplicateName.useraction=Ensure that cookie names and patterns are unique across the 'lax', 'none', and 'strict' configuration lists.\n+\n+headers.emptyName=CWWKT0038W: An empty header name was found while parsing the '{0}' configuration. This value will be ignored.\n+headers.emptyName.explanation=The specified header's name is an empty string. A header name must not be empty. \n+headers.emptyName.useraction=Ensure that no header name is empty.  \n+\n+headers.duplicateHeaderName=CWWKT0039W: A duplicate header name was found in the header [{0}] using the 'set' configuration. All configurations for the [{0}] header will be ignored. Any header defined by the 'set' configuration must contain unique header names.\n+headers.duplicateHeaderName.explanation=The specified header name was already found by the 'set' and/or 'add' configurations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4934ec305261e653dc29ad81f72c14c74616c44"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjYzMDQ1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.transport.http/resources/com/ibm/ws/http/channel/internal/resources/httpchannelmessages.nlsprops", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOTowNTo0MFrOGfUDZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOTowNTo0MFrOGfUDZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NzU4OA==", "bodyText": "Update\n\nEnsure that header names defined on 'set' configuration are unique across the 'add' and 'set' configurations.\n\nto\n\nEnsure that header names that are defined in the 'set' configuration are unique across the 'add' and 'set' configurations.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r435487588", "createdAt": "2020-06-04T19:05:40Z", "author": {"login": "Charlotte-Holt"}, "path": "dev/com.ibm.ws.transport.http/resources/com/ibm/ws/http/channel/internal/resources/httpchannelmessages.nlsprops", "diffHunk": "@@ -176,4 +176,16 @@ cookies.samesite.unsupportedWildcard.useraction=Ensure that only a single wildca\n \n cookies.samesite.knownDuplicateName=CWWKT0037W: A cookie name or pattern [{0}], which is marked as a duplicate, was found in the SameSite [{1}] configuration. The [{0}] cookie name or pattern is ignored. Any cookie name or pattern that is defined by the 'lax', 'none', and 'strict' configurations can be defined in only one of the three configurations. \n cookies.samesite.knownDuplicateName.explanation=The specified value was already found by the configuration and mapped to a SameSite value.\n-cookies.samesite.knownDuplicateName.useraction=Ensure that cookie names and patterns are unique across the 'lax', 'none', and 'strict' configuration lists.\n\\ No newline at end of file\n+cookies.samesite.knownDuplicateName.useraction=Ensure that cookie names and patterns are unique across the 'lax', 'none', and 'strict' configuration lists.\n+\n+headers.emptyName=CWWKT0038W: An empty header name was found while parsing the '{0}' configuration. This value will be ignored.\n+headers.emptyName.explanation=The specified header's name is an empty string. A header name must not be empty. \n+headers.emptyName.useraction=Ensure that no header name is empty.  \n+\n+headers.duplicateHeaderName=CWWKT0039W: A duplicate header name was found in the header [{0}] using the 'set' configuration. All configurations for the [{0}] header will be ignored. Any header defined by the 'set' configuration must contain unique header names.\n+headers.duplicateHeaderName.explanation=The specified header name was already found by the 'set' and/or 'add' configurations.\n+headers.duplicateHeaderName.useraction=Ensure that header names defined on 'set' configuration are unique across the 'add' and 'set' configurations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4934ec305261e653dc29ad81f72c14c74616c44"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjYzMzExOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.transport.http/resources/com/ibm/ws/http/channel/internal/resources/httpchannelmessages.nlsprops", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOTowNjoyOVrOGfUFJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOTowNjoyOVrOGfUFJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4ODAzNw==", "bodyText": "Update\n\nThe header [{0}], which is marked as duplicate header name, was found in the 'set' configuration. The [{0}] header is ignored. Any header defined by the 'set' configuration must contain unique header names.\n\nto\n\nThe [{0}] header, which is marked as a duplicate header name, was found in the 'set' configuration. The [{0}] header is ignored. Any header that is defined by the 'set' configuration must contain unique header names.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r435488037", "createdAt": "2020-06-04T19:06:29Z", "author": {"login": "Charlotte-Holt"}, "path": "dev/com.ibm.ws.transport.http/resources/com/ibm/ws/http/channel/internal/resources/httpchannelmessages.nlsprops", "diffHunk": "@@ -176,4 +176,16 @@ cookies.samesite.unsupportedWildcard.useraction=Ensure that only a single wildca\n \n cookies.samesite.knownDuplicateName=CWWKT0037W: A cookie name or pattern [{0}], which is marked as a duplicate, was found in the SameSite [{1}] configuration. The [{0}] cookie name or pattern is ignored. Any cookie name or pattern that is defined by the 'lax', 'none', and 'strict' configurations can be defined in only one of the three configurations. \n cookies.samesite.knownDuplicateName.explanation=The specified value was already found by the configuration and mapped to a SameSite value.\n-cookies.samesite.knownDuplicateName.useraction=Ensure that cookie names and patterns are unique across the 'lax', 'none', and 'strict' configuration lists.\n\\ No newline at end of file\n+cookies.samesite.knownDuplicateName.useraction=Ensure that cookie names and patterns are unique across the 'lax', 'none', and 'strict' configuration lists.\n+\n+headers.emptyName=CWWKT0038W: An empty header name was found while parsing the '{0}' configuration. This value will be ignored.\n+headers.emptyName.explanation=The specified header's name is an empty string. A header name must not be empty. \n+headers.emptyName.useraction=Ensure that no header name is empty.  \n+\n+headers.duplicateHeaderName=CWWKT0039W: A duplicate header name was found in the header [{0}] using the 'set' configuration. All configurations for the [{0}] header will be ignored. Any header defined by the 'set' configuration must contain unique header names.\n+headers.duplicateHeaderName.explanation=The specified header name was already found by the 'set' and/or 'add' configurations.\n+headers.duplicateHeaderName.useraction=Ensure that header names defined on 'set' configuration are unique across the 'add' and 'set' configurations.\n+\n+headers.knownDuplicateHeader=CWWKT0040W: The header [{0}], which is marked as duplicate header name, was found in the 'set' configuration. The [{0}] header is ignored. Any header defined by the 'set' configuration must contain unique header names.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4934ec305261e653dc29ad81f72c14c74616c44"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjYzNjM3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.transport.http/resources/com/ibm/ws/http/channel/internal/resources/httpchannelmessages.nlsprops", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOTowNzoyMFrOGfUHJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOTowNzoyMFrOGfUHJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4ODU0OA==", "bodyText": "Update\n\nThe specified header name was already found by the 'set' and/or 'add' configurations.\n\nto\n\nThe specified header name was already found by the 'set' or 'add' configurations.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r435488548", "createdAt": "2020-06-04T19:07:20Z", "author": {"login": "Charlotte-Holt"}, "path": "dev/com.ibm.ws.transport.http/resources/com/ibm/ws/http/channel/internal/resources/httpchannelmessages.nlsprops", "diffHunk": "@@ -176,4 +176,16 @@ cookies.samesite.unsupportedWildcard.useraction=Ensure that only a single wildca\n \n cookies.samesite.knownDuplicateName=CWWKT0037W: A cookie name or pattern [{0}], which is marked as a duplicate, was found in the SameSite [{1}] configuration. The [{0}] cookie name or pattern is ignored. Any cookie name or pattern that is defined by the 'lax', 'none', and 'strict' configurations can be defined in only one of the three configurations. \n cookies.samesite.knownDuplicateName.explanation=The specified value was already found by the configuration and mapped to a SameSite value.\n-cookies.samesite.knownDuplicateName.useraction=Ensure that cookie names and patterns are unique across the 'lax', 'none', and 'strict' configuration lists.\n\\ No newline at end of file\n+cookies.samesite.knownDuplicateName.useraction=Ensure that cookie names and patterns are unique across the 'lax', 'none', and 'strict' configuration lists.\n+\n+headers.emptyName=CWWKT0038W: An empty header name was found while parsing the '{0}' configuration. This value will be ignored.\n+headers.emptyName.explanation=The specified header's name is an empty string. A header name must not be empty. \n+headers.emptyName.useraction=Ensure that no header name is empty.  \n+\n+headers.duplicateHeaderName=CWWKT0039W: A duplicate header name was found in the header [{0}] using the 'set' configuration. All configurations for the [{0}] header will be ignored. Any header defined by the 'set' configuration must contain unique header names.\n+headers.duplicateHeaderName.explanation=The specified header name was already found by the 'set' and/or 'add' configurations.\n+headers.duplicateHeaderName.useraction=Ensure that header names defined on 'set' configuration are unique across the 'add' and 'set' configurations.\n+\n+headers.knownDuplicateHeader=CWWKT0040W: The header [{0}], which is marked as duplicate header name, was found in the 'set' configuration. The [{0}] header is ignored. Any header defined by the 'set' configuration must contain unique header names.\n+headers.knownDuplicateHeader.explanation=The specified header name was already found by the 'set' and/or 'add' configurations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4934ec305261e653dc29ad81f72c14c74616c44"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjYzODIxOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.transport.http/resources/com/ibm/ws/http/channel/internal/resources/httpchannelmessages.nlsprops", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOTowNzo1OFrOGfUIYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOTowNzo1OFrOGfUIYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4ODg2Nw==", "bodyText": "Update\n\nEnsure that header names defined on 'set' configuration are unique across the 'add' and 'set' configurations.\n\nto\n\nEnsure that header names that are defined in the 'set' configuration are unique across the 'add' and 'set' configurations.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r435488867", "createdAt": "2020-06-04T19:07:58Z", "author": {"login": "Charlotte-Holt"}, "path": "dev/com.ibm.ws.transport.http/resources/com/ibm/ws/http/channel/internal/resources/httpchannelmessages.nlsprops", "diffHunk": "@@ -176,4 +176,16 @@ cookies.samesite.unsupportedWildcard.useraction=Ensure that only a single wildca\n \n cookies.samesite.knownDuplicateName=CWWKT0037W: A cookie name or pattern [{0}], which is marked as a duplicate, was found in the SameSite [{1}] configuration. The [{0}] cookie name or pattern is ignored. Any cookie name or pattern that is defined by the 'lax', 'none', and 'strict' configurations can be defined in only one of the three configurations. \n cookies.samesite.knownDuplicateName.explanation=The specified value was already found by the configuration and mapped to a SameSite value.\n-cookies.samesite.knownDuplicateName.useraction=Ensure that cookie names and patterns are unique across the 'lax', 'none', and 'strict' configuration lists.\n\\ No newline at end of file\n+cookies.samesite.knownDuplicateName.useraction=Ensure that cookie names and patterns are unique across the 'lax', 'none', and 'strict' configuration lists.\n+\n+headers.emptyName=CWWKT0038W: An empty header name was found while parsing the '{0}' configuration. This value will be ignored.\n+headers.emptyName.explanation=The specified header's name is an empty string. A header name must not be empty. \n+headers.emptyName.useraction=Ensure that no header name is empty.  \n+\n+headers.duplicateHeaderName=CWWKT0039W: A duplicate header name was found in the header [{0}] using the 'set' configuration. All configurations for the [{0}] header will be ignored. Any header defined by the 'set' configuration must contain unique header names.\n+headers.duplicateHeaderName.explanation=The specified header name was already found by the 'set' and/or 'add' configurations.\n+headers.duplicateHeaderName.useraction=Ensure that header names defined on 'set' configuration are unique across the 'add' and 'set' configurations.\n+\n+headers.knownDuplicateHeader=CWWKT0040W: The header [{0}], which is marked as duplicate header name, was found in the 'set' configuration. The [{0}] header is ignored. Any header defined by the 'set' configuration must contain unique header names.\n+headers.knownDuplicateHeader.explanation=The specified header name was already found by the 'set' and/or 'add' configurations.\n+headers.knownDuplicateHeader.useraction=Ensure that header names defined on 'set' configuration are unique across the 'add' and 'set' configurations.               ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4934ec305261e653dc29ad81f72c14c74616c44"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDQ1MDc3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.transport.http/resources/OSGI-INF/l10n/metatype.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoxOTowMVrOGgdk6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoxOTowMVrOGgdk6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5MjIwMw==", "bodyText": "Update\n\nHeaders to be added on each responses\n\nto\n\nHeaders to be added on each response", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r436692203", "createdAt": "2020-06-08T13:19:01Z", "author": {"login": "Charlotte-Holt"}, "path": "dev/com.ibm.ws.transport.http/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -232,4 +239,10 @@ http.samesite.none=List of samesite none cookies\n http.samesite.none.desc=List of cookie names or patterns for which the SameSite attribute is set to a value of None, if not already defined. A single wildcard (*) character is supported as a stand-alone value, or following cookie name prefixes. Any cookie name or pattern that is defined by this list must be unique and not present in the 'lax' nor 'strict' configurations. Each cookie that is modified to contain a SameSite value of None as a result of this configuration is also set to Secure.\n \n http.samesite.strict=List of samesite strict cookies\n-http.samesite.strict.desc=List of cookie names or patterns for which the SameSite attribute is set to a value of Strict, if not already defined. A single wildcard (*) character is supported as a stand-alone value, or following cookie name prefixes. Any cookie name or pattern that is defined by this list must be unique and not present in the 'lax' nor 'none' configurations.\n\\ No newline at end of file\n+http.samesite.strict.desc=List of cookie names or patterns for which the SameSite attribute is set to a value of Strict, if not already defined. A single wildcard (*) character is supported as a stand-alone value, or following cookie name prefixes. Any cookie name or pattern that is defined by this list must be unique and not present in the 'lax' nor 'none' configurations.\n+\n+http.headers.add=Headers to be added on each responses", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbcb0dcd21e0de24e39d63066a40630322fd5185"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDUxMzQ2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.transport.http/resources/OSGI-INF/l10n/metatype.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzozMDozMFrOGgeL_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzozMDozMFrOGgeL_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwMjIwNg==", "bodyText": "Update\n\nSpecifies the header names and values that will be added to each HTTP response. Header values are optionally included by using a colon (:) delimiter. Any header name defined using this attribute must not be empty.\n\nto\n\nSpecifies the header names and values that are added to each HTTP response. Header values are optionally included by using a colon (:) delimiter. Any header name that is defined by using this attribute must not be empty.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r436702206", "createdAt": "2020-06-08T13:30:30Z", "author": {"login": "Charlotte-Holt"}, "path": "dev/com.ibm.ws.transport.http/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -232,4 +239,10 @@ http.samesite.none=List of samesite none cookies\n http.samesite.none.desc=List of cookie names or patterns for which the SameSite attribute is set to a value of None, if not already defined. A single wildcard (*) character is supported as a stand-alone value, or following cookie name prefixes. Any cookie name or pattern that is defined by this list must be unique and not present in the 'lax' nor 'strict' configurations. Each cookie that is modified to contain a SameSite value of None as a result of this configuration is also set to Secure.\n \n http.samesite.strict=List of samesite strict cookies\n-http.samesite.strict.desc=List of cookie names or patterns for which the SameSite attribute is set to a value of Strict, if not already defined. A single wildcard (*) character is supported as a stand-alone value, or following cookie name prefixes. Any cookie name or pattern that is defined by this list must be unique and not present in the 'lax' nor 'none' configurations.\n\\ No newline at end of file\n+http.samesite.strict.desc=List of cookie names or patterns for which the SameSite attribute is set to a value of Strict, if not already defined. A single wildcard (*) character is supported as a stand-alone value, or following cookie name prefixes. Any cookie name or pattern that is defined by this list must be unique and not present in the 'lax' nor 'none' configurations.\n+\n+http.headers.add=Headers to be added on each responses\n+http.headers.add.desc=Specifies the header names and values that will be added to each HTTP response. Header values are optionally included by using a colon (:) delimiter. Any header name defined using this attribute must not be empty. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbcb0dcd21e0de24e39d63066a40630322fd5185"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDUyNjEyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.transport.http/resources/OSGI-INF/l10n/metatype.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzozMzozOFrOGgeUJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzozMzozOFrOGgeUJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwNDI5Mw==", "bodyText": "Update\n\nSpecifies the header names and values that will be set to each HTTP response. Header values are optionally included by using a colon (:) delimiter. Any header name defined using this attribute must not be empty, unique, and not present in the 'add' header configuration.\n\nto\n\nSpecifies the header names and values that are set to each HTTP response. Header values are optionally included by using a colon (:) delimiter. Any header name that is defined by using this attribute must not be empty or unique, and it must not present in the 'add' header configuration.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r436704293", "createdAt": "2020-06-08T13:33:38Z", "author": {"login": "Charlotte-Holt"}, "path": "dev/com.ibm.ws.transport.http/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -232,4 +239,10 @@ http.samesite.none=List of samesite none cookies\n http.samesite.none.desc=List of cookie names or patterns for which the SameSite attribute is set to a value of None, if not already defined. A single wildcard (*) character is supported as a stand-alone value, or following cookie name prefixes. Any cookie name or pattern that is defined by this list must be unique and not present in the 'lax' nor 'strict' configurations. Each cookie that is modified to contain a SameSite value of None as a result of this configuration is also set to Secure.\n \n http.samesite.strict=List of samesite strict cookies\n-http.samesite.strict.desc=List of cookie names or patterns for which the SameSite attribute is set to a value of Strict, if not already defined. A single wildcard (*) character is supported as a stand-alone value, or following cookie name prefixes. Any cookie name or pattern that is defined by this list must be unique and not present in the 'lax' nor 'none' configurations.\n\\ No newline at end of file\n+http.samesite.strict.desc=List of cookie names or patterns for which the SameSite attribute is set to a value of Strict, if not already defined. A single wildcard (*) character is supported as a stand-alone value, or following cookie name prefixes. Any cookie name or pattern that is defined by this list must be unique and not present in the 'lax' nor 'none' configurations.\n+\n+http.headers.add=Headers to be added on each responses\n+http.headers.add.desc=Specifies the header names and values that will be added to each HTTP response. Header values are optionally included by using a colon (:) delimiter. Any header name defined using this attribute must not be empty. \n+\n+http.headers.set=Headers to be set on each response\n+http.headers.set.desc=Specifies the header names and values that will be set to each HTTP response. Header values are optionally included by using a colon (:) delimiter. Any header name defined using this attribute must not be empty, unique, and not present in the 'add' header configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbcb0dcd21e0de24e39d63066a40630322fd5185"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTMyMzQyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.transport.http/resources/OSGI-INF/l10n/metatype.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDo1NDowM1rOGlJpFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDo1NDowM1rOGlJpFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYwODQ2OQ==", "bodyText": "Suggestion: Replace \"consider\" with another verb, maybe \"evaluate,\" \"assess,\" \"examine,\" or \"access.\"  Normally, \"consider\" is something that humans/animals do.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r441608469", "createdAt": "2020-06-17T14:54:03Z", "author": {"login": "helyarp"}, "path": "dev/com.ibm.ws.transport.http/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -101,6 +105,9 @@ http.compression.desc=An element that is configured within the httpEndpoint elem\n http.samesite=SameSite Options\n http.samesite.desc=An element that is configured within the httpEndpoint element so that the associated HTTP channel can consider SameSite configurations.\n \n+http.headers=Header Options\n+http.headers.desc=An element that is configured within the httpEndpoint element so that the associated HTTP channel can consider response header configurations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbcb0dcd21e0de24e39d63066a40630322fd5185"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODA3MTA5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.transport.http/resources/OSGI-INF/l10n/metatype.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjo1MTowNFrOHd8nHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjo1MTowNFrOHd8nHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE2MzgwNg==", "bodyText": "Change \"values will be\" to \"values are\"", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r501163806", "createdAt": "2020-10-07T16:51:04Z", "author": {"login": "helyarp"}, "path": "dev/com.ibm.ws.transport.http/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -232,4 +239,16 @@ http.samesite.none=List of samesite none cookies\n http.samesite.none.desc=List of cookie names or patterns for which the SameSite attribute is set to a value of None, if not already defined. A single wildcard (*) character is supported as a stand-alone value, or following cookie name prefixes. Any cookie name or pattern that is defined by this list must be unique and not present in the 'lax' nor 'strict' configurations. Each cookie that is modified to contain a SameSite value of None as a result of this configuration is also set to Secure.\n \n http.samesite.strict=List of samesite strict cookies\n-http.samesite.strict.desc=List of cookie names or patterns for which the SameSite attribute is set to a value of Strict, if not already defined. A single wildcard (*) character is supported as a stand-alone value, or following cookie name prefixes. Any cookie name or pattern that is defined by this list must be unique and not present in the 'lax' nor 'none' configurations.\n\\ No newline at end of file\n+http.samesite.strict.desc=List of cookie names or patterns for which the SameSite attribute is set to a value of Strict, if not already defined. A single wildcard (*) character is supported as a stand-alone value, or following cookie name prefixes. Any cookie name or pattern that is defined by this list must be unique and not present in the 'lax' nor 'none' configurations.\n+\n+http.headers.add=Headers to be added on each response\n+http.headers.add.desc=Specifies the header names and values that are added to each HTTP response. Header values are optionally included by using a colon (:) delimiter. Any header name that is defined by using this attribute must not be empty or present in the 'remove', 'set', or 'setIfMissing' header configurations. \n+\n+http.headers.set=Headers to be set on each response\n+http.headers.set.desc=Specifies the header names and values that are set to each HTTP response. Header values are optionally included by using a colon (:) delimiter. Any header name that is defined by using this attribute must not be empty, defined more than once, or present in the 'remove', 'add', or 'setIfEmpty'  header configurations. If the header is already present on the response, existing values will be overwritten in favor of this configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "133520c79396ac963cc21568fa42f4dba8f705fd"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODA4ODM5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.transport.http/resources/com/ibm/ws/http/channel/internal/resources/httpchannelmessages.nlsprops", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjo1NToxOVrOHd8xsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjo1NToxOVrOHd8xsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE2NjUxNA==", "bodyText": "Remove the 's because it is not needed and it can adversely affect translation. Use \"specified header name\" instead.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r501166514", "createdAt": "2020-10-07T16:55:19Z", "author": {"login": "helyarp"}, "path": "dev/com.ibm.ws.transport.http/resources/com/ibm/ws/http/channel/internal/resources/httpchannelmessages.nlsprops", "diffHunk": "@@ -166,14 +166,26 @@ decompression.tolerance.reached=CWWKT0034E: The HTTP channel attempted to decomp\n decompression.tolerance.reached.explanation=The maximum number of decompression cycles has reached, resulting in a decompression ratio larger than the configured limit. The decompression limit is defined by the decompressionRatioLimit httpOption attribute.\n decompression.tolerance.reached.useraction=When this exception happens on a valid request body, reconfigure the decompressionTolerance and decompressionRatioLimit httpOption attributes to achieve the appropriate decompression results.\n \n-cookies.samesite.duplicateName=CWWKT0035W: A duplicate cookie name or pattern [{0}] was found in the SameSite [{1}] configuration. The [{0}] cookie name or pattern is ignored for all configuration lists. Any cookie name or pattern that is defined by the \ufffd\ufffdlax\ufffd\ufffd, \ufffd\ufffdnone\ufffd\ufffd, and \ufffd\ufffdstrict\ufffd' configurations can be defined in only one of the three configurations.\n+cookies.samesite.duplicateName=CWWKT0035W: A duplicate cookie name or pattern [{0}] was found in the SameSite [{1}] configuration. The [{0}] cookie name or pattern is ignored for all configuration lists. Any cookie name or pattern that is defined by the \ufffd\ufffdlax\ufffd\ufffd, \ufffd\ufffdnone\ufffd\ufffd, and \ufffd\ufffdstrict\ufffd' configurations can be defined in only one of the three configurations.\n cookies.samesite.duplicateName.explanation=The specified value was already found by the configuration and mapped to a SameSite value.\n cookies.samesite.duplicateName.useraction=Ensure that cookie names and patterns are unique across the 'lax', 'none', and 'strict' configuration lists.\n \n cookies.samesite.unsupportedWildcard=CWWKT0036W: An unsupported use of the wildcard character was attempted by the value [{0}]. The SameSite configuration is not set for this value.\n cookies.samesite.unsupportedWildcard.explanation=The wildcard (*) character was used in an unsupported way. Support consists of a single wildcard (*) character that is used as a stand-alone value, or following any number of cookie name prefixes.\n cookies.samesite.unsupportedWildcard.useraction=Ensure that only a single wildcard (*) character is used per pattern in the 'lax', 'none', and 'strict' lists. Additionally, use of this character is supported only under the following two conditions: as a stand-alone value or following cookie name prefixes.\n \n-cookies.samesite.knownDuplicateName=CWWKT0037W: A cookie name or pattern [{0}], which is marked as a duplicate, was found in the SameSite [{1}] configuration. The [{0}] cookie name or pattern is ignored. Any cookie name or pattern that is defined by the \ufffd\ufffdlax\ufffd\ufffd, \ufffd\ufffdnone\ufffd\ufffd, and \ufffd\ufffdstrict\ufffd' configurations can be defined in only one of the three configurations.\ufffd\n+cookies.samesite.knownDuplicateName=CWWKT0037W: A cookie name or pattern [{0}], which is marked as a duplicate, was found in the SameSite [{1}] configuration. The [{0}] cookie name or pattern is ignored. Any cookie name or pattern that is defined by the \ufffd\ufffdlax\ufffd\ufffd, \ufffd\ufffdnone\ufffd\ufffd, and \ufffd\ufffdstrict\ufffd' configurations can be defined in only one of the three configurations.\ufffd\n cookies.samesite.knownDuplicateName.explanation=The specified value was already found by the configuration and mapped to a SameSite value.\n cookies.samesite.knownDuplicateName.useraction=Ensure that cookie names and patterns are unique across the 'lax', 'none', and 'strict' configuration lists.\n+\n+headers.emptyName=CWWKT0038W: An empty header name was found when the '{0}' configuration was parsed. This value is ignored.\n+headers.emptyName.explanation=The specified header's name is an empty string. A header name must not be empty. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "133520c79396ac963cc21568fa42f4dba8f705fd"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODA5NTc3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.transport.http/resources/com/ibm/ws/http/channel/internal/resources/httpchannelmessages.nlsprops", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjo1NzowNVrOHd82Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjo1NzowNVrOHd82Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE2NzY3MA==", "bodyText": "Change \"are no present\" to \"are not present\"", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r501167670", "createdAt": "2020-10-07T16:57:05Z", "author": {"login": "helyarp"}, "path": "dev/com.ibm.ws.transport.http/resources/com/ibm/ws/http/channel/internal/resources/httpchannelmessages.nlsprops", "diffHunk": "@@ -166,14 +166,26 @@ decompression.tolerance.reached=CWWKT0034E: The HTTP channel attempted to decomp\n decompression.tolerance.reached.explanation=The maximum number of decompression cycles has reached, resulting in a decompression ratio larger than the configured limit. The decompression limit is defined by the decompressionRatioLimit httpOption attribute.\n decompression.tolerance.reached.useraction=When this exception happens on a valid request body, reconfigure the decompressionTolerance and decompressionRatioLimit httpOption attributes to achieve the appropriate decompression results.\n \n-cookies.samesite.duplicateName=CWWKT0035W: A duplicate cookie name or pattern [{0}] was found in the SameSite [{1}] configuration. The [{0}] cookie name or pattern is ignored for all configuration lists. Any cookie name or pattern that is defined by the \ufffd\ufffdlax\ufffd\ufffd, \ufffd\ufffdnone\ufffd\ufffd, and \ufffd\ufffdstrict\ufffd' configurations can be defined in only one of the three configurations.\n+cookies.samesite.duplicateName=CWWKT0035W: A duplicate cookie name or pattern [{0}] was found in the SameSite [{1}] configuration. The [{0}] cookie name or pattern is ignored for all configuration lists. Any cookie name or pattern that is defined by the \ufffd\ufffdlax\ufffd\ufffd, \ufffd\ufffdnone\ufffd\ufffd, and \ufffd\ufffdstrict\ufffd' configurations can be defined in only one of the three configurations.\n cookies.samesite.duplicateName.explanation=The specified value was already found by the configuration and mapped to a SameSite value.\n cookies.samesite.duplicateName.useraction=Ensure that cookie names and patterns are unique across the 'lax', 'none', and 'strict' configuration lists.\n \n cookies.samesite.unsupportedWildcard=CWWKT0036W: An unsupported use of the wildcard character was attempted by the value [{0}]. The SameSite configuration is not set for this value.\n cookies.samesite.unsupportedWildcard.explanation=The wildcard (*) character was used in an unsupported way. Support consists of a single wildcard (*) character that is used as a stand-alone value, or following any number of cookie name prefixes.\n cookies.samesite.unsupportedWildcard.useraction=Ensure that only a single wildcard (*) character is used per pattern in the 'lax', 'none', and 'strict' lists. Additionally, use of this character is supported only under the following two conditions: as a stand-alone value or following cookie name prefixes.\n \n-cookies.samesite.knownDuplicateName=CWWKT0037W: A cookie name or pattern [{0}], which is marked as a duplicate, was found in the SameSite [{1}] configuration. The [{0}] cookie name or pattern is ignored. Any cookie name or pattern that is defined by the \ufffd\ufffdlax\ufffd\ufffd, \ufffd\ufffdnone\ufffd\ufffd, and \ufffd\ufffdstrict\ufffd' configurations can be defined in only one of the three configurations.\ufffd\n+cookies.samesite.knownDuplicateName=CWWKT0037W: A cookie name or pattern [{0}], which is marked as a duplicate, was found in the SameSite [{1}] configuration. The [{0}] cookie name or pattern is ignored. Any cookie name or pattern that is defined by the \ufffd\ufffdlax\ufffd\ufffd, \ufffd\ufffdnone\ufffd\ufffd, and \ufffd\ufffdstrict\ufffd' configurations can be defined in only one of the three configurations.\ufffd\n cookies.samesite.knownDuplicateName.explanation=The specified value was already found by the configuration and mapped to a SameSite value.\n cookies.samesite.knownDuplicateName.useraction=Ensure that cookie names and patterns are unique across the 'lax', 'none', and 'strict' configuration lists.\n+\n+headers.emptyName=CWWKT0038W: An empty header name was found when the '{0}' configuration was parsed. This value is ignored.\n+headers.emptyName.explanation=The specified header's name is an empty string. A header name must not be empty. \n+headers.emptyName.useraction=Ensure that no header name is empty.  \n+\n+headers.duplicateHeaderName=CWWKT0039W: A duplicate header name was found in the [{0}] header using the '{1}' configuration. All configurations for the [{0}] header are ignored. Any header that is defined by the 'remove', 'add', 'set', or 'setIfMissing' configurations must be unique across all configurations.\n+headers.duplicateHeaderName.explanation=The specified header name was previously configured by another configuration of the Headers feature.\n+headers.duplicateHeaderName.useraction=Ensure that headers that are defined by the 'remove', 'add', 'set', or 'setIfMissing' configurations are no present in more than one configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "133520c79396ac963cc21568fa42f4dba8f705fd"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM0NDAyNTI1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.transport.http/resources/OSGI-INF/metatype/metatype.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wNFQxNToxMTo0NFrOKLFWqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wOVQxNjo1NToxM1rOKNnRZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjcxMDY5Nw==", "bodyText": "Can you clean up the formatting here?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r682710697", "createdAt": "2021-08-04T15:11:44Z", "author": {"login": "pnicolucci"}, "path": "dev/com.ibm.ws.transport.http/resources/OSGI-INF/metatype/metatype.xml", "diffHunk": "@@ -88,9 +88,9 @@\n             <Option label=\"%onError.ignore\" value=\"IGNORE\"/>   \n         </AD>\n \n-        <AD id=\"httpOptionsRef\" name=\"%endpoint.httpOptions\" description=\"%endpoint.httpOptions.desc\"\n-            ibm:reference=\"com.ibm.ws.http.options\" ibm:type=\"pid\"\n-            type=\"String\" required=\"false\" default=\"defaultHttpOptions\" />\n+        <AD id=\"httpOptionsRef\" name=\"%endpoint.httpOptions\"\n+\tdescription=\"%endpoint.httpOptions.desc\" ibm:reference=\"com.ibm.ws.http.options\"\n+\tibm:type=\"pid\" type=\"String\" required=\"false\" default=\"defaultHttpOptions\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTE3Nzc4Mg==", "bodyText": "Formatting on this entire file looks fine on a text editor, but shows up messed up on the git preview. My guess is that there are 'tab' and whitespace characters that look fine in the eclipse or regular text editors but get messed up on this git view. I propose opening up a separate PR to clean up the entire file, since the formatting seems off for multiple other segments as well.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r685177782", "createdAt": "2021-08-09T13:09:51Z", "author": {"login": "mrsaldana"}, "path": "dev/com.ibm.ws.transport.http/resources/OSGI-INF/metatype/metatype.xml", "diffHunk": "@@ -88,9 +88,9 @@\n             <Option label=\"%onError.ignore\" value=\"IGNORE\"/>   \n         </AD>\n \n-        <AD id=\"httpOptionsRef\" name=\"%endpoint.httpOptions\" description=\"%endpoint.httpOptions.desc\"\n-            ibm:reference=\"com.ibm.ws.http.options\" ibm:type=\"pid\"\n-            type=\"String\" required=\"false\" default=\"defaultHttpOptions\" />\n+        <AD id=\"httpOptionsRef\" name=\"%endpoint.httpOptions\"\n+\tdescription=\"%endpoint.httpOptions.desc\" ibm:reference=\"com.ibm.ws.http.options\"\n+\tibm:type=\"pid\" type=\"String\" required=\"false\" default=\"defaultHttpOptions\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjcxMDY5Nw=="}, "originalCommit": {"oid": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTM2MzU1OQ==", "bodyText": "#18107", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r685363559", "createdAt": "2021-08-09T16:55:13Z", "author": {"login": "pnicolucci"}, "path": "dev/com.ibm.ws.transport.http/resources/OSGI-INF/metatype/metatype.xml", "diffHunk": "@@ -88,9 +88,9 @@\n             <Option label=\"%onError.ignore\" value=\"IGNORE\"/>   \n         </AD>\n \n-        <AD id=\"httpOptionsRef\" name=\"%endpoint.httpOptions\" description=\"%endpoint.httpOptions.desc\"\n-            ibm:reference=\"com.ibm.ws.http.options\" ibm:type=\"pid\"\n-            type=\"String\" required=\"false\" default=\"defaultHttpOptions\" />\n+        <AD id=\"httpOptionsRef\" name=\"%endpoint.httpOptions\"\n+\tdescription=\"%endpoint.httpOptions.desc\" ibm:reference=\"com.ibm.ws.http.options\"\n+\tibm:type=\"pid\" type=\"String\" required=\"false\" default=\"defaultHttpOptions\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjcxMDY5Nw=="}, "originalCommit": {"oid": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM0NDAzMDI0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.transport.http/resources/OSGI-INF/metatype/metatype.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wNFQxNToxMjozM1rOKLFZnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wOVQxMzoxMDoyN1rOKNb9gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjcxMTQ1NQ==", "bodyText": "Formatting seems a bit odd here as well.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r682711455", "createdAt": "2021-08-04T15:12:33Z", "author": {"login": "pnicolucci"}, "path": "dev/com.ibm.ws.transport.http/resources/OSGI-INF/metatype/metatype.xml", "diffHunk": "@@ -123,6 +127,10 @@\n \t\t\tibm:final=\"true\" required=\"false\" type = \"String\"\n \t\t\tdefault=\"(|(service.pid=${samesiteRef})(&amp;(service.factoryPid=com.ibm.ws.http.samesite)(|(id=com.ibm.ws.http-${id}/*)(id=defaultSameSite))))\" />\n     \n+    \t<AD id=\"headers.target\" name=\"internal\" description=\"internal use only\"\n+\t\t\tibm:final=\"true\" required=\"false\" type = \"String\" ibm:beta=\"true\"\n+\t\t\tdefault=\"(|(service.pid=${headersRef})(&amp;(service.factoryPid=com.ibm.ws.http.headers)(|(id=com.ibm.ws.http-${id}/*)(id=defaultHeaders))))\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTExNDU5OA==", "bodyText": "For this one, all the other elements have the same format, so leaving this one as is for now.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r685114598", "createdAt": "2021-08-09T11:31:25Z", "author": {"login": "mrsaldana"}, "path": "dev/com.ibm.ws.transport.http/resources/OSGI-INF/metatype/metatype.xml", "diffHunk": "@@ -123,6 +127,10 @@\n \t\t\tibm:final=\"true\" required=\"false\" type = \"String\"\n \t\t\tdefault=\"(|(service.pid=${samesiteRef})(&amp;(service.factoryPid=com.ibm.ws.http.samesite)(|(id=com.ibm.ws.http-${id}/*)(id=defaultSameSite))))\" />\n     \n+    \t<AD id=\"headers.target\" name=\"internal\" description=\"internal use only\"\n+\t\t\tibm:final=\"true\" required=\"false\" type = \"String\" ibm:beta=\"true\"\n+\t\t\tdefault=\"(|(service.pid=${headersRef})(&amp;(service.factoryPid=com.ibm.ws.http.headers)(|(id=com.ibm.ws.http-${id}/*)(id=defaultHeaders))))\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjcxMTQ1NQ=="}, "originalCommit": {"oid": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTE3ODI0MQ==", "bodyText": "See the other metatype.xml comment for proposed solution.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r685178241", "createdAt": "2021-08-09T13:10:27Z", "author": {"login": "mrsaldana"}, "path": "dev/com.ibm.ws.transport.http/resources/OSGI-INF/metatype/metatype.xml", "diffHunk": "@@ -123,6 +127,10 @@\n \t\t\tibm:final=\"true\" required=\"false\" type = \"String\"\n \t\t\tdefault=\"(|(service.pid=${samesiteRef})(&amp;(service.factoryPid=com.ibm.ws.http.samesite)(|(id=com.ibm.ws.http-${id}/*)(id=defaultSameSite))))\" />\n     \n+    \t<AD id=\"headers.target\" name=\"internal\" description=\"internal use only\"\n+\t\t\tibm:final=\"true\" required=\"false\" type = \"String\" ibm:beta=\"true\"\n+\t\t\tdefault=\"(|(service.pid=${headersRef})(&amp;(service.factoryPid=com.ibm.ws.http.headers)(|(id=com.ibm.ws.http-${id}/*)(id=defaultHeaders))))\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjcxMTQ1NQ=="}, "originalCommit": {"oid": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM0NDA2NTA3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.transport.http/src/com/ibm/ws/http/channel/internal/HttpConfigConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wNFQxNToxODo1MFrOKLFvaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wOVQxMTozNTowNlrOKNYNnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjcxNzAzMw==", "bodyText": "I'm not a huge fan of having the word feature in this naming convention. Can you work to come up with a better name here?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r682717033", "createdAt": "2021-08-04T15:18:50Z", "author": {"login": "pnicolucci"}, "path": "dev/com.ibm.ws.transport.http/src/com/ibm/ws/http/channel/internal/HttpConfigConstants.java", "diffHunk": "@@ -437,6 +437,16 @@ private HttpConfigConstants() {\n \n     public static final String WILDCARD_CHAR = \"*\";\n \n+    public static final String PROPNAME_HEADERS_FEATURE = \"headersInternal\";\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTExNjgyOA==", "bodyText": "Changed to PROPNAME_RESPONSE_HEADERS", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r685116828", "createdAt": "2021-08-09T11:35:06Z", "author": {"login": "mrsaldana"}, "path": "dev/com.ibm.ws.transport.http/src/com/ibm/ws/http/channel/internal/HttpConfigConstants.java", "diffHunk": "@@ -437,6 +437,16 @@ private HttpConfigConstants() {\n \n     public static final String WILDCARD_CHAR = \"*\";\n \n+    public static final String PROPNAME_HEADERS_FEATURE = \"headersInternal\";\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MjcxNzAzMw=="}, "originalCommit": {"oid": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1ODc0ODQ4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.transport.http/src/com/ibm/ws/http/channel/internal/HttpResponseMessageImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wOVQwMTo1OTo1MlrOKNI__g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wOVQxMTozODozM1rOKNYVbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2NzU4Mg==", "bodyText": "Any reason you use append here rather than add?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r684867582", "createdAt": "2021-08-09T01:59:52Z", "author": {"login": "pnicolucci"}, "path": "dev/com.ibm.ws.transport.http/src/com/ibm/ws/http/channel/internal/HttpResponseMessageImpl.java", "diffHunk": "@@ -711,6 +712,36 @@ public void headerComplianceCheck() throws MessageSentException {\n             updateCacheControl();\n         }\n \n+        if (getServiceContext().getHttpConfig().useHeadersConfiguration()) {\n+            //Add all headers configured through the ADD configuration option\n+            for (List<Map.Entry<String, String>> headers : getServiceContext().getHttpConfig().getConfiguredHeadersToAppend().values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTExODgyOQ==", "bodyText": "The idea was to match the appendHeader() API, but I have no objection for it to be inline with the configuration add format.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r685118829", "createdAt": "2021-08-09T11:38:33Z", "author": {"login": "mrsaldana"}, "path": "dev/com.ibm.ws.transport.http/src/com/ibm/ws/http/channel/internal/HttpResponseMessageImpl.java", "diffHunk": "@@ -711,6 +712,36 @@ public void headerComplianceCheck() throws MessageSentException {\n             updateCacheControl();\n         }\n \n+        if (getServiceContext().getHttpConfig().useHeadersConfiguration()) {\n+            //Add all headers configured through the ADD configuration option\n+            for (List<Map.Entry<String, String>> headers : getServiceContext().getHttpConfig().getConfiguredHeadersToAppend().values()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2NzU4Mg=="}, "originalCommit": {"oid": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1ODc0OTg4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/FATSuite.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wOVQwMjowMDo1NVrOKNJAtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wOVQxMzoxNjowN1rOKNcOqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2Nzc2NA==", "bodyText": "Please fix the formatting here.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r684867764", "createdAt": "2021-08-09T02:00:55Z", "author": {"login": "pnicolucci"}, "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/FATSuite.java", "diffHunk": "@@ -87,7 +88,8 @@\n                 WCSendRedirectRelativeURLTrue.class,\n                 WCSendRedirectRelativeURLDefault.class,\n                 WC5GetContextPath.class,\n-                WCSCIHandlesTypesTest.class\n+                WCSCIHandlesTypesTest.class,\n+\t\t WCResponseHeadersTest.class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTE4MjYzMw==", "bodyText": "Done", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r685182633", "createdAt": "2021-08-09T13:16:07Z", "author": {"login": "mrsaldana"}, "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/FATSuite.java", "diffHunk": "@@ -87,7 +88,8 @@\n                 WCSendRedirectRelativeURLTrue.class,\n                 WCSendRedirectRelativeURLDefault.class,\n                 WC5GetContextPath.class,\n-                WCSCIHandlesTypesTest.class\n+                WCSCIHandlesTypesTest.class,\n+\t\t WCResponseHeadersTest.class", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2Nzc2NA=="}, "originalCommit": {"oid": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1ODc1MjUyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCResponseHeadersTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wOVQwMjowMjoyOFrOKNJCBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wOVQxNjo1NDo1MlrOKNnQbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2ODEwMg==", "bodyText": "Add check to ensure savedConfig isn't null? What happens if it is null?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r684868102", "createdAt": "2021-08-09T02:02:28Z", "author": {"login": "pnicolucci"}, "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCResponseHeadersTest.java", "diffHunk": "@@ -0,0 +1,1490 @@\n+/*******************************************************************************\n+* Copyright (c) 2021 IBM Corporation and others.\n+* All rights reserved. This program and the accompanying materials\n+* are made available under the terms of the Eclipse Public License v1.0\n+* which accompanies this distribution, and is available atn * http://www.eclipse.org/legal/epl-v10.htmln *n * Contributors:\n+*     IBM Corporation - initial API and implementation\n+*******************************************************************************/\n+package com.ibm.ws.fat.wc.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.io.FileWriter;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.hc.client5.http.classic.methods.HttpGet;\n+import org.apache.hc.client5.http.classic.methods.HttpPost;\n+import org.apache.hc.client5.http.entity.UrlEncodedFormEntity;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;\n+import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;\n+import org.apache.hc.core5.http.Header;\n+import org.apache.hc.core5.http.NameValuePair;\n+import org.apache.hc.core5.http.io.entity.EntityUtils;\n+import org.apache.hc.core5.http.message.BasicNameValuePair;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.config.HttpEndpoint;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.ServerFileUtils;\n+\n+/**\n+ * A set of tests to verify the <header> configurations and the corresponding response headers\n+ */\n+@RunWith(FATRunner.class)\n+public class WCResponseHeadersTest {\n+\n+    private static final Class<?> ME = WCResponseHeadersTest.class;\n+    private static final String APP_NAME = \"ResponseHeadersTest\";\n+    private static final String APP_VERIFICATION_HEADER = \"appVerificationHeader\";\n+    //App used to simulate responses during login process\n+    private static final String APP_NAME_SECURE_APP = \"SameSiteSecurityTest\";\n+\n+    @Server(\"servlet40_headers\")\n+    public static LibertyServer server;\n+\n+    private static final ServerFileUtils serverFileUtils = new ServerFileUtils();\n+\n+   \n+\n+    // Tests can use this to indicate they don't make any config updates from the original configuration\n+    private static boolean restoreSavedConfig = true; \n+\n+    private static ServerConfiguration savedConfig; \n+\n+    @Before\n+    public void setUpBeforeEachTest() throws Exception {\n+    \n+        Exception failure = null;\n+        String consoleLogFileName = WCResponseHeadersTest.class.getSimpleName() + \".log\";\n+        \n+        if(!server.isStarted()){\n+            server.updateServerConfiguration(savedConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTEzOTc3Nw==", "bodyText": "savedConfig is initialized by the @BeforeClass , where the server object is presumed to had already been initialized by the  runtime @Server annotation . I don't believe this should ever be null since it remains unchanged throughout the lifecycle of the test. If it were null, then each test would likely fail due to whatever configuration the server had on the previous test run. The sample documentation on the git wiki didn't suggest adding null checks on the @BeforeClass for the server, but it is a simple/quick check that. I'll add them, but I almost prefer the test fail and we find an exception that says that the setup failed, than it fail later on using a bad configuration and we end up having to debug to find that the issue wasn't in the test but on the configuration.\nIt probably will be fairly obvious with how the tracing is setup, but some additional thoughts to consider.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r685139777", "createdAt": "2021-08-09T12:13:49Z", "author": {"login": "mrsaldana"}, "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCResponseHeadersTest.java", "diffHunk": "@@ -0,0 +1,1490 @@\n+/*******************************************************************************\n+* Copyright (c) 2021 IBM Corporation and others.\n+* All rights reserved. This program and the accompanying materials\n+* are made available under the terms of the Eclipse Public License v1.0\n+* which accompanies this distribution, and is available atn * http://www.eclipse.org/legal/epl-v10.htmln *n * Contributors:\n+*     IBM Corporation - initial API and implementation\n+*******************************************************************************/\n+package com.ibm.ws.fat.wc.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.io.FileWriter;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.hc.client5.http.classic.methods.HttpGet;\n+import org.apache.hc.client5.http.classic.methods.HttpPost;\n+import org.apache.hc.client5.http.entity.UrlEncodedFormEntity;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;\n+import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;\n+import org.apache.hc.core5.http.Header;\n+import org.apache.hc.core5.http.NameValuePair;\n+import org.apache.hc.core5.http.io.entity.EntityUtils;\n+import org.apache.hc.core5.http.message.BasicNameValuePair;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.config.HttpEndpoint;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.ServerFileUtils;\n+\n+/**\n+ * A set of tests to verify the <header> configurations and the corresponding response headers\n+ */\n+@RunWith(FATRunner.class)\n+public class WCResponseHeadersTest {\n+\n+    private static final Class<?> ME = WCResponseHeadersTest.class;\n+    private static final String APP_NAME = \"ResponseHeadersTest\";\n+    private static final String APP_VERIFICATION_HEADER = \"appVerificationHeader\";\n+    //App used to simulate responses during login process\n+    private static final String APP_NAME_SECURE_APP = \"SameSiteSecurityTest\";\n+\n+    @Server(\"servlet40_headers\")\n+    public static LibertyServer server;\n+\n+    private static final ServerFileUtils serverFileUtils = new ServerFileUtils();\n+\n+   \n+\n+    // Tests can use this to indicate they don't make any config updates from the original configuration\n+    private static boolean restoreSavedConfig = true; \n+\n+    private static ServerConfiguration savedConfig; \n+\n+    @Before\n+    public void setUpBeforeEachTest() throws Exception {\n+    \n+        Exception failure = null;\n+        String consoleLogFileName = WCResponseHeadersTest.class.getSimpleName() + \".log\";\n+        \n+        if(!server.isStarted()){\n+            server.updateServerConfiguration(savedConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2ODEwMg=="}, "originalCommit": {"oid": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTM2MzMxMA==", "bodyText": "If you think you're better off without the null check I don't have any objection given the details you've provided.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r685363310", "createdAt": "2021-08-09T16:54:52Z", "author": {"login": "pnicolucci"}, "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCResponseHeadersTest.java", "diffHunk": "@@ -0,0 +1,1490 @@\n+/*******************************************************************************\n+* Copyright (c) 2021 IBM Corporation and others.\n+* All rights reserved. This program and the accompanying materials\n+* are made available under the terms of the Eclipse Public License v1.0\n+* which accompanies this distribution, and is available atn * http://www.eclipse.org/legal/epl-v10.htmln *n * Contributors:\n+*     IBM Corporation - initial API and implementation\n+*******************************************************************************/\n+package com.ibm.ws.fat.wc.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.io.FileWriter;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.hc.client5.http.classic.methods.HttpGet;\n+import org.apache.hc.client5.http.classic.methods.HttpPost;\n+import org.apache.hc.client5.http.entity.UrlEncodedFormEntity;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;\n+import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;\n+import org.apache.hc.core5.http.Header;\n+import org.apache.hc.core5.http.NameValuePair;\n+import org.apache.hc.core5.http.io.entity.EntityUtils;\n+import org.apache.hc.core5.http.message.BasicNameValuePair;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.config.HttpEndpoint;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.ServerFileUtils;\n+\n+/**\n+ * A set of tests to verify the <header> configurations and the corresponding response headers\n+ */\n+@RunWith(FATRunner.class)\n+public class WCResponseHeadersTest {\n+\n+    private static final Class<?> ME = WCResponseHeadersTest.class;\n+    private static final String APP_NAME = \"ResponseHeadersTest\";\n+    private static final String APP_VERIFICATION_HEADER = \"appVerificationHeader\";\n+    //App used to simulate responses during login process\n+    private static final String APP_NAME_SECURE_APP = \"SameSiteSecurityTest\";\n+\n+    @Server(\"servlet40_headers\")\n+    public static LibertyServer server;\n+\n+    private static final ServerFileUtils serverFileUtils = new ServerFileUtils();\n+\n+   \n+\n+    // Tests can use this to indicate they don't make any config updates from the original configuration\n+    private static boolean restoreSavedConfig = true; \n+\n+    private static ServerConfiguration savedConfig; \n+\n+    @Before\n+    public void setUpBeforeEachTest() throws Exception {\n+    \n+        Exception failure = null;\n+        String consoleLogFileName = WCResponseHeadersTest.class.getSimpleName() + \".log\";\n+        \n+        if(!server.isStarted()){\n+            server.updateServerConfiguration(savedConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2ODEwMg=="}, "originalCommit": {"oid": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1ODc1Mzg1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCResponseHeadersTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wOVQwMjowMzozM1rOKNJCvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wOVQxMzoxMjo0NVrOKNcEfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2ODI4Nw==", "bodyText": "Perhaps use a methodName variable here to ensure the correct name. We should update this at the very least to actually match the method name we're in setUpBeforeEachTest.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r684868287", "createdAt": "2021-08-09T02:03:33Z", "author": {"login": "pnicolucci"}, "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCResponseHeadersTest.java", "diffHunk": "@@ -0,0 +1,1490 @@\n+/*******************************************************************************\n+* Copyright (c) 2021 IBM Corporation and others.\n+* All rights reserved. This program and the accompanying materials\n+* are made available under the terms of the Eclipse Public License v1.0\n+* which accompanies this distribution, and is available atn * http://www.eclipse.org/legal/epl-v10.htmln *n * Contributors:\n+*     IBM Corporation - initial API and implementation\n+*******************************************************************************/\n+package com.ibm.ws.fat.wc.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.io.FileWriter;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.hc.client5.http.classic.methods.HttpGet;\n+import org.apache.hc.client5.http.classic.methods.HttpPost;\n+import org.apache.hc.client5.http.entity.UrlEncodedFormEntity;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;\n+import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;\n+import org.apache.hc.core5.http.Header;\n+import org.apache.hc.core5.http.NameValuePair;\n+import org.apache.hc.core5.http.io.entity.EntityUtils;\n+import org.apache.hc.core5.http.message.BasicNameValuePair;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.config.HttpEndpoint;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.ServerFileUtils;\n+\n+/**\n+ * A set of tests to verify the <header> configurations and the corresponding response headers\n+ */\n+@RunWith(FATRunner.class)\n+public class WCResponseHeadersTest {\n+\n+    private static final Class<?> ME = WCResponseHeadersTest.class;\n+    private static final String APP_NAME = \"ResponseHeadersTest\";\n+    private static final String APP_VERIFICATION_HEADER = \"appVerificationHeader\";\n+    //App used to simulate responses during login process\n+    private static final String APP_NAME_SECURE_APP = \"SameSiteSecurityTest\";\n+\n+    @Server(\"servlet40_headers\")\n+    public static LibertyServer server;\n+\n+    private static final ServerFileUtils serverFileUtils = new ServerFileUtils();\n+\n+   \n+\n+    // Tests can use this to indicate they don't make any config updates from the original configuration\n+    private static boolean restoreSavedConfig = true; \n+\n+    private static ServerConfiguration savedConfig; \n+\n+    @Before\n+    public void setUpBeforeEachTest() throws Exception {\n+    \n+        Exception failure = null;\n+        String consoleLogFileName = WCResponseHeadersTest.class.getSimpleName() + \".log\";\n+        \n+        if(!server.isStarted()){\n+            server.updateServerConfiguration(savedConfig);\n+            server.startServer(consoleLogFileName);\n+            Log.info(ME, \"setUpBeforeTest\", \"server started, log file is \" + consoleLogFileName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTE4MDAyOQ==", "bodyText": "Done, thanks for catching that one", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r685180029", "createdAt": "2021-08-09T13:12:45Z", "author": {"login": "mrsaldana"}, "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCResponseHeadersTest.java", "diffHunk": "@@ -0,0 +1,1490 @@\n+/*******************************************************************************\n+* Copyright (c) 2021 IBM Corporation and others.\n+* All rights reserved. This program and the accompanying materials\n+* are made available under the terms of the Eclipse Public License v1.0\n+* which accompanies this distribution, and is available atn * http://www.eclipse.org/legal/epl-v10.htmln *n * Contributors:\n+*     IBM Corporation - initial API and implementation\n+*******************************************************************************/\n+package com.ibm.ws.fat.wc.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.io.FileWriter;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.hc.client5.http.classic.methods.HttpGet;\n+import org.apache.hc.client5.http.classic.methods.HttpPost;\n+import org.apache.hc.client5.http.entity.UrlEncodedFormEntity;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;\n+import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;\n+import org.apache.hc.core5.http.Header;\n+import org.apache.hc.core5.http.NameValuePair;\n+import org.apache.hc.core5.http.io.entity.EntityUtils;\n+import org.apache.hc.core5.http.message.BasicNameValuePair;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.config.HttpEndpoint;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.ServerFileUtils;\n+\n+/**\n+ * A set of tests to verify the <header> configurations and the corresponding response headers\n+ */\n+@RunWith(FATRunner.class)\n+public class WCResponseHeadersTest {\n+\n+    private static final Class<?> ME = WCResponseHeadersTest.class;\n+    private static final String APP_NAME = \"ResponseHeadersTest\";\n+    private static final String APP_VERIFICATION_HEADER = \"appVerificationHeader\";\n+    //App used to simulate responses during login process\n+    private static final String APP_NAME_SECURE_APP = \"SameSiteSecurityTest\";\n+\n+    @Server(\"servlet40_headers\")\n+    public static LibertyServer server;\n+\n+    private static final ServerFileUtils serverFileUtils = new ServerFileUtils();\n+\n+   \n+\n+    // Tests can use this to indicate they don't make any config updates from the original configuration\n+    private static boolean restoreSavedConfig = true; \n+\n+    private static ServerConfiguration savedConfig; \n+\n+    @Before\n+    public void setUpBeforeEachTest() throws Exception {\n+    \n+        Exception failure = null;\n+        String consoleLogFileName = WCResponseHeadersTest.class.getSimpleName() + \".log\";\n+        \n+        if(!server.isStarted()){\n+            server.updateServerConfiguration(savedConfig);\n+            server.startServer(consoleLogFileName);\n+            Log.info(ME, \"setUpBeforeTest\", \"server started, log file is \" + consoleLogFileName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2ODI4Nw=="}, "originalCommit": {"oid": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1ODc1NDY2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCResponseHeadersTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wOVQwMjowNDoxMFrOKNJDKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wOVQxMzoxMjo1N1rOKNcFFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2ODM5Mg==", "bodyText": "Can we add comments here to detail what these warnings are? It makes it easier in the future to know why we're allowing these.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r684868392", "createdAt": "2021-08-09T02:04:10Z", "author": {"login": "pnicolucci"}, "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCResponseHeadersTest.java", "diffHunk": "@@ -0,0 +1,1490 @@\n+/*******************************************************************************\n+* Copyright (c) 2021 IBM Corporation and others.\n+* All rights reserved. This program and the accompanying materials\n+* are made available under the terms of the Eclipse Public License v1.0\n+* which accompanies this distribution, and is available atn * http://www.eclipse.org/legal/epl-v10.htmln *n * Contributors:\n+*     IBM Corporation - initial API and implementation\n+*******************************************************************************/\n+package com.ibm.ws.fat.wc.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.io.FileWriter;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.hc.client5.http.classic.methods.HttpGet;\n+import org.apache.hc.client5.http.classic.methods.HttpPost;\n+import org.apache.hc.client5.http.entity.UrlEncodedFormEntity;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;\n+import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;\n+import org.apache.hc.core5.http.Header;\n+import org.apache.hc.core5.http.NameValuePair;\n+import org.apache.hc.core5.http.io.entity.EntityUtils;\n+import org.apache.hc.core5.http.message.BasicNameValuePair;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.config.HttpEndpoint;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.ServerFileUtils;\n+\n+/**\n+ * A set of tests to verify the <header> configurations and the corresponding response headers\n+ */\n+@RunWith(FATRunner.class)\n+public class WCResponseHeadersTest {\n+\n+    private static final Class<?> ME = WCResponseHeadersTest.class;\n+    private static final String APP_NAME = \"ResponseHeadersTest\";\n+    private static final String APP_VERIFICATION_HEADER = \"appVerificationHeader\";\n+    //App used to simulate responses during login process\n+    private static final String APP_NAME_SECURE_APP = \"SameSiteSecurityTest\";\n+\n+    @Server(\"servlet40_headers\")\n+    public static LibertyServer server;\n+\n+    private static final ServerFileUtils serverFileUtils = new ServerFileUtils();\n+\n+   \n+\n+    // Tests can use this to indicate they don't make any config updates from the original configuration\n+    private static boolean restoreSavedConfig = true; \n+\n+    private static ServerConfiguration savedConfig; \n+\n+    @Before\n+    public void setUpBeforeEachTest() throws Exception {\n+    \n+        Exception failure = null;\n+        String consoleLogFileName = WCResponseHeadersTest.class.getSimpleName() + \".log\";\n+        \n+        if(!server.isStarted()){\n+            server.updateServerConfiguration(savedConfig);\n+            server.startServer(consoleLogFileName);\n+            Log.info(ME, \"setUpBeforeTest\", \"server started, log file is \" + consoleLogFileName);\n+        } else if(restoreSavedConfig){\n+            try{\n+                server.stopServer(\"CWWKT0042W\", \"CWWKT0043W\", \"CWWKT0044W\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTE4MDE4Mw==", "bodyText": "Done", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r685180183", "createdAt": "2021-08-09T13:12:57Z", "author": {"login": "mrsaldana"}, "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCResponseHeadersTest.java", "diffHunk": "@@ -0,0 +1,1490 @@\n+/*******************************************************************************\n+* Copyright (c) 2021 IBM Corporation and others.\n+* All rights reserved. This program and the accompanying materials\n+* are made available under the terms of the Eclipse Public License v1.0\n+* which accompanies this distribution, and is available atn * http://www.eclipse.org/legal/epl-v10.htmln *n * Contributors:\n+*     IBM Corporation - initial API and implementation\n+*******************************************************************************/\n+package com.ibm.ws.fat.wc.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.io.FileWriter;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.hc.client5.http.classic.methods.HttpGet;\n+import org.apache.hc.client5.http.classic.methods.HttpPost;\n+import org.apache.hc.client5.http.entity.UrlEncodedFormEntity;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;\n+import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;\n+import org.apache.hc.core5.http.Header;\n+import org.apache.hc.core5.http.NameValuePair;\n+import org.apache.hc.core5.http.io.entity.EntityUtils;\n+import org.apache.hc.core5.http.message.BasicNameValuePair;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.config.HttpEndpoint;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.ServerFileUtils;\n+\n+/**\n+ * A set of tests to verify the <header> configurations and the corresponding response headers\n+ */\n+@RunWith(FATRunner.class)\n+public class WCResponseHeadersTest {\n+\n+    private static final Class<?> ME = WCResponseHeadersTest.class;\n+    private static final String APP_NAME = \"ResponseHeadersTest\";\n+    private static final String APP_VERIFICATION_HEADER = \"appVerificationHeader\";\n+    //App used to simulate responses during login process\n+    private static final String APP_NAME_SECURE_APP = \"SameSiteSecurityTest\";\n+\n+    @Server(\"servlet40_headers\")\n+    public static LibertyServer server;\n+\n+    private static final ServerFileUtils serverFileUtils = new ServerFileUtils();\n+\n+   \n+\n+    // Tests can use this to indicate they don't make any config updates from the original configuration\n+    private static boolean restoreSavedConfig = true; \n+\n+    private static ServerConfiguration savedConfig; \n+\n+    @Before\n+    public void setUpBeforeEachTest() throws Exception {\n+    \n+        Exception failure = null;\n+        String consoleLogFileName = WCResponseHeadersTest.class.getSimpleName() + \".log\";\n+        \n+        if(!server.isStarted()){\n+            server.updateServerConfiguration(savedConfig);\n+            server.startServer(consoleLogFileName);\n+            Log.info(ME, \"setUpBeforeTest\", \"server started, log file is \" + consoleLogFileName);\n+        } else if(restoreSavedConfig){\n+            try{\n+                server.stopServer(\"CWWKT0042W\", \"CWWKT0043W\", \"CWWKT0044W\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2ODM5Mg=="}, "originalCommit": {"oid": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1ODc1NzQ2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCResponseHeadersTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wOVQwMjowNjo1M1rOKNJEsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wOVQxMjo0MTozMFrOKNasog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2ODc4NA==", "bodyText": "In these start server calls do we need to ensure we're waiting for the config updates to complete? Something like:  server.waitForConfigUpdateInLogUsingMark(Collections.singleton(appName), false/true, \"CWWKT0016I:.*myAppName.*\");", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r684868784", "createdAt": "2021-08-09T02:06:53Z", "author": {"login": "pnicolucci"}, "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCResponseHeadersTest.java", "diffHunk": "@@ -0,0 +1,1490 @@\n+/*******************************************************************************\n+* Copyright (c) 2021 IBM Corporation and others.\n+* All rights reserved. This program and the accompanying materials\n+* are made available under the terms of the Eclipse Public License v1.0\n+* which accompanies this distribution, and is available atn * http://www.eclipse.org/legal/epl-v10.htmln *n * Contributors:\n+*     IBM Corporation - initial API and implementation\n+*******************************************************************************/\n+package com.ibm.ws.fat.wc.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.io.FileWriter;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.hc.client5.http.classic.methods.HttpGet;\n+import org.apache.hc.client5.http.classic.methods.HttpPost;\n+import org.apache.hc.client5.http.entity.UrlEncodedFormEntity;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;\n+import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;\n+import org.apache.hc.core5.http.Header;\n+import org.apache.hc.core5.http.NameValuePair;\n+import org.apache.hc.core5.http.io.entity.EntityUtils;\n+import org.apache.hc.core5.http.message.BasicNameValuePair;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.config.HttpEndpoint;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.ServerFileUtils;\n+\n+/**\n+ * A set of tests to verify the <header> configurations and the corresponding response headers\n+ */\n+@RunWith(FATRunner.class)\n+public class WCResponseHeadersTest {\n+\n+    private static final Class<?> ME = WCResponseHeadersTest.class;\n+    private static final String APP_NAME = \"ResponseHeadersTest\";\n+    private static final String APP_VERIFICATION_HEADER = \"appVerificationHeader\";\n+    //App used to simulate responses during login process\n+    private static final String APP_NAME_SECURE_APP = \"SameSiteSecurityTest\";\n+\n+    @Server(\"servlet40_headers\")\n+    public static LibertyServer server;\n+\n+    private static final ServerFileUtils serverFileUtils = new ServerFileUtils();\n+\n+   \n+\n+    // Tests can use this to indicate they don't make any config updates from the original configuration\n+    private static boolean restoreSavedConfig = true; \n+\n+    private static ServerConfiguration savedConfig; \n+\n+    @Before\n+    public void setUpBeforeEachTest() throws Exception {\n+    \n+        Exception failure = null;\n+        String consoleLogFileName = WCResponseHeadersTest.class.getSimpleName() + \".log\";\n+        \n+        if(!server.isStarted()){\n+            server.updateServerConfiguration(savedConfig);\n+            server.startServer(consoleLogFileName);\n+            Log.info(ME, \"setUpBeforeTest\", \"server started, log file is \" + consoleLogFileName);\n+        } else if(restoreSavedConfig){\n+            try{\n+                server.stopServer(\"CWWKT0042W\", \"CWWKT0043W\", \"CWWKT0044W\");\n+            } catch (Exception e){\n+                failure = e;\n+            }\n+            server.updateServerConfiguration(savedConfig);\n+            server.startServer(consoleLogFileName, true);\n+            Log.info(getClass(), \"setUpBeforeTest\", \"server restarted, log file is \" +consoleLogFileName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTE1NzUzOA==", "bodyText": "I don't believe this would work since it is not updating the config on a running server, rather starting one up that is shutdown. The application is verified to be started through the startServer API, which does a startServerAndValidate with validateApps set to true by default. As such, I don't think we need to wait additional time after the startServer call returns.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r685157538", "createdAt": "2021-08-09T12:41:30Z", "author": {"login": "mrsaldana"}, "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCResponseHeadersTest.java", "diffHunk": "@@ -0,0 +1,1490 @@\n+/*******************************************************************************\n+* Copyright (c) 2021 IBM Corporation and others.\n+* All rights reserved. This program and the accompanying materials\n+* are made available under the terms of the Eclipse Public License v1.0\n+* which accompanies this distribution, and is available atn * http://www.eclipse.org/legal/epl-v10.htmln *n * Contributors:\n+*     IBM Corporation - initial API and implementation\n+*******************************************************************************/\n+package com.ibm.ws.fat.wc.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.io.FileWriter;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.hc.client5.http.classic.methods.HttpGet;\n+import org.apache.hc.client5.http.classic.methods.HttpPost;\n+import org.apache.hc.client5.http.entity.UrlEncodedFormEntity;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;\n+import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;\n+import org.apache.hc.core5.http.Header;\n+import org.apache.hc.core5.http.NameValuePair;\n+import org.apache.hc.core5.http.io.entity.EntityUtils;\n+import org.apache.hc.core5.http.message.BasicNameValuePair;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.config.HttpEndpoint;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.ServerFileUtils;\n+\n+/**\n+ * A set of tests to verify the <header> configurations and the corresponding response headers\n+ */\n+@RunWith(FATRunner.class)\n+public class WCResponseHeadersTest {\n+\n+    private static final Class<?> ME = WCResponseHeadersTest.class;\n+    private static final String APP_NAME = \"ResponseHeadersTest\";\n+    private static final String APP_VERIFICATION_HEADER = \"appVerificationHeader\";\n+    //App used to simulate responses during login process\n+    private static final String APP_NAME_SECURE_APP = \"SameSiteSecurityTest\";\n+\n+    @Server(\"servlet40_headers\")\n+    public static LibertyServer server;\n+\n+    private static final ServerFileUtils serverFileUtils = new ServerFileUtils();\n+\n+   \n+\n+    // Tests can use this to indicate they don't make any config updates from the original configuration\n+    private static boolean restoreSavedConfig = true; \n+\n+    private static ServerConfiguration savedConfig; \n+\n+    @Before\n+    public void setUpBeforeEachTest() throws Exception {\n+    \n+        Exception failure = null;\n+        String consoleLogFileName = WCResponseHeadersTest.class.getSimpleName() + \".log\";\n+        \n+        if(!server.isStarted()){\n+            server.updateServerConfiguration(savedConfig);\n+            server.startServer(consoleLogFileName);\n+            Log.info(ME, \"setUpBeforeTest\", \"server started, log file is \" + consoleLogFileName);\n+        } else if(restoreSavedConfig){\n+            try{\n+                server.stopServer(\"CWWKT0042W\", \"CWWKT0043W\", \"CWWKT0044W\");\n+            } catch (Exception e){\n+                failure = e;\n+            }\n+            server.updateServerConfiguration(savedConfig);\n+            server.startServer(consoleLogFileName, true);\n+            Log.info(getClass(), \"setUpBeforeTest\", \"server restarted, log file is \" +consoleLogFileName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2ODc4NA=="}, "originalCommit": {"oid": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1ODc2MDEzOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCResponseHeadersTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wOVQwMjowODoyOVrOKNJF9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wOVQxMTo1MzoxOFrOKNY2RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2OTExMA==", "bodyText": "Usually we add a server != null check here as well.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r684869110", "createdAt": "2021-08-09T02:08:29Z", "author": {"login": "pnicolucci"}, "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCResponseHeadersTest.java", "diffHunk": "@@ -0,0 +1,1490 @@\n+/*******************************************************************************\n+* Copyright (c) 2021 IBM Corporation and others.\n+* All rights reserved. This program and the accompanying materials\n+* are made available under the terms of the Eclipse Public License v1.0\n+* which accompanies this distribution, and is available atn * http://www.eclipse.org/legal/epl-v10.htmln *n * Contributors:\n+*     IBM Corporation - initial API and implementation\n+*******************************************************************************/\n+package com.ibm.ws.fat.wc.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.io.FileWriter;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.hc.client5.http.classic.methods.HttpGet;\n+import org.apache.hc.client5.http.classic.methods.HttpPost;\n+import org.apache.hc.client5.http.entity.UrlEncodedFormEntity;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;\n+import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;\n+import org.apache.hc.core5.http.Header;\n+import org.apache.hc.core5.http.NameValuePair;\n+import org.apache.hc.core5.http.io.entity.EntityUtils;\n+import org.apache.hc.core5.http.message.BasicNameValuePair;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.config.HttpEndpoint;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.ServerFileUtils;\n+\n+/**\n+ * A set of tests to verify the <header> configurations and the corresponding response headers\n+ */\n+@RunWith(FATRunner.class)\n+public class WCResponseHeadersTest {\n+\n+    private static final Class<?> ME = WCResponseHeadersTest.class;\n+    private static final String APP_NAME = \"ResponseHeadersTest\";\n+    private static final String APP_VERIFICATION_HEADER = \"appVerificationHeader\";\n+    //App used to simulate responses during login process\n+    private static final String APP_NAME_SECURE_APP = \"SameSiteSecurityTest\";\n+\n+    @Server(\"servlet40_headers\")\n+    public static LibertyServer server;\n+\n+    private static final ServerFileUtils serverFileUtils = new ServerFileUtils();\n+\n+   \n+\n+    // Tests can use this to indicate they don't make any config updates from the original configuration\n+    private static boolean restoreSavedConfig = true; \n+\n+    private static ServerConfiguration savedConfig; \n+\n+    @Before\n+    public void setUpBeforeEachTest() throws Exception {\n+    \n+        Exception failure = null;\n+        String consoleLogFileName = WCResponseHeadersTest.class.getSimpleName() + \".log\";\n+        \n+        if(!server.isStarted()){\n+            server.updateServerConfiguration(savedConfig);\n+            server.startServer(consoleLogFileName);\n+            Log.info(ME, \"setUpBeforeTest\", \"server started, log file is \" + consoleLogFileName);\n+        } else if(restoreSavedConfig){\n+            try{\n+                server.stopServer(\"CWWKT0042W\", \"CWWKT0043W\", \"CWWKT0044W\");\n+            } catch (Exception e){\n+                failure = e;\n+            }\n+            server.updateServerConfiguration(savedConfig);\n+            server.startServer(consoleLogFileName, true);\n+            Log.info(getClass(), \"setUpBeforeTest\", \"server restarted, log file is \" +consoleLogFileName);\n+        }\n+        restoreSavedConfig = true;\n+        if(failure !=null)\n+            throw failure;\n+    }\n+\n+    @BeforeClass\n+    public static void setUpOnce() throws Exception {\n+\n+         //Update the bootstrap to include symbolic default variables for\n+        //the <header> attributes. Will be used in testHeaderBootstrapping()\n+        writeBootstrapProperty(server, \"add.header\", \"bootstrappedAddHeader:addHeaderValue\");\n+        writeBootstrapProperty(server, \"set.header\", \"bootstrappedSetHeader:setHeaderValue\");\n+        writeBootstrapProperty(server, \"set.if.missing.header\", \"bootstrappedSetIfMissingHeader:setIfMissingValue\");\n+        writeBootstrapProperty(server, \"remove.header\", \"customHeader\");\n+\n+\n+        //Create the ResponseHeadersTest.war application\n+        ShrinkHelper.defaultDropinApp(server, APP_NAME + \".war\", \"headers.servlets\");\n+        savedConfig = server.getServerConfiguration().clone(); \n+        server.setConfigUpdateTimeout(30*1000); \n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n+        //Stop the server\n+        if (server != null ) {\n+\n+            //Allow the warning messages we may have generated on purpose\n+            //\n+            // W CWWKT0042W: An empty header name was found when the {0} configuration was parsed. This value is ignored.\n+            //\n+            // W CWWKT0043W: A duplicate header name was found in the [{0}] header using the {1} configuration. All configurations\n+            // for the [{0}] header are ignored. Any header that is defined by the remove, add, set, or setIfMissing configurations\n+            //must be unique across all configurations.\n+            //\n+            // W CWWKT0044W: The [{0}] header, which is marked as a duplicate header name, was found in the {1} configuration.\n+            // The [{0}] header is ignored. Any header that is defined by the {1} configuration must contain unique header names.\n+            if(server.isStarted())\n+                server.stopServer(\"CWWKT0042W\", \"CWWKT0043W\", \"CWWKT0044W\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTEyNzIzNw==", "bodyText": "These lines are already wrapped by a if (server !=null) block, around line 123 (give or take a few lines since it might be adjusted due to the other suggested changes.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r685127237", "createdAt": "2021-08-09T11:53:18Z", "author": {"login": "mrsaldana"}, "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCResponseHeadersTest.java", "diffHunk": "@@ -0,0 +1,1490 @@\n+/*******************************************************************************\n+* Copyright (c) 2021 IBM Corporation and others.\n+* All rights reserved. This program and the accompanying materials\n+* are made available under the terms of the Eclipse Public License v1.0\n+* which accompanies this distribution, and is available atn * http://www.eclipse.org/legal/epl-v10.htmln *n * Contributors:\n+*     IBM Corporation - initial API and implementation\n+*******************************************************************************/\n+package com.ibm.ws.fat.wc.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.io.FileWriter;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.hc.client5.http.classic.methods.HttpGet;\n+import org.apache.hc.client5.http.classic.methods.HttpPost;\n+import org.apache.hc.client5.http.entity.UrlEncodedFormEntity;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;\n+import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;\n+import org.apache.hc.core5.http.Header;\n+import org.apache.hc.core5.http.NameValuePair;\n+import org.apache.hc.core5.http.io.entity.EntityUtils;\n+import org.apache.hc.core5.http.message.BasicNameValuePair;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.config.HttpEndpoint;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.ServerFileUtils;\n+\n+/**\n+ * A set of tests to verify the <header> configurations and the corresponding response headers\n+ */\n+@RunWith(FATRunner.class)\n+public class WCResponseHeadersTest {\n+\n+    private static final Class<?> ME = WCResponseHeadersTest.class;\n+    private static final String APP_NAME = \"ResponseHeadersTest\";\n+    private static final String APP_VERIFICATION_HEADER = \"appVerificationHeader\";\n+    //App used to simulate responses during login process\n+    private static final String APP_NAME_SECURE_APP = \"SameSiteSecurityTest\";\n+\n+    @Server(\"servlet40_headers\")\n+    public static LibertyServer server;\n+\n+    private static final ServerFileUtils serverFileUtils = new ServerFileUtils();\n+\n+   \n+\n+    // Tests can use this to indicate they don't make any config updates from the original configuration\n+    private static boolean restoreSavedConfig = true; \n+\n+    private static ServerConfiguration savedConfig; \n+\n+    @Before\n+    public void setUpBeforeEachTest() throws Exception {\n+    \n+        Exception failure = null;\n+        String consoleLogFileName = WCResponseHeadersTest.class.getSimpleName() + \".log\";\n+        \n+        if(!server.isStarted()){\n+            server.updateServerConfiguration(savedConfig);\n+            server.startServer(consoleLogFileName);\n+            Log.info(ME, \"setUpBeforeTest\", \"server started, log file is \" + consoleLogFileName);\n+        } else if(restoreSavedConfig){\n+            try{\n+                server.stopServer(\"CWWKT0042W\", \"CWWKT0043W\", \"CWWKT0044W\");\n+            } catch (Exception e){\n+                failure = e;\n+            }\n+            server.updateServerConfiguration(savedConfig);\n+            server.startServer(consoleLogFileName, true);\n+            Log.info(getClass(), \"setUpBeforeTest\", \"server restarted, log file is \" +consoleLogFileName);\n+        }\n+        restoreSavedConfig = true;\n+        if(failure !=null)\n+            throw failure;\n+    }\n+\n+    @BeforeClass\n+    public static void setUpOnce() throws Exception {\n+\n+         //Update the bootstrap to include symbolic default variables for\n+        //the <header> attributes. Will be used in testHeaderBootstrapping()\n+        writeBootstrapProperty(server, \"add.header\", \"bootstrappedAddHeader:addHeaderValue\");\n+        writeBootstrapProperty(server, \"set.header\", \"bootstrappedSetHeader:setHeaderValue\");\n+        writeBootstrapProperty(server, \"set.if.missing.header\", \"bootstrappedSetIfMissingHeader:setIfMissingValue\");\n+        writeBootstrapProperty(server, \"remove.header\", \"customHeader\");\n+\n+\n+        //Create the ResponseHeadersTest.war application\n+        ShrinkHelper.defaultDropinApp(server, APP_NAME + \".war\", \"headers.servlets\");\n+        savedConfig = server.getServerConfiguration().clone(); \n+        server.setConfigUpdateTimeout(30*1000); \n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n+        //Stop the server\n+        if (server != null ) {\n+\n+            //Allow the warning messages we may have generated on purpose\n+            //\n+            // W CWWKT0042W: An empty header name was found when the {0} configuration was parsed. This value is ignored.\n+            //\n+            // W CWWKT0043W: A duplicate header name was found in the [{0}] header using the {1} configuration. All configurations\n+            // for the [{0}] header are ignored. Any header that is defined by the remove, add, set, or setIfMissing configurations\n+            //must be unique across all configurations.\n+            //\n+            // W CWWKT0044W: The [{0}] header, which is marked as a duplicate header name, was found in the {1} configuration.\n+            // The [{0}] header is ignored. Any header that is defined by the {1} configuration must contain unique header names.\n+            if(server.isStarted())\n+                server.stopServer(\"CWWKT0042W\", \"CWWKT0043W\", \"CWWKT0044W\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg2OTExMA=="}, "originalCommit": {"oid": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDM1ODc2ODg0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCResponseHeadersTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wOVQwMjoxNDozNFrOKNJKaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wOC0wOVQxMzoxMzoyNFrOKNcGgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg3MDI1MQ==", "bodyText": "Can this be removed?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r684870251", "createdAt": "2021-08-09T02:14:34Z", "author": {"login": "pnicolucci"}, "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCResponseHeadersTest.java", "diffHunk": "@@ -0,0 +1,1490 @@\n+/*******************************************************************************\n+* Copyright (c) 2021 IBM Corporation and others.\n+* All rights reserved. This program and the accompanying materials\n+* are made available under the terms of the Eclipse Public License v1.0\n+* which accompanies this distribution, and is available atn * http://www.eclipse.org/legal/epl-v10.htmln *n * Contributors:\n+*     IBM Corporation - initial API and implementation\n+*******************************************************************************/\n+package com.ibm.ws.fat.wc.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.io.FileWriter;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.hc.client5.http.classic.methods.HttpGet;\n+import org.apache.hc.client5.http.classic.methods.HttpPost;\n+import org.apache.hc.client5.http.entity.UrlEncodedFormEntity;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;\n+import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;\n+import org.apache.hc.core5.http.Header;\n+import org.apache.hc.core5.http.NameValuePair;\n+import org.apache.hc.core5.http.io.entity.EntityUtils;\n+import org.apache.hc.core5.http.message.BasicNameValuePair;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.config.HttpEndpoint;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.ServerFileUtils;\n+\n+/**\n+ * A set of tests to verify the <header> configurations and the corresponding response headers\n+ */\n+@RunWith(FATRunner.class)\n+public class WCResponseHeadersTest {\n+\n+    private static final Class<?> ME = WCResponseHeadersTest.class;\n+    private static final String APP_NAME = \"ResponseHeadersTest\";\n+    private static final String APP_VERIFICATION_HEADER = \"appVerificationHeader\";\n+    //App used to simulate responses during login process\n+    private static final String APP_NAME_SECURE_APP = \"SameSiteSecurityTest\";\n+\n+    @Server(\"servlet40_headers\")\n+    public static LibertyServer server;\n+\n+    private static final ServerFileUtils serverFileUtils = new ServerFileUtils();\n+\n+   \n+\n+    // Tests can use this to indicate they don't make any config updates from the original configuration\n+    private static boolean restoreSavedConfig = true; \n+\n+    private static ServerConfiguration savedConfig; \n+\n+    @Before\n+    public void setUpBeforeEachTest() throws Exception {\n+    \n+        Exception failure = null;\n+        String consoleLogFileName = WCResponseHeadersTest.class.getSimpleName() + \".log\";\n+        \n+        if(!server.isStarted()){\n+            server.updateServerConfiguration(savedConfig);\n+            server.startServer(consoleLogFileName);\n+            Log.info(ME, \"setUpBeforeTest\", \"server started, log file is \" + consoleLogFileName);\n+        } else if(restoreSavedConfig){\n+            try{\n+                server.stopServer(\"CWWKT0042W\", \"CWWKT0043W\", \"CWWKT0044W\");\n+            } catch (Exception e){\n+                failure = e;\n+            }\n+            server.updateServerConfiguration(savedConfig);\n+            server.startServer(consoleLogFileName, true);\n+            Log.info(getClass(), \"setUpBeforeTest\", \"server restarted, log file is \" +consoleLogFileName);\n+        }\n+        restoreSavedConfig = true;\n+        if(failure !=null)\n+            throw failure;\n+    }\n+\n+    @BeforeClass\n+    public static void setUpOnce() throws Exception {\n+\n+         //Update the bootstrap to include symbolic default variables for\n+        //the <header> attributes. Will be used in testHeaderBootstrapping()\n+        writeBootstrapProperty(server, \"add.header\", \"bootstrappedAddHeader:addHeaderValue\");\n+        writeBootstrapProperty(server, \"set.header\", \"bootstrappedSetHeader:setHeaderValue\");\n+        writeBootstrapProperty(server, \"set.if.missing.header\", \"bootstrappedSetIfMissingHeader:setIfMissingValue\");\n+        writeBootstrapProperty(server, \"remove.header\", \"customHeader\");\n+\n+\n+        //Create the ResponseHeadersTest.war application\n+        ShrinkHelper.defaultDropinApp(server, APP_NAME + \".war\", \"headers.servlets\");\n+        savedConfig = server.getServerConfiguration().clone(); \n+        server.setConfigUpdateTimeout(30*1000); \n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n+        //Stop the server\n+        if (server != null ) {\n+\n+            //Allow the warning messages we may have generated on purpose\n+            //\n+            // W CWWKT0042W: An empty header name was found when the {0} configuration was parsed. This value is ignored.\n+            //\n+            // W CWWKT0043W: A duplicate header name was found in the [{0}] header using the {1} configuration. All configurations\n+            // for the [{0}] header are ignored. Any header that is defined by the remove, add, set, or setIfMissing configurations\n+            //must be unique across all configurations.\n+            //\n+            // W CWWKT0044W: The [{0}] header, which is marked as a duplicate header name, was found in the {1} configuration.\n+            // The [{0}] header is ignored. Any header that is defined by the {1} configuration must contain unique header names.\n+            if(server.isStarted())\n+                server.stopServer(\"CWWKT0042W\", \"CWWKT0043W\", \"CWWKT0044W\");\n+            server.updateServerConfiguration(savedConfig);\n+        }\n+        \n+    }\n+\n+    /**\n+     * Execute a request/response exchange to the given URL. If the status code is OK (200), return\n+     * all headers in the response so that the tests can evaluate that all conditions are met.\n+     *\n+     * @param url\n+     * @return\n+     */\n+    private static Header[] executeExchangeAndGetHeaders(String url, String testName) throws Exception {\n+\n+        Log.info(ME, testName, \"url: \" + url);\n+\n+        CloseableHttpClient client = null;\n+        CloseableHttpResponse response = null;\n+        HttpGet getMethod = new HttpGet(url);\n+        Header[] headers = null;\n+\n+        try {\n+            client = HttpClientBuilder.create().build();\n+            response = client.execute(getMethod);\n+            String responseText = EntityUtils.toString(response.getEntity());\n+\n+            Log.info(ME, testName, \"\\n\" + \"Response Text:\");\n+            Log.info(ME, testName, \"\\n\" + responseText);\n+\n+            assertEquals(\"The expected status code [200] was not returned\",\n+                                 200, response.getCode());\n+\n+            headers = response.getHeaders();\n+\n+        } finally {\n+            if (client != null)\n+                client.close();\n+            if (response != null)\n+                response.close();\n+            \n+            \n+        \n+        }\n+\n+        return headers;\n+\n+    }\n+\n+    /**\n+     * Utility method to format the various URLs used during the tests\n+     *\n+     * @param path\n+     * @return\n+     */\n+    private String generateURL(String path) {\n+        if (!path.startsWith(\"/\")) {\n+            path = \"/\" + path;\n+        }\n+        return \"http://\" + server.getHostname() + \":\" + server.getHttpDefaultPort() + \"/\" + APP_NAME + path;\n+    }\n+\n+    /**\n+     * Utility method to write a key-value propery to the server's boostrap.properties file\n+     * \n+     *  @param server - server instance\n+     *  @param property - name of the property to add\n+     *  @param value - value of the property to add\n+     */\n+    private static void writeBootstrapProperty(LibertyServer server, String property, String value) throws Exception{\n+\n+        if (property == null || value== null) return;\n+\n+        String bootstrapFilePath = serverFileUtils.getServerFileLoc(server)+\"/bootstrap.properties\";\n+        FileWriter writer = new FileWriter(bootstrapFilePath, true);\n+\n+        writer.append(System.getProperty(\"line.separator\"));\n+        writer.append(property+\"=\"+value);\n+        writer.append(System.getProperty(\"line.separator\"));\n+        \n+        writer.close();\n+    }\n+\n+\n+\n+\n+\n+    /**\n+    *  Header Symbolic Configuration\n+    * \n+    *  Test that the <headers> element can be configured symbolically.\n+    *  A single bootstrap property for each of the <headers> attributes is \n+    *  writen to the boostrap.properties file when the setUp method is first\n+    *  ran. This test will use those property names within each attribute \n+    *  configuration and test that the response contains all values. \n+    * \n+    *  To test the \"remove\" option, ${remove.header} will map to the header\n+    *  [customHeader], which is added by the application by means of the\n+    *  \"testCondition=singleHeader\" parameter. \n+    * \n+    *  The application will also add the header [appVerificationHeader]\n+    * \n+    *  Expectations: \n+    *    Present headers - [bootstrappedAddHeader:addHeaderValue], \n+    *       [bootstrappedSetHeader:setHeaderValue],\n+    *       [bootstrappedSetIfMissingHeader:setIfMissingValue], \n+    *       [appVerificationHeader]\n+    *    Missing headers - [customHeader]\n+  \n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testHeaderBootstrapping() throws Exception {\n+\n+        String testName = \"testHeaderBootstrapping\";\n+        String url = generateURL(\"/ResponseHeadersServlet?testCondition=singleHeader\");\n+        restoreSavedConfig = true;\n+\n+        ServerConfiguration configuration = server.getServerConfiguration();\n+        Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+        HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+        httpEndpoint.getHeaders().setAdd(\"${add.header}\");\n+        httpEndpoint.getHeaders().setSet(\"${set.header}\");\n+        httpEndpoint.getHeaders().setSetIfMissing(\"${set.if.missing.header}\");\n+        httpEndpoint.getHeaders().setRemove(\"${remove.header}\");\n+        server.setMarkToEndOfLog();\n+        server.updateServerConfiguration(configuration);\n+        server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+\n+        //Send the request and verify the expected headers\n+\n+        Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+        HeaderExpectations expectations = new HeaderExpectations();\n+        expectations.expectPresent(\"bootstrappedAddHeader\", \"addHeaderValue\");\n+        expectations.expectPresent(\"bootstrappedSetHeader\", \"setHeaderValue\");\n+        expectations.expectPresent(\"bootstrappedSetIfMissingHeader\", \"setIfMissingValue\");\n+        expectations.expectPresent(\"appVerificationHeader\", null);\n+        expectations.expectMissing(\"customHeader\");\n+        \n+        expectations.evaluate(headers);\n+\n+    }\n+\n+\n+  \n+\n+    /**\n+    *  Header Misconfiguration Series Test 1/4\n+    * \n+    *  Test the misconfigurations messages of the <headers> element.\n+    * \n+    *  This test will purposely misconfigure the \"add\", \"set\", \"setIfMissing\", and \"remove\"  \n+    *  attributes by providing empty header names. It is expected that the 'empty header name'\n+    *  CWWKT0042W message will logged on all four configurations. \n+    * \n+    *  Good configurations should continue working. Therefore, this test will also test correct \n+    *  configurations on all attributes. The test servlet will be invoked with the parameter: \n+    *  [testCondition=singleHeader], which will add the response header: \"customHeader:appValue\".\n+    * \n+    *  The \"remove\" attribute will remove this, so it is expected to not appear on the written \n+    *  response headers. \n+    * \n+    *  The application will add the header [appVerificationHeader].\n+    * \n+    *  Expected present headers: [addHeader: addValue], [addHeader: addValue2], [setHeader], [setIfMissingHeader], \n+    *       [appVerificationHeader]\n+    *  Expected removed header - [customHeader]  \n+    * \n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testHeaderMisconfiguration_EmptyHeaderName() throws Exception {\n+\n+        \n+        String testName = \"testHeaderMisconfiguration_EmptyHeaderName\";\n+        String url = generateURL(\"/ResponseHeadersServlet?testCondition=singleHeader\");\n+        restoreSavedConfig = true;\n+        String stringToSearchFor = \"CWWKT0042W\";\n+\n+        ServerConfiguration configuration = server.getServerConfiguration();\n+        Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+        HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+        httpEndpoint.getHeaders().setAdd(\":testValue, addHeader:addValue, addHeader:addValue2\");\n+        httpEndpoint.getHeaders().setSet(\":testValue, setHeader\");\n+        httpEndpoint.getHeaders().setSetIfMissing(\":testValue, setIfMissingHeader\");\n+        httpEndpoint.getHeaders().setRemove(\"customHeader, \");\n+        server.setMarkToEndOfLog();\n+        server.updateServerConfiguration(configuration);\n+        server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+        Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+        List<String> logs = server.findStringsInLogs(stringToSearchFor);\n+     \n+        assertTrue(\"Expected four occurances of the empty header string but found: \" + logs.size(), logs.size()==4);\n+\n+\n+        //Send the request and verify the expected headers\n+\n+        Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+        HeaderExpectations expectations = new HeaderExpectations();\n+        expectations.expectPresent(\"addHeader\", \"addValue\");\n+        expectations.expectPresent(\"addHeader\", \"addValue2\");\n+        expectations.expectPresent(\"setHeader\");\n+        expectations.expectPresent(\"setIfMissingHeader\");\n+        expectations.expectPresent(\"appVerificationHeader\");\n+        expectations.expectMissing(\"customHeader\");\n+\n+        expectations.evaluate(headers);\n+    \n+    }\n+\n+    /**\n+    *  Header Misconfiguration Series Test 2/4\n+    * \n+    *  Test the misconfigurations messages of the <headers> element.\n+    * \n+    *  This test will purposely misconfigure the \"add\", \"set\", \"setIfMissing\", and \"remove\"  \n+    *  attributes by providing duplicate header names. It is expected that the 'duplicate header \n+    *  name' CWWKT0043W message will logged three times. \n+    * \n+    *  Good configurations should continue working. Therefore, this test will also test correct \n+    *  configurations on all attributes. The test servlet will be invoked with the parameter: \n+    *  [testCondition=singleHeader], which will add the response header: \"customHeader:appValue\".\n+    * \n+    *  The \"remove\" attribute will remove this, so it is expected to not appear on the written \n+    *  response headers. \n+    * \n+    *  The application will add the header [appVerificationHeader]. \n+    * \n+    *  Expected bad headers: [badHeader, anotherBadHeader, yetAnotherBadHeader]\n+    *  Expected headers: [addHeader:addValue, addHeader:addValue2 setHeader, \n+    *       setIfMissingHeader, appVerificationHeader]\n+    *  Expected removed header - [customHeader] - from servlet. \n+    * \n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testHeaderMisconfiguration_DuplicateHeaderName() throws Exception {\n+\n+        \n+        String testName = \"testHeaderMisconfiguration_DuplicateHeaderName\";\n+        restoreSavedConfig = true;\n+        String url = generateURL(\"/ResponseHeadersServlet?testCondition=singleHeader\");\n+        String stringToSearchFor = \"CWWKT0043W\";\n+\n+        ServerConfiguration configuration = server.getServerConfiguration();\n+        Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+        HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+\n+        httpEndpoint.getHeaders().setAdd(\"addHeader: addValue, addHeader:addValue2, badHeader\");\n+        httpEndpoint.getHeaders().setSet(\"badHeader, anotherBadHeader, setHeader\");\n+        httpEndpoint.getHeaders().setSetIfMissing(\"anotherBadHeader, yetAnotherBadHeader, setIfMissingHeader\");\n+        httpEndpoint.getHeaders().setRemove(\"yetAnotherBadHeader, customHeader\");\n+        server.setMarkToEndOfLog();\n+        server.updateServerConfiguration(configuration);\n+        server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+        Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+        List<String> logs = server.findStringsInLogs(stringToSearchFor);\n+     \n+        assertTrue(\"Expected three occurances of the duplicate header name string but found: \" + logs.size(), logs.size()==3);\n+\n+        //Send the request and verify the expected headers\n+\n+        Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+        HeaderExpectations expectations = new HeaderExpectations();\n+        expectations.expectPresent(\"addHeader\", \"addValue\");\n+        expectations.expectPresent(\"addHeader\", \"addValue2\");\n+        expectations.expectPresent(\"setHeader\");\n+        expectations.expectPresent(\"setIfMissingHeader\");\n+        expectations.expectPresent(\"appVerificationHeader\");\n+        expectations.expectMissing(\"customHeader\");\n+\n+        expectations.evaluate(headers);\n+    \n+    }\n+\n+    /**\n+    *  Header Misconfiguration Series Test 3/4\n+    * \n+    *  Test the misconfigurations messages of the <headers> element.\n+    * \n+    *  This test will purposely misconfigure the \"add\", \"set\", \"setIfMissing\", and \"remove\"  \n+    *  attributes by providing previously duplicated header names. That is, it will provide \n+    *  three times the same header name. It is expected that the 'previously duplicated \n+    *  header name' CWWKT0044W message will logged two times. \n+    * \n+    *  Good configurations should continue working. Therefore, this test will also test correct \n+    *  configurations on all attributes. The test servlet will be invoked with the parameter: \n+    *  [testCondition=singleHeader], which will add the response header: \"customHeader:appValue\".\n+    * \n+    *  The \"remove\" attribute will remove this, so it is expected to not appear on the written \n+    *  response headers. \n+    * \n+    *  The application will add the header [appVerificationHeader].\n+    * \n+    *  Bad Headers: [badHeader, anotherBadHeader]\n+    *  Expected present headers: [addHeader, setHeader, setIfMissingHeader]\n+    *  Expected removed header - [customHeader]\n+    * \n+    *  This specifically tests the \"remove\" configuration with \"set-cookie\". No \"set-cookie\" headers are \n+    *  expected. \n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testHeaderMisconfiguration_PreviouslyDuplicatedHeaderName() throws Exception {\n+\n+        \n+        String testName = \"testHeaderMisconfiguration_PreviouslyDuplicatedHeaderName\";\n+        String url = generateURL(\"/ResponseHeadersServlet?testCondition=singleHeader\");\n+        restoreSavedConfig = true;\n+        String stringToSearchFor = \"CWWKT0044W\";\n+\n+        ServerConfiguration configuration = server.getServerConfiguration();\n+        Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+        HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+        httpEndpoint.getHeaders().setAdd(\"badHeader, addHeader\");\n+        httpEndpoint.getHeaders().setSet(\"badHeader, badHeader, anotherBadHeader, setHeader\");\n+        httpEndpoint.getHeaders().setSetIfMissing(\"anotherBadHeader, setIfMissingHeader\");\n+        httpEndpoint.getHeaders().setRemove(\"anotherBadHeader, customHeader\");\n+        server.setMarkToEndOfLog();\n+        server.updateServerConfiguration(configuration);\n+        server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+        Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+        List<String> logs = server.findStringsInLogs(stringToSearchFor);\n+     \n+        assertTrue(\"Expected two occurances of the previously duplicated header string but found: \" + logs.size(), logs.size()==2);\n+\n+        //Send the request and verify the expected headers\n+        Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+        HeaderExpectations expectations = new HeaderExpectations();\n+        expectations.expectPresent(\"addHeader\");\n+        expectations.expectPresent(\"setHeader\");\n+        expectations.expectPresent(\"setIfMissingHeader\");\n+        expectations.expectPresent(\"appVerificationHeader\");\n+        expectations.expectMissing(\"customHeader\");\n+\n+        expectations.evaluate(headers);\n+  \n+    }\n+\n+    /**\n+    * \n+    * Header Misconfiguration Series Test 4/4\n+    * \n+    *  Tests that the configurations of the <headers> element are case insensitive.\n+    * \n+    *  The test servlet will be invoked with the parameter: \n+    *  [testCondition=singleHeader], which will add the response header: \"customHeader:appValue\".\n+    *  This will also add a verification header, \"appVerificationHeader\". \n+    * \n+    *  The \"add\" configuration can add multiple of the same name header, so will be ignored\n+    *  for the purpose of this test, as casing is irrelevant.\n+    * \n+    *  Test Phase 1: Misconfiguration case-insensitive detection\n+    * \n+    *       This test will misconfigure the \"set\", \"setIfMissing\", and \"remove\" attributes with\n+    *       the same header name with different casing. It expected that this will result with \n+    *       the CWWKT0044W \"previously detected duplicate header\" message.  \n+    * \n+    * \n+    *  Test Phase 2: Case Insensitivity when <headers> configuration is consumed by transport\n+    * \n+    *       The configuration will test the \"set\" attribute by configuring the servlet header in all \n+    *       capital letters: \"CUSTOMHEADER: testValue\". It is expected that the resulting response\n+    *       header that is written will be configured \"set\" header. \n+    * \n+    *       The \"setIfMissing\" attribute will be tested by setting the verification header in all \n+    *       capital letters: \"APPVERIFICATIONHEADER: badValue\". This header is added by the application\n+    *       with no value, so it is expected that no value is found for it.\n+    * \n+    *       The \"remove\" attribute will be tested by configuring the date header in all capital \n+    *       letters: \"DATE\". The response is expected to not contain a \"Date\" header.  \n+    * \n+    *  Expected bad headers: [badHeader]\n+    *  Expected headers: [CUSTOMHEADER: testValue, appVerificationHeader]\n+    *  Expected removed header - [Date]\n+    * \n+    *  This specifically tests the \"remove\" configuration with \"set-cookie\". No \"set-cookie\" headers are \n+    *  expected. \n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testHeaderMisconfiguration_CaseInsensitivity() throws Exception{\n+        String testName = \"testHeaderCaseInsensitivity\";\n+        String url = generateURL(\"/ResponseHeadersServlet?testCondition=singleHeader\");\n+        restoreSavedConfig = true;\n+        String stringToSearchFor = \"CWWKT0044W\";\n+\n+        ServerConfiguration configuration = server.getServerConfiguration();\n+        Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+        HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+        httpEndpoint.getHeaders().setSet(\"badHeader, CUSTOMHEADER: testValue\");\n+        httpEndpoint.getHeaders().setSetIfMissing(\"BaDHeAdEr, APPVERIFICATIONHEADER: testValue\");\n+        httpEndpoint.getHeaders().setRemove(\"BADHEADER, DATE\");\n+        server.setMarkToEndOfLog();\n+        server.updateServerConfiguration(configuration);\n+        server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+        Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+        List<String> logs = server.findStringsInLogs(stringToSearchFor);\n+     \n+        assertTrue(\"Expected one occurances of the previously duplicated header string but found: \" + logs.size(), logs.size()==1);\n+\n+        //Send the request and verify the expected headers\n+        Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+        HeaderExpectations expectations = new HeaderExpectations();\n+        expectations.expectPresent(\"customHeader\",\"testValue\");\n+        expectations.expectPresent(\"appVerificationHeader\");\n+        expectations.expectMissing(\"date\");\n+\n+        expectations.evaluate(headers);\n+\n+    }\n+\n+    \n+\n+    /**\n+    * \n+    * Simple Configuration Series 1/4: \"add\" header\n+    * \n+    * Tests that the \"add\" configuration of the <headers> element is able \n+    * to properly append multiple headers to the response that are configured\n+    * with the same name.   \n+    * \n+    * \n+    * The application will add the [appVerificationHeader] header to \n+    * the response. No further application interaction is expected.\n+    * \n+    * Expected headers: [customHeader:testValue], [customHeader:testValue2]\n+    *       [appVerificationHeader]\n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testAddHeader() throws Exception {\n+   \n+            String url = generateURL(\"/ResponseHeadersServlet\");\n+            String testName = \"testAddHeader\";\n+            restoreSavedConfig = true;\n+\n+            ServerConfiguration configuration = server.getServerConfiguration();\n+            Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+            HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+            httpEndpoint.getHeaders().setAdd(\"customHeader:testValue, customHeader:testValue2\");\n+            server.setMarkToEndOfLog();\n+            server.updateServerConfiguration(configuration);\n+            server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+            Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+            //Send the request and verify the expected headers\n+            Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+            HeaderExpectations expectations = new HeaderExpectations();\n+            expectations.expectPresent(\"customHeader\",\"testValue\");\n+            expectations.expectPresent(\"customHeader\", \"testValue2\");\n+            expectations.expectPresent(\"appVerificationHeader\");\n+\n+            expectations.evaluate(headers); \n+    }\n+\n+\n+    /**\n+    * \n+    * Simple Configuration Series 2/4: \"set\" attribute\n+    * \n+    * Tests that the \"set\" configuration of the <headers> element is able \n+    * to properly set the configured header on a response\n+    * \n+    * \n+    * The application will add the [appVerificationHeader] header to \n+    * the response. No further application interaction is expected.\n+    * \n+    * Expected headers: [customHeader:testValue], [appVerificationHeader]\n+    *\n+    * @throws Exception\n+    */    \n+    @Test\n+    public void testSetHeader() throws Exception {\n+   \n+            String url = generateURL(\"/ResponseHeadersServlet\");\n+            String testName = \"testSetHeader\";\n+            restoreSavedConfig = true;\n+\n+            boolean conditionMet = false;\n+\n+            ServerConfiguration configuration = server.getServerConfiguration();\n+            Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+            HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+            httpEndpoint.getHeaders().setSet(\"customHeader:testValue\");\n+            server.setMarkToEndOfLog();\n+            server.updateServerConfiguration(configuration);\n+            server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+            Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+            //Send the request and verify the expected headers\n+            Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+            HeaderExpectations expectations = new HeaderExpectations();\n+            expectations.expectPresent(\"customHeader\",\"testValue\");\n+            expectations.expectPresent(\"appVerificationHeader\");\n+\n+            expectations.evaluate(headers);   \n+ \n+    }\n+\n+    /**\n+    * \n+    * Simple Configuration Series 3/4: \"setIfMissing\" attribute\n+    * \n+    * Tests that the \"setIfMissing\" configuration of the <headers> element is able \n+    * to properly set the configured header on a response when no other header \n+    * of the same name is present.\n+    * \n+    * \n+    * The application will add the [appVerificationHeader] header to \n+    * the response. No further application interaction is expected.\n+    * \n+    * Expected headers: [customHeader:testValue], [appVerificationHeader]\n+    *\n+    * @throws Exception\n+    */  \n+    @Test\n+    public void testSetIfMissingHeader() throws Exception {\n+   \n+            String url = generateURL(\"/ResponseHeadersServlet\");\n+            String testName = \"testSetIfMissingHeader\";\n+            restoreSavedConfig = true;\n+\n+            boolean conditionMet = false;\n+\n+            ServerConfiguration configuration = server.getServerConfiguration();\n+            Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+            HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+            httpEndpoint.getHeaders().setSetIfMissing(\"customHeader:testValue\");\n+            server.setMarkToEndOfLog();\n+            server.updateServerConfiguration(configuration);\n+            server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+            Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+            //Send the request and verify the expected headers\n+            Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+            HeaderExpectations expectations = new HeaderExpectations();\n+            expectations.expectPresent(\"customHeader\",\"testValue\");\n+            expectations.expectPresent(\"appVerificationHeader\");\n+\n+            expectations.evaluate(headers);     \n+ \n+    }\n+\n+    /**\n+    * \n+    * Simple Configuration Series 4/4: \"remove\" attribute\n+    * \n+    * Tests that the \"remove\" configuration of the <headers> element is able \n+    * to properly remove the configured header from a response. \n+    * \n+    * The configuration will be set to remove any header whose name is [customHeader].\n+    * \n+    * The test servlet will be invoked with the parameter: [testCondition=singleHeader], \n+    * which will add the response header: \"customHeader:appValue\". The application will also \n+    * add the [appVerificationHeader] header to the response. No further application \n+    * interaction is expected.\n+    * \n+    * Expected headers: [appVerificationHeader]\n+    *\n+    * @throws Exception\n+    */  \n+     @Test\n+    public void testRemoveHeader() throws Exception {\n+   \n+            String url = generateURL(\"/ResponseHeadersServlet\");\n+            String testName = \"testRemoveHeader\";\n+            restoreSavedConfig = true;\n+\n+            boolean conditionMet = true;\n+            boolean appVerified = false;\n+\n+            ServerConfiguration configuration = server.getServerConfiguration();\n+            Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+            HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+            httpEndpoint.getHeaders().setRemove(\"customHeader\");\n+            server.setMarkToEndOfLog();\n+            server.updateServerConfiguration(configuration);\n+            server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+            Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+            \n+            //Send the request and verify the expected headers\n+            Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+            HeaderExpectations expectations = new HeaderExpectations();\n+            expectations.expectPresent(\"appVerificationHeader\");\n+            expectations.expectMissing(\"customHeader\");\n+\n+            expectations.evaluate(headers);    \n+ \n+    }\n+\n+    /**\n+    * \n+    * Tests that the \"add\" configuration of the <headers> element is able \n+    * to properly append headers to the response without overwritting \n+    * existing headers that share the same name. \n+    * \n+    * The \"testCondition=singleHeader\" request parameter will result in the \n+    * application adding the header [customHeader:appValue]. \n+    * \n+    * The application will also add the [appVerificationHeader] header to \n+    * the response. \n+    * \n+    * Expected headers: [customHeader:testValue], [customHeader:appValue]\n+    *       [appVerificationHeader]\n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testAddHeaderWithHeaderPresent() throws Exception {\n+\n+        String url = generateURL(\"/ResponseHeadersServlet?testCondition=singleHeader\");\n+        String testName = \"testAddHeaderWithHeaderPresent\";\n+        restoreSavedConfig = true;\n+\n+        boolean conditionMet = false;\n+        boolean conditionMet2 = false;\n+\n+        ServerConfiguration configuration = server.getServerConfiguration();\n+        Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+        HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+        httpEndpoint.getHeaders().setAdd(\"customHeader:testValue\");\n+        server.setMarkToEndOfLog();\n+        server.updateServerConfiguration(configuration);\n+        server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+        Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+        //Send the request and verify the expected headers\n+        Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+        HeaderExpectations expectations = new HeaderExpectations();\n+        expectations.expectPresent(\"customHeader\",\"testValue\");\n+        expectations.expectPresent(\"customHeader\", \"appValue\");\n+        expectations.expectPresent(\"appVerificationHeader\");\n+\n+        expectations.evaluate(headers);\n+    \n+    }\n+\n+    /**\n+    *\n+    * Tests that the \"set\" configuration of the <headers> element is able \n+    * to properly overwrite an exisiting header that shares its name with a configured\n+    * \"set\" header. \n+    * \n+    * \n+    * The configuration will define the header [customHeader:testValue] on the \n+    * on the \"set\" attribute.\n+    * \n+    * The test servlet will be invoked with the parameter: [testCondition=singleHeader], \n+    * which will add the response header: \"customHeader:appValue\". The application will also \n+    * add the [appVerificationHeader] header to the response. No further application \n+    * interaction is expected.\n+    * \n+    * It is expected that the the app [customHeader] be overwritten by the configuration.\n+    * \n+    * Expected headers: [customHeader:testValue], [appVerificationHeader]\n+    *\n+    * @throws Exception\n+    */ \n+    @Test\n+    public void testSetHeaderWithHeaderPresent() throws Exception {\n+\n+        String url = generateURL(\"/ResponseHeadersServlet?testCondition=singleHeader\");\n+        String testName = \"testSetHeaderWithHeaderPresent\";\n+        restoreSavedConfig = true;\n+\n+        boolean conditionMet = false;\n+\n+        ServerConfiguration configuration = server.getServerConfiguration();\n+        Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+        HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+        httpEndpoint.getHeaders().setSet(\"customHeader:testValue\");\n+        server.setMarkToEndOfLog();\n+        server.updateServerConfiguration(configuration);\n+        server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+        Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+        //Send the request and verify the expected headers\n+        Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+        HeaderExpectations expectations = new HeaderExpectations();\n+        expectations.expectPresent(\"customHeader\",\"testValue\");\n+        expectations.expectPresent(\"appVerificationHeader\");\n+        expectations.expectMissing(\"customHeader\", \"appValue\");\n+\n+        expectations.evaluate(headers); \n+    \n+    }\n+\n+\n+    \n+    /**\n+    *\n+    * Tests that the \"setIfMissing\" configuration of the <headers> element does not \n+    * overwrite an exisiting header that shares its name with a configured\n+    * \"setIfMissing\" header. \n+    * \n+    * \n+    * The configuration will define the header [customHeader:testValue] on the \n+    * on the \"setIfMissing\" attribute.\n+    * \n+    * The test servlet will be invoked with the parameter: [testCondition=singleHeader], \n+    * which will add the response header: \"customHeader:appValue\". The application will also \n+    * add the [appVerificationHeader] header to the response. No further application \n+    * interaction is expected.\n+    * \n+    * It is expected that the the app [customHeader] will not be overwritten by the configuration.\n+    * \n+    * Expected headers: [customHeader:appValue], [appVerificationHeader]\n+    *\n+    * @throws Exception\n+    */ \n+    @Test\n+    public void testSetIfMissingHeaderWithHeaderPresent() throws Exception {\n+\n+        String url = generateURL(\"/ResponseHeadersServlet?testCondition=singleHeader\");\n+        String testName = \"testSetIfMissingHeaderWithHeaderPresent\";\n+        restoreSavedConfig = true;\n+\n+        boolean conditionMet = false;\n+\n+        ServerConfiguration configuration = server.getServerConfiguration();\n+        Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+        HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+        httpEndpoint.getHeaders().setSetIfMissing(\"customHeader:testValue\");\n+        server.setMarkToEndOfLog();\n+        server.updateServerConfiguration(configuration);\n+        server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+        Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+        //Send the request and verify the expected headers\n+        Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+        HeaderExpectations expectations = new HeaderExpectations();\n+        expectations.expectPresent(\"customHeader\",\"appValue\");\n+        expectations.expectPresent(\"appVerificationHeader\");\n+        expectations.expectMissing(\"customHeader\", \"testValue\");\n+\n+        expectations.evaluate(headers); \n+    \n+    \n+    }\n+\n+\n+    /**\n+    *\n+    * Tests that the \"remove\" configuration of the <headers> element removes\n+    * multiple all instances of the defined header name.\n+    * \n+    * The configuration will use the \"add\" attribute to define two headers with the same name:\n+    * [customConfigHeader: testValue] and [customConfigHeader: testValue2]. \n+    * \n+    * The test servlet will be invoked with the parameter: [testCondition=multipleHeaders], \n+    * which will add the response headers: \"customHeader:appValue\" and \"customHeader:appValue2\". \n+    * The application will also add the [appVerificationHeader] header to the response. No further \n+    * application interaction is expected.\n+    * \n+    * \n+    * Expected present headers: [appVerificationHeader]\n+    * Expected missing headers: [customConfigHeader], [customHeader]\n+    *\n+    * @throws Exception\n+    */ \n+    @Test\n+    public void testRemoveMultipleAppHeader() throws Exception {\n+   \n+            String url = generateURL(\"/ResponseHeadersServlet?testCondition=multipleHeaders\");\n+            String testName = \"testRemoveMultipleAppHeaders\";\n+            restoreSavedConfig = true;\n+\n+            boolean conditionMet = true;\n+            boolean appVerified = false;\n+\n+            ServerConfiguration configuration = server.getServerConfiguration();\n+            Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+            HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+            httpEndpoint.getHeaders().setAdd(\"customConfigHeader:testValue, customConfigHeader:testValue2\");\n+            httpEndpoint.getHeaders().setRemove(\"customHeader, customConfigHeader\");\n+            server.setMarkToEndOfLog();\n+            server.updateServerConfiguration(configuration);\n+            server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+            Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+            //Send the request and verify the expected headers\n+            Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+            HeaderExpectations expectations = new HeaderExpectations();\n+            expectations.expectPresent(\"appVerificationHeader\");\n+            expectations.expectMissing(\"customConfigHeader\");\n+            expectations.expectMissing(\"customHeader\");\n+\n+            expectations.evaluate(headers); \n+    }\n+\n+    /**\n+    * \n+    * Cookie Header Test Series Test 1/4 : \"add\" attribute configuration\n+    * \n+    *  Test the interactions of the <headers> configuration with response Cookie objects and \"Set-Cookie\"\n+    *  headers.\n+    * \n+    *  This test will set a request parameter [testCondition=testCookies], which will instruct the \n+    *  servlet to add the following \"Set-Cookie\" header and Cookie object to the response:\n+    *       response.addHeader(\"set-cookie\", \"chocolate=chip; SameSite=None\");\n+    *       response.addCookie(new Cookie(\"vanilla\",\"sugar\"));\n+    * \n+    *  Cookie objects should be converted into \"Set-Cookie\" headers by the transport.\n+    * \n+    *  The application will also add the header [appVerificationHeader]. \n+    *  \n+    *  This test specifically tests the \"add\" configuration with a \"set-cookie: oatmeal\" header. \n+    *  It expected that the response will write out all three chocolate, vanilla, and oatmeal cookies in the \n+    *  form of \"set-cookie\" headers. \n+    * \n+    *  Expected headers: [set-cookie: chocolate=chip; SameSite=None], [set-cookie: vanilla=sugar], \n+    *       [set-cookie: oatmeal], [appVerificationHeader]\n+    * \n+    * @throws Exception\n+    */\n+    @Test\n+    public void testCookieHeaders_Add() throws Exception {\n+   \n+\n+            String url = generateURL(\"/ResponseHeadersServlet?testCondition=testCookies\");\n+            String testName = \"testCookieHeaders_Add\";\n+            restoreSavedConfig = true;\n+\n+            boolean conditionMet = false;\n+            boolean appVerified = false;\n+\n+            boolean vanillaFound = false; \n+            boolean chocolateFound = false; \n+            boolean oatmealFound = false;\n+\n+\n+            //FIRST REQUEST - <add> configuration\n+\n+            ServerConfiguration configuration = server.getServerConfiguration();\n+            Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+            HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+            httpEndpoint.getHeaders().setAdd(\"set-cookie:oatmeal\");\n+            server.setMarkToEndOfLog();\n+            server.updateServerConfiguration(configuration);\n+            server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+            Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+            //Send the request and verify the expected headers\n+            Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+            HeaderExpectations expectations = new HeaderExpectations();\n+            expectations.expectPresent(\"set-cookie\", \"chocolate=chip; SameSite=None\");\n+            expectations.expectPresent(\"set-cookie\", \"vanilla=sugar\");\n+            expectations.expectPresent(\"set-cookie\", \"oatmeal\");\n+            expectations.expectPresent(\"appVerificationHeader\");\n+\n+            expectations.evaluate(headers);   \n+\n+            \n+    }\n+\n+    /**\n+    *  Cookie Header Test Series Test 2/4 - \"set\" attribute configuration\n+    * \n+    *  Test the interactions of the <headers> configuration with response Cookie objects and \"Set-Cookie\"\n+    *  headers.\n+    * \n+    *  This test will set a request parameter [testCondition=testCookies], which will instruct the \n+    *  servlet to add the following \"Set-Cookie\" header and Cookie object to the response:\n+    *       response.addHeader(\"set-cookie\", \"chocolate=chip; SameSite=None\");\n+    *       response.addCookie(new Cookie(\"vanilla\",\"sugar\"));\n+    * \n+    *  Cookie objects should be converted into \"Set-Cookie\" headers by the transport.\n+    * \n+    *  The application will also add the header [appVerificationHeader]. \n+    *  \n+    *  This test specifically tests the \"set\" configuration with the \"set-cookie: oatmeal\" header. It is expected\n+    *  that the servlet chocolate and vanilla values be overwriten.\n+    * \n+    *  Expected present headers: [set-cookie: oatmeal], [appVerificationHeader]\n+    *  Expected missing headers: [set-cookie: chocolate=chip; SameSite=None], [set-cookie: vanilla=sugar]\n+    * \n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testCookieHeaders_Set() throws Exception {\n+   \n+\n+            String url = generateURL(\"/ResponseHeadersServlet?testCondition=testCookies\");\n+            String testName = \"testCookieHeaders_Set\";\n+            restoreSavedConfig = true;\n+\n+            ServerConfiguration configuration = server.getServerConfiguration();\n+            Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+            HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+            httpEndpoint.getHeaders().setSet(\"set-cookie:oatmeal\");\n+            server.setMarkToEndOfLog();\n+            server.updateServerConfiguration(configuration);\n+            server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+            Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+            //Send the request and verify the expected headers\n+            Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+            HeaderExpectations expectations = new HeaderExpectations();\n+            expectations.expectMissing(\"set-cookie\", \"chocolate=chip; SameSite=None\");\n+            expectations.expectMissing(\"set-cookie\", \"vanilla=sugar\");\n+            expectations.expectPresent(\"set-cookie\", \"oatmeal\");\n+            expectations.expectPresent(\"appVerificationHeader\");\n+\n+            expectations.evaluate(headers);    \n+    }\n+    \n+\n+    /**\n+    *  Cookie Header Test Series Test 3/4 - \"setIfMissing\" attribute configuration\n+    * \n+    *  Test the interactions of the <headers> configuration with response Cookie objects and \"Set-Cookie\"\n+    *  headers.\n+    * \n+    *  This test will set a request parameter [testCondition=testCookies], which will instruct the \n+    *  servlet to add the following \"Set-Cookie\" header and Cookie object to the response:\n+    *       response.addHeader(\"set-cookie\", \"chocolate=chip; SameSite=None\");\n+    *       response.addCookie(new Cookie(\"vanilla\",\"sugar\"));\n+    * \n+    *  Cookie objects should be converted into \"Set-Cookie\" headers by the transport.\n+    * \n+    *  The application will also add the header [appVerificationHeader].\n+    *  \n+    * \n+    *  This test specifically tests the \"setIfMissing\" configuration with the \"set-cookie: oatmeal\" header. It is \n+    *  expected that the response will be written out with both chocolate and vanilla \"set-cookie\" headers.\n+    * \n+    *  Expected present headers: [set-cookie: chocolate=chip; SameSite=None], [set-cookie: vanilla=sugar],\n+    *       [appVerificationHeader]\n+    *  Expected missing headers: [set-cookie: oatmeal]\n+    * \n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testCookieHeaders_SetIfMissing() throws Exception {\n+   \n+\n+            String url = generateURL(\"/ResponseHeadersServlet?testCondition=testCookies\");\n+            String testName = \"testCookieHeaders_SetIfMissing\";\n+            restoreSavedConfig = true;\n+\n+            ServerConfiguration configuration = server.getServerConfiguration();\n+            Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+            HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+            httpEndpoint.getHeaders().setSetIfMissing(\"set-cookie:oatmeal\");\n+            server.setMarkToEndOfLog();\n+            server.updateServerConfiguration(configuration);\n+            server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+            Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+           //Send the request and verify the expected headers\n+            Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+            HeaderExpectations expectations = new HeaderExpectations();\n+            expectations.expectPresent(\"set-cookie\", \"chocolate=chip; SameSite=None\");\n+            expectations.expectPresent(\"set-cookie\", \"vanilla=sugar\");\n+            expectations.expectMissing(\"set-cookie\", \"oatmeal\");\n+            expectations.expectPresent(\"appVerificationHeader\");\n+\n+            expectations.evaluate(headers);  \n+\n+    }\n+\n+    /**\n+    *  Cookie Header Test Series Test 4/4 - \"remove\" attribute configuration\n+    * \n+    *  Test the interactions of the <headers> configuration with response Cookie objects and \"Set-Cookie\"\n+    *  headers.\n+    * \n+    *  This test will set a request parameter [testCondition=testCookies], which will instruct the \n+    *  servlet to add the following \"Set-Cookie\" header and Cookie object to the response:\n+    *       response.addHeader(\"set-cookie\", \"chocolate=chip; SameSite=None\");\n+    *       response.addCookie(new Cookie(\"vanilla\",\"sugar\"));\n+    * \n+    *  Cookie objects should be converted into \"Set-Cookie\" headers by the transport.\n+    * \n+    *  The application will also add the header [appVerificationHeader].\n+    * \n+    *  This specifically tests the \"remove\" configuration with \"set-cookie\". No \"set-cookie\" headers are \n+    *  expected. \n+    * \n+    *  Expected present headers: [appVerificationHeader]    \n+    *  Expected missing headers: [set-cookie: chocolate=chip; SameSite=None], [set-cookie: vanilla=sugar],\n+    *       [set-cookie: oatmeal]\n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testCookieHeaders_Remove() throws Exception {\n+   \n+\n+            String url = generateURL(\"/ResponseHeadersServlet?testCondition=testCookies\");\n+            String testName = \"testCookieHeaders_Remove\";\n+            restoreSavedConfig = true;\n+\n+            boolean conditionMet = true;\n+            boolean appVerified = false;\n+\n+            ServerConfiguration configuration = server.getServerConfiguration();\n+            Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+            HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+            httpEndpoint.getHeaders().setRemove(\"set-cookie\");\n+            server.setMarkToEndOfLog();\n+            server.updateServerConfiguration(configuration);\n+            server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+            Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+            //Send the request and verify the expected headers\n+            Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+            HeaderExpectations expectations = new HeaderExpectations();\n+            expectations.expectMissing(\"set-cookie\");\n+            expectations.expectPresent(\"appVerificationHeader\");\n+\n+            expectations.evaluate(headers); \n+\n+    }\n+\n+\n+    @Test\n+    public void testHeadersDuringLogin() throws Exception {\n+\n+        boolean headerFound = false;\n+        String testName = \"testHeadersDuringLogin\";\n+        restoreSavedConfig = true;\n+        String expectedResponse = \"Welcome to the SameSiteSecurityServlet!\";\n+        Header expectedHeader = null;\n+\n+        //server.saveServerConfiguration();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec"}, "originalPosition": 1219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTE4MDU0NA==", "bodyText": "Done", "url": "https://github.com/OpenLiberty/open-liberty/pull/12467#discussion_r685180544", "createdAt": "2021-08-09T13:13:24Z", "author": {"login": "mrsaldana"}, "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCResponseHeadersTest.java", "diffHunk": "@@ -0,0 +1,1490 @@\n+/*******************************************************************************\n+* Copyright (c) 2021 IBM Corporation and others.\n+* All rights reserved. This program and the accompanying materials\n+* are made available under the terms of the Eclipse Public License v1.0\n+* which accompanies this distribution, and is available atn * http://www.eclipse.org/legal/epl-v10.htmln *n * Contributors:\n+*     IBM Corporation - initial API and implementation\n+*******************************************************************************/\n+package com.ibm.ws.fat.wc.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.io.FileWriter;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.hc.client5.http.classic.methods.HttpGet;\n+import org.apache.hc.client5.http.classic.methods.HttpPost;\n+import org.apache.hc.client5.http.entity.UrlEncodedFormEntity;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;\n+import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;\n+import org.apache.hc.client5.http.impl.classic.HttpClientBuilder;\n+import org.apache.hc.core5.http.Header;\n+import org.apache.hc.core5.http.NameValuePair;\n+import org.apache.hc.core5.http.io.entity.EntityUtils;\n+import org.apache.hc.core5.http.message.BasicNameValuePair;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.config.HttpEndpoint;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.ServerFileUtils;\n+\n+/**\n+ * A set of tests to verify the <header> configurations and the corresponding response headers\n+ */\n+@RunWith(FATRunner.class)\n+public class WCResponseHeadersTest {\n+\n+    private static final Class<?> ME = WCResponseHeadersTest.class;\n+    private static final String APP_NAME = \"ResponseHeadersTest\";\n+    private static final String APP_VERIFICATION_HEADER = \"appVerificationHeader\";\n+    //App used to simulate responses during login process\n+    private static final String APP_NAME_SECURE_APP = \"SameSiteSecurityTest\";\n+\n+    @Server(\"servlet40_headers\")\n+    public static LibertyServer server;\n+\n+    private static final ServerFileUtils serverFileUtils = new ServerFileUtils();\n+\n+   \n+\n+    // Tests can use this to indicate they don't make any config updates from the original configuration\n+    private static boolean restoreSavedConfig = true; \n+\n+    private static ServerConfiguration savedConfig; \n+\n+    @Before\n+    public void setUpBeforeEachTest() throws Exception {\n+    \n+        Exception failure = null;\n+        String consoleLogFileName = WCResponseHeadersTest.class.getSimpleName() + \".log\";\n+        \n+        if(!server.isStarted()){\n+            server.updateServerConfiguration(savedConfig);\n+            server.startServer(consoleLogFileName);\n+            Log.info(ME, \"setUpBeforeTest\", \"server started, log file is \" + consoleLogFileName);\n+        } else if(restoreSavedConfig){\n+            try{\n+                server.stopServer(\"CWWKT0042W\", \"CWWKT0043W\", \"CWWKT0044W\");\n+            } catch (Exception e){\n+                failure = e;\n+            }\n+            server.updateServerConfiguration(savedConfig);\n+            server.startServer(consoleLogFileName, true);\n+            Log.info(getClass(), \"setUpBeforeTest\", \"server restarted, log file is \" +consoleLogFileName);\n+        }\n+        restoreSavedConfig = true;\n+        if(failure !=null)\n+            throw failure;\n+    }\n+\n+    @BeforeClass\n+    public static void setUpOnce() throws Exception {\n+\n+         //Update the bootstrap to include symbolic default variables for\n+        //the <header> attributes. Will be used in testHeaderBootstrapping()\n+        writeBootstrapProperty(server, \"add.header\", \"bootstrappedAddHeader:addHeaderValue\");\n+        writeBootstrapProperty(server, \"set.header\", \"bootstrappedSetHeader:setHeaderValue\");\n+        writeBootstrapProperty(server, \"set.if.missing.header\", \"bootstrappedSetIfMissingHeader:setIfMissingValue\");\n+        writeBootstrapProperty(server, \"remove.header\", \"customHeader\");\n+\n+\n+        //Create the ResponseHeadersTest.war application\n+        ShrinkHelper.defaultDropinApp(server, APP_NAME + \".war\", \"headers.servlets\");\n+        savedConfig = server.getServerConfiguration().clone(); \n+        server.setConfigUpdateTimeout(30*1000); \n+    }\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n+        //Stop the server\n+        if (server != null ) {\n+\n+            //Allow the warning messages we may have generated on purpose\n+            //\n+            // W CWWKT0042W: An empty header name was found when the {0} configuration was parsed. This value is ignored.\n+            //\n+            // W CWWKT0043W: A duplicate header name was found in the [{0}] header using the {1} configuration. All configurations\n+            // for the [{0}] header are ignored. Any header that is defined by the remove, add, set, or setIfMissing configurations\n+            //must be unique across all configurations.\n+            //\n+            // W CWWKT0044W: The [{0}] header, which is marked as a duplicate header name, was found in the {1} configuration.\n+            // The [{0}] header is ignored. Any header that is defined by the {1} configuration must contain unique header names.\n+            if(server.isStarted())\n+                server.stopServer(\"CWWKT0042W\", \"CWWKT0043W\", \"CWWKT0044W\");\n+            server.updateServerConfiguration(savedConfig);\n+        }\n+        \n+    }\n+\n+    /**\n+     * Execute a request/response exchange to the given URL. If the status code is OK (200), return\n+     * all headers in the response so that the tests can evaluate that all conditions are met.\n+     *\n+     * @param url\n+     * @return\n+     */\n+    private static Header[] executeExchangeAndGetHeaders(String url, String testName) throws Exception {\n+\n+        Log.info(ME, testName, \"url: \" + url);\n+\n+        CloseableHttpClient client = null;\n+        CloseableHttpResponse response = null;\n+        HttpGet getMethod = new HttpGet(url);\n+        Header[] headers = null;\n+\n+        try {\n+            client = HttpClientBuilder.create().build();\n+            response = client.execute(getMethod);\n+            String responseText = EntityUtils.toString(response.getEntity());\n+\n+            Log.info(ME, testName, \"\\n\" + \"Response Text:\");\n+            Log.info(ME, testName, \"\\n\" + responseText);\n+\n+            assertEquals(\"The expected status code [200] was not returned\",\n+                                 200, response.getCode());\n+\n+            headers = response.getHeaders();\n+\n+        } finally {\n+            if (client != null)\n+                client.close();\n+            if (response != null)\n+                response.close();\n+            \n+            \n+        \n+        }\n+\n+        return headers;\n+\n+    }\n+\n+    /**\n+     * Utility method to format the various URLs used during the tests\n+     *\n+     * @param path\n+     * @return\n+     */\n+    private String generateURL(String path) {\n+        if (!path.startsWith(\"/\")) {\n+            path = \"/\" + path;\n+        }\n+        return \"http://\" + server.getHostname() + \":\" + server.getHttpDefaultPort() + \"/\" + APP_NAME + path;\n+    }\n+\n+    /**\n+     * Utility method to write a key-value propery to the server's boostrap.properties file\n+     * \n+     *  @param server - server instance\n+     *  @param property - name of the property to add\n+     *  @param value - value of the property to add\n+     */\n+    private static void writeBootstrapProperty(LibertyServer server, String property, String value) throws Exception{\n+\n+        if (property == null || value== null) return;\n+\n+        String bootstrapFilePath = serverFileUtils.getServerFileLoc(server)+\"/bootstrap.properties\";\n+        FileWriter writer = new FileWriter(bootstrapFilePath, true);\n+\n+        writer.append(System.getProperty(\"line.separator\"));\n+        writer.append(property+\"=\"+value);\n+        writer.append(System.getProperty(\"line.separator\"));\n+        \n+        writer.close();\n+    }\n+\n+\n+\n+\n+\n+    /**\n+    *  Header Symbolic Configuration\n+    * \n+    *  Test that the <headers> element can be configured symbolically.\n+    *  A single bootstrap property for each of the <headers> attributes is \n+    *  writen to the boostrap.properties file when the setUp method is first\n+    *  ran. This test will use those property names within each attribute \n+    *  configuration and test that the response contains all values. \n+    * \n+    *  To test the \"remove\" option, ${remove.header} will map to the header\n+    *  [customHeader], which is added by the application by means of the\n+    *  \"testCondition=singleHeader\" parameter. \n+    * \n+    *  The application will also add the header [appVerificationHeader]\n+    * \n+    *  Expectations: \n+    *    Present headers - [bootstrappedAddHeader:addHeaderValue], \n+    *       [bootstrappedSetHeader:setHeaderValue],\n+    *       [bootstrappedSetIfMissingHeader:setIfMissingValue], \n+    *       [appVerificationHeader]\n+    *    Missing headers - [customHeader]\n+  \n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testHeaderBootstrapping() throws Exception {\n+\n+        String testName = \"testHeaderBootstrapping\";\n+        String url = generateURL(\"/ResponseHeadersServlet?testCondition=singleHeader\");\n+        restoreSavedConfig = true;\n+\n+        ServerConfiguration configuration = server.getServerConfiguration();\n+        Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+        HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+        httpEndpoint.getHeaders().setAdd(\"${add.header}\");\n+        httpEndpoint.getHeaders().setSet(\"${set.header}\");\n+        httpEndpoint.getHeaders().setSetIfMissing(\"${set.if.missing.header}\");\n+        httpEndpoint.getHeaders().setRemove(\"${remove.header}\");\n+        server.setMarkToEndOfLog();\n+        server.updateServerConfiguration(configuration);\n+        server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+\n+        //Send the request and verify the expected headers\n+\n+        Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+        HeaderExpectations expectations = new HeaderExpectations();\n+        expectations.expectPresent(\"bootstrappedAddHeader\", \"addHeaderValue\");\n+        expectations.expectPresent(\"bootstrappedSetHeader\", \"setHeaderValue\");\n+        expectations.expectPresent(\"bootstrappedSetIfMissingHeader\", \"setIfMissingValue\");\n+        expectations.expectPresent(\"appVerificationHeader\", null);\n+        expectations.expectMissing(\"customHeader\");\n+        \n+        expectations.evaluate(headers);\n+\n+    }\n+\n+\n+  \n+\n+    /**\n+    *  Header Misconfiguration Series Test 1/4\n+    * \n+    *  Test the misconfigurations messages of the <headers> element.\n+    * \n+    *  This test will purposely misconfigure the \"add\", \"set\", \"setIfMissing\", and \"remove\"  \n+    *  attributes by providing empty header names. It is expected that the 'empty header name'\n+    *  CWWKT0042W message will logged on all four configurations. \n+    * \n+    *  Good configurations should continue working. Therefore, this test will also test correct \n+    *  configurations on all attributes. The test servlet will be invoked with the parameter: \n+    *  [testCondition=singleHeader], which will add the response header: \"customHeader:appValue\".\n+    * \n+    *  The \"remove\" attribute will remove this, so it is expected to not appear on the written \n+    *  response headers. \n+    * \n+    *  The application will add the header [appVerificationHeader].\n+    * \n+    *  Expected present headers: [addHeader: addValue], [addHeader: addValue2], [setHeader], [setIfMissingHeader], \n+    *       [appVerificationHeader]\n+    *  Expected removed header - [customHeader]  \n+    * \n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testHeaderMisconfiguration_EmptyHeaderName() throws Exception {\n+\n+        \n+        String testName = \"testHeaderMisconfiguration_EmptyHeaderName\";\n+        String url = generateURL(\"/ResponseHeadersServlet?testCondition=singleHeader\");\n+        restoreSavedConfig = true;\n+        String stringToSearchFor = \"CWWKT0042W\";\n+\n+        ServerConfiguration configuration = server.getServerConfiguration();\n+        Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+        HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+        httpEndpoint.getHeaders().setAdd(\":testValue, addHeader:addValue, addHeader:addValue2\");\n+        httpEndpoint.getHeaders().setSet(\":testValue, setHeader\");\n+        httpEndpoint.getHeaders().setSetIfMissing(\":testValue, setIfMissingHeader\");\n+        httpEndpoint.getHeaders().setRemove(\"customHeader, \");\n+        server.setMarkToEndOfLog();\n+        server.updateServerConfiguration(configuration);\n+        server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+        Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+        List<String> logs = server.findStringsInLogs(stringToSearchFor);\n+     \n+        assertTrue(\"Expected four occurances of the empty header string but found: \" + logs.size(), logs.size()==4);\n+\n+\n+        //Send the request and verify the expected headers\n+\n+        Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+        HeaderExpectations expectations = new HeaderExpectations();\n+        expectations.expectPresent(\"addHeader\", \"addValue\");\n+        expectations.expectPresent(\"addHeader\", \"addValue2\");\n+        expectations.expectPresent(\"setHeader\");\n+        expectations.expectPresent(\"setIfMissingHeader\");\n+        expectations.expectPresent(\"appVerificationHeader\");\n+        expectations.expectMissing(\"customHeader\");\n+\n+        expectations.evaluate(headers);\n+    \n+    }\n+\n+    /**\n+    *  Header Misconfiguration Series Test 2/4\n+    * \n+    *  Test the misconfigurations messages of the <headers> element.\n+    * \n+    *  This test will purposely misconfigure the \"add\", \"set\", \"setIfMissing\", and \"remove\"  \n+    *  attributes by providing duplicate header names. It is expected that the 'duplicate header \n+    *  name' CWWKT0043W message will logged three times. \n+    * \n+    *  Good configurations should continue working. Therefore, this test will also test correct \n+    *  configurations on all attributes. The test servlet will be invoked with the parameter: \n+    *  [testCondition=singleHeader], which will add the response header: \"customHeader:appValue\".\n+    * \n+    *  The \"remove\" attribute will remove this, so it is expected to not appear on the written \n+    *  response headers. \n+    * \n+    *  The application will add the header [appVerificationHeader]. \n+    * \n+    *  Expected bad headers: [badHeader, anotherBadHeader, yetAnotherBadHeader]\n+    *  Expected headers: [addHeader:addValue, addHeader:addValue2 setHeader, \n+    *       setIfMissingHeader, appVerificationHeader]\n+    *  Expected removed header - [customHeader] - from servlet. \n+    * \n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testHeaderMisconfiguration_DuplicateHeaderName() throws Exception {\n+\n+        \n+        String testName = \"testHeaderMisconfiguration_DuplicateHeaderName\";\n+        restoreSavedConfig = true;\n+        String url = generateURL(\"/ResponseHeadersServlet?testCondition=singleHeader\");\n+        String stringToSearchFor = \"CWWKT0043W\";\n+\n+        ServerConfiguration configuration = server.getServerConfiguration();\n+        Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+        HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+\n+        httpEndpoint.getHeaders().setAdd(\"addHeader: addValue, addHeader:addValue2, badHeader\");\n+        httpEndpoint.getHeaders().setSet(\"badHeader, anotherBadHeader, setHeader\");\n+        httpEndpoint.getHeaders().setSetIfMissing(\"anotherBadHeader, yetAnotherBadHeader, setIfMissingHeader\");\n+        httpEndpoint.getHeaders().setRemove(\"yetAnotherBadHeader, customHeader\");\n+        server.setMarkToEndOfLog();\n+        server.updateServerConfiguration(configuration);\n+        server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+        Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+        List<String> logs = server.findStringsInLogs(stringToSearchFor);\n+     \n+        assertTrue(\"Expected three occurances of the duplicate header name string but found: \" + logs.size(), logs.size()==3);\n+\n+        //Send the request and verify the expected headers\n+\n+        Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+        HeaderExpectations expectations = new HeaderExpectations();\n+        expectations.expectPresent(\"addHeader\", \"addValue\");\n+        expectations.expectPresent(\"addHeader\", \"addValue2\");\n+        expectations.expectPresent(\"setHeader\");\n+        expectations.expectPresent(\"setIfMissingHeader\");\n+        expectations.expectPresent(\"appVerificationHeader\");\n+        expectations.expectMissing(\"customHeader\");\n+\n+        expectations.evaluate(headers);\n+    \n+    }\n+\n+    /**\n+    *  Header Misconfiguration Series Test 3/4\n+    * \n+    *  Test the misconfigurations messages of the <headers> element.\n+    * \n+    *  This test will purposely misconfigure the \"add\", \"set\", \"setIfMissing\", and \"remove\"  \n+    *  attributes by providing previously duplicated header names. That is, it will provide \n+    *  three times the same header name. It is expected that the 'previously duplicated \n+    *  header name' CWWKT0044W message will logged two times. \n+    * \n+    *  Good configurations should continue working. Therefore, this test will also test correct \n+    *  configurations on all attributes. The test servlet will be invoked with the parameter: \n+    *  [testCondition=singleHeader], which will add the response header: \"customHeader:appValue\".\n+    * \n+    *  The \"remove\" attribute will remove this, so it is expected to not appear on the written \n+    *  response headers. \n+    * \n+    *  The application will add the header [appVerificationHeader].\n+    * \n+    *  Bad Headers: [badHeader, anotherBadHeader]\n+    *  Expected present headers: [addHeader, setHeader, setIfMissingHeader]\n+    *  Expected removed header - [customHeader]\n+    * \n+    *  This specifically tests the \"remove\" configuration with \"set-cookie\". No \"set-cookie\" headers are \n+    *  expected. \n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testHeaderMisconfiguration_PreviouslyDuplicatedHeaderName() throws Exception {\n+\n+        \n+        String testName = \"testHeaderMisconfiguration_PreviouslyDuplicatedHeaderName\";\n+        String url = generateURL(\"/ResponseHeadersServlet?testCondition=singleHeader\");\n+        restoreSavedConfig = true;\n+        String stringToSearchFor = \"CWWKT0044W\";\n+\n+        ServerConfiguration configuration = server.getServerConfiguration();\n+        Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+        HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+        httpEndpoint.getHeaders().setAdd(\"badHeader, addHeader\");\n+        httpEndpoint.getHeaders().setSet(\"badHeader, badHeader, anotherBadHeader, setHeader\");\n+        httpEndpoint.getHeaders().setSetIfMissing(\"anotherBadHeader, setIfMissingHeader\");\n+        httpEndpoint.getHeaders().setRemove(\"anotherBadHeader, customHeader\");\n+        server.setMarkToEndOfLog();\n+        server.updateServerConfiguration(configuration);\n+        server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+        Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+        List<String> logs = server.findStringsInLogs(stringToSearchFor);\n+     \n+        assertTrue(\"Expected two occurances of the previously duplicated header string but found: \" + logs.size(), logs.size()==2);\n+\n+        //Send the request and verify the expected headers\n+        Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+        HeaderExpectations expectations = new HeaderExpectations();\n+        expectations.expectPresent(\"addHeader\");\n+        expectations.expectPresent(\"setHeader\");\n+        expectations.expectPresent(\"setIfMissingHeader\");\n+        expectations.expectPresent(\"appVerificationHeader\");\n+        expectations.expectMissing(\"customHeader\");\n+\n+        expectations.evaluate(headers);\n+  \n+    }\n+\n+    /**\n+    * \n+    * Header Misconfiguration Series Test 4/4\n+    * \n+    *  Tests that the configurations of the <headers> element are case insensitive.\n+    * \n+    *  The test servlet will be invoked with the parameter: \n+    *  [testCondition=singleHeader], which will add the response header: \"customHeader:appValue\".\n+    *  This will also add a verification header, \"appVerificationHeader\". \n+    * \n+    *  The \"add\" configuration can add multiple of the same name header, so will be ignored\n+    *  for the purpose of this test, as casing is irrelevant.\n+    * \n+    *  Test Phase 1: Misconfiguration case-insensitive detection\n+    * \n+    *       This test will misconfigure the \"set\", \"setIfMissing\", and \"remove\" attributes with\n+    *       the same header name with different casing. It expected that this will result with \n+    *       the CWWKT0044W \"previously detected duplicate header\" message.  \n+    * \n+    * \n+    *  Test Phase 2: Case Insensitivity when <headers> configuration is consumed by transport\n+    * \n+    *       The configuration will test the \"set\" attribute by configuring the servlet header in all \n+    *       capital letters: \"CUSTOMHEADER: testValue\". It is expected that the resulting response\n+    *       header that is written will be configured \"set\" header. \n+    * \n+    *       The \"setIfMissing\" attribute will be tested by setting the verification header in all \n+    *       capital letters: \"APPVERIFICATIONHEADER: badValue\". This header is added by the application\n+    *       with no value, so it is expected that no value is found for it.\n+    * \n+    *       The \"remove\" attribute will be tested by configuring the date header in all capital \n+    *       letters: \"DATE\". The response is expected to not contain a \"Date\" header.  \n+    * \n+    *  Expected bad headers: [badHeader]\n+    *  Expected headers: [CUSTOMHEADER: testValue, appVerificationHeader]\n+    *  Expected removed header - [Date]\n+    * \n+    *  This specifically tests the \"remove\" configuration with \"set-cookie\". No \"set-cookie\" headers are \n+    *  expected. \n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testHeaderMisconfiguration_CaseInsensitivity() throws Exception{\n+        String testName = \"testHeaderCaseInsensitivity\";\n+        String url = generateURL(\"/ResponseHeadersServlet?testCondition=singleHeader\");\n+        restoreSavedConfig = true;\n+        String stringToSearchFor = \"CWWKT0044W\";\n+\n+        ServerConfiguration configuration = server.getServerConfiguration();\n+        Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+        HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+        httpEndpoint.getHeaders().setSet(\"badHeader, CUSTOMHEADER: testValue\");\n+        httpEndpoint.getHeaders().setSetIfMissing(\"BaDHeAdEr, APPVERIFICATIONHEADER: testValue\");\n+        httpEndpoint.getHeaders().setRemove(\"BADHEADER, DATE\");\n+        server.setMarkToEndOfLog();\n+        server.updateServerConfiguration(configuration);\n+        server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+        Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+        List<String> logs = server.findStringsInLogs(stringToSearchFor);\n+     \n+        assertTrue(\"Expected one occurances of the previously duplicated header string but found: \" + logs.size(), logs.size()==1);\n+\n+        //Send the request and verify the expected headers\n+        Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+        HeaderExpectations expectations = new HeaderExpectations();\n+        expectations.expectPresent(\"customHeader\",\"testValue\");\n+        expectations.expectPresent(\"appVerificationHeader\");\n+        expectations.expectMissing(\"date\");\n+\n+        expectations.evaluate(headers);\n+\n+    }\n+\n+    \n+\n+    /**\n+    * \n+    * Simple Configuration Series 1/4: \"add\" header\n+    * \n+    * Tests that the \"add\" configuration of the <headers> element is able \n+    * to properly append multiple headers to the response that are configured\n+    * with the same name.   \n+    * \n+    * \n+    * The application will add the [appVerificationHeader] header to \n+    * the response. No further application interaction is expected.\n+    * \n+    * Expected headers: [customHeader:testValue], [customHeader:testValue2]\n+    *       [appVerificationHeader]\n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testAddHeader() throws Exception {\n+   \n+            String url = generateURL(\"/ResponseHeadersServlet\");\n+            String testName = \"testAddHeader\";\n+            restoreSavedConfig = true;\n+\n+            ServerConfiguration configuration = server.getServerConfiguration();\n+            Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+            HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+            httpEndpoint.getHeaders().setAdd(\"customHeader:testValue, customHeader:testValue2\");\n+            server.setMarkToEndOfLog();\n+            server.updateServerConfiguration(configuration);\n+            server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+            Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+            //Send the request and verify the expected headers\n+            Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+            HeaderExpectations expectations = new HeaderExpectations();\n+            expectations.expectPresent(\"customHeader\",\"testValue\");\n+            expectations.expectPresent(\"customHeader\", \"testValue2\");\n+            expectations.expectPresent(\"appVerificationHeader\");\n+\n+            expectations.evaluate(headers); \n+    }\n+\n+\n+    /**\n+    * \n+    * Simple Configuration Series 2/4: \"set\" attribute\n+    * \n+    * Tests that the \"set\" configuration of the <headers> element is able \n+    * to properly set the configured header on a response\n+    * \n+    * \n+    * The application will add the [appVerificationHeader] header to \n+    * the response. No further application interaction is expected.\n+    * \n+    * Expected headers: [customHeader:testValue], [appVerificationHeader]\n+    *\n+    * @throws Exception\n+    */    \n+    @Test\n+    public void testSetHeader() throws Exception {\n+   \n+            String url = generateURL(\"/ResponseHeadersServlet\");\n+            String testName = \"testSetHeader\";\n+            restoreSavedConfig = true;\n+\n+            boolean conditionMet = false;\n+\n+            ServerConfiguration configuration = server.getServerConfiguration();\n+            Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+            HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+            httpEndpoint.getHeaders().setSet(\"customHeader:testValue\");\n+            server.setMarkToEndOfLog();\n+            server.updateServerConfiguration(configuration);\n+            server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+            Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+            //Send the request and verify the expected headers\n+            Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+            HeaderExpectations expectations = new HeaderExpectations();\n+            expectations.expectPresent(\"customHeader\",\"testValue\");\n+            expectations.expectPresent(\"appVerificationHeader\");\n+\n+            expectations.evaluate(headers);   \n+ \n+    }\n+\n+    /**\n+    * \n+    * Simple Configuration Series 3/4: \"setIfMissing\" attribute\n+    * \n+    * Tests that the \"setIfMissing\" configuration of the <headers> element is able \n+    * to properly set the configured header on a response when no other header \n+    * of the same name is present.\n+    * \n+    * \n+    * The application will add the [appVerificationHeader] header to \n+    * the response. No further application interaction is expected.\n+    * \n+    * Expected headers: [customHeader:testValue], [appVerificationHeader]\n+    *\n+    * @throws Exception\n+    */  \n+    @Test\n+    public void testSetIfMissingHeader() throws Exception {\n+   \n+            String url = generateURL(\"/ResponseHeadersServlet\");\n+            String testName = \"testSetIfMissingHeader\";\n+            restoreSavedConfig = true;\n+\n+            boolean conditionMet = false;\n+\n+            ServerConfiguration configuration = server.getServerConfiguration();\n+            Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+            HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+            httpEndpoint.getHeaders().setSetIfMissing(\"customHeader:testValue\");\n+            server.setMarkToEndOfLog();\n+            server.updateServerConfiguration(configuration);\n+            server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+            Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+            //Send the request and verify the expected headers\n+            Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+            HeaderExpectations expectations = new HeaderExpectations();\n+            expectations.expectPresent(\"customHeader\",\"testValue\");\n+            expectations.expectPresent(\"appVerificationHeader\");\n+\n+            expectations.evaluate(headers);     \n+ \n+    }\n+\n+    /**\n+    * \n+    * Simple Configuration Series 4/4: \"remove\" attribute\n+    * \n+    * Tests that the \"remove\" configuration of the <headers> element is able \n+    * to properly remove the configured header from a response. \n+    * \n+    * The configuration will be set to remove any header whose name is [customHeader].\n+    * \n+    * The test servlet will be invoked with the parameter: [testCondition=singleHeader], \n+    * which will add the response header: \"customHeader:appValue\". The application will also \n+    * add the [appVerificationHeader] header to the response. No further application \n+    * interaction is expected.\n+    * \n+    * Expected headers: [appVerificationHeader]\n+    *\n+    * @throws Exception\n+    */  \n+     @Test\n+    public void testRemoveHeader() throws Exception {\n+   \n+            String url = generateURL(\"/ResponseHeadersServlet\");\n+            String testName = \"testRemoveHeader\";\n+            restoreSavedConfig = true;\n+\n+            boolean conditionMet = true;\n+            boolean appVerified = false;\n+\n+            ServerConfiguration configuration = server.getServerConfiguration();\n+            Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+            HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+            httpEndpoint.getHeaders().setRemove(\"customHeader\");\n+            server.setMarkToEndOfLog();\n+            server.updateServerConfiguration(configuration);\n+            server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+            Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+            \n+            //Send the request and verify the expected headers\n+            Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+            HeaderExpectations expectations = new HeaderExpectations();\n+            expectations.expectPresent(\"appVerificationHeader\");\n+            expectations.expectMissing(\"customHeader\");\n+\n+            expectations.evaluate(headers);    \n+ \n+    }\n+\n+    /**\n+    * \n+    * Tests that the \"add\" configuration of the <headers> element is able \n+    * to properly append headers to the response without overwritting \n+    * existing headers that share the same name. \n+    * \n+    * The \"testCondition=singleHeader\" request parameter will result in the \n+    * application adding the header [customHeader:appValue]. \n+    * \n+    * The application will also add the [appVerificationHeader] header to \n+    * the response. \n+    * \n+    * Expected headers: [customHeader:testValue], [customHeader:appValue]\n+    *       [appVerificationHeader]\n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testAddHeaderWithHeaderPresent() throws Exception {\n+\n+        String url = generateURL(\"/ResponseHeadersServlet?testCondition=singleHeader\");\n+        String testName = \"testAddHeaderWithHeaderPresent\";\n+        restoreSavedConfig = true;\n+\n+        boolean conditionMet = false;\n+        boolean conditionMet2 = false;\n+\n+        ServerConfiguration configuration = server.getServerConfiguration();\n+        Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+        HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+        httpEndpoint.getHeaders().setAdd(\"customHeader:testValue\");\n+        server.setMarkToEndOfLog();\n+        server.updateServerConfiguration(configuration);\n+        server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+        Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+        //Send the request and verify the expected headers\n+        Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+        HeaderExpectations expectations = new HeaderExpectations();\n+        expectations.expectPresent(\"customHeader\",\"testValue\");\n+        expectations.expectPresent(\"customHeader\", \"appValue\");\n+        expectations.expectPresent(\"appVerificationHeader\");\n+\n+        expectations.evaluate(headers);\n+    \n+    }\n+\n+    /**\n+    *\n+    * Tests that the \"set\" configuration of the <headers> element is able \n+    * to properly overwrite an exisiting header that shares its name with a configured\n+    * \"set\" header. \n+    * \n+    * \n+    * The configuration will define the header [customHeader:testValue] on the \n+    * on the \"set\" attribute.\n+    * \n+    * The test servlet will be invoked with the parameter: [testCondition=singleHeader], \n+    * which will add the response header: \"customHeader:appValue\". The application will also \n+    * add the [appVerificationHeader] header to the response. No further application \n+    * interaction is expected.\n+    * \n+    * It is expected that the the app [customHeader] be overwritten by the configuration.\n+    * \n+    * Expected headers: [customHeader:testValue], [appVerificationHeader]\n+    *\n+    * @throws Exception\n+    */ \n+    @Test\n+    public void testSetHeaderWithHeaderPresent() throws Exception {\n+\n+        String url = generateURL(\"/ResponseHeadersServlet?testCondition=singleHeader\");\n+        String testName = \"testSetHeaderWithHeaderPresent\";\n+        restoreSavedConfig = true;\n+\n+        boolean conditionMet = false;\n+\n+        ServerConfiguration configuration = server.getServerConfiguration();\n+        Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+        HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+        httpEndpoint.getHeaders().setSet(\"customHeader:testValue\");\n+        server.setMarkToEndOfLog();\n+        server.updateServerConfiguration(configuration);\n+        server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+        Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+        //Send the request and verify the expected headers\n+        Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+        HeaderExpectations expectations = new HeaderExpectations();\n+        expectations.expectPresent(\"customHeader\",\"testValue\");\n+        expectations.expectPresent(\"appVerificationHeader\");\n+        expectations.expectMissing(\"customHeader\", \"appValue\");\n+\n+        expectations.evaluate(headers); \n+    \n+    }\n+\n+\n+    \n+    /**\n+    *\n+    * Tests that the \"setIfMissing\" configuration of the <headers> element does not \n+    * overwrite an exisiting header that shares its name with a configured\n+    * \"setIfMissing\" header. \n+    * \n+    * \n+    * The configuration will define the header [customHeader:testValue] on the \n+    * on the \"setIfMissing\" attribute.\n+    * \n+    * The test servlet will be invoked with the parameter: [testCondition=singleHeader], \n+    * which will add the response header: \"customHeader:appValue\". The application will also \n+    * add the [appVerificationHeader] header to the response. No further application \n+    * interaction is expected.\n+    * \n+    * It is expected that the the app [customHeader] will not be overwritten by the configuration.\n+    * \n+    * Expected headers: [customHeader:appValue], [appVerificationHeader]\n+    *\n+    * @throws Exception\n+    */ \n+    @Test\n+    public void testSetIfMissingHeaderWithHeaderPresent() throws Exception {\n+\n+        String url = generateURL(\"/ResponseHeadersServlet?testCondition=singleHeader\");\n+        String testName = \"testSetIfMissingHeaderWithHeaderPresent\";\n+        restoreSavedConfig = true;\n+\n+        boolean conditionMet = false;\n+\n+        ServerConfiguration configuration = server.getServerConfiguration();\n+        Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+        HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+        httpEndpoint.getHeaders().setSetIfMissing(\"customHeader:testValue\");\n+        server.setMarkToEndOfLog();\n+        server.updateServerConfiguration(configuration);\n+        server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+        Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+        //Send the request and verify the expected headers\n+        Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+        HeaderExpectations expectations = new HeaderExpectations();\n+        expectations.expectPresent(\"customHeader\",\"appValue\");\n+        expectations.expectPresent(\"appVerificationHeader\");\n+        expectations.expectMissing(\"customHeader\", \"testValue\");\n+\n+        expectations.evaluate(headers); \n+    \n+    \n+    }\n+\n+\n+    /**\n+    *\n+    * Tests that the \"remove\" configuration of the <headers> element removes\n+    * multiple all instances of the defined header name.\n+    * \n+    * The configuration will use the \"add\" attribute to define two headers with the same name:\n+    * [customConfigHeader: testValue] and [customConfigHeader: testValue2]. \n+    * \n+    * The test servlet will be invoked with the parameter: [testCondition=multipleHeaders], \n+    * which will add the response headers: \"customHeader:appValue\" and \"customHeader:appValue2\". \n+    * The application will also add the [appVerificationHeader] header to the response. No further \n+    * application interaction is expected.\n+    * \n+    * \n+    * Expected present headers: [appVerificationHeader]\n+    * Expected missing headers: [customConfigHeader], [customHeader]\n+    *\n+    * @throws Exception\n+    */ \n+    @Test\n+    public void testRemoveMultipleAppHeader() throws Exception {\n+   \n+            String url = generateURL(\"/ResponseHeadersServlet?testCondition=multipleHeaders\");\n+            String testName = \"testRemoveMultipleAppHeaders\";\n+            restoreSavedConfig = true;\n+\n+            boolean conditionMet = true;\n+            boolean appVerified = false;\n+\n+            ServerConfiguration configuration = server.getServerConfiguration();\n+            Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+            HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+            httpEndpoint.getHeaders().setAdd(\"customConfigHeader:testValue, customConfigHeader:testValue2\");\n+            httpEndpoint.getHeaders().setRemove(\"customHeader, customConfigHeader\");\n+            server.setMarkToEndOfLog();\n+            server.updateServerConfiguration(configuration);\n+            server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+            Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+            //Send the request and verify the expected headers\n+            Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+            HeaderExpectations expectations = new HeaderExpectations();\n+            expectations.expectPresent(\"appVerificationHeader\");\n+            expectations.expectMissing(\"customConfigHeader\");\n+            expectations.expectMissing(\"customHeader\");\n+\n+            expectations.evaluate(headers); \n+    }\n+\n+    /**\n+    * \n+    * Cookie Header Test Series Test 1/4 : \"add\" attribute configuration\n+    * \n+    *  Test the interactions of the <headers> configuration with response Cookie objects and \"Set-Cookie\"\n+    *  headers.\n+    * \n+    *  This test will set a request parameter [testCondition=testCookies], which will instruct the \n+    *  servlet to add the following \"Set-Cookie\" header and Cookie object to the response:\n+    *       response.addHeader(\"set-cookie\", \"chocolate=chip; SameSite=None\");\n+    *       response.addCookie(new Cookie(\"vanilla\",\"sugar\"));\n+    * \n+    *  Cookie objects should be converted into \"Set-Cookie\" headers by the transport.\n+    * \n+    *  The application will also add the header [appVerificationHeader]. \n+    *  \n+    *  This test specifically tests the \"add\" configuration with a \"set-cookie: oatmeal\" header. \n+    *  It expected that the response will write out all three chocolate, vanilla, and oatmeal cookies in the \n+    *  form of \"set-cookie\" headers. \n+    * \n+    *  Expected headers: [set-cookie: chocolate=chip; SameSite=None], [set-cookie: vanilla=sugar], \n+    *       [set-cookie: oatmeal], [appVerificationHeader]\n+    * \n+    * @throws Exception\n+    */\n+    @Test\n+    public void testCookieHeaders_Add() throws Exception {\n+   \n+\n+            String url = generateURL(\"/ResponseHeadersServlet?testCondition=testCookies\");\n+            String testName = \"testCookieHeaders_Add\";\n+            restoreSavedConfig = true;\n+\n+            boolean conditionMet = false;\n+            boolean appVerified = false;\n+\n+            boolean vanillaFound = false; \n+            boolean chocolateFound = false; \n+            boolean oatmealFound = false;\n+\n+\n+            //FIRST REQUEST - <add> configuration\n+\n+            ServerConfiguration configuration = server.getServerConfiguration();\n+            Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+            HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+            httpEndpoint.getHeaders().setAdd(\"set-cookie:oatmeal\");\n+            server.setMarkToEndOfLog();\n+            server.updateServerConfiguration(configuration);\n+            server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+            Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+            //Send the request and verify the expected headers\n+            Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+            HeaderExpectations expectations = new HeaderExpectations();\n+            expectations.expectPresent(\"set-cookie\", \"chocolate=chip; SameSite=None\");\n+            expectations.expectPresent(\"set-cookie\", \"vanilla=sugar\");\n+            expectations.expectPresent(\"set-cookie\", \"oatmeal\");\n+            expectations.expectPresent(\"appVerificationHeader\");\n+\n+            expectations.evaluate(headers);   \n+\n+            \n+    }\n+\n+    /**\n+    *  Cookie Header Test Series Test 2/4 - \"set\" attribute configuration\n+    * \n+    *  Test the interactions of the <headers> configuration with response Cookie objects and \"Set-Cookie\"\n+    *  headers.\n+    * \n+    *  This test will set a request parameter [testCondition=testCookies], which will instruct the \n+    *  servlet to add the following \"Set-Cookie\" header and Cookie object to the response:\n+    *       response.addHeader(\"set-cookie\", \"chocolate=chip; SameSite=None\");\n+    *       response.addCookie(new Cookie(\"vanilla\",\"sugar\"));\n+    * \n+    *  Cookie objects should be converted into \"Set-Cookie\" headers by the transport.\n+    * \n+    *  The application will also add the header [appVerificationHeader]. \n+    *  \n+    *  This test specifically tests the \"set\" configuration with the \"set-cookie: oatmeal\" header. It is expected\n+    *  that the servlet chocolate and vanilla values be overwriten.\n+    * \n+    *  Expected present headers: [set-cookie: oatmeal], [appVerificationHeader]\n+    *  Expected missing headers: [set-cookie: chocolate=chip; SameSite=None], [set-cookie: vanilla=sugar]\n+    * \n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testCookieHeaders_Set() throws Exception {\n+   \n+\n+            String url = generateURL(\"/ResponseHeadersServlet?testCondition=testCookies\");\n+            String testName = \"testCookieHeaders_Set\";\n+            restoreSavedConfig = true;\n+\n+            ServerConfiguration configuration = server.getServerConfiguration();\n+            Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+            HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+            httpEndpoint.getHeaders().setSet(\"set-cookie:oatmeal\");\n+            server.setMarkToEndOfLog();\n+            server.updateServerConfiguration(configuration);\n+            server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+            Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+            //Send the request and verify the expected headers\n+            Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+            HeaderExpectations expectations = new HeaderExpectations();\n+            expectations.expectMissing(\"set-cookie\", \"chocolate=chip; SameSite=None\");\n+            expectations.expectMissing(\"set-cookie\", \"vanilla=sugar\");\n+            expectations.expectPresent(\"set-cookie\", \"oatmeal\");\n+            expectations.expectPresent(\"appVerificationHeader\");\n+\n+            expectations.evaluate(headers);    \n+    }\n+    \n+\n+    /**\n+    *  Cookie Header Test Series Test 3/4 - \"setIfMissing\" attribute configuration\n+    * \n+    *  Test the interactions of the <headers> configuration with response Cookie objects and \"Set-Cookie\"\n+    *  headers.\n+    * \n+    *  This test will set a request parameter [testCondition=testCookies], which will instruct the \n+    *  servlet to add the following \"Set-Cookie\" header and Cookie object to the response:\n+    *       response.addHeader(\"set-cookie\", \"chocolate=chip; SameSite=None\");\n+    *       response.addCookie(new Cookie(\"vanilla\",\"sugar\"));\n+    * \n+    *  Cookie objects should be converted into \"Set-Cookie\" headers by the transport.\n+    * \n+    *  The application will also add the header [appVerificationHeader].\n+    *  \n+    * \n+    *  This test specifically tests the \"setIfMissing\" configuration with the \"set-cookie: oatmeal\" header. It is \n+    *  expected that the response will be written out with both chocolate and vanilla \"set-cookie\" headers.\n+    * \n+    *  Expected present headers: [set-cookie: chocolate=chip; SameSite=None], [set-cookie: vanilla=sugar],\n+    *       [appVerificationHeader]\n+    *  Expected missing headers: [set-cookie: oatmeal]\n+    * \n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testCookieHeaders_SetIfMissing() throws Exception {\n+   \n+\n+            String url = generateURL(\"/ResponseHeadersServlet?testCondition=testCookies\");\n+            String testName = \"testCookieHeaders_SetIfMissing\";\n+            restoreSavedConfig = true;\n+\n+            ServerConfiguration configuration = server.getServerConfiguration();\n+            Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+            HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+            httpEndpoint.getHeaders().setSetIfMissing(\"set-cookie:oatmeal\");\n+            server.setMarkToEndOfLog();\n+            server.updateServerConfiguration(configuration);\n+            server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+            Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+           //Send the request and verify the expected headers\n+            Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+            HeaderExpectations expectations = new HeaderExpectations();\n+            expectations.expectPresent(\"set-cookie\", \"chocolate=chip; SameSite=None\");\n+            expectations.expectPresent(\"set-cookie\", \"vanilla=sugar\");\n+            expectations.expectMissing(\"set-cookie\", \"oatmeal\");\n+            expectations.expectPresent(\"appVerificationHeader\");\n+\n+            expectations.evaluate(headers);  \n+\n+    }\n+\n+    /**\n+    *  Cookie Header Test Series Test 4/4 - \"remove\" attribute configuration\n+    * \n+    *  Test the interactions of the <headers> configuration with response Cookie objects and \"Set-Cookie\"\n+    *  headers.\n+    * \n+    *  This test will set a request parameter [testCondition=testCookies], which will instruct the \n+    *  servlet to add the following \"Set-Cookie\" header and Cookie object to the response:\n+    *       response.addHeader(\"set-cookie\", \"chocolate=chip; SameSite=None\");\n+    *       response.addCookie(new Cookie(\"vanilla\",\"sugar\"));\n+    * \n+    *  Cookie objects should be converted into \"Set-Cookie\" headers by the transport.\n+    * \n+    *  The application will also add the header [appVerificationHeader].\n+    * \n+    *  This specifically tests the \"remove\" configuration with \"set-cookie\". No \"set-cookie\" headers are \n+    *  expected. \n+    * \n+    *  Expected present headers: [appVerificationHeader]    \n+    *  Expected missing headers: [set-cookie: chocolate=chip; SameSite=None], [set-cookie: vanilla=sugar],\n+    *       [set-cookie: oatmeal]\n+    *\n+    * @throws Exception\n+    */\n+    @Test\n+    public void testCookieHeaders_Remove() throws Exception {\n+   \n+\n+            String url = generateURL(\"/ResponseHeadersServlet?testCondition=testCookies\");\n+            String testName = \"testCookieHeaders_Remove\";\n+            restoreSavedConfig = true;\n+\n+            boolean conditionMet = true;\n+            boolean appVerified = false;\n+\n+            ServerConfiguration configuration = server.getServerConfiguration();\n+            Log.info(ME, testName, \"Server configuration that was saved: \" + configuration);\n+\n+            HttpEndpoint httpEndpoint = configuration.getHttpEndpoints().getById(\"defaultHttpEndpoint\");\n+            httpEndpoint.getHeaders().setRemove(\"set-cookie\");\n+            server.setMarkToEndOfLog();\n+            server.updateServerConfiguration(configuration);\n+            server.waitForConfigUpdateInLogUsingMark(Collections.singleton(APP_NAME), true);\n+\n+            Log.info(ME, testName, \"Updated server configuration: \" + configuration);\n+\n+            //Send the request and verify the expected headers\n+            Header[] headers = executeExchangeAndGetHeaders(url, testName);\n+\n+            HeaderExpectations expectations = new HeaderExpectations();\n+            expectations.expectMissing(\"set-cookie\");\n+            expectations.expectPresent(\"appVerificationHeader\");\n+\n+            expectations.evaluate(headers); \n+\n+    }\n+\n+\n+    @Test\n+    public void testHeadersDuringLogin() throws Exception {\n+\n+        boolean headerFound = false;\n+        String testName = \"testHeadersDuringLogin\";\n+        restoreSavedConfig = true;\n+        String expectedResponse = \"Welcome to the SameSiteSecurityServlet!\";\n+        Header expectedHeader = null;\n+\n+        //server.saveServerConfiguration();\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDg3MDI1MQ=="}, "originalCommit": {"oid": "b8b5ed9629e8505b27b8f40e02601e2aff1e91ec"}, "originalPosition": 1219}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1590, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}