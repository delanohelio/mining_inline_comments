{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNDQ0NDM3", "number": 11073, "title": "Adding beta tag", "bodyText": "#11252", "createdAt": "2020-02-26T18:47:36Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/11073", "merged": true, "mergeCommit": {"oid": "fd97c38063a984cd3d577f297138466a4c09c6c4"}, "closed": true, "closedAt": "2020-03-23T14:08:09Z", "author": {"login": "AlvinChacko"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJyyiJgFqTM2NzQ1ODk2OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPjPc3AH2gAyMzgwNDQ0NDM3OjQ0OGZiMDk4NzJjZjU0NmEwY2YyNTVlMzFiNmMzMjA1YTgyNDNlYzE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NDU4OTY5", "url": "https://github.com/OpenLiberty/open-liberty/pull/11073#pullrequestreview-367458969", "createdAt": "2020-03-02T19:18:17Z", "commit": {"oid": "710cc522a0ca0e47b14fb250647e541d51d9a303"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOToxODoxN1rOFwr-Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOToxOToyMVrOFwsABQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5NjM1NQ==", "bodyText": "Fix this comment's grammar/spacing", "url": "https://github.com/OpenLiberty/open-liberty/pull/11073#discussion_r386596355", "createdAt": "2020-03-02T19:18:17Z", "author": {"login": "FlynnIBM"}, "path": "dev/com.ibm.ws.kernel.boot.core/src/com/ibm/ws/kernel/productinfo/ProductInfo.java", "diffHunk": "@@ -225,6 +227,46 @@ public String getProperty(String key) {\n         return value;\n     }\n \n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "710cc522a0ca0e47b14fb250647e541d51d9a303"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5Njg2OQ==", "bodyText": "Remove system.outs from function", "url": "https://github.com/OpenLiberty/open-liberty/pull/11073#discussion_r386596869", "createdAt": "2020-03-02T19:19:21Z", "author": {"login": "FlynnIBM"}, "path": "dev/com.ibm.ws.kernel.boot.core/src/com/ibm/ws/kernel/productinfo/ProductInfo.java", "diffHunk": "@@ -225,6 +227,46 @@ public String getProperty(String key) {\n         return value;\n     }\n \n+    /**\n+     * Helper method to check if EARLY_ACCESS is detection in the edition\n+     *\n+     */\n+    public boolean isBeta() {\n+        boolean isBeta;\n+        String productEdition = this.getEdition();\n+        if (productEdition == null) {\n+            isBeta = false;\n+        } else {\n+            isBeta = productEdition.equals(EARLY_ACCESS);\n+        }\n+        return isBeta;\n+    }\n+\n+    /**\n+     * Checks if the current version is in early access and then sets the BETA_EDITION_JVM_PROPERTY. It will\n+     * be set to true if it found the early access tag else false.\n+     *\n+     */\n+    public static void isAnyProductBeta() {\n+        try {\n+            System.out.println(\"Inside isAnyProductBeta \" + System.getProperty(BETA_EDITION_JVM_PROPERTY));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "710cc522a0ca0e47b14fb250647e541d51d9a303"}, "originalPosition": 44}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "710cc522a0ca0e47b14fb250647e541d51d9a303", "author": {"user": null}, "url": "https://github.com/OpenLiberty/open-liberty/commit/710cc522a0ca0e47b14fb250647e541d51d9a303", "committedDate": "2020-02-26T18:45:21Z", "message": "Added test"}, "afterCommit": {"oid": "c6db636a14c57f9e0905ff2c921235fbb85e7c6e", "author": {"user": null}, "url": "https://github.com/OpenLiberty/open-liberty/commit/c6db636a14c57f9e0905ff2c921235fbb85e7c6e", "committedDate": "2020-03-02T20:24:05Z", "message": "Minor edits to comments. Made sure beta system property set to false if exception thrown"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5OTIzMzQ2", "url": "https://github.com/OpenLiberty/open-liberty/pull/11073#pullrequestreview-369923346", "createdAt": "2020-03-05T21:21:52Z", "commit": {"oid": "c6db636a14c57f9e0905ff2c921235fbb85e7c6e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMToyMTo1MlrOFykm7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMToyMTo1MlrOFykm7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU3MjkwOA==", "bodyText": "The method name isAnyProductBeta seems odd.  I was expecting it to return something. Its purpose seems to be to ensure the java property is set.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11073#discussion_r388572908", "createdAt": "2020-03-05T21:21:52Z", "author": {"login": "tspewak"}, "path": "dev/com.ibm.ws.kernel.boot.core/src/com/ibm/ws/kernel/productinfo/ProductInfo.java", "diffHunk": "@@ -225,6 +227,41 @@ public String getProperty(String key) {\n         return value;\n     }\n \n+    /**\n+     * Helper method for determining if product is EARLY_ACCESS edition\n+     */\n+    public boolean isBeta() {\n+        boolean isBeta;\n+        String productEdition = this.getEdition();\n+        if (productEdition == null) {\n+            isBeta = false;\n+        } else {\n+            isBeta = productEdition.equals(EARLY_ACCESS);\n+        }\n+        return isBeta;\n+    }\n+\n+    /**\n+     * Sets the com.ibm.ws.beta.edition JVM property to true if the Liberty version is EARLY_ACCESS,\n+     * otherwise sets it to false.\n+     */\n+    public static void isAnyProductBeta() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6db636a14c57f9e0905ff2c921235fbb85e7c6e"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5OTI0NTM4", "url": "https://github.com/OpenLiberty/open-liberty/pull/11073#pullrequestreview-369924538", "createdAt": "2020-03-05T21:23:47Z", "commit": {"oid": "c6db636a14c57f9e0905ff2c921235fbb85e7c6e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMToyMzo0N1rOFykqpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMToyMzo0N1rOFykqpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU3Mzg2MQ==", "bodyText": "would be better if it was   \"JVM option com.ibm.ws.beta.edition was not found\"", "url": "https://github.com/OpenLiberty/open-liberty/pull/11073#discussion_r388573861", "createdAt": "2020-03-05T21:23:47Z", "author": {"login": "tspewak"}, "path": "dev/com.ibm.ws.kernel.boot_fat/fat/src/com/ibm/ws/kernel/boot/ServerStartJVMOptionsTest.java", "diffHunk": "@@ -564,6 +564,79 @@ public void testStartServerCmdlineJVMOptionsAndSystemProps() throws Exception {\n         server.stopServer();\n     }\n \n+    /**\n+     * This test ensures the beta system property is set. It can either be true or false depending on the\n+     * early access tag in the productInfo\n+     */\n+    @Test\n+    @Mode(TestMode.LITE)\n+    public void testServerStartBETAJVMOption() throws Exception {\n+        Log.entering(c, testName.getMethodName());\n+\n+        String[] parms = new String[2];\n+        parms[0] = \"start\";\n+        parms[1] = SERVER_NAME;\n+\n+        Properties envVars = new Properties();\n+        envVars.put(\"CDPATH\", \".\");\n+\n+        initialize();\n+\n+        ProgramOutput po = server.getMachine().execute(serverCommand, parms, executionDir, envVars);\n+        Log.info(c, testName.getMethodName(), \"server start stdout = \" + po.getStdout());\n+        Log.info(c, testName.getMethodName(), \"server start stderr = \" + po.getStderr());\n+        server.waitForStringInLog(\"CWWKF0011I\");\n+        server.resetStarted();\n+\n+        server.serverDump();\n+        File[] filesAfterDump = new File(executionDir + \"/usr/servers/\" + SERVER_NAME).listFiles();\n+\n+        File dumpFile = new File(\"\");\n+        for (File f : filesAfterDump) {\n+            String fileName = f.getName();\n+            Log.info(c, testName.getMethodName(), \"Found file: \" + fileName);\n+            if (fileName.startsWith(SERVER_NAME + \".dump\") && fileName.endsWith(\".zip\")) {\n+                dumpFile = f;\n+                break;\n+            }\n+        }\n+\n+        if (dumpFile.getPath().compareTo(\"\") == 0) {\n+            fail(\"The Dump File was not found\");\n+        }\n+\n+        ZipFile zipFile = new ZipFile(dumpFile);\n+\n+        boolean foundTest1 = false;\n+        for (Enumeration<? extends ZipEntry> en = zipFile.entries(); en.hasMoreElements();) {\n+            ZipEntry entry = en.nextElement();\n+            String entryName = entry.getName();\n+            if (entryName.endsWith(\"JavaRuntimeInformation.txt\")) {\n+                InputStream inputstream = zipFile.getInputStream(entry);\n+                BufferedReader reader = new BufferedReader(new InputStreamReader(inputstream));\n+                String line;\n+                int i = 0;\n+                while ((line = reader.readLine()) != null) {\n+                    Log.info(c, testName.getMethodName(), \"Run\" + i + \": \" + line);\n+                    if (line.contains(\"com.ibm.ws.beta.edition=false\") || line.contains(\"com.ibm.ws.beta.edition=true\")) {\n+                        foundTest1 = true;\n+                        break;\n+                    }\n+                    i++;\n+                }\n+\n+                reader.close();\n+                inputstream.close();\n+            }\n+        }\n+\n+        zipFile.close();\n+        dumpFile.delete();\n+        assertTrue(\"The jvm option was not found\", foundTest1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6db636a14c57f9e0905ff2c921235fbb85e7c6e"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5OTM5Nzkw", "url": "https://github.com/OpenLiberty/open-liberty/pull/11073#pullrequestreview-369939790", "createdAt": "2020-03-05T21:48:41Z", "commit": {"oid": "c6db636a14c57f9e0905ff2c921235fbb85e7c6e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTo0ODo0MlrOFylaVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTo0ODo0MlrOFylaVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4NjA3MQ==", "bodyText": "copyright...apparently any change other than comment updates require a copyright update....Add the second year to the copyright above.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11073#discussion_r388586071", "createdAt": "2020-03-05T21:48:42Z", "author": {"login": "ginnick"}, "path": "dev/com.ibm.ws.kernel.boot.core/src/com/ibm/ws/kernel/productinfo/ProductInfo.java", "diffHunk": "@@ -41,6 +41,8 @@\n     public static final String COM_IBM_WEBSPHERE_PRODUCTEDITION_KEY = \"com.ibm.websphere.productEdition\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6db636a14c57f9e0905ff2c921235fbb85e7c6e"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5OTQxNTcy", "url": "https://github.com/OpenLiberty/open-liberty/pull/11073#pullrequestreview-369941572", "createdAt": "2020-03-05T21:51:52Z", "commit": {"oid": "c6db636a14c57f9e0905ff2c921235fbb85e7c6e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTo1MTo1MlrOFylg2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTo1MTo1MlrOFylg2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4NzczOA==", "bodyText": "copyright.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11073#discussion_r388587738", "createdAt": "2020-03-05T21:51:52Z", "author": {"login": "ginnick"}, "path": "dev/com.ibm.ws.kernel.service/src/com/ibm/ws/kernel/service/location/internal/Activator.java", "diffHunk": "@@ -23,6 +23,7 @@\n import com.ibm.websphere.ras.Tr;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6db636a14c57f9e0905ff2c921235fbb85e7c6e"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5OTQyNDk4", "url": "https://github.com/OpenLiberty/open-liberty/pull/11073#pullrequestreview-369942498", "createdAt": "2020-03-05T21:53:20Z", "commit": {"oid": "c6db636a14c57f9e0905ff2c921235fbb85e7c6e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxODQ2NDEw", "url": "https://github.com/OpenLiberty/open-liberty/pull/11073#pullrequestreview-371846410", "createdAt": "2020-03-10T10:48:10Z", "commit": {"oid": "4d62e1aa2cf17450dcf734e15c4c93eba87abc87"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMDo0ODoxMFrOF0JxNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMDo0ODoxMFrOF0JxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMDMyNg==", "bodyText": "So what happens if the user has set this system property to \"YES\"? Please can you add a public static boolean getBetaEdition() method for internal components to use to get this value really easily? They shouldn't need to worry about what the exact value of the system property is or wether they need to call the method inside a doPriv or even use ThreadIdentityManager.runAsServer().", "url": "https://github.com/OpenLiberty/open-liberty/pull/11073#discussion_r390230326", "createdAt": "2020-03-10T10:48:10Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.kernel.boot.core/src/com/ibm/ws/kernel/productinfo/ProductInfo.java", "diffHunk": "@@ -225,6 +227,41 @@ public String getProperty(String key) {\n         return value;\n     }\n \n+    /**\n+     * Helper method for determining if product is EARLY_ACCESS edition\n+     */\n+    public boolean isBeta() {\n+        boolean isBeta;\n+        String productEdition = this.getEdition();\n+        if (productEdition == null) {\n+            isBeta = false;\n+        } else {\n+            isBeta = productEdition.equals(EARLY_ACCESS);\n+        }\n+        return isBeta;\n+    }\n+\n+    /**\n+     * Sets the com.ibm.ws.beta.edition JVM property to true if the Liberty version is EARLY_ACCESS,\n+     * otherwise sets it to false.\n+     */\n+    public static void setBetaEditionJVMProperty() {\n+        try {\n+            if (System.getProperty(BETA_EDITION_JVM_PROPERTY) == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d62e1aa2cf17450dcf734e15c4c93eba87abc87"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2OTMyNTQ5", "url": "https://github.com/OpenLiberty/open-liberty/pull/11073#pullrequestreview-376932549", "createdAt": "2020-03-18T14:44:08Z", "commit": {"oid": "8c2486137fef8c7a8b3b94602455a56e734aeb43"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2OTQwNDM1", "url": "https://github.com/OpenLiberty/open-liberty/pull/11073#pullrequestreview-376940435", "createdAt": "2020-03-18T14:52:11Z", "commit": {"oid": "8c2486137fef8c7a8b3b94602455a56e734aeb43"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDo1MjoxMVrOF4Ipcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDo1MjoxMVrOF4Ipcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQwNjI1OQ==", "bodyText": "Ditch the d", "url": "https://github.com/OpenLiberty/open-liberty/pull/11073#discussion_r394406259", "createdAt": "2020-03-18T14:52:11Z", "author": {"login": "FlynnIBM"}, "path": "dev/com.ibm.ws.kernel.boot.core/src/com/ibm/ws/kernel/productinfo/ProductInfo.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 2012 IBM Corporation and others.\n+d * Copyright (c) 2012, 2020 IBM Corporation and others.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c2486137fef8c7a8b3b94602455a56e734aeb43"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2OTQzNTI3", "url": "https://github.com/OpenLiberty/open-liberty/pull/11073#pullrequestreview-376943527", "createdAt": "2020-03-18T14:55:11Z", "commit": {"oid": "8c2486137fef8c7a8b3b94602455a56e734aeb43"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2OTQ3MzA0", "url": "https://github.com/OpenLiberty/open-liberty/pull/11073#pullrequestreview-376947304", "createdAt": "2020-03-18T14:58:52Z", "commit": {"oid": "4dbe42dc9a0ac3e846fe07f1853fb9e55a4da0d4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2OTk2Mzk5", "url": "https://github.com/OpenLiberty/open-liberty/pull/11073#pullrequestreview-376996399", "createdAt": "2020-03-18T15:48:59Z", "commit": {"oid": "4dbe42dc9a0ac3e846fe07f1853fb9e55a4da0d4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd68168f60ab3ea01ab05e311305a6572cad3d3f", "author": {"user": null}, "url": "https://github.com/OpenLiberty/open-liberty/commit/fd68168f60ab3ea01ab05e311305a6572cad3d3f", "committedDate": "2020-03-20T03:36:20Z", "message": "Beta fence kernel code to create beta edition system property."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4dbe42dc9a0ac3e846fe07f1853fb9e55a4da0d4", "author": {"user": {"login": "mmerali96", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/4dbe42dc9a0ac3e846fe07f1853fb9e55a4da0d4", "committedDate": "2020-03-18T14:55:52Z", "message": "removed stray charecter in copyright header"}, "afterCommit": {"oid": "fd68168f60ab3ea01ab05e311305a6572cad3d3f", "author": {"user": null}, "url": "https://github.com/OpenLiberty/open-liberty/commit/fd68168f60ab3ea01ab05e311305a6572cad3d3f", "committedDate": "2020-03-20T03:36:20Z", "message": "Beta fence kernel code to create beta edition system property."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "448fb09872cf546a0cf255e31b6c3205a8243ec1", "author": {"user": {"login": "mmerali96", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/448fb09872cf546a0cf255e31b6c3205a8243ec1", "committedDate": "2020-03-20T16:38:30Z", "message": "Merge branch 'integration' into mfa"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3144, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}