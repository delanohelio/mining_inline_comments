{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3MTUwMjEx", "number": 14590, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTozNzoxNFrOEw05fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzo1Njo1NlrOEw4aGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjMzNzkxOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.fat.common.jwt/test-applications/jwtbuilder/src/com/ibm/ws/security/fat/common/apps/jwtbuilder/JwtBuilderServlet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNTozNzoxNFrOHmn5jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODoyNzowNVrOHmui4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2MTY0NA==", "bodyText": "Looks like a redundant if check here.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14590#discussion_r510261644", "createdAt": "2020-10-22T15:37:14Z", "author": {"login": "ayoho"}, "path": "dev/com.ibm.ws.security.fat.common.jwt/test-applications/jwtbuilder/src/com/ibm/ws/security/fat/common/apps/jwtbuilder/JwtBuilderServlet.java", "diffHunk": "@@ -157,12 +194,17 @@ private void addToClaimMap(Map<String, Object> claimMap, Entry<String, String[]>\n         }\n     }\n \n-//    private JwtToken buildJwt(String builderConfigId) throws InvalidBuilderException, InvalidClaimException, JwtException {\n-//        JwtBuilder builder = JwtBuilder.create(builderConfigId);\n-//        //todo - need to figure out how to put upn into the token\n-//        builder.claim(\"upn\", \"testuser\");\n-//        System.out.println(\"builder content: \" + builder.toString());\n-//        return builder.buildJwt();\n-//    }\n+    protected void setEncryptWith(String keyMgmtAlg, String encryptKeyString, String contentEncryptAlg) throws Exception {\n+\n+        if (keyMgmtAlg != null || encryptKeyString != null || contentEncryptAlg != null) {\n+\n+            if (keyMgmtAlg != null || encryptKeyString != null || contentEncryptAlg != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b105df44248747b52b6e9854ddaff25c6bb3b3"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM3MDUyOQ==", "bodyText": "argh...  cut/paste - I'll remove it when I make my next delivery...", "url": "https://github.com/OpenLiberty/open-liberty/pull/14590#discussion_r510370529", "createdAt": "2020-10-22T18:27:05Z", "author": {"login": "c00crane"}, "path": "dev/com.ibm.ws.security.fat.common.jwt/test-applications/jwtbuilder/src/com/ibm/ws/security/fat/common/apps/jwtbuilder/JwtBuilderServlet.java", "diffHunk": "@@ -157,12 +194,17 @@ private void addToClaimMap(Map<String, Object> claimMap, Entry<String, String[]>\n         }\n     }\n \n-//    private JwtToken buildJwt(String builderConfigId) throws InvalidBuilderException, InvalidClaimException, JwtException {\n-//        JwtBuilder builder = JwtBuilder.create(builderConfigId);\n-//        //todo - need to figure out how to put upn into the token\n-//        builder.claim(\"upn\", \"testuser\");\n-//        System.out.println(\"builder content: \" + builder.toString());\n-//        return builder.buildJwt();\n-//    }\n+    protected void setEncryptWith(String keyMgmtAlg, String encryptKeyString, String contentEncryptAlg) throws Exception {\n+\n+        if (keyMgmtAlg != null || encryptKeyString != null || contentEncryptAlg != null) {\n+\n+            if (keyMgmtAlg != null || encryptKeyString != null || contentEncryptAlg != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2MTY0NA=="}, "originalCommit": {"oid": "b6b105df44248747b52b6e9854ddaff25c6bb3b3"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjkxMjg4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.jwt_fat.consumer/fat/src/com/ibm/ws/security/jwt/fat/consumer/JwtConsumerApiConfigTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNzo1Njo1NlrOHmtfSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODoyNjo1OFrOHmuioA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM1MzIyNQ==", "bodyText": "This is a scenario I'm going to have to think about. At the moment we'll go ahead and try to decrypt a JWE regardless of what the consumer's configuration says (i.e. they may not have keyManagementKeyAlias set). This scenario shows that we'll end up trying to use some default key in the server-wide keystore. As we've been talking about, https://github.com/eclipse/microprofile-jwt-auth/blob/master/spec/src/main/asciidoc/configuration.asciidoc#requirements-for-accepting-signed-and-encrypted-tokens suggests that we shouldn't accept JWEs in the case where the mp.jwt.decrypt.key.location MP Config property (or, in our case, the keyManagementKeyAlias config attribute) isn't set.\nI may very well add a new message for this scenario.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14590#discussion_r510353225", "createdAt": "2020-10-22T17:56:56Z", "author": {"login": "ayoho"}, "path": "dev/com.ibm.ws.security.jwt_fat.consumer/fat/src/com/ibm/ws/security/jwt/fat/consumer/JwtConsumerApiConfigTests.java", "diffHunk": "@@ -1815,4 +1793,336 @@ public void JwtConsumerApiConfigTests_single_valid_amr() throws Exception {\n \n     }\n \n+    // JwtConsumerApiConfigTests_goodKeyManagementKeyAlias_goodSslRef same as JwtConsumerApiConfigTests_encryptRS256_decryptRS256\n+    // JwtConsumerApiConfigTests_nullKeyManagementKeyAlias_goodSslRef same as JwtConsumerApiConfigTests_tokenNotEncrypted_consumerDecrypts\n+    /**\n+     * server.xml has a config that specifies an invalid key management key algorithm - this test ensures that\n+     * after building a jwt that is encrypted with the matching public key, we can not decrypt the token because\n+     * it can't find the certificate to decrypt the token\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void JwtConsumerApiConfigTests_badKeyManagementKeyAlias_goodSslRef() throws Exception {\n+\n+        String jwtToken = actions.getJwtTokenUsingBuilder(_testName, consumerServer, \"key_encrypt_good_RS256\", null);\n+\n+        Expectations expectations = consumerHelpers.buildNegativeAttributeExpectations(JwtConsumerMessageConstants.CWWKS6056E_CAN_NOT_EXTRACT_JWS_FROM_JWE + \".+CertificateException\", currentAction, consumerServer, \"bad_decrypt_RS256\");\n+\n+        Page response = actions.invokeJwtConsumer(_testName, consumerServer, \"bad_decrypt_RS256\", jwtToken);\n+        validationUtils.validateResult(response, currentAction, expectations);\n+\n+    }\n+\n+    /**\n+     * server.xml has a config that specifies a key management key algorithm, but omits the sslRef - the server wide\n+     * SSL config does not use a keystore that contains the alias specifies - this test ensures that\n+     * after building a jwt that is encrypted with the matching public key, we can not decrypt the token because\n+     * it can't find the certificate to decrypt the token\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void JwtConsumerApiConfigTests_goodKeyManagementKeyAlias_missingSslRef_refMissingFromServerwideSSL() throws Exception {\n+\n+        String jwtToken = actions.getJwtTokenUsingBuilder(_testName, consumerServer, \"key_encrypt_good_RS256\", null);\n+\n+        Expectations expectations = consumerHelpers.buildNegativeAttributeExpectations(JwtConsumerMessageConstants.CWWKS6056E_CAN_NOT_EXTRACT_JWS_FROM_JWE + \".+InvalidKeyException\", currentAction, consumerServer, \"missing_sslRef_decrypt_RS256\");\n+\n+        Page response = actions.invokeJwtConsumer(_testName, consumerServer, \"missing_sslRef_decrypt_RS256\", jwtToken);\n+        validationUtils.validateResult(response, currentAction, expectations);\n+\n+    }\n+\n+    /**\n+     * server.xml has a config that specifies a key management key algorithm, but specifies and inavalid sslRef - the server wide\n+     * SSL config does not use a keystore that contains the alias specifies - this test ensures that\n+     * after building a jwt that is encrypted with the matching public key, we can not decrypt the token because\n+     * it can't find the certificate to decrypt the token\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void JwtConsumerApiConfigTests_goodKeyManagementKeyAlias_baddSslRef() throws Exception {\n+\n+        String jwtToken = actions.getJwtTokenUsingBuilder(_testName, consumerServer, \"key_encrypt_good_RS256\", null);\n+\n+        Expectations expectations = consumerHelpers.buildNegativeAttributeExpectations(JwtConsumerMessageConstants.CWWKS6056E_CAN_NOT_EXTRACT_JWS_FROM_JWE + \".+InvalidKeyException\", currentAction, consumerServer, \"bad_sslRef_decrypt_RS256\");\n+\n+        Page response = actions.invokeJwtConsumer(_testName, consumerServer, \"bad_sslRef_decrypt_RS256\", jwtToken);\n+        validationUtils.validateResult(response, currentAction, expectations);\n+\n+    }\n+\n+    /**\n+     * server.xml has a config that specifies a key management key algorithm that is not supported -this test ensures that\n+     * after building a jwt that is encrypted with the matching public key, we can not decrypt the token because\n+     * it can't use an EC alg\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void JwtConsumerApiConfigTests_decryptWithUnsupportedAlg() throws Exception {\n+\n+        String jwtToken = actions.getJwtTokenUsingBuilder(_testName, consumerServer, \"key_encrypt_good_RS256\", null);\n+\n+        Expectations expectations = consumerHelpers.buildNegativeAttributeExpectations(JwtConsumerMessageConstants.CWWKS6056E_CAN_NOT_EXTRACT_JWS_FROM_JWE + \".+InvalidKeyException\", currentAction, consumerServer, \"decrypt_ES384\");\n+\n+        Page response = actions.invokeJwtConsumer(_testName, consumerServer, \"decrypt_ES384\", jwtToken);\n+        validationUtils.validateResult(response, currentAction, expectations);\n+\n+    }\n+\n+    /**\n+     * server.xml has a config that does not specify a keyManagementKeyAlias - this test ensures that after building a jwt\n+     * that is encrypted, we can not decrypt the token because there is not keyManagementKeyAlg\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void JwtConsumerApiConfigTests_encryptedToken_consumerDoesNotDecrypt() throws Exception {\n+\n+        String jwtToken = actions.getJwtTokenUsingBuilder(_testName, consumerServer, \"key_encrypt_good_RS256\", null);\n+\n+        Expectations expectations = consumerHelpers.buildNegativeAttributeExpectations(JwtConsumerMessageConstants.CWWKS6056E_CAN_NOT_EXTRACT_JWS_FROM_JWE + \".+InvalidKeyException\", currentAction, consumerServer, JwtConsumerConstants.SIGALG_RS256);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b105df44248747b52b6e9854ddaff25c6bb3b3"}, "originalPosition": 664}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM3MDQ2NA==", "bodyText": "I've opened issue #14652 to revisit this test (just in case new failure messages, ... do not make this test fail as it's pretty generic)", "url": "https://github.com/OpenLiberty/open-liberty/pull/14590#discussion_r510370464", "createdAt": "2020-10-22T18:26:58Z", "author": {"login": "c00crane"}, "path": "dev/com.ibm.ws.security.jwt_fat.consumer/fat/src/com/ibm/ws/security/jwt/fat/consumer/JwtConsumerApiConfigTests.java", "diffHunk": "@@ -1815,4 +1793,336 @@ public void JwtConsumerApiConfigTests_single_valid_amr() throws Exception {\n \n     }\n \n+    // JwtConsumerApiConfigTests_goodKeyManagementKeyAlias_goodSslRef same as JwtConsumerApiConfigTests_encryptRS256_decryptRS256\n+    // JwtConsumerApiConfigTests_nullKeyManagementKeyAlias_goodSslRef same as JwtConsumerApiConfigTests_tokenNotEncrypted_consumerDecrypts\n+    /**\n+     * server.xml has a config that specifies an invalid key management key algorithm - this test ensures that\n+     * after building a jwt that is encrypted with the matching public key, we can not decrypt the token because\n+     * it can't find the certificate to decrypt the token\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void JwtConsumerApiConfigTests_badKeyManagementKeyAlias_goodSslRef() throws Exception {\n+\n+        String jwtToken = actions.getJwtTokenUsingBuilder(_testName, consumerServer, \"key_encrypt_good_RS256\", null);\n+\n+        Expectations expectations = consumerHelpers.buildNegativeAttributeExpectations(JwtConsumerMessageConstants.CWWKS6056E_CAN_NOT_EXTRACT_JWS_FROM_JWE + \".+CertificateException\", currentAction, consumerServer, \"bad_decrypt_RS256\");\n+\n+        Page response = actions.invokeJwtConsumer(_testName, consumerServer, \"bad_decrypt_RS256\", jwtToken);\n+        validationUtils.validateResult(response, currentAction, expectations);\n+\n+    }\n+\n+    /**\n+     * server.xml has a config that specifies a key management key algorithm, but omits the sslRef - the server wide\n+     * SSL config does not use a keystore that contains the alias specifies - this test ensures that\n+     * after building a jwt that is encrypted with the matching public key, we can not decrypt the token because\n+     * it can't find the certificate to decrypt the token\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void JwtConsumerApiConfigTests_goodKeyManagementKeyAlias_missingSslRef_refMissingFromServerwideSSL() throws Exception {\n+\n+        String jwtToken = actions.getJwtTokenUsingBuilder(_testName, consumerServer, \"key_encrypt_good_RS256\", null);\n+\n+        Expectations expectations = consumerHelpers.buildNegativeAttributeExpectations(JwtConsumerMessageConstants.CWWKS6056E_CAN_NOT_EXTRACT_JWS_FROM_JWE + \".+InvalidKeyException\", currentAction, consumerServer, \"missing_sslRef_decrypt_RS256\");\n+\n+        Page response = actions.invokeJwtConsumer(_testName, consumerServer, \"missing_sslRef_decrypt_RS256\", jwtToken);\n+        validationUtils.validateResult(response, currentAction, expectations);\n+\n+    }\n+\n+    /**\n+     * server.xml has a config that specifies a key management key algorithm, but specifies and inavalid sslRef - the server wide\n+     * SSL config does not use a keystore that contains the alias specifies - this test ensures that\n+     * after building a jwt that is encrypted with the matching public key, we can not decrypt the token because\n+     * it can't find the certificate to decrypt the token\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void JwtConsumerApiConfigTests_goodKeyManagementKeyAlias_baddSslRef() throws Exception {\n+\n+        String jwtToken = actions.getJwtTokenUsingBuilder(_testName, consumerServer, \"key_encrypt_good_RS256\", null);\n+\n+        Expectations expectations = consumerHelpers.buildNegativeAttributeExpectations(JwtConsumerMessageConstants.CWWKS6056E_CAN_NOT_EXTRACT_JWS_FROM_JWE + \".+InvalidKeyException\", currentAction, consumerServer, \"bad_sslRef_decrypt_RS256\");\n+\n+        Page response = actions.invokeJwtConsumer(_testName, consumerServer, \"bad_sslRef_decrypt_RS256\", jwtToken);\n+        validationUtils.validateResult(response, currentAction, expectations);\n+\n+    }\n+\n+    /**\n+     * server.xml has a config that specifies a key management key algorithm that is not supported -this test ensures that\n+     * after building a jwt that is encrypted with the matching public key, we can not decrypt the token because\n+     * it can't use an EC alg\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void JwtConsumerApiConfigTests_decryptWithUnsupportedAlg() throws Exception {\n+\n+        String jwtToken = actions.getJwtTokenUsingBuilder(_testName, consumerServer, \"key_encrypt_good_RS256\", null);\n+\n+        Expectations expectations = consumerHelpers.buildNegativeAttributeExpectations(JwtConsumerMessageConstants.CWWKS6056E_CAN_NOT_EXTRACT_JWS_FROM_JWE + \".+InvalidKeyException\", currentAction, consumerServer, \"decrypt_ES384\");\n+\n+        Page response = actions.invokeJwtConsumer(_testName, consumerServer, \"decrypt_ES384\", jwtToken);\n+        validationUtils.validateResult(response, currentAction, expectations);\n+\n+    }\n+\n+    /**\n+     * server.xml has a config that does not specify a keyManagementKeyAlias - this test ensures that after building a jwt\n+     * that is encrypted, we can not decrypt the token because there is not keyManagementKeyAlg\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void JwtConsumerApiConfigTests_encryptedToken_consumerDoesNotDecrypt() throws Exception {\n+\n+        String jwtToken = actions.getJwtTokenUsingBuilder(_testName, consumerServer, \"key_encrypt_good_RS256\", null);\n+\n+        Expectations expectations = consumerHelpers.buildNegativeAttributeExpectations(JwtConsumerMessageConstants.CWWKS6056E_CAN_NOT_EXTRACT_JWS_FROM_JWE + \".+InvalidKeyException\", currentAction, consumerServer, JwtConsumerConstants.SIGALG_RS256);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM1MzIyNQ=="}, "originalCommit": {"oid": "b6b105df44248747b52b6e9854ddaff25c6bb3b3"}, "originalPosition": 664}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2636, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}