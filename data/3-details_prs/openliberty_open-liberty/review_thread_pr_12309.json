{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMzc2ODUz", "number": 12309, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTo1NToyMlrOEA8oFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTo1ODoxM1rOEA8siA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDI4NzU3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/FATTestIDSwithSSLTrustOnly.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTo1NToyMlrOGcin1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTo1NToyMlrOGcin1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4MDU2Ng==", "bodyText": "Do we use InMemoryADLDAPServer?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import com.ibm.ws.com.unboundid.InMemoryADLDAPServer;", "url": "https://github.com/OpenLiberty/open-liberty/pull/12309#discussion_r432580566", "createdAt": "2020-05-29T15:55:22Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/FATTestIDSwithSSLTrustOnly.java", "diffHunk": "@@ -26,7 +26,11 @@\n import org.junit.Test;\n import org.junit.runner.RunWith;\n \n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryADLDAPServer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf76271f92e55d01d536f070c3503a40868e4f8f"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDI5MzQ1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/FATTestIDSwithSSLTrustOnly.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTo1Njo1MVrOGcirdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTo1Njo1MVrOGcirdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4MTQ5NQ==", "bodyText": "add whitespace before comment", "url": "https://github.com/OpenLiberty/open-liberty/pull/12309#discussion_r432581495", "createdAt": "2020-05-29T15:56:51Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/FATTestIDSwithSSLTrustOnly.java", "diffHunk": "@@ -46,25 +50,76 @@\n     private static final Class<?> c = FATTestIDSwithSSLTrustOnly.class;\n     private static UserRegistryServletConnection servlet;\n     private final LeakedPasswordChecker passwordChecker = new LeakedPasswordChecker(server);\n+    private static InMemoryTDSLDAPServer ldapServer;\n \n     /**\n-     * Updates the sample, which is expected to be at the hard-coded path.\n-     * If this test is failing, check this path is correct.\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n      */\n     @BeforeClass\n-    public static void setUp() throws Exception {\n-        // Add LDAP variables to bootstrap properties file\n+    public static void setupClass() throws Exception {\n+        setupLdapServer();\n+        setupLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (server != null) {\n+                server.stopServer(\"CWIML4529E\", \"CWIML4537E\", \"CWPKI0041W\");\n+            }\n+        } finally {\n+            try {\n+                if (ldapServer != null) {\n+                    ldapServer.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+            server.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+        }\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n         LDAPUtils.addLDAPVariables(server);\n         Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n         server.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        server.addInstalledAppForValidation(\"userRegistry\");\n+\n+        /*\n+         * Update LDAP configuration with In-Memory Server\n+         */\n+        ServerConfiguration serverConfig = server.getServerConfiguration();\n+        LdapRegistry ldap = serverConfig.getLdapRegistries().get(0);\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ldapServer.getLdapsPort()));\n+        ldap.setBindDN(InMemoryADLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryADLDAPServer.getBindPassword());\n+        server.updateServerConfiguration(serverConfig);\n+        /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf76271f92e55d01d536f070c3503a40868e4f8f"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDI5ODk2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/FATTestIDSwithSSLTrustOnly.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTo1ODoxM1rOGciuvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTo1ODoxM1rOGciuvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4MjMzNQ==", "bodyText": "If all we are doing is newing up an LDAP server that is already configured, you might just want to do that directly instead of wrapping it in this method.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12309#discussion_r432582335", "createdAt": "2020-05-29T15:58:13Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/FATTestIDSwithSSLTrustOnly.java", "diffHunk": "@@ -75,14 +130,13 @@ public static void setUp() throws Exception {\n         }\n     }\n \n-    @AfterClass\n-    public static void tearDown() throws Exception {\n-        Log.info(c, \"tearDown\", \"Stopping the server...\");\n-        try {\n-            server.stopServer(\"CWIML4529E\", \"CWIMK0004E\", \"CWPKI0041W\");\n-        } finally {\n-            server.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n-        }\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupLdapServer() throws Exception {\n+        ldapServer = new InMemoryTDSLDAPServer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf76271f92e55d01d536f070c3503a40868e4f8f"}, "originalPosition": 113}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1675, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}