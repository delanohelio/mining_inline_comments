{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3OTk5NTcy", "number": 10990, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzoyMDo1M1rODkWmDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzozMTowMVrODkWzrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDQ1NTE3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jaxrs.2.0_fat/test-applications/simpleJson/src/com/ibm/ws/jaxrs/fat/simpleJson/JaxrsJsonClientTestServlet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzoyMDo1M1rOFwoIZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzoyMDo1M1rOFwoIZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUzMzQ3Ng==", "bodyText": "What an oddly-specific vehicle... ;-)", "url": "https://github.com/OpenLiberty/open-liberty/pull/10990#discussion_r386533476", "createdAt": "2020-03-02T17:20:53Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0_fat/test-applications/simpleJson/src/com/ibm/ws/jaxrs/fat/simpleJson/JaxrsJsonClientTestServlet.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs.fat.simpleJson;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.client.ResponseProcessingException;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.DefaultHttpClient;\n+import org.junit.After;\n+import org.junit.Test;\n+\n+import componenttest.app.FATServlet;\n+\n+@WebServlet(urlPatterns = \"/JaxrsJsonClientTestServlet\")\n+public class JaxrsJsonClientTestServlet extends FATServlet {\n+\n+    private static final long serialVersionUID = 4563445389586844836L;\n+\n+    final static String URI_CONTEXT_ROOT = \"http://localhost:\" + Integer.getInteger(\"bvt.prop.HTTP_default\") + \"/simpleJson/\";\n+\n+    private static Client client;\n+\n+    // needed to make requests with invalid json to the server\n+    private static HttpClient httpClient;\n+\n+    @Override\n+    public void init() throws ServletException {\n+        client = ClientBuilder.newClient();\n+//      httpClient = new HttpClientBuilder.create().build();\n+        httpClient = new DefaultHttpClient();\n+    }\n+\n+    @After\n+    private void teardown() {\n+        client.close();\n+        httpClient.getConnectionManager().shutdown();\n+    }\n+\n+    @Test\n+    public void simpleTest() throws Exception {\n+        Car corvette = new Car();\n+        corvette.color = \"red\";\n+        corvette.make = \"Chevrolet\";\n+        corvette.model = \"Corvette\";\n+        corvette.year = 2014;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295d9edbd971ca98876295f97dae97100715252d"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDQ2MDkxOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jaxrs.2.0_fat/test-applications/simpleJson/src/com/ibm/ws/jaxrs/fat/simpleJson/JaxrsJsonClientTestServlet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzoyMjozM1rOFwoL7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzoyMjozM1rOFwoL7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUzNDM4Mw==", "bodyText": "You could remove this and just call fail() in the try block after response.readEntity(Foo.class);", "url": "https://github.com/OpenLiberty/open-liberty/pull/10990#discussion_r386534383", "createdAt": "2020-03-02T17:22:33Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0_fat/test-applications/simpleJson/src/com/ibm/ws/jaxrs/fat/simpleJson/JaxrsJsonClientTestServlet.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxrs.fat.simpleJson;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.Entity;\n+import javax.ws.rs.client.ResponseProcessingException;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.DefaultHttpClient;\n+import org.junit.After;\n+import org.junit.Test;\n+\n+import componenttest.app.FATServlet;\n+\n+@WebServlet(urlPatterns = \"/JaxrsJsonClientTestServlet\")\n+public class JaxrsJsonClientTestServlet extends FATServlet {\n+\n+    private static final long serialVersionUID = 4563445389586844836L;\n+\n+    final static String URI_CONTEXT_ROOT = \"http://localhost:\" + Integer.getInteger(\"bvt.prop.HTTP_default\") + \"/simpleJson/\";\n+\n+    private static Client client;\n+\n+    // needed to make requests with invalid json to the server\n+    private static HttpClient httpClient;\n+\n+    @Override\n+    public void init() throws ServletException {\n+        client = ClientBuilder.newClient();\n+//      httpClient = new HttpClientBuilder.create().build();\n+        httpClient = new DefaultHttpClient();\n+    }\n+\n+    @After\n+    private void teardown() {\n+        client.close();\n+        httpClient.getConnectionManager().shutdown();\n+    }\n+\n+    @Test\n+    public void simpleTest() throws Exception {\n+        Car corvette = new Car();\n+        corvette.color = \"red\";\n+        corvette.make = \"Chevrolet\";\n+        corvette.model = \"Corvette\";\n+        corvette.year = 2014;\n+\n+        Response response = client.target(URI_CONTEXT_ROOT)\n+                        .path(\"simpleresource/post\")\n+                        .request(MediaType.APPLICATION_JSON_TYPE)\n+                        .post(Entity.json(corvette));\n+        assertEquals(200, response.getStatus());\n+        String actual = response.readEntity(String.class);\n+\n+        assertEquals(\"2014 Chevrolet Corvette\", actual);\n+    }\n+\n+    @Test\n+    public void sendInvalidJson() throws Exception {\n+\n+        HttpPost post = new HttpPost(URI_CONTEXT_ROOT + \"simpleresource/post\");\n+        StringEntity entity = new StringEntity(\"invalid\");\n+        post.setEntity(entity);\n+        post.addHeader(\"Content-Type\", \"application/json\");\n+\n+        HttpResponse response = httpClient.execute(post);\n+        assertEquals(400, response.getStatusLine().getStatusCode());\n+    }\n+\n+    @Test\n+    public void recieveInvalidJson() throws Exception {\n+\n+        Response response = client.target(URI_CONTEXT_ROOT)\n+                        .path(\"badsimpleresource/badresponse\")\n+                        .request(MediaType.APPLICATION_JSON_TYPE)\n+                        .get();\n+\n+        boolean exception = false;\n+        try {\n+            response.readEntity(Foo.class);\n+        } catch (ResponseProcessingException e) {\n+            exception = true;\n+        }\n+\n+        if(!exception) {\n+            fail();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295d9edbd971ca98876295f97dae97100715252d"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDQ3NzEzOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jaxrs.2.0_fat/publish/servers/com.ibm.ws.jaxrs.fat.simpleJson/server.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzoyNzoyOFrOFwoV8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTozNDozN1rOFwwGFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUzNjk0Ng==", "bodyText": "Why is this necessary?  Something required by Apache HTTP client?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10990#discussion_r386536946", "createdAt": "2020-03-02T17:27:28Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0_fat/publish/servers/com.ibm.ws.jaxrs.fat.simpleJson/server.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<server>\n+    <featureManager>\n+        <feature>componenttest-1.0</feature>\n+        <feature>jaxrs-2.0</feature>\n+    </featureManager>\n+    \n+  \t<include location=\"../fatTestPorts.xml\"/>\n+  \t<javaPermission className=\"java.io.FilePermission\" name=\"ALL FILES\" actions=\"read\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295d9edbd971ca98876295f97dae97100715252d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY2Mzk1Ng==", "bodyText": "it was copied by an existing server, didn't investigate", "url": "https://github.com/OpenLiberty/open-liberty/pull/10990#discussion_r386663956", "createdAt": "2020-03-02T21:34:37Z", "author": {"login": "WhiteCat22"}, "path": "dev/com.ibm.ws.jaxrs.2.0_fat/publish/servers/com.ibm.ws.jaxrs.fat.simpleJson/server.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<server>\n+    <featureManager>\n+        <feature>componenttest-1.0</feature>\n+        <feature>jaxrs-2.0</feature>\n+    </featureManager>\n+    \n+  \t<include location=\"../fatTestPorts.xml\"/>\n+  \t<javaPermission className=\"java.io.FilePermission\" name=\"ALL FILES\" actions=\"read\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUzNjk0Ng=="}, "originalCommit": {"oid": "295d9edbd971ca98876295f97dae97100715252d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDQ4NTQwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jaxrs.2.0.common/src/org/apache/cxf/jaxrs/utils/JAXRSUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzoyOTo0NFrOFwobBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTo0ODoyNVrOFwwg4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUzODI0NQ==", "bodyText": "You can just remove the else keyword here.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10990#discussion_r386538245", "createdAt": "2020-03-02T17:29:44Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0.common/src/org/apache/cxf/jaxrs/utils/JAXRSUtils.java", "diffHunk": "@@ -1435,9 +1437,11 @@ public Object run() throws IOException, WebApplicationException {\n                 });\n             } catch (PrivilegedActionException e) {\n                 Exception e1 = e.getException();\n-                if (e1 instanceof IOException)\n+                if (e1 instanceof JsonParseException) {\n+                    throw new BadRequestException(e1);\n+                } else if (e1 instanceof IOException) {\n                     throw (IOException) e1;\n-                else\n+                } else", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295d9edbd971ca98876295f97dae97100715252d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3MDgxOQ==", "bodyText": "I prefer else blocks for uniformity (and brackets)", "url": "https://github.com/OpenLiberty/open-liberty/pull/10990#discussion_r386670819", "createdAt": "2020-03-02T21:48:25Z", "author": {"login": "WhiteCat22"}, "path": "dev/com.ibm.ws.jaxrs.2.0.common/src/org/apache/cxf/jaxrs/utils/JAXRSUtils.java", "diffHunk": "@@ -1435,9 +1437,11 @@ public Object run() throws IOException, WebApplicationException {\n                 });\n             } catch (PrivilegedActionException e) {\n                 Exception e1 = e.getException();\n-                if (e1 instanceof IOException)\n+                if (e1 instanceof JsonParseException) {\n+                    throw new BadRequestException(e1);\n+                } else if (e1 instanceof IOException) {\n                     throw (IOException) e1;\n-                else\n+                } else", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUzODI0NQ=="}, "originalCommit": {"oid": "295d9edbd971ca98876295f97dae97100715252d"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDQ5MDA2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jaxrs.2.0.common/src/org/apache/cxf/jaxrs/utils/JAXRSUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNzozMTowMVrOFwodyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTo1NjoxMVrOFwwwJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUzODk1NA==", "bodyText": "I'm not sure that we want to put Jackson dependencies in the JAXRSUtils class.  Is it possible to update the Jackson MBR/MBW to throw BadRequestException instead and then leave JAXRSUtils unchanged?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10990#discussion_r386538954", "createdAt": "2020-03-02T17:31:01Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0.common/src/org/apache/cxf/jaxrs/utils/JAXRSUtils.java", "diffHunk": "@@ -141,6 +142,7 @@\n import org.apache.cxf.message.MessageUtils;\n import org.apache.cxf.phase.PhaseInterceptorChain;\n import org.apache.cxf.service.Service;\n+import org.codehaus.jackson.JsonParseException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295d9edbd971ca98876295f97dae97100715252d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY2NDcwNg==", "bodyText": "We could probably modify our wrapper class, I'd have to look into it further", "url": "https://github.com/OpenLiberty/open-liberty/pull/10990#discussion_r386664706", "createdAt": "2020-03-02T21:36:05Z", "author": {"login": "WhiteCat22"}, "path": "dev/com.ibm.ws.jaxrs.2.0.common/src/org/apache/cxf/jaxrs/utils/JAXRSUtils.java", "diffHunk": "@@ -141,6 +142,7 @@\n import org.apache.cxf.message.MessageUtils;\n import org.apache.cxf.phase.PhaseInterceptorChain;\n import org.apache.cxf.service.Service;\n+import org.codehaus.jackson.JsonParseException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUzODk1NA=="}, "originalCommit": {"oid": "295d9edbd971ca98876295f97dae97100715252d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3NDcyNg==", "bodyText": "I was right, we pull in one of Jackson's prebuilt wrapper classes directly, we'd have to make our wrapper for their wrapper", "url": "https://github.com/OpenLiberty/open-liberty/pull/10990#discussion_r386674726", "createdAt": "2020-03-02T21:56:11Z", "author": {"login": "WhiteCat22"}, "path": "dev/com.ibm.ws.jaxrs.2.0.common/src/org/apache/cxf/jaxrs/utils/JAXRSUtils.java", "diffHunk": "@@ -141,6 +142,7 @@\n import org.apache.cxf.message.MessageUtils;\n import org.apache.cxf.phase.PhaseInterceptorChain;\n import org.apache.cxf.service.Service;\n+import org.codehaus.jackson.JsonParseException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUzODk1NA=="}, "originalCommit": {"oid": "295d9edbd971ca98876295f97dae97100715252d"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2088, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}