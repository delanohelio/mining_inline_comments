{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NzM1NzI4", "number": 12177, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMzo0NToyOVrOD84Lsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMzo0NjoxMlrOD84M5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTYxNjUxOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.microprofile.metrics.2.0/src/com/ibm/ws/microprofile/metrics/BaseMetrics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMzo0NToyOVrOGWFgig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMzo0NToyOVrOGWFgig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgxMjEwNg==", "bodyText": "Why is SHARED_METRIC_REGISTRY public?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12177#discussion_r425812106", "createdAt": "2020-05-15T13:45:29Z", "author": {"login": "fmhwong"}, "path": "dev/com.ibm.ws.microprofile.metrics.2.0/src/com/ibm/ws/microprofile/metrics/BaseMetrics.java", "diffHunk": "@@ -25,33 +26,45 @@\n import org.eclipse.microprofile.metrics.MetricType;\n import org.eclipse.microprofile.metrics.MetricUnits;\n import org.eclipse.microprofile.metrics.Tag;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n \n import com.ibm.ws.microprofile.metrics.impl.CounterImpl;\n import com.ibm.ws.microprofile.metrics.impl.SharedMetricRegistries;\n \n+@Component(service = { BaseMetrics.class }, configurationPolicy = ConfigurationPolicy.IGNORE, immediate = true)\n public class BaseMetrics {\n \n-    protected static BaseMetrics baseMetrics = null;\n     protected static String BASE = MetricRegistry.Type.BASE.getName();\n     public MBeanServer mbs;\n     protected static Set<String> gcObjectNames = new HashSet<String>();\n \n-    protected static SharedMetricRegistries SHARED_METRIC_REGISTRY;\n+    public static SharedMetricRegistries SHARED_METRIC_REGISTRY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd234d94846bd81520debe4a95a86c6e904c2f74"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTYxOTU2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.microprofile.metrics.2.0/src/com/ibm/ws/microprofile/metrics/BaseMetrics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMzo0NjoxMlrOGWFiXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMzo0NjoxMlrOGWFiXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgxMjU3Mg==", "bodyText": "Do you need an empty constructor?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12177#discussion_r425812572", "createdAt": "2020-05-15T13:46:12Z", "author": {"login": "fmhwong"}, "path": "dev/com.ibm.ws.microprofile.metrics.2.0/src/com/ibm/ws/microprofile/metrics/BaseMetrics.java", "diffHunk": "@@ -25,33 +26,45 @@\n import org.eclipse.microprofile.metrics.MetricType;\n import org.eclipse.microprofile.metrics.MetricUnits;\n import org.eclipse.microprofile.metrics.Tag;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n \n import com.ibm.ws.microprofile.metrics.impl.CounterImpl;\n import com.ibm.ws.microprofile.metrics.impl.SharedMetricRegistries;\n \n+@Component(service = { BaseMetrics.class }, configurationPolicy = ConfigurationPolicy.IGNORE, immediate = true)\n public class BaseMetrics {\n \n-    protected static BaseMetrics baseMetrics = null;\n     protected static String BASE = MetricRegistry.Type.BASE.getName();\n     public MBeanServer mbs;\n     protected static Set<String> gcObjectNames = new HashSet<String>();\n \n-    protected static SharedMetricRegistries SHARED_METRIC_REGISTRY;\n+    public static SharedMetricRegistries SHARED_METRIC_REGISTRY;\n \n-    public static synchronized BaseMetrics getInstance(SharedMetricRegistries sharedMetricRegistry) {\n-        SHARED_METRIC_REGISTRY = sharedMetricRegistry;\n-        if (baseMetrics == null)\n-            baseMetrics = new BaseMetrics();\n-        return baseMetrics;\n+    @Reference\n+    public void setSharedMetricRegistries(SharedMetricRegistries sharedMetricRegistry) {\n+        BaseMetrics.SHARED_METRIC_REGISTRY = sharedMetricRegistry;\n     }\n \n-    protected BaseMetrics() {\n+    public BaseMetrics() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd234d94846bd81520debe4a95a86c6e904c2f74"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1787, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}