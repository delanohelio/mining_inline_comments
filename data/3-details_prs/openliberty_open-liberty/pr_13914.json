{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2MDY0MDA3", "number": 13914, "title": "Alternate feature names", "bodyText": "", "createdAt": "2020-09-12T23:59:03Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914", "merged": true, "mergeCommit": {"oid": "cfc7b354a7bf8dbc561a3536391bc229e957b08c"}, "closed": true, "closedAt": "2020-09-17T16:38:31Z", "author": {"login": "sebratton"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdIZMEHABqjM3NjAxNzAxMjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJiqSfgFqTQ5MDAwNzE0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bf84fde3d8396755188af6451e78fe5066298408", "author": {"user": {"login": "sebratton", "name": "Samuel E Bratton"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/bf84fde3d8396755188af6451e78fe5066298408", "committedDate": "2020-09-12T23:45:24Z", "message": "Add metadata and tests for alternate feature names"}, "afterCommit": {"oid": "43bd315da85b13309133e6fc99a093798e06991d", "author": {"user": {"login": "sebratton", "name": "Samuel E Bratton"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/43bd315da85b13309133e6fc99a093798e06991d", "committedDate": "2020-09-13T06:40:59Z", "message": "Add tests for alternate feature names support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "43bd315da85b13309133e6fc99a093798e06991d", "author": {"user": {"login": "sebratton", "name": "Samuel E Bratton"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/43bd315da85b13309133e6fc99a093798e06991d", "committedDate": "2020-09-13T06:40:59Z", "message": "Add tests for alternate feature names support"}, "afterCommit": {"oid": "82bd986f52ad918f30c4298998844e572528dd3c", "author": {"user": {"login": "sebratton", "name": "Samuel E Bratton"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/82bd986f52ad918f30c4298998844e572528dd3c", "committedDate": "2020-09-13T07:23:05Z", "message": "Add tests for alternate feature names support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "82bd986f52ad918f30c4298998844e572528dd3c", "author": {"user": {"login": "sebratton", "name": "Samuel E Bratton"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/82bd986f52ad918f30c4298998844e572528dd3c", "committedDate": "2020-09-13T07:23:05Z", "message": "Add tests for alternate feature names support"}, "afterCommit": {"oid": "70498d694fcec268355aa76a35500a3fea0436d5", "author": {"user": {"login": "sebratton", "name": "Samuel E Bratton"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/70498d694fcec268355aa76a35500a3fea0436d5", "committedDate": "2020-09-13T22:19:49Z", "message": "Add tests for alternate feature names support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3OTQ0MDE0", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#pullrequestreview-487944014", "createdAt": "2020-09-14T16:25:54Z", "commit": {"oid": "70498d694fcec268355aa76a35500a3fea0436d5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjoyNTo1NFrOHRdDWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjo0NTo1OVrOHRd3kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA2MzgzNA==", "bodyText": "Why is this check only done when not on Open Liberty?\nThe check for !isExtension should be done done regardless if we are on Open Liberty or not.  I suggest the following check be done after this if-then-else block entirely so it applies to both:\nif (altName != null && isRootFeature && !isExtension) {\n    Tr.error(tc, \"MISSING_FEATURE_HAS_ALT_NAME\", missing, altName);\n}", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#discussion_r488063834", "createdAt": "2020-09-14T16:25:54Z", "author": {"login": "tjwatson"}, "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/FeatureManager.java", "diffHunk": "@@ -1642,16 +1650,27 @@ boolean reportErrors(Result result, Collection<String> restrictedAccessAttempts,\n         }\n         for (String missing : result.getMissing()) {\n             reportedErrors = true;\n+            boolean isRootFeature = rootFeatures.contains(missing);\n+            boolean isExtension = missing.indexOf(\":\") > -1;\n+            String altName = featureRepository.matchesAlternate(missing);\n             //Check if using Open Liberty before suggesting install util for missing features\n             if (!getProductInfoDisplayName().startsWith(PRODUCT_INFO_STRING_OPEN_LIBERTY)) {\n-                if (rootFeatures.contains(missing) && missing.indexOf(\":\") < 0) {\n+                if (isRootFeature && !isExtension) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70498d694fcec268355aa76a35500a3fea0436d5"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA2NjA3Mg==", "bodyText": "I suggest making this a Collection<String> to give more freedom in the implementation.  Likely an ArrayList would be more performant than requiring a heavy object like a Set here.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#discussion_r488066072", "createdAt": "2020-09-14T16:29:32Z", "author": {"login": "tjwatson"}, "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureDefinitionUtils.java", "diffHunk": "@@ -104,6 +107,7 @@\n         final String featureName;\n         final String symbolicName;\n         final String shortName;\n+        final Set<String> alternateNames;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70498d694fcec268355aa76a35500a3fea0436d5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA2ODIwMQ==", "bodyText": "This could be replaced by this line:\nresult = new ArrayList<String>(data.keySet());\nThat is assuming you change the type to a Collection otherwise it would be:\nresult = new HashSet<String>(data.keySet());", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#discussion_r488068201", "createdAt": "2020-09-14T16:33:06Z", "author": {"login": "tjwatson"}, "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureDefinitionUtils.java", "diffHunk": "@@ -391,6 +399,38 @@ static int getIntegerValue(String value, int defaultValue) {\n             manifest = loadManifest(mfFile, inStream);\n         }\n \n+        /**\n+         * Get alternate names of the feature if any.\n+         *\n+         * @return A (possibly empty) set of alternate names.\n+         */\n+        Set<String> getAltNames() {\n+\n+            if (alternateNames == null) {\n+                Set<String> result;\n+                String ibmAltNames;\n+                try {\n+                    ibmAltNames = getMainAttributeValue(IBM_ALT_NAMES);\n+                } catch (IOException e) {\n+                    return Collections.<String> emptySet();\n+                }\n+\n+                if (ibmAltNames == null) {\n+                    result = Collections.<String> emptySet();\n+                } else {\n+                    Map<String, Map<String, String>> data = ManifestHeaderProcessor.parseImportString(ibmAltNames);\n+\n+                    result = new HashSet<String>();\n+                    for (Map.Entry<String, Map<String, String>> entry : data.entrySet()) {\n+                        //any attributes are not supported and will be ignored.\n+                        result.add(entry.getKey());\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70498d694fcec268355aa76a35500a3fea0436d5"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3MDAyOA==", "bodyText": "if you change to writeInt be sure to change this to readInt", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#discussion_r488070028", "createdAt": "2020-09-14T16:36:11Z", "author": {"login": "tjwatson"}, "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureRepository.java", "diffHunk": "@@ -442,8 +460,14 @@ static ImmutableAttributes loadFeatureAttributes(DataInputStream in) throws IOEx\n             processTypes.add(valueOf(in.readUTF(), ProcessType.SERVER));\n         }\n         ActivationType activationType = valueOf(in.readUTF(), ActivationType.SEQUENTIAL);\n-        return new ImmutableAttributes(repositoryType, symbolicName, shortName, featureVersion, visibility, appRestart, version, featureFile, lastModified, fileSize, isAutoFeature,\n-                                       hasApiServices, hasApiPackages, hasSpiPackages, isSingleton, processTypes, activationType);\n+        short altNamesCount = in.readShort();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70498d694fcec268355aa76a35500a3fea0436d5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3MTI2Mg==", "bodyText": "might as well seed the size here for the collection.  If this is an ArrayList that would make it pretty small.  Should consider using Collections.empty for when size == 0", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#discussion_r488071262", "createdAt": "2020-09-14T16:38:18Z", "author": {"login": "tjwatson"}, "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureRepository.java", "diffHunk": "@@ -442,8 +460,14 @@ static ImmutableAttributes loadFeatureAttributes(DataInputStream in) throws IOEx\n             processTypes.add(valueOf(in.readUTF(), ProcessType.SERVER));\n         }\n         ActivationType activationType = valueOf(in.readUTF(), ActivationType.SEQUENTIAL);\n-        return new ImmutableAttributes(repositoryType, symbolicName, shortName, featureVersion, visibility, appRestart, version, featureFile, lastModified, fileSize, isAutoFeature,\n-                                       hasApiServices, hasApiPackages, hasSpiPackages, isSingleton, processTypes, activationType);\n+        short altNamesCount = in.readShort();\n+        Set<String> altNames = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70498d694fcec268355aa76a35500a3fea0436d5"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3NjkzMw==", "bodyText": "If we do ignore case here then we need to do the following to populate:\nalternateFeatureNameToPublicName.put(lowerFeature(s), cachedAttr.featureName);", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#discussion_r488076933", "createdAt": "2020-09-14T16:45:40Z", "author": {"login": "tjwatson"}, "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureRepository.java", "diffHunk": "@@ -621,6 +645,12 @@ private void updateMaps(SubsystemFeatureDefinitionImpl def) {\n             if (def.getVisibility() == Visibility.PUBLIC)\n                 publicFeatureNameToSymbolicName.put(lowerFeature(cachedAttr.symbolicName), cachedAttr.symbolicName);\n \n+            // populate mapping from known, commonly used alternative names to allow hints when the wrong feature\n+            // name is specified in a server config.\n+            for (String s : cachedAttr.alternateNames) {\n+                alternateFeatureNameToPublicName.put(s, cachedAttr.featureName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70498d694fcec268355aa76a35500a3fea0436d5"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3NzE0Mg==", "bodyText": "Other places that write a collection use writeInt for the size.  I agree that it is far fetched to ever need that big of a size for alternate names, but I'd error on the side of consistency here.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#discussion_r488077142", "createdAt": "2020-09-14T16:45:53Z", "author": {"login": "tjwatson"}, "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureRepository.java", "diffHunk": "@@ -371,6 +384,11 @@ static void writeFeatureAttributes(ImmutableAttributes iAttr, ProvisioningDetail\n \n         out.writeUTF(iAttr.activationType.toString());\n \n+        out.writeShort(iAttr.alternateNames.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70498d694fcec268355aa76a35500a3fea0436d5"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3NzIwMw==", "bodyText": "We likely need to ignore case here like we do for short names:\nreturn alternateFeatureNameToPublicName.get(lowerFeature(featureName));", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#discussion_r488077203", "createdAt": "2020-09-14T16:45:59Z", "author": {"login": "tjwatson"}, "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/subsystem/FeatureRepository.java", "diffHunk": "@@ -118,6 +121,16 @@ public FeatureRepository(WsResource res, BundleContext bundleContext) {\n         this.bundleContext = bundleContext;\n     }\n \n+    /**\n+     * Use to check if a feature name is a commonly used alternate to an existing feature name\n+     *\n+     * @param featureName\n+     * @return The existing feature name or null if no match\n+     */\n+    public String matchesAlternate(String featureName) {\n+        return alternateFeatureNameToPublicName.get(featureName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70498d694fcec268355aa76a35500a3fea0436d5"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MDg0NTQz", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#pullrequestreview-488084543", "createdAt": "2020-09-14T19:40:08Z", "commit": {"oid": "70498d694fcec268355aa76a35500a3fea0436d5"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTo0MDowOFrOHRj4tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTo0MTowMFrOHRj6Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3NTc5OQ==", "bodyText": "{0} appears to be a feature, not a feature definition. If so, change \"the feature definition {0} which was not found.\" to \"the {0} feature that was not found.\" If (0) applies to a feature definition, then use \"\"the {0} feature definition that was not found.\"", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#discussion_r488175799", "createdAt": "2020-09-14T19:40:08Z", "author": {"login": "helyarp"}, "path": "dev/com.ibm.ws.kernel.feature.core/resources/com/ibm/ws/kernel/feature/internal/resources/ProvisionerMessages.nlsprops", "diffHunk": "@@ -217,6 +217,11 @@ UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_DIFFERENT_PLATFORM_ERROR=CWWKF0044E: Th\n UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_DIFFERENT_PLATFORM_ERROR.explanation=The server configuration contains an incompatible combination of both Jakarta EE and Java EE features.  Features that support the Jakarta EE 9 programming model are incompatible with features that support the Java EE programming models, including Jakarta EE 8.  This conflict can happen if the two incompatible features are configured directly in the server configuration, or if the configured features include different versions of a feature that are incompatible.\n UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_DIFFERENT_PLATFORM_ERROR.useraction=Specify a compatible version of the configured features that caused the conflict in the server.xml file, and ensure the server.xml file uses either Jakarta EE or Java EE features, but not both.\n \n+#CWWK0045E {0} = feature appearing in server xml; {1} = a real feature def name which is a probable match for name 0.\n+MISSING_FEATURE_HAS_ALT_NAME=CWWKF0045E: An existing feature definition, {1}, is a possible match for the feature definition {0} which was not found. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70498d694fcec268355aa76a35500a3fea0436d5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3NjE5OQ==", "bodyText": "Change \"could not\" to \"cannot\" and change \"may\" to \"might\"", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#discussion_r488176199", "createdAt": "2020-09-14T19:41:00Z", "author": {"login": "helyarp"}, "path": "dev/com.ibm.ws.kernel.feature.core/resources/com/ibm/ws/kernel/feature/internal/resources/ProvisionerMessages.nlsprops", "diffHunk": "@@ -217,6 +217,11 @@ UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_DIFFERENT_PLATFORM_ERROR=CWWKF0044E: Th\n UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_DIFFERENT_PLATFORM_ERROR.explanation=The server configuration contains an incompatible combination of both Jakarta EE and Java EE features.  Features that support the Jakarta EE 9 programming model are incompatible with features that support the Java EE programming models, including Jakarta EE 8.  This conflict can happen if the two incompatible features are configured directly in the server configuration, or if the configured features include different versions of a feature that are incompatible.\n UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_DIFFERENT_PLATFORM_ERROR.useraction=Specify a compatible version of the configured features that caused the conflict in the server.xml file, and ensure the server.xml file uses either Jakarta EE or Java EE features, but not both.\n \n+#CWWK0045E {0} = feature appearing in server xml; {1} = a real feature def name which is a probable match for name 0.\n+MISSING_FEATURE_HAS_ALT_NAME=CWWKF0045E: An existing feature definition, {1}, is a possible match for the feature definition {0} which was not found. \n+MISSING_FEATURE_HAS_ALT_NAME.explanation=The feature manager could not find a definition for a feature specified in the server configuration. The name specified may match an existing feature definition.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70498d694fcec268355aa76a35500a3fea0436d5"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NjY5ODMz", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#pullrequestreview-488669833", "createdAt": "2020-09-15T13:16:05Z", "commit": {"oid": "b68cca4b5a06b0f61d694eb566da5bd2e7b74bf0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzoxNjowNVrOHSBS4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzoxNjowNVrOHSBS4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY1NzYzNQ==", "bodyText": "Change \"the feature {0} which\" to  \"the {0} feature that\"  or to \"the {0} feature, which\"", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#discussion_r488657635", "createdAt": "2020-09-15T13:16:05Z", "author": {"login": "helyarp"}, "path": "dev/com.ibm.ws.kernel.feature.core/resources/com/ibm/ws/kernel/feature/internal/resources/ProvisionerMessages.nlsprops", "diffHunk": "@@ -217,6 +217,11 @@ UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_DIFFERENT_PLATFORM_ERROR=CWWKF0044E: Th\n UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_DIFFERENT_PLATFORM_ERROR.explanation=The server configuration contains an incompatible combination of both Jakarta EE and Java EE features.  Features that support the Jakarta EE 9 programming model are incompatible with features that support the Java EE programming models, including Jakarta EE 8.  This conflict can happen if the two incompatible features are configured directly in the server configuration, or if the configured features include different versions of a feature that are incompatible.\n UPDATE_CONFLICT_INCOMPATIBLE_EE_FEATURES_DIFFERENT_PLATFORM_ERROR.useraction=Specify a compatible version of the configured features that caused the conflict in the server.xml file, and ensure the server.xml file uses either Jakarta EE or Java EE features, but not both.\n \n+#CWWK0045E {0} = feature appearing in server xml; {1} = a real feature def name which is a probable match for name 0.\n+MISSING_FEATURE_HAS_ALT_NAME=CWWKF0045E: An existing feature definition, {1}, is a possible match for the feature {0} which was not found. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68cca4b5a06b0f61d694eb566da5bd2e7b74bf0"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b68cca4b5a06b0f61d694eb566da5bd2e7b74bf0", "author": {"user": {"login": "sebratton", "name": "Samuel E Bratton"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/b68cca4b5a06b0f61d694eb566da5bd2e7b74bf0", "committedDate": "2020-09-15T06:58:59Z", "message": "Addresses code and message review comments"}, "afterCommit": {"oid": "0324ed5256242e0f992a11cb840f8019499589fa", "author": {"user": {"login": "sebratton", "name": "Samuel E Bratton"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/0324ed5256242e0f992a11cb840f8019499589fa", "committedDate": "2020-09-15T17:04:53Z", "message": "Address the latest message review comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "575c4b79f677f22eb9531a378d2a2b2b8f9347c8", "author": {"user": {"login": "sebratton", "name": "Samuel E Bratton"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/575c4b79f677f22eb9531a378d2a2b2b8f9347c8", "committedDate": "2020-09-15T19:58:17Z", "message": "Check for alternate feature names and log new related error message.\n\nAdditional meta-data can be added to a feature definition for commonly known\nalternate names. If a configured feature is not found during a feature\nconfiguration update and it matches a known alternate name, then an error\nmessage will be issued with the real name of the feature as a hint.\n\ncloses https://github.com/OpenLiberty/open-liberty/issues/13393"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59e43e3ccdef54783e822b88c2634bf23f04b472", "author": {"user": {"login": "sebratton", "name": "Samuel E Bratton"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/59e43e3ccdef54783e822b88c2634bf23f04b472", "committedDate": "2020-09-15T19:58:17Z", "message": "Update feature definitions with alternate name metadata\n\nUpdated feature existing at time of commit."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c855e594df51789ec18920e336aa9d20a0fa3774", "author": {"user": {"login": "sebratton", "name": "Samuel E Bratton"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/c855e594df51789ec18920e336aa9d20a0fa3774", "committedDate": "2020-09-15T19:58:17Z", "message": "Add tests for alternate feature names support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eea832e62dcf4b83f6fb0fd3f7f1da7fc01c8887", "author": {"user": {"login": "sebratton", "name": "Samuel E Bratton"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/eea832e62dcf4b83f6fb0fd3f7f1da7fc01c8887", "committedDate": "2020-09-15T19:58:18Z", "message": "Addresses code and message review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e68aaaa5de5e34ee9c1b3bce150351d0b4a0114", "author": {"user": {"login": "sebratton", "name": "Samuel E Bratton"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/5e68aaaa5de5e34ee9c1b3bce150351d0b4a0114", "committedDate": "2020-09-15T19:58:18Z", "message": "Address the latest message review comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fba6ebfaff32b2a491a9c2cb656e84b6057bc6f6", "author": {"user": {"login": "sebratton", "name": "Samuel E Bratton"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/fba6ebfaff32b2a491a9c2cb656e84b6057bc6f6", "committedDate": "2020-09-15T19:58:19Z", "message": "Update additional feature manifests with new header"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ecb3b8b8bf1c086ecd3e2434b1db8e345b54c953", "author": {"user": {"login": "sebratton", "name": "Samuel E Bratton"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/ecb3b8b8bf1c086ecd3e2434b1db8e345b54c953", "committedDate": "2020-09-15T19:08:52Z", "message": "Update additional feature manifests with new header"}, "afterCommit": {"oid": "fba6ebfaff32b2a491a9c2cb656e84b6057bc6f6", "author": {"user": {"login": "sebratton", "name": "Samuel E Bratton"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/fba6ebfaff32b2a491a9c2cb656e84b6057bc6f6", "committedDate": "2020-09-15T19:58:19Z", "message": "Update additional feature manifests with new header"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5Nzc1NzE4", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#pullrequestreview-489775718", "createdAt": "2020-09-16T16:00:17Z", "commit": {"oid": "fba6ebfaff32b2a491a9c2cb656e84b6057bc6f6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMDA3MTQy", "url": "https://github.com/OpenLiberty/open-liberty/pull/13914#pullrequestreview-490007142", "createdAt": "2020-09-16T20:45:31Z", "commit": {"oid": "fba6ebfaff32b2a491a9c2cb656e84b6057bc6f6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3355, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}