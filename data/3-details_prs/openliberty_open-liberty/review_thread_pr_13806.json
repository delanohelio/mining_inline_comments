{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5ODA1NTE4", "number": 13806, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNTozODowN1rOEgbukw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTozOToyMVrOEiLZpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNDQ0MTc5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/internal/JwtConfigUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNTozODowN1rOHNSoxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNTozODowN1rOHNSoxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY5ODg4Nw==", "bodyText": "Will this function work by default in the beta or will you have to set the config property even in the beta?", "url": "https://github.com/OpenLiberty/open-liberty/pull/13806#discussion_r483698887", "createdAt": "2020-09-04T15:38:07Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/internal/JwtConfigUtil.java", "diffHunk": "@@ -53,4 +58,27 @@ public static String processProtectedString(Map<String, Object> props, String cf\n         return secret;\n     }\n \n+    public static String getSignatureAlgorithm(Map<String, Object> props, String sigAlgAttrName, String enableBetaAttrName) {\n+        String defaultSignatureAlgorithm = \"RS256\";\n+        String signatureAlgorithm = JwtUtils.trimIt((String) props.get(sigAlgAttrName));\n+        boolean isBetaEnabled = (Boolean) props.get(enableBetaAttrName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7418a0ef0434c75b2a2858031ca3b69cd4676609"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODk0MDMxOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/internal/JwtConfigUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTozMzozOVrOHN4HUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTozMzozOVrOHN4HUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMxMjkxNA==", "bodyText": "If you do specify a beta Algorithm when not running a beta runtime, is it correct that this just defaults back without warning? You won't see any message unless debug trace is enabled. When not running in a beta, I think this should behave the same as if a completely unknown/invalid algorithm was specified ... in such a case, would there be an exception? An error or warning message? I don't think debug trace is enough.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13806#discussion_r484312914", "createdAt": "2020-09-07T09:33:39Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/internal/JwtConfigUtil.java", "diffHunk": "@@ -53,4 +59,27 @@ public static String processProtectedString(Map<String, Object> props, String cf\n         return secret;\n     }\n \n+    public static String getSignatureAlgorithm(Map<String, Object> props, String sigAlgAttrName) {\n+        String defaultSignatureAlgorithm = \"RS256\";\n+        String signatureAlgorithm = JwtUtils.trimIt((String) props.get(sigAlgAttrName));\n+        boolean isBetaEnabled = ProductInfo.getBetaEdition();\n+        if (!isBetaEnabled && isBetaAlgorithm(signatureAlgorithm)) {\n+            if (tc.isDebugEnabled()) {\n+                Tr.debug(tc, \"A signature algorithm (\" + signatureAlgorithm + \") is specified that's only available in the beta edition. Defaulting to \" + defaultSignatureAlgorithm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84199af4569b57052db34ff6834296793373f84b"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDc0MjUwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.websphere.appserver.features/visibility/public/mpJwt-1.2/io.openliberty.mpJwt-1.2.feature", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMTowODowM1rOHOuEaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMToxMToxN1rOHPCWMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE5NjkwNA==", "bodyText": "4.0 is for Jakarta 9.  Since you aren't tolerating servlet 5.0 I assume you don't need to tolerate appSecurity 4.0", "url": "https://github.com/OpenLiberty/open-liberty/pull/13806#discussion_r485196904", "createdAt": "2020-09-08T21:08:03Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.websphere.appserver.features/visibility/public/mpJwt-1.2/io.openliberty.mpJwt-1.2.feature", "diffHunk": "@@ -8,17 +8,17 @@ IBM-API-Package: \\\n   org.eclipse.microprofile.auth; type=\"stable\"\n Subsystem-Name: MicroProfile JSON Web Token 1.2\n -features=com.ibm.websphere.appserver.servlet-3.1; ibm.tolerates:=4.0, \\\n-  com.ibm.websphere.appserver.appSecurity-2.0; ibm.tolerates:=3.0, \\\n+  com.ibm.websphere.appserver.appSecurity-3.0; ibm.tolerates:=4.0, \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ce67db5c77c0c0a1bb2d200a8d4af38c246a7ac"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIxMDIwOA==", "bodyText": "also it should only be servlet 4.0.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13806#discussion_r485210208", "createdAt": "2020-09-08T21:37:43Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.websphere.appserver.features/visibility/public/mpJwt-1.2/io.openliberty.mpJwt-1.2.feature", "diffHunk": "@@ -8,17 +8,17 @@ IBM-API-Package: \\\n   org.eclipse.microprofile.auth; type=\"stable\"\n Subsystem-Name: MicroProfile JSON Web Token 1.2\n -features=com.ibm.websphere.appserver.servlet-3.1; ibm.tolerates:=4.0, \\\n-  com.ibm.websphere.appserver.appSecurity-2.0; ibm.tolerates:=3.0, \\\n+  com.ibm.websphere.appserver.appSecurity-3.0; ibm.tolerates:=4.0, \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE5NjkwNA=="}, "originalCommit": {"oid": "3ce67db5c77c0c0a1bb2d200a8d4af38c246a7ac"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUyOTEzNg==", "bodyText": "Right, Jakarta EE 8 features only for MicroProfile 4.0. No additional tolerates.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13806#discussion_r485529136", "createdAt": "2020-09-09T11:11:17Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.websphere.appserver.features/visibility/public/mpJwt-1.2/io.openliberty.mpJwt-1.2.feature", "diffHunk": "@@ -8,17 +8,17 @@ IBM-API-Package: \\\n   org.eclipse.microprofile.auth; type=\"stable\"\n Subsystem-Name: MicroProfile JSON Web Token 1.2\n -features=com.ibm.websphere.appserver.servlet-3.1; ibm.tolerates:=4.0, \\\n-  com.ibm.websphere.appserver.appSecurity-2.0; ibm.tolerates:=3.0, \\\n+  com.ibm.websphere.appserver.appSecurity-3.0; ibm.tolerates:=4.0, \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE5NjkwNA=="}, "originalCommit": {"oid": "3ce67db5c77c0c0a1bb2d200a8d4af38c246a7ac"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjczODI4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.jwt/resources/com/ibm/ws/security/jwt/internal/resources/JWTMessages.nlsprops", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTozOToyMVrOHP6HpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTozOToyMVrOHP6HpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ0MjkxNw==", "bodyText": "Suggested update\n\nSupport for the signature algorithm that is specified in the message might be incomplete, so the signature algorithm can be used only in the beta edition.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13806#discussion_r486442917", "createdAt": "2020-09-10T15:39:21Z", "author": {"login": "Charlotte-Holt"}, "path": "dev/com.ibm.ws.security.jwt/resources/com/ibm/ws/security/jwt/internal/resources/JWTMessages.nlsprops", "diffHunk": "@@ -324,3 +324,8 @@ MP_CONFIG_PUBLIC_KEY_ALG_NOT_SUPPORTED.useraction=Specify a supported signature\n JWT_AMR_CLAIM_NOT_VALID=CWWKS6054E: The AMR [{0}] of the provided JSON web token (JWT) is not listed as a trusted AMR in the [{1}] JWT configuration. The trusted AMR are [{2}].\n JWT_AMR_CLAIM_NOT_VALID.explanation=The server configuration specifies which AMR are trusted when validating JWTs. The provided token is not intended for a trusted AMR, so the token cannot be validated.\n JWT_AMR_CLAIM_NOT_VALID.useraction=Obtain a new token for one of the trusted AMR specified in your JWT configuration, or add the AMR specified in the message as a trusted AMR in your JWT configuration.\n+\n+# 0=JWT configuration ID, 1=Signature algorithm configured in server.xml, 2=Signature algorithm that will be used by default\n+BETA_SIGNATURE_ALGORITHM_USED=CWWKS6055W: The [{0}] configuration specifies the {1} signature algorithm, but that algorithm is only available in the beta edition. The {2} signature algorithm is used instead.\n+BETA_SIGNATURE_ALGORITHM_USED.explanation=Support for the signature algorithm that is specified in the message might be incomplete, so the signature algorithm can only be used in the beta edition.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ce67db5c77c0c0a1bb2d200a8d4af38c246a7ac"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2862, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}