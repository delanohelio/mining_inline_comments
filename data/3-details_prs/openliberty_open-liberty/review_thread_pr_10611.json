{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MDg5MTgx", "number": 10611, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMTo1NToyM1rODbYtCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDo0OToyM1rODj1oow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDQyODkwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMTo1NToyM1rOFi1_Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMTo1NToyM1rOFi1_Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4MDQ3NA==", "bodyText": "this doesn't check to see if it's the first field... if host and type are omitted, this would cause problem", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r372080474", "createdAt": "2020-01-28T21:55:23Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java", "diffHunk": "@@ -220,58 +227,98 @@ private static void addUnchangingFields1_1(StringBuilder sb, String hostName, St\n     }\n \n     private static void addUnchangingFieldsJSON_Message(StringBuilder sb, String hostName, String wlpUserDir, String serverName, boolean isMessageEvent) {\n+        if (BaseTraceService.getIsServerConfigUpdate()) {\n+            unchangingFieldsJson_Message = null;\n+        }\n         if (unchangingFieldsJson_Message == null) {\n             StringBuilder temp = new StringBuilder(512);\n             addToJSON(temp, LogTraceData.getHostKeyJSON(isMessageEvent), hostName, false, false, false, false);\n             addToJSON(temp, LogTraceData.getUserDirKeyJSON(isMessageEvent), wlpUserDir, false, true, false, false);\n             addToJSON(temp, LogTraceData.getServerNameKeyJSON(isMessageEvent), serverName, false, false, false, false);\n             unchangingFieldsJson_Message = temp.toString();\n         }\n-        sb.append(unchangingFieldsJson_Message);\n+        if (!unchangingFieldsJson_Message.isEmpty() && unchangingFieldsJson_Message != null) {\n+            if (sb.length() > 1)\n+                sb.append(unchangingFieldsJson_Message);\n+            else\n+                sb.append(unchangingFieldsJson_Message.substring(1));\n+        }\n     }\n \n     private static void addUnchangingFieldsJSON_Trace(StringBuilder sb, String hostName, String wlpUserDir, String serverName, boolean isMessageEvent) {\n+        if (BaseTraceService.getIsServerConfigUpdate()) {\n+            unchangingFieldsJson_Trace = null;\n+        }\n         if (unchangingFieldsJson_Trace == null) {\n             StringBuilder temp = new StringBuilder(512);\n             addToJSON(temp, LogTraceData.getHostKeyJSON(isMessageEvent), hostName, false, false, false, false);\n             addToJSON(temp, LogTraceData.getUserDirKeyJSON(isMessageEvent), wlpUserDir, false, true, false, false);\n             addToJSON(temp, LogTraceData.getServerNameKeyJSON(isMessageEvent), serverName, false, false, false, false);\n             unchangingFieldsJson_Trace = temp.toString();\n         }\n-        sb.append(unchangingFieldsJson_Trace);\n+        if (!unchangingFieldsJson_Trace.isEmpty() && unchangingFieldsJson_Trace != null) {\n+            if (sb.length() > 1)\n+                sb.append(unchangingFieldsJson_Trace);\n+            else\n+                sb.append(unchangingFieldsJson_Trace.substring(1));\n+        }\n     }\n \n     private static void addUnchangingFieldsJSON_AccessLog(StringBuilder sb, String hostName, String wlpUserDir, String serverName) {\n+        if (BaseTraceService.getIsServerConfigUpdate()) {\n+            unchangingFieldsJson_AccessLog = null;\n+        }\n         if (unchangingFieldsJson_AccessLog == null) {\n             StringBuilder temp = new StringBuilder(512);\n             addToJSON(temp, AccessLogData.getHostKeyJSON(), hostName, false, false, false, false);\n             addToJSON(temp, AccessLogData.getUserDirKeyJSON(), wlpUserDir, false, true, false, false);\n             addToJSON(temp, AccessLogData.getServerNameKeyJSON(), serverName, false, false, false, false);\n             unchangingFieldsJson_AccessLog = temp.toString();\n         }\n-        sb.append(unchangingFieldsJson_AccessLog);\n+        if (!unchangingFieldsJson_AccessLog.isEmpty() && unchangingFieldsJson_AccessLog != null) {\n+            if (sb.length() > 1)\n+                sb.append(unchangingFieldsJson_AccessLog);\n+            else\n+                sb.append(unchangingFieldsJson_AccessLog.substring(1));\n+        }\n     }\n \n     private static void addUnchangingFieldsJSON_FFDC(StringBuilder sb, String hostName, String wlpUserDir, String serverName) {\n+        if (BaseTraceService.getIsServerConfigUpdate()) {\n+            unchangingFieldsJson_FFDC = null;\n+        }\n         if (unchangingFieldsJson_FFDC == null) {\n             StringBuilder temp = new StringBuilder(512);\n             addToJSON(temp, FFDCData.getHostKeyJSON(), hostName, false, false, false, false);\n             addToJSON(temp, FFDCData.getUserDirKeyJSON(), wlpUserDir, false, true, false, false);\n             addToJSON(temp, FFDCData.getServerNameKeyJSON(), serverName, false, false, false, false);\n             unchangingFieldsJson_FFDC = temp.toString();\n         }\n-        sb.append(unchangingFieldsJson_FFDC);\n+        if (!unchangingFieldsJson_FFDC.isEmpty() && unchangingFieldsJson_FFDC != null) {\n+            if (sb.length() > 1)\n+                sb.append(unchangingFieldsJson_FFDC);\n+            else\n+                sb.append(unchangingFieldsJson_FFDC.substring(1));\n+        }\n     }\n \n     private static void addUnchangingFieldsJSON_Audit(StringBuilder sb, String hostName, String wlpUserDir, String serverName) {\n+        if (BaseTraceService.getIsServerConfigUpdate()) {\n+            unchangingFieldsJson_Audit = null;\n+        }\n         if (unchangingFieldsJson_Audit == null) {\n             StringBuilder temp = new StringBuilder(512);\n             addToJSON(temp, AuditData.getHostKeyJSON(), hostName, false, false, false, false);\n             addToJSON(temp, AuditData.getUserDirKeyJSON(), wlpUserDir, false, true, false, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7314aa20de6f06c198885a5494232e11b54a671f"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzEwOTcxOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNjo0MDo1MFrOFjPeWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNjo0MDo1MFrOFjPeWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ5ODAxMA==", "bodyText": "this code doesn't check to see if host, userdir, or servername are supposed to be omitted", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r372498010", "createdAt": "2020-01-29T16:40:50Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java", "diffHunk": "@@ -220,58 +227,98 @@ private static void addUnchangingFields1_1(StringBuilder sb, String hostName, St\n     }\n \n     private static void addUnchangingFieldsJSON_Message(StringBuilder sb, String hostName, String wlpUserDir, String serverName, boolean isMessageEvent) {\n+        if (BaseTraceService.getIsServerConfigUpdate()) {\n+            unchangingFieldsJson_Message = null;\n+        }\n         if (unchangingFieldsJson_Message == null) {\n             StringBuilder temp = new StringBuilder(512);\n             addToJSON(temp, LogTraceData.getHostKeyJSON(isMessageEvent), hostName, false, false, false, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7314aa20de6f06c198885a5494232e11b54a671f"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzEyNzQ4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNjo0NTozOFrOFjPpbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNjo0NTozOFrOFjPpbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUwMDg0NA==", "bodyText": "this is a fair bit more expensive perf-wise than just adding a single field.  need to not have to recompose this on every event.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r372500844", "createdAt": "2020-01-29T16:45:38Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java", "diffHunk": "@@ -467,11 +518,18 @@ protected static StringBuilder startGCJson1_1(String hostName, String wlpUserDir\n     protected static StringBuilder startAuditJsonFields(String hostName, String wlpUserDir, String serverName) {\n         StringBuilder sb = new StringBuilder(2048);\n \n+        if (BaseTraceService.getIsServerConfigUpdate()) {\n+            startAuditJsonFields = null;\n+        }\n         if (startAuditJsonFields != null) {\n             sb.append(startAuditJsonFields);\n         } else {\n             sb.append(\"{\");\n-            sb.append(AUDIT_JSON_TYPE_FIELD);\n+            if (!(AuditData.getTypeKeyJSON().equals(OMIT_FIELDS_STRING))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7314aa20de6f06c198885a5494232e11b54a671f"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzIwNzk0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNzowODo1MFrOFjQc-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNzowODo1MFrOFjQc-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUxNDA0MQ==", "bodyText": "was this comment change and change below intentional?  perhaps something related to the revert?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r372514041", "createdAt": "2020-01-29T17:08:50Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java", "diffHunk": "@@ -392,13 +396,10 @@ public synchronized void update(LogProviderConfig config) {\n         commonConsoleLogHandlerUpdates();\n \n         /*\n-         * If messageFormat has been configured to 'basic' OR if consoleFormat is neither basic nor json (default to basic)\n-         * - ensure that we are not connecting conduits/bufferManagers to the handler\n+         * If messageFormat has been configured to 'basic' - ensure that we are not connecting conduits/bufferManagers to the handler", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7314aa20de6f06c198885a5494232e11b54a671f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzIzODkyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNzoxNzo0OVrOFjQwOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNzoxNzo0OVrOFjQwOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUxODk3MQ==", "bodyText": "could changes be simplified?\neg. put above line 506:\npair = pair.trim();\nif (pair.endsWith(\":\"))\n    pair = pair + OMIT_FIELDS_STRING;", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r372518971", "createdAt": "2020-01-29T17:17:49Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java", "diffHunk": "@@ -483,12 +501,15 @@ public static void applyJsonFields(String value) {\n         List<String> AuditList = Arrays.asList(AuditData.NAMES1_1);\n \n         String[] keyValuePairs = value.split(\",\"); //split the string to create key-value pairs\n-\n         for (String pair : keyValuePairs) //iterate over the pairs\n         {\n-            String[] entry = pair.split(\":\"); //split the pairs to get key and value\n+            String[] entry = pair.trim().split(\":\"); //split the pairs to get key and value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7314aa20de6f06c198885a5494232e11b54a671f"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDIzOTU2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODozNDo0NFrOFkUKew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODozNDo0NFrOFkUKew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyMzQxOQ==", "bodyText": "with change above (on lines 512-514) pair will never end with \":\"", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r373623419", "createdAt": "2020-01-31T18:34:44Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java", "diffHunk": "@@ -529,223 +509,95 @@ public static void applyJsonFields(String value, Boolean omitJsonFields) {\n         String[] keyValuePairs = value.split(\",\"); //split the string to create key-value pairs\n         for (String pair : keyValuePairs) //iterate over the pairs\n         {\n-            String[] entry = pair.trim().split(\":\"); //split the pairs to get key and value\n-            entry[0] = entry[0].trim();\n+            pair = pair.trim();\n+            if (pair.endsWith(\":\"))\n+                pair = pair + OMIT_FIELDS_STRING;\n \n-            //env var omitJsonFields\n-            if (pair.trim().endsWith(\":\") && omitJsonFields) { //FIND FIELDS THAT NEED TO BE OMITTED\n-                Set<String> omitFieldsSet = new HashSet<>();\n-                if (entry.length == 1) { //omit fields for all event types (just a field name)\n-                    omitFieldsSet.add(entry[0]);\n+            String[] entry = pair.split(\":\"); //split the pairs to get key and value\n+            entry[0] = entry[0].trim();\n \n-                    if (LogTraceList.contains(entry[0])) {\n-                        valueFound = true;\n-                        if (omitFieldsMap.containsKey(CollectorConstants.MESSAGES_CONFIG_VAL)) {\n-                            omitFieldsMap.get(CollectorConstants.MESSAGES_CONFIG_VAL).add(entry[0]);\n-                        } else if (!omitFieldsMap.containsKey(CollectorConstants.MESSAGES_CONFIG_VAL)) {\n-                            omitFieldsMap.put(CollectorConstants.MESSAGES_CONFIG_VAL, omitFieldsSet);\n-                        }\n-                        if (omitFieldsMap.containsKey(CollectorConstants.TRACE_CONFIG_VAL)) {\n-                            omitFieldsMap.get(CollectorConstants.TRACE_CONFIG_VAL).add(entry[0]);\n-                        } else if (!omitFieldsMap.containsKey(CollectorConstants.TRACE_CONFIG_VAL)) {\n-                            omitFieldsMap.put(CollectorConstants.TRACE_CONFIG_VAL, omitFieldsSet);\n-                        }\n-                    }\n-                    if (FFDCList.contains(entry[0])) {\n-                        valueFound = true;\n-                        if (omitFieldsMap.containsKey(CollectorConstants.FFDC_CONFIG_VAL)) {\n-                            omitFieldsMap.get(CollectorConstants.FFDC_CONFIG_VAL).add(entry[0]);\n-                        } else {\n-                            omitFieldsMap.put(CollectorConstants.FFDC_CONFIG_VAL, omitFieldsSet);\n-                        }\n-                    }\n-                    if (AccessLogList.contains(entry[0])) {\n-                        valueFound = true;\n-                        if (omitFieldsMap.containsKey(CollectorConstants.ACCESS_CONFIG_VAL)) {\n-                            omitFieldsMap.get(CollectorConstants.ACCESS_CONFIG_VAL).add(entry[0]);\n-                        } else {\n-                            omitFieldsMap.put(CollectorConstants.ACCESS_CONFIG_VAL, omitFieldsSet);\n-                        }\n-                    }\n-                    if (AuditList.contains(entry[0])) {\n-                        valueFound = true;\n-                        if (omitFieldsMap.containsKey(CollectorConstants.AUDIT_CONFIG_VAL)) {\n-                            omitFieldsMap.get(CollectorConstants.AUDIT_CONFIG_VAL).add(entry[0]);\n-                        } else {\n-                            omitFieldsMap.put(CollectorConstants.AUDIT_CONFIG_VAL, omitFieldsSet);\n-                        }\n-                    }\n-                    //extensions\n-                    if (entry[0].startsWith(\"ext_\")) {\n-                        valueFound = true;\n-                        if (omitFieldsMap.containsKey(CollectorConstants.MESSAGES_CONFIG_VAL)) {\n-                            omitFieldsMap.get(CollectorConstants.MESSAGES_CONFIG_VAL).add(entry[0]);\n-                        } else if (!omitFieldsMap.containsKey(CollectorConstants.MESSAGES_CONFIG_VAL)) {\n-                            omitFieldsMap.put(CollectorConstants.MESSAGES_CONFIG_VAL, omitFieldsSet);\n-                        }\n-                        if (omitFieldsMap.containsKey(CollectorConstants.TRACE_CONFIG_VAL)) {\n-                            omitFieldsMap.get(CollectorConstants.TRACE_CONFIG_VAL).add(entry[0]);\n-                        } else if (!omitFieldsMap.containsKey(CollectorConstants.TRACE_CONFIG_VAL)) {\n-                            omitFieldsMap.put(CollectorConstants.TRACE_CONFIG_VAL, omitFieldsSet);\n-                        }\n-                    }\n-                    if (!valueFound) {\n-                        //if the value does not exist in any of the known keys, give a warning\n-                        Tr.warning(tc, \"JSON_FIELDS_NO_MATCH\");\n-                    }\n-                    valueFound = false;//reset valueFound boolean\n-\n-                } else if (entry.length == 2) { //omit fields for specific event types (event type and field name)\n-                    omitFieldsSet.add(entry[1]);\n-                    entry[1] = entry[1].trim();\n-\n-                    if (CollectorConstants.MESSAGES_CONFIG_VAL.equals(entry[0])) {\n-                        if (LogTraceList.contains(entry[1]) || entry[1].startsWith(\"ext_\")) {\n-                            valueFound = true;\n-                            if (omitFieldsMap.containsKey(entry[0])) {\n-                                omitFieldsMap.get(entry[0]).add(entry[1]);\n-                            } else {\n-                                omitFieldsMap.put(entry[0], omitFieldsSet);\n-                            }\n-                        }\n-                    } else if (CollectorConstants.TRACE_CONFIG_VAL.equals(entry[0])) {\n-                        if (LogTraceList.contains(entry[1]) || entry[1].startsWith(\"ext_\")) {\n-                            valueFound = true;\n-                            if (omitFieldsMap.containsKey(entry[0])) {\n-                                omitFieldsMap.get(entry[0]).add(entry[1]);\n-                            } else {\n-                                omitFieldsMap.put(entry[0], omitFieldsSet);\n-                            }\n-                        }\n-                    } else if (CollectorConstants.FFDC_CONFIG_VAL.equals(entry[0])) {\n-                        if (FFDCList.contains(entry[1])) {\n-                            valueFound = true;\n-                            if (omitFieldsMap.containsKey(entry[0])) {\n-                                omitFieldsMap.get(entry[0]).add(entry[1]);\n-                            } else {\n-                                omitFieldsMap.put(entry[0], omitFieldsSet);\n-                            }\n-                        }\n-                    } else if (CollectorConstants.ACCESS_CONFIG_VAL.equals(entry[0])) {\n-                        if (AccessLogList.contains(entry[1])) {\n-                            valueFound = true;\n-                            if (omitFieldsMap.containsKey(entry[0])) {\n-                                omitFieldsMap.get(entry[0]).add(entry[1]);\n-                            } else {\n-                                omitFieldsMap.put(entry[0], omitFieldsSet);\n-                            }\n-                        }\n-                    } else if (CollectorConstants.AUDIT_CONFIG_VAL.equals(entry[0])) {\n-                        if (AuditList.contains(entry[1])) {\n-                            valueFound = true;\n-                            if (omitFieldsMap.containsKey(entry[0])) {\n-                                omitFieldsMap.get(entry[0]).add(entry[1]);\n-                            } else {\n-                                omitFieldsMap.put(entry[0], omitFieldsSet);\n-                            }\n-                        }\n-                    } else {\n-                        isInvalidField = true;\n-                        Tr.warning(tc, \"JSON_FIELDS_INCORRECT_EVENT_TYPE\");\n-                    }\n-                    if (!valueFound && !isInvalidField) {\n-                        //if the value does not exist in any of the known keys, give a warning\n-                        Tr.warning(tc, \"JSON_FIELDS_NO_MATCH\");\n-                    }\n-                    valueFound = false;\n-                    isInvalidField = false;\n+            if ((entry.length == 2 && !pair.trim().endsWith(\":\")) || (pair.trim().endsWith(\":\") && entry.length == 1 && omitJsonFields)) {//if the mapped value is intended for all event types", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11cdd49aa6217a80b8d36cdd32db172ad87060ac"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTM5MDg4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxOTowOTozMFrOFkeuqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDozOTozOVrOFkzlTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5NjUyMw==", "bodyText": "OR if messageFormat -> OR if consoleFormat", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r373796523", "createdAt": "2020-02-01T19:09:30Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java", "diffHunk": "@@ -392,7 +396,7 @@ public synchronized void update(LogProviderConfig config) {\n         commonConsoleLogHandlerUpdates();\n \n         /*\n-         * If messageFormat has been configured to 'basic' OR if consoleFormat is neither basic nor json (default to basic)\n+         * If messageFormat has been configured to 'basic' OR if messageFormat is neither basic nor json (default to basic)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c52b7dc120e5b468819fa1f3a89db85495f60798"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEzODE4OA==", "bodyText": "This should have been messageFormat in the first commit instead of consoleFormat", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r374138188", "createdAt": "2020-02-03T14:39:39Z", "author": {"login": "ellen-lau"}, "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java", "diffHunk": "@@ -392,7 +396,7 @@ public synchronized void update(LogProviderConfig config) {\n         commonConsoleLogHandlerUpdates();\n \n         /*\n-         * If messageFormat has been configured to 'basic' OR if consoleFormat is neither basic nor json (default to basic)\n+         * If messageFormat has been configured to 'basic' OR if messageFormat is neither basic nor json (default to basic)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5NjUyMw=="}, "originalCommit": {"oid": "c52b7dc120e5b468819fa1f3a89db85495f60798"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTM5MzI2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxOToxNjowNVrOFkewAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxOToxNjowNVrOFkewAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5Njg2Nw==", "bodyText": "this would make logging requests received during the update use the json field name defaults rather than their values from before the update happened.  Aliases need to go from their pre-update value to their post-update value without momentarily being set to their original value.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r373796867", "createdAt": "2020-02-01T19:16:05Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java", "diffHunk": "@@ -464,13 +468,33 @@ public synchronized void update(LogProviderConfig config) {\n         }\n     }\n \n-    public static void applyJsonFields(String value) {\n-        if (value == null || value == \"\" || value.isEmpty()) {\n+    public static boolean getIsServerConfigUpdate() {\n+        return isServerConfigUpdate;\n+    }\n+\n+    public static void applyJsonFields(String value, Boolean omitJsonFields) {\n+\n+        if (!isServerConfigSetup)\n+            isServerConfigUpdate = true;\n+        else\n+            isServerConfigSetup = false;\n+\n+        if (isServerConfigUpdate) {\n+            AccessLogData.resetJsonLoggingNameAliases();\n+            FFDCData.resetJsonLoggingNameAliases();\n+            LogTraceData.resetJsonLoggingNameAliasesMessage();\n+            LogTraceData.resetJsonLoggingNameAliasesTrace();\n+            AuditData.resetJsonLoggingNameAliases();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c52b7dc120e5b468819fa1f3a89db85495f60798"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTM5NTkwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxOToyMzoxM1rOFkexbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxOToyMzoxM1rOFkexbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5NzIzMA==", "bodyText": "isInvalidEventType might be better name for this one", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r373797230", "createdAt": "2020-02-01T19:23:13Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/internal/impl/BaseTraceService.java", "diffHunk": "@@ -549,17 +578,21 @@ public static void applyJsonFields(String value) {\n                         valueFound = true;\n                     }\n                 } else {\n+                    isInvalidField = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c52b7dc120e5b468819fa1f3a89db85495f60798"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTQwMTEzOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxOTozODozOVrOFke0KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxOTozODozOVrOFke0KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5NzkyOQ==", "bodyText": "need to do the null check first to avoid potential NPEs on the isEmpty check", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r373797929", "createdAt": "2020-02-01T19:38:39Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/collector/CollectorJsonHelpers.java", "diffHunk": "@@ -220,58 +227,98 @@ private static void addUnchangingFields1_1(StringBuilder sb, String hostName, St\n     }\n \n     private static void addUnchangingFieldsJSON_Message(StringBuilder sb, String hostName, String wlpUserDir, String serverName, boolean isMessageEvent) {\n+        if (BaseTraceService.getIsServerConfigUpdate()) {\n+            unchangingFieldsJson_Message = null;\n+        }\n         if (unchangingFieldsJson_Message == null) {\n             StringBuilder temp = new StringBuilder(512);\n             addToJSON(temp, LogTraceData.getHostKeyJSON(isMessageEvent), hostName, false, false, false, false);\n             addToJSON(temp, LogTraceData.getUserDirKeyJSON(isMessageEvent), wlpUserDir, false, true, false, false);\n             addToJSON(temp, LogTraceData.getServerNameKeyJSON(isMessageEvent), serverName, false, false, false, false);\n             unchangingFieldsJson_Message = temp.toString();\n         }\n-        sb.append(unchangingFieldsJson_Message);\n+        if (!unchangingFieldsJson_Message.isEmpty() && unchangingFieldsJson_Message != null) {\n+            if (sb.length() > 1)\n+                sb.append(unchangingFieldsJson_Message);\n+            else\n+                sb.append(unchangingFieldsJson_Message.substring(1));\n+        }\n     }\n \n     private static void addUnchangingFieldsJSON_Trace(StringBuilder sb, String hostName, String wlpUserDir, String serverName, boolean isMessageEvent) {\n+        if (BaseTraceService.getIsServerConfigUpdate()) {\n+            unchangingFieldsJson_Trace = null;\n+        }\n         if (unchangingFieldsJson_Trace == null) {\n             StringBuilder temp = new StringBuilder(512);\n             addToJSON(temp, LogTraceData.getHostKeyJSON(isMessageEvent), hostName, false, false, false, false);\n             addToJSON(temp, LogTraceData.getUserDirKeyJSON(isMessageEvent), wlpUserDir, false, true, false, false);\n             addToJSON(temp, LogTraceData.getServerNameKeyJSON(isMessageEvent), serverName, false, false, false, false);\n             unchangingFieldsJson_Trace = temp.toString();\n         }\n-        sb.append(unchangingFieldsJson_Trace);\n+        if (!unchangingFieldsJson_Trace.isEmpty() && unchangingFieldsJson_Trace != null) {\n+            if (sb.length() > 1)\n+                sb.append(unchangingFieldsJson_Trace);\n+            else\n+                sb.append(unchangingFieldsJson_Trace.substring(1));\n+        }\n     }\n \n     private static void addUnchangingFieldsJSON_AccessLog(StringBuilder sb, String hostName, String wlpUserDir, String serverName) {\n+        if (BaseTraceService.getIsServerConfigUpdate()) {\n+            unchangingFieldsJson_AccessLog = null;\n+        }\n         if (unchangingFieldsJson_AccessLog == null) {\n             StringBuilder temp = new StringBuilder(512);\n             addToJSON(temp, AccessLogData.getHostKeyJSON(), hostName, false, false, false, false);\n             addToJSON(temp, AccessLogData.getUserDirKeyJSON(), wlpUserDir, false, true, false, false);\n             addToJSON(temp, AccessLogData.getServerNameKeyJSON(), serverName, false, false, false, false);\n             unchangingFieldsJson_AccessLog = temp.toString();\n         }\n-        sb.append(unchangingFieldsJson_AccessLog);\n+        if (!unchangingFieldsJson_AccessLog.isEmpty() && unchangingFieldsJson_AccessLog != null) {\n+            if (sb.length() > 1)\n+                sb.append(unchangingFieldsJson_AccessLog);\n+            else\n+                sb.append(unchangingFieldsJson_AccessLog.substring(1));\n+        }\n     }\n \n     private static void addUnchangingFieldsJSON_FFDC(StringBuilder sb, String hostName, String wlpUserDir, String serverName) {\n+        if (BaseTraceService.getIsServerConfigUpdate()) {\n+            unchangingFieldsJson_FFDC = null;\n+        }\n         if (unchangingFieldsJson_FFDC == null) {\n             StringBuilder temp = new StringBuilder(512);\n             addToJSON(temp, FFDCData.getHostKeyJSON(), hostName, false, false, false, false);\n             addToJSON(temp, FFDCData.getUserDirKeyJSON(), wlpUserDir, false, true, false, false);\n             addToJSON(temp, FFDCData.getServerNameKeyJSON(), serverName, false, false, false, false);\n             unchangingFieldsJson_FFDC = temp.toString();\n         }\n-        sb.append(unchangingFieldsJson_FFDC);\n+        if (!unchangingFieldsJson_FFDC.isEmpty() && unchangingFieldsJson_FFDC != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c52b7dc120e5b468819fa1f3a89db85495f60798"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDQ2NjI3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/NameAliases.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODowODo1MlrOFk6wdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODowODo1MlrOFk6wdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI1NTczMg==", "bodyText": "this should also reset the extensions", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r374255732", "createdAt": "2020-02-03T18:08:52Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/NameAliases.java", "diffHunk": "@@ -47,4 +47,8 @@ public void newAliases(Map<String, String> newAliases) {\n         aliases = tempAliases;\n     }\n \n-}\n+    public void resetAliases() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ded8e4f0e7c14d75a35c3e7a97f8def2b21c8824"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDgwMzU1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/NameAliases.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOTo1ODoyMlrOFk-Cnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOTo1ODoyMlrOFk-Cnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwOTUzNQ==", "bodyText": "need to also clear originalExtensions.\nPlease also add test cases for clearing/setting ext_ aliases to the json logging bucket - seems like this may be lacking", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r374309535", "createdAt": "2020-02-03T19:58:22Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/NameAliases.java", "diffHunk": "@@ -49,6 +49,7 @@ public void newAliases(Map<String, String> newAliases) {\n \n     public void resetAliases() {\n         aliases = originalNames.clone();\n+        aliasesExtensions.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ead0b699a4fdbf424bffca34886d86edd4c7527"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTU4MzcyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODoyNTowN1rOFmlgpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODoyNTowN1rOFmlgpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAwNDc3Mg==", "bodyText": "add test to rename ext_testExtension to another value before omitting it.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r376004772", "createdAt": "2020-02-06T18:25:07Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java", "diffHunk": "@@ -273,6 +290,27 @@ public void testOmitForMessageType() throws Exception {\n \n     }\n \n+    @Test\n+    public void testRenameAndOmitExtFields() throws Exception {\n+        setUp(server_xml);\n+\n+        //add/register extension field\n+        getHttpServlet(\"/extFields/addExtFields\", server_xml);\n+\n+        //rename extension fields\n+        setServerConfiguration(true, \"ext_testExtension:MY_EXTENSION\", server_xml);\n+        getHttpServlet(\"/extFields/CreateLogs\", server_xml); //see new renamed field\n+        assertNotNull(\"The extension field name was not renamed\", server_xml.waitForStringInLogUsingMark(\"MY_EXTENSION\"));\n+\n+        server_xml.setMarkToEndOfLog();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91ecced462d1e1765370e0388c39fbbe709324b2"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTU4OTA0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODoyNjo0NlrOFmlj_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODoyNjo0NlrOFmlj_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAwNTYzMQ==", "bodyText": "should make a call to the server to remove the registered extension to clean up", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r376005631", "createdAt": "2020-02-06T18:26:46Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java", "diffHunk": "@@ -273,6 +290,27 @@ public void testOmitForMessageType() throws Exception {\n \n     }\n \n+    @Test\n+    public void testRenameAndOmitExtFields() throws Exception {\n+        setUp(server_xml);\n+\n+        //add/register extension field\n+        getHttpServlet(\"/extFields/addExtFields\", server_xml);\n+\n+        //rename extension fields\n+        setServerConfiguration(true, \"ext_testExtension:MY_EXTENSION\", server_xml);\n+        getHttpServlet(\"/extFields/CreateLogs\", server_xml); //see new renamed field\n+        assertNotNull(\"The extension field name was not renamed\", server_xml.waitForStringInLogUsingMark(\"MY_EXTENSION\"));\n+\n+        server_xml.setMarkToEndOfLog();\n+\n+        //omit extension fields\n+        setServerConfiguration(true, \"ext_testExtension:\", server_xml);\n+        getHttpServlet(\"/extFields/CreateLogs\", server_xml); //see omitted field\n+        assertNull(\"The extension field name was not omitted\", server_xml.waitForStringInLogUsingMark(\"ext_testExtension\"));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91ecced462d1e1765370e0388c39fbbe709324b2"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDc1NzE1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxNDo0NTozM1rOFnVZkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxNDo0NTozM1rOFnVZkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4OTM5Mw==", "bodyText": "should also check to make sure MY_EXTENSION doesn't appear in the log here (in case the reconfiguration doesn't happen properly)", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r376789393", "createdAt": "2020-02-09T14:45:33Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java", "diffHunk": "@@ -309,6 +310,19 @@ public void testRenameAndOmitExtFields() throws Exception {\n         getHttpServlet(\"/extFields/CreateLogs\", server_xml); //see omitted field\n         assertNull(\"The extension field name was not omitted\", server_xml.waitForStringInLogUsingMark(\"ext_testExtension\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84785b620eee4efcf70c647de41e72c599b3c3ff"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDc1OTkyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxNDo1MDoyNlrOFnVa_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxNDo1MDoyNlrOFnVa_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4OTc1Nw==", "bodyText": "I think here you would want to watch for \"RENAME\" again since that's the last thing the test configured the field to be named.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r376789757", "createdAt": "2020-02-09T14:50:26Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java", "diffHunk": "@@ -309,6 +310,19 @@ public void testRenameAndOmitExtFields() throws Exception {\n         getHttpServlet(\"/extFields/CreateLogs\", server_xml); //see omitted field\n         assertNull(\"The extension field name was not omitted\", server_xml.waitForStringInLogUsingMark(\"ext_testExtension\"));\n \n+        server_xml.setMarkToEndOfLog();\n+\n+        //rename extension fields\n+        setServerConfiguration(true, \"ext_testExtension:RENAME\", server_xml);\n+        getHttpServlet(\"/extFields/CreateLogs\", server_xml); //see new renamed field\n+        assertNotNull(\"The extension field name was not renamed\", server_xml.waitForStringInLogUsingMark(\"RENAME\"));\n+\n+        //remove/unregister extension field\n+        getHttpServlet(\"/extFields/removeExtFields\", server_xml);\n+        server_xml.setMarkToEndOfLog();\n+        getHttpServlet(\"/extFields/CreateLogs\", server_xml);\n+        assertNull(\"The extension field name was not unregistered\", server_xml.waitForStringInLogUsingMark(\"ext_testExtension\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84785b620eee4efcf70c647de41e72c599b3c3ff"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MTYwOTUxOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QxOTo0MjoxNlrOFtScqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QxOTo0MjoxNlrOFtScqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAzMjQ4OQ==", "bodyText": "the regex we tested was ^.*module:((?!ibm_sequence).)*$ -- I understand why you have added the quotes around module and put loglevel in instead of ibm_sequence, but I think it should be $ at the end rather than ?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r383032489", "createdAt": "2020-02-23T19:42:16Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging_fat/fat/src/com/ibm/ws/logging/fat/JSONFieldsTest.java", "diffHunk": "@@ -118,7 +118,7 @@ public void testMessageFieldNamesOmitEnv() throws Exception {\n         setUp(server_env_omit);\n         //List<String> lines = server_env_omit.findStringsInFileInLibertyServerRoot(\"\\\"message\\\"\", MESSAGE_LOG);\n         //assertTrue(\"The message field name was not omitted in messages.log.\", lines.size() == 0);\n-        assertNull(\"The message field name was not omitted in messages.log.\", server_xml.waitForStringInLogUsingMark(\"\\\"loglevel\\\"\"));\n+        assertNotNull(\"The loglevel field name was not omitted in messages.log.\", server_env_omit.waitForStringInLogUsingMark(\"^.*\\\"module\\\":((?!\\\"loglevel\\\").)*?\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74b295b903c5fbc44dd957fbe7bf01e4bb082476"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjgyNjY4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTo1Njo1N1rOFvio2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTo1Njo1N1rOFvio2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5NDkwNA==", "bodyText": "jsonBuilder", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r385394904", "createdAt": "2020-02-27T21:56:57Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.logging.data;\n+\n+/* Class for JSON formatting of key-value pairs for logging\n+ *\n+ *\n+ */\n+\n+public class JSONObject {\n+    private boolean hasAnyFields = false;\n+    private final String OMIT_FIELDS_STRING = \"@@@OMIT@@@\";\n+    private final StringBuilder JSONBuilder = new StringBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3172d960cf0e9679384cab9b5ca0bf51c341deb7"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjgzMTM5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTo1ODozNFrOFvirtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMTo1ODozNFrOFvirtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5NTYzNg==", "bodyText": "startLogEntry shouldn't be specified by the caller.  To start, a caller should either add a field (implying JSONObject needs to start the log entry) or should add raw JSON.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r385395636", "createdAt": "2020-02-27T21:58:34Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.logging.data;\n+\n+/* Class for JSON formatting of key-value pairs for logging\n+ *\n+ *\n+ */\n+\n+public class JSONObject {\n+    private boolean hasAnyFields = false;\n+    private final String OMIT_FIELDS_STRING = \"@@@OMIT@@@\";\n+    private final StringBuilder JSONBuilder = new StringBuilder();\n+\n+    public JSONObject(boolean startLogEntry) {\n+        if (startLogEntry)\n+            JSONBuilder.append(\"{\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3172d960cf0e9679384cab9b5ca0bf51c341deb7"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjgzOTg1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjowMTozOVrOFviw5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjowMTozOVrOFviw5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5Njk2Nw==", "bodyText": "looks like trim isn't used -- if it's not needed, should remove it", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r385396967", "createdAt": "2020-02-27T22:01:39Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.logging.data;\n+\n+/* Class for JSON formatting of key-value pairs for logging\n+ *\n+ *\n+ */\n+\n+public class JSONObject {\n+    private boolean hasAnyFields = false;\n+    private final String OMIT_FIELDS_STRING = \"@@@OMIT@@@\";\n+    private final StringBuilder JSONBuilder = new StringBuilder();\n+\n+    public JSONObject(boolean startLogEntry) {\n+        if (startLogEntry)\n+            JSONBuilder.append(\"{\");\n+    }\n+\n+    //use this for adding full UnchangingFields string\n+    public JSONObject addRaw(String s) {\n+        if (s.isEmpty()) {\n+            return this;\n+        }\n+        prepForNewField();\n+\n+        //add the field to the JSON\n+        JSONBuilder.append(s);\n+        return this;\n+    }\n+\n+    //for String values\n+    public JSONObject addField(String name, String value, boolean jsonEscapeName, boolean jsonEscapeValue, boolean trim) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3172d960cf0e9679384cab9b5ca0bf51c341deb7"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Njg0NTI2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjowMzoxM1rOFviz9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjowMzoxM1rOFviz9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM5Nzc0OA==", "bodyText": "should combine all of the addField methods into one that does most of the work, and all the others just pass along the String representation of the value and an indicator of whether quotes are needed around the value.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r385397748", "createdAt": "2020-02-27T22:03:13Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.logging.data;\n+\n+/* Class for JSON formatting of key-value pairs for logging\n+ *\n+ *\n+ */\n+\n+public class JSONObject {\n+    private boolean hasAnyFields = false;\n+    private final String OMIT_FIELDS_STRING = \"@@@OMIT@@@\";\n+    private final StringBuilder JSONBuilder = new StringBuilder();\n+\n+    public JSONObject(boolean startLogEntry) {\n+        if (startLogEntry)\n+            JSONBuilder.append(\"{\");\n+    }\n+\n+    //use this for adding full UnchangingFields string\n+    public JSONObject addRaw(String s) {\n+        if (s.isEmpty()) {\n+            return this;\n+        }\n+        prepForNewField();\n+\n+        //add the field to the JSON\n+        JSONBuilder.append(s);\n+        return this;\n+    }\n+\n+    //for String values\n+    public JSONObject addField(String name, String value, boolean jsonEscapeName, boolean jsonEscapeValue, boolean trim) {\n+        if (name == null || value == null)\n+            return this;\n+\n+        if (name.equals(OMIT_FIELDS_STRING))\n+            return this;\n+\n+        prepForNewField();\n+\n+        //append name and value\n+        JSONBuilder.append(\"\\\"\");\n+\n+        if (jsonEscapeName)\n+            jsonEscape3(name);\n+        else\n+            JSONBuilder.append(name);\n+\n+        JSONBuilder.append(\"\\\":\\\"\");\n+\n+        if (jsonEscapeValue)\n+            jsonEscape3(value);\n+        else\n+            JSONBuilder.append(value);\n+\n+        JSONBuilder.append(\"\\\"\");\n+        return this;\n+    }\n+\n+    //for int values\n+    public JSONObject addField(String name, int value, boolean jsonEscapeName) {\n+        if (name == null)\n+            return this;\n+\n+        if (name.equals(OMIT_FIELDS_STRING))\n+            return this;\n+\n+        prepForNewField();\n+\n+        //append name and value\n+        JSONBuilder.append(\"\\\"\");\n+\n+        if (jsonEscapeName)\n+            jsonEscape3(name);\n+        else\n+            JSONBuilder.append(name);\n+\n+        JSONBuilder.append(\"\\\":\" + value);\n+\n+        return this;\n+    }\n+\n+    //for bool values\n+    public JSONObject addField(String name, boolean value, boolean jsonEscapeName) {\n+        if (name == null)\n+            return this;\n+\n+        if (name.equals(OMIT_FIELDS_STRING))\n+            return this;\n+\n+        prepForNewField();\n+\n+        //append name and value\n+        JSONBuilder.append(\"\\\"\");\n+\n+        if (jsonEscapeName)\n+            jsonEscape3(name);\n+        else\n+            JSONBuilder.append(name);\n+\n+        JSONBuilder.append(\"\\\":\" + value);\n+\n+        return this;\n+    }\n+\n+    //for long values\n+    public JSONObject addField(String name, long value, boolean jsonEscapeName) {\n+        if (name == null)\n+            return this;\n+\n+        if (name.equals(OMIT_FIELDS_STRING))\n+            return this;\n+\n+        prepForNewField();\n+\n+        //append name and value\n+        JSONBuilder.append(\"\\\"\");\n+\n+        if (jsonEscapeName)\n+            jsonEscape3(name);\n+        else\n+            JSONBuilder.append(name);\n+\n+        JSONBuilder.append(\"\\\":\" + value);\n+\n+        return this;\n+    }\n+\n+    //for long values\n+    public JSONObject addField(String name, float value, boolean jsonEscapeName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3172d960cf0e9679384cab9b5ca0bf51c341deb7"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4OTA1NTA3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDo0OToyM1rOFv3dCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDo0OToyM1rOFv3dCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTczNTk0Nw==", "bodyText": "rather than a \"closeLog\" method, I think this whole class would work a bit better if you follow builder pattern... https://dzone.com/articles/design-patterns-the-builder-pattern.  That would mean you'd make this a build method that would close out the bracket and return a JSON instance.  This class would become a Builder class.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10611#discussion_r385735947", "createdAt": "2020-02-28T14:49:23Z", "author": {"login": "donbourne"}, "path": "dev/com.ibm.ws.logging/src/com/ibm/ws/logging/data/JSONObject.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.logging.data;\n+\n+/* Class for JSON formatting of key-value pairs for logging\n+ *\n+ *\n+ */\n+\n+public class JSONObject {\n+    private boolean hasAnyFields = false;\n+    private final String OMIT_FIELDS_STRING = \"@@@OMIT@@@\";\n+    private final StringBuilder JSONBuilder = new StringBuilder();\n+\n+    public JSONObject(boolean startLogEntry) {\n+        if (startLogEntry)\n+            JSONBuilder.append(\"{\");\n+    }\n+\n+    //use this for adding full UnchangingFields string\n+    public JSONObject addRaw(String s) {\n+        if (s.isEmpty()) {\n+            return this;\n+        }\n+        prepForNewField();\n+\n+        //add the field to the JSON\n+        JSONBuilder.append(s);\n+        return this;\n+    }\n+\n+    //for String values\n+    public JSONObject addField(String name, String value, boolean jsonEscapeName, boolean jsonEscapeValue, boolean trim) {\n+        if (name == null || value == null)\n+            return this;\n+\n+        if (name.equals(OMIT_FIELDS_STRING))\n+            return this;\n+\n+        prepForNewField();\n+\n+        //append name and value\n+        JSONBuilder.append(\"\\\"\");\n+\n+        if (jsonEscapeName)\n+            jsonEscape3(name);\n+        else\n+            JSONBuilder.append(name);\n+\n+        JSONBuilder.append(\"\\\":\\\"\");\n+\n+        if (jsonEscapeValue)\n+            jsonEscape3(value);\n+        else\n+            JSONBuilder.append(value);\n+\n+        JSONBuilder.append(\"\\\"\");\n+        return this;\n+    }\n+\n+    //for int values\n+    public JSONObject addField(String name, int value, boolean jsonEscapeName) {\n+        if (name == null)\n+            return this;\n+\n+        if (name.equals(OMIT_FIELDS_STRING))\n+            return this;\n+\n+        prepForNewField();\n+\n+        //append name and value\n+        JSONBuilder.append(\"\\\"\");\n+\n+        if (jsonEscapeName)\n+            jsonEscape3(name);\n+        else\n+            JSONBuilder.append(name);\n+\n+        JSONBuilder.append(\"\\\":\" + value);\n+\n+        return this;\n+    }\n+\n+    //for bool values\n+    public JSONObject addField(String name, boolean value, boolean jsonEscapeName) {\n+        if (name == null)\n+            return this;\n+\n+        if (name.equals(OMIT_FIELDS_STRING))\n+            return this;\n+\n+        prepForNewField();\n+\n+        //append name and value\n+        JSONBuilder.append(\"\\\"\");\n+\n+        if (jsonEscapeName)\n+            jsonEscape3(name);\n+        else\n+            JSONBuilder.append(name);\n+\n+        JSONBuilder.append(\"\\\":\" + value);\n+\n+        return this;\n+    }\n+\n+    //for long values\n+    public JSONObject addField(String name, long value, boolean jsonEscapeName) {\n+        if (name == null)\n+            return this;\n+\n+        if (name.equals(OMIT_FIELDS_STRING))\n+            return this;\n+\n+        prepForNewField();\n+\n+        //append name and value\n+        JSONBuilder.append(\"\\\"\");\n+\n+        if (jsonEscapeName)\n+            jsonEscape3(name);\n+        else\n+            JSONBuilder.append(name);\n+\n+        JSONBuilder.append(\"\\\":\" + value);\n+\n+        return this;\n+    }\n+\n+    //for long values\n+    public JSONObject addField(String name, float value, boolean jsonEscapeName) {\n+        if (name == null)\n+            return this;\n+\n+        if (name.equals(OMIT_FIELDS_STRING))\n+            return this;\n+\n+        prepForNewField();\n+\n+        //append name and value\n+        JSONBuilder.append(\"\\\"\");\n+\n+        if (jsonEscapeName)\n+            jsonEscape3(name);\n+        else\n+            JSONBuilder.append(name);\n+\n+        JSONBuilder.append(\"\\\":\" + value);\n+\n+        return this;\n+    }\n+\n+    //get current JSON log as a string\n+    public String getJSONString() {\n+        return JSONBuilder.toString();\n+    }\n+\n+    public void closeLog() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3172d960cf0e9679384cab9b5ca0bf51c341deb7"}, "originalPosition": 166}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2179, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}