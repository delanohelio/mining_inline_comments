{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NzYwNTcy", "number": 12119, "reviewThreads": {"totalCount": 56, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMzo1ODo1M1rOD7ezlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjoxNDowNlrOECYZ7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjk3MzAyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMzo1ODo1NFrOGT1M5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMzo1ODo1NFrOGT1M5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ0Nzc4MA==", "bodyText": "I would probably say 'this CAN occur - and if so it can be ignore'.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r423447780", "createdAt": "2020-05-12T03:58:54Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -130,7 +130,7 @@ CWPKI2023E=CWPKI2023E: The ACME service could not write to the account key file\n CWPKI2023E.explanation=The account keys could not be stored in the account key file. This can occur if the file permissions are incorrect or the file does not exist.\n CWPKI2023E.useraction=Review the error message for details on the failure. Verify the file location is correct and the server has write file permissions.\n \n-CWPKI2024E=CWPKI2024E: The ACME service failed to revoke the requested certificate for the ACME certificate authority at the {0} URI. The certificate is serial number {1}. The error is ''{2}''.\n+CWPKI2024E=CWPKI2024E: The ACME service failed to revoke the requested certificate for the ACME certificate authority at the {0} URI. The certificate is serial number {1}. The error is ''{2}''. This will occur if the directoryURI has changed. If so, the warning can be ignored.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43685e4282f87248cbb56d95117895c7485f1acb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjk3NjE1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDowMDo1NFrOGT1Oyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDowMDo1NFrOGT1Oyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ0ODI2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tif (certificate != null) serial = certificate.getSerialNumber().toString();\n          \n          \n            \n            \t\t\tif (certificate != null) serial = certificate.getSerialNumber().toString(16);", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r423448266", "createdAt": "2020-05-12T04:00:54Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java", "diffHunk": "@@ -873,5 +911,98 @@ protected void updateAcmeConfigService(AcmeConfigService acmeConfigService, Map<\n \tpublic void setAcmeApplicationStateListener(AcmeApplicationStateListener acmeApplicationStateListener) {\n \t\tapplicationStateListenerRef.set(acmeApplicationStateListener);\n \t}\n+\t\n+\t/**\n+\t * This method determines if the directoryURI has changed by checking\n+\t * the acme file.\n+\n+\t * @return True if the directoryURI has changed\n+\t * @throws AcmeCaException\n+\t */\n+\tprivate boolean directoryURIChanged() throws AcmeCaException {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tString fileDirURI = acmeConfig.getDirectoryURI();\n+\t\ttry {\n+\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t    String line, lastLine = null; \n+\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\tlastLine=line;\n+\t\t\t}\n+\t\t\tbr.close();\n+\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) fileDirURI = tok.nextToken();\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tTr.error(tc, e.getMessage()); // AcmeCaExceptions are localized.\n+\t\t}\n+\t\tString directoryURI = acmeConfig.getDirectoryURI();\n+\t\tif (directoryURI.equals(fileDirURI)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn true;\n+\t}\n+\t\n+\t/**\n+\t * This method will create the initial acme file in the servers/workarea\n+\t * directory. It holds certificate and directoryURI information, eg.\n+\t *  Date                Serial                   DirectoryURI                    Account URI\n+     *  --------------------------------------------------------------------------------------------\n+     *  20200509231118      6542743894787011570      https://localhost:33827/dir     https://localhost:33827/my-account/1\n+\t */\n+\tprivate void createAcmeFile() {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tif (file.exists()) return;\n+\t\tfile.getParentFile().mkdirs();\n+\t\ttry {\n+\t\t\tfile.createNewFile();\n+\t\t\tFileWriter fr;\n+\t\t\tfr = new FileWriter(file, true);\n+\t\t\tfr.write(\"Date\" + \"\\t\\t\\t\" + \"Serial\" + \"\\t\\t\" + \"DirectoryURI\" + \"\\t\\t\" + \"Account URI\" + \"\\n\");\n+\t\t\tfr.write(\"-------------------------------------------------------------------------------------------------------------------------\");\n+\t       \tfr.close();\n+\t\t} catch (IOException e) {\n+\t\t\tTr.error(tc, e.getMessage()); // AcmeCaExceptions are localized.\n+\t\t}\n+\t}\n+\n+\tprivate void updateAcmeFile() throws AcmeCaException {\n+\t\tupdateAcmeFile(null);\n+\t}\n+\n+\t/**\n+\t * Update the acme file with the original or updated certificate\n+\t * and directoryURI information.\n+\t * @param acmeCertificate The AcmeCertificate to use to populate\n+\t * the acme file or null to use the default certificate\n+\t * \n+\t * @throws AcmeCaException\n+\t */\n+\tprivate void updateAcmeFile(AcmeCertificate acmeCertificate) throws AcmeCaException {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tString directoryURI = acmeConfig.getDirectoryURI(); \n+\t\tDateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"yyyyMMddHHmmss\");  \n+\t\tLocalDateTime now = LocalDateTime.now();  \n+\t\tString date = dtf.format(now);\n+\t\tString serial = null;\n+\t\tif (acmeCertificate == null) {\n+\t\t\tX509Certificate certificate = getLeafCertificate(getConfiguredDefaultCertificateChain());\n+\t\t\tif (certificate != null) serial = certificate.getSerialNumber().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43685e4282f87248cbb56d95117895c7485f1acb"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjk3OTY0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDowMzozM1rOGT1Q7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDowMzozM1rOGT1Q7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ0ODgxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate void updateAcmeFile() throws AcmeCaException {\n          \n          \n            \n                    /**\n          \n          \n            \n                     * Update the historical ACME file.\n          \n          \n            \n                     *\n          \n          \n            \n                     * @throws AcmeCaException TODO\n          \n          \n            \n            \tprivate void updateAcmeFile() throws AcmeCaException {", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r423448815", "createdAt": "2020-05-12T04:03:33Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java", "diffHunk": "@@ -873,5 +911,98 @@ protected void updateAcmeConfigService(AcmeConfigService acmeConfigService, Map<\n \tpublic void setAcmeApplicationStateListener(AcmeApplicationStateListener acmeApplicationStateListener) {\n \t\tapplicationStateListenerRef.set(acmeApplicationStateListener);\n \t}\n+\t\n+\t/**\n+\t * This method determines if the directoryURI has changed by checking\n+\t * the acme file.\n+\n+\t * @return True if the directoryURI has changed\n+\t * @throws AcmeCaException\n+\t */\n+\tprivate boolean directoryURIChanged() throws AcmeCaException {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tString fileDirURI = acmeConfig.getDirectoryURI();\n+\t\ttry {\n+\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t    String line, lastLine = null; \n+\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\tlastLine=line;\n+\t\t\t}\n+\t\t\tbr.close();\n+\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) fileDirURI = tok.nextToken();\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tTr.error(tc, e.getMessage()); // AcmeCaExceptions are localized.\n+\t\t}\n+\t\tString directoryURI = acmeConfig.getDirectoryURI();\n+\t\tif (directoryURI.equals(fileDirURI)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn true;\n+\t}\n+\t\n+\t/**\n+\t * This method will create the initial acme file in the servers/workarea\n+\t * directory. It holds certificate and directoryURI information, eg.\n+\t *  Date                Serial                   DirectoryURI                    Account URI\n+     *  --------------------------------------------------------------------------------------------\n+     *  20200509231118      6542743894787011570      https://localhost:33827/dir     https://localhost:33827/my-account/1\n+\t */\n+\tprivate void createAcmeFile() {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tif (file.exists()) return;\n+\t\tfile.getParentFile().mkdirs();\n+\t\ttry {\n+\t\t\tfile.createNewFile();\n+\t\t\tFileWriter fr;\n+\t\t\tfr = new FileWriter(file, true);\n+\t\t\tfr.write(\"Date\" + \"\\t\\t\\t\" + \"Serial\" + \"\\t\\t\" + \"DirectoryURI\" + \"\\t\\t\" + \"Account URI\" + \"\\n\");\n+\t\t\tfr.write(\"-------------------------------------------------------------------------------------------------------------------------\");\n+\t       \tfr.close();\n+\t\t} catch (IOException e) {\n+\t\t\tTr.error(tc, e.getMessage()); // AcmeCaExceptions are localized.\n+\t\t}\n+\t}\n+\n+\tprivate void updateAcmeFile() throws AcmeCaException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43685e4282f87248cbb56d95117895c7485f1acb"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjk4MDk2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDowNDozMlrOGT1RuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDowNDozMlrOGT1RuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ0OTAxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tserial = acmeCertificate.getCertificate().getSerialNumber().toString();\n          \n          \n            \n            \t\t\tserial = acmeCertificate.getCertificate().getSerialNumber().toString(16);", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r423449017", "createdAt": "2020-05-12T04:04:32Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java", "diffHunk": "@@ -873,5 +911,98 @@ protected void updateAcmeConfigService(AcmeConfigService acmeConfigService, Map<\n \tpublic void setAcmeApplicationStateListener(AcmeApplicationStateListener acmeApplicationStateListener) {\n \t\tapplicationStateListenerRef.set(acmeApplicationStateListener);\n \t}\n+\t\n+\t/**\n+\t * This method determines if the directoryURI has changed by checking\n+\t * the acme file.\n+\n+\t * @return True if the directoryURI has changed\n+\t * @throws AcmeCaException\n+\t */\n+\tprivate boolean directoryURIChanged() throws AcmeCaException {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tString fileDirURI = acmeConfig.getDirectoryURI();\n+\t\ttry {\n+\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t    String line, lastLine = null; \n+\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\tlastLine=line;\n+\t\t\t}\n+\t\t\tbr.close();\n+\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) fileDirURI = tok.nextToken();\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tTr.error(tc, e.getMessage()); // AcmeCaExceptions are localized.\n+\t\t}\n+\t\tString directoryURI = acmeConfig.getDirectoryURI();\n+\t\tif (directoryURI.equals(fileDirURI)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn true;\n+\t}\n+\t\n+\t/**\n+\t * This method will create the initial acme file in the servers/workarea\n+\t * directory. It holds certificate and directoryURI information, eg.\n+\t *  Date                Serial                   DirectoryURI                    Account URI\n+     *  --------------------------------------------------------------------------------------------\n+     *  20200509231118      6542743894787011570      https://localhost:33827/dir     https://localhost:33827/my-account/1\n+\t */\n+\tprivate void createAcmeFile() {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tif (file.exists()) return;\n+\t\tfile.getParentFile().mkdirs();\n+\t\ttry {\n+\t\t\tfile.createNewFile();\n+\t\t\tFileWriter fr;\n+\t\t\tfr = new FileWriter(file, true);\n+\t\t\tfr.write(\"Date\" + \"\\t\\t\\t\" + \"Serial\" + \"\\t\\t\" + \"DirectoryURI\" + \"\\t\\t\" + \"Account URI\" + \"\\n\");\n+\t\t\tfr.write(\"-------------------------------------------------------------------------------------------------------------------------\");\n+\t       \tfr.close();\n+\t\t} catch (IOException e) {\n+\t\t\tTr.error(tc, e.getMessage()); // AcmeCaExceptions are localized.\n+\t\t}\n+\t}\n+\n+\tprivate void updateAcmeFile() throws AcmeCaException {\n+\t\tupdateAcmeFile(null);\n+\t}\n+\n+\t/**\n+\t * Update the acme file with the original or updated certificate\n+\t * and directoryURI information.\n+\t * @param acmeCertificate The AcmeCertificate to use to populate\n+\t * the acme file or null to use the default certificate\n+\t * \n+\t * @throws AcmeCaException\n+\t */\n+\tprivate void updateAcmeFile(AcmeCertificate acmeCertificate) throws AcmeCaException {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tString directoryURI = acmeConfig.getDirectoryURI(); \n+\t\tDateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"yyyyMMddHHmmss\");  \n+\t\tLocalDateTime now = LocalDateTime.now();  \n+\t\tString date = dtf.format(now);\n+\t\tString serial = null;\n+\t\tif (acmeCertificate == null) {\n+\t\t\tX509Certificate certificate = getLeafCertificate(getConfiguredDefaultCertificateChain());\n+\t\t\tif (certificate != null) serial = certificate.getSerialNumber().toString();\n+\t\t} else {\n+\t\t\tserial = acmeCertificate.getCertificate().getSerialNumber().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43685e4282f87248cbb56d95117895c7485f1acb"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjk4NDQ3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDowNjo0NlrOGT1Tyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDowNjo0NlrOGT1Tyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ0OTU0Ng==", "bodyText": "Not sure \\t\\t is a good delimiter.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r423449546", "createdAt": "2020-05-12T04:06:46Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java", "diffHunk": "@@ -873,5 +911,98 @@ protected void updateAcmeConfigService(AcmeConfigService acmeConfigService, Map<\n \tpublic void setAcmeApplicationStateListener(AcmeApplicationStateListener acmeApplicationStateListener) {\n \t\tapplicationStateListenerRef.set(acmeApplicationStateListener);\n \t}\n+\t\n+\t/**\n+\t * This method determines if the directoryURI has changed by checking\n+\t * the acme file.\n+\n+\t * @return True if the directoryURI has changed\n+\t * @throws AcmeCaException\n+\t */\n+\tprivate boolean directoryURIChanged() throws AcmeCaException {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tString fileDirURI = acmeConfig.getDirectoryURI();\n+\t\ttry {\n+\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t    String line, lastLine = null; \n+\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\tlastLine=line;\n+\t\t\t}\n+\t\t\tbr.close();\n+\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) fileDirURI = tok.nextToken();\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tTr.error(tc, e.getMessage()); // AcmeCaExceptions are localized.\n+\t\t}\n+\t\tString directoryURI = acmeConfig.getDirectoryURI();\n+\t\tif (directoryURI.equals(fileDirURI)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn true;\n+\t}\n+\t\n+\t/**\n+\t * This method will create the initial acme file in the servers/workarea\n+\t * directory. It holds certificate and directoryURI information, eg.\n+\t *  Date                Serial                   DirectoryURI                    Account URI\n+     *  --------------------------------------------------------------------------------------------\n+     *  20200509231118      6542743894787011570      https://localhost:33827/dir     https://localhost:33827/my-account/1\n+\t */\n+\tprivate void createAcmeFile() {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tif (file.exists()) return;\n+\t\tfile.getParentFile().mkdirs();\n+\t\ttry {\n+\t\t\tfile.createNewFile();\n+\t\t\tFileWriter fr;\n+\t\t\tfr = new FileWriter(file, true);\n+\t\t\tfr.write(\"Date\" + \"\\t\\t\\t\" + \"Serial\" + \"\\t\\t\" + \"DirectoryURI\" + \"\\t\\t\" + \"Account URI\" + \"\\n\");\n+\t\t\tfr.write(\"-------------------------------------------------------------------------------------------------------------------------\");\n+\t       \tfr.close();\n+\t\t} catch (IOException e) {\n+\t\t\tTr.error(tc, e.getMessage()); // AcmeCaExceptions are localized.\n+\t\t}\n+\t}\n+\n+\tprivate void updateAcmeFile() throws AcmeCaException {\n+\t\tupdateAcmeFile(null);\n+\t}\n+\n+\t/**\n+\t * Update the acme file with the original or updated certificate\n+\t * and directoryURI information.\n+\t * @param acmeCertificate The AcmeCertificate to use to populate\n+\t * the acme file or null to use the default certificate\n+\t * \n+\t * @throws AcmeCaException\n+\t */\n+\tprivate void updateAcmeFile(AcmeCertificate acmeCertificate) throws AcmeCaException {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tString directoryURI = acmeConfig.getDirectoryURI(); \n+\t\tDateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"yyyyMMddHHmmss\");  \n+\t\tLocalDateTime now = LocalDateTime.now();  \n+\t\tString date = dtf.format(now);\n+\t\tString serial = null;\n+\t\tif (acmeCertificate == null) {\n+\t\t\tX509Certificate certificate = getLeafCertificate(getConfiguredDefaultCertificateChain());\n+\t\t\tif (certificate != null) serial = certificate.getSerialNumber().toString();\n+\t\t} else {\n+\t\t\tserial = acmeCertificate.getCertificate().getSerialNumber().toString();\n+\t\t}\n+\t\tString accountURI = acmeClient.getAccount().getLocation().toString();\n \n+       \tFileWriter fr;\n+\t\ttry {\n+\t\t\tfr = new FileWriter(file, true);\n+\t\t\tfr.write(\"\\n\");\n+\t\t   \tfr.write(date + \"\\t\\t\" + serial + \"\\t\\t\" + directoryURI + \"\\t\\t\" + accountURI);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43685e4282f87248cbb56d95117895c7485f1acb"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjk4NjYyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDowODoxM1rOGT1VGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDowODoxM1rOGT1VGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ0OTg4Mw==", "bodyText": "Maybe this can just be done inside update? If it doesn't exist, try and create it?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r423449883", "createdAt": "2020-05-12T04:08:13Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java", "diffHunk": "@@ -700,6 +712,14 @@ public File createDefaultSSLCertificate(String filePath, @Sensitive String passw\n \t\t\t */\n \t\t\tFile file = createKeyStore(filePath, acmeCertificate, password, keyStoreType, keyStoreProvider);\n \n+\t\t\t/*\n+\t\t\t * Create the acme file which holds certificate information and a record\n+\t\t\t * of directoryURIs. We use this to determine if the directoryURI has\n+\t\t\t * been updated. If so, we need to refresh the certificate.\n+\t\t\t */\n+\t\t\tcreateAcmeFile();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43685e4282f87248cbb56d95117895c7485f1acb"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjk4ODQyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDowOTo0MFrOGT1WXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDowOTo0MFrOGT1WXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1MDIwNA==", "bodyText": "This isn't an AcmeCaException, so not localized.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r423450204", "createdAt": "2020-05-12T04:09:40Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java", "diffHunk": "@@ -873,5 +911,98 @@ protected void updateAcmeConfigService(AcmeConfigService acmeConfigService, Map<\n \tpublic void setAcmeApplicationStateListener(AcmeApplicationStateListener acmeApplicationStateListener) {\n \t\tapplicationStateListenerRef.set(acmeApplicationStateListener);\n \t}\n+\t\n+\t/**\n+\t * This method determines if the directoryURI has changed by checking\n+\t * the acme file.\n+\n+\t * @return True if the directoryURI has changed\n+\t * @throws AcmeCaException\n+\t */\n+\tprivate boolean directoryURIChanged() throws AcmeCaException {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tString fileDirURI = acmeConfig.getDirectoryURI();\n+\t\ttry {\n+\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t    String line, lastLine = null; \n+\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\tlastLine=line;\n+\t\t\t}\n+\t\t\tbr.close();\n+\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) fileDirURI = tok.nextToken();\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tTr.error(tc, e.getMessage()); // AcmeCaExceptions are localized.\n+\t\t}\n+\t\tString directoryURI = acmeConfig.getDirectoryURI();\n+\t\tif (directoryURI.equals(fileDirURI)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn true;\n+\t}\n+\t\n+\t/**\n+\t * This method will create the initial acme file in the servers/workarea\n+\t * directory. It holds certificate and directoryURI information, eg.\n+\t *  Date                Serial                   DirectoryURI                    Account URI\n+     *  --------------------------------------------------------------------------------------------\n+     *  20200509231118      6542743894787011570      https://localhost:33827/dir     https://localhost:33827/my-account/1\n+\t */\n+\tprivate void createAcmeFile() {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tif (file.exists()) return;\n+\t\tfile.getParentFile().mkdirs();\n+\t\ttry {\n+\t\t\tfile.createNewFile();\n+\t\t\tFileWriter fr;\n+\t\t\tfr = new FileWriter(file, true);\n+\t\t\tfr.write(\"Date\" + \"\\t\\t\\t\" + \"Serial\" + \"\\t\\t\" + \"DirectoryURI\" + \"\\t\\t\" + \"Account URI\" + \"\\n\");\n+\t\t\tfr.write(\"-------------------------------------------------------------------------------------------------------------------------\");\n+\t       \tfr.close();\n+\t\t} catch (IOException e) {\n+\t\t\tTr.error(tc, e.getMessage()); // AcmeCaExceptions are localized.\n+\t\t}\n+\t}\n+\n+\tprivate void updateAcmeFile() throws AcmeCaException {\n+\t\tupdateAcmeFile(null);\n+\t}\n+\n+\t/**\n+\t * Update the acme file with the original or updated certificate\n+\t * and directoryURI information.\n+\t * @param acmeCertificate The AcmeCertificate to use to populate\n+\t * the acme file or null to use the default certificate\n+\t * \n+\t * @throws AcmeCaException\n+\t */\n+\tprivate void updateAcmeFile(AcmeCertificate acmeCertificate) throws AcmeCaException {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tString directoryURI = acmeConfig.getDirectoryURI(); \n+\t\tDateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"yyyyMMddHHmmss\");  \n+\t\tLocalDateTime now = LocalDateTime.now();  \n+\t\tString date = dtf.format(now);\n+\t\tString serial = null;\n+\t\tif (acmeCertificate == null) {\n+\t\t\tX509Certificate certificate = getLeafCertificate(getConfiguredDefaultCertificateChain());\n+\t\t\tif (certificate != null) serial = certificate.getSerialNumber().toString();\n+\t\t} else {\n+\t\t\tserial = acmeCertificate.getCertificate().getSerialNumber().toString();\n+\t\t}\n+\t\tString accountURI = acmeClient.getAccount().getLocation().toString();\n \n+       \tFileWriter fr;\n+\t\ttry {\n+\t\t\tfr = new FileWriter(file, true);\n+\t\t\tfr.write(\"\\n\");\n+\t\t   \tfr.write(date + \"\\t\\t\" + serial + \"\\t\\t\" + directoryURI + \"\\t\\t\" + accountURI);\n+\t\t   \tfr.close();\n+\t\t} catch (IOException e) {\n+\t\t\tTr.error(tc, e.getMessage()); // AcmeCaExceptions are localized.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43685e4282f87248cbb56d95117895c7485f1acb"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjk5MDI2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/FATSuite.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoxMDo0NFrOGT1Xcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoxMDo0NFrOGT1Xcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1MDQ4Mg==", "bodyText": "Unnecessary white space.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tAcmeCaRestHandlerTest.class,\n          \n          \n            \n            \tAcmeCaRestHandlerTest.class,", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r423450482", "createdAt": "2020-05-12T04:10:44Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/FATSuite.java", "diffHunk": "@@ -21,7 +21,8 @@\n \tAcmeSimpleTest.class,\n \tAcmeURISimpleTest.class,\n \tAcmeBoulderSimpleTest.class,  \n-\tAcmeCaRestHandlerTest.class, \n+\t\tAcmeCaRestHandlerTest.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43685e4282f87248cbb56d95117895c7485f1acb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjk5MDYzOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/FATSuite.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoxMDo1NVrOGT1Xpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoxMDo1NVrOGT1Xpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1MDUzNQ==", "bodyText": "Unnecessary white space.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tAcmeSwapDirectoriesTest.class,\n          \n          \n            \n            \tAcmeSwapDirectoriesTest.class,", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r423450535", "createdAt": "2020-05-12T04:10:55Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/FATSuite.java", "diffHunk": "@@ -21,7 +21,8 @@\n \tAcmeSimpleTest.class,\n \tAcmeURISimpleTest.class,\n \tAcmeBoulderSimpleTest.class,  \n-\tAcmeCaRestHandlerTest.class, \n+\t\tAcmeCaRestHandlerTest.class,\n+\t\tAcmeSwapDirectoriesTest.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43685e4282f87248cbb56d95117895c7485f1acb"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjk5MjAwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoxMTo1NVrOGT1YiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoxMTo1NVrOGT1YiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1MDc2MQ==", "bodyText": "I think I would put all the logic related to historical records into its own class and call it from AcmeProviderImpl.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r423450761", "createdAt": "2020-05-12T04:11:55Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java", "diffHunk": "@@ -873,5 +911,98 @@ protected void updateAcmeConfigService(AcmeConfigService acmeConfigService, Map<\n \tpublic void setAcmeApplicationStateListener(AcmeApplicationStateListener acmeApplicationStateListener) {\n \t\tapplicationStateListenerRef.set(acmeApplicationStateListener);\n \t}\n+\t\n+\t/**\n+\t * This method determines if the directoryURI has changed by checking\n+\t * the acme file.\n+\n+\t * @return True if the directoryURI has changed\n+\t * @throws AcmeCaException\n+\t */\n+\tprivate boolean directoryURIChanged() throws AcmeCaException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43685e4282f87248cbb56d95117895c7485f1acb"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjk5NjM3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoxNDo1NVrOGT1bMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToyODoyMVrOGUMURA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1MTQ0MQ==", "bodyText": "Is the kernel component already in our bnd.bnd file?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r423451441", "createdAt": "2020-05-12T04:14:55Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java", "diffHunk": "@@ -82,6 +91,9 @@\n \n \t/** Configuration for the ACME client. */\n \tprivate static AcmeConfig acmeConfig;\n+\t\n+\t@Reference\n+\tprivate com.ibm.wsspi.kernel.service.location.WsLocationAdmin wslocation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43685e4282f87248cbb56d95117895c7485f1acb"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgyNjUwMA==", "bodyText": "yes", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r423826500", "createdAt": "2020-05-12T15:28:21Z", "author": {"login": "ryanesch"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java", "diffHunk": "@@ -82,6 +91,9 @@\n \n \t/** Configuration for the ACME client. */\n \tprivate static AcmeConfig acmeConfig;\n+\t\n+\t@Reference\n+\tprivate com.ibm.wsspi.kernel.service.location.WsLocationAdmin wslocation;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1MTQ0MQ=="}, "originalCommit": {"oid": "43685e4282f87248cbb56d95117895c7485f1acb"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjk5ODU0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoxNjoxM1rOGT1cWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoxNjoxM1rOGT1cWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1MTczOQ==", "bodyText": "I don't see any logic in here to limit the number of lines. I think we should probably limit it to 10 or so.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r423451739", "createdAt": "2020-05-12T04:16:13Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java", "diffHunk": "@@ -873,5 +911,98 @@ protected void updateAcmeConfigService(AcmeConfigService acmeConfigService, Map<\n \tpublic void setAcmeApplicationStateListener(AcmeApplicationStateListener acmeApplicationStateListener) {\n \t\tapplicationStateListenerRef.set(acmeApplicationStateListener);\n \t}\n+\t\n+\t/**\n+\t * This method determines if the directoryURI has changed by checking\n+\t * the acme file.\n+\n+\t * @return True if the directoryURI has changed\n+\t * @throws AcmeCaException\n+\t */\n+\tprivate boolean directoryURIChanged() throws AcmeCaException {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tString fileDirURI = acmeConfig.getDirectoryURI();\n+\t\ttry {\n+\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t    String line, lastLine = null; \n+\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\tlastLine=line;\n+\t\t\t}\n+\t\t\tbr.close();\n+\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) fileDirURI = tok.nextToken();\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tTr.error(tc, e.getMessage()); // AcmeCaExceptions are localized.\n+\t\t}\n+\t\tString directoryURI = acmeConfig.getDirectoryURI();\n+\t\tif (directoryURI.equals(fileDirURI)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn true;\n+\t}\n+\t\n+\t/**\n+\t * This method will create the initial acme file in the servers/workarea\n+\t * directory. It holds certificate and directoryURI information, eg.\n+\t *  Date                Serial                   DirectoryURI                    Account URI\n+     *  --------------------------------------------------------------------------------------------\n+     *  20200509231118      6542743894787011570      https://localhost:33827/dir     https://localhost:33827/my-account/1\n+\t */\n+\tprivate void createAcmeFile() {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tif (file.exists()) return;\n+\t\tfile.getParentFile().mkdirs();\n+\t\ttry {\n+\t\t\tfile.createNewFile();\n+\t\t\tFileWriter fr;\n+\t\t\tfr = new FileWriter(file, true);\n+\t\t\tfr.write(\"Date\" + \"\\t\\t\\t\" + \"Serial\" + \"\\t\\t\" + \"DirectoryURI\" + \"\\t\\t\" + \"Account URI\" + \"\\n\");\n+\t\t\tfr.write(\"-------------------------------------------------------------------------------------------------------------------------\");\n+\t       \tfr.close();\n+\t\t} catch (IOException e) {\n+\t\t\tTr.error(tc, e.getMessage()); // AcmeCaExceptions are localized.\n+\t\t}\n+\t}\n+\n+\tprivate void updateAcmeFile() throws AcmeCaException {\n+\t\tupdateAcmeFile(null);\n+\t}\n+\n+\t/**\n+\t * Update the acme file with the original or updated certificate\n+\t * and directoryURI information.\n+\t * @param acmeCertificate The AcmeCertificate to use to populate\n+\t * the acme file or null to use the default certificate\n+\t * \n+\t * @throws AcmeCaException\n+\t */\n+\tprivate void updateAcmeFile(AcmeCertificate acmeCertificate) throws AcmeCaException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43685e4282f87248cbb56d95117895c7485f1acb"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzAwMjc2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoxODo1OVrOGT1e3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoxODo1OVrOGT1e3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1MjM4Mw==", "bodyText": "Assuming copied from AcmeSimpleTest.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r423452383", "createdAt": "2020-05-12T04:18:59Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import java.math.BigInteger;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Some simple test for running the acmeCA-2.0 feature.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43685e4282f87248cbb56d95117895c7485f1acb"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzAwNDM1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoxOTo1OFrOGT1f2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoxOTo1OFrOGT1f2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1MjYzNA==", "bodyText": "are these actually different ports? i think they are the same.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r423452634", "createdAt": "2020-05-12T04:19:58Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import java.math.BigInteger;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Some simple test for running the acmeCA-2.0 feature.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t\tAcmeFatUtils.checkPortOpen(caContainer2.getHttpPort(), 60000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43685e4282f87248cbb56d95117895c7485f1acb"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzAwNTQyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoyMDo0NFrOGT1gfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoyMDo0NFrOGT1gfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1Mjc5OQ==", "bodyText": "probably don't need this. Just always run HTTPS. We had this in acmesimpletest to run both ways.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r423452799", "createdAt": "2020-05-12T04:20:44Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import java.math.BigInteger;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Some simple test for running the acmeCA-2.0 feature.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t\tAcmeFatUtils.checkPortOpen(caContainer2.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should\n+\t * be used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43685e4282f87248cbb56d95117895c7485f1acb"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzAwNjIxOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoyMTowMVrOGT1g7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoyMTowMVrOGT1g7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1MjkwOA==", "bodyText": "Need javadoc to explain test.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r423452908", "createdAt": "2020-05-12T04:21:01Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import java.math.BigInteger;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Some simple test for running the acmeCA-2.0 feature.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t\tAcmeFatUtils.checkPortOpen(caContainer2.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should\n+\t * be used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43685e4282f87248cbb56d95117895c7485f1acb"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzAxMTUwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoyMzo0NFrOGT1j7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoyMzo0NFrOGT1j7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1MzY3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t * Verify that the server is now using a certificate signed by the\n          \n          \n            \n            \t\t\t * Verify that the server is now using a certificate signed by the new", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r423453676", "createdAt": "2020-05-12T04:23:44Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import java.math.BigInteger;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Some simple test for running the acmeCA-2.0 feature.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t\tAcmeFatUtils.checkPortOpen(caContainer2.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should\n+\t * be used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, useAcmeURIs(), DOMAINS_1);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates1 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST: Update the directoryURI. This should result in a refreshed\n+\t\t\t * certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST: START\");\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer2, ORIGINAL_CONFIG, useAcmeURIs(), DOMAINS_1);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43685e4282f87248cbb56d95117895c7485f1acb"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzAxMTkwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoyNDowMVrOGT1kMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjowMzo0MlrOGci7cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1Mzc0Ng==", "bodyText": "Should check the historical file.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r423453746", "createdAt": "2020-05-12T04:24:01Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import java.math.BigInteger;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Some simple test for running the acmeCA-2.0 feature.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t\tAcmeFatUtils.checkPortOpen(caContainer2.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should\n+\t * be used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, useAcmeURIs(), DOMAINS_1);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43685e4282f87248cbb56d95117895c7485f1acb"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4NTU4NA==", "bodyText": "I don't see you checking the historical file.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r432585584", "createdAt": "2020-05-29T16:03:42Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import java.math.BigInteger;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Some simple test for running the acmeCA-2.0 feature.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t\tAcmeFatUtils.checkPortOpen(caContainer2.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should\n+\t * be used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, useAcmeURIs(), DOMAINS_1);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1Mzc0Ng=="}, "originalCommit": {"oid": "43685e4282f87248cbb56d95117895c7485f1acb"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzAxMjcxOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoyNDozMlrOGT1krQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTo1MjowNlrOGerE6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1Mzg2OQ==", "bodyText": "Check the historical file.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r423453869", "createdAt": "2020-05-12T04:24:32Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import java.math.BigInteger;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Some simple test for running the acmeCA-2.0 feature.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t\tAcmeFatUtils.checkPortOpen(caContainer2.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should\n+\t * be used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, useAcmeURIs(), DOMAINS_1);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates1 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST: Update the directoryURI. This should result in a refreshed\n+\t\t\t * certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST: START\");\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer2, ORIGINAL_CONFIG, useAcmeURIs(), DOMAINS_1);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43685e4282f87248cbb56d95117895c7485f1acb"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4NTgwMg==", "bodyText": "Not checking the historical file.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r432585802", "createdAt": "2020-05-29T16:04:03Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import java.math.BigInteger;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Some simple test for running the acmeCA-2.0 feature.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t\tAcmeFatUtils.checkPortOpen(caContainer2.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should\n+\t * be used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, useAcmeURIs(), DOMAINS_1);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates1 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST: Update the directoryURI. This should result in a refreshed\n+\t\t\t * certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST: START\");\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer2, ORIGINAL_CONFIG, useAcmeURIs(), DOMAINS_1);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1Mzg2OQ=="}, "originalCommit": {"oid": "43685e4282f87248cbb56d95117895c7485f1acb"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwMDAyMg==", "bodyText": "Yes I am, lines 174-182.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r432600022", "createdAt": "2020-05-29T16:29:45Z", "author": {"login": "ryanesch"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import java.math.BigInteger;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Some simple test for running the acmeCA-2.0 feature.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t\tAcmeFatUtils.checkPortOpen(caContainer2.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should\n+\t * be used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, useAcmeURIs(), DOMAINS_1);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates1 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST: Update the directoryURI. This should result in a refreshed\n+\t\t\t * certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST: START\");\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer2, ORIGINAL_CONFIG, useAcmeURIs(), DOMAINS_1);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1Mzg2OQ=="}, "originalCommit": {"oid": "43685e4282f87248cbb56d95117895c7485f1acb"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxNjIzNA==", "bodyText": "My bad, i misread the test and thought you were doing another operation immediately below.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r434816234", "createdAt": "2020-06-03T19:52:06Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import java.math.BigInteger;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Some simple test for running the acmeCA-2.0 feature.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t\tAcmeFatUtils.checkPortOpen(caContainer2.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should\n+\t * be used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, useAcmeURIs(), DOMAINS_1);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates1 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST: Update the directoryURI. This should result in a refreshed\n+\t\t\t * certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST: START\");\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer2, ORIGINAL_CONFIG, useAcmeURIs(), DOMAINS_1);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1Mzg2OQ=="}, "originalCommit": {"oid": "43685e4282f87248cbb56d95117895c7485f1acb"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzAxNjAyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoyNjozN1rOGT1mpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoyNjozN1rOGT1mpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1NDM3NA==", "bodyText": "I think we need a few more tests. Probably do one where we start the server, check the historical file, stop the server, change to the new CA, then restart, verify we regenerated the certificate, then check the historical file.\nWe also should have a test where we check if we could not write to the historical file, and one where we could not read from the historical file (we would need to change the read permissions on the directory, and the file respectively). We may need to skip those tests on windows b/c Java doesn't seem to actually change the permissions. See one of the other FATs for details.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r423454374", "createdAt": "2020-05-12T04:26:37Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import java.math.BigInteger;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Some simple test for running the acmeCA-2.0 feature.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t\tAcmeFatUtils.checkPortOpen(caContainer2.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should\n+\t * be used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43685e4282f87248cbb56d95117895c7485f1acb"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjM5MjM2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeHistoricalFileHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzo0NToxOVrOGXrqcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzo0NToxOVrOGXrqcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ4NTgxMA==", "bodyText": "Copyright.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427485810", "createdAt": "2020-05-19T17:45:19Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeHistoricalFileHelper.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package com.ibm.ws.security.acme.internal;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjUwNDE1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODoxNDowNFrOGXsxgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODoxNDowNFrOGXsxgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUwNDAwMw==", "bodyText": "just let this flow out, it will give us the stack trace for the exception if you do.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427504003", "createdAt": "2020-05-19T18:14:04Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,488 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.AllowedFFDC;\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+/**\n+ * Test for AcmeHistoricalFile. Ensure the file is created, updated, and\n+ * causes refreshing of certificates.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_3 = { \"domain1.com\", \"domain2.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * This test will verify that the ACME file is created and updated\n+\t * properly. When the directoryURI changes, the certificate should\n+\t * be refreshed.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates1 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 1: Check that the ACME historical file was created and populated\n+\t\t\t * with the first certificate and original directoryURI. \n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: START\");\n+\t\t\tFile file = new File(server.getServerRoot() + \"/workarea/acme/acme.txt\");\n+\t\t\tif (!file.exists()) {\n+\t\t\t\tfail(\"The ACME file should exist at: \" + file.getAbsolutePath());\n+\t\t\t}\n+\t\t\tString firstDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) firstDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertEquals(caContainer.getAcmeDirectoryURI(false), firstDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 2: Update the directoryURI. This should result in a refreshed\n+\t\t\t * certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: START\");\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer2, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * new CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates2 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer2);\n+\n+\t\t\tBigInteger serial1 = ((X509Certificate) certificates1[0]).getSerialNumber();\n+\t\t\tBigInteger serial2 = ((X509Certificate) certificates2[0]).getSerialNumber();\n+\t\t\tassertFalse(\"Expected new certificate after adding new domain.\", serial1.equals(serial2));\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 3: Check that the ACME historical file was updated. \n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 3: START\");\n+\t\t\tString secondDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) secondDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertNotSame(firstDirURI, secondDirURI);\n+\t\t\tassertEquals(caContainer2.getAcmeDirectoryURI(false), secondDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 3: FINISH\");\n+\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 4: Stop the server, change the directoryURI, and start the server.\n+\t\t\t * We should renew the certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 4: START\");\n+\t\t\tserver.stopServer();\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeAppToStart(server);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * new CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates3 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tBigInteger serial3 = ((X509Certificate) certificates3[0]).getSerialNumber();\n+\t\t\tassertFalse(\"Expected new certificate after adding new domain.\", serial2.equals(serial3));\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 4: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 5: Check that the ACME historical file was updated. \n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 5: START\");\n+\t\t\tString thirdDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) thirdDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 265}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjUwNDcyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODoxNDoxNFrOGXsx6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODoxNDoxNFrOGXsx6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUwNDEwNQ==", "bodyText": "just let this flow out, it will give us the stack trace for the exception if you do.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427504105", "createdAt": "2020-05-19T18:14:14Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,488 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.AllowedFFDC;\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+/**\n+ * Test for AcmeHistoricalFile. Ensure the file is created, updated, and\n+ * causes refreshing of certificates.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_3 = { \"domain1.com\", \"domain2.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * This test will verify that the ACME file is created and updated\n+\t * properly. When the directoryURI changes, the certificate should\n+\t * be refreshed.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates1 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 1: Check that the ACME historical file was created and populated\n+\t\t\t * with the first certificate and original directoryURI. \n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: START\");\n+\t\t\tFile file = new File(server.getServerRoot() + \"/workarea/acme/acme.txt\");\n+\t\t\tif (!file.exists()) {\n+\t\t\t\tfail(\"The ACME file should exist at: \" + file.getAbsolutePath());\n+\t\t\t}\n+\t\t\tString firstDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) firstDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertEquals(caContainer.getAcmeDirectoryURI(false), firstDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 2: Update the directoryURI. This should result in a refreshed\n+\t\t\t * certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: START\");\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer2, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * new CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates2 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer2);\n+\n+\t\t\tBigInteger serial1 = ((X509Certificate) certificates1[0]).getSerialNumber();\n+\t\t\tBigInteger serial2 = ((X509Certificate) certificates2[0]).getSerialNumber();\n+\t\t\tassertFalse(\"Expected new certificate after adding new domain.\", serial1.equals(serial2));\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 3: Check that the ACME historical file was updated. \n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 3: START\");\n+\t\t\tString secondDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) secondDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjUwNTQwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODoxNDoyNlrOGXsyVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODoxNDoyNlrOGXsyVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUwNDIxMw==", "bodyText": "just let this flow out, it will give us the stack trace for the exception if you do.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427504213", "createdAt": "2020-05-19T18:14:26Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,488 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.AllowedFFDC;\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+/**\n+ * Test for AcmeHistoricalFile. Ensure the file is created, updated, and\n+ * causes refreshing of certificates.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_3 = { \"domain1.com\", \"domain2.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * This test will verify that the ACME file is created and updated\n+\t * properly. When the directoryURI changes, the certificate should\n+\t * be refreshed.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates1 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 1: Check that the ACME historical file was created and populated\n+\t\t\t * with the first certificate and original directoryURI. \n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: START\");\n+\t\t\tFile file = new File(server.getServerRoot() + \"/workarea/acme/acme.txt\");\n+\t\t\tif (!file.exists()) {\n+\t\t\t\tfail(\"The ACME file should exist at: \" + file.getAbsolutePath());\n+\t\t\t}\n+\t\t\tString firstDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) firstDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjUwOTQzOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODoxNToyM1rOGXs0sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODoxNToyM1rOGXs0sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUwNDgxOQ==", "bodyText": "Unless you configure domains explicitly, you don't need to clear them.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427504819", "createdAt": "2020-05-19T18:15:23Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,488 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.AllowedFFDC;\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+/**\n+ * Test for AcmeHistoricalFile. Ensure the file is created, updated, and\n+ * causes refreshing of certificates.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_3 = { \"domain1.com\", \"domain2.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjYxMTg4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODo0MzoyN1rOGXt1vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDoyNzozMFrOGZBs-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyMTQ2OA==", "bodyText": "whitespace", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427521468", "createdAt": "2020-05-19T18:43:27Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,488 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.AllowedFFDC;\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+/**\n+ * Test for AcmeHistoricalFile. Ensure the file is created, updated, and\n+ * causes refreshing of certificates.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_3 = { \"domain1.com\", \"domain2.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * This test will verify that the ACME file is created and updated\n+\t * properly. When the directoryURI changes, the certificate should\n+\t * be refreshed.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates1 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\t\t\t/***********************************************************************", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5Mzg1Mg==", "bodyText": "I can't figure out what whitespace you are referring to. Maybe it's confusing because line 141 looks like it's two lines? Or you want me to add white space?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r428893852", "createdAt": "2020-05-21T20:24:35Z", "author": {"login": "ryanesch"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,488 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.AllowedFFDC;\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+/**\n+ * Test for AcmeHistoricalFile. Ensure the file is created, updated, and\n+ * causes refreshing of certificates.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_3 = { \"domain1.com\", \"domain2.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * This test will verify that the ACME file is created and updated\n+\t * properly. When the directoryURI changes, the certificate should\n+\t * be refreshed.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates1 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\t\t\t/***********************************************************************", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyMTQ2OA=="}, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5NTQ4Mw==", "bodyText": "btw certificate and the comment block below. Nit picky.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r428895483", "createdAt": "2020-05-21T20:27:30Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,488 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.AllowedFFDC;\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+/**\n+ * Test for AcmeHistoricalFile. Ensure the file is created, updated, and\n+ * causes refreshing of certificates.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_3 = { \"domain1.com\", \"domain2.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * This test will verify that the ACME file is created and updated\n+\t * properly. When the directoryURI changes, the certificate should\n+\t * be refreshed.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates1 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\t\t\t/***********************************************************************", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyMTQ2OA=="}, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjYxNjA5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODo0NDo0NFrOGXt4cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODo0NDo0NFrOGXt4cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyMjE2Mg==", "bodyText": "Can we have a getHistoryEntries() method or something? I also assume you do this in the product code? Can't you have a helper method there so we only have to update code in one place?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427522162", "createdAt": "2020-05-19T18:44:44Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,488 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.AllowedFFDC;\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+/**\n+ * Test for AcmeHistoricalFile. Ensure the file is created, updated, and\n+ * causes refreshing of certificates.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_3 = { \"domain1.com\", \"domain2.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * This test will verify that the ACME file is created and updated\n+\t * properly. When the directoryURI changes, the certificate should\n+\t * be refreshed.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates1 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 1: Check that the ACME historical file was created and populated\n+\t\t\t * with the first certificate and original directoryURI. \n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: START\");\n+\t\t\tFile file = new File(server.getServerRoot() + \"/workarea/acme/acme.txt\");\n+\t\t\tif (!file.exists()) {\n+\t\t\t\tfail(\"The ACME file should exist at: \" + file.getAbsolutePath());\n+\t\t\t}\n+\t\t\tString firstDirURI = null;\n+\t\t\ttry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjYxNjk0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODo0NDo1N1rOGXt5Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODo0NDo1N1rOGXt5Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyMjMwNw==", "bodyText": "Can we have a getHistoryEntries() method or something? I also assume you do this in the product code? Can't you have a helper method there so we only have to update code in one place?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427522307", "createdAt": "2020-05-19T18:44:57Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,488 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.AllowedFFDC;\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+/**\n+ * Test for AcmeHistoricalFile. Ensure the file is created, updated, and\n+ * causes refreshing of certificates.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_3 = { \"domain1.com\", \"domain2.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * This test will verify that the ACME file is created and updated\n+\t * properly. When the directoryURI changes, the certificate should\n+\t * be refreshed.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates1 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 1: Check that the ACME historical file was created and populated\n+\t\t\t * with the first certificate and original directoryURI. \n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: START\");\n+\t\t\tFile file = new File(server.getServerRoot() + \"/workarea/acme/acme.txt\");\n+\t\t\tif (!file.exists()) {\n+\t\t\t\tfail(\"The ACME file should exist at: \" + file.getAbsolutePath());\n+\t\t\t}\n+\t\t\tString firstDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) firstDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertEquals(caContainer.getAcmeDirectoryURI(false), firstDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 2: Update the directoryURI. This should result in a refreshed\n+\t\t\t * certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: START\");\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer2, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * new CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates2 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer2);\n+\n+\t\t\tBigInteger serial1 = ((X509Certificate) certificates1[0]).getSerialNumber();\n+\t\t\tBigInteger serial2 = ((X509Certificate) certificates2[0]).getSerialNumber();\n+\t\t\tassertFalse(\"Expected new certificate after adding new domain.\", serial1.equals(serial2));\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 3: Check that the ACME historical file was updated. \n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 3: START\");\n+\t\t\tString secondDirURI = null;\n+\t\t\ttry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjYyMjM3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODo0NjoxNlrOGXt8cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODo0NjoxNlrOGXt8cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyMzE4NA==", "bodyText": "Can we get a helper method and do an assume? Kristi does the same thing elsewhere.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427523184", "createdAt": "2020-05-19T18:46:16Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,488 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.AllowedFFDC;\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+/**\n+ * Test for AcmeHistoricalFile. Ensure the file is created, updated, and\n+ * causes refreshing of certificates.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_3 = { \"domain1.com\", \"domain2.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * This test will verify that the ACME file is created and updated\n+\t * properly. When the directoryURI changes, the certificate should\n+\t * be refreshed.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates1 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 1: Check that the ACME historical file was created and populated\n+\t\t\t * with the first certificate and original directoryURI. \n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: START\");\n+\t\t\tFile file = new File(server.getServerRoot() + \"/workarea/acme/acme.txt\");\n+\t\t\tif (!file.exists()) {\n+\t\t\t\tfail(\"The ACME file should exist at: \" + file.getAbsolutePath());\n+\t\t\t}\n+\t\t\tString firstDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) firstDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertEquals(caContainer.getAcmeDirectoryURI(false), firstDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 2: Update the directoryURI. This should result in a refreshed\n+\t\t\t * certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: START\");\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer2, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * new CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates2 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer2);\n+\n+\t\t\tBigInteger serial1 = ((X509Certificate) certificates1[0]).getSerialNumber();\n+\t\t\tBigInteger serial2 = ((X509Certificate) certificates2[0]).getSerialNumber();\n+\t\t\tassertFalse(\"Expected new certificate after adding new domain.\", serial1.equals(serial2));\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 3: Check that the ACME historical file was updated. \n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 3: START\");\n+\t\t\tString secondDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) secondDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertNotSame(firstDirURI, secondDirURI);\n+\t\t\tassertEquals(caContainer2.getAcmeDirectoryURI(false), secondDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 3: FINISH\");\n+\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 4: Stop the server, change the directoryURI, and start the server.\n+\t\t\t * We should renew the certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 4: START\");\n+\t\t\tserver.stopServer();\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeAppToStart(server);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * new CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates3 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tBigInteger serial3 = ((X509Certificate) certificates3[0]).getSerialNumber();\n+\t\t\tassertFalse(\"Expected new certificate after adding new domain.\", serial2.equals(serial3));\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 4: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 5: Check that the ACME historical file was updated. \n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 5: START\");\n+\t\t\tString thirdDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) thirdDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertNotSame(secondDirURI, thirdDirURI);\n+\t\t\tassertEquals(caContainer.getAcmeDirectoryURI(false), thirdDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 5: FINISH\");\n+\t\t} finally {\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2038W\");\n+\t\t}\n+\t}\n+\t/**\n+\t * This test will verify that the certificate is refreshed\n+\t * when the ACME file is unreadable or unwritable.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+    @AllowedFFDC(value = { \"java.io.FileNotFoundException\", \"java.io.IOException\" })\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI_filePermissions() throws Exception {\n+\t\tif (System.getProperty(\"os.name\").toLowerCase().startsWith(\"win\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 289}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjYyMzQ4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODo0NjozOVrOGXt9QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODo0NjozOVrOGXt9QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyMzM5Mg==", "bodyText": "Can we have a getHistoryEntries() method or something? I also assume you do this in the product code? Can't you have a helper method there so we only have to update code in one place?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427523392", "createdAt": "2020-05-19T18:46:39Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,488 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.AllowedFFDC;\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+/**\n+ * Test for AcmeHistoricalFile. Ensure the file is created, updated, and\n+ * causes refreshing of certificates.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_3 = { \"domain1.com\", \"domain2.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * This test will verify that the ACME file is created and updated\n+\t * properly. When the directoryURI changes, the certificate should\n+\t * be refreshed.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates1 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 1: Check that the ACME historical file was created and populated\n+\t\t\t * with the first certificate and original directoryURI. \n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: START\");\n+\t\t\tFile file = new File(server.getServerRoot() + \"/workarea/acme/acme.txt\");\n+\t\t\tif (!file.exists()) {\n+\t\t\t\tfail(\"The ACME file should exist at: \" + file.getAbsolutePath());\n+\t\t\t}\n+\t\t\tString firstDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) firstDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertEquals(caContainer.getAcmeDirectoryURI(false), firstDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 2: Update the directoryURI. This should result in a refreshed\n+\t\t\t * certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: START\");\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer2, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * new CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates2 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer2);\n+\n+\t\t\tBigInteger serial1 = ((X509Certificate) certificates1[0]).getSerialNumber();\n+\t\t\tBigInteger serial2 = ((X509Certificate) certificates2[0]).getSerialNumber();\n+\t\t\tassertFalse(\"Expected new certificate after adding new domain.\", serial1.equals(serial2));\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 3: Check that the ACME historical file was updated. \n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 3: START\");\n+\t\t\tString secondDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) secondDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertNotSame(firstDirURI, secondDirURI);\n+\t\t\tassertEquals(caContainer2.getAcmeDirectoryURI(false), secondDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 3: FINISH\");\n+\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 4: Stop the server, change the directoryURI, and start the server.\n+\t\t\t * We should renew the certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 4: START\");\n+\t\t\tserver.stopServer();\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeAppToStart(server);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * new CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates3 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tBigInteger serial3 = ((X509Certificate) certificates3[0]).getSerialNumber();\n+\t\t\tassertFalse(\"Expected new certificate after adding new domain.\", serial2.equals(serial3));\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 4: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 5: Check that the ACME historical file was updated. \n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 5: START\");\n+\t\t\tString thirdDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) thirdDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertNotSame(secondDirURI, thirdDirURI);\n+\t\t\tassertEquals(caContainer.getAcmeDirectoryURI(false), thirdDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 5: FINISH\");\n+\t\t} finally {\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2038W\");\n+\t\t}\n+\t}\n+\t/**\n+\t * This test will verify that the certificate is refreshed\n+\t * when the ACME file is unreadable or unwritable.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+    @AllowedFFDC(value = { \"java.io.FileNotFoundException\", \"java.io.IOException\" })\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI_filePermissions() throws Exception {\n+\t\tif (System.getProperty(\"os.name\").toLowerCase().startsWith(\"win\")) {\n+\t\t\t// windows not enforcing the setReadable/setWriteable\n+\t\t\tLog.info(AcmeSwapDirectoriesTest.class, testName.getMethodName(),\n+\t\t\t\t\t\"Skipping unreadable/unwriteable file tests on Windows: \"\n+\t\t\t\t\t\t\t+ System.getProperty(\"os.name\", \"unknown\"));\n+\t\t\treturn;\n+\t\t}\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_2);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates1 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 1: Remove the read permission on the ACME file.\n+\t\t\t * Update the directoryURI. This should result in a refreshed\n+\t\t\t * certificate. We are removing a domain in config that is not\n+\t\t\t * the subject CN, so normally this would NOT refresh the cert.\n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: START\");\n+\t\t\tFile acmefile = new File(server.getServerRoot() + \"/workarea/acme/acme.txt\");\n+\t\t\tacmefile.setReadable(false,false);\n+\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_3);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * new CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates2 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tBigInteger serial1 = ((X509Certificate) certificates1[0]).getSerialNumber();\n+\t\t\tBigInteger serial2 = ((X509Certificate) certificates2[0]).getSerialNumber();\n+\t\t\tassertFalse(\"Expected new certificate after being unable to read ACME file.\", serial1.equals(serial2));\n+\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: FINISH.\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 2: Remove the write permissions on the ACME file.\n+\t\t\t * Update the directoryURI. This should result in a refreshed\n+\t\t\t * certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: START\");\n+\t\t\tif (acmefile.exists()) {\n+\t\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"deleting acme file \" + server.getServerRoot() + \"/workarea/acme/acme.txt\");\n+\t\t\t\tacmefile.delete();\n+\t\t\t}\n+\n+\t\t\tFile acmeDir = Files.createDirectories(Paths.get(server.getServerRoot() + \"/workarea/acme\")).toFile();\n+\t\t\tif (acmeDir.exists()) {\n+\t\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"acme dir \" + acmeDir.getAbsolutePath() + \" \" + Files.isWritable(Paths.get(acmeDir.getAbsolutePath())));\n+\t\t\t\tacmeDir.setWritable(false);\n+\t\t\t}\n+\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_2);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\n+\t\t\tif (acmefile.exists()) {\n+\t\t\t\tfail(\"The ACME file should not exist.\");\n+\t\t\t}\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: FINISH.\");\n+\t\t\t\t\n+\t\t\t\n+\t\t} finally {\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2038W\");\n+\t\t}\n+\t}\n+\t/**\n+\t * This test will verify that the ACME file does not exceed\n+\t * 10 entries. When the 11th entry is added, the oldest one\n+\t * should be removed.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI_maxFileSize() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_2);\n+\t\t\n+\t\t//Make sure the ACME directory is writable - in case the previous test fails out.\n+\t\tFile acmeDir = Files.createDirectories(Paths.get(server.getServerRoot() + \"/workarea/acme\")).toFile();\n+\t\tif (acmeDir.exists()) {\n+\t\t\tacmeDir.setWritable(true);\n+\t\t}\n+\t\t\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tAcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 1: Populate the ACME file to max size and update the directoryURI.\n+\t\t\t * We should refresh the certificate and the number of lines in the ACME\n+\t\t\t * file should stay the same.\n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\n+\t\t\t//Write 10 fake entries to the ACME file\n+\t\t\tFile file = new File(server.getServerRoot() + \"/workarea/acme/acme.txt\");\n+\t       \tFileWriter fr;\n+\t\t\ttry {\n+\t\t\t\tfr = new FileWriter(file, false);\n+\t\t\t\tfr.write(\"Date\" + \"\\t\\t\\t\" + \"Serial\" + \"\\t\\t\" + \"DirectoryURI\" + \"\\t\\t\" + \"Account URI\" + \"\\n\");\n+\t\t\t\tfr.write(\"-------------------------------------------------------------------------------------------------------------------------\\n\");\n+\t\t\t\tfor (int i=0; i<10; i++) {\n+\t\t\t\t\tfr.write(\"1234567890        1122334455667788        http://directoryURI\" + i + \"        http://accountURI\");\n+\t\t\t\t\tif (i<9) fr.write(\"\\n\");\n+\t\t\t\t}\n+\t\t\t   \tfr.close();\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\t\n+\t\t\t//Update the config. This normally wouldn't cause a certificate refresh, but\n+\t\t\t//there has been a change in directoryURI.\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_3);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\t\n+\t\t\t//Check the ACME file for the new entry.\n+\t\t\tArrayList<String> lines = new ArrayList<String>();\n+\t\t\tString fileDirURI = null;\n+\t\t\ttry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 449}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjY1OTE1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODo1NjoxNVrOGXuTXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODo1NjoxNVrOGXuTXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyOTA1NA==", "bodyText": "Use the product code to write this so we only have to update code in one place?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427529054", "createdAt": "2020-05-19T18:56:15Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,488 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.AllowedFFDC;\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+/**\n+ * Test for AcmeHistoricalFile. Ensure the file is created, updated, and\n+ * causes refreshing of certificates.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_3 = { \"domain1.com\", \"domain2.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * This test will verify that the ACME file is created and updated\n+\t * properly. When the directoryURI changes, the certificate should\n+\t * be refreshed.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates1 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 1: Check that the ACME historical file was created and populated\n+\t\t\t * with the first certificate and original directoryURI. \n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: START\");\n+\t\t\tFile file = new File(server.getServerRoot() + \"/workarea/acme/acme.txt\");\n+\t\t\tif (!file.exists()) {\n+\t\t\t\tfail(\"The ACME file should exist at: \" + file.getAbsolutePath());\n+\t\t\t}\n+\t\t\tString firstDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) firstDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertEquals(caContainer.getAcmeDirectoryURI(false), firstDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 2: Update the directoryURI. This should result in a refreshed\n+\t\t\t * certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: START\");\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer2, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * new CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates2 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer2);\n+\n+\t\t\tBigInteger serial1 = ((X509Certificate) certificates1[0]).getSerialNumber();\n+\t\t\tBigInteger serial2 = ((X509Certificate) certificates2[0]).getSerialNumber();\n+\t\t\tassertFalse(\"Expected new certificate after adding new domain.\", serial1.equals(serial2));\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 3: Check that the ACME historical file was updated. \n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 3: START\");\n+\t\t\tString secondDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) secondDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertNotSame(firstDirURI, secondDirURI);\n+\t\t\tassertEquals(caContainer2.getAcmeDirectoryURI(false), secondDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 3: FINISH\");\n+\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 4: Stop the server, change the directoryURI, and start the server.\n+\t\t\t * We should renew the certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 4: START\");\n+\t\t\tserver.stopServer();\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeAppToStart(server);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * new CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates3 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tBigInteger serial3 = ((X509Certificate) certificates3[0]).getSerialNumber();\n+\t\t\tassertFalse(\"Expected new certificate after adding new domain.\", serial2.equals(serial3));\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 4: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 5: Check that the ACME historical file was updated. \n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 5: START\");\n+\t\t\tString thirdDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) thirdDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertNotSame(secondDirURI, thirdDirURI);\n+\t\t\tassertEquals(caContainer.getAcmeDirectoryURI(false), thirdDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 5: FINISH\");\n+\t\t} finally {\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2038W\");\n+\t\t}\n+\t}\n+\t/**\n+\t * This test will verify that the certificate is refreshed\n+\t * when the ACME file is unreadable or unwritable.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+    @AllowedFFDC(value = { \"java.io.FileNotFoundException\", \"java.io.IOException\" })\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI_filePermissions() throws Exception {\n+\t\tif (System.getProperty(\"os.name\").toLowerCase().startsWith(\"win\")) {\n+\t\t\t// windows not enforcing the setReadable/setWriteable\n+\t\t\tLog.info(AcmeSwapDirectoriesTest.class, testName.getMethodName(),\n+\t\t\t\t\t\"Skipping unreadable/unwriteable file tests on Windows: \"\n+\t\t\t\t\t\t\t+ System.getProperty(\"os.name\", \"unknown\"));\n+\t\t\treturn;\n+\t\t}\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_2);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates1 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 1: Remove the read permission on the ACME file.\n+\t\t\t * Update the directoryURI. This should result in a refreshed\n+\t\t\t * certificate. We are removing a domain in config that is not\n+\t\t\t * the subject CN, so normally this would NOT refresh the cert.\n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: START\");\n+\t\t\tFile acmefile = new File(server.getServerRoot() + \"/workarea/acme/acme.txt\");\n+\t\t\tacmefile.setReadable(false,false);\n+\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_3);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * new CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates2 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tBigInteger serial1 = ((X509Certificate) certificates1[0]).getSerialNumber();\n+\t\t\tBigInteger serial2 = ((X509Certificate) certificates2[0]).getSerialNumber();\n+\t\t\tassertFalse(\"Expected new certificate after being unable to read ACME file.\", serial1.equals(serial2));\n+\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: FINISH.\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 2: Remove the write permissions on the ACME file.\n+\t\t\t * Update the directoryURI. This should result in a refreshed\n+\t\t\t * certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: START\");\n+\t\t\tif (acmefile.exists()) {\n+\t\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"deleting acme file \" + server.getServerRoot() + \"/workarea/acme/acme.txt\");\n+\t\t\t\tacmefile.delete();\n+\t\t\t}\n+\n+\t\t\tFile acmeDir = Files.createDirectories(Paths.get(server.getServerRoot() + \"/workarea/acme\")).toFile();\n+\t\t\tif (acmeDir.exists()) {\n+\t\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"acme dir \" + acmeDir.getAbsolutePath() + \" \" + Files.isWritable(Paths.get(acmeDir.getAbsolutePath())));\n+\t\t\t\tacmeDir.setWritable(false);\n+\t\t\t}\n+\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_2);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\n+\t\t\tif (acmefile.exists()) {\n+\t\t\t\tfail(\"The ACME file should not exist.\");\n+\t\t\t}\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: FINISH.\");\n+\t\t\t\t\n+\t\t\t\n+\t\t} finally {\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2038W\");\n+\t\t}\n+\t}\n+\t/**\n+\t * This test will verify that the ACME file does not exceed\n+\t * 10 entries. When the 11th entry is added, the oldest one\n+\t * should be removed.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI_maxFileSize() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_2);\n+\t\t\n+\t\t//Make sure the ACME directory is writable - in case the previous test fails out.\n+\t\tFile acmeDir = Files.createDirectories(Paths.get(server.getServerRoot() + \"/workarea/acme\")).toFile();\n+\t\tif (acmeDir.exists()) {\n+\t\t\tacmeDir.setWritable(true);\n+\t\t}\n+\t\t\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tAcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 1: Populate the ACME file to max size and update the directoryURI.\n+\t\t\t * We should refresh the certificate and the number of lines in the ACME\n+\t\t\t * file should stay the same.\n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\n+\t\t\t//Write 10 fake entries to the ACME file\n+\t\t\tFile file = new File(server.getServerRoot() + \"/workarea/acme/acme.txt\");\n+\t       \tFileWriter fr;\n+\t\t\ttry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 428}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjY3Mzk5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxOTowMDoxNlrOGXuc3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxOTowMDoxNlrOGXuc3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUzMTQ4NQ==", "bodyText": "Check size == 2?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427531485", "createdAt": "2020-05-19T19:00:16Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,488 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.AllowedFFDC;\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+/**\n+ * Test for AcmeHistoricalFile. Ensure the file is created, updated, and\n+ * causes refreshing of certificates.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_3 = { \"domain1.com\", \"domain2.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * This test will verify that the ACME file is created and updated\n+\t * properly. When the directoryURI changes, the certificate should\n+\t * be refreshed.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates1 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 1: Check that the ACME historical file was created and populated\n+\t\t\t * with the first certificate and original directoryURI. \n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: START\");\n+\t\t\tFile file = new File(server.getServerRoot() + \"/workarea/acme/acme.txt\");\n+\t\t\tif (!file.exists()) {\n+\t\t\t\tfail(\"The ACME file should exist at: \" + file.getAbsolutePath());\n+\t\t\t}\n+\t\t\tString firstDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) firstDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertEquals(caContainer.getAcmeDirectoryURI(false), firstDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 2: Update the directoryURI. This should result in a refreshed\n+\t\t\t * certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: START\");\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer2, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * new CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates2 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer2);\n+\n+\t\t\tBigInteger serial1 = ((X509Certificate) certificates1[0]).getSerialNumber();\n+\t\t\tBigInteger serial2 = ((X509Certificate) certificates2[0]).getSerialNumber();\n+\t\t\tassertFalse(\"Expected new certificate after adding new domain.\", serial1.equals(serial2));\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 3: Check that the ACME historical file was updated. \n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 3: START\");\n+\t\t\tString secondDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) secondDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertNotSame(firstDirURI, secondDirURI);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjcyNzU3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxOToxNTozNFrOGXu-_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxOToxNTozNFrOGXu-_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0MDIyMg==", "bodyText": "not really a new test. just verifying the last test worked.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427540222", "createdAt": "2020-05-19T19:15:34Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,488 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.AllowedFFDC;\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+/**\n+ * Test for AcmeHistoricalFile. Ensure the file is created, updated, and\n+ * causes refreshing of certificates.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_3 = { \"domain1.com\", \"domain2.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * This test will verify that the ACME file is created and updated\n+\t * properly. When the directoryURI changes, the certificate should\n+\t * be refreshed.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates1 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 1: Check that the ACME historical file was created and populated\n+\t\t\t * with the first certificate and original directoryURI. \n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: START\");\n+\t\t\tFile file = new File(server.getServerRoot() + \"/workarea/acme/acme.txt\");\n+\t\t\tif (!file.exists()) {\n+\t\t\t\tfail(\"The ACME file should exist at: \" + file.getAbsolutePath());\n+\t\t\t}\n+\t\t\tString firstDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) firstDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertEquals(caContainer.getAcmeDirectoryURI(false), firstDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 2: Update the directoryURI. This should result in a refreshed\n+\t\t\t * certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: START\");\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer2, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * new CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates2 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer2);\n+\n+\t\t\tBigInteger serial1 = ((X509Certificate) certificates1[0]).getSerialNumber();\n+\t\t\tBigInteger serial2 = ((X509Certificate) certificates2[0]).getSerialNumber();\n+\t\t\tassertFalse(\"Expected new certificate after adding new domain.\", serial1.equals(serial2));\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 3: Check that the ACME historical file was updated. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjcyOTE4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxOToxNjowMlrOGXvAAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxOToxNjowMlrOGXvAAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0MDQ4Mg==", "bodyText": "Again, not a new test. You are verifying the previous test.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427540482", "createdAt": "2020-05-19T19:16:02Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,488 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.AllowedFFDC;\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+/**\n+ * Test for AcmeHistoricalFile. Ensure the file is created, updated, and\n+ * causes refreshing of certificates.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_3 = { \"domain1.com\", \"domain2.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * This test will verify that the ACME file is created and updated\n+\t * properly. When the directoryURI changes, the certificate should\n+\t * be refreshed.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates1 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 1: Check that the ACME historical file was created and populated\n+\t\t\t * with the first certificate and original directoryURI. \n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: START\");\n+\t\t\tFile file = new File(server.getServerRoot() + \"/workarea/acme/acme.txt\");\n+\t\t\tif (!file.exists()) {\n+\t\t\t\tfail(\"The ACME file should exist at: \" + file.getAbsolutePath());\n+\t\t\t}\n+\t\t\tString firstDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) firstDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertEquals(caContainer.getAcmeDirectoryURI(false), firstDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 2: Update the directoryURI. This should result in a refreshed\n+\t\t\t * certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: START\");\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer2, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * new CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates2 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer2);\n+\n+\t\t\tBigInteger serial1 = ((X509Certificate) certificates1[0]).getSerialNumber();\n+\t\t\tBigInteger serial2 = ((X509Certificate) certificates2[0]).getSerialNumber();\n+\t\t\tassertFalse(\"Expected new certificate after adding new domain.\", serial1.equals(serial2));\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 3: Check that the ACME historical file was updated. \n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 3: START\");\n+\t\t\tString secondDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) secondDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertNotSame(firstDirURI, secondDirURI);\n+\t\t\tassertEquals(caContainer2.getAcmeDirectoryURI(false), secondDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 3: FINISH\");\n+\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 4: Stop the server, change the directoryURI, and start the server.\n+\t\t\t * We should renew the certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 4: START\");\n+\t\t\tserver.stopServer();\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeAppToStart(server);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * new CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates3 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tBigInteger serial3 = ((X509Certificate) certificates3[0]).getSerialNumber();\n+\t\t\tassertFalse(\"Expected new certificate after adding new domain.\", serial2.equals(serial3));\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 4: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 5: Check that the ACME historical file was updated. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 247}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Mjc3NDkwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxOToyOTowM1rOGXvcnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjowNTozOVrOGci_vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0NzgwNA==", "bodyText": "I am not really following this test...\nI would have expected:\n\nremove read / write permission\nstart server\ncheck file does NOT exist, new cert written\nstop server\nadd write permission\nstart server\ncheck file exists, new cert (seems we should replace on startup if we can't verify old URL)\nstop server\nadd read permission, swap CAs\nstart server\ncheck that file exists, was updated, new cert (since new CA\nstop server", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427547804", "createdAt": "2020-05-19T19:29:03Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,488 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.AllowedFFDC;\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+/**\n+ * Test for AcmeHistoricalFile. Ensure the file is created, updated, and\n+ * causes refreshing of certificates.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_3 = { \"domain1.com\", \"domain2.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * This test will verify that the ACME file is created and updated\n+\t * properly. When the directoryURI changes, the certificate should\n+\t * be refreshed.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates1 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 1: Check that the ACME historical file was created and populated\n+\t\t\t * with the first certificate and original directoryURI. \n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: START\");\n+\t\t\tFile file = new File(server.getServerRoot() + \"/workarea/acme/acme.txt\");\n+\t\t\tif (!file.exists()) {\n+\t\t\t\tfail(\"The ACME file should exist at: \" + file.getAbsolutePath());\n+\t\t\t}\n+\t\t\tString firstDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) firstDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertEquals(caContainer.getAcmeDirectoryURI(false), firstDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 2: Update the directoryURI. This should result in a refreshed\n+\t\t\t * certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: START\");\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer2, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * new CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates2 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer2);\n+\n+\t\t\tBigInteger serial1 = ((X509Certificate) certificates1[0]).getSerialNumber();\n+\t\t\tBigInteger serial2 = ((X509Certificate) certificates2[0]).getSerialNumber();\n+\t\t\tassertFalse(\"Expected new certificate after adding new domain.\", serial1.equals(serial2));\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 3: Check that the ACME historical file was updated. \n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 3: START\");\n+\t\t\tString secondDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) secondDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertNotSame(firstDirURI, secondDirURI);\n+\t\t\tassertEquals(caContainer2.getAcmeDirectoryURI(false), secondDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 3: FINISH\");\n+\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 4: Stop the server, change the directoryURI, and start the server.\n+\t\t\t * We should renew the certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 4: START\");\n+\t\t\tserver.stopServer();\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeAppToStart(server);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * new CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates3 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tBigInteger serial3 = ((X509Certificate) certificates3[0]).getSerialNumber();\n+\t\t\tassertFalse(\"Expected new certificate after adding new domain.\", serial2.equals(serial3));\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 4: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 5: Check that the ACME historical file was updated. \n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 5: START\");\n+\t\t\tString thirdDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) thirdDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertNotSame(secondDirURI, thirdDirURI);\n+\t\t\tassertEquals(caContainer.getAcmeDirectoryURI(false), thirdDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 5: FINISH\");\n+\t\t} finally {\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2038W\");\n+\t\t}\n+\t}\n+\t/**\n+\t * This test will verify that the certificate is refreshed\n+\t * when the ACME file is unreadable or unwritable.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+    @AllowedFFDC(value = { \"java.io.FileNotFoundException\", \"java.io.IOException\" })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 286}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUxNjQxNg==", "bodyText": "I can't change the permissions while the server is down because when a server starts, a new server directory is created, eg. com.ibm.ws.security.acme.fat.simple-21-05-2020-16-03-05. Thus, any acme file i would have created would be down a different path.\nBecause of this, I can't use different directoryURIs to trigger a config update because that would refresh the certificate, and I'm trying to test that an unreadable/unwritable acme file triggers a refresh. So I use domain changes that should not trigger a refresh on their own.\n\nStart the server and wait for initial certificate\nSet the acme file to be unreadable. The next time we try to read it, we should force refresh the certificate.\nUpdate the config with a change that does NOT force refresh and wait for the certificate to refresh.\nDelete the acme file and set the acme directory to be unreadable.\nChange the directoryURI. We won\u2019t be able to write the acme file, but we should refresh the certificate.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r430516416", "createdAt": "2020-05-26T15:45:41Z", "author": {"login": "ryanesch"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,488 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.AllowedFFDC;\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+/**\n+ * Test for AcmeHistoricalFile. Ensure the file is created, updated, and\n+ * causes refreshing of certificates.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_3 = { \"domain1.com\", \"domain2.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * This test will verify that the ACME file is created and updated\n+\t * properly. When the directoryURI changes, the certificate should\n+\t * be refreshed.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates1 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 1: Check that the ACME historical file was created and populated\n+\t\t\t * with the first certificate and original directoryURI. \n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: START\");\n+\t\t\tFile file = new File(server.getServerRoot() + \"/workarea/acme/acme.txt\");\n+\t\t\tif (!file.exists()) {\n+\t\t\t\tfail(\"The ACME file should exist at: \" + file.getAbsolutePath());\n+\t\t\t}\n+\t\t\tString firstDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) firstDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertEquals(caContainer.getAcmeDirectoryURI(false), firstDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 2: Update the directoryURI. This should result in a refreshed\n+\t\t\t * certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: START\");\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer2, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * new CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates2 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer2);\n+\n+\t\t\tBigInteger serial1 = ((X509Certificate) certificates1[0]).getSerialNumber();\n+\t\t\tBigInteger serial2 = ((X509Certificate) certificates2[0]).getSerialNumber();\n+\t\t\tassertFalse(\"Expected new certificate after adding new domain.\", serial1.equals(serial2));\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 3: Check that the ACME historical file was updated. \n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 3: START\");\n+\t\t\tString secondDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) secondDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertNotSame(firstDirURI, secondDirURI);\n+\t\t\tassertEquals(caContainer2.getAcmeDirectoryURI(false), secondDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 3: FINISH\");\n+\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 4: Stop the server, change the directoryURI, and start the server.\n+\t\t\t * We should renew the certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 4: START\");\n+\t\t\tserver.stopServer();\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeAppToStart(server);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * new CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates3 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tBigInteger serial3 = ((X509Certificate) certificates3[0]).getSerialNumber();\n+\t\t\tassertFalse(\"Expected new certificate after adding new domain.\", serial2.equals(serial3));\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 4: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 5: Check that the ACME historical file was updated. \n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 5: START\");\n+\t\t\tString thirdDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) thirdDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertNotSame(secondDirURI, thirdDirURI);\n+\t\t\tassertEquals(caContainer.getAcmeDirectoryURI(false), thirdDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 5: FINISH\");\n+\t\t} finally {\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2038W\");\n+\t\t}\n+\t}\n+\t/**\n+\t * This test will verify that the certificate is refreshed\n+\t * when the ACME file is unreadable or unwritable.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+    @AllowedFFDC(value = { \"java.io.FileNotFoundException\", \"java.io.IOException\" })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0NzgwNA=="}, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 286}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4NjY4Ng==", "bodyText": "I thought that the acme.fat.simple directory remained, it just archived the contents at the end of the previous test (this is why we clean up the keystores at the end of each test). Perhaps I am wrong. As long as you are certain this is testing what you believe it is.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r432586686", "createdAt": "2020-05-29T16:05:39Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,488 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.AllowedFFDC;\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+/**\n+ * Test for AcmeHistoricalFile. Ensure the file is created, updated, and\n+ * causes refreshing of certificates.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_3 = { \"domain1.com\", \"domain2.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * This test will verify that the ACME file is created and updated\n+\t * properly. When the directoryURI changes, the certificate should\n+\t * be refreshed.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates1 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 1: Check that the ACME historical file was created and populated\n+\t\t\t * with the first certificate and original directoryURI. \n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: START\");\n+\t\t\tFile file = new File(server.getServerRoot() + \"/workarea/acme/acme.txt\");\n+\t\t\tif (!file.exists()) {\n+\t\t\t\tfail(\"The ACME file should exist at: \" + file.getAbsolutePath());\n+\t\t\t}\n+\t\t\tString firstDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) firstDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertEquals(caContainer.getAcmeDirectoryURI(false), firstDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 2: Update the directoryURI. This should result in a refreshed\n+\t\t\t * certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: START\");\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer2, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * new CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates2 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer2);\n+\n+\t\t\tBigInteger serial1 = ((X509Certificate) certificates1[0]).getSerialNumber();\n+\t\t\tBigInteger serial2 = ((X509Certificate) certificates2[0]).getSerialNumber();\n+\t\t\tassertFalse(\"Expected new certificate after adding new domain.\", serial1.equals(serial2));\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 3: Check that the ACME historical file was updated. \n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 3: START\");\n+\t\t\tString secondDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) secondDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertNotSame(firstDirURI, secondDirURI);\n+\t\t\tassertEquals(caContainer2.getAcmeDirectoryURI(false), secondDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 3: FINISH\");\n+\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 4: Stop the server, change the directoryURI, and start the server.\n+\t\t\t * We should renew the certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 4: START\");\n+\t\t\tserver.stopServer();\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeAppToStart(server);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * new CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates3 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tBigInteger serial3 = ((X509Certificate) certificates3[0]).getSerialNumber();\n+\t\t\tassertFalse(\"Expected new certificate after adding new domain.\", serial2.equals(serial3));\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 4: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 5: Check that the ACME historical file was updated. \n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 5: START\");\n+\t\t\tString thirdDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) thirdDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertNotSame(secondDirURI, thirdDirURI);\n+\t\t\tassertEquals(caContainer.getAcmeDirectoryURI(false), thirdDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 5: FINISH\");\n+\t\t} finally {\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2038W\");\n+\t\t}\n+\t}\n+\t/**\n+\t * This test will verify that the certificate is refreshed\n+\t * when the ACME file is unreadable or unwritable.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+    @AllowedFFDC(value = { \"java.io.FileNotFoundException\", \"java.io.IOException\" })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0NzgwNA=="}, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 286}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Mjc3ODcyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxOTozMDoxMlrOGXvfHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxOTozMDoxMlrOGXvfHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0ODQ0Nw==", "bodyText": "Do we allow a maximum of 12 lines? seems this should be a constant in ACMEConstants.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427548447", "createdAt": "2020-05-19T19:30:12Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,488 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.AllowedFFDC;\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+/**\n+ * Test for AcmeHistoricalFile. Ensure the file is created, updated, and\n+ * causes refreshing of certificates.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_1 = { \"domain1.com\" };\n+\tprivate static final String[] DOMAINS_2 = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };\n+\tprivate static final String[] DOMAINS_3 = { \"domain1.com\", \"domain2.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\tpublic static CAContainer caContainer2;\n+\n+\t@Rule\n+\tpublic TestName testName = new TestName();\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new PebbleContainer();\n+\t\tcaContainer2 = new PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t\tif (caContainer2 != null) {\n+\t\t\tcaContainer2.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() throws Exception {\n+\t\t/*\n+\t\t * Clear the DNS records for the domain. Required since a few of the\n+\t\t * tests setup invalid A records to test failure scenarios.\n+\t\t */\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer, DOMAINS_ALL);\n+\t\tAcmeFatUtils.clearDnsForDomains(caContainer2, DOMAINS_ALL);\n+\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\t}\n+\n+\t/**\n+\t * This test will verify that the ACME file is created and updated\n+\t * properly. When the directoryURI changes, the certificate should\n+\t * be refreshed.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates1 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 1: Check that the ACME historical file was created and populated\n+\t\t\t * with the first certificate and original directoryURI. \n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: START\");\n+\t\t\tFile file = new File(server.getServerRoot() + \"/workarea/acme/acme.txt\");\n+\t\t\tif (!file.exists()) {\n+\t\t\t\tfail(\"The ACME file should exist at: \" + file.getAbsolutePath());\n+\t\t\t}\n+\t\t\tString firstDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) firstDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertEquals(caContainer.getAcmeDirectoryURI(false), firstDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 2: Update the directoryURI. This should result in a refreshed\n+\t\t\t * certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: START\");\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer2, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * new CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates2 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer2);\n+\n+\t\t\tBigInteger serial1 = ((X509Certificate) certificates1[0]).getSerialNumber();\n+\t\t\tBigInteger serial2 = ((X509Certificate) certificates2[0]).getSerialNumber();\n+\t\t\tassertFalse(\"Expected new certificate after adding new domain.\", serial1.equals(serial2));\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 3: Check that the ACME historical file was updated. \n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 3: START\");\n+\t\t\tString secondDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) secondDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertNotSame(firstDirURI, secondDirURI);\n+\t\t\tassertEquals(caContainer2.getAcmeDirectoryURI(false), secondDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 3: FINISH\");\n+\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 4: Stop the server, change the directoryURI, and start the server.\n+\t\t\t * We should renew the certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 4: START\");\n+\t\t\tserver.stopServer();\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_1);\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeAppToStart(server);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * new CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates3 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tBigInteger serial3 = ((X509Certificate) certificates3[0]).getSerialNumber();\n+\t\t\tassertFalse(\"Expected new certificate after adding new domain.\", serial2.equals(serial3));\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 4: FINISH\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 5: Check that the ACME historical file was updated. \n+\t\t\t * \n+\t\t\t **********************************************************************/\t\t\t\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 5: START\");\n+\t\t\tString thirdDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) thirdDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\tassertNotSame(secondDirURI, thirdDirURI);\n+\t\t\tassertEquals(caContainer.getAcmeDirectoryURI(false), thirdDirURI);\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 5: FINISH\");\n+\t\t} finally {\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2038W\");\n+\t\t}\n+\t}\n+\t/**\n+\t * This test will verify that the certificate is refreshed\n+\t * when the ACME file is unreadable or unwritable.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+    @AllowedFFDC(value = { \"java.io.FileNotFoundException\", \"java.io.IOException\" })\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI_filePermissions() throws Exception {\n+\t\tif (System.getProperty(\"os.name\").toLowerCase().startsWith(\"win\")) {\n+\t\t\t// windows not enforcing the setReadable/setWriteable\n+\t\t\tLog.info(AcmeSwapDirectoriesTest.class, testName.getMethodName(),\n+\t\t\t\t\t\"Skipping unreadable/unwriteable file tests on Windows: \"\n+\t\t\t\t\t\t\t+ System.getProperty(\"os.name\", \"unknown\"));\n+\t\t\treturn;\n+\t\t}\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_2);\n+\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates1 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 1: Remove the read permission on the ACME file.\n+\t\t\t * Update the directoryURI. This should result in a refreshed\n+\t\t\t * certificate. We are removing a domain in config that is not\n+\t\t\t * the subject CN, so normally this would NOT refresh the cert.\n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: START\");\n+\t\t\tFile acmefile = new File(server.getServerRoot() + \"/workarea/acme/acme.txt\");\n+\t\t\tacmefile.setReadable(false,false);\n+\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_3);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * new CA.\n+\t\t\t */\n+\t\t\tCertificate[] certificates2 = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tBigInteger serial1 = ((X509Certificate) certificates1[0]).getSerialNumber();\n+\t\t\tBigInteger serial2 = ((X509Certificate) certificates2[0]).getSerialNumber();\n+\t\t\tassertFalse(\"Expected new certificate after being unable to read ACME file.\", serial1.equals(serial2));\n+\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 1: FINISH.\");\n+\t\t\t\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 2: Remove the write permissions on the ACME file.\n+\t\t\t * Update the directoryURI. This should result in a refreshed\n+\t\t\t * certificate.\n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: START\");\n+\t\t\tif (acmefile.exists()) {\n+\t\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"deleting acme file \" + server.getServerRoot() + \"/workarea/acme/acme.txt\");\n+\t\t\t\tacmefile.delete();\n+\t\t\t}\n+\n+\t\t\tFile acmeDir = Files.createDirectories(Paths.get(server.getServerRoot() + \"/workarea/acme\")).toFile();\n+\t\t\tif (acmeDir.exists()) {\n+\t\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"acme dir \" + acmeDir.getAbsolutePath() + \" \" + Files.isWritable(Paths.get(acmeDir.getAbsolutePath())));\n+\t\t\t\tacmeDir.setWritable(false);\n+\t\t\t}\n+\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_2);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\n+\t\t\tif (acmefile.exists()) {\n+\t\t\t\tfail(\"The ACME file should not exist.\");\n+\t\t\t}\n+\t\t\tLog.info(this.getClass(), testName.getMethodName(), \"TEST 2: FINISH.\");\n+\t\t\t\t\n+\t\t\t\n+\t\t} finally {\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2038W\");\n+\t\t}\n+\t}\n+\t/**\n+\t * This test will verify that the ACME file does not exceed\n+\t * 10 entries. When the 11th entry is added, the oldest one\n+\t * should be removed.\n+\t * \n+\t * @throws Exception\n+\t *             If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.CACERTS_TRUSTSTORE_PASSWORD)\n+\tpublic void update_directoryURI_maxFileSize() throws Exception {\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t */\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_2);\n+\t\t\n+\t\t//Make sure the ACME directory is writable - in case the previous test fails out.\n+\t\tFile acmeDir = Files.createDirectories(Paths.get(server.getServerRoot() + \"/workarea/acme\")).toFile();\n+\t\tif (acmeDir.exists()) {\n+\t\t\tacmeDir.setWritable(true);\n+\t\t}\n+\t\t\n+\t\ttry {\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslToCreateKeystore(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the\n+\t\t\t * CA.\n+\t\t\t */\n+\t\t\tAcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\t\t\t/***********************************************************************\n+\t\t\t * \n+\t\t\t * TEST 1: Populate the ACME file to max size and update the directoryURI.\n+\t\t\t * We should refresh the certificate and the number of lines in the ACME\n+\t\t\t * file should stay the same.\n+\t\t\t * \n+\t\t\t **********************************************************************/\n+\n+\t\t\t//Write 10 fake entries to the ACME file\n+\t\t\tFile file = new File(server.getServerRoot() + \"/workarea/acme/acme.txt\");\n+\t       \tFileWriter fr;\n+\t\t\ttry {\n+\t\t\t\tfr = new FileWriter(file, false);\n+\t\t\t\tfr.write(\"Date\" + \"\\t\\t\\t\" + \"Serial\" + \"\\t\\t\" + \"DirectoryURI\" + \"\\t\\t\" + \"Account URI\" + \"\\n\");\n+\t\t\t\tfr.write(\"-------------------------------------------------------------------------------------------------------------------------\\n\");\n+\t\t\t\tfor (int i=0; i<10; i++) {\n+\t\t\t\t\tfr.write(\"1234567890        1122334455667788        http://directoryURI\" + i + \"        http://accountURI\");\n+\t\t\t\t\tif (i<9) fr.write(\"\\n\");\n+\t\t\t\t}\n+\t\t\t   \tfr.close();\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\t\n+\t\t\t//Update the config. This normally wouldn't cause a certificate refresh, but\n+\t\t\t//there has been a change in directoryURI.\n+\t\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, ORIGINAL_CONFIG, false, DOMAINS_3);\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\t\n+\t\t\t//Check the ACME file for the new entry.\n+\t\t\tArrayList<String> lines = new ArrayList<String>();\n+\t\t\tString fileDirURI = null;\n+\t\t\ttry {\n+\t\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t\t    String line, lastLine = null; \n+\t\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\t\tlastLine=line;\n+\t\t\t\t\tlines.add(line);\n+\t\t\t\t}\n+\t\t\t\tbr.close();\n+\t\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\t\tif (tok.hasMoreTokens()) fileDirURI = tok.nextToken();\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfail(e.getMessage()); \n+\t\t\t}\n+\t\t\t\n+\t\t\t//After refreshing the certificate and updating the ACME file,\n+\t\t\t//we should still have 12 lines.\n+\t\t\tassertEquals(12, lines.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 469}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjgwNjk3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeHistoricalFileHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxOTozODo0NVrOGXvxBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo0OToxMFrOGXyEwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU1MzAyOA==", "bodyText": "javadoc", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427553028", "createdAt": "2020-05-19T19:38:45Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeHistoricalFileHelper.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package com.ibm.ws.security.acme.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.security.cert.X509Certificate;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.security.acme.AcmeCaException;\n+import com.ibm.ws.security.acme.AcmeCertificate;\n+import com.ibm.wsspi.kernel.service.location.WsLocationAdmin;\n+\n+public class AcmeHistoricalFileHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5MDg0OA==", "bodyText": "Not a huge fan of the name either. AcmeHistory perhaps?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427590848", "createdAt": "2020-05-19T20:49:10Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeHistoricalFileHelper.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package com.ibm.ws.security.acme.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.security.cert.X509Certificate;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.security.acme.AcmeCaException;\n+import com.ibm.ws.security.acme.AcmeCertificate;\n+import com.ibm.wsspi.kernel.service.location.WsLocationAdmin;\n+\n+public class AcmeHistoricalFileHelper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU1MzAyOA=="}, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzAxMDQyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo0MDoyN1rOGXxyew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDozMjoyNFrOGZB2mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU4NjE3MQ==", "bodyText": "I would expect us to only have 1 domain. We don't want to switch domains, otherwise the domain changing is what could be leading to the cert renew.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427586171", "createdAt": "2020-05-19T20:40:27Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,488 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.AllowedFFDC;\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+/**\n+ * Test for AcmeHistoricalFile. Ensure the file is created, updated, and\n+ * causes refreshing of certificates.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5MDg3MQ==", "bodyText": "We should not refresh the certificate if we remove a domain that is not the subject cn. I use this domain change to trigger a config update check. Normally, nothing would happen, but since we can't read from the ACME file, we should refresh the certificate.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r428890871", "createdAt": "2020-05-21T20:18:30Z", "author": {"login": "ryanesch"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,488 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.AllowedFFDC;\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+/**\n+ * Test for AcmeHistoricalFile. Ensure the file is created, updated, and\n+ * causes refreshing of certificates.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU4NjE3MQ=="}, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5Nzk0NA==", "bodyText": "We will refresh the certificate if one of the domains is not in either the CN or the DNSNames in the SANs. I would just be careful changing domains, it may trigger a refresh if done in the wrong oder.\nYou might want to trigger a configuration change with something that can't possibly result in a new cert - like the polling times.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r428897944", "createdAt": "2020-05-21T20:32:24Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSwapDirectoriesTest.java", "diffHunk": "@@ -0,0 +1,488 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertFalse;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.docker.pebble.PebbleContainer;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.AllowedFFDC;\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.impl.LibertyServer;\n+/**\n+ * Test for AcmeHistoricalFile. Ensure the file is created, updated, and\n+ * causes refreshing of certificates.\n+ */\n+@RunWith(FATRunner.class)\n+public class AcmeSwapDirectoriesTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprotected static ServerConfiguration ORIGINAL_CONFIG;\n+\n+\t/*\n+\t * Domains that are configured and cleared before and after the class.\n+\t */\n+\tprivate static final String[] DOMAINS_ALL = { \"domain1.com\", \"domain2.com\", \"domain3.com\" };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU4NjE3MQ=="}, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzAxMzEyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeHistoricalFileHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo0MToxM1rOGXx0Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo0MToxM1rOGXx0Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU4NjYwMw==", "bodyText": "not sure I like this file name. Maybe acmeca-history.txt?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427586603", "createdAt": "2020-05-19T20:41:13Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeHistoricalFileHelper.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package com.ibm.ws.security.acme.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.security.cert.X509Certificate;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.security.acme.AcmeCaException;\n+import com.ibm.ws.security.acme.AcmeCertificate;\n+import com.ibm.wsspi.kernel.service.location.WsLocationAdmin;\n+\n+public class AcmeHistoricalFileHelper {\n+\tprivate static final TraceComponent tc = Tr.register(AcmeHistoricalFileHelper.class);\n+\tprivate String spaceDelim = \"                  \";\n+\t\n+\t/**\n+\t * This method determines if the directoryURI has changed by checking\n+\t * the acme file.\n+\t * @return True if the directoryURI has changed\n+\t * @throws AcmeCaException\n+\t */\n+\tprotected boolean directoryURIChanged(String currentDirectoryURI, WsLocationAdmin wslocation) throws AcmeCaException {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tif (!file.exists()) {\n+\t\t\tcreateAcmeFile(wslocation);\n+\t\t\treturn true;\n+\t\t}\n+\t\tString fileDirURI = currentDirectoryURI;\n+\t\ttry {\n+\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t    String line, lastLine = null; \n+\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\tlastLine=line;\n+\t\t\t}\n+\t\t\tbr.close();\n+\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) fileDirURI = tok.nextToken();\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tTr.error(tc, e.getMessage());\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (currentDirectoryURI.equals(fileDirURI)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn true;\n+\t}\n+\t\n+\t/**\n+\t * This method will create the initial acme file in the servers/workarea\n+\t * directory. It holds certificate and directoryURI information, eg.\n+\t *  Date                Serial                   DirectoryURI                    Account URI\n+     *  --------------------------------------------------------------------------------------------\n+     *  20200509231118      6542743894787011570      https://localhost:33827/dir     https://localhost:33827/my-account/1\n+\t */\n+\tprivate void createAcmeFile(WsLocationAdmin wslocation) {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzAxNDU3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeHistoricalFileHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo0MTo0OFrOGXx1Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo0MTo0OFrOGXx1Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU4Njg2Mg==", "bodyText": "Localized?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427586862", "createdAt": "2020-05-19T20:41:48Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeHistoricalFileHelper.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package com.ibm.ws.security.acme.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.security.cert.X509Certificate;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.security.acme.AcmeCaException;\n+import com.ibm.ws.security.acme.AcmeCertificate;\n+import com.ibm.wsspi.kernel.service.location.WsLocationAdmin;\n+\n+public class AcmeHistoricalFileHelper {\n+\tprivate static final TraceComponent tc = Tr.register(AcmeHistoricalFileHelper.class);\n+\tprivate String spaceDelim = \"                  \";\n+\t\n+\t/**\n+\t * This method determines if the directoryURI has changed by checking\n+\t * the acme file.\n+\t * @return True if the directoryURI has changed\n+\t * @throws AcmeCaException\n+\t */\n+\tprotected boolean directoryURIChanged(String currentDirectoryURI, WsLocationAdmin wslocation) throws AcmeCaException {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tif (!file.exists()) {\n+\t\t\tcreateAcmeFile(wslocation);\n+\t\t\treturn true;\n+\t\t}\n+\t\tString fileDirURI = currentDirectoryURI;\n+\t\ttry {\n+\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t    String line, lastLine = null; \n+\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\tlastLine=line;\n+\t\t\t}\n+\t\t\tbr.close();\n+\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) fileDirURI = tok.nextToken();\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tTr.error(tc, e.getMessage());\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (currentDirectoryURI.equals(fileDirURI)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn true;\n+\t}\n+\t\n+\t/**\n+\t * This method will create the initial acme file in the servers/workarea\n+\t * directory. It holds certificate and directoryURI information, eg.\n+\t *  Date                Serial                   DirectoryURI                    Account URI\n+     *  --------------------------------------------------------------------------------------------\n+     *  20200509231118      6542743894787011570      https://localhost:33827/dir     https://localhost:33827/my-account/1\n+\t */\n+\tprivate void createAcmeFile(WsLocationAdmin wslocation) {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tif (file.exists()) return;\n+\t\tfile.getParentFile().mkdirs();\n+\t\ttry {\n+\t\t\tfile.createNewFile();\n+\t\t\tFileWriter fr;\n+\t\t\tfr = new FileWriter(file, false);\n+\t\t\tfr.write(\"Date\" + spaceDelim + \"Serial\" + spaceDelim + \"DirectoryURI\" + spaceDelim + \"Account URI\" + \"\\n\");\n+\t\t\tfr.write(\"-------------------------------------------------------------------------------------------------------------------------\");\n+\t       \tfr.close();\n+\t\t} catch (IOException e) {\n+\t\t\tTr.error(tc, e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzAxODg5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeHistoricalFileHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo0MzowM1rOGXx35Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo0MzowM1rOGXx35Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU4NzU1Nw==", "bodyText": "The file name should be a constant.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427587557", "createdAt": "2020-05-19T20:43:03Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeHistoricalFileHelper.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package com.ibm.ws.security.acme.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.security.cert.X509Certificate;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.security.acme.AcmeCaException;\n+import com.ibm.ws.security.acme.AcmeCertificate;\n+import com.ibm.wsspi.kernel.service.location.WsLocationAdmin;\n+\n+public class AcmeHistoricalFileHelper {\n+\tprivate static final TraceComponent tc = Tr.register(AcmeHistoricalFileHelper.class);\n+\tprivate String spaceDelim = \"                  \";\n+\t\n+\t/**\n+\t * This method determines if the directoryURI has changed by checking\n+\t * the acme file.\n+\t * @return True if the directoryURI has changed\n+\t * @throws AcmeCaException\n+\t */\n+\tprotected boolean directoryURIChanged(String currentDirectoryURI, WsLocationAdmin wslocation) throws AcmeCaException {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tif (!file.exists()) {\n+\t\t\tcreateAcmeFile(wslocation);\n+\t\t\treturn true;\n+\t\t}\n+\t\tString fileDirURI = currentDirectoryURI;\n+\t\ttry {\n+\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t    String line, lastLine = null; \n+\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\tlastLine=line;\n+\t\t\t}\n+\t\t\tbr.close();\n+\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) fileDirURI = tok.nextToken();\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tTr.error(tc, e.getMessage());\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (currentDirectoryURI.equals(fileDirURI)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn true;\n+\t}\n+\t\n+\t/**\n+\t * This method will create the initial acme file in the servers/workarea\n+\t * directory. It holds certificate and directoryURI information, eg.\n+\t *  Date                Serial                   DirectoryURI                    Account URI\n+     *  --------------------------------------------------------------------------------------------\n+     *  20200509231118      6542743894787011570      https://localhost:33827/dir     https://localhost:33827/my-account/1\n+\t */\n+\tprivate void createAcmeFile(WsLocationAdmin wslocation) {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tif (file.exists()) return;\n+\t\tfile.getParentFile().mkdirs();\n+\t\ttry {\n+\t\t\tfile.createNewFile();\n+\t\t\tFileWriter fr;\n+\t\t\tfr = new FileWriter(file, false);\n+\t\t\tfr.write(\"Date\" + spaceDelim + \"Serial\" + spaceDelim + \"DirectoryURI\" + spaceDelim + \"Account URI\" + \"\\n\");\n+\t\t\tfr.write(\"-------------------------------------------------------------------------------------------------------------------------\");\n+\t       \tfr.close();\n+\t\t} catch (IOException e) {\n+\t\t\tTr.error(tc, e.getMessage());\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Updates the historical ACME file.\n+\t * @param certificate The current X509Certificate.\n+\t * @param directoryURI The current directoryURI from config.\n+\t * @param accountURI The current accountURI from config.\n+\t * @throws AcmeCaException\n+\t */\n+\tprotected void updateAcmeFile(X509Certificate certificate, String directoryURI, String accountURI, WsLocationAdmin wslocation) throws AcmeCaException {\n+\t\tupdateAcmeFile(null, certificate, directoryURI, accountURI, wslocation);\n+\t}\n+\n+\t/**\n+\t * Update the acme file with the original or updated certificate\n+\t * and directoryURI information. Max file size is 10 lines.\n+\t * @param acmeCertificate The certificate to use if the default X509 certificate is null.\n+\t * @param certificate The current X509Certificate.\n+\t * @param directoryURI The current directoryURI from config.\n+\t * @param accountURI The current accountURI from config.\n+\t * @throws AcmeCaException\n+\t */\n+\tprotected void updateAcmeFile(AcmeCertificate acmeCertificate, X509Certificate certificate, String directoryURI, String accountURI, WsLocationAdmin wslocation) throws AcmeCaException {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzAyMjQ2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeHistoricalFileHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo0NDowOVrOGXx6CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo0NDowOVrOGXx6CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU4ODEwNQ==", "bodyText": "Seems to be the opposite. If acmeCertificate is null we look at certificate.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427588105", "createdAt": "2020-05-19T20:44:09Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeHistoricalFileHelper.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package com.ibm.ws.security.acme.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.security.cert.X509Certificate;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.security.acme.AcmeCaException;\n+import com.ibm.ws.security.acme.AcmeCertificate;\n+import com.ibm.wsspi.kernel.service.location.WsLocationAdmin;\n+\n+public class AcmeHistoricalFileHelper {\n+\tprivate static final TraceComponent tc = Tr.register(AcmeHistoricalFileHelper.class);\n+\tprivate String spaceDelim = \"                  \";\n+\t\n+\t/**\n+\t * This method determines if the directoryURI has changed by checking\n+\t * the acme file.\n+\t * @return True if the directoryURI has changed\n+\t * @throws AcmeCaException\n+\t */\n+\tprotected boolean directoryURIChanged(String currentDirectoryURI, WsLocationAdmin wslocation) throws AcmeCaException {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tif (!file.exists()) {\n+\t\t\tcreateAcmeFile(wslocation);\n+\t\t\treturn true;\n+\t\t}\n+\t\tString fileDirURI = currentDirectoryURI;\n+\t\ttry {\n+\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t    String line, lastLine = null; \n+\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\tlastLine=line;\n+\t\t\t}\n+\t\t\tbr.close();\n+\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) fileDirURI = tok.nextToken();\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tTr.error(tc, e.getMessage());\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (currentDirectoryURI.equals(fileDirURI)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn true;\n+\t}\n+\t\n+\t/**\n+\t * This method will create the initial acme file in the servers/workarea\n+\t * directory. It holds certificate and directoryURI information, eg.\n+\t *  Date                Serial                   DirectoryURI                    Account URI\n+     *  --------------------------------------------------------------------------------------------\n+     *  20200509231118      6542743894787011570      https://localhost:33827/dir     https://localhost:33827/my-account/1\n+\t */\n+\tprivate void createAcmeFile(WsLocationAdmin wslocation) {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tif (file.exists()) return;\n+\t\tfile.getParentFile().mkdirs();\n+\t\ttry {\n+\t\t\tfile.createNewFile();\n+\t\t\tFileWriter fr;\n+\t\t\tfr = new FileWriter(file, false);\n+\t\t\tfr.write(\"Date\" + spaceDelim + \"Serial\" + spaceDelim + \"DirectoryURI\" + spaceDelim + \"Account URI\" + \"\\n\");\n+\t\t\tfr.write(\"-------------------------------------------------------------------------------------------------------------------------\");\n+\t       \tfr.close();\n+\t\t} catch (IOException e) {\n+\t\t\tTr.error(tc, e.getMessage());\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Updates the historical ACME file.\n+\t * @param certificate The current X509Certificate.\n+\t * @param directoryURI The current directoryURI from config.\n+\t * @param accountURI The current accountURI from config.\n+\t * @throws AcmeCaException\n+\t */\n+\tprotected void updateAcmeFile(X509Certificate certificate, String directoryURI, String accountURI, WsLocationAdmin wslocation) throws AcmeCaException {\n+\t\tupdateAcmeFile(null, certificate, directoryURI, accountURI, wslocation);\n+\t}\n+\n+\t/**\n+\t * Update the acme file with the original or updated certificate\n+\t * and directoryURI information. Max file size is 10 lines.\n+\t * @param acmeCertificate The certificate to use if the default X509 certificate is null.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzAyNTA4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeHistoricalFileHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo0NDo1NVrOGXx7rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo0NDo1NVrOGXx7rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU4ODUyNg==", "bodyText": "Can't we return whether we created the file from createAcmeFile, then we wouldn't need to check if the file exists again?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427588526", "createdAt": "2020-05-19T20:44:55Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeHistoricalFileHelper.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package com.ibm.ws.security.acme.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.security.cert.X509Certificate;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.security.acme.AcmeCaException;\n+import com.ibm.ws.security.acme.AcmeCertificate;\n+import com.ibm.wsspi.kernel.service.location.WsLocationAdmin;\n+\n+public class AcmeHistoricalFileHelper {\n+\tprivate static final TraceComponent tc = Tr.register(AcmeHistoricalFileHelper.class);\n+\tprivate String spaceDelim = \"                  \";\n+\t\n+\t/**\n+\t * This method determines if the directoryURI has changed by checking\n+\t * the acme file.\n+\t * @return True if the directoryURI has changed\n+\t * @throws AcmeCaException\n+\t */\n+\tprotected boolean directoryURIChanged(String currentDirectoryURI, WsLocationAdmin wslocation) throws AcmeCaException {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tif (!file.exists()) {\n+\t\t\tcreateAcmeFile(wslocation);\n+\t\t\treturn true;\n+\t\t}\n+\t\tString fileDirURI = currentDirectoryURI;\n+\t\ttry {\n+\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t    String line, lastLine = null; \n+\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\tlastLine=line;\n+\t\t\t}\n+\t\t\tbr.close();\n+\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) fileDirURI = tok.nextToken();\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tTr.error(tc, e.getMessage());\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (currentDirectoryURI.equals(fileDirURI)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn true;\n+\t}\n+\t\n+\t/**\n+\t * This method will create the initial acme file in the servers/workarea\n+\t * directory. It holds certificate and directoryURI information, eg.\n+\t *  Date                Serial                   DirectoryURI                    Account URI\n+     *  --------------------------------------------------------------------------------------------\n+     *  20200509231118      6542743894787011570      https://localhost:33827/dir     https://localhost:33827/my-account/1\n+\t */\n+\tprivate void createAcmeFile(WsLocationAdmin wslocation) {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tif (file.exists()) return;\n+\t\tfile.getParentFile().mkdirs();\n+\t\ttry {\n+\t\t\tfile.createNewFile();\n+\t\t\tFileWriter fr;\n+\t\t\tfr = new FileWriter(file, false);\n+\t\t\tfr.write(\"Date\" + spaceDelim + \"Serial\" + spaceDelim + \"DirectoryURI\" + spaceDelim + \"Account URI\" + \"\\n\");\n+\t\t\tfr.write(\"-------------------------------------------------------------------------------------------------------------------------\");\n+\t       \tfr.close();\n+\t\t} catch (IOException e) {\n+\t\t\tTr.error(tc, e.getMessage());\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Updates the historical ACME file.\n+\t * @param certificate The current X509Certificate.\n+\t * @param directoryURI The current directoryURI from config.\n+\t * @param accountURI The current accountURI from config.\n+\t * @throws AcmeCaException\n+\t */\n+\tprotected void updateAcmeFile(X509Certificate certificate, String directoryURI, String accountURI, WsLocationAdmin wslocation) throws AcmeCaException {\n+\t\tupdateAcmeFile(null, certificate, directoryURI, accountURI, wslocation);\n+\t}\n+\n+\t/**\n+\t * Update the acme file with the original or updated certificate\n+\t * and directoryURI information. Max file size is 10 lines.\n+\t * @param acmeCertificate The certificate to use if the default X509 certificate is null.\n+\t * @param certificate The current X509Certificate.\n+\t * @param directoryURI The current directoryURI from config.\n+\t * @param accountURI The current accountURI from config.\n+\t * @throws AcmeCaException\n+\t */\n+\tprotected void updateAcmeFile(AcmeCertificate acmeCertificate, X509Certificate certificate, String directoryURI, String accountURI, WsLocationAdmin wslocation) throws AcmeCaException {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tif (!file.exists()) {\n+\t\t\tcreateAcmeFile(wslocation);\n+\t\t}\n+\t\t//If the file still doesn't exist, return\n+\t\tif (!file.exists()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzAyNjkyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeHistoricalFileHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo0NToyMlrOGXx8wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo0NToyMlrOGXx8wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU4ODgwMQ==", "bodyText": "Make static class field.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427588801", "createdAt": "2020-05-19T20:45:22Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeHistoricalFileHelper.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package com.ibm.ws.security.acme.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.security.cert.X509Certificate;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.security.acme.AcmeCaException;\n+import com.ibm.ws.security.acme.AcmeCertificate;\n+import com.ibm.wsspi.kernel.service.location.WsLocationAdmin;\n+\n+public class AcmeHistoricalFileHelper {\n+\tprivate static final TraceComponent tc = Tr.register(AcmeHistoricalFileHelper.class);\n+\tprivate String spaceDelim = \"                  \";\n+\t\n+\t/**\n+\t * This method determines if the directoryURI has changed by checking\n+\t * the acme file.\n+\t * @return True if the directoryURI has changed\n+\t * @throws AcmeCaException\n+\t */\n+\tprotected boolean directoryURIChanged(String currentDirectoryURI, WsLocationAdmin wslocation) throws AcmeCaException {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tif (!file.exists()) {\n+\t\t\tcreateAcmeFile(wslocation);\n+\t\t\treturn true;\n+\t\t}\n+\t\tString fileDirURI = currentDirectoryURI;\n+\t\ttry {\n+\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t    String line, lastLine = null; \n+\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\tlastLine=line;\n+\t\t\t}\n+\t\t\tbr.close();\n+\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) fileDirURI = tok.nextToken();\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tTr.error(tc, e.getMessage());\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (currentDirectoryURI.equals(fileDirURI)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn true;\n+\t}\n+\t\n+\t/**\n+\t * This method will create the initial acme file in the servers/workarea\n+\t * directory. It holds certificate and directoryURI information, eg.\n+\t *  Date                Serial                   DirectoryURI                    Account URI\n+     *  --------------------------------------------------------------------------------------------\n+     *  20200509231118      6542743894787011570      https://localhost:33827/dir     https://localhost:33827/my-account/1\n+\t */\n+\tprivate void createAcmeFile(WsLocationAdmin wslocation) {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tif (file.exists()) return;\n+\t\tfile.getParentFile().mkdirs();\n+\t\ttry {\n+\t\t\tfile.createNewFile();\n+\t\t\tFileWriter fr;\n+\t\t\tfr = new FileWriter(file, false);\n+\t\t\tfr.write(\"Date\" + spaceDelim + \"Serial\" + spaceDelim + \"DirectoryURI\" + spaceDelim + \"Account URI\" + \"\\n\");\n+\t\t\tfr.write(\"-------------------------------------------------------------------------------------------------------------------------\");\n+\t       \tfr.close();\n+\t\t} catch (IOException e) {\n+\t\t\tTr.error(tc, e.getMessage());\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Updates the historical ACME file.\n+\t * @param certificate The current X509Certificate.\n+\t * @param directoryURI The current directoryURI from config.\n+\t * @param accountURI The current accountURI from config.\n+\t * @throws AcmeCaException\n+\t */\n+\tprotected void updateAcmeFile(X509Certificate certificate, String directoryURI, String accountURI, WsLocationAdmin wslocation) throws AcmeCaException {\n+\t\tupdateAcmeFile(null, certificate, directoryURI, accountURI, wslocation);\n+\t}\n+\n+\t/**\n+\t * Update the acme file with the original or updated certificate\n+\t * and directoryURI information. Max file size is 10 lines.\n+\t * @param acmeCertificate The certificate to use if the default X509 certificate is null.\n+\t * @param certificate The current X509Certificate.\n+\t * @param directoryURI The current directoryURI from config.\n+\t * @param accountURI The current accountURI from config.\n+\t * @throws AcmeCaException\n+\t */\n+\tprotected void updateAcmeFile(AcmeCertificate acmeCertificate, X509Certificate certificate, String directoryURI, String accountURI, WsLocationAdmin wslocation) throws AcmeCaException {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tif (!file.exists()) {\n+\t\t\tcreateAcmeFile(wslocation);\n+\t\t}\n+\t\t//If the file still doesn't exist, return\n+\t\tif (!file.exists()) {\n+\t\t\treturn;\n+\t\t}\n+\t\tDateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"yyyyMMddHHmmss\");  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzAyODU5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeHistoricalFileHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo0NTo0NlrOGXx9wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo0NTo0NlrOGXx9wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU4OTA1Ng==", "bodyText": "Make max file size constant in ACMEConstants.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427589056", "createdAt": "2020-05-19T20:45:46Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeHistoricalFileHelper.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package com.ibm.ws.security.acme.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.security.cert.X509Certificate;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.security.acme.AcmeCaException;\n+import com.ibm.ws.security.acme.AcmeCertificate;\n+import com.ibm.wsspi.kernel.service.location.WsLocationAdmin;\n+\n+public class AcmeHistoricalFileHelper {\n+\tprivate static final TraceComponent tc = Tr.register(AcmeHistoricalFileHelper.class);\n+\tprivate String spaceDelim = \"                  \";\n+\t\n+\t/**\n+\t * This method determines if the directoryURI has changed by checking\n+\t * the acme file.\n+\t * @return True if the directoryURI has changed\n+\t * @throws AcmeCaException\n+\t */\n+\tprotected boolean directoryURIChanged(String currentDirectoryURI, WsLocationAdmin wslocation) throws AcmeCaException {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tif (!file.exists()) {\n+\t\t\tcreateAcmeFile(wslocation);\n+\t\t\treturn true;\n+\t\t}\n+\t\tString fileDirURI = currentDirectoryURI;\n+\t\ttry {\n+\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t    String line, lastLine = null; \n+\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\tlastLine=line;\n+\t\t\t}\n+\t\t\tbr.close();\n+\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) fileDirURI = tok.nextToken();\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tTr.error(tc, e.getMessage());\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (currentDirectoryURI.equals(fileDirURI)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn true;\n+\t}\n+\t\n+\t/**\n+\t * This method will create the initial acme file in the servers/workarea\n+\t * directory. It holds certificate and directoryURI information, eg.\n+\t *  Date                Serial                   DirectoryURI                    Account URI\n+     *  --------------------------------------------------------------------------------------------\n+     *  20200509231118      6542743894787011570      https://localhost:33827/dir     https://localhost:33827/my-account/1\n+\t */\n+\tprivate void createAcmeFile(WsLocationAdmin wslocation) {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tif (file.exists()) return;\n+\t\tfile.getParentFile().mkdirs();\n+\t\ttry {\n+\t\t\tfile.createNewFile();\n+\t\t\tFileWriter fr;\n+\t\t\tfr = new FileWriter(file, false);\n+\t\t\tfr.write(\"Date\" + spaceDelim + \"Serial\" + spaceDelim + \"DirectoryURI\" + spaceDelim + \"Account URI\" + \"\\n\");\n+\t\t\tfr.write(\"-------------------------------------------------------------------------------------------------------------------------\");\n+\t       \tfr.close();\n+\t\t} catch (IOException e) {\n+\t\t\tTr.error(tc, e.getMessage());\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Updates the historical ACME file.\n+\t * @param certificate The current X509Certificate.\n+\t * @param directoryURI The current directoryURI from config.\n+\t * @param accountURI The current accountURI from config.\n+\t * @throws AcmeCaException\n+\t */\n+\tprotected void updateAcmeFile(X509Certificate certificate, String directoryURI, String accountURI, WsLocationAdmin wslocation) throws AcmeCaException {\n+\t\tupdateAcmeFile(null, certificate, directoryURI, accountURI, wslocation);\n+\t}\n+\n+\t/**\n+\t * Update the acme file with the original or updated certificate\n+\t * and directoryURI information. Max file size is 10 lines.\n+\t * @param acmeCertificate The certificate to use if the default X509 certificate is null.\n+\t * @param certificate The current X509Certificate.\n+\t * @param directoryURI The current directoryURI from config.\n+\t * @param accountURI The current accountURI from config.\n+\t * @throws AcmeCaException\n+\t */\n+\tprotected void updateAcmeFile(AcmeCertificate acmeCertificate, X509Certificate certificate, String directoryURI, String accountURI, WsLocationAdmin wslocation) throws AcmeCaException {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tif (!file.exists()) {\n+\t\t\tcreateAcmeFile(wslocation);\n+\t\t}\n+\t\t//If the file still doesn't exist, return\n+\t\tif (!file.exists()) {\n+\t\t\treturn;\n+\t\t}\n+\t\tDateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"yyyyMMddHHmmss\");  \n+\t\tLocalDateTime now = LocalDateTime.now();  \n+\t\tString date = dtf.format(now);\n+\t\tString serial = null;\n+\t\tif (acmeCertificate == null) {\n+\t\t\tif (certificate != null) serial = certificate.getSerialNumber().toString(16);\n+\t\t} else {\n+\t\t\tserial = acmeCertificate.getCertificate().getSerialNumber().toString(16);\n+\t\t}\n+\n+\t\t//Enforce max file size\n+\t\tArrayList<String> lines = new ArrayList<String>();\n+\t\ttry {\n+\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t    String line; \n+\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\tlines.add(line);\n+\t\t\t}\n+\t\t\tbr.close();\n+\t\t} catch (Exception e) {\n+\t\t\tTr.error(tc, e.getMessage());\n+\t\t}\n+\t\t//remove the oldest entry if we are at max\n+\t\tif (lines.size() >= 12) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzAzMTE1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeHistoricalFileHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo0NjoyNFrOGXx_Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo0NjoyNFrOGXx_Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU4OTQ2Mw==", "bodyText": "Localized message.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427589463", "createdAt": "2020-05-19T20:46:24Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeHistoricalFileHelper.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package com.ibm.ws.security.acme.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.security.cert.X509Certificate;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.security.acme.AcmeCaException;\n+import com.ibm.ws.security.acme.AcmeCertificate;\n+import com.ibm.wsspi.kernel.service.location.WsLocationAdmin;\n+\n+public class AcmeHistoricalFileHelper {\n+\tprivate static final TraceComponent tc = Tr.register(AcmeHistoricalFileHelper.class);\n+\tprivate String spaceDelim = \"                  \";\n+\t\n+\t/**\n+\t * This method determines if the directoryURI has changed by checking\n+\t * the acme file.\n+\t * @return True if the directoryURI has changed\n+\t * @throws AcmeCaException\n+\t */\n+\tprotected boolean directoryURIChanged(String currentDirectoryURI, WsLocationAdmin wslocation) throws AcmeCaException {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tif (!file.exists()) {\n+\t\t\tcreateAcmeFile(wslocation);\n+\t\t\treturn true;\n+\t\t}\n+\t\tString fileDirURI = currentDirectoryURI;\n+\t\ttry {\n+\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t    String line, lastLine = null; \n+\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\tlastLine=line;\n+\t\t\t}\n+\t\t\tbr.close();\n+\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) fileDirURI = tok.nextToken();\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tTr.error(tc, e.getMessage());\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (currentDirectoryURI.equals(fileDirURI)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn true;\n+\t}\n+\t\n+\t/**\n+\t * This method will create the initial acme file in the servers/workarea\n+\t * directory. It holds certificate and directoryURI information, eg.\n+\t *  Date                Serial                   DirectoryURI                    Account URI\n+     *  --------------------------------------------------------------------------------------------\n+     *  20200509231118      6542743894787011570      https://localhost:33827/dir     https://localhost:33827/my-account/1\n+\t */\n+\tprivate void createAcmeFile(WsLocationAdmin wslocation) {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tif (file.exists()) return;\n+\t\tfile.getParentFile().mkdirs();\n+\t\ttry {\n+\t\t\tfile.createNewFile();\n+\t\t\tFileWriter fr;\n+\t\t\tfr = new FileWriter(file, false);\n+\t\t\tfr.write(\"Date\" + spaceDelim + \"Serial\" + spaceDelim + \"DirectoryURI\" + spaceDelim + \"Account URI\" + \"\\n\");\n+\t\t\tfr.write(\"-------------------------------------------------------------------------------------------------------------------------\");\n+\t       \tfr.close();\n+\t\t} catch (IOException e) {\n+\t\t\tTr.error(tc, e.getMessage());\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Updates the historical ACME file.\n+\t * @param certificate The current X509Certificate.\n+\t * @param directoryURI The current directoryURI from config.\n+\t * @param accountURI The current accountURI from config.\n+\t * @throws AcmeCaException\n+\t */\n+\tprotected void updateAcmeFile(X509Certificate certificate, String directoryURI, String accountURI, WsLocationAdmin wslocation) throws AcmeCaException {\n+\t\tupdateAcmeFile(null, certificate, directoryURI, accountURI, wslocation);\n+\t}\n+\n+\t/**\n+\t * Update the acme file with the original or updated certificate\n+\t * and directoryURI information. Max file size is 10 lines.\n+\t * @param acmeCertificate The certificate to use if the default X509 certificate is null.\n+\t * @param certificate The current X509Certificate.\n+\t * @param directoryURI The current directoryURI from config.\n+\t * @param accountURI The current accountURI from config.\n+\t * @throws AcmeCaException\n+\t */\n+\tprotected void updateAcmeFile(AcmeCertificate acmeCertificate, X509Certificate certificate, String directoryURI, String accountURI, WsLocationAdmin wslocation) throws AcmeCaException {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tif (!file.exists()) {\n+\t\t\tcreateAcmeFile(wslocation);\n+\t\t}\n+\t\t//If the file still doesn't exist, return\n+\t\tif (!file.exists()) {\n+\t\t\treturn;\n+\t\t}\n+\t\tDateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"yyyyMMddHHmmss\");  \n+\t\tLocalDateTime now = LocalDateTime.now();  \n+\t\tString date = dtf.format(now);\n+\t\tString serial = null;\n+\t\tif (acmeCertificate == null) {\n+\t\t\tif (certificate != null) serial = certificate.getSerialNumber().toString(16);\n+\t\t} else {\n+\t\t\tserial = acmeCertificate.getCertificate().getSerialNumber().toString(16);\n+\t\t}\n+\n+\t\t//Enforce max file size\n+\t\tArrayList<String> lines = new ArrayList<String>();\n+\t\ttry {\n+\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t    String line; \n+\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\tlines.add(line);\n+\t\t\t}\n+\t\t\tbr.close();\n+\t\t} catch (Exception e) {\n+\t\t\tTr.error(tc, e.getMessage());\n+\t\t}\n+\t\t//remove the oldest entry if we are at max\n+\t\tif (lines.size() >= 12) {\n+\t\t\tlines.remove(2);\n+\t\t}\n+       \tFileWriter fr;\n+\t\ttry {\n+\t\t\tfr = new FileWriter(file, false);\n+\t\t\tfor (String l: lines) {\n+\t\t\t\tfr.write(l);\n+\t\t\t\tfr.write(\"\\n\");\n+\t\t\t}\n+\t\t\t//write the new entry\n+\t\t   \tfr.write(date + spaceDelim + serial + spaceDelim + directoryURI + spaceDelim + accountURI);\n+\t\t   \tfr.close();\n+\t\t} catch (IOException e) {\n+\t\t\tTr.error(tc, e.getMessage()); ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzAzNTE0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeHistoricalFileHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo0Nzo0MVrOGXyBzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzoxNDoxNlrOGaoRuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5MDA5Mw==", "bodyText": "Does this really throw an AcmeCaException?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427590093", "createdAt": "2020-05-19T20:47:41Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeHistoricalFileHelper.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package com.ibm.ws.security.acme.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.security.cert.X509Certificate;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.security.acme.AcmeCaException;\n+import com.ibm.ws.security.acme.AcmeCertificate;\n+import com.ibm.wsspi.kernel.service.location.WsLocationAdmin;\n+\n+public class AcmeHistoricalFileHelper {\n+\tprivate static final TraceComponent tc = Tr.register(AcmeHistoricalFileHelper.class);\n+\tprivate String spaceDelim = \"                  \";\n+\t\n+\t/**\n+\t * This method determines if the directoryURI has changed by checking\n+\t * the acme file.\n+\t * @return True if the directoryURI has changed\n+\t * @throws AcmeCaException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU3NjA1OQ==", "bodyText": "nope", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r430576059", "createdAt": "2020-05-26T17:14:16Z", "author": {"login": "ryanesch"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeHistoricalFileHelper.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package com.ibm.ws.security.acme.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.security.cert.X509Certificate;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.security.acme.AcmeCaException;\n+import com.ibm.ws.security.acme.AcmeCertificate;\n+import com.ibm.wsspi.kernel.service.location.WsLocationAdmin;\n+\n+public class AcmeHistoricalFileHelper {\n+\tprivate static final TraceComponent tc = Tr.register(AcmeHistoricalFileHelper.class);\n+\tprivate String spaceDelim = \"                  \";\n+\t\n+\t/**\n+\t * This method determines if the directoryURI has changed by checking\n+\t * the acme file.\n+\t * @return True if the directoryURI has changed\n+\t * @throws AcmeCaException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5MDA5Mw=="}, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzAzNzEwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeHistoricalFileHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo0ODoxN1rOGXyC_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo0ODoxN1rOGXyC_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5MDM5OQ==", "bodyText": "Does this really throw an AcmeCaException?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427590399", "createdAt": "2020-05-19T20:48:17Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeHistoricalFileHelper.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package com.ibm.ws.security.acme.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.security.cert.X509Certificate;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.StringTokenizer;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.security.acme.AcmeCaException;\n+import com.ibm.ws.security.acme.AcmeCertificate;\n+import com.ibm.wsspi.kernel.service.location.WsLocationAdmin;\n+\n+public class AcmeHistoricalFileHelper {\n+\tprivate static final TraceComponent tc = Tr.register(AcmeHistoricalFileHelper.class);\n+\tprivate String spaceDelim = \"                  \";\n+\t\n+\t/**\n+\t * This method determines if the directoryURI has changed by checking\n+\t * the acme file.\n+\t * @return True if the directoryURI has changed\n+\t * @throws AcmeCaException\n+\t */\n+\tprotected boolean directoryURIChanged(String currentDirectoryURI, WsLocationAdmin wslocation) throws AcmeCaException {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tif (!file.exists()) {\n+\t\t\tcreateAcmeFile(wslocation);\n+\t\t\treturn true;\n+\t\t}\n+\t\tString fileDirURI = currentDirectoryURI;\n+\t\ttry {\n+\t\t    BufferedReader br = new BufferedReader(new FileReader(file));\n+\t\t    String line, lastLine = null; \n+\t\t\twhile ((line = br.readLine()) != null && !line.isEmpty()) {\n+\t\t\t\tlastLine=line;\n+\t\t\t}\n+\t\t\tbr.close();\n+\t\t\tif (lastLine != null && !lastLine.isEmpty()) {\n+\t\t\t\tStringTokenizer tok = new StringTokenizer(lastLine);\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) tok.nextToken();\n+\t\t\t\tif (tok.hasMoreTokens()) fileDirURI = tok.nextToken();\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tTr.error(tc, e.getMessage());\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (currentDirectoryURI.equals(fileDirURI)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn true;\n+\t}\n+\t\n+\t/**\n+\t * This method will create the initial acme file in the servers/workarea\n+\t * directory. It holds certificate and directoryURI information, eg.\n+\t *  Date                Serial                   DirectoryURI                    Account URI\n+     *  --------------------------------------------------------------------------------------------\n+     *  20200509231118      6542743894787011570      https://localhost:33827/dir     https://localhost:33827/my-account/1\n+\t */\n+\tprivate void createAcmeFile(WsLocationAdmin wslocation) {\n+\t\tFile file = wslocation.getServerWorkareaResource(\"acme/acme.txt\").asFile();\n+\t\tif (file.exists()) return;\n+\t\tfile.getParentFile().mkdirs();\n+\t\ttry {\n+\t\t\tfile.createNewFile();\n+\t\t\tFileWriter fr;\n+\t\t\tfr = new FileWriter(file, false);\n+\t\t\tfr.write(\"Date\" + spaceDelim + \"Serial\" + spaceDelim + \"DirectoryURI\" + spaceDelim + \"Account URI\" + \"\\n\");\n+\t\t\tfr.write(\"-------------------------------------------------------------------------------------------------------------------------\");\n+\t       \tfr.close();\n+\t\t} catch (IOException e) {\n+\t\t\tTr.error(tc, e.getMessage());\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Updates the historical ACME file.\n+\t * @param certificate The current X509Certificate.\n+\t * @param directoryURI The current directoryURI from config.\n+\t * @param accountURI The current accountURI from config.\n+\t * @throws AcmeCaException\n+\t */\n+\tprotected void updateAcmeFile(X509Certificate certificate, String directoryURI, String accountURI, WsLocationAdmin wslocation) throws AcmeCaException {\n+\t\tupdateAcmeFile(null, certificate, directoryURI, accountURI, wslocation);\n+\t}\n+\n+\t/**\n+\t * Update the acme file with the original or updated certificate\n+\t * and directoryURI information. Max file size is 10 lines.\n+\t * @param acmeCertificate The certificate to use if the default X509 certificate is null.\n+\t * @param certificate The current X509Certificate.\n+\t * @param directoryURI The current directoryURI from config.\n+\t * @param accountURI The current accountURI from config.\n+\t * @throws AcmeCaException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzA0MjI2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo0OTo1NFrOGXyGQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo0OTo1NFrOGXyGQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5MTIzNQ==", "bodyText": "Can we import the class so we don't have the full qualified name in the source?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r427591235", "createdAt": "2020-05-19T20:49:54Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java", "diffHunk": "@@ -81,7 +81,12 @@\n \n \t/** Configuration for the ACME client. */\n \tprivate static AcmeConfig acmeConfig;\n+\t\n+\tprivate AcmeHistoricalFileHelper acmeHistoricalFileHelper = new AcmeHistoricalFileHelper();\n \n+\t@Reference\n+\tprivate com.ibm.wsspi.kernel.service.location.WsLocationAdmin wslocation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6d0822d2ce7d4a56ec78b30c2aa7f2ac91b661"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDMyNjA2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/utils/AcmeFatUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjowNTo1OFrOGcjAgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjowNTo1OFrOGcjAgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4Njg4MQ==", "bodyText": "Javadoc", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r432586881", "createdAt": "2020-05-29T16:05:58Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/utils/AcmeFatUtils.java", "diffHunk": "@@ -650,4 +650,18 @@ public static void checkPortOpen(int port, long timeoutMs) {\n \n \t\tassertTrue(\"Expected port \" + port + \" to be open.\", open);\n \t}\n+\t\n+\t/**\n+\t * ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57946db72c50ad84eaaa86b52cba945cd1a22110"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDMzMDE0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSimpleTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjowNzowMlrOGcjC-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjoyMzoxOVrOGcjmTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4NzUxMg==", "bodyText": "Doesn't appear you use this.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.junit.Assume;", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r432587512", "createdAt": "2020-05-29T16:07:02Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSimpleTest.java", "diffHunk": "@@ -36,6 +36,7 @@\n import org.apache.http.impl.client.CloseableHttpClient;\n import org.junit.After;\n import org.junit.AfterClass;\n+import org.junit.Assume;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57946db72c50ad84eaaa86b52cba945cd1a22110"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5NjU1Ng==", "bodyText": "That is used for Assume.assumeTrue in the Windows check.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r432596556", "createdAt": "2020-05-29T16:23:19Z", "author": {"login": "ryanesch"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeSimpleTest.java", "diffHunk": "@@ -36,6 +36,7 @@\n import org.apache.http.impl.client.CloseableHttpClient;\n import org.junit.After;\n import org.junit.AfterClass;\n+import org.junit.Assume;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4NzUxMg=="}, "originalCommit": {"oid": "57946db72c50ad84eaaa86b52cba945cd1a22110"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODQ3MzU1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/utils/AcmeFatUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTo1NjoxOFrOGerNIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNTo0Njo0M1rOGe2o8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxODMzOA==", "bodyText": "I'm afraid that by defaulting this to false, everytime we start a server we are going to refresh the certificate. This may result in test passing not for the reason the test was written. I think this should default to \"true\" to disable it by default. And only the tests that are testing history should enable it. I know this is backwards from how we would run, but i think it fits best with our existing tests.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r434818338", "createdAt": "2020-06-03T19:56:18Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/utils/AcmeFatUtils.java", "diffHunk": "@@ -276,6 +276,30 @@ public static void configureAcmeCA(LibertyServer server, CAContainer caContainer\n \t */\n \tpublic static void configureAcmeCA(LibertyServer server, CAContainer caContainer,\n \t\t\tServerConfiguration originalConfig, boolean useAcmeURIs, boolean disableRenewWindow, String... domains) throws Exception {\n+\t\tconfigureAcmeCA(server, caContainer, originalConfig, useAcmeURIs, disableRenewWindow, false, domains);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1be4c658badd92eda8b4fc6a3684272bfd1597b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAwNTY4MA==", "bodyText": "As discussed, I switched the testing default to True.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r435005680", "createdAt": "2020-06-04T05:46:43Z", "author": {"login": "ryanesch"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/utils/AcmeFatUtils.java", "diffHunk": "@@ -276,6 +276,30 @@ public static void configureAcmeCA(LibertyServer server, CAContainer caContainer\n \t */\n \tpublic static void configureAcmeCA(LibertyServer server, CAContainer caContainer,\n \t\t\tServerConfiguration originalConfig, boolean useAcmeURIs, boolean disableRenewWindow, String... domains) throws Exception {\n+\t\tconfigureAcmeCA(server, caContainer, originalConfig, useAcmeURIs, disableRenewWindow, false, domains);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxODMzOA=="}, "originalCommit": {"oid": "a1be4c658badd92eda8b4fc6a3684272bfd1597b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTMxMjgyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme/resources/OSGI-INF/l10n/metatype.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjowNzowNVrOGezWDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNTozNToxOFrOGe2bzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1MTY5Mg==", "bodyText": "I don't think you changed this one, but I'm not sure I understand \"The minimum renew time is to 15 seconds.\" Does this mean \"The minimum renew time is 15 seconds.\"?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r434951692", "createdAt": "2020-06-04T02:07:05Z", "author": {"login": "Charlotte-Holt"}, "path": "dev/com.ibm.ws.security.acme/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -88,4 +88,7 @@ certCheckerErrorSchedule=Certificate checker error schedule\n certCheckerErrorSchedule.desc=Performs the same function as the certCheckerSchedule attribute, but on an alternate schedule. For example, the certCheckerErrorSchedule attribute can be set to a shorter interval than the certCheckerSchedule attribute, to increase the frequency of checks after a failed request. The interval from the certCheckerSchedule attribute is resumed after the certificate is renewed. \n \n disableMinRenewWindow=Disable minimum renew window\n-disableMinRenewWindow.desc=Enables immediate certificate renew requests by disabling the specified minimum amount of time between renew requests. The minimum renew time is to 15 seconds.\n\\ No newline at end of file\n+disableMinRenewWindow.desc=Enables immediate certificate renew requests by disabling the specified minimum amount of time between renew requests. The minimum renew time is to 15 seconds.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca68232b434f8dcdffb3617cc6e3285beb5c2566"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAwMjMxOQ==", "bodyText": "True, that appears to have an extra word!", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r435002319", "createdAt": "2020-06-04T05:35:18Z", "author": {"login": "ryanesch"}, "path": "dev/com.ibm.ws.security.acme/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -88,4 +88,7 @@ certCheckerErrorSchedule=Certificate checker error schedule\n certCheckerErrorSchedule.desc=Performs the same function as the certCheckerSchedule attribute, but on an alternate schedule. For example, the certCheckerErrorSchedule attribute can be set to a shorter interval than the certCheckerSchedule attribute, to increase the frequency of checks after a failed request. The interval from the certCheckerSchedule attribute is resumed after the certificate is renewed. \n \n disableMinRenewWindow=Disable minimum renew window\n-disableMinRenewWindow.desc=Enables immediate certificate renew requests by disabling the specified minimum amount of time between renew requests. The minimum renew time is to 15 seconds.\n\\ No newline at end of file\n+disableMinRenewWindow.desc=Enables immediate certificate renew requests by disabling the specified minimum amount of time between renew requests. The minimum renew time is to 15 seconds.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1MTY5Mg=="}, "originalCommit": {"oid": "ca68232b434f8dcdffb3617cc6e3285beb5c2566"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTMxNjk3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjowOTo1MVrOGezYlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjowOTo1MVrOGezYlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1MjM0MA==", "bodyText": "Should\n\nThis can occur if the directoryURI has changed, and if so, it can be ignored.\n\nbe\n\nThis can occur if the directory URI has changed, and if so, it can be ignored.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r434952340", "createdAt": "2020-06-04T02:09:51Z", "author": {"login": "Charlotte-Holt"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -131,7 +131,7 @@ CWPKI2023E=CWPKI2023E: The ACME service could not write to the account key file\n CWPKI2023E.explanation=The account keys could not be stored in the account key file. This can occur if the file permissions are incorrect or the file does not exist.\n CWPKI2023E.useraction=Review the error message for details on the failure. Verify the file location is correct and the server has write file permissions.\n \n-CWPKI2024E=CWPKI2024E: The ACME service failed to revoke the requested certificate for the ACME certificate authority at the {0} URI. The certificate is serial number {1}. The error is ''{2}''.\n+CWPKI2024E=CWPKI2024E: The ACME service failed to revoke the requested certificate for the ACME certificate authority at the {0} URI. The certificate is serial number {1}. The error is ''{2}''. This can occur if the directoryURI has changed, and if so, it can be ignored.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca68232b434f8dcdffb3617cc6e3285beb5c2566"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTMxOTgwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjoxMTozOFrOGezaUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjoxMTozOFrOGezaUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1Mjc4NA==", "bodyText": "For consistency with the other message I read in this file, I'd remove the colon from \"The error is: ''{1}''.\"", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r434952784", "createdAt": "2020-06-04T02:11:38Z", "author": {"login": "Charlotte-Holt"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -322,3 +322,7 @@ CWPKI2070W.useraction=To avoid this warning message, set the certCheckerSchedule\n CWPKI2071W=CWPKI2071W: The certCheckerErrorSchedule property was set to {0}, which is shorter than the minimum schedule time. The certCheckerErrorSchedule property is reset to {1}.\n CWPKI2071W.explanation=The value for the certCheckerErrorSchedule property was below the minimum duration to check for expiring or revoked certificates and is reset to the minimum schedule time.\n CWPKI2071W.useraction=To avoid this warning message, set the certCheckerErrorSchedule property in the server configuration to a duration that is longer than the minimum schedule time. To use the default setting, remove the certCheckerErrorSchedule property from the server configuration.\n+\n+CWPKI2072W=CWPKI2072W: The ACME service could not read or write the historical ACME file at {0}. The error is: ''{1}''.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca68232b434f8dcdffb3617cc6e3285beb5c2566"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTMyNDYyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjoxNDowNlrOGezdFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjoxNDowNlrOGezdFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1MzQ5NQ==", "bodyText": "Update\n\nEnsure the historical ACME directory has read and write permissions.\n\nto\n\nEnsure that the historical ACME directory has read and write permissions.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12119#discussion_r434953495", "createdAt": "2020-06-04T02:14:06Z", "author": {"login": "Charlotte-Holt"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -322,3 +322,7 @@ CWPKI2070W.useraction=To avoid this warning message, set the certCheckerSchedule\n CWPKI2071W=CWPKI2071W: The certCheckerErrorSchedule property was set to {0}, which is shorter than the minimum schedule time. The certCheckerErrorSchedule property is reset to {1}.\n CWPKI2071W.explanation=The value for the certCheckerErrorSchedule property was below the minimum duration to check for expiring or revoked certificates and is reset to the minimum schedule time.\n CWPKI2071W.useraction=To avoid this warning message, set the certCheckerErrorSchedule property in the server configuration to a duration that is longer than the minimum schedule time. To use the default setting, remove the certCheckerErrorSchedule property from the server configuration.\n+\n+CWPKI2072W=CWPKI2072W: The ACME service could not read or write the historical ACME file at {0}. The error is: ''{1}''.\n+CWPKI2072W.explanation=The ACME service was unable to access the historical ACME file.\n+CWPKI2072W.useraction=Ensure the historical ACME directory has read and write permissions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca68232b434f8dcdffb3617cc6e3285beb5c2566"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1750, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}