{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNTczMTgw", "number": 10801, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMToxMDo0NlrODeJvAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMToxNjo1NlrODeJ0-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTQzMzYyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.concurrent.persistent/src/com/ibm/ws/concurrent/persistent/db/DatabaseTaskStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMToxMDo0NlrOFnKZTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMToxMDo0NlrOFnKZTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYwOTEwMw==", "bodyText": "Just to be sure you are aware, with this change it is still possible that this could be a time in the past.\nFor example, 25800 / 1000 * 1000 + 600 evaluates to 25600.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10801#discussion_r376609103", "createdAt": "2020-02-07T21:10:46Z", "author": {"login": "njr-11"}, "path": "dev/com.ibm.ws.concurrent.persistent/src/com/ibm/ws/concurrent/persistent/db/DatabaseTaskStore.java", "diffHunk": "@@ -593,7 +593,7 @@ public long findOrCreatePollPartition() throws Exception {\n                 // Initialize to already-expired and eligible for any server to claim.\n                 // Use a fractional second to help avoid accessing the database around the same time as scheduled tasks\n                 // which might be scheduled to run on the hour or minute.\n-                partition.EXPIRY = (System.currentTimeMillis() / 1000 - 1) * 1000 + 600;\n+                partition.EXPIRY = System.currentTimeMillis() / 1000 * 1000 + 600;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2773d3e4785bd97d6883622fd1e3f5f8259e1db6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTQ0ODg5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.concurrent.persistent/src/com/ibm/ws/concurrent/persistent/internal/PersistentExecutorImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMToxNjo1NlrOFnKizw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMToxNjo1NlrOFnKizw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxMTUzNQ==", "bodyText": "If the current poll itself is slightly late, this could accidentally push us past the threshold and trigger the logic after just one missed poll.  We could guard against this by adding half a poll interval:\nif (now - lastUpdated > missedPollsThreshold * config.pollInterval + config.pollInterval / 2) {", "url": "https://github.com/OpenLiberty/open-liberty/pull/10801#discussion_r376611535", "createdAt": "2020-02-07T21:16:56Z", "author": {"login": "njr-11"}, "path": "dev/com.ibm.ws.concurrent.persistent/src/com/ibm/ws/concurrent/persistent/internal/PersistentExecutorImpl.java", "diffHunk": "@@ -2293,12 +2295,29 @@ private long coordinateNextPoll(Config config) {\n \n                 tranMgr.begin();\n                 try {\n-                    // TODO implement this method. For now, we invoke some basic db operations to demonstrate that what we have so far is working\n                     Object[] expiryAndLastUpdated = taskStore.findPollInfoForUpdate(pollPartitionId);\n                     long expiry = (Long) expiryAndLastUpdated[0];\n                     long lastUpdated = (Long) expiryAndLastUpdated[1];\n-                    taskStore.updatePollInfo(pollPartitionId, System.currentTimeMillis() + config.pollInterval);\n-                    delay = config.pollInterval;\n+                    long now = System.currentTimeMillis();\n+                    int slot = 0;\n+                    final int missedPollsThreshold = 2; // Could be make configurable in the future.\n+\n+                    if (now - lastUpdated > missedPollsThreshold * config.pollInterval) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2773d3e4785bd97d6883622fd1e3f5f8259e1db6"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2103, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}