{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMTAwMzU0", "number": 11164, "title": "Address performance regression in mpConfig-1.4", "bodyText": "Previous iterations of config were designed around the idea that the complete set of properties from every source would be cached.\nIn removing that assumption, some of the existing built-in config sources need to be redesigned to avoid fetching and processing all properties on every call.\nFor #11079", "createdAt": "2020-03-03T18:12:54Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/11164", "merged": true, "mergeCommit": {"oid": "369c571ab556ee81afaf91bbde2cd2ab8caded9a"}, "closed": true, "closedAt": "2020-03-06T11:40:57Z", "author": {"login": "Azquelt"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKVh6DAH2gAyMzgzMTAwMzU0OjUzMjk3OGQzNWRiMzQ0NGJlYTc1ZTNkNjQ2ZDk2YTA5ZjU5NjEyMDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKpahUAFqTM2OTQ3NTMyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "532978d35db3444bea75e3d646d96a09f5961203", "author": {"user": {"login": "Azquelt", "name": "Andrew Rouse"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/532978d35db3444bea75e3d646d96a09f5961203", "committedDate": "2020-03-04T11:50:22Z", "message": "Performance improvements for MP Config 1.4\n\n* Make internal config sources more efficient by avoiding processing all\n  entries when ConfigSource.getValue() is called\n* Avoid calling ConfigSource.getPropertyNames() within a call to\n  Config.getValue() where possible\n  * Introduce ExtendedConfigSource which provides a method which\n    differentiates between the config source containing no value for a\n    given key and the config source containing a null value for a given key\n* Use SecureAction instead of doPriviliged to avoid paying the\n  performance penalty when there's no security manager"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "448ae8d6999cca7e36ce0d2a6873fcf986a3b8fd", "author": {"user": {"login": "Azquelt", "name": "Andrew Rouse"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/448ae8d6999cca7e36ce0d2a6873fcf986a3b8fd", "committedDate": "2020-03-04T11:49:19Z", "message": "Doc changes"}, "afterCommit": {"oid": "532978d35db3444bea75e3d646d96a09f5961203", "author": {"user": {"login": "Azquelt", "name": "Andrew Rouse"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/532978d35db3444bea75e3d646d96a09f5961203", "committedDate": "2020-03-04T11:50:22Z", "message": "Performance improvements for MP Config 1.4\n\n* Make internal config sources more efficient by avoiding processing all\n  entries when ConfigSource.getValue() is called\n* Avoid calling ConfigSource.getPropertyNames() within a call to\n  Config.getValue() where possible\n  * Introduce ExtendedConfigSource which provides a method which\n    differentiates between the config source containing no value for a\n    given key and the config source containing a null value for a given key\n* Use SecureAction instead of doPriviliged to avoid paying the\n  performance penalty when there's no security manager"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NDc1MzI5", "url": "https://github.com/OpenLiberty/open-liberty/pull/11164#pullrequestreview-369475329", "createdAt": "2020-03-05T11:00:07Z", "commit": {"oid": "532978d35db3444bea75e3d646d96a09f5961203"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTowMDowN1rOFyPKlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTowMDowN1rOFyPKlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyMTU4OQ==", "bodyText": "Can you lift this out as a system property to configure it? It can be done as a follow up PR.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11164#discussion_r388221589", "createdAt": "2020-03-05T11:00:07Z", "author": {"login": "Emily-Jiang"}, "path": "dev/com.ibm.ws.microprofile.config.1.4/src/com/ibm/ws/microprofile/config14/sources/AppPropertyConfig14Source.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.microprofile.config14.sources;\n+\n+import java.time.Duration;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.ibm.ws.microprofile.config13.sources.AppPropertyConfigSource;\n+\n+/**\n+ *\n+ */\n+public class AppPropertyConfig14Source extends AppPropertyConfigSource {\n+\n+    private final AtomicReference<Map<String, String>> cachedValues = new AtomicReference<>();\n+    private final AtomicLong lastUpdated = new AtomicLong();\n+    private static final long CACHE_TIME = Duration.of(500, ChronoUnit.MILLIS).toNanos();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "532978d35db3444bea75e3d646d96a09f5961203"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3014, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}