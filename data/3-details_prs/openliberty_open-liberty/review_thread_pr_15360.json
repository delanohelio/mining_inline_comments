{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0MzA1NjA4", "number": 15360, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODowODo0MlrOFIqp8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQyMTo1NToxN1rOFJENvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjMxNzk1OnYy", "diffSide": "RIGHT", "path": "dev/io.openliberty.xmlws.3.0.internal.tools/src/com/ibm/ws/jaxws/tools/WsGen.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODowODo0MlrOIKtiFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODowODo0MlrOIKtiFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEwMjY3OA==", "bodyText": "I would like to explore the possibility of using Constants in JaxWsToolsConstants both the com.ibm.ws.jaxws.tools and this bundle to allow us not to duplicate this code, and override the values in JaxWsToolsConstants in this bundle. Since the only differences are updating the properties and adding a new SAAJ property, this should be possible, but I ran into some difficulties in my first attempt and so for the sake of time I duplicated only the code that needed changes.", "url": "https://github.com/OpenLiberty/open-liberty/pull/15360#discussion_r548102678", "createdAt": "2020-12-23T18:08:42Z", "author": {"login": "neuwerk"}, "path": "dev/io.openliberty.xmlws.3.0.internal.tools/src/com/ibm/ws/jaxws/tools/WsGen.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*******************************************************************************", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10e739ac51e71ece24d1f6e46aab36c4a0205995"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjMyOTYxOnYy", "diffSide": "RIGHT", "path": "dev/wlp-jakartaee-transform/rules/jakarta-direct.properties", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODoxMDo1N1rOIKtp_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQyMTozNToxOFrOILVJ6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEwNDcwMw==", "bodyText": "These were properties and a namespace that I found through searching the CXF code that we use with xmlws-3.0. They have no relevance to the tooling changes per say, but will be needed anyway.", "url": "https://github.com/OpenLiberty/open-liberty/pull/15360#discussion_r548104703", "createdAt": "2020-12-23T18:10:57Z", "author": {"login": "neuwerk"}, "path": "dev/wlp-jakartaee-transform/rules/jakarta-direct.properties", "diffHunk": "@@ -96,16 +96,47 @@ com.sun.xml.bind.defaultNamespaceRemap=org.glassfish.jaxb.defaultNamespaceRemap\n com.sun.xml.internal.bind.defaultNamespaceRemap=org.glassfish.jaxb.defaultNamespaceRemap\n \n http\\://java.sun.com/xml/ns/jaxb=https://jakarta.ee/xml/ns/jaxb\n+http\\://java.sun.com/xml/ns/jaxws=https://jakarta.ee/xml/ns/jaxws", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10e739ac51e71ece24d1f6e46aab36c4a0205995"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2NDkwMA==", "bodyText": "You cannot do this one.  I had done it originally, but I removed it because it will cause us not to be able to read older xml files for all of the code.  It should not be needed to have it.  If you think it is still needed please let me know where.", "url": "https://github.com/OpenLiberty/open-liberty/pull/15360#discussion_r548364900", "createdAt": "2020-12-24T03:22:20Z", "author": {"login": "jhanders34"}, "path": "dev/wlp-jakartaee-transform/rules/jakarta-direct.properties", "diffHunk": "@@ -96,16 +96,47 @@ com.sun.xml.bind.defaultNamespaceRemap=org.glassfish.jaxb.defaultNamespaceRemap\n com.sun.xml.internal.bind.defaultNamespaceRemap=org.glassfish.jaxb.defaultNamespaceRemap\n \n http\\://java.sun.com/xml/ns/jaxb=https://jakarta.ee/xml/ns/jaxb\n+http\\://java.sun.com/xml/ns/jaxws=https://jakarta.ee/xml/ns/jaxws", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEwNDcwMw=="}, "originalCommit": {"oid": "10e739ac51e71ece24d1f6e46aab36c4a0205995"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc1MTg1MA==", "bodyText": "excellent", "url": "https://github.com/OpenLiberty/open-liberty/pull/15360#discussion_r548751850", "createdAt": "2020-12-24T21:35:18Z", "author": {"login": "jhanders34"}, "path": "dev/wlp-jakartaee-transform/rules/jakarta-direct.properties", "diffHunk": "@@ -96,16 +96,47 @@ com.sun.xml.bind.defaultNamespaceRemap=org.glassfish.jaxb.defaultNamespaceRemap\n com.sun.xml.internal.bind.defaultNamespaceRemap=org.glassfish.jaxb.defaultNamespaceRemap\n \n http\\://java.sun.com/xml/ns/jaxb=https://jakarta.ee/xml/ns/jaxb\n+http\\://java.sun.com/xml/ns/jaxws=https://jakarta.ee/xml/ns/jaxws", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEwNDcwMw=="}, "originalCommit": {"oid": "10e739ac51e71ece24d1f6e46aab36c4a0205995"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Nzk2MTM1OnYy", "diffSide": "RIGHT", "path": "dev/io.openliberty.xmlws.3.0.internal.tools/src/com/sun/tools/ws/wscompile/WsimportTool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMzoyNzowOVrOIK9mTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMzoyNzowOVrOIK9mTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2NTkwMw==", "bodyText": "Did you pull this source from the ws tools code from the 3.0, or is this a modified version of the 2.2 version?  If the latter, maybe we should start with the 3.0 one and then make the modification in the 2.2 one so that we have the latest 3.0 code as the starting point.", "url": "https://github.com/OpenLiberty/open-liberty/pull/15360#discussion_r548365903", "createdAt": "2020-12-24T03:27:09Z", "author": {"login": "jhanders34"}, "path": "dev/io.openliberty.xmlws.3.0.internal.tools/src/com/sun/tools/ws/wscompile/WsimportTool.java", "diffHunk": "@@ -0,0 +1,627 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 1997-2013 Oracle and/or its affiliates. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146b36502e0b750eca0b1020f3e3d81e8d84c5c0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Nzk2MzU2OnYy", "diffSide": "RIGHT", "path": "dev/io.openliberty.xmlws.3.0.internal.tools/src/com/ibm/ws/jaxws/tools/WsImport.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMzoyODoyOVrOIK9nbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMzoyODoyOVrOIK9nbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2NjE5MQ==", "bodyText": "You should consider io.openliberty package instead of com.ibm.ws. since this is a new component.  This applies to all classes in this project.", "url": "https://github.com/OpenLiberty/open-liberty/pull/15360#discussion_r548366191", "createdAt": "2020-12-24T03:28:29Z", "author": {"login": "jhanders34"}, "path": "dev/io.openliberty.xmlws.3.0.internal.tools/src/com/ibm/ws/jaxws/tools/WsImport.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxws.tools;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146b36502e0b750eca0b1020f3e3d81e8d84c5c0"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Nzk2NjA0OnYy", "diffSide": "RIGHT", "path": "dev/io.openliberty.xmlws.3.0.internal.tools/src/com/ibm/ws/jaxws/tools/WsGen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMzozMDozMVrOIK9oyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMzozMDozMVrOIK9oyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2NjUzOA==", "bodyText": "For xmlWS 3.0 none of the APIs will be part of the JDK so this if statement doesn't make sense.", "url": "https://github.com/OpenLiberty/open-liberty/pull/15360#discussion_r548366538", "createdAt": "2020-12-24T03:30:31Z", "author": {"login": "jhanders34"}, "path": "dev/io.openliberty.xmlws.3.0.internal.tools/src/com/ibm/ws/jaxws/tools/WsGen.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxws.tools;\n+\n+import java.io.File;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.util.Arrays;\n+\n+import com.sun.tools.ws.wscompile.WsgenTool;\n+\n+/**\n+ *\n+ */\n+public class WsGen {\n+\n+    /**\n+     * @param args\n+     */\n+    public static void main(String[] args) {\n+\n+        //Pass in the JWS and JAX-B APIs as a -classpath arg when Java 9 or above.\n+        //Otherwise the javac process started by the tooling doesn't contain these APIs.\n+        if (WsToolsUtils.getMajorJavaVersion() > 8) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146b36502e0b750eca0b1020f3e3d81e8d84c5c0"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Nzk2NjY0OnYy", "diffSide": "RIGHT", "path": "dev/io.openliberty.xmlws.3.0.internal.tools/src/com/ibm/ws/jaxws/tools/WsImport.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMzozMToxMFrOIK9pKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMzozMToxMFrOIK9pKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2NjYzNQ==", "bodyText": "For xmlWS 3.0 none of the APIs will be part of the JDK so this if statement doesn't make sense.", "url": "https://github.com/OpenLiberty/open-liberty/pull/15360#discussion_r548366635", "createdAt": "2020-12-24T03:31:10Z", "author": {"login": "jhanders34"}, "path": "dev/io.openliberty.xmlws.3.0.internal.tools/src/com/ibm/ws/jaxws/tools/WsImport.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.jaxws.tools;\n+\n+import java.io.File;\n+import java.io.PrintStream;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.util.Arrays;\n+\n+import com.ibm.ws.jaxws.tools.internal.JaxWsToolsConstants;\n+import com.ibm.ws.jaxws.tools.internal.JaxWsToolsUtil;\n+import com.sun.tools.ws.wscompile.WsimportTool;\n+\n+/**\n+ * IBM Wrapper for wsimport tool.\n+ */\n+public class WsImport {\n+    private static final PrintStream err = System.err;\n+\n+    public static void main(String[] args) {\n+        if (WsToolsUtils.isTargetRequired(args)) {\n+            String errMsg = JaxWsToolsUtil.formatMessage(JaxWsToolsConstants.ERROR_PARAMETER_TARGET_MISSED_KEY);\n+            err.println(errMsg);\n+            System.exit(1);\n+        }\n+        AccessController.doPrivileged(new PrivilegedAction<Object>() {\n+            @Override\n+            public Object run() {\n+                System.setProperty(\"jakarta.xml.accessExternalSchema\", \"all\");\n+                return null;\n+            }\n+        });\n+        //Pass in the JWS and JAX-B APIs as a -classpath arg when Java 9 or above.\n+        //Otherwise the javac process started by the tooling doesn't contain these APIs.\n+        if (WsToolsUtils.getMajorJavaVersion() > 8) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146b36502e0b750eca0b1020f3e3d81e8d84c5c0"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Nzk2ODc3OnYy", "diffSide": "RIGHT", "path": "dev/io.openliberty.xmlws.3.0.internal.tools/resources/com/ibm/ws/jaxws/tools/internal/resources/JaxWsToolsMessages.nlsprops", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMzozMzowMFrOIK9qRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzozODoxMlrOILBmiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2NjkxOQ==", "bodyText": "Similar to the classes, you should consider changing the package of the nls files as well.  Additionally the CMVCPATHNAME is clearly wrong.  Additionally the JAX-WS references probably should be changed to XML WS.", "url": "https://github.com/OpenLiberty/open-liberty/pull/15360#discussion_r548366919", "createdAt": "2020-12-24T03:33:00Z", "author": {"login": "jhanders34"}, "path": "dev/io.openliberty.xmlws.3.0.internal.tools/resources/com/ibm/ws/jaxws/tools/internal/resources/JaxWsToolsMessages.nlsprops", "diffHunk": "@@ -0,0 +1,26 @@\n+###############################################################################\n+# Copyright (c) 2020 IBM Corporation and others.\n+# All rights reserved. This program and the accompanying materials\n+# are made available under the terms of the Eclipse Public License v1.0\n+# which accompanies this distribution, and is available at\n+# http://www.eclipse.org/legal/epl-v10.html\n+#\n+# Contributors:\n+#     IBM Corporation - initial API and implementation\n+###############################################################################\n+\n+# NLS_MESSAGEFORMAT_ALL\n+#\n+#CMVCPATHNAME com.ibm.ws.jaxws.ejb/resources/com/ibm/ws/jaxws/tools/internal/resources/JaxWsToolsMessages.nlsprops", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146b36502e0b750eca0b1020f3e3d81e8d84c5c0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzMDk2NQ==", "bodyText": "I've refactored the target option requirement out of the code, and deleted these because their only purpose seemed to be forcing the target option to be specified, which while the target option seems is still supported doesn't result in a behavior change as this tooling only supports 3.0.", "url": "https://github.com/OpenLiberty/open-liberty/pull/15360#discussion_r548430965", "createdAt": "2020-12-24T07:36:22Z", "author": {"login": "neuwerk"}, "path": "dev/io.openliberty.xmlws.3.0.internal.tools/resources/com/ibm/ws/jaxws/tools/internal/resources/JaxWsToolsMessages.nlsprops", "diffHunk": "@@ -0,0 +1,26 @@\n+###############################################################################\n+# Copyright (c) 2020 IBM Corporation and others.\n+# All rights reserved. This program and the accompanying materials\n+# are made available under the terms of the Eclipse Public License v1.0\n+# which accompanies this distribution, and is available at\n+# http://www.eclipse.org/legal/epl-v10.html\n+#\n+# Contributors:\n+#     IBM Corporation - initial API and implementation\n+###############################################################################\n+\n+# NLS_MESSAGEFORMAT_ALL\n+#\n+#CMVCPATHNAME com.ibm.ws.jaxws.ejb/resources/com/ibm/ws/jaxws/tools/internal/resources/JaxWsToolsMessages.nlsprops", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2NjkxOQ=="}, "originalCommit": {"oid": "146b36502e0b750eca0b1020f3e3d81e8d84c5c0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQzMTQ5Ng==", "bodyText": "To me more clear, I don't see a reason to force a requirement to specify a target value for specs that no longer matter prior to 3.0.", "url": "https://github.com/OpenLiberty/open-liberty/pull/15360#discussion_r548431496", "createdAt": "2020-12-24T07:38:12Z", "author": {"login": "neuwerk"}, "path": "dev/io.openliberty.xmlws.3.0.internal.tools/resources/com/ibm/ws/jaxws/tools/internal/resources/JaxWsToolsMessages.nlsprops", "diffHunk": "@@ -0,0 +1,26 @@\n+###############################################################################\n+# Copyright (c) 2020 IBM Corporation and others.\n+# All rights reserved. This program and the accompanying materials\n+# are made available under the terms of the Eclipse Public License v1.0\n+# which accompanies this distribution, and is available at\n+# http://www.eclipse.org/legal/epl-v10.html\n+#\n+# Contributors:\n+#     IBM Corporation - initial API and implementation\n+###############################################################################\n+\n+# NLS_MESSAGEFORMAT_ALL\n+#\n+#CMVCPATHNAME com.ibm.ws.jaxws.ejb/resources/com/ibm/ws/jaxws/tools/internal/resources/JaxWsToolsMessages.nlsprops", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2NjkxOQ=="}, "originalCommit": {"oid": "146b36502e0b750eca0b1020f3e3d81e8d84c5c0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Nzk2OTQwOnYy", "diffSide": "RIGHT", "path": "dev/io.openliberty.xmlws.3.0.internal.tools/resources/com/ibm/ws/jaxws/tools/internal/resources/JaxWsToolsMessages.nlsprops", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMzozMzoyNFrOIK9qmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMzozMzoyNFrOIK9qmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2NzAwMw==", "bodyText": "I assume this message is wrong now as well.", "url": "https://github.com/OpenLiberty/open-liberty/pull/15360#discussion_r548367003", "createdAt": "2020-12-24T03:33:24Z", "author": {"login": "jhanders34"}, "path": "dev/io.openliberty.xmlws.3.0.internal.tools/resources/com/ibm/ws/jaxws/tools/internal/resources/JaxWsToolsMessages.nlsprops", "diffHunk": "@@ -0,0 +1,26 @@\n+###############################################################################\n+# Copyright (c) 2020 IBM Corporation and others.\n+# All rights reserved. This program and the accompanying materials\n+# are made available under the terms of the Eclipse Public License v1.0\n+# which accompanies this distribution, and is available at\n+# http://www.eclipse.org/legal/epl-v10.html\n+#\n+# Contributors:\n+#     IBM Corporation - initial API and implementation\n+###############################################################################\n+\n+# NLS_MESSAGEFORMAT_ALL\n+#\n+#CMVCPATHNAME com.ibm.ws.jaxws.ejb/resources/com/ibm/ws/jaxws/tools/internal/resources/JaxWsToolsMessages.nlsprops\n+#ISMESSAGEFILE TRUE\n+#COMPONENTPREFIX CWWKW\n+#COMPONENTNAMEFOR CWWKW WebSphere XML WS Tools Code\n+#RANGE 0800 - 0899\n+#\n+#NLS_MESSAGEFORMAT_VAR\n+#NLS_ENCODING=UNICODE\n+#\n+\n+error.parameter.target.missed=CWWKW0800E: The required parameter target was not specified.\n+error.parameter.target.missed.explanation=If the target parameter is specified, existing applications can be re-generated without changing their behavior when the JAX-WS specification level supported by the Liberty Profile is updated.\n+error.parameter.target.missed.useraction=Specify the JAX-WS specification level to which the generated code conforms. The valid value is 2.0, 2.1, or 2.2.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146b36502e0b750eca0b1020f3e3d81e8d84c5c0"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Nzk3MDU5OnYy", "diffSide": "RIGHT", "path": "dev/io.openliberty.xmlws.3.0.internal.tools/bnd.bnd", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMzozNDoyMFrOIK9rRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzoxMzo0NVrOILBMgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2NzE3Mg==", "bodyText": "Why is 2.2 in the build path?  I would expect it to not be needed.", "url": "https://github.com/OpenLiberty/open-liberty/pull/15360#discussion_r548367172", "createdAt": "2020-12-24T03:34:20Z", "author": {"login": "jhanders34"}, "path": "dev/io.openliberty.xmlws.3.0.internal.tools/bnd.bnd", "diffHunk": "@@ -0,0 +1,65 @@\n+*#*******************************************************************************\n+# Copyright (c) 2020 IBM Corporation and others.\n+# All rights reserved. This program and the accompanying materials\n+# are made available under the terms of the Eclipse Public License v1.0\n+# which accompanies this distribution, and is available at\n+# http://www.eclipse.org/legal/epl-v10.html\n+#\n+# Contributors:\n+#     IBM Corporation - initial API and implementation\n+#*******************************************************************************\n+-include= ~../cnf/resources/bnd/bundle.props\n+bVersion=1.0\n+\n+Bundle-Name: io.openliberty.xmlWS.3.0.internal.tools\n+Bundle-Description: IBM XML Web Services Tools, version ${bVersion}\n+Bundle-SymbolicName: io.openliberty.xmlWS.3.0.internal.tools\n+\n+Export-Package: com.sun.tools.ws.ant;version=\"3.0\", \\\n+ com.ibm.jtc.jax.tools.ws;version=1.0.0, \\\n+ com.ibm.jtc.jax.tools.ws.spi;version=1.0.0, \\\n+ com.ibm.jtc.jax.xml.ws.api;version=1.0.0, \\\n+ com.ibm.jtc.jax.xml.ws.policy;version=1.0.0, \\\n+ com.ibm.ws.jaxws.tools;version=\"3.0\", \\\n+ org.jvnet.staxex;version=\"1.7.7\", \\\n+ org.jvnet.staxex.util;version=\"1.7.7\"\n+\n+Import-Package: \\\n+ org.glassfish.jaxb.*;version=\"3.0\"\n+\n+Private-Package:\\\n+ com.ibm.ws.jaxws.tools.*, \\\n+ com.sun.tools.ws.wscompile;-split-package:=merge-last;version=\"3.0.0\"\n+\n+-includeresource:\\\n+ @${repo;com.sun.xml.ws:jaxws-rt;3.0.0;EXACT}!/!META-INF/maven/*, \\\n+ @${repo;com.sun.xml.ws:jaxws-tools;3.0.0;EXACT}!/!META-INF/maven/*, \\\n+ @${repo;com.sun.org.apache.xml.internal:resolver;20050927;EXACT}!/!META-INF/maven/*, \\\n+ @${repo;org.jvnet.staxex:stax-ex;1.7.7;EXACT}!/!META-INF/maven/*, \\\n+ @${repo;com.sun.xml.stream.buffer:streambuffer;1.5.3;EXACT}!/!META-INF/maven/*, \\\n+ com/sun/tools/ws/wscompile=${bin}/com/sun/tools/ws/wscompile\n+\n+instrument.disabled: true\n+\n+-buildpath: \\\n+    com.ibm.ws.jaxws.tools.2.2.10;version=latest,\\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146b36502e0b750eca0b1020f3e3d81e8d84c5c0"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyNDgzMw==", "bodyText": "I'm still bringing forward the utility classes (WsToolsUtils, JaxWsToolsConstants, JaxWsToolsUtil) rather than duplicating them. I can change that if need be though.", "url": "https://github.com/OpenLiberty/open-liberty/pull/15360#discussion_r548424833", "createdAt": "2020-12-24T07:13:45Z", "author": {"login": "neuwerk"}, "path": "dev/io.openliberty.xmlws.3.0.internal.tools/bnd.bnd", "diffHunk": "@@ -0,0 +1,65 @@\n+*#*******************************************************************************\n+# Copyright (c) 2020 IBM Corporation and others.\n+# All rights reserved. This program and the accompanying materials\n+# are made available under the terms of the Eclipse Public License v1.0\n+# which accompanies this distribution, and is available at\n+# http://www.eclipse.org/legal/epl-v10.html\n+#\n+# Contributors:\n+#     IBM Corporation - initial API and implementation\n+#*******************************************************************************\n+-include= ~../cnf/resources/bnd/bundle.props\n+bVersion=1.0\n+\n+Bundle-Name: io.openliberty.xmlWS.3.0.internal.tools\n+Bundle-Description: IBM XML Web Services Tools, version ${bVersion}\n+Bundle-SymbolicName: io.openliberty.xmlWS.3.0.internal.tools\n+\n+Export-Package: com.sun.tools.ws.ant;version=\"3.0\", \\\n+ com.ibm.jtc.jax.tools.ws;version=1.0.0, \\\n+ com.ibm.jtc.jax.tools.ws.spi;version=1.0.0, \\\n+ com.ibm.jtc.jax.xml.ws.api;version=1.0.0, \\\n+ com.ibm.jtc.jax.xml.ws.policy;version=1.0.0, \\\n+ com.ibm.ws.jaxws.tools;version=\"3.0\", \\\n+ org.jvnet.staxex;version=\"1.7.7\", \\\n+ org.jvnet.staxex.util;version=\"1.7.7\"\n+\n+Import-Package: \\\n+ org.glassfish.jaxb.*;version=\"3.0\"\n+\n+Private-Package:\\\n+ com.ibm.ws.jaxws.tools.*, \\\n+ com.sun.tools.ws.wscompile;-split-package:=merge-last;version=\"3.0.0\"\n+\n+-includeresource:\\\n+ @${repo;com.sun.xml.ws:jaxws-rt;3.0.0;EXACT}!/!META-INF/maven/*, \\\n+ @${repo;com.sun.xml.ws:jaxws-tools;3.0.0;EXACT}!/!META-INF/maven/*, \\\n+ @${repo;com.sun.org.apache.xml.internal:resolver;20050927;EXACT}!/!META-INF/maven/*, \\\n+ @${repo;org.jvnet.staxex:stax-ex;1.7.7;EXACT}!/!META-INF/maven/*, \\\n+ @${repo;com.sun.xml.stream.buffer:streambuffer;1.5.3;EXACT}!/!META-INF/maven/*, \\\n+ com/sun/tools/ws/wscompile=${bin}/com/sun/tools/ws/wscompile\n+\n+instrument.disabled: true\n+\n+-buildpath: \\\n+    com.ibm.ws.jaxws.tools.2.2.10;version=latest,\\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2NzE3Mg=="}, "originalCommit": {"oid": "146b36502e0b750eca0b1020f3e3d81e8d84c5c0"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Nzk3MzUzOnYy", "diffSide": "RIGHT", "path": "dev/io.openliberty.xmlws.3.0.internal.tools/bnd.bnd", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMzozNjoxNlrOIK9sxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMzozNjoxNlrOIK9sxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2NzU1OA==", "bodyText": "This is open liberty.  I believe IBM should be removed from the bundle description.", "url": "https://github.com/OpenLiberty/open-liberty/pull/15360#discussion_r548367558", "createdAt": "2020-12-24T03:36:16Z", "author": {"login": "jhanders34"}, "path": "dev/io.openliberty.xmlws.3.0.internal.tools/bnd.bnd", "diffHunk": "@@ -0,0 +1,65 @@\n+*#*******************************************************************************\n+# Copyright (c) 2020 IBM Corporation and others.\n+# All rights reserved. This program and the accompanying materials\n+# are made available under the terms of the Eclipse Public License v1.0\n+# which accompanies this distribution, and is available at\n+# http://www.eclipse.org/legal/epl-v10.html\n+#\n+# Contributors:\n+#     IBM Corporation - initial API and implementation\n+#*******************************************************************************\n+-include= ~../cnf/resources/bnd/bundle.props\n+bVersion=1.0\n+\n+Bundle-Name: io.openliberty.xmlWS.3.0.internal.tools\n+Bundle-Description: IBM XML Web Services Tools, version ${bVersion}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146b36502e0b750eca0b1020f3e3d81e8d84c5c0"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Nzk3NTI3OnYy", "diffSide": "RIGHT", "path": "dev/io.openliberty.xmlws.3.0.internal.tools.wsimport/bnd.bnd", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMzozNzowN1rOIK9tmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMzozNzowN1rOIK9tmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2Nzc2OA==", "bodyText": "Is this needed any longer?  I assumed it was because of stuff being in the JDK, but now stuff isn't in the JDK any longer.", "url": "https://github.com/OpenLiberty/open-liberty/pull/15360#discussion_r548367768", "createdAt": "2020-12-24T03:37:07Z", "author": {"login": "jhanders34"}, "path": "dev/io.openliberty.xmlws.3.0.internal.tools.wsimport/bnd.bnd", "diffHunk": "@@ -0,0 +1,54 @@\n+#*******************************************************************************\n+# Copyright (c) 2020 IBM Corporation and others.\n+# All rights reserved. This program and the accompanying materials\n+# are made available under the terms of the Eclipse Public License v1.0\n+# which accompanies this distribution, and is available at\n+# http://www.eclipse.org/legal/epl-v10.html\n+#\n+# Contributors:\n+#     IBM Corporation - initial API and implementation\n+#*******************************************************************************\n+-include= ~../cnf/resources/bnd/cmdline-subdir.props\n+bVersion=1.0\n+\n+Bundle-Name: IBM XML Web Services WsImport Tool\n+Bundle-SymbolicName: io.openliberty.xmlWS.3.0.internal.tools.wsimport\n+\n+Require-Compiler: true\n+\n+Require-Bundle:\\\n+ io.openliberty.xmlWS.3.0.internal.tools; version=\"[1,1.0.100)\", \\\n+ io.openliberty.xmlBinding.3.0.internal.tools; version=\"[1,1.0.100)\", \\\n+ io.openliberty.jakarta.activation.2.0;version=\"[1,1.0.100)\";location=\"dev/api/spec/\", \\\n+ io.openliberty.jakarta.jws.3.0;version=\"[1,1.0.100)\";location=\"dev/api/spec/\", \\\n+ io.openliberty.jakarta.soap.2.0;version=\"[1,1.0.100)\";location=\"dev/api/spec/\", \\\n+ io.openliberty.jakarta.xmlWS.3.0;version=\"[1,1.0.100)\";location=\"dev/api/spec/\", \\\n+ io.openliberty.jakarta.xmlBinding.3.0;version=\"[1,1.0.100)\";location=\"dev/api/spec/\", \\\n+ com.ibm.ws.logging; version=\"[1,1.0.100)\"\n+ \n+Parent-Last-Package: jakarta.xml.bind,\\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146b36502e0b750eca0b1020f3e3d81e8d84c5c0"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Nzk3NTgzOnYy", "diffSide": "RIGHT", "path": "dev/io.openliberty.xmlws.3.0.internal.tools.wsimport/bnd.bnd", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMzozNzo1MVrOIK9t9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMzozNzo1MVrOIK9t9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2Nzg2Mw==", "bodyText": "IBM should not be part of the bundle name.  This is open liberty.", "url": "https://github.com/OpenLiberty/open-liberty/pull/15360#discussion_r548367863", "createdAt": "2020-12-24T03:37:51Z", "author": {"login": "jhanders34"}, "path": "dev/io.openliberty.xmlws.3.0.internal.tools.wsimport/bnd.bnd", "diffHunk": "@@ -0,0 +1,54 @@\n+#*******************************************************************************\n+# Copyright (c) 2020 IBM Corporation and others.\n+# All rights reserved. This program and the accompanying materials\n+# are made available under the terms of the Eclipse Public License v1.0\n+# which accompanies this distribution, and is available at\n+# http://www.eclipse.org/legal/epl-v10.html\n+#\n+# Contributors:\n+#     IBM Corporation - initial API and implementation\n+#*******************************************************************************\n+-include= ~../cnf/resources/bnd/cmdline-subdir.props\n+bVersion=1.0\n+\n+Bundle-Name: IBM XML Web Services WsImport Tool", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146b36502e0b750eca0b1020f3e3d81e8d84c5c0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Nzk3NzUxOnYy", "diffSide": "RIGHT", "path": "dev/io.openliberty.xmlws.3.0.internal.tools.wsgen/bnd.bnd", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMzozODo1M1rOIK9u3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMzozODo1M1rOIK9u3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2ODA5NA==", "bodyText": "Is this needed any longer?  I assumed it was because of stuff being in the JDK, but now stuff isn't in the JDK any longer.", "url": "https://github.com/OpenLiberty/open-liberty/pull/15360#discussion_r548368094", "createdAt": "2020-12-24T03:38:53Z", "author": {"login": "jhanders34"}, "path": "dev/io.openliberty.xmlws.3.0.internal.tools.wsgen/bnd.bnd", "diffHunk": "@@ -0,0 +1,56 @@\n+#*******************************************************************************\n+# Copyright (c) 2020 IBM Corporation and others.\n+# All rights reserved. This program and the accompanying materials\n+# are made available under the terms of the Eclipse Public License v1.0\n+# which accompanies this distribution, and is available at\n+# http://www.eclipse.org/legal/epl-v10.html\n+#\n+# Contributors:\n+#     IBM Corporation - initial API and implementation\n+#*******************************************************************************\n+-include= ~../cnf/resources/bnd/cmdline-subdir.props\n+bVersion=1.0\n+\n+Bundle-Name: IBM XML Web Services WsGen Tool\n+Bundle-SymbolicName: io.openliberty.xmlWS.3.0.internal.tools.wsgen\n+\n+Require-Compiler: true\n+\n+Require-Bundle:\\\n+ io.openliberty.xmlWS.3.0.internal.tools; version=\"[1,1.0.100)\", \\\n+ io.openliberty.xmlBinding.3.0.internal.tools; version=\"[1,1.0.100)\", \\\n+ io.openliberty.jakarta.activation.2.0;version=\"[1,1.0.100)\";location=\"dev/api/spec/\", \\\n+ io.openliberty.jakarta.jws.3.0;version=\"[1,1.0.100)\";location=\"dev/api/spec/\", \\\n+ io.openliberty.jakarta.soap.2.0;version=\"[1,1.0.100)\";location=\"dev/api/spec/\", \\\n+ io.openliberty.jakarta.xmlWS.3.0;version=\"[1,1.0.100)\";location=\"dev/api/spec/\", \\\n+ io.openliberty.jakarta.xmlBinding.3.0;version=\"[1,1.0.100)\";location=\"dev/api/spec/\", \\\n+ io.openliberty.com.sun.xml.messaging.saaj; version=\"[1,1.0.100)\", \\\n+ com.ibm.ws.logging; version=\"[1,1.0.100)\"\n+ \n+Parent-Last-Package: jakarta.xml.bind,\\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146b36502e0b750eca0b1020f3e3d81e8d84c5c0"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Nzk3Nzg5OnYy", "diffSide": "RIGHT", "path": "dev/io.openliberty.xmlws.3.0.internal.tools.wsgen/bnd.bnd", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMzozOToxOFrOIK9vGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMzozOToxOFrOIK9vGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2ODE1Mw==", "bodyText": "Remove IBM from the bundle name.", "url": "https://github.com/OpenLiberty/open-liberty/pull/15360#discussion_r548368153", "createdAt": "2020-12-24T03:39:18Z", "author": {"login": "jhanders34"}, "path": "dev/io.openliberty.xmlws.3.0.internal.tools.wsgen/bnd.bnd", "diffHunk": "@@ -0,0 +1,56 @@\n+#*******************************************************************************\n+# Copyright (c) 2020 IBM Corporation and others.\n+# All rights reserved. This program and the accompanying materials\n+# are made available under the terms of the Eclipse Public License v1.0\n+# which accompanies this distribution, and is available at\n+# http://www.eclipse.org/legal/epl-v10.html\n+#\n+# Contributors:\n+#     IBM Corporation - initial API and implementation\n+#*******************************************************************************\n+-include= ~../cnf/resources/bnd/cmdline-subdir.props\n+bVersion=1.0\n+\n+Bundle-Name: IBM XML Web Services WsGen Tool", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "146b36502e0b750eca0b1020f3e3d81e8d84c5c0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0ODM1NTMzOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jaxws.tools/src/com/ibm/ws/jaxws/tools/WsToolsUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzowOTo0MVrOILBIig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzowOTo0MVrOILBIig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyMzgxOA==", "bodyText": "Had to make this public since I renamed the package for the wsgen and wsimport wrappers in xmlWS-3.0", "url": "https://github.com/OpenLiberty/open-liberty/pull/15360#discussion_r548423818", "createdAt": "2020-12-24T07:09:41Z", "author": {"login": "neuwerk"}, "path": "dev/com.ibm.ws.jaxws.tools/src/com/ibm/ws/jaxws/tools/WsToolsUtils.java", "diffHunk": "@@ -19,9 +19,9 @@\n /**\n  * Collected methods used by WsGen and WsImport in a utility class*\n  */\n-class WsToolsUtils {\n+public class WsToolsUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8adfbe90e2f55820624850ab2c9b020a3594851a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MDUwNTU2OnYy", "diffSide": "RIGHT", "path": "dev/io.openliberty.xmlws.3.0.internal.tools/src/com/sun/tools/ws/wscompile/WsimportTool.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQyMTo1NToxN1rOILVRmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQyMTo1NToxN1rOILVRmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc1MzgxOQ==", "bodyText": "I question any of this being needed because we don't need to update the boot classpath since everything will be on the classpath and nothing in the JDK will override it which is why we were prepending to the classpath.  As such I wonder if this works without us doing any updates in an overlay.", "url": "https://github.com/OpenLiberty/open-liberty/pull/15360#discussion_r548753819", "createdAt": "2020-12-24T21:55:17Z", "author": {"login": "jhanders34"}, "path": "dev/io.openliberty.xmlws.3.0.internal.tools/src/com/sun/tools/ws/wscompile/WsimportTool.java", "diffHunk": "@@ -0,0 +1,616 @@\n+/*\n+ * Copyright (c) 1997, 2018 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Distribution License v. 1.0, which is available at\n+ * http://www.eclipse.org/org/documents/edl-v10.php.\n+ *\n+ * SPDX-License-Identifier: BSD-3-Clause\n+ */\n+\n+package com.sun.tools.ws.wscompile;\n+\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.FilenameFilter;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarOutputStream;\n+\n+import javax.xml.stream.XMLStreamException;\n+\n+\n+import org.xml.sax.EntityResolver;\n+import org.xml.sax.Locator;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.SAXParseException;\n+\n+import com.sun.codemodel.CodeWriter;\n+import com.sun.codemodel.writer.ProgressCodeWriter;\n+import com.sun.istack.tools.DefaultAuthenticator;\n+import com.sun.istack.tools.ParallelWorldClassLoader;\n+import com.sun.tools.ws.ToolVersion;\n+import com.sun.tools.ws.api.TJavaGeneratorExtension;\n+import com.sun.tools.ws.processor.generator.CustomExceptionGenerator;\n+import com.sun.tools.ws.processor.generator.GeneratorBase;\n+import com.sun.tools.ws.processor.generator.JwsImplGenerator;\n+import com.sun.tools.ws.processor.generator.SeiGenerator;\n+import com.sun.tools.ws.processor.generator.ServiceGenerator;\n+import com.sun.tools.ws.processor.model.Model;\n+import com.sun.tools.ws.processor.modeler.wsdl.ConsoleErrorReporter;\n+import com.sun.tools.ws.processor.modeler.wsdl.WSDLModeler;\n+import com.sun.tools.ws.processor.util.DirectoryUtil;\n+import com.sun.tools.ws.resources.WscompileMessages;\n+import com.sun.tools.ws.resources.WsdlMessages;\n+import com.sun.tools.ws.util.WSDLFetcher;\n+import com.sun.tools.ws.wsdl.parser.MetadataFinder;\n+import com.sun.tools.ws.wsdl.parser.WSDLInternalizationLogic;\n+import com.sun.tools.xjc.util.NullStream;\n+import com.sun.xml.ws.api.server.Container;\n+import com.sun.xml.ws.util.ServiceFinder;\n+\n+import jakarta.jws.WebService;\n+import jakarta.xml.ws.EndpointContext;\n+import jakarta.xml.bind.JAXBPermission;\n+\n+/**\n+ * @author Vivek Pandey\n+ */\n+public class WsimportTool {\n+    /** JAXWS module name. JAXWS dependency is mandatory in generated Java module. */\n+    private static final String JAXWS_MODULE = \"java.xml.ws\";\n+\n+    private static final String WSIMPORT = \"wsimport\";\n+    private final PrintStream out;\n+    private final Container container;\n+\n+    /**\n+     * Wsimport specific options\n+     */\n+    protected WsimportOptions options = new WsimportOptions();\n+\n+    public WsimportTool(OutputStream out) {\n+        this(out, null);\n+    }\n+\n+    public WsimportTool(OutputStream logStream, Container container) {\n+        this.out = (logStream instanceof PrintStream) ? (PrintStream) logStream : new PrintStream(logStream);\n+        this.container = container;\n+    }\n+\n+    protected class Listener extends WsimportListener {\n+        ConsoleErrorReporter cer = new ConsoleErrorReporter(out == null ? new PrintStream(new NullStream()) : out);\n+\n+        @Override\n+        public void generatedFile(String fileName) {\n+            message(fileName);\n+        }\n+\n+        @Override\n+        public void message(String msg) {\n+            out.println(msg);\n+        }\n+\n+        @Override\n+        public void error(SAXParseException exception) {\n+            cer.error(exception);\n+        }\n+\n+        @Override\n+        public void fatalError(SAXParseException exception) {\n+            cer.fatalError(exception);\n+        }\n+\n+        @Override\n+        public void warning(SAXParseException exception) {\n+            cer.warning(exception);\n+        }\n+\n+        @Override\n+        public void debug(SAXParseException exception) {\n+            cer.debug(exception);\n+        }\n+\n+        @Override\n+        public void info(SAXParseException exception) {\n+            cer.info(exception);\n+        }\n+\n+        public void enableDebugging() {\n+            cer.enableDebugging();\n+        }\n+    }\n+\n+    protected class Receiver extends ErrorReceiverFilter {\n+\n+        private final Listener listener;\n+\n+        public Receiver(Listener listener) {\n+            super(listener);\n+            this.listener = listener;\n+        }\n+\n+        @Override\n+        public void info(SAXParseException exception) {\n+            if (options.verbose)\n+                super.info(exception);\n+        }\n+\n+        @Override\n+        public void warning(SAXParseException exception) {\n+            if (!options.quiet)\n+                super.warning(exception);\n+        }\n+\n+        @Override\n+        public void pollAbort() throws AbortException {\n+            if (listener.isCanceled())\n+                throw new AbortException();\n+        }\n+\n+        @Override\n+        public void debug(SAXParseException exception) {\n+            if (options.debugMode) {\n+                listener.debug(exception);\n+            }\n+        }\n+    }\n+\n+    public boolean run(String[] args) {\n+        Listener listener = new Listener();\n+        Receiver receiver = new Receiver(listener);\n+        return run(args, listener, receiver);\n+    }\n+\n+    protected boolean run(String[] args, Listener listener,\n+                          Receiver receiver) {\n+        for (String arg : args) {\n+            if (arg.equals(\"-version\")) {\n+                listener.message(\n+                                 WscompileMessages.WSIMPORT_VERSION(ToolVersion.VERSION.MAJOR_VERSION));\n+                return true;\n+            }\n+            if (arg.equals(\"-fullversion\")) {\n+                listener.message(\n+                                 WscompileMessages.WSIMPORT_FULLVERSION(ToolVersion.VERSION.toString()));\n+                return true;\n+            }\n+        }\n+\n+        try {\n+            parseArguments(args, listener, receiver);\n+\n+            try {\n+                Model wsdlModel = buildWsdlModel(listener, receiver);\n+                if (wsdlModel == null)\n+                    return false;\n+\n+                if (!generateCode(listener, receiver, wsdlModel, true))\n+                    return false;\n+\n+                /*\n+                 * Not so fast!\n+                 * } catch(AbortException e){\n+                 * //error might have been reported\n+                 *\n+                 */\n+            } catch (IOException e) {\n+                receiver.error(e);\n+                return false;\n+            } catch (XMLStreamException e) {\n+                receiver.error(e);\n+                return false;\n+            }\n+            if (!options.nocompile) {\n+                if (!compileGeneratedClasses(receiver, listener)) {\n+                    listener.message(WscompileMessages.WSCOMPILE_COMPILATION_FAILED());\n+                    return false;\n+                }\n+            }\n+            try {\n+                if (options.clientjar != null) {\n+                    //add all the generated class files to the list of generated files\n+                    addClassesToGeneratedFiles();\n+                    jarArtifacts(listener);\n+\n+                }\n+            } catch (IOException e) {\n+                receiver.error(e);\n+                return false;\n+            }\n+\n+        } catch (Options.WeAreDone done) {\n+            usage(done.getOptions());\n+        } catch (BadCommandLineException e) {\n+            if (e.getMessage() != null) {\n+                System.out.println(e.getMessage());\n+                System.out.println();\n+            }\n+            usage(e.getOptions());\n+            return false;\n+        } finally {\n+            deleteGeneratedFiles();\n+            if (!options.disableAuthenticator) {\n+                DefaultAuthenticator.reset();\n+            }\n+        }\n+        if (receiver.hadError()) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    private void deleteGeneratedFiles() {\n+        Set<File> trackedRootPackages = new HashSet<File>();\n+\n+        if (options.clientjar != null) {\n+            //remove all non-java artifacts as they will packaged in jar.\n+            Iterable<File> generatedFiles = options.getGeneratedFiles();\n+            synchronized (generatedFiles) {\n+                for (File file : generatedFiles) {\n+                    if (!file.getName().endsWith(\".java\")) {\n+                        boolean deleted = file.delete();\n+                        if (options.verbose && !deleted) {\n+                            System.out.println(MessageFormat.format(\"{0} could not be deleted.\", file));\n+                        }\n+                        trackedRootPackages.add(file.getParentFile());\n+                    }\n+                }\n+            }\n+            //remove empty package dirs\n+            for (File pkg : trackedRootPackages) {\n+\n+                while (pkg.list() != null && pkg.list().length == 0 && !pkg.equals(options.destDir)) {\n+                    File parentPkg = pkg.getParentFile();\n+                    boolean deleted = pkg.delete();\n+                    if (options.verbose && !deleted) {\n+                        System.out.println(MessageFormat.format(\"{0} could not be deleted.\", pkg));\n+                    }\n+                    pkg = parentPkg;\n+                }\n+            }\n+        }\n+        if (!options.keep) {\n+            options.removeGeneratedFiles();\n+        }\n+    }\n+\n+    private void addClassesToGeneratedFiles() throws IOException {\n+        Iterable<File> generatedFiles = options.getGeneratedFiles();\n+        final List<File> trackedClassFiles = new ArrayList<File>();\n+        for (File f : generatedFiles) {\n+            if (f.getName().endsWith(\".java\")) {\n+                String relativeDir = DirectoryUtil.getRelativePathfromCommonBase(f.getParentFile(), options.sourceDir);\n+                final String className = f.getName().substring(0, f.getName().indexOf(\".java\"));\n+                File classDir = new File(options.destDir, relativeDir);\n+                if (classDir.exists()) {\n+                    classDir.listFiles(new FilenameFilter() {\n+                        @Override\n+                        public boolean accept(File dir, String name) {\n+                            if (name.equals(className + \".class\") || (name.startsWith(className + \"$\") && name.endsWith(\".class\"))) {\n+                                trackedClassFiles.add(new File(dir, name));\n+                                return true;\n+                            }\n+                            return false;\n+                        }\n+                    });\n+                }\n+            }\n+        }\n+        for (File f : trackedClassFiles) {\n+            options.addGeneratedFile(f);\n+        }\n+    }\n+\n+    private void jarArtifacts(WsimportListener listener) throws IOException {\n+        File zipFile = new File(options.clientjar);\n+        if (!zipFile.isAbsolute()) {\n+            zipFile = new File(options.destDir, options.clientjar);\n+        }\n+\n+        FileOutputStream fos;\n+        if (!options.quiet) {\n+            listener.message(WscompileMessages.WSIMPORT_ARCHIVING_ARTIFACTS(zipFile));\n+        }\n+\n+        BufferedInputStream bis = null;\n+        FileInputStream fi = null;\n+        fos = new FileOutputStream(zipFile);\n+        JarOutputStream jos = new JarOutputStream(fos);\n+        try {\n+            String base = options.destDir.getCanonicalPath();\n+            for (File f : options.getGeneratedFiles()) {\n+                //exclude packaging the java files in the jar\n+                if (f.getName().endsWith(\".java\")) {\n+                    continue;\n+                }\n+                if (options.verbose) {\n+                    listener.message(WscompileMessages.WSIMPORT_ARCHIVE_ARTIFACT(f, options.clientjar));\n+                }\n+                String entry = f.getCanonicalPath().substring(base.length() + 1).replace(File.separatorChar, '/');\n+                fi = new FileInputStream(f);\n+                bis = new BufferedInputStream(fi);\n+                JarEntry jarEntry = new JarEntry(entry);\n+                jos.putNextEntry(jarEntry);\n+                int bytesRead;\n+                byte[] buffer = new byte[1024];\n+                while ((bytesRead = bis.read(buffer)) != -1) {\n+                    jos.write(buffer, 0, bytesRead);\n+                }\n+            }\n+        } finally {\n+            try {\n+                if (bis != null) {\n+                    bis.close();\n+                }\n+            } finally {\n+                if (jos != null) {\n+                    jos.close();\n+                }\n+                if (fi != null) {\n+                    fi.close();\n+                }\n+            }\n+        }\n+    }\n+\n+    protected void parseArguments(String[] args, Listener listener,\n+                                  Receiver receiver) throws BadCommandLineException {\n+        options.parseArguments(args);\n+        options.validate();\n+        if (options.debugMode)\n+            listener.enableDebugging();\n+        options.parseBindings(receiver);\n+    }\n+\n+    protected Model buildWsdlModel(Listener listener, final Receiver receiver) throws BadCommandLineException, XMLStreamException, IOException {\n+        //set auth info\n+        //if(options.authFile != null)\n+        if (!options.disableAuthenticator) {\n+            class AuthListener implements DefaultAuthenticator.Receiver {\n+\n+                private final boolean isFatal;\n+\n+                AuthListener(boolean isFatal) {\n+                    this.isFatal = isFatal;\n+                }\n+\n+                @Override\n+                public void onParsingError(String text, Locator loc) {\n+                    error(new SAXParseException(WscompileMessages.WSIMPORT_ILLEGAL_AUTH_INFO(text), loc));\n+                }\n+\n+                @Override\n+                public void onError(Exception e, Locator loc) {\n+                    if (e instanceof FileNotFoundException) {\n+                        error(new SAXParseException(WscompileMessages.WSIMPORT_AUTH_FILE_NOT_FOUND(\n+                                                                                                   loc.getSystemId(), WsimportOptions.defaultAuthfile), null));\n+                    } else {\n+                        error(new SAXParseException(WscompileMessages.WSIMPORT_FAILED_TO_PARSE(loc.getSystemId(), e.getMessage()), loc));\n+                    }\n+                }\n+\n+                private void error(SAXParseException e) {\n+                    if (isFatal) {\n+                        receiver.error(e);\n+                    } else {\n+                        receiver.debug(e);\n+                    }\n+                }\n+            }\n+\n+            DefaultAuthenticator da = DefaultAuthenticator.getAuthenticator();\n+            if (options.proxyAuth != null) {\n+                da.setProxyAuth(options.proxyAuth);\n+            }\n+            if (options.authFile != null) {\n+                da.setAuth(options.authFile, new AuthListener(true));\n+            } else {\n+                da.setAuth(new File(WsimportOptions.defaultAuthfile), new AuthListener(false));\n+            }\n+        }\n+\n+        if (!options.quiet) {\n+            listener.message(WscompileMessages.WSIMPORT_PARSING_WSDL());\n+        }\n+\n+        MetadataFinder forest = new MetadataFinder(new WSDLInternalizationLogic(), options, receiver);\n+        forest.parseWSDL();\n+        if (forest.isMexMetadata)\n+            receiver.reset();\n+\n+        WSDLModeler wsdlModeler = new WSDLModeler(options, receiver, forest);\n+        Model wsdlModel = wsdlModeler.buildModel();\n+        if (wsdlModel == null) {\n+            listener.message(WsdlMessages.PARSING_PARSE_FAILED());\n+        }\n+\n+        if (options.clientjar != null) {\n+            if (!options.quiet)\n+                listener.message(WscompileMessages.WSIMPORT_FETCHING_METADATA());\n+            options.wsdlLocation = new WSDLFetcher(options, listener).fetchWsdls(forest);\n+        }\n+\n+        return wsdlModel;\n+    }\n+\n+    protected boolean generateCode(Listener listener, Receiver receiver,\n+                                   Model wsdlModel, boolean generateService) throws IOException {\n+        //generated code\n+        if (!options.quiet)\n+            listener.message(WscompileMessages.WSIMPORT_GENERATING_CODE());\n+\n+        TJavaGeneratorExtension[] genExtn = ServiceFinder.find(TJavaGeneratorExtension.class).toArray();\n+        CustomExceptionGenerator.generate(wsdlModel, options, receiver);\n+        SeiGenerator.generate(wsdlModel, options, receiver, genExtn);\n+        if (receiver.hadError()) {\n+            throw new AbortException();\n+        }\n+        if (generateService) {\n+            ServiceGenerator.generate(wsdlModel, options, receiver);\n+        }\n+        for (GeneratorBase g : ServiceFinder.find(GeneratorBase.class)) {\n+            g.init(wsdlModel, options, receiver);\n+            g.doGeneration();\n+        }\n+\n+        List<String> implFiles = null;\n+        if (options.isGenerateJWS) {\n+            implFiles = JwsImplGenerator.generate(wsdlModel, options, receiver);\n+        }\n+\n+        for (Plugin plugin : options.activePlugins) {\n+            try {\n+                plugin.run(wsdlModel, options, receiver);\n+            } catch (SAXException sex) {\n+                // fatal error. error should have been reported\n+                return false;\n+            }\n+        }\n+\n+        if (options.getModuleName() != null) {\n+            options.getCodeModel()._prepareModuleInfo(options.getModuleName(), JAXWS_MODULE);\n+        }\n+\n+        CodeWriter cw;\n+        if (options.filer != null) {\n+            cw = new FilerCodeWriter(options);\n+        } else {\n+            cw = new WSCodeWriter(options.sourceDir, options);\n+        }\n+\n+        if (options.verbose)\n+            cw = new ProgressCodeWriter(cw, out);\n+        options.getCodeModel().build(cw);\n+\n+        if (options.isGenerateJWS) {\n+            //move Impl files to implDestDir\n+            return JwsImplGenerator.moveToImplDestDir(implFiles, options, receiver);\n+        }\n+\n+        return true;\n+    }\n+\n+    public void setEntityResolver(EntityResolver resolver) {\n+        this.options.entityResolver = resolver;\n+    }\n+\n+    protected boolean compileGeneratedClasses(ErrorReceiver receiver, WsimportListener listener) {\n+        List<String> sourceFiles = new ArrayList<String>();\n+\n+        for (File f : options.getGeneratedFiles()) {\n+            if (f.exists() && f.getName().endsWith(\".java\")) {\n+                sourceFiles.add(f.getAbsolutePath());\n+            }\n+        }\n+\n+        if (sourceFiles.size() > 0) {\n+            String classDir = options.destDir.getAbsolutePath();\n+            String classpathString = createClasspathString();\n+            // Start Liberty Change\n+            int majorJavaVersion = getMajorJavaVersion();\n+            boolean bootCP = useBootClasspath(EndpointContext.class) || useBootClasspath(JAXBPermission.class) || useBootClasspath(WebService.class);\n+            // End Liberty Change\n+            List<String> args = new ArrayList<String>();\n+\n+            args.add(\"-d\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26d04168a41304f2d312a0f652ee918e2cda7cf2"}, "originalPosition": 526}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2355, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}