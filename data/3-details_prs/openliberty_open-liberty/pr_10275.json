{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4NzkxMzE1", "number": 10275, "title": "tests for disabling fail over", "bodyText": "Write some tests to experiment with code paths where fail over is enabled and then disabled. We don't recommend doing that because it will leave existing tasks orphaned. The tests can experiment with ways of transferring orphaned tasks back to an available instance/member by directly accessing the database. However, there will not be any further investment in that area because it is something that users should not be doing.  If someone does come up with a need for it at some point, these tests will at least verify it is possible to transfer the tasks back and get them executing again.", "createdAt": "2020-01-02T20:55:43Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/10275", "merged": true, "mergeCommit": {"oid": "0a800cc0b3e332b1829a3b64e746a15457465922"}, "closed": true, "closedAt": "2020-01-03T15:00:31Z", "author": {"login": "njr-11"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb2e7aQgH2gAyMzU4NzkxMzE1OmIxMzI5ZTVlYzFiNmEzODI3ZTc2OTQzYzMzYWMyMmQ1NDc4NjQ3Zjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb2vpoZgFqTMzODEwOTA3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b1329e5ec1b6a3827e76943c33ac22d5478647f9", "author": {"user": {"login": "njr-11", "name": "Nathan Rauh"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/b1329e5ec1b6a3827e76943c33ac22d5478647f9", "committedDate": "2020-01-02T19:28:53Z", "message": "Issue #8417 tests for disabling fail over"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4MTA5MDc4", "url": "https://github.com/OpenLiberty/open-liberty/pull/10275#pullrequestreview-338109078", "createdAt": "2020-01-03T14:40:53Z", "commit": {"oid": "b1329e5ec1b6a3827e76943c33ac22d5478647f9"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNDo0MDo1M1rOFaBfgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNDo0MDo1M1rOFaBfgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjgzMTc0Nw==", "bodyText": "HOSTANME typo.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10275#discussion_r362831747", "createdAt": "2020-01-03T14:40:53Z", "author": {"login": "nmittles"}, "path": "dev/com.ibm.ws.concurrent.persistent_fat_failover1serv/test-applications/failover1servApp/src/failover1serv/web/Failover1ServerTestServlet.java", "diffHunk": "@@ -247,4 +252,82 @@ public void testTaskStarted(HttpServletRequest request, HttpServletResponse resp\n         if (!status.hasResult())\n             throw new Exception(\"Task did not complete any executions within allotted interval. \" + status);\n     }\n+\n+    /**\n+     * Transfer tasks to the specified instance. The transfer operation is performed via the PersistentExecutor MBean.\n+     */\n+    public void testTransferWithMBean(HttpServletRequest request, HttpServletResponse response) throws Exception {\n+        String jndiName = request.getParameter(\"jndiName\");\n+        String[] taskIds = request.getParameterValues(\"taskId\");\n+\n+        PersistentExecutor executor = InitialContext.doLookup(jndiName);\n+        DataSource ds = InitialContext.doLookup(\"java:comp/DefaultDataSource\");\n+        MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n+        ObjectName obn = new ObjectName(\"WebSphere:type=PersistentExecutorMBean,jndiName=\" + jndiName + \",*\");\n+        Set<ObjectInstance> s = mbs.queryMBeans(obn, null);\n+        if (s.size() != 1) {\n+            for (ObjectInstance i : s)\n+                System.out.println(\"  Found MBean: \" + i.getObjectName());\n+            throw new Exception(\"Expected to find exactly 1 MBean, instead found \" + s.size());\n+        }\n+        ObjectInstance mbean = s.iterator().next();\n+        String[] paramTypes = { \"java.lang.Long\", \"long\" };\n+\n+        for (String taskIdString : taskIds) {\n+            long taskId = Long.valueOf(taskIdString);\n+            // The only way to find the value stored in a task's PARTN column is to query the database\n+            long oldValue;\n+            try (Connection con = ds.getConnection()) {\n+                PreparedStatement st = con.prepareStatement(\"SELECT PARTN FROM WLPTASK WHERE ID=?\");\n+                st.setLong(1, taskId);\n+                ResultSet result = st.executeQuery();\n+                if (!result.next())\n+                    throw new Exception(\"Task \" + taskId + \" is not found.\");\n+                oldValue = result.getLong(1);\n+            }\n+\n+            // Reassign using the mbean\n+            int tasksTransferred = (Integer) mbs.invoke(mbean.getObjectName(), \"transfer\",\n+                    new Long[] { taskId, oldValue },\n+                    new String[] { \"java.lang.Long\", \"long\" });\n+\n+            if (tasksTransferred < 1)\n+                throw new Exception(\"Task \" + taskId + \" with \" + oldValue + \" is not found by mbean \" + mbean);\n+        }\n+    }\n+\n+    /**\n+     * Transfer tasks to the specified instance. The transfer operation is performed by directly updating the database.\n+     */\n+    public void testTransferWithoutMBean(HttpServletRequest request, HttpServletResponse response) throws Exception {\n+        String jndiName = request.getParameter(\"jndiName\");\n+        String[] taskIds = request.getParameterValues(\"taskId\");\n+\n+        PersistentExecutor executor = InitialContext.doLookup(jndiName);\n+        DataSource ds = InitialContext.doLookup(\"java:comp/DefaultDataSource\");\n+\n+        for (String taskIdString : taskIds) {\n+            long taskId = Long.valueOf(taskIdString);\n+            // The only way to find the value stored in a task's PARTN column is to query the database\n+            try (Connection con = ds.getConnection()) {\n+                // querying only EXECUTOR and ignoring HOSTANME, USERDIR, LSERVER columns because there is only one instance", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1329e5ec1b6a3827e76943c33ac22d5478647f9"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3426, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}