{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNjk5Njk1", "number": 12004, "reviewThreads": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzozNDo1NlrOD7wVDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDo1Mjo1MlrOD8sjdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTg0Mzk4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzozNDo1NlrOGURlQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzozNDo1NlrOGURlQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxMjc3MQ==", "bodyText": "Update the name of the test, the test description and streamline it a bit -- does it really need a sleep?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r423912771", "createdAt": "2020-05-12T17:34:56Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ConfigElementList;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.ContextPool;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Ensure we're timing out the LDAP context pool when expected.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class JNDIOutputTest {\n+\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.jndi.output\");\n+    private static final Class<?> c = JNDIOutputTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String SUB_DN = \"o=ibm,c=us\";\n+    private static final String USER_BASE_DN = \"ou=TestUsers,ou=Test,o=ibm,c=us\";\n+    private static final String USER = \"user\";\n+    private static final String USER_DN = \"uid=\" + USER + \",\" + USER_BASE_DN;\n+    private static final String PWD = \"usrpwd\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+        updateLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer();\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        emptyConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(SUB_DN);\n+\n+        Entry entry = new Entry(SUB_DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+        /*\n+         * Add the partition entries.\n+         */\n+        entry = new Entry(\"ou=Test,o=ibm,c=us\");\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_BASE_DN);\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        entry.addAttribute(\"ou\", \"TestUsers\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", USER);\n+        entry.addAttribute(\"sn\", USER);\n+        entry.addAttribute(\"cn\", USER);\n+        entry.addAttribute(\"userPassword\", PWD);\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer() throws Exception {\n+        ServerConfiguration server = emptyConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+        ldap.setId(\"ldap1\");\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(SUB_DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ContextPool cp = new ContextPool(true, 0, 2, 1, \"2s\", \"5s\");\n+        ldap.setContextPool(cp);\n+        SearchResultsCache src = new SearchResultsCache();\n+        src.setEnabled(false); // disable search cache so we can look up the same user over and over again\n+        ldap.setLdapCache(new LdapCache(null, src));\n+\n+        server.getLdapRegistries().add(ldap);\n+        updateConfigDynamically(libertyServer, server);\n+\n+    }\n+\n+    /**\n+     *\n+     * Check that we hit the timeout block of code for the context pool\n+     */\n+    @Test\n+    public void testContextPoolOnTimeout() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50f45a83d640ab1ca8041f905e10469f24282c8d"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTg0NTU5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzozNToxOFrOGURmOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzozNToxOFrOGURmOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxMzAxOA==", "bodyText": "Fix description", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r423913018", "createdAt": "2020-05-12T17:35:18Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ConfigElementList;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.ContextPool;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Ensure we're timing out the LDAP context pool when expected.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50f45a83d640ab1ca8041f905e10469f24282c8d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTg0NjA4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzozNToyN1rOGURmiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzozNToyN1rOGURmiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxMzA5OQ==", "bodyText": "Copyright", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r423913099", "createdAt": "2020-05-12T17:35:27Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50f45a83d640ab1ca8041f905e10469f24282c8d"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTg0NzI5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/TimedDirContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzozNTo0NVrOGURnSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzozNTo0NVrOGURnSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxMzI5MA==", "bodyText": "Are we using this in this class?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r423913290", "createdAt": "2020-05-12T17:35:45Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/TimedDirContext.java", "diffHunk": "@@ -49,6 +50,8 @@\n     /** Constant for JNDI_CALL trace */\n     public static final String JNDI_CALL = \"JNDI_CALL \";\n \n+    public static ByteArrayPlusOutputStream baos;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50f45a83d640ab1ca8041f905e10469f24282c8d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTg0ODgwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzozNjoxNVrOGURoVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzozNjoxNVrOGURoVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxMzU1OQ==", "bodyText": "Remove or convert to trace.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r423913559", "createdAt": "2020-05-12T17:36:15Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -1056,6 +1068,16 @@ public InitializeResult initialize() throws WIMApplicationException {\n             iEnvironment.put(LDAP_ENV_PROP_READ_TIMEOUT, String.valueOf(DEFAULT_READ_TIMEOUT));\n         }\n \n+        /*\n+         * Set the LDAP read time out.\n+         */\n+        if (iJndiOutputEnabled != null && iJndiOutputEnabled) {\n+            System.out.println(\"Setting print stream\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50f45a83d640ab1ca8041f905e10469f24282c8d"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTg1MTA0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/ByteArrayPlusOutputStream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzozNjo1N1rOGURp-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzozNjo1N1rOGURp-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxMzk3Ng==", "bodyText": "Fix copyright date", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r423913976", "createdAt": "2020-05-12T17:36:57Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/ByteArrayPlusOutputStream.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*******************************************************************************\n+ * Copyright (c) 1997, 2004 IBM Corporation and others.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50f45a83d640ab1ca8041f905e10469f24282c8d"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTg1NTA3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/ByteArrayPlusOutputStream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzozODowMVrOGURsfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzozODowMVrOGURsfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxNDYyMg==", "bodyText": "Fix all the e.printStackTrace -- we should trace it, but don't throw an exception. We don't want failing trace to interrupt an ldap reqeust.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r423914622", "createdAt": "2020-05-12T17:38:01Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/ByteArrayPlusOutputStream.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*******************************************************************************\n+ * Copyright (c) 1997, 2004 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.wim.adapter.ldap;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+\n+import com.ibm.websphere.ras.annotation.Trivial;\n+\n+/******************************************************************************\n+*\tUse an extended version of ByteArrayOutputStream in order to allow access\n+*\tto protected values.\n+******************************************************************************/\n+@Trivial\n+public class ByteArrayPlusOutputStream extends ByteArrayOutputStream {\n+    public final String eol = getSystemProperty(\"line.separator\");\n+    @Override\n+    public void write(int b) {\n+        super.write(b);\n+        try {\n+            if (this.toString(\"UTF-8\").contains(eol)) {\n+                try {\n+                    super.writeTo(System.out);\n+                    super.reset();\n+                } catch (IOException e) {\n+                    e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50f45a83d640ab1ca8041f905e10469f24282c8d"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTg1OTQ4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzozOTowOVrOGURvVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzozOTowOVrOGURvVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxNTM0OA==", "bodyText": "Needs to be trace.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r423915348", "createdAt": "2020-05-12T17:39:09Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -1232,6 +1254,16 @@ public TimedDirContext reCreateDirContext(TimedDirContext oldCtx, String errorMe\n     @FFDCIgnore(NamingException.class)\n     public void releaseDirContext(TimedDirContext ctx) throws WIMSystemException {\n         final String METHODNAME = \"releaseDirContext\";\n+        if (iJndiOutputEnabled) {\n+            try {\n+                if (tc.isDebugEnabled()) {\n+                    Tr.debug(tc, METHODNAME + \" Writing the rest of the packet capture\");\n+                }\n+                bapos.writeTo(System.out);\n+            } catch (IOException e) {\n+                e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50f45a83d640ab1ca8041f905e10469f24282c8d"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTg2NDc2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.jndi.output/server.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzo0MDoyOVrOGURymg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzo0MDoyOVrOGURymg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxNjE4Ng==", "bodyText": "Copyright date", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r423916186", "createdAt": "2020-05-12T17:40:29Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.jndi.output/server.xml", "diffHunk": "@@ -0,0 +1,23 @@\n+<!--\n+    Copyright (c) 2017 IBM Corporation and others.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50f45a83d640ab1ca8041f905e10469f24282c8d"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTg2NTY1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.jndi.output/bootstrap.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzo0MDozOVrOGURzHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzo0MDozOVrOGURzHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxNjMxNw==", "bodyText": "Copyright date", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r423916317", "createdAt": "2020-05-12T17:40:39Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/publish/servers/com.ibm.ws.security.wim.adapter.ldap.fat.jndi.output/bootstrap.properties", "diffHunk": "@@ -0,0 +1,13 @@\n+###############################################################################\n+# Copyright (c) 2017 IBM Corporation and others.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50f45a83d640ab1ca8041f905e10469f24282c8d"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTg3Mjc3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzo0Mjo0NFrOGUR3tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzo0Mjo0NFrOGUR3tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxNzQ5Mw==", "bodyText": "\"Should not find\" ? You are making sure we don't log the trace, then enable it and we do find the trace?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r423917493", "createdAt": "2020-05-12T17:42:44Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ConfigElementList;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.ContextPool;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Ensure we're timing out the LDAP context pool when expected.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class JNDIOutputTest {\n+\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.jndi.output\");\n+    private static final Class<?> c = JNDIOutputTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String SUB_DN = \"o=ibm,c=us\";\n+    private static final String USER_BASE_DN = \"ou=TestUsers,ou=Test,o=ibm,c=us\";\n+    private static final String USER = \"user\";\n+    private static final String USER_DN = \"uid=\" + USER + \",\" + USER_BASE_DN;\n+    private static final String PWD = \"usrpwd\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+        updateLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer();\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        emptyConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(SUB_DN);\n+\n+        Entry entry = new Entry(SUB_DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+        /*\n+         * Add the partition entries.\n+         */\n+        entry = new Entry(\"ou=Test,o=ibm,c=us\");\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_BASE_DN);\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        entry.addAttribute(\"ou\", \"TestUsers\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", USER);\n+        entry.addAttribute(\"sn\", USER);\n+        entry.addAttribute(\"cn\", USER);\n+        entry.addAttribute(\"userPassword\", PWD);\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer() throws Exception {\n+        ServerConfiguration server = emptyConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+        ldap.setId(\"ldap1\");\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(SUB_DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ContextPool cp = new ContextPool(true, 0, 2, 1, \"2s\", \"5s\");\n+        ldap.setContextPool(cp);\n+        SearchResultsCache src = new SearchResultsCache();\n+        src.setEnabled(false); // disable search cache so we can look up the same user over and over again\n+        ldap.setLdapCache(new LdapCache(null, src));\n+\n+        server.getLdapRegistries().add(ldap);\n+        updateConfigDynamically(libertyServer, server);\n+\n+    }\n+\n+    /**\n+     *\n+     * Check that we hit the timeout block of code for the context pool\n+     */\n+    @Test\n+    public void testContextPoolOnTimeout() throws Exception {\n+        String trace = \"-> localhost\"; // depends on trace logged in LdapConnection.getDirContext\n+        String returnUser = servlet.checkPassword(USER_DN, PWD);\n+        List<String> errMsgs = libertyServer.findStringsInLogsAndTrace(trace);\n+        assertTrue(\"Should find: \" + trace, errMsgs.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50f45a83d640ab1ca8041f905e10469f24282c8d"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDg3NjcwOnYy", "diffSide": "RIGHT", "path": "dev/cnf/dependabot/check_this_in_if_it_changes/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTowMDoxNFrOGVDVmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTowMDoxNFrOGVDVmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyNzk2Mg==", "bodyText": "This is weird.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424727962", "createdAt": "2020-05-13T21:00:14Z", "author": {"login": "jvanhill"}, "path": "dev/cnf/dependabot/check_this_in_if_it_changes/pom.xml", "diffHunk": "@@ -639,6 +639,7 @@\n     <dependency>\n       <groupId>io.smallrye</groupId>\n       <artifactId>smallrye-graphql</artifactId>\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8eb410a7b9e39ca438e875a6c8f647157cb377c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDg3NzM4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.websphere.security.wim.base/src/com/ibm/websphere/security/wim/ConfigConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTowMDoyOVrOGVDWCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTowMDoyOVrOGVDWCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyODA3NQ==", "bodyText": "add white space after.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424728075", "createdAt": "2020-05-13T21:00:29Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.websphere.security.wim.base/src/com/ibm/websphere/security/wim/ConfigConstants.java", "diffHunk": "@@ -402,6 +402,10 @@\n      */\n     String CONFIG_PROP_READ_TIMEOUT = \"readTimeout\";\n \n+    /**\n+     * Define whether JNDI BER packets will be written to the System.out\n+     */\n+    String CONFIG_PROP_JNDI_OUTPUT_ENABLED = \"jndiOutputEnabled\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8eb410a7b9e39ca438e875a6c8f647157cb377c"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDg3ODczOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/resources/OSGI-INF/metatype/metatype.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTowMDo0OVrOGVDW0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTowMDo0OVrOGVDW0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyODI3Mg==", "bodyText": "Alignment.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424728272", "createdAt": "2020-05-13T21:00:49Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/resources/OSGI-INF/metatype/metatype.xml", "diffHunk": "@@ -57,6 +57,8 @@\n             type=\"String\" default=\"${count(sslRef)}\"/>\n         <AD id=\"SSLSupport.target\" name=\"internal\" description=\"internal use only\"\n             type=\"String\" default=\"(repertoirePIDs=${sslRef})\"/>\n+\t\t<AD id=\"jndiOutputEnabled\" name=\"internal\" description=\"internal use only\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8eb410a7b9e39ca438e875a6c8f647157cb377c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDg4MDI4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/BEROutputStream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTowMToxOVrOGVDXww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTowMToxOVrOGVDXww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyODUxNQ==", "bodyText": "remove\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //rename BER output stream", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424728515", "createdAt": "2020-05-13T21:01:19Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/BEROutputStream.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.wim.adapter.ldap;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+\n+/******************************************************************************\n+*\tUse an extended version of ByteArrayOutputStream in order to allow access\n+*\tto protected values.\n+******************************************************************************/\n+@Trivial\n+//rename BER output stream", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8eb410a7b9e39ca438e875a6c8f647157cb377c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDg4NjgxOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/BEROutputStream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTowMzoxN1rOGVDbvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTowMzoxN1rOGVDbvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyOTUzMw==", "bodyText": "Use the method System.lineSeparator() instead.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public final String eol = getSystemProperty(\"line.separator\");", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424729533", "createdAt": "2020-05-13T21:03:17Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/BEROutputStream.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.wim.adapter.ldap;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+\n+/******************************************************************************\n+*\tUse an extended version of ByteArrayOutputStream in order to allow access\n+*\tto protected values.\n+******************************************************************************/\n+@Trivial\n+//rename BER output stream\n+public class BEROutputStream extends ByteArrayOutputStream {\n+    private static final TraceComponent tc = Tr.register(BEROutputStream.class);\n+    public final String eol = getSystemProperty(\"line.separator\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8eb410a7b9e39ca438e875a6c8f647157cb377c"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDg4ODE3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/BEROutputStream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTowMzo0NVrOGVDcjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTowMzo0NVrOGVDcjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyOTc0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (this.toString(\"UTF-8\").contains(eol)) {\n          \n          \n            \n                        if (this.toString(\"UTF-8\").contains(System.lineSeparator())) {", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424729743", "createdAt": "2020-05-13T21:03:45Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/BEROutputStream.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.wim.adapter.ldap;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+\n+/******************************************************************************\n+*\tUse an extended version of ByteArrayOutputStream in order to allow access\n+*\tto protected values.\n+******************************************************************************/\n+@Trivial\n+//rename BER output stream\n+public class BEROutputStream extends ByteArrayOutputStream {\n+    private static final TraceComponent tc = Tr.register(BEROutputStream.class);\n+    public final String eol = getSystemProperty(\"line.separator\");\n+    @Override\n+    public void write(int b) {\n+        String METHODNAME = \"write(int b)\";\n+        super.write(b);\n+        try {\n+            if (this.toString(\"UTF-8\").contains(eol)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8eb410a7b9e39ca438e875a6c8f647157cb377c"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDg4ODgyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/BEROutputStream.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTowNDowMFrOGVDdAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTowNjoyMVrOGVDhdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyOTg1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (this.toString(\"UTF-8\").contains(eol)) {\n          \n          \n            \n                        if (this.toString(\"UTF-8\").contains(System.lineSeparator())) {", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424729856", "createdAt": "2020-05-13T21:04:00Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/BEROutputStream.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.wim.adapter.ldap;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+\n+/******************************************************************************\n+*\tUse an extended version of ByteArrayOutputStream in order to allow access\n+*\tto protected values.\n+******************************************************************************/\n+@Trivial\n+//rename BER output stream\n+public class BEROutputStream extends ByteArrayOutputStream {\n+    private static final TraceComponent tc = Tr.register(BEROutputStream.class);\n+    public final String eol = getSystemProperty(\"line.separator\");\n+    @Override\n+    public void write(int b) {\n+        String METHODNAME = \"write(int b)\";\n+        super.write(b);\n+        try {\n+            if (this.toString(\"UTF-8\").contains(eol)) {\n+                try {\n+                    super.writeTo(System.out);\n+                    super.reset();\n+                } catch (IOException e) {\n+                    if (tc.isDebugEnabled())\n+                        Tr.debug(tc, METHODNAME + \" Cannot write to System out: \" + e.toString());\n+                }\n+            }\n+        } catch (UnsupportedEncodingException e) {\n+            if (tc.isDebugEnabled())\n+                Tr.debug(tc, METHODNAME + \" UTF-8 is not a valid encoding: \" + e.toString());\n+        }\n+    }\n+\n+    @Override\n+    public void write(byte[] b, int off, int len) {\n+        String METHODNAME = \"write(byte[] b, int off, int len)\";\n+        super.write(b, off, len);\n+        try {\n+            if (this.toString(\"UTF-8\").contains(eol)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8eb410a7b9e39ca438e875a6c8f647157cb377c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMDk5Ng==", "bodyText": "I also wonder if the BER output uses different line separators on windows vs unix? Have you tested on both?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424730996", "createdAt": "2020-05-13T21:06:21Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/BEROutputStream.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.wim.adapter.ldap;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+\n+/******************************************************************************\n+*\tUse an extended version of ByteArrayOutputStream in order to allow access\n+*\tto protected values.\n+******************************************************************************/\n+@Trivial\n+//rename BER output stream\n+public class BEROutputStream extends ByteArrayOutputStream {\n+    private static final TraceComponent tc = Tr.register(BEROutputStream.class);\n+    public final String eol = getSystemProperty(\"line.separator\");\n+    @Override\n+    public void write(int b) {\n+        String METHODNAME = \"write(int b)\";\n+        super.write(b);\n+        try {\n+            if (this.toString(\"UTF-8\").contains(eol)) {\n+                try {\n+                    super.writeTo(System.out);\n+                    super.reset();\n+                } catch (IOException e) {\n+                    if (tc.isDebugEnabled())\n+                        Tr.debug(tc, METHODNAME + \" Cannot write to System out: \" + e.toString());\n+                }\n+            }\n+        } catch (UnsupportedEncodingException e) {\n+            if (tc.isDebugEnabled())\n+                Tr.debug(tc, METHODNAME + \" UTF-8 is not a valid encoding: \" + e.toString());\n+        }\n+    }\n+\n+    @Override\n+    public void write(byte[] b, int off, int len) {\n+        String METHODNAME = \"write(byte[] b, int off, int len)\";\n+        super.write(b, off, len);\n+        try {\n+            if (this.toString(\"UTF-8\").contains(eol)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyOTg1Ng=="}, "originalCommit": {"oid": "c8eb410a7b9e39ca438e875a6c8f647157cb377c"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDg5MTEwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/BEROutputStream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTowNDo1MFrOGVDecQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTowNDo1MFrOGVDecQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMDIyNQ==", "bodyText": "Delete this method. Use System.lineSeparator() instead.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424730225", "createdAt": "2020-05-13T21:04:50Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/BEROutputStream.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.wim.adapter.ldap;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+\n+/******************************************************************************\n+*\tUse an extended version of ByteArrayOutputStream in order to allow access\n+*\tto protected values.\n+******************************************************************************/\n+@Trivial\n+//rename BER output stream\n+public class BEROutputStream extends ByteArrayOutputStream {\n+    private static final TraceComponent tc = Tr.register(BEROutputStream.class);\n+    public final String eol = getSystemProperty(\"line.separator\");\n+    @Override\n+    public void write(int b) {\n+        String METHODNAME = \"write(int b)\";\n+        super.write(b);\n+        try {\n+            if (this.toString(\"UTF-8\").contains(eol)) {\n+                try {\n+                    super.writeTo(System.out);\n+                    super.reset();\n+                } catch (IOException e) {\n+                    if (tc.isDebugEnabled())\n+                        Tr.debug(tc, METHODNAME + \" Cannot write to System out: \" + e.toString());\n+                }\n+            }\n+        } catch (UnsupportedEncodingException e) {\n+            if (tc.isDebugEnabled())\n+                Tr.debug(tc, METHODNAME + \" UTF-8 is not a valid encoding: \" + e.toString());\n+        }\n+    }\n+\n+    @Override\n+    public void write(byte[] b, int off, int len) {\n+        String METHODNAME = \"write(byte[] b, int off, int len)\";\n+        super.write(b, off, len);\n+        try {\n+            if (this.toString(\"UTF-8\").contains(eol)) {\n+                try {\n+                    super.writeTo(System.out);\n+                    super.reset();\n+                } catch (IOException e) {\n+                    if (tc.isDebugEnabled())\n+                        Tr.debug(tc, METHODNAME + \" Cannot write to System out: \" + e.toString());\n+                }\n+            }\n+        } catch (UnsupportedEncodingException e) {\n+            if (tc.isDebugEnabled())\n+                Tr.debug(tc, METHODNAME + \" UTF-8 is not a valid encoding: \" + e.toString());\n+        }\n+    }\n+\n+    @Override\n+    public void write(byte[] b) {\n+        write(b, 0, b.length);\n+    }\n+\n+    /**\n+     * Convenience method to get a system property using\n+     * {@link AccessController#doPrivileged(PrivilegedAction)}.\n+     *\n+     * @param property The property to retrieve.\n+     * @return The value returned from {@link System#getProperty(String)}.\n+     */\n+    @Trivial\n+    public static String getSystemProperty(final String property) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8eb410a7b9e39ca438e875a6c8f647157cb377c"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDg5NzcwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/BEROutputStream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTowNzowMFrOGVDifg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTowNzowMFrOGVDifg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMTI2Mg==", "bodyText": "Better Javadoc. Describe what the purpose of the class is.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424731262", "createdAt": "2020-05-13T21:07:00Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/BEROutputStream.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.wim.adapter.ldap;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+\n+/******************************************************************************\n+*\tUse an extended version of ByteArrayOutputStream in order to allow access", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8eb410a7b9e39ca438e875a6c8f647157cb377c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDkwMDU2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/resources/OSGI-INF/metatype/metatype.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTowNzo1MVrOGVDkOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTowNzo1MVrOGVDkOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMTcwNA==", "bodyText": "default=false?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424731704", "createdAt": "2020-05-13T21:07:51Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/resources/OSGI-INF/metatype/metatype.xml", "diffHunk": "@@ -57,6 +57,8 @@\n             type=\"String\" default=\"${count(sslRef)}\"/>\n         <AD id=\"SSLSupport.target\" name=\"internal\" description=\"internal use only\"\n             type=\"String\" default=\"(repertoirePIDs=${sslRef})\"/>\n+\t\t<AD id=\"jndiOutputEnabled\" name=\"internal\" description=\"internal use only\"\n+            required=\"false\" type=\"Boolean\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8eb410a7b9e39ca438e875a6c8f647157cb377c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDkwMjY3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTowODozNVrOGVDlew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTowODozNVrOGVDlew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMjAyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * Set the LDAP read time out.\n          \n          \n            \n                     * Enabled JNDI BER output if required.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424732027", "createdAt": "2020-05-13T21:08:35Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -1056,6 +1066,16 @@ public InitializeResult initialize() throws WIMApplicationException {\n             iEnvironment.put(LDAP_ENV_PROP_READ_TIMEOUT, String.valueOf(DEFAULT_READ_TIMEOUT));\n         }\n \n+        /*\n+         * Set the LDAP read time out.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8eb410a7b9e39ca438e875a6c8f647157cb377c"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDkwNTc3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTowOTo0MFrOGVDneg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTowOTo0MFrOGVDneg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMjUzOA==", "bodyText": "Doesn't seem we should need this to be class level. Just add create it when you add it to the env.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424732538", "createdAt": "2020-05-13T21:09:40Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -227,6 +235,8 @@\n     /** Write to secondary server configuration. */\n     private boolean iWriteToSecondary = false;\n \n+    /** Buffer stream for catching JNDI output */\n+    BEROutputStream bapos = new BEROutputStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8eb410a7b9e39ca438e875a6c8f647157cb377c"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDkwNjcxOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxMDowMlrOGVDoIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxMDoyN1rOGVDpDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMjcwNg==", "bodyText": "Why do we need this in a PrintStream?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424732706", "createdAt": "2020-05-13T21:10:02Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -1056,6 +1066,16 @@ public InitializeResult initialize() throws WIMApplicationException {\n             iEnvironment.put(LDAP_ENV_PROP_READ_TIMEOUT, String.valueOf(DEFAULT_READ_TIMEOUT));\n         }\n \n+        /*\n+         * Set the LDAP read time out.\n+         */\n+        if (iJndiOutputEnabled != null && iJndiOutputEnabled) {\n+            synchronized (iLock) {\n+                PrintStream Stdout = new PrintStream(bapos);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8eb410a7b9e39ca438e875a6c8f647157cb377c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMjk0Mg==", "bodyText": "bapos should not be class level, create it here.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424732942", "createdAt": "2020-05-13T21:10:27Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -1056,6 +1066,16 @@ public InitializeResult initialize() throws WIMApplicationException {\n             iEnvironment.put(LDAP_ENV_PROP_READ_TIMEOUT, String.valueOf(DEFAULT_READ_TIMEOUT));\n         }\n \n+        /*\n+         * Set the LDAP read time out.\n+         */\n+        if (iJndiOutputEnabled != null && iJndiOutputEnabled) {\n+            synchronized (iLock) {\n+                PrintStream Stdout = new PrintStream(bapos);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMjcwNg=="}, "originalCommit": {"oid": "c8eb410a7b9e39ca438e875a6c8f647157cb377c"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDkwOTYzOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxMDo0NFrOGVDp0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxMDo0NFrOGVDp0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMzEzOA==", "bodyText": "We shouldn't need to do this here.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424733138", "createdAt": "2020-05-13T21:10:44Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -1232,6 +1252,18 @@ public TimedDirContext reCreateDirContext(TimedDirContext oldCtx, String errorMe\n     @FFDCIgnore(NamingException.class)\n     public void releaseDirContext(TimedDirContext ctx) throws WIMSystemException {\n         final String METHODNAME = \"releaseDirContext\";\n+        if (iJndiOutputEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8eb410a7b9e39ca438e875a6c8f647157cb377c"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDkxNDI2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxMjoyM1rOGVDs7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxMjoyM1rOGVDs7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMzkzNA==", "bodyText": "probably don't need to setup a context pool.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424733934", "createdAt": "2020-05-13T21:12:23Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ConfigElementList;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.ContextPool;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Ensure we're printing out the JNDI BER packets when expected.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class JNDIOutputTest {\n+\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.jndi.output\");\n+    private static final Class<?> c = JNDIOutputTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String SUB_DN = \"o=ibm,c=us\";\n+    private static final String USER_BASE_DN = \"ou=TestUsers,ou=Test,o=ibm,c=us\";\n+    private static final String USER = \"user\";\n+    private static final String USER_DN = \"uid=\" + USER + \",\" + USER_BASE_DN;\n+    private static final String PWD = \"usrpwd\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+        updateLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer();\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        emptyConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(SUB_DN);\n+\n+        Entry entry = new Entry(SUB_DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+        /*\n+         * Add the partition entries.\n+         */\n+        entry = new Entry(\"ou=Test,o=ibm,c=us\");\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_BASE_DN);\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        entry.addAttribute(\"ou\", \"TestUsers\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", USER);\n+        entry.addAttribute(\"sn\", USER);\n+        entry.addAttribute(\"cn\", USER);\n+        entry.addAttribute(\"userPassword\", PWD);\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer() throws Exception {\n+        ServerConfiguration server = emptyConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+        ldap.setId(\"ldap1\");\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(SUB_DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ContextPool cp = new ContextPool(true, 0, 2, 1, \"2s\", \"5s\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8eb410a7b9e39ca438e875a6c8f647157cb377c"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDkxNjk1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxMzoxMlrOGVDuqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxMzoxMlrOGVDuqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNDM3Nw==", "bodyText": "probably should disable attributes cache as well. You want to hit your BEROutputStream as much as you can in the test.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424734377", "createdAt": "2020-05-13T21:13:12Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ConfigElementList;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.ContextPool;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Ensure we're printing out the JNDI BER packets when expected.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class JNDIOutputTest {\n+\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.jndi.output\");\n+    private static final Class<?> c = JNDIOutputTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String SUB_DN = \"o=ibm,c=us\";\n+    private static final String USER_BASE_DN = \"ou=TestUsers,ou=Test,o=ibm,c=us\";\n+    private static final String USER = \"user\";\n+    private static final String USER_DN = \"uid=\" + USER + \",\" + USER_BASE_DN;\n+    private static final String PWD = \"usrpwd\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+        updateLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer();\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        emptyConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(SUB_DN);\n+\n+        Entry entry = new Entry(SUB_DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+        /*\n+         * Add the partition entries.\n+         */\n+        entry = new Entry(\"ou=Test,o=ibm,c=us\");\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_BASE_DN);\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        entry.addAttribute(\"ou\", \"TestUsers\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", USER);\n+        entry.addAttribute(\"sn\", USER);\n+        entry.addAttribute(\"cn\", USER);\n+        entry.addAttribute(\"userPassword\", PWD);\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer() throws Exception {\n+        ServerConfiguration server = emptyConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+        ldap.setId(\"ldap1\");\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(SUB_DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ContextPool cp = new ContextPool(true, 0, 2, 1, \"2s\", \"5s\");\n+        ldap.setContextPool(cp);\n+        SearchResultsCache src = new SearchResultsCache();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8eb410a7b9e39ca438e875a6c8f647157cb377c"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDkxNzc4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxMzozMVrOGVDvIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxMzozMVrOGVDvIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNDQ5OQ==", "bodyText": "This javadoc comment is outdated.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424734499", "createdAt": "2020-05-13T21:13:31Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ConfigElementList;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.ContextPool;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Ensure we're printing out the JNDI BER packets when expected.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class JNDIOutputTest {\n+\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.jndi.output\");\n+    private static final Class<?> c = JNDIOutputTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String SUB_DN = \"o=ibm,c=us\";\n+    private static final String USER_BASE_DN = \"ou=TestUsers,ou=Test,o=ibm,c=us\";\n+    private static final String USER = \"user\";\n+    private static final String USER_DN = \"uid=\" + USER + \",\" + USER_BASE_DN;\n+    private static final String PWD = \"usrpwd\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+        updateLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer();\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        emptyConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(SUB_DN);\n+\n+        Entry entry = new Entry(SUB_DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+        /*\n+         * Add the partition entries.\n+         */\n+        entry = new Entry(\"ou=Test,o=ibm,c=us\");\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_BASE_DN);\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        entry.addAttribute(\"ou\", \"TestUsers\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", USER);\n+        entry.addAttribute(\"sn\", USER);\n+        entry.addAttribute(\"cn\", USER);\n+        entry.addAttribute(\"userPassword\", PWD);\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer() throws Exception {\n+        ServerConfiguration server = emptyConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+        ldap.setId(\"ldap1\");\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(SUB_DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ContextPool cp = new ContextPool(true, 0, 2, 1, \"2s\", \"5s\");\n+        ldap.setContextPool(cp);\n+        SearchResultsCache src = new SearchResultsCache();\n+        src.setEnabled(false); // disable search cache so we can look up the same user over and over again\n+        ldap.setLdapCache(new LdapCache(null, src));\n+\n+        server.getLdapRegistries().add(ldap);\n+        updateConfigDynamically(libertyServer, server);\n+\n+    }\n+\n+    /**\n+     *\n+     * Check that we hit the timeout block of code for the context pool", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8eb410a7b9e39ca438e875a6c8f647157cb377c"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDkyMjg2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxNTowOFrOGVDyaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxNTowOFrOGVDyaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNTMzNg==", "bodyText": "maybe search for a few items from the BER output if possible.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424735336", "createdAt": "2020-05-13T21:15:08Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ConfigElementList;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.ContextPool;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Ensure we're printing out the JNDI BER packets when expected.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class JNDIOutputTest {\n+\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.jndi.output\");\n+    private static final Class<?> c = JNDIOutputTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String SUB_DN = \"o=ibm,c=us\";\n+    private static final String USER_BASE_DN = \"ou=TestUsers,ou=Test,o=ibm,c=us\";\n+    private static final String USER = \"user\";\n+    private static final String USER_DN = \"uid=\" + USER + \",\" + USER_BASE_DN;\n+    private static final String PWD = \"usrpwd\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+        updateLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer();\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        emptyConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(SUB_DN);\n+\n+        Entry entry = new Entry(SUB_DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+        /*\n+         * Add the partition entries.\n+         */\n+        entry = new Entry(\"ou=Test,o=ibm,c=us\");\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_BASE_DN);\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        entry.addAttribute(\"ou\", \"TestUsers\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", USER);\n+        entry.addAttribute(\"sn\", USER);\n+        entry.addAttribute(\"cn\", USER);\n+        entry.addAttribute(\"userPassword\", PWD);\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer() throws Exception {\n+        ServerConfiguration server = emptyConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+        ldap.setId(\"ldap1\");\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(SUB_DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ContextPool cp = new ContextPool(true, 0, 2, 1, \"2s\", \"5s\");\n+        ldap.setContextPool(cp);\n+        SearchResultsCache src = new SearchResultsCache();\n+        src.setEnabled(false); // disable search cache so we can look up the same user over and over again\n+        ldap.setLdapCache(new LdapCache(null, src));\n+\n+        server.getLdapRegistries().add(ldap);\n+        updateConfigDynamically(libertyServer, server);\n+\n+    }\n+\n+    /**\n+     *\n+     * Check that we hit the timeout block of code for the context pool\n+     */\n+    @Test\n+    public void testJNDIBEROutput() throws Exception {\n+        String trace = \"-> localhost\"; // depends on trace logged in LdapConnection.getDirContext", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8eb410a7b9e39ca438e875a6c8f647157cb377c"}, "originalPosition": 212}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDkyNTc3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxNjowMVrOGVD0Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxNjowMVrOGVD0Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNTc5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Send in setting less than 1 second. Should run up to 1 second.\n          \n          \n            \n                    /*\n          \n          \n            \n                     * Enable JNDI BER trace output.\n          \n          \n            \n                     */", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424735790", "createdAt": "2020-05-13T21:16:01Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ConfigElementList;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.ContextPool;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Ensure we're printing out the JNDI BER packets when expected.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class JNDIOutputTest {\n+\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.jndi.output\");\n+    private static final Class<?> c = JNDIOutputTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String SUB_DN = \"o=ibm,c=us\";\n+    private static final String USER_BASE_DN = \"ou=TestUsers,ou=Test,o=ibm,c=us\";\n+    private static final String USER = \"user\";\n+    private static final String USER_DN = \"uid=\" + USER + \",\" + USER_BASE_DN;\n+    private static final String PWD = \"usrpwd\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+        updateLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer();\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        emptyConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(SUB_DN);\n+\n+        Entry entry = new Entry(SUB_DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+        /*\n+         * Add the partition entries.\n+         */\n+        entry = new Entry(\"ou=Test,o=ibm,c=us\");\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_BASE_DN);\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        entry.addAttribute(\"ou\", \"TestUsers\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", USER);\n+        entry.addAttribute(\"sn\", USER);\n+        entry.addAttribute(\"cn\", USER);\n+        entry.addAttribute(\"userPassword\", PWD);\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer() throws Exception {\n+        ServerConfiguration server = emptyConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+        ldap.setId(\"ldap1\");\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(SUB_DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ContextPool cp = new ContextPool(true, 0, 2, 1, \"2s\", \"5s\");\n+        ldap.setContextPool(cp);\n+        SearchResultsCache src = new SearchResultsCache();\n+        src.setEnabled(false); // disable search cache so we can look up the same user over and over again\n+        ldap.setLdapCache(new LdapCache(null, src));\n+\n+        server.getLdapRegistries().add(ldap);\n+        updateConfigDynamically(libertyServer, server);\n+\n+    }\n+\n+    /**\n+     *\n+     * Check that we hit the timeout block of code for the context pool\n+     */\n+    @Test\n+    public void testJNDIBEROutput() throws Exception {\n+        String trace = \"-> localhost\"; // depends on trace logged in LdapConnection.getDirContext\n+        String returnUser = servlet.checkPassword(USER_DN, PWD);\n+        List<String> errMsgs = libertyServer.findStringsInLogsAndTrace(trace);\n+        assertTrue(\"Should not find: \" + trace, errMsgs.isEmpty());\n+\n+        // Send in setting less than 1 second. Should run up to 1 second.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8eb410a7b9e39ca438e875a6c8f647157cb377c"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDkyNzA2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxNjoyOFrOGVD1DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxNjoyOFrOGVD1DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNjAxMg==", "bodyText": "/*\n\nRun with JNDI BER trace disabled.\n*/", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r424736012", "createdAt": "2020-05-13T21:16:28Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ConfigElementList;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.ContextPool;\n+import com.ibm.websphere.simplicity.config.wim.LdapCache;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.config.wim.SearchResultsCache;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Ensure we're printing out the JNDI BER packets when expected.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class JNDIOutputTest {\n+\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.jndi.output\");\n+    private static final Class<?> c = JNDIOutputTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String SUB_DN = \"o=ibm,c=us\";\n+    private static final String USER_BASE_DN = \"ou=TestUsers,ou=Test,o=ibm,c=us\";\n+    private static final String USER = \"user\";\n+    private static final String USER_DN = \"uid=\" + USER + \",\" + USER_BASE_DN;\n+    private static final String PWD = \"usrpwd\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+        updateLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer();\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        emptyConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(SUB_DN);\n+\n+        Entry entry = new Entry(SUB_DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+        /*\n+         * Add the partition entries.\n+         */\n+        entry = new Entry(\"ou=Test,o=ibm,c=us\");\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_BASE_DN);\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        entry.addAttribute(\"ou\", \"TestUsers\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", USER);\n+        entry.addAttribute(\"sn\", USER);\n+        entry.addAttribute(\"cn\", USER);\n+        entry.addAttribute(\"userPassword\", PWD);\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer() throws Exception {\n+        ServerConfiguration server = emptyConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+        ldap.setId(\"ldap1\");\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(SUB_DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+        ContextPool cp = new ContextPool(true, 0, 2, 1, \"2s\", \"5s\");\n+        ldap.setContextPool(cp);\n+        SearchResultsCache src = new SearchResultsCache();\n+        src.setEnabled(false); // disable search cache so we can look up the same user over and over again\n+        ldap.setLdapCache(new LdapCache(null, src));\n+\n+        server.getLdapRegistries().add(ldap);\n+        updateConfigDynamically(libertyServer, server);\n+\n+    }\n+\n+    /**\n+     *\n+     * Check that we hit the timeout block of code for the context pool\n+     */\n+    @Test\n+    public void testJNDIBEROutput() throws Exception {\n+        String trace = \"-> localhost\"; // depends on trace logged in LdapConnection.getDirContext\n+        String returnUser = servlet.checkPassword(USER_DN, PWD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8eb410a7b9e39ca438e875a6c8f647157cb377c"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODA3MjM5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTo0ODozNlrOGVitEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTo0ODozNlrOGVitEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0MTg3Mg==", "bodyText": "Copyright date should be updated.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r425241872", "createdAt": "2020-05-14T15:48:36Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -10,6 +10,7 @@\n  *******************************************************************************/\n package com.ibm.ws.security.wim.adapter.ldap.context;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "091db6247c2c693439950e45c397ce00f5dd47a8"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODA3Njk2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTo0OTo0MlrOGViwDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTo0OTo0MlrOGViwDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0MjYzNg==", "bodyText": "Javadoc", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r425242636", "createdAt": "2020-05-14T15:49:42Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -176,6 +181,8 @@\n     /** The initial pool size for the DirContext pool. */\n     private int iInitPoolSize = DEFAULT_INIT_POOL_SIZE;\n \n+    private Boolean iJndiOutputEnabled = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "091db6247c2c693439950e45c397ce00f5dd47a8"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODA5MDQxOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTo1MjozNlrOGVi4hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTo1MjozNlrOGVi4hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0NDgwNA==", "bodyText": "Why do we need to wrap with a PrintStream? BEROutputStream is already an java.io.OutputStream.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r425244804", "createdAt": "2020-05-14T15:52:36Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -1056,6 +1063,17 @@ public InitializeResult initialize() throws WIMApplicationException {\n             iEnvironment.put(LDAP_ENV_PROP_READ_TIMEOUT, String.valueOf(DEFAULT_READ_TIMEOUT));\n         }\n \n+        /*\n+         * Enabled JNDI BER output if required.\n+         */\n+        if (iJndiOutputEnabled != null && iJndiOutputEnabled) {\n+            synchronized (iLock) {\n+                BEROutputStream berOS = new BEROutputStream();\n+                PrintStream Stdout = new PrintStream(berOS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "091db6247c2c693439950e45c397ce00f5dd47a8"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODA5NDYwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapConnection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTo1MzozM1rOGVi7OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTo1MzozM1rOGVi7OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0NTQ5Nw==", "bodyText": "Comment?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r425245497", "createdAt": "2020-05-14T15:53:33Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/LdapConnection.java", "diffHunk": "@@ -409,6 +410,8 @@ private void initializeContextManager(Map<String, Object> configProps) throws WI\n          */\n         iContextManager.setReadTimeout((Long) configProps.get(CONFIG_PROP_READ_TIMEOUT));\n \n+        iContextManager.setJndiOutputEnabled((Boolean) configProps.get(CONFIG_PROP_JNDI_OUTPUT_ENABLED));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "091db6247c2c693439950e45c397ce00f5dd47a8"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODA5OTc2OnYy", "diffSide": "RIGHT", "path": "dev/fattest.simplicity/src/com/ibm/websphere/simplicity/config/wim/LdapRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTo1NDo0M1rOGVi-fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTo1NDo0M1rOGVi-fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0NjMzMw==", "bodyText": "Copyright date above should be 2020.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r425246333", "createdAt": "2020-05-14T15:54:43Z", "author": {"login": "jvanhill"}, "path": "dev/fattest.simplicity/src/com/ibm/websphere/simplicity/config/wim/LdapRegistry.java", "diffHunk": "@@ -45,6 +45,7 @@\n     private LdapFilters idsFilters;\n     private Boolean ignoreCase;\n     private LdapFilters iplanetFilters;\n+    private Boolean jndiOutputEnabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "091db6247c2c693439950e45c397ce00f5dd47a8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODExMTk4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTo1NzoyNVrOGVjGIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTo1Nzo0M1rOGVjHKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0ODI5MA==", "bodyText": "I thought i put a comment about checking for more output, but I don't see it. Is there anything else we can check for? Maybe the incoming and  outgoing, maybe some data?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r425248290", "createdAt": "2020-05-14T15:57:25Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ConfigElementList;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Ensure we're printing out the JNDI BER packets when expected.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class JNDIOutputTest {\n+\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.jndi.output\");\n+    private static final Class<?> c = JNDIOutputTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String SUB_DN = \"o=ibm,c=us\";\n+    private static final String USER_BASE_DN = \"ou=TestUsers,ou=Test,o=ibm,c=us\";\n+    private static final String USER = \"user\";\n+    private static final String USER_DN = \"uid=\" + USER + \",\" + USER_BASE_DN;\n+    private static final String PWD = \"usrpwd\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+        updateLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer();\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        emptyConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(SUB_DN);\n+\n+        Entry entry = new Entry(SUB_DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+        /*\n+         * Add the partition entries.\n+         */\n+        entry = new Entry(\"ou=Test,o=ibm,c=us\");\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_BASE_DN);\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        entry.addAttribute(\"ou\", \"TestUsers\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", USER);\n+        entry.addAttribute(\"sn\", USER);\n+        entry.addAttribute(\"cn\", USER);\n+        entry.addAttribute(\"userPassword\", PWD);\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer() throws Exception {\n+        ServerConfiguration server = emptyConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+        ldap.setId(\"ldap1\");\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(SUB_DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+\n+        server.getLdapRegistries().add(ldap);\n+        updateConfigDynamically(libertyServer, server);\n+\n+    }\n+\n+    /**\n+     *\n+     * Check that we hit the JNDI BER output\n+     */\n+    @Test\n+    public void testJNDIBEROutput() throws Exception {\n+        String trace = \"-> localhost\";\n+\n+        /*\n+         * Run with JNDI BER trace disabled\n+         */\n+        String returnUser = servlet.checkPassword(USER_DN, PWD);\n+        List<String> errMsgs = libertyServer.findStringsInLogsAndTrace(trace);\n+        assertTrue(\"Should not find: \" + trace, errMsgs.isEmpty());\n+\n+        /*\n+         * Enable JNDI BER trace output\n+         */\n+        ServerConfiguration config = libertyServer.getServerConfiguration();\n+        ConfigElementList<LdapRegistry> ldaps = config.getLdapRegistries();\n+        LdapRegistry ldap = null;\n+        if (!ldaps.isEmpty() && ldaps.size() == 1) {\n+            ldap = ldaps.get(0);\n+        }\n+        ldap.setJndiOutputEnabled(true);\n+        updateConfigDynamically(libertyServer, config);\n+        returnUser = servlet.checkPassword(USER_DN, PWD);\n+        errMsgs = libertyServer.findStringsInLogsAndTrace(trace);\n+        assertFalse(\"Should find: \" + trace, errMsgs.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "091db6247c2c693439950e45c397ce00f5dd47a8"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0ODU1NA==", "bodyText": "Need to run with several JREs as well. the trace may be different.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r425248554", "createdAt": "2020-05-14T15:57:43Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap_fat/fat/src/com/ibm/ws/security/wim/adapter/ldap/fat/JNDIOutputTest.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.security.wim.adapter.ldap.fat;\n+\n+import static componenttest.topology.utils.LDAPFatUtils.updateConfigDynamically;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ConfigElementList;\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.config.wim.LdapRegistry;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.com.unboundid.InMemoryLDAPServer;\n+import com.ibm.ws.security.registry.test.UserRegistryServletConnection;\n+import com.unboundid.ldap.sdk.Entry;\n+\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import componenttest.topology.utils.LDAPUtils;\n+\n+/**\n+ * Ensure we're printing out the JNDI BER packets when expected.\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class JNDIOutputTest {\n+\n+    private static LibertyServer libertyServer = LibertyServerFactory.getLibertyServer(\"com.ibm.ws.security.wim.adapter.ldap.fat.jndi.output\");\n+    private static final Class<?> c = JNDIOutputTest.class;\n+    private static UserRegistryServletConnection servlet;\n+\n+    /**\n+     * Nearly empty server configuration. This should just contain the feature manager configuration with no\n+     * registries or federated repository configured.\n+     */\n+    private static ServerConfiguration emptyConfiguration = null;\n+\n+    private static InMemoryLDAPServer ds;\n+    private static final String SUB_DN = \"o=ibm,c=us\";\n+    private static final String USER_BASE_DN = \"ou=TestUsers,ou=Test,o=ibm,c=us\";\n+    private static final String USER = \"user\";\n+    private static final String USER_DN = \"uid=\" + USER + \",\" + USER_BASE_DN;\n+    private static final String PWD = \"usrpwd\";\n+\n+    /**\n+     * Setup the test case.\n+     *\n+     * @throws Exception If the setup failed for some reason.\n+     */\n+    @BeforeClass\n+    public static void setupClass() throws Exception {\n+        setupLibertyServer();\n+        setupldapServer();\n+        updateLibertyServer();\n+    }\n+\n+    /**\n+     * Tear down the test.\n+     */\n+    @AfterClass\n+    public static void teardownClass() throws Exception {\n+        try {\n+            if (libertyServer != null) {\n+                libertyServer.stopServer();\n+            }\n+        } finally {\n+            try {\n+                if (ds != null) {\n+                    ds.shutDown(true);\n+                }\n+            } catch (Exception e) {\n+                Log.error(c, \"teardown\", e, \"LDAP server threw error while shutting down. \" + e.getMessage());\n+            }\n+        }\n+        libertyServer.deleteFileFromLibertyInstallRoot(\"lib/features/internalfeatures/securitylibertyinternals-1.0.mf\");\n+    }\n+\n+    /**\n+     * Setup the Liberty server. This server will start with very basic configuration. The tests\n+     * will configure the server dynamically.\n+     *\n+     * @throws Exception If there was an issue setting up the Liberty server.\n+     */\n+    private static void setupLibertyServer() throws Exception {\n+        /*\n+         * Add LDAP variables to bootstrap properties file\n+         */\n+        LDAPUtils.addLDAPVariables(libertyServer);\n+        Log.info(c, \"setUp\", \"Starting the server... (will wait for userRegistry servlet to start)\");\n+        libertyServer.copyFileToLibertyInstallRoot(\"lib/features\", \"internalfeatures/securitylibertyinternals-1.0.mf\");\n+        libertyServer.addInstalledAppForValidation(\"userRegistry\");\n+        libertyServer.startServer(c.getName() + \".log\");\n+\n+        /*\n+         * Make sure the application has come up before proceeding\n+         */\n+        assertNotNull(\"Application userRegistry does not appear to have started.\",\n+                      libertyServer.waitForStringInLog(\"CWWKZ0001I:.*userRegistry\"));\n+        assertNotNull(\"Security service did not report it was ready\",\n+                      libertyServer.waitForStringInLog(\"CWWKS0008I\"));\n+        assertNotNull(\"Server did not came up\",\n+                      libertyServer.waitForStringInLog(\"CWWKF0011I\"));\n+\n+        Log.info(c, \"setUp\", \"Creating servlet connection the server\");\n+        servlet = new UserRegistryServletConnection(libertyServer.getHostname(), libertyServer.getHttpDefaultPort());\n+\n+        if (servlet.getRealm() == null) {\n+            Thread.sleep(5000);\n+            servlet.getRealm();\n+        }\n+\n+        /*\n+         * The original server configuration has no registry or Federated Repository configuration.\n+         */\n+        emptyConfiguration = libertyServer.getServerConfiguration();\n+    }\n+\n+    /**\n+     * Configure the embedded LDAP server.\n+     *\n+     * @throws Exception If the server failed to start for some reason.\n+     */\n+    private static void setupldapServer() throws Exception {\n+        ds = new InMemoryLDAPServer(SUB_DN);\n+\n+        Entry entry = new Entry(SUB_DN);\n+        entry.addAttribute(\"objectclass\", \"top\");\n+        entry.addAttribute(\"objectclass\", \"domain\");\n+        ds.add(entry);\n+        /*\n+         * Add the partition entries.\n+         */\n+        entry = new Entry(\"ou=Test,o=ibm,c=us\");\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_BASE_DN);\n+        entry.addAttribute(\"objectclass\", \"organizationalunit\");\n+        entry.addAttribute(\"ou\", \"Test\");\n+        entry.addAttribute(\"ou\", \"TestUsers\");\n+        ds.add(entry);\n+\n+        entry = new Entry(USER_DN);\n+        entry.addAttribute(\"objectclass\", \"inetorgperson\");\n+        entry.addAttribute(\"uid\", USER);\n+        entry.addAttribute(\"sn\", USER);\n+        entry.addAttribute(\"cn\", USER);\n+        entry.addAttribute(\"userPassword\", PWD);\n+        ds.add(entry);\n+\n+    }\n+\n+    /**\n+     * Convenience method to configure the Liberty server with an {@link LdapRegistry} configuration that\n+     * will connect to {@link #ldapServer}.\n+     *\n+     * @throws Exception If there was an error configuring the server.\n+     */\n+    private static void updateLibertyServer() throws Exception {\n+        ServerConfiguration server = emptyConfiguration.clone();\n+\n+        LdapRegistry ldap = new LdapRegistry();\n+        ldap.setId(\"ldap1\");\n+        ldap.setRealm(\"LDAPRealm\");\n+        ldap.setHost(\"localhost\");\n+        ldap.setPort(String.valueOf(ds.getLdapPort()));\n+        ldap.setBaseDN(SUB_DN);\n+        ldap.setBindDN(InMemoryLDAPServer.getBindDN());\n+        ldap.setBindPassword(InMemoryLDAPServer.getBindPassword());\n+        ldap.setLdapType(\"Custom\");\n+\n+        server.getLdapRegistries().add(ldap);\n+        updateConfigDynamically(libertyServer, server);\n+\n+    }\n+\n+    /**\n+     *\n+     * Check that we hit the JNDI BER output\n+     */\n+    @Test\n+    public void testJNDIBEROutput() throws Exception {\n+        String trace = \"-> localhost\";\n+\n+        /*\n+         * Run with JNDI BER trace disabled\n+         */\n+        String returnUser = servlet.checkPassword(USER_DN, PWD);\n+        List<String> errMsgs = libertyServer.findStringsInLogsAndTrace(trace);\n+        assertTrue(\"Should not find: \" + trace, errMsgs.isEmpty());\n+\n+        /*\n+         * Enable JNDI BER trace output\n+         */\n+        ServerConfiguration config = libertyServer.getServerConfiguration();\n+        ConfigElementList<LdapRegistry> ldaps = config.getLdapRegistries();\n+        LdapRegistry ldap = null;\n+        if (!ldaps.isEmpty() && ldaps.size() == 1) {\n+            ldap = ldaps.get(0);\n+        }\n+        ldap.setJndiOutputEnabled(true);\n+        updateConfigDynamically(libertyServer, config);\n+        returnUser = servlet.checkPassword(USER_DN, PWD);\n+        errMsgs = libertyServer.findStringsInLogsAndTrace(trace);\n+        assertFalse(\"Should find: \" + trace, errMsgs.isEmpty());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0ODI5MA=="}, "originalCommit": {"oid": "091db6247c2c693439950e45c397ce00f5dd47a8"}, "originalPosition": 226}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTM4NTIwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjowNDoyMlrOGVv08Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjowNDoyMlrOGVv08Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1Njg4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            iEnvironment.put(LDAP_ENV_PROP_JNDI_BER_OUTPUT, berOS);\n          \n          \n            \n                            iEnvironment.put(LDAP_ENV_PROP_JNDI_BER_OUTPUT, berOS);\n          \n      \n    \n    \n  \n\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            iEnvironment.put(LDAP_ENV_PROP_JNDI_BER_OUTPUT, berOS);\n          \n          \n            \n                            iEnvironment.put(LDAP_ENV_PROP_JNDI_BER_OUTPUT, new BEROutputStream());", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r425456881", "createdAt": "2020-05-14T22:04:22Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -1056,6 +1063,18 @@ public InitializeResult initialize() throws WIMApplicationException {\n             iEnvironment.put(LDAP_ENV_PROP_READ_TIMEOUT, String.valueOf(DEFAULT_READ_TIMEOUT));\n         }\n \n+        /*\n+         * Enabled JNDI BER output if required.\n+         */\n+        if (iJndiOutputEnabled != null && iJndiOutputEnabled) {\n+            synchronized (iLock) {\n+                BEROutputStream berOS = new BEROutputStream();\n+                iEnvironment.put(LDAP_ENV_PROP_JNDI_BER_OUTPUT, berOS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0736c4073ad65d52d1303aede275ef1f0a1b44d3"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTM4NTU4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjowNDozMFrOGVv1Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjowNDozMFrOGVv1Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1NjkzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            BEROutputStream berOS = new BEROutputStream();", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r425456934", "createdAt": "2020-05-14T22:04:30Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -1056,6 +1063,18 @@ public InitializeResult initialize() throws WIMApplicationException {\n             iEnvironment.put(LDAP_ENV_PROP_READ_TIMEOUT, String.valueOf(DEFAULT_READ_TIMEOUT));\n         }\n \n+        /*\n+         * Enabled JNDI BER output if required.\n+         */\n+        if (iJndiOutputEnabled != null && iJndiOutputEnabled) {\n+            synchronized (iLock) {\n+                BEROutputStream berOS = new BEROutputStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0736c4073ad65d52d1303aede275ef1f0a1b44d3"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTM4NjQwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjowNDo1MFrOGVv1uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjowNDo1MFrOGVv1uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1NzA4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //                PrintStream Stdout = new PrintStream(berOS);", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r425457083", "createdAt": "2020-05-14T22:04:50Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -1056,6 +1063,18 @@ public InitializeResult initialize() throws WIMApplicationException {\n             iEnvironment.put(LDAP_ENV_PROP_READ_TIMEOUT, String.valueOf(DEFAULT_READ_TIMEOUT));\n         }\n \n+        /*\n+         * Enabled JNDI BER output if required.\n+         */\n+        if (iJndiOutputEnabled != null && iJndiOutputEnabled) {\n+            synchronized (iLock) {\n+                BEROutputStream berOS = new BEROutputStream();\n+                iEnvironment.put(LDAP_ENV_PROP_JNDI_BER_OUTPUT, berOS);\n+//                PrintStream Stdout = new PrintStream(berOS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0736c4073ad65d52d1303aede275ef1f0a1b44d3"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTM4NzE0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjowNTowN1rOGVv2Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMjowNTowN1rOGVv2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ1NzIwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //                iEnvironment.put(LDAP_ENV_PROP_JNDI_BER_OUTPUT, Stdout);", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r425457206", "createdAt": "2020-05-14T22:05:07Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -1056,6 +1063,18 @@ public InitializeResult initialize() throws WIMApplicationException {\n             iEnvironment.put(LDAP_ENV_PROP_READ_TIMEOUT, String.valueOf(DEFAULT_READ_TIMEOUT));\n         }\n \n+        /*\n+         * Enabled JNDI BER output if required.\n+         */\n+        if (iJndiOutputEnabled != null && iJndiOutputEnabled) {\n+            synchronized (iLock) {\n+                BEROutputStream berOS = new BEROutputStream();\n+                iEnvironment.put(LDAP_ENV_PROP_JNDI_BER_OUTPUT, berOS);\n+//                PrintStream Stdout = new PrintStream(berOS);\n+//                iEnvironment.put(LDAP_ENV_PROP_JNDI_BER_OUTPUT, Stdout);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0736c4073ad65d52d1303aede275ef1f0a1b44d3"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTcxMTI0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDo1Mjo1MlrOGVy8mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDo1Mjo1MlrOGVy8mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUwNzk5NA==", "bodyText": "Did I miss this synchronized block? I don't think we need this. We are adding a new instance of the output stream to the environment, so I don't think there are any race conditions here.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12004#discussion_r425507994", "createdAt": "2020-05-15T00:52:52Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.wim.adapter.ldap/src/com/ibm/ws/security/wim/adapter/ldap/context/ContextManager.java", "diffHunk": "@@ -1056,6 +1063,15 @@ public InitializeResult initialize() throws WIMApplicationException {\n             iEnvironment.put(LDAP_ENV_PROP_READ_TIMEOUT, String.valueOf(DEFAULT_READ_TIMEOUT));\n         }\n \n+        /*\n+         * Enabled JNDI BER output if required.\n+         */\n+        if (iJndiOutputEnabled != null && iJndiOutputEnabled) {\n+            synchronized (iLock) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c6a752325dd013e36bcbb70a63b8143a1093473"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1864, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}