{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2NjE3OTc0", "number": 13919, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNTowNzo0NVrOEjL3OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNTowNzo0NVrOEjL3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzI5OTc3OnYy", "diffSide": "RIGHT", "path": "dev/wlp-generateChecksums/src/com/ibm/ws/wlp/cs/GenerateZipChecksums.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNTowNzo0NVrOHRZnVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNTowNzo0NVrOHRZnVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAwNzUwOA==", "bodyText": "Dead code?", "url": "https://github.com/OpenLiberty/open-liberty/pull/13919#discussion_r488007508", "createdAt": "2020-09-14T15:07:45Z", "author": {"login": "mbroz2"}, "path": "dev/wlp-generateChecksums/src/com/ibm/ws/wlp/cs/GenerateZipChecksums.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.wlp.cs;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Properties;\n+\n+import org.apache.tools.ant.BuildException;\n+import org.apache.tools.ant.Task;\n+\n+import com.ibm.ws.kernel.provisioning.ContentBasedLocalBundleRepository;\n+\n+/**\n+ * GenerateChecksums\n+ */\n+public class GenerateZipChecksums extends Task {\n+    //ant task attributes\n+    private File installRoot;\n+    private final String checksumsDirName = \"checksums\";\n+    private boolean ignoreBinFiles = false;\n+\n+    //the ext name of all the checksum files\n+    private static String MD5_FILE_EXT = \"md5\";\n+\n+    //initialed from installRoot when execute\n+    private ContentBasedLocalBundleRepository cblbr;\n+\n+    @Override\n+    public void execute() {\n+\n+        try {\n+            // generate dist zips checksums\n+            generateZipChecksums(installRoot, new File(installRoot, checksumsDirName));\n+\n+        } catch (IOException e) {\n+            throw new BuildException(e);\n+        }\n+    }\n+\n+    /**\n+     * @param dir\n+     * @param checksumsDir\n+     * @throws IOException\n+     */\n+    private void generateZipChecksums(File dir, File checksumsDir) throws IOException {\n+        checksumsDir.mkdirs();\n+        File[] zipFiles = dir.listFiles();\n+        for (File zipFile : zipFiles) {\n+            System.out.println(zipFile.getName());\n+            if (!zipFile.getName().endsWith(\".zip\")) {\n+                continue;\n+            }\n+            //generate the cs file from each packaged zip\n+            String md5Checksum = MD5Utils.getFileMD5String(zipFile);\n+            String fileName = zipFile.getName();\n+            File md5File = new File(checksumsDir, fileName + \".\" + MD5_FILE_EXT);\n+            OutputStream out = null;\n+            try {\n+                out = new FileOutputStream(md5File, false);\n+                byte checksumbytes[] = md5Checksum.getBytes();\n+                out.write(checksumbytes);\n+            } finally {\n+                FileUtils.tryToClose(out);\n+            }\n+        }\n+    }\n+\n+    private void createFile(File file, Properties props) throws IOException {\n+        OutputStream out = null;\n+        try {\n+            out = new FileOutputStream(file, false);\n+            props.store(out, null);\n+        } finally {\n+            FileUtils.tryToClose(out);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d58b3cb88bbeecc5bac3101da4a2f10934339aa1"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2803, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}