{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NDE4NTE3", "number": 10664, "title": "Issue #10563: MissedPersistentTimerAction", "bodyText": "Added support for skipping missed EJB persistent timer expirations\nfor #10563", "createdAt": "2020-01-31T05:34:38Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/10664", "merged": true, "mergeCommit": {"oid": "95a99e58b6e7ee5f09c7bde647034e410ba0c2d7"}, "closed": true, "closedAt": "2020-02-03T19:20:50Z", "author": {"login": "tkburroughs"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_xs3tgBqjI5OTc2OTAxMzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcAxOcAAFqTM1MjQ2NTU5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0d1d1c749303d1e940e702a6dc33fa081f0f70fd", "author": {"user": {"login": "tkburroughs", "name": "Tracy Burroughs"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/0d1d1c749303d1e940e702a6dc33fa081f0f70fd", "committedDate": "2020-01-31T05:30:48Z", "message": "Issue #10563: MissedPersistentTimerAction\n\nAdded support for skipping missed EJB persistent timer expirations"}, "afterCommit": {"oid": "187a50b4bfdc629578555bce8c72eca7beef63ad", "author": {"user": {"login": "tkburroughs", "name": "Tracy Burroughs"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/187a50b4bfdc629578555bce8c72eca7beef63ad", "committedDate": "2020-01-31T16:25:29Z", "message": "Issue #10563: MissedPersistentTimerAction\n\nAdded support for skipping missed EJB persistent timer expirations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNjk2NzYz", "url": "https://github.com/OpenLiberty/open-liberty/pull/10664#pullrequestreview-351696763", "createdAt": "2020-01-31T18:36:39Z", "commit": {"oid": "187a50b4bfdc629578555bce8c72eca7beef63ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODozNjo0MFrOFkUNzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODozNjo0MFrOFkUNzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyNDI3MQ==", "bodyText": "Change \"schedule based\" to \"Change \"schedule-based\"\nChange \"scheduled prior to application server start\" to \"scheduled before application server start\"\nChange \"next expiration is scheduled prior to the current time\" to \"next expiration is scheduled before the current time\"", "url": "https://github.com/OpenLiberty/open-liberty/pull/10664#discussion_r373624271", "createdAt": "2020-01-31T18:36:40Z", "author": {"login": "Rwalls1"}, "path": "dev/com.ibm.ws.ejbcontainer.timer/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -36,3 +36,9 @@ persistentExecutorRef.desc=Schedules and runs EJB persistent timer tasks.\n nonPersistentContextServiceRef=Non-persistent Timer Thread Context Propagation\n nonPersistentContextServiceRef$Ref=Thread context propagation reference\n nonPersistentContextServiceRef.desc=The context service is used to manage context propagation to non-persistent timer method threads.\n+\n+missedPersistentTimerAction=Missed persistent timer action\n+missedPersistentTimerAction.desc=Specifies the action to perform when the expiration of an interval or schedule based persistent timer is missed. One or more expirations of a persistent timer are classified as missed if the current expiration is scheduled prior to application server start or the next expiration is scheduled prior to the current time. The default action when failover of persistent timers is enabled is ONCE, otherwise the default action is ALL.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187a50b4bfdc629578555bce8c72eca7beef63ad"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNjk5MzYz", "url": "https://github.com/OpenLiberty/open-liberty/pull/10664#pullrequestreview-351699363", "createdAt": "2020-01-31T18:41:22Z", "commit": {"oid": "187a50b4bfdc629578555bce8c72eca7beef63ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODo0MToyM1rOFkUWIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODo0MToyM1rOFkUWIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyNjQwMA==", "bodyText": "Change \"When multiple expirations have been missed\" to \"When multiple expirations are missed\".\nChange \"each invocation will occur\" to \"each invocation occurs\".\nChange \"missed expirations have been processed\" to \"missed expirations are processed\".\nChange \"timer will resume\" to \"timer resumes\".", "url": "https://github.com/OpenLiberty/open-liberty/pull/10664#discussion_r373626400", "createdAt": "2020-01-31T18:41:23Z", "author": {"login": "Rwalls1"}, "path": "dev/com.ibm.ws.ejbcontainer.timer/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -36,3 +36,9 @@ persistentExecutorRef.desc=Schedules and runs EJB persistent timer tasks.\n nonPersistentContextServiceRef=Non-persistent Timer Thread Context Propagation\n nonPersistentContextServiceRef$Ref=Thread context propagation reference\n nonPersistentContextServiceRef.desc=The context service is used to manage context propagation to non-persistent timer method threads.\n+\n+missedPersistentTimerAction=Missed persistent timer action\n+missedPersistentTimerAction.desc=Specifies the action to perform when the expiration of an interval or schedule based persistent timer is missed. One or more expirations of a persistent timer are classified as missed if the current expiration is scheduled prior to application server start or the next expiration is scheduled prior to the current time. The default action when failover of persistent timers is enabled is ONCE, otherwise the default action is ALL.\n+missedPersistentTimerAction.ALL=The timeout method is invoked immediately for all missed expirations. When multiple expirations have been missed for the same timer, each invocation will occur synchronously until all missed expirations have been processed, then the timer will resume with the next future expiration. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187a50b4bfdc629578555bce8c72eca7beef63ad"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNzAwOTY1", "url": "https://github.com/OpenLiberty/open-liberty/pull/10664#pullrequestreview-351700965", "createdAt": "2020-01-31T18:44:07Z", "commit": {"oid": "187a50b4bfdc629578555bce8c72eca7beef63ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODo0NDowOFrOFkUbAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODo0NDowOFrOFkUbAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyNzY0OQ==", "bodyText": "Change \"timer will resume\" to \"timer resumes\".", "url": "https://github.com/OpenLiberty/open-liberty/pull/10664#discussion_r373627649", "createdAt": "2020-01-31T18:44:08Z", "author": {"login": "Rwalls1"}, "path": "dev/com.ibm.ws.ejbcontainer.timer/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -36,3 +36,9 @@ persistentExecutorRef.desc=Schedules and runs EJB persistent timer tasks.\n nonPersistentContextServiceRef=Non-persistent Timer Thread Context Propagation\n nonPersistentContextServiceRef$Ref=Thread context propagation reference\n nonPersistentContextServiceRef.desc=The context service is used to manage context propagation to non-persistent timer method threads.\n+\n+missedPersistentTimerAction=Missed persistent timer action\n+missedPersistentTimerAction.desc=Specifies the action to perform when the expiration of an interval or schedule based persistent timer is missed. One or more expirations of a persistent timer are classified as missed if the current expiration is scheduled prior to application server start or the next expiration is scheduled prior to the current time. The default action when failover of persistent timers is enabled is ONCE, otherwise the default action is ALL.\n+missedPersistentTimerAction.ALL=The timeout method is invoked immediately for all missed expirations. When multiple expirations have been missed for the same timer, each invocation will occur synchronously until all missed expirations have been processed, then the timer will resume with the next future expiration. \n+missedPersistentTimerAction.ONCE=The timeout method is invoked once immediately. All other missed expirations are skipped and the timer will resume with the next future expiration. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187a50b4bfdc629578555bce8c72eca7beef63ad"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNzAyODE2", "url": "https://github.com/OpenLiberty/open-liberty/pull/10664#pullrequestreview-351702816", "createdAt": "2020-01-31T18:47:18Z", "commit": {"oid": "187a50b4bfdc629578555bce8c72eca7beef63ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODo0NzoxOFrOFkUgqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODo0NzoxOFrOFkUgqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyOTA5OA==", "bodyText": "Change \"occurred prior to application server start\" to \"occurred before application server start\".\nChange \"the timer will resume \" to \"the timer resumes\".", "url": "https://github.com/OpenLiberty/open-liberty/pull/10664#discussion_r373629098", "createdAt": "2020-01-31T18:47:18Z", "author": {"login": "Rwalls1"}, "path": "dev/com.ibm.ws.ejbcontainer.timer/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -36,3 +36,9 @@ persistentExecutorRef.desc=Schedules and runs EJB persistent timer tasks.\n nonPersistentContextServiceRef=Non-persistent Timer Thread Context Propagation\n nonPersistentContextServiceRef$Ref=Thread context propagation reference\n nonPersistentContextServiceRef.desc=The context service is used to manage context propagation to non-persistent timer method threads.\n+\n+missedPersistentTimerAction=Missed persistent timer action\n+missedPersistentTimerAction.desc=Specifies the action to perform when the expiration of an interval or schedule based persistent timer is missed. One or more expirations of a persistent timer are classified as missed if the current expiration is scheduled prior to application server start or the next expiration is scheduled prior to the current time. The default action when failover of persistent timers is enabled is ONCE, otherwise the default action is ALL.\n+missedPersistentTimerAction.ALL=The timeout method is invoked immediately for all missed expirations. When multiple expirations have been missed for the same timer, each invocation will occur synchronously until all missed expirations have been processed, then the timer will resume with the next future expiration. \n+missedPersistentTimerAction.ONCE=The timeout method is invoked once immediately. All other missed expirations are skipped and the timer will resume with the next future expiration. \n+missedPersistentTimerAction.NONE=No action is taken. All missed expirations that occurred prior to application server start are skipped and the timer will resume with the next future expiration. Missed expirations that occur after application server start are handled with the ONCE missed timer action.   ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187a50b4bfdc629578555bce8c72eca7beef63ad"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNzAzNzkz", "url": "https://github.com/OpenLiberty/open-liberty/pull/10664#pullrequestreview-351703793", "createdAt": "2020-01-31T18:49:02Z", "commit": {"oid": "187a50b4bfdc629578555bce8c72eca7beef63ad"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "187a50b4bfdc629578555bce8c72eca7beef63ad", "author": {"user": {"login": "tkburroughs", "name": "Tracy Burroughs"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/187a50b4bfdc629578555bce8c72eca7beef63ad", "committedDate": "2020-01-31T16:25:29Z", "message": "Issue #10563: MissedPersistentTimerAction\n\nAdded support for skipping missed EJB persistent timer expirations"}, "afterCommit": {"oid": "07093ee6d658d36fa308a663bb85a50f49a9bed3", "author": {"user": {"login": "tkburroughs", "name": "Tracy Burroughs"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/07093ee6d658d36fa308a663bb85a50f49a9bed3", "committedDate": "2020-01-31T20:30:20Z", "message": "Issue #10563: MissedPersistentTimerAction\n\nAdded support for skipping missed EJB persistent timer expirations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNzc5MzI2", "url": "https://github.com/OpenLiberty/open-liberty/pull/10664#pullrequestreview-351779326", "createdAt": "2020-01-31T21:10:08Z", "commit": {"oid": "07093ee6d658d36fa308a663bb85a50f49a9bed3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMToxMDowOVrOFkYB1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMToxMDowOVrOFkYB1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY4Njc0MQ==", "bodyText": "MissedTimerAction.valueOf(missedTimerActionProperty.toUpperCase())\n^ depending on if kernel lets metatype values be case insensitive.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10664#discussion_r373686741", "createdAt": "2020-01-31T21:10:09Z", "author": {"login": "olendvcook"}, "path": "dev/com.ibm.ws.ejbcontainer.timer.persistent/src/com/ibm/ws/ejbcontainer/timer/persistent/osgi/internal/EJBPersistentTimerRuntimeImpl.java", "diffHunk": "@@ -118,6 +131,14 @@ protected void modified(ComponentContext cc, Map<String, Object> properties) {\n \n     private void updateConfiguration(Map<String, Object> properties) {\n \n+        // Read the missedPersistentTimerAction configuration; do not set a default as\n+        // that will vary based on whether the PersistentExecutor has failover enabled\n+        String missedTimerActionProperty = (String) properties.get(MISSED_TIMER_ACTION);\n+        missedTimerAction = (missedTimerActionProperty != null) ? MissedTimerAction.valueOf(missedTimerActionProperty) : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07093ee6d658d36fa308a663bb85a50f49a9bed3"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxODA4MTI2", "url": "https://github.com/OpenLiberty/open-liberty/pull/10664#pullrequestreview-351808126", "createdAt": "2020-01-31T22:12:43Z", "commit": {"oid": "07093ee6d658d36fa308a663bb85a50f49a9bed3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94a9e2c2a03c7fdfd8f6c4270d46e2ac62128662", "author": {"user": {"login": "tkburroughs", "name": "Tracy Burroughs"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/94a9e2c2a03c7fdfd8f6c4270d46e2ac62128662", "committedDate": "2020-02-01T17:52:43Z", "message": "Issue #10563: MissedPersistentTimerAction\n\nAdded support for skipping missed EJB persistent timer expirations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "07093ee6d658d36fa308a663bb85a50f49a9bed3", "author": {"user": {"login": "tkburroughs", "name": "Tracy Burroughs"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/07093ee6d658d36fa308a663bb85a50f49a9bed3", "committedDate": "2020-01-31T20:30:20Z", "message": "Issue #10563: MissedPersistentTimerAction\n\nAdded support for skipping missed EJB persistent timer expirations"}, "afterCommit": {"oid": "94a9e2c2a03c7fdfd8f6c4270d46e2ac62128662", "author": {"user": {"login": "tkburroughs", "name": "Tracy Burroughs"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/94a9e2c2a03c7fdfd8f6c4270d46e2ac62128662", "committedDate": "2020-02-01T17:52:43Z", "message": "Issue #10563: MissedPersistentTimerAction\n\nAdded support for skipping missed EJB persistent timer expirations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMzIyNTM3", "url": "https://github.com/OpenLiberty/open-liberty/pull/10664#pullrequestreview-352322537", "createdAt": "2020-02-03T15:07:14Z", "commit": {"oid": "94a9e2c2a03c7fdfd8f6c4270d46e2ac62128662"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNDYyMDM4", "url": "https://github.com/OpenLiberty/open-liberty/pull/10664#pullrequestreview-352462038", "createdAt": "2020-02-03T18:21:33Z", "commit": {"oid": "94a9e2c2a03c7fdfd8f6c4270d46e2ac62128662"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODoyMTozNFrOFk7IJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODoyMTozNFrOFk7IJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2MTc5OA==", "bodyText": "Copy/paste error -- comment should read \"NONE\"", "url": "https://github.com/OpenLiberty/open-liberty/pull/10664#discussion_r374261798", "createdAt": "2020-02-03T18:21:34Z", "author": {"login": "brideck"}, "path": "dev/com.ibm.ws.ejbcontainer.timer.persistent_fat/fat/src/com/ibm/ws/ejbcontainer/timer/persistent/fat/tests/PersistentTimerCoreTest.java", "diffHunk": "@@ -185,4 +220,214 @@ private static void setLateTimerThresholdConfiguration(Long lateTimerThreshold)\n         }\n     }\n \n+    //-----------------------------------------------------\n+    // --------------MissedTimerActionServlet--------------\n+    //-----------------------------------------------------\n+\n+    /**\n+     * Test Persistent Timer missed action default behavior when failover has not been enabled.\n+     * The default behavior without failover should be ALL. <p>\n+     *\n+     * This test will confirm the following :\n+     * <ol>\n+     * <li> Interval timer will run all expirations despite a delay that causes several to be missed.\n+     * <li> Timer.getNextTimeout() will return values in the past for missed expirations.\n+     * </ol>\n+     */\n+    @Test\n+    public void testMissedTimerActionDefaultNoFailover() throws Exception {\n+        // Default when no failover is ALL\n+        testMissedTimerAction(null, false);\n+    }\n+\n+    /**\n+     * Test Persistent Timer missed action default behavior when failover has been enabled.\n+     * The default behavior with failover should be ONCE. <p>\n+     *\n+     * This test will confirm the following :\n+     * <ol>\n+     * <li> Interval timer will skip expirations missed because of a delay.\n+     * <li> Timer.getNextTimeout() will return values in the future; skipping missed expirations.\n+     * </ol>\n+     */\n+    @Test\n+    public void testMissedTimerActionDefaultWithFailover() throws Exception {\n+        // Default when failover is enabled is ONCE\n+        testMissedTimerAction(null, true);\n+    }\n+\n+    /**\n+     * Test Persistent Timer missed action \"ALL\" behavior when failover has not been enabled. <p>\n+     *\n+     * This test will confirm the following :\n+     * <ol>\n+     * <li> Interval timer will run all expirations despite a delay that causes several to be missed.\n+     * <li> Timer.getNextTimeout() will return values in the past for missed expirations.\n+     * </ol>\n+     */\n+    @Test\n+    @Mode(Mode.TestMode.FULL)\n+    public void testMissedTimerActionAllNoFailover() throws Exception {\n+        testMissedTimerAction(\"ALL\", false);\n+    }\n+\n+    /**\n+     * Test Persistent Timer missed action \"ALL\" behavior when failover has been enabled. <p>\n+     *\n+     * This test will confirm the following :\n+     * <ol>\n+     * <li> Interval timer will run all expirations despite a delay that causes several to be missed.\n+     * <li> Timer.getNextTimeout() will return values in the past for missed expirations.\n+     * </ol>\n+     */\n+    @Test\n+    public void testMissedTimerActionAllWithFailover() throws Exception {\n+        testMissedTimerAction(\"ALL\", true);\n+    }\n+\n+    /**\n+     * Test Persistent Timer missed action \"ONCE\" behavior when failover has not been enabled. <p>\n+     *\n+     * This test will confirm the following :\n+     * <ol>\n+     * <li> Interval timer will skip expirations missed because of a delay.\n+     * <li> Timer.getNextTimeout() will return values in the future; skipping missed expirations.\n+     * </ol>\n+     */\n+    @Test\n+    public void testMissedTimerActionOnceNoFailover() throws Exception {\n+        testMissedTimerAction(\"ONCE\", false);\n+    }\n+\n+    /**\n+     * Test Persistent Timer missed action \"ONCE\" behavior when failover has been enabled. <p>\n+     *\n+     * This test will confirm the following :\n+     * <ol>\n+     * <li> Interval timer will skip expirations missed because of a delay.\n+     * <li> Timer.getNextTimeout() will return values in the future; skipping missed expirations.\n+     * </ol>\n+     */\n+    @Test\n+    @Mode(Mode.TestMode.FULL)\n+    public void testMissedTimerActionOnceWithFailover() throws Exception {\n+        testMissedTimerAction(\"ONCE\", true);\n+    }\n+\n+    /**\n+     * Test Persistent Timer missed action \"ONCE\" behavior when failover has not been enabled. <p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94a9e2c2a03c7fdfd8f6c4270d46e2ac62128662"}, "originalPosition": 192}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNDY0MDk3", "url": "https://github.com/OpenLiberty/open-liberty/pull/10664#pullrequestreview-352464097", "createdAt": "2020-02-03T18:24:52Z", "commit": {"oid": "94a9e2c2a03c7fdfd8f6c4270d46e2ac62128662"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODoyNDo1MlrOFk7Oig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODoyNDo1MlrOFk7Oig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2MzQzNA==", "bodyText": "And again, \"NONE\"", "url": "https://github.com/OpenLiberty/open-liberty/pull/10664#discussion_r374263434", "createdAt": "2020-02-03T18:24:52Z", "author": {"login": "brideck"}, "path": "dev/com.ibm.ws.ejbcontainer.timer.persistent_fat/test-applications/MissedTimerActionWeb.war/src/com/ibm/ws/ejbcontainer/timer/persistent/missed/web/MissedTimerActionServlet.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.ejbcontainer.timer.persistent.missed.web;\n+\n+import java.util.logging.Logger;\n+\n+import javax.ejb.EJB;\n+import javax.ejb.EJBException;\n+import javax.servlet.annotation.WebServlet;\n+\n+import com.ibm.ws.ejbcontainer.timer.persistent.missed.ejb.MissedTimerAction;\n+\n+import componenttest.app.FATServlet;\n+\n+@WebServlet(\"/MissedTimerActionServlet\")\n+@SuppressWarnings(\"serial\")\n+public class MissedTimerActionServlet extends FATServlet {\n+\n+    private static final Logger svLogger = Logger.getLogger(MissedTimerActionServlet.class.getName());\n+\n+    @EJB\n+    MissedTimerAction timerBean;\n+\n+    /**\n+     * Test Persistent Timer missed action default behavior when failover has not been enabled.\n+     * The default behavior without failover should be ALL. <p>\n+     *\n+     * This test will confirm the following :\n+     * <ol>\n+     * <li> Interval timer will run all expirations despite a delay that causes several to be missed.\n+     * <li> Timer.getNextTimeout() will return values in the past for missed expirations.\n+     * </ol>\n+     */\n+    public void testMissedTimerActionDefaultNoFailover() throws Exception {\n+        // Default when no failover is ALL\n+        testMissedTimerAction(\"testMissedTimerActionDefaultNoFailover\", \"ALL\");\n+    }\n+\n+    /**\n+     * Test Persistent Timer missed action default behavior when failover has been enabled.\n+     * The default behavior with failover should be ONCE. <p>\n+     *\n+     * This test will confirm the following :\n+     * <ol>\n+     * <li> Interval timer will skip expirations missed because of a delay.\n+     * <li> Timer.getNextTimeout() will return values in the future; skipping missed expirations.\n+     * </ol>\n+     */\n+    public void testMissedTimerActionDefaultWithFailover() throws Exception {\n+        // Default when failover is enabled is ONCE\n+        testMissedTimerAction(\"testMissedTimerActionDefaultWithFailover\", \"ONCE\");\n+    }\n+\n+    /**\n+     * Test Persistent Timer missed action \"ALL\" behavior when failover has not been enabled. <p>\n+     *\n+     * This test will confirm the following :\n+     * <ol>\n+     * <li> Interval timer will run all expirations despite a delay that causes several to be missed.\n+     * <li> Timer.getNextTimeout() will return values in the past for missed expirations.\n+     * </ol>\n+     */\n+    public void testMissedTimerActionAllNoFailover() throws Exception {\n+        testMissedTimerAction(\"testMissedTimerActionAllNoFailover\", \"ALL\");\n+    }\n+\n+    /**\n+     * Test Persistent Timer missed action \"ALL\" behavior when failover has been enabled. <p>\n+     *\n+     * This test will confirm the following :\n+     * <ol>\n+     * <li> Interval timer will run all expirations despite a delay that causes several to be missed.\n+     * <li> Timer.getNextTimeout() will return values in the past for missed expirations.\n+     * </ol>\n+     */\n+    public void testMissedTimerActionAllWithFailover() throws Exception {\n+        testMissedTimerAction(\"testMissedTimerActionAllWithFailover\", \"ALL\");\n+    }\n+\n+    /**\n+     * Test Persistent Timer missed action \"ONCE\" behavior when failover has not been enabled. <p>\n+     *\n+     * This test will confirm the following :\n+     * <ol>\n+     * <li> Interval timer will skip expirations missed because of a delay.\n+     * <li> Timer.getNextTimeout() will return values in the future; skipping missed expirations.\n+     * </ol>\n+     */\n+    public void testMissedTimerActionOnceNoFailover() throws Exception {\n+        testMissedTimerAction(\"testMissedTimerActionOnceNoFailover\", \"ONCE\");\n+    }\n+\n+    /**\n+     * Test Persistent Timer missed action \"ONCE\" behavior when failover has been enabled. <p>\n+     *\n+     * This test will confirm the following :\n+     * <ol>\n+     * <li> Interval timer will skip expirations missed because of a delay.\n+     * <li> Timer.getNextTimeout() will return values in the future; skipping missed expirations.\n+     * </ol>\n+     */\n+    public void testMissedTimerActionOnceWithFailover() throws Exception {\n+        testMissedTimerAction(\"testMissedTimerActionOnceWithFailover\", \"ONCE\");\n+    }\n+\n+    /**\n+     * Test Persistent Timer missed action \"ONCE\" behavior when failover has not been enabled. <p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94a9e2c2a03c7fdfd8f6c4270d46e2ac62128662"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNDY1NTkz", "url": "https://github.com/OpenLiberty/open-liberty/pull/10664#pullrequestreview-352465593", "createdAt": "2020-02-03T18:27:12Z", "commit": {"oid": "94a9e2c2a03c7fdfd8f6c4270d46e2ac62128662"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3308, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}