{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MDU5Mjk5", "number": 14546, "title": "Jwe builder fat  part 2", "bodyText": "Deliver the renaming JWE Builder FAT", "createdAt": "2020-10-19T15:08:43Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/14546", "merged": true, "mergeCommit": {"oid": "7cb86ba6b9dc7889f40d914166337b8f026c4f6d"}, "closed": true, "closedAt": "2020-10-20T14:07:55Z", "author": {"login": "c00crane"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdS3aaZAH2gAyNTA2MDU5Mjk5OjBiYWJlN2E0YTRlZWFmMjMxZTM5MWMwYTMyMmQ4YTA3MGNkMGIyMWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUKSlMAFqTUxMjExODAyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0babe7a4a4eeaf231e391c0a322d8a070cd0b21c", "author": {"user": {"login": "ayoho", "name": "Adam Yoho"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/0babe7a4a4eeaf231e391c0a322d8a070cd0b21c", "committedDate": "2020-10-15T20:01:30Z", "message": "13576: Updates to JWE builder functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fad204269fe254ce829099cf13dcd4e03333d018", "author": {"user": {"login": "ayoho", "name": "Adam Yoho"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/fad204269fe254ce829099cf13dcd4e03333d018", "committedDate": "2020-10-16T14:40:39Z", "message": "Issue 13576: FAT test update for new JOSE typ header value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff0541a3509c32f2d3065a01be247cac36585890", "author": {"user": {"login": "ayoho", "name": "Adam Yoho"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/ff0541a3509c32f2d3065a01be247cac36585890", "committedDate": "2020-10-19T14:40:03Z", "message": "Issue 13576: NLS updates from review"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "46713dcee1d04523ab1ce7ad084dfab9abfea5ea", "author": {"user": {"login": "c00crane", "name": "Chris Crane"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/46713dcee1d04523ab1ce7ad084dfab9abfea5ea", "committedDate": "2020-10-19T15:04:10Z", "message": "Remaining JWE Builder tests"}, "afterCommit": {"oid": "7ce7fcb48194a77bb73f8a2355b0b8b46f153ee8", "author": {"user": {"login": "c00crane", "name": "Chris Crane"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/7ce7fcb48194a77bb73f8a2355b0b8b46f153ee8", "committedDate": "2020-10-19T17:22:16Z", "message": "Remaining JWE Builder tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "876a381af4b51827bdfb7f9f2b80d2aac696845f", "author": {"user": {"login": "c00crane", "name": "Chris Crane"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/876a381af4b51827bdfb7f9f2b80d2aac696845f", "committedDate": "2020-10-19T17:26:20Z", "message": "Remaining JWE Builder tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ce7fcb48194a77bb73f8a2355b0b8b46f153ee8", "author": {"user": {"login": "c00crane", "name": "Chris Crane"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/7ce7fcb48194a77bb73f8a2355b0b8b46f153ee8", "committedDate": "2020-10-19T17:22:16Z", "message": "Remaining JWE Builder tests"}, "afterCommit": {"oid": "876a381af4b51827bdfb7f9f2b80d2aac696845f", "author": {"user": {"login": "c00crane", "name": "Chris Crane"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/876a381af4b51827bdfb7f9f2b80d2aac696845f", "committedDate": "2020-10-19T17:26:20Z", "message": "Remaining JWE Builder tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMTE4MDI2", "url": "https://github.com/OpenLiberty/open-liberty/pull/14546#pullrequestreview-512118026", "createdAt": "2020-10-19T20:05:51Z", "commit": {"oid": "876a381af4b51827bdfb7f9f2b80d2aac696845f"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDowNTo1MVrOHkfsFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDozMDoxNFrOHkgf9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyOTk3Mw==", "bodyText": "Not terribly important, but the failure message here references the key not being large enough but the actual failure will be for an unknown/invalid key management algorithm.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14546#discussion_r508029973", "createdAt": "2020-10-19T20:05:51Z", "author": {"login": "ayoho"}, "path": "dev/com.ibm.ws.security.jwt_fat.builder/fat/src/com/ibm/ws/security/jwt/fat/builder/JwtBuilderApiBasicTests.java", "diffHunk": "@@ -5353,745 +5597,1022 @@ public void JwtBuilderAPIBasicTests_multiple_apis_and_consumeToken() throws Exce\n      * The encryption tests will decrypt and parse the token to do extra validation on the token!\n      *\n      **/\n-    //    // encryptWith(String  keyManagementAlg,  Key keyManagementKey,  String  contentEncryptionAlg)\n-    //    //\"RSA-OAEP\",  rsaPublicKey, \"A256GCM\"\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //\n-    //        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n-    //        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n-    //        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //        validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n-    //\n-    //    }\n-    //  remaining tests will require updates similiar to the above test\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_shortPublicKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"short_RS256public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_privateKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS512private-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_A256GCM_signWith_RS256() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_RS256);\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n-    //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS256public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_A256GCM_signWith_ES384() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_ES384);\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n-    //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS256public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_A256GCM_signWith_HS512() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_HS512);\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY, \"useThisToSign\");\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_STRING_TYPE);\n-    //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS256public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_publicKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS384public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_shortPublicKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"short_RS384public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_privateKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS384private-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_publicKey_A256GCM_signWith_RS384() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_RS384);\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n-    //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS384public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_publicKey_A256GCM_signWith_ES512() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_ES512);\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n-    //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS384public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_publicKey_A256GCM_signWith_HS256() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_HS256);\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY, \"useThisToSign\");\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_STRING_TYPE);\n-    //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS384public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_publicKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS512public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_shortPublicKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"short_RS512public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_privateKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS512private-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_publicKey_A256GCM_signWith_RS512() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_RS512);\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n-    //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS512public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_publicKey_A256GCM_signWith_ES256() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_ES256);\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n-    //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS512public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_publicKey_A256GCM_signWith_HS384() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_HS384);\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY, \"useThisToSign\");\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_STRING_TYPE);\n-    //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS512public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_Invalid_publicKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, \"Some Random string\");\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_Invalid_KeyMgmtAlg_RS256_publicKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"SomeKeyMgmtAlg\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS256public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_Invalid_ContentEncryptAlg() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS256public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"SomeContentEncryptAlg\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    //        public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_sigAlg_RS256_key_string() throws Exception {\n-    //    //        public void JwtBuilderAPIBasicTests_encryptWith_sigAlg_null_key_string() throws Exception {\n-    //    //        public void JwtBuilderAPIBasicTests_encryptWith_sigAlg_empty_key_string() throws Exception {\n-    //    //        public void JwtBuilderAPIBasicTests_encryptWith_sigAlg_garbage_key_string() throws Exception {\n-    //    //        public void JwtBuilderAPIBasicTests_encryptWith_sigAlg_RS256_key_privKey() throws Exception {\n-    //    //        public void JwtBuilderAPIBasicTests_encryptWith_sigAlg_RS384_key_privKey() throws Exception {\n-    //    //        public void JwtBuilderAPIBasicTests_encryptWith_sigAlg_RS512_key_privKey() throws Exception {\n-    //    //        public void JwtBuilderAPIBasicTests_encryptWith_sigAlg_RS256_key_publicKey() throws Exception {\n-    //    //    public void JwtBuilderAPIBasicTests_encryptWith_sigAlg_RS256_key_null() throws Exception {\n+    // encryptWith(String  keyManagementAlg,  Key keyManagementKey,  String  contentEncryptionAlg)\n+    //\"RSA-OAEP\",  rsaPublicKey, \"A256GCM\"\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_A256GCM() throws Exception {\n \n-    /*****************************************************\n-     * Test various claimsFrom using encryption\n-     ****************************************************/\n-    /**\n-     * Test Purpose:\n-     * <OL>\n-     * <LI>Create a JWT builder using <config1> and create a JWT Token (in the servlet)\n-     * <LI>In the same server instance, use <config2> to create another builder.\n-     * <LI>Use the claimsFrom api to load all claims from the original token\n-     * <LI>Build another token\n-     * </OL>\n-     * <P>\n-     * Expected Results:\n-     * <OL>\n-     * <LI>Verify that the second returned JWT Token contains all of the claims from the original token\n-     * </OL>\n-     *\n-     * @throws Exception\n-     */\n-    @Mode(TestMode.LITE)\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @ExpectedFFDC({ \"org.jose4j.lang.InvalidKeyException\", \"com.ibm.ws.security.jwt.internal.JwtTokenException\" })\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_shortPublicKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getShortComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getShortComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createBadBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, builderServer);\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6020E_CAN_NOT_CAST, \"Message log did not contain an error indicating a problem trying to encrypt the token.\"));\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, \"Message log did not contain an error indicating that the key was not large enough.\"));\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @ExpectedFFDC({ \"org.jose4j.lang.InvalidKeyException\", \"com.ibm.ws.security.jwt.internal.JwtTokenException\" })\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_privateKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createBadBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, builderServer);\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6020E_CAN_NOT_CAST, \"Message log did not contain an error indicating a problem trying to encrypt the token.\"));\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, \"Message log did not contain an error indicating that the key was Invalid.\"));\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_A256GCM_signWith_RS256() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        expectationSettings.put(\"overrideSettings\", testSettings);\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        // add parms to cause token to be signed with specified alg - normal expectations can validate as the alg will be embedded in the encrypted token\n+        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_RS256);\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n+\n+        // add the flags to cause encryption after we create the expectations as we're adding a ref to testSettings to expectationSettings and that'll\n+        // cause expectations to be created for things that build the token, but don't show up in the token\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        JwtTokenForTest jwtTokenForTest = validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+        JsonObject header = jwtTokenForTest.getJsonHeader();\n+        String alg = header.getString(HeaderConstants.ALGORITHM);\n+        if (!(alg != null && alg.equals(testSettings.get(HeaderConstants.ALGORITHM)))) {\n+            fail(\"The token did NOT contain the expected signature algorithm (\" + testSettings.get(HeaderConstants.ALGORITHM) + \"), instead, it contained (\" + alg + \").\");\n+        }\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_A256GCM_signWith_ES384() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        expectationSettings.put(\"overrideSettings\", testSettings);\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        // add parms to cause token to be signed with specified alg - normal expectations can validate as the alg will be embedded in the encrypted token\n+        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_ES384);\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n+\n+        // add the flags to cause encryption after we create the expectations as we're adding a ref to testSettings to expectationSettings and that'll\n+        // cause expectations to be created for things that build the token, but don't show up in the token\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        JwtTokenForTest jwtTokenForTest = validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+        JsonObject header = jwtTokenForTest.getJsonHeader();\n+        String alg = header.getString(HeaderConstants.ALGORITHM);\n+        if (!(alg != null && alg.equals(testSettings.get(HeaderConstants.ALGORITHM)))) {\n+            fail(\"The token did NOT contain the expected signature algorithm (\" + testSettings.get(HeaderConstants.ALGORITHM) + \"), instead, it contained (\" + alg + \").\");\n+        }\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_A256GCM_signWith_HS512() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        expectationSettings.put(\"overrideSettings\", testSettings);\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        // add parms to cause token to be signed with specified alg - normal expectations can validate as the alg will be embedded in the encrypted token\n+        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_HS512);\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY, \"useThisToSign\");\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_STRING_TYPE);\n+\n+        // add the flags to cause encryption after we create the expectations as we're adding a ref to testSettings to expectationSettings and that'll\n+        // cause expectations to be created for things that build the token, but don't show up in the token\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        JwtTokenForTest jwtTokenForTest = validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+        JsonObject header = jwtTokenForTest.getJsonHeader();\n+        String alg = header.getString(HeaderConstants.ALGORITHM);\n+        if (!(alg != null && alg.equals(testSettings.get(HeaderConstants.ALGORITHM)))) {\n+            fail(\"The token did NOT contain the expected signature algorithm (\" + testSettings.get(HeaderConstants.ALGORITHM) + \"), instead, it contained (\" + alg + \").\");\n+        }\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_publicKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @ExpectedFFDC({ \"org.jose4j.lang.InvalidKeyException\", \"com.ibm.ws.security.jwt.internal.JwtTokenException\" })\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_shortPublicKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getShortComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+        String decryptKey = JwtKeyTools.getShortComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createBadBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, builderServer);\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6020E_CAN_NOT_CAST, \"Message log did not contain an error indicating a problem trying to encrypt the token.\"));\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, \"Message log did not contain an error indicating that the key was not large enough.\"));\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @ExpectedFFDC({ \"org.jose4j.lang.InvalidKeyException\", \"com.ibm.ws.security.jwt.internal.JwtTokenException\" })\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_privateKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createBadBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, builderServer);\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6020E_CAN_NOT_CAST, \"Message log did not contain an error indicating a problem trying to encrypt the token.\"));\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, \"Message log did not contain an error indicating that the key was Invalid.\"));\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_publicKey_A256GCM_signWith_RS384() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        expectationSettings.put(\"overrideSettings\", testSettings);\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        // add parms to cause token to be signed with specified alg - normal expectations can validate as the alg will be embedded in the encrypted token\n+        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_RS384);\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n+\n+        // add the flags to cause encryption after we create the expectations as we're adding a ref to testSettings to expectationSettings and that'll\n+        // cause expectations to be created for things that build the token, but don't show up in the token\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        JwtTokenForTest jwtTokenForTest = validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+        JsonObject header = jwtTokenForTest.getJsonHeader();\n+        String alg = header.getString(HeaderConstants.ALGORITHM);\n+        if (!(alg != null && alg.equals(testSettings.get(HeaderConstants.ALGORITHM)))) {\n+            fail(\"The token did NOT contain the expected signature algorithm (\" + testSettings.get(HeaderConstants.ALGORITHM) + \"), instead, it contained (\" + alg + \").\");\n+        }\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_publicKey_A256GCM_signWith_ES512() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        expectationSettings.put(\"overrideSettings\", testSettings);\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        // add parms to cause token to be signed with specified alg - normal expectations can validate as the alg will be embedded in the encrypted token\n+        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_ES512);\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n+\n+        // add the flags to cause encryption after we create the expectations as we're adding a ref to testSettings to expectationSettings and that'll\n+        // cause expectations to be created for things that build the token, but don't show up in the token\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        JwtTokenForTest jwtTokenForTest = validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+        JsonObject header = jwtTokenForTest.getJsonHeader();\n+        String alg = header.getString(HeaderConstants.ALGORITHM);\n+        if (!(alg != null && alg.equals(testSettings.get(HeaderConstants.ALGORITHM)))) {\n+            fail(\"The token did NOT contain the expected signature algorithm (\" + testSettings.get(HeaderConstants.ALGORITHM) + \"), instead, it contained (\" + alg + \").\");\n+        }\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_publicKey_A256GCM_signWith_HS256() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        expectationSettings.put(\"overrideSettings\", testSettings);\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        // add parms to cause token to be signed with specified alg - normal expectations can validate as the alg will be embedded in the encrypted token\n+        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_HS256);\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY, \"useThisToSign\");\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_STRING_TYPE);\n+\n+        // add the flags to cause encryption after we create the expectations as we're adding a ref to testSettings to expectationSettings and that'll\n+        // cause expectations to be created for things that build the token, but don't show up in the token\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        JwtTokenForTest jwtTokenForTest = validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+        JsonObject header = jwtTokenForTest.getJsonHeader();\n+        String alg = header.getString(HeaderConstants.ALGORITHM);\n+        if (!(alg != null && alg.equals(testSettings.get(HeaderConstants.ALGORITHM)))) {\n+            fail(\"The token did NOT contain the expected signature algorithm (\" + testSettings.get(HeaderConstants.ALGORITHM) + \"), instead, it contained (\" + alg + \").\");\n+        }\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_publicKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @ExpectedFFDC({ \"org.jose4j.lang.InvalidKeyException\", \"com.ibm.ws.security.jwt.internal.JwtTokenException\" })\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_shortPublicKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getShortComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+        String decryptKey = JwtKeyTools.getShortComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createBadBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, builderServer);\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6020E_CAN_NOT_CAST, \"Message log did not contain an error indicating a problem trying to encrypt the token.\"));\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, \"Message log did not contain an error indicating that the key was not large enough.\"));\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @ExpectedFFDC({ \"org.jose4j.lang.InvalidKeyException\", \"com.ibm.ws.security.jwt.internal.JwtTokenException\" })\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_privateKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createBadBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, builderServer);\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6020E_CAN_NOT_CAST, \"Message log did not contain an error indicating a problem trying to encrypt the token.\"));\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, \"Message log did not contain an error indicating that the key was Invalid.\"));\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_publicKey_A256GCM_signWith_RS512() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        expectationSettings.put(\"overrideSettings\", testSettings);\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        // add parms to cause token to be signed with specified alg - normal expectations can validate as the alg will be embedded in the encrypted token\n+        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_RS512);\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n+\n+        // add the flags to cause encryption after we create the expectations as we're adding a ref to testSettings to expectationSettings and that'll\n+        // cause expectations to be created for things that build the token, but don't show up in the token\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        JwtTokenForTest jwtTokenForTest = validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+        JsonObject header = jwtTokenForTest.getJsonHeader();\n+        String alg = header.getString(HeaderConstants.ALGORITHM);\n+        if (!(alg != null && alg.equals(testSettings.get(HeaderConstants.ALGORITHM)))) {\n+            fail(\"The token did NOT contain the expected signature algorithm (\" + testSettings.get(HeaderConstants.ALGORITHM) + \"), instead, it contained (\" + alg + \").\");\n+        }\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_publicKey_A256GCM_signWith_ES256() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        expectationSettings.put(\"overrideSettings\", testSettings);\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        // add parms to cause token to be signed with specified alg - normal expectations can validate as the alg will be embedded in the encrypted token\n+        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_ES256);\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n+\n+        // add the flags to cause encryption after we create the expectations as we're adding a ref to testSettings to expectationSettings and that'll\n+        // cause expectations to be created for things that build the token, but don't show up in the token\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        JwtTokenForTest jwtTokenForTest = validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+        JsonObject header = jwtTokenForTest.getJsonHeader();\n+        String alg = header.getString(HeaderConstants.ALGORITHM);\n+        if (!(alg != null && alg.equals(testSettings.get(HeaderConstants.ALGORITHM)))) {\n+            fail(\"The token did NOT contain the expected signature algorithm (\" + testSettings.get(HeaderConstants.ALGORITHM) + \"), instead, it contained (\" + alg + \").\");\n+        }\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_publicKey_A256GCM_signWith_HS256() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        expectationSettings.put(\"overrideSettings\", testSettings);\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        // add parms to cause token to be signed with specified alg - normal expectations can validate as the alg will be embedded in the encrypted token\n+        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_HS256);\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY, \"useThisToSign\");\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_STRING_TYPE);\n+\n+        // add the flags to cause encryption after we create the expectations as we're adding a ref to testSettings to expectationSettings and that'll\n+        // cause expectations to be created for things that build the token, but don't show up in the token\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        JwtTokenForTest jwtTokenForTest = validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+        JsonObject header = jwtTokenForTest.getJsonHeader();\n+        String alg = header.getString(HeaderConstants.ALGORITHM);\n+        if (!(alg != null && alg.equals(testSettings.get(HeaderConstants.ALGORITHM)))) {\n+            fail(\"The token did NOT contain the expected signature algorithm (\" + testSettings.get(HeaderConstants.ALGORITHM) + \"), instead, it contained (\" + alg + \").\");\n+        }\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_256_RS256_publicKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.KEY_MGMT_KEY_ALG_256, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.KEY_MGMT_KEY_ALG_256);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @ExpectedFFDC({ \"org.jose4j.lang.InvalidAlgorithmException\", \"com.ibm.ws.security.jwt.internal.JwtTokenException\" })\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_invalidKeyMgmtKeyAlg_RS256_publicKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"someKeyMgmtValue\");\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createBadBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, builderServer);\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6020E_CAN_NOT_CAST, \"Message log did not contain an error indicating a problem trying to encrypt the token.\"));\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, \"Message log did not contain an error indicating that the key was not large enough.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "876a381af4b51827bdfb7f9f2b80d2aac696845f"}, "originalPosition": 1638}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAzMTU2Mg==", "bodyText": "Same comment - need different failure string.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14546#discussion_r508031562", "createdAt": "2020-10-19T20:08:44Z", "author": {"login": "ayoho"}, "path": "dev/com.ibm.ws.security.jwt_fat.builder/fat/src/com/ibm/ws/security/jwt/fat/builder/JwtBuilderApiBasicTests.java", "diffHunk": "@@ -5353,745 +5597,1022 @@ public void JwtBuilderAPIBasicTests_multiple_apis_and_consumeToken() throws Exce\n      * The encryption tests will decrypt and parse the token to do extra validation on the token!\n      *\n      **/\n-    //    // encryptWith(String  keyManagementAlg,  Key keyManagementKey,  String  contentEncryptionAlg)\n-    //    //\"RSA-OAEP\",  rsaPublicKey, \"A256GCM\"\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //\n-    //        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n-    //        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n-    //        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //        validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n-    //\n-    //    }\n-    //  remaining tests will require updates similiar to the above test\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_shortPublicKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"short_RS256public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_privateKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS512private-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_A256GCM_signWith_RS256() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_RS256);\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n-    //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS256public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_A256GCM_signWith_ES384() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_ES384);\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n-    //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS256public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_A256GCM_signWith_HS512() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_HS512);\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY, \"useThisToSign\");\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_STRING_TYPE);\n-    //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS256public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_publicKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS384public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_shortPublicKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"short_RS384public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_privateKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS384private-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_publicKey_A256GCM_signWith_RS384() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_RS384);\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n-    //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS384public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_publicKey_A256GCM_signWith_ES512() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_ES512);\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n-    //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS384public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_publicKey_A256GCM_signWith_HS256() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_HS256);\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY, \"useThisToSign\");\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_STRING_TYPE);\n-    //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS384public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_publicKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS512public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_shortPublicKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"short_RS512public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_privateKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS512private-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_publicKey_A256GCM_signWith_RS512() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_RS512);\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n-    //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS512public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_publicKey_A256GCM_signWith_ES256() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_ES256);\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n-    //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS512public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_publicKey_A256GCM_signWith_HS384() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_HS384);\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY, \"useThisToSign\");\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_STRING_TYPE);\n-    //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS512public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_Invalid_publicKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, \"Some Random string\");\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_Invalid_KeyMgmtAlg_RS256_publicKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"SomeKeyMgmtAlg\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS256public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_Invalid_ContentEncryptAlg() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS256public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"SomeContentEncryptAlg\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    //        public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_sigAlg_RS256_key_string() throws Exception {\n-    //    //        public void JwtBuilderAPIBasicTests_encryptWith_sigAlg_null_key_string() throws Exception {\n-    //    //        public void JwtBuilderAPIBasicTests_encryptWith_sigAlg_empty_key_string() throws Exception {\n-    //    //        public void JwtBuilderAPIBasicTests_encryptWith_sigAlg_garbage_key_string() throws Exception {\n-    //    //        public void JwtBuilderAPIBasicTests_encryptWith_sigAlg_RS256_key_privKey() throws Exception {\n-    //    //        public void JwtBuilderAPIBasicTests_encryptWith_sigAlg_RS384_key_privKey() throws Exception {\n-    //    //        public void JwtBuilderAPIBasicTests_encryptWith_sigAlg_RS512_key_privKey() throws Exception {\n-    //    //        public void JwtBuilderAPIBasicTests_encryptWith_sigAlg_RS256_key_publicKey() throws Exception {\n-    //    //    public void JwtBuilderAPIBasicTests_encryptWith_sigAlg_RS256_key_null() throws Exception {\n+    // encryptWith(String  keyManagementAlg,  Key keyManagementKey,  String  contentEncryptionAlg)\n+    //\"RSA-OAEP\",  rsaPublicKey, \"A256GCM\"\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_A256GCM() throws Exception {\n \n-    /*****************************************************\n-     * Test various claimsFrom using encryption\n-     ****************************************************/\n-    /**\n-     * Test Purpose:\n-     * <OL>\n-     * <LI>Create a JWT builder using <config1> and create a JWT Token (in the servlet)\n-     * <LI>In the same server instance, use <config2> to create another builder.\n-     * <LI>Use the claimsFrom api to load all claims from the original token\n-     * <LI>Build another token\n-     * </OL>\n-     * <P>\n-     * Expected Results:\n-     * <OL>\n-     * <LI>Verify that the second returned JWT Token contains all of the claims from the original token\n-     * </OL>\n-     *\n-     * @throws Exception\n-     */\n-    @Mode(TestMode.LITE)\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @ExpectedFFDC({ \"org.jose4j.lang.InvalidKeyException\", \"com.ibm.ws.security.jwt.internal.JwtTokenException\" })\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_shortPublicKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getShortComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getShortComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createBadBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, builderServer);\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6020E_CAN_NOT_CAST, \"Message log did not contain an error indicating a problem trying to encrypt the token.\"));\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, \"Message log did not contain an error indicating that the key was not large enough.\"));\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @ExpectedFFDC({ \"org.jose4j.lang.InvalidKeyException\", \"com.ibm.ws.security.jwt.internal.JwtTokenException\" })\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_privateKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createBadBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, builderServer);\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6020E_CAN_NOT_CAST, \"Message log did not contain an error indicating a problem trying to encrypt the token.\"));\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, \"Message log did not contain an error indicating that the key was Invalid.\"));\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_A256GCM_signWith_RS256() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        expectationSettings.put(\"overrideSettings\", testSettings);\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        // add parms to cause token to be signed with specified alg - normal expectations can validate as the alg will be embedded in the encrypted token\n+        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_RS256);\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n+\n+        // add the flags to cause encryption after we create the expectations as we're adding a ref to testSettings to expectationSettings and that'll\n+        // cause expectations to be created for things that build the token, but don't show up in the token\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        JwtTokenForTest jwtTokenForTest = validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+        JsonObject header = jwtTokenForTest.getJsonHeader();\n+        String alg = header.getString(HeaderConstants.ALGORITHM);\n+        if (!(alg != null && alg.equals(testSettings.get(HeaderConstants.ALGORITHM)))) {\n+            fail(\"The token did NOT contain the expected signature algorithm (\" + testSettings.get(HeaderConstants.ALGORITHM) + \"), instead, it contained (\" + alg + \").\");\n+        }\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_A256GCM_signWith_ES384() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        expectationSettings.put(\"overrideSettings\", testSettings);\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        // add parms to cause token to be signed with specified alg - normal expectations can validate as the alg will be embedded in the encrypted token\n+        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_ES384);\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n+\n+        // add the flags to cause encryption after we create the expectations as we're adding a ref to testSettings to expectationSettings and that'll\n+        // cause expectations to be created for things that build the token, but don't show up in the token\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        JwtTokenForTest jwtTokenForTest = validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+        JsonObject header = jwtTokenForTest.getJsonHeader();\n+        String alg = header.getString(HeaderConstants.ALGORITHM);\n+        if (!(alg != null && alg.equals(testSettings.get(HeaderConstants.ALGORITHM)))) {\n+            fail(\"The token did NOT contain the expected signature algorithm (\" + testSettings.get(HeaderConstants.ALGORITHM) + \"), instead, it contained (\" + alg + \").\");\n+        }\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_A256GCM_signWith_HS512() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        expectationSettings.put(\"overrideSettings\", testSettings);\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        // add parms to cause token to be signed with specified alg - normal expectations can validate as the alg will be embedded in the encrypted token\n+        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_HS512);\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY, \"useThisToSign\");\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_STRING_TYPE);\n+\n+        // add the flags to cause encryption after we create the expectations as we're adding a ref to testSettings to expectationSettings and that'll\n+        // cause expectations to be created for things that build the token, but don't show up in the token\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        JwtTokenForTest jwtTokenForTest = validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+        JsonObject header = jwtTokenForTest.getJsonHeader();\n+        String alg = header.getString(HeaderConstants.ALGORITHM);\n+        if (!(alg != null && alg.equals(testSettings.get(HeaderConstants.ALGORITHM)))) {\n+            fail(\"The token did NOT contain the expected signature algorithm (\" + testSettings.get(HeaderConstants.ALGORITHM) + \"), instead, it contained (\" + alg + \").\");\n+        }\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_publicKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @ExpectedFFDC({ \"org.jose4j.lang.InvalidKeyException\", \"com.ibm.ws.security.jwt.internal.JwtTokenException\" })\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_shortPublicKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getShortComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+        String decryptKey = JwtKeyTools.getShortComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createBadBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, builderServer);\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6020E_CAN_NOT_CAST, \"Message log did not contain an error indicating a problem trying to encrypt the token.\"));\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, \"Message log did not contain an error indicating that the key was not large enough.\"));\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @ExpectedFFDC({ \"org.jose4j.lang.InvalidKeyException\", \"com.ibm.ws.security.jwt.internal.JwtTokenException\" })\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_privateKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createBadBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, builderServer);\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6020E_CAN_NOT_CAST, \"Message log did not contain an error indicating a problem trying to encrypt the token.\"));\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, \"Message log did not contain an error indicating that the key was Invalid.\"));\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_publicKey_A256GCM_signWith_RS384() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        expectationSettings.put(\"overrideSettings\", testSettings);\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        // add parms to cause token to be signed with specified alg - normal expectations can validate as the alg will be embedded in the encrypted token\n+        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_RS384);\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n+\n+        // add the flags to cause encryption after we create the expectations as we're adding a ref to testSettings to expectationSettings and that'll\n+        // cause expectations to be created for things that build the token, but don't show up in the token\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        JwtTokenForTest jwtTokenForTest = validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+        JsonObject header = jwtTokenForTest.getJsonHeader();\n+        String alg = header.getString(HeaderConstants.ALGORITHM);\n+        if (!(alg != null && alg.equals(testSettings.get(HeaderConstants.ALGORITHM)))) {\n+            fail(\"The token did NOT contain the expected signature algorithm (\" + testSettings.get(HeaderConstants.ALGORITHM) + \"), instead, it contained (\" + alg + \").\");\n+        }\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_publicKey_A256GCM_signWith_ES512() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        expectationSettings.put(\"overrideSettings\", testSettings);\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        // add parms to cause token to be signed with specified alg - normal expectations can validate as the alg will be embedded in the encrypted token\n+        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_ES512);\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n+\n+        // add the flags to cause encryption after we create the expectations as we're adding a ref to testSettings to expectationSettings and that'll\n+        // cause expectations to be created for things that build the token, but don't show up in the token\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        JwtTokenForTest jwtTokenForTest = validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+        JsonObject header = jwtTokenForTest.getJsonHeader();\n+        String alg = header.getString(HeaderConstants.ALGORITHM);\n+        if (!(alg != null && alg.equals(testSettings.get(HeaderConstants.ALGORITHM)))) {\n+            fail(\"The token did NOT contain the expected signature algorithm (\" + testSettings.get(HeaderConstants.ALGORITHM) + \"), instead, it contained (\" + alg + \").\");\n+        }\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_publicKey_A256GCM_signWith_HS256() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        expectationSettings.put(\"overrideSettings\", testSettings);\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        // add parms to cause token to be signed with specified alg - normal expectations can validate as the alg will be embedded in the encrypted token\n+        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_HS256);\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY, \"useThisToSign\");\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_STRING_TYPE);\n+\n+        // add the flags to cause encryption after we create the expectations as we're adding a ref to testSettings to expectationSettings and that'll\n+        // cause expectations to be created for things that build the token, but don't show up in the token\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        JwtTokenForTest jwtTokenForTest = validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+        JsonObject header = jwtTokenForTest.getJsonHeader();\n+        String alg = header.getString(HeaderConstants.ALGORITHM);\n+        if (!(alg != null && alg.equals(testSettings.get(HeaderConstants.ALGORITHM)))) {\n+            fail(\"The token did NOT contain the expected signature algorithm (\" + testSettings.get(HeaderConstants.ALGORITHM) + \"), instead, it contained (\" + alg + \").\");\n+        }\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_publicKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @ExpectedFFDC({ \"org.jose4j.lang.InvalidKeyException\", \"com.ibm.ws.security.jwt.internal.JwtTokenException\" })\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_shortPublicKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getShortComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+        String decryptKey = JwtKeyTools.getShortComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createBadBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, builderServer);\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6020E_CAN_NOT_CAST, \"Message log did not contain an error indicating a problem trying to encrypt the token.\"));\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, \"Message log did not contain an error indicating that the key was not large enough.\"));\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @ExpectedFFDC({ \"org.jose4j.lang.InvalidKeyException\", \"com.ibm.ws.security.jwt.internal.JwtTokenException\" })\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_privateKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createBadBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, builderServer);\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6020E_CAN_NOT_CAST, \"Message log did not contain an error indicating a problem trying to encrypt the token.\"));\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, \"Message log did not contain an error indicating that the key was Invalid.\"));\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_publicKey_A256GCM_signWith_RS512() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        expectationSettings.put(\"overrideSettings\", testSettings);\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        // add parms to cause token to be signed with specified alg - normal expectations can validate as the alg will be embedded in the encrypted token\n+        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_RS512);\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n+\n+        // add the flags to cause encryption after we create the expectations as we're adding a ref to testSettings to expectationSettings and that'll\n+        // cause expectations to be created for things that build the token, but don't show up in the token\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        JwtTokenForTest jwtTokenForTest = validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+        JsonObject header = jwtTokenForTest.getJsonHeader();\n+        String alg = header.getString(HeaderConstants.ALGORITHM);\n+        if (!(alg != null && alg.equals(testSettings.get(HeaderConstants.ALGORITHM)))) {\n+            fail(\"The token did NOT contain the expected signature algorithm (\" + testSettings.get(HeaderConstants.ALGORITHM) + \"), instead, it contained (\" + alg + \").\");\n+        }\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_publicKey_A256GCM_signWith_ES256() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        expectationSettings.put(\"overrideSettings\", testSettings);\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        // add parms to cause token to be signed with specified alg - normal expectations can validate as the alg will be embedded in the encrypted token\n+        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_ES256);\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n+\n+        // add the flags to cause encryption after we create the expectations as we're adding a ref to testSettings to expectationSettings and that'll\n+        // cause expectations to be created for things that build the token, but don't show up in the token\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        JwtTokenForTest jwtTokenForTest = validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+        JsonObject header = jwtTokenForTest.getJsonHeader();\n+        String alg = header.getString(HeaderConstants.ALGORITHM);\n+        if (!(alg != null && alg.equals(testSettings.get(HeaderConstants.ALGORITHM)))) {\n+            fail(\"The token did NOT contain the expected signature algorithm (\" + testSettings.get(HeaderConstants.ALGORITHM) + \"), instead, it contained (\" + alg + \").\");\n+        }\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_publicKey_A256GCM_signWith_HS256() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        expectationSettings.put(\"overrideSettings\", testSettings);\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        // add parms to cause token to be signed with specified alg - normal expectations can validate as the alg will be embedded in the encrypted token\n+        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_HS256);\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY, \"useThisToSign\");\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_STRING_TYPE);\n+\n+        // add the flags to cause encryption after we create the expectations as we're adding a ref to testSettings to expectationSettings and that'll\n+        // cause expectations to be created for things that build the token, but don't show up in the token\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        JwtTokenForTest jwtTokenForTest = validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+        JsonObject header = jwtTokenForTest.getJsonHeader();\n+        String alg = header.getString(HeaderConstants.ALGORITHM);\n+        if (!(alg != null && alg.equals(testSettings.get(HeaderConstants.ALGORITHM)))) {\n+            fail(\"The token did NOT contain the expected signature algorithm (\" + testSettings.get(HeaderConstants.ALGORITHM) + \"), instead, it contained (\" + alg + \").\");\n+        }\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_256_RS256_publicKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.KEY_MGMT_KEY_ALG_256, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.KEY_MGMT_KEY_ALG_256);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @ExpectedFFDC({ \"org.jose4j.lang.InvalidAlgorithmException\", \"com.ibm.ws.security.jwt.internal.JwtTokenException\" })\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_invalidKeyMgmtKeyAlg_RS256_publicKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"someKeyMgmtValue\");\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createBadBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, builderServer);\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6020E_CAN_NOT_CAST, \"Message log did not contain an error indicating a problem trying to encrypt the token.\"));\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, \"Message log did not contain an error indicating that the key was not large enough.\"));\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_256_RS384_publicKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.KEY_MGMT_KEY_ALG_256, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.KEY_MGMT_KEY_ALG_256);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_256_RS512_publicKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.KEY_MGMT_KEY_ALG_256, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.KEY_MGMT_KEY_ALG_256);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_A192GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.CONTENT_ENCRYPT_ALG_192);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.CONTENT_ENCRYPT_ALG_192);\n+\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @ExpectedFFDC({ \"org.jose4j.lang.InvalidAlgorithmException\", \"com.ibm.ws.security.jwt.internal.JwtTokenException\" })\n     @Test\n-    public void JwtBuilderAPIBasicTests_claimsFrom_jwtToken_to_jweToken_allClaims() throws Exception {\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_invalidContentEncryptAlg() throws Exception {\n \n-        String baseBuilderId = \"jwt1\";\n-        // The test code can't really convert the jwt string into the jwt token, so, tell the\n-        // test app to create a jwt token from another jwt builder config\n-        // use that as the source for the claimFrom call.\n+        String builderId = \"jwt1\";\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n         JSONObject testSettings = new JSONObject();\n-        testSettings.put(JWTBuilderConstants.JWT_BUILDER_PARAM_BUILDER_ID, baseBuilderId);\n-        testSettings.put(JWTBuilderConstants.JWT_BUILDER_ACTION_CLAIM_FROM, JWTBuilderConstants.JWT_BUILDER_ACTION_CLAIM_FROM_JWT_TOKEN);\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"someContentEncryptAlg\");\n+\n+        Expectations expectations = BuilderHelpers.createBadBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, builderServer);\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6020E_CAN_NOT_CAST, \"Message log did not contain an error indicating a problem trying to encrypt the token.\"));\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, \"Message log did not contain an error indicating that the key was not large enough.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "876a381af4b51827bdfb7f9f2b80d2aac696845f"}, "originalPosition": 1752}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA0MzI1Mw==", "bodyText": "I'm not seeing any difference between this test and JwtBuilderAPIBasicTests_encryptWith_useSameSettingsAsBuilderConfig.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14546#discussion_r508043253", "createdAt": "2020-10-19T20:30:14Z", "author": {"login": "ayoho"}, "path": "dev/com.ibm.ws.security.jwt_fat.builder/fat/src/com/ibm/ws/security/jwt/fat/builder/JwtBuilderApiBasicTests.java", "diffHunk": "@@ -5353,745 +5597,1022 @@ public void JwtBuilderAPIBasicTests_multiple_apis_and_consumeToken() throws Exce\n      * The encryption tests will decrypt and parse the token to do extra validation on the token!\n      *\n      **/\n-    //    // encryptWith(String  keyManagementAlg,  Key keyManagementKey,  String  contentEncryptionAlg)\n-    //    //\"RSA-OAEP\",  rsaPublicKey, \"A256GCM\"\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //\n-    //        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n-    //        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n-    //        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //        validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n-    //\n-    //    }\n-    //  remaining tests will require updates similiar to the above test\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_shortPublicKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"short_RS256public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_privateKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS512private-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_A256GCM_signWith_RS256() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_RS256);\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n-    //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS256public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_A256GCM_signWith_ES384() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_ES384);\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n-    //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS256public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_A256GCM_signWith_HS512() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_HS512);\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY, \"useThisToSign\");\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_STRING_TYPE);\n-    //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS256public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_publicKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS384public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_shortPublicKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"short_RS384public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_privateKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS384private-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_publicKey_A256GCM_signWith_RS384() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_RS384);\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n-    //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS384public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_publicKey_A256GCM_signWith_ES512() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_ES512);\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n-    //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS384public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_publicKey_A256GCM_signWith_HS256() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_HS256);\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY, \"useThisToSign\");\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_STRING_TYPE);\n-    //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS384public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_publicKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS512public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_shortPublicKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"short_RS512public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_privateKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS512private-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_publicKey_A256GCM_signWith_RS512() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_RS512);\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n-    //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS512public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_publicKey_A256GCM_signWith_ES256() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_ES256);\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n-    //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS512public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_publicKey_A256GCM_signWith_HS384() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_HS384);\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY, \"useThisToSign\");\n-    //        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_STRING_TYPE);\n-    //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS512public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_Invalid_publicKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, \"Some Random string\");\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_Invalid_KeyMgmtAlg_RS256_publicKey_A256GCM() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"SomeKeyMgmtAlg\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS256public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"A256GCM\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    @Test\n-    //    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_Invalid_ContentEncryptAlg() throws Exception {\n-    //\n-    //        String builderId = \"jwt1\";\n-    //        JSONObject expectationSettings = BuilderHelpers.setDefaultClaims(builderId);\n-    //\n-    //        // create settings that will be passed to the test app as well as used to create what to expect in the results\n-    //        JSONObject testSettings = new JSONObject();\n-    //        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"RSA-OAEP\");\n-    //        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, getKeyFromFile(builderServer, \"RS256public-key.pem\"));\n-    //        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"SomeContentEncryptAlg\");\n-    //        //        expectationSettings.put(\"overrideSettings\", testSettings);\n-    //        // TODO - update expectations for the encryption settings.\n-    //\n-    //        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n-    //\n-    //        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-    //        validationUtils.validateResult(response, expectations);\n-    //\n-    //    }\n-    //\n-    //    //        public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_sigAlg_RS256_key_string() throws Exception {\n-    //    //        public void JwtBuilderAPIBasicTests_encryptWith_sigAlg_null_key_string() throws Exception {\n-    //    //        public void JwtBuilderAPIBasicTests_encryptWith_sigAlg_empty_key_string() throws Exception {\n-    //    //        public void JwtBuilderAPIBasicTests_encryptWith_sigAlg_garbage_key_string() throws Exception {\n-    //    //        public void JwtBuilderAPIBasicTests_encryptWith_sigAlg_RS256_key_privKey() throws Exception {\n-    //    //        public void JwtBuilderAPIBasicTests_encryptWith_sigAlg_RS384_key_privKey() throws Exception {\n-    //    //        public void JwtBuilderAPIBasicTests_encryptWith_sigAlg_RS512_key_privKey() throws Exception {\n-    //    //        public void JwtBuilderAPIBasicTests_encryptWith_sigAlg_RS256_key_publicKey() throws Exception {\n-    //    //    public void JwtBuilderAPIBasicTests_encryptWith_sigAlg_RS256_key_null() throws Exception {\n+    // encryptWith(String  keyManagementAlg,  Key keyManagementKey,  String  contentEncryptionAlg)\n+    //\"RSA-OAEP\",  rsaPublicKey, \"A256GCM\"\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_A256GCM() throws Exception {\n \n-    /*****************************************************\n-     * Test various claimsFrom using encryption\n-     ****************************************************/\n-    /**\n-     * Test Purpose:\n-     * <OL>\n-     * <LI>Create a JWT builder using <config1> and create a JWT Token (in the servlet)\n-     * <LI>In the same server instance, use <config2> to create another builder.\n-     * <LI>Use the claimsFrom api to load all claims from the original token\n-     * <LI>Build another token\n-     * </OL>\n-     * <P>\n-     * Expected Results:\n-     * <OL>\n-     * <LI>Verify that the second returned JWT Token contains all of the claims from the original token\n-     * </OL>\n-     *\n-     * @throws Exception\n-     */\n-    @Mode(TestMode.LITE)\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @ExpectedFFDC({ \"org.jose4j.lang.InvalidKeyException\", \"com.ibm.ws.security.jwt.internal.JwtTokenException\" })\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_shortPublicKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getShortComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getShortComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createBadBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, builderServer);\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6020E_CAN_NOT_CAST, \"Message log did not contain an error indicating a problem trying to encrypt the token.\"));\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, \"Message log did not contain an error indicating that the key was not large enough.\"));\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @ExpectedFFDC({ \"org.jose4j.lang.InvalidKeyException\", \"com.ibm.ws.security.jwt.internal.JwtTokenException\" })\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_privateKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createBadBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, builderServer);\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6020E_CAN_NOT_CAST, \"Message log did not contain an error indicating a problem trying to encrypt the token.\"));\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, \"Message log did not contain an error indicating that the key was Invalid.\"));\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_A256GCM_signWith_RS256() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        expectationSettings.put(\"overrideSettings\", testSettings);\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        // add parms to cause token to be signed with specified alg - normal expectations can validate as the alg will be embedded in the encrypted token\n+        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_RS256);\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n+\n+        // add the flags to cause encryption after we create the expectations as we're adding a ref to testSettings to expectationSettings and that'll\n+        // cause expectations to be created for things that build the token, but don't show up in the token\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        JwtTokenForTest jwtTokenForTest = validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+        JsonObject header = jwtTokenForTest.getJsonHeader();\n+        String alg = header.getString(HeaderConstants.ALGORITHM);\n+        if (!(alg != null && alg.equals(testSettings.get(HeaderConstants.ALGORITHM)))) {\n+            fail(\"The token did NOT contain the expected signature algorithm (\" + testSettings.get(HeaderConstants.ALGORITHM) + \"), instead, it contained (\" + alg + \").\");\n+        }\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_A256GCM_signWith_ES384() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        expectationSettings.put(\"overrideSettings\", testSettings);\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        // add parms to cause token to be signed with specified alg - normal expectations can validate as the alg will be embedded in the encrypted token\n+        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_ES384);\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n+\n+        // add the flags to cause encryption after we create the expectations as we're adding a ref to testSettings to expectationSettings and that'll\n+        // cause expectations to be created for things that build the token, but don't show up in the token\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        JwtTokenForTest jwtTokenForTest = validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+        JsonObject header = jwtTokenForTest.getJsonHeader();\n+        String alg = header.getString(HeaderConstants.ALGORITHM);\n+        if (!(alg != null && alg.equals(testSettings.get(HeaderConstants.ALGORITHM)))) {\n+            fail(\"The token did NOT contain the expected signature algorithm (\" + testSettings.get(HeaderConstants.ALGORITHM) + \"), instead, it contained (\" + alg + \").\");\n+        }\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_A256GCM_signWith_HS512() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        expectationSettings.put(\"overrideSettings\", testSettings);\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        // add parms to cause token to be signed with specified alg - normal expectations can validate as the alg will be embedded in the encrypted token\n+        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_HS512);\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY, \"useThisToSign\");\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_STRING_TYPE);\n+\n+        // add the flags to cause encryption after we create the expectations as we're adding a ref to testSettings to expectationSettings and that'll\n+        // cause expectations to be created for things that build the token, but don't show up in the token\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        JwtTokenForTest jwtTokenForTest = validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+        JsonObject header = jwtTokenForTest.getJsonHeader();\n+        String alg = header.getString(HeaderConstants.ALGORITHM);\n+        if (!(alg != null && alg.equals(testSettings.get(HeaderConstants.ALGORITHM)))) {\n+            fail(\"The token did NOT contain the expected signature algorithm (\" + testSettings.get(HeaderConstants.ALGORITHM) + \"), instead, it contained (\" + alg + \").\");\n+        }\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_publicKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @ExpectedFFDC({ \"org.jose4j.lang.InvalidKeyException\", \"com.ibm.ws.security.jwt.internal.JwtTokenException\" })\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_shortPublicKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getShortComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+        String decryptKey = JwtKeyTools.getShortComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createBadBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, builderServer);\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6020E_CAN_NOT_CAST, \"Message log did not contain an error indicating a problem trying to encrypt the token.\"));\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, \"Message log did not contain an error indicating that the key was not large enough.\"));\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @ExpectedFFDC({ \"org.jose4j.lang.InvalidKeyException\", \"com.ibm.ws.security.jwt.internal.JwtTokenException\" })\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_privateKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createBadBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, builderServer);\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6020E_CAN_NOT_CAST, \"Message log did not contain an error indicating a problem trying to encrypt the token.\"));\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, \"Message log did not contain an error indicating that the key was Invalid.\"));\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_publicKey_A256GCM_signWith_RS384() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        expectationSettings.put(\"overrideSettings\", testSettings);\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        // add parms to cause token to be signed with specified alg - normal expectations can validate as the alg will be embedded in the encrypted token\n+        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_RS384);\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n+\n+        // add the flags to cause encryption after we create the expectations as we're adding a ref to testSettings to expectationSettings and that'll\n+        // cause expectations to be created for things that build the token, but don't show up in the token\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        JwtTokenForTest jwtTokenForTest = validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+        JsonObject header = jwtTokenForTest.getJsonHeader();\n+        String alg = header.getString(HeaderConstants.ALGORITHM);\n+        if (!(alg != null && alg.equals(testSettings.get(HeaderConstants.ALGORITHM)))) {\n+            fail(\"The token did NOT contain the expected signature algorithm (\" + testSettings.get(HeaderConstants.ALGORITHM) + \"), instead, it contained (\" + alg + \").\");\n+        }\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_publicKey_A256GCM_signWith_ES512() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        expectationSettings.put(\"overrideSettings\", testSettings);\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        // add parms to cause token to be signed with specified alg - normal expectations can validate as the alg will be embedded in the encrypted token\n+        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_ES512);\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n+\n+        // add the flags to cause encryption after we create the expectations as we're adding a ref to testSettings to expectationSettings and that'll\n+        // cause expectations to be created for things that build the token, but don't show up in the token\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        JwtTokenForTest jwtTokenForTest = validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+        JsonObject header = jwtTokenForTest.getJsonHeader();\n+        String alg = header.getString(HeaderConstants.ALGORITHM);\n+        if (!(alg != null && alg.equals(testSettings.get(HeaderConstants.ALGORITHM)))) {\n+            fail(\"The token did NOT contain the expected signature algorithm (\" + testSettings.get(HeaderConstants.ALGORITHM) + \"), instead, it contained (\" + alg + \").\");\n+        }\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS384_publicKey_A256GCM_signWith_HS256() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        expectationSettings.put(\"overrideSettings\", testSettings);\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        // add parms to cause token to be signed with specified alg - normal expectations can validate as the alg will be embedded in the encrypted token\n+        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_HS256);\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY, \"useThisToSign\");\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_STRING_TYPE);\n+\n+        // add the flags to cause encryption after we create the expectations as we're adding a ref to testSettings to expectationSettings and that'll\n+        // cause expectations to be created for things that build the token, but don't show up in the token\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        JwtTokenForTest jwtTokenForTest = validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+        JsonObject header = jwtTokenForTest.getJsonHeader();\n+        String alg = header.getString(HeaderConstants.ALGORITHM);\n+        if (!(alg != null && alg.equals(testSettings.get(HeaderConstants.ALGORITHM)))) {\n+            fail(\"The token did NOT contain the expected signature algorithm (\" + testSettings.get(HeaderConstants.ALGORITHM) + \"), instead, it contained (\" + alg + \").\");\n+        }\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_publicKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @ExpectedFFDC({ \"org.jose4j.lang.InvalidKeyException\", \"com.ibm.ws.security.jwt.internal.JwtTokenException\" })\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_shortPublicKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getShortComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+        String decryptKey = JwtKeyTools.getShortComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createBadBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, builderServer);\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6020E_CAN_NOT_CAST, \"Message log did not contain an error indicating a problem trying to encrypt the token.\"));\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, \"Message log did not contain an error indicating that the key was not large enough.\"));\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @ExpectedFFDC({ \"org.jose4j.lang.InvalidKeyException\", \"com.ibm.ws.security.jwt.internal.JwtTokenException\" })\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_privateKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createBadBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, builderServer);\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6020E_CAN_NOT_CAST, \"Message log did not contain an error indicating a problem trying to encrypt the token.\"));\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, \"Message log did not contain an error indicating that the key was Invalid.\"));\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_publicKey_A256GCM_signWith_RS512() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        expectationSettings.put(\"overrideSettings\", testSettings);\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        // add parms to cause token to be signed with specified alg - normal expectations can validate as the alg will be embedded in the encrypted token\n+        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_RS512);\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n+\n+        // add the flags to cause encryption after we create the expectations as we're adding a ref to testSettings to expectationSettings and that'll\n+        // cause expectations to be created for things that build the token, but don't show up in the token\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        JwtTokenForTest jwtTokenForTest = validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+        JsonObject header = jwtTokenForTest.getJsonHeader();\n+        String alg = header.getString(HeaderConstants.ALGORITHM);\n+        if (!(alg != null && alg.equals(testSettings.get(HeaderConstants.ALGORITHM)))) {\n+            fail(\"The token did NOT contain the expected signature algorithm (\" + testSettings.get(HeaderConstants.ALGORITHM) + \"), instead, it contained (\" + alg + \").\");\n+        }\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_publicKey_A256GCM_signWith_ES256() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        expectationSettings.put(\"overrideSettings\", testSettings);\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        // add parms to cause token to be signed with specified alg - normal expectations can validate as the alg will be embedded in the encrypted token\n+        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_ES256);\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_PRIVATE_KEY_TYPE);\n+\n+        // add the flags to cause encryption after we create the expectations as we're adding a ref to testSettings to expectationSettings and that'll\n+        // cause expectations to be created for things that build the token, but don't show up in the token\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        JwtTokenForTest jwtTokenForTest = validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+        JsonObject header = jwtTokenForTest.getJsonHeader();\n+        String alg = header.getString(HeaderConstants.ALGORITHM);\n+        if (!(alg != null && alg.equals(testSettings.get(HeaderConstants.ALGORITHM)))) {\n+            fail(\"The token did NOT contain the expected signature algorithm (\" + testSettings.get(HeaderConstants.ALGORITHM) + \"), instead, it contained (\" + alg + \").\");\n+        }\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS512_publicKey_A256GCM_signWith_HS256() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        expectationSettings.put(\"overrideSettings\", testSettings);\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        // add parms to cause token to be signed with specified alg - normal expectations can validate as the alg will be embedded in the encrypted token\n+        testSettings.put(HeaderConstants.ALGORITHM, JWTBuilderConstants.SIGALG_HS256);\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY, \"useThisToSign\");\n+        testSettings.put(JWTBuilderConstants.SHARED_KEY_TYPE, JWTBuilderConstants.SHARED_KEY_STRING_TYPE);\n+\n+        // add the flags to cause encryption after we create the expectations as we're adding a ref to testSettings to expectationSettings and that'll\n+        // cause expectations to be created for things that build the token, but don't show up in the token\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        JwtTokenForTest jwtTokenForTest = validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+        JsonObject header = jwtTokenForTest.getJsonHeader();\n+        String alg = header.getString(HeaderConstants.ALGORITHM);\n+        if (!(alg != null && alg.equals(testSettings.get(HeaderConstants.ALGORITHM)))) {\n+            fail(\"The token did NOT contain the expected signature algorithm (\" + testSettings.get(HeaderConstants.ALGORITHM) + \"), instead, it contained (\" + alg + \").\");\n+        }\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_256_RS256_publicKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.KEY_MGMT_KEY_ALG_256, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.KEY_MGMT_KEY_ALG_256);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @ExpectedFFDC({ \"org.jose4j.lang.InvalidAlgorithmException\", \"com.ibm.ws.security.jwt.internal.JwtTokenException\" })\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_invalidKeyMgmtKeyAlg_RS256_publicKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, \"someKeyMgmtValue\");\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createBadBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, builderServer);\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6020E_CAN_NOT_CAST, \"Message log did not contain an error indicating a problem trying to encrypt the token.\"));\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, \"Message log did not contain an error indicating that the key was not large enough.\"));\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_256_RS384_publicKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.KEY_MGMT_KEY_ALG_256, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.KEY_MGMT_KEY_ALG_256);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_256_RS512_publicKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.KEY_MGMT_KEY_ALG_256, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.KEY_MGMT_KEY_ALG_256);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS512);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_A192GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.CONTENT_ENCRYPT_ALG_192);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.CONTENT_ENCRYPT_ALG_192);\n+\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @ExpectedFFDC({ \"org.jose4j.lang.InvalidAlgorithmException\", \"com.ibm.ws.security.jwt.internal.JwtTokenException\" })\n     @Test\n-    public void JwtBuilderAPIBasicTests_claimsFrom_jwtToken_to_jweToken_allClaims() throws Exception {\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_invalidContentEncryptAlg() throws Exception {\n \n-        String baseBuilderId = \"jwt1\";\n-        // The test code can't really convert the jwt string into the jwt token, so, tell the\n-        // test app to create a jwt token from another jwt builder config\n-        // use that as the source for the claimFrom call.\n+        String builderId = \"jwt1\";\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n         JSONObject testSettings = new JSONObject();\n-        testSettings.put(JWTBuilderConstants.JWT_BUILDER_PARAM_BUILDER_ID, baseBuilderId);\n-        testSettings.put(JWTBuilderConstants.JWT_BUILDER_ACTION_CLAIM_FROM, JWTBuilderConstants.JWT_BUILDER_ACTION_CLAIM_FROM_JWT_TOKEN);\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, \"someContentEncryptAlg\");\n+\n+        Expectations expectations = BuilderHelpers.createBadBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, builderServer);\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6020E_CAN_NOT_CAST, \"Message log did not contain an error indicating a problem trying to encrypt the token.\"));\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6060E_CAN_NOT_CREATE_JWE, \"Message log did not contain an error indicating that the key was not large enough.\"));\n \n-        // Now, add any override values - for this test, there are none\n-        // Invoke the builder app to create a token (using one builder), then create a builder for another builder, load all claims from the token into the second builder\n-        String builderId = \"encryptJwtRS256\";\n         Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-        // extract the first jwt token from the output and use that to create expectations.  We'll compare the content of the second token\n-        // to that of the first (since everything from the original token was obtained via claimFrom(<jwtToken>), they should be the same\n-        String jwtToken = BuilderHelpers.extractJwtTokenFromResponse(response, JWTBuilderConstants.JWT_BUILDER_ACTION_CLAIM_FROM + \": \");\n-        JSONObject baseSettings = BuilderHelpers.setClaimsFromToken(jwtToken); // first token is NOT encrypted\n-        // second token will be encrypted - we don't have a way to pass the key to the validation methods, so, we'll skip the checks that required the actual payload content\n-        baseSettings.remove(PayloadConstants.EXPIRATION_TIME);\n-        baseSettings.remove(PayloadConstants.ISSUED_AT);\n-        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, baseSettings, builderServer);\n+        validationUtils.validateResult(response, expectations);\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_nullKeyMgmtKeyAlg_RS256_publicKey_A256GCM() throws Exception {\n+\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n \n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n         validationUtils.validateResult(response, expectations);\n \n+        validationUtils.validateJWEToken(response, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n     }\n \n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n     @Test\n-    public void JwtBuilderAPIBasicTests_claimsFrom_jweToken_to_jwtToken_allClaims() throws Exception {\n+    public void JwtBuilderAPIBasicTests_encryptWith_nullKeyMgmtKeyAlg_goodBuilderConfig() throws Exception {\n \n-        String baseBuilderId = \"encryptJwtRS256\";\n-        // The test code can't really convert the jwt string into the jwt token, so, tell the\n-        // test app to create a jwt token from another jwt builder config\n-        // use that as the source for the claimFrom call.\n+        String builderId = \"encryptJwtRS256\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n         JSONObject testSettings = new JSONObject();\n-        testSettings.put(JWTBuilderConstants.JWT_BUILDER_PARAM_BUILDER_ID, baseBuilderId);\n-        testSettings.put(JWTBuilderConstants.JWT_BUILDER_ACTION_CLAIM_FROM, JWTBuilderConstants.JWT_BUILDER_ACTION_CLAIM_FROM_JWT_TOKEN);\n \n-        // Now, add any override values - for this test, there are none\n-        // Invoke the builder app to create a token (using one builder), then create a builder for another builder, load all claims from the token into the second builder\n-        String builderId = \"jwt1\";\n-        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-        // extract the first jwt token from the output and use that to create expectations.  We'll compare the content of the second token\n-        // to that of the first (since everything from the original token was obtained via claimFrom(<jwtToken>), they should be the same\n-        String jwtToken = BuilderHelpers.extractJwtTokenFromResponse(response, JWTBuilderConstants.JWT_BUILDER_ACTION_CLAIM_FROM + \": \");\n-        JSONObject baseSettings = BuilderHelpers.setClaimsFromToken(jwtToken, JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256)); // first token is  encrypted\n-        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, baseSettings, builderServer);\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n \n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n         validationUtils.validateResult(response, expectations);\n \n+        validationUtils.validateJWEToken(response, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n     }\n \n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n     @Test\n-    public void JwtBuilderAPIBasicTests_claimsFrom_jweTokenRS256_to_jweTokenRS384_allClaims() throws Exception {\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_null_publicKey_A256GCM() throws Exception {\n \n-        String baseBuilderId = \"encryptJwtRS256\";\n-        // The test code can't really convert the jwt string into the jwt token, so, tell the\n-        // test app to create a jwt token from another jwt builder config\n-        // use that as the source for the claimFrom call.\n+        String builderId = \"jwt1\";\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n         JSONObject testSettings = new JSONObject();\n-        testSettings.put(JWTBuilderConstants.JWT_BUILDER_PARAM_BUILDER_ID, baseBuilderId);\n-        testSettings.put(JWTBuilderConstants.JWT_BUILDER_ACTION_CLAIM_FROM, JWTBuilderConstants.JWT_BUILDER_ACTION_CLAIM_FROM_JWT_TOKEN);\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n \n-        // Now, add any override values - for this test, there are none\n-        // Invoke the builder app to create a token (using one builder), then create a builder for another builder, load all claims from the token into the second builder\n-        String builderId = \"encryptJwtRS384\";\n-        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n-        // extract the first jwt token from the output and use that to create expectations.  We'll compare the content of the second token\n-        // to that of the first (since everything from the original token was obtained via claimFrom(<jwtToken>), they should be the same\n-        String jwtToken = BuilderHelpers.extractJwtTokenFromResponse(response, JWTBuilderConstants.JWT_BUILDER_ACTION_CLAIM_FROM + \": \");\n-        JSONObject baseSettings = BuilderHelpers.setClaimsFromToken(jwtToken, JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256)); // first token is  encrypted\n-        // second token will be encrypted - we don't have a way to pass the key to the validation methods, so, we'll skip the checks that required the actual payload content\n-        baseSettings.remove(PayloadConstants.EXPIRATION_TIME);\n-        baseSettings.remove(PayloadConstants.ISSUED_AT);\n-        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, baseSettings, builderServer);\n+        Expectations expectations = BuilderHelpers.createBadBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, JwtBuilderMessageConstants.CWWKS6058W_KEY_MGMT_KEY_MISSING, builderServer);\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6058W_KEY_MGMT_KEY_MISSING, \"Message log did not contain an error indicating that the key management key was missing.\"));\n \n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n         validationUtils.validateResult(response, expectations);\n \n     }\n \n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n     @Test\n-    public void JwtBuilderAPIBasicTests_claimsFrom_jwtString_to_jweToken_allClaims() throws Exception {\n+    public void JwtBuilderAPIBasicTests_encryptWith_null_publicKey_goodBuidlerConfig() throws Exception {\n \n-        // build a token using the alternate builder config (we'll get claims from it)\n-        String baseBuilderId = \"jwt1\";\n-        String jwtToken = getBaseToken(baseBuilderId);\n-        JSONObject baseSettings = BuilderHelpers.setClaimsFromToken(jwtToken);\n-        // second token will be encrypted - we don't have a way to pass the key to the validation methods, so, we'll skip the checks that required the actual payload content\n-        baseSettings.remove(PayloadConstants.EXPIRATION_TIME);\n-        baseSettings.remove(PayloadConstants.ISSUED_AT);\n-        // since we getting all claims in the case, we can base our expectations upon the content of this first token)\n-        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, baseSettings, builderServer);\n+        String builderId = \"encryptJwtRS256\";\n \n-        // build settings that will tell the test app how to run/what to pass to the \"claimFrom\" api\n-        // give it a flag that says jwt string, and then pass the 3 part jwt token string\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n         JSONObject testSettings = new JSONObject();\n-        testSettings.put(JWTBuilderConstants.JWT_BUILDER_ACTION_CLAIM_FROM, JWTBuilderConstants.JWT_BUILDER_ACTION_CLAIM_FROM_JWT_STRING);\n-        testSettings.put(JWTBuilderConstants.JWT_TOKEN, jwtToken);\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n \n-        // Now, add any override values - for this test, there are none\n-        // Invoke the builder app to create a token (using (a second) builder, load all claims from the token into the second builder\n-        String builderId = \"encryptJwtRS256\";\n-        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        Expectations expectations = BuilderHelpers.createBadBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, JwtBuilderMessageConstants.CWWKS6058W_KEY_MGMT_KEY_MISSING, builderServer);\n+        expectations.addExpectation(new ServerMessageExpectation(builderServer, JwtBuilderMessageConstants.CWWKS6058W_KEY_MGMT_KEY_MISSING, \"Message log did not contain an error indicating that the key management key was missing.\"));\n \n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n         validationUtils.validateResult(response, expectations);\n \n     }\n \n-    // TODO Failing since claimsFrom doesn't know how to parse JWE Token\n-    //@Test\n-    public void JwtBuilderAPIBasicTests_claimsFrom_jweString_to_jwtToken_allClaims() throws Exception {\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_RSA_OAEP_RS256_publicKey_nullContentEncryptAlg() throws Exception {\n \n-        // build a token using the alternate builder config (we'll get claims from it)\n-        String baseBuilderId = \"encryptJwtRS256\";\n-        String jwtToken = getBaseToken(baseBuilderId);\n-        JSONObject baseSettings = BuilderHelpers.setClaimsFromToken(jwtToken, JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256));\n-        // since we getting all claims in the case, we can base our expectations upon the content of this first token)\n-        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, baseSettings, builderServer);\n+        String builderId = \"jwt1\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n \n-        // build settings that will tell the test app how to run/what to pass to the \"claimFrom\" api\n-        // give it a flag that says jwt string, and then pass the 3 part jwt token string\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n         JSONObject testSettings = new JSONObject();\n-        testSettings.put(JWTBuilderConstants.JWT_BUILDER_ACTION_CLAIM_FROM, JWTBuilderConstants.JWT_BUILDER_ACTION_CLAIM_FROM_JWT_STRING);\n-        testSettings.put(JWTBuilderConstants.JWT_TOKEN, jwtToken);\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n \n-        // Now, add any override values - for this test, there are none\n-        // Invoke the builder app to create a token (using (a second) builder, load all claims from the token into the second builder\n-        String builderId = \"jwt1\";\n-        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n \n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n         validationUtils.validateResult(response, expectations);\n \n+        validationUtils.validateJWEToken(response, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n     }\n \n-    // TODO Failing since claimsFrom doesn't know how to parse JWE Token\n-    //@Test\n-    public void JwtBuilderAPIBasicTests_claimsFrom_jweStringRS256_to_jweTokenRS384_allClaims() throws Exception {\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_nullContentEncryptAlg_goodBuilderConfig() throws Exception {\n \n-        // build a token using the alternate builder config (we'll get claims from it)\n-        String baseBuilderId = \"encryptJwtRS256\";\n-        String jwtToken = getBaseToken(baseBuilderId);\n-        JSONObject baseSettings = BuilderHelpers.setClaimsFromToken(jwtToken, JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256));\n-        // second token will be encrypted - we don't have a way to pass the key to the validation methods, so, we'll skip the checks that required the actual payload content\n-        baseSettings.remove(PayloadConstants.EXPIRATION_TIME);\n-        baseSettings.remove(PayloadConstants.ISSUED_AT);\n-        // since we getting all claims in the case, we can base our expectations upon the content of this first token)\n-        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, baseSettings, builderServer);\n+        String builderId = \"encryptJwtRS256\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n \n-        // build settings that will tell the test app how to run/what to pass to the \"claimFrom\" api\n-        // give it a flag that says jwt string, and then pass the 3 part jwt token string\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n         JSONObject testSettings = new JSONObject();\n-        testSettings.put(JWTBuilderConstants.JWT_BUILDER_ACTION_CLAIM_FROM, JWTBuilderConstants.JWT_BUILDER_ACTION_CLAIM_FROM_JWT_STRING);\n-        testSettings.put(JWTBuilderConstants.JWT_TOKEN, jwtToken);\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n \n-        // Now, add any override values - for this test, there are none\n-        // Invoke the builder app to create a token (using (a second) builder, load all claims from the token into the second builder\n-        String builderId = \"encryptJwtRS384\";\n-        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n \n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n         validationUtils.validateResult(response, expectations);\n \n+        validationUtils.validateJWEToken(response, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n     }\n \n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n     @Test\n-    public void JwtBuilderAPIBasicTests_claimsFrom_jweString_encodedPayload_allClaims() throws Exception {\n+    public void JwtBuilderAPIBasicTests_encryptWith_useSameSettingsAsBuilderConfig() throws Exception {\n \n-        // build a token using the alternate builder config (we'll get claims from it)\n-        String baseBuilderId = \"encryptJwtRS256\";\n-        String jwtToken = getBaseToken(baseBuilderId);\n-        JSONObject baseSettings = BuilderHelpers.setClaimsFromToken(jwtToken, JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256));\n-        // second token will be encrypted - we don't have a way to pass the key to the validation methods, so, we'll skip the checks that required the actual payload content\n-        baseSettings.remove(PayloadConstants.EXPIRATION_TIME);\n-        baseSettings.remove(PayloadConstants.ISSUED_AT);\n-        // since we getting all claims in the case, we can base our expectations upon the content of this first token)\n-        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, baseSettings, builderServer);\n+        String builderId = \"encryptJwtRS256\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n \n-        // build settings that will tell the test app how to run/what to pass to the \"claimFrom\" api\n-        // give it a flag that says jwt string, and then pass the 3 part jwt token string\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n         JSONObject testSettings = new JSONObject();\n-        testSettings.put(JWTBuilderConstants.JWT_BUILDER_ACTION_CLAIM_FROM, JWTBuilderConstants.JWT_BUILDER_ACTION_CLAIM_FROM_JWT_STRING);\n-        // just pass the encoded payload\n-        testSettings.put(JWTBuilderConstants.JWT_TOKEN, BuilderHelpers.getPayload(jwtToken, JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256)));\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.DEFAULT_KEY_MGMT_KEY_ALG);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS384);\n+\n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n \n-        // Now, add any override values - for this test, there are none\n-        // Invoke the builder app to create a token (using (a second) builder, load all claims from the token into the second builder\n-        String builderId = \"encryptJwtRS384\";\n         Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n+        validationUtils.validateResult(response, expectations);\n+\n+        validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n+    }\n+\n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.CollectionID)\n+    @Test\n+    public void JwtBuilderAPIBasicTests_encryptWith_useDifferentKeyMgmtKeyAlgThanBuilderConfig() throws Exception {\n+\n+        String builderId = \"encryptJwtRS256\";\n+        JSONObject expectationSettings = BuilderHelpers.setDefaultClaimsWithEncryption(builderId, JWTBuilderConstants.KEY_MGMT_KEY_ALG_256, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        // create settings that will be passed to the test app as well as used to create what to expect in the results\n+        JSONObject testSettings = new JSONObject();\n+        testSettings.put(JWTBuilderConstants.KEY_MGMT_ALG, JWTBuilderConstants.KEY_MGMT_KEY_ALG_256);\n+\n+        String encryptKey = JwtKeyTools.getComplexPublicKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n+        String decryptKey = JwtKeyTools.getComplexPrivateKeyForSigAlg(builderServer, JWTBuilderConstants.SIGALG_RS256);\n \n+        testSettings.put(JWTBuilderConstants.ENCRYPT_KEY, encryptKey);\n+        testSettings.put(JWTBuilderConstants.DECRYPT_KEY, decryptKey);\n+        testSettings.put(JWTBuilderConstants.CONTENT_ENCRYPT_ALG, JWTBuilderConstants.DEFAULT_CONTENT_ENCRYPT_ALG);\n+\n+        Expectations expectations = BuilderHelpers.createGoodBuilderExpectations(JWTBuilderConstants.JWT_BUILDER_SETAPIS_ENDPOINT, expectationSettings, builderServer);\n+\n+        Page response = actions.invokeJwtBuilder_setApis(_testName, builderServer, builderId, testSettings);\n         validationUtils.validateResult(response, expectations);\n \n+        validationUtils.validateJWEToken(response, (String) testSettings.get(JWTBuilderConstants.KEY_MGMT_ALG), (String) testSettings.get(JWTBuilderConstants.DECRYPT_KEY), (String) testSettings.get(JWTBuilderConstants.CONTENT_ENCRYPT_ALG));\n+\n     }\n \n+    @SkipForRepeat(JwtBuilderClaimRepeatActions.SingleID)\n     @Test\n-    public void JwtBuilderAPIBasicTests_claimsFrom_jweString_decodedPayload_allClaims() throws Exception {\n+    public void JwtBuilderAPIBasicTests_encryptWith_useDifferentPublicKeyThanBuilderConfig() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "876a381af4b51827bdfb7f9f2b80d2aac696845f"}, "originalPosition": 2076}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3084, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}