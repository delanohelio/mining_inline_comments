{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MDE2OTAz", "number": 12732, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTo1MzoyOFrOEIir-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTo1ODoxOVrOEIixMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzkyMzc2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.microprofile.metrics.3.0.monitor/src/com/ibm/ws/microprofile/metrics/monitor/MetricsJaxRsEMCallbackImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTo1MzoyOFrOGokcKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNzo1NToyOVrOGpFn0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5MzI1Ng==", "bodyText": "Copyright is missing", "url": "https://github.com/OpenLiberty/open-liberty/pull/12732#discussion_r445193256", "createdAt": "2020-06-24T21:53:28Z", "author": {"login": "fmhwong"}, "path": "dev/com.ibm.ws.microprofile.metrics.3.0.monitor/src/com/ibm/ws/microprofile/metrics/monitor/MetricsJaxRsEMCallbackImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.ibm.ws.microprofile.metrics.monitor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e38a33c76122a54e3db1e0396b7a06491f90d65"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTczNjkxNQ==", "bodyText": "fixed", "url": "https://github.com/OpenLiberty/open-liberty/pull/12732#discussion_r445736915", "createdAt": "2020-06-25T17:55:29Z", "author": {"login": "Channyboy"}, "path": "dev/com.ibm.ws.microprofile.metrics.3.0.monitor/src/com/ibm/ws/microprofile/metrics/monitor/MetricsJaxRsEMCallbackImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.ibm.ws.microprofile.metrics.monitor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5MzI1Ng=="}, "originalCommit": {"oid": "4e38a33c76122a54e3db1e0396b7a06491f90d65"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzkzNjE0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.microprofile.metrics.3.0.monitor/src/com/ibm/ws/microprofile/metrics/monitor/MetricsJaxRsEMCallbackImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTo1Nzo1NVrOGokjrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNzo1NTozNVrOGpFoCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5NTE4MA==", "bodyText": "Irregular indentation", "url": "https://github.com/OpenLiberty/open-liberty/pull/12732#discussion_r445195180", "createdAt": "2020-06-24T21:57:55Z", "author": {"login": "fmhwong"}, "path": "dev/com.ibm.ws.microprofile.metrics.3.0.monitor/src/com/ibm/ws/microprofile/metrics/monitor/MetricsJaxRsEMCallbackImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.ibm.ws.microprofile.metrics.monitor;\n+\n+import com.ibm.ws.jaxrs.defaultexceptionmapper.DefaultExceptionMapperCallback;\n+import com.ibm.ws.microprofile.metrics.impl.SharedMetricRegistries;\n+import com.ibm.ws.runtime.metadata.ComponentMetaData;\n+import com.ibm.ws.threadContext.ComponentMetaDataAccessorImpl;\n+\n+import java.lang.reflect.Method;\n+import java.util.AbstractMap;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.ws.rs.container.ResourceInfo;\n+\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+\n+@Component(service = {\n+\t\tDefaultExceptionMapperCallback.class }, configurationPolicy = ConfigurationPolicy.IGNORE, property = {\n+\t\t\t\t\"service.vendor=IBM\" })\n+public class MetricsJaxRsEMCallbackImpl  implements DefaultExceptionMapperCallback {\n+\n+\t\n+\tpublic static final String EXCEPTION_KEY = MetricsJaxRsEMCallbackImpl.class.getName() + \".Exception\";\n+\t\n+\t\n+\tpublic synchronized static Counter registerOrRetrieveRESTUnmappedExceptionMetric(String fullyQualifiedClassName, String methodSignature) {\n+\t\tMetricRegistry baseMetricRegistry = sharedMetricRegistry.getOrCreate(MetricRegistry.Type.BASE.getName());\n+\t\t\n+\t\tMetadata metadata = Metadata.builder().withType(MetricType.COUNTER).withName(\"REST.request.unmappedException.total\").withDescription(\"REST.request.unmappedException.description\").withDisplayName(\"Total Unmapped Exception Requests\").build();\n+\t\t\n+\t\tTag classTag = new Tag(\"class\", fullyQualifiedClassName);\n+\t\tTag methodTag = new Tag(\"method\", methodSignature);\n+\t\t\n+\t\tCounter counter = baseMetricRegistry.counter(metadata, classTag, methodTag);\n+\t\t\n+\t\tComponentMetaData cmd = ComponentMetaDataAccessorImpl.getComponentMetaDataAccessor().getComponentMetaData();\n+\t\t\n+\t\tsharedMetricRegistry.associateMetricIDToApplication(new MetricID(metadata.getName(), classTag, methodTag), cmd.getJ2EEName().getApplication(), baseMetricRegistry);\n+\t\t\n+\t\treturn counter;\n+\t}\n+\t\n+\t@Override\n+\tpublic Map<String, Object> onDefaultMappedException(Throwable t, int statusCode, ResourceInfo resourceInfo) {\n+\t\tMap.Entry<String, String> classXmethod = resolveSimpleTimerClassMethodTags(resourceInfo);\n+\n+\t\tregisterOrRetrieveRESTUnmappedExceptionMetric(classXmethod.getKey() ,classXmethod.getValue()).inc();\n+\t\t\n+\t\treturn Collections.singletonMap(EXCEPTION_KEY, t);\n+\t}\n+\n+\tstatic SharedMetricRegistries sharedMetricRegistry;\n+\t\n+\t@Reference", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e38a33c76122a54e3db1e0396b7a06491f90d65"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTczNjk2OQ==", "bodyText": "fixed", "url": "https://github.com/OpenLiberty/open-liberty/pull/12732#discussion_r445736969", "createdAt": "2020-06-25T17:55:35Z", "author": {"login": "Channyboy"}, "path": "dev/com.ibm.ws.microprofile.metrics.3.0.monitor/src/com/ibm/ws/microprofile/metrics/monitor/MetricsJaxRsEMCallbackImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.ibm.ws.microprofile.metrics.monitor;\n+\n+import com.ibm.ws.jaxrs.defaultexceptionmapper.DefaultExceptionMapperCallback;\n+import com.ibm.ws.microprofile.metrics.impl.SharedMetricRegistries;\n+import com.ibm.ws.runtime.metadata.ComponentMetaData;\n+import com.ibm.ws.threadContext.ComponentMetaDataAccessorImpl;\n+\n+import java.lang.reflect.Method;\n+import java.util.AbstractMap;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.ws.rs.container.ResourceInfo;\n+\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+\n+@Component(service = {\n+\t\tDefaultExceptionMapperCallback.class }, configurationPolicy = ConfigurationPolicy.IGNORE, property = {\n+\t\t\t\t\"service.vendor=IBM\" })\n+public class MetricsJaxRsEMCallbackImpl  implements DefaultExceptionMapperCallback {\n+\n+\t\n+\tpublic static final String EXCEPTION_KEY = MetricsJaxRsEMCallbackImpl.class.getName() + \".Exception\";\n+\t\n+\t\n+\tpublic synchronized static Counter registerOrRetrieveRESTUnmappedExceptionMetric(String fullyQualifiedClassName, String methodSignature) {\n+\t\tMetricRegistry baseMetricRegistry = sharedMetricRegistry.getOrCreate(MetricRegistry.Type.BASE.getName());\n+\t\t\n+\t\tMetadata metadata = Metadata.builder().withType(MetricType.COUNTER).withName(\"REST.request.unmappedException.total\").withDescription(\"REST.request.unmappedException.description\").withDisplayName(\"Total Unmapped Exception Requests\").build();\n+\t\t\n+\t\tTag classTag = new Tag(\"class\", fullyQualifiedClassName);\n+\t\tTag methodTag = new Tag(\"method\", methodSignature);\n+\t\t\n+\t\tCounter counter = baseMetricRegistry.counter(metadata, classTag, methodTag);\n+\t\t\n+\t\tComponentMetaData cmd = ComponentMetaDataAccessorImpl.getComponentMetaDataAccessor().getComponentMetaData();\n+\t\t\n+\t\tsharedMetricRegistry.associateMetricIDToApplication(new MetricID(metadata.getName(), classTag, methodTag), cmd.getJ2EEName().getApplication(), baseMetricRegistry);\n+\t\t\n+\t\treturn counter;\n+\t}\n+\t\n+\t@Override\n+\tpublic Map<String, Object> onDefaultMappedException(Throwable t, int statusCode, ResourceInfo resourceInfo) {\n+\t\tMap.Entry<String, String> classXmethod = resolveSimpleTimerClassMethodTags(resourceInfo);\n+\n+\t\tregisterOrRetrieveRESTUnmappedExceptionMetric(classXmethod.getKey() ,classXmethod.getValue()).inc();\n+\t\t\n+\t\treturn Collections.singletonMap(EXCEPTION_KEY, t);\n+\t}\n+\n+\tstatic SharedMetricRegistries sharedMetricRegistry;\n+\t\n+\t@Reference", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5NTE4MA=="}, "originalCommit": {"oid": "4e38a33c76122a54e3db1e0396b7a06491f90d65"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzkzNzE0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.microprofile.metrics.3.0.monitor/src/com/ibm/ws/microprofile/metrics/monitor/MetricsJaxRsEMCallbackImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTo1ODoxOVrOGokkOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToyMTo1NVrOGrBq0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5NTMyMQ==", "bodyText": "Do you need a null check on resourceInfo?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12732#discussion_r445195321", "createdAt": "2020-06-24T21:58:19Z", "author": {"login": "fmhwong"}, "path": "dev/com.ibm.ws.microprofile.metrics.3.0.monitor/src/com/ibm/ws/microprofile/metrics/monitor/MetricsJaxRsEMCallbackImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.ibm.ws.microprofile.metrics.monitor;\n+\n+import com.ibm.ws.jaxrs.defaultexceptionmapper.DefaultExceptionMapperCallback;\n+import com.ibm.ws.microprofile.metrics.impl.SharedMetricRegistries;\n+import com.ibm.ws.runtime.metadata.ComponentMetaData;\n+import com.ibm.ws.threadContext.ComponentMetaDataAccessorImpl;\n+\n+import java.lang.reflect.Method;\n+import java.util.AbstractMap;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.ws.rs.container.ResourceInfo;\n+\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+\n+@Component(service = {\n+\t\tDefaultExceptionMapperCallback.class }, configurationPolicy = ConfigurationPolicy.IGNORE, property = {\n+\t\t\t\t\"service.vendor=IBM\" })\n+public class MetricsJaxRsEMCallbackImpl  implements DefaultExceptionMapperCallback {\n+\n+\t\n+\tpublic static final String EXCEPTION_KEY = MetricsJaxRsEMCallbackImpl.class.getName() + \".Exception\";\n+\t\n+\t\n+\tpublic synchronized static Counter registerOrRetrieveRESTUnmappedExceptionMetric(String fullyQualifiedClassName, String methodSignature) {\n+\t\tMetricRegistry baseMetricRegistry = sharedMetricRegistry.getOrCreate(MetricRegistry.Type.BASE.getName());\n+\t\t\n+\t\tMetadata metadata = Metadata.builder().withType(MetricType.COUNTER).withName(\"REST.request.unmappedException.total\").withDescription(\"REST.request.unmappedException.description\").withDisplayName(\"Total Unmapped Exception Requests\").build();\n+\t\t\n+\t\tTag classTag = new Tag(\"class\", fullyQualifiedClassName);\n+\t\tTag methodTag = new Tag(\"method\", methodSignature);\n+\t\t\n+\t\tCounter counter = baseMetricRegistry.counter(metadata, classTag, methodTag);\n+\t\t\n+\t\tComponentMetaData cmd = ComponentMetaDataAccessorImpl.getComponentMetaDataAccessor().getComponentMetaData();\n+\t\t\n+\t\tsharedMetricRegistry.associateMetricIDToApplication(new MetricID(metadata.getName(), classTag, methodTag), cmd.getJ2EEName().getApplication(), baseMetricRegistry);\n+\t\t\n+\t\treturn counter;\n+\t}\n+\t\n+\t@Override\n+\tpublic Map<String, Object> onDefaultMappedException(Throwable t, int statusCode, ResourceInfo resourceInfo) {\n+\t\tMap.Entry<String, String> classXmethod = resolveSimpleTimerClassMethodTags(resourceInfo);\n+\n+\t\tregisterOrRetrieveRESTUnmappedExceptionMetric(classXmethod.getKey() ,classXmethod.getValue()).inc();\n+\t\t\n+\t\treturn Collections.singletonMap(EXCEPTION_KEY, t);\n+\t}\n+\n+\tstatic SharedMetricRegistries sharedMetricRegistry;\n+\t\n+\t@Reference\n+    public void getSharedMetricRegistries(SharedMetricRegistries sharedMetricRegistry) {\n+\t\tMetricsJaxRsEMCallbackImpl.sharedMetricRegistry = sharedMetricRegistry;\n+    }\n+\t\n+\t\n+\tprivate Map.Entry<String, String> resolveSimpleTimerClassMethodTags(ResourceInfo resourceInfo) {\n+\t\tClass<?> resourceClass = resourceInfo.getResourceClass();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e38a33c76122a54e3db1e0396b7a06491f90d65"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTczNzc4NQ==", "bodyText": "Hm, this is called by the callback handler in response to a JAX-RS request that ended with an unmapped exception. I don't think the ResourceInfo would be null. @jim-krueger  what do you think?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12732#discussion_r445737785", "createdAt": "2020-06-25T17:57:05Z", "author": {"login": "Channyboy"}, "path": "dev/com.ibm.ws.microprofile.metrics.3.0.monitor/src/com/ibm/ws/microprofile/metrics/monitor/MetricsJaxRsEMCallbackImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.ibm.ws.microprofile.metrics.monitor;\n+\n+import com.ibm.ws.jaxrs.defaultexceptionmapper.DefaultExceptionMapperCallback;\n+import com.ibm.ws.microprofile.metrics.impl.SharedMetricRegistries;\n+import com.ibm.ws.runtime.metadata.ComponentMetaData;\n+import com.ibm.ws.threadContext.ComponentMetaDataAccessorImpl;\n+\n+import java.lang.reflect.Method;\n+import java.util.AbstractMap;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.ws.rs.container.ResourceInfo;\n+\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+\n+@Component(service = {\n+\t\tDefaultExceptionMapperCallback.class }, configurationPolicy = ConfigurationPolicy.IGNORE, property = {\n+\t\t\t\t\"service.vendor=IBM\" })\n+public class MetricsJaxRsEMCallbackImpl  implements DefaultExceptionMapperCallback {\n+\n+\t\n+\tpublic static final String EXCEPTION_KEY = MetricsJaxRsEMCallbackImpl.class.getName() + \".Exception\";\n+\t\n+\t\n+\tpublic synchronized static Counter registerOrRetrieveRESTUnmappedExceptionMetric(String fullyQualifiedClassName, String methodSignature) {\n+\t\tMetricRegistry baseMetricRegistry = sharedMetricRegistry.getOrCreate(MetricRegistry.Type.BASE.getName());\n+\t\t\n+\t\tMetadata metadata = Metadata.builder().withType(MetricType.COUNTER).withName(\"REST.request.unmappedException.total\").withDescription(\"REST.request.unmappedException.description\").withDisplayName(\"Total Unmapped Exception Requests\").build();\n+\t\t\n+\t\tTag classTag = new Tag(\"class\", fullyQualifiedClassName);\n+\t\tTag methodTag = new Tag(\"method\", methodSignature);\n+\t\t\n+\t\tCounter counter = baseMetricRegistry.counter(metadata, classTag, methodTag);\n+\t\t\n+\t\tComponentMetaData cmd = ComponentMetaDataAccessorImpl.getComponentMetaDataAccessor().getComponentMetaData();\n+\t\t\n+\t\tsharedMetricRegistry.associateMetricIDToApplication(new MetricID(metadata.getName(), classTag, methodTag), cmd.getJ2EEName().getApplication(), baseMetricRegistry);\n+\t\t\n+\t\treturn counter;\n+\t}\n+\t\n+\t@Override\n+\tpublic Map<String, Object> onDefaultMappedException(Throwable t, int statusCode, ResourceInfo resourceInfo) {\n+\t\tMap.Entry<String, String> classXmethod = resolveSimpleTimerClassMethodTags(resourceInfo);\n+\n+\t\tregisterOrRetrieveRESTUnmappedExceptionMetric(classXmethod.getKey() ,classXmethod.getValue()).inc();\n+\t\t\n+\t\treturn Collections.singletonMap(EXCEPTION_KEY, t);\n+\t}\n+\n+\tstatic SharedMetricRegistries sharedMetricRegistry;\n+\t\n+\t@Reference\n+    public void getSharedMetricRegistries(SharedMetricRegistries sharedMetricRegistry) {\n+\t\tMetricsJaxRsEMCallbackImpl.sharedMetricRegistry = sharedMetricRegistry;\n+    }\n+\t\n+\t\n+\tprivate Map.Entry<String, String> resolveSimpleTimerClassMethodTags(ResourceInfo resourceInfo) {\n+\t\tClass<?> resourceClass = resourceInfo.getResourceClass();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5NTMyMQ=="}, "originalCommit": {"oid": "4e38a33c76122a54e3db1e0396b7a06491f90d65"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2OTI5Ng==", "bodyText": "Correct @Channyboy , resourceInfo should never be null.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12732#discussion_r447769296", "createdAt": "2020-06-30T15:21:55Z", "author": {"login": "jim-krueger"}, "path": "dev/com.ibm.ws.microprofile.metrics.3.0.monitor/src/com/ibm/ws/microprofile/metrics/monitor/MetricsJaxRsEMCallbackImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.ibm.ws.microprofile.metrics.monitor;\n+\n+import com.ibm.ws.jaxrs.defaultexceptionmapper.DefaultExceptionMapperCallback;\n+import com.ibm.ws.microprofile.metrics.impl.SharedMetricRegistries;\n+import com.ibm.ws.runtime.metadata.ComponentMetaData;\n+import com.ibm.ws.threadContext.ComponentMetaDataAccessorImpl;\n+\n+import java.lang.reflect.Method;\n+import java.util.AbstractMap;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import javax.ws.rs.container.ResourceInfo;\n+\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricRegistry;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+\n+@Component(service = {\n+\t\tDefaultExceptionMapperCallback.class }, configurationPolicy = ConfigurationPolicy.IGNORE, property = {\n+\t\t\t\t\"service.vendor=IBM\" })\n+public class MetricsJaxRsEMCallbackImpl  implements DefaultExceptionMapperCallback {\n+\n+\t\n+\tpublic static final String EXCEPTION_KEY = MetricsJaxRsEMCallbackImpl.class.getName() + \".Exception\";\n+\t\n+\t\n+\tpublic synchronized static Counter registerOrRetrieveRESTUnmappedExceptionMetric(String fullyQualifiedClassName, String methodSignature) {\n+\t\tMetricRegistry baseMetricRegistry = sharedMetricRegistry.getOrCreate(MetricRegistry.Type.BASE.getName());\n+\t\t\n+\t\tMetadata metadata = Metadata.builder().withType(MetricType.COUNTER).withName(\"REST.request.unmappedException.total\").withDescription(\"REST.request.unmappedException.description\").withDisplayName(\"Total Unmapped Exception Requests\").build();\n+\t\t\n+\t\tTag classTag = new Tag(\"class\", fullyQualifiedClassName);\n+\t\tTag methodTag = new Tag(\"method\", methodSignature);\n+\t\t\n+\t\tCounter counter = baseMetricRegistry.counter(metadata, classTag, methodTag);\n+\t\t\n+\t\tComponentMetaData cmd = ComponentMetaDataAccessorImpl.getComponentMetaDataAccessor().getComponentMetaData();\n+\t\t\n+\t\tsharedMetricRegistry.associateMetricIDToApplication(new MetricID(metadata.getName(), classTag, methodTag), cmd.getJ2EEName().getApplication(), baseMetricRegistry);\n+\t\t\n+\t\treturn counter;\n+\t}\n+\t\n+\t@Override\n+\tpublic Map<String, Object> onDefaultMappedException(Throwable t, int statusCode, ResourceInfo resourceInfo) {\n+\t\tMap.Entry<String, String> classXmethod = resolveSimpleTimerClassMethodTags(resourceInfo);\n+\n+\t\tregisterOrRetrieveRESTUnmappedExceptionMetric(classXmethod.getKey() ,classXmethod.getValue()).inc();\n+\t\t\n+\t\treturn Collections.singletonMap(EXCEPTION_KEY, t);\n+\t}\n+\n+\tstatic SharedMetricRegistries sharedMetricRegistry;\n+\t\n+\t@Reference\n+    public void getSharedMetricRegistries(SharedMetricRegistries sharedMetricRegistry) {\n+\t\tMetricsJaxRsEMCallbackImpl.sharedMetricRegistry = sharedMetricRegistry;\n+    }\n+\t\n+\t\n+\tprivate Map.Entry<String, String> resolveSimpleTimerClassMethodTags(ResourceInfo resourceInfo) {\n+\t\tClass<?> resourceClass = resourceInfo.getResourceClass();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5NTMyMQ=="}, "originalCommit": {"oid": "4e38a33c76122a54e3db1e0396b7a06491f90d65"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1553, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}