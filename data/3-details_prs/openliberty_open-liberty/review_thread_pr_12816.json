{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMzYyNTI2", "number": 12816, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjozMjo1MlrOEKlO_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzoxMzo1M1rOEKmEnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTMxMjYwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.app.manager/src/com/ibm/ws/app/manager/internal/lifecycle/ApplicationStartBarrierImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjozMjo1MlrOGrtPUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTozMDowMlrOHcibIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ4MzE1Mg==", "bodyText": "It is not clear to me how this component does anything other than provide some additional trace points.  It is fine if that is all this component does, but if so please add a comment to the class itself.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12816#discussion_r448483152", "createdAt": "2020-07-01T16:32:52Z", "author": {"login": "tjwatson"}, "path": "dev/com.ibm.ws.app.manager/src/com/ibm/ws/app/manager/internal/lifecycle/ApplicationStartBarrierImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.app.manager.internal.lifecycle;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+import org.osgi.framework.InvalidSyntaxException;\n+import org.osgi.service.cm.Configuration;\n+import org.osgi.service.cm.ConfigurationAdmin;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+import org.osgi.service.component.annotations.ReferencePolicyOption;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.wsspi.application.lifecycle.ApplicationPrereq;\n+import com.ibm.wsspi.application.lifecycle.ApplicationStartBarrier;\n+\n+/**\n+ * Enable Declarative Services to enforce start sequencing.\n+ * Application handlers should depend on this service.\n+ * Services should implement {@link ApplicationPrereq}\n+ */\n+@Component(configurationPolicy = ConfigurationPolicy.REQUIRE)\n+public class ApplicationStartBarrierImpl implements ApplicationStartBarrier {\n+    private static final TraceComponent tc = Tr.register(ApplicationStartBarrierImpl.class);\n+\n+    @Reference(cardinality = ReferenceCardinality.MULTIPLE)\n+    void setApplicationPrereq(ApplicationPrereq applicationPrereq) {\n+    }\n+\n+    /**\n+     * Non configurable immediate component to track prereqs as they appear.\n+     */\n+    @Component(configurationPolicy = ConfigurationPolicy.IGNORE, immediate = true)\n+    public static class PrereqWatcher {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "656084dcc79159c6af7bd200a249ae28e1ee4fe5"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY4NjE3OQ==", "bodyText": "The test case and #11152\nare (going to be)  ApplicationPrereqs", "url": "https://github.com/OpenLiberty/open-liberty/pull/12816#discussion_r499686179", "createdAt": "2020-10-05T15:30:02Z", "author": {"login": "AndrewDJBanks"}, "path": "dev/com.ibm.ws.app.manager/src/com/ibm/ws/app/manager/internal/lifecycle/ApplicationStartBarrierImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.app.manager.internal.lifecycle;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+import org.osgi.framework.InvalidSyntaxException;\n+import org.osgi.service.cm.Configuration;\n+import org.osgi.service.cm.ConfigurationAdmin;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+import org.osgi.service.component.annotations.ReferencePolicyOption;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.wsspi.application.lifecycle.ApplicationPrereq;\n+import com.ibm.wsspi.application.lifecycle.ApplicationStartBarrier;\n+\n+/**\n+ * Enable Declarative Services to enforce start sequencing.\n+ * Application handlers should depend on this service.\n+ * Services should implement {@link ApplicationPrereq}\n+ */\n+@Component(configurationPolicy = ConfigurationPolicy.REQUIRE)\n+public class ApplicationStartBarrierImpl implements ApplicationStartBarrier {\n+    private static final TraceComponent tc = Tr.register(ApplicationStartBarrierImpl.class);\n+\n+    @Reference(cardinality = ReferenceCardinality.MULTIPLE)\n+    void setApplicationPrereq(ApplicationPrereq applicationPrereq) {\n+    }\n+\n+    /**\n+     * Non configurable immediate component to track prereqs as they appear.\n+     */\n+    @Component(configurationPolicy = ConfigurationPolicy.IGNORE, immediate = true)\n+    public static class PrereqWatcher {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ4MzE1Mg=="}, "originalCommit": {"oid": "656084dcc79159c6af7bd200a249ae28e1ee4fe5"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTMxNzQwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.app.manager/src/com/ibm/ws/app/manager/internal/lifecycle/ApplicationStartBarrierImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjozNDoxOVrOGrtSQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNjoyOTo1MlrOG4U1Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ4MzkwNg==", "bodyText": "Why always sort even when trace is not enabled.  I only see realisedPrereqs getting used within trace blocks.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12816#discussion_r448483906", "createdAt": "2020-07-01T16:34:19Z", "author": {"login": "tjwatson"}, "path": "dev/com.ibm.ws.app.manager/src/com/ibm/ws/app/manager/internal/lifecycle/ApplicationStartBarrierImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.app.manager.internal.lifecycle;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+import org.osgi.framework.InvalidSyntaxException;\n+import org.osgi.service.cm.Configuration;\n+import org.osgi.service.cm.ConfigurationAdmin;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+import org.osgi.service.component.annotations.ReferencePolicyOption;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.wsspi.application.lifecycle.ApplicationPrereq;\n+import com.ibm.wsspi.application.lifecycle.ApplicationStartBarrier;\n+\n+/**\n+ * Enable Declarative Services to enforce start sequencing.\n+ * Application handlers should depend on this service.\n+ * Services should implement {@link ApplicationPrereq}\n+ */\n+@Component(configurationPolicy = ConfigurationPolicy.REQUIRE)\n+public class ApplicationStartBarrierImpl implements ApplicationStartBarrier {\n+    private static final TraceComponent tc = Tr.register(ApplicationStartBarrierImpl.class);\n+\n+    @Reference(cardinality = ReferenceCardinality.MULTIPLE)\n+    void setApplicationPrereq(ApplicationPrereq applicationPrereq) {\n+    }\n+\n+    /**\n+     * Non configurable immediate component to track prereqs as they appear.\n+     */\n+    @Component(configurationPolicy = ConfigurationPolicy.IGNORE, immediate = true)\n+    public static class PrereqWatcher {\n+        private final ConfigurationAdmin configurationAdmin;\n+        private final ArrayList<String> realisedPrereqs = new ArrayList<>();\n+\n+        /**\n+         * Use constructor parameter references to ensure that mandatory references are supplied first.\n+         *\n+         * @param configurationAdmin must be supplied before any calls to setApplicationPrereq\n+         */\n+        @Activate\n+        public PrereqWatcher(@Reference ConfigurationAdmin configurationAdmin) {\n+            this.configurationAdmin = configurationAdmin;\n+            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n+                Tr.debug(tc, \"Known configured application prereqs:\" + listConfiguredPrereqs());\n+            }\n+        }\n+\n+        private String listConfiguredPrereqs() {\n+            Configuration[] configs;\n+            try {\n+                configs = this.configurationAdmin.listConfigurations(\"(service.factoryPid=\" + ApplicationPrereq.class.getName() + \")\");\n+            } catch (IOException | InvalidSyntaxException e) {\n+                StringWriter sw = new StringWriter();\n+                e.printStackTrace(new PrintWriter(sw));\n+                return \"Error listing prereqs:\" + sw;\n+            }\n+            if (configs == null)\n+                return null;\n+\n+            String[] prereqClassNames = new String[configs.length];\n+            for (int i = 0; i < configs.length; i++) {\n+                prereqClassNames[i] = (String) configs[i].getProperties().get(\"className\");\n+            }\n+\n+            Arrays.sort(prereqClassNames);\n+            return Arrays.toString(prereqClassNames);\n+        }\n+\n+        @Reference(cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC, policyOption = ReferencePolicyOption.GREEDY)\n+        void setApplicationPrereq(ApplicationPrereq applicationPrereq) {\n+            realisedPrereqs.add(applicationPrereq.getClass().getName());\n+            Collections.sort(realisedPrereqs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "656084dcc79159c6af7bd200a249ae28e1ee4fe5"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQzMDk4Mw==", "bodyText": "Very good question. Would it be acceptable to use a sorted set instead, or should we simply defer sorting until we know it needs to be used?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12816#discussion_r461430983", "createdAt": "2020-07-28T09:05:15Z", "author": {"login": "joe-chacko"}, "path": "dev/com.ibm.ws.app.manager/src/com/ibm/ws/app/manager/internal/lifecycle/ApplicationStartBarrierImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.app.manager.internal.lifecycle;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+import org.osgi.framework.InvalidSyntaxException;\n+import org.osgi.service.cm.Configuration;\n+import org.osgi.service.cm.ConfigurationAdmin;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+import org.osgi.service.component.annotations.ReferencePolicyOption;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.wsspi.application.lifecycle.ApplicationPrereq;\n+import com.ibm.wsspi.application.lifecycle.ApplicationStartBarrier;\n+\n+/**\n+ * Enable Declarative Services to enforce start sequencing.\n+ * Application handlers should depend on this service.\n+ * Services should implement {@link ApplicationPrereq}\n+ */\n+@Component(configurationPolicy = ConfigurationPolicy.REQUIRE)\n+public class ApplicationStartBarrierImpl implements ApplicationStartBarrier {\n+    private static final TraceComponent tc = Tr.register(ApplicationStartBarrierImpl.class);\n+\n+    @Reference(cardinality = ReferenceCardinality.MULTIPLE)\n+    void setApplicationPrereq(ApplicationPrereq applicationPrereq) {\n+    }\n+\n+    /**\n+     * Non configurable immediate component to track prereqs as they appear.\n+     */\n+    @Component(configurationPolicy = ConfigurationPolicy.IGNORE, immediate = true)\n+    public static class PrereqWatcher {\n+        private final ConfigurationAdmin configurationAdmin;\n+        private final ArrayList<String> realisedPrereqs = new ArrayList<>();\n+\n+        /**\n+         * Use constructor parameter references to ensure that mandatory references are supplied first.\n+         *\n+         * @param configurationAdmin must be supplied before any calls to setApplicationPrereq\n+         */\n+        @Activate\n+        public PrereqWatcher(@Reference ConfigurationAdmin configurationAdmin) {\n+            this.configurationAdmin = configurationAdmin;\n+            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n+                Tr.debug(tc, \"Known configured application prereqs:\" + listConfiguredPrereqs());\n+            }\n+        }\n+\n+        private String listConfiguredPrereqs() {\n+            Configuration[] configs;\n+            try {\n+                configs = this.configurationAdmin.listConfigurations(\"(service.factoryPid=\" + ApplicationPrereq.class.getName() + \")\");\n+            } catch (IOException | InvalidSyntaxException e) {\n+                StringWriter sw = new StringWriter();\n+                e.printStackTrace(new PrintWriter(sw));\n+                return \"Error listing prereqs:\" + sw;\n+            }\n+            if (configs == null)\n+                return null;\n+\n+            String[] prereqClassNames = new String[configs.length];\n+            for (int i = 0; i < configs.length; i++) {\n+                prereqClassNames[i] = (String) configs[i].getProperties().get(\"className\");\n+            }\n+\n+            Arrays.sort(prereqClassNames);\n+            return Arrays.toString(prereqClassNames);\n+        }\n+\n+        @Reference(cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC, policyOption = ReferencePolicyOption.GREEDY)\n+        void setApplicationPrereq(ApplicationPrereq applicationPrereq) {\n+            realisedPrereqs.add(applicationPrereq.getClass().getName());\n+            Collections.sort(realisedPrereqs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ4MzkwNg=="}, "originalCommit": {"oid": "656084dcc79159c6af7bd200a249ae28e1ee4fe5"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcxNDc4Nw==", "bodyText": "I suppose a sorted set would be the most simple.  The number of prereqs likely is not high so sorting as you add likely should not show any measurable performance difference.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12816#discussion_r461714787", "createdAt": "2020-07-28T16:29:52Z", "author": {"login": "tjwatson"}, "path": "dev/com.ibm.ws.app.manager/src/com/ibm/ws/app/manager/internal/lifecycle/ApplicationStartBarrierImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.app.manager.internal.lifecycle;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+import org.osgi.framework.InvalidSyntaxException;\n+import org.osgi.service.cm.Configuration;\n+import org.osgi.service.cm.ConfigurationAdmin;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+import org.osgi.service.component.annotations.ReferencePolicyOption;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.wsspi.application.lifecycle.ApplicationPrereq;\n+import com.ibm.wsspi.application.lifecycle.ApplicationStartBarrier;\n+\n+/**\n+ * Enable Declarative Services to enforce start sequencing.\n+ * Application handlers should depend on this service.\n+ * Services should implement {@link ApplicationPrereq}\n+ */\n+@Component(configurationPolicy = ConfigurationPolicy.REQUIRE)\n+public class ApplicationStartBarrierImpl implements ApplicationStartBarrier {\n+    private static final TraceComponent tc = Tr.register(ApplicationStartBarrierImpl.class);\n+\n+    @Reference(cardinality = ReferenceCardinality.MULTIPLE)\n+    void setApplicationPrereq(ApplicationPrereq applicationPrereq) {\n+    }\n+\n+    /**\n+     * Non configurable immediate component to track prereqs as they appear.\n+     */\n+    @Component(configurationPolicy = ConfigurationPolicy.IGNORE, immediate = true)\n+    public static class PrereqWatcher {\n+        private final ConfigurationAdmin configurationAdmin;\n+        private final ArrayList<String> realisedPrereqs = new ArrayList<>();\n+\n+        /**\n+         * Use constructor parameter references to ensure that mandatory references are supplied first.\n+         *\n+         * @param configurationAdmin must be supplied before any calls to setApplicationPrereq\n+         */\n+        @Activate\n+        public PrereqWatcher(@Reference ConfigurationAdmin configurationAdmin) {\n+            this.configurationAdmin = configurationAdmin;\n+            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n+                Tr.debug(tc, \"Known configured application prereqs:\" + listConfiguredPrereqs());\n+            }\n+        }\n+\n+        private String listConfiguredPrereqs() {\n+            Configuration[] configs;\n+            try {\n+                configs = this.configurationAdmin.listConfigurations(\"(service.factoryPid=\" + ApplicationPrereq.class.getName() + \")\");\n+            } catch (IOException | InvalidSyntaxException e) {\n+                StringWriter sw = new StringWriter();\n+                e.printStackTrace(new PrintWriter(sw));\n+                return \"Error listing prereqs:\" + sw;\n+            }\n+            if (configs == null)\n+                return null;\n+\n+            String[] prereqClassNames = new String[configs.length];\n+            for (int i = 0; i < configs.length; i++) {\n+                prereqClassNames[i] = (String) configs[i].getProperties().get(\"className\");\n+            }\n+\n+            Arrays.sort(prereqClassNames);\n+            return Arrays.toString(prereqClassNames);\n+        }\n+\n+        @Reference(cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC, policyOption = ReferencePolicyOption.GREEDY)\n+        void setApplicationPrereq(ApplicationPrereq applicationPrereq) {\n+            realisedPrereqs.add(applicationPrereq.getClass().getName());\n+            Collections.sort(realisedPrereqs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ4MzkwNg=="}, "originalCommit": {"oid": "656084dcc79159c6af7bd200a249ae28e1ee4fe5"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTQ0OTkxOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.app.manager.lifecycle/src/com/ibm/wsspi/application/lifecycle/ApplicationPrereq.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzoxMzo1M1rOGrulLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTozMjoxMlrOHcihQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwNTEzNQ==", "bodyText": "@tjwatson makes a good point, you can't expose this as a SPI straight away. You need a Feature and UFO to expose a new SPI. Please change the package name.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12816#discussion_r448505135", "createdAt": "2020-07-01T17:13:53Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.app.manager.lifecycle/src/com/ibm/wsspi/application/lifecycle/ApplicationPrereq.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.wsspi.application.lifecycle;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "656084dcc79159c6af7bd200a249ae28e1ee4fe5"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY4Nzc0NQ==", "bodyText": "we're not making it an SPI. (Yet)", "url": "https://github.com/OpenLiberty/open-liberty/pull/12816#discussion_r499687745", "createdAt": "2020-10-05T15:32:12Z", "author": {"login": "AndrewDJBanks"}, "path": "dev/com.ibm.ws.app.manager.lifecycle/src/com/ibm/wsspi/application/lifecycle/ApplicationPrereq.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.wsspi.application.lifecycle;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwNTEzNQ=="}, "originalCommit": {"oid": "656084dcc79159c6af7bd200a249ae28e1ee4fe5"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3085, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}