{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzMzIxMDQx", "number": 12861, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODo0MzowOFrOENA1dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODo0NDozMlrOENA3CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDgwNjI5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.request.timing_fat/test-applications/jdbcTestPrj_3/src/com/ibm/ws/request/timing/TestJDBC.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODo0MzowOFrOGvdaGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxOTo1NjoxMFrOGvfsRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxODA3NQ==", "bodyText": "Not sure, why this loop is needed here?\nIf you want to make sure the executeUpdate completes, we can just check if the returnValue is populated with the number of row or 0, that would ensure the statement is completed.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12861#discussion_r452418075", "createdAt": "2020-07-09T18:43:08Z", "author": {"login": "pgunapal"}, "path": "dev/com.ibm.ws.request.timing_fat/test-applications/jdbcTestPrj_3/src/com/ibm/ws/request/timing/TestJDBC.java", "diffHunk": "@@ -55,16 +55,16 @@ protected void doGet(HttpServletRequest request, HttpServletResponse response)\n \n \n       System.out.println((new StringBuilder(\" Session value is \")).append(s.getValue()).toString());\n-\n-       \n+      \n+      int returnValue = -9999999;\n       for(int i = 11; i <= 15; i++) {\n-          stmt.executeUpdate((new StringBuilder(\"insert into \"+tableName+\" values ('myHomeCity_ \")).append(i).append(\"', \").append(i).append(\", 'myHomeCounty_\").append(i).append(\"')\").toString());\n-          try {\n-              Thread.sleep(5000);\n-          } catch (Exception e) {\n-              e.printStackTrace();\n+          returnValue = stmt.executeUpdate((new StringBuilder(\"insert into \"+tableName+\" values ('myHomeCity_ \")).append(i).append(\"', \").append(i).append(\", 'myHomeCounty_\").append(i).append(\"')\").toString());\n+          // We will need to ensure that the executeUpdate completes before continuing\n+          while (returnValue == -9999999) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ff2cfd1534f4066db3f353455242619eb1ca238"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ1NTQ5Mg==", "bodyText": "Not sure if the executeUpdate run asynchronously here but I will add the thread.sleeps back (like the original) but shorten the time to sleep for as each update normally takes a few milliseconds to complete. I will also add some checking to the return value of the executeUpdate to ensure the update is successful.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12861#discussion_r452455492", "createdAt": "2020-07-09T19:56:10Z", "author": {"login": "lamkavan"}, "path": "dev/com.ibm.ws.request.timing_fat/test-applications/jdbcTestPrj_3/src/com/ibm/ws/request/timing/TestJDBC.java", "diffHunk": "@@ -55,16 +55,16 @@ protected void doGet(HttpServletRequest request, HttpServletResponse response)\n \n \n       System.out.println((new StringBuilder(\" Session value is \")).append(s.getValue()).toString());\n-\n-       \n+      \n+      int returnValue = -9999999;\n       for(int i = 11; i <= 15; i++) {\n-          stmt.executeUpdate((new StringBuilder(\"insert into \"+tableName+\" values ('myHomeCity_ \")).append(i).append(\"', \").append(i).append(\", 'myHomeCounty_\").append(i).append(\"')\").toString());\n-          try {\n-              Thread.sleep(5000);\n-          } catch (Exception e) {\n-              e.printStackTrace();\n+          returnValue = stmt.executeUpdate((new StringBuilder(\"insert into \"+tableName+\" values ('myHomeCity_ \")).append(i).append(\"', \").append(i).append(\", 'myHomeCounty_\").append(i).append(\"')\").toString());\n+          // We will need to ensure that the executeUpdate completes before continuing\n+          while (returnValue == -9999999) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxODA3NQ=="}, "originalCommit": {"oid": "2ff2cfd1534f4066db3f353455242619eb1ca238"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDgxMDMzOnYy", "diffSide": "LEFT", "path": "dev/com.ibm.ws.request.timing_fat/fat/src/com/ibm/ws/request/timing/fat/HungRequestTiming.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODo0NDozMlrOGvdctg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODo0NDozMlrOGvdctg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxODc0Mg==", "bodyText": "I thought we had added this here, to ensure every test starts of with a fresh server config, since we saw some test failures in the past, where the server config wasn't updated properly for subsequent tests?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12861#discussion_r452418742", "createdAt": "2020-07-09T18:44:32Z", "author": {"login": "pgunapal"}, "path": "dev/com.ibm.ws.request.timing_fat/fat/src/com/ibm/ws/request/timing/fat/HungRequestTiming.java", "diffHunk": "@@ -75,10 +74,6 @@ public void setupTestStart() throws Exception {\n         if (server != null && !server.isStarted()) {\n             server.startServer();\n         }\n-        // Need to ensure the configuration is finished updating before starting a test\n-        server.setServerConfigurationFile(\"server_original.xml\");\n-        server.waitForStringInLog(\"CWWKG0017I\", 90000);\n-        server.setMarkToEndOfLog();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ff2cfd1534f4066db3f353455242619eb1ca238"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3094, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}