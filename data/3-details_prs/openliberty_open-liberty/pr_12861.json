{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzMzIxMDQx", "number": 12861, "title": "Modify test to improve performance", "bodyText": "The latest build is located here https://wasrtc.hursley.ibm.com:9443/jazz/resource/itemOid/com.ibm.team.build.BuildResult/_2aVDgMS2Eeq1S7zZzzGuaA\nThe build completed successfully without any failures or errors.\nThe following are the run times before the changes...\nLite  --- Total approx.  26.5min\nHungRequestTiming 2m 26s\nSlowRequestTiming 11m 52s\nTimingRequestTiming 12m 07s\nFull  --- Total approx.  96.5min\nHungRequestTiming 16m 40s\nSlowRequestTiming 46m 34s\nTimingRequestTiming 33m 30s\nThe following are the run times after the changes...\nLite  --- Total approx.  15min\nHungRequestTiming 1m 51s\nSlowRequestTiming 6m 09s\nTimingRequestTiming 6m 57s\nFull  --- Total approx.  59min\nHungRequestTiming 15m 07s\nSlowRequestTiming 23m 50s\nTimingRequestTiming 19m 42s\nThe following is a list of changes...\nList of changes in regards to increasing the performance and runtime of the tests\n\nRemoved a lot of unnecessary server.setMarkToEndOfLog calls.\nRemoved unnecessary sleeps throughout the test cases and test applications.\nShorten the sleeps and hung/slow request thresholds where possible  (EX/ Instead of waiting 10 sec for a slow request we only have to wait 3+sec if we set the threshold to 3sec).\nRemoved many unnecessary server configuration changes/updates.\nImproved the TestJDBC test applications to execute updates without having to wait for a hardcoded 5secs for each update and also removed unnecessary thread sleeps. This saves about 30secs per request. If a test case makes two requests then we save 1min of unnecessary waits.\n\nList of bug fixes and other fixes\n\nCorrected many log messages that contained wrong information\nCorrected many comments in the code which contained wrong information\nFixed a rare synchronization bug in one of the test cases for HungRequestTiming where we can't find a message in the log since we did not give enough time for it to generate", "createdAt": "2020-07-02T07:09:29Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/12861", "merged": true, "mergeCommit": {"oid": "bc65028f23eac51436c7e0dcb31e160dfc173f59"}, "closed": true, "closedAt": "2020-07-13T19:13:30Z", "author": {"login": "lamkavan"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcw5aSegH2gAyNDQzMzIxMDQxOjllN2Y4MzlhMGNjYzdjYjRlNGEyMDczZTM3NjNlY2IwMzg4MWQ5MzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc0jux3gFqTQ0NzM5Mzg0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9e7f839a0ccc7cb4e4a2073e3763ecb03881d931", "author": {"user": {"login": "lamkavan", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/9e7f839a0ccc7cb4e4a2073e3763ecb03881d931", "committedDate": "2020-07-02T07:07:45Z", "message": "Modify test to improve performance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8138ed3c8d74afb8472336a8e060425430ea55a", "author": {"user": {"login": "lamkavan", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/e8138ed3c8d74afb8472336a8e060425430ea55a", "committedDate": "2020-07-06T05:27:51Z", "message": "Adding changes to improve the perfomance of Hung and Slow Request tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8acfc4b1b5fb90f9b12cb1a1ce241ad39487701b", "author": {"user": {"login": "lamkavan", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/8acfc4b1b5fb90f9b12cb1a1ce241ad39487701b", "committedDate": "2020-07-07T17:49:52Z", "message": "Adding changes to TimingRequestTiming to improve performance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ff2cfd1534f4066db3f353455242619eb1ca238", "author": {"user": {"login": "lamkavan", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/2ff2cfd1534f4066db3f353455242619eb1ca238", "committedDate": "2020-07-08T04:51:53Z", "message": "Slightly increase wait times for request"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1ODc2OTkz", "url": "https://github.com/OpenLiberty/open-liberty/pull/12861#pullrequestreview-445876993", "createdAt": "2020-07-09T18:43:08Z", "commit": {"oid": "2ff2cfd1534f4066db3f353455242619eb1ca238"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODo0MzowOFrOGvdaGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODo0NDozMlrOGvdctg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxODA3NQ==", "bodyText": "Not sure, why this loop is needed here?\nIf you want to make sure the executeUpdate completes, we can just check if the returnValue is populated with the number of row or 0, that would ensure the statement is completed.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12861#discussion_r452418075", "createdAt": "2020-07-09T18:43:08Z", "author": {"login": "pgunapal"}, "path": "dev/com.ibm.ws.request.timing_fat/test-applications/jdbcTestPrj_3/src/com/ibm/ws/request/timing/TestJDBC.java", "diffHunk": "@@ -55,16 +55,16 @@ protected void doGet(HttpServletRequest request, HttpServletResponse response)\n \n \n       System.out.println((new StringBuilder(\" Session value is \")).append(s.getValue()).toString());\n-\n-       \n+      \n+      int returnValue = -9999999;\n       for(int i = 11; i <= 15; i++) {\n-          stmt.executeUpdate((new StringBuilder(\"insert into \"+tableName+\" values ('myHomeCity_ \")).append(i).append(\"', \").append(i).append(\", 'myHomeCounty_\").append(i).append(\"')\").toString());\n-          try {\n-              Thread.sleep(5000);\n-          } catch (Exception e) {\n-              e.printStackTrace();\n+          returnValue = stmt.executeUpdate((new StringBuilder(\"insert into \"+tableName+\" values ('myHomeCity_ \")).append(i).append(\"', \").append(i).append(\", 'myHomeCounty_\").append(i).append(\"')\").toString());\n+          // We will need to ensure that the executeUpdate completes before continuing\n+          while (returnValue == -9999999) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ff2cfd1534f4066db3f353455242619eb1ca238"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxODc0Mg==", "bodyText": "I thought we had added this here, to ensure every test starts of with a fresh server config, since we saw some test failures in the past, where the server config wasn't updated properly for subsequent tests?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12861#discussion_r452418742", "createdAt": "2020-07-09T18:44:32Z", "author": {"login": "pgunapal"}, "path": "dev/com.ibm.ws.request.timing_fat/fat/src/com/ibm/ws/request/timing/fat/HungRequestTiming.java", "diffHunk": "@@ -75,10 +74,6 @@ public void setupTestStart() throws Exception {\n         if (server != null && !server.isStarted()) {\n             server.startServer();\n         }\n-        // Need to ensure the configuration is finished updating before starting a test\n-        server.setServerConfigurationFile(\"server_original.xml\");\n-        server.waitForStringInLog(\"CWWKG0017I\", 90000);\n-        server.setMarkToEndOfLog();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ff2cfd1534f4066db3f353455242619eb1ca238"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7d271e904012acca3dfc3f5cb0538e36a9d2e55", "author": {"user": {"login": "lamkavan", "name": null}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/d7d271e904012acca3dfc3f5cb0538e36a9d2e55", "committedDate": "2020-07-13T04:10:37Z", "message": "Adding further changes to improve request timing FAT test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MzkzODQ0", "url": "https://github.com/OpenLiberty/open-liberty/pull/12861#pullrequestreview-447393844", "createdAt": "2020-07-13T16:07:55Z", "commit": {"oid": "d7d271e904012acca3dfc3f5cb0538e36a9d2e55"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2212, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}