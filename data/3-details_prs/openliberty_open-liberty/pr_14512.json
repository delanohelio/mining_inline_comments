{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0MzUxOTcx", "number": 14512, "title": "13576: Updates to JWE builder functionality", "bodyText": "For issue #13576", "createdAt": "2020-10-15T19:52:13Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/14512", "merged": true, "mergeCommit": {"oid": "3298fa7cb896fcc5d8e2d67080eed27df5480ded"}, "closed": true, "closedAt": "2020-10-19T18:36:24Z", "author": {"login": "ayoho"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdS3ZAjABqjM4ODMzNDQ0NDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUIhYEgFqTUxMjA0ODQxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "274c4fa18d527958ba3b3432666d883d737f312f", "author": {"user": {"login": "ayoho", "name": "Adam Yoho"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/274c4fa18d527958ba3b3432666d883d737f312f", "committedDate": "2020-10-15T19:42:37Z", "message": "13576: Updates to JWE builder functionality"}, "afterCommit": {"oid": "b37cbec1499bb235d3f7ef1262633b1d4bf52ada", "author": {"user": {"login": "ayoho", "name": "Adam Yoho"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/b37cbec1499bb235d3f7ef1262633b1d4bf52ada", "committedDate": "2020-10-15T19:59:46Z", "message": "13576: Updates to JWE builder functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0babe7a4a4eeaf231e391c0a322d8a070cd0b21c", "author": {"user": {"login": "ayoho", "name": "Adam Yoho"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/0babe7a4a4eeaf231e391c0a322d8a070cd0b21c", "committedDate": "2020-10-15T20:01:30Z", "message": "13576: Updates to JWE builder functionality"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b37cbec1499bb235d3f7ef1262633b1d4bf52ada", "author": {"user": {"login": "ayoho", "name": "Adam Yoho"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/b37cbec1499bb235d3f7ef1262633b1d4bf52ada", "committedDate": "2020-10-15T19:59:46Z", "message": "13576: Updates to JWE builder functionality"}, "afterCommit": {"oid": "0babe7a4a4eeaf231e391c0a322d8a070cd0b21c", "author": {"user": {"login": "ayoho", "name": "Adam Yoho"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/0babe7a4a4eeaf231e391c0a322d8a070cd0b21c", "committedDate": "2020-10-15T20:01:30Z", "message": "13576: Updates to JWE builder functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fad204269fe254ce829099cf13dcd4e03333d018", "author": {"user": {"login": "ayoho", "name": "Adam Yoho"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/fad204269fe254ce829099cf13dcd4e03333d018", "committedDate": "2020-10-16T14:40:39Z", "message": "Issue 13576: FAT test update for new JOSE typ header value"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNzc3OTgx", "url": "https://github.com/OpenLiberty/open-liberty/pull/14512#pullrequestreview-510777981", "createdAt": "2020-10-16T20:26:34Z", "commit": {"oid": "fad204269fe254ce829099cf13dcd4e03333d018"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDoyNjozNFrOHjO03Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDoyNjozNFrOHjO03Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwNTExNw==", "bodyText": "A key must be specified so the JWT builder can create JWE tokens.\nIn this sentence, does \"key\" refer to the key management key or the CEK? I think it means the key management key. If so, this sentence and the one that follows should specify. \"key management key\":\n A key management key must be specified so the JWT builder can create JWE tokens. A key management key can be specified by using the key alias and configured trust store values that are specified in the message or by using the JwtBuilder API.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14512#discussion_r506705117", "createdAt": "2020-10-16T20:26:34Z", "author": {"login": "dmuelle"}, "path": "dev/com.ibm.ws.security.jwt/resources/com/ibm/ws/security/jwt/internal/resources/JWTMessages.nlsprops", "diffHunk": "@@ -356,7 +354,8 @@ ERROR_BUILDING_SIGNED_JWE=CWWKS6060E: The [{0}] JWT builder cannot create a JSON\n ERROR_BUILDING_SIGNED_JWE.explanation=The JWT builder encountered an error while creating the JWE token. Check the error that is included in the message for more information.\n ERROR_BUILDING_SIGNED_JWE.useraction=Check the error that is included in the message for more information.\n \n+# Do not translate \"JwtBuilder\"\n # 0=Builder config ID, 1=keyManagementKeyAlias value, 2=Trust store config ID\n KEY_MANAGEMENT_KEY_NOT_FOUND=CWWKS6061E: The [{0}] JWT builder cannot create a JSON Web Encryption (JWE) token because a key management key cannot be found. They key management key alias is [{1}], and the configured trust store is [{2}].\n-KEY_MANAGEMENT_KEY_NOT_FOUND.explanation=A key management key is a key that is used to encrypt the Content Encryption Key of a JWE token. A key must be specified so the JWT builder can create JWE tokens.\n-KEY_MANAGEMENT_KEY_NOT_FOUND.useraction=Verify that a key with the alias that is specified in the message exists in the trust store that is specified in the message.\n+KEY_MANAGEMENT_KEY_NOT_FOUND.explanation=A key management key is a key that is used to encrypt the Content Encryption Key of a JWE token. A key must be specified so the JWT builder can create JWE tokens. A key can be specified by using the configuration attributes that are specified in the message or through the JwtBuilder API.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fad204269fe254ce829099cf13dcd4e03333d018"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff0541a3509c32f2d3065a01be247cac36585890", "author": {"user": {"login": "ayoho", "name": "Adam Yoho"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/ff0541a3509c32f2d3065a01be247cac36585890", "committedDate": "2020-10-19T14:40:03Z", "message": "Issue 13576: NLS updates from review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTc5MTYw", "url": "https://github.com/OpenLiberty/open-liberty/pull/14512#pullrequestreview-511979160", "createdAt": "2020-10-19T17:10:16Z", "commit": {"oid": "ff0541a3509c32f2d3065a01be247cac36585890"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzoxMDoxN1rOHkYupA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzoxMDoxN1rOHkYupA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkxNTk0MA==", "bodyText": "For reference only: This is to comply with section 4.1.11 https://tools.ietf.org/html/rfc7516#section-4.1.11 of the JWE specification.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14512#discussion_r507915940", "createdAt": "2020-10-19T17:10:17Z", "author": {"login": "teddyjtorres"}, "path": "dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/utils/JweCreator.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ * IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.jwt.utils;\n+\n+import java.security.Key;\n+import java.security.KeyStoreException;\n+import java.security.cert.CertificateException;\n+\n+import org.jose4j.jwe.ContentEncryptionAlgorithmIdentifiers;\n+import org.jose4j.jwe.JsonWebEncryption;\n+import org.jose4j.jwe.KeyManagementAlgorithmIdentifiers;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.security.jwt.InvalidTokenException;\n+import com.ibm.ws.ffdc.annotation.FFDCIgnore;\n+import com.ibm.ws.security.common.jwk.impl.JwkKidBuilder;\n+import com.ibm.ws.security.jwt.config.JwtConfig;\n+import com.ibm.ws.security.jwt.internal.BuilderImpl;\n+import com.ibm.ws.security.jwt.internal.JwtTokenException;\n+\n+public class JweCreator {\n+\n+    private static final TraceComponent tc = Tr.register(JweCreator.class);\n+\n+    @FFDCIgnore({ Exception.class })\n+    public static String createJweString(String jws, JwtData jwtData) throws Exception {\n+        JweCreator signer = new JweCreator();\n+        JwtConfig jwtConfig = jwtData.getConfig();\n+        try {\n+            JsonWebEncryption jwe = new JsonWebEncryption();\n+            BuilderImpl builder = jwtData.getBuilder();\n+            signer.setJweKeyData(jwe, builder, jwtConfig);\n+            signer.setJweHeaders(jwe, builder, jwtConfig);\n+            jwe.setPayload(jws);\n+            return signer.getJwtString(jwe);\n+        } catch (Exception e) {\n+            String errorMsg = Tr.formatMessage(tc, \"ERROR_BUILDING_SIGNED_JWE\", new Object[] { jwtConfig.getId(), e });\n+            throw new Exception(errorMsg, e);\n+        }\n+    }\n+\n+    void setJweKeyData(JsonWebEncryption jwe, BuilderImpl builder, JwtConfig jwtConfig) throws KeyStoreException, CertificateException, InvalidTokenException {\n+        Key keyManagementKey = getKeyManagementKey(builder, jwtConfig);\n+        if (keyManagementKey == null) {\n+            String errorMsg = Tr.formatMessage(tc, \"KEY_MANAGEMENT_KEY_NOT_FOUND\", new Object[] { jwtConfig.getId(), jwtConfig.getKeyManagementKeyAlias(), jwtConfig.getTrustStoreRef() });\n+            throw new KeyStoreException(errorMsg);\n+        }\n+        jwe.setKey(keyManagementKey);\n+        setJweKidHeader(jwe, keyManagementKey);\n+    }\n+\n+    Key getKeyManagementKey(BuilderImpl builder, JwtConfig jwtConfig) throws KeyStoreException, CertificateException, InvalidTokenException {\n+        Key keyManagementKey = builder.getKeyManagementKey();\n+        if (keyManagementKey == null) {\n+            keyManagementKey = getKeyManagementKeyFromTrustStore(jwtConfig);\n+        }\n+        return keyManagementKey;\n+    }\n+\n+    Key getKeyManagementKeyFromTrustStore(JwtConfig jwtConfig) throws KeyStoreException, CertificateException, InvalidTokenException {\n+        String keyAlias = jwtConfig.getKeyManagementKeyAlias();\n+        String trustStoreRef = jwtConfig.getTrustStoreRef();\n+        return JwtUtils.getPublicKey(keyAlias, trustStoreRef);\n+    }\n+\n+    void setJweKidHeader(JsonWebEncryption jwe, Key keyManagementKey) {\n+        JwkKidBuilder kidbuilder = new JwkKidBuilder();\n+        String keyId = kidbuilder.buildKeyId(keyManagementKey);\n+        if (keyId != null) {\n+            jwe.setKeyIdHeaderValue(keyId);\n+        }\n+    }\n+\n+    void setJweHeaders(JsonWebEncryption jwe, BuilderImpl builder, JwtConfig jwtConfig) {\n+        jwe.setAlgorithmHeaderValue(getKeyManagementKeyAlgorithm(builder, jwtConfig));\n+        jwe.setEncryptionMethodHeaderParameter(getContentEncryptionAlgorithm(builder, jwtConfig));\n+        jwe.setHeader(\"typ\", \"JOSE\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff0541a3509c32f2d3065a01be247cac36585890"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTg3NjE0", "url": "https://github.com/OpenLiberty/open-liberty/pull/14512#pullrequestreview-511987614", "createdAt": "2020-10-19T17:21:19Z", "commit": {"oid": "ff0541a3509c32f2d3065a01be247cac36585890"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMDQ3NDcx", "url": "https://github.com/OpenLiberty/open-liberty/pull/14512#pullrequestreview-512047471", "createdAt": "2020-10-19T18:30:36Z", "commit": {"oid": "ff0541a3509c32f2d3065a01be247cac36585890"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODozMDozN1rOHkcU1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODozMDozN1rOHkcU1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk3NDg2OQ==", "bodyText": "No changes needed now, but may need to be set to \"JWT\" if causing problem with legacy implementations per https://tools.ietf.org/html/rfc7519#section-5.1.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14512#discussion_r507974869", "createdAt": "2020-10-19T18:30:37Z", "author": {"login": "teddyjtorres"}, "path": "dev/com.ibm.ws.security.jwt/src/com/ibm/ws/security/jwt/utils/JweCreator.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ * IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.jwt.utils;\n+\n+import java.security.Key;\n+import java.security.KeyStoreException;\n+import java.security.cert.CertificateException;\n+\n+import org.jose4j.jwe.ContentEncryptionAlgorithmIdentifiers;\n+import org.jose4j.jwe.JsonWebEncryption;\n+import org.jose4j.jwe.KeyManagementAlgorithmIdentifiers;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.security.jwt.InvalidTokenException;\n+import com.ibm.ws.ffdc.annotation.FFDCIgnore;\n+import com.ibm.ws.security.common.jwk.impl.JwkKidBuilder;\n+import com.ibm.ws.security.jwt.config.JwtConfig;\n+import com.ibm.ws.security.jwt.internal.BuilderImpl;\n+import com.ibm.ws.security.jwt.internal.JwtTokenException;\n+\n+public class JweCreator {\n+\n+    private static final TraceComponent tc = Tr.register(JweCreator.class);\n+\n+    @FFDCIgnore({ Exception.class })\n+    public static String createJweString(String jws, JwtData jwtData) throws Exception {\n+        JweCreator signer = new JweCreator();\n+        JwtConfig jwtConfig = jwtData.getConfig();\n+        try {\n+            JsonWebEncryption jwe = new JsonWebEncryption();\n+            BuilderImpl builder = jwtData.getBuilder();\n+            signer.setJweKeyData(jwe, builder, jwtConfig);\n+            signer.setJweHeaders(jwe, builder, jwtConfig);\n+            jwe.setPayload(jws);\n+            return signer.getJwtString(jwe);\n+        } catch (Exception e) {\n+            String errorMsg = Tr.formatMessage(tc, \"ERROR_BUILDING_SIGNED_JWE\", new Object[] { jwtConfig.getId(), e });\n+            throw new Exception(errorMsg, e);\n+        }\n+    }\n+\n+    void setJweKeyData(JsonWebEncryption jwe, BuilderImpl builder, JwtConfig jwtConfig) throws KeyStoreException, CertificateException, InvalidTokenException {\n+        Key keyManagementKey = getKeyManagementKey(builder, jwtConfig);\n+        if (keyManagementKey == null) {\n+            String errorMsg = Tr.formatMessage(tc, \"KEY_MANAGEMENT_KEY_NOT_FOUND\", new Object[] { jwtConfig.getId(), jwtConfig.getKeyManagementKeyAlias(), jwtConfig.getTrustStoreRef() });\n+            throw new KeyStoreException(errorMsg);\n+        }\n+        jwe.setKey(keyManagementKey);\n+        setJweKidHeader(jwe, keyManagementKey);\n+    }\n+\n+    Key getKeyManagementKey(BuilderImpl builder, JwtConfig jwtConfig) throws KeyStoreException, CertificateException, InvalidTokenException {\n+        Key keyManagementKey = builder.getKeyManagementKey();\n+        if (keyManagementKey == null) {\n+            keyManagementKey = getKeyManagementKeyFromTrustStore(jwtConfig);\n+        }\n+        return keyManagementKey;\n+    }\n+\n+    Key getKeyManagementKeyFromTrustStore(JwtConfig jwtConfig) throws KeyStoreException, CertificateException, InvalidTokenException {\n+        String keyAlias = jwtConfig.getKeyManagementKeyAlias();\n+        String trustStoreRef = jwtConfig.getTrustStoreRef();\n+        return JwtUtils.getPublicKey(keyAlias, trustStoreRef);\n+    }\n+\n+    void setJweKidHeader(JsonWebEncryption jwe, Key keyManagementKey) {\n+        JwkKidBuilder kidbuilder = new JwkKidBuilder();\n+        String keyId = kidbuilder.buildKeyId(keyManagementKey);\n+        if (keyId != null) {\n+            jwe.setKeyIdHeaderValue(keyId);\n+        }\n+    }\n+\n+    void setJweHeaders(JsonWebEncryption jwe, BuilderImpl builder, JwtConfig jwtConfig) {\n+        jwe.setAlgorithmHeaderValue(getKeyManagementKeyAlgorithm(builder, jwtConfig));\n+        jwe.setEncryptionMethodHeaderParameter(getContentEncryptionAlgorithm(builder, jwtConfig));\n+        jwe.setHeader(\"typ\", \"JOSE\");\n+        jwe.setHeader(\"cty\", \"jwt\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff0541a3509c32f2d3065a01be247cac36585890"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMDQ4NDE0", "url": "https://github.com/OpenLiberty/open-liberty/pull/14512#pullrequestreview-512048414", "createdAt": "2020-10-19T18:31:25Z", "commit": {"oid": "ff0541a3509c32f2d3065a01be247cac36585890"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3066, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}