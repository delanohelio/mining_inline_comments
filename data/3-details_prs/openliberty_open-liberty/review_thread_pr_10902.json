{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NDA3ODcz", "number": 10902, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDo0ODoyMFrODf6dGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDo0ODoyMFrODf6dGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzkwMTY5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jaxrs.2.x_fat_clientProps/test-applications/cxfClientPropsApp/src/jaxrs2x/cxfClientProps/CxfClientPropsTestServlet.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDo0ODoyMFrOFp495Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNTowMTozNVrOFp5blg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2OTI4NQ==", "bodyText": "This does not seem right to me.  It is certainly inconsistent.  I don't think that we want a test case to verify that we behave incorrectly/inconsistently.  Instead, we should probably work with the CXF community to determine the right next step - possibly something like always enabling chunking when the Expect: 100-continue header is specified.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10902#discussion_r379469285", "createdAt": "2020-02-14T14:48:20Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.x_fat_clientProps/test-applications/cxfClientPropsApp/src/jaxrs2x/cxfClientProps/CxfClientPropsTestServlet.java", "diffHunk": "@@ -253,6 +253,37 @@ public void testChunkingThreshold(HttpServletRequest req, HttpServletResponse re\n                        .post(Entity.text(sb.toString()))\n                        .readEntity(String.class);\n         assertEquals(\"30000:30000\", result);\n+        \n+        // Repeating the tests but adding the \"Expect\", \"100-continue\" header.  In this case a 100 will\n+        // be sent prior to the 200 containing the output.  The JDK will catch and handle this 100 and \n+        // JAXRS will only get the 200 response when in streaming mode (which for now is only chunking).  \n+        // If not in chunking then JAXRS will receive the 100 response which will contain no returned data.\n+        client = ClientBuilder.newBuilder()\n+                        .property(\"client.ChunkingThreshold\", \"10000\")\n+                        .build();\n+   \n+        Response response = client.target(\"http://localhost:\" + req.getServerPort() + \"/cxfClientPropsApp/resource/chunking\")\n+                              .request().header(\"Expect\", \"100-continue\")\n+                              .post(Entity.text(sb.toString()));\n+        int status = response.getStatus();\n+        result = response.readEntity(String.class);\n+        \n+        assertEquals(200,status);\n+        assertEquals(\"CHUNKING\", result);\n+\n+        client = ClientBuilder.newBuilder()\n+                        .property(\"client.ChunkingThreshold\", \"40000\")\n+                        .build();\n+        response = client.target(\"http://localhost:\" + req.getServerPort() + \"/cxfClientPropsApp/resource/chunking\")\n+                       .request().header(\"Expect\", \"100-continue\")\n+                       .post(Entity.text(sb.toString()));\n+        status = response.getStatus();\n+        result = response.readEntity(String.class);\n+\n+        // If a 100 response is received then no data will be sent.\n+        assertEquals(100,status);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fd686229317c0b4a3804549ecd43259f81929d9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3NDUzOA==", "bodyText": "I agree in principle.   However, this is our behavior now so I think I will leave it.   However I agree this should be addressed so I'll create an issue to work with CXF to resolve, indicating that this testcase will need to be adjusted when that happens.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10902#discussion_r379474538", "createdAt": "2020-02-14T14:57:31Z", "author": {"login": "jim-krueger"}, "path": "dev/com.ibm.ws.jaxrs.2.x_fat_clientProps/test-applications/cxfClientPropsApp/src/jaxrs2x/cxfClientProps/CxfClientPropsTestServlet.java", "diffHunk": "@@ -253,6 +253,37 @@ public void testChunkingThreshold(HttpServletRequest req, HttpServletResponse re\n                        .post(Entity.text(sb.toString()))\n                        .readEntity(String.class);\n         assertEquals(\"30000:30000\", result);\n+        \n+        // Repeating the tests but adding the \"Expect\", \"100-continue\" header.  In this case a 100 will\n+        // be sent prior to the 200 containing the output.  The JDK will catch and handle this 100 and \n+        // JAXRS will only get the 200 response when in streaming mode (which for now is only chunking).  \n+        // If not in chunking then JAXRS will receive the 100 response which will contain no returned data.\n+        client = ClientBuilder.newBuilder()\n+                        .property(\"client.ChunkingThreshold\", \"10000\")\n+                        .build();\n+   \n+        Response response = client.target(\"http://localhost:\" + req.getServerPort() + \"/cxfClientPropsApp/resource/chunking\")\n+                              .request().header(\"Expect\", \"100-continue\")\n+                              .post(Entity.text(sb.toString()));\n+        int status = response.getStatus();\n+        result = response.readEntity(String.class);\n+        \n+        assertEquals(200,status);\n+        assertEquals(\"CHUNKING\", result);\n+\n+        client = ClientBuilder.newBuilder()\n+                        .property(\"client.ChunkingThreshold\", \"40000\")\n+                        .build();\n+        response = client.target(\"http://localhost:\" + req.getServerPort() + \"/cxfClientPropsApp/resource/chunking\")\n+                       .request().header(\"Expect\", \"100-continue\")\n+                       .post(Entity.text(sb.toString()));\n+        status = response.getStatus();\n+        result = response.readEntity(String.class);\n+\n+        // If a 100 response is received then no data will be sent.\n+        assertEquals(100,status);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2OTI4NQ=="}, "originalCommit": {"oid": "6fd686229317c0b4a3804549ecd43259f81929d9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3Njg4Ng==", "bodyText": "And it will be interesting to see if this behavior is the same for all platforms/jdks.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10902#discussion_r379476886", "createdAt": "2020-02-14T15:01:35Z", "author": {"login": "jim-krueger"}, "path": "dev/com.ibm.ws.jaxrs.2.x_fat_clientProps/test-applications/cxfClientPropsApp/src/jaxrs2x/cxfClientProps/CxfClientPropsTestServlet.java", "diffHunk": "@@ -253,6 +253,37 @@ public void testChunkingThreshold(HttpServletRequest req, HttpServletResponse re\n                        .post(Entity.text(sb.toString()))\n                        .readEntity(String.class);\n         assertEquals(\"30000:30000\", result);\n+        \n+        // Repeating the tests but adding the \"Expect\", \"100-continue\" header.  In this case a 100 will\n+        // be sent prior to the 200 containing the output.  The JDK will catch and handle this 100 and \n+        // JAXRS will only get the 200 response when in streaming mode (which for now is only chunking).  \n+        // If not in chunking then JAXRS will receive the 100 response which will contain no returned data.\n+        client = ClientBuilder.newBuilder()\n+                        .property(\"client.ChunkingThreshold\", \"10000\")\n+                        .build();\n+   \n+        Response response = client.target(\"http://localhost:\" + req.getServerPort() + \"/cxfClientPropsApp/resource/chunking\")\n+                              .request().header(\"Expect\", \"100-continue\")\n+                              .post(Entity.text(sb.toString()));\n+        int status = response.getStatus();\n+        result = response.readEntity(String.class);\n+        \n+        assertEquals(200,status);\n+        assertEquals(\"CHUNKING\", result);\n+\n+        client = ClientBuilder.newBuilder()\n+                        .property(\"client.ChunkingThreshold\", \"40000\")\n+                        .build();\n+        response = client.target(\"http://localhost:\" + req.getServerPort() + \"/cxfClientPropsApp/resource/chunking\")\n+                       .request().header(\"Expect\", \"100-continue\")\n+                       .post(Entity.text(sb.toString()));\n+        status = response.getStatus();\n+        result = response.readEntity(String.class);\n+\n+        // If a 100 response is received then no data will be sent.\n+        assertEquals(100,status);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2OTI4NQ=="}, "originalCommit": {"oid": "6fd686229317c0b4a3804549ecd43259f81929d9"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2153, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}