{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNzkyMjA3", "number": 11770, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzowMToyMVrODz9ceQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoyNjoxM1rOD5neMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODEwNjgxOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzowMToyMVrOGIrH5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToyMzo1MVrOGNngJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0ODMyNQ==", "bodyText": "Copyright should be updated to say 2012, 2020 instead of 2012, 2016", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r411748325", "createdAt": "2020-04-20T23:01:21Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -136,6 +136,12 @@\n      */\n     private int hangBufferPoolSize = 0;\n \n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ce0bec1f4f9eeeb92dfc4d6103224afd17e5d6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzMTg3Ng==", "bodyText": "Done", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r416931876", "createdAt": "2020-04-28T21:23:51Z", "author": {"login": "gjdeval"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -136,6 +136,12 @@\n      */\n     private int hangBufferPoolSize = 0;\n \n+    /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0ODMyNQ=="}, "originalCommit": {"oid": "06ce0bec1f4f9eeeb92dfc4d6103224afd17e5d6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODEyMTA0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzowNjoyOVrOGIrPzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToyNTozNlrOGNnkBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1MDM1MQ==", "bodyText": "Should the comment be updated?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r411750351", "createdAt": "2020-04-20T23:06:29Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -1217,7 +1225,7 @@ int adjustPoolSize(int poolSize, int poolAdjustment) {\n \n         if (poolAdjustment != 0) {\n             // don't shrink below coreThreads", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ce0bec1f4f9eeeb92dfc4d6103224afd17e5d6"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzMjg3MQ==", "bodyText": "Done", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r416932871", "createdAt": "2020-04-28T21:25:36Z", "author": {"login": "gjdeval"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -1217,7 +1225,7 @@ int adjustPoolSize(int poolSize, int poolAdjustment) {\n \n         if (poolAdjustment != 0) {\n             // don't shrink below coreThreads", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1MDM1MQ=="}, "originalCommit": {"oid": "06ce0bec1f4f9eeeb92dfc4d6103224afd17e5d6"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODE3ODM0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzoyODoxMVrOGIrvwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToyMzo0M1rOGNnf1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1ODUyOA==", "bodyText": "Should the comment be updated?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r411758528", "createdAt": "2020-04-20T23:28:11Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -893,19 +901,19 @@ boolean handleOutliers(ThroughputDistribution distribution, double throughput) {\n         boolean flippedCoin = false;\n         int downwardCompareSpan = 0;\n \n-        if (poolSize >= coreThreads + poolDecrement) {\n+        if (poolSize >= currentMinimumPoolSize + poolDecrement) {\n             // compareSpan is poolSize range used for throughput comparison\n-            downwardCompareSpan = Math.min(compareRange * poolDecrement, poolSize - coreThreads);\n+            downwardCompareSpan = Math.min(compareRange * poolDecrement, poolSize - currentMinimumPoolSize);\n \n             // if poolSize already close to coreThreads, we can skip some shrinkScore tweaks", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ce0bec1f4f9eeeb92dfc4d6103224afd17e5d6"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzMTc5OA==", "bodyText": "Done", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r416931798", "createdAt": "2020-04-28T21:23:43Z", "author": {"login": "gjdeval"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -893,19 +901,19 @@ boolean handleOutliers(ThroughputDistribution distribution, double throughput) {\n         boolean flippedCoin = false;\n         int downwardCompareSpan = 0;\n \n-        if (poolSize >= coreThreads + poolDecrement) {\n+        if (poolSize >= currentMinimumPoolSize + poolDecrement) {\n             // compareSpan is poolSize range used for throughput comparison\n-            downwardCompareSpan = Math.min(compareRange * poolDecrement, poolSize - coreThreads);\n+            downwardCompareSpan = Math.min(compareRange * poolDecrement, poolSize - currentMinimumPoolSize);\n \n             // if poolSize already close to coreThreads, we can skip some shrinkScore tweaks", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1ODUyOA=="}, "originalCommit": {"oid": "06ce0bec1f4f9eeeb92dfc4d6103224afd17e5d6"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODE5MjA4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMzozMDozM1rOGIr3rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToyMzoyNFrOGNnfRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2MDU1OA==", "bodyText": "currentMinimumPoolSize is not reset in resetThreadPool.  Should it be?  Or should resetThreadPool use currentMinimumPoolSize instead of coreThreads in its calculation?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r411760558", "createdAt": "2020-04-20T23:30:33Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -606,6 +612,7 @@\n         this.executorService = executorService;\n         this.threadPool = pool;\n         this.coreThreads = pool.getCorePoolSize();\n+        this.currentMinimumPoolSize = this.coreThreads;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ce0bec1f4f9eeeb92dfc4d6103224afd17e5d6"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzMTY1NA==", "bodyText": "resetThreadPool zeros out all the stats - so on that basis, I'm going with setting currentMinimumPoolSize to coreThreads\ngood catch :)", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r416931654", "createdAt": "2020-04-28T21:23:24Z", "author": {"login": "gjdeval"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -606,6 +612,7 @@\n         this.executorService = executorService;\n         this.threadPool = pool;\n         this.coreThreads = pool.getCorePoolSize();\n+        this.currentMinimumPoolSize = this.coreThreads;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc2MDU1OA=="}, "originalCommit": {"oid": "06ce0bec1f4f9eeeb92dfc4d6103224afd17e5d6"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjM4MjMyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjozMTo0MlrOGMgryg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMTo1MToyNVrOGNoWyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3MTU5NA==", "bodyText": "Should the comments and trace be updated here to reference currentMinimumPoolSize instead of coreThreads?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r415771594", "createdAt": "2020-04-27T12:31:42Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -1760,13 +1796,14 @@ private void setPoolIncrementDecrement(int poolSize) {\n          * decrement exactly to coreThreads.\n          */\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ce0bec1f4f9eeeb92dfc4d6103224afd17e5d6"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0NTg2Nw==", "bodyText": "Done", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r416945867", "createdAt": "2020-04-28T21:51:25Z", "author": {"login": "gjdeval"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -1760,13 +1796,14 @@ private void setPoolIncrementDecrement(int poolSize) {\n          * decrement exactly to coreThreads.\n          */\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3MTU5NA=="}, "originalCommit": {"oid": "06ce0bec1f4f9eeeb92dfc4d6103224afd17e5d6"}, "originalPosition": 240}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjQwMzAxOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjozNjoyNlrOGMg3rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMTozNzowOFrOGNn8Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3NDYzOA==", "bodyText": "Should the above code be updated?\n    if (poolSize < coreThreads) {\n        return \"poolSize < coreThreads\";\n    }\n\nThis ties into the reset though as well and your logic about things not adjusting between intervals.  It is a question that may have the answer of no.  If there is a short lived hang that doesn't require us to grow to the new hang pool size because it resolves with less than that and we never grow to that limit.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r415774638", "createdAt": "2020-04-27T12:36:26Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -1285,9 +1293,13 @@ synchronized String evaluateInterval() {\n                 return \"monitoring paused\";\n             }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ce0bec1f4f9eeeb92dfc4d6103224afd17e5d6"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzOTA1NA==", "bodyText": "That check is intended as a start-of-pool-life sanity check. The pool behavior is to start a new thread for every task until it gets to coreThreads size, and until it gets there we don't need to make any adjustments. I think it is correct to leave this one at coreThreads, rather than currentMinimumThreads. If we raised currentMinimumThreads in a hang-resolution action and didn't get there yet, we will figure that out later when resolveHang calls checkTargetPoolSize, and take action if the situation persists.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r416939054", "createdAt": "2020-04-28T21:37:08Z", "author": {"login": "gjdeval"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -1285,9 +1293,13 @@ synchronized String evaluateInterval() {\n                 return \"monitoring paused\";\n             }\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3NDYzOA=="}, "originalCommit": {"oid": "06ce0bec1f4f9eeeb92dfc4d6103224afd17e5d6"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjQzNDg2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjo0MzoyMlrOGMhJwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoxOToyOFrOGQxLpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3OTI2NQ==", "bodyText": "I do not understand this else case.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r415779265", "createdAt": "2020-04-27T12:43:22Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -1552,12 +1585,15 @@ private boolean resolveHang(long tasksCompleted, boolean queueEmpty, int poolSiz\n                     if (controllerCyclesWithoutHang > noHangCyclesThreshold) {\n                         setPoolIncrementDecrement(poolSize);\n                         hangBufferPoolSize -= poolDecrement;\n+                        currentMinimumPoolSize = hangBufferPoolSize;\n                         controllerCyclesWithoutHang = 0;\n                     }\n                 }\n+            } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06ce0bec1f4f9eeeb92dfc4d6103224afd17e5d6"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0MzEzNg==", "bodyText": "The intent is to \"reset\" currentMinimumPoolSize when a hang condition has abated and hangBufferPoolSize is being relaxed. I think this should happen anyway the last time through the 'if' side of this logic, but I wasn't 100% sure, so I put the 'else' in as a safety-valve ... maybe not necessary?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r416943136", "createdAt": "2020-04-28T21:45:22Z", "author": {"login": "gjdeval"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -1552,12 +1585,15 @@ private boolean resolveHang(long tasksCompleted, boolean queueEmpty, int poolSiz\n                     if (controllerCyclesWithoutHang > noHangCyclesThreshold) {\n                         setPoolIncrementDecrement(poolSize);\n                         hangBufferPoolSize -= poolDecrement;\n+                        currentMinimumPoolSize = hangBufferPoolSize;\n                         controllerCyclesWithoutHang = 0;\n                     }\n                 }\n+            } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3OTI2NQ=="}, "originalCommit": {"oid": "06ce0bec1f4f9eeeb92dfc4d6103224afd17e5d6"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU1OTk3NA==", "bodyText": "Based off of the logic, it seemed unnecessary to me which is why I brought it up.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r419559974", "createdAt": "2020-05-04T16:22:04Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -1552,12 +1585,15 @@ private boolean resolveHang(long tasksCompleted, boolean queueEmpty, int poolSiz\n                     if (controllerCyclesWithoutHang > noHangCyclesThreshold) {\n                         setPoolIncrementDecrement(poolSize);\n                         hangBufferPoolSize -= poolDecrement;\n+                        currentMinimumPoolSize = hangBufferPoolSize;\n                         controllerCyclesWithoutHang = 0;\n                     }\n                 }\n+            } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3OTI2NQ=="}, "originalCommit": {"oid": "06ce0bec1f4f9eeeb92dfc4d6103224afd17e5d6"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNjE5Nw==", "bodyText": "OK, deleted it.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r420236197", "createdAt": "2020-05-05T16:19:28Z", "author": {"login": "gjdeval"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -1552,12 +1585,15 @@ private boolean resolveHang(long tasksCompleted, boolean queueEmpty, int poolSiz\n                     if (controllerCyclesWithoutHang > noHangCyclesThreshold) {\n                         setPoolIncrementDecrement(poolSize);\n                         hangBufferPoolSize -= poolDecrement;\n+                        currentMinimumPoolSize = hangBufferPoolSize;\n                         controllerCyclesWithoutHang = 0;\n                     }\n                 }\n+            } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc3OTI2NQ=="}, "originalCommit": {"oid": "06ce0bec1f4f9eeeb92dfc4d6103224afd17e5d6"}, "originalPosition": 219}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTY0MDM4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjoyNzowMFrOGQIHKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo0ODozNFrOGQv0LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU2MzMwNg==", "bodyText": "The use of activeThreads in this method is confusing now that you have a instance scoped variable with the same name.  In reality activeThreads doesn't actually portray what this argument is.  numberOfThreads or something like that may be a better option.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r419563306", "createdAt": "2020-05-04T16:27:00Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -749,6 +775,7 @@ synchronized void resume() {\n      * @return the data representing the throughput distribution for the\n      *         specified number of active threads\n      */\n+    @Trivial\n     ThroughputDistribution getThroughputDistribution(int activeThreads, boolean create) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e11368e29139f3e26739ee75ec684974feed68d0"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxMzgwNQ==", "bodyText": "Agree, done.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r420213805", "createdAt": "2020-05-05T15:48:34Z", "author": {"login": "gjdeval"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -749,6 +775,7 @@ synchronized void resume() {\n      * @return the data representing the throughput distribution for the\n      *         specified number of active threads\n      */\n+    @Trivial\n     ThroughputDistribution getThroughputDistribution(int activeThreads, boolean create) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU2MzMwNg=="}, "originalCommit": {"oid": "e11368e29139f3e26739ee75ec684974feed68d0"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTY2NzYwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjozMzo0MVrOGQIYHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDozOTo0OVrOGRWVew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU2NzY0NA==", "bodyText": "I am not sure if this is the right comparison for lowActivity related to activeThreads.  I would expect it to be something like activeThreads < poolSize - poolIncrement or maybe 2 * poolIncrement.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r419567644", "createdAt": "2020-05-04T16:33:41Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -1323,21 +1356,21 @@ synchronized String evaluateInterval() {\n                 currentStats.addDataPoint(throughput, controllerCycle);\n             }\n \n-            boolean lowTput = false;\n-            if (queueDepth == 0 && throughput < poolSize * lowTputThreadsRatio) {\n-                lowTput = true;\n+            boolean lowActivity = false;\n+            if (queueEmpty && ((throughput < (poolSize * lowTputThreadsRatio)) || (activeThreads < (poolSize * activeThreadsGrowthRatio)))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e11368e29139f3e26739ee75ec684974feed68d0"}, "originalPosition": 280}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwNzQwNw==", "bodyText": "Also need to consider looking if less than coreThreads or currentMinimumPoolSize.  May treat those differently.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r419607407", "createdAt": "2020-05-04T17:36:02Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -1323,21 +1356,21 @@ synchronized String evaluateInterval() {\n                 currentStats.addDataPoint(throughput, controllerCycle);\n             }\n \n-            boolean lowTput = false;\n-            if (queueDepth == 0 && throughput < poolSize * lowTputThreadsRatio) {\n-                lowTput = true;\n+            boolean lowActivity = false;\n+            if (queueEmpty && ((throughput < (poolSize * lowTputThreadsRatio)) || (activeThreads < (poolSize * activeThreadsGrowthRatio)))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU2NzY0NA=="}, "originalCommit": {"oid": "e11368e29139f3e26739ee75ec684974feed68d0"}, "originalPosition": 280}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMjkyMw==", "bodyText": "I am also not sure about this :-) but was just looking for a clear indicator of \"low activity\". Finding that a sizable chunk (default 25%) of the threads were not doing anything at the moment of the snapshot seemed to qualify.\nAt this point in the flow, I don't think we need to worry about the absolute number of active threads, e.g. by comparing to coreThreads or currentMinimumPoolSize. This is just to inform getShrinkScore, getGrowScore, and forceVariation that \"the pool isn't doing much work right now\", so they can make their decisions accordingly. Those methods deal with boundary limits like coreThreads and currentMinimumPoolSize.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r420232923", "createdAt": "2020-05-05T16:14:38Z", "author": {"login": "gjdeval"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -1323,21 +1356,21 @@ synchronized String evaluateInterval() {\n                 currentStats.addDataPoint(throughput, controllerCycle);\n             }\n \n-            boolean lowTput = false;\n-            if (queueDepth == 0 && throughput < poolSize * lowTputThreadsRatio) {\n-                lowTput = true;\n+            boolean lowActivity = false;\n+            if (queueEmpty && ((throughput < (poolSize * lowTputThreadsRatio)) || (activeThreads < (poolSize * activeThreadsGrowthRatio)))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU2NzY0NA=="}, "originalCommit": {"oid": "e11368e29139f3e26739ee75ec684974feed68d0"}, "originalPosition": 280}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2NDkzMw==", "bodyText": "One of my issues that I have is that 25% means different things at different thread pool sizes.  75% of 12 is 9.  If it is at 8, but the increment level is 8, we go down to 4 when we shouldn't.  We will just to right back up.  This is why I suggested using a factor of the poolDecrement in order to make the decision of being low activity.\nWhen we get to the lower numbers and closer to the coreThreads or currentMinimumPoolSize, we may have to have different characteristics.  Maybe need a Math.max(75% of current pool size, currentMinimumPoolSize);  that is why I brought up having a different criteria when we get close to currentMinimumPoolSize or coreThreads.  I didn't want us to not decide to shrink because we think we have high activity even though we don't because it is not less than 75% of the current pool size, but it is lower than currentMinimumPoolSize / coreThreads.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r420464933", "createdAt": "2020-05-05T23:22:29Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -1323,21 +1356,21 @@ synchronized String evaluateInterval() {\n                 currentStats.addDataPoint(throughput, controllerCycle);\n             }\n \n-            boolean lowTput = false;\n-            if (queueDepth == 0 && throughput < poolSize * lowTputThreadsRatio) {\n-                lowTput = true;\n+            boolean lowActivity = false;\n+            if (queueEmpty && ((throughput < (poolSize * lowTputThreadsRatio)) || (activeThreads < (poolSize * activeThreadsGrowthRatio)))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU2NzY0NA=="}, "originalCommit": {"oid": "e11368e29139f3e26739ee75ec684974feed68d0"}, "originalPosition": 280}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg0NDkyMw==", "bodyText": "The way lowActivity is used in the controller is primarily to curb unnecessary growth - it does not force the pool to shrink. If lowActivity is true, then getGrowScore returns 0 and forceVariation will not grow the pool. The effect of lowActivity on shrink decisions is much more subtle - a nudge to increase shrinkScore in some cases.\n\n\nWe don't have to worry about lowActivity pushing the pool size below currentMinimumPoolSize because that is prevented by checks in adjustPoolSize.\n\n\nThe example you gave will never arise, because poolDecrement will always be no greater than Math.floor(25% of pool size).\n\n\nFor example, say cpus=2 - then coreThreads is 4 and poolIncrement/Decrement is 2\nSo if poolSize=12, then activeThreads < 9 (8 or lower) would help set lowActivity, but dropping 2 threads from 12 leaves 10, which is 2 above activeThreads.\nThings are closer on the first increment - if poolSize=6 then activeThreads has to be 4 or lower for lowActivity to be set, and a poolDecrement of 2 is still safe\n\n\nTo overcome any concern about shrinking below activeThreads, it is probably a good idea to add it as a limit to shrinking in adjustPoolSize:\n     if (poolAdjustment < 0 && newPoolSize >= Math.max(currentMinimumPoolSize,activeThreads) {\n\n\n\nThat would protect us against unexpected behavior if the various system properties have been manually configured in such a way that poolDecrement might be greater than 25% of poolSize.\nThe thing that I like about 75% is that it provides a very general flag that \"hey the pool is really not very busy at the moment\" which is a good clue that the controller really should not grow the pool, even randomly, and should think about maybe shrinking it. :-)", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r420844923", "createdAt": "2020-05-06T14:39:49Z", "author": {"login": "gjdeval"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -1323,21 +1356,21 @@ synchronized String evaluateInterval() {\n                 currentStats.addDataPoint(throughput, controllerCycle);\n             }\n \n-            boolean lowTput = false;\n-            if (queueDepth == 0 && throughput < poolSize * lowTputThreadsRatio) {\n-                lowTput = true;\n+            boolean lowActivity = false;\n+            if (queueEmpty && ((throughput < (poolSize * lowTputThreadsRatio)) || (activeThreads < (poolSize * activeThreadsGrowthRatio)))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU2NzY0NA=="}, "originalCommit": {"oid": "e11368e29139f3e26739ee75ec684974feed68d0"}, "originalPosition": 280}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTczNjg4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjo1MDoxOVrOGQJCNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo1OTo0MFrOGQwVCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3ODQyMQ==", "bodyText": "warnings are translated messages.  If you are going to leave this in here you should add a translated message for it.  This will automatically get an FFDC added due to instrumentation which likely will be sufficient.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r419578421", "createdAt": "2020-05-04T16:50:19Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -1350,16 +1383,21 @@ synchronized String evaluateInterval() {\n             }\n \n             // Force some random variation into the pool size algorithm\n-            poolAdjustment = forceVariation(poolSize, poolAdjustment, deltaCompleted, lowTput);\n+            poolAdjustment = forceVariation(poolSize, poolAdjustment, deltaCompleted, lowActivity);\n \n             // Format an event level trace point with the most useful data\n             if (tc.isEventEnabled()) {\n-                Tr.event(tc, \"Interval data\", toIntervalData(throughput, forecast, shrinkScore, growScore, poolSize, poolAdjustment));\n+                Tr.event(tc, \"Interval data\", toIntervalData(throughput, forecast, deltaCompleted, shrinkScore, growScore,\n+                                                             poolSize, poolAdjustment));\n             }\n \n             // Change the pool size and save the result, will check it at start of next control cycle\n             targetPoolSize = adjustPoolSize(poolSize, poolAdjustment);\n \n+        } catch (Exception ex) {\n+            if (tc.isWarningEnabled()) {\n+                Tr.warning(tc, \"Exception caught: \" + ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e11368e29139f3e26739ee75ec684974feed68d0"}, "originalPosition": 321}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3OTM2NQ==", "bodyText": "There is a catch on the caller to this method so it should have made an FFDC for any exception as well?  Did you not see one?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r419579365", "createdAt": "2020-05-04T16:51:41Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -1350,16 +1383,21 @@ synchronized String evaluateInterval() {\n             }\n \n             // Force some random variation into the pool size algorithm\n-            poolAdjustment = forceVariation(poolSize, poolAdjustment, deltaCompleted, lowTput);\n+            poolAdjustment = forceVariation(poolSize, poolAdjustment, deltaCompleted, lowActivity);\n \n             // Format an event level trace point with the most useful data\n             if (tc.isEventEnabled()) {\n-                Tr.event(tc, \"Interval data\", toIntervalData(throughput, forecast, shrinkScore, growScore, poolSize, poolAdjustment));\n+                Tr.event(tc, \"Interval data\", toIntervalData(throughput, forecast, deltaCompleted, shrinkScore, growScore,\n+                                                             poolSize, poolAdjustment));\n             }\n \n             // Change the pool size and save the result, will check it at start of next control cycle\n             targetPoolSize = adjustPoolSize(poolSize, poolAdjustment);\n \n+        } catch (Exception ex) {\n+            if (tc.isWarningEnabled()) {\n+                Tr.warning(tc, \"Exception caught: \" + ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3ODQyMQ=="}, "originalCommit": {"oid": "e11368e29139f3e26739ee75ec684974feed68d0"}, "originalPosition": 321}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyMjIxOQ==", "bodyText": "Mmmm ... I did not see an FFDC, but may have overlooked it.\nGuess I will delete this catch.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r420222219", "createdAt": "2020-05-05T15:59:40Z", "author": {"login": "gjdeval"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -1350,16 +1383,21 @@ synchronized String evaluateInterval() {\n             }\n \n             // Force some random variation into the pool size algorithm\n-            poolAdjustment = forceVariation(poolSize, poolAdjustment, deltaCompleted, lowTput);\n+            poolAdjustment = forceVariation(poolSize, poolAdjustment, deltaCompleted, lowActivity);\n \n             // Format an event level trace point with the most useful data\n             if (tc.isEventEnabled()) {\n-                Tr.event(tc, \"Interval data\", toIntervalData(throughput, forecast, shrinkScore, growScore, poolSize, poolAdjustment));\n+                Tr.event(tc, \"Interval data\", toIntervalData(throughput, forecast, deltaCompleted, shrinkScore, growScore,\n+                                                             poolSize, poolAdjustment));\n             }\n \n             // Change the pool size and save the result, will check it at start of next control cycle\n             targetPoolSize = adjustPoolSize(poolSize, poolAdjustment);\n \n+        } catch (Exception ex) {\n+            if (tc.isWarningEnabled()) {\n+                Tr.warning(tc, \"Exception caught: \" + ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU3ODQyMQ=="}, "originalCommit": {"oid": "e11368e29139f3e26739ee75ec684974feed68d0"}, "originalPosition": 321}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTc4MDc2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzowMDo1MlrOGQJdPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjowMTo1N1rOGQwcQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU4NTM0MQ==", "bodyText": "Should this call executorService.getActiveThreads() instead?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r419585341", "createdAt": "2020-05-04T17:00:52Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -1264,6 +1291,7 @@ synchronized String evaluateInterval() {\n         try {\n             queueDepth = threadPool.getQueue().size();\n             boolean queueEmpty = (queueDepth <= 0);\n+            activeThreads = threadPool.getActiveCount();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e11368e29139f3e26739ee75ec684974feed68d0"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYzNzQxMw==", "bodyText": "I am thinking it shouldn't be executorService.getActiveThreads() because it is how many threads are active and are waiting to run.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r419637413", "createdAt": "2020-05-04T18:25:10Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -1264,6 +1291,7 @@ synchronized String evaluateInterval() {\n         try {\n             queueDepth = threadPool.getQueue().size();\n             boolean queueEmpty = (queueDepth <= 0);\n+            activeThreads = threadPool.getActiveCount();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU4NTM0MQ=="}, "originalCommit": {"oid": "e11368e29139f3e26739ee75ec684974feed68d0"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyNDA2NA==", "bodyText": "threadPool.getActiveCount() seems to do what I want - when things are busy, activeThreads is equal to poolSize, as the system quiets down activeThreads falls below poolSize.\nI'm trying to keep this relatively simple - at this snapshot time, were most of the threads working or were many of them idle.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r420224064", "createdAt": "2020-05-05T16:01:57Z", "author": {"login": "gjdeval"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -1264,6 +1291,7 @@ synchronized String evaluateInterval() {\n         try {\n             queueDepth = threadPool.getQueue().size();\n             boolean queueEmpty = (queueDepth <= 0);\n+            activeThreads = threadPool.getActiveCount();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU4NTM0MQ=="}, "originalCommit": {"oid": "e11368e29139f3e26739ee75ec684974feed68d0"}, "originalPosition": 251}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzQyMTMxOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoyNjoxM1rOGQ_OGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDo0NDozNFrOGRWkqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2NjIwMA==", "bodyText": "It would appear that this does not need to be an instance scoped variable, but instead can be passed to toIntervalData in evaluateInterval.  It is only used in those two methods.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r420466200", "createdAt": "2020-05-05T23:26:13Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -395,13 +413,19 @@\n     private double processCpuUtil = -1.0;\n     private double systemCpuUtil = -1.0;\n     private double cpuUtil = -1.0;\n+    private static DecimalFormat df = new DecimalFormat(\"0.00\", DecimalFormatSymbols.getInstance(Locale.US));\n \n     /**\n      * The controller uses the threadpool queue depth as an input to some of the\n      * decisions it makes.\n      */\n     private int queueDepth = 0;\n \n+    /**\n+     * How many threads are active (running tasks) at the current controller cycle\n+     */\n+    private int activeThreads = 0;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "affbd9c17c0d80136310b520072212b27c8cd8a1"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg0ODgxMQ==", "bodyText": "I've just added a use of activeThreads in adjustPoolSize ... could still change it to be passed into the methods as a parameter, not sure how much difference it makes?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11770#discussion_r420848811", "createdAt": "2020-05-06T14:44:34Z", "author": {"login": "gjdeval"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/internal/ThreadPoolController.java", "diffHunk": "@@ -395,13 +413,19 @@\n     private double processCpuUtil = -1.0;\n     private double systemCpuUtil = -1.0;\n     private double cpuUtil = -1.0;\n+    private static DecimalFormat df = new DecimalFormat(\"0.00\", DecimalFormatSymbols.getInstance(Locale.US));\n \n     /**\n      * The controller uses the threadpool queue depth as an input to some of the\n      * decisions it makes.\n      */\n     private int queueDepth = 0;\n \n+    /**\n+     * How many threads are active (running tasks) at the current controller cycle\n+     */\n+    private int activeThreads = 0;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2NjIwMA=="}, "originalCommit": {"oid": "affbd9c17c0d80136310b520072212b27c8cd8a1"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1921, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}