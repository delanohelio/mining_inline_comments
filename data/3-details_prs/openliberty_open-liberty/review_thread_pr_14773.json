{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMjAxMDQ3", "number": 14773, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODo0NzozMlrOEz6zEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODo0ODo0MFrOEz60Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODc2MTc4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.artifact.zip/src/com/ibm/ws/artifact/zip/cache/internal/ZipFileHandleImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODo0NzozMlrOHrb_dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODo1MjoyOVrOHrcI8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMwOTQyOA==", "bodyText": "could this be made a static class to reduce overhead of creating a new ZipFileHandleImpl (same comment applies to other instances of occurrences of non-static private lock classes)", "url": "https://github.com/OpenLiberty/open-liberty/pull/14773#discussion_r515309428", "createdAt": "2020-10-30T18:47:32Z", "author": {"login": "aguibert"}, "path": "dev/com.ibm.ws.artifact.zip/src/com/ibm/ws/artifact/zip/cache/internal/ZipFileHandleImpl.java", "diffHunk": "@@ -88,7 +88,10 @@ public long getLastModified() {\n \n     //\n \n-    private final Integer zipFileLock = new Integer(0);\n+    private class ZipFileLock {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c81ef4c3ef6a1f0f86552676cd6bacf2f4cd6a2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMxMTg1OQ==", "bodyText": "I just put it back to what it was before, but sure, it makes sense to make them all static.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14773#discussion_r515311859", "createdAt": "2020-10-30T18:52:29Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.ws.artifact.zip/src/com/ibm/ws/artifact/zip/cache/internal/ZipFileHandleImpl.java", "diffHunk": "@@ -88,7 +88,10 @@ public long getLastModified() {\n \n     //\n \n-    private final Integer zipFileLock = new Integer(0);\n+    private class ZipFileLock {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMwOTQyOA=="}, "originalCommit": {"oid": "6c81ef4c3ef6a1f0f86552676cd6bacf2f4cd6a2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODc2NTExOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.channelfw/src/com/ibm/ws/bytebuffer/internal/WsByteBufferPoolManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODo0ODo0MFrOHrcBlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODo1NDowOVrOHrcL8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMwOTk3NA==", "bodyText": "Why switching to new Object() here? AFAIK the new Object() constructor might be removed in a future Java release, so we should avoid new usages of this.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14773#discussion_r515309974", "createdAt": "2020-10-30T18:48:40Z", "author": {"login": "aguibert"}, "path": "dev/com.ibm.ws.channelfw/src/com/ibm/ws/bytebuffer/internal/WsByteBufferPoolManagerImpl.java", "diffHunk": "@@ -92,7 +92,7 @@\n     private long lastTimeCheck = 0L;\n     private int leakDetectionInterval = -1;\n     private String leakDetectionOutput = null;\n-    private final Integer leakDetectionSyncObject = new Integer(1);\n+    private final Object leakDetectionSyncObject = new Object() {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c81ef4c3ef6a1f0f86552676cd6bacf2f4cd6a2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMxMjYyNQ==", "bodyText": "It is making an anonymous class that extends Object.  If that won't work, I can make it a static inner class like in the other classes.  I may have some additional classes to change if we want to remove creating anonymous inner classes that way.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14773#discussion_r515312625", "createdAt": "2020-10-30T18:54:09Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.ws.channelfw/src/com/ibm/ws/bytebuffer/internal/WsByteBufferPoolManagerImpl.java", "diffHunk": "@@ -92,7 +92,7 @@\n     private long lastTimeCheck = 0L;\n     private int leakDetectionInterval = -1;\n     private String leakDetectionOutput = null;\n-    private final Integer leakDetectionSyncObject = new Integer(1);\n+    private final Object leakDetectionSyncObject = new Object() {};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMwOTk3NA=="}, "originalCommit": {"oid": "6c81ef4c3ef6a1f0f86552676cd6bacf2f4cd6a2"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2503, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}