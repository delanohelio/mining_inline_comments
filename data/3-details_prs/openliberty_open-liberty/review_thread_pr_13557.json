{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NzY0NTY3", "number": 13557, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzowNzo0MFrOEjr_ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzowNzo0MFrOEjr_ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODU2Mzc5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.messaging.open_jms20_fat/test-applications/JMSProducer/src/jmsproducer/web/JMSProducerServlet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzowNzo0MFrOHSLjAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNTo1MjozMlrOHS3gRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgyNTYwMA==", "bodyText": "\"Outgoing\"?", "url": "https://github.com/OpenLiberty/open-liberty/pull/13557#discussion_r488825600", "createdAt": "2020-09-15T17:07:40Z", "author": {"login": "joe-chacko"}, "path": "dev/com.ibm.ws.messaging.open_jms20_fat/test-applications/JMSProducer/src/jmsproducer/web/JMSProducerServlet.java", "diffHunk": "@@ -3702,52 +3729,85 @@ public void testSetTimeToLive_B_SecOff(\n         }\n     }\n \n+    private void displayProducer(JMSProducer jmsProducer, String tag) {\n+        System.out.println(tag + \": JMSProducer [ \" + jmsProducer + \" ]\");\n+    }\n+\n+    private void displayMessage(Message message, String tag) throws JMSException {\n+        System.out.println(tag + \": Message [ \" + message + \" ]\");\n+    }\n+\n     public void testSetTimeToLive_TCP_SecOff(\n         HttpServletRequest request, HttpServletResponse response) throws Throwable {\n \n+        String methodName = \"testSetTimeToLive_TCP_SecOff\";\n+\n         JMSContext jmsContextQCFTCP = qcfTCP.createContext();\n         emptyQueue(qcfTCP, queue1);\n         JMSConsumer jmsConsumer = jmsContextQCFTCP.createConsumer(queue1);\n         JMSProducer jmsProducer = jmsContextQCFTCP.createProducer();\n \n-        TextMessage msgOut = jmsContextQCFTCP.createTextMessage();\n+        // jmsProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT); // Doesn't change the test result.\n \n-        long defaultTimeToLive = jmsProducer.getTimeToLive();\n-        System.out.println(\"Default time to live [ \" + defaultTimeToLive + \" ]\");\n+        TextMessage msgOut = jmsContextQCFTCP.createTextMessage();\n+        displayMessage(msgOut, methodName + \" Ougoing Message\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af2635e31957be09febf1ff60b5a5f9d9a5e84dd"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU0NTc5Nw==", "bodyText": "Ah, yeah, that should be \"Outgoing\"; fortunately, that is just diagnostic output and not impacting the test result.  I'll fix it in a future PR.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13557#discussion_r489545797", "createdAt": "2020-09-16T15:52:32Z", "author": {"login": "tbitonti"}, "path": "dev/com.ibm.ws.messaging.open_jms20_fat/test-applications/JMSProducer/src/jmsproducer/web/JMSProducerServlet.java", "diffHunk": "@@ -3702,52 +3729,85 @@ public void testSetTimeToLive_B_SecOff(\n         }\n     }\n \n+    private void displayProducer(JMSProducer jmsProducer, String tag) {\n+        System.out.println(tag + \": JMSProducer [ \" + jmsProducer + \" ]\");\n+    }\n+\n+    private void displayMessage(Message message, String tag) throws JMSException {\n+        System.out.println(tag + \": Message [ \" + message + \" ]\");\n+    }\n+\n     public void testSetTimeToLive_TCP_SecOff(\n         HttpServletRequest request, HttpServletResponse response) throws Throwable {\n \n+        String methodName = \"testSetTimeToLive_TCP_SecOff\";\n+\n         JMSContext jmsContextQCFTCP = qcfTCP.createContext();\n         emptyQueue(qcfTCP, queue1);\n         JMSConsumer jmsConsumer = jmsContextQCFTCP.createConsumer(queue1);\n         JMSProducer jmsProducer = jmsContextQCFTCP.createProducer();\n \n-        TextMessage msgOut = jmsContextQCFTCP.createTextMessage();\n+        // jmsProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT); // Doesn't change the test result.\n \n-        long defaultTimeToLive = jmsProducer.getTimeToLive();\n-        System.out.println(\"Default time to live [ \" + defaultTimeToLive + \" ]\");\n+        TextMessage msgOut = jmsContextQCFTCP.createTextMessage();\n+        displayMessage(msgOut, methodName + \" Ougoing Message\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgyNTYwMA=="}, "originalCommit": {"oid": "af2635e31957be09febf1ff60b5a5f9d9a5e84dd"}, "originalPosition": 214}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2883, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}