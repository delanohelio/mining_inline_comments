{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMzk3MTY2", "number": 10698, "title": "Rework how kafka connector handles partition rebalancing", "bodyText": "Redesign the Kafka connector slightly to give a stronger pairing between\na message and the partition tracker associated with it. This prevents\nconfusion when a partition is unassigned and then reassigned.\nAvoid emitting messages if the partition those messages came from has\nsince been unassigned (and therefore an attempt to commit the partition\noffset would fail).\nFixes #10281\nFixes #10169", "createdAt": "2020-02-03T16:06:56Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698", "merged": true, "mergeCommit": {"oid": "681ae5100d61a2951ecad91b246d49f12f3ede30"}, "closed": true, "closedAt": "2020-02-14T16:13:26Z", "author": {"login": "Azquelt"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBARoiAFqTM1MjkyMTIxNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcER5LQgFqTM1OTA1MjkwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTIxMjE3", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#pullrequestreview-352921217", "createdAt": "2020-02-04T11:59:16Z", "commit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTo1OToxNlrOFlRjBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMTo1OToxNlrOFlRjBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYyOTEyNg==", "bodyText": "synchronized on what? assume it is always completedWork for all of these variables?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#discussion_r374629126", "createdAt": "2020-02-04T11:59:16Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging.kafka/src/com/ibm/ws/microprofile/reactive/messaging/kafka/CommittingPartitionTracker.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.microprofile.reactive.messaging.kafka;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.KafkaAdapterFactory;\n+import com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.OffsetAndMetadata;\n+import com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.TopicPartition;\n+\n+/**\n+ * Tracks the assignment of a partition to this consumer and commits message offsets to that partition\n+ * <p>\n+ * In addition to the function of {@link PartitionTracker}, this class additionally commits message offsets back to the kafka broker in response to a call to\n+ * {@link #recordDone(long, Optional)}.\n+ * <p>\n+ * For performance, each completed record isn't committed immediately. Instead, this class tries to batch up completed records and commit them together. There are several\n+ * parameters that control how often the message offset is committed:\n+ * <ul>\n+ * <li>{@code maxCommitBatchSize}: sets the maximum number of records to wait for before committing the offset</li>\n+ * <li>{@code maxCommitBatchInterval}: sets the maximum time to wait after a {@link #recordDone(long, Optional)} is called before committing the offset</li>\n+ * </ul>\n+ */\n+public class CommittingPartitionTracker extends PartitionTracker {\n+\n+    private static final TraceComponent tc = Tr.register(CommittingPartitionTracker.class);\n+\n+    private final KafkaAdapterFactory factory;\n+    private final ScheduledExecutorService executor;\n+    private final KafkaInput<?, ?> kafkaInput;\n+    private final int maxCommitBatchSize;\n+    private final Duration maxCommitBatchInterval;\n+\n+    /**\n+     * Set of CompletedWork which has either not been committed or has been committed but the commit has not completed yet.\n+     * <p>\n+     * Any access to this must be synchronized", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTIyMjY3", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#pullrequestreview-352922267", "createdAt": "2020-02-04T12:01:12Z", "commit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjowMToxM1rOFlRmKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjowMToxM1rOFlRmKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYyOTkyOQ==", "bodyText": "Does a value less than or equal to zero actually mean unlimited batch size?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#discussion_r374629929", "createdAt": "2020-02-04T12:01:13Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging.kafka/src/com/ibm/ws/microprofile/reactive/messaging/kafka/CommittingPartitionTracker.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.microprofile.reactive.messaging.kafka;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.KafkaAdapterFactory;\n+import com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.OffsetAndMetadata;\n+import com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.TopicPartition;\n+\n+/**\n+ * Tracks the assignment of a partition to this consumer and commits message offsets to that partition\n+ * <p>\n+ * In addition to the function of {@link PartitionTracker}, this class additionally commits message offsets back to the kafka broker in response to a call to\n+ * {@link #recordDone(long, Optional)}.\n+ * <p>\n+ * For performance, each completed record isn't committed immediately. Instead, this class tries to batch up completed records and commit them together. There are several\n+ * parameters that control how often the message offset is committed:\n+ * <ul>\n+ * <li>{@code maxCommitBatchSize}: sets the maximum number of records to wait for before committing the offset</li>\n+ * <li>{@code maxCommitBatchInterval}: sets the maximum time to wait after a {@link #recordDone(long, Optional)} is called before committing the offset</li>\n+ * </ul>\n+ */\n+public class CommittingPartitionTracker extends PartitionTracker {\n+\n+    private static final TraceComponent tc = Tr.register(CommittingPartitionTracker.class);\n+\n+    private final KafkaAdapterFactory factory;\n+    private final ScheduledExecutorService executor;\n+    private final KafkaInput<?, ?> kafkaInput;\n+    private final int maxCommitBatchSize;\n+    private final Duration maxCommitBatchInterval;\n+\n+    /**\n+     * Set of CompletedWork which has either not been committed or has been committed but the commit has not completed yet.\n+     * <p>\n+     * Any access to this must be synchronized\n+     */\n+    private final SortedSet<CompletedWork> completedWork = new TreeSet<>();\n+\n+    /**\n+     * The count of CompletedWork for which a commit has not been started\n+     * <p>\n+     * Any access to this must be synchronized\n+     */\n+    private int outstandingUncommittedWork = 0;\n+\n+    /**\n+     * The last offset for which a commit was started\n+     * <p>\n+     * Any access to this must be synchronized\n+     */\n+    private long committedOffset;\n+\n+    /**\n+     * The currently scheduled task which will attempt to commit completed work or {@code null} if no task has been scheduled.\n+     * <p>\n+     * Any access to this must be synchronized\n+     */\n+    private Future<?> pendingCommitTask = null;\n+\n+    /**\n+     *\n+     * @param topicPartition the partition to track\n+     * @param factory the KafkaAdaptorFactory\n+     * @param kafkaInput the KafkaInput\n+     * @param initialCommittedOffset the position of the reader when the partition was assigned\n+     * @param executor a ScheduledExecutorService\n+     * @param maxCommitBatchSize the maximum number of records to wait for before committing the offset", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTMzNDg5", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#pullrequestreview-352933489", "createdAt": "2020-02-04T12:21:22Z", "commit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjoyMToyMlrOFlSHZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjoyMToyMlrOFlSHZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYzODQzNw==", "bodyText": "huh? Committed is past tense, next message is future??", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#discussion_r374638437", "createdAt": "2020-02-04T12:21:22Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging.kafka/src/com/ibm/ws/microprofile/reactive/messaging/kafka/CommittingPartitionTracker.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.microprofile.reactive.messaging.kafka;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.KafkaAdapterFactory;\n+import com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.OffsetAndMetadata;\n+import com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.TopicPartition;\n+\n+/**\n+ * Tracks the assignment of a partition to this consumer and commits message offsets to that partition\n+ * <p>\n+ * In addition to the function of {@link PartitionTracker}, this class additionally commits message offsets back to the kafka broker in response to a call to\n+ * {@link #recordDone(long, Optional)}.\n+ * <p>\n+ * For performance, each completed record isn't committed immediately. Instead, this class tries to batch up completed records and commit them together. There are several\n+ * parameters that control how often the message offset is committed:\n+ * <ul>\n+ * <li>{@code maxCommitBatchSize}: sets the maximum number of records to wait for before committing the offset</li>\n+ * <li>{@code maxCommitBatchInterval}: sets the maximum time to wait after a {@link #recordDone(long, Optional)} is called before committing the offset</li>\n+ * </ul>\n+ */\n+public class CommittingPartitionTracker extends PartitionTracker {\n+\n+    private static final TraceComponent tc = Tr.register(CommittingPartitionTracker.class);\n+\n+    private final KafkaAdapterFactory factory;\n+    private final ScheduledExecutorService executor;\n+    private final KafkaInput<?, ?> kafkaInput;\n+    private final int maxCommitBatchSize;\n+    private final Duration maxCommitBatchInterval;\n+\n+    /**\n+     * Set of CompletedWork which has either not been committed or has been committed but the commit has not completed yet.\n+     * <p>\n+     * Any access to this must be synchronized\n+     */\n+    private final SortedSet<CompletedWork> completedWork = new TreeSet<>();\n+\n+    /**\n+     * The count of CompletedWork for which a commit has not been started\n+     * <p>\n+     * Any access to this must be synchronized\n+     */\n+    private int outstandingUncommittedWork = 0;\n+\n+    /**\n+     * The last offset for which a commit was started\n+     * <p>\n+     * Any access to this must be synchronized\n+     */\n+    private long committedOffset;\n+\n+    /**\n+     * The currently scheduled task which will attempt to commit completed work or {@code null} if no task has been scheduled.\n+     * <p>\n+     * Any access to this must be synchronized\n+     */\n+    private Future<?> pendingCommitTask = null;\n+\n+    /**\n+     *\n+     * @param topicPartition the partition to track\n+     * @param factory the KafkaAdaptorFactory\n+     * @param kafkaInput the KafkaInput\n+     * @param initialCommittedOffset the position of the reader when the partition was assigned\n+     * @param executor a ScheduledExecutorService\n+     * @param maxCommitBatchSize the maximum number of records to wait for before committing the offset\n+     * @param maxCommitBatchInterval the maximum time to wait after a {@link #recordDone(long, Optional)} is called before committing the offset\n+     */\n+    public CommittingPartitionTracker(TopicPartition topicPartition,\n+                                      KafkaAdapterFactory factory,\n+                                      KafkaInput<?, ?> kafkaInput,\n+                                      long initialCommittedOffset,\n+                                      ScheduledExecutorService executor,\n+                                      int maxCommitBatchSize,\n+                                      Duration maxCommitBatchInterval) {\n+        super(topicPartition);\n+        this.factory = factory;\n+        this.kafkaInput = kafkaInput;\n+        this.executor = executor;\n+        this.committedOffset = initialCommittedOffset;\n+        this.maxCommitBatchSize = maxCommitBatchSize;\n+        this.maxCommitBatchInterval = maxCommitBatchInterval;\n+    }\n+\n+    @Override\n+    public CompletionStage<Void> recordDone(long offset, Optional<Integer> leaderEpoch) {\n+\n+        CompletableFuture<Void> result = new CompletableFuture<>();\n+        synchronized (completedWork) {\n+            completedWork.add(new CompletedWork(offset, leaderEpoch, result));\n+            outstandingUncommittedWork++;\n+            requestCommit();\n+        }\n+\n+        return result;\n+    }\n+\n+    /**\n+     * Request that done but uncommitted work is committed, either now or in the future\n+     * <p>\n+     * This method will either commit the partition offset now, or schedule it to be done in the future, depending on the values of {@link #maxCommitBatchInterval} and\n+     * {@link #maxCommitBatchSize}.\n+     * <p>\n+     * Calls to this method must be synchronized.\n+     */\n+    private void requestCommit() {\n+        if ((maxCommitBatchSize > 0) && (outstandingUncommittedWork > maxCommitBatchSize)) {\n+            if (pendingCommitTask != null) {\n+                if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n+                    Tr.debug(this, tc, \"Cancelling scheduled commit task because we're committing right now\", this);\n+                }\n+                pendingCommitTask.cancel(true);\n+            }\n+            // commit now\n+            commitCompletedWork();\n+        } else {\n+            if ((pendingCommitTask == null) && !maxCommitBatchInterval.isZero()) {\n+                // commit later\n+                if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n+                    Tr.debug(this, tc, \"Scheduling deferred commit task\", this);\n+                }\n+                pendingCommitTask = executor.schedule(this::commitCompletedWork, maxCommitBatchInterval.toNanos(), TimeUnit.NANOSECONDS);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Attempts to commit the latest block of completed but uncommitted work\n+     * <p>\n+     * We can only commit the offset for a record if all prior records are complete. This method looks through the committed work to see which messages can be committed without\n+     * leaving a gap and then commits them.\n+     */\n+    private void commitCompletedWork() {\n+        synchronized (completedWork) {\n+            if (Thread.interrupted()) {\n+                // Don't do anything if we were cancelled\n+                if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n+                    Tr.debug(this, tc, \"Commit task running but has been cancelled\", this);\n+                }\n+                return;\n+            }\n+\n+            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n+                Tr.debug(this, tc, \"Checking for new work to commit, last committed offset is \" + committedOffset, this);\n+                Tr.debug(this, tc, \"Current completed work\", completedWork);\n+            }\n+\n+            long newCommitOffset = committedOffset;\n+            CompletedWork newestWork = null;\n+            for (CompletedWork work : completedWork) {\n+                if (work.offset < newCommitOffset) {\n+                    // Work that we've already asked to commit, ignore it\n+                } else if (work.offset == newCommitOffset) {\n+                    // Work that should be committed now\n+                    newCommitOffset++;\n+                    newestWork = work;\n+                } else {\n+                    // We've reached the end of a continuous block of completed work\n+                    // Can't commit any further work until everything before it has been committed\n+                    break;\n+                }\n+            }\n+\n+            if (newestWork != null) {\n+                // commit\n+                long originalCommitOffset = committedOffset;\n+                long finalCommitOffset = newCommitOffset;\n+\n+                if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled()) {\n+                    Tr.event(this, tc, \"Committing from \" + originalCommitOffset + \" to \" + finalCommitOffset, this);\n+                }\n+                commitUpTo(newestWork).whenCompleteAsync((r, t) -> processCommittedWork(originalCommitOffset, finalCommitOffset, t), executor);\n+            }\n+\n+            outstandingUncommittedWork -= newCommitOffset - committedOffset;\n+            pendingCommitTask = null;\n+            committedOffset = newCommitOffset;\n+        }\n+    }\n+\n+    /**\n+     * Commit the offset up to the offset of the given work\n+     *\n+     * @param work\n+     * @return completion stage which completes with the result of the commit, or completes exceptionally if the commit failed\n+     */\n+    private CompletionStage<Void> commitUpTo(CompletedWork work) {\n+        if (isClosed()) {\n+            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n+                Tr.debug(this, tc, \"Rejecting commit attempt because partition is closed\", this);\n+            }\n+\n+            CompletableFuture<Void> result = new CompletableFuture<>();\n+            result.completeExceptionally(new Exception(\"Partition is closed\"));\n+            return result;\n+        }\n+\n+        // Note work.offset + 1\n+        // Committed offset is the _next_ message we expect to receive", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "originalPosition": 223}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTM1Nzc4", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#pullrequestreview-352935778", "createdAt": "2020-02-04T12:25:40Z", "commit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjoyNTo0MFrOFlSOig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjoyNTo0MFrOFlSOig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0MDI2Ng==", "bodyText": "Maybe use a different local variable name? To avoid confusion with the instance TreeSet variable above.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#discussion_r374640266", "createdAt": "2020-02-04T12:25:40Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging.kafka/src/com/ibm/ws/microprofile/reactive/messaging/kafka/CommittingPartitionTracker.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.microprofile.reactive.messaging.kafka;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.KafkaAdapterFactory;\n+import com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.OffsetAndMetadata;\n+import com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.TopicPartition;\n+\n+/**\n+ * Tracks the assignment of a partition to this consumer and commits message offsets to that partition\n+ * <p>\n+ * In addition to the function of {@link PartitionTracker}, this class additionally commits message offsets back to the kafka broker in response to a call to\n+ * {@link #recordDone(long, Optional)}.\n+ * <p>\n+ * For performance, each completed record isn't committed immediately. Instead, this class tries to batch up completed records and commit them together. There are several\n+ * parameters that control how often the message offset is committed:\n+ * <ul>\n+ * <li>{@code maxCommitBatchSize}: sets the maximum number of records to wait for before committing the offset</li>\n+ * <li>{@code maxCommitBatchInterval}: sets the maximum time to wait after a {@link #recordDone(long, Optional)} is called before committing the offset</li>\n+ * </ul>\n+ */\n+public class CommittingPartitionTracker extends PartitionTracker {\n+\n+    private static final TraceComponent tc = Tr.register(CommittingPartitionTracker.class);\n+\n+    private final KafkaAdapterFactory factory;\n+    private final ScheduledExecutorService executor;\n+    private final KafkaInput<?, ?> kafkaInput;\n+    private final int maxCommitBatchSize;\n+    private final Duration maxCommitBatchInterval;\n+\n+    /**\n+     * Set of CompletedWork which has either not been committed or has been committed but the commit has not completed yet.\n+     * <p>\n+     * Any access to this must be synchronized\n+     */\n+    private final SortedSet<CompletedWork> completedWork = new TreeSet<>();\n+\n+    /**\n+     * The count of CompletedWork for which a commit has not been started\n+     * <p>\n+     * Any access to this must be synchronized\n+     */\n+    private int outstandingUncommittedWork = 0;\n+\n+    /**\n+     * The last offset for which a commit was started\n+     * <p>\n+     * Any access to this must be synchronized\n+     */\n+    private long committedOffset;\n+\n+    /**\n+     * The currently scheduled task which will attempt to commit completed work or {@code null} if no task has been scheduled.\n+     * <p>\n+     * Any access to this must be synchronized\n+     */\n+    private Future<?> pendingCommitTask = null;\n+\n+    /**\n+     *\n+     * @param topicPartition the partition to track\n+     * @param factory the KafkaAdaptorFactory\n+     * @param kafkaInput the KafkaInput\n+     * @param initialCommittedOffset the position of the reader when the partition was assigned\n+     * @param executor a ScheduledExecutorService\n+     * @param maxCommitBatchSize the maximum number of records to wait for before committing the offset\n+     * @param maxCommitBatchInterval the maximum time to wait after a {@link #recordDone(long, Optional)} is called before committing the offset\n+     */\n+    public CommittingPartitionTracker(TopicPartition topicPartition,\n+                                      KafkaAdapterFactory factory,\n+                                      KafkaInput<?, ?> kafkaInput,\n+                                      long initialCommittedOffset,\n+                                      ScheduledExecutorService executor,\n+                                      int maxCommitBatchSize,\n+                                      Duration maxCommitBatchInterval) {\n+        super(topicPartition);\n+        this.factory = factory;\n+        this.kafkaInput = kafkaInput;\n+        this.executor = executor;\n+        this.committedOffset = initialCommittedOffset;\n+        this.maxCommitBatchSize = maxCommitBatchSize;\n+        this.maxCommitBatchInterval = maxCommitBatchInterval;\n+    }\n+\n+    @Override\n+    public CompletionStage<Void> recordDone(long offset, Optional<Integer> leaderEpoch) {\n+\n+        CompletableFuture<Void> result = new CompletableFuture<>();\n+        synchronized (completedWork) {\n+            completedWork.add(new CompletedWork(offset, leaderEpoch, result));\n+            outstandingUncommittedWork++;\n+            requestCommit();\n+        }\n+\n+        return result;\n+    }\n+\n+    /**\n+     * Request that done but uncommitted work is committed, either now or in the future\n+     * <p>\n+     * This method will either commit the partition offset now, or schedule it to be done in the future, depending on the values of {@link #maxCommitBatchInterval} and\n+     * {@link #maxCommitBatchSize}.\n+     * <p>\n+     * Calls to this method must be synchronized.\n+     */\n+    private void requestCommit() {\n+        if ((maxCommitBatchSize > 0) && (outstandingUncommittedWork > maxCommitBatchSize)) {\n+            if (pendingCommitTask != null) {\n+                if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n+                    Tr.debug(this, tc, \"Cancelling scheduled commit task because we're committing right now\", this);\n+                }\n+                pendingCommitTask.cancel(true);\n+            }\n+            // commit now\n+            commitCompletedWork();\n+        } else {\n+            if ((pendingCommitTask == null) && !maxCommitBatchInterval.isZero()) {\n+                // commit later\n+                if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n+                    Tr.debug(this, tc, \"Scheduling deferred commit task\", this);\n+                }\n+                pendingCommitTask = executor.schedule(this::commitCompletedWork, maxCommitBatchInterval.toNanos(), TimeUnit.NANOSECONDS);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Attempts to commit the latest block of completed but uncommitted work\n+     * <p>\n+     * We can only commit the offset for a record if all prior records are complete. This method looks through the committed work to see which messages can be committed without\n+     * leaving a gap and then commits them.\n+     */\n+    private void commitCompletedWork() {\n+        synchronized (completedWork) {\n+            if (Thread.interrupted()) {\n+                // Don't do anything if we were cancelled\n+                if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n+                    Tr.debug(this, tc, \"Commit task running but has been cancelled\", this);\n+                }\n+                return;\n+            }\n+\n+            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n+                Tr.debug(this, tc, \"Checking for new work to commit, last committed offset is \" + committedOffset, this);\n+                Tr.debug(this, tc, \"Current completed work\", completedWork);\n+            }\n+\n+            long newCommitOffset = committedOffset;\n+            CompletedWork newestWork = null;\n+            for (CompletedWork work : completedWork) {\n+                if (work.offset < newCommitOffset) {\n+                    // Work that we've already asked to commit, ignore it\n+                } else if (work.offset == newCommitOffset) {\n+                    // Work that should be committed now\n+                    newCommitOffset++;\n+                    newestWork = work;\n+                } else {\n+                    // We've reached the end of a continuous block of completed work\n+                    // Can't commit any further work until everything before it has been committed\n+                    break;\n+                }\n+            }\n+\n+            if (newestWork != null) {\n+                // commit\n+                long originalCommitOffset = committedOffset;\n+                long finalCommitOffset = newCommitOffset;\n+\n+                if (TraceComponent.isAnyTracingEnabled() && tc.isEventEnabled()) {\n+                    Tr.event(this, tc, \"Committing from \" + originalCommitOffset + \" to \" + finalCommitOffset, this);\n+                }\n+                commitUpTo(newestWork).whenCompleteAsync((r, t) -> processCommittedWork(originalCommitOffset, finalCommitOffset, t), executor);\n+            }\n+\n+            outstandingUncommittedWork -= newCommitOffset - committedOffset;\n+            pendingCommitTask = null;\n+            committedOffset = newCommitOffset;\n+        }\n+    }\n+\n+    /**\n+     * Commit the offset up to the offset of the given work\n+     *\n+     * @param work\n+     * @return completion stage which completes with the result of the commit, or completes exceptionally if the commit failed\n+     */\n+    private CompletionStage<Void> commitUpTo(CompletedWork work) {\n+        if (isClosed()) {\n+            if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n+                Tr.debug(this, tc, \"Rejecting commit attempt because partition is closed\", this);\n+            }\n+\n+            CompletableFuture<Void> result = new CompletableFuture<>();\n+            result.completeExceptionally(new Exception(\"Partition is closed\"));\n+            return result;\n+        }\n+\n+        // Note work.offset + 1\n+        // Committed offset is the _next_ message we expect to receive\n+        OffsetAndMetadata offsetAndMetadata = factory.newOffsetAndMetadata(work.offset + 1, work.leaderEpoch, null);\n+        return kafkaInput.commitOffsets(topicPartition, offsetAndMetadata);\n+    }\n+\n+    /**\n+     * Complete the CompletionStage associated with work which has been committed\n+     * <p>\n+     * This is called as callback after the partition offset has been committed asynchronously\n+     *\n+     * @param originalOffset the committed offset before this commit\n+     * @param committedOffset the new committed offset\n+     * @param exception the exception which caused the commit to fail, or {@code null} if it was successful\n+     */\n+    private void processCommittedWork(long originalOffset, long committedOffset, Throwable exception) {\n+\n+        if (TraceComponent.isAnyTracingEnabled() && tc.isDebugEnabled()) {\n+            if (exception == null) {\n+                Tr.debug(this, tc, \"Commit from \" + originalOffset + \" to \" + committedOffset + \" completed successfully\", this);\n+            } else {\n+                Tr.debug(this, tc, \"Commit from \" + originalOffset + \" to \" + committedOffset + \" failed\", this, exception);\n+            }\n+        }\n+\n+        // Note: Pull out the list of completed work inside the synchronized block\n+        //       but complete the CompletionStage outside the synchronized block\n+        List<CompletedWork> committedWork = new ArrayList<>();\n+        synchronized (completedWork) {\n+            for (Iterator<CompletedWork> i = completedWork.iterator(); i.hasNext();) {\n+                CompletedWork completedWork = i.next();\n+                if (completedWork.offset < originalOffset) {\n+                    continue;\n+                }\n+                if (completedWork.offset >= committedOffset) {\n+                    break;\n+                }\n+                committedWork.add(completedWork);\n+                i.remove();\n+            }\n+        }\n+\n+        if (exception == null) {\n+            for (CompletedWork completedWork : committedWork) {\n+                completedWork.completion.complete(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "originalPosition": 266}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTM3NDEz", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#pullrequestreview-352937413", "createdAt": "2020-02-04T12:28:41Z", "commit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjoyODo0MVrOFlSToA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjoyODo0MVrOFlSToA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0MTU2OA==", "bodyText": "It might never happen (or matter) but... you seem to have code that copes with the same offset being recorded more than once; if that happens should you really increment outstandingUncommittedWork?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#discussion_r374641568", "createdAt": "2020-02-04T12:28:41Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging.kafka/src/com/ibm/ws/microprofile/reactive/messaging/kafka/CommittingPartitionTracker.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.microprofile.reactive.messaging.kafka;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.KafkaAdapterFactory;\n+import com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.OffsetAndMetadata;\n+import com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.TopicPartition;\n+\n+/**\n+ * Tracks the assignment of a partition to this consumer and commits message offsets to that partition\n+ * <p>\n+ * In addition to the function of {@link PartitionTracker}, this class additionally commits message offsets back to the kafka broker in response to a call to\n+ * {@link #recordDone(long, Optional)}.\n+ * <p>\n+ * For performance, each completed record isn't committed immediately. Instead, this class tries to batch up completed records and commit them together. There are several\n+ * parameters that control how often the message offset is committed:\n+ * <ul>\n+ * <li>{@code maxCommitBatchSize}: sets the maximum number of records to wait for before committing the offset</li>\n+ * <li>{@code maxCommitBatchInterval}: sets the maximum time to wait after a {@link #recordDone(long, Optional)} is called before committing the offset</li>\n+ * </ul>\n+ */\n+public class CommittingPartitionTracker extends PartitionTracker {\n+\n+    private static final TraceComponent tc = Tr.register(CommittingPartitionTracker.class);\n+\n+    private final KafkaAdapterFactory factory;\n+    private final ScheduledExecutorService executor;\n+    private final KafkaInput<?, ?> kafkaInput;\n+    private final int maxCommitBatchSize;\n+    private final Duration maxCommitBatchInterval;\n+\n+    /**\n+     * Set of CompletedWork which has either not been committed or has been committed but the commit has not completed yet.\n+     * <p>\n+     * Any access to this must be synchronized\n+     */\n+    private final SortedSet<CompletedWork> completedWork = new TreeSet<>();\n+\n+    /**\n+     * The count of CompletedWork for which a commit has not been started\n+     * <p>\n+     * Any access to this must be synchronized\n+     */\n+    private int outstandingUncommittedWork = 0;\n+\n+    /**\n+     * The last offset for which a commit was started\n+     * <p>\n+     * Any access to this must be synchronized\n+     */\n+    private long committedOffset;\n+\n+    /**\n+     * The currently scheduled task which will attempt to commit completed work or {@code null} if no task has been scheduled.\n+     * <p>\n+     * Any access to this must be synchronized\n+     */\n+    private Future<?> pendingCommitTask = null;\n+\n+    /**\n+     *\n+     * @param topicPartition the partition to track\n+     * @param factory the KafkaAdaptorFactory\n+     * @param kafkaInput the KafkaInput\n+     * @param initialCommittedOffset the position of the reader when the partition was assigned\n+     * @param executor a ScheduledExecutorService\n+     * @param maxCommitBatchSize the maximum number of records to wait for before committing the offset\n+     * @param maxCommitBatchInterval the maximum time to wait after a {@link #recordDone(long, Optional)} is called before committing the offset\n+     */\n+    public CommittingPartitionTracker(TopicPartition topicPartition,\n+                                      KafkaAdapterFactory factory,\n+                                      KafkaInput<?, ?> kafkaInput,\n+                                      long initialCommittedOffset,\n+                                      ScheduledExecutorService executor,\n+                                      int maxCommitBatchSize,\n+                                      Duration maxCommitBatchInterval) {\n+        super(topicPartition);\n+        this.factory = factory;\n+        this.kafkaInput = kafkaInput;\n+        this.executor = executor;\n+        this.committedOffset = initialCommittedOffset;\n+        this.maxCommitBatchSize = maxCommitBatchSize;\n+        this.maxCommitBatchInterval = maxCommitBatchInterval;\n+    }\n+\n+    @Override\n+    public CompletionStage<Void> recordDone(long offset, Optional<Integer> leaderEpoch) {\n+\n+        CompletableFuture<Void> result = new CompletableFuture<>();\n+        synchronized (completedWork) {\n+            completedWork.add(new CompletedWork(offset, leaderEpoch, result));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTM3NjM0", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#pullrequestreview-352937634", "createdAt": "2020-02-04T12:29:04Z", "commit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjoyOTowNFrOFlSUTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMjoyOTowNFrOFlSUTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY0MTc0Mw==", "bodyText": "synchronized on what?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#discussion_r374641743", "createdAt": "2020-02-04T12:29:04Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging.kafka/src/com/ibm/ws/microprofile/reactive/messaging/kafka/CommittingPartitionTracker.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.microprofile.reactive.messaging.kafka;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.KafkaAdapterFactory;\n+import com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.OffsetAndMetadata;\n+import com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.TopicPartition;\n+\n+/**\n+ * Tracks the assignment of a partition to this consumer and commits message offsets to that partition\n+ * <p>\n+ * In addition to the function of {@link PartitionTracker}, this class additionally commits message offsets back to the kafka broker in response to a call to\n+ * {@link #recordDone(long, Optional)}.\n+ * <p>\n+ * For performance, each completed record isn't committed immediately. Instead, this class tries to batch up completed records and commit them together. There are several\n+ * parameters that control how often the message offset is committed:\n+ * <ul>\n+ * <li>{@code maxCommitBatchSize}: sets the maximum number of records to wait for before committing the offset</li>\n+ * <li>{@code maxCommitBatchInterval}: sets the maximum time to wait after a {@link #recordDone(long, Optional)} is called before committing the offset</li>\n+ * </ul>\n+ */\n+public class CommittingPartitionTracker extends PartitionTracker {\n+\n+    private static final TraceComponent tc = Tr.register(CommittingPartitionTracker.class);\n+\n+    private final KafkaAdapterFactory factory;\n+    private final ScheduledExecutorService executor;\n+    private final KafkaInput<?, ?> kafkaInput;\n+    private final int maxCommitBatchSize;\n+    private final Duration maxCommitBatchInterval;\n+\n+    /**\n+     * Set of CompletedWork which has either not been committed or has been committed but the commit has not completed yet.\n+     * <p>\n+     * Any access to this must be synchronized\n+     */\n+    private final SortedSet<CompletedWork> completedWork = new TreeSet<>();\n+\n+    /**\n+     * The count of CompletedWork for which a commit has not been started\n+     * <p>\n+     * Any access to this must be synchronized\n+     */\n+    private int outstandingUncommittedWork = 0;\n+\n+    /**\n+     * The last offset for which a commit was started\n+     * <p>\n+     * Any access to this must be synchronized\n+     */\n+    private long committedOffset;\n+\n+    /**\n+     * The currently scheduled task which will attempt to commit completed work or {@code null} if no task has been scheduled.\n+     * <p>\n+     * Any access to this must be synchronized\n+     */\n+    private Future<?> pendingCommitTask = null;\n+\n+    /**\n+     *\n+     * @param topicPartition the partition to track\n+     * @param factory the KafkaAdaptorFactory\n+     * @param kafkaInput the KafkaInput\n+     * @param initialCommittedOffset the position of the reader when the partition was assigned\n+     * @param executor a ScheduledExecutorService\n+     * @param maxCommitBatchSize the maximum number of records to wait for before committing the offset\n+     * @param maxCommitBatchInterval the maximum time to wait after a {@link #recordDone(long, Optional)} is called before committing the offset\n+     */\n+    public CommittingPartitionTracker(TopicPartition topicPartition,\n+                                      KafkaAdapterFactory factory,\n+                                      KafkaInput<?, ?> kafkaInput,\n+                                      long initialCommittedOffset,\n+                                      ScheduledExecutorService executor,\n+                                      int maxCommitBatchSize,\n+                                      Duration maxCommitBatchInterval) {\n+        super(topicPartition);\n+        this.factory = factory;\n+        this.kafkaInput = kafkaInput;\n+        this.executor = executor;\n+        this.committedOffset = initialCommittedOffset;\n+        this.maxCommitBatchSize = maxCommitBatchSize;\n+        this.maxCommitBatchInterval = maxCommitBatchInterval;\n+    }\n+\n+    @Override\n+    public CompletionStage<Void> recordDone(long offset, Optional<Integer> leaderEpoch) {\n+\n+        CompletableFuture<Void> result = new CompletableFuture<>();\n+        synchronized (completedWork) {\n+            completedWork.add(new CompletedWork(offset, leaderEpoch, result));\n+            outstandingUncommittedWork++;\n+            requestCommit();\n+        }\n+\n+        return result;\n+    }\n+\n+    /**\n+     * Request that done but uncommitted work is committed, either now or in the future\n+     * <p>\n+     * This method will either commit the partition offset now, or schedule it to be done in the future, depending on the values of {@link #maxCommitBatchInterval} and\n+     * {@link #maxCommitBatchSize}.\n+     * <p>\n+     * Calls to this method must be synchronized.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "originalPosition": 128}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTkzOTQ2", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#pullrequestreview-352993946", "createdAt": "2020-02-04T13:59:11Z", "commit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMzo1OToxMVrOFlU8Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMzo1OToxMVrOFlU8Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY4NDc3NQ==", "bodyText": "copyright date", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#discussion_r374684775", "createdAt": "2020-02-04T13:59:11Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging.kafka/src/com/ibm/ws/microprofile/reactive/messaging/kafka/KafkaInput.java", "diffHunk": "@@ -12,11 +12,11 @@\n \n import static com.ibm.websphere.ras.TraceComponent.isAnyTracingEnabled;\n import static java.time.Duration.ZERO;\n-import static org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams.fromIterable;\n \n import java.time.Duration;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.HashMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMTYyNTI2", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#pullrequestreview-353162526", "createdAt": "2020-02-04T17:26:36Z", "commit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzoyNjozN1rOFlc0Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzoyNjozN1rOFlc0Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgxMzczNQ==", "bodyText": "what if isClosed == true?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#discussion_r374813735", "createdAt": "2020-02-04T17:26:37Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging.kafka/src/com/ibm/ws/microprofile/reactive/messaging/kafka/PartitionTracker.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.microprofile.reactive.messaging.kafka;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+\n+import com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.TopicPartition;\n+\n+/**\n+ * Tracks a particular assignment of a partition to this consumer\n+ * <p>\n+ * This class has two important jobs:\n+ * <ul>\n+ * <li>{@link #recordDone(long, Optional)} can be used to create the result of {@link Message#ack()}</li>\n+ * <li>tracks whether this partition has been revoked (available from {@link #isClosed()})</li>\n+ * </ul>\n+ * <p>\n+ * If a partition is revoked and then later reassigned to this consumer, a new {@code PartitionTracker} instance is created to track that assignment.\n+ */\n+public class PartitionTracker {\n+\n+    protected AtomicBoolean isClosed;\n+    protected final TopicPartition topicPartition;\n+\n+    /**\n+     * @param topicPartition the partition to track\n+     */\n+    public PartitionTracker(TopicPartition topicPartition) {\n+        this.topicPartition = topicPartition;\n+        this.isClosed = new AtomicBoolean(false);\n+    }\n+\n+    /**\n+     * Records that the assigned partition has been revoked\n+     */\n+    public void close() {\n+        isClosed.set(true);\n+    }\n+\n+    /**\n+     * Returns whether the assigned partition has been revoked\n+     *\n+     * @return {@code true} if the assigned partition has been revoked\n+     */\n+    public boolean isClosed() {\n+        return isClosed.get();\n+    }\n+\n+    /**\n+     * Record that processing of a record has been completed.\n+     * <p>\n+     * The result of this method can be used as the return value from {@link Message#ack()}\n+     *\n+     * @param offset the record offset\n+     * @param leaderEpoch the record leaderEpoch\n+     * @return a CompletionStage which completes when any associated processing has been completed (e.g. when the message offset has been committed)\n+     */\n+    public CompletionStage<Void> recordDone(long offset, Optional<Integer> leaderEpoch) {\n+        return CompletableFuture.completedFuture(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMTYzMzQ0", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#pullrequestreview-353163344", "createdAt": "2020-02-04T17:27:49Z", "commit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzoyNzo0OVrOFlc2uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzoyNzo0OVrOFlc2uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgxNDM5Mg==", "bodyText": "Does manualCommit = !autoCommit? It's called autoCommit elsewhere, why the inversion?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#discussion_r374814392", "createdAt": "2020-02-04T17:27:49Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging.kafka/src/com/ibm/ws/microprofile/reactive/messaging/kafka/PartitionTrackerFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.microprofile.reactive.messaging.kafka;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+import com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.KafkaAdapterFactory;\n+import com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.TopicPartition;\n+\n+/**\n+ *\n+ */\n+public class PartitionTrackerFactory {\n+\n+    private KafkaAdapterFactory adapterFactory = null;\n+    private ScheduledExecutorService executor = null;\n+    private int commitBatchMaxElements = 500;\n+    private Duration commitBatchMaxInterval = Duration.ofMillis(500);\n+    private boolean manualCommit = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMTY2MjEy", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#pullrequestreview-353166212", "createdAt": "2020-02-04T17:32:03Z", "commit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzozMjowM1rOFlc_dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzozMjowM1rOFlc_dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgxNjYyOQ==", "bodyText": "is there a better name than DUMMY?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#discussion_r374816629", "createdAt": "2020-02-04T17:32:03Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging.kafka/src/com/ibm/ws/microprofile/reactive/messaging/kafka/ThresholdCounter.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.microprofile.reactive.messaging.kafka;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+/**\n+ * A counter which can return a CompletionStage that completes when the counter value drops below a threshold value\n+ */\n+public interface ThresholdCounter {\n+\n+    /**\n+     * Increment the counter\n+     */\n+    void increment();\n+\n+    /**\n+     * Decrement the counter\n+     */\n+    void decrement();\n+\n+    /**\n+     * Returns a completion stage which completes when the counter is less than the threshold value\n+     * <p>\n+     * If the counter is already below the threshold value then a completed completion stage is returned\n+     *\n+     * @return completion stage which completes when the counter is less than the threshold value\n+     */\n+    CompletionStage<Void> waitForBelowThreshold();\n+\n+    ThresholdCounter DUMMY = new ThresholdCounter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMTcxMjMx", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#pullrequestreview-353171231", "createdAt": "2020-02-04T17:39:59Z", "commit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzozOTo1OVrOFldO4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzozOTo1OVrOFldO4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyMDU3OA==", "bodyText": "Why is this file needed? If not need then I think there is another one which can be removed too.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#discussion_r374820578", "createdAt": "2020-02-04T17:39:59Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging_fat/fat/src/com/ibm/ws/microprofile/reactive/messaging/fat/kafka/flatmap/package-info.java", "diffHunk": "@@ -0,0 +1,14 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+/**\n+ *\n+ */\n+package com.ibm.ws.microprofile.reactive.messaging.fat.kafka.flatmap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMTczMDI3", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#pullrequestreview-353173027", "createdAt": "2020-02-04T17:42:50Z", "commit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzo0Mjo1MFrOFldUPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzo0Mjo1MFrOFldUPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyMTk0OA==", "bodyText": "is 2 partitions enough to properly exercise this code?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#discussion_r374821948", "createdAt": "2020-02-04T17:42:50Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging_fat/fat/src/com/ibm/ws/microprofile/reactive/messaging/fat/kafka/partitions/KafkaPartitionTest.java", "diffHunk": "@@ -56,14 +62,20 @@ public static void setup() throws Exception {\n         adminClientProps.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, PlaintextTests.kafkaContainer.getBootstrapServers());\n         AdminClient adminClient = AdminClient.create(adminClientProps);\n \n-        NewTopic newTopic = new NewTopic(PartitionTestReceptionBean.CHANNEL_NAME, 2, (short) 1);\n-        adminClient.createTopics(Collections.singleton(newTopic)).all().get(KafkaTestConstants.DEFAULT_KAFKA_TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n+        List<NewTopic> newTopics = new ArrayList<>();\n+        newTopics.add(new NewTopic(PartitionTestReceptionBean.CHANNEL_NAME, 2, (short) 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMTczNjIx", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#pullrequestreview-353173621", "createdAt": "2020-02-04T17:43:47Z", "commit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzo0Mzo0N1rOFldWDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzo0Mzo0N1rOFldWDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyMjQxMg==", "bodyText": "can you use a constant for the timeouts?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#discussion_r374822412", "createdAt": "2020-02-04T17:43:47Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging_fat/fat/src/com/ibm/ws/microprofile/reactive/messaging/fat/kafka/flatmap/KafkaFlatMapServlet.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.microprofile.reactive.messaging.fat.kafka.flatmap;\n+\n+import static java.time.temporal.ChronoUnit.SECONDS;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+\n+import java.time.Duration;\n+import java.util.List;\n+\n+import javax.servlet.annotation.WebServlet;\n+\n+import org.junit.Test;\n+\n+import com.ibm.ws.microprofile.reactive.messaging.fat.kafka.framework.AbstractKafkaTestServlet;\n+import com.ibm.ws.microprofile.reactive.messaging.fat.kafka.framework.SimpleKafkaReader;\n+import com.ibm.ws.microprofile.reactive.messaging.fat.kafka.framework.SimpleKafkaWriter;\n+\n+/**\n+ *\n+ */\n+@WebServlet(\"/flatMapTest\")\n+public class KafkaFlatMapServlet extends AbstractKafkaTestServlet {\n+\n+    /**  */\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final String IN_TOPIC = \"flat-map-in\";\n+    public static final String OUT_TOPIC = \"flat-map-out\";\n+    public static final String APP_GROUPID = \"KafkaFlatMapTest-group\";\n+\n+    @Test\n+    public void testFlatMap() throws InterruptedException {\n+        SimpleKafkaWriter<String> writer = kafkaTestClient.writerFor(IN_TOPIC);\n+        SimpleKafkaReader<String> reader = kafkaTestClient.readerFor(OUT_TOPIC);\n+\n+        long offset = kafkaTestClient.getTopicOffset(IN_TOPIC, APP_GROUPID);\n+\n+        writer.sendMessage(\"abc\");\n+        writer.sendMessage(\"abcd\");\n+        writer.sendMessage(\"abcde\");\n+        writer.sendMessage(\"abcdef\");\n+\n+        List<String> messages = reader.waitForMessages(2, Duration.of(10, SECONDS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMTc0MzI2", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#pullrequestreview-353174326", "createdAt": "2020-02-04T17:44:54Z", "commit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzo0NDo1NFrOFldYBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzo0NDo1NFrOFldYBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyMjkxOQ==", "bodyText": "Can you use a constant for the number of partitions?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#discussion_r374822919", "createdAt": "2020-02-04T17:44:54Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging_fat/fat/src/com/ibm/ws/microprofile/reactive/messaging/fat/kafka/partitions/LivePartitionTestBean.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.microprofile.reactive.messaging.fat.kafka.partitions;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.eclipse.microprofile.reactive.messaging.Acknowledgment;\n+import org.eclipse.microprofile.reactive.messaging.Acknowledgment.Strategy;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+\n+/**\n+ *\n+ */\n+@ApplicationScoped\n+public class LivePartitionTestBean {\n+\n+    public static final String CHANNEL_IN = \"live-partition-test-in\";\n+    public static final int WORK_TIME = 100;\n+    public static final int FINAL_MESSAGE_NUMBER = 9999;\n+\n+    ArrayList<ReceivedMessage> messages = new ArrayList<>();\n+    private final CountDownLatch paritionsFinished = new CountDownLatch(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMTc0NjM0", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#pullrequestreview-353174634", "createdAt": "2020-02-04T17:45:24Z", "commit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzo0NToyNVrOFldY8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzo0NToyNVrOFldY8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyMzE1NQ==", "bodyText": "timeout constant ... based on the number of partitions??", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#discussion_r374823155", "createdAt": "2020-02-04T17:45:25Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging_fat/fat/src/com/ibm/ws/microprofile/reactive/messaging/fat/kafka/partitions/LivePartitionTestBean.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.microprofile.reactive.messaging.fat.kafka.partitions;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.eclipse.microprofile.reactive.messaging.Acknowledgment;\n+import org.eclipse.microprofile.reactive.messaging.Acknowledgment.Strategy;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+\n+/**\n+ *\n+ */\n+@ApplicationScoped\n+public class LivePartitionTestBean {\n+\n+    public static final String CHANNEL_IN = \"live-partition-test-in\";\n+    public static final int WORK_TIME = 100;\n+    public static final int FINAL_MESSAGE_NUMBER = 9999;\n+\n+    ArrayList<ReceivedMessage> messages = new ArrayList<>();\n+    private final CountDownLatch paritionsFinished = new CountDownLatch(2);\n+\n+    @Incoming(CHANNEL_IN)\n+    @Acknowledgment(Strategy.MANUAL)\n+    public CompletionStage<Void> receive(Message<String> message) throws InterruptedException {\n+\n+        Thread.sleep(WORK_TIME);\n+\n+        ReceivedMessage status = new ReceivedMessage(message.getPayload());\n+        messages.add(status);\n+        System.out.println(\"Bean received message \" + message.getPayload());\n+\n+        message.ack().handle((r, t) -> {\n+            if (t == null) {\n+                status.ackStatus.set(AckStatus.ACK_SUCCESS);\n+                if (status.number == FINAL_MESSAGE_NUMBER) {\n+                    paritionsFinished.countDown();\n+                }\n+            } else {\n+                status.ackStatus.set(AckStatus.ACK_FAILED);\n+            }\n+            return null;\n+        });\n+\n+        return CompletableFuture.completedFuture(null);\n+    }\n+\n+    public void awaitFinish() throws InterruptedException {\n+        assertTrue(\"Test bean did not process all messages within 30 seconds\", paritionsFinished.await(30, TimeUnit.SECONDS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMTc1NTcy", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#pullrequestreview-353175572", "createdAt": "2020-02-04T17:46:54Z", "commit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzo0Njo1NFrOFldb2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzo0Njo1NFrOFldb2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyMzg5OA==", "bodyText": "number of messages in a constant?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#discussion_r374823898", "createdAt": "2020-02-04T17:46:54Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging_fat/fat/src/com/ibm/ws/microprofile/reactive/messaging/fat/kafka/partitions/LivePartitionTestConsumer.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.microprofile.reactive.messaging.fat.kafka.partitions;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.clients.consumer.OffsetAndMetadata;\n+import org.apache.kafka.common.TopicPartition;\n+\n+/**\n+ * Consumer which joins the topic, consumes and commits five messages and then closes\n+ */\n+public class LivePartitionTestConsumer implements Runnable {\n+\n+    private final Map<String, Object> config;\n+    private final String topic;\n+    private final List<String> messagesRecieved;\n+    private final long MAX_DURATION = Duration.ofSeconds(5).toNanos();\n+\n+    public LivePartitionTestConsumer(Map<String, Object> config, String topic) {\n+        this.config = new HashMap<>(config);\n+        this.config.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, \"false\");\n+        this.topic = topic;\n+        this.messagesRecieved = new ArrayList<>();\n+    }\n+\n+    @Override\n+    public void run() {\n+        try (KafkaConsumer<?, String> consumer = new KafkaConsumer<>(config)) {\n+            consumer.subscribe(Collections.singleton(topic));\n+            ConsumerRecord<?, String> lastRecord = null;\n+\n+            int messages = 0;\n+            long startTime = System.nanoTime();\n+            while (messages < 5 && System.nanoTime() - startTime < MAX_DURATION) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMTc2MDY0", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#pullrequestreview-353176064", "createdAt": "2020-02-04T17:47:47Z", "commit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzo0Nzo0N1rOFlddSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzo0Nzo0N1rOFlddSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyNDI2Nw==", "bodyText": "constant?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#discussion_r374824267", "createdAt": "2020-02-04T17:47:47Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging_fat/fat/src/com/ibm/ws/microprofile/reactive/messaging/fat/kafka/partitions/LivePartitionTestServlet.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.microprofile.reactive.messaging.fat.kafka.partitions;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.not;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import javax.annotation.Resource;\n+import javax.enterprise.concurrent.ManagedExecutorService;\n+import javax.inject.Inject;\n+import javax.servlet.annotation.WebServlet;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.junit.Test;\n+\n+import com.ibm.ws.microprofile.reactive.messaging.fat.kafka.framework.AbstractKafkaTestServlet;\n+import com.ibm.ws.microprofile.reactive.messaging.fat.kafka.partitions.LivePartitionTestBean.AckStatus;\n+import com.ibm.ws.microprofile.reactive.messaging.fat.kafka.partitions.LivePartitionTestBean.ReceivedMessage;\n+\n+/**\n+ * Tests partition rebalancing in something more akin to a live environment\n+ * <p>\n+ * In particular, we want to test rebalancing while the application is actively processing messages to ensure that none are lost and they're handled correctly.\n+ */\n+@WebServlet(\"/LivePartitionTest\")\n+public class LivePartitionTestServlet extends AbstractKafkaTestServlet {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final String APP_GROUPID = \"kafka-live-partition-test-group\";\n+\n+    @Resource\n+    private ManagedExecutorService executor;\n+\n+    @Inject\n+    private LivePartitionTestBean bean;\n+\n+    @Test\n+    public void testLivePartitionAssignment() throws Exception {\n+\n+        List<String> sentMessages = new ArrayList<>();\n+\n+        Map<String, Object> producerConfig = new HashMap<>();\n+        producerConfig.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, getKafkaBootstrap());\n+        producerConfig.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n+        producerConfig.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n+\n+        // Load messages into topic\n+        try (KafkaProducer<String, String> producer = new KafkaProducer<>(producerConfig)) {\n+            for (int partition = 0; partition < 2; partition++) {\n+                for (int message = 0; message < 100; message++) {\n+                    String value = partition + \"-\" + message;\n+                    ProducerRecord<String, String> record = new ProducerRecord<String, String>(LivePartitionTestBean.CHANNEL_IN, partition, null, value);\n+                    producer.send(record);\n+                    sentMessages.add(value);\n+                }\n+\n+                // Add a sentinal message to the end of each partition\n+                String value = partition + \"-\" + LivePartitionTestBean.FINAL_MESSAGE_NUMBER;\n+                ProducerRecord<String, String> record = new ProducerRecord<String, String>(LivePartitionTestBean.CHANNEL_IN, partition, null, value);\n+                producer.send(record);\n+                sentMessages.add(value);\n+            }\n+        }\n+\n+        Map<String, Object> consumerConfig = new HashMap<>();\n+        consumerConfig.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, getKafkaBootstrap());\n+        consumerConfig.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n+        consumerConfig.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n+        consumerConfig.put(ConsumerConfig.GROUP_ID_CONFIG, APP_GROUPID);\n+\n+        // Sleep\n+        Thread.sleep(700);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMTc3MTk2", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#pullrequestreview-353177196", "createdAt": "2020-02-04T17:49:35Z", "commit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzo0OTozNVrOFldgwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzo0OTozNVrOFldgwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyNTE1Mg==", "bodyText": "Can this class be unit-tested?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#discussion_r374825152", "createdAt": "2020-02-04T17:49:35Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging.kafka/src/com/ibm/ws/microprofile/reactive/messaging/kafka/ThresholdCounterImpl.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.microprofile.reactive.messaging.kafka;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+\n+/**\n+ *\n+ */\n+public class ThresholdCounterImpl implements ThresholdCounter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNzI3NjUy", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#pullrequestreview-353727652", "createdAt": "2020-02-05T13:50:31Z", "commit": {"oid": "7519959b43f01e7cdd1c0a70af9baf272d798a02"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bda77bc1d2da4bbbe1766eb9db6fc13bbc78551b", "author": {"user": {"login": "Azquelt", "name": "Andrew Rouse"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/bda77bc1d2da4bbbe1766eb9db6fc13bbc78551b", "committedDate": "2020-02-06T16:37:59Z", "message": "Partition test review changes"}, "afterCommit": {"oid": "a1a1cb842597586fa06760b976825ebe8254bdfe", "author": {"user": {"login": "Azquelt", "name": "Andrew Rouse"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/a1a1cb842597586fa06760b976825ebe8254bdfe", "committedDate": "2020-02-06T17:49:00Z", "message": "Partition test review changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MTU4NTEy", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#pullrequestreview-355158512", "createdAt": "2020-02-07T13:36:11Z", "commit": {"oid": "a1a1cb842597586fa06760b976825ebe8254bdfe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzozNjoxMVrOFm9K7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzozNjoxMVrOFm9K7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5MjQyOQ==", "bodyText": "use default timeout", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#discussion_r376392429", "createdAt": "2020-02-07T13:36:11Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging_fat/fat/src/com/ibm/ws/microprofile/reactive/messaging/fat/kafka/partitions/LivePartitionTestConsumer.java", "diffHunk": "@@ -49,17 +54,17 @@ public void run() {\n \n             int messages = 0;\n             long startTime = System.nanoTime();\n-            while (messages < 5 && System.nanoTime() - startTime < MAX_DURATION) {\n+            while (messages < MESSAGES_TO_CONSUME && System.nanoTime() - startTime < MAX_DURATION) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1a1cb842597586fa06760b976825ebe8254bdfe"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "633124625792c6fd2e9e4342880453c5f6d270a7", "author": {"user": {"login": "Azquelt", "name": "Andrew Rouse"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/633124625792c6fd2e9e4342880453c5f6d270a7", "committedDate": "2020-02-07T13:44:19Z", "message": "Switch LivePartitionTestConsumer to use default timeout"}, "afterCommit": {"oid": "0127339896f86b79543048a6d44484f12d0ac528", "author": {"user": {"login": "Azquelt", "name": "Andrew Rouse"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/0127339896f86b79543048a6d44484f12d0ac528", "committedDate": "2020-02-10T14:41:40Z", "message": "Change test to acknowledge messages asynchronously"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20d77031ec9ec915637a041eb47d190beb1dfb5f", "author": {"user": {"login": "Azquelt", "name": "Andrew Rouse"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/20d77031ec9ec915637a041eb47d190beb1dfb5f", "committedDate": "2020-02-10T17:42:48Z", "message": "Kafka connector redesign\n\nRedesign the Kafka connector slightly to give a stronger pairing between\na message and the partition tracker associated with it. This prevents\nconfusion when a partition is unassigned and then reassigned.\n\nAvoid emitting messages if the partition those messages came from has\nsince been unassigned (and therefore an attempt to commit the partition\noffset would fail)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d143aa10cffc8af43227b0f1b25e0ca894b2967", "author": {"user": {"login": "Azquelt", "name": "Andrew Rouse"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/6d143aa10cffc8af43227b0f1b25e0ca894b2967", "committedDate": "2020-02-10T17:42:48Z", "message": "Add test for flatmap\n\nNot really related to the Kafka connector work, but a good test\nnonetheless and is an example of when messages might be acknowledged out\nof order."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb1d19ce82588446cd568bcf57882dd0648e8652", "author": {"user": {"login": "Azquelt", "name": "Andrew Rouse"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/cb1d19ce82588446cd568bcf57882dd0648e8652", "committedDate": "2020-02-10T17:42:49Z", "message": "Add \"live\" partition test for Kafka connector\n\nThis test simulates consumers joining and leaving the consumer group.\n\nIt then ensures that we have consumed messages validly (messages are\nconsumed in order, messages are committed in order, each message is\ncommitted successfully exactly once, no messages are lost)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0195423e4235e213330e93e1f6a85d86e139ff3b", "author": {"user": {"login": "Azquelt", "name": "Andrew Rouse"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/0195423e4235e213330e93e1f6a85d86e139ff3b", "committedDate": "2020-02-10T17:42:49Z", "message": "Update test to acknowledge messages asynchronously"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2059225cecba8a157a74f0282b392e9527855276", "author": {"user": {"login": "Azquelt", "name": "Andrew Rouse"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/2059225cecba8a157a74f0282b392e9527855276", "committedDate": "2020-02-10T17:42:49Z", "message": "Remove TODO from TrackedMessage\n\nWe now have a dedicated KafkaMessage but it doesn't have visibility of\nthe connector internals."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ad208a6f9153037e0c2386d83a3df614fdc6361", "author": {"user": {"login": "Azquelt", "name": "Andrew Rouse"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/3ad208a6f9153037e0c2386d83a3df614fdc6361", "committedDate": "2020-02-10T17:42:49Z", "message": "Commit completed work when partition is revoked"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0127339896f86b79543048a6d44484f12d0ac528", "author": {"user": {"login": "Azquelt", "name": "Andrew Rouse"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/0127339896f86b79543048a6d44484f12d0ac528", "committedDate": "2020-02-10T14:41:40Z", "message": "Change test to acknowledge messages asynchronously"}, "afterCommit": {"oid": "3ad208a6f9153037e0c2386d83a3df614fdc6361", "author": {"user": {"login": "Azquelt", "name": "Andrew Rouse"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/3ad208a6f9153037e0c2386d83a3df614fdc6361", "committedDate": "2020-02-10T17:42:49Z", "message": "Commit completed work when partition is revoked"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NjAwNDg5", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#pullrequestreview-356600489", "createdAt": "2020-02-11T11:59:17Z", "commit": {"oid": "3ad208a6f9153037e0c2386d83a3df614fdc6361"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29b10801f723d218c86de4fb6b68c544f1719ee5", "author": {"user": {"login": "Azquelt", "name": "Andrew Rouse"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/29b10801f723d218c86de4fb6b68c544f1719ee5", "committedDate": "2020-02-13T11:54:42Z", "message": "Harden exception handling in Kafka connector"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MDUyOTA1", "url": "https://github.com/OpenLiberty/open-liberty/pull/10698#pullrequestreview-359052905", "createdAt": "2020-02-14T16:12:37Z", "commit": {"oid": "29b10801f723d218c86de4fb6b68c544f1719ee5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3318, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}