{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4MDgzNDMy", "number": 13775, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDo0Mzo0MFrOEir7yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDo0Mzo0MFrOEir7yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODA2ODU4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.grpc_fat/fat/src/com/ibm/ws/fat/grpc/ClientHeaderPropagationTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMDo0Mzo0MFrOHQtTyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMjoyNjowMFrOHQ_0xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI4MTYwOA==", "bodyText": "There's a commong setServerconfig now in the grpcUtils class for all the tests to use.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13775#discussion_r487281608", "createdAt": "2020-09-11T20:43:40Z", "author": {"login": "loriadi"}, "path": "dev/com.ibm.ws.grpc_fat/fat/src/com/ibm/ws/fat/grpc/ClientHeaderPropagationTests.java", "diffHunk": "@@ -0,0 +1,319 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.fat.grpc;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.logging.Logger;\n+\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.gargoylesoftware.htmlunit.WebClient;\n+import com.gargoylesoftware.htmlunit.html.HtmlForm;\n+import com.gargoylesoftware.htmlunit.html.HtmlPage;\n+import com.gargoylesoftware.htmlunit.html.HtmlSubmitInput;\n+import com.gargoylesoftware.htmlunit.html.HtmlTextInput;\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.FATServletClient;\n+\n+/**\n+ * the flow should look like this:\n+ * 1. set <grpcTarget target=\"match\" headersToPropagate=\"testHeader\"/>\n+ * 2. make a request to some servlet like HelloWorldClientServlet which will do some\n+ * outbound grpc call. Make sure to set a header testHeader=testValue on this initial request.\n+ * 3. verify that testHeader is included with the grpc request that\u2019s made to the\n+ * test grpc service. The easiest way to do this will be to create a server interceptor\n+ * that implements interceptCall(), which will give you easy access to the metadata (headers)\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class ClientHeaderPropagationTests extends FATServletClient {\n+\n+    protected static final Class<?> c = ClientHeaderPropagationTests.class;\n+    private static final Logger LOG = Logger.getLogger(c.getName());\n+    private static final Set<String> appName = Collections.singleton(\"HelloWorldClient\");\n+    private static final Set<String> appName_srv = Collections.singleton(\"HelloWorldService\");\n+    private static final String DEFAULT_CONFIG_FILE = \"grpc.server.xml\";\n+    private static final String GRPCTARGET_HTP_MATCH = \"grpc.client.htp.match.server.xml\";\n+    private static final String GRPCTARGET_HTP_MULTIMATCH = \"grpc.client.htp.multimatch.server.xml\";\n+    private static final String GRPCTARGET_HTP_NOMATCH = \"grpc.client.htp.nomatch.server.xml\";\n+    private static String serverConfigurationFile = DEFAULT_CONFIG_FILE;\n+    private static final int SHORT_TIMEOUT = 500; // .5 seconds\n+\n+    @Server(\"GrpcServer\")\n+    public static LibertyServer GrpcServer;\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+        LOG.info(\"ClientHeaderPropagationTests : setUp() : add HelloWorldClient and HelloWorldService apps to the server\");\n+        ShrinkHelper.defaultDropinApp(GrpcServer, \"HelloWorldClient.war\",\n+                                      \"com.ibm.ws.grpc.fat.helloworld.client\",\n+                                      \"io.grpc.examples.helloworld\");\n+\n+        // Drop in the server app, same server\n+        ShrinkHelper.defaultDropinApp(GrpcServer, \"HelloWorldService.war\",\n+                                      \"com.ibm.ws.grpc.fat.helloworld.service\",\n+                                      \"io.grpc.examples.helloworld\");\n+\n+        LOG.info(\"ClientHeaderPropagationTests : setUp() : start the grpc server\");\n+        GrpcServer.startServer(ClientHeaderPropagationTests.class.getSimpleName() + \".server.log\");\n+    }\n+\n+    @Rule\n+    public TestName name = new TestName();\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n+        // Stop the server\n+        if (GrpcServer != null && GrpcServer.isStarted()) {\n+            GrpcServer.stopServer();\n+        }\n+    }\n+\n+    /**\n+     * test no match in headersToPropagate\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testNoHeaderMatches() throws Exception {\n+        LOG.info(\"ClientHeaderPropagationTests : testNoHeaderMatches() : test no match in headersToPropagate.\");\n+\n+        // First set a config with a <grpcTarget> that wouldn't match a header\n+        setServerConfiguration(GrpcServer, GRPCTARGET_HTP_NOMATCH);\n+        GrpcServer.waitForConfigUpdateInLogUsingMark(appName_srv);\n+\n+        String contextRoot = \"HelloWorldClient\";\n+        try (WebClient webClient = new WebClient()) {\n+\n+            // Construct the URL for the test\n+            URL url = GrpcTestUtils.createHttpUrl(GrpcServer, contextRoot, \"grpcClient\");\n+            HtmlPage page = (HtmlPage) webClient.getPage(url);\n+\n+            webClient.addRequestHeader(\"testHeader\", \"123\");\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            Log.info(c, name.getMethodName(), page.asXml());\n+\n+            assertTrue(\"the servlet was not loaded correctly\",\n+                       page.asText().contains(\"gRPC helloworld client example\"));\n+\n+            HtmlForm form = page.getFormByName(\"form1\");\n+\n+            // set a name in the form, which we'll expect the RPC to return\n+            HtmlTextInput inputText = (HtmlTextInput) form.getInputByName(\"user\");\n+            inputText.setValueAttribute(\"us3r1\");\n+\n+            // set the port of the grpcserver in the form\n+            HtmlTextInput inputPort = (HtmlTextInput) form.getInputByName(\"port\");\n+            inputPort.setValueAttribute(String.valueOf(GrpcServer.getHttpDefaultPort()));\n+\n+            // set the hostname of the gprcserver in the form\n+            HtmlTextInput inputHost = (HtmlTextInput) form.getInputByName(\"address\");\n+            inputHost.setValueAttribute(GrpcServer.getHostname());\n+\n+            // submit to the grpcClient, and execute the RPC\n+            HtmlSubmitInput submitButton = form.getInputByName(\"submit\");\n+            page = submitButton.click();\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            assertTrue(\"the gRPC request did not complete correctly\", page.asText().contains(\"us3r1\"));\n+\n+            //Make sure the Interceptor was called to verify match\n+            String interceptorHasRun = GrpcServer.waitForStringInLog(\"com.ibm.ws.grpc.fat.helloworld.service.HelloWorldServerInterceptor3 has been invoked!\",\n+                                                                     SHORT_TIMEOUT);\n+            if (interceptorHasRun == null) {\n+                Assert.fail(c + \": server.xml with <grpcTarget> element: no interceptor ran when it should have in \" + SHORT_TIMEOUT + \"ms\");\n+            }\n+\n+            //Make sure the testHeader is not displayed by the Interceptor\n+            String headerFound = GrpcServer.verifyStringNotInLogUsingMark(\"testHeader=123\", SHORT_TIMEOUT);\n+            if (headerFound != null) {\n+                Assert.fail(c + \": testHeader found in nomatch case when it should not have\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * test a single match in headersToPropagate\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testSingleHeaderMatch() throws Exception {\n+        LOG.info(\"ClientHeaderPropagationTests : testSingleHeaderMatch() : test a single match in headersToPropagate.\");\n+\n+        // First set a config with a <grpcTarget> that matches a header\n+        setServerConfiguration(GrpcServer, GRPCTARGET_HTP_MATCH);\n+        GrpcServer.waitForConfigUpdateInLogUsingMark(appName);\n+\n+        String contextRoot = \"HelloWorldClient\";\n+        try (WebClient webClient = new WebClient()) {\n+\n+            // Construct the URL for the test\n+            URL url = GrpcTestUtils.createHttpUrl(GrpcServer, contextRoot, \"grpcClient\");\n+            HtmlPage page = (HtmlPage) webClient.getPage(url);\n+\n+            webClient.addRequestHeader(\"testHeader\", \"123\");\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            Log.info(c, name.getMethodName(), page.asXml());\n+\n+            assertTrue(\"the servlet was not loaded correctly\",\n+                       page.asText().contains(\"gRPC helloworld client example\"));\n+\n+            HtmlForm form = page.getFormByName(\"form1\");\n+\n+            // set a name in the form, which we'll expect the RPC to return\n+            HtmlTextInput inputText = (HtmlTextInput) form.getInputByName(\"user\");\n+            inputText.setValueAttribute(\"us3r1\");\n+\n+            // set the port of the grpcserver in the form\n+            HtmlTextInput inputPort = (HtmlTextInput) form.getInputByName(\"port\");\n+            inputPort.setValueAttribute(String.valueOf(GrpcServer.getHttpDefaultPort()));\n+\n+            // set the hostname of the gprcserver in the form\n+            HtmlTextInput inputHost = (HtmlTextInput) form.getInputByName(\"address\");\n+            inputHost.setValueAttribute(GrpcServer.getHostname());\n+\n+            // submit to the grpcClient, and execute the RPC\n+            HtmlSubmitInput submitButton = form.getInputByName(\"submit\");\n+            page = submitButton.click();\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            assertTrue(\"the gRPC request did not complete correctly\", page.asText().contains(\"us3r1\"));\n+\n+            //Make sure the Interceptor was called to verify match\n+            String interceptorHasRun = GrpcServer.waitForStringInLog(\"com.ibm.ws.grpc.fat.helloworld.service.HelloWorldServerInterceptor3 has been invoked!\",\n+                                                                     SHORT_TIMEOUT);\n+            if (interceptorHasRun == null) {\n+                Assert.fail(c + \": server.xml with <grpcTarget> element: no interceptor ran when it should have in \" + SHORT_TIMEOUT + \"ms\");\n+            }\n+\n+            // make sure expected header was found\n+            String headerFound = GrpcServer.waitForStringInLog(\"testHeader=123\", SHORT_TIMEOUT);\n+            if (headerFound == null) {\n+                Assert.fail(c + \": testHeader=123 not found when it should have in \" + SHORT_TIMEOUT + \"ms\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * test multiple matches in headersToPropagate\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testMultipleHeaderMatches() throws Exception {\n+        LOG.info(\"ClientHeaderPropagationTests : testMultipleHeaderMatches() : test multiple matches in headersToPropagate.\");\n+\n+        // First set a config with a <grpcTarget> that matches a header\n+        setServerConfiguration(GrpcServer, GRPCTARGET_HTP_MULTIMATCH);\n+        GrpcServer.waitForConfigUpdateInLogUsingMark(appName);\n+\n+        String contextRoot = \"HelloWorldClient\";\n+        try (WebClient webClient = new WebClient()) {\n+\n+            // Construct the URL for the test\n+            URL url = GrpcTestUtils.createHttpUrl(GrpcServer, contextRoot, \"grpcClient\");\n+            HtmlPage page = (HtmlPage) webClient.getPage(url);\n+\n+            webClient.addRequestHeader(\"testHeader\", \"123\");\n+            webClient.addRequestHeader(\"testHeader1\", \"456\");\n+            webClient.addRequestHeader(\"testHeader2\", \"789\");\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            Log.info(c, name.getMethodName(), page.asXml());\n+\n+            assertTrue(\"the servlet was not loaded correctly\",\n+                       page.asText().contains(\"gRPC helloworld client example\"));\n+\n+            HtmlForm form = page.getFormByName(\"form1\");\n+\n+            // set a name in the form, which we'll expect the RPC to return\n+            HtmlTextInput inputText = (HtmlTextInput) form.getInputByName(\"user\");\n+            inputText.setValueAttribute(\"us3r1\");\n+\n+            // set the port of the grpcserver in the form\n+            HtmlTextInput inputPort = (HtmlTextInput) form.getInputByName(\"port\");\n+            inputPort.setValueAttribute(String.valueOf(GrpcServer.getHttpDefaultPort()));\n+\n+            // set the hostname of the gprcserver in the form\n+            HtmlTextInput inputHost = (HtmlTextInput) form.getInputByName(\"address\");\n+            inputHost.setValueAttribute(GrpcServer.getHostname());\n+\n+            // submit to the grpcClient, and execute the RPC\n+            HtmlSubmitInput submitButton = form.getInputByName(\"submit\");\n+            page = submitButton.click();\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            assertTrue(\"the gRPC request did not complete correctly\", page.asText().contains(\"us3r1\"));\n+\n+            //Make sure the Interceptor was called to verify match\n+            String interceptorHasRun = GrpcServer.waitForStringInLog(\"com.ibm.ws.grpc.fat.helloworld.service.HelloWorldServerInterceptor3 has been invoked!\",\n+                                                                     SHORT_TIMEOUT);\n+            if (interceptorHasRun == null) {\n+                Assert.fail(c + \": server.xml with <grpcTarget> element: no interceptor ran when it should have in \" + SHORT_TIMEOUT + \"ms\");\n+            }\n+\n+            // make sure expected headers were found\n+            String headerFound = GrpcServer.waitForStringInLog(\"testHeader1=456,testHeader2=789\", SHORT_TIMEOUT);\n+            if (headerFound == null) {\n+                Assert.fail(c + \": testHeader1 or testHeader2 not found when it should have in \" + SHORT_TIMEOUT + \"ms\");\n+            }\n+            //Make sure the testHeader is not displayed by the Interceptor\n+            headerFound = GrpcServer.verifyStringNotInLogUsingMark(\"testHeader=123\", SHORT_TIMEOUT);\n+            if (headerFound != null) {\n+                Assert.fail(c + \": testHeader found when it should not have\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * This method is used to set the server.xml\n+     *\n+     * @throws Exception\n+     */\n+    private static void setServerConfiguration(LibertyServer server,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b9d9f6a48ffb9cfd3f3846dcdba59706b7a373a"}, "originalPosition": 307}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4NDk2NA==", "bodyText": "change to use GrpcTestUtils.setServerConfiguration", "url": "https://github.com/OpenLiberty/open-liberty/pull/13775#discussion_r487584964", "createdAt": "2020-09-13T22:26:00Z", "author": {"login": "epj"}, "path": "dev/com.ibm.ws.grpc_fat/fat/src/com/ibm/ws/fat/grpc/ClientHeaderPropagationTests.java", "diffHunk": "@@ -0,0 +1,319 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.fat.grpc;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.logging.Logger;\n+\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.gargoylesoftware.htmlunit.WebClient;\n+import com.gargoylesoftware.htmlunit.html.HtmlForm;\n+import com.gargoylesoftware.htmlunit.html.HtmlPage;\n+import com.gargoylesoftware.htmlunit.html.HtmlSubmitInput;\n+import com.gargoylesoftware.htmlunit.html.HtmlTextInput;\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.FATServletClient;\n+\n+/**\n+ * the flow should look like this:\n+ * 1. set <grpcTarget target=\"match\" headersToPropagate=\"testHeader\"/>\n+ * 2. make a request to some servlet like HelloWorldClientServlet which will do some\n+ * outbound grpc call. Make sure to set a header testHeader=testValue on this initial request.\n+ * 3. verify that testHeader is included with the grpc request that\u2019s made to the\n+ * test grpc service. The easiest way to do this will be to create a server interceptor\n+ * that implements interceptCall(), which will give you easy access to the metadata (headers)\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class ClientHeaderPropagationTests extends FATServletClient {\n+\n+    protected static final Class<?> c = ClientHeaderPropagationTests.class;\n+    private static final Logger LOG = Logger.getLogger(c.getName());\n+    private static final Set<String> appName = Collections.singleton(\"HelloWorldClient\");\n+    private static final Set<String> appName_srv = Collections.singleton(\"HelloWorldService\");\n+    private static final String DEFAULT_CONFIG_FILE = \"grpc.server.xml\";\n+    private static final String GRPCTARGET_HTP_MATCH = \"grpc.client.htp.match.server.xml\";\n+    private static final String GRPCTARGET_HTP_MULTIMATCH = \"grpc.client.htp.multimatch.server.xml\";\n+    private static final String GRPCTARGET_HTP_NOMATCH = \"grpc.client.htp.nomatch.server.xml\";\n+    private static String serverConfigurationFile = DEFAULT_CONFIG_FILE;\n+    private static final int SHORT_TIMEOUT = 500; // .5 seconds\n+\n+    @Server(\"GrpcServer\")\n+    public static LibertyServer GrpcServer;\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+        LOG.info(\"ClientHeaderPropagationTests : setUp() : add HelloWorldClient and HelloWorldService apps to the server\");\n+        ShrinkHelper.defaultDropinApp(GrpcServer, \"HelloWorldClient.war\",\n+                                      \"com.ibm.ws.grpc.fat.helloworld.client\",\n+                                      \"io.grpc.examples.helloworld\");\n+\n+        // Drop in the server app, same server\n+        ShrinkHelper.defaultDropinApp(GrpcServer, \"HelloWorldService.war\",\n+                                      \"com.ibm.ws.grpc.fat.helloworld.service\",\n+                                      \"io.grpc.examples.helloworld\");\n+\n+        LOG.info(\"ClientHeaderPropagationTests : setUp() : start the grpc server\");\n+        GrpcServer.startServer(ClientHeaderPropagationTests.class.getSimpleName() + \".server.log\");\n+    }\n+\n+    @Rule\n+    public TestName name = new TestName();\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n+        // Stop the server\n+        if (GrpcServer != null && GrpcServer.isStarted()) {\n+            GrpcServer.stopServer();\n+        }\n+    }\n+\n+    /**\n+     * test no match in headersToPropagate\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testNoHeaderMatches() throws Exception {\n+        LOG.info(\"ClientHeaderPropagationTests : testNoHeaderMatches() : test no match in headersToPropagate.\");\n+\n+        // First set a config with a <grpcTarget> that wouldn't match a header\n+        setServerConfiguration(GrpcServer, GRPCTARGET_HTP_NOMATCH);\n+        GrpcServer.waitForConfigUpdateInLogUsingMark(appName_srv);\n+\n+        String contextRoot = \"HelloWorldClient\";\n+        try (WebClient webClient = new WebClient()) {\n+\n+            // Construct the URL for the test\n+            URL url = GrpcTestUtils.createHttpUrl(GrpcServer, contextRoot, \"grpcClient\");\n+            HtmlPage page = (HtmlPage) webClient.getPage(url);\n+\n+            webClient.addRequestHeader(\"testHeader\", \"123\");\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            Log.info(c, name.getMethodName(), page.asXml());\n+\n+            assertTrue(\"the servlet was not loaded correctly\",\n+                       page.asText().contains(\"gRPC helloworld client example\"));\n+\n+            HtmlForm form = page.getFormByName(\"form1\");\n+\n+            // set a name in the form, which we'll expect the RPC to return\n+            HtmlTextInput inputText = (HtmlTextInput) form.getInputByName(\"user\");\n+            inputText.setValueAttribute(\"us3r1\");\n+\n+            // set the port of the grpcserver in the form\n+            HtmlTextInput inputPort = (HtmlTextInput) form.getInputByName(\"port\");\n+            inputPort.setValueAttribute(String.valueOf(GrpcServer.getHttpDefaultPort()));\n+\n+            // set the hostname of the gprcserver in the form\n+            HtmlTextInput inputHost = (HtmlTextInput) form.getInputByName(\"address\");\n+            inputHost.setValueAttribute(GrpcServer.getHostname());\n+\n+            // submit to the grpcClient, and execute the RPC\n+            HtmlSubmitInput submitButton = form.getInputByName(\"submit\");\n+            page = submitButton.click();\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            assertTrue(\"the gRPC request did not complete correctly\", page.asText().contains(\"us3r1\"));\n+\n+            //Make sure the Interceptor was called to verify match\n+            String interceptorHasRun = GrpcServer.waitForStringInLog(\"com.ibm.ws.grpc.fat.helloworld.service.HelloWorldServerInterceptor3 has been invoked!\",\n+                                                                     SHORT_TIMEOUT);\n+            if (interceptorHasRun == null) {\n+                Assert.fail(c + \": server.xml with <grpcTarget> element: no interceptor ran when it should have in \" + SHORT_TIMEOUT + \"ms\");\n+            }\n+\n+            //Make sure the testHeader is not displayed by the Interceptor\n+            String headerFound = GrpcServer.verifyStringNotInLogUsingMark(\"testHeader=123\", SHORT_TIMEOUT);\n+            if (headerFound != null) {\n+                Assert.fail(c + \": testHeader found in nomatch case when it should not have\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * test a single match in headersToPropagate\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testSingleHeaderMatch() throws Exception {\n+        LOG.info(\"ClientHeaderPropagationTests : testSingleHeaderMatch() : test a single match in headersToPropagate.\");\n+\n+        // First set a config with a <grpcTarget> that matches a header\n+        setServerConfiguration(GrpcServer, GRPCTARGET_HTP_MATCH);\n+        GrpcServer.waitForConfigUpdateInLogUsingMark(appName);\n+\n+        String contextRoot = \"HelloWorldClient\";\n+        try (WebClient webClient = new WebClient()) {\n+\n+            // Construct the URL for the test\n+            URL url = GrpcTestUtils.createHttpUrl(GrpcServer, contextRoot, \"grpcClient\");\n+            HtmlPage page = (HtmlPage) webClient.getPage(url);\n+\n+            webClient.addRequestHeader(\"testHeader\", \"123\");\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            Log.info(c, name.getMethodName(), page.asXml());\n+\n+            assertTrue(\"the servlet was not loaded correctly\",\n+                       page.asText().contains(\"gRPC helloworld client example\"));\n+\n+            HtmlForm form = page.getFormByName(\"form1\");\n+\n+            // set a name in the form, which we'll expect the RPC to return\n+            HtmlTextInput inputText = (HtmlTextInput) form.getInputByName(\"user\");\n+            inputText.setValueAttribute(\"us3r1\");\n+\n+            // set the port of the grpcserver in the form\n+            HtmlTextInput inputPort = (HtmlTextInput) form.getInputByName(\"port\");\n+            inputPort.setValueAttribute(String.valueOf(GrpcServer.getHttpDefaultPort()));\n+\n+            // set the hostname of the gprcserver in the form\n+            HtmlTextInput inputHost = (HtmlTextInput) form.getInputByName(\"address\");\n+            inputHost.setValueAttribute(GrpcServer.getHostname());\n+\n+            // submit to the grpcClient, and execute the RPC\n+            HtmlSubmitInput submitButton = form.getInputByName(\"submit\");\n+            page = submitButton.click();\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            assertTrue(\"the gRPC request did not complete correctly\", page.asText().contains(\"us3r1\"));\n+\n+            //Make sure the Interceptor was called to verify match\n+            String interceptorHasRun = GrpcServer.waitForStringInLog(\"com.ibm.ws.grpc.fat.helloworld.service.HelloWorldServerInterceptor3 has been invoked!\",\n+                                                                     SHORT_TIMEOUT);\n+            if (interceptorHasRun == null) {\n+                Assert.fail(c + \": server.xml with <grpcTarget> element: no interceptor ran when it should have in \" + SHORT_TIMEOUT + \"ms\");\n+            }\n+\n+            // make sure expected header was found\n+            String headerFound = GrpcServer.waitForStringInLog(\"testHeader=123\", SHORT_TIMEOUT);\n+            if (headerFound == null) {\n+                Assert.fail(c + \": testHeader=123 not found when it should have in \" + SHORT_TIMEOUT + \"ms\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * test multiple matches in headersToPropagate\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testMultipleHeaderMatches() throws Exception {\n+        LOG.info(\"ClientHeaderPropagationTests : testMultipleHeaderMatches() : test multiple matches in headersToPropagate.\");\n+\n+        // First set a config with a <grpcTarget> that matches a header\n+        setServerConfiguration(GrpcServer, GRPCTARGET_HTP_MULTIMATCH);\n+        GrpcServer.waitForConfigUpdateInLogUsingMark(appName);\n+\n+        String contextRoot = \"HelloWorldClient\";\n+        try (WebClient webClient = new WebClient()) {\n+\n+            // Construct the URL for the test\n+            URL url = GrpcTestUtils.createHttpUrl(GrpcServer, contextRoot, \"grpcClient\");\n+            HtmlPage page = (HtmlPage) webClient.getPage(url);\n+\n+            webClient.addRequestHeader(\"testHeader\", \"123\");\n+            webClient.addRequestHeader(\"testHeader1\", \"456\");\n+            webClient.addRequestHeader(\"testHeader2\", \"789\");\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            Log.info(c, name.getMethodName(), page.asXml());\n+\n+            assertTrue(\"the servlet was not loaded correctly\",\n+                       page.asText().contains(\"gRPC helloworld client example\"));\n+\n+            HtmlForm form = page.getFormByName(\"form1\");\n+\n+            // set a name in the form, which we'll expect the RPC to return\n+            HtmlTextInput inputText = (HtmlTextInput) form.getInputByName(\"user\");\n+            inputText.setValueAttribute(\"us3r1\");\n+\n+            // set the port of the grpcserver in the form\n+            HtmlTextInput inputPort = (HtmlTextInput) form.getInputByName(\"port\");\n+            inputPort.setValueAttribute(String.valueOf(GrpcServer.getHttpDefaultPort()));\n+\n+            // set the hostname of the gprcserver in the form\n+            HtmlTextInput inputHost = (HtmlTextInput) form.getInputByName(\"address\");\n+            inputHost.setValueAttribute(GrpcServer.getHostname());\n+\n+            // submit to the grpcClient, and execute the RPC\n+            HtmlSubmitInput submitButton = form.getInputByName(\"submit\");\n+            page = submitButton.click();\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            assertTrue(\"the gRPC request did not complete correctly\", page.asText().contains(\"us3r1\"));\n+\n+            //Make sure the Interceptor was called to verify match\n+            String interceptorHasRun = GrpcServer.waitForStringInLog(\"com.ibm.ws.grpc.fat.helloworld.service.HelloWorldServerInterceptor3 has been invoked!\",\n+                                                                     SHORT_TIMEOUT);\n+            if (interceptorHasRun == null) {\n+                Assert.fail(c + \": server.xml with <grpcTarget> element: no interceptor ran when it should have in \" + SHORT_TIMEOUT + \"ms\");\n+            }\n+\n+            // make sure expected headers were found\n+            String headerFound = GrpcServer.waitForStringInLog(\"testHeader1=456,testHeader2=789\", SHORT_TIMEOUT);\n+            if (headerFound == null) {\n+                Assert.fail(c + \": testHeader1 or testHeader2 not found when it should have in \" + SHORT_TIMEOUT + \"ms\");\n+            }\n+            //Make sure the testHeader is not displayed by the Interceptor\n+            headerFound = GrpcServer.verifyStringNotInLogUsingMark(\"testHeader=123\", SHORT_TIMEOUT);\n+            if (headerFound != null) {\n+                Assert.fail(c + \": testHeader found when it should not have\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * This method is used to set the server.xml\n+     *\n+     * @throws Exception\n+     */\n+    private static void setServerConfiguration(LibertyServer server,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI4MTYwOA=="}, "originalCommit": {"oid": "3b9d9f6a48ffb9cfd3f3846dcdba59706b7a373a"}, "originalPosition": 307}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2857, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}