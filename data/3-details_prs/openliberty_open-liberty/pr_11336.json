{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NDQzNzM4", "number": 11336, "title": "Improving timeout message for TCK FATs", "bodyText": "In relation to #11335", "createdAt": "2020-03-16T19:06:12Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/11336", "merged": true, "mergeCommit": {"oid": "5ea284f4f334b4aab4cd70a3b8579cc3502e581d"}, "closed": true, "closedAt": "2020-03-23T14:33:04Z", "author": {"login": "lamkavan"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOS7tgAH2gAyMzg5NDQzNzM4OjAyYWRlMWNjNGJlN2Y1MjQ4OGFlNmY0N2QwZGFhMzQ4NGQzZjQ0ZmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPkgVngFqTM3ODcwNjQwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "02ade1cc4be7f52488ae6f47d0daa3484d3f44ff", "author": {"user": null}, "url": "https://github.com/OpenLiberty/open-liberty/commit/02ade1cc4be7f52488ae6f47d0daa3484d3f44ff", "committedDate": "2020-03-16T19:04:32Z", "message": "Draft 1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NTE1NTY0", "url": "https://github.com/OpenLiberty/open-liberty/pull/11336#pullrequestreview-375515564", "createdAt": "2020-03-16T19:16:59Z", "commit": {"oid": "02ade1cc4be7f52488ae6f47d0daa3484d3f44ff"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOToxNzowMFrOF3ChsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOToyMTowNFrOF3Co_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI1NzM5Mw==", "bodyText": "is fat.timeout always guaranteed to be set? May want to default to some high number if unset", "url": "https://github.com/OpenLiberty/open-liberty/pull/11336#discussion_r393257393", "createdAt": "2020-03-16T19:17:00Z", "author": {"login": "aguibert"}, "path": "dev/fattest.simplicity/src/componenttest/topology/utils/MvnUtils.java", "diffHunk": "@@ -979,14 +980,64 @@ public static int runCmd(String[] cmd, File workingDirectory, File outputFile) t\n         pb.redirectErrorStream(true);\n \n         Log.info(c, \"runCmd\", \"Running command \" + Arrays.asList(cmd));\n+\n+        int hardTimeout = Integer.parseInt(System.getProperty(\"fat.timeout\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02ade1cc4be7f52488ae6f47d0daa3484d3f44ff"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI1NzQ0Nw==", "bodyText": "this line can be removed", "url": "https://github.com/OpenLiberty/open-liberty/pull/11336#discussion_r393257447", "createdAt": "2020-03-16T19:17:07Z", "author": {"login": "aguibert"}, "path": "dev/fattest.simplicity/src/componenttest/topology/utils/MvnUtils.java", "diffHunk": "@@ -979,14 +980,64 @@ public static int runCmd(String[] cmd, File workingDirectory, File outputFile) t\n         pb.redirectErrorStream(true);\n \n         Log.info(c, \"runCmd\", \"Running command \" + Arrays.asList(cmd));\n+\n+        int hardTimeout = Integer.parseInt(System.getProperty(\"fat.timeout\"));\n+        long softTimeout = -1;\n+        long startTime = System.currentTimeMillis();\n+\n+        // We need to ensure that the hard timeout is large enough to avoid future issues\n+        if (hardTimeout >= 30000) {\n+            softTimeout = hardTimeout - 10000; // Soft timeout is 10 seconds less than hard timeout\n+            //softTimeout = 1000;   //ONLY FOR TESTING REMOVE THIS LINE WHEN COMPLETE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02ade1cc4be7f52488ae6f47d0daa3484d3f44ff"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI1OTI2MA==", "bodyText": "Instead of this code, we can use p.waitFor(long timeout, TimeUnit units) which was introduced in Java 8. Now that we no longer have to support Java 7 we can use this new java 8 method. If p.waitFor(long,TimeUnit) returns false (i.e. the timeout was reached) then we can report a failure and IIRC the relevant logs will be automatically included", "url": "https://github.com/OpenLiberty/open-liberty/pull/11336#discussion_r393259260", "createdAt": "2020-03-16T19:21:04Z", "author": {"login": "aguibert"}, "path": "dev/fattest.simplicity/src/componenttest/topology/utils/MvnUtils.java", "diffHunk": "@@ -979,14 +980,64 @@ public static int runCmd(String[] cmd, File workingDirectory, File outputFile) t\n         pb.redirectErrorStream(true);\n \n         Log.info(c, \"runCmd\", \"Running command \" + Arrays.asList(cmd));\n+\n+        int hardTimeout = Integer.parseInt(System.getProperty(\"fat.timeout\"));\n+        long softTimeout = -1;\n+        long startTime = System.currentTimeMillis();\n+\n+        // We need to ensure that the hard timeout is large enough to avoid future issues\n+        if (hardTimeout >= 30000) {\n+            softTimeout = hardTimeout - 10000; // Soft timeout is 10 seconds less than hard timeout\n+            //softTimeout = 1000;   //ONLY FOR TESTING REMOVE THIS LINE WHEN COMPLETE\n+        }\n+\n         Process p = pb.start();\n-        int exitCode = p.waitFor();\n+        int exitCode = -1;\n+        if (softTimeout > -1) {\n+            boolean exitStatus = false;\n+            boolean softTimeOutFailed = false;\n+            while (!exitStatus) {\n+                try {\n+                    exitCode = p.exitValue();\n+                    exitStatus = true;\n+                } catch (IllegalThreadStateException e) {\n+                    if ((System.currentTimeMillis() - startTime > softTimeout) && !softTimeOutFailed) {\n+                        // Parse through the MVN logs for potential networking issues\n+                        if (outputFile.exists() && outputFile.canRead()) {\n+                            try (Scanner s = new Scanner(outputFile)) {\n+                                // Get the last two lines from the MVN log\n+                                String lastLine = \"\";\n+                                String secondLastLine = \"\"; \n+                                while (s.hasNextLine()) {\n+                                    secondLastLine = lastLine;\n+                                    lastLine = s.nextLine().toLowerCase();\n+                                }\n+                                // Check if the last or second line has the text \"downloading\" or \"downloaded\"\n+                                // Throw custom timeout error rather then the one provided by the JUnitTask\n+                                if ((lastLine.contains(\"downloaded\") || lastLine.contains(\"downloading\")) || (secondLastLine.contains(\"downloaded\") || secondLastLine.contains(\"downloading\"))) {       \n+                                    String timeoutMsg = \"Timeout occurred. FAT timeout set to: \" + System.getProperty(\"fat.timeout\") + \n+                                                    \". It appears there were some issues gathering dependencies. This may be due to network issues such as slow download speeds.\";\n+                                    Log.info(c, \"runCmd\", timeoutMsg);\n+                                    throw new AssertionFailedError(timeoutMsg);\n+                                }\n+                                softTimeOutFailed = true;\n+                            } catch (FileNotFoundException FileError) {\n+                                // Do nothing as we can't look at the MVN log. This leads to hard timeout handled by JUnitTask.\n+                                softTimeOutFailed = true;\n+                            }\n+                        }\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02ade1cc4be7f52488ae6f47d0daa3484d3f44ff"}, "originalPosition": 285}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1c66a128a5288a18155e8447a7cd280481c4786", "author": {"user": null}, "url": "https://github.com/OpenLiberty/open-liberty/commit/b1c66a128a5288a18155e8447a7cd280481c4786", "committedDate": "2020-03-19T16:18:17Z", "message": "Intercept TCK FAT timeout to display better messages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5de5d2d4ed4b392a004006a7565b0e8395b1b2f5", "author": {"user": null}, "url": "https://github.com/OpenLiberty/open-liberty/commit/5de5d2d4ed4b392a004006a7565b0e8395b1b2f5", "committedDate": "2020-03-19T16:20:35Z", "message": "Intercept TCK FAT timeout to display better messages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14af1e47091f36df659033ea3409c5251a9d2a67", "author": {"user": null}, "url": "https://github.com/OpenLiberty/open-liberty/commit/14af1e47091f36df659033ea3409c5251a9d2a67", "committedDate": "2020-03-19T16:29:43Z", "message": "Intercept TCK FAT timeout to display better messages"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3ODk0Mjgy", "url": "https://github.com/OpenLiberty/open-liberty/pull/11336#pullrequestreview-377894282", "createdAt": "2020-03-19T16:34:57Z", "commit": {"oid": "14af1e47091f36df659033ea3409c5251a9d2a67"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjozNDo1N1rOF42xWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjo0Mzo1NFrOF43KDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE2MTk0Ng==", "bodyText": "instead of catching an exception here you can use System.getProperty(\"fat.timeout\", \"10800000\") where the 2nd param is the default value if no sys prop is found", "url": "https://github.com/OpenLiberty/open-liberty/pull/11336#discussion_r395161946", "createdAt": "2020-03-19T16:34:57Z", "author": {"login": "aguibert"}, "path": "dev/fattest.simplicity/src/componenttest/topology/utils/MvnUtils.java", "diffHunk": "@@ -979,12 +981,64 @@ public static int runCmd(String[] cmd, File workingDirectory, File outputFile) t\n         pb.redirectErrorStream(true);\n \n         Log.info(c, \"runCmd\", \"Running command \" + Arrays.asList(cmd));\n-        Process p = pb.start();\n-        int exitCode = p.waitFor();\n-        return exitCode;\n+        \n+        int hardTimeout;\n+        \n+        try {\n+            hardTimeout = Integer.parseInt(System.getProperty(\"fat.timeout\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14af1e47091f36df659033ea3409c5251a9d2a67"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE2NTkyMw==", "bodyText": "Lets just include the last 5-10 lines of the output file no matter what, instead of special casing it for the last lines containing certain words.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11336#discussion_r395165923", "createdAt": "2020-03-19T16:40:31Z", "author": {"login": "aguibert"}, "path": "dev/fattest.simplicity/src/componenttest/topology/utils/MvnUtils.java", "diffHunk": "@@ -979,12 +981,64 @@ public static int runCmd(String[] cmd, File workingDirectory, File outputFile) t\n         pb.redirectErrorStream(true);\n \n         Log.info(c, \"runCmd\", \"Running command \" + Arrays.asList(cmd));\n-        Process p = pb.start();\n-        int exitCode = p.waitFor();\n-        return exitCode;\n+        \n+        int hardTimeout;\n+        \n+        try {\n+            hardTimeout = Integer.parseInt(System.getProperty(\"fat.timeout\"));\n+        }catch (NumberFormatException e) {\n+            hardTimeout = 10800000;  // 10800000ms = 3hr\n+        }\n+        \n+        long softTimeout = -1;\n \n+        // We need to ensure that the hard timeout is large enough to avoid future issues\n+        if (hardTimeout >= 30000) {\n+            softTimeout = hardTimeout - 15000; // Soft timeout is 15 seconds less than hard timeout\n+        }\n+\n+        Process p = pb.start();\n+        int returnCode = 1;\n+        boolean returnStatus;\n+        if (softTimeout > -1) {\n+            returnStatus = p.waitFor(softTimeout, TimeUnit.MILLISECONDS);  // Requires Java 8+\n+            if (returnStatus == false) {\n+                // Parse through the MVN logs for potential networking issues\n+                if (outputFile.exists() && outputFile.canRead()) {\n+                    try (Scanner s = new Scanner(outputFile)) {\n+                        // Get the last two lines from the MVN log\n+                        String lastLine = \"\";\n+                        String secondLastLine = \"\"; \n+                        while (s.hasNextLine()) {\n+                            secondLastLine = lastLine;\n+                            lastLine = s.nextLine().toLowerCase();\n+                        }\n+                        // Check if the last or second line has the text \"downloading\" or \"downloaded\"\n+                        // Throw custom timeout error rather then the one provided by the JUnitTask\n+                        if ((lastLine.contains(\"downloaded\") || lastLine.contains(\"downloading\")) || (secondLastLine.contains(\"downloaded\") || secondLastLine.contains(\"downloading\"))) {       \n+                            String timeoutMsg = \"Timeout occurred. FAT timeout set to: \" + hardTimeout + \n+                                                \". It appears there were some issues gathering dependencies. This may be due to network issues such as slow download speeds.\";\n+                            Log.info(c, \"runCmd\", timeoutMsg);  // Log the timeout message into messages.log or the default log \n+                            throw new AssertionFailedError(timeoutMsg);\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14af1e47091f36df659033ea3409c5251a9d2a67"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE2ODI3MA==", "bodyText": "I think we should remove this line and just let the test blow up with the soft timeout regardless of what keywords were found in the last few lines of the output", "url": "https://github.com/OpenLiberty/open-liberty/pull/11336#discussion_r395168270", "createdAt": "2020-03-19T16:43:54Z", "author": {"login": "aguibert"}, "path": "dev/fattest.simplicity/src/componenttest/topology/utils/MvnUtils.java", "diffHunk": "@@ -979,12 +981,64 @@ public static int runCmd(String[] cmd, File workingDirectory, File outputFile) t\n         pb.redirectErrorStream(true);\n \n         Log.info(c, \"runCmd\", \"Running command \" + Arrays.asList(cmd));\n-        Process p = pb.start();\n-        int exitCode = p.waitFor();\n-        return exitCode;\n+        \n+        int hardTimeout;\n+        \n+        try {\n+            hardTimeout = Integer.parseInt(System.getProperty(\"fat.timeout\"));\n+        }catch (NumberFormatException e) {\n+            hardTimeout = 10800000;  // 10800000ms = 3hr\n+        }\n+        \n+        long softTimeout = -1;\n \n+        // We need to ensure that the hard timeout is large enough to avoid future issues\n+        if (hardTimeout >= 30000) {\n+            softTimeout = hardTimeout - 15000; // Soft timeout is 15 seconds less than hard timeout\n+        }\n+\n+        Process p = pb.start();\n+        int returnCode = 1;\n+        boolean returnStatus;\n+        if (softTimeout > -1) {\n+            returnStatus = p.waitFor(softTimeout, TimeUnit.MILLISECONDS);  // Requires Java 8+\n+            if (returnStatus == false) {\n+                // Parse through the MVN logs for potential networking issues\n+                if (outputFile.exists() && outputFile.canRead()) {\n+                    try (Scanner s = new Scanner(outputFile)) {\n+                        // Get the last two lines from the MVN log\n+                        String lastLine = \"\";\n+                        String secondLastLine = \"\"; \n+                        while (s.hasNextLine()) {\n+                            secondLastLine = lastLine;\n+                            lastLine = s.nextLine().toLowerCase();\n+                        }\n+                        // Check if the last or second line has the text \"downloading\" or \"downloaded\"\n+                        // Throw custom timeout error rather then the one provided by the JUnitTask\n+                        if ((lastLine.contains(\"downloaded\") || lastLine.contains(\"downloading\")) || (secondLastLine.contains(\"downloaded\") || secondLastLine.contains(\"downloading\"))) {       \n+                            String timeoutMsg = \"Timeout occurred. FAT timeout set to: \" + hardTimeout + \n+                                                \". It appears there were some issues gathering dependencies. This may be due to network issues such as slow download speeds.\";\n+                            Log.info(c, \"runCmd\", timeoutMsg);  // Log the timeout message into messages.log or the default log \n+                            throw new AssertionFailedError(timeoutMsg);\n+                        }\n+                    } catch (FileNotFoundException FileError) {\n+                        // Do nothing as we can't look at the MVN log. This leads to hard timeout handled by JUnitTask.\n+                    }\n+                }\n+                // If the timeout is not for a reason we checked above then return to normal behavior and let it timeout through the Junit Task\n+                returnCode = p.waitFor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14af1e47091f36df659033ea3409c5251a9d2a67"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "101a4b1f839bf9a4699f56206122892a30273494", "author": {"user": null}, "url": "https://github.com/OpenLiberty/open-liberty/commit/101a4b1f839bf9a4699f56206122892a30273494", "committedDate": "2020-03-19T19:47:19Z", "message": "Intercept TCK FAT timeout to display better messages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be4d726373c9d1819d38f5060cc0b3d3d728aa3e", "author": {"user": null}, "url": "https://github.com/OpenLiberty/open-liberty/commit/be4d726373c9d1819d38f5060cc0b3d3d728aa3e", "committedDate": "2020-03-19T19:52:29Z", "message": "Intercept TCK FAT timeout to display better messages"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NjA0ODEw", "url": "https://github.com/OpenLiberty/open-liberty/pull/11336#pullrequestreview-378604810", "createdAt": "2020-03-20T15:53:20Z", "commit": {"oid": "be4d726373c9d1819d38f5060cc0b3d3d728aa3e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNTo1MzoyMFrOF5ZdDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNTo1MzoyMFrOF5ZdDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMDE5MA==", "bodyText": "does each line of mvn output have a \\n char at the end already?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11336#discussion_r395730190", "createdAt": "2020-03-20T15:53:20Z", "author": {"login": "aguibert"}, "path": "dev/fattest.simplicity/src/componenttest/topology/utils/MvnUtils.java", "diffHunk": "@@ -979,10 +981,67 @@ public static int runCmd(String[] cmd, File workingDirectory, File outputFile) t\n         pb.redirectErrorStream(true);\n \n         Log.info(c, \"runCmd\", \"Running command \" + Arrays.asList(cmd));\n-        Process p = pb.start();\n-        int exitCode = p.waitFor();\n-        return exitCode;\n+        \n+        int  hardTimeout = Integer.parseInt(System.getProperty(\"fat.timeout\", \"10800000\"));\n+        long softTimeout = -1;\n+\n+        // We need to ensure that the hard timeout is large enough to avoid future issues\n+        if (hardTimeout >= 30000) {\n+            softTimeout = hardTimeout - 15000; // Soft timeout is 15 seconds less than hard timeout\n+        }\n \n+        Process p = pb.start();\n+        int returnCode = 1;\n+        boolean returnStatus;\n+        if (softTimeout > -1) {\n+            returnStatus = p.waitFor(softTimeout, TimeUnit.MILLISECONDS);  // Requires Java 8+\n+            if (returnStatus == false) {\n+                // Parse through the mvn logs\n+                if (outputFile.exists() && outputFile.canRead()) {\n+                    try (Scanner s = new Scanner(outputFile)) {\n+                        // Get the last few lines from the MVN log\n+                        ArrayList<String> lastLines = new ArrayList<String>();\n+                        int numOfLinesToInclude = 7;  // We will include the last 7 lines of the output file in the timeout message\n+                        while (s.hasNextLine()) {\n+                            if (lastLines.size() < numOfLinesToInclude) {\n+                                lastLines.add(s.nextLine());\n+                            } else {\n+                                lastLines.remove(0);\n+                                lastLines.add(s.nextLine());\n+                            }\n+                        }\n+                        \n+                        // Prepare the timeout message\n+                        String timeoutMsg = \"Timeout occurred. FAT timeout set to: \" + hardTimeout + \"ms (soft timeout set to \" + softTimeout + \"ms). The last \" +\n+                                            numOfLinesToInclude + \" lines from the mvn logs are as follows:\\n\";\n+                        for (String line : lastLines) {\n+                            timeoutMsg += line + \"\\n\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be4d726373c9d1819d38f5060cc0b3d3d728aa3e"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NzA2NDA4", "url": "https://github.com/OpenLiberty/open-liberty/pull/11336#pullrequestreview-378706408", "createdAt": "2020-03-20T18:06:51Z", "commit": {"oid": "be4d726373c9d1819d38f5060cc0b3d3d728aa3e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2940, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}