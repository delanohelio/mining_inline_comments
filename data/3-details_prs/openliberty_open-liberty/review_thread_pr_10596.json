{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NjE1NzMx", "number": 10596, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOToxNTo0MlrODa_fHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOToxNTo0N1rODa_fNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjI5NzI3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOToxNTo0MlrOFiOS7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOToxNTo0MlrOFiOS7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQzMDEyNg==", "bodyText": "Singleton does seem convenient for restricting the table setup, but I think there may be other consequences for timers with respect to locking, so we need to ensure that is really what we want.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10596#discussion_r371430126", "createdAt": "2020-01-27T19:15:42Z", "author": {"login": "njr-11"}, "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java", "diffHunk": "@@ -33,7 +33,7 @@\n  * This class uses the @Schedule annotation.\n  * Using this annotation will start the timer immediately on start and will run every 30 seconds.\n  */\n-@Stateless\n+@Singleton //Ensure only one instance of this Timer is ever created.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1559907462f2ddff374fe3901da26205da1dfea4"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjI5NzUxOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOToxNTo0N1rOFiOTEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOToxNTo0N1rOFiOTEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQzMDE2Mg==", "bodyText": "I don't see why we should suppress this error.  If something goes wrong, we should let the test fail and report the problem.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10596#discussion_r371430162", "createdAt": "2020-01-27T19:15:47Z", "author": {"login": "njr-11"}, "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java", "diffHunk": "@@ -88,30 +88,54 @@ private void initTable() throws SQLException {\n             DatabaseMetaData md = conn.getMetaData();\n             ResultSet rs = md.getTables(null, null, \"AUTOMATICDATABASE\", null);\n             while (rs.next()) {\n-                if (rs.getString(\"TABLE_NAME\").equalsIgnoreCase(\"AUTOMATICDATABASE\"))\n+                if (rs.getString(\"TABLE_NAME\").equalsIgnoreCase(\"AUTOMATICDATABASE\")) {\n+                    System.out.println(\"Found table AUTOMATICDATABASE. Skipping creation.\");\n                     return;\n+                }\n             }\n \n             //If not, create it.\n             try (Statement stmt = conn.createStatement()) {\n                 stmt.execute(createTable);\n-            }\n+            } //Let initTableAndRow catch error\n+\n+            System.out.println(\"Created table AUTOMATICDATABASE\");\n         }\n     }\n \n     private void initRow() throws SQLException {\n+        final String checkRow = \"SELECT COUNT(*) FROM AUTOMATICDATABASE WHERE name = ?\";\n         final String createRow = \"INSERT INTO AUTOMATICDATABASE VALUES(?,?)\";\n \n         //create count\n         count = 0;\n \n         try (Connection conn = ds.getConnection()) {\n+            //See if row already exists\n+            try (PreparedStatement pstmt = conn.prepareStatement(checkRow)) {\n+                pstmt.setString(1, name);\n+                ResultSet rs = pstmt.executeQuery();\n+                //If the count of rows is more than 0 then set this true.\n+                //Otherwise, set to false when row is not found, or 0 is returned as a result.\n+                boolean exists = rs.next() ? rs.getInt(1) > 0 : false;\n+                if (exists) {\n+                    System.out.println(\"Found row identified by \" + name + \" in table AUTOMATICDATABASE.  Skipping creation.\");\n+                    return;\n+                }\n+            } catch (SQLException sqle) {\n+                System.out.println(\"Caught exception attempting to find row identified by \" + name + \" in table AUTOMATICDATABASE.\"\n+                                   + \" Continuing on to attempt to create row.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1559907462f2ddff374fe3901da26205da1dfea4"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2171, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}