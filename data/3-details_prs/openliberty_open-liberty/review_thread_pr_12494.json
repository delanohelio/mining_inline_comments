{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3ODgzMzAw", "number": 12494, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNTo1NToxN1rOECoJSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNTo1NToxN1rOECoJSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTkwMzQ0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.security.jwtsso_fat/fat/src/com/ibm/ws/security/jwtsso/fat/ConfigAttributeTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNTo1NToxN1rOGfMyhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzo1NDo0MVrOGfRUMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM2ODU4MQ==", "bodyText": "It might strengthen the checks here to also add\nexpectations.addExpectations(CommonExpectations.cookieDoesNotExist(currentAction, webClient, JwtFatConstants.JWT_COOKIE_NAME));\nto ensure the default JWT cookie also doesn't show up.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12494#discussion_r435368581", "createdAt": "2020-06-04T15:55:17Z", "author": {"login": "ayoho"}, "path": "dev/com.ibm.ws.security.jwtsso_fat/fat/src/com/ibm/ws/security/jwtsso/fat/ConfigAttributeTests.java", "diffHunk": "@@ -107,6 +107,198 @@ public void test_cookieName_includeLtpa() throws Exception {\n         validationUtils.validateResult(response, currentAction, expectations);\n     }\n \n+    \n+    /**\n+     * Tests Config: \n+     *  - <jwtSso disableJwtCookie=\"true\" includeLtpaCookie=\"true\" useLtpaIfJwtAbsent=\"true\" setCookieSecureFlag=\"false\"/>\n+     * Expects:\n+     *  - JWT cookie is not found in the response, but the ltpa cookie is found.\n+     */\n+    @Test\n+    public void test_disableJwtCookie_true_includeLtpaCookie_true() throws Exception {\n+        server.reconfigureServerUsingExpandedConfiguration(_testName, \"server_disableJwtCookie_true_includeLtpa_true.xml\");\n+\n+        String currentAction = TestActions.ACTION_INVOKE_PROTECTED_RESOURCE;\n+        Page response = actions.invokeUrl(_testName, webClient, protectedUrl);\n+        Expectations expectations = new Expectations();\n+        \n+        currentAction = disableJwtCookie_test_base(currentAction, response, expectations);\n+        \n+        expectations.addExpectations(CommonExpectations.cookieDoesNotExist(currentAction, webClient, JwtFatConstants.JWT_COOKIE_NAME));\n+        expectations.addExpectations(CommonExpectations.ltpaCookieExists(currentAction, webClient));\n+\n+        response = actions.doFormLogin(response, defaultUser, defaultPassword);\n+        validationUtils.validateResult(response, currentAction, expectations);\n+    }\n+    \n+    /**\n+     * This helper method sets the action and expectations common across disableJwtCookie tests\n+     */\n+    private String disableJwtCookie_test_base(String currentAction, Page response, Expectations expectations) throws Exception {\n+        expectations.addExpectations(CommonExpectations.successfullyReachedLoginPage(currentAction));\n+        \n+        validationUtils.validateResult(response, currentAction, expectations);\n+\n+        currentAction = TestActions.ACTION_SUBMIT_LOGIN_CREDENTIALS;\n+        \n+        expectations.addExpectations(CommonExpectations.successfullyReachedUrl(currentAction, protectedUrl));\n+        expectations.addExpectations(CommonExpectations.getJwtPrincipalExpectations(currentAction, defaultUser, JwtFatConstants.DEFAULT_ISS_REGEX));\n+        \n+        return currentAction;\n+    }\n+    \n+    /**\n+     * Tests Config:\n+     *  - <jwtSso disableJwtCookie=\"true\" includeLtpaCookie=\"true\" useLtpaIfJwtAbsent=\"true\" cookieName=\"AdamsJwtCookie\" setCookieSecureFlag=\"false\"/>\n+     * Expects:\n+     *  - JWT cookie is not found in the response, but the ltpa cookie is found.\n+     */\n+    @Test\n+    public void test_disableJwtCookie_true_includeLtpaCookie_true_differentJwtCookieName() throws Exception {\n+        server.reconfigureServerUsingExpandedConfiguration(_testName, \"server_disableJwtCookie_true_differentJwtCookieName_includeLtpa_true.xml\");\n+\n+        String jwtCookieName = \"AdamsJwtCookie\";\n+\n+        String currentAction = TestActions.ACTION_INVOKE_PROTECTED_RESOURCE;\n+        Page response = actions.invokeUrl(_testName, webClient, protectedUrl);\n+        Expectations expectations = new Expectations();\n+        \n+        currentAction = disableJwtCookie_test_base(currentAction, response, expectations);\n+        \n+        expectations.addExpectations(CommonExpectations.cookieDoesNotExist(currentAction, webClient, jwtCookieName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def38d8c426ecd61906796b55f937a083351f898"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ0MjczOQ==", "bodyText": "I agree, I'll add that in", "url": "https://github.com/OpenLiberty/open-liberty/pull/12494#discussion_r435442739", "createdAt": "2020-06-04T17:54:41Z", "author": {"login": "Zech-Hein"}, "path": "dev/com.ibm.ws.security.jwtsso_fat/fat/src/com/ibm/ws/security/jwtsso/fat/ConfigAttributeTests.java", "diffHunk": "@@ -107,6 +107,198 @@ public void test_cookieName_includeLtpa() throws Exception {\n         validationUtils.validateResult(response, currentAction, expectations);\n     }\n \n+    \n+    /**\n+     * Tests Config: \n+     *  - <jwtSso disableJwtCookie=\"true\" includeLtpaCookie=\"true\" useLtpaIfJwtAbsent=\"true\" setCookieSecureFlag=\"false\"/>\n+     * Expects:\n+     *  - JWT cookie is not found in the response, but the ltpa cookie is found.\n+     */\n+    @Test\n+    public void test_disableJwtCookie_true_includeLtpaCookie_true() throws Exception {\n+        server.reconfigureServerUsingExpandedConfiguration(_testName, \"server_disableJwtCookie_true_includeLtpa_true.xml\");\n+\n+        String currentAction = TestActions.ACTION_INVOKE_PROTECTED_RESOURCE;\n+        Page response = actions.invokeUrl(_testName, webClient, protectedUrl);\n+        Expectations expectations = new Expectations();\n+        \n+        currentAction = disableJwtCookie_test_base(currentAction, response, expectations);\n+        \n+        expectations.addExpectations(CommonExpectations.cookieDoesNotExist(currentAction, webClient, JwtFatConstants.JWT_COOKIE_NAME));\n+        expectations.addExpectations(CommonExpectations.ltpaCookieExists(currentAction, webClient));\n+\n+        response = actions.doFormLogin(response, defaultUser, defaultPassword);\n+        validationUtils.validateResult(response, currentAction, expectations);\n+    }\n+    \n+    /**\n+     * This helper method sets the action and expectations common across disableJwtCookie tests\n+     */\n+    private String disableJwtCookie_test_base(String currentAction, Page response, Expectations expectations) throws Exception {\n+        expectations.addExpectations(CommonExpectations.successfullyReachedLoginPage(currentAction));\n+        \n+        validationUtils.validateResult(response, currentAction, expectations);\n+\n+        currentAction = TestActions.ACTION_SUBMIT_LOGIN_CREDENTIALS;\n+        \n+        expectations.addExpectations(CommonExpectations.successfullyReachedUrl(currentAction, protectedUrl));\n+        expectations.addExpectations(CommonExpectations.getJwtPrincipalExpectations(currentAction, defaultUser, JwtFatConstants.DEFAULT_ISS_REGEX));\n+        \n+        return currentAction;\n+    }\n+    \n+    /**\n+     * Tests Config:\n+     *  - <jwtSso disableJwtCookie=\"true\" includeLtpaCookie=\"true\" useLtpaIfJwtAbsent=\"true\" cookieName=\"AdamsJwtCookie\" setCookieSecureFlag=\"false\"/>\n+     * Expects:\n+     *  - JWT cookie is not found in the response, but the ltpa cookie is found.\n+     */\n+    @Test\n+    public void test_disableJwtCookie_true_includeLtpaCookie_true_differentJwtCookieName() throws Exception {\n+        server.reconfigureServerUsingExpandedConfiguration(_testName, \"server_disableJwtCookie_true_differentJwtCookieName_includeLtpa_true.xml\");\n+\n+        String jwtCookieName = \"AdamsJwtCookie\";\n+\n+        String currentAction = TestActions.ACTION_INVOKE_PROTECTED_RESOURCE;\n+        Page response = actions.invokeUrl(_testName, webClient, protectedUrl);\n+        Expectations expectations = new Expectations();\n+        \n+        currentAction = disableJwtCookie_test_base(currentAction, response, expectations);\n+        \n+        expectations.addExpectations(CommonExpectations.cookieDoesNotExist(currentAction, webClient, jwtCookieName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM2ODU4MQ=="}, "originalCommit": {"oid": "def38d8c426ecd61906796b55f937a083351f898"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1593, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}