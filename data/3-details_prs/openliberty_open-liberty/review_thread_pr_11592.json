{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MjUzNjY5", "number": 11592, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDozMDo0N1rODt-vbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOTozNDo0M1rODwIrfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTQwNDYwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.microprofile.metrics.2.0/src/com/ibm/ws/microprofile/metrics/helper/PrometheusBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDozMDo0N1rOF_uChA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTozODoxMlrOF_xQIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1ODkxNg==", "bodyText": "Will this message be printed every time /metrics is served?  i.e. will it be printed a lot of times in the log?  Same question for all other Tr.event().", "url": "https://github.com/OpenLiberty/open-liberty/pull/11592#discussion_r402358916", "createdAt": "2020-04-02T14:30:47Z", "author": {"login": "fmhwong"}, "path": "dev/com.ibm.ws.microprofile.metrics.2.0/src/com/ibm/ws/microprofile/metrics/helper/PrometheusBuilder.java", "diffHunk": "@@ -36,30 +37,43 @@\n     private static final String QUANTILE = \"quantile\";\n \n     @FFDCIgnore({ IllegalStateException.class })\n-    public static void buildGauge(StringBuilder builder, String name, Gauge<?> gauge, String description, Double conversionFactor, String tags, String appendUnit) {\n-        // Skip non number values\n-        Number gaugeValNumber = null;\n-        Object gaugeValue = null;\n-        try {\n-            gaugeValue = gauge.getValue();\n-        } catch (IllegalStateException e) {\n-            // The forwarding gauge is likely unloaded. A warning has already been emitted\n-            return;\n-        }\n-        if (!Number.class.isInstance(gaugeValue)) {\n-            Tr.event(tc, \"Skipping Prometheus output for Gauge: \" + name + \" of type \" + gauge.getValue().getClass());\n-            return;\n-        }\n-        gaugeValNumber = (Number) gaugeValue;\n-        if (!(Double.isNaN(conversionFactor))) {\n-            gaugeValNumber = gaugeValNumber.doubleValue() * conversionFactor;\n-        }\n+\n+    public static void buildGauge(StringBuilder builder, String name, String description, Map<MetricID, Metric> currentMetricMap, Double conversionFactor,\n+                                  String appendUnit) {\n         getPromTypeLine(builder, name, \"gauge\", appendUnit);\n         getPromHelpLine(builder, name, description, appendUnit);\n-        getPromValueLine(builder, name, gaugeValNumber, tags, appendUnit);\n+\n+        for (MetricID mid : currentMetricMap.keySet()) {\n+            // Skip non number values\n+            Number gaugeValNumber = null;\n+            Object gaugeValue = null;\n+            try {\n+                gaugeValue = ((Gauge) currentMetricMap.get(mid)).getValue();\n+            } catch (IllegalStateException e) {\n+                // The forwarding gauge is likely unloaded. A warning has already been emitted\n+                return;\n+            }\n+            if (!Number.class.isInstance(gaugeValue)) {\n+                Tr.event(tc, \"Skipping Prometheus output for Gauge: \" + name + \" of type \" + ((Gauge) currentMetricMap.get(mid)).getValue().getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5862e29997b2cb93a04c3ee482ced042f9a2a3f5"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxMTU1Mw==", "bodyText": "Yes they would be emitted every time, but only if they did something wrong! Or if something went horribly wrong. For example this event is emitted if the gauge doesn't track a Number value. The other events emitted in PrometheusMetricWriter will happen if the metadata's type isn't correctly set.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11592#discussion_r402411553", "createdAt": "2020-04-02T15:38:12Z", "author": {"login": "Channyboy"}, "path": "dev/com.ibm.ws.microprofile.metrics.2.0/src/com/ibm/ws/microprofile/metrics/helper/PrometheusBuilder.java", "diffHunk": "@@ -36,30 +37,43 @@\n     private static final String QUANTILE = \"quantile\";\n \n     @FFDCIgnore({ IllegalStateException.class })\n-    public static void buildGauge(StringBuilder builder, String name, Gauge<?> gauge, String description, Double conversionFactor, String tags, String appendUnit) {\n-        // Skip non number values\n-        Number gaugeValNumber = null;\n-        Object gaugeValue = null;\n-        try {\n-            gaugeValue = gauge.getValue();\n-        } catch (IllegalStateException e) {\n-            // The forwarding gauge is likely unloaded. A warning has already been emitted\n-            return;\n-        }\n-        if (!Number.class.isInstance(gaugeValue)) {\n-            Tr.event(tc, \"Skipping Prometheus output for Gauge: \" + name + \" of type \" + gauge.getValue().getClass());\n-            return;\n-        }\n-        gaugeValNumber = (Number) gaugeValue;\n-        if (!(Double.isNaN(conversionFactor))) {\n-            gaugeValNumber = gaugeValNumber.doubleValue() * conversionFactor;\n-        }\n+\n+    public static void buildGauge(StringBuilder builder, String name, String description, Map<MetricID, Metric> currentMetricMap, Double conversionFactor,\n+                                  String appendUnit) {\n         getPromTypeLine(builder, name, \"gauge\", appendUnit);\n         getPromHelpLine(builder, name, description, appendUnit);\n-        getPromValueLine(builder, name, gaugeValNumber, tags, appendUnit);\n+\n+        for (MetricID mid : currentMetricMap.keySet()) {\n+            // Skip non number values\n+            Number gaugeValNumber = null;\n+            Object gaugeValue = null;\n+            try {\n+                gaugeValue = ((Gauge) currentMetricMap.get(mid)).getValue();\n+            } catch (IllegalStateException e) {\n+                // The forwarding gauge is likely unloaded. A warning has already been emitted\n+                return;\n+            }\n+            if (!Number.class.isInstance(gaugeValue)) {\n+                Tr.event(tc, \"Skipping Prometheus output for Gauge: \" + name + \" of type \" + ((Gauge) currentMetricMap.get(mid)).getValue().getClass());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1ODkxNg=="}, "originalCommit": {"oid": "5862e29997b2cb93a04c3ee482ced042f9a2a3f5"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODAwNDQ3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.microprofile.metrics.2.0/src/com/ibm/ws/microprofile/metrics/helper/PrometheusBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOTozNDo0M1rOGC977w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOTozNDo0M1rOGC977w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc2NTEwMw==", "bodyText": "Update copyright year to 2020", "url": "https://github.com/OpenLiberty/open-liberty/pull/11592#discussion_r405765103", "createdAt": "2020-04-08T19:34:43Z", "author": {"login": "fmhwong"}, "path": "dev/com.ibm.ws.microprofile.metrics.2.0/src/com/ibm/ws/microprofile/metrics/helper/PrometheusBuilder.java", "diffHunk": "@@ -10,16 +10,19 @@\n  *******************************************************************************/\n package com.ibm.ws.microprofile.metrics.helper;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "888d2286c37bf1a3261168a2fddea69505f8093a"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1950, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}