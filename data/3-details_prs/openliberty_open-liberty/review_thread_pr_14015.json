{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MDI0MDc1", "number": 14015, "reviewThreads": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDozODowMVrOEpgWZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODoxNzowM1rOEp5_Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTU3MDkzOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/XATerminatorWrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDozODowMVrOHbNkDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjowMzowNFrOHbRUsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5NTgyMg==", "bodyText": "Do we want to leave the @author in on the move to OL? Not sure if there were others, this one just caught my eye.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498295822", "createdAt": "2020-10-01T14:38:01Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/XATerminatorWrapper.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter;\n+\n+import javax.resource.ResourceException;\n+import javax.resource.spi.XATerminator;\n+import javax.transaction.xa.XAException;\n+import javax.transaction.xa.Xid;\n+\n+import com.ibm.adapter.work.FVTWorkDispatcher;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * @author swai", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM1NzQyNw==", "bodyText": "Removed.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498357427", "createdAt": "2020-10-01T16:03:04Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/XATerminatorWrapper.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter;\n+\n+import javax.resource.ResourceException;\n+import javax.resource.spi.XATerminator;\n+import javax.transaction.xa.XAException;\n+import javax.transaction.xa.Xid;\n+\n+import com.ibm.adapter.work.FVTWorkDispatcher;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * @author swai", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5NTgyMg=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTYwMDA3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/endpoint/MessageEndpointTestResultsImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo0NDoxNlrOHbN2Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjowMjoxM1rOHbRSoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwMDQ3OQ==", "bodyText": "Maybe remove", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498300479", "createdAt": "2020-10-01T14:44:16Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/endpoint/MessageEndpointTestResultsImpl.java", "diffHunk": "@@ -0,0 +1,325 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.endpoint;\n+\n+import java.io.Serializable;\n+\n+import javax.security.auth.Subject;\n+\n+import com.ibm.ws.csi.MessageEndpointTestResults;\n+\n+/**\n+ * This interface allows FVT testcase to obtain test results\n+ * that are reported by the test resource adapter (test RA), MDB\n+ * method, and websphere application server components so that the\n+ * FVT testcase can verify compliance with both EJB and JCA\n+ * specifications.\n+ *\n+ * @author Ken Lawrence", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM1Njg5Ng==", "bodyText": "Removed", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498356896", "createdAt": "2020-10-01T16:02:13Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/endpoint/MessageEndpointTestResultsImpl.java", "diffHunk": "@@ -0,0 +1,325 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.endpoint;\n+\n+import java.io.Serializable;\n+\n+import javax.security.auth.Subject;\n+\n+import com.ibm.ws.csi.MessageEndpointTestResults;\n+\n+/**\n+ * This interface allows FVT testcase to obtain test results\n+ * that are reported by the test resource adapter (test RA), MDB\n+ * method, and websphere application server components so that the\n+ * FVT testcase can verify compliance with both EJB and JCA\n+ * specifications.\n+ *\n+ * @author Ken Lawrence", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwMDQ3OQ=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTYxNDI4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/adminobject/jbv/JBVFATAOImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo0NzowM1rOHbN_BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjowMTozMFrOHbRRBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwMjcyNQ==", "bodyText": "Author", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498302725", "createdAt": "2020-10-01T14:47:03Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/adminobject/jbv/JBVFATAOImpl.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*******************************************************************************\n+ * Copyright (c) 2004, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.adminobject.jbv;\n+\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.NotNull;\n+import javax.validation.constraints.Size;\n+\n+import com.ibm.adapter.adminobject.FVTCompMsgDestAOImpl;\n+\n+/**\n+ * This class is an Java Bean that contains a property that is annotated with\n+ * the @Min constraint. When an Administered Object JavaBean that extends from\n+ * this class is validated the constraints defined in this class should also be\n+ * used.\n+ *\n+ * @author mageorge", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM1NjQ4NA==", "bodyText": "Removed.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498356484", "createdAt": "2020-10-01T16:01:30Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/adminobject/jbv/JBVFATAOImpl.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*******************************************************************************\n+ * Copyright (c) 2004, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.adminobject.jbv;\n+\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.NotNull;\n+import javax.validation.constraints.Size;\n+\n+import com.ibm.adapter.adminobject.FVTCompMsgDestAOImpl;\n+\n+/**\n+ * This class is an Java Bean that contains a property that is annotated with\n+ * the @Min constraint. When an Administered Object JavaBean that extends from\n+ * this class is validated the constraints defined in this class should also be\n+ * used.\n+ *\n+ * @author mageorge", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwMjcyNQ=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTYxNTIwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/adminobject/jbv/JBVFATAOFailureImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo0NzoxNVrOHbN_pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTowNDoyNFrOHbXXUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwMjg4NA==", "bodyText": "Author", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498302884", "createdAt": "2020-10-01T14:47:15Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/adminobject/jbv/JBVFATAOFailureImpl.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.adminobject.jbv;\n+\n+import javax.validation.constraints.Min;\n+\n+/**\n+ * This class is an Administered Object JavaBean that is used for testing\n+ * Java Bean Validation. It is annotated with constraints and also extends a\n+ * class which is annotated with more constraints.\n+ *\n+ * @author mageorge", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1NjQwMA==", "bodyText": "Removed", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498456400", "createdAt": "2020-10-01T19:04:24Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/adminobject/jbv/JBVFATAOFailureImpl.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.adminobject.jbv;\n+\n+import javax.validation.constraints.Min;\n+\n+/**\n+ * This class is an Administered Object JavaBean that is used for testing\n+ * Java Bean Validation. It is annotated with constraints and also extends a\n+ * class which is annotated with more constraints.\n+ *\n+ * @author mageorge", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwMjg4NA=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTYxNjA3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/adminobject/jbv/JBVFATAOEmbeddedImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo0NzoyNlrOHbOANw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTowMjoyMlrOHbXTlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwMzAzMQ==", "bodyText": "Author", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498303031", "createdAt": "2020-10-01T14:47:26Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/adminobject/jbv/JBVFATAOEmbeddedImpl.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.adminobject.jbv;\n+\n+import javax.validation.constraints.Min;\n+\n+/**\n+ * This class is an Administered Object JavaBean that is used for testing Java\n+ * Bean Validation. It is annotated with constraints and also extends a class\n+ * which is annotated with more constraints.\n+ *\n+ * @author mageorge", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1NTQ0Ng==", "bodyText": "removed", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498455446", "createdAt": "2020-10-01T19:02:22Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/adminobject/jbv/JBVFATAOEmbeddedImpl.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.adminobject.jbv;\n+\n+import javax.validation.constraints.Min;\n+\n+/**\n+ * This class is an Administered Object JavaBean that is used for testing Java\n+ * Bean Validation. It is annotated with constraints and also extends a class\n+ * which is annotated with more constraints.\n+ *\n+ * @author mageorge", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwMzAzMQ=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTYxNzA0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/adminobject/jbv/JBVFATAO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo0NzozOFrOHbOAyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTowMjoxNlrOHbXTVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwMzE3Ng==", "bodyText": "Author", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498303176", "createdAt": "2020-10-01T14:47:38Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/adminobject/jbv/JBVFATAO.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.adminobject.jbv;\n+\n+import javax.validation.constraints.Size;\n+\n+/**\n+ * This class is the interface that is implemented by the Administered\n+ * Objects that are used to test for Java Bean Validation. It is annotated\n+ * with a JavaBean constraint annotation\n+ *\n+ * @author mageorge", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1NTM4Mw==", "bodyText": "removed", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498455383", "createdAt": "2020-10-01T19:02:16Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/adminobject/jbv/JBVFATAO.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.adminobject.jbv;\n+\n+import javax.validation.constraints.Size;\n+\n+/**\n+ * This class is the interface that is implemented by the Administered\n+ * Objects that are used to test for Java Bean Validation. It is annotated\n+ * with a JavaBean constraint annotation\n+ *\n+ * @author mageorge", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwMzE3Ng=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTYxODM3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/ConnectionEventSender.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo0Nzo1N1rOHbOBlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTowMjowOFrOHbXTEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwMzM4Mg==", "bodyText": "Author", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498303382", "createdAt": "2020-10-01T14:47:57Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/ConnectionEventSender.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter;\n+\n+import javax.resource.ResourceException;\n+\n+/**\n+ * @author jitang", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1NTMxMg==", "bodyText": "removed", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498455312", "createdAt": "2020-10-01T19:02:08Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/ConnectionEventSender.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter;\n+\n+import javax.resource.ResourceException;\n+\n+/**\n+ * @author jitang", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwMzM4Mg=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTYyNzA0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/adminobject/jbv/JBVFATAOSuccessImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo0OTo0NVrOHbOHAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTowMjowMFrOHbXS0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwNDc2OA==", "bodyText": "Author", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498304768", "createdAt": "2020-10-01T14:49:45Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/adminobject/jbv/JBVFATAOSuccessImpl.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.adminobject.jbv;\n+\n+import javax.validation.constraints.Min;\n+\n+/**\n+ * This class is an Administered Object JavaBean that is used for testing\n+ * Java Bean Validation. It is annotated with constraints and also extends a\n+ * class which is annotated with more constraints.\n+ *\n+ * @author mageorge", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1NTI0OQ==", "bodyText": "removed", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498455249", "createdAt": "2020-10-01T19:02:00Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/adminobject/jbv/JBVFATAOSuccessImpl.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.adminobject.jbv;\n+\n+import javax.validation.constraints.Min;\n+\n+/**\n+ * This class is an Administered Object JavaBean that is used for testing\n+ * Java Bean Validation. It is annotated with constraints and also extends a\n+ * class which is annotated with more constraints.\n+ *\n+ * @author mageorge", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwNDc2OA=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTYzNDgxOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/jdbc/JdbcDataSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo1MToyMlrOHbOL2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTowMjozOFrOHbXUHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwNjAxMA==", "bodyText": "Author", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498306010", "createdAt": "2020-10-01T14:51:22Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/jdbc/JdbcDataSource.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.jdbc;\n+\n+import java.io.PrintWriter;\n+import java.io.Serializable;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.logging.Logger;\n+\n+import javax.resource.ResourceException;\n+import javax.resource.spi.ConnectionManager;\n+import javax.resource.spi.ConnectionRequestInfo;\n+import javax.sql.DataSource;\n+\n+import com.ibm.adapter.AdapterUtil;\n+import com.ibm.adapter.spi.ConnectionRequestInfoImpl;\n+import com.ibm.adapter.spi.ManagedConnectionFactoryImpl;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * @author jitang", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1NTU4Mw==", "bodyText": "Removed", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498455583", "createdAt": "2020-10-01T19:02:38Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/jdbc/JdbcDataSource.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.jdbc;\n+\n+import java.io.PrintWriter;\n+import java.io.Serializable;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.util.logging.Logger;\n+\n+import javax.resource.ResourceException;\n+import javax.resource.spi.ConnectionManager;\n+import javax.resource.spi.ConnectionRequestInfo;\n+import javax.sql.DataSource;\n+\n+import com.ibm.adapter.AdapterUtil;\n+import com.ibm.adapter.spi.ConnectionRequestInfoImpl;\n+import com.ibm.adapter.spi.ManagedConnectionFactoryImpl;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * @author jitang", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwNjAxMA=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTY0Mzc0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/message/FVTMessageProviderImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo1MzowOVrOHbORbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDo1NzoxOFrOHbalFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwNzQzNg==", "bodyText": "multiple swai in this file", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498307436", "createdAt": "2020-10-01T14:53:09Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/message/FVTMessageProviderImpl.java", "diffHunk": "@@ -0,0 +1,1777 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.message;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Timer;\n+\n+import javax.jms.MessageListener;\n+import javax.naming.NameNotFoundException;\n+import javax.naming.NamingException;\n+import javax.resource.ResourceException;\n+import javax.resource.spi.ActivationSpec;\n+import javax.resource.spi.BootstrapContext;\n+import javax.resource.spi.ResourceAdapter;\n+import javax.resource.spi.ResourceAdapterInternalException;\n+import javax.resource.spi.UnavailableException;\n+import javax.resource.spi.XATerminator;\n+import javax.resource.spi.work.Work;\n+import javax.resource.spi.work.WorkException;\n+import javax.resource.spi.work.WorkManager;\n+import javax.sql.DataSource;\n+import javax.transaction.xa.XAResource;\n+import javax.transaction.xa.Xid;\n+\n+import com.ibm.adapter.EISTimer;\n+import com.ibm.adapter.FVTAdapterHelper;\n+import com.ibm.adapter.FVTAdapterImpl;\n+import com.ibm.adapter.endpoint.MessageEndpointFactoryWrapper;\n+import com.ibm.adapter.endpoint.MessageEndpointWrapper;\n+import com.ibm.adapter.tra.FVTWorkImpl;\n+import com.ibm.adapter.work.FVTComplexWorkImpl;\n+import com.ibm.adapter.work.FVTGeneralWorkImpl;\n+import com.ibm.adapter.work.FVTWorkDispatcher;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+import com.ibm.ws.csi.MessageEndpointTestResults;\n+\n+/**\n+ * <p>\n+ * This class implements interface\n+ * <code>fvt.adapter.message.FVTMessageProvider</code> and\n+ * <code>fvt.adapter.message.FVTBaseMessageProvider</code>.\n+ * </p>\n+ *\n+ * <p>\n+ * An object of this class simulates the message provider which uses the testing\n+ * resource adapter to deliver messages to endpoint applications. This\n+ * MessageProvider has some methods to send different kinds of messages to the\n+ * endpoint applications via the testing resource adapter.\n+ * </p>\n+ *\n+ * <p>\n+ * An object of this class is an administered object. When the testing resource\n+ * adapter is started, the configured administered object will be bound into\n+ * JNDI name space. Applications (such as test applications) can lookup the\n+ * configured administered object (configured in applications res-env-ref) to\n+ * send messages to the endpoint applications.\n+ * <p>\n+ *\n+ * <p>\n+ * This class also stores XA transaction resources into a text file so it can\n+ * provide the XAResource object during crash recovery.\n+ * </p>\n+ */\n+public class FVTMessageProviderImpl implements FVTMessageProvider, FVTBaseMessageProvider, Serializable {\n+\n+    private static final TraceComponent tc = Tr\n+                    .register(FVTMessageProviderImpl.class);\n+\n+    /** work dispatcher */\n+    FVTWorkDispatcher workDispatcher;\n+\n+    /** adapter instance */\n+    FVTAdapterImpl adapter;\n+\n+    /** transaction log file path name */\n+    // 12/16/03: swai", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwOTA3OQ==", "bodyText": "Removed all swai references.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498509079", "createdAt": "2020-10-01T20:57:18Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/message/FVTMessageProviderImpl.java", "diffHunk": "@@ -0,0 +1,1777 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.message;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Timer;\n+\n+import javax.jms.MessageListener;\n+import javax.naming.NameNotFoundException;\n+import javax.naming.NamingException;\n+import javax.resource.ResourceException;\n+import javax.resource.spi.ActivationSpec;\n+import javax.resource.spi.BootstrapContext;\n+import javax.resource.spi.ResourceAdapter;\n+import javax.resource.spi.ResourceAdapterInternalException;\n+import javax.resource.spi.UnavailableException;\n+import javax.resource.spi.XATerminator;\n+import javax.resource.spi.work.Work;\n+import javax.resource.spi.work.WorkException;\n+import javax.resource.spi.work.WorkManager;\n+import javax.sql.DataSource;\n+import javax.transaction.xa.XAResource;\n+import javax.transaction.xa.Xid;\n+\n+import com.ibm.adapter.EISTimer;\n+import com.ibm.adapter.FVTAdapterHelper;\n+import com.ibm.adapter.FVTAdapterImpl;\n+import com.ibm.adapter.endpoint.MessageEndpointFactoryWrapper;\n+import com.ibm.adapter.endpoint.MessageEndpointWrapper;\n+import com.ibm.adapter.tra.FVTWorkImpl;\n+import com.ibm.adapter.work.FVTComplexWorkImpl;\n+import com.ibm.adapter.work.FVTGeneralWorkImpl;\n+import com.ibm.adapter.work.FVTWorkDispatcher;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+import com.ibm.ws.csi.MessageEndpointTestResults;\n+\n+/**\n+ * <p>\n+ * This class implements interface\n+ * <code>fvt.adapter.message.FVTMessageProvider</code> and\n+ * <code>fvt.adapter.message.FVTBaseMessageProvider</code>.\n+ * </p>\n+ *\n+ * <p>\n+ * An object of this class simulates the message provider which uses the testing\n+ * resource adapter to deliver messages to endpoint applications. This\n+ * MessageProvider has some methods to send different kinds of messages to the\n+ * endpoint applications via the testing resource adapter.\n+ * </p>\n+ *\n+ * <p>\n+ * An object of this class is an administered object. When the testing resource\n+ * adapter is started, the configured administered object will be bound into\n+ * JNDI name space. Applications (such as test applications) can lookup the\n+ * configured administered object (configured in applications res-env-ref) to\n+ * send messages to the endpoint applications.\n+ * <p>\n+ *\n+ * <p>\n+ * This class also stores XA transaction resources into a text file so it can\n+ * provide the XAResource object during crash recovery.\n+ * </p>\n+ */\n+public class FVTMessageProviderImpl implements FVTMessageProvider, FVTBaseMessageProvider, Serializable {\n+\n+    private static final TraceComponent tc = Tr\n+                    .register(FVTMessageProviderImpl.class);\n+\n+    /** work dispatcher */\n+    FVTWorkDispatcher workDispatcher;\n+\n+    /** adapter instance */\n+    FVTAdapterImpl adapter;\n+\n+    /** transaction log file path name */\n+    // 12/16/03: swai", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwNzQzNg=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTY1MTk5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/spi/LocalTransactionImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo1NDo1MVrOHbOWew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDo1OToxMFrOHbaopw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwODczMQ==", "bodyText": "Probably don't need this verison/since?", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498308731", "createdAt": "2020-10-01T14:54:51Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/spi/LocalTransactionImpl.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.spi;\n+\n+import java.sql.SQLException;\n+\n+import javax.resource.ResourceException;\n+import javax.resource.spi.LocalTransaction;\n+\n+import com.ibm.adapter.AdapterUtil;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * This class implements the javax.resource.spi.LocalTransaction interface.\n+ * The interface defines the contract between an application server and\n+ * resource adapter for local transaction management.\n+ *\n+ * <p>The application server gets this object from the ManagedConnection,\n+ * and starts the local transaction, then commit or rollback the local transaction.\n+ *\n+ * @version 1.30\n+ * @since WAS 5.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwOTk5MQ==", "bodyText": "Removed all @SInCE and @Version from class files.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498509991", "createdAt": "2020-10-01T20:59:10Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/spi/LocalTransactionImpl.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.spi;\n+\n+import java.sql.SQLException;\n+\n+import javax.resource.ResourceException;\n+import javax.resource.spi.LocalTransaction;\n+\n+import com.ibm.adapter.AdapterUtil;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * This class implements the javax.resource.spi.LocalTransaction interface.\n+ * The interface defines the contract between an application server and\n+ * resource adapter for local transaction management.\n+ *\n+ * <p>The application server gets this object from the ManagedConnection,\n+ * and starts the local transaction, then commit or rollback the local transaction.\n+ *\n+ * @version 1.30\n+ * @since WAS 5.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwODczMQ=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTY1NDE3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/spi/ManagedConnectionFactoryImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo1NToxNVrOHbOXyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDo1NTo1NVrOHbaiQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwOTA2NA==", "bodyText": "Name", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498309064", "createdAt": "2020-10-01T14:55:15Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/spi/ManagedConnectionFactoryImpl.java", "diffHunk": "@@ -0,0 +1,1419 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.spi;\n+\n+import java.io.PrintWriter;\n+import java.io.Serializable;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.resource.ResourceException;\n+import javax.resource.spi.ConnectionManager;\n+import javax.resource.spi.ConnectionRequestInfo;\n+import javax.resource.spi.ManagedConnection;\n+import javax.resource.spi.ManagedConnectionFactory;\n+import javax.resource.spi.ResourceAdapter;\n+import javax.resource.spi.ResourceAdapterAssociation;\n+import javax.resource.spi.SecurityException;\n+import javax.resource.spi.ValidatingManagedConnectionFactory;\n+import javax.resource.spi.security.GenericCredential;\n+import javax.resource.spi.security.PasswordCredential;\n+import javax.security.auth.Subject;\n+import javax.sql.ConnectionPoolDataSource;\n+import javax.sql.PooledConnection;\n+import javax.sql.XADataSource;\n+\n+import com.ibm.adapter.AdapterUtil;\n+import com.ibm.adapter.spi.connection.LazyAssociatableMC;\n+import com.ibm.adapter.spi.connection.LazyEnlistableLazyAssociatableMC;\n+import com.ibm.adapter.spi.connection.LazyEnlistableMC;\n+import com.ibm.adapter.spi.connection.MC;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * Implementation class of ManagedConnectionFactory\n+ */\n+public class ManagedConnectionFactoryImpl implements ManagedConnectionFactory, Serializable, ResourceAdapterAssociation // {\n+                , ValidatingManagedConnectionFactory { // added by gburli - LI2110.97 -", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwODM1NQ==", "bodyText": "Removed all gburli references.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498508355", "createdAt": "2020-10-01T20:55:55Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/spi/ManagedConnectionFactoryImpl.java", "diffHunk": "@@ -0,0 +1,1419 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.spi;\n+\n+import java.io.PrintWriter;\n+import java.io.Serializable;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.resource.ResourceException;\n+import javax.resource.spi.ConnectionManager;\n+import javax.resource.spi.ConnectionRequestInfo;\n+import javax.resource.spi.ManagedConnection;\n+import javax.resource.spi.ManagedConnectionFactory;\n+import javax.resource.spi.ResourceAdapter;\n+import javax.resource.spi.ResourceAdapterAssociation;\n+import javax.resource.spi.SecurityException;\n+import javax.resource.spi.ValidatingManagedConnectionFactory;\n+import javax.resource.spi.security.GenericCredential;\n+import javax.resource.spi.security.PasswordCredential;\n+import javax.security.auth.Subject;\n+import javax.sql.ConnectionPoolDataSource;\n+import javax.sql.PooledConnection;\n+import javax.sql.XADataSource;\n+\n+import com.ibm.adapter.AdapterUtil;\n+import com.ibm.adapter.spi.connection.LazyAssociatableMC;\n+import com.ibm.adapter.spi.connection.LazyEnlistableLazyAssociatableMC;\n+import com.ibm.adapter.spi.connection.LazyEnlistableMC;\n+import com.ibm.adapter.spi.connection.MC;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * Implementation class of ManagedConnectionFactory\n+ */\n+public class ManagedConnectionFactoryImpl implements ManagedConnectionFactory, Serializable, ResourceAdapterAssociation // {\n+                , ValidatingManagedConnectionFactory { // added by gburli - LI2110.97 -", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwOTA2NA=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTY1ODc5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/spi/ManagedConnectionImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo1NjowOVrOHbOakA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTowMjo1OVrOHbXUuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwOTc3Ng==", "bodyText": "Author", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498309776", "createdAt": "2020-10-01T14:56:09Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/spi/ManagedConnectionImpl.java", "diffHunk": "@@ -0,0 +1,1950 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.spi;\n+\n+import java.io.PrintWriter;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+import javax.resource.ResourceException;\n+import javax.resource.spi.ConnectionEvent;\n+import javax.resource.spi.ConnectionEventListener;\n+import javax.resource.spi.ConnectionRequestInfo;\n+import javax.resource.spi.LazyEnlistableConnectionManager;\n+import javax.resource.spi.LocalTransaction;\n+import javax.resource.spi.ManagedConnection;\n+import javax.resource.spi.ManagedConnectionMetaData;\n+import javax.resource.spi.SharingViolationException;\n+import javax.security.auth.Subject;\n+import javax.transaction.xa.XAResource;\n+\n+import com.ibm.adapter.AdapterUtil;\n+import com.ibm.adapter.ConnectionEventSender;\n+import com.ibm.adapter.Reassociateable;\n+import com.ibm.adapter.jdbc.JdbcConnection;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * @author jitang", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1NTczNw==", "bodyText": "Removed", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498455737", "createdAt": "2020-10-01T19:02:59Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/spi/ManagedConnectionImpl.java", "diffHunk": "@@ -0,0 +1,1950 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.spi;\n+\n+import java.io.PrintWriter;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+import javax.resource.ResourceException;\n+import javax.resource.spi.ConnectionEvent;\n+import javax.resource.spi.ConnectionEventListener;\n+import javax.resource.spi.ConnectionRequestInfo;\n+import javax.resource.spi.LazyEnlistableConnectionManager;\n+import javax.resource.spi.LocalTransaction;\n+import javax.resource.spi.ManagedConnection;\n+import javax.resource.spi.ManagedConnectionMetaData;\n+import javax.resource.spi.SharingViolationException;\n+import javax.security.auth.Subject;\n+import javax.transaction.xa.XAResource;\n+\n+import com.ibm.adapter.AdapterUtil;\n+import com.ibm.adapter.ConnectionEventSender;\n+import com.ibm.adapter.Reassociateable;\n+import com.ibm.adapter.jdbc.JdbcConnection;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * @author jitang", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwOTc3Ng=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTY2MDI5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/spi/ManagedConnectionImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo1NjoyNlrOHbObbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDo1NzowN1rOHbaksA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwOTk5Ng==", "bodyText": "Name -- a couple of gurlis", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498309996", "createdAt": "2020-10-01T14:56:26Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/spi/ManagedConnectionImpl.java", "diffHunk": "@@ -0,0 +1,1950 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.spi;\n+\n+import java.io.PrintWriter;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+import javax.resource.ResourceException;\n+import javax.resource.spi.ConnectionEvent;\n+import javax.resource.spi.ConnectionEventListener;\n+import javax.resource.spi.ConnectionRequestInfo;\n+import javax.resource.spi.LazyEnlistableConnectionManager;\n+import javax.resource.spi.LocalTransaction;\n+import javax.resource.spi.ManagedConnection;\n+import javax.resource.spi.ManagedConnectionMetaData;\n+import javax.resource.spi.SharingViolationException;\n+import javax.security.auth.Subject;\n+import javax.transaction.xa.XAResource;\n+\n+import com.ibm.adapter.AdapterUtil;\n+import com.ibm.adapter.ConnectionEventSender;\n+import com.ibm.adapter.Reassociateable;\n+import com.ibm.adapter.jdbc.JdbcConnection;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * @author jitang\n+ *\n+ *         javax.resource.spi.ManagedConnection impl class.\n+ *         <p>\n+ *\n+ *         Implementing ConnectionEventSender can make ManagedConnectionImpl\n+ *         object directly sends events to listeners. This is only used to test\n+ *         how application server (J2C, Transaction) deals with the valid or\n+ *         invalid combination of event sequences. In all invalid case, an\n+ *         appropriate exception is expected. We cannot use process***Event()\n+ *         method since they are also changing the object's states.\n+ *         <p>\n+ */\n+public class ManagedConnectionImpl implements ManagedConnection, ConnectionEventSender {\n+\n+    /** Physical connection object. */\n+    // private java.sql.Connection sqlConn;\n+    protected java.sql.Connection sqlConn; // LIDB2110-69\n+\n+    /** Physical pooledConnection object, may be an XAConnection object too. */\n+    // private javax.sql.PooledConnection poolConn;\n+    protected javax.sql.PooledConnection poolConn; // LIDB2110-69\n+\n+    /** List of currently open inUse and Free handles on this MC. */\n+    protected ArrayList handlesInUse;\n+\n+    /** Event listeners. */\n+    private ConnectionEventListener[] ivEventListeners; // LIDB????\n+\n+    /** Number of the event listeners. */\n+    private int numListeners;\n+\n+    /** Managed connection factory object. */\n+    ManagedConnectionFactoryImpl mcf;\n+\n+    /** Local transaction object. */\n+    private LocalTransaction localTran;\n+\n+    /** XA resource object. */\n+    // private XAResource xares;\n+    protected XAResource xares; // LIDB2110-69\n+\n+    /** Connection request info object. */\n+    private ConnectionRequestInfoImpl cri;\n+\n+    /** Subject object. */\n+    private Subject subject;\n+\n+    /** LogWriter */\n+    private final PrintWriter logWriter;\n+\n+    /** Tracks the current transaction state for this MC. */\n+    StateManager stateMgr;\n+\n+    private static final TraceComponent tc = Tr\n+                    .register(ManagedConnectionImpl.class);\n+\n+    /** Indicates if the Connection supports two phase commit. */\n+    // private boolean is2Phase;\n+    protected boolean is2Phase; // LIDB2110-69\n+\n+    // LIDB???? - change ivAlreadyProcessedInteractionPendingEvent to\n+    // isLazyEnlisted\n+    /**\n+     * Deferred Enlistment/Interaction Pending event.\n+     * <p>\n+     * This value is used when transactionResourceRegistration of MCF is\n+     * dynamic, i.e., whether isDynamicEnlistment is true.\n+     * <p>\n+     * If ivAlreadyProcessedInteractionPendingEvent is true, the connection is\n+     * being enlisted.\n+     */\n+    // boolean ivAlreadyProcessedInteractionPendingEvent;\n+    boolean isLazyEnlisted;\n+\n+    // LIDB???? - remove isDynamicEnlistment\n+    // LIDB???? - remove supportsImplicitHandleReactivation\n+\n+    /** Indicates whether we have detected a fatal Connection error on this MC. */\n+    private boolean connectionErrorDetected;\n+\n+    /** Indicates whether we are currently cleaning up handles. */\n+    protected boolean cleaningUpHandles;\n+\n+    // Connection attributes\n+    private int isolevel, defaultIsolevel;\n+    private Boolean readOnly, defaultReadOnly;\n+    private Map typeMap, defaultTypeMap;\n+    private String catalog, defaultCatalog;\n+    private boolean autoCommit, defaultAutoCommit, currentAutoCommit;\n+\n+    private final Class currClass = ManagedConnectionImpl.class;\n+\n+    /**\n+     * Constructor\n+     */\n+    public ManagedConnectionImpl(ManagedConnectionFactoryImpl mcf,\n+                                 javax.sql.PooledConnection pconn, java.sql.Connection conn,\n+                                 Subject sub, ConnectionRequestInfoImpl cxRequestInfo) throws ResourceException {\n+        if (tc.isEntryEnabled())\n+            Tr.entry(tc, \"<init>\", new Object[] { mcf, conn, cxRequestInfo,\n+                                                  sub, cxRequestInfo });\n+\n+        this.sqlConn = conn;\n+        this.poolConn = pconn;\n+        this.mcf = mcf;\n+        this.cri = cxRequestInfo;\n+        this.subject = sub;\n+        is2Phase = poolConn instanceof javax.sql.XAConnection;\n+\n+        if (subject != null)\n+            subject = copySubject();\n+\n+        handlesInUse = new ArrayList(13);\n+\n+        // LIDB???? - Change ConnectionEventListener\n+        ivEventListeners = new ConnectionEventListener[13];\n+        numListeners = 0;\n+\n+        logWriter = mcf.getLogWriter();\n+\n+        stateMgr = new StateManager();\n+\n+        readOnly = cri.ivReadOnly;\n+\n+        try {\n+            defaultAutoCommit = autoCommit = sqlConn.getAutoCommit();\n+\n+            // d156456, set connection properties.\n+\n+            // defaultTypeMap = typeMap = null;\n+            // defaultCatalog = catalog = sqlConn.getCatalog();\n+            // defaultIsolevel = isolevel = sqlConn.getTransactionIsolation();\n+            // defaultReadOnly = readOnly = new Boolean(sqlConn.isReadOnly());\n+\n+            setTypeMap(defaultTypeMap = cri.getTypeMap());\n+            setCatalog(defaultCatalog = cri.getCatalog());\n+            setTransactionIsolation(defaultIsolevel = cri.getIsolationLevel());\n+            defaultReadOnly = cri.isReadOnly();\n+            if (defaultReadOnly != null)\n+                setReadOnly(defaultReadOnly.booleanValue());\n+\n+            if (tc.isDebugEnabled()) {\n+                Tr.debug(tc, \"autoCommit = \" + autoCommit + \"\\t TypeMap = \"\n+                             + typeMap + \"\\t Catalog = \" + catalog\n+                             + \"\\t Isolation = \"\n+                             + AdapterUtil.getIsolationLevelString(isolevel)\n+                             + \"\\t isReadOnly = \" + readOnly);\n+                Tr.debug(tc, \"default autoCommit = \" + defaultAutoCommit\n+                             + \"\\t default TypeMap = \" + defaultTypeMap\n+                             + \"\\t default Catalog = \" + defaultCatalog\n+                             + \"\\t default Isolation = \"\n+                             + AdapterUtil.getIsolationLevelString(defaultIsolevel)\n+                             + \"\\t default isReadOnly = \" + defaultReadOnly);\n+            }\n+\n+            // d155456 end.\n+        } catch (SQLException sqle) {\n+            if (tc.isDebugEnabled())\n+                Tr.debug(tc, \"Cannot get connection attributes\");\n+            throw new ResourceException(sqle.getMessage());\n+        }\n+\n+        if (tc.isEntryEnabled())\n+            Tr.exit(tc, \"<init>\", this);\n+    }\n+\n+    /**\n+     * @see javax.resource.spi.ManagedConnection#getConnection(Subject, ConnectionRequestInfo)\n+     */\n+    @Override\n+    public Object getConnection(Subject subject,\n+                                ConnectionRequestInfo cxRequestInfo) throws ResourceException {\n+        if (tc.isEntryEnabled())\n+            Tr.entry(tc, \"getConnection\", new Object[] { this, cxRequestInfo });\n+\n+        // @alvinso.1\n+        if (AdapterUtil.getSharingViolation()) {\n+            if (tc.isEntryEnabled())\n+                Tr\n+                                .exit(\n+                                      tc,\n+                                      \"getConnection - throwing SharingViolationException for testing purpose.\",\n+                                      getTransactionStateAsString());\n+\n+            throw new SharingViolationException(\"Tesing of SharingViolationException.\");\n+        }\n+\n+        // if you aren't in a valid state when doing getConnection, you can't\n+        // get a connection\n+        // from this MC\n+\n+        int transactionState = stateMgr.transtate;\n+\n+        if ((transactionState != StateManager.NO_TRANSACTION_ACTIVE)\n+            && (transactionState != StateManager.GLOBAL_TRANSACTION_ACTIVE)\n+            && (transactionState != StateManager.LOCAL_TRANSACTION_ACTIVE)) {\n+\n+            if (tc.isEntryEnabled())\n+                Tr\n+                                .exit(\n+                                      tc,\n+                                      \"getConnection - bad transaction state, throwing exception\",\n+                                      getTransactionStateAsString());\n+\n+            String message = \"Operation 'getConnection' is not permitted for transaction state: \"\n+                             + getTransactionStateAsString();\n+\n+            throw new ResourceException(message);\n+        }\n+\n+        // We Only support JDBC handle here\n+        Object handle = new JdbcConnection(this, sqlConn);\n+\n+        // Only synchronize operations on handlesInUse. [d128891]\n+        synchronized (this) {\n+            handlesInUse.add(handle);\n+        }\n+\n+        if (tc.isEntryEnabled())\n+            Tr.exit(tc, \"getConnection\", handle);\n+\n+        return handle;\n+    }\n+\n+    /**\n+     * @see javax.resource.spi.ManagedConnection#destroy()\n+     */\n+    @Override\n+    public void destroy() throws ResourceException {\n+        if (tc.isEntryEnabled())\n+            Tr.entry(tc, \"destroy\", this);\n+\n+        // Added by gburli - Begin: 06/08/04", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 272}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwODk3Ng==", "bodyText": "Removed all gburli references.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498508976", "createdAt": "2020-10-01T20:57:07Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/spi/ManagedConnectionImpl.java", "diffHunk": "@@ -0,0 +1,1950 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.spi;\n+\n+import java.io.PrintWriter;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Map;\n+\n+import javax.resource.ResourceException;\n+import javax.resource.spi.ConnectionEvent;\n+import javax.resource.spi.ConnectionEventListener;\n+import javax.resource.spi.ConnectionRequestInfo;\n+import javax.resource.spi.LazyEnlistableConnectionManager;\n+import javax.resource.spi.LocalTransaction;\n+import javax.resource.spi.ManagedConnection;\n+import javax.resource.spi.ManagedConnectionMetaData;\n+import javax.resource.spi.SharingViolationException;\n+import javax.security.auth.Subject;\n+import javax.transaction.xa.XAResource;\n+\n+import com.ibm.adapter.AdapterUtil;\n+import com.ibm.adapter.ConnectionEventSender;\n+import com.ibm.adapter.Reassociateable;\n+import com.ibm.adapter.jdbc.JdbcConnection;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * @author jitang\n+ *\n+ *         javax.resource.spi.ManagedConnection impl class.\n+ *         <p>\n+ *\n+ *         Implementing ConnectionEventSender can make ManagedConnectionImpl\n+ *         object directly sends events to listeners. This is only used to test\n+ *         how application server (J2C, Transaction) deals with the valid or\n+ *         invalid combination of event sequences. In all invalid case, an\n+ *         appropriate exception is expected. We cannot use process***Event()\n+ *         method since they are also changing the object's states.\n+ *         <p>\n+ */\n+public class ManagedConnectionImpl implements ManagedConnection, ConnectionEventSender {\n+\n+    /** Physical connection object. */\n+    // private java.sql.Connection sqlConn;\n+    protected java.sql.Connection sqlConn; // LIDB2110-69\n+\n+    /** Physical pooledConnection object, may be an XAConnection object too. */\n+    // private javax.sql.PooledConnection poolConn;\n+    protected javax.sql.PooledConnection poolConn; // LIDB2110-69\n+\n+    /** List of currently open inUse and Free handles on this MC. */\n+    protected ArrayList handlesInUse;\n+\n+    /** Event listeners. */\n+    private ConnectionEventListener[] ivEventListeners; // LIDB????\n+\n+    /** Number of the event listeners. */\n+    private int numListeners;\n+\n+    /** Managed connection factory object. */\n+    ManagedConnectionFactoryImpl mcf;\n+\n+    /** Local transaction object. */\n+    private LocalTransaction localTran;\n+\n+    /** XA resource object. */\n+    // private XAResource xares;\n+    protected XAResource xares; // LIDB2110-69\n+\n+    /** Connection request info object. */\n+    private ConnectionRequestInfoImpl cri;\n+\n+    /** Subject object. */\n+    private Subject subject;\n+\n+    /** LogWriter */\n+    private final PrintWriter logWriter;\n+\n+    /** Tracks the current transaction state for this MC. */\n+    StateManager stateMgr;\n+\n+    private static final TraceComponent tc = Tr\n+                    .register(ManagedConnectionImpl.class);\n+\n+    /** Indicates if the Connection supports two phase commit. */\n+    // private boolean is2Phase;\n+    protected boolean is2Phase; // LIDB2110-69\n+\n+    // LIDB???? - change ivAlreadyProcessedInteractionPendingEvent to\n+    // isLazyEnlisted\n+    /**\n+     * Deferred Enlistment/Interaction Pending event.\n+     * <p>\n+     * This value is used when transactionResourceRegistration of MCF is\n+     * dynamic, i.e., whether isDynamicEnlistment is true.\n+     * <p>\n+     * If ivAlreadyProcessedInteractionPendingEvent is true, the connection is\n+     * being enlisted.\n+     */\n+    // boolean ivAlreadyProcessedInteractionPendingEvent;\n+    boolean isLazyEnlisted;\n+\n+    // LIDB???? - remove isDynamicEnlistment\n+    // LIDB???? - remove supportsImplicitHandleReactivation\n+\n+    /** Indicates whether we have detected a fatal Connection error on this MC. */\n+    private boolean connectionErrorDetected;\n+\n+    /** Indicates whether we are currently cleaning up handles. */\n+    protected boolean cleaningUpHandles;\n+\n+    // Connection attributes\n+    private int isolevel, defaultIsolevel;\n+    private Boolean readOnly, defaultReadOnly;\n+    private Map typeMap, defaultTypeMap;\n+    private String catalog, defaultCatalog;\n+    private boolean autoCommit, defaultAutoCommit, currentAutoCommit;\n+\n+    private final Class currClass = ManagedConnectionImpl.class;\n+\n+    /**\n+     * Constructor\n+     */\n+    public ManagedConnectionImpl(ManagedConnectionFactoryImpl mcf,\n+                                 javax.sql.PooledConnection pconn, java.sql.Connection conn,\n+                                 Subject sub, ConnectionRequestInfoImpl cxRequestInfo) throws ResourceException {\n+        if (tc.isEntryEnabled())\n+            Tr.entry(tc, \"<init>\", new Object[] { mcf, conn, cxRequestInfo,\n+                                                  sub, cxRequestInfo });\n+\n+        this.sqlConn = conn;\n+        this.poolConn = pconn;\n+        this.mcf = mcf;\n+        this.cri = cxRequestInfo;\n+        this.subject = sub;\n+        is2Phase = poolConn instanceof javax.sql.XAConnection;\n+\n+        if (subject != null)\n+            subject = copySubject();\n+\n+        handlesInUse = new ArrayList(13);\n+\n+        // LIDB???? - Change ConnectionEventListener\n+        ivEventListeners = new ConnectionEventListener[13];\n+        numListeners = 0;\n+\n+        logWriter = mcf.getLogWriter();\n+\n+        stateMgr = new StateManager();\n+\n+        readOnly = cri.ivReadOnly;\n+\n+        try {\n+            defaultAutoCommit = autoCommit = sqlConn.getAutoCommit();\n+\n+            // d156456, set connection properties.\n+\n+            // defaultTypeMap = typeMap = null;\n+            // defaultCatalog = catalog = sqlConn.getCatalog();\n+            // defaultIsolevel = isolevel = sqlConn.getTransactionIsolation();\n+            // defaultReadOnly = readOnly = new Boolean(sqlConn.isReadOnly());\n+\n+            setTypeMap(defaultTypeMap = cri.getTypeMap());\n+            setCatalog(defaultCatalog = cri.getCatalog());\n+            setTransactionIsolation(defaultIsolevel = cri.getIsolationLevel());\n+            defaultReadOnly = cri.isReadOnly();\n+            if (defaultReadOnly != null)\n+                setReadOnly(defaultReadOnly.booleanValue());\n+\n+            if (tc.isDebugEnabled()) {\n+                Tr.debug(tc, \"autoCommit = \" + autoCommit + \"\\t TypeMap = \"\n+                             + typeMap + \"\\t Catalog = \" + catalog\n+                             + \"\\t Isolation = \"\n+                             + AdapterUtil.getIsolationLevelString(isolevel)\n+                             + \"\\t isReadOnly = \" + readOnly);\n+                Tr.debug(tc, \"default autoCommit = \" + defaultAutoCommit\n+                             + \"\\t default TypeMap = \" + defaultTypeMap\n+                             + \"\\t default Catalog = \" + defaultCatalog\n+                             + \"\\t default Isolation = \"\n+                             + AdapterUtil.getIsolationLevelString(defaultIsolevel)\n+                             + \"\\t default isReadOnly = \" + defaultReadOnly);\n+            }\n+\n+            // d155456 end.\n+        } catch (SQLException sqle) {\n+            if (tc.isDebugEnabled())\n+                Tr.debug(tc, \"Cannot get connection attributes\");\n+            throw new ResourceException(sqle.getMessage());\n+        }\n+\n+        if (tc.isEntryEnabled())\n+            Tr.exit(tc, \"<init>\", this);\n+    }\n+\n+    /**\n+     * @see javax.resource.spi.ManagedConnection#getConnection(Subject, ConnectionRequestInfo)\n+     */\n+    @Override\n+    public Object getConnection(Subject subject,\n+                                ConnectionRequestInfo cxRequestInfo) throws ResourceException {\n+        if (tc.isEntryEnabled())\n+            Tr.entry(tc, \"getConnection\", new Object[] { this, cxRequestInfo });\n+\n+        // @alvinso.1\n+        if (AdapterUtil.getSharingViolation()) {\n+            if (tc.isEntryEnabled())\n+                Tr\n+                                .exit(\n+                                      tc,\n+                                      \"getConnection - throwing SharingViolationException for testing purpose.\",\n+                                      getTransactionStateAsString());\n+\n+            throw new SharingViolationException(\"Tesing of SharingViolationException.\");\n+        }\n+\n+        // if you aren't in a valid state when doing getConnection, you can't\n+        // get a connection\n+        // from this MC\n+\n+        int transactionState = stateMgr.transtate;\n+\n+        if ((transactionState != StateManager.NO_TRANSACTION_ACTIVE)\n+            && (transactionState != StateManager.GLOBAL_TRANSACTION_ACTIVE)\n+            && (transactionState != StateManager.LOCAL_TRANSACTION_ACTIVE)) {\n+\n+            if (tc.isEntryEnabled())\n+                Tr\n+                                .exit(\n+                                      tc,\n+                                      \"getConnection - bad transaction state, throwing exception\",\n+                                      getTransactionStateAsString());\n+\n+            String message = \"Operation 'getConnection' is not permitted for transaction state: \"\n+                             + getTransactionStateAsString();\n+\n+            throw new ResourceException(message);\n+        }\n+\n+        // We Only support JDBC handle here\n+        Object handle = new JdbcConnection(this, sqlConn);\n+\n+        // Only synchronize operations on handlesInUse. [d128891]\n+        synchronized (this) {\n+            handlesInUse.add(handle);\n+        }\n+\n+        if (tc.isEntryEnabled())\n+            Tr.exit(tc, \"getConnection\", handle);\n+\n+        return handle;\n+    }\n+\n+    /**\n+     * @see javax.resource.spi.ManagedConnection#destroy()\n+     */\n+    @Override\n+    public void destroy() throws ResourceException {\n+        if (tc.isEntryEnabled())\n+            Tr.entry(tc, \"destroy\", this);\n+\n+        // Added by gburli - Begin: 06/08/04", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwOTk5Ng=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 272}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTY2NTU2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/spi/OnePhaseXAResourceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo1NzoyOFrOHbOesQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDo1OToxOVrOHbao-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxMDgzMw==", "bodyText": "Probably don't need the version/since", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498310833", "createdAt": "2020-10-01T14:57:28Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/spi/OnePhaseXAResourceImpl.java", "diffHunk": "@@ -0,0 +1,545 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.spi;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+\n+import javax.transaction.xa.XAException;\n+import javax.transaction.xa.XAResource;\n+import javax.transaction.xa.Xid;\n+\n+import com.ibm.adapter.AdapterUtil;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+import com.ibm.ws.rsadapter.exceptions.TransactionException;\n+\n+/**\n+ * This class implements the javax.transaction.xa.XAResource interface.\n+ *\n+ * <p>\n+ * The transaction manager uses the interface to communicate transaction\n+ * association, completion, and recovery to the resource manager. This class is\n+ * to allow one phase resources, which do not have XAResources, to participate\n+ * in global transactions. All actions performed in this class are performed on\n+ * the physical connection. For example, if a commit is issued against this\n+ * resource, the commit is called directly on the physical connection to the\n+ * database.\n+ *\n+ * <P>\n+ * There is only one OnePhaseXAResource instance associated with\n+ * WSRdbManagedConnectionImpl instance.\n+ *\n+ * @version 1.28", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMDA3NA==", "bodyText": "Removed.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498510074", "createdAt": "2020-10-01T20:59:19Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/spi/OnePhaseXAResourceImpl.java", "diffHunk": "@@ -0,0 +1,545 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.spi;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+\n+import javax.transaction.xa.XAException;\n+import javax.transaction.xa.XAResource;\n+import javax.transaction.xa.Xid;\n+\n+import com.ibm.adapter.AdapterUtil;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+import com.ibm.ws.rsadapter.exceptions.TransactionException;\n+\n+/**\n+ * This class implements the javax.transaction.xa.XAResource interface.\n+ *\n+ * <p>\n+ * The transaction manager uses the interface to communicate transaction\n+ * association, completion, and recovery to the resource manager. This class is\n+ * to allow one phase resources, which do not have XAResources, to participate\n+ * in global transactions. All actions performed in this class are performed on\n+ * the physical connection. For example, if a commit is issued against this\n+ * resource, the commit is called directly on the physical connection to the\n+ * database.\n+ *\n+ * <P>\n+ * There is only one OnePhaseXAResource instance associated with\n+ * WSRdbManagedConnectionImpl instance.\n+ *\n+ * @version 1.28", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxMDgzMw=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTY3MTU4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/spi/StateManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo1ODo0NlrOHbOiVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDo1OTo1MVrOHbaqHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxMTc2NA==", "bodyText": "Old name", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498311764", "createdAt": "2020-10-01T14:58:46Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/spi/StateManager.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.spi;\n+\n+import javax.resource.ResourceException;\n+\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+import com.ibm.ws.rsadapter.exceptions.TransactionException;\n+\n+/**\n+ * This class implements the Transaction state machine.\n+ *\n+ * <P>Methods are <B>final</B> because I do not expect this class to be\n+ * sub classed and final methods can be inlined by the JIT compiler\n+ * for a 3X performance improvement.\n+ *\n+ * <p>This class is here even though only SPI code uses it for 2 reasons.\n+ * <ol>\n+ * <li>For packaging convenience as System 390 code will replace the SPI code and keep\n+ * the CCI code. Then they could continue to use the old TX states in the new SPI code.\n+ * <li>We want to insulate the Connection Handle against changes for Sys390 e.g. the\n+ * connection handle could call isValid() and if that signature changes for Sys390 then\n+ * we would have to change CCI code too\n+ * </ol>\n+ *\n+ * <p>Moved back to SPI since the only user of this code is SPI\n+ *\n+ * <P><B><U>Transaction States </U></B>\n+ * <ul>\n+ * <li>TRANSACTION_FAIL\n+ * <li>GLOBAL_TRANSACTION_ACTIVE\n+ * <li>LOCAL_TRANSACTION_ACTIVE\n+ * <li>TRANSACTION_ENDING\n+ * <li>NO_TRANSACTION_ACTIVE\n+ * <li>TRANSACTION_HEURISTIC_END\n+ * </UL>\n+ *\n+ * <p><B><U>Actions</B></U>\n+ * <ol>\n+ * <li>LT_BEGIN\n+ * <li>LT_COMMIT\n+ * <li>LT_ROLLBACK\n+ * <li>XA_START\n+ * <li>XA_END\n+ * <li>XA_END_FAIL\n+ * <li>XA_COMMIT\n+ * <li>XA_ROLLBACK\n+ * <li>XA_FORGET\n+ * <li>EXECUTE\n+ * <li>MC_CLEANUP\n+ * <li>HEURISTIC_END\n+ * <li>XA_READONLY\n+ * </ol>\n+ *\n+ * @see javax.resources.cci.Connection\n+ */\n+public class StateManager {\n+\n+    // these are transaction states\n+    // There could be multiple connection handles with thier own connection states\n+    public static final int NO_TRANSACTION_ACTIVE = 0;\n+    public static final int LOCAL_TRANSACTION_ACTIVE = 1;\n+    public static final int GLOBAL_TRANSACTION_ACTIVE = 2;\n+    public static final int TRANSACTION_FAIL = 3;\n+    public static final int TRANSACTION_ENDING = 4;\n+    public static final int TRANSACTION_HEURISTIC_END = 5;\n+    public static final int RECOVERY_IN_PROGRESS = 6; // d131094\n+\n+    public static final String[] transactions = {\n+                                                  \"NO_TRANSACTION_ACTIVE\",\n+                                                  \"LOCAL_TRANSACTION_ACTIVE\",\n+                                                  \"GLOBAL_TRANSACTION_ACTIVE\",\n+                                                  \"TRANSACTION_FAIL\",\n+                                                  \"TRANSACTION_ENDING\",\n+                                                  \"TRANSACTION_HEURISTIC_END\",\n+                                                  \"RECOVERY_IN_PROGRESS\",\n+                                                  \"INVALID_TX_STATE\" };\n+\n+    // constant for actions\n+    public static final int LT_BEGIN = 1;\n+    public static final int LT_COMMIT = 2;\n+    public static final int LT_ROLLBACK = 3;\n+    public static final int XA_START = 4;\n+    public static final int XA_END = 5;\n+    public static final int XA_END_FAIL = 6;\n+    public static final int XA_COMMIT = 7;\n+    public static final int XA_ROLLBACK = 8;\n+    public static final int XA_RECOVER = 9;\n+    public static final int XA_FORGET = 10;\n+    public static final int EXECUTE = 11;\n+    public static final int MC_CLEANUP = 12;\n+    public static final int HEURISTIC_END = 13;\n+    //d117074\n+    public static final int XA_READONLY = 14;\n+\n+    public static final String[] actions = {\n+                                             \"INVALID_ACTION\",\n+                                             \"LT_BEGIN\",\n+                                             \"LT_COMMIT\",\n+                                             \"LT_ROLLBACK\",\n+                                             \"XA_START\",\n+                                             \"XA_END\",\n+                                             \"XA_END_FAIL\",\n+                                             \"XA_COMMIT\",\n+                                             \"XA_ROLLBACK\",\n+                                             \"XA_RECOVER\",\n+                                             \"XA_FORGET\",\n+                                             \"EXECUTE\",\n+                                             \"MC_CLEANUP\",\n+                                             \"HEURISTIC_END\",\n+                                             \"INVALID_ACTION\",\n+                                             \"XA_READONLY\" //d117074\n+    };\n+\n+    // The Transaction State\n+    int transtate = NO_TRANSACTION_ACTIVE;\n+\n+    //Trace\n+    private static final TraceComponent tc = Tr.register(StateManager.class);\n+\n+    /**\n+     * Constructor\n+     */\n+    public StateManager() {}\n+\n+    /**\n+     * Set a new transaction state only if the state transition is valid.\n+     *\n+     * <p><b>Caller is responsible</b> to synchronize calls to set the state.\n+     *\n+     * @param newAction incoming action that will set state.\n+     * @param validateOnly\n+     *            Need validation only (true) or do you actually want to set the state (false).\n+     * @exception TransactionException\n+     */\n+    private final void setState(int newAction, boolean validateOnly) throws TransactionException {\n+\n+        if (tc.isEntryEnabled())\n+            Tr.entry(tc, \"setState\", getStateAsString());\n+\n+        switch (newAction) {\n+\n+            // Allow only NO_TRANSACTION_ACTIVE -> GLOBAL_TRANSACTION_ACTIVE\n+            case XA_START:\n+                if (transtate == NO_TRANSACTION_ACTIVE) {\n+                    if (validateOnly) {\n+                        return;\n+                    }\n+                    transtate = GLOBAL_TRANSACTION_ACTIVE;\n+                } else {\n+                    throw new TransactionException(actions[newAction], transactions[transtate]);\n+                }\n+                break;\n+\n+            // Allow only GLOBAL_TRANSACTION_ACTIVE -> TRANSACTION_ENDING\n+            case XA_END:\n+                if (transtate == GLOBAL_TRANSACTION_ACTIVE) {\n+                    if (validateOnly) {\n+                        return;\n+                    }\n+\n+                    transtate = TRANSACTION_ENDING;\n+                } else {\n+                    throw new TransactionException(actions[newAction], transactions[transtate]);\n+                }\n+                break;\n+\n+            // Allow only GLOBAL_TRANSACTION_ACTIVE -> TRANSACTION_ENDING\n+            case XA_END_FAIL:\n+                if (transtate == GLOBAL_TRANSACTION_ACTIVE\n+                    || transtate == TRANSACTION_ENDING) //133434\n+                {\n+                    if (validateOnly) {\n+                        return;\n+                    }\n+\n+                    transtate = TRANSACTION_FAIL;\n+                } else {\n+                    throw new TransactionException(actions[newAction], transactions[transtate]);\n+                }\n+                break;\n+\n+            // Allow only  TRANSACTION_ENDING-->NO_TRANSACTION_ACTIVE\n+            case XA_COMMIT:\n+            case XA_READONLY: //d117074\n+                if (transtate == TRANSACTION_ENDING\n+                    || transtate == RECOVERY_IN_PROGRESS) // d131094\n+                {\n+                    if (validateOnly) {\n+                        return;\n+                    }\n+\n+                    transtate = NO_TRANSACTION_ACTIVE;\n+                } else {\n+\n+                    throw new TransactionException(actions[newAction], transactions[transtate]);\n+                }\n+                break;\n+\n+            // Allow only  TRANSACTION_ENDING-->NO_TRANSACTION_ACTIVE\n+            case XA_ROLLBACK:\n+                if (transtate == TRANSACTION_ENDING\n+                    || transtate == TRANSACTION_FAIL\n+                    || transtate == RECOVERY_IN_PROGRESS) // d131094\n+                {\n+                    if (validateOnly) {\n+                        return;\n+                    }\n+                    // In the event of a TRANSACTION_FAIL\n+                    // we dont want other threads to use this transaction until mc cleanup occurs\n+                    // so we keep this TX dirty i.e. in TRANSACTION_FAIL state.\n+                    if (transtate == TRANSACTION_ENDING\n+                        || transtate == RECOVERY_IN_PROGRESS) {\n+                        transtate = NO_TRANSACTION_ACTIVE;\n+                    }\n+\n+                } else {\n+\n+                    throw new TransactionException(actions[newAction], transactions[transtate]);\n+                }\n+                break;\n+\n+            // Set the state to RECOVERY_IN_PROGRESS no matter what the starting state was.\n+            case XA_RECOVER:\n+                transtate = RECOVERY_IN_PROGRESS; // d131094\n+                break;\n+\n+            // Send to NO_TRANSACTION_ACTIVE no matter what the starting state was.\n+            // This is the only time we can clean up our state for XA.\n+            // Even tho the DB would be in a rational state we would be in an in inconsistent state.\n+            // so let us reset to NO_TRANSACTION_ACTIVE\n+            case XA_FORGET:\n+                transtate = NO_TRANSACTION_ACTIVE;\n+                break;\n+\n+            // LT.BEGIN: only allow NO_TRANSACTION_ACTIVE -> LOCAL_TRANSACTION_ACTIVE\n+            case LT_BEGIN:\n+                if (transtate == NO_TRANSACTION_ACTIVE) {\n+                    if (validateOnly) {\n+                        return;\n+                    }\n+                    transtate = LOCAL_TRANSACTION_ACTIVE;\n+                } else {\n+                    throw new TransactionException(actions[newAction], transactions[transtate]);\n+                }\n+                break;\n+\n+            // Allow only Local_Transaction_active -> NO_TRANSACTION_Active\n+            case LT_COMMIT:\n+            case LT_ROLLBACK:\n+                if (transtate == LOCAL_TRANSACTION_ACTIVE) {\n+                    if (validateOnly) {\n+                        return;\n+                    }\n+\n+                    transtate = NO_TRANSACTION_ACTIVE;\n+                } else {\n+                    throw new TransactionException(actions[newAction], transactions[transtate]);\n+                }\n+                break;\n+\n+            // Allow only in transaction_active\n+            case EXECUTE:\n+                if ((transtate == LOCAL_TRANSACTION_ACTIVE)\n+                    || (transtate == GLOBAL_TRANSACTION_ACTIVE)) {\n+                    if (validateOnly)\n+                        return;\n+                } else {\n+                    throw new TransactionException(actions[newAction], transactions[transtate]);\n+                }\n+                break;\n+\n+            // CLEANUP - always set to NO_TRANSACTION_ACTIVE\n+            case MC_CLEANUP:\n+                transtate = NO_TRANSACTION_ACTIVE;\n+                break;\n+\n+            // Send to TRANSACTION_HEURISTIC_END no matter what the starting state was.\n+            case HEURISTIC_END:\n+                transtate = TRANSACTION_HEURISTIC_END;\n+                break;\n+\n+            default:\n+                throw new TransactionException(actions[newAction], transactions[transtate]);\n+        };\n+\n+        if (tc.isEntryEnabled())\n+            Tr.exit(tc, \"setState\", getStateAsString());\n+    }\n+\n+    /**\n+     * Return the current state\n+     *\n+     * @return int Current transaction state\n+     */\n+    public final int getState() {\n+        return transtate;\n+\n+    }\n+\n+    public final void setState(int newAction) throws TransactionException {\n+        setState(newAction, false);\n+    }\n+\n+    //@debrae", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 315}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMDM2Ng==", "bodyText": "Removed", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498510366", "createdAt": "2020-10-01T20:59:51Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/spi/StateManager.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.spi;\n+\n+import javax.resource.ResourceException;\n+\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+import com.ibm.ws.rsadapter.exceptions.TransactionException;\n+\n+/**\n+ * This class implements the Transaction state machine.\n+ *\n+ * <P>Methods are <B>final</B> because I do not expect this class to be\n+ * sub classed and final methods can be inlined by the JIT compiler\n+ * for a 3X performance improvement.\n+ *\n+ * <p>This class is here even though only SPI code uses it for 2 reasons.\n+ * <ol>\n+ * <li>For packaging convenience as System 390 code will replace the SPI code and keep\n+ * the CCI code. Then they could continue to use the old TX states in the new SPI code.\n+ * <li>We want to insulate the Connection Handle against changes for Sys390 e.g. the\n+ * connection handle could call isValid() and if that signature changes for Sys390 then\n+ * we would have to change CCI code too\n+ * </ol>\n+ *\n+ * <p>Moved back to SPI since the only user of this code is SPI\n+ *\n+ * <P><B><U>Transaction States </U></B>\n+ * <ul>\n+ * <li>TRANSACTION_FAIL\n+ * <li>GLOBAL_TRANSACTION_ACTIVE\n+ * <li>LOCAL_TRANSACTION_ACTIVE\n+ * <li>TRANSACTION_ENDING\n+ * <li>NO_TRANSACTION_ACTIVE\n+ * <li>TRANSACTION_HEURISTIC_END\n+ * </UL>\n+ *\n+ * <p><B><U>Actions</B></U>\n+ * <ol>\n+ * <li>LT_BEGIN\n+ * <li>LT_COMMIT\n+ * <li>LT_ROLLBACK\n+ * <li>XA_START\n+ * <li>XA_END\n+ * <li>XA_END_FAIL\n+ * <li>XA_COMMIT\n+ * <li>XA_ROLLBACK\n+ * <li>XA_FORGET\n+ * <li>EXECUTE\n+ * <li>MC_CLEANUP\n+ * <li>HEURISTIC_END\n+ * <li>XA_READONLY\n+ * </ol>\n+ *\n+ * @see javax.resources.cci.Connection\n+ */\n+public class StateManager {\n+\n+    // these are transaction states\n+    // There could be multiple connection handles with thier own connection states\n+    public static final int NO_TRANSACTION_ACTIVE = 0;\n+    public static final int LOCAL_TRANSACTION_ACTIVE = 1;\n+    public static final int GLOBAL_TRANSACTION_ACTIVE = 2;\n+    public static final int TRANSACTION_FAIL = 3;\n+    public static final int TRANSACTION_ENDING = 4;\n+    public static final int TRANSACTION_HEURISTIC_END = 5;\n+    public static final int RECOVERY_IN_PROGRESS = 6; // d131094\n+\n+    public static final String[] transactions = {\n+                                                  \"NO_TRANSACTION_ACTIVE\",\n+                                                  \"LOCAL_TRANSACTION_ACTIVE\",\n+                                                  \"GLOBAL_TRANSACTION_ACTIVE\",\n+                                                  \"TRANSACTION_FAIL\",\n+                                                  \"TRANSACTION_ENDING\",\n+                                                  \"TRANSACTION_HEURISTIC_END\",\n+                                                  \"RECOVERY_IN_PROGRESS\",\n+                                                  \"INVALID_TX_STATE\" };\n+\n+    // constant for actions\n+    public static final int LT_BEGIN = 1;\n+    public static final int LT_COMMIT = 2;\n+    public static final int LT_ROLLBACK = 3;\n+    public static final int XA_START = 4;\n+    public static final int XA_END = 5;\n+    public static final int XA_END_FAIL = 6;\n+    public static final int XA_COMMIT = 7;\n+    public static final int XA_ROLLBACK = 8;\n+    public static final int XA_RECOVER = 9;\n+    public static final int XA_FORGET = 10;\n+    public static final int EXECUTE = 11;\n+    public static final int MC_CLEANUP = 12;\n+    public static final int HEURISTIC_END = 13;\n+    //d117074\n+    public static final int XA_READONLY = 14;\n+\n+    public static final String[] actions = {\n+                                             \"INVALID_ACTION\",\n+                                             \"LT_BEGIN\",\n+                                             \"LT_COMMIT\",\n+                                             \"LT_ROLLBACK\",\n+                                             \"XA_START\",\n+                                             \"XA_END\",\n+                                             \"XA_END_FAIL\",\n+                                             \"XA_COMMIT\",\n+                                             \"XA_ROLLBACK\",\n+                                             \"XA_RECOVER\",\n+                                             \"XA_FORGET\",\n+                                             \"EXECUTE\",\n+                                             \"MC_CLEANUP\",\n+                                             \"HEURISTIC_END\",\n+                                             \"INVALID_ACTION\",\n+                                             \"XA_READONLY\" //d117074\n+    };\n+\n+    // The Transaction State\n+    int transtate = NO_TRANSACTION_ACTIVE;\n+\n+    //Trace\n+    private static final TraceComponent tc = Tr.register(StateManager.class);\n+\n+    /**\n+     * Constructor\n+     */\n+    public StateManager() {}\n+\n+    /**\n+     * Set a new transaction state only if the state transition is valid.\n+     *\n+     * <p><b>Caller is responsible</b> to synchronize calls to set the state.\n+     *\n+     * @param newAction incoming action that will set state.\n+     * @param validateOnly\n+     *            Need validation only (true) or do you actually want to set the state (false).\n+     * @exception TransactionException\n+     */\n+    private final void setState(int newAction, boolean validateOnly) throws TransactionException {\n+\n+        if (tc.isEntryEnabled())\n+            Tr.entry(tc, \"setState\", getStateAsString());\n+\n+        switch (newAction) {\n+\n+            // Allow only NO_TRANSACTION_ACTIVE -> GLOBAL_TRANSACTION_ACTIVE\n+            case XA_START:\n+                if (transtate == NO_TRANSACTION_ACTIVE) {\n+                    if (validateOnly) {\n+                        return;\n+                    }\n+                    transtate = GLOBAL_TRANSACTION_ACTIVE;\n+                } else {\n+                    throw new TransactionException(actions[newAction], transactions[transtate]);\n+                }\n+                break;\n+\n+            // Allow only GLOBAL_TRANSACTION_ACTIVE -> TRANSACTION_ENDING\n+            case XA_END:\n+                if (transtate == GLOBAL_TRANSACTION_ACTIVE) {\n+                    if (validateOnly) {\n+                        return;\n+                    }\n+\n+                    transtate = TRANSACTION_ENDING;\n+                } else {\n+                    throw new TransactionException(actions[newAction], transactions[transtate]);\n+                }\n+                break;\n+\n+            // Allow only GLOBAL_TRANSACTION_ACTIVE -> TRANSACTION_ENDING\n+            case XA_END_FAIL:\n+                if (transtate == GLOBAL_TRANSACTION_ACTIVE\n+                    || transtate == TRANSACTION_ENDING) //133434\n+                {\n+                    if (validateOnly) {\n+                        return;\n+                    }\n+\n+                    transtate = TRANSACTION_FAIL;\n+                } else {\n+                    throw new TransactionException(actions[newAction], transactions[transtate]);\n+                }\n+                break;\n+\n+            // Allow only  TRANSACTION_ENDING-->NO_TRANSACTION_ACTIVE\n+            case XA_COMMIT:\n+            case XA_READONLY: //d117074\n+                if (transtate == TRANSACTION_ENDING\n+                    || transtate == RECOVERY_IN_PROGRESS) // d131094\n+                {\n+                    if (validateOnly) {\n+                        return;\n+                    }\n+\n+                    transtate = NO_TRANSACTION_ACTIVE;\n+                } else {\n+\n+                    throw new TransactionException(actions[newAction], transactions[transtate]);\n+                }\n+                break;\n+\n+            // Allow only  TRANSACTION_ENDING-->NO_TRANSACTION_ACTIVE\n+            case XA_ROLLBACK:\n+                if (transtate == TRANSACTION_ENDING\n+                    || transtate == TRANSACTION_FAIL\n+                    || transtate == RECOVERY_IN_PROGRESS) // d131094\n+                {\n+                    if (validateOnly) {\n+                        return;\n+                    }\n+                    // In the event of a TRANSACTION_FAIL\n+                    // we dont want other threads to use this transaction until mc cleanup occurs\n+                    // so we keep this TX dirty i.e. in TRANSACTION_FAIL state.\n+                    if (transtate == TRANSACTION_ENDING\n+                        || transtate == RECOVERY_IN_PROGRESS) {\n+                        transtate = NO_TRANSACTION_ACTIVE;\n+                    }\n+\n+                } else {\n+\n+                    throw new TransactionException(actions[newAction], transactions[transtate]);\n+                }\n+                break;\n+\n+            // Set the state to RECOVERY_IN_PROGRESS no matter what the starting state was.\n+            case XA_RECOVER:\n+                transtate = RECOVERY_IN_PROGRESS; // d131094\n+                break;\n+\n+            // Send to NO_TRANSACTION_ACTIVE no matter what the starting state was.\n+            // This is the only time we can clean up our state for XA.\n+            // Even tho the DB would be in a rational state we would be in an in inconsistent state.\n+            // so let us reset to NO_TRANSACTION_ACTIVE\n+            case XA_FORGET:\n+                transtate = NO_TRANSACTION_ACTIVE;\n+                break;\n+\n+            // LT.BEGIN: only allow NO_TRANSACTION_ACTIVE -> LOCAL_TRANSACTION_ACTIVE\n+            case LT_BEGIN:\n+                if (transtate == NO_TRANSACTION_ACTIVE) {\n+                    if (validateOnly) {\n+                        return;\n+                    }\n+                    transtate = LOCAL_TRANSACTION_ACTIVE;\n+                } else {\n+                    throw new TransactionException(actions[newAction], transactions[transtate]);\n+                }\n+                break;\n+\n+            // Allow only Local_Transaction_active -> NO_TRANSACTION_Active\n+            case LT_COMMIT:\n+            case LT_ROLLBACK:\n+                if (transtate == LOCAL_TRANSACTION_ACTIVE) {\n+                    if (validateOnly) {\n+                        return;\n+                    }\n+\n+                    transtate = NO_TRANSACTION_ACTIVE;\n+                } else {\n+                    throw new TransactionException(actions[newAction], transactions[transtate]);\n+                }\n+                break;\n+\n+            // Allow only in transaction_active\n+            case EXECUTE:\n+                if ((transtate == LOCAL_TRANSACTION_ACTIVE)\n+                    || (transtate == GLOBAL_TRANSACTION_ACTIVE)) {\n+                    if (validateOnly)\n+                        return;\n+                } else {\n+                    throw new TransactionException(actions[newAction], transactions[transtate]);\n+                }\n+                break;\n+\n+            // CLEANUP - always set to NO_TRANSACTION_ACTIVE\n+            case MC_CLEANUP:\n+                transtate = NO_TRANSACTION_ACTIVE;\n+                break;\n+\n+            // Send to TRANSACTION_HEURISTIC_END no matter what the starting state was.\n+            case HEURISTIC_END:\n+                transtate = TRANSACTION_HEURISTIC_END;\n+                break;\n+\n+            default:\n+                throw new TransactionException(actions[newAction], transactions[transtate]);\n+        };\n+\n+        if (tc.isEntryEnabled())\n+            Tr.exit(tc, \"setState\", getStateAsString());\n+    }\n+\n+    /**\n+     * Return the current state\n+     *\n+     * @return int Current transaction state\n+     */\n+    public final int getState() {\n+        return transtate;\n+\n+    }\n+\n+    public final void setState(int newAction) throws TransactionException {\n+        setState(newAction, false);\n+    }\n+\n+    //@debrae", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxMTc2NA=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 315}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTY3OTM4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/spi/jbv/JBVFATMCF.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTowMDoyMFrOHbOnLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTowMzoxNlrOHbXVMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxMzAwNQ==", "bodyText": "Author", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498313005", "createdAt": "2020-10-01T15:00:20Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/spi/jbv/JBVFATMCF.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.spi.jbv;\n+\n+import javax.validation.constraints.Size;\n+\n+/**\n+ * This class is the interface that is implemented by the Managed Connection\n+ * Factory Objects that are used to test for Java Bean Validation. It is annotated\n+ * with a JavaBean constraint annotation\n+ *\n+ * @author mageorge", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1NTg1OQ==", "bodyText": "Removed", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498455859", "createdAt": "2020-10-01T19:03:16Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/spi/jbv/JBVFATMCF.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.spi.jbv;\n+\n+import javax.validation.constraints.Size;\n+\n+/**\n+ * This class is the interface that is implemented by the Managed Connection\n+ * Factory Objects that are used to test for Java Bean Validation. It is annotated\n+ * with a JavaBean constraint annotation\n+ *\n+ * @author mageorge", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxMzAwNQ=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTY4MzE1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/tra/FVTConcurrentWorkImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTowMToxMlrOHbOppw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDo1NjoxMFrOHbaiuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxMzYzOQ==", "bodyText": "Name", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498313639", "createdAt": "2020-10-01T15:01:12Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/tra/FVTConcurrentWorkImpl.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.tra;\n+\n+import javax.resource.spi.work.WorkEvent;\n+\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * This work implementation supports concurrently delivery of work instance.\n+ */\n+public class FVTConcurrentWorkImpl extends FVTWorkImpl {\n+\n+    private static int concurrentWorkNumber = 0;\n+\n+    // 11/20/03: swai\n+    // Need a workEventNumber to keep tracek how many workEvent has received.\n+    // Notify is called if it is 0.\n+    private static int workEventNumber = 0;\n+    private static boolean allWorksHaveReachedState = false;\n+\n+    // lock object for concurrentWork\n+    private static Object syncObjConcurr = new Object();\n+\n+    // lock object for waiting for desire workEvent\n+    private static Object syncObject = new Object();\n+\n+    private static final TraceComponent tc = Tr.register(FVTConcurrentWorkImpl.class);\n+\n+    /**\n+     * Constructor for FVTConcurrentWorkImpl.\n+     *\n+     * @param workName\n+     */\n+    public FVTConcurrentWorkImpl(String workName) {\n+        super(workName);\n+    }\n+\n+    /**\n+     * @see java.lang.Runnable#run()\n+     */\n+    @Override\n+    public void run() {\n+        if (tc.isEntryEnabled())\n+            Tr.entry(tc, \"run\");\n+\n+        concurrentWorkNumber--;\n+        if (tc.isDebugEnabled())\n+            Tr.debug(tc, \"run\", \"concurrentWorkNumber is \" + concurrentWorkNumber);\n+\n+        synchronized (syncObjConcurr) {\n+            if (tc.isDebugEnabled())\n+                Tr.debug(tc, \"run\", \"Enter the synchronized block\");\n+\n+            while (concurrentWorkNumber > 0) {\n+                try {\n+                    Thread.sleep(100);\n+                } catch (InterruptedException ie) {\n+                    if (tc.isDebugEnabled())\n+                        Tr.debug(tc, \"InterruptedException is thrown\", ie);\n+                    throw new RuntimeException(ie);\n+                }\n+            }\n+            syncObjConcurr.notifyAll();\n+        }\n+\n+        if (tc.isDebugEnabled())\n+            Tr.debug(tc, \"run\", \"Exit the synchronized block\");\n+\n+    }\n+\n+    /**\n+     * Returns the concurrentWorkNumber.\n+     *\n+     * @return int\n+     */\n+    public static int getConcurrentWorkNumber() {\n+        return concurrentWorkNumber;\n+    }\n+\n+    /**\n+     * Sets the concurrentWorkNumber.\n+     *\n+     * @param concurrentWorkNumber The concurrentWorkNumber to set\n+     */\n+    public static void setConcurrentWorkNumber(int workNumber) {\n+        concurrentWorkNumber = workNumber;\n+\n+        // 11/20/03: swai", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwODQ3NQ==", "bodyText": "Removed all swai references.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498508475", "createdAt": "2020-10-01T20:56:10Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/tra/FVTConcurrentWorkImpl.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.tra;\n+\n+import javax.resource.spi.work.WorkEvent;\n+\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * This work implementation supports concurrently delivery of work instance.\n+ */\n+public class FVTConcurrentWorkImpl extends FVTWorkImpl {\n+\n+    private static int concurrentWorkNumber = 0;\n+\n+    // 11/20/03: swai\n+    // Need a workEventNumber to keep tracek how many workEvent has received.\n+    // Notify is called if it is 0.\n+    private static int workEventNumber = 0;\n+    private static boolean allWorksHaveReachedState = false;\n+\n+    // lock object for concurrentWork\n+    private static Object syncObjConcurr = new Object();\n+\n+    // lock object for waiting for desire workEvent\n+    private static Object syncObject = new Object();\n+\n+    private static final TraceComponent tc = Tr.register(FVTConcurrentWorkImpl.class);\n+\n+    /**\n+     * Constructor for FVTConcurrentWorkImpl.\n+     *\n+     * @param workName\n+     */\n+    public FVTConcurrentWorkImpl(String workName) {\n+        super(workName);\n+    }\n+\n+    /**\n+     * @see java.lang.Runnable#run()\n+     */\n+    @Override\n+    public void run() {\n+        if (tc.isEntryEnabled())\n+            Tr.entry(tc, \"run\");\n+\n+        concurrentWorkNumber--;\n+        if (tc.isDebugEnabled())\n+            Tr.debug(tc, \"run\", \"concurrentWorkNumber is \" + concurrentWorkNumber);\n+\n+        synchronized (syncObjConcurr) {\n+            if (tc.isDebugEnabled())\n+                Tr.debug(tc, \"run\", \"Enter the synchronized block\");\n+\n+            while (concurrentWorkNumber > 0) {\n+                try {\n+                    Thread.sleep(100);\n+                } catch (InterruptedException ie) {\n+                    if (tc.isDebugEnabled())\n+                        Tr.debug(tc, \"InterruptedException is thrown\", ie);\n+                    throw new RuntimeException(ie);\n+                }\n+            }\n+            syncObjConcurr.notifyAll();\n+        }\n+\n+        if (tc.isDebugEnabled())\n+            Tr.debug(tc, \"run\", \"Exit the synchronized block\");\n+\n+    }\n+\n+    /**\n+     * Returns the concurrentWorkNumber.\n+     *\n+     * @return int\n+     */\n+    public static int getConcurrentWorkNumber() {\n+        return concurrentWorkNumber;\n+    }\n+\n+    /**\n+     * Sets the concurrentWorkNumber.\n+     *\n+     * @param concurrentWorkNumber The concurrentWorkNumber to set\n+     */\n+    public static void setConcurrentWorkNumber(int workNumber) {\n+        concurrentWorkNumber = workNumber;\n+\n+        // 11/20/03: swai", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxMzYzOQ=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTY4ODU5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/tra/FVTWorkImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTowMjoyMVrOHbOs7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDo1NjoyMVrOHbajLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxNDQ3Ng==", "bodyText": "Couple swai's in this file", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498314476", "createdAt": "2020-10-01T15:02:21Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/tra/FVTWorkImpl.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.tra;\n+\n+import javax.resource.spi.ResourceAdapter;\n+import javax.resource.spi.ResourceAdapterAssociation;\n+import javax.resource.spi.work.Work;\n+import javax.resource.spi.work.WorkEvent;\n+import javax.resource.spi.work.WorkException;\n+\n+import com.ibm.adapter.AdapterUtil;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * <p>This class implements the Work interface, which could be executed by the WorkManager upon\n+ * submission. This is a generic class which users can extend to customize their work instances\n+ * when writing test cases.</p>\n+ *\n+ * <p>Users are not encouraged to spawn a thread in the subclass implementation. However,\n+ * having a work implementation to spawn a thread is an interesting test case. </p>\n+ */\n+public abstract class FVTWorkImpl implements Work, ResourceAdapterAssociation {\n+\n+    private static final TraceComponent tc = Tr.register(FVTWorkImpl.class);\n+\n+    /** work name. Work name is used to identiy the work instance. */\n+    protected String name;\n+\n+    /** work state */\n+    protected int state;\n+\n+    private ResourceAdapter resourceAdapter;\n+\n+    // 11/20/03: swai", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwODU4OQ==", "bodyText": "Removed all swai references.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498508589", "createdAt": "2020-10-01T20:56:21Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/tra/FVTWorkImpl.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.tra;\n+\n+import javax.resource.spi.ResourceAdapter;\n+import javax.resource.spi.ResourceAdapterAssociation;\n+import javax.resource.spi.work.Work;\n+import javax.resource.spi.work.WorkEvent;\n+import javax.resource.spi.work.WorkException;\n+\n+import com.ibm.adapter.AdapterUtil;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * <p>This class implements the Work interface, which could be executed by the WorkManager upon\n+ * submission. This is a generic class which users can extend to customize their work instances\n+ * when writing test cases.</p>\n+ *\n+ * <p>Users are not encouraged to spawn a thread in the subclass implementation. However,\n+ * having a work implementation to spawn a thread is an interesting test case. </p>\n+ */\n+public abstract class FVTWorkImpl implements Work, ResourceAdapterAssociation {\n+\n+    private static final TraceComponent tc = Tr.register(FVTWorkImpl.class);\n+\n+    /** work name. Work name is used to identiy the work instance. */\n+    protected String name;\n+\n+    /** work state */\n+    protected int state;\n+\n+    private ResourceAdapter resourceAdapter;\n+\n+    // 11/20/03: swai", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxNDQ3Ng=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTY5MjM3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/tra/XidImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTowMzoxN1rOHbOvbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDo1NjoxNVrOHbai7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxNTExNg==", "bodyText": "swai", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498315116", "createdAt": "2020-10-01T15:03:17Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/tra/XidImpl.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.tra;\n+\n+import javax.transaction.xa.XAException;\n+import javax.transaction.xa.Xid;\n+\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * <p>This class implements interface javax.transaction.xa.Xid. This class is used to represent\n+ * an imported transaction from the message provider.</p>\n+ */\n+public class XidImpl implements Xid {\n+\n+    /** format ID */\n+    protected int formatId;\n+\n+    /** global transaction id */\n+    protected byte gtrid[];\n+\n+    /** branch qualifier */\n+    protected byte bqual[];\n+\n+    private static final TraceComponent tc = Tr.register(XidImpl.class);\n+\n+    public XidImpl(int formatId, byte gtrid[], byte bqual[]) {\n+        this.formatId = formatId;\n+        this.gtrid = gtrid;\n+        this.bqual = bqual;\n+    }\n+\n+    /**\n+     * <p>Obtain the format identifier part of the XID. </p>\n+     *\n+     * @return Format identifier. O means the OSI CCR format.\n+     */\n+    @Override\n+    public int getFormatId() {\n+        return formatId;\n+    }\n+\n+    /**\n+     * <p>Obtain the global transaction identifier part of XID as an array of bytes. </p>\n+     *\n+     * @return Global transaction identifier.\n+     */\n+    @Override\n+    public byte[] getGlobalTransactionId() {\n+        return gtrid;\n+\n+    }\n+\n+    /**\n+     * <p>Obtain the transaction branch identifier part of XID as an array of bytes. </p>\n+     *\n+     * @return Global transaction identifier.\n+     */\n+    @Override\n+    public byte[] getBranchQualifier() {\n+        return bqual;\n+    }\n+\n+    /**\n+     * Create a XidImpl object\n+     *\n+     * @param the brank qualifier id\n+     *\n+     * @return XidImpl the XidImpl object.\n+     */\n+    public static XidImpl createXid(int bids) throws XAException {\n+\n+        byte[] gid = new byte[1];\n+        gid[0] = (byte) 9;\n+        byte[] bid = new byte[1];\n+        bid[0] = (byte) bids;\n+        byte[] gtrid = new byte[64];\n+        byte[] bqual = new byte[64];\n+        System.arraycopy(gid, 0, gtrid, 0, 1);\n+        System.arraycopy(bid, 0, bqual, 0, 1);\n+        XidImpl xid = new XidImpl(0x1234, gtrid, bqual);\n+\n+        return xid;\n+    }\n+\n+    // swai: d177210 starts\n+    /**\n+     * Create a XidImpl object\n+     *\n+     * @param the global tran id\n+     * @param the branch qualifier id\n+     *\n+     * @return XidImpl the XidImpl object.\n+     */\n+    public static XidImpl createXid(int gTranId, int bids) throws XAException {\n+        //byte[] gid = new byte[1];\n+        //gid[0] = (byte) gTranId;\n+        //byte[] bid = new byte[1];\n+        //bid[0] = (byte) branchId;\n+        byte[] gtrid = new byte[64];\n+        byte[] bqual = new byte[64];\n+        gtrid[0] = (byte) gTranId;\n+        bqual[0] = (byte) bids;\n+        XidImpl xid = new XidImpl(0x1234, gtrid, bqual);\n+\n+        return xid;\n+    }\n+\n+    // swai: d177210 ends", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwODUyNw==", "bodyText": "Removed all swai references.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498508527", "createdAt": "2020-10-01T20:56:15Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/tra/XidImpl.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.tra;\n+\n+import javax.transaction.xa.XAException;\n+import javax.transaction.xa.Xid;\n+\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * <p>This class implements interface javax.transaction.xa.Xid. This class is used to represent\n+ * an imported transaction from the message provider.</p>\n+ */\n+public class XidImpl implements Xid {\n+\n+    /** format ID */\n+    protected int formatId;\n+\n+    /** global transaction id */\n+    protected byte gtrid[];\n+\n+    /** branch qualifier */\n+    protected byte bqual[];\n+\n+    private static final TraceComponent tc = Tr.register(XidImpl.class);\n+\n+    public XidImpl(int formatId, byte gtrid[], byte bqual[]) {\n+        this.formatId = formatId;\n+        this.gtrid = gtrid;\n+        this.bqual = bqual;\n+    }\n+\n+    /**\n+     * <p>Obtain the format identifier part of the XID. </p>\n+     *\n+     * @return Format identifier. O means the OSI CCR format.\n+     */\n+    @Override\n+    public int getFormatId() {\n+        return formatId;\n+    }\n+\n+    /**\n+     * <p>Obtain the global transaction identifier part of XID as an array of bytes. </p>\n+     *\n+     * @return Global transaction identifier.\n+     */\n+    @Override\n+    public byte[] getGlobalTransactionId() {\n+        return gtrid;\n+\n+    }\n+\n+    /**\n+     * <p>Obtain the transaction branch identifier part of XID as an array of bytes. </p>\n+     *\n+     * @return Global transaction identifier.\n+     */\n+    @Override\n+    public byte[] getBranchQualifier() {\n+        return bqual;\n+    }\n+\n+    /**\n+     * Create a XidImpl object\n+     *\n+     * @param the brank qualifier id\n+     *\n+     * @return XidImpl the XidImpl object.\n+     */\n+    public static XidImpl createXid(int bids) throws XAException {\n+\n+        byte[] gid = new byte[1];\n+        gid[0] = (byte) 9;\n+        byte[] bid = new byte[1];\n+        bid[0] = (byte) bids;\n+        byte[] gtrid = new byte[64];\n+        byte[] bqual = new byte[64];\n+        System.arraycopy(gid, 0, gtrid, 0, 1);\n+        System.arraycopy(bid, 0, bqual, 0, 1);\n+        XidImpl xid = new XidImpl(0x1234, gtrid, bqual);\n+\n+        return xid;\n+    }\n+\n+    // swai: d177210 starts\n+    /**\n+     * Create a XidImpl object\n+     *\n+     * @param the global tran id\n+     * @param the branch qualifier id\n+     *\n+     * @return XidImpl the XidImpl object.\n+     */\n+    public static XidImpl createXid(int gTranId, int bids) throws XAException {\n+        //byte[] gid = new byte[1];\n+        //gid[0] = (byte) gTranId;\n+        //byte[] bid = new byte[1];\n+        //bid[0] = (byte) branchId;\n+        byte[] gtrid = new byte[64];\n+        byte[] bqual = new byte[64];\n+        gtrid[0] = (byte) gTranId;\n+        bqual[0] = (byte) bids;\n+        XidImpl xid = new XidImpl(0x1234, gtrid, bqual);\n+\n+        return xid;\n+    }\n+\n+    // swai: d177210 ends", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxNTExNg=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTY5MjkwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/tra/XidImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTowMzoyN1rOHbOvzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTowMDozMlrOHbarXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxNTIxNA==", "bodyText": "Jian", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498315214", "createdAt": "2020-10-01T15:03:27Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/tra/XidImpl.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.tra;\n+\n+import javax.transaction.xa.XAException;\n+import javax.transaction.xa.Xid;\n+\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * <p>This class implements interface javax.transaction.xa.Xid. This class is used to represent\n+ * an imported transaction from the message provider.</p>\n+ */\n+public class XidImpl implements Xid {\n+\n+    /** format ID */\n+    protected int formatId;\n+\n+    /** global transaction id */\n+    protected byte gtrid[];\n+\n+    /** branch qualifier */\n+    protected byte bqual[];\n+\n+    private static final TraceComponent tc = Tr.register(XidImpl.class);\n+\n+    public XidImpl(int formatId, byte gtrid[], byte bqual[]) {\n+        this.formatId = formatId;\n+        this.gtrid = gtrid;\n+        this.bqual = bqual;\n+    }\n+\n+    /**\n+     * <p>Obtain the format identifier part of the XID. </p>\n+     *\n+     * @return Format identifier. O means the OSI CCR format.\n+     */\n+    @Override\n+    public int getFormatId() {\n+        return formatId;\n+    }\n+\n+    /**\n+     * <p>Obtain the global transaction identifier part of XID as an array of bytes. </p>\n+     *\n+     * @return Global transaction identifier.\n+     */\n+    @Override\n+    public byte[] getGlobalTransactionId() {\n+        return gtrid;\n+\n+    }\n+\n+    /**\n+     * <p>Obtain the transaction branch identifier part of XID as an array of bytes. </p>\n+     *\n+     * @return Global transaction identifier.\n+     */\n+    @Override\n+    public byte[] getBranchQualifier() {\n+        return bqual;\n+    }\n+\n+    /**\n+     * Create a XidImpl object\n+     *\n+     * @param the brank qualifier id\n+     *\n+     * @return XidImpl the XidImpl object.\n+     */\n+    public static XidImpl createXid(int bids) throws XAException {\n+\n+        byte[] gid = new byte[1];\n+        gid[0] = (byte) 9;\n+        byte[] bid = new byte[1];\n+        bid[0] = (byte) bids;\n+        byte[] gtrid = new byte[64];\n+        byte[] bqual = new byte[64];\n+        System.arraycopy(gid, 0, gtrid, 0, 1);\n+        System.arraycopy(bid, 0, bqual, 0, 1);\n+        XidImpl xid = new XidImpl(0x1234, gtrid, bqual);\n+\n+        return xid;\n+    }\n+\n+    // swai: d177210 starts\n+    /**\n+     * Create a XidImpl object\n+     *\n+     * @param the global tran id\n+     * @param the branch qualifier id\n+     *\n+     * @return XidImpl the XidImpl object.\n+     */\n+    public static XidImpl createXid(int gTranId, int bids) throws XAException {\n+        //byte[] gid = new byte[1];\n+        //gid[0] = (byte) gTranId;\n+        //byte[] bid = new byte[1];\n+        //bid[0] = (byte) branchId;\n+        byte[] gtrid = new byte[64];\n+        byte[] bqual = new byte[64];\n+        gtrid[0] = (byte) gTranId;\n+        bqual[0] = (byte) bids;\n+        XidImpl xid = new XidImpl(0x1234, gtrid, bqual);\n+\n+        return xid;\n+    }\n+\n+    // swai: d177210 ends\n+\n+    /**\n+     * <p>Set the format identifier part of the XID. </p>\n+     *\n+     * @return Format identifier. O means the OSI CCR format.\n+     */\n+    public void setFormatId(int formatId) {\n+        this.formatId = formatId;\n+    }\n+\n+    /**\n+     * <p>Override the equals method in order to see if a supplied Xid is the\n+     * same as the one in comparison.\n+     *\n+     * <p>Value comparison.</p>\n+     *\n+     * @param Xid Xid object for comparison\n+     * @return boolean\n+     */\n+    @Override\n+    public boolean equals(Object o) {\n+\n+        // Ask Jian whether I should override equals method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMDY4NQ==", "bodyText": "removed", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498510685", "createdAt": "2020-10-01T21:00:32Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/tra/XidImpl.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.tra;\n+\n+import javax.transaction.xa.XAException;\n+import javax.transaction.xa.Xid;\n+\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * <p>This class implements interface javax.transaction.xa.Xid. This class is used to represent\n+ * an imported transaction from the message provider.</p>\n+ */\n+public class XidImpl implements Xid {\n+\n+    /** format ID */\n+    protected int formatId;\n+\n+    /** global transaction id */\n+    protected byte gtrid[];\n+\n+    /** branch qualifier */\n+    protected byte bqual[];\n+\n+    private static final TraceComponent tc = Tr.register(XidImpl.class);\n+\n+    public XidImpl(int formatId, byte gtrid[], byte bqual[]) {\n+        this.formatId = formatId;\n+        this.gtrid = gtrid;\n+        this.bqual = bqual;\n+    }\n+\n+    /**\n+     * <p>Obtain the format identifier part of the XID. </p>\n+     *\n+     * @return Format identifier. O means the OSI CCR format.\n+     */\n+    @Override\n+    public int getFormatId() {\n+        return formatId;\n+    }\n+\n+    /**\n+     * <p>Obtain the global transaction identifier part of XID as an array of bytes. </p>\n+     *\n+     * @return Global transaction identifier.\n+     */\n+    @Override\n+    public byte[] getGlobalTransactionId() {\n+        return gtrid;\n+\n+    }\n+\n+    /**\n+     * <p>Obtain the transaction branch identifier part of XID as an array of bytes. </p>\n+     *\n+     * @return Global transaction identifier.\n+     */\n+    @Override\n+    public byte[] getBranchQualifier() {\n+        return bqual;\n+    }\n+\n+    /**\n+     * Create a XidImpl object\n+     *\n+     * @param the brank qualifier id\n+     *\n+     * @return XidImpl the XidImpl object.\n+     */\n+    public static XidImpl createXid(int bids) throws XAException {\n+\n+        byte[] gid = new byte[1];\n+        gid[0] = (byte) 9;\n+        byte[] bid = new byte[1];\n+        bid[0] = (byte) bids;\n+        byte[] gtrid = new byte[64];\n+        byte[] bqual = new byte[64];\n+        System.arraycopy(gid, 0, gtrid, 0, 1);\n+        System.arraycopy(bid, 0, bqual, 0, 1);\n+        XidImpl xid = new XidImpl(0x1234, gtrid, bqual);\n+\n+        return xid;\n+    }\n+\n+    // swai: d177210 starts\n+    /**\n+     * Create a XidImpl object\n+     *\n+     * @param the global tran id\n+     * @param the branch qualifier id\n+     *\n+     * @return XidImpl the XidImpl object.\n+     */\n+    public static XidImpl createXid(int gTranId, int bids) throws XAException {\n+        //byte[] gid = new byte[1];\n+        //gid[0] = (byte) gTranId;\n+        //byte[] bid = new byte[1];\n+        //bid[0] = (byte) branchId;\n+        byte[] gtrid = new byte[64];\n+        byte[] bqual = new byte[64];\n+        gtrid[0] = (byte) gTranId;\n+        bqual[0] = (byte) bids;\n+        XidImpl xid = new XidImpl(0x1234, gtrid, bqual);\n+\n+        return xid;\n+    }\n+\n+    // swai: d177210 ends\n+\n+    /**\n+     * <p>Set the format identifier part of the XID. </p>\n+     *\n+     * @return Format identifier. O means the OSI CCR format.\n+     */\n+    public void setFormatId(int formatId) {\n+        this.formatId = formatId;\n+    }\n+\n+    /**\n+     * <p>Override the equals method in order to see if a supplied Xid is the\n+     * same as the one in comparison.\n+     *\n+     * <p>Value comparison.</p>\n+     *\n+     * @param Xid Xid object for comparison\n+     * @return boolean\n+     */\n+    @Override\n+    public boolean equals(Object o) {\n+\n+        // Ask Jian whether I should override equals method.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxNTIxNA=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTY5OTY3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/work/FVTNestedJCA16WorkImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTowNDo1NlrOHbO0OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTowMDo1MlrOHbar8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxNjM0NA==", "bodyText": "author", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498316344", "createdAt": "2020-10-01T15:04:56Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/work/FVTNestedJCA16WorkImpl.java", "diffHunk": "@@ -0,0 +1,399 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.work;\n+\n+import java.util.List;\n+\n+import javax.resource.ResourceException;\n+import javax.resource.spi.work.ExecutionContext;\n+import javax.resource.spi.work.WorkContext;\n+import javax.resource.spi.work.WorkException;\n+import javax.resource.spi.work.WorkManager;\n+import javax.transaction.xa.Xid;\n+\n+import com.ibm.adapter.AdapterUtil;\n+import com.ibm.adapter.message.FVTMessage;\n+import com.ibm.adapter.message.FVTMessageProvider;\n+import com.ibm.adapter.message.MessageWaitTimeoutException;\n+import com.ibm.adapter.tra.FVTWorkImpl;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * @author jroast", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMDgzNQ==", "bodyText": "Removed.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498510835", "createdAt": "2020-10-01T21:00:52Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/work/FVTNestedJCA16WorkImpl.java", "diffHunk": "@@ -0,0 +1,399 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.work;\n+\n+import java.util.List;\n+\n+import javax.resource.ResourceException;\n+import javax.resource.spi.work.ExecutionContext;\n+import javax.resource.spi.work.WorkContext;\n+import javax.resource.spi.work.WorkException;\n+import javax.resource.spi.work.WorkManager;\n+import javax.transaction.xa.Xid;\n+\n+import com.ibm.adapter.AdapterUtil;\n+import com.ibm.adapter.message.FVTMessage;\n+import com.ibm.adapter.message.FVTMessageProvider;\n+import com.ibm.adapter.message.MessageWaitTimeoutException;\n+import com.ibm.adapter.tra.FVTWorkImpl;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * @author jroast", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxNjM0NA=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTcwMjYwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/work/FVTNestedJCA16WorkImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTowNTozMlrOHbO2Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTowMzo1MFrOHbXWTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxNjgxOQ==", "bodyText": "Is this a CMVC menu reference? Probably Eclipse, I suppose.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498316819", "createdAt": "2020-10-01T15:05:32Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/work/FVTNestedJCA16WorkImpl.java", "diffHunk": "@@ -0,0 +1,399 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.work;\n+\n+import java.util.List;\n+\n+import javax.resource.ResourceException;\n+import javax.resource.spi.work.ExecutionContext;\n+import javax.resource.spi.work.WorkContext;\n+import javax.resource.spi.work.WorkException;\n+import javax.resource.spi.work.WorkManager;\n+import javax.transaction.xa.Xid;\n+\n+import com.ibm.adapter.AdapterUtil;\n+import com.ibm.adapter.message.FVTMessage;\n+import com.ibm.adapter.message.FVTMessageProvider;\n+import com.ibm.adapter.message.MessageWaitTimeoutException;\n+import com.ibm.adapter.tra.FVTWorkImpl;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * @author jroast\n+ *\n+ *         To change the template for this generated type comment go to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1NjE0MQ==", "bodyText": "Removed author. I didn't touch any of the templated comments from eclipse.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498456141", "createdAt": "2020-10-01T19:03:50Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/work/FVTNestedJCA16WorkImpl.java", "diffHunk": "@@ -0,0 +1,399 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.work;\n+\n+import java.util.List;\n+\n+import javax.resource.ResourceException;\n+import javax.resource.spi.work.ExecutionContext;\n+import javax.resource.spi.work.WorkContext;\n+import javax.resource.spi.work.WorkException;\n+import javax.resource.spi.work.WorkManager;\n+import javax.transaction.xa.Xid;\n+\n+import com.ibm.adapter.AdapterUtil;\n+import com.ibm.adapter.message.FVTMessage;\n+import com.ibm.adapter.message.FVTMessageProvider;\n+import com.ibm.adapter.message.MessageWaitTimeoutException;\n+import com.ibm.adapter.tra.FVTWorkImpl;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * @author jroast\n+ *\n+ *         To change the template for this generated type comment go to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxNjgxOQ=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTcwNDkyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/work/FVTNestedWorkImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTowNjowM1rOHbO3hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTowMzo1NlrOHbXWfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxNzE5MQ==", "bodyText": "Author", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498317191", "createdAt": "2020-10-01T15:06:03Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/work/FVTNestedWorkImpl.java", "diffHunk": "@@ -0,0 +1,467 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.work;\n+\n+import javax.resource.ResourceException;\n+import javax.resource.spi.work.ExecutionContext;\n+import javax.resource.spi.work.WorkException;\n+import javax.resource.spi.work.WorkManager;\n+import javax.transaction.xa.Xid;\n+\n+import com.ibm.adapter.AdapterUtil;\n+import com.ibm.adapter.message.FVTMessage;\n+import com.ibm.adapter.message.FVTMessageProvider;\n+import com.ibm.adapter.message.MessageWaitTimeoutException;\n+import com.ibm.adapter.tra.FVTWorkImpl;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * @author alvinso", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1NjE5MQ==", "bodyText": "Removed", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498456191", "createdAt": "2020-10-01T19:03:56Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/work/FVTNestedWorkImpl.java", "diffHunk": "@@ -0,0 +1,467 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.work;\n+\n+import javax.resource.ResourceException;\n+import javax.resource.spi.work.ExecutionContext;\n+import javax.resource.spi.work.WorkException;\n+import javax.resource.spi.work.WorkManager;\n+import javax.transaction.xa.Xid;\n+\n+import com.ibm.adapter.AdapterUtil;\n+import com.ibm.adapter.message.FVTMessage;\n+import com.ibm.adapter.message.FVTMessageProvider;\n+import com.ibm.adapter.message.MessageWaitTimeoutException;\n+import com.ibm.adapter.tra.FVTWorkImpl;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * @author alvinso", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxNzE5MQ=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTcwNjM3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/work/FVTNestedWorkImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTowNjoxOVrOHbO4Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDo1NjozMFrOHbajfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxNzQxNQ==", "bodyText": "swai refs in this file", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498317415", "createdAt": "2020-10-01T15:06:19Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/work/FVTNestedWorkImpl.java", "diffHunk": "@@ -0,0 +1,467 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.work;\n+\n+import javax.resource.ResourceException;\n+import javax.resource.spi.work.ExecutionContext;\n+import javax.resource.spi.work.WorkException;\n+import javax.resource.spi.work.WorkManager;\n+import javax.transaction.xa.Xid;\n+\n+import com.ibm.adapter.AdapterUtil;\n+import com.ibm.adapter.message.FVTMessage;\n+import com.ibm.adapter.message.FVTMessageProvider;\n+import com.ibm.adapter.message.MessageWaitTimeoutException;\n+import com.ibm.adapter.tra.FVTWorkImpl;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * @author alvinso\n+ *\n+ *         To change the template for this generated type comment go to\n+ *         Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments\n+ */\n+public class FVTNestedWorkImpl extends FVTComplexWorkImpl {\n+\n+    /** The FVTMessage object */\n+    // FVTMessage fvtMessage;\n+\n+    /** the FVT work dispatcher */\n+    // FVTWorkDispatcher workDispatcher;\n+\n+    // 11/26/03: swai\n+    /** the work name of the child nested work */\n+    String workNameChild;\n+\n+    /** the work name of the parent work */\n+    String workName;\n+\n+    /** work type of child nested work */\n+    int doWorkType;\n+    int waitTime;\n+    int state;\n+    Xid xid = null;\n+\n+    /** Object used for synchronization */\n+    // protected Object syncObj = new Object();\n+\n+    /** indicate whether the message delivery method is timed out or not */\n+    protected boolean timedout = false;\n+\n+    private static final TraceComponent tc = Tr\n+                    .register(FVTNestedWorkImpl.class);\n+\n+    /**\n+     * Constructor for FVTNestedWorkImpl.\n+     *\n+     * @param workName\n+     *            the name of the work\n+     * @param message\n+     *            the FVTMessage object\n+     * @param workDispatcher\n+     *            the work dispatcher\n+     * @param nestedDoWorkType\n+     *            the work type of child nested work\n+     * @param waitTime\n+     *            This parameter specifies the maximum time for waiting the work\n+     *            to reach the specified state. Once the waitTime is reached,\n+     *            the method will return even if the work instance hasn't reach\n+     *            the specified state yet.\n+     * @param state\n+     *            the state which the work instance has reached when the method\n+     *            call returns.\n+     */\n+    public FVTNestedWorkImpl(String workName, FVTMessage message,\n+                             FVTWorkDispatcher workDispatcher, int nestedDoWorkType,\n+                             int waitTime, int state, Xid xid) {\n+        super(workName, message, workDispatcher);\n+        if (tc.isDebugEnabled())\n+            Tr.entry(tc, \"<init>\", new Object[] { workName, message,\n+                                                  workDispatcher, new Integer(nestedDoWorkType),\n+                                                  new Integer(waitTime), new Integer(state), xid });\n+        this.fvtMessage = message;\n+        this.workDispatcher = workDispatcher;\n+        this.workName = workName;\n+        // 11/26/03: swai\n+        this.workNameChild = workName + \"_child\";\n+        this.doWorkType = nestedDoWorkType;\n+        this.waitTime = waitTime;\n+        this.state = state;\n+        this.xid = xid;\n+    }\n+\n+    @Override\n+    public void run() {\n+        if (tc.isDebugEnabled())\n+            Tr.entry(tc, \"run\", workName);\n+\n+        // 11/26/03: swai", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwODY3MA==", "bodyText": "Removed all swai references.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498508670", "createdAt": "2020-10-01T20:56:30Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/work/FVTNestedWorkImpl.java", "diffHunk": "@@ -0,0 +1,467 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.work;\n+\n+import javax.resource.ResourceException;\n+import javax.resource.spi.work.ExecutionContext;\n+import javax.resource.spi.work.WorkException;\n+import javax.resource.spi.work.WorkManager;\n+import javax.transaction.xa.Xid;\n+\n+import com.ibm.adapter.AdapterUtil;\n+import com.ibm.adapter.message.FVTMessage;\n+import com.ibm.adapter.message.FVTMessageProvider;\n+import com.ibm.adapter.message.MessageWaitTimeoutException;\n+import com.ibm.adapter.tra.FVTWorkImpl;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * @author alvinso\n+ *\n+ *         To change the template for this generated type comment go to\n+ *         Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments\n+ */\n+public class FVTNestedWorkImpl extends FVTComplexWorkImpl {\n+\n+    /** The FVTMessage object */\n+    // FVTMessage fvtMessage;\n+\n+    /** the FVT work dispatcher */\n+    // FVTWorkDispatcher workDispatcher;\n+\n+    // 11/26/03: swai\n+    /** the work name of the child nested work */\n+    String workNameChild;\n+\n+    /** the work name of the parent work */\n+    String workName;\n+\n+    /** work type of child nested work */\n+    int doWorkType;\n+    int waitTime;\n+    int state;\n+    Xid xid = null;\n+\n+    /** Object used for synchronization */\n+    // protected Object syncObj = new Object();\n+\n+    /** indicate whether the message delivery method is timed out or not */\n+    protected boolean timedout = false;\n+\n+    private static final TraceComponent tc = Tr\n+                    .register(FVTNestedWorkImpl.class);\n+\n+    /**\n+     * Constructor for FVTNestedWorkImpl.\n+     *\n+     * @param workName\n+     *            the name of the work\n+     * @param message\n+     *            the FVTMessage object\n+     * @param workDispatcher\n+     *            the work dispatcher\n+     * @param nestedDoWorkType\n+     *            the work type of child nested work\n+     * @param waitTime\n+     *            This parameter specifies the maximum time for waiting the work\n+     *            to reach the specified state. Once the waitTime is reached,\n+     *            the method will return even if the work instance hasn't reach\n+     *            the specified state yet.\n+     * @param state\n+     *            the state which the work instance has reached when the method\n+     *            call returns.\n+     */\n+    public FVTNestedWorkImpl(String workName, FVTMessage message,\n+                             FVTWorkDispatcher workDispatcher, int nestedDoWorkType,\n+                             int waitTime, int state, Xid xid) {\n+        super(workName, message, workDispatcher);\n+        if (tc.isDebugEnabled())\n+            Tr.entry(tc, \"<init>\", new Object[] { workName, message,\n+                                                  workDispatcher, new Integer(nestedDoWorkType),\n+                                                  new Integer(waitTime), new Integer(state), xid });\n+        this.fvtMessage = message;\n+        this.workDispatcher = workDispatcher;\n+        this.workName = workName;\n+        // 11/26/03: swai\n+        this.workNameChild = workName + \"_child\";\n+        this.doWorkType = nestedDoWorkType;\n+        this.waitTime = waitTime;\n+        this.state = state;\n+        this.xid = xid;\n+    }\n+\n+    @Override\n+    public void run() {\n+        if (tc.isDebugEnabled())\n+            Tr.entry(tc, \"run\", workName);\n+\n+        // 11/26/03: swai", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxNzQxNQ=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTcxMTA1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/work/FVTWorkDispatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTowNzoxOFrOHbO7NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDo1Njo0NlrOHbakCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxODEzMw==", "bodyText": "swai refs in this file", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498318133", "createdAt": "2020-10-01T15:07:18Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/work/FVTWorkDispatcher.java", "diffHunk": "@@ -0,0 +1,4005 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.work;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Hashtable;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.resource.ResourceException;\n+import javax.resource.spi.XATerminator;\n+import javax.resource.spi.work.ExecutionContext;\n+import javax.resource.spi.work.TransactionContext;\n+import javax.resource.spi.work.Work;\n+import javax.resource.spi.work.WorkCompletedException;\n+import javax.resource.spi.work.WorkContext;\n+import javax.resource.spi.work.WorkEvent;\n+import javax.resource.spi.work.WorkException;\n+import javax.resource.spi.work.WorkListener;\n+import javax.resource.spi.work.WorkManager;\n+import javax.resource.spi.work.WorkRejectedException;\n+import javax.transaction.xa.XAException;\n+import javax.transaction.xa.XAResource;\n+import javax.transaction.xa.Xid;\n+\n+import com.ibm.adapter.AdapterUtil;\n+import com.ibm.adapter.EISTimer;\n+import com.ibm.adapter.FVTAdapterImpl;\n+import com.ibm.adapter.FVTSecurityContext;\n+import com.ibm.adapter.XATerminatorWrapper;\n+import com.ibm.adapter.endpoint.MessageEndpointFactoryWrapper;\n+import com.ibm.adapter.endpoint.MessageEndpointWrapper;\n+import com.ibm.adapter.message.FVTMessage;\n+import com.ibm.adapter.message.FVTMessageProvider;\n+import com.ibm.adapter.message.FVTMessageProviderImpl;\n+import com.ibm.adapter.message.MessageWaitTimeoutException;\n+import com.ibm.adapter.message.TextMessageImpl;\n+import com.ibm.adapter.message.WorkInformation;\n+import com.ibm.adapter.tra.FVTConcurrentWorkImpl;\n+import com.ibm.adapter.tra.FVTWorkImpl;\n+import com.ibm.adapter.tra.FVTXAResourceImpl;\n+import com.ibm.adapter.tra.XidImpl;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+import com.ibm.ws.csi.MessageEndpointTestResults;\n+\n+/**\n+ * <p>\n+ * This class represents a work dispatcher. A work dispatcher is repsonsible for\n+ * creating and submitting work objects.\n+ * </p>\n+ *\n+ * <p>\n+ * Message providers, such as FVTMessageProvider, can call doMessageDelivery()\n+ * or scheduleMessageDelivery() of this class to delivery messages to end point\n+ * applications.\n+ * </p>\n+ *\n+ * <p>\n+ * When doMessageDelivery() or scheduleMessageDelivery() are called, an instance\n+ * of FVTSimpleWorkImpl or FVTComplexWorkImpl is created and submitted to the\n+ * work manager of the application server for execution.\n+ * </p>\n+ */\n+public class FVTWorkDispatcher implements WorkListener {\n+\n+    private static final TraceComponent tc = Tr\n+                    .register(FVTWorkDispatcher.class);\n+\n+    /** Adapter instance */\n+    protected FVTAdapterImpl adapter;\n+\n+    /** Work manager */\n+    protected WorkManager workManager;\n+\n+    /** XATerminator */\n+    protected XATerminatorWrapper xaTermWrapper;\n+\n+    // d177221 begin: swai\n+    /** EIS Timer */\n+    private EISTimer eisTimer;\n+\n+    /** Thread for EIS Timer */\n+    private Thread eisStatusThread;\n+\n+    /** vector of work instance */\n+    protected Hashtable works;\n+\n+    /** Object used for synchronization */\n+    // 11/20/03: swai", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwODgwOQ==", "bodyText": "Removed all swai references.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498508809", "createdAt": "2020-10-01T20:56:46Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/work/FVTWorkDispatcher.java", "diffHunk": "@@ -0,0 +1,4005 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.work;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Hashtable;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.resource.ResourceException;\n+import javax.resource.spi.XATerminator;\n+import javax.resource.spi.work.ExecutionContext;\n+import javax.resource.spi.work.TransactionContext;\n+import javax.resource.spi.work.Work;\n+import javax.resource.spi.work.WorkCompletedException;\n+import javax.resource.spi.work.WorkContext;\n+import javax.resource.spi.work.WorkEvent;\n+import javax.resource.spi.work.WorkException;\n+import javax.resource.spi.work.WorkListener;\n+import javax.resource.spi.work.WorkManager;\n+import javax.resource.spi.work.WorkRejectedException;\n+import javax.transaction.xa.XAException;\n+import javax.transaction.xa.XAResource;\n+import javax.transaction.xa.Xid;\n+\n+import com.ibm.adapter.AdapterUtil;\n+import com.ibm.adapter.EISTimer;\n+import com.ibm.adapter.FVTAdapterImpl;\n+import com.ibm.adapter.FVTSecurityContext;\n+import com.ibm.adapter.XATerminatorWrapper;\n+import com.ibm.adapter.endpoint.MessageEndpointFactoryWrapper;\n+import com.ibm.adapter.endpoint.MessageEndpointWrapper;\n+import com.ibm.adapter.message.FVTMessage;\n+import com.ibm.adapter.message.FVTMessageProvider;\n+import com.ibm.adapter.message.FVTMessageProviderImpl;\n+import com.ibm.adapter.message.MessageWaitTimeoutException;\n+import com.ibm.adapter.message.TextMessageImpl;\n+import com.ibm.adapter.message.WorkInformation;\n+import com.ibm.adapter.tra.FVTConcurrentWorkImpl;\n+import com.ibm.adapter.tra.FVTWorkImpl;\n+import com.ibm.adapter.tra.FVTXAResourceImpl;\n+import com.ibm.adapter.tra.XidImpl;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+import com.ibm.ws.csi.MessageEndpointTestResults;\n+\n+/**\n+ * <p>\n+ * This class represents a work dispatcher. A work dispatcher is repsonsible for\n+ * creating and submitting work objects.\n+ * </p>\n+ *\n+ * <p>\n+ * Message providers, such as FVTMessageProvider, can call doMessageDelivery()\n+ * or scheduleMessageDelivery() of this class to delivery messages to end point\n+ * applications.\n+ * </p>\n+ *\n+ * <p>\n+ * When doMessageDelivery() or scheduleMessageDelivery() are called, an instance\n+ * of FVTSimpleWorkImpl or FVTComplexWorkImpl is created and submitted to the\n+ * work manager of the application server for execution.\n+ * </p>\n+ */\n+public class FVTWorkDispatcher implements WorkListener {\n+\n+    private static final TraceComponent tc = Tr\n+                    .register(FVTWorkDispatcher.class);\n+\n+    /** Adapter instance */\n+    protected FVTAdapterImpl adapter;\n+\n+    /** Work manager */\n+    protected WorkManager workManager;\n+\n+    /** XATerminator */\n+    protected XATerminatorWrapper xaTermWrapper;\n+\n+    // d177221 begin: swai\n+    /** EIS Timer */\n+    private EISTimer eisTimer;\n+\n+    /** Thread for EIS Timer */\n+    private Thread eisStatusThread;\n+\n+    /** vector of work instance */\n+    protected Hashtable works;\n+\n+    /** Object used for synchronization */\n+    // 11/20/03: swai", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxODEzMw=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTcyMTI2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/work/TestWorkContextProviderWorkImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNTowOTozNVrOHbPBlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDo1NjozN1rOHbajvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxOTc2Ng==", "bodyText": "swai", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498319766", "createdAt": "2020-10-01T15:09:35Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/work/TestWorkContextProviderWorkImpl.java", "diffHunk": "@@ -0,0 +1,388 @@\n+/*******************************************************************************\n+ * Copyright (c) 2009, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.work;\n+\n+import java.util.List;\n+\n+import javax.resource.spi.work.WorkContext;\n+import javax.resource.spi.work.WorkContextProvider;\n+import javax.resource.spi.work.WorkEvent;\n+import javax.resource.spi.work.WorkException;\n+\n+import com.ibm.adapter.AdapterUtil;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * <p>\n+ * This class implements the Work interface, which could be executed by the\n+ * WorkManager upon submission. This is a generic class which users can extend\n+ * to customize their work instances when writing test cases.\n+ * </p>\n+ *\n+ * <p>\n+ * Users are not encouraged to spawn a thread in the subclass implementation.\n+ * However, having a work implementation to spawn a thread is an interesting\n+ * test case.\n+ * </p>\n+ */\n+public class TestWorkContextProviderWorkImpl extends FVTGeneralWorkImpl implements WorkContextProvider {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final TraceComponent tc = Tr\n+                    .register(TestWorkContextProviderWorkImpl.class);\n+\n+    /** work name. Work name is used to identiy the work instance. */\n+    protected String name;\n+\n+    /** work state */\n+    protected int state;\n+\n+    // 11/20/03: swai", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwODczNA==", "bodyText": "Removed all swai references.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498508734", "createdAt": "2020-10-01T20:56:37Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/work/TestWorkContextProviderWorkImpl.java", "diffHunk": "@@ -0,0 +1,388 @@\n+/*******************************************************************************\n+ * Copyright (c) 2009, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.work;\n+\n+import java.util.List;\n+\n+import javax.resource.spi.work.WorkContext;\n+import javax.resource.spi.work.WorkContextProvider;\n+import javax.resource.spi.work.WorkEvent;\n+import javax.resource.spi.work.WorkException;\n+\n+import com.ibm.adapter.AdapterUtil;\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+\n+/**\n+ * <p>\n+ * This class implements the Work interface, which could be executed by the\n+ * WorkManager upon submission. This is a generic class which users can extend\n+ * to customize their work instances when writing test cases.\n+ * </p>\n+ *\n+ * <p>\n+ * Users are not encouraged to spawn a thread in the subclass implementation.\n+ * However, having a work implementation to spawn a thread is an interesting\n+ * test case.\n+ * </p>\n+ */\n+public class TestWorkContextProviderWorkImpl extends FVTGeneralWorkImpl implements WorkContextProvider {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final TraceComponent tc = Tr\n+                    .register(TestWorkContextProviderWorkImpl.class);\n+\n+    /** work name. Work name is used to identiy the work instance. */\n+    protected String name;\n+\n+    /** work state */\n+    protected int state;\n+\n+    // 11/20/03: swai", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMxOTc2Ng=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTc1MDAyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/work/WorkRuntimeException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNToxNTo1MVrOHbPTYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTowMTo1MVrOHbXShQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMyNDMyMg==", "bodyText": "Author and template comments below", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498324322", "createdAt": "2020-10-01T15:15:51Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/work/WorkRuntimeException.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.work;\n+\n+/**\n+ * @author jitang", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1NTE3Mw==", "bodyText": "removed", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498455173", "createdAt": "2020-10-01T19:01:51Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/adapter/work/WorkRuntimeException.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.adapter.work;\n+\n+/**\n+ * @author jitang", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMyNDMyMg=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTk5OTY2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/tra/outbound/base/ConnectionManagerBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjoxNTozMFrOHbRyGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTowMTo0NFrOHbXSUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2NDk1Mw==", "bodyText": "author", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498364953", "createdAt": "2020-10-01T16:15:30Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/tra/outbound/base/ConnectionManagerBase.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.tra.outbound.base;\n+\n+import javax.resource.ResourceException;\n+import javax.resource.spi.ConnectionManager;\n+import javax.resource.spi.ConnectionRequestInfo;\n+import javax.resource.spi.ManagedConnection;\n+import javax.resource.spi.ManagedConnectionFactory;\n+\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+import com.ibm.tra.SimpleRAImpl;\n+\n+/**\n+ * @author kwok", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1NTEyMg==", "bodyText": "Removed.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498455122", "createdAt": "2020-10-01T19:01:44Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/tra/outbound/base/ConnectionManagerBase.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.tra.outbound.base;\n+\n+import javax.resource.ResourceException;\n+import javax.resource.spi.ConnectionManager;\n+import javax.resource.spi.ConnectionRequestInfo;\n+import javax.resource.spi.ManagedConnection;\n+import javax.resource.spi.ManagedConnectionFactory;\n+\n+import com.ibm.ejs.ras.Tr;\n+import com.ibm.ejs.ras.TraceComponent;\n+import com.ibm.tra.SimpleRAImpl;\n+\n+/**\n+ * @author kwok", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2NDk1Mw=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDAwNjA2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/tra/outbound/base/RecordBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjoxNzowN1rOHbR2Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTowMTo1NVrOHbatxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2NjAwMg==", "bodyText": "Easter egg!", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498366002", "createdAt": "2020-10-01T16:17:07Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/tra/outbound/base/RecordBase.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.tra.outbound.base;\n+\n+@SuppressWarnings(\"serial\")\n+public class RecordBase implements javax.resource.cci.Record {\n+\n+    private String personName = null;\n+    private int personNumber = 0;\n+\n+    private String recordName = null;\n+    private String shortDescription = null;\n+\n+    public RecordBase() {\n+        personName = \"default\";\n+        personNumber = 31;\n+        recordName = \"default\";\n+        shortDescription = \"default description\";\n+    }\n+\n+    @Override\n+    public Object clone() {\n+        RecordBase newClone = new RecordBase();\n+        newClone.setPersonName(personName);\n+        newClone.setPersonNumber(personNumber);\n+        newClone.setRecordName(recordName);\n+        newClone.setRecordShortDescription(shortDescription);\n+\n+        return newClone;\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        RecordBase castedOther = null;\n+        try {\n+            castedOther = (RecordBase) other;\n+        } catch (ClassCastException cce) {\n+            return false;\n+        }\n+        if (personName.equals(castedOther.getPersonName()) &&\n+            (personNumber == getPersonNumber()) &&\n+            recordName.equals(castedOther.getRecordName()) &&\n+            shortDescription.equals(castedOther.getRecordShortDescription())) {\n+            return true;\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    @Override\n+    public String getRecordName() {\n+        return recordName;\n+    }\n+\n+    @Override\n+    public String getRecordShortDescription() {\n+        return shortDescription;\n+    }\n+\n+    public String getPersonName() {\n+        return personName;\n+    }\n+\n+    public int getPersonNumber() {\n+        return personNumber;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        //Yeah, I know it's cheesy, but I don't actually plan on using this..", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxMTMwMQ==", "bodyText": "Left alone.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498511301", "createdAt": "2020-10-01T21:01:55Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/tra/outbound/base/RecordBase.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*******************************************************************************\n+ * Copyright (c) 2003, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.tra.outbound.base;\n+\n+@SuppressWarnings(\"serial\")\n+public class RecordBase implements javax.resource.cci.Record {\n+\n+    private String personName = null;\n+    private int personNumber = 0;\n+\n+    private String recordName = null;\n+    private String shortDescription = null;\n+\n+    public RecordBase() {\n+        personName = \"default\";\n+        personNumber = 31;\n+        recordName = \"default\";\n+        shortDescription = \"default description\";\n+    }\n+\n+    @Override\n+    public Object clone() {\n+        RecordBase newClone = new RecordBase();\n+        newClone.setPersonName(personName);\n+        newClone.setPersonNumber(personNumber);\n+        newClone.setRecordName(recordName);\n+        newClone.setRecordShortDescription(shortDescription);\n+\n+        return newClone;\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        RecordBase castedOther = null;\n+        try {\n+            castedOther = (RecordBase) other;\n+        } catch (ClassCastException cce) {\n+            return false;\n+        }\n+        if (personName.equals(castedOther.getPersonName()) &&\n+            (personNumber == getPersonNumber()) &&\n+            recordName.equals(castedOther.getRecordName()) &&\n+            shortDescription.equals(castedOther.getRecordShortDescription())) {\n+            return true;\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    @Override\n+    public String getRecordName() {\n+        return recordName;\n+    }\n+\n+    @Override\n+    public String getRecordShortDescription() {\n+        return shortDescription;\n+    }\n+\n+    public String getPersonName() {\n+        return personName;\n+    }\n+\n+    public int getPersonNumber() {\n+        return personNumber;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        //Yeah, I know it's cheesy, but I don't actually plan on using this..", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2NjAwMg=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDAyNTAzOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/ws/csi/MessageEndpointInvocationHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjoyMjozM1rOHbSCsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTowMToyM1rOHbXRnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2OTIwMg==", "bodyText": "Removed?", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498369202", "createdAt": "2020-10-01T16:22:33Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/ws/csi/MessageEndpointInvocationHandler.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*******************************************************************************\n+ * Copyright (c) 2012, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.csi;\n+\n+//NOTE:\n+//This was copied from SERV1\\ws\\code\\ejbcontainer\\src\\com\\ibm\\ws\\csi", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1NDk0Mw==", "bodyText": "Removed", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498454943", "createdAt": "2020-10-01T19:01:23Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/ws/csi/MessageEndpointInvocationHandler.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*******************************************************************************\n+ * Copyright (c) 2012, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.csi;\n+\n+//NOTE:\n+//This was copied from SERV1\\ws\\code\\ejbcontainer\\src\\com\\ibm\\ws\\csi", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2OTIwMg=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDAyNjU5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/ws/csi/MessageEndpointTestResults.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjoyMjo1OVrOHbSDvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOTowMToxNlrOHbXRYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2OTQ3MA==", "bodyText": "Remove?", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498369470", "createdAt": "2020-10-01T16:22:59Z", "author": {"login": "kristip17"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/ws/csi/MessageEndpointTestResults.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*******************************************************************************\n+ * Copyright (c) 2012, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.csi;\n+\n+//NOTE:\n+//This was copied from SERV1\\ws\\code\\ejbcontainer\\src\\com\\ibm\\ws\\csi", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1NDg4Mg==", "bodyText": "Removed", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498454882", "createdAt": "2020-10-01T19:01:16Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.jca_fat/test-resourceadapters/adapter.regr/src/com/ibm/ws/csi/MessageEndpointTestResults.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*******************************************************************************\n+ * Copyright (c) 2012, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.csi;\n+\n+//NOTE:\n+//This was copied from SERV1\\ws\\code\\ejbcontainer\\src\\com\\ibm\\ws\\csi", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2OTQ3MA=="}, "originalCommit": {"oid": "81f697af6b2c831061a69d25823d18fe1a7b2057"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzc1MTA2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.websphere.appserver.features/visibility/public/jcaInboundSecurity-1.0/com.ibm.websphere.appserver.jcaInboundSecurity-1.0.feature", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODoxMTo0M1rOHb2_Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOTo1NToyMVrOHb55Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk3NDU1OQ==", "bodyText": "Do you need to add:\ncom.ibm.websphere.appserver.builtinAuthentication-1.0 to this feature and  com.ibm.websphere.appserver.builtinAuthentication-2.0 to the 2.0 feature so that the tolerates in com.ibm.websphere.security-1.0 does the right thing?", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498974559", "createdAt": "2020-10-02T18:11:43Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.websphere.appserver.features/visibility/public/jcaInboundSecurity-1.0/com.ibm.websphere.appserver.jcaInboundSecurity-1.0.feature", "diffHunk": "@@ -4,10 +4,13 @@ visibility=public\n IBM-API-Package: javax.security.auth.message.callback; type=\"spec\"\n IBM-ShortName: jcaInboundSecurity-1.0\n Subsystem-Name: Java Connector Architecture Security Inflow 1.0\n--features=com.ibm.websphere.appserver.transaction-1.1; ibm.tolerates:=1.2, \\\n- com.ibm.websphere.appserver.security-1.0, \\\n- com.ibm.websphere.appserver.jca-1.6; ibm.tolerates:=1.7\n--bundles=com.ibm.ws.jca.inbound.security, \\\n- com.ibm.websphere.javaee.jaspic.1.1; location:=dev/api/spec/; mavenCoordinates=\"javax.security.auth.message:javax.security.auth.message-api:1.1\"\n+-features=\\\n+   com.ibm.websphere.appserver.transaction-1.1; ibm.tolerates:=1.2, \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87945eb30ea0619f5d307b07f1bbb81b00dc648a"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyMjE3OA==", "bodyText": "After talking with Jared and running a package minify, we decided we didn't need to do this. If there are issues with packaging in the build we will revisit.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r499022178", "createdAt": "2020-10-02T19:55:21Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.websphere.appserver.features/visibility/public/jcaInboundSecurity-1.0/com.ibm.websphere.appserver.jcaInboundSecurity-1.0.feature", "diffHunk": "@@ -4,10 +4,13 @@ visibility=public\n IBM-API-Package: javax.security.auth.message.callback; type=\"spec\"\n IBM-ShortName: jcaInboundSecurity-1.0\n Subsystem-Name: Java Connector Architecture Security Inflow 1.0\n--features=com.ibm.websphere.appserver.transaction-1.1; ibm.tolerates:=1.2, \\\n- com.ibm.websphere.appserver.security-1.0, \\\n- com.ibm.websphere.appserver.jca-1.6; ibm.tolerates:=1.7\n--bundles=com.ibm.ws.jca.inbound.security, \\\n- com.ibm.websphere.javaee.jaspic.1.1; location:=dev/api/spec/; mavenCoordinates=\"javax.security.auth.message:javax.security.auth.message-api:1.1\"\n+-features=\\\n+   com.ibm.websphere.appserver.transaction-1.1; ibm.tolerates:=1.2, \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk3NDU1OQ=="}, "originalCommit": {"oid": "87945eb30ea0619f5d307b07f1bbb81b00dc648a"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzc2NDE0OnYy", "diffSide": "RIGHT", "path": "dev/wlp-jakartaee-transform/rules/jakarta-bundles.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODoxNToyOFrOHb3Ieg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOToxNTowMFrOHb43PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk3Njg5MA==", "bodyText": "Should the jca in the bundle name be changed to connectors?  Of course you need to fix it in the bnd file and feature file if you change it.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498976890", "createdAt": "2020-10-02T18:15:28Z", "author": {"login": "jhanders34"}, "path": "dev/wlp-jakartaee-transform/rules/jakarta-bundles.properties", "diffHunk": "@@ -15,3 +15,4 @@ com.ibm.ws.security.authorization.jacc.ejb=io.openliberty.security.authorization\n com.ibm.ws.security.authorization.jacc.web=io.openliberty.security.authorization.internal.jacc.web,,\"Security Web support for JACC 2.0 Service\",\"Security Web support for JACC 2.0 Service\"\n com.ibm.websphere.appserver.api.jacc=io.openliberty.jacc.2.0,,\"JACC Service Provider Interface\",\"JACC Service Provider Interface, version 2.0\"\n com.ibm.ws.security.authentication.filter=io.openliberty.security.authentication.internal.filter,,\"Security Authentication filter\",\"Security Authentication filter\"\n+com.ibm.ws.jca.inbound.security=io.openliberty.jca.security.internal.inbound,,\"Jakarta connectors inbound security\",\"Jakarta connectors inbound security\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87945eb30ea0619f5d307b07f1bbb81b00dc648a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNTI0NA==", "bodyText": "Yes. I updated it.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r499005244", "createdAt": "2020-10-02T19:15:00Z", "author": {"login": "jvanhill"}, "path": "dev/wlp-jakartaee-transform/rules/jakarta-bundles.properties", "diffHunk": "@@ -15,3 +15,4 @@ com.ibm.ws.security.authorization.jacc.ejb=io.openliberty.security.authorization\n com.ibm.ws.security.authorization.jacc.web=io.openliberty.security.authorization.internal.jacc.web,,\"Security Web support for JACC 2.0 Service\",\"Security Web support for JACC 2.0 Service\"\n com.ibm.websphere.appserver.api.jacc=io.openliberty.jacc.2.0,,\"JACC Service Provider Interface\",\"JACC Service Provider Interface, version 2.0\"\n com.ibm.ws.security.authentication.filter=io.openliberty.security.authentication.internal.filter,,\"Security Authentication filter\",\"Security Authentication filter\"\n+com.ibm.ws.jca.inbound.security=io.openliberty.jca.security.internal.inbound,,\"Jakarta connectors inbound security\",\"Jakarta connectors inbound security\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk3Njg5MA=="}, "originalCommit": {"oid": "87945eb30ea0619f5d307b07f1bbb81b00dc648a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzc3MTc5OnYy", "diffSide": "RIGHT", "path": "dev/fattest.simplicity/src/componenttest/rules/repeater/EE7FeatureReplacementAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODoxNzowM1rOHb3OPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOTowODoyNlrOHb4smQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk3ODM2Ng==", "bodyText": "Shouldn't this same change go into EE6FeatureReplacementAction as well?", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r498978366", "createdAt": "2020-10-02T18:17:03Z", "author": {"login": "jhanders34"}, "path": "dev/fattest.simplicity/src/componenttest/rules/repeater/EE7FeatureReplacementAction.java", "diffHunk": "@@ -27,6 +27,7 @@\n                                                  \"javaMail-1.5\",\n                                                  \"cdi-1.2\",\n                                                  \"jca-1.7\",\n+                                                 \"jcaInboundSecurity-1.0\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87945eb30ea0619f5d307b07f1bbb81b00dc648a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwMjUyMQ==", "bodyText": "Unless I use that action, I didn't plan to update it, as the ee6 version is missing a lot of the features. For example, JCA is not even in there.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14015#discussion_r499002521", "createdAt": "2020-10-02T19:08:26Z", "author": {"login": "jvanhill"}, "path": "dev/fattest.simplicity/src/componenttest/rules/repeater/EE7FeatureReplacementAction.java", "diffHunk": "@@ -27,6 +27,7 @@\n                                                  \"javaMail-1.5\",\n                                                  \"cdi-1.2\",\n                                                  \"jca-1.7\",\n+                                                 \"jcaInboundSecurity-1.0\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk3ODM2Ng=="}, "originalCommit": {"oid": "87945eb30ea0619f5d307b07f1bbb81b00dc648a"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2719, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}