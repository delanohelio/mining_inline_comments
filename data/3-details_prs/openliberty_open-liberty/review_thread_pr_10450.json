{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMzA1Nzgw", "number": 10450, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNzozOTo1NVrODbT7jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMDozNzoxM1rODbXPhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTY0Njg1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.websphere.appserver.features/visibility/auto/com.ibm.websphere.appserver.jaxrsMonitor-1.0.feature", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNzozOTo1NVrOFiuTIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxODoyNTozNVrOFivuMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk1NDQ2Nw==", "bodyText": "Won't this cause problems since it is an auto feature for features that are already GA?  I think this needs to be GA too.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10450#discussion_r371954467", "createdAt": "2020-01-28T17:39:55Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.websphere.appserver.features/visibility/auto/com.ibm.websphere.appserver.jaxrsMonitor-1.0.feature", "diffHunk": "@@ -0,0 +1,11 @@\n+-include= ~${workspace}/cnf/resources/bnd/feature.props\n+symbolicName=com.ibm.websphere.appserver.jaxrsMonitor-1.0\n+Manifest-Version: 1.0\n+IBM-API-Package: com.ibm.websphere.jaxrs.monitor; type=\"ibm-api\"\n+IBM-Provision-Capability: \\\n+  osgi.identity; filter:=\"(&(type=osgi.subsystem.feature)(osgi.identity=com.ibm.websphere.appserver.monitor-1.0))\", \\\n+  osgi.identity; filter:=\"(&(type=osgi.subsystem.feature)(|(osgi.identity=com.ibm.websphere.appserver.jaxrs-2.0)(osgi.identity=com.ibm.websphere.appserver.jaxrs-2.1)))\"\n+IBM-Install-Policy: when-satisfied\n+-bundles=com.ibm.ws.jaxrs.2.x.monitor\n+kind=beta", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ced4cd80f3de2e3634e087e05f7aa5379a6a9a4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3Nzc3Nw==", "bodyText": "agreed.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10450#discussion_r371977777", "createdAt": "2020-01-28T18:25:35Z", "author": {"login": "jim-krueger"}, "path": "dev/com.ibm.websphere.appserver.features/visibility/auto/com.ibm.websphere.appserver.jaxrsMonitor-1.0.feature", "diffHunk": "@@ -0,0 +1,11 @@\n+-include= ~${workspace}/cnf/resources/bnd/feature.props\n+symbolicName=com.ibm.websphere.appserver.jaxrsMonitor-1.0\n+Manifest-Version: 1.0\n+IBM-API-Package: com.ibm.websphere.jaxrs.monitor; type=\"ibm-api\"\n+IBM-Provision-Capability: \\\n+  osgi.identity; filter:=\"(&(type=osgi.subsystem.feature)(osgi.identity=com.ibm.websphere.appserver.monitor-1.0))\", \\\n+  osgi.identity; filter:=\"(&(type=osgi.subsystem.feature)(|(osgi.identity=com.ibm.websphere.appserver.jaxrs-2.0)(osgi.identity=com.ibm.websphere.appserver.jaxrs-2.1)))\"\n+IBM-Install-Policy: when-satisfied\n+-bundles=com.ibm.ws.jaxrs.2.x.monitor\n+kind=beta", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk1NDQ2Nw=="}, "originalCommit": {"oid": "2ced4cd80f3de2e3634e087e05f7aa5379a6a9a4"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTY1NjIwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jaxrs.2.0_fat/fat/src/com/ibm/ws/jaxrs20/fat/restmetrics/RestMetricsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNzo0Mjo0NFrOFiuY3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTo0MDo0NVrOFiyCsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk1NTkzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final int[] methodCounts = new int[11];\n          \n          \n            \n                private final int[] methodCounts = new int[METHOD_STRINGS.length];\n          \n      \n    \n    \n  \n\nThis should make it easier to add/remove methods.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10450#discussion_r371955935", "createdAt": "2020-01-28T17:42:44Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0_fat/fat/src/com/ibm/ws/jaxrs20/fat/restmetrics/RestMetricsTest.java", "diffHunk": "@@ -45,32 +46,36 @@\n @RunWith(FATRunner.class)\n public class RestMetricsTest {\n \n-     // Array to hold the names that identify the methods in metrics 2.0\n+     // Array to hold the names that identify the methods in metrics 2.3\n     static final String[] METHOD_STRINGS = {\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_getMessage__\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_asyncMethod_javax_ws_rs_container_AsyncResponse_\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_getMultiParamMessage_java_lang_String_\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_getMultiParamMessage_java_lang_String_java_lang_String_\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_postMessage_java_lang_String_\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_putMessage_java_lang_String_\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_deleteMessage__\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_getCheckedException_java_lang_String_\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_getUncheckedException_java_lang_String_\"};\n+                                            \"optionsMethod\",\n+                                            \"headMethod\",\n+                                            \"headFallbackMethod\",\n+                                            \"AsyncResponse\",\n+                                            \"getMultiParamMessage_java.lang.String\",\n+                                            \"getMultiParamMessage_java.lang.String_java.lang.String\",\n+                                            \"postMessage_java.lang.String\",\n+                                            \"putMessage_java.lang.String\",\n+                                            \"deleteMessage\",\n+                                            \"getCheckedException_java.lang.String\",\n+                                            \"getUncheckedException_java.lang.String\"};\n \n     static final String URI_CONTEXT_ROOT = \"http://localhost:\" + Integer.getInteger(\"bvt.prop.HTTP_default\") +\n                     \"/restmetrics/rest/\";\n \n     private static final String METRICSWAR = \"restmetrics\";\n \n+    private static final String METRICS_URL_STRING = \"/metrics/base/REST.request\";\n+\n     private final String MAPPEDURI = getBaseTestUri(METRICSWAR, \"rest\", \"restmetrics\");\n \n     private static final int BUFFER = 300; // margin or error in ms for response times.\n \n     private static final int EXPECTEDRT = 200; // Expected min. response time for a single request.\n \n-    private final int[] methodCounts = new int[9];\n+    private final int[] methodCounts = new int[11];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ced4cd80f3de2e3634e087e05f7aa5379a6a9a4"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxNTc5NA==", "bodyText": "agreed", "url": "https://github.com/OpenLiberty/open-liberty/pull/10450#discussion_r372015794", "createdAt": "2020-01-28T19:40:45Z", "author": {"login": "jim-krueger"}, "path": "dev/com.ibm.ws.jaxrs.2.0_fat/fat/src/com/ibm/ws/jaxrs20/fat/restmetrics/RestMetricsTest.java", "diffHunk": "@@ -45,32 +46,36 @@\n @RunWith(FATRunner.class)\n public class RestMetricsTest {\n \n-     // Array to hold the names that identify the methods in metrics 2.0\n+     // Array to hold the names that identify the methods in metrics 2.3\n     static final String[] METHOD_STRINGS = {\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_getMessage__\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_asyncMethod_javax_ws_rs_container_AsyncResponse_\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_getMultiParamMessage_java_lang_String_\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_getMultiParamMessage_java_lang_String_java_lang_String_\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_postMessage_java_lang_String_\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_putMessage_java_lang_String_\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_deleteMessage__\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_getCheckedException_java_lang_String_\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_getUncheckedException_java_lang_String_\"};\n+                                            \"optionsMethod\",\n+                                            \"headMethod\",\n+                                            \"headFallbackMethod\",\n+                                            \"AsyncResponse\",\n+                                            \"getMultiParamMessage_java.lang.String\",\n+                                            \"getMultiParamMessage_java.lang.String_java.lang.String\",\n+                                            \"postMessage_java.lang.String\",\n+                                            \"putMessage_java.lang.String\",\n+                                            \"deleteMessage\",\n+                                            \"getCheckedException_java.lang.String\",\n+                                            \"getUncheckedException_java.lang.String\"};\n \n     static final String URI_CONTEXT_ROOT = \"http://localhost:\" + Integer.getInteger(\"bvt.prop.HTTP_default\") +\n                     \"/restmetrics/rest/\";\n \n     private static final String METRICSWAR = \"restmetrics\";\n \n+    private static final String METRICS_URL_STRING = \"/metrics/base/REST.request\";\n+\n     private final String MAPPEDURI = getBaseTestUri(METRICSWAR, \"rest\", \"restmetrics\");\n \n     private static final int BUFFER = 300; // margin or error in ms for response times.\n \n     private static final int EXPECTEDRT = 200; // Expected min. response time for a single request.\n \n-    private final int[] methodCounts = new int[9];\n+    private final int[] methodCounts = new int[11];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk1NTkzNQ=="}, "originalCommit": {"oid": "2ced4cd80f3de2e3634e087e05f7aa5379a6a9a4"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTY1NzM1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jaxrs.2.0_fat/fat/src/com/ibm/ws/jaxrs20/fat/restmetrics/RestMetricsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNzo0MzowNFrOFiuZlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxODo0ODo0MlrOFiwcaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk1NjExOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final double[] responseTimes = new double[11];\n          \n          \n            \n                private final double[] responseTimes = new double[METHOD_STRINGS.length];\n          \n      \n    \n    \n  \n\nSame as above.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10450#discussion_r371956118", "createdAt": "2020-01-28T17:43:04Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0_fat/fat/src/com/ibm/ws/jaxrs20/fat/restmetrics/RestMetricsTest.java", "diffHunk": "@@ -45,32 +46,36 @@\n @RunWith(FATRunner.class)\n public class RestMetricsTest {\n \n-     // Array to hold the names that identify the methods in metrics 2.0\n+     // Array to hold the names that identify the methods in metrics 2.3\n     static final String[] METHOD_STRINGS = {\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_getMessage__\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_asyncMethod_javax_ws_rs_container_AsyncResponse_\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_getMultiParamMessage_java_lang_String_\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_getMultiParamMessage_java_lang_String_java_lang_String_\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_postMessage_java_lang_String_\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_putMessage_java_lang_String_\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_deleteMessage__\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_getCheckedException_java_lang_String_\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_getUncheckedException_java_lang_String_\"};\n+                                            \"optionsMethod\",\n+                                            \"headMethod\",\n+                                            \"headFallbackMethod\",\n+                                            \"AsyncResponse\",\n+                                            \"getMultiParamMessage_java.lang.String\",\n+                                            \"getMultiParamMessage_java.lang.String_java.lang.String\",\n+                                            \"postMessage_java.lang.String\",\n+                                            \"putMessage_java.lang.String\",\n+                                            \"deleteMessage\",\n+                                            \"getCheckedException_java.lang.String\",\n+                                            \"getUncheckedException_java.lang.String\"};\n \n     static final String URI_CONTEXT_ROOT = \"http://localhost:\" + Integer.getInteger(\"bvt.prop.HTTP_default\") +\n                     \"/restmetrics/rest/\";\n \n     private static final String METRICSWAR = \"restmetrics\";\n \n+    private static final String METRICS_URL_STRING = \"/metrics/base/REST.request\";\n+\n     private final String MAPPEDURI = getBaseTestUri(METRICSWAR, \"rest\", \"restmetrics\");\n \n     private static final int BUFFER = 300; // margin or error in ms for response times.\n \n     private static final int EXPECTEDRT = 200; // Expected min. response time for a single request.\n \n-    private final int[] methodCounts = new int[9];\n+    private final int[] methodCounts = new int[11];\n \n-    private final double[] responseTimes = new double[9];\n+    private final double[] responseTimes = new double[11];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ced4cd80f3de2e3634e087e05f7aa5379a6a9a4"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk4OTYxMQ==", "bodyText": "agreed.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10450#discussion_r371989611", "createdAt": "2020-01-28T18:48:42Z", "author": {"login": "jim-krueger"}, "path": "dev/com.ibm.ws.jaxrs.2.0_fat/fat/src/com/ibm/ws/jaxrs20/fat/restmetrics/RestMetricsTest.java", "diffHunk": "@@ -45,32 +46,36 @@\n @RunWith(FATRunner.class)\n public class RestMetricsTest {\n \n-     // Array to hold the names that identify the methods in metrics 2.0\n+     // Array to hold the names that identify the methods in metrics 2.3\n     static final String[] METHOD_STRINGS = {\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_getMessage__\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_asyncMethod_javax_ws_rs_container_AsyncResponse_\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_getMultiParamMessage_java_lang_String_\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_getMultiParamMessage_java_lang_String_java_lang_String_\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_postMessage_java_lang_String_\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_putMessage_java_lang_String_\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_deleteMessage__\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_getCheckedException_java_lang_String_\",\n-                                                   \"restmetrics_com_ibm_ws_jaxrs_fat_restmetrics_RestMetricsResource_getUncheckedException_java_lang_String_\"};\n+                                            \"optionsMethod\",\n+                                            \"headMethod\",\n+                                            \"headFallbackMethod\",\n+                                            \"AsyncResponse\",\n+                                            \"getMultiParamMessage_java.lang.String\",\n+                                            \"getMultiParamMessage_java.lang.String_java.lang.String\",\n+                                            \"postMessage_java.lang.String\",\n+                                            \"putMessage_java.lang.String\",\n+                                            \"deleteMessage\",\n+                                            \"getCheckedException_java.lang.String\",\n+                                            \"getUncheckedException_java.lang.String\"};\n \n     static final String URI_CONTEXT_ROOT = \"http://localhost:\" + Integer.getInteger(\"bvt.prop.HTTP_default\") +\n                     \"/restmetrics/rest/\";\n \n     private static final String METRICSWAR = \"restmetrics\";\n \n+    private static final String METRICS_URL_STRING = \"/metrics/base/REST.request\";\n+\n     private final String MAPPEDURI = getBaseTestUri(METRICSWAR, \"rest\", \"restmetrics\");\n \n     private static final int BUFFER = 300; // margin or error in ms for response times.\n \n     private static final int EXPECTEDRT = 200; // Expected min. response time for a single request.\n \n-    private final int[] methodCounts = new int[9];\n+    private final int[] methodCounts = new int[11];\n \n-    private final double[] responseTimes = new double[9];\n+    private final double[] responseTimes = new double[11];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk1NjExOA=="}, "originalCommit": {"oid": "2ced4cd80f3de2e3634e087e05f7aa5379a6a9a4"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTY4MTM4OnYy", "diffSide": "LEFT", "path": "dev/com.ibm.ws.microprofile.metrics.2.0.monitor/src/com/ibm/ws/microprofile/metrics/monitor/MappingTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNzo1MDoyOFrOFiuoUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxODoxMzozMVrOFivV-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk1OTg5MQ==", "bodyText": "With removing the mapping stuff, are you planning to add that back in in a separate PR?  Or is David?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10450#discussion_r371959891", "createdAt": "2020-01-28T17:50:28Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.microprofile.metrics.2.0.monitor/src/com/ibm/ws/microprofile/metrics/monitor/MappingTable.java", "diffHunk": "@@ -63,13 +62,6 @@ private MappingTable() {\n         };\n \t\tmappingTable.put(\"WebSphere:type=ServletStats,name=*\", servletTable);\n \t\t\n-\t\tString[][] restfulTable = new String[][] {\n-        \t{ \"RESTful.request.total\", \"Total Request\", \"RESTful.request.total.description\", COUNTER, MetricUnits.NONE, \"RequestCount\", null, RESTFUL_TAG_NAME },\n-        \t{ \"RESTful.responseTime.total\", \"Total Response Time\", \"RESTful.responseTime.total.description\", GAUGE, MetricUnits.NANOSECONDS, \"ResponseTimeDetails\", \"total\", RESTFUL_TAG_NAME }\n-        };\n-\t\tmappingTable.put(\"WebSphere:type=RESTful_Stats,name=*\", restfulTable);\n-\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ced4cd80f3de2e3634e087e05f7aa5379a6a9a4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3MTU3OA==", "bodyText": "Yes,  it is part of Davids PR:  #10518", "url": "https://github.com/OpenLiberty/open-liberty/pull/10450#discussion_r371971578", "createdAt": "2020-01-28T18:13:31Z", "author": {"login": "jim-krueger"}, "path": "dev/com.ibm.ws.microprofile.metrics.2.0.monitor/src/com/ibm/ws/microprofile/metrics/monitor/MappingTable.java", "diffHunk": "@@ -63,13 +62,6 @@ private MappingTable() {\n         };\n \t\tmappingTable.put(\"WebSphere:type=ServletStats,name=*\", servletTable);\n \t\t\n-\t\tString[][] restfulTable = new String[][] {\n-        \t{ \"RESTful.request.total\", \"Total Request\", \"RESTful.request.total.description\", COUNTER, MetricUnits.NONE, \"RequestCount\", null, RESTFUL_TAG_NAME },\n-        \t{ \"RESTful.responseTime.total\", \"Total Response Time\", \"RESTful.responseTime.total.description\", GAUGE, MetricUnits.NANOSECONDS, \"ResponseTimeDetails\", \"total\", RESTFUL_TAG_NAME }\n-        };\n-\t\tmappingTable.put(\"WebSphere:type=RESTful_Stats,name=*\", restfulTable);\n-\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk1OTg5MQ=="}, "originalCommit": {"oid": "2ced4cd80f3de2e3634e087e05f7aa5379a6a9a4"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTY4NjExOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jaxrs.2.0_fat/fat/src/com/ibm/ws/jaxrs20/fat/restmetrics/RestMetricsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNzo1MTo1NFrOFiurPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTozOTowMVrOFix_Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk2MDYzNg==", "bodyText": "I'm wondering if there isn't a better way to handle the \"indexing\"... maybe start with a counter at 0 and then increment?  It seems like this test will be difficult to maintain/update - especially after we haven't looked at it for a few months.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10450#discussion_r371960636", "createdAt": "2020-01-28T17:51:54Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0_fat/fat/src/com/ibm/ws/jaxrs20/fat/restmetrics/RestMetricsTest.java", "diffHunk": "@@ -120,41 +125,43 @@ private static String getHost() {\n     public void testCoreMethods() throws IOException {\n \n         // Execute a get method with varying numbers of parameters.\n-        runGetMethod(0, 200, \"/restmetrics/rest/restmetrics\", \"Metrics!\");\n+        runOptionsMethod(0, 200, \"/restmetrics/rest/restmetrics\", \"Metrics!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ced4cd80f3de2e3634e087e05f7aa5379a6a9a4"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxNDk0Nw==", "bodyText": "agreed", "url": "https://github.com/OpenLiberty/open-liberty/pull/10450#discussion_r372014947", "createdAt": "2020-01-28T19:39:01Z", "author": {"login": "jim-krueger"}, "path": "dev/com.ibm.ws.jaxrs.2.0_fat/fat/src/com/ibm/ws/jaxrs20/fat/restmetrics/RestMetricsTest.java", "diffHunk": "@@ -120,41 +125,43 @@ private static String getHost() {\n     public void testCoreMethods() throws IOException {\n \n         // Execute a get method with varying numbers of parameters.\n-        runGetMethod(0, 200, \"/restmetrics/rest/restmetrics\", \"Metrics!\");\n+        runOptionsMethod(0, 200, \"/restmetrics/rest/restmetrics\", \"Metrics!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk2MDYzNg=="}, "originalCommit": {"oid": "2ced4cd80f3de2e3634e087e05f7aa5379a6a9a4"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDE4OTUxOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.jaxrs.2.0_fat/fat/src/com/ibm/ws/jaxrs20/fat/restmetrics/RestMetricsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMDozNzoxM1rOFizpzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOToyMjoyNVrOFjUnPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA0MjE5MQ==", "bodyText": "Could you combine runHeadMethod with runGetMethod (and maybe other methods) by adding another parameter (i.e. httpMethod) and then pass \"GET\" or \"HEAD\" to the new method?  That might make this easier to maintain.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10450#discussion_r372042191", "createdAt": "2020-01-28T20:37:13Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.jaxrs.2.0_fat/fat/src/com/ibm/ws/jaxrs20/fat/restmetrics/RestMetricsTest.java", "diffHunk": "@@ -241,6 +285,46 @@ private void runCheckMonitorStats(int exprc, int index) throws IOException {\n         }\n     }\n \n+    private void runHeadMethod(int index, int exprc, String requestUri, String testOut) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f776225ed57ffe91d98b31c89c24ad9e8cc4ed73"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU4MjIwNg==", "bodyText": "Unfortunately the runGetMethod and run HeadMethod have subtle differences,  but this comment is valid in general.   I will look for ways to combine methods.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10450#discussion_r372582206", "createdAt": "2020-01-29T19:22:25Z", "author": {"login": "jim-krueger"}, "path": "dev/com.ibm.ws.jaxrs.2.0_fat/fat/src/com/ibm/ws/jaxrs20/fat/restmetrics/RestMetricsTest.java", "diffHunk": "@@ -241,6 +285,46 @@ private void runCheckMonitorStats(int exprc, int index) throws IOException {\n         }\n     }\n \n+    private void runHeadMethod(int index, int exprc, String requestUri, String testOut) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA0MjE5MQ=="}, "originalCommit": {"oid": "f776225ed57ffe91d98b31c89c24ad9e8cc4ed73"}, "originalPosition": 219}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2231, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}