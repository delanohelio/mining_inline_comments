{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMDU4MDI0", "number": 10348, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMDo0NjozM1rODXBmkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMTo0NjoyMVrODXR24Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NDcwMDk2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.concurrent.persistent_fat/test-applications/schedtest/src/web/SchedulerFATServlet.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwMDo0NjozM1rOFcHlnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNzozNTozN1rOFcbIkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAyODc2NA==", "bodyText": "Instead of adding this logic inline, why not correct the logic in pollForResult?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10348#discussion_r365028764", "createdAt": "2020-01-10T00:46:33Z", "author": {"login": "gjwatts"}, "path": "dev/com.ibm.ws.concurrent.persistent_fat/test-applications/schedtest/src/web/SchedulerFATServlet.java", "diffHunk": "@@ -2086,8 +2065,21 @@ public void testFindByName(PrintWriter out) throws Exception {\n             throw new Exception(\"Should not be able to see tasks from outside of application. \" + resultsByTaskId);\n \n         // Wait for tasks C and D to complete their only execution.\n-        pollForResult(statusC.getTaskId(), 1);\n-        pollForResult(statusD.getTaskId(), 1);\n+        for (long start = System.nanoTime(); System.nanoTime() - start < TIMEOUT_NS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0c303c2a671135c5c68c7c17232a9c345076fd4"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI1OTY3NQ==", "bodyText": "Because pollForResult was interpreted to mean different things to different tests that used it.  Its behavior was only incorrect if you are looking at one of the tests that didn't want it to behave the way it did, otherwise it was doing exactly the right thing, and altering it would break that.  It's a good example of why this sort of utility method is a bad practice in tests.  Developers writing a test think they know what it does based on its name and start to unknowingly misuse it.  The solution here is to remove it and let each test perform precisely the steps that it needs inline, which will be ideal for future debugging as well as for ensuring correctness.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10348#discussion_r365259675", "createdAt": "2020-01-10T14:30:14Z", "author": {"login": "njr-11"}, "path": "dev/com.ibm.ws.concurrent.persistent_fat/test-applications/schedtest/src/web/SchedulerFATServlet.java", "diffHunk": "@@ -2086,8 +2065,21 @@ public void testFindByName(PrintWriter out) throws Exception {\n             throw new Exception(\"Should not be able to see tasks from outside of application. \" + resultsByTaskId);\n \n         // Wait for tasks C and D to complete their only execution.\n-        pollForResult(statusC.getTaskId(), 1);\n-        pollForResult(statusD.getTaskId(), 1);\n+        for (long start = System.nanoTime(); System.nanoTime() - start < TIMEOUT_NS", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAyODc2NA=="}, "originalCommit": {"oid": "f0c303c2a671135c5c68c7c17232a9c345076fd4"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM0OTAwOQ==", "bodyText": "I understand that now, what you are doing makes sense to me.  Thank you for taking the time to explain that to me!", "url": "https://github.com/OpenLiberty/open-liberty/pull/10348#discussion_r365349009", "createdAt": "2020-01-10T17:35:37Z", "author": {"login": "gjwatts"}, "path": "dev/com.ibm.ws.concurrent.persistent_fat/test-applications/schedtest/src/web/SchedulerFATServlet.java", "diffHunk": "@@ -2086,8 +2065,21 @@ public void testFindByName(PrintWriter out) throws Exception {\n             throw new Exception(\"Should not be able to see tasks from outside of application. \" + resultsByTaskId);\n \n         // Wait for tasks C and D to complete their only execution.\n-        pollForResult(statusC.getTaskId(), 1);\n-        pollForResult(statusD.getTaskId(), 1);\n+        for (long start = System.nanoTime(); System.nanoTime() - start < TIMEOUT_NS", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAyODc2NA=="}, "originalCommit": {"oid": "f0c303c2a671135c5c68c7c17232a9c345076fd4"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzM1MjM3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.concurrent.persistent_fat/test-applications/schedtest/src/web/SchedulerFATServlet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMTo0MDoxMVrOFcgxBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMTo0ODoxMVrOFcg6rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ0MTI4NA==", "bodyText": "Should Integer.valueOf(1) here be Integer.valueOf(3) instead?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10348#discussion_r365441284", "createdAt": "2020-01-10T21:40:11Z", "author": {"login": "gjwatts"}, "path": "dev/com.ibm.ws.concurrent.persistent_fat/test-applications/schedtest/src/web/SchedulerFATServlet.java", "diffHunk": "@@ -3830,9 +3853,13 @@ public Integer call() throws Exception {\n                     if (status.hasResult())\n                         throw new Exception(\"Task status initial snapshot should not have a result. \" + status);\n \n-                    status = pollForResult(status.getTaskId(), 3);\n+                    long taskId = status.getTaskId();\n+                    for (long start = System.nanoTime(); System.nanoTime() - start < TIMEOUT_NS\n+                            && (status = scheduler.getStatus(taskId)) != null\n+                            && !(status.hasResult() && Integer.valueOf(1).equals(status.getResult())); )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0c303c2a671135c5c68c7c17232a9c345076fd4"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ0Mzc1Nw==", "bodyText": "The task is only scheduled to run once, which returns a value of 1.  Waiting for 3, which was in the previous code, was erroneous, and I'm fixing it here.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10348#discussion_r365443757", "createdAt": "2020-01-10T21:48:11Z", "author": {"login": "njr-11"}, "path": "dev/com.ibm.ws.concurrent.persistent_fat/test-applications/schedtest/src/web/SchedulerFATServlet.java", "diffHunk": "@@ -3830,9 +3853,13 @@ public Integer call() throws Exception {\n                     if (status.hasResult())\n                         throw new Exception(\"Task status initial snapshot should not have a result. \" + status);\n \n-                    status = pollForResult(status.getTaskId(), 3);\n+                    long taskId = status.getTaskId();\n+                    for (long start = System.nanoTime(); System.nanoTime() - start < TIMEOUT_NS\n+                            && (status = scheduler.getStatus(taskId)) != null\n+                            && !(status.hasResult() && Integer.valueOf(1).equals(status.getResult())); )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ0MTI4NA=="}, "originalCommit": {"oid": "f0c303c2a671135c5c68c7c17232a9c345076fd4"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzM1NjY3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.concurrent.persistent_fat/test-applications/schedtest/src/web/SchedulerFATServlet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMTo0MjoyMFrOFcgztA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMTo1MDoxOFrOFcg8-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ0MTk3Mg==", "bodyText": "Should we first check if statusC == null before we check statusC.hasResults()?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10348#discussion_r365441972", "createdAt": "2020-01-10T21:42:20Z", "author": {"login": "gjwatts"}, "path": "dev/com.ibm.ws.concurrent.persistent_fat/test-applications/schedtest/src/web/SchedulerFATServlet.java", "diffHunk": "@@ -2086,8 +2065,21 @@ public void testFindByName(PrintWriter out) throws Exception {\n             throw new Exception(\"Should not be able to see tasks from outside of application. \" + resultsByTaskId);\n \n         // Wait for tasks C and D to complete their only execution.\n-        pollForResult(statusC.getTaskId(), 1);\n-        pollForResult(statusD.getTaskId(), 1);\n+        for (long start = System.nanoTime(); System.nanoTime() - start < TIMEOUT_NS\n+                && (statusC = scheduler.getStatus(statusC.getTaskId())) != null\n+                && !(statusC.hasResult() && Integer.valueOf(1).equals(statusC.getResult())); )\n+            Thread.sleep(POLL_INTERVAL);\n+\n+        if (!statusC.hasResult() || !Integer.valueOf(1).equals(statusC.getResult()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0c303c2a671135c5c68c7c17232a9c345076fd4"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ0NDM0Nw==", "bodyText": "It isn't necessary because an erroneously null statusC will cause a NullPointerException and fail the test on this line, but I can add it if you prefer.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10348#discussion_r365444347", "createdAt": "2020-01-10T21:50:18Z", "author": {"login": "njr-11"}, "path": "dev/com.ibm.ws.concurrent.persistent_fat/test-applications/schedtest/src/web/SchedulerFATServlet.java", "diffHunk": "@@ -2086,8 +2065,21 @@ public void testFindByName(PrintWriter out) throws Exception {\n             throw new Exception(\"Should not be able to see tasks from outside of application. \" + resultsByTaskId);\n \n         // Wait for tasks C and D to complete their only execution.\n-        pollForResult(statusC.getTaskId(), 1);\n-        pollForResult(statusD.getTaskId(), 1);\n+        for (long start = System.nanoTime(); System.nanoTime() - start < TIMEOUT_NS\n+                && (statusC = scheduler.getStatus(statusC.getTaskId())) != null\n+                && !(statusC.hasResult() && Integer.valueOf(1).equals(statusC.getResult())); )\n+            Thread.sleep(POLL_INTERVAL);\n+\n+        if (!statusC.hasResult() || !Integer.valueOf(1).equals(statusC.getResult()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ0MTk3Mg=="}, "originalCommit": {"oid": "f0c303c2a671135c5c68c7c17232a9c345076fd4"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzM1NzkzOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.concurrent.persistent_fat/test-applications/schedtest/src/web/SchedulerFATServlet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMTo0MzowMVrOFcg0jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMTo1MDozM1rOFcg9VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ0MjE4OA==", "bodyText": "Should we first check if statusD == null before we check statusD.hasResults()?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10348#discussion_r365442188", "createdAt": "2020-01-10T21:43:01Z", "author": {"login": "gjwatts"}, "path": "dev/com.ibm.ws.concurrent.persistent_fat/test-applications/schedtest/src/web/SchedulerFATServlet.java", "diffHunk": "@@ -2086,8 +2065,21 @@ public void testFindByName(PrintWriter out) throws Exception {\n             throw new Exception(\"Should not be able to see tasks from outside of application. \" + resultsByTaskId);\n \n         // Wait for tasks C and D to complete their only execution.\n-        pollForResult(statusC.getTaskId(), 1);\n-        pollForResult(statusD.getTaskId(), 1);\n+        for (long start = System.nanoTime(); System.nanoTime() - start < TIMEOUT_NS\n+                && (statusC = scheduler.getStatus(statusC.getTaskId())) != null\n+                && !(statusC.hasResult() && Integer.valueOf(1).equals(statusC.getResult())); )\n+            Thread.sleep(POLL_INTERVAL);\n+\n+        if (!statusC.hasResult() || !Integer.valueOf(1).equals(statusC.getResult()))\n+            throw new Exception(\"Task C did not complete \" + statusC);\n+\n+        for (long start = System.nanoTime(); System.nanoTime() - start < TIMEOUT_NS\n+                && (statusD = scheduler.getStatus(statusD.getTaskId())) != null\n+                && !(statusD.hasResult() && Integer.valueOf(1).equals(statusD.getResult())); )\n+            Thread.sleep(POLL_INTERVAL);\n+\n+        if (!statusD.hasResult() || !Integer.valueOf(1).equals(statusD.getResult()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0c303c2a671135c5c68c7c17232a9c345076fd4"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ0NDQzNg==", "bodyText": "Similar to above, it isn't necessary because an erroneously null statusD will cause a NullPointerException and fail the test on this line, but I can add it if you prefer.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10348#discussion_r365444436", "createdAt": "2020-01-10T21:50:33Z", "author": {"login": "njr-11"}, "path": "dev/com.ibm.ws.concurrent.persistent_fat/test-applications/schedtest/src/web/SchedulerFATServlet.java", "diffHunk": "@@ -2086,8 +2065,21 @@ public void testFindByName(PrintWriter out) throws Exception {\n             throw new Exception(\"Should not be able to see tasks from outside of application. \" + resultsByTaskId);\n \n         // Wait for tasks C and D to complete their only execution.\n-        pollForResult(statusC.getTaskId(), 1);\n-        pollForResult(statusD.getTaskId(), 1);\n+        for (long start = System.nanoTime(); System.nanoTime() - start < TIMEOUT_NS\n+                && (statusC = scheduler.getStatus(statusC.getTaskId())) != null\n+                && !(statusC.hasResult() && Integer.valueOf(1).equals(statusC.getResult())); )\n+            Thread.sleep(POLL_INTERVAL);\n+\n+        if (!statusC.hasResult() || !Integer.valueOf(1).equals(statusC.getResult()))\n+            throw new Exception(\"Task C did not complete \" + statusC);\n+\n+        for (long start = System.nanoTime(); System.nanoTime() - start < TIMEOUT_NS\n+                && (statusD = scheduler.getStatus(statusD.getTaskId())) != null\n+                && !(statusD.hasResult() && Integer.valueOf(1).equals(statusD.getResult())); )\n+            Thread.sleep(POLL_INTERVAL);\n+\n+        if (!statusD.hasResult() || !Integer.valueOf(1).equals(statusD.getResult()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ0MjE4OA=="}, "originalCommit": {"oid": "f0c303c2a671135c5c68c7c17232a9c345076fd4"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzM2NDE3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.concurrent.persistent_fat/test-applications/schedtest/src/web/SchedulerFATServlet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMTo0NjoyMVrOFcg4fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMjoxOTozMlrOFchfqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ0MzE5Ng==", "bodyText": "Is statusB.isDone() the same thing as statusB.hasResult()?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10348#discussion_r365443196", "createdAt": "2020-01-10T21:46:21Z", "author": {"login": "gjwatts"}, "path": "dev/com.ibm.ws.concurrent.persistent_fat/test-applications/schedtest/src/web/SchedulerFATServlet.java", "diffHunk": "@@ -3779,13 +3794,21 @@ public void testTwoTasksInOneTransaction(PrintWriter out) throws Exception {\n             tran.commit();\n         }\n \n-        statusA = pollForResult(statusA.getTaskId(), 1);\n-        if (statusA == null || !statusA.isDone())\n-            throw new Exception(\"TaskA not completed in allotted interval. Status: \" + statusA);\n+        for (long start = System.nanoTime(); System.nanoTime() - start < TIMEOUT_NS\n+                && (statusA = scheduler.getStatus(statusA.getTaskId())) != null\n+                && !(statusA.hasResult() && Integer.valueOf(1).equals(statusA.getResult())); )\n+            Thread.sleep(POLL_INTERVAL);\n+\n+        if (statusA == null || !statusA.isDone() || !Integer.valueOf(1).equals(statusA.getResult()))\n+            throw new Exception(\"TaskA not completed with expected result in allotted interval. Status: \" + statusA);\n+\n+        for (long start = System.nanoTime(); System.nanoTime() - start < TIMEOUT_NS\n+                && (statusB = scheduler.getStatus(statusB.getTaskId())) != null\n+                && !(statusB.hasResult() && Integer.valueOf(1).equals(statusB.getResult())); )\n+            Thread.sleep(POLL_INTERVAL);\n \n-        statusB = pollForResult(statusB.getTaskId(), 1);\n-        if (statusB == null || !statusB.isDone())\n-            throw new Exception(\"TaskB not completed in allotted interval. Status: \" + statusB);\n+        if (statusB == null || !statusB.isDone() || !Integer.valueOf(1).equals(statusB.getResult()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0c303c2a671135c5c68c7c17232a9c345076fd4"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1MzIyNw==", "bodyText": "They are similar, but not the same.  For repeating tasks (which doesn't apply here) a task can have multiple results - one for each execution.  The hasResult method tells you if at least one execution of the task has happened, such that you can get a current result.  The isDone method tells you that all executions have completed.  For one-time tasks, such as is the case here, they are both telling you the same thing.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10348#discussion_r365453227", "createdAt": "2020-01-10T22:19:32Z", "author": {"login": "njr-11"}, "path": "dev/com.ibm.ws.concurrent.persistent_fat/test-applications/schedtest/src/web/SchedulerFATServlet.java", "diffHunk": "@@ -3779,13 +3794,21 @@ public void testTwoTasksInOneTransaction(PrintWriter out) throws Exception {\n             tran.commit();\n         }\n \n-        statusA = pollForResult(statusA.getTaskId(), 1);\n-        if (statusA == null || !statusA.isDone())\n-            throw new Exception(\"TaskA not completed in allotted interval. Status: \" + statusA);\n+        for (long start = System.nanoTime(); System.nanoTime() - start < TIMEOUT_NS\n+                && (statusA = scheduler.getStatus(statusA.getTaskId())) != null\n+                && !(statusA.hasResult() && Integer.valueOf(1).equals(statusA.getResult())); )\n+            Thread.sleep(POLL_INTERVAL);\n+\n+        if (statusA == null || !statusA.isDone() || !Integer.valueOf(1).equals(statusA.getResult()))\n+            throw new Exception(\"TaskA not completed with expected result in allotted interval. Status: \" + statusA);\n+\n+        for (long start = System.nanoTime(); System.nanoTime() - start < TIMEOUT_NS\n+                && (statusB = scheduler.getStatus(statusB.getTaskId())) != null\n+                && !(statusB.hasResult() && Integer.valueOf(1).equals(statusB.getResult())); )\n+            Thread.sleep(POLL_INTERVAL);\n \n-        statusB = pollForResult(statusB.getTaskId(), 1);\n-        if (statusB == null || !statusB.isDone())\n-            throw new Exception(\"TaskB not completed in allotted interval. Status: \" + statusB);\n+        if (statusB == null || !statusB.isDone() || !Integer.valueOf(1).equals(statusB.getResult()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ0MzE5Ng=="}, "originalCommit": {"oid": "f0c303c2a671135c5c68c7c17232a9c345076fd4"}, "originalPosition": 132}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2297, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}