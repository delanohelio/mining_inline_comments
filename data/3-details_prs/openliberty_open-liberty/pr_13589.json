{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNjU2Njgy", "number": 13589, "title": "Small rye open api", "bodyText": "Initial implementation of the mpOpenAPI-2.0 feature.\nAssociated epic: #11020", "createdAt": "2020-08-21T14:08:54Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589", "merged": true, "mergeCommit": {"oid": "7b67654f2e6c3e4d3fb7f31e1882f9ee8b1f617a"}, "closed": true, "closedAt": "2020-09-08T07:19:26Z", "author": {"login": "msmiths"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdB_gCFAFqTQ3MzMwNDE2NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdGgdFvgBqjM3MzY0OTg1Mzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMzA0MTY1", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#pullrequestreview-473304165", "createdAt": "2020-08-24T09:50:10Z", "commit": {"oid": "df1792f8ec0bfcf4efa157df24dae4ce0d36412c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwOTo1MDoxMFrOHFdAKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwOTo1MDoxMFrOHFdAKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ4MDEwNA==", "bodyText": "best to set this to full for now", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r475480104", "createdAt": "2020-08-24T09:50:10Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.websphere.appserver.features/visibility/public/mpOpenAPI-2.0/io.openliberty.mpOpenAPI-2.0.feature", "diffHunk": "@@ -0,0 +1,55 @@\n+-include= ~${workspace}/cnf/resources/bnd/feature.props\n+symbolicName=io.openliberty.mpOpenAPI-2.0\n+visibility=public\n+singleton=true\n+IBM-App-ForceRestart: install, \\\n+  uninstall\n+IBM-ShortName: mpOpenAPI-2.0\n+Subsystem-Name: MicroProfile OpenAPI 2.0\n+IBM-API-Package: \\\n+    org.eclipse.microprofile.openapi.annotations;  type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.callbacks; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.enums; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.extensions; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.headers; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.info; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.links; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.media; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.parameters; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.responses; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.security; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.servers; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.tags; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.callbacks; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.examples; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.headers; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.info; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.links; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.media; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.parameters; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.responses; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.security; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.servers; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.tags; type=\"stable\"\n+IBM-SPI-Package: \\\n+    org.eclipse.microprofile.openapi.spi; type=\"stable\"\n+-features=\\\n+ io.openliberty.org.eclipse.microprofile.openapi-2.0, \\\n+ com.ibm.websphere.appserver.servlet-3.1; ibm.tolerates:=4.0, \\\n+ com.ibm.websphere.appserver.mpConfig-1.3; ibm.tolerates:=\"1.4\", \\\n+ com.ibm.websphere.appserver.internal.optional.jaxb-2.2; ibm.tolerates:=2.3, \\\n+ com.ibm.wsspi.appserver.webBundle-1.0,\\\n+ com.ibm.websphere.appserver.jaxrs-2.1\n+-bundles=\\\n+ com.ibm.ws.require.java8, \\\n+ io.openliberty.io.smallrye.openapi.core, \\\n+ io.openliberty.io.smallrye.openapi.jaxrs, \\\n+ io.openliberty.microprofile.openapi.2.0.internal, \\\n+ com.ibm.ws.microprofile.openapi.ui, \\\n+ com.ibm.ws.com.fasterxml.jackson.2.9.1, \\\n+ com.ibm.ws.org.jboss.logging\n+kind=noship\n+edition=core", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df1792f8ec0bfcf4efa157df24dae4ce0d36412c"}, "originalPosition": 54}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bea0a6613351ef87c40f1d31313bbddf92d3b0a8", "author": {"user": {"login": "msmiths", "name": "Martin Smithson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/bea0a6613351ef87c40f1d31313bbddf92d3b0a8", "committedDate": "2020-08-24T09:57:49Z", "message": "Change edition to full\n\nSigned-off-by: Martin Smithson <msmiths@uk.ibm.com>"}, "afterCommit": {"oid": "5a828e1373cd13e24e8fe41bc20771853dceee4d", "author": {"user": {"login": "msmiths", "name": "Martin Smithson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/5a828e1373cd13e24e8fe41bc20771853dceee4d", "committedDate": "2020-08-24T13:26:12Z", "message": "Change edition to full\n\nSigned-off-by: Martin Smithson <msmiths@uk.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d45b01474141f59d6672bded36f7b6e61bce6be1", "author": {"user": {"login": "msmiths", "name": "Martin Smithson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/d45b01474141f59d6672bded36f7b6e61bce6be1", "committedDate": "2020-08-25T11:13:44Z", "message": "Remove com.ibm.ws.require.java8 bundle from .feature\n\nSigned-off-by: Martin Smithson <msmiths@uk.ibm.com>"}, "afterCommit": {"oid": "d8ab652e10dd79c85b0684f7e9ddeb638f56a3ae", "author": {"user": {"login": "msmiths", "name": "Martin Smithson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/d8ab652e10dd79c85b0684f7e9ddeb638f56a3ae", "committedDate": "2020-08-25T12:10:34Z", "message": "MP OpenAPI 2.0 Initial Implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NTcxNzM3", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#pullrequestreview-474571737", "createdAt": "2020-08-25T15:01:10Z", "commit": {"oid": "c0d082954c1977a634d1cb35c102b56923bcb941"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTowMToxMFrOHGcYrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNTowMToxMFrOHGcYrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUxODU3Mg==", "bodyText": "kind=noship\nedition=full", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r476518572", "createdAt": "2020-08-25T15:01:10Z", "author": {"login": "tevans78"}, "path": "dev/com.ibm.websphere.appserver.features/visibility/private/io.openliberty.org.eclipse.microprofile.openapi-2.0.feature", "diffHunk": "@@ -0,0 +1,7 @@\n+-include= ~${workspace}/cnf/resources/bnd/feature.props\n+symbolicName=io.openliberty.org.eclipse.microprofile.openapi-2.0\n+singleton=true\n+-bundles=io.openliberty.org.eclipse.microprofile.openapi.2.0; location:=\"dev/api/stable/,lib/\"; mavenCoordinates=\"org.eclipse.microprofile.openapi:microprofile-openapi-api:2.0-RC2\"\n+kind=noship\n+edition=core", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0d082954c1977a634d1cb35c102b56923bcb941"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNjgzMzE1", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#pullrequestreview-481683315", "createdAt": "2020-09-03T09:55:54Z", "commit": {"oid": "485906a4e9c767847b905185763d89f553c7eaf6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOTo1NTo1NVrOHMfRCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOTo1NTo1NVrOHMfRCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg1NzIyNQ==", "bodyText": "It looks like you've reformatted this file and broken the block comments.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482857225", "createdAt": "2020-09-03T09:55:55Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.openapi_fat/fat/src/com/ibm/ws/microprofile/openapi/fat/ApplicationProcessorTest.java", "diffHunk": "@@ -26,20 +26,23 @@\n import com.ibm.ws.microprofile.openapi.fat.utils.OpenAPITestUtil;\n \n import componenttest.annotation.Server;\n+import componenttest.annotation.SkipForRepeat;\n import componenttest.custom.junit.runner.FATRunner;\n import componenttest.topology.impl.LibertyServer;\n import componenttest.topology.utils.FATServletClient;\n import componenttest.topology.utils.HttpUtils;\n \n /**\n- * Test to ensure exercise Application Processor. Here's summary of all the scenarios being tested:\n- * - Deploy a single app and ensure it's documentation shows up in /openapi\n- * - Deploy two apps and ensure one app's documentation shows up in /openapi\n- * - Remove the app that was picked from the above scenario and ensure that the other app's documentation now shows up in /openapi\n- * - Remove all apps and ensure no documentation (for any endpoint) is shown in /openapi\n- * - Scenarios involving context root, host/port, servers\n- * - Make a pure JAX-RS app with the ApplicationPath annotation and ensure that the annotations are scanned and a document is generated\n- * - Complete flow: model, static, annotation, filter in order\n+ * Test to ensure exercise Application Processor. Here's summary of all the\n+ * scenarios being tested: - Deploy a single app and ensure it's documentation\n+ * shows up in /openapi - Deploy two apps and ensure one app's documentation\n+ * shows up in /openapi - Remove the app that was picked from the above scenario\n+ * and ensure that the other app's documentation now shows up in /openapi -\n+ * Remove all apps and ensure no documentation (for any endpoint) is shown in\n+ * /openapi - Scenarios involving context root, host/port, servers - Make a pure\n+ * JAX-RS app with the ApplicationPath annotation and ensure that the\n+ * annotations are scanned and a document is generated - Complete flow: model,\n+ * static, annotation, filter in order", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "485906a4e9c767847b905185763d89f553c7eaf6"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNjg0NDAx", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#pullrequestreview-481684401", "createdAt": "2020-09-03T09:57:22Z", "commit": {"oid": "485906a4e9c767847b905185763d89f553c7eaf6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOTo1NzoyMlrOHMfUSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOTo1NzoyMlrOHMfUSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg1ODA1Nw==", "bodyText": "Can this be removed rather than commented out.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482858057", "createdAt": "2020-09-03T09:57:22Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.openapi_fat/fat/src/com/ibm/ws/microprofile/openapi/fat/FATSuite.java", "diffHunk": "@@ -34,4 +38,47 @@\n                 EndpointAvailabilityTest.class,\n                 UICustomizationTest.class\n })\n-public class FATSuite {}\n+public class FATSuite {\n+    private static final String[] ALL_VERSIONS = { \"1.0\", \"1.1\", \"2.0\" };\n+\n+    @ClassRule\n+    public static RepeatTests r = RepeatTests.withoutModification().andWith(MP_OPENAPI(\"1.1\")).andWith(MP_OPENAPI(\"2.0\"));\n+\n+    static FeatureReplacementAction MP_OPENAPI(String version) {\n+        return MP_OPENAPI(new FeatureReplacementAction(), version);\n+    }\n+\n+    static FeatureReplacementAction MP_OPENAPI(FeatureReplacementAction action, String version) {\n+        return use(action, \"mpOpenAPI\", version).withID(\"mpOpenAPI-\" + version);\n+    }\n+\n+//    static FeatureReplacementAction MP_REST_CLIENT_WITH_CONFIG(String version, String serverName) {\n+//        return MP_REST_CLIENT_WITH_CONFIG(new FeatureReplacementAction(), version, serverName);\n+//    }\n+//\n+//    static FeatureReplacementAction MP_OPENAPI_WITH_CONFIG(FeatureReplacementAction action, String version, String serverName) {\n+//        action = use(action, \"mpOpenAPI\", version).withID(\"mpOpenAPI-\" + version).forServers(serverName);\n+//        if (\"1.0\".equals(version)) {\n+//            return use(action, \"mpOpenAPI\", \"1.0\", \"1.1\", \"2.0\");\n+//        } else if (\"1.1\".equals(version)) {\n+//            return use(action, \"mpOpenAPI\", \"1.1\", \"1.0\", \"2.0\");\n+//        } else {\n+//            return use(action, \"mpOpenAPI\", \"2.0\", \"1.0\", \"1.1\");\n+//        }\n+//    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "485906a4e9c767847b905185763d89f553c7eaf6"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNjkyMTY0", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#pullrequestreview-481692164", "createdAt": "2020-09-03T10:07:46Z", "commit": {"oid": "485906a4e9c767847b905185763d89f553c7eaf6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMDowNzo0NlrOHMfr6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMDowNzo0NlrOHMfr6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg2NDEwNQ==", "bodyText": "Oooh, what's this internal optional jaxb feature? Never seen it before.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482864105", "createdAt": "2020-09-03T10:07:46Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.websphere.appserver.features/visibility/public/mpOpenAPI-2.0/io.openliberty.mpOpenAPI-2.0.feature", "diffHunk": "@@ -0,0 +1,54 @@\n+-include= ~${workspace}/cnf/resources/bnd/feature.props\n+symbolicName=io.openliberty.mpOpenAPI-2.0\n+visibility=public\n+singleton=true\n+IBM-App-ForceRestart: install, \\\n+  uninstall\n+IBM-ShortName: mpOpenAPI-2.0\n+Subsystem-Name: MicroProfile OpenAPI 2.0\n+IBM-API-Package: \\\n+    org.eclipse.microprofile.openapi.annotations;  type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.callbacks; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.enums; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.extensions; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.headers; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.info; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.links; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.media; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.parameters; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.responses; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.security; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.servers; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.tags; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.callbacks; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.examples; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.headers; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.info; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.links; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.media; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.parameters; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.responses; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.security; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.servers; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.tags; type=\"stable\"\n+IBM-SPI-Package: \\\n+    org.eclipse.microprofile.openapi.spi; type=\"stable\"\n+-features=\\\n+ io.openliberty.org.eclipse.microprofile.openapi-2.0, \\\n+ com.ibm.websphere.appserver.servlet-3.1; ibm.tolerates:=4.0, \\\n+ com.ibm.websphere.appserver.mpConfig-1.3; ibm.tolerates:=\"1.4\", \\\n+ com.ibm.websphere.appserver.internal.optional.jaxb-2.2; ibm.tolerates:=2.3, \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "485906a4e9c767847b905185763d89f553c7eaf6"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNjkzMTI3", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#pullrequestreview-481693127", "createdAt": "2020-09-03T10:09:07Z", "commit": {"oid": "485906a4e9c767847b905185763d89f553c7eaf6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMDowOTowN1rOHMfuvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMDo0NzoyNVrOHMg8jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg2NDgyOA==", "bodyText": "Before release, these tolerated levels need to be reviewed. I think usually we only support other microprofile features which are in the same microprofile release as our feature. Check with @Emily-Jiang", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482864828", "createdAt": "2020-09-03T10:09:07Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.websphere.appserver.features/visibility/public/mpOpenAPI-2.0/io.openliberty.mpOpenAPI-2.0.feature", "diffHunk": "@@ -0,0 +1,54 @@\n+-include= ~${workspace}/cnf/resources/bnd/feature.props\n+symbolicName=io.openliberty.mpOpenAPI-2.0\n+visibility=public\n+singleton=true\n+IBM-App-ForceRestart: install, \\\n+  uninstall\n+IBM-ShortName: mpOpenAPI-2.0\n+Subsystem-Name: MicroProfile OpenAPI 2.0\n+IBM-API-Package: \\\n+    org.eclipse.microprofile.openapi.annotations;  type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.callbacks; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.enums; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.extensions; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.headers; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.info; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.links; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.media; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.parameters; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.responses; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.security; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.servers; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.annotations.tags; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.callbacks; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.examples; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.headers; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.info; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.links; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.media; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.parameters; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.responses; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.security; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.servers; type=\"stable\",\\\n+\torg.eclipse.microprofile.openapi.models.tags; type=\"stable\"\n+IBM-SPI-Package: \\\n+    org.eclipse.microprofile.openapi.spi; type=\"stable\"\n+-features=\\\n+ io.openliberty.org.eclipse.microprofile.openapi-2.0, \\\n+ com.ibm.websphere.appserver.servlet-3.1; ibm.tolerates:=4.0, \\\n+ com.ibm.websphere.appserver.mpConfig-1.3; ibm.tolerates:=\"1.4\", \\\n+ com.ibm.websphere.appserver.internal.optional.jaxb-2.2; ibm.tolerates:=2.3, \\\n+ com.ibm.wsspi.appserver.webBundle-1.0,\\\n+ com.ibm.websphere.appserver.jaxrs-2.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "485906a4e9c767847b905185763d89f553c7eaf6"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg2NTExNA==", "bodyText": "Odd to have \"MJS Java\" in here, but I suspect it's ok", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482865114", "createdAt": "2020-09-03T10:09:37Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.openapi_fat/.settings/org.eclipse.jdt.ui.prefs", "diffHunk": "@@ -51,8 +51,8 @@ cleanup.use_this_for_non_static_method_access=false\n cleanup.use_this_for_non_static_method_access_only_if_necessary=true\n eclipse.preferences.version=1\n editor_save_participant_org.eclipse.jdt.ui.postsavelistener.cleanup=true\n-formatter_profile=_Unmanaged profile\n-formatter_settings_version=12\n+formatter_profile=_MJS Java\n+formatter_settings_version=18", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "485906a4e9c767847b905185763d89f553c7eaf6"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg2NTQwMw==", "bodyText": "Please try to keep your indentation consistent with the rest of the file.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482865403", "createdAt": "2020-09-03T10:10:09Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.openapi_fat/bnd.bnd", "diffHunk": "@@ -16,19 +16,21 @@ src: \\\n \tfat/src, \\\n \ttest-applications/appWithAnnotations/src, \\\n \ttest-applications/appWithStaticDoc/src, \\\n-\ttest-applications/complete-flow/src, \\\n+    test-applications/complete-flow/src, \\\n \ttest-applications/pure-jaxrs/src, \\\n \ttest-applications/simpleServlet/src\n \n fat.project: true\n \n fat.minimum.java.level: 1.8\n \n+tested.features=mpOpenAPI-1.0,mpOpenAPI-1.1,mpOpenAPI-2.0\n+\n -buildpath: \\\n \tcom.ibm.ws.microprofile.openapi;version=latest, \\\n \tcom.ibm.websphere.javaee.jaxrs.2.0;version=latest, \\\n \tcom.ibm.websphere.javaee.servlet.3.1;version=latest, \\\n-\tcom.ibm.websphere.org.eclipse.microprofile.openapi.1.0;version=latest, \\\n+    com.ibm.websphere.org.eclipse.microprofile.openapi.1.0;version=latest, \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "485906a4e9c767847b905185763d89f553c7eaf6"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg2Njg1NA==", "bodyText": "Comment formatting broken again", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482866854", "createdAt": "2020-09-03T10:12:54Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.openapi_fat/fat/src/com/ibm/ws/microprofile/openapi/fat/UICustomizationTest.java", "diffHunk": "@@ -30,14 +30,17 @@\n import componenttest.topology.utils.HttpUtils;\n \n /**\n- * Tests to ensure OpenAPI UI bundles are updated with custom CSS files provided by users\n+ * Tests to ensure OpenAPI UI bundles are updated with custom CSS files provided\n+ * by users\n  *\n- * - Set a valid CSS file and ensure that the UI is updated with customized value\n- * - Set an empty CSS file and server should produce a warning because it does not contain .swagger-ui .headerbar\n- * - Set an invalid CSS file where the value of background-image property is not valid and ensure that the right message shows up in the server logs and the CSS content must revert\n- * to default\n- * - Ensure there are no caching issues. First set customization, then stop the server. When the server is offline, remove the customization. Then start the server and verify\n- * customization is no longer applied.\n+ * - Set a valid CSS file and ensure that the UI is updated with customized\n+ * value - Set an empty CSS file and server should produce a warning because it\n+ * does not contain .swagger-ui .headerbar - Set an invalid CSS file where the\n+ * value of background-image property is not valid and ensure that the right\n+ * message shows up in the server logs and the CSS content must revert to\n+ * default - Ensure there are no caching issues. First set customization, then\n+ * stop the server. When the server is offline, remove the customization. Then\n+ * start the server and verify customization is no longer applied.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "485906a4e9c767847b905185763d89f553c7eaf6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg2NzU5OA==", "bodyText": "More broken comments", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482867598", "createdAt": "2020-09-03T10:14:14Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.openapi_fat/fat/src/com/ibm/ws/microprofile/openapi/validation/fat/OpenAPIValidationTestOne.java", "diffHunk": "@@ -8,33 +8,40 @@\n import org.junit.runner.RunWith;\n \n import componenttest.annotation.Server;\n+import componenttest.annotation.SkipForRepeat;\n import componenttest.custom.junit.runner.FATRunner;\n import componenttest.topology.impl.LibertyServer;\n import componenttest.topology.utils.HttpUtils;\n \n /**\n- * Tests to ensure that OpenAPI model validation works,\n- * model walker calls appropriate validators, and proper events (errors, warning) are reported.\n+ * Tests to ensure that OpenAPI model validation works, model walker calls\n+ * appropriate validators, and proper events (errors, warning) are reported.\n  *\n- * Tests for correct validation messages provided for the validation errors in the following models:\n+ * Tests for correct validation messages provided for the validation errors in\n+ * the following models:\n  *\n- * Info, Contact, License, ServerVariable(s), Server(s), PathItem, Operation, ExternalDocumentation,\n- * SecurityRequirement, RequestBody, Response, Responses\n+ * Info, Contact, License, ServerVariable(s), Server(s), PathItem, Operation,\n+ * ExternalDocumentation, SecurityRequirement, RequestBody, Response, Responses\n  *\n- * The app with a static yaml file checks the following conditions for each model:\n- * - Info: REQUIRED \"title\" and \"version\", valid \"termsOfService\" URL - all validation cases checked\n- * - License: REQUIRED \"name\", and valid \"url\" URL - all validation cases checked\n- * - Contact: valid url and email - all validation cases checked\n- * - ServerVariable: REQUIRED \"default\" - all validation cases checked\n- * - ServerVariables: null value results in invalid OpenAPI doc, null key is tested - all validation cases checked\n- * - Server: \"url\" field is not null and is valid, and all server variables are defined - all validation cases checked\n- * - PathItem: duplicate parameter, the 'required' field of path parameter, undeclared parameter, path string validity, operation parameters - all validation cases checked\n- * - Operation: RQUIRED 'responses' field and unique operation IDs - all validation cases checked\n- * - ExternalDocumentation: invalid url tested here, null url tested in OpenAPIValidationTestTwo\n- * - SecurityRequirement: name undeclared in SecurityScheme tested, the rest of cases are tested in OpenAPIValidationTestTwo\n- * - RequestBody: REQUIRED 'content' field tested - all validation cases checked\n- * - Response: REQUIRED 'description' field tested - all validation cases checked\n- * - Responses: at least one response code for successful operation tested - all validation cases checked\n+ * The app with a static yaml file checks the following conditions for each\n+ * model: - Info: REQUIRED \"title\" and \"version\", valid \"termsOfService\" URL -\n+ * all validation cases checked - License: REQUIRED \"name\", and valid \"url\" URL\n+ * - all validation cases checked - Contact: valid url and email - all\n+ * validation cases checked - ServerVariable: REQUIRED \"default\" - all\n+ * validation cases checked - ServerVariables: null value results in invalid\n+ * OpenAPI doc, null key is tested - all validation cases checked - Server:\n+ * \"url\" field is not null and is valid, and all server variables are defined -\n+ * all validation cases checked - PathItem: duplicate parameter, the 'required'\n+ * field of path parameter, undeclared parameter, path string validity,\n+ * operation parameters - all validation cases checked - Operation: RQUIRED\n+ * 'responses' field and unique operation IDs - all validation cases checked -\n+ * ExternalDocumentation: invalid url tested here, null url tested in\n+ * OpenAPIValidationTestTwo - SecurityRequirement: name undeclared in\n+ * SecurityScheme tested, the rest of cases are tested in\n+ * OpenAPIValidationTestTwo - RequestBody: REQUIRED 'content' field tested - all\n+ * validation cases checked - Response: REQUIRED 'description' field tested -\n+ * all validation cases checked - Responses: at least one response code for\n+ * successful operation tested - all validation cases checked", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "485906a4e9c767847b905185763d89f553c7eaf6"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg2ODk4OA==", "bodyText": "Looks like this line can be removed too.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482868988", "createdAt": "2020-09-03T10:16:47Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.openapi_fat/fat/src/com/ibm/ws/microprofile/openapi/fat/FATSuite.java", "diffHunk": "@@ -34,4 +38,47 @@\n                 EndpointAvailabilityTest.class,\n                 UICustomizationTest.class\n })\n-public class FATSuite {}\n+public class FATSuite {\n+    private static final String[] ALL_VERSIONS = { \"1.0\", \"1.1\", \"2.0\" };\n+\n+    @ClassRule\n+    public static RepeatTests r = RepeatTests.withoutModification().andWith(MP_OPENAPI(\"1.1\")).andWith(MP_OPENAPI(\"2.0\"));\n+\n+    static FeatureReplacementAction MP_OPENAPI(String version) {\n+        return MP_OPENAPI(new FeatureReplacementAction(), version);\n+    }\n+\n+    static FeatureReplacementAction MP_OPENAPI(FeatureReplacementAction action, String version) {\n+        return use(action, \"mpOpenAPI\", version).withID(\"mpOpenAPI-\" + version);\n+    }\n+\n+//    static FeatureReplacementAction MP_REST_CLIENT_WITH_CONFIG(String version, String serverName) {\n+//        return MP_REST_CLIENT_WITH_CONFIG(new FeatureReplacementAction(), version, serverName);\n+//    }\n+//\n+//    static FeatureReplacementAction MP_OPENAPI_WITH_CONFIG(FeatureReplacementAction action, String version, String serverName) {\n+//        action = use(action, \"mpOpenAPI\", version).withID(\"mpOpenAPI-\" + version).forServers(serverName);\n+//        if (\"1.0\".equals(version)) {\n+//            return use(action, \"mpOpenAPI\", \"1.0\", \"1.1\", \"2.0\");\n+//        } else if (\"1.1\".equals(version)) {\n+//            return use(action, \"mpOpenAPI\", \"1.1\", \"1.0\", \"2.0\");\n+//        } else {\n+//            return use(action, \"mpOpenAPI\", \"2.0\", \"1.0\", \"1.1\");\n+//        }\n+//    }\n+\n+    private static FeatureReplacementAction use(FeatureReplacementAction action, String featureName, String version) {\n+        return use(action, featureName, version, ALL_VERSIONS);\n+    }\n+\n+    private static FeatureReplacementAction use(FeatureReplacementAction action, String featureName, String version, String... versionsToRemove) {\n+//        String feature = featureName + \"-\" + version;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "485906a4e9c767847b905185763d89f553c7eaf6"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3MDkzNw==", "bodyText": "Why does this export need thread-context=true?\nWhen I've seen this before, it's generally been because a class needs to be loaded with ServiceLoader but in those cases, there was also a component definition which added the service definition.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482870937", "createdAt": "2020-09-03T10:20:20Z", "author": {"login": "Azquelt"}, "path": "dev/io.openliberty.io.smallrye.openapi.jaxrs/bnd.bnd", "diffHunk": "@@ -0,0 +1,40 @@\n+#*******************************************************************************\n+# Copyright (c) 2020 IBM Corporation and others.\n+# All rights reserved. This program and the accompanying materials\n+# are made available under the terms of the Eclipse Public License v1.0\n+# which accompanies this distribution, and is available at\n+# http://www.eclipse.org/legal/epl-v10.html\n+#\n+# Contributors:\n+#     IBM Corporation - initial API and implementation\n+#*******************************************************************************\n+-include= ~../cnf/resources/bnd/rejar.props\n+\n+bVersion=1.0\n+\n+javac.source: 1.8\n+javac.target: 1.8\n+\n+Bundle-SymbolicName: io.openliberty.io.smallrye.openapi.jaxrs; singleton:=true\n+\n+WS-TraceGroup: MPOPENAPI\n+\n+Require-Capability: osgi.ee;filter:=\"(&(osgi.ee=JavaSE)(version=1.8))\"\n+\n+src: src\n+\n+-dsannotations-inherit: true\n+\n+Import-Package: \\\n+  *\n+\n+Export-Package: \\\n+  io.smallrye.openapi.jaxrs;thread-context=true;version=2.0.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "485906a4e9c767847b905185763d89f553c7eaf6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3MjI0Ng==", "bodyText": "Inconsistent indentation", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482872246", "createdAt": "2020-09-03T10:22:52Z", "author": {"login": "Azquelt"}, "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/bnd.bnd", "diffHunk": "@@ -0,0 +1,89 @@\n+#*******************************************************************************\n+# Copyright (c) 2020 IBM Corporation and others.\n+# All rights reserved. This program and the accompanying materials\n+# are made available under the terms of the Eclipse Public License v1.0\n+# which accompanies this distribution, and is available at\n+# http://www.eclipse.org/legal/epl-v10.html\n+#\n+# Contributors:\n+#     IBM Corporation - initial API and implementation\n+#*******************************************************************************\n+-include= ~../cnf/resources/bnd/bundle.props\n+bVersion=1.0\n+\n+Bundle-Name: MicroProfile OpenAPI\n+Bundle-SymbolicName: io.openliberty.microprofile.openapi.2.0.internal\n+Bundle-Description: MicroProfile OpenAPI 2.0, version ${bVersion}\n+\n+IBM-Web-Extension-Processing-Disabled: true\n+\n+Web-ContextPath: /openapi\n+\n+Import-Package: \\\n+    org.eclipse.microprofile.config.*;version=\"[1.0,2)\",\\\n+    javax.xml.bind.annotation;version=!,\\\n+    *\n+    \n+Export-Package: \\\n+\tio.openliberty.microprofile.openapi20,\\\n+    io.openliberty.microprofile.openapi20.css,\\\n+    io.openliberty.microprofile.openapi20.servlets,\\\n+\tio.openliberty.microprofile.openapi20.utils,\\\n+\tio.openliberty.microprofile.openapi20.validation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "485906a4e9c767847b905185763d89f553c7eaf6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3Mjg4Nw==", "bodyText": "Copyright date questionable.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482872887", "createdAt": "2020-09-03T10:24:13Z", "author": {"login": "Azquelt"}, "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/resources/WEB-INF/web.xml", "diffHunk": "@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Copyright (c) 2012 IBM Corporation and others.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "485906a4e9c767847b905185763d89f553c7eaf6"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3Mjk5NQ==", "bodyText": "Copyright date questionable", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482872995", "createdAt": "2020-09-03T10:24:29Z", "author": {"login": "Azquelt"}, "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/resources/io/openliberty/microprofile/openapi20/resources/OpenAPI.nlsprops", "diffHunk": "@@ -0,0 +1,67 @@\n+# Copyright (c) 2018 IBM Corporation and others.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "485906a4e9c767847b905185763d89f553c7eaf6"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3Mzc1NA==", "bodyText": "Have these NLS file been copied from the previous version of the feature?\nIt seems odd to have the same message in multiple files and could lead to a message being updated in one version and not in the other.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482873754", "createdAt": "2020-09-03T10:25:54Z", "author": {"login": "Azquelt"}, "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/resources/io/openliberty/microprofile/openapi20/resources/OpenAPI.nlsprops", "diffHunk": "@@ -0,0 +1,67 @@\n+# Copyright (c) 2018 IBM Corporation and others.\n+# All rights reserved. This program and the accompanying materials\n+# are made available under the terms of the Eclipse Public License v1.0\n+# which accompanies this distribution, and is available at\n+# http://www.eclipse.org/legal/epl-v10.html\n+#\n+# Contributors:\n+#     IBM Corporation - initial API and implementation\n+# -------------------------------------------------------------------------------------------------\n+#CMVCPATHNAME N/A\n+#COMPONENTPREFIX CWWKO\n+#COMPONENTNAMEFOR CWWKO MicroProfile OpenAPI API\n+#ISMESSAGEFILE TRUE\n+#NLS_MESSAGEFORMAT_VAR\n+#NLS_ENCODING=UNICODE\n+# -------------------------------------------------------------------------------------------------\n+\n+# Message prefix block: CWWKO1650 - CWWKO1699\n+\n+OPENAPI_DOCUMENT_VALIDATION_ERROR=CWWKO1650E: Validation of the OpenAPI document produced the following error(s):\n+OPENAPI_DOCUMENT_VALIDATION_ERROR.explanation=The OpenAPI document is invalid.\n+OPENAPI_DOCUMENT_VALIDATION_ERROR.useraction=Provide a valid OpenAPI document that resolves the reported error.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "485906a4e9c767847b905185763d89f553c7eaf6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3NDQzMA==", "bodyText": "Copyright date should probably be 2017, 2020", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482874430", "createdAt": "2020-09-03T10:27:11Z", "author": {"login": "Azquelt"}, "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/src/io/openliberty/microprofile/openapi20/ApplicationListener.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*******************************************************************************\n+ * Copyright (c) 2017 IBM Corporation and others.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "485906a4e9c767847b905185763d89f553c7eaf6"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg4MDQyMQ==", "bodyText": "I think with a DYNAMIC and MANDATORY reference, you're supposed to check whether appProcessor == this.appProcessor before setting this.appProcessor to null.\nDYNAMIC + MANDATORY implies that the reference can be replaced while the component is active, in which case I think the runtime will do setApplicationProcessor(newProcessor); unsetApplicationProcessor(oldProcessor());, so your unset method should check whether the appProcessor has already been replaced before clearing the field.\nSee https://docs.osgi.org/specification/osgi.cmpn/7.0.0/service.component.html#service.component-method.injection\n\nIf the policy is dynamic then the bind method of a replacement service can be called before its corresponding unbind method.\n\nYou could probably also switch to a non-dynamic reference and/or to annotating a field rather than having set and unset methods.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482880421", "createdAt": "2020-09-03T10:39:25Z", "author": {"login": "Azquelt"}, "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/src/io/openliberty/microprofile/openapi20/ApplicationListener.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*******************************************************************************\n+ * Copyright (c) 2017 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.microprofile.openapi20;\n+\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+import org.osgi.service.component.annotations.ReferencePolicyOption;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.container.service.app.deploy.ApplicationInfo;\n+import com.ibm.ws.container.service.state.ApplicationStateListener;\n+import com.ibm.ws.container.service.state.StateChangeException;\n+\n+import io.openliberty.microprofile.openapi20.utils.LoggingUtils;\n+\n+@Component(service = { ApplicationStateListener.class }, configurationPolicy = ConfigurationPolicy.IGNORE, immediate = true)\n+public class ApplicationListener implements ApplicationStateListener {\n+\n+    private static final TraceComponent tc = Tr.register(ApplicationListener.class);\n+    private ApplicationProcessor appProcessor = null;\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public void applicationStarting(ApplicationInfo appInfo) throws StateChangeException {\n+        if (appProcessor != null) {\n+            try {\n+                if (LoggingUtils.isEventEnabled(tc)) {\n+                    Tr.event(tc, \"Application starting process started: \" + appInfo);\n+                }\n+                appProcessor.addApplication(appInfo);\n+                if (LoggingUtils.isEventEnabled(tc)) {\n+                    Tr.event(tc, \"Application starting process ended: \" + appInfo);\n+                }\n+            } catch (Throwable e) {\n+                if (LoggingUtils.isEventEnabled(tc)) {\n+                    Tr.event(tc, \"Failed to process application: \" + e.getMessage());\n+                }\n+            }\n+        }\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public void applicationStarted(ApplicationInfo appInfo) throws StateChangeException {}\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public void applicationStopping(ApplicationInfo appInfo) {\n+        if (appProcessor != null) {\n+            try {\n+                ApplicationProcessor.getInstance().removeApplication(appInfo);\n+            } catch (Throwable e) {\n+                if (LoggingUtils.isEventEnabled(tc)) {\n+                    Tr.event(tc, \"Failed to remove application: \" + e.getMessage());\n+                }\n+            }\n+        }\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public void applicationStopped(ApplicationInfo appInfo) {}\n+\n+    @Reference(service = ApplicationProcessor.class, policy = ReferencePolicy.DYNAMIC, cardinality = ReferenceCardinality.MANDATORY, policyOption = ReferencePolicyOption.GREEDY)\n+    protected void setApplicationProcessor(ApplicationProcessor appProcessor) {\n+        this.appProcessor = appProcessor;\n+    }\n+\n+    protected void unsetApplicationProcessor(ApplicationProcessor appProcessor) {\n+        this.appProcessor = null;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "485906a4e9c767847b905185763d89f553c7eaf6"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg4MTEyMg==", "bodyText": "Copyright date", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482881122", "createdAt": "2020-09-03T10:40:41Z", "author": {"login": "Azquelt"}, "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/src/io/openliberty/microprofile/openapi20/ApplicationProcessor.java", "diffHunk": "@@ -0,0 +1,591 @@\n+/*******************************************************************************\n+ * Copyright (c) 2017, 2019 IBM Corporation and others.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "485906a4e9c767847b905185763d89f553c7eaf6"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg4MTY2MA==", "bodyText": "I guess this class was coped from the 1.0 feature? Is this comment still true for OpenAPI 2.0 ?", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482881660", "createdAt": "2020-09-03T10:41:44Z", "author": {"login": "Azquelt"}, "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/src/io/openliberty/microprofile/openapi20/ApplicationProcessor.java", "diffHunk": "@@ -0,0 +1,591 @@\n+/*******************************************************************************\n+ * Copyright (c) 2017, 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.microprofile.openapi20;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.eclipse.microprofile.openapi.models.OpenAPI;\n+import org.eclipse.microprofile.openapi.models.Paths;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+import com.ibm.ws.container.service.app.deploy.ApplicationClassesContainerInfo;\n+import com.ibm.ws.container.service.app.deploy.ApplicationInfo;\n+import com.ibm.ws.container.service.app.deploy.EARApplicationInfo;\n+import com.ibm.ws.container.service.app.deploy.WebModuleInfo;\n+import com.ibm.ws.ffdc.annotation.FFDCIgnore;\n+import com.ibm.wsspi.adaptable.module.Container;\n+import com.ibm.wsspi.adaptable.module.Entry;\n+import com.ibm.wsspi.adaptable.module.NonPersistentCache;\n+import com.ibm.wsspi.adaptable.module.UnableToAdaptException;\n+import com.ibm.wsspi.http.VirtualHost;\n+\n+import io.openliberty.microprofile.openapi20.utils.CloudUtils;\n+import io.openliberty.microprofile.openapi20.utils.Constants;\n+import io.openliberty.microprofile.openapi20.utils.IndexUtils;\n+import io.openliberty.microprofile.openapi20.utils.LoggingUtils;\n+import io.openliberty.microprofile.openapi20.utils.MessageConstants;\n+import io.openliberty.microprofile.openapi20.utils.ModuleUtils;\n+import io.openliberty.microprofile.openapi20.utils.OpenAPIUtils;\n+import io.openliberty.microprofile.openapi20.utils.ProxySupportUtil;\n+import io.openliberty.microprofile.openapi20.utils.ServerInfo;\n+import io.openliberty.microprofile.openapi20.utils.ValidationMessageConstants;\n+import io.openliberty.microprofile.openapi20.validation.OASValidationResult;\n+import io.openliberty.microprofile.openapi20.validation.OASValidationResult.ValidationEvent.Severity;\n+import io.openliberty.microprofile.openapi20.validation.OASValidator;\n+import io.openliberty.microprofile.openapi20.validation.ValidatorUtils;\n+import io.smallrye.openapi.api.OpenApiConfig;\n+import io.smallrye.openapi.api.OpenApiDocument;\n+import io.smallrye.openapi.api.models.info.InfoImpl;\n+import io.smallrye.openapi.runtime.OpenApiProcessor;\n+import io.smallrye.openapi.runtime.OpenApiStaticFile;\n+import io.smallrye.openapi.runtime.io.Format;\n+import io.smallrye.openapi.runtime.io.OpenApiSerializer;\n+\n+/**\n+ * The ApplicationProcessor class processes applications that are deployed to the OpenLiberty instance in order to\n+ * generate OpenAPI documents. However, the MP OpenAPI functionality in OpenLiberty only supports generating an OpenAPI\n+ * document for a single application at a time so, if multiple applications are deployed to the OpenLiberty instance,\n+ * an OpenAPI document will only be generated for the first application that is processed. Also, if an enterprise\n+ * application (EAR/EBA) is deployed that contains multiple web modules, an OpenAPI document will only be generated for\n+ * the first Web Module that generates an OpenAPI document. \n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "485906a4e9c767847b905185763d89f553c7eaf6"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg4NDEyOQ==", "bodyText": "Not sure this needs to be immediate?", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482884129", "createdAt": "2020-09-03T10:46:20Z", "author": {"login": "Azquelt"}, "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/src/io/openliberty/microprofile/openapi20/ApplicationProcessor.java", "diffHunk": "@@ -0,0 +1,591 @@\n+/*******************************************************************************\n+ * Copyright (c) 2017, 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.microprofile.openapi20;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.eclipse.microprofile.openapi.models.OpenAPI;\n+import org.eclipse.microprofile.openapi.models.Paths;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+import com.ibm.ws.container.service.app.deploy.ApplicationClassesContainerInfo;\n+import com.ibm.ws.container.service.app.deploy.ApplicationInfo;\n+import com.ibm.ws.container.service.app.deploy.EARApplicationInfo;\n+import com.ibm.ws.container.service.app.deploy.WebModuleInfo;\n+import com.ibm.ws.ffdc.annotation.FFDCIgnore;\n+import com.ibm.wsspi.adaptable.module.Container;\n+import com.ibm.wsspi.adaptable.module.Entry;\n+import com.ibm.wsspi.adaptable.module.NonPersistentCache;\n+import com.ibm.wsspi.adaptable.module.UnableToAdaptException;\n+import com.ibm.wsspi.http.VirtualHost;\n+\n+import io.openliberty.microprofile.openapi20.utils.CloudUtils;\n+import io.openliberty.microprofile.openapi20.utils.Constants;\n+import io.openliberty.microprofile.openapi20.utils.IndexUtils;\n+import io.openliberty.microprofile.openapi20.utils.LoggingUtils;\n+import io.openliberty.microprofile.openapi20.utils.MessageConstants;\n+import io.openliberty.microprofile.openapi20.utils.ModuleUtils;\n+import io.openliberty.microprofile.openapi20.utils.OpenAPIUtils;\n+import io.openliberty.microprofile.openapi20.utils.ProxySupportUtil;\n+import io.openliberty.microprofile.openapi20.utils.ServerInfo;\n+import io.openliberty.microprofile.openapi20.utils.ValidationMessageConstants;\n+import io.openliberty.microprofile.openapi20.validation.OASValidationResult;\n+import io.openliberty.microprofile.openapi20.validation.OASValidationResult.ValidationEvent.Severity;\n+import io.openliberty.microprofile.openapi20.validation.OASValidator;\n+import io.openliberty.microprofile.openapi20.validation.ValidatorUtils;\n+import io.smallrye.openapi.api.OpenApiConfig;\n+import io.smallrye.openapi.api.OpenApiDocument;\n+import io.smallrye.openapi.api.models.info.InfoImpl;\n+import io.smallrye.openapi.runtime.OpenApiProcessor;\n+import io.smallrye.openapi.runtime.OpenApiStaticFile;\n+import io.smallrye.openapi.runtime.io.Format;\n+import io.smallrye.openapi.runtime.io.OpenApiSerializer;\n+\n+/**\n+ * The ApplicationProcessor class processes applications that are deployed to the OpenLiberty instance in order to\n+ * generate OpenAPI documents. However, the MP OpenAPI functionality in OpenLiberty only supports generating an OpenAPI\n+ * document for a single application at a time so, if multiple applications are deployed to the OpenLiberty instance,\n+ * an OpenAPI document will only be generated for the first application that is processed. Also, if an enterprise\n+ * application (EAR/EBA) is deployed that contains multiple web modules, an OpenAPI document will only be generated for\n+ * the first Web Module that generates an OpenAPI document. \n+ */\n+@Component(service = { ApplicationProcessor.class }, configurationPolicy = ConfigurationPolicy.IGNORE, immediate = true, property = { \"service.vendor=IBM\" })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "485906a4e9c767847b905185763d89f553c7eaf6"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg4NDc1MQ==", "bodyText": "Why are you using ApplicationProcessor.getInstance() rather than appProcessor?", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r482884751", "createdAt": "2020-09-03T10:47:25Z", "author": {"login": "Azquelt"}, "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/src/io/openliberty/microprofile/openapi20/ApplicationListener.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*******************************************************************************\n+ * Copyright (c) 2017 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.microprofile.openapi20;\n+\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+import org.osgi.service.component.annotations.ReferencePolicyOption;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.container.service.app.deploy.ApplicationInfo;\n+import com.ibm.ws.container.service.state.ApplicationStateListener;\n+import com.ibm.ws.container.service.state.StateChangeException;\n+\n+import io.openliberty.microprofile.openapi20.utils.LoggingUtils;\n+\n+@Component(service = { ApplicationStateListener.class }, configurationPolicy = ConfigurationPolicy.IGNORE, immediate = true)\n+public class ApplicationListener implements ApplicationStateListener {\n+\n+    private static final TraceComponent tc = Tr.register(ApplicationListener.class);\n+    private ApplicationProcessor appProcessor = null;\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public void applicationStarting(ApplicationInfo appInfo) throws StateChangeException {\n+        if (appProcessor != null) {\n+            try {\n+                if (LoggingUtils.isEventEnabled(tc)) {\n+                    Tr.event(tc, \"Application starting process started: \" + appInfo);\n+                }\n+                appProcessor.addApplication(appInfo);\n+                if (LoggingUtils.isEventEnabled(tc)) {\n+                    Tr.event(tc, \"Application starting process ended: \" + appInfo);\n+                }\n+            } catch (Throwable e) {\n+                if (LoggingUtils.isEventEnabled(tc)) {\n+                    Tr.event(tc, \"Failed to process application: \" + e.getMessage());\n+                }\n+            }\n+        }\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public void applicationStarted(ApplicationInfo appInfo) throws StateChangeException {}\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public void applicationStopping(ApplicationInfo appInfo) {\n+        if (appProcessor != null) {\n+            try {\n+                ApplicationProcessor.getInstance().removeApplication(appInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "485906a4e9c767847b905185763d89f553c7eaf6"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNTYwMDg5", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#pullrequestreview-482560089", "createdAt": "2020-09-04T11:02:09Z", "commit": {"oid": "cf2fe89286d211be36cc0dca87d1500b49d2dba5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMTowMjowOVrOHNJWEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMTowMjowOVrOHNJWEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU0NjY0Mw==", "bodyText": "Is this method really rewriting the content of the UI bundle?\nWhy on earth is that necessary?", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483546643", "createdAt": "2020-09-04T11:02:09Z", "author": {"login": "Azquelt"}, "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/src/io/openliberty/microprofile/openapi20/css/OpenAPIUIBundlesUpdater.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.microprofile.openapi20.css;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.BundleException;\n+import org.osgi.framework.FrameworkUtil;\n+import org.osgi.framework.ServiceReference;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+import com.ibm.wsspi.kernel.service.utils.FileUtils;\n+\n+import io.openliberty.microprofile.openapi20.utils.CloudUtils;\n+import io.openliberty.microprofile.openapi20.utils.Constants;\n+import io.openliberty.microprofile.openapi20.utils.LoggingUtils;\n+\n+/**\n+ * Update all OpenAPI-UI bundles\n+ */\n+public class OpenAPIUIBundlesUpdater {\n+\n+    private static final TraceComponent tc = Tr.register(OpenAPIUIBundlesUpdater.class);\n+\n+    /**\n+     * List of OpenAPI-UI bundles\n+     */\n+    private static final Set<String> openAPIUIBundleNames = new HashSet<String>(Arrays.asList(new String[] {\"com.ibm.ws.microprofile.openapi.ui\"}));\n+\n+    private static boolean stopping = false;\n+\n+    synchronized static void updateResources(Map<String, Object> resourcesToUpdate, boolean isRestoreDefaults) throws IOException, BundleException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2fe89286d211be36cc0dca87d1500b49d2dba5"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNTY5MDkx", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#pullrequestreview-482569091", "createdAt": "2020-09-04T11:18:42Z", "commit": {"oid": "cf2fe89286d211be36cc0dca87d1500b49d2dba5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMToxODo0MlrOHNJxBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMToxODo0MlrOHNJxBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU1MzU0Mg==", "bodyText": "Unsure why these two fields are static.\nThere are multiple times where access to them is synchronized on document which is non-static.\nI guess it shouldn't matter since this should be a singleton class anyway?", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483553542", "createdAt": "2020-09-04T11:18:42Z", "author": {"login": "Azquelt"}, "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/src/io/openliberty/microprofile/openapi20/ApplicationProcessor.java", "diffHunk": "@@ -0,0 +1,591 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.microprofile.openapi20;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.eclipse.microprofile.openapi.models.OpenAPI;\n+import org.eclipse.microprofile.openapi.models.Paths;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+import com.ibm.ws.container.service.app.deploy.ApplicationClassesContainerInfo;\n+import com.ibm.ws.container.service.app.deploy.ApplicationInfo;\n+import com.ibm.ws.container.service.app.deploy.EARApplicationInfo;\n+import com.ibm.ws.container.service.app.deploy.WebModuleInfo;\n+import com.ibm.ws.ffdc.annotation.FFDCIgnore;\n+import com.ibm.wsspi.adaptable.module.Container;\n+import com.ibm.wsspi.adaptable.module.Entry;\n+import com.ibm.wsspi.adaptable.module.NonPersistentCache;\n+import com.ibm.wsspi.adaptable.module.UnableToAdaptException;\n+import com.ibm.wsspi.http.VirtualHost;\n+\n+import io.openliberty.microprofile.openapi20.utils.CloudUtils;\n+import io.openliberty.microprofile.openapi20.utils.Constants;\n+import io.openliberty.microprofile.openapi20.utils.IndexUtils;\n+import io.openliberty.microprofile.openapi20.utils.LoggingUtils;\n+import io.openliberty.microprofile.openapi20.utils.MessageConstants;\n+import io.openliberty.microprofile.openapi20.utils.ModuleUtils;\n+import io.openliberty.microprofile.openapi20.utils.OpenAPIUtils;\n+import io.openliberty.microprofile.openapi20.utils.ProxySupportUtil;\n+import io.openliberty.microprofile.openapi20.utils.ServerInfo;\n+import io.openliberty.microprofile.openapi20.utils.ValidationMessageConstants;\n+import io.openliberty.microprofile.openapi20.validation.OASValidationResult;\n+import io.openliberty.microprofile.openapi20.validation.OASValidationResult.ValidationEvent.Severity;\n+import io.openliberty.microprofile.openapi20.validation.OASValidator;\n+import io.openliberty.microprofile.openapi20.validation.ValidatorUtils;\n+import io.smallrye.openapi.api.OpenApiConfig;\n+import io.smallrye.openapi.api.OpenApiDocument;\n+import io.smallrye.openapi.api.models.info.InfoImpl;\n+import io.smallrye.openapi.runtime.OpenApiProcessor;\n+import io.smallrye.openapi.runtime.OpenApiStaticFile;\n+import io.smallrye.openapi.runtime.io.Format;\n+import io.smallrye.openapi.runtime.io.OpenApiSerializer;\n+\n+/**\n+ * The ApplicationProcessor class processes applications that are deployed to the OpenLiberty instance in order to\n+ * generate OpenAPI documents. However, the MP OpenAPI functionality in OpenLiberty only supports generating an OpenAPI\n+ * document for a single application at a time so, if multiple applications are deployed to the OpenLiberty instance,\n+ * an OpenAPI document will only be generated for the first application that is processed. Also, if an enterprise\n+ * application (EAR/EBA) is deployed that contains multiple web modules, an OpenAPI document will only be generated for\n+ * the first Web Module that generates an OpenAPI document. \n+ */\n+@Component(service = { ApplicationProcessor.class }, configurationPolicy = ConfigurationPolicy.IGNORE, immediate = true, property = { \"service.vendor=IBM\" })\n+public class ApplicationProcessor {\n+\n+    private static final TraceComponent tc = Tr.register(ApplicationProcessor.class);\n+\n+    private static ApplicationProcessor instance = null;\n+    private OpenAPI document = null;\n+    private static ApplicationInfo currentApp = null;\n+    private static Map<String, ApplicationInfo> applications = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2fe89286d211be36cc0dca87d1500b49d2dba5"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNTY5MzE5", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#pullrequestreview-482569319", "createdAt": "2020-09-04T11:19:09Z", "commit": {"oid": "cf2fe89286d211be36cc0dca87d1500b49d2dba5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMToxOTowOVrOHNJxvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMToxOTowOVrOHNJxvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU1MzcyNg==", "bodyText": "Another commented out line", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483553726", "createdAt": "2020-09-04T11:19:09Z", "author": {"login": "Azquelt"}, "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/src/io/openliberty/microprofile/openapi20/ApplicationProcessor.java", "diffHunk": "@@ -0,0 +1,591 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.microprofile.openapi20;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.eclipse.microprofile.openapi.models.OpenAPI;\n+import org.eclipse.microprofile.openapi.models.Paths;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.websphere.ras.annotation.Trivial;\n+import com.ibm.ws.container.service.app.deploy.ApplicationClassesContainerInfo;\n+import com.ibm.ws.container.service.app.deploy.ApplicationInfo;\n+import com.ibm.ws.container.service.app.deploy.EARApplicationInfo;\n+import com.ibm.ws.container.service.app.deploy.WebModuleInfo;\n+import com.ibm.ws.ffdc.annotation.FFDCIgnore;\n+import com.ibm.wsspi.adaptable.module.Container;\n+import com.ibm.wsspi.adaptable.module.Entry;\n+import com.ibm.wsspi.adaptable.module.NonPersistentCache;\n+import com.ibm.wsspi.adaptable.module.UnableToAdaptException;\n+import com.ibm.wsspi.http.VirtualHost;\n+\n+import io.openliberty.microprofile.openapi20.utils.CloudUtils;\n+import io.openliberty.microprofile.openapi20.utils.Constants;\n+import io.openliberty.microprofile.openapi20.utils.IndexUtils;\n+import io.openliberty.microprofile.openapi20.utils.LoggingUtils;\n+import io.openliberty.microprofile.openapi20.utils.MessageConstants;\n+import io.openliberty.microprofile.openapi20.utils.ModuleUtils;\n+import io.openliberty.microprofile.openapi20.utils.OpenAPIUtils;\n+import io.openliberty.microprofile.openapi20.utils.ProxySupportUtil;\n+import io.openliberty.microprofile.openapi20.utils.ServerInfo;\n+import io.openliberty.microprofile.openapi20.utils.ValidationMessageConstants;\n+import io.openliberty.microprofile.openapi20.validation.OASValidationResult;\n+import io.openliberty.microprofile.openapi20.validation.OASValidationResult.ValidationEvent.Severity;\n+import io.openliberty.microprofile.openapi20.validation.OASValidator;\n+import io.openliberty.microprofile.openapi20.validation.ValidatorUtils;\n+import io.smallrye.openapi.api.OpenApiConfig;\n+import io.smallrye.openapi.api.OpenApiDocument;\n+import io.smallrye.openapi.api.models.info.InfoImpl;\n+import io.smallrye.openapi.runtime.OpenApiProcessor;\n+import io.smallrye.openapi.runtime.OpenApiStaticFile;\n+import io.smallrye.openapi.runtime.io.Format;\n+import io.smallrye.openapi.runtime.io.OpenApiSerializer;\n+\n+/**\n+ * The ApplicationProcessor class processes applications that are deployed to the OpenLiberty instance in order to\n+ * generate OpenAPI documents. However, the MP OpenAPI functionality in OpenLiberty only supports generating an OpenAPI\n+ * document for a single application at a time so, if multiple applications are deployed to the OpenLiberty instance,\n+ * an OpenAPI document will only be generated for the first application that is processed. Also, if an enterprise\n+ * application (EAR/EBA) is deployed that contains multiple web modules, an OpenAPI document will only be generated for\n+ * the first Web Module that generates an OpenAPI document. \n+ */\n+@Component(service = { ApplicationProcessor.class }, configurationPolicy = ConfigurationPolicy.IGNORE, immediate = true, property = { \"service.vendor=IBM\" })\n+public class ApplicationProcessor {\n+\n+    private static final TraceComponent tc = Tr.register(ApplicationProcessor.class);\n+\n+    private static ApplicationProcessor instance = null;\n+    private OpenAPI document = null;\n+    private static ApplicationInfo currentApp = null;\n+    private static Map<String, ApplicationInfo> applications = new HashMap<>();\n+    private final ServerInfo serverInfo = new ServerInfo();\n+\n+    /**\n+     * The getInstance method returns the singleton instance of the ApplicationProcessor\n+     * \n+     * @return ApplicationProcessor\n+     *             The singleton instance\n+     */\n+    public static ApplicationProcessor getInstance() {\n+        return instance;\n+    }\n+\n+    /**\n+     * The activate method invoked by the Service Component Runtime.\n+     * \n+     * @param cc\n+     *            The ComponentContext for this component\n+     */\n+    public void activate(ComponentContext cc) {\n+        instance = this;\n+        this.document = OpenAPIUtils.createBaseOpenAPIDocument();\n+        if (currentApp != null) {\n+            processApplication(currentApp);\n+        }\n+    }\n+\n+    /**\n+     * The addApplication method is invoked by the {@link ApplicationListener} when it is notified that an application\n+     * is starting. \n+     * \n+     * @param appInfo\n+     *           The ApplicationInfo for the application that is starting.\n+     */\n+    public void addApplication(ApplicationInfo appInfo) {\n+        if (LoggingUtils.isEventEnabled(tc)) {\n+            Tr.event(tc, \"Application Processor: Adding application started: appInfo=\" + appInfo);\n+        }\n+        synchronized (this.document) {\n+            if (currentApp == null) {\n+                processApplication(appInfo);\n+            } else {\n+                applications.put(appInfo.getName(), appInfo);\n+            }\n+        }\n+        if (LoggingUtils.isEventEnabled(tc)) {\n+            Tr.event(tc, \"Application Processor: Adding application ended: appInfo=\" + appInfo);\n+        }\n+    }\n+\n+    /**\n+     * The removeApplication method is invoked by the {@link ApplicationListener} when it is notified that an\n+     * application is stopping.\n+     * \n+     * @param appInfo\n+     *           The ApplicationInfo for the application that is stopping.\n+     */\n+    public void removeApplication(ApplicationInfo appInfo) {\n+        if (LoggingUtils.isEventEnabled(tc)) {\n+            Tr.event(tc, \"Application Processor: Removing application started: appInfo=\" + appInfo);\n+        }\n+        synchronized (this.document) {\n+            if (currentApp != null && currentApp.getName().equals(appInfo.getName())) {\n+                currentApp = null;\n+                this.serverInfo.setApplicationPath(null);\n+                this.serverInfo.setIsUserServer(false);\n+                this.document = OpenAPIUtils.createBaseOpenAPIDocument();\n+                Iterator<java.util.Map.Entry<String, ApplicationInfo>> iterator = applications.entrySet().iterator();\n+                while (iterator.hasNext()) {\n+                    java.util.Map.Entry<String, ApplicationInfo> entry = iterator.next();\n+                    processApplication(entry.getValue());\n+                    iterator.remove();\n+                    if (currentApp != null) {\n+                        break;\n+                    }\n+                }\n+            } else {\n+                applications.remove(appInfo.getName());\n+            }\n+        }\n+        if (LoggingUtils.isEventEnabled(tc)) {\n+            Tr.event(tc, \"Application Processor: Removing application ended: appInfo=\" + appInfo);\n+        }\n+    }\n+\n+    /**\n+     * The getOpenAPIDocument method returns the OpenAPI document for the current application in the specified format\n+     * (JSON or YAML).\n+     * \n+     * @param request\n+     *            The HttpServletRequest object\n+     * @param format\n+     *            The format desired format of the document\n+     * @return\n+     */\n+    @FFDCIgnore(IOException.class)\n+    public String getOpenAPIDocument(HttpServletRequest request, Format format) {\n+        String oasResult = null;\n+        synchronized (this.document) {\n+            ServerInfo reqServerInfo = null;\n+            synchronized (serverInfo) {\n+                reqServerInfo = new ServerInfo(serverInfo);\n+            }\n+            ProxySupportUtil.processRequest(request, reqServerInfo);\n+            if (LoggingUtils.isEventEnabled(tc)) {\n+                Tr.event(tc, \"Request server info : \" + reqServerInfo);\n+            }\n+            reqServerInfo.updateOpenAPIWithServers(this.document);\n+            try {\n+                oasResult = OpenApiSerializer.serialize(this.document, format);\n+            } catch (IOException e) {\n+                if (LoggingUtils.isEventEnabled(tc)) {\n+                    Tr.event(this, tc, \"Failed to serialize OpenAPI docuemnt: \" + e.getMessage());\n+                }\n+            }\n+        }\n+        if (LoggingUtils.isDebugEnabled(tc)) {\n+            Tr.debug(tc, \"Serialized document=\" + oasResult);\n+        }\n+        return oasResult;\n+    }\n+\n+    /**\n+     * The processApplication method processes applications that are added to the OpenLiberty instance. These \n+     * \n+     * @param appInfo\n+     *            The ApplicationInfo for the application to be processed.\n+     */\n+    @FFDCIgnore(UnableToAdaptException.class)\n+    private void processApplication(final ApplicationInfo appInfo) {\n+        if (LoggingUtils.isEventEnabled(tc)) {\n+            Tr.event(tc, \"Application Processor: Processing application started: appInfo=\" + appInfo);\n+        }\n+        synchronized (this.document) {\n+            \n+            // Make sure that we have valid application info\n+            if (appInfo != null) {\n+                // Get the container for the application\n+                Container appContainer = appInfo.getContainer();\n+                if (appContainer != null) {\n+                    \n+                    // Check for app classes, if it is not there then the app manager is not in control of this app\n+                    try {\n+                        NonPersistentCache cache = appContainer.adapt(NonPersistentCache.class);\n+                        ApplicationClassesContainerInfo applicationClassesContainerInfo =\n+                            (ApplicationClassesContainerInfo) cache.getFromCache(ApplicationClassesContainerInfo.class);\n+                        if (applicationClassesContainerInfo != null) {\n+                            WebModuleInfo moduleInfo = null;\n+                            \n+                            // Check to see if the deployed application is an EAR/EBA\n+                            if (appInfo instanceof EARApplicationInfo) {\n+                                /*\n+                                 * Iterate over the entries in the application. An Enterprise Application can contain\n+                                 * various types of module, including Web modules. We need to attempt to retrieve the\n+                                 * WebModuleInfo for each entry and, if there is WebModuleInfo, process it. If this\n+                                 * results in an OpenAPI document being generated, we do not process any more entries\n+                                 * because we only generate a single OpenAPI document... even if the application\n+                                 * contains multiple web modules.\n+                                 */\n+                                for (Entry entry : appContainer) {\n+                                    try {\n+                                        // Attempt to adapt the entry to a container\n+                                        Container container = entry.adapt(Container.class);\n+                                        if (container != null) {\n+                                            \n+                                            // Attempt to retrieve WebModuleInfo for the container\n+                                            WebModuleInfo wmi = ModuleUtils.getWebModuleInfo(container);\n+                                            if (wmi != null) {\n+                                                \n+                                                // Process the web module\n+                                                OpenAPI openAPI = processWebModule(container, wmi);\n+                                                if (openAPI != null) {\n+                                                    \n+                                                    // OpenAPI document generated... finish processing and exit the loop\n+                                                    currentApp = appInfo;\n+                                                    this.document = openAPI;\n+                                                    handleApplicationPath(openAPI, wmi.getContextRoot());\n+                                                    handleUserServer(openAPI);\n+                                                    Tr.info(tc, MessageConstants.OPENAPI_APPLICATION_PROCESSED, wmi.getApplicationInfo().getDeploymentName());\n+                                                    break;\n+                                                }\n+                                            }\n+                                        }\n+                                    } catch (UnableToAdaptException e) {\n+                                        // Unable to adapt... log it and move on\n+                                        if (LoggingUtils.isEventEnabled(tc)) {\n+                                            Tr.event(tc, \"Failed to adapt entry: entry=\" + entry + \" : \\n\" + e.getMessage());\n+                                        }\n+                                    }\n+                                } // FOR\n+                            } else {\n+                                // Not an Enterprise Application... attempt to get the WebModuleInfo\n+                                moduleInfo = ModuleUtils.getWebModuleInfo(appContainer);\n+                                \n+                                // Make sure that we have a valid web module.  If we do, process it.\n+                                if (moduleInfo != null) {\n+                                    OpenAPI openAPI = processWebModule(appContainer, moduleInfo);\n+                                    if (openAPI != null) {\n+                                        currentApp = appInfo;\n+                                        handleApplicationPath(openAPI, moduleInfo.getContextRoot());\n+                                        handleUserServer(openAPI);\n+                                        this.document = openAPI;\n+                                        Tr.info(tc, MessageConstants.OPENAPI_APPLICATION_PROCESSED, moduleInfo.getApplicationInfo().getDeploymentName());\n+                                    }\n+                                    \n+                                    if (LoggingUtils.isEventEnabled(tc)) {\n+                                        Tr.event(tc, \"Application Processor: Processing application ended: appInfo=\" + appInfo);\n+                                    }\n+                                } else {\n+                                    if (LoggingUtils.isEventEnabled(tc)) {\n+                                        Tr.event(tc, \"Application Processor: Processing application ended: moduleInfo=null : appInfo=\" + appInfo);\n+                                    }\n+                                }\n+                            }\n+                        } else {\n+                            // No application classes... the app manager is not in control of this ap\n+                            if (LoggingUtils.isEventEnabled(tc)) {\n+                                Tr.event(tc, \"Application Processor: Processing application ended: appInfo=\" + appInfo + \", applicationClassesContainerInfo=null\");\n+                            }\n+                        }\n+                    } catch (UnableToAdaptException e) {\n+                        if (LoggingUtils.isEventEnabled(tc)) {\n+                            Tr.event(tc, \"Failed to adapt NonPersistentCache: container=\" + appContainer + \" : \\n\" + e.getMessage());\n+                        }\n+                    }\n+                } else {\n+                    if (LoggingUtils.isEventEnabled(tc)) {\n+                        Tr.event(tc, \"Application Processor: Processing application ended: appInfo=\" + appInfo + \", appContainer=null\");\n+                    }\n+                }\n+            } else {\n+                if (LoggingUtils.isEventEnabled(tc)) {\n+                    Tr.event(tc, \"Application Processor: Processing application ended: appInfo=null\");\n+                }\n+            }\n+            \n+        }\n+    }\n+\n+    /**\n+     * The processWebModule method attempts to generate an OpenAPI document for the specified web module using the\n+     * SmallRye implementation.\n+     * \n+     * @param appContainer\n+     *            The Container for the web module\n+     * @param moduleInfo\n+     *            The WebModuleInfo object for the web module\n+     * @return OpenAPI\n+     *            The OpenAPI document generated for the web module, or null if the web module is not an OAS\n+     *            applciation.\n+     */\n+    private OpenAPI processWebModule(final Container appContainer, final WebModuleInfo moduleInfo) {\n+        if (LoggingUtils.isEventEnabled(tc)) {\n+            Tr.event(tc, \"WebModule: Processing started : deploymentName=\" + moduleInfo.getApplicationInfo().getDeploymentName() + \" : contextRoot=\" + moduleInfo.getContextRoot());\n+        }\n+        ClassLoader appClassloader = moduleInfo.getClassLoader();\n+        \n+        OpenAPI newDocument = null;\n+        \n+        // Read and process the MicroProfile config. Try with resources will close the ConfigProcessor when done.\n+        try (ConfigProcessor configProcessor = new ConfigProcessor(appClassloader)) {\n+            if (LoggingUtils.isEventEnabled(tc)) {\n+                Tr.event(tc, \"Retrieved configuration values : \" + configProcessor);\n+            }\n+            \n+            try {\n+                OpenApiConfig config = configProcessor.getOpenAPIConfig();\n+                OpenApiDocument.INSTANCE.reset();\n+                OpenApiDocument.INSTANCE.config(config);\n+                OpenApiStaticFile staticFile = StaticFileProcessor.getOpenAPIFile(appContainer);\n+                OpenApiDocument.INSTANCE.modelFromStaticFile(OpenApiProcessor.modelFromStaticFile(staticFile));\n+//                OpenApiDocument.INSTANCE.modelFromAnnotations(OpenApiProcessor.modelFromAnnotations(config, IndexUtils.getIndexView(appClassloader, appContainer, config)));\n+                OpenApiDocument.INSTANCE.modelFromAnnotations(OpenApiProcessor.modelFromAnnotations(config, IndexUtils.getIndexView(moduleInfo, config)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2fe89286d211be36cc0dca87d1500b49d2dba5"}, "originalPosition": 354}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNjA5MzI3", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#pullrequestreview-482609327", "createdAt": "2020-09-04T12:27:38Z", "commit": {"oid": "cf2fe89286d211be36cc0dca87d1500b49d2dba5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjoyNzozOVrOHNLnEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjoyNzozOVrOHNLnEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4Mzc2Mg==", "bodyText": "Do you still want to support this?", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483583762", "createdAt": "2020-09-04T12:27:39Z", "author": {"login": "Azquelt"}, "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/src/io/openliberty/microprofile/openapi20/utils/CloudUtils.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package io.openliberty.microprofile.openapi20.utils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+\n+import javax.ws.rs.HttpMethod;\n+import javax.ws.rs.core.HttpHeaders;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.ibm.websphere.ras.Tr;\n+import com.ibm.websphere.ras.TraceComponent;\n+import com.ibm.ws.ffdc.annotation.FFDCIgnore;\n+\n+public class CloudUtils {\n+    private static final TraceComponent tc = Tr.register(CloudUtils.class);\n+\n+    /**\n+     * The getVCAPHost method checks whether a \"VCAP_APPLICATION\" environment variable has been set.  In Cloud Foundry\n+     * applications (where Bluemix runs) this will be set to the actual host that is visible to the user.  In that\n+     * environment the VHost from Liberty is private and not accessible externally. If the environment variable is set,\n+     * it extracts the host and returns it;.\n+     * \n+     * @return String\n+     *          The host specified in VCAP_APPLICATION or null if it is not set.\n+     */\n+    @FFDCIgnore(Exception.class)\n+    public static String getVCAPHost() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2fe89286d211be36cc0dca87d1500b49d2dba5"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNjEwMzcx", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#pullrequestreview-482610371", "createdAt": "2020-09-04T12:29:19Z", "commit": {"oid": "cf2fe89286d211be36cc0dca87d1500b49d2dba5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjoyOToxOVrOHNLqHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjoyOToxOVrOHNLqHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4NDU0MQ==", "bodyText": "This isn't how you're supposed to version packages.\nShould be 1.0 in the release, with the major and minor versions being updated for future releases in accordance with semantic versioning.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#discussion_r483584541", "createdAt": "2020-09-04T12:29:19Z", "author": {"login": "Azquelt"}, "path": "dev/io.openliberty.microprofile.openapi.2.0.internal/src/io/openliberty/microprofile/openapi20/package-info.java", "diffHunk": "@@ -0,0 +1,19 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+@Version(Constants.OSGI_VERSION)\n+@TraceOptions(traceGroup = Constants.TRACE_GROUP, messageBundle = Constants.TRACE_OPENAPI)\n+package io.openliberty.microprofile.openapi20;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2fe89286d211be36cc0dca87d1500b49d2dba5"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNzI4Mjg2", "url": "https://github.com/OpenLiberty/open-liberty/pull/13589#pullrequestreview-482728286", "createdAt": "2020-09-04T15:04:01Z", "commit": {"oid": "cf2fe89286d211be36cc0dca87d1500b49d2dba5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77bbb0276ba10e3651ee1a7f84cb3f8e0f19e739", "author": {"user": {"login": "msmiths", "name": "Martin Smithson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/77bbb0276ba10e3651ee1a7f84cb3f8e0f19e739", "committedDate": "2020-09-07T10:27:51Z", "message": "MP OpenAPI 2.0 Initial Implementation\n\nMP OpenAPI 2.0 Initial Implementation\n\nRemove com.ibm.ws.require.java8 bundle from .feature\n\nSigned-off-by: Martin Smithson <msmiths@uk.ibm.com>\n\nSpecify edition-full in private .feature file\n\nSigned-off-by: Martin Smithson <msmiths@uk.ibm.com>\n\nUse the 2.0-RC2 version of MP OpenAPI\n\nSigned-off-by: Martin Smithson <msmiths@uk.ibm.com>\n\nApply PR review comments\n\nSigned-off-by: Martin Smithson <msmiths@uk.ibm.com>\n\nApply more PR review comments\n\nSigned-off-by: Martin Smithson <msmiths@uk.ibm.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d45f61d93494bfc67418b00927a9849eebbe262b", "author": {"user": {"login": "msmiths", "name": "Martin Smithson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/d45f61d93494bfc67418b00927a9849eebbe262b", "committedDate": "2020-09-04T15:13:09Z", "message": "Apply more PR review comments\n\nSigned-off-by: Martin Smithson <msmiths@uk.ibm.com>"}, "afterCommit": {"oid": "77bbb0276ba10e3651ee1a7f84cb3f8e0f19e739", "author": {"user": {"login": "msmiths", "name": "Martin Smithson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/77bbb0276ba10e3651ee1a7f84cb3f8e0f19e739", "committedDate": "2020-09-07T10:27:51Z", "message": "MP OpenAPI 2.0 Initial Implementation\n\nMP OpenAPI 2.0 Initial Implementation\n\nRemove com.ibm.ws.require.java8 bundle from .feature\n\nSigned-off-by: Martin Smithson <msmiths@uk.ibm.com>\n\nSpecify edition-full in private .feature file\n\nSigned-off-by: Martin Smithson <msmiths@uk.ibm.com>\n\nUse the 2.0-RC2 version of MP OpenAPI\n\nSigned-off-by: Martin Smithson <msmiths@uk.ibm.com>\n\nApply PR review comments\n\nSigned-off-by: Martin Smithson <msmiths@uk.ibm.com>\n\nApply more PR review comments\n\nSigned-off-by: Martin Smithson <msmiths@uk.ibm.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3512, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}