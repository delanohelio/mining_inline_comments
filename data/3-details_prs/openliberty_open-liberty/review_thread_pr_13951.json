{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3NDY5MDYw", "number": 13951, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo0NDoxOVrOEkolLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMjowMjozNFrOEkvdHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODQ5MDcwOnYy", "diffSide": "LEFT", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo0NDoxOVrOHTsIDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo1MzowMlrOHT20kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQwNzk1MA==", "bodyText": "Can we delete this overlay file?  I think you are reverting the only Liberty-specific changes in the file.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13951#discussion_r490407950", "createdAt": "2020-09-17T16:44:19Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageUtils.java", "diffHunk": "@@ -101,9 +101,7 @@ public static FaultMode getFaultMode(Message message) {\n      */\n     public static boolean isRequestor(Message message) {\n         if (message != null) {\n-            //Liberty code change start\n-            Boolean requestor = (Boolean)((MessageImpl) message).getRequestorRole();\n-            //Liberty code change end", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd70c727e661f983c1d39531aacba7c185d494c6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4MzE4NA==", "bodyText": "@andymc12 turns out LibertyAuthFilter calls MessageUtils.getTargetMethod(Message m, Supplier exceptionSupplier) which on comparing to CXF's master branch is an Liberty specific change. I'm going to re-add MessageUtils for now, let me know if you'd prefer a different solution.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13951#discussion_r490583184", "createdAt": "2020-09-17T21:53:02Z", "author": {"login": "neuwerk"}, "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageUtils.java", "diffHunk": "@@ -101,9 +101,7 @@ public static FaultMode getFaultMode(Message message) {\n      */\n     public static boolean isRequestor(Message message) {\n         if (message != null) {\n-            //Liberty code change start\n-            Boolean requestor = (Boolean)((MessageImpl) message).getRequestorRole();\n-            //Liberty code change end", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQwNzk1MA=="}, "originalCommit": {"oid": "dd70c727e661f983c1d39531aacba7c185d494c6"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODUzMDU0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/transport/ChainInitiationObserver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo1Mzo0MlrOHTsgDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo1Mzo0MlrOHTsgDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNDA5NQ==", "bodyText": "I don't think this variable is ever used in our overlay of this file.  I think we can delete this line.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13951#discussion_r490414095", "createdAt": "2020-09-17T16:53:42Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/transport/ChainInitiationObserver.java", "diffHunk": "@@ -65,6 +65,7 @@ public ChainInitiationObserver(Endpoint endpoint, Bus bus) {\n     @Override\n     public void onMessage(Message m) {\n         Bus origBus = BusFactory.getAndSetThreadDefaultBus(bus);\n+        ClassLoaderHolder origLoader = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd70c727e661f983c1d39531aacba7c185d494c6"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODU0Nzk0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/ext/MessageContextImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo1ODoxNFrOHTsq6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNTo1Mjo0OVrOHWBHfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNjg3NA==", "bodyText": "I think we can delete this overlay file too.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13951#discussion_r490416874", "createdAt": "2020-09-17T16:58:14Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/ext/MessageContextImpl.java", "diffHunk": "@@ -87,7 +87,7 @@ public Object get(Object key) {\n         if (keyValue.equals(\"WRITE-\" + Message.ATTACHMENTS)) {\n             // Liberty Change Start - #5049\n             if (m.getExchange().getOutMessage() != null) {\n-                return ((MessageImpl) m.getExchange().getOutMessage()).getAttachments();\n+                return m.getExchange().getOutMessage().get(Message.ATTACHMENTS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd70c727e661f983c1d39531aacba7c185d494c6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEzODAxMQ==", "bodyText": "Andy this file had changes in it before PR #11560.  Were those already in the latest CXF and the overlay was just not removed when updating to a new version of CXF previously?", "url": "https://github.com/OpenLiberty/open-liberty/pull/13951#discussion_r492138011", "createdAt": "2020-09-21T15:16:15Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/ext/MessageContextImpl.java", "diffHunk": "@@ -87,7 +87,7 @@ public Object get(Object key) {\n         if (keyValue.equals(\"WRITE-\" + Message.ATTACHMENTS)) {\n             // Liberty Change Start - #5049\n             if (m.getExchange().getOutMessage() != null) {\n-                return ((MessageImpl) m.getExchange().getOutMessage()).getAttachments();\n+                return m.getExchange().getOutMessage().get(Message.ATTACHMENTS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNjg3NA=="}, "originalCommit": {"oid": "dd70c727e661f983c1d39531aacba7c185d494c6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg0OTAyMQ==", "bodyText": "@andymc12 Jared and I discussed the PRs that introduced changes to MessageContextImpl that would be backed out by deleting this file. There was one NPE check introduced by #5486 that isn't in CXF 3.3.X, but the tests, introduced by that PR, ran and passed. Do you know if it's safe to back out that change as well?", "url": "https://github.com/OpenLiberty/open-liberty/pull/13951#discussion_r492849021", "createdAt": "2020-09-22T15:52:49Z", "author": {"login": "neuwerk"}, "path": "dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/ext/MessageContextImpl.java", "diffHunk": "@@ -87,7 +87,7 @@ public Object get(Object key) {\n         if (keyValue.equals(\"WRITE-\" + Message.ATTACHMENTS)) {\n             // Liberty Change Start - #5049\n             if (m.getExchange().getOutMessage() != null) {\n-                return ((MessageImpl) m.getExchange().getOutMessage()).getAttachments();\n+                return m.getExchange().getOutMessage().get(Message.ATTACHMENTS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNjg3NA=="}, "originalCommit": {"oid": "dd70c727e661f983c1d39531aacba7c185d494c6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTAzNzUxOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOToxNjozM1rOHTxfUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOToxNjozM1rOHTxfUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ5NTgyNg==", "bodyText": "We can't delete this file (yet) because we still need the public MessageImpl(int isize, float factor) constructor - though I plan to contribute that back to the CXF community as soon as possible.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13951#discussion_r490495826", "createdAt": "2020-09-17T19:16:33Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/message/MessageImpl.java", "diffHunk": "@@ -68,116 +43,13 @@\n     private Object[] contents = new Object[20];\n     private int index;\n \n-    //Liberty code change start\n-    private static int contentType = 0;\n-    private static int protoHeaders = 1;\n-    private static int queryString = 2;\n-    private static int httpRequest = 3;\n-    private static int httpResponse = 4;\n-    private static int pathToMatchSlash = 5;\n-    private static int httpRequestMethod = 6;\n-    private static int interceptorProviders = 7;\n-    private static int templateParameters = 8;\n-    private static int accept = 9;\n-    private static int continuationProvider = 10;\n-    private static int destination = 11;\n-    private static int opStack = 12;\n-    private static int wsdlDescription = 13;\n-    private static int wsdlInterface = 14;\n-    private static int wsdlOperation = 15;\n-    private static int wsdlPort = 16;\n-    private static int wsdlService = 17;\n-    private static int requestUrl = 18;\n-    private static int requestUri = 19;\n-    private static int pathInfo = 20;\n-    private static int basePath = 21;\n-    private static int fixedParamOrder = 22;\n-    private static int inInterceptors = 23;\n-    private static int outInterceptors = 24;\n-    private static int responseCode = 25;\n-    private static int attachments = 26;\n-    private static int encoding = 27;\n-    private static int httpContext = 28;\n-    private static int httpConfig = 29;\n-    private static int httpContextMatchStrategy = 30;\n-    private static int httpBasePath = 31;\n-    private static int asyncPostDispatch = 32;\n-    private static int securityContext = 33;\n-    private static int authorizationPolicy = 34;\n-    private static int certConstraints = 35;\n-    private static int serviceRedirection = 36;\n-    private static int httpServletResponse = 37;\n-    private static int resourceMethod = 38;\n-    private static int oneWayRequest = 39;\n-    private static int asyncResponse = 40;\n-    private static int threadContextSwitched = 41;\n-    private static int cacheInputProperty = 42;\n-    private static int previousMessage = 43;\n-    private static int responseHeadersCopied = 44;\n-    private static int sseEventSink = 45;\n-    private static int requestorRole = 46;\n-    private static int partialResponse = 47;\n-    private static int emptyPartialResponse = 48;\n-    private static int endpointAddress = 49;\n-    private static int inboundMessage = 50;\n-    private static int TOTAL = 51;\n-    private Object[] propertyValues = new Object[TOTAL];\n-    \n-    private static final String REQUEST_PATH_TO_MATCH_SLASH = \"path_to_match_slash\";\n-    private static final String TEMPLATE_PARAMETERS = \"jaxrs.template.parameters\";\n-    private static final String CONTINUATION_PROVIDER = ContinuationProvider.class.getName();\n-    private static final String DESTINATION = Destination.class.getName();\n-    private static final String OP_RES_INFO_STACK = \"org.apache.cxf.jaxrs.model.OperationResourceInfoStack\";\n-    private static final String HTTP_BASE_PATH = \"http.base.path\";\n-    private static final String SECURITY_CONTEXT = SecurityContext.class.getName();\n-    private static final String AUTHORIZATION_POLICY = AuthorizationPolicy.class.getName();\n-    private static final String CERT_CONSTRAINTS = CertConstraints.class.getName();\n-    private static final String HTTP_SERVLET_RESPONSE = HttpServletResponse.class.getName();\n-    private static final String RESOURCE_METHOD = \"org.apache.cxf.resource.method\";\n-    private static final String ASYNC_RESPONSE = \"javax.ws.rs.container.AsyncResponse\";\n-    private static final String SSE_EVENT_SINK = \"javax.ws.rs.sse.SseEventSink\";\n-    private static final Map<String, Integer> KEYMAP;\n-    private static final String[] propertyNames = { CONTENT_TYPE, PROTOCOL_HEADERS, QUERY_STRING, AbstractHTTPDestination.HTTP_REQUEST,\n-                    AbstractHTTPDestination.HTTP_RESPONSE, REQUEST_PATH_TO_MATCH_SLASH, HTTP_REQUEST_METHOD, INTERCEPTOR_PROVIDERS,\n-                    TEMPLATE_PARAMETERS, ACCEPT_CONTENT_TYPE, CONTINUATION_PROVIDER, DESTINATION, OP_RES_INFO_STACK, WSDL_DESCRIPTION,\n-                    WSDL_INTERFACE, WSDL_OPERATION, WSDL_PORT, WSDL_SERVICE, REQUEST_URL, REQUEST_URI, PATH_INFO, BASE_PATH,\n-                    FIXED_PARAMETER_ORDER, IN_INTERCEPTORS, OUT_INTERCEPTORS, RESPONSE_CODE, ATTACHMENTS, ENCODING,\n-                    AbstractHTTPDestination.HTTP_CONTEXT, AbstractHTTPDestination.HTTP_CONFIG, AbstractHTTPDestination.HTTP_CONTEXT_MATCH_STRATEGY,\n-                    HTTP_BASE_PATH, ASYNC_POST_RESPONSE_DISPATCH, SECURITY_CONTEXT, AUTHORIZATION_POLICY, CERT_CONSTRAINTS,\n-                    AbstractHTTPDestination.SERVICE_REDIRECTION, HTTP_SERVLET_RESPONSE, RESOURCE_METHOD, ONE_WAY_REQUEST, ASYNC_RESPONSE,\n-                    THREAD_CONTEXT_SWITCHED, OutgoingChainInterceptor.CACHE_INPUT_PROPERTY, PhaseInterceptorChain.PREVIOUS_MESSAGE,\n-                    AbstractHTTPDestination.RESPONSE_HEADERS_COPIED, SSE_EVENT_SINK, REQUESTOR_ROLE, PARTIAL_RESPONSE_MESSAGE,\n-                    EMPTY_PARTIAL_RESPONSE_MESSAGE, ENDPOINT_ADDRESS, INBOUND_MESSAGE };\n-\n-    private static final Object NOT_FOUND = new Object();\n-    private static final Integer KEY_NOT_FOUND = Integer.valueOf(-1);\n-\n-    private Collection<Object> values = null;\n-    private Set<String> keySet = null;\n-    private Set<Map.Entry<String, Object>> entrySet = null;\n-    private static final Object[] NOT_SET_ARRAY = new Object[TOTAL];\n-    static {\n-        Map<String, Integer> keymap = new HashMap<String, Integer>(TOTAL);\n-        for (int i = 0; i < TOTAL; i++) {\n-            keymap.put(propertyNames[i], i);\n-            NOT_SET_ARRAY[i] = NOT_FOUND;\n-        }\n-        KEYMAP = Collections.unmodifiableMap(keymap);\n-    }\n-    //Liberty code change end\n-\n     // Liberty change - used to avoid resize\n     public MessageImpl(int isize, float factor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd70c727e661f983c1d39531aacba7c185d494c6"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTA5ODg5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.rt.rs.service.description.3.2/src/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOToyODowMVrOHTyEjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOToyODowMVrOHTyEjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUwNTM1Nw==", "bodyText": "We can delete this overlay file - the only other changes to it have been made in CXF (and only really apply if we have the file in our source tree anyway).", "url": "https://github.com/OpenLiberty/open-liberty/pull/13951#discussion_r490505357", "createdAt": "2020-09-17T19:28:01Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.org.apache.cxf.cxf.rt.rs.service.description.3.2/src/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java", "diffHunk": "@@ -219,9 +219,7 @@ public void filter(ContainerRequestContext context) {\n     }\n \n     protected void doFilter(ContainerRequestContext context, Message m) {\n-        //Liberty code change start\n-        if (!\"GET\".equals(((MessageImpl) m).getHttpRequestMethod())) {\n-            //Liberty code change end\n+        if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd70c727e661f983c1d39531aacba7c185d494c6"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTU5OTI1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/transport/ChainInitiationObserver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo1NTo1MFrOHT25PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo1NTo1MFrOHT25PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4NDM4MQ==", "bodyText": "I don't see where this import is used.  Maybe Eclipse added it incorrectly?", "url": "https://github.com/OpenLiberty/open-liberty/pull/13951#discussion_r490584381", "createdAt": "2020-09-17T21:55:50Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.org.apache.cxf.cxf.core.3.2/src/org/apache/cxf/transport/ChainInitiationObserver.java", "diffHunk": "@@ -28,6 +28,7 @@\n import org.apache.cxf.Bus;\n import org.apache.cxf.BusFactory;\n import org.apache.cxf.binding.Binding;\n+import org.apache.cxf.common.classloader.ClassLoaderUtils.ClassLoaderHolder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9137155bddf6d233f87b69e01debd763b4f00078"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTYwMDk0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/utils/ResourceUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo1NjozNFrOHT26UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo1NjozNFrOHT26UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4NDY1Nw==", "bodyText": "another inadvertent import? I don't see any reference to ti JAXBUtils", "url": "https://github.com/OpenLiberty/open-liberty/pull/13951#discussion_r490584657", "createdAt": "2020-09-17T21:56:34Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.org.apache.cxf.cxf.rt.frontend.jaxrs.3.2/src/org/apache/cxf/jaxrs/utils/ResourceUtils.java", "diffHunk": "@@ -76,6 +76,7 @@\n import org.apache.cxf.BusFactory;\n import org.apache.cxf.common.classloader.ClassLoaderUtils;\n import org.apache.cxf.common.i18n.BundleUtils;\n+import org.apache.cxf.common.jaxb.JAXBUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9137155bddf6d233f87b69e01debd763b4f00078"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTYxNjk0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.org.apache.cxf.cxf.rt.rs.client.3.2/src/org/apache/cxf/jaxrs/client/AbstractClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMjowMjozNFrOHT3D9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMjowMjozNFrOHT3D9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4NzEyNA==", "bodyText": "for this change, I'd probably leave the String uri... line, so something like:\nString uri = currentURI.toString();\nmessage.put(Message.ENDPOINT_ADDRESS, uri);\nmessage.put(Message.REQUEST_URI, uri);\n\nthat way, we're only calling uri.toString() once.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13951#discussion_r490587124", "createdAt": "2020-09-17T22:02:34Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.org.apache.cxf.cxf.rt.rs.client.3.2/src/org/apache/cxf/jaxrs/client/AbstractClient.java", "diffHunk": "@@ -931,29 +931,25 @@ protected void setConfiguration(ClientConfiguration config) {\n     // invocation thus it is also important to have baseURI and currentURI\n     // synched up with the latest endpoint address, after a successful proxy\n     // or web client invocation has returned\n-    protected void prepareConduitSelector(Message m, URI currentURI, boolean proxy) {\n+    protected void prepareConduitSelector(Message message, URI currentURI, boolean proxy) {\n         try {\n-            cfg.prepareConduitSelector(m);\n+            cfg.prepareConduitSelector(message);\n \n         } catch (Fault ex) {\n             LOG.warning(\"Failure to prepare a message from conduit selector\");\n         }\n-        //Liberty code change start\n-        MessageImpl message = (MessageImpl) m;\n         message.getExchange().put(ConduitSelector.class, cfg.getConduitSelector());\n         message.getExchange().put(Service.class, cfg.getConduitSelector().getEndpoint().getService());\n \n-        String address = (String)message.getEndpointAddress();\n+        String address = (String)message.get(Message.ENDPOINT_ADDRESS);\n         // custom conduits may override the initial/current address\n         if (address.startsWith(HTTP_SCHEME) && !address.equals(currentURI.toString())) {\n             URI baseAddress = URI.create(address);\n             currentURI = calculateNewRequestURI(baseAddress, currentURI, proxy);\n-            String uri = currentURI.toString();\n-            message.setEndpointAddress(uri);\n-            message.setRequestUri(uri);\n+            message.put(Message.ENDPOINT_ADDRESS, currentURI.toString());\n+            message.put(Message.REQUEST_URI, currentURI.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9137155bddf6d233f87b69e01debd763b4f00078"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2812, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}