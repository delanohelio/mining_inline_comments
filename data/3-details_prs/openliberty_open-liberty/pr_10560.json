{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NTI3OTI4", "number": 10560, "title": "Add test to check result of hitting Readiness endpoint as server is starting", "bodyText": "In relation to #10495\nFixes #9609", "createdAt": "2020-01-23T19:31:04Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/10560", "merged": true, "mergeCommit": {"oid": "1988f4eb96da92768c5e3206611c636c5e4bc57f"}, "closed": true, "closedAt": "2020-02-03T20:06:56Z", "author": {"login": "lamkavan"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9PhJ9AH2gAyMzY2NTI3OTI4OmNjMTI0ZWJlN2I0ODQxZWM3NzUzYjQzNzRjMDg1ZWI4MDZiNWI2ZWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcAuYmTgFqTM1MjMyMzUzNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cc124ebe7b4841ec7753b4374c085eb806b5b6ea", "author": {"user": null}, "url": "https://github.com/OpenLiberty/open-liberty/commit/cc124ebe7b4841ec7753b4374c085eb806b5b6ea", "committedDate": "2020-01-23T19:29:06Z", "message": "Add test to check result of hitting Readiness endpoint as server is starting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63975dd2b55b064a434f4224936301607865054e", "author": {"user": null}, "url": "https://github.com/OpenLiberty/open-liberty/commit/63975dd2b55b064a434f4224936301607865054e", "committedDate": "2020-01-23T19:32:24Z", "message": "Fixing copyright years"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MTc3NDQ3", "url": "https://github.com/OpenLiberty/open-liberty/pull/10560#pullrequestreview-348177447", "createdAt": "2020-01-24T19:33:07Z", "commit": {"oid": "63975dd2b55b064a434f4224936301607865054e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTozMzowN1rOFhoNpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTozMzo1OFrOFhoPUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwNjE4Mg==", "bodyText": "Why are we setting the responseCode=null again? I don't think this line is needed here, and must be placed in the catch block.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10560#discussion_r370806182", "createdAt": "2020-01-24T19:33:07Z", "author": {"login": "pgunapal"}, "path": "dev/com.ibm.ws.microprofile.health.2.0_fat/fat/src/com/ibm/ws/microprofile/health20/fat/DelayAppStartupHealthCheckTest.java", "diffHunk": "@@ -73,6 +76,63 @@ public void cleanUp() throws Exception {\n         server1.stopServer(\"CWWKE1102W\", \"CWWKE1105W\", \"CWMH0052W\", \"CWMH0053W\");\n     }\n \n+    @Test\n+    public void testReadinessEndpointOnServerStart() throws Exception {\n+        server1.setMarkToEndOfLog();\n+        server1.stopServer(\"CWWKE1102W\", \"CWWKE1105W\", \"CWMH0052W\", \"CWMH0053W\");\n+\n+        class StartServerOnThread extends Thread {\n+            @Override\n+            public void run() {\n+                try {\n+                    server1.startServer();\n+                } catch (Exception e) {\n+                    assertTrue(\"Failure to start server on a seperate thread.\", server1.isStarted());\n+                }\n+            }\n+        }\n+\n+        // Need to ensure the server is not finish starting when readiness endpoint is hit so start the server on a separate thread\n+        // Note: this does not guarantee that we hit the endpoint during server startup, but it is highly likely that it will\n+        StartServerOnThread startServerThread = new StartServerOnThread();\n+        log(\"testReadinessEndpointOnServerStart\", \"Starting DelayedHealthCheck server on separate thread.\");\n+        startServerThread.start();\n+\n+        // Hit the readiness endpoint as the server is still starting up\n+        // We expect a connection refused as the ports are not open until server is fully started\n+        try {\n+            log(\"testReadinessEndpointOnServerStart\", \"Testing the /health/ready endpoint as the server is still starting up.\");\n+            HttpURLConnection conReady;\n+            String responseCode = null;\n+            try {\n+                conReady = HttpUtils.getHttpConnectionWithAnyResponseCode(server1, READY_ENDPOINT);\n+                responseCode = conReady.getURL().toString();\n+            } catch (ConnectException exception) {\n+                conReady = null;\n+            }\n+            responseCode = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63975dd2b55b064a434f4224936301607865054e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwNjYwOQ==", "bodyText": "We should check if conReady != null here, before trying to .getURL()....it would lead to a NullPointerException.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10560#discussion_r370806609", "createdAt": "2020-01-24T19:33:58Z", "author": {"login": "pgunapal"}, "path": "dev/com.ibm.ws.microprofile.health.2.0_fat/fat/src/com/ibm/ws/microprofile/health20/fat/DelayAppStartupHealthCheckTest.java", "diffHunk": "@@ -73,6 +76,63 @@ public void cleanUp() throws Exception {\n         server1.stopServer(\"CWWKE1102W\", \"CWWKE1105W\", \"CWMH0052W\", \"CWMH0053W\");\n     }\n \n+    @Test\n+    public void testReadinessEndpointOnServerStart() throws Exception {\n+        server1.setMarkToEndOfLog();\n+        server1.stopServer(\"CWWKE1102W\", \"CWWKE1105W\", \"CWMH0052W\", \"CWMH0053W\");\n+\n+        class StartServerOnThread extends Thread {\n+            @Override\n+            public void run() {\n+                try {\n+                    server1.startServer();\n+                } catch (Exception e) {\n+                    assertTrue(\"Failure to start server on a seperate thread.\", server1.isStarted());\n+                }\n+            }\n+        }\n+\n+        // Need to ensure the server is not finish starting when readiness endpoint is hit so start the server on a separate thread\n+        // Note: this does not guarantee that we hit the endpoint during server startup, but it is highly likely that it will\n+        StartServerOnThread startServerThread = new StartServerOnThread();\n+        log(\"testReadinessEndpointOnServerStart\", \"Starting DelayedHealthCheck server on separate thread.\");\n+        startServerThread.start();\n+\n+        // Hit the readiness endpoint as the server is still starting up\n+        // We expect a connection refused as the ports are not open until server is fully started\n+        try {\n+            log(\"testReadinessEndpointOnServerStart\", \"Testing the /health/ready endpoint as the server is still starting up.\");\n+            HttpURLConnection conReady;\n+            String responseCode = null;\n+            try {\n+                conReady = HttpUtils.getHttpConnectionWithAnyResponseCode(server1, READY_ENDPOINT);\n+                responseCode = conReady.getURL().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63975dd2b55b064a434f4224936301607865054e"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ad4ff734de064009c874821e9f1cb186ff3a2a9", "author": {"user": null}, "url": "https://github.com/OpenLiberty/open-liberty/commit/5ad4ff734de064009c874821e9f1cb186ff3a2a9", "committedDate": "2020-01-26T22:54:57Z", "message": "Making requested chnages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd54422bf74d05aa740ef07842a7792ccd3d0d93", "author": {"user": null}, "url": "https://github.com/OpenLiberty/open-liberty/commit/bd54422bf74d05aa740ef07842a7792ccd3d0d93", "committedDate": "2020-01-28T15:26:48Z", "message": "Temporarily changing test to lite mode so build can run it more than once"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NTg0NzMz", "url": "https://github.com/OpenLiberty/open-liberty/pull/10560#pullrequestreview-349584733", "createdAt": "2020-01-28T17:59:27Z", "commit": {"oid": "bd54422bf74d05aa740ef07842a7792ccd3d0d93"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNzo1OToyOFrOFiu6pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxODowNjowOFrOFivH-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk2NDU4MA==", "bodyText": "may want to split out the allowed warnings array into a class-level constant for easier reuse", "url": "https://github.com/OpenLiberty/open-liberty/pull/10560#discussion_r371964580", "createdAt": "2020-01-28T17:59:28Z", "author": {"login": "aguibert"}, "path": "dev/com.ibm.ws.microprofile.health.2.0_fat/fat/src/com/ibm/ws/microprofile/health20/fat/DelayAppStartupHealthCheckTest.java", "diffHunk": "@@ -73,6 +75,69 @@ public void cleanUp() throws Exception {\n         server1.stopServer(\"CWWKE1102W\", \"CWWKE1105W\", \"CWMH0052W\", \"CWMH0053W\");\n     }\n \n+    @Test\n+    public void testReadinessEndpointOnServerStart() throws Exception {\n+        server1.setMarkToEndOfLog();\n+        server1.stopServer(\"CWWKE1102W\", \"CWWKE1105W\", \"CWMH0052W\", \"CWMH0053W\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd54422bf74d05aa740ef07842a7792ccd3d0d93"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk2NDgyMA==", "bodyText": "I'm not sure about the other tests in this file, but the new test that's being added is important enough that it should run in LITE mode", "url": "https://github.com/OpenLiberty/open-liberty/pull/10560#discussion_r371964820", "createdAt": "2020-01-28T17:59:54Z", "author": {"login": "aguibert"}, "path": "dev/com.ibm.ws.microprofile.health.2.0_fat/fat/src/com/ibm/ws/microprofile/health20/fat/DelayAppStartupHealthCheckTest.java", "diffHunk": "@@ -39,7 +41,7 @@\n import componenttest.topology.utils.HttpUtils;\n \n @RunWith(FATRunner.class)\n-@Mode(TestMode.FULL)\n+//@Mode(TestMode.FULL)  Comment out temporarily so that build will run this more than once", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd54422bf74d05aa740ef07842a7792ccd3d0d93"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk2NjY0MQ==", "bodyText": "we are only pinging the /health/ready endpoint once here, we should put this inside a loop and repeatedly ping the /health/ready endpoint until it returns HTTP 200", "url": "https://github.com/OpenLiberty/open-liberty/pull/10560#discussion_r371966641", "createdAt": "2020-01-28T18:03:26Z", "author": {"login": "aguibert"}, "path": "dev/com.ibm.ws.microprofile.health.2.0_fat/fat/src/com/ibm/ws/microprofile/health20/fat/DelayAppStartupHealthCheckTest.java", "diffHunk": "@@ -73,6 +75,69 @@ public void cleanUp() throws Exception {\n         server1.stopServer(\"CWWKE1102W\", \"CWWKE1105W\", \"CWMH0052W\", \"CWMH0053W\");\n     }\n \n+    @Test\n+    public void testReadinessEndpointOnServerStart() throws Exception {\n+        server1.setMarkToEndOfLog();\n+        server1.stopServer(\"CWWKE1102W\", \"CWWKE1105W\", \"CWMH0052W\", \"CWMH0053W\");\n+\n+        class StartServerOnThread extends Thread {\n+            @Override\n+            public void run() {\n+                try {\n+                    server1.startServer();\n+                } catch (Exception e) {\n+                    assertTrue(\"Failure to start server on a seperate thread.\", server1.isStarted());\n+                }\n+            }\n+        }\n+\n+        // Need to ensure the server is not finish starting when readiness endpoint is hit so start the server on a separate thread\n+        // Note: this does not guarantee that we hit the endpoint during server startup, but it is highly likely that it will\n+        StartServerOnThread startServerThread = new StartServerOnThread();\n+        log(\"testReadinessEndpointOnServerStart\", \"Starting DelayedHealthCheck server on separate thread.\");\n+        startServerThread.start();\n+\n+        // Hit the readiness endpoint as the server is still starting up\n+        // We expect a connection refused as the ports are not open until server is fully started\n+        try {\n+            log(\"testReadinessEndpointOnServerStart\", \"Testing the /health/ready endpoint as the server is still starting up.\");\n+            HttpURLConnection conReady = null;\n+            String responseCode = null;\n+            boolean connectionExceptionEncountered = false;\n+\n+            try {\n+                conReady = HttpUtils.getHttpConnectionWithAnyResponseCode(server1, READY_ENDPOINT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd54422bf74d05aa740ef07842a7792ccd3d0d93"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk2Nzk5Mw==", "bodyText": "we should not be doing any log scraping to determine app readiness -- we should be getting that information from the /health/ready endpoint instead. We should poll /health/ready repeatedly until we get the HTTP 200, and once we get the HTTP 200 we should immediately try to access an application endpoint and it should be accessible", "url": "https://github.com/OpenLiberty/open-liberty/pull/10560#discussion_r371967993", "createdAt": "2020-01-28T18:06:08Z", "author": {"login": "aguibert"}, "path": "dev/com.ibm.ws.microprofile.health.2.0_fat/fat/src/com/ibm/ws/microprofile/health20/fat/DelayAppStartupHealthCheckTest.java", "diffHunk": "@@ -73,6 +75,69 @@ public void cleanUp() throws Exception {\n         server1.stopServer(\"CWWKE1102W\", \"CWWKE1105W\", \"CWMH0052W\", \"CWMH0053W\");\n     }\n \n+    @Test\n+    public void testReadinessEndpointOnServerStart() throws Exception {\n+        server1.setMarkToEndOfLog();\n+        server1.stopServer(\"CWWKE1102W\", \"CWWKE1105W\", \"CWMH0052W\", \"CWMH0053W\");\n+\n+        class StartServerOnThread extends Thread {\n+            @Override\n+            public void run() {\n+                try {\n+                    server1.startServer();\n+                } catch (Exception e) {\n+                    assertTrue(\"Failure to start server on a seperate thread.\", server1.isStarted());\n+                }\n+            }\n+        }\n+\n+        // Need to ensure the server is not finish starting when readiness endpoint is hit so start the server on a separate thread\n+        // Note: this does not guarantee that we hit the endpoint during server startup, but it is highly likely that it will\n+        StartServerOnThread startServerThread = new StartServerOnThread();\n+        log(\"testReadinessEndpointOnServerStart\", \"Starting DelayedHealthCheck server on separate thread.\");\n+        startServerThread.start();\n+\n+        // Hit the readiness endpoint as the server is still starting up\n+        // We expect a connection refused as the ports are not open until server is fully started\n+        try {\n+            log(\"testReadinessEndpointOnServerStart\", \"Testing the /health/ready endpoint as the server is still starting up.\");\n+            HttpURLConnection conReady = null;\n+            String responseCode = null;\n+            boolean connectionExceptionEncountered = false;\n+\n+            try {\n+                conReady = HttpUtils.getHttpConnectionWithAnyResponseCode(server1, READY_ENDPOINT);\n+                responseCode = conReady.getURL().toString();\n+            } catch (ConnectException e) {\n+                log(\"testReadinessEndpointOnServerStart\", e.getMessage()); /// REMOVE THIS AFTER\n+                if (e.getMessage().contains(\"Connection refused\")) {\n+                    connectionExceptionEncountered = true;\n+                }\n+            }\n+\n+            startServerThread.join();\n+\n+            String failure_message = \"The connection was not refused as required, but instead completed with response code: \" + responseCode +\n+                                     \" This is likely due to a rare timing issue where the server starts faster than we can hit the readiness endpoint.\"\n+                                     + \"In that case there are no issues with the feature and this failure may be disregarded.\";\n+            assertTrue(failure_message, conReady == null && connectionExceptionEncountered);\n+        } catch (Exception e) {\n+            startServerThread.join();\n+            fail(\"Encountered an error while Testing the /health/ready endpoint as the server is still starting up. Error: \" + e);\n+        }\n+\n+        // Wait until the application is fully started\n+        String line = server1.waitForStringInLogUsingMark(\"(CWWKZ0001I: Application DelayedHealthCheckApp started)+\", 60000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd54422bf74d05aa740ef07842a7792ccd3d0d93"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94b32f2c8a4e6739e9e28922f7ee77d4f0d27581", "author": {"user": null}, "url": "https://github.com/OpenLiberty/open-liberty/commit/94b32f2c8a4e6739e9e28922f7ee77d4f0d27581", "committedDate": "2020-01-30T15:54:37Z", "message": "Making requested changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8062a9a3ab26bbcf764b0f5f96c42db5515910b", "author": {"user": null}, "url": "https://github.com/OpenLiberty/open-liberty/commit/f8062a9a3ab26bbcf764b0f5f96c42db5515910b", "committedDate": "2020-01-30T15:56:48Z", "message": "Updating copyright years"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNTYxODk4", "url": "https://github.com/OpenLiberty/open-liberty/pull/10560#pullrequestreview-351561898", "createdAt": "2020-01-31T14:59:34Z", "commit": {"oid": "f8062a9a3ab26bbcf764b0f5f96c42db5515910b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDo1OTozNVrOFkOBEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNTowNToxMVrOFkOMnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyMjcwNg==", "bodyText": "Doing a thread.join() on the first time through this loop defeats the purpose of the loop and the test. After attempting the connection we should check for:\n\nif we got a connection exception or an HTTP 503, keep looping\nif we get an HTTP 200, then be done with the loop\n\nWe should not have to use a thread.join() unless an unexpected Exception occurs -- let the HTTP response codes from the readiness check dictate the flow of the test", "url": "https://github.com/OpenLiberty/open-liberty/pull/10560#discussion_r373522706", "createdAt": "2020-01-31T14:59:35Z", "author": {"login": "aguibert"}, "path": "dev/com.ibm.ws.microprofile.health.2.0_fat/fat/src/com/ibm/ws/microprofile/health20/fat/DelayAppStartupHealthCheckTest.java", "diffHunk": "@@ -70,10 +75,96 @@ public void deployApplicationAndStartServer() throws Exception {\n \n     @After\n     public void cleanUp() throws Exception {\n-        server1.stopServer(\"CWWKE1102W\", \"CWWKE1105W\", \"CWMH0052W\", \"CWMH0053W\");\n+        server1.stopServer(EXPECTED_FAILURES);\n+    }\n+\n+    @Test\n+    public void testReadinessEndpointOnServerStart() throws Exception {\n+        log(\"testReadinessEndpointOnServerStart\", \"Begin execution of testReadinessEndpointOnServerStart\");\n+        server1.setMarkToEndOfLog();\n+        server1.stopServer(EXPECTED_FAILURES);\n+\n+        class StartServerOnThread extends Thread {\n+            @Override\n+            public void run() {\n+                try {\n+                    server1.startServer();\n+                } catch (Exception e) {\n+                    assertTrue(\"Failure to start server on a seperate thread.\", server1.isStarted());\n+                }\n+            }\n+        }\n+\n+        // Need to ensure the server is not finish starting when readiness endpoint is hit so start the server on a separate thread\n+        // Note: this does not guarantee that we hit the endpoint during server startup, but it is highly likely that it will\n+        StartServerOnThread startServerThread = new StartServerOnThread();\n+        log(\"testReadinessEndpointOnServerStart\", \"Starting DelayedHealthCheck server on separate thread.\");\n+        startServerThread.start();\n+\n+        try {\n+            HttpURLConnection conReady = null;\n+            int responseCode = -1;\n+            boolean connectionExceptionEncountered = false;\n+            boolean first_time = true;\n+            boolean app_ready = false;\n+\n+            // Repeatedly hit the readiness endpoint until a response of 200 is received\n+            while (!app_ready) {\n+                try {\n+                    conReady = HttpUtils.getHttpConnectionWithAnyResponseCode(server1, READY_ENDPOINT);\n+                    responseCode = conReady.getResponseCode();\n+                } catch (ConnectException e) {\n+                    if (e.getMessage().contains(\"Connection refused\")) {\n+                        connectionExceptionEncountered = true;\n+                    }\n+                }\n+\n+                // We need to ensure we get a connection refused in the case of the server not finished starting up\n+                // We expect a connection refused as the ports are not open until server is fully started\n+                if (first_time) {\n+                    log(\"testReadinessEndpointOnServerStart\", \"Testing the /health/ready endpoint as the server is still starting up.\");\n+                    startServerThread.join();\n+                    String failure_message = \"The connection was not refused as required, but instead completed with response code: \" + responseCode +\n+                                             \" This is likely due to a rare timing issue where the server starts faster than we can hit the readiness endpoint.\"\n+                                             + \"In that case there are no issues with the feature and this failure may be disregarded.\";\n+                    assertTrue(failure_message, conReady == null && connectionExceptionEncountered);\n+                    first_time = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8062a9a3ab26bbcf764b0f5f96c42db5515910b"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyMzM3MA==", "bodyText": "we should also add some timeout component to this loop (perhaps 2 minutes max) to prevent from looping forever", "url": "https://github.com/OpenLiberty/open-liberty/pull/10560#discussion_r373523370", "createdAt": "2020-01-31T15:00:45Z", "author": {"login": "aguibert"}, "path": "dev/com.ibm.ws.microprofile.health.2.0_fat/fat/src/com/ibm/ws/microprofile/health20/fat/DelayAppStartupHealthCheckTest.java", "diffHunk": "@@ -70,10 +75,96 @@ public void deployApplicationAndStartServer() throws Exception {\n \n     @After\n     public void cleanUp() throws Exception {\n-        server1.stopServer(\"CWWKE1102W\", \"CWWKE1105W\", \"CWMH0052W\", \"CWMH0053W\");\n+        server1.stopServer(EXPECTED_FAILURES);\n+    }\n+\n+    @Test\n+    public void testReadinessEndpointOnServerStart() throws Exception {\n+        log(\"testReadinessEndpointOnServerStart\", \"Begin execution of testReadinessEndpointOnServerStart\");\n+        server1.setMarkToEndOfLog();\n+        server1.stopServer(EXPECTED_FAILURES);\n+\n+        class StartServerOnThread extends Thread {\n+            @Override\n+            public void run() {\n+                try {\n+                    server1.startServer();\n+                } catch (Exception e) {\n+                    assertTrue(\"Failure to start server on a seperate thread.\", server1.isStarted());\n+                }\n+            }\n+        }\n+\n+        // Need to ensure the server is not finish starting when readiness endpoint is hit so start the server on a separate thread\n+        // Note: this does not guarantee that we hit the endpoint during server startup, but it is highly likely that it will\n+        StartServerOnThread startServerThread = new StartServerOnThread();\n+        log(\"testReadinessEndpointOnServerStart\", \"Starting DelayedHealthCheck server on separate thread.\");\n+        startServerThread.start();\n+\n+        try {\n+            HttpURLConnection conReady = null;\n+            int responseCode = -1;\n+            boolean connectionExceptionEncountered = false;\n+            boolean first_time = true;\n+            boolean app_ready = false;\n+\n+            // Repeatedly hit the readiness endpoint until a response of 200 is received\n+            while (!app_ready) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8062a9a3ab26bbcf764b0f5f96c42db5515910b"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUyNTY2MA==", "bodyText": "This code could be simplified to the following:\nHttpUtils.findStringInUrl(server, APP_ENDPOINT, \"Testing Delayed Servlet initialization.\");", "url": "https://github.com/OpenLiberty/open-liberty/pull/10560#discussion_r373525660", "createdAt": "2020-01-31T15:05:11Z", "author": {"login": "aguibert"}, "path": "dev/com.ibm.ws.microprofile.health.2.0_fat/fat/src/com/ibm/ws/microprofile/health20/fat/DelayAppStartupHealthCheckTest.java", "diffHunk": "@@ -70,10 +75,96 @@ public void deployApplicationAndStartServer() throws Exception {\n \n     @After\n     public void cleanUp() throws Exception {\n-        server1.stopServer(\"CWWKE1102W\", \"CWWKE1105W\", \"CWMH0052W\", \"CWMH0053W\");\n+        server1.stopServer(EXPECTED_FAILURES);\n+    }\n+\n+    @Test\n+    public void testReadinessEndpointOnServerStart() throws Exception {\n+        log(\"testReadinessEndpointOnServerStart\", \"Begin execution of testReadinessEndpointOnServerStart\");\n+        server1.setMarkToEndOfLog();\n+        server1.stopServer(EXPECTED_FAILURES);\n+\n+        class StartServerOnThread extends Thread {\n+            @Override\n+            public void run() {\n+                try {\n+                    server1.startServer();\n+                } catch (Exception e) {\n+                    assertTrue(\"Failure to start server on a seperate thread.\", server1.isStarted());\n+                }\n+            }\n+        }\n+\n+        // Need to ensure the server is not finish starting when readiness endpoint is hit so start the server on a separate thread\n+        // Note: this does not guarantee that we hit the endpoint during server startup, but it is highly likely that it will\n+        StartServerOnThread startServerThread = new StartServerOnThread();\n+        log(\"testReadinessEndpointOnServerStart\", \"Starting DelayedHealthCheck server on separate thread.\");\n+        startServerThread.start();\n+\n+        try {\n+            HttpURLConnection conReady = null;\n+            int responseCode = -1;\n+            boolean connectionExceptionEncountered = false;\n+            boolean first_time = true;\n+            boolean app_ready = false;\n+\n+            // Repeatedly hit the readiness endpoint until a response of 200 is received\n+            while (!app_ready) {\n+                try {\n+                    conReady = HttpUtils.getHttpConnectionWithAnyResponseCode(server1, READY_ENDPOINT);\n+                    responseCode = conReady.getResponseCode();\n+                } catch (ConnectException e) {\n+                    if (e.getMessage().contains(\"Connection refused\")) {\n+                        connectionExceptionEncountered = true;\n+                    }\n+                }\n+\n+                // We need to ensure we get a connection refused in the case of the server not finished starting up\n+                // We expect a connection refused as the ports are not open until server is fully started\n+                if (first_time) {\n+                    log(\"testReadinessEndpointOnServerStart\", \"Testing the /health/ready endpoint as the server is still starting up.\");\n+                    startServerThread.join();\n+                    String failure_message = \"The connection was not refused as required, but instead completed with response code: \" + responseCode +\n+                                             \" This is likely due to a rare timing issue where the server starts faster than we can hit the readiness endpoint.\"\n+                                             + \"In that case there are no issues with the feature and this failure may be disregarded.\";\n+                    assertTrue(failure_message, conReady == null && connectionExceptionEncountered);\n+                    first_time = false;\n+                } else {\n+                    if (responseCode == 200) {\n+                        app_ready = true;\n+                    }\n+                }\n+\n+            }\n+        } catch (Exception e) {\n+            startServerThread.join();\n+            fail(\"Encountered an error while Testing the /health/ready endpoint as the server and/or application(s) are starting up. Error: \" + e);\n+        }\n+\n+        // Access an application endpoint to verify the application is actually ready\n+        log(\"testReadinessEndpointOnServerStart\", \"Testing an application endpoint, after server and application has started.\");\n+        HttpURLConnection conReady = HttpUtils.getHttpConnectionWithAnyResponseCode(server1, APP_ENDPOINT);\n+        assertEquals(\"The Response Code was not 200 for the following endpoint: \" + conReady.getURL().toString(), SUCCESS_RESPONSE_CODE,\n+                     conReady.getResponseCode());\n+\n+        // Check if the response is correct\n+        String response_text = \"\";\n+        String next_line = \"\";\n+        String expected_response_text = \"Served at: /DelayedHealthCheckAppTesting Delayed Servlet initialization.\";\n+        try {\n+            BufferedReader br = HttpUtils.getResponseBody(conReady, \"UTF-8\");\n+            while ((next_line = br.readLine()) != null) {\n+                response_text += next_line;\n+            }\n+            br.close();\n+        } catch (IOException e) {\n+            fail(\"Encountered an error while reading from BufferedReader br. Error: \" + e);\n+        }\n+        assertEquals(\"Expected \" + expected_response_text + \" but received \" + response_text, expected_response_text, response_text);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8062a9a3ab26bbcf764b0f5f96c42db5515910b"}, "originalPosition": 132}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28057807bec2ace85bea341ffc11901fbaea6b3a", "author": {"user": null}, "url": "https://github.com/OpenLiberty/open-liberty/commit/28057807bec2ace85bea341ffc11901fbaea6b3a", "committedDate": "2020-01-31T16:15:23Z", "message": "Making requested changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNjIzMjU5", "url": "https://github.com/OpenLiberty/open-liberty/pull/10560#pullrequestreview-351623259", "createdAt": "2020-01-31T16:28:30Z", "commit": {"oid": "28057807bec2ace85bea341ffc11901fbaea6b3a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMzIzNTM1", "url": "https://github.com/OpenLiberty/open-liberty/pull/10560#pullrequestreview-352323535", "createdAt": "2020-02-03T15:08:35Z", "commit": {"oid": "28057807bec2ace85bea341ffc11901fbaea6b3a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3412, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}