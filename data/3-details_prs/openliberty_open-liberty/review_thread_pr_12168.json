{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NTMwOTI0", "number": 12168, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjozNzoxNVrOEHpiAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjozNzoxNVrOEHpiAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDU1OTM3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/CompletionStageFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjozNzoxNVrOGnIlgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODoxNTowMlrOGnL16Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY4ODMyMg==", "bodyText": "Would a multi-release jar work here? Usually, I think MR jars are more work (dual maintenance) than they're worth, but maybe this case might be more beneficial?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12168#discussion_r443688322", "createdAt": "2020-06-22T16:37:15Z", "author": {"login": "andymc12"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/CompletionStageFactory.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.threading;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Supplier;\n+\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+import org.osgi.service.component.annotations.Reference;\n+\n+import com.ibm.websphere.ras.annotation.Trivial;\n+import com.ibm.ws.ffdc.annotation.FFDCIgnore;\n+import com.ibm.ws.kernel.service.util.JavaInfo;\n+import com.ibm.ws.threading.internal.LibertyCompletableFuture;\n+\n+/**\n+ * Creates completion stages that are backed by the Liberty global executor or the specified executor.\n+ * When an executor is specified, the following precedence applies:\n+ *\n+ * <ul>\n+ * <li>In the case of CompletionStageExecutor (implemented by managed executors), delegates to the executor to provide a CompletableFuture.</li>\n+ * <li>In the case of Java 9+, implements based on the defaultExecutor/newIncompleteFuture methods of the Java CompletableFuture.</li>\n+ * <li>In the case of Java 8, some methods are able to run the initial stage on the Liberty global executor or specified executor.</li>\n+ * </ul>\n+ */\n+@Component(configurationPolicy = ConfigurationPolicy.IGNORE, service = { CompletionStageFactory.class })\n+public class CompletionStageFactory {\n+    /**\n+     * Indicates if running on Java SE 8.\n+     */\n+    private static final boolean JAVA8 = JavaInfo.majorVersion() == 8;\n+\n+    /**\n+     * Use the Liberty global thread pool when the executor is unspecified.\n+     */\n+    @Reference(target = \"(component.name=com.ibm.ws.threading)\")\n+    private ExecutorService globalExecutor;\n+\n+    /**\n+     * Creates a CompletableFuture which is backed (if Java 9+)\n+     * by the Liberty global thread pool.\n+     *\n+     * @param <T> type of result that is returned by the CompletableFuture.\n+     * @return the CompletableFuture.\n+     */\n+    @Trivial\n+    public <T> CompletableFuture<T> newIncompleteFuture() {\n+        return newIncompleteFuture(globalExecutor);\n+    }\n+\n+    /**\n+     * Creates a CompletableFuture which is backed (if Java 9+ or CompletionStageExecutor is supplied)\n+     * by the specified executor as its default asynchronous execution facility.\n+     * If the com.ibm.ws.concurrent bundle is enabled and the executor is a managed executor,\n+     * then thread context is cleared/captured/propagated/restored for the supplier\n+     * and all dependent stage actions per the configuration of the managed executor.\n+     *\n+     * @param <T>      type of result that is returned by the CompletableFuture.\n+     * @param executor an executor. Null indicates to use the Liberty global thread pool.\n+     * @return the CompletableFuture.\n+     */\n+    public <T> CompletableFuture<T> newIncompleteFuture(Executor executor) {\n+        if (executor instanceof CompletionStageExecutor)\n+            return ((CompletionStageExecutor) executor).newIncompleteFuture();\n+\n+        executor = executor == null ? globalExecutor : executor;\n+        if (JAVA8)\n+            return new CompletableFuture<T>(); // this method provides no additional value on Java SE 8\n+        else\n+            return new LibertyCompletableFuture<T>(executor);\n+    }\n+\n+    /**\n+     * Creates a CompletableFuture which is backed (or partly backed if Java 8) by the Liberty global thread pool.\n+     *\n+     * @param action the operation.\n+     * @return CompletableFuture that is backed (or partly backed if Java 8) by the Liberty global thread pool.\n+     */\n+    @Trivial\n+    public CompletableFuture<Void> runAsync(Runnable action) {\n+        return runAsync(action, globalExecutor);\n+    }\n+\n+    /**\n+     * Creates a CompletableFuture which is backed (or partly backed if Java 8) by the specified\n+     * executor as its default asynchronous execution facility.\n+     * If the com.ibm.ws.concurrent bundle is enabled and the executor is a managed executor,\n+     * then thread context is cleared/captured/propagated/restored for the runnable action\n+     * and all dependent stage actions per the configuration of the managed executor.\n+     *\n+     * @param action   the operation.\n+     * @param executor an executor. Null indicates to use the Liberty global thread pool.\n+     * @return CompletableFuture that is backed (or partly backed if Java 8) by the specified executor.\n+     */\n+    public CompletableFuture<Void> runAsync(Runnable action, Executor executor) {\n+        if (executor instanceof CompletionStageExecutor)\n+            return ((CompletionStageExecutor) executor).runAsync(action);\n+\n+        executor = executor == null ? globalExecutor : executor;\n+        if (JAVA8)\n+            return CompletableFuture.runAsync(action, executor); // at least run the initial stage on the executor\n+        else {\n+            LibertyCompletableFuture<Void> future = new LibertyCompletableFuture<Void>(executor);\n+            executor.execute(new RunAsync(action, future));\n+            return future;\n+        }\n+    }\n+\n+    private static class RunAsync implements Runnable {\n+        private final Runnable action;\n+        private final LibertyCompletableFuture<Void> future;\n+\n+        RunAsync(Runnable action, LibertyCompletableFuture<Void> future) {\n+            this.action = action;\n+            this.future = future;\n+        }\n+\n+        @FFDCIgnore(Throwable.class) // exception is from customer code path, not Liberty\n+        @Override\n+        public void run() {\n+            try {\n+                action.run();\n+                future.complete(null);\n+            } catch (Throwable x) {\n+                future.completeExceptionally(x);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Creates a CompletableFuture which is backed (or partly backed if Java 8) by the Liberty global thread pool.\n+     *\n+     * @param <T>      type of result that is returned by the supplier.\n+     * @param supplier operation that supplies a value.\n+     * @return CompletableFuture that is backed (or partly backed if Java 8) by the Liberty global thread pool.\n+     */\n+    @Trivial\n+    public <T> CompletableFuture<T> supplyAsync(Supplier<T> supplier) {\n+        return supplyAsync(supplier, globalExecutor);\n+    }\n+\n+    /**\n+     * Creates a CompletableFuture which is backed (or partly backed if Java 8) by the specified\n+     * executor as its default asynchronous execution facility.\n+     * If the com.ibm.ws.concurrent bundle is enabled and the executor is a managed executor,\n+     * then thread context is cleared/captured/propagated/restored for the supplier\n+     * and all dependent stage actions per the configuration of the managed executor.\n+     *\n+     * @param <T>      type of result that is returned by the supplier.\n+     * @param supplier operation that supplies a value.\n+     * @param executor an executor. Null indicates to use the Liberty global thread pool.\n+     * @return CompletableFuture that is backed (or partly backed if Java 8) by the specified executor.\n+     */\n+    public <T> CompletableFuture<T> supplyAsync(Supplier<T> supplier, Executor executor) {\n+        if (executor instanceof CompletionStageExecutor)\n+            return ((CompletionStageExecutor) executor).supplyAsync(supplier);\n+\n+        executor = executor == null ? globalExecutor : executor;\n+        if (JAVA8)\n+            return CompletableFuture.supplyAsync(supplier, executor); // at least run the initial stage on the executor\n+        else {\n+            LibertyCompletableFuture<T> future = new LibertyCompletableFuture<T>(executor);\n+            // TODO once Java 8 is dropped, replace reflection with:\n+            // TODO future.completeAsync(supplier, executor)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e73c579d8b00fef4f1201ac4bf430bd4d4f8f25"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc0MTY3Mw==", "bodyText": "Yes - good idea - that could be a way to further improve it, but I'll leave that sort thing up to the performance team for future consideration.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12168#discussion_r443741673", "createdAt": "2020-06-22T18:15:02Z", "author": {"login": "njr-11"}, "path": "dev/com.ibm.ws.threading/src/com/ibm/ws/threading/CompletionStageFactory.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.threading;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Supplier;\n+\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.ConfigurationPolicy;\n+import org.osgi.service.component.annotations.Reference;\n+\n+import com.ibm.websphere.ras.annotation.Trivial;\n+import com.ibm.ws.ffdc.annotation.FFDCIgnore;\n+import com.ibm.ws.kernel.service.util.JavaInfo;\n+import com.ibm.ws.threading.internal.LibertyCompletableFuture;\n+\n+/**\n+ * Creates completion stages that are backed by the Liberty global executor or the specified executor.\n+ * When an executor is specified, the following precedence applies:\n+ *\n+ * <ul>\n+ * <li>In the case of CompletionStageExecutor (implemented by managed executors), delegates to the executor to provide a CompletableFuture.</li>\n+ * <li>In the case of Java 9+, implements based on the defaultExecutor/newIncompleteFuture methods of the Java CompletableFuture.</li>\n+ * <li>In the case of Java 8, some methods are able to run the initial stage on the Liberty global executor or specified executor.</li>\n+ * </ul>\n+ */\n+@Component(configurationPolicy = ConfigurationPolicy.IGNORE, service = { CompletionStageFactory.class })\n+public class CompletionStageFactory {\n+    /**\n+     * Indicates if running on Java SE 8.\n+     */\n+    private static final boolean JAVA8 = JavaInfo.majorVersion() == 8;\n+\n+    /**\n+     * Use the Liberty global thread pool when the executor is unspecified.\n+     */\n+    @Reference(target = \"(component.name=com.ibm.ws.threading)\")\n+    private ExecutorService globalExecutor;\n+\n+    /**\n+     * Creates a CompletableFuture which is backed (if Java 9+)\n+     * by the Liberty global thread pool.\n+     *\n+     * @param <T> type of result that is returned by the CompletableFuture.\n+     * @return the CompletableFuture.\n+     */\n+    @Trivial\n+    public <T> CompletableFuture<T> newIncompleteFuture() {\n+        return newIncompleteFuture(globalExecutor);\n+    }\n+\n+    /**\n+     * Creates a CompletableFuture which is backed (if Java 9+ or CompletionStageExecutor is supplied)\n+     * by the specified executor as its default asynchronous execution facility.\n+     * If the com.ibm.ws.concurrent bundle is enabled and the executor is a managed executor,\n+     * then thread context is cleared/captured/propagated/restored for the supplier\n+     * and all dependent stage actions per the configuration of the managed executor.\n+     *\n+     * @param <T>      type of result that is returned by the CompletableFuture.\n+     * @param executor an executor. Null indicates to use the Liberty global thread pool.\n+     * @return the CompletableFuture.\n+     */\n+    public <T> CompletableFuture<T> newIncompleteFuture(Executor executor) {\n+        if (executor instanceof CompletionStageExecutor)\n+            return ((CompletionStageExecutor) executor).newIncompleteFuture();\n+\n+        executor = executor == null ? globalExecutor : executor;\n+        if (JAVA8)\n+            return new CompletableFuture<T>(); // this method provides no additional value on Java SE 8\n+        else\n+            return new LibertyCompletableFuture<T>(executor);\n+    }\n+\n+    /**\n+     * Creates a CompletableFuture which is backed (or partly backed if Java 8) by the Liberty global thread pool.\n+     *\n+     * @param action the operation.\n+     * @return CompletableFuture that is backed (or partly backed if Java 8) by the Liberty global thread pool.\n+     */\n+    @Trivial\n+    public CompletableFuture<Void> runAsync(Runnable action) {\n+        return runAsync(action, globalExecutor);\n+    }\n+\n+    /**\n+     * Creates a CompletableFuture which is backed (or partly backed if Java 8) by the specified\n+     * executor as its default asynchronous execution facility.\n+     * If the com.ibm.ws.concurrent bundle is enabled and the executor is a managed executor,\n+     * then thread context is cleared/captured/propagated/restored for the runnable action\n+     * and all dependent stage actions per the configuration of the managed executor.\n+     *\n+     * @param action   the operation.\n+     * @param executor an executor. Null indicates to use the Liberty global thread pool.\n+     * @return CompletableFuture that is backed (or partly backed if Java 8) by the specified executor.\n+     */\n+    public CompletableFuture<Void> runAsync(Runnable action, Executor executor) {\n+        if (executor instanceof CompletionStageExecutor)\n+            return ((CompletionStageExecutor) executor).runAsync(action);\n+\n+        executor = executor == null ? globalExecutor : executor;\n+        if (JAVA8)\n+            return CompletableFuture.runAsync(action, executor); // at least run the initial stage on the executor\n+        else {\n+            LibertyCompletableFuture<Void> future = new LibertyCompletableFuture<Void>(executor);\n+            executor.execute(new RunAsync(action, future));\n+            return future;\n+        }\n+    }\n+\n+    private static class RunAsync implements Runnable {\n+        private final Runnable action;\n+        private final LibertyCompletableFuture<Void> future;\n+\n+        RunAsync(Runnable action, LibertyCompletableFuture<Void> future) {\n+            this.action = action;\n+            this.future = future;\n+        }\n+\n+        @FFDCIgnore(Throwable.class) // exception is from customer code path, not Liberty\n+        @Override\n+        public void run() {\n+            try {\n+                action.run();\n+                future.complete(null);\n+            } catch (Throwable x) {\n+                future.completeExceptionally(x);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Creates a CompletableFuture which is backed (or partly backed if Java 8) by the Liberty global thread pool.\n+     *\n+     * @param <T>      type of result that is returned by the supplier.\n+     * @param supplier operation that supplies a value.\n+     * @return CompletableFuture that is backed (or partly backed if Java 8) by the Liberty global thread pool.\n+     */\n+    @Trivial\n+    public <T> CompletableFuture<T> supplyAsync(Supplier<T> supplier) {\n+        return supplyAsync(supplier, globalExecutor);\n+    }\n+\n+    /**\n+     * Creates a CompletableFuture which is backed (or partly backed if Java 8) by the specified\n+     * executor as its default asynchronous execution facility.\n+     * If the com.ibm.ws.concurrent bundle is enabled and the executor is a managed executor,\n+     * then thread context is cleared/captured/propagated/restored for the supplier\n+     * and all dependent stage actions per the configuration of the managed executor.\n+     *\n+     * @param <T>      type of result that is returned by the supplier.\n+     * @param supplier operation that supplies a value.\n+     * @param executor an executor. Null indicates to use the Liberty global thread pool.\n+     * @return CompletableFuture that is backed (or partly backed if Java 8) by the specified executor.\n+     */\n+    public <T> CompletableFuture<T> supplyAsync(Supplier<T> supplier, Executor executor) {\n+        if (executor instanceof CompletionStageExecutor)\n+            return ((CompletionStageExecutor) executor).supplyAsync(supplier);\n+\n+        executor = executor == null ? globalExecutor : executor;\n+        if (JAVA8)\n+            return CompletableFuture.supplyAsync(supplier, executor); // at least run the initial stage on the executor\n+        else {\n+            LibertyCompletableFuture<T> future = new LibertyCompletableFuture<T>(executor);\n+            // TODO once Java 8 is dropped, replace reflection with:\n+            // TODO future.completeAsync(supplier, executor)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY4ODMyMg=="}, "originalCommit": {"oid": "4e73c579d8b00fef4f1201ac4bf430bd4d4f8f25"}, "originalPosition": 175}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1781, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}