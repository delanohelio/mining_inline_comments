{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNzU1MDc2", "number": 12009, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOTowMjo0MVrOD5H6gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMDowOToxNVrOD7chdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjI1MDg4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.webcontainer/resources/OSGI-INF/l10n/metatype.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOTowMjo0MVrOGQOATA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOTowMjo0MVrOGQOATA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1OTg1Mg==", "bodyText": "Change,\n\"Stop the web application when context listener fails to start due to an unhandled exception.\"\nto,\n\"Stop the web application when context listener doesn't start due to an unhandled exception.\"", "url": "https://github.com/OpenLiberty/open-liberty/pull/12009#discussion_r419659852", "createdAt": "2020-05-04T19:02:41Z", "author": {"login": "ManasiGandhi"}, "path": "dev/com.ibm.ws.webcontainer/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -171,3 +171,6 @@ throwExceptionWhenUnableToCompleteOrDispatch.desc=Throw an illegal state excepti\n \n getRealPathReturnsQualifiedPath.name=Always return a non-null path from getRealPath\n getRealPathReturnsQualifiedPath.desc=Return non-null paths from the ServletContext.getRealPath(String) method, even if no resource exists at the given path. The default is true. If applications expect the getRealPath method to return null when given a path for which no resource exists, set the property to false.\n+\n+stopAppStartUponListenerException.name=Stop the web application when context listener fails to start due to an unhandled exception.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff3737ecaad64cbb11d3af96a6473ce8110473f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjMxMjI3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.webcontainer/resources/OSGI-INF/l10n/metatype.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOToxOTo0OVrOGQOmjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOToxOTo0OVrOGQOmjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY2OTY0NA==", "bodyText": "Change,\n\"Some web applications depend on context listeners to do the necessary setup before the web application started. Set this property to true to stop the application from starting up when an unhandled exception is thrown from the context listeners.\n8 dev/com.ibm.ws.webcontainer/resources/OSGI-INF/metatype/metatype.xml \"\nto,\n\"Some web applications depend on context listeners for setup before the web application starts. Set this property to true to stop the application from starting up when an unhandled exception is thrown from the context listeners.\n8 dev/com.ibm.ws.webcontainer/resources/OSGI-INF/metatype/metatype.xml \"", "url": "https://github.com/OpenLiberty/open-liberty/pull/12009#discussion_r419669644", "createdAt": "2020-05-04T19:19:49Z", "author": {"login": "ManasiGandhi"}, "path": "dev/com.ibm.ws.webcontainer/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -171,3 +171,6 @@ throwExceptionWhenUnableToCompleteOrDispatch.desc=Throw an illegal state excepti\n \n getRealPathReturnsQualifiedPath.name=Always return a non-null path from getRealPath\n getRealPathReturnsQualifiedPath.desc=Return non-null paths from the ServletContext.getRealPath(String) method, even if no resource exists at the given path. The default is true. If applications expect the getRealPath method to return null when given a path for which no resource exists, set the property to false.\n+\n+stopAppStartUponListenerException.name=Stop the web application when context listener fails to start due to an unhandled exception.\n+stopAppStartUponListenerException.desc=Some web applications depend on context listeners to do the necessary setup before the web application is started. Set this property to true to stop the application from starting up when an unhandled exception is thrown from the context listeners.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff3737ecaad64cbb11d3af96a6473ce8110473f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjU5NTQzOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCApplicationMBeanStatusTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMDowNzoyN1rOGTxl_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMDowNzoyN1rOGTxl_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4ODY3MQ==", "bodyText": "Can you fix this copyright header? Formatting is really odd.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12009#discussion_r423388671", "createdAt": "2020-05-12T00:07:27Z", "author": {"login": "pnicolucci"}, "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCApplicationMBeanStatusTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*******************************************************************************n * Copyright (c) 2020 IBM Corporation and others.n * All rights reserved. This program and the accompanying materialsn * are made available under the terms of the Eclipse Public License v1.0n * which accompanies this distribution, and is available atn * http://www.eclipse.org/legal/epl-v10.htmln *n * Contributors:n *     IBM Corporation - initial API and implementationn *******************************************************************************/\n+package com.ibm.ws.fat.wc.tests;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53b919d88a1f5e1babae8f5aee788ba853382910"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjU5NzQ2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCApplicationMBeanStatusTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMDowODoxNVrOGTxnGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMDowODoxNVrOGTxnGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4ODk1Mg==", "bodyText": "What are these Error/Warning messages for? Are these part of this specific test case?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12009#discussion_r423388952", "createdAt": "2020-05-12T00:08:15Z", "author": {"login": "pnicolucci"}, "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/fat/src/com/ibm/ws/fat/wc/tests/WCApplicationMBeanStatusTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*******************************************************************************n * Copyright (c) 2020 IBM Corporation and others.n * All rights reserved. This program and the accompanying materialsn * are made available under the terms of the Eclipse Public License v1.0n * which accompanies this distribution, and is available atn * http://www.eclipse.org/legal/epl-v10.htmln *n * Contributors:n *     IBM Corporation - initial API and implementationn *******************************************************************************/\n+package com.ibm.ws.fat.wc.tests;\n+\n+import java.util.logging.Logger;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.ws.fat.util.LoggingTest;\n+import com.ibm.ws.fat.util.SharedServer;\n+import com.ibm.ws.fat.wc.WCApplicationHelper;\n+\n+import componenttest.annotation.ExpectedFFDC;\n+import componenttest.custom.junit.runner.FATRunner;\n+\n+/**\n+ *\n+ * The testcase will send request to a servlet in TestServlet40.war\n+ * which has ApplicationMBean and checks for the status of the\n+ * TestBadServletContextListener.war web application\n+ * which is expected to fail to start due to runtime exception.\n+ *\n+ * PASS: if status is INSTALLED\n+ *\n+ */\n+@RunWith(FATRunner.class)\n+public class WCApplicationMBeanStatusTest extends LoggingTest {\n+\n+    private final static String CLASSNAME = WCApplicationMBeanStatusTest.class.getName();\n+\n+    private final static Logger LOG = Logger.getLogger(CLASSNAME);\n+\n+    @ClassRule\n+    public static SharedServer SHARED_SERVER = new SharedServer(\"servlet40_stopAppStartListenerExceptionServer\");\n+\n+    @Override\n+    protected SharedServer getSharedServer() {\n+        return SHARED_SERVER;\n+    }\n+\n+    /**\n+     * @throws Exception\n+     *\n+     *                       The test case expects start of the application fails due to runtime\n+     *                       exception on server start, add the expected ffdc.\n+     */\n+    @BeforeClass\n+    @ExpectedFFDC({ \"java.lang.Exception\", \"java.lang.RuntimeException\" })\n+    public static void setUp() throws Exception {\n+        LOG.info(\"Setup : add TestBadServletContextListener.war to the server if not already present.\");\n+\n+        WCApplicationHelper.addWarToServerDropins(SHARED_SERVER.getLibertyServer(), \"TestBadServletContextListener.war\", false,\n+                                                  \"testbadscl.war.listener\");\n+        LOG.info(\"Setup : TestBadServletContextListener.war added to the server\");\n+\n+        WCApplicationHelper.addWarToServerDropins(SHARED_SERVER.getLibertyServer(), \"TestServlet40.war\", true, \"testservlet40.war.servlets\");\n+\n+        LOG.info(\"Setup : TestServlet40.war added to the server\");\n+\n+        SHARED_SERVER.startIfNotStarted();\n+\n+        // The ApplicationMBean is added in TestServlet40\n+        WCApplicationHelper.waitForAppStart(\"TestServlet40\", WCPushBuilderTest.class.getName(), SHARED_SERVER.getLibertyServer());\n+\n+        LOG.info(\"Setup : TestServlet40.war started on the server\");\n+\n+        // The failing servletcontext is added in TestBadServletContextListener\n+        WCApplicationHelper.waitForAppFailStart(\"TestBadServletContextListener\", CLASSNAME,\n+                                                SHARED_SERVER.getLibertyServer());\n+\n+        LOG.info(\"Setup : TestBadServletContextListener failed to start on the server as expected\");\n+\n+        LOG.info(\"Setup : complete, ready for Tests\");\n+    }\n+\n+    /**\n+     * @throws Exception\n+     *\n+     *                       The test case expects start of the application fails due to runtime\n+     *                       exception in listener, add the expected errors\n+     *\n+     */\n+    @AfterClass\n+    public static void testCleanup() throws Exception {\n+        // test cleanup\n+        if (SHARED_SERVER.getLibertyServer() != null && SHARED_SERVER.getLibertyServer().isStarted()) {\n+            SHARED_SERVER.getLibertyServer().stopServer(\"SRVE0283E:.*\", \"SRVE0265E:.*\", \"CWWKE0921W:.*\", \"CWWKE0912W:.*\", \"SRVE9014E:.*\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53b919d88a1f5e1babae8f5aee788ba853382910"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjU5ODA2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/test-applications/TestBadServletContextListener.war/src/testbadscl/war/listener/RuntimeErrorContextListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMDowODozOFrOGTxnew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMDowODozOFrOGTxnew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4OTA1MQ==", "bodyText": "Can you fix this copyright header? Formatting is really odd.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12009#discussion_r423389051", "createdAt": "2020-05-12T00:08:38Z", "author": {"login": "pnicolucci"}, "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/test-applications/TestBadServletContextListener.war/src/testbadscl/war/listener/RuntimeErrorContextListener.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package testbadscl.war.listener;\n+\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+import javax.servlet.annotation.WebListener;\n+\n+/*******************************************************************************n * Copyright (c) 2020 IBM Corporation and others.n * All rights reserved. This program and the accompanying materialsn * are made available under the terms of the Eclipse Public License v1.0n * which accompanies this distribution, and is available atn * http://www.eclipse.org/legal/epl-v10.htmln *n * Contributors:n *     IBM Corporation - initial API and implementationn *******************************************************************************/\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53b919d88a1f5e1babae8f5aee788ba853382910"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjU5ODc1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/test-applications/TestBadServletContextListener.war/src/testbadscl/war/listener/RuntimeErrorContextListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMDowOTowNlrOGTxn7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMDowOTowNlrOGTxn7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4OTE2Ng==", "bodyText": "Should we log this vs doing a system out?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12009#discussion_r423389166", "createdAt": "2020-05-12T00:09:06Z", "author": {"login": "pnicolucci"}, "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/test-applications/TestBadServletContextListener.war/src/testbadscl/war/listener/RuntimeErrorContextListener.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package testbadscl.war.listener;\n+\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+import javax.servlet.annotation.WebListener;\n+\n+/*******************************************************************************n * Copyright (c) 2020 IBM Corporation and others.n * All rights reserved. This program and the accompanying materialsn * are made available under the terms of the Eclipse Public License v1.0n * which accompanies this distribution, and is available atn * http://www.eclipse.org/legal/epl-v10.htmln *n * Contributors:n *     IBM Corporation - initial API and implementationn *******************************************************************************/\n+\n+/**\n+ * The ApplicationMBean and checks for the status of the\n+ * TestBadServletContextListener.war web application\n+ * which has this listener and is expected to fail to\n+ * start due to runtime exception thrown here.\n+ *\n+ */\n+@WebListener\n+public class RuntimeErrorContextListener implements ServletContextListener {\n+\n+    /**\n+     *\n+     */\n+    @Override\n+    public void contextDestroyed(ServletContextEvent scEvent) {\n+        scEvent.getServletContext().log(\"**RuntimeErrorContextListener destroy invoked**\");\n+    }\n+\n+    /**\n+     *\n+     */\n+    @Override\n+    public void contextInitialized(ServletContextEvent sce) {\n+        ServletContext context = sce.getServletContext();\n+        context.log(\"**RuntimeErrorContextListener contextInitialized invoked**\");\n+        System.out.println(\"RuntimeErrorContextListener throws RuntimeException\");\n+        //EXPLICITLY THROW EXCEPTION TO test property \"stopappstartuponlistenerexception\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53b919d88a1f5e1babae8f5aee788ba853382910"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjU5ODk1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/test-applications/TestServlet40.war/src/testservlet40/war/servlets/ApplicationMBeanServlet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMDowOToxNVrOGTxoEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMDowOToxNVrOGTxoEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4OTIwMQ==", "bodyText": "Can you fix this copyright header? Formatting is really odd.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12009#discussion_r423389201", "createdAt": "2020-05-12T00:09:15Z", "author": {"login": "pnicolucci"}, "path": "dev/com.ibm.ws.webcontainer.servlet.4.0_fat/test-applications/TestServlet40.war/src/testservlet40/war/servlets/ApplicationMBeanServlet.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*******************************************************************************n * Copyright (c) 2020 IBM Corporation and others.n * All rights reserved. This program and the accompanying materialsn * are made available under the terms of the Eclipse Public License v1.0n * which accompanies this distribution, and is available atn * http://www.eclipse.org/legal/epl-v10.htmln *n * Contributors:n *     IBM Corporation - initial API and implementationn *******************************************************************************/\n+package testservlet40.war.servlets;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53b919d88a1f5e1babae8f5aee788ba853382910"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1868, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}