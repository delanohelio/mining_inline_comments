{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NjYzODM4", "number": 10634, "title": "Added new async request context test for when Future.cancel() occurs", "bodyText": "", "createdAt": "2020-01-29T16:55:10Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/10634", "merged": true, "mergeCommit": {"oid": "601b63dbab5d77e4e6d39a0404e2e9676f143d79"}, "closed": true, "closedAt": "2020-01-31T10:37:20Z", "author": {"login": "Joseph-Cass"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_IzXNAH2gAyMzY4NjYzODM4OjAxNTIyNWI5NGI2MmE3ZTQ5NjdjMTNmMDVmMmU3NjA0Zjk1ZDkwMGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_XiyHAFqTM1MDY5OTkxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "015225b94b62a7e4967c13f05f2e7604f95d900d", "author": {"user": {"login": "JCass149", "name": "Joseph Cass"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/015225b94b62a7e4967c13f05f2e7604f95d900d", "committedDate": "2020-01-29T16:47:30Z", "message": "Added new async request context tests for when Future.cancel() occurs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzAwMDEx", "url": "https://github.com/OpenLiberty/open-liberty/pull/10634#pullrequestreview-350300011", "createdAt": "2020-01-29T17:43:20Z", "commit": {"oid": "015225b94b62a7e4967c13f05f2e7604f95d900d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNzo0MzoyMFrOFjRj5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNzo0NjowMVrOFjRpVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzMjE5Nw==", "bodyText": "This assert won't cause the test to fail correctly as it's inside the executor's callable and the result of that is thrown away because you cancel the execution.\nHowever, if this assert ever did fail, you wouldn't call countDown() on line 222 and then your test would hang waiting for it on line 231.\nI don't really think this check is necessary as you're already testing this elsewhere, so you can just take it out.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10634#discussion_r372532197", "createdAt": "2020-01-29T17:43:20Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.faulttolerance.2.0/test/src/com/ibm/ws/microprofile/faulttolerance/test/AsyncTest.java", "diffHunk": "@@ -204,6 +202,46 @@ public void testAsyncRequestContextDeactivatedOnInterruption() throws Interrupte\n         }\n     }\n \n+    @Test\n+    public void testAsyncRequestContextDeactivatedOnInterruption() throws InterruptedException, ExecutionException, TimeoutException, TestException {\n+        ExecutorBuilder<String> builder = FaultToleranceProvider.newExecutionBuilder();\n+\n+        MockAsyncRequestContextController asyncRequestContextController = new MockAsyncRequestContextController();\n+        builder.setRequestContextController(asyncRequestContextController);\n+\n+        Executor<Future<String>> executor = builder.buildAsync(Future.class);\n+        ExecutionContext context = executor.newExecutionContext(\"testAsyncCS\", null);\n+\n+        CountDownLatch startSignal = new CountDownLatch(1); // Prevents the execution from being interrupted until request context is set\n+\n+        // Test an execution which is cancelled\n+        Future<String> result = executor.execute(() -> {\n+            assertEquals(\"Activate request context should be called when request is started\", 1, asyncRequestContextController.getActivateContextCount());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "015225b94b62a7e4967c13f05f2e7604f95d900d"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzMjM5MA==", "bodyText": "Someone else has delivered this change, so you can take it out of your PR.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10634#discussion_r372532390", "createdAt": "2020-01-29T17:43:42Z", "author": {"login": "Azquelt"}, "path": "dev/cnf/dependabot/check_this_in_if_it_changes/pom.xml", "diffHunk": "@@ -1561,6 +1561,11 @@\n       <artifactId>microprofile-fault-tolerance-api</artifactId>\n       <version>2.0.1</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.eclipse.microprofile.fault-tolerance</groupId>\n+      <artifactId>microprofile-fault-tolerance-api</artifactId>\n+      <version>2.1-RC2</version>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "015225b94b62a7e4967c13f05f2e7604f95d900d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUzMzU5MA==", "bodyText": "Add a timeout here as we don't want to wait forever. Also then assert that it returned true.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10634#discussion_r372533590", "createdAt": "2020-01-29T17:46:01Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.faulttolerance.2.0/test/src/com/ibm/ws/microprofile/faulttolerance/test/AsyncTest.java", "diffHunk": "@@ -204,6 +202,46 @@ public void testAsyncRequestContextDeactivatedOnInterruption() throws Interrupte\n         }\n     }\n \n+    @Test\n+    public void testAsyncRequestContextDeactivatedOnInterruption() throws InterruptedException, ExecutionException, TimeoutException, TestException {\n+        ExecutorBuilder<String> builder = FaultToleranceProvider.newExecutionBuilder();\n+\n+        MockAsyncRequestContextController asyncRequestContextController = new MockAsyncRequestContextController();\n+        builder.setRequestContextController(asyncRequestContextController);\n+\n+        Executor<Future<String>> executor = builder.buildAsync(Future.class);\n+        ExecutionContext context = executor.newExecutionContext(\"testAsyncCS\", null);\n+\n+        CountDownLatch startSignal = new CountDownLatch(1); // Prevents the execution from being interrupted until request context is set\n+\n+        // Test an execution which is cancelled\n+        Future<String> result = executor.execute(() -> {\n+            assertEquals(\"Activate request context should be called when request is started\", 1, asyncRequestContextController.getActivateContextCount());\n+\n+            // Allow the execution to be interrupted\n+            startSignal.countDown();\n+\n+            // Wait for up to 10 seconds for the execution to be interrupted\n+            Thread.sleep(FUTURE_TIMEOUT);\n+\n+            return null;\n+        }, context);\n+\n+        // Wait for the execution to have started before interrupting\n+        startSignal.await();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "015225b94b62a7e4967c13f05f2e7604f95d900d"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5437325621bf1ce14a05981fd60aa20870d00ba", "author": {"user": {"login": "JCass149", "name": "Joseph Cass"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/b5437325621bf1ce14a05981fd60aa20870d00ba", "committedDate": "2020-01-30T09:07:29Z", "message": "Added await timeout and removed unnecessary assert"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNjk5OTEz", "url": "https://github.com/OpenLiberty/open-liberty/pull/10634#pullrequestreview-350699913", "createdAt": "2020-01-30T09:57:58Z", "commit": {"oid": "b5437325621bf1ce14a05981fd60aa20870d00ba"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3300, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}