{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1ODQxMDU3", "number": 11541, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDo0OToyMlrODz6s3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjo0NjoxNFrOD0vMww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzY1NzI2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/Provisioner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDo0OToyM1rOGInFwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjo0NDozOFrOGJgzzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY4MjI0MA==", "bodyText": "This seems like a very limited condition to add to the bundle added delta.  I would have expected this to add all bundles that got installed that did not exist before.  But here we only add bundles that are not fragments and that we need to change the start-level for?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11541#discussion_r411682240", "createdAt": "2020-04-20T20:49:23Z", "author": {"login": "tjwatson"}, "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/Provisioner.java", "diffHunk": "@@ -305,6 +304,7 @@ public boolean handle(FeatureResource fr) {\n                             }\n                             level = newLevel;\n                             bsl.setStartLevel(level);\n+                            installStatus.addBundleAddedDelta(bundle);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cedf2d8d28c459afd7f3c8238bb093f6e03e421"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYyNzkxOQ==", "bodyText": "Moved to the installFeatureBundle method", "url": "https://github.com/OpenLiberty/open-liberty/pull/11541#discussion_r412627919", "createdAt": "2020-04-22T02:44:38Z", "author": {"login": "brenthdaniel"}, "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/Provisioner.java", "diffHunk": "@@ -305,6 +304,7 @@ public boolean handle(FeatureResource fr) {\n                             }\n                             level = newLevel;\n                             bsl.setStartLevel(level);\n+                            installStatus.addBundleAddedDelta(bundle);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY4MjI0MA=="}, "originalCommit": {"oid": "8cedf2d8d28c459afd7f3c8238bb093f6e03e421"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzY4NDkyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/FeatureManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDo1NjoyN1rOGInWIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDoyODoyNFrOGJXGMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY4NjQzNA==", "bodyText": "Does this map need to be thread safe?  It seems we populate it here and then leave it open to other threads to get/put stuff on it when the notification is fired.  Should setProperties just take the values and wrap them in an unmodifiable Map in the notification impl? This way they are only read-only on notification firing when they call getProperties.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11541#discussion_r411686434", "createdAt": "2020-04-20T20:56:27Z", "author": {"login": "tjwatson"}, "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/FeatureManager.java", "diffHunk": "@@ -1400,6 +1408,10 @@ protected boolean updateFeatures(WsLocationAdmin locService,\n         provisioner.resolveBundles(bundleContext, installedBundles);\n \n         if (featureChange.featureBundlesResolved != null) {\n+            Map<String, Object> props = new HashMap<String, Object>(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cedf2d8d28c459afd7f3c8238bb093f6e03e421"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ2ODc4Nw==", "bodyText": "This has been addressed", "url": "https://github.com/OpenLiberty/open-liberty/pull/11541#discussion_r412468787", "createdAt": "2020-04-21T20:28:24Z", "author": {"login": "tjwatson"}, "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/FeatureManager.java", "diffHunk": "@@ -1400,6 +1408,10 @@ protected boolean updateFeatures(WsLocationAdmin locService,\n         provisioner.resolveBundles(bundleContext, installedBundles);\n \n         if (featureChange.featureBundlesResolved != null) {\n+            Map<String, Object> props = new HashMap<String, Object>(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY4NjQzNA=="}, "originalCommit": {"oid": "8cedf2d8d28c459afd7f3c8238bb093f6e03e421"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Mjc3OTYwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.config/src/com/ibm/ws/config/xml/internal/BundleProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxOTo0NToyM1rOGJVfnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjo0NToxOVrOGJg0kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ0MjUyNA==", "bodyText": "Did you intend to leave this commented out?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11541#discussion_r412442524", "createdAt": "2020-04-21T19:45:23Z", "author": {"login": "tjwatson"}, "path": "dev/com.ibm.ws.config/src/com/ibm/ws/config/xml/internal/BundleProcessor.java", "diffHunk": "@@ -254,12 +248,14 @@ public void bundleChanged(BundleEvent event) {\n             Bundle b = event.getBundle();\n             boolean isFeatureBundle = b.getLocation().startsWith(XMLConfigConstants.BUNDLE_LOC_FEATURE_TAG);\n             if (type == BundleEvent.RESOLVED) {\n+\n                 if (isFeatureBundle) {\n+\n                     if (tc.isDebugEnabled()) {\n                         Tr.debug(tc, \"Adding feature bundle {0}\", b);\n                     }\n                     //add it to the queue for processing later\n-                    addFeatureBundles.add(b);\n+//                    addFeatureBundles.add(b);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04f9343bb534a5a75bb3d81d0adcb5c229ca6ba"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYyODExNA==", "bodyText": "Issues with comments/printStacktrace were fixed by restoring old commits", "url": "https://github.com/OpenLiberty/open-liberty/pull/11541#discussion_r412628114", "createdAt": "2020-04-22T02:45:19Z", "author": {"login": "brenthdaniel"}, "path": "dev/com.ibm.ws.config/src/com/ibm/ws/config/xml/internal/BundleProcessor.java", "diffHunk": "@@ -254,12 +248,14 @@ public void bundleChanged(BundleEvent event) {\n             Bundle b = event.getBundle();\n             boolean isFeatureBundle = b.getLocation().startsWith(XMLConfigConstants.BUNDLE_LOC_FEATURE_TAG);\n             if (type == BundleEvent.RESOLVED) {\n+\n                 if (isFeatureBundle) {\n+\n                     if (tc.isDebugEnabled()) {\n                         Tr.debug(tc, \"Adding feature bundle {0}\", b);\n                     }\n                     //add it to the queue for processing later\n-                    addFeatureBundles.add(b);\n+//                    addFeatureBundles.add(b);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ0MjUyNA=="}, "originalCommit": {"oid": "d04f9343bb534a5a75bb3d81d0adcb5c229ca6ba"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Mjc4MDY0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.config/src/com/ibm/ws/config/xml/internal/BundleProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxOTo0NTozOVrOGJVgTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxOTo0NTozOVrOGJVgTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ0MjcwMA==", "bodyText": "Did you intend to leave this commented out?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11541#discussion_r412442700", "createdAt": "2020-04-21T19:45:39Z", "author": {"login": "tjwatson"}, "path": "dev/com.ibm.ws.config/src/com/ibm/ws/config/xml/internal/BundleProcessor.java", "diffHunk": "@@ -270,7 +266,7 @@ public void bundleChanged(BundleEvent event) {\n             } else if (type == BundleEvent.UNRESOLVED) {\n                 if (isFeatureBundle) {\n                     //add it to the queue for processing later\n-                    removeFeatureBundles.add(b);\n+                    //                   removeFeatureBundles.add(b);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04f9343bb534a5a75bb3d81d0adcb5c229ca6ba"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Mjg5MDI0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/Provisioner.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDoxMjoyN1rOGJWhDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjo0OTozM1rOGJg59g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1OTI3OQ==", "bodyText": "Did you intend to do a printStackTrace here?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11541#discussion_r412459279", "createdAt": "2020-04-21T20:12:27Z", "author": {"login": "tjwatson"}, "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/Provisioner.java", "diffHunk": "@@ -608,7 +588,9 @@ public boolean handle(FeatureResource fr) {\n         for (Bundle bundleToUninstall : bundlesToUninstall) {\n             try {\n                 bundleToUninstall.uninstall();\n+                installStatus.addBundleRemovedDelta(bundleToUninstall);\n             } catch (IllegalStateException e) {\n+                e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04f9343bb534a5a75bb3d81d0adcb5c229ca6ba"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ2MDI5Nw==", "bodyText": "It would seem that you should add to the status the intention to uninstall this bundle before calling uninstall().  The BundleProcessor no longer will get an uninstalled event so it would miss it if we somehow had another thread uninstall the bundle before we could here.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11541#discussion_r412460297", "createdAt": "2020-04-21T20:14:04Z", "author": {"login": "tjwatson"}, "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/Provisioner.java", "diffHunk": "@@ -608,7 +588,9 @@ public boolean handle(FeatureResource fr) {\n         for (Bundle bundleToUninstall : bundlesToUninstall) {\n             try {\n                 bundleToUninstall.uninstall();\n+                installStatus.addBundleRemovedDelta(bundleToUninstall);\n             } catch (IllegalStateException e) {\n+                e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1OTI3OQ=="}, "originalCommit": {"oid": "d04f9343bb534a5a75bb3d81d0adcb5c229ca6ba"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYyOTQ5NA==", "bodyText": "Changed so the installstatus method is called before the uninstall", "url": "https://github.com/OpenLiberty/open-liberty/pull/11541#discussion_r412629494", "createdAt": "2020-04-22T02:49:33Z", "author": {"login": "brenthdaniel"}, "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/Provisioner.java", "diffHunk": "@@ -608,7 +588,9 @@ public boolean handle(FeatureResource fr) {\n         for (Bundle bundleToUninstall : bundlesToUninstall) {\n             try {\n                 bundleToUninstall.uninstall();\n+                installStatus.addBundleRemovedDelta(bundleToUninstall);\n             } catch (IllegalStateException e) {\n+                e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1OTI3OQ=="}, "originalCommit": {"oid": "d04f9343bb534a5a75bb3d81d0adcb5c229ca6ba"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjIwNTk3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.app.manager/src/com/ibm/ws/app/manager/internal/statemachine/StartAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjozNToxN1rOGJz_Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjozNToxN1rOGJz_Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0MjEyMg==", "bodyText": "Should this be volatile? I'm pretty sure it should be, it looks like it would be read from one thread and written with another.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11541#discussion_r412942122", "createdAt": "2020-04-22T12:35:17Z", "author": {"login": "tjwatson"}, "path": "dev/com.ibm.ws.app.manager/src/com/ibm/ws/app/manager/internal/statemachine/StartAction.java", "diffHunk": "@@ -43,6 +43,7 @@\n     private final AtomicLong _startTime = new AtomicLong();\n     private final ApplicationMonitor _appMonitor;\n     private final boolean _update;\n+    private boolean cancelled = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7eb06ccc4baacb9890452c76dd0bf3f2384de6a"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjIwOTIzOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.app.manager/src/com/ibm/ws/app/manager/internal/statemachine/StartAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjozNTo1OFrOGJ0BBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjozNTo1OFrOGJ0BBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0MjU5Nw==", "bodyText": "Did you intend to leave this commented out?  It is unclear to me if _callback will always get set from the CompletionListener when cancel is called and it is safe to remove this call.  But if that is all good then this commented out code will always make the next set of eyes have the same questions I do (I think).", "url": "https://github.com/OpenLiberty/open-liberty/pull/11541#discussion_r412942597", "createdAt": "2020-04-22T12:35:58Z", "author": {"login": "tjwatson"}, "path": "dev/com.ibm.ws.app.manager/src/com/ibm/ws/app/manager/internal/statemachine/StartAction.java", "diffHunk": "@@ -160,7 +165,8 @@ private void stopSlowStartMessage() {\n     /** {@inheritDoc} */\n     @Override\n     public void cancel() {\n-        _callback.set(null);\n+        this.cancelled = true;\n+        //      _callback.set(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7eb06ccc4baacb9890452c76dd0bf3f2384de6a"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjI0MDkxOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/BundleInstallStatus.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjo0MjozN1rOGJ0TvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjo0MjozN1rOGJ0TvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0NzM4OA==", "bodyText": "I thought the convention was to use a comma here 2009, 2020.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11541#discussion_r412947388", "createdAt": "2020-04-22T12:42:37Z", "author": {"login": "tjwatson"}, "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/BundleInstallStatus.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 2009 IBM Corporation and others.\n+ * Copyright (c) 2009-2020 IBM Corporation and others.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7eb06ccc4baacb9890452c76dd0bf3f2384de6a"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjI0ODM1OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/FeatureManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjo0NDowOFrOGJ0YFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjo0NDowOFrOGJ0YFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0ODUwMA==", "bodyText": "Not your change, just showing up because of line differences.  Creating a new empty Hashtable instead of passing null is just creating garbage.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11541#discussion_r412948500", "createdAt": "2020-04-22T12:44:08Z", "author": {"login": "tjwatson"}, "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/FeatureManager.java", "diffHunk": "@@ -744,10 +750,12 @@ protected void update(FeatureChange featureChange) throws IllegalStateException\n \n                     //register a service that can be looked up for server start.\n                     // Need a two phase approach, since ports will be opened for listening on the first phase\n-                    bundleContext.registerService(ServerStarted.class, new ServerStarted() {}, new Hashtable<String, Object>());\n+                    bundleContext.registerService(ServerStarted.class, new ServerStarted() {\n+                    }, new Hashtable<String, Object>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7eb06ccc4baacb9890452c76dd0bf3f2384de6a"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjI1MDIwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/FeatureManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjo0NDozMVrOGJ0ZNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjo0NDozMVrOGJ0ZNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk0ODc5MA==", "bodyText": "Same hashtable object garbage comment.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11541#discussion_r412948790", "createdAt": "2020-04-22T12:44:31Z", "author": {"login": "tjwatson"}, "path": "dev/com.ibm.ws.kernel.feature.core/src/com/ibm/ws/kernel/feature/internal/FeatureManager.java", "diffHunk": "@@ -744,10 +750,12 @@ protected void update(FeatureChange featureChange) throws IllegalStateException\n \n                     //register a service that can be looked up for server start.\n                     // Need a two phase approach, since ports will be opened for listening on the first phase\n-                    bundleContext.registerService(ServerStarted.class, new ServerStarted() {}, new Hashtable<String, Object>());\n+                    bundleContext.registerService(ServerStarted.class, new ServerStarted() {\n+                    }, new Hashtable<String, Object>());\n \n                     // components which needed to wait till ports were opened for listening need to wait till Phase2\n-                    bundleContext.registerService(ServerStartedPhase2.class, new ServerStartedPhase2() {}, new Hashtable<String, Object>());\n+                    bundleContext.registerService(ServerStartedPhase2.class, new ServerStartedPhase2() {\n+                    }, new Hashtable<String, Object>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7eb06ccc4baacb9890452c76dd0bf3f2384de6a"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjI1ODU5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.runtime.update/src/com/ibm/ws/runtime/update/RuntimeUpdateNotification.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjo0NjoxNFrOGJ0eOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMjo0NjoxNFrOGJ0eOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1MDA3NA==", "bodyText": "use of dash in copyright dates.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11541#discussion_r412950074", "createdAt": "2020-04-22T12:46:14Z", "author": {"login": "tjwatson"}, "path": "dev/com.ibm.ws.runtime.update/src/com/ibm/ws/runtime/update/RuntimeUpdateNotification.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 2014 IBM Corporation and others.\n+ * Copyright (c) 2014-2020 IBM Corporation and others.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7eb06ccc4baacb9890452c76dd0bf3f2384de6a"}, "originalPosition": 3}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1935, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}