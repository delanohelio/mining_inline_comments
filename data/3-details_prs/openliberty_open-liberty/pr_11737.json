{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMDgxNjMy", "number": 11737, "title": "Issue 11185: Add renewal request time configuration", "bodyText": "Fixes #11185\nUpdated the timing for when we mark a certificate as expired:\nConfig: renewBeforeExpiration\nAdded min/default and some automatic adjustments.\n\nDefault renewBeforeExpiration: 7 days\nMinimum renewBeforeExpiration: 15 seconds\nWarning level on short renewBeforeExpiration: 60 seconds\n\nAt init, we'll verify the renewBeforeExpiration and adjust and/or warn if necessary:\n\nIf renewBeforeExpiration is less than the minumum (15 seconds) adjust to minimum and log warning.\nIf renewBeforeExpiration is less than the warning level (60 seconds), do not change but log a warning.\n\nAfter we fetch the certificate, we'll compare the renewBeforeExpiration to the validity period of the certificate (notAfter - notBefore = validity period).\nWe'll adjust the renewBeforeExpiration if it is longer than the validity period using the following rules (and log a warning message):\n\nIf the validity period is longer than the default (7 days), we'll adjust renewBeforeExpiration to 7 days\nIf the validity period is shorter than the default (7 days), we'll adjust renewBeforeExpiration by dividing by 2 and rounding with a floor of the minimum duration (15 seconds).\n\n\n\n\nConfigured renewBeforeExpiration\nValidity Period\nAdjusted renewBeforeExpiration\naction taken\n\n\n\n\n95d\n90d\n7d\nset to default\n\n\n95d\n5d\n3d\nduration by half\n\n\n95d\n1m\n30s\nduration by half\n\n\n95d\n20s\n15s\nmin duration\n\n\n\nFor #9017", "createdAt": "2020-04-10T21:48:37Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737", "merged": true, "mergeCommit": {"oid": "850e28989f684bed18d332996499d00affbc2492"}, "closed": true, "closedAt": "2020-05-01T20:23:35Z", "author": {"login": "kristip17"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWYnDwABqjMyMjMyMjcxOTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcdBkyDAFqTQwNDE1NDU4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f826aa0ae594aa4272bc4164ce3aee5be38fa0c3", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/f826aa0ae594aa4272bc4164ce3aee5be38fa0c3", "committedDate": "2020-04-10T21:47:35Z", "message": "Issue 11185: Add renewal request time configuration"}, "afterCommit": {"oid": "98f66dd7094bef8a3f903587dd54e25aa74636a3", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/98f66dd7094bef8a3f903587dd54e25aa74636a3", "committedDate": "2020-04-10T22:12:30Z", "message": "Issue 11185: Add renewal request time configuration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMTgwMDE5", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#pullrequestreview-392180019", "createdAt": "2020-04-13T14:29:48Z", "commit": {"oid": "98f66dd7094bef8a3f903587dd54e25aa74636a3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDoyOTo0OFrOGEoSLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNToxNDoxN1rOGEpttQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUwNzUwMQ==", "bodyText": "Change,\n\"When to start requesting a new certificate before the expiration date. The new certificate request continues until a new certificate request is successful. For example, if 7 days is configured, the ACME service starts requesting a new certificate 7 days before the expiration date of the current certificate. \"\nto,\n\"When to request a new certificate before the expiration date. The new certificate request continues until it is successful. For example, if the request is configured for 7 days, the ACME service starts a new certificate request 7 days before the expiration date of the current certificate. \"", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r407507501", "createdAt": "2020-04-13T14:29:48Z", "author": {"login": "ManasiGandhi"}, "path": "dev/com.ibm.ws.security.acme/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -63,3 +63,6 @@ trustStorePassword.desc=The password that is used to load the truststore file. T\n \n trustStoreType=Truststore type\n trustStoreType.desc=The keystore type for the truststore. Supported types are JKS, PKCS12 and JCEKS.\n+\n+refreshBeforeExpiration=Refresh time before expiration\n+refreshBeforeExpiration.desc=When to start requesting a new certificate before the expiration date. The new certificate request continues until a new certificate request is successful. For example, if 7 days is configured, the ACME service starts requesting a new certificate 7 days before the expiration date of the current certificate.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98f66dd7094bef8a3f903587dd54e25aa74636a3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUwOTYwOQ==", "bodyText": "Change,\n\" The certificate authority signed certificate with {0} serial number expires on {1}. The ACME service will request a new certificate from the ACME certificate authority at the {2} URI.\"\nto,\n\"The certificate authority signed certificate with {0} serial number expires on {1}. The ACME service starts a new certificate request from the ACME certificate authority at the {2} URI.\"", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r407509609", "createdAt": "2020-04-13T14:34:00Z", "author": {"login": "ManasiGandhi"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -201,3 +201,21 @@ CWPKI2043E.useraction=Ensure the the domain included in the value is a valid RDN\n CWPKI2044E=CWPKI2044E: The certificate is not an X.509 certificate. The certificate type is {0}.\n CWPKI2044E.explanation=The ACME service expects all certificates in the certificate chain to be X.509 certificates.\n CWPKI2044E.useraction=Ensure that all the certificates in the certificate chain are X.509 certificates and try again.\n+\n+# {1} is a time stamp.\n+CWPKI2046I=CWPKI2046I: The certificate authority signed certificate with {0} serial number expires on {1}. The ACME service will request a new certificate from the ACME certificate authority at the {2} URI.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98f66dd7094bef8a3f903587dd54e25aa74636a3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUxMDY3Nw==", "bodyText": "Change,\n\"The ACME services starts requesting a new certificate based on the refreshBeforeExpiration property in the server configuration.\nCWPKI2046I.useraction=No action is required.\"\nto,\n\"The ACME services starts a new certificate request based on the refreshBeforeExpiration property in the server configuration.\nCWPKI2046I.useraction=No action is required.\"", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r407510677", "createdAt": "2020-04-13T14:36:14Z", "author": {"login": "ManasiGandhi"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -201,3 +201,21 @@ CWPKI2043E.useraction=Ensure the the domain included in the value is a valid RDN\n CWPKI2044E=CWPKI2044E: The certificate is not an X.509 certificate. The certificate type is {0}.\n CWPKI2044E.explanation=The ACME service expects all certificates in the certificate chain to be X.509 certificates.\n CWPKI2044E.useraction=Ensure that all the certificates in the certificate chain are X.509 certificates and try again.\n+\n+# {1} is a time stamp.\n+CWPKI2046I=CWPKI2046I: The certificate authority signed certificate with {0} serial number expires on {1}. The ACME service will request a new certificate from the ACME certificate authority at the {2} URI.\n+CWPKI2046I.explanation=The ACME services starts requesting a new certificate based on the refreshBeforeExpiration property in the server configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98f66dd7094bef8a3f903587dd54e25aa74636a3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUxNDI5Mg==", "bodyText": "Change,\n\"The certificate authority signed certificate with {0} serial number expired on {1}. The ACME service is not configured to automatically request a new certificate.\"\nto,\n\"The certificate-authority-signed certificate with {0} serial number expired on {1}. The ACME service is not configured to automatically request a new certificate.\"", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r407514292", "createdAt": "2020-04-13T14:43:08Z", "author": {"login": "ManasiGandhi"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -201,3 +201,21 @@ CWPKI2043E.useraction=Ensure the the domain included in the value is a valid RDN\n CWPKI2044E=CWPKI2044E: The certificate is not an X.509 certificate. The certificate type is {0}.\n CWPKI2044E.explanation=The ACME service expects all certificates in the certificate chain to be X.509 certificates.\n CWPKI2044E.useraction=Ensure that all the certificates in the certificate chain are X.509 certificates and try again.\n+\n+# {1} is a time stamp.\n+CWPKI2046I=CWPKI2046I: The certificate authority signed certificate with {0} serial number expires on {1}. The ACME service will request a new certificate from the ACME certificate authority at the {2} URI.\n+CWPKI2046I.explanation=The ACME services starts requesting a new certificate based on the refreshBeforeExpiration property in the server configuration.\n+CWPKI2046I.useraction=No action is required.\n+\n+# {1} is a time stamp.\n+CWPKI2047W=CWPKI2047W: The certificate authority signed certificate with {0} serial number expired on {1}. The ACME service is not configured to automatically request a new certificate.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98f66dd7094bef8a3f903587dd54e25aa74636a3"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUxODI1Nw==", "bodyText": "Change,\n\"The certificate is expired and TLS/SSL requests will fail.\"\nto,\n\"The TLS/SSL requests cannot complete as the certificate expired.\"", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r407518257", "createdAt": "2020-04-13T14:50:40Z", "author": {"login": "ManasiGandhi"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -201,3 +201,21 @@ CWPKI2043E.useraction=Ensure the the domain included in the value is a valid RDN\n CWPKI2044E=CWPKI2044E: The certificate is not an X.509 certificate. The certificate type is {0}.\n CWPKI2044E.explanation=The ACME service expects all certificates in the certificate chain to be X.509 certificates.\n CWPKI2044E.useraction=Ensure that all the certificates in the certificate chain are X.509 certificates and try again.\n+\n+# {1} is a time stamp.\n+CWPKI2046I=CWPKI2046I: The certificate authority signed certificate with {0} serial number expires on {1}. The ACME service will request a new certificate from the ACME certificate authority at the {2} URI.\n+CWPKI2046I.explanation=The ACME services starts requesting a new certificate based on the refreshBeforeExpiration property in the server configuration.\n+CWPKI2046I.useraction=No action is required.\n+\n+# {1} is a time stamp.\n+CWPKI2047W=CWPKI2047W: The certificate authority signed certificate with {0} serial number expired on {1}. The ACME service is not configured to automatically request a new certificate.\n+CWPKI2047W.explanation=The certificate is expired and TLS/SSL requests will fail.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98f66dd7094bef8a3f903587dd54e25aa74636a3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyMjUyNA==", "bodyText": "Change,\n\"The refreshBeforeExpiration property is set for {0} days which is longer than the duration of the certificate with {1} serial number. The duration of the certificate is {2} days. The refreshBeforeExpiration property is set to the default of {1} days.\"\nto,\n\"The refreshBeforeExpiration property is set for {0} days, which is longer than the duration of the certificate with {1} serial number. The duration of the certificate is {2} days. The refreshBeforeExpiration property is set to the default of {1} days.\"", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r407522524", "createdAt": "2020-04-13T14:58:44Z", "author": {"login": "ManasiGandhi"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -201,3 +201,21 @@ CWPKI2043E.useraction=Ensure the the domain included in the value is a valid RDN\n CWPKI2044E=CWPKI2044E: The certificate is not an X.509 certificate. The certificate type is {0}.\n CWPKI2044E.explanation=The ACME service expects all certificates in the certificate chain to be X.509 certificates.\n CWPKI2044E.useraction=Ensure that all the certificates in the certificate chain are X.509 certificates and try again.\n+\n+# {1} is a time stamp.\n+CWPKI2046I=CWPKI2046I: The certificate authority signed certificate with {0} serial number expires on {1}. The ACME service will request a new certificate from the ACME certificate authority at the {2} URI.\n+CWPKI2046I.explanation=The ACME services starts requesting a new certificate based on the refreshBeforeExpiration property in the server configuration.\n+CWPKI2046I.useraction=No action is required.\n+\n+# {1} is a time stamp.\n+CWPKI2047W=CWPKI2047W: The certificate authority signed certificate with {0} serial number expired on {1}. The ACME service is not configured to automatically request a new certificate.\n+CWPKI2047W.explanation=The certificate is expired and TLS/SSL requests will fail.\n+CWPKI2047W.useraction=Use the ACME REST interface to request a new certificate. Or update the refreshBeforeExpiration property in the server configuration to a value greater than 1 day.\n+\n+CWPKI2048W=CWPKI2048W: The refreshBeforeExpiration property is set for {0} days which is longer than the duration of the certificate with {1} serial number. The duration of the certificate is {2} days. The refreshBeforeExpiration property is set to the default of {1} days.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98f66dd7094bef8a3f903587dd54e25aa74636a3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyNDM4MA==", "bodyText": "Change,\n\"The refresh time to request a new certificate is longer than the lifetime of the certificate. The refresh time is reset to the default.\"\nto,\n\"The refresh time for a new certificate request is longer than the lifetime of the certificate. The refresh time is reset to the default.\"", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r407524380", "createdAt": "2020-04-13T15:02:17Z", "author": {"login": "ManasiGandhi"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -201,3 +201,21 @@ CWPKI2043E.useraction=Ensure the the domain included in the value is a valid RDN\n CWPKI2044E=CWPKI2044E: The certificate is not an X.509 certificate. The certificate type is {0}.\n CWPKI2044E.explanation=The ACME service expects all certificates in the certificate chain to be X.509 certificates.\n CWPKI2044E.useraction=Ensure that all the certificates in the certificate chain are X.509 certificates and try again.\n+\n+# {1} is a time stamp.\n+CWPKI2046I=CWPKI2046I: The certificate authority signed certificate with {0} serial number expires on {1}. The ACME service will request a new certificate from the ACME certificate authority at the {2} URI.\n+CWPKI2046I.explanation=The ACME services starts requesting a new certificate based on the refreshBeforeExpiration property in the server configuration.\n+CWPKI2046I.useraction=No action is required.\n+\n+# {1} is a time stamp.\n+CWPKI2047W=CWPKI2047W: The certificate authority signed certificate with {0} serial number expired on {1}. The ACME service is not configured to automatically request a new certificate.\n+CWPKI2047W.explanation=The certificate is expired and TLS/SSL requests will fail.\n+CWPKI2047W.useraction=Use the ACME REST interface to request a new certificate. Or update the refreshBeforeExpiration property in the server configuration to a value greater than 1 day.\n+\n+CWPKI2048W=CWPKI2048W: The refreshBeforeExpiration property is set for {0} days which is longer than the duration of the certificate with {1} serial number. The duration of the certificate is {2} days. The refreshBeforeExpiration property is set to the default of {1} days.\n+CWPKI2048W.explanation=The refresh time to request a new certificate is longer than the lifetime of the certificate. The refresh time is reset to the default.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98f66dd7094bef8a3f903587dd54e25aa74636a3"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyNjIzMw==", "bodyText": "Change,\n\"Set the refreshBeforeExpiration property in the server configuration to an amount of time less than the duration of the certificate. Or remove the refreshBeforeExpiration property to use the default setting.\"\nto,\n\"Set the refreshBeforeExpiration property in the server configuration to a duration that is less than the duration of the certificate. Or remove the refreshBeforeExpiration property to use the default setting.\"", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r407526233", "createdAt": "2020-04-13T15:05:38Z", "author": {"login": "ManasiGandhi"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -201,3 +201,21 @@ CWPKI2043E.useraction=Ensure the the domain included in the value is a valid RDN\n CWPKI2044E=CWPKI2044E: The certificate is not an X.509 certificate. The certificate type is {0}.\n CWPKI2044E.explanation=The ACME service expects all certificates in the certificate chain to be X.509 certificates.\n CWPKI2044E.useraction=Ensure that all the certificates in the certificate chain are X.509 certificates and try again.\n+\n+# {1} is a time stamp.\n+CWPKI2046I=CWPKI2046I: The certificate authority signed certificate with {0} serial number expires on {1}. The ACME service will request a new certificate from the ACME certificate authority at the {2} URI.\n+CWPKI2046I.explanation=The ACME services starts requesting a new certificate based on the refreshBeforeExpiration property in the server configuration.\n+CWPKI2046I.useraction=No action is required.\n+\n+# {1} is a time stamp.\n+CWPKI2047W=CWPKI2047W: The certificate authority signed certificate with {0} serial number expired on {1}. The ACME service is not configured to automatically request a new certificate.\n+CWPKI2047W.explanation=The certificate is expired and TLS/SSL requests will fail.\n+CWPKI2047W.useraction=Use the ACME REST interface to request a new certificate. Or update the refreshBeforeExpiration property in the server configuration to a value greater than 1 day.\n+\n+CWPKI2048W=CWPKI2048W: The refreshBeforeExpiration property is set for {0} days which is longer than the duration of the certificate with {1} serial number. The duration of the certificate is {2} days. The refreshBeforeExpiration property is set to the default of {1} days.\n+CWPKI2048W.explanation=The refresh time to request a new certificate is longer than the lifetime of the certificate. The refresh time is reset to the default.\n+CWPKI2048W.useraction=Set the refreshBeforeExpiration property in the server configuration to an amount of time less than the duration of the certificate. Or remove the refreshBeforeExpiration property to use the default setting.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98f66dd7094bef8a3f903587dd54e25aa74636a3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyODc2Mw==", "bodyText": "Change,\n\"The refreshBeforeExpiration property is set for {0} milliseconds which is too low. The refreshBeforeExpiration property is set to a minimum of {1}.\"\nto,\n\"The refreshBeforeExpiration property is set for {0} milliseconds which lower than the minimum of {1}.\"", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r407528763", "createdAt": "2020-04-13T15:10:18Z", "author": {"login": "ManasiGandhi"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -201,3 +201,21 @@ CWPKI2043E.useraction=Ensure the the domain included in the value is a valid RDN\n CWPKI2044E=CWPKI2044E: The certificate is not an X.509 certificate. The certificate type is {0}.\n CWPKI2044E.explanation=The ACME service expects all certificates in the certificate chain to be X.509 certificates.\n CWPKI2044E.useraction=Ensure that all the certificates in the certificate chain are X.509 certificates and try again.\n+\n+# {1} is a time stamp.\n+CWPKI2046I=CWPKI2046I: The certificate authority signed certificate with {0} serial number expires on {1}. The ACME service will request a new certificate from the ACME certificate authority at the {2} URI.\n+CWPKI2046I.explanation=The ACME services starts requesting a new certificate based on the refreshBeforeExpiration property in the server configuration.\n+CWPKI2046I.useraction=No action is required.\n+\n+# {1} is a time stamp.\n+CWPKI2047W=CWPKI2047W: The certificate authority signed certificate with {0} serial number expired on {1}. The ACME service is not configured to automatically request a new certificate.\n+CWPKI2047W.explanation=The certificate is expired and TLS/SSL requests will fail.\n+CWPKI2047W.useraction=Use the ACME REST interface to request a new certificate. Or update the refreshBeforeExpiration property in the server configuration to a value greater than 1 day.\n+\n+CWPKI2048W=CWPKI2048W: The refreshBeforeExpiration property is set for {0} days which is longer than the duration of the certificate with {1} serial number. The duration of the certificate is {2} days. The refreshBeforeExpiration property is set to the default of {1} days.\n+CWPKI2048W.explanation=The refresh time to request a new certificate is longer than the lifetime of the certificate. The refresh time is reset to the default.\n+CWPKI2048W.useraction=Set the refreshBeforeExpiration property in the server configuration to an amount of time less than the duration of the certificate. Or remove the refreshBeforeExpiration property to use the default setting.\n+\n+CWPKI2049W=CWPKI2049W: The refreshBeforeExpiration property is set for {0} milliseconds which is too low. The refreshBeforeExpiration property is set to a minimum of {1}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98f66dd7094bef8a3f903587dd54e25aa74636a3"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUzMDkzMw==", "bodyText": "Change,\n\"Set the refreshBeforeExpiration property in the server configuration to an amount of time greater than the minimum time. Or remove the refreshBeforeExpiration property to use the default setting.\"\nto,\n\"Set the refreshBeforeExpiration property in the server configuration to a duration that is more than the minimum time. Or remove the refreshBeforeExpiration property to use the default setting.\"", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r407530933", "createdAt": "2020-04-13T15:14:17Z", "author": {"login": "ManasiGandhi"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -201,3 +201,21 @@ CWPKI2043E.useraction=Ensure the the domain included in the value is a valid RDN\n CWPKI2044E=CWPKI2044E: The certificate is not an X.509 certificate. The certificate type is {0}.\n CWPKI2044E.explanation=The ACME service expects all certificates in the certificate chain to be X.509 certificates.\n CWPKI2044E.useraction=Ensure that all the certificates in the certificate chain are X.509 certificates and try again.\n+\n+# {1} is a time stamp.\n+CWPKI2046I=CWPKI2046I: The certificate authority signed certificate with {0} serial number expires on {1}. The ACME service will request a new certificate from the ACME certificate authority at the {2} URI.\n+CWPKI2046I.explanation=The ACME services starts requesting a new certificate based on the refreshBeforeExpiration property in the server configuration.\n+CWPKI2046I.useraction=No action is required.\n+\n+# {1} is a time stamp.\n+CWPKI2047W=CWPKI2047W: The certificate authority signed certificate with {0} serial number expired on {1}. The ACME service is not configured to automatically request a new certificate.\n+CWPKI2047W.explanation=The certificate is expired and TLS/SSL requests will fail.\n+CWPKI2047W.useraction=Use the ACME REST interface to request a new certificate. Or update the refreshBeforeExpiration property in the server configuration to a value greater than 1 day.\n+\n+CWPKI2048W=CWPKI2048W: The refreshBeforeExpiration property is set for {0} days which is longer than the duration of the certificate with {1} serial number. The duration of the certificate is {2} days. The refreshBeforeExpiration property is set to the default of {1} days.\n+CWPKI2048W.explanation=The refresh time to request a new certificate is longer than the lifetime of the certificate. The refresh time is reset to the default.\n+CWPKI2048W.useraction=Set the refreshBeforeExpiration property in the server configuration to an amount of time less than the duration of the certificate. Or remove the refreshBeforeExpiration property to use the default setting.\n+\n+CWPKI2049W=CWPKI2049W: The refreshBeforeExpiration property is set for {0} milliseconds which is too low. The refreshBeforeExpiration property is set to a minimum of {1}.\n+CWPKI2049W.explanation=The refresh time is set lower than the minimum time to request a new certificate before the expiration date. \n+CWPKI2049W.useraction=Set the refreshBeforeExpiration property in the server configuration to an amount of time greater than the minimum time. Or remove the refreshBeforeExpiration property to use the default setting.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98f66dd7094bef8a3f903587dd54e25aa74636a3"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "98f66dd7094bef8a3f903587dd54e25aa74636a3", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/98f66dd7094bef8a3f903587dd54e25aa74636a3", "committedDate": "2020-04-10T22:12:30Z", "message": "Issue 11185: Add renewal request time configuration"}, "afterCommit": {"oid": "6004822d22e0617238d44f414aaa89525be61e6c", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/6004822d22e0617238d44f414aaa89525be61e6c", "committedDate": "2020-04-15T22:06:18Z", "message": "Issue 11185: Add renewal request time configuration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6004822d22e0617238d44f414aaa89525be61e6c", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/6004822d22e0617238d44f414aaa89525be61e6c", "committedDate": "2020-04-15T22:06:18Z", "message": "Issue 11185: Add renewal request time configuration"}, "afterCommit": {"oid": "4739522bbca3d0211ef5e538284ef62f1b2fe5da", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/4739522bbca3d0211ef5e538284ef62f1b2fe5da", "committedDate": "2020-04-17T19:26:50Z", "message": "Issue 11185: Add renewal request time configuration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4739522bbca3d0211ef5e538284ef62f1b2fe5da", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/4739522bbca3d0211ef5e538284ef62f1b2fe5da", "committedDate": "2020-04-17T19:26:50Z", "message": "Issue 11185: Add renewal request time configuration"}, "afterCommit": {"oid": "cf05591459dbaf8ea48a2935e291e1f22eb1088d", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/cf05591459dbaf8ea48a2935e291e1f22eb1088d", "committedDate": "2020-04-23T22:51:13Z", "message": "Issue 11185: Add renewal request time configuration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMTU5MTQ5", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#pullrequestreview-401159149", "createdAt": "2020-04-27T17:14:09Z", "commit": {"oid": "cf05591459dbaf8ea48a2935e291e1f22eb1088d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzoxNDowOVrOGMubhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzoxNDowOVrOGMubhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk5NjgwNA==", "bodyText": "Typo: change successfull to successful (remove l)", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r415996804", "createdAt": "2020-04-27T17:14:09Z", "author": {"login": "helyarp"}, "path": "dev/com.ibm.ws.security.acme/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -63,3 +63,6 @@ trustStorePassword.desc=The password that is used to load the truststore file. T\n \n trustStoreType=Truststore type\n trustStoreType.desc=The keystore type for the truststore. Supported types are JKS, PKCS12 and JCEKS.\n+\n+renewBeforeExpiration=Renew time before expiration\n+renewBeforeExpiration.desc=The amount of time before the expiration date of the certificate to start requesting a new certificate. The new certificate renew request continues until a new certificate request is successfull. For example, if 7 days is configured, the ACME service starts requesting a new certificate 7 days before the expiration date of the current certificate.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf05591459dbaf8ea48a2935e291e1f22eb1088d"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf05591459dbaf8ea48a2935e291e1f22eb1088d", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/cf05591459dbaf8ea48a2935e291e1f22eb1088d", "committedDate": "2020-04-23T22:51:13Z", "message": "Issue 11185: Add renewal request time configuration"}, "afterCommit": {"oid": "361a7bfd595ec373ccbffdc5bf7615befa95ebe6", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/361a7bfd595ec373ccbffdc5bf7615befa95ebe6", "committedDate": "2020-04-27T21:45:54Z", "message": "Issue 11185: Add renewal request time configuration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "361a7bfd595ec373ccbffdc5bf7615befa95ebe6", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/361a7bfd595ec373ccbffdc5bf7615befa95ebe6", "committedDate": "2020-04-27T21:45:54Z", "message": "Issue 11185: Add renewal request time configuration"}, "afterCommit": {"oid": "0b9f1f8d0a9cbd29b41f6c839d05054078270946", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/0b9f1f8d0a9cbd29b41f6c839d05054078270946", "committedDate": "2020-04-27T22:44:44Z", "message": "Issue 11185: Add renewal request time configuration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0b9f1f8d0a9cbd29b41f6c839d05054078270946", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/0b9f1f8d0a9cbd29b41f6c839d05054078270946", "committedDate": "2020-04-27T22:44:44Z", "message": "Issue 11185: Add renewal request time configuration"}, "afterCommit": {"oid": "069f1b62777cb38ab19c1e6caf024c302fcaafad", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/069f1b62777cb38ab19c1e6caf024c302fcaafad", "committedDate": "2020-04-28T18:35:25Z", "message": "Issue 11185: Add renewal request time configuration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "069f1b62777cb38ab19c1e6caf024c302fcaafad", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/069f1b62777cb38ab19c1e6caf024c302fcaafad", "committedDate": "2020-04-28T18:35:25Z", "message": "Issue 11185: Add renewal request time configuration"}, "afterCommit": {"oid": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6", "committedDate": "2020-04-28T18:39:38Z", "message": "Issue 11185: Add renewal request time configuration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyOTcyMzk2", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#pullrequestreview-402972396", "createdAt": "2020-04-29T19:28:24Z", "commit": {"oid": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxOToyODoyNVrOGONuuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxOTo1MzowNVrOGOOkFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU1ODIwMA==", "bodyText": "Didn't we say that <= 0 we would disable renewal? Or was I thinking of something else?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417558200", "createdAt": "2020-04-29T19:28:25Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -63,3 +63,6 @@ trustStorePassword.desc=The password that is used to load the truststore file. T\n \n trustStoreType=Truststore type\n trustStoreType.desc=The keystore type for the truststore. Supported types are JKS, PKCS12 and JCEKS.\n+\n+renewBeforeExpiration=Renew time before expiration\n+renewBeforeExpiration.desc=The amount of time before the expiration date of the certificate to request a new certificate. The certificate renew request continues until a new certificate is received. For example, if the renewBeforeExpiration property is set to seven days, the ACME service requests a new certificate seven days before the expiration date of the current certificate.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU1OTI0MQ==", "bodyText": "Ok. here it is. Probably should document in metatype.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417559241", "createdAt": "2020-04-29T19:30:18Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeConfig.java", "diffHunk": "@@ -438,6 +447,73 @@ private void processSubjectDN(String subjectDN) throws AcmeCaException {\n \t\t\t}\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * Set the amount of time before certificate expiration to renew the certificate\n+\t * \n+\t * @param retries\n+\t *            The number of time to try to update a challenge.\n+\t */\n+\t@Trivial\n+\tprivate void setRenewBeforeExpirationMs(Long ms) {\n+\t\tautoRenew = true;\n+\t\tif (ms != null) {\n+\t\t\tif (ms <= 0) { // disable auto renew", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU2MjAwMQ==", "bodyText": "Also, this really is the time before the expiration date of the certificate where acme will make the first attempt to request a new certificate from the ACME CA server. If it fails, we will continue to try and request a new one every X amount of time until we are able to get a new certificate.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417562001", "createdAt": "2020-04-29T19:35:23Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -63,3 +63,6 @@ trustStorePassword.desc=The password that is used to load the truststore file. T\n \n trustStoreType=Truststore type\n trustStoreType.desc=The keystore type for the truststore. Supported types are JKS, PKCS12 and JCEKS.\n+\n+renewBeforeExpiration=Renew time before expiration\n+renewBeforeExpiration.desc=The amount of time before the expiration date of the certificate to request a new certificate. The certificate renew request continues until a new certificate is received. For example, if the renewBeforeExpiration property is set to seven days, the ACME service requests a new certificate seven days before the expiration date of the current certificate.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU1ODIwMA=="}, "originalCommit": {"oid": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU2MzgxOQ==", "bodyText": "Good catch here. But I am wondering if we shouldn't check the whole certificate chain? What happens when the intermediate or root ca cert expires before our leaf cert?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417563819", "createdAt": "2020-04-29T19:38:48Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java", "diffHunk": "@@ -515,12 +530,12 @@ private boolean hasWrongSubjectRDNs(List<X509Certificate> certificateChain) thro\n \t */\n \tprivate boolean isExpired(List<X509Certificate> certificateChain) {\n \t\tX509Certificate certificate = getLeafCertificate(certificateChain);\n-\t\tif (certificateChain == null) {\n+\t\tif (certificate == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU2NDc1Mw==", "bodyText": "(FYI - we can consider that in another issue, since we probably have other areas we need to consider this in)", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417564753", "createdAt": "2020-04-29T19:40:31Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeProviderImpl.java", "diffHunk": "@@ -515,12 +530,12 @@ private boolean hasWrongSubjectRDNs(List<X509Certificate> certificateChain) thro\n \t */\n \tprivate boolean isExpired(List<X509Certificate> certificateChain) {\n \t\tX509Certificate certificate = getLeafCertificate(certificateChain);\n-\t\tif (certificateChain == null) {\n+\t\tif (certificate == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU2MzgxOQ=="}, "originalCommit": {"oid": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU2NTg4Mw==", "bodyText": "Javadoc.\nThe autoRenew being turned on or off.. does this only govern expiration? I assume so, but it isn't clear by the name of this method.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417565883", "createdAt": "2020-04-29T19:42:36Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeConfig.java", "diffHunk": "@@ -506,6 +582,17 @@ private void setValidFor(Long validForMs) {\n \t\t\tthis.validForMs = validForMs;\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * @return the renewBeforeExpirationMs\n+\t */\n+\tpublic Long getRenewBeforeExpirationMs() {\n+\t\treturn renewBeforeExpirationMs;\n+\t}\n+\t\n+\tpublic boolean isAutoRenew() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU2ODY2Mg==", "bodyText": "Why is this needed?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417568662", "createdAt": "2020-04-29T19:47:28Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.internal.util.AcmeConstants;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Verify that we log the correct warnings for different\n+ * validity/renewBeforeExpiration settings\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class AcmeValidityAndRenewTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprivate static ServerConfiguration ORIGINAL_CONFIG;\n+\tprivate static final String[] DOMAINS1 = { \"domain1.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\t\n+\tpublic static final long timeBufferToExpire = 30000L; // milliseconds\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\ttry {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t} catch (Exception e) {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU2OTQyNg==", "bodyText": "These don't appear to be used.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417569426", "createdAt": "2020-04-29T19:48:47Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.internal.util.AcmeConstants;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Verify that we log the correct warnings for different\n+ * validity/renewBeforeExpiration settings\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class AcmeValidityAndRenewTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprivate static ServerConfiguration ORIGINAL_CONFIG;\n+\tprivate static final String[] DOMAINS1 = { \"domain1.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\t\n+\tpublic static final long timeBufferToExpire = 30000L; // milliseconds\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\ttry {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t} catch (Exception e) {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t}\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() {\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should be\n+\t * used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * This test will verify that the server starts up and requests a new\n+\t * certificate from the ACME server when required.\n+\t * \n+\t * @throws Exception If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowMinRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowMinRenew\";\n+\t\tCertificate[] startingCertificateChain = null, endingCertificateChain = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU2OTg4OA==", "bodyText": "This description seems outdated.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417569888", "createdAt": "2020-04-29T19:49:37Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.internal.util.AcmeConstants;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Verify that we log the correct warnings for different\n+ * validity/renewBeforeExpiration settings\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class AcmeValidityAndRenewTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprivate static ServerConfiguration ORIGINAL_CONFIG;\n+\tprivate static final String[] DOMAINS1 = { \"domain1.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\t\n+\tpublic static final long timeBufferToExpire = 30000L; // milliseconds\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\ttry {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t} catch (Exception e) {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t}\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() {\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should be\n+\t * used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * This test will verify that the server starts up and requests a new\n+\t * certificate from the ACME server when required.\n+\t * \n+\t * @throws Exception If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowMinRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowMinRenew\";\n+\t\tCertificate[] startingCertificateChain = null, endingCertificateChain = null;\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(AcmeConstants.RENEW_CERT_MIN - 1000 + \"ms\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST 1: The server will start up without the specified keystore available. It", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3MDEwNQ==", "bodyText": "Outdated description.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417570105", "createdAt": "2020-04-29T19:49:57Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.internal.util.AcmeConstants;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Verify that we log the correct warnings for different\n+ * validity/renewBeforeExpiration settings\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class AcmeValidityAndRenewTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprivate static ServerConfiguration ORIGINAL_CONFIG;\n+\tprivate static final String[] DOMAINS1 = { \"domain1.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\t\n+\tpublic static final long timeBufferToExpire = 30000L; // milliseconds\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\ttry {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t} catch (Exception e) {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t}\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() {\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should be\n+\t * used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * This test will verify that the server starts up and requests a new", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3MDUxMA==", "bodyText": "probably don't care about this in this test, but i guess it doesn't hurt.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417570510", "createdAt": "2020-04-29T19:50:41Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.internal.util.AcmeConstants;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Verify that we log the correct warnings for different\n+ * validity/renewBeforeExpiration settings\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class AcmeValidityAndRenewTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprivate static ServerConfiguration ORIGINAL_CONFIG;\n+\tprivate static final String[] DOMAINS1 = { \"domain1.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\t\n+\tpublic static final long timeBufferToExpire = 30000L; // milliseconds\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\ttry {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t} catch (Exception e) {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t}\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() {\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should be\n+\t * used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * This test will verify that the server starts up and requests a new\n+\t * certificate from the ACME server when required.\n+\t * \n+\t * @throws Exception If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowMinRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowMinRenew\";\n+\t\tCertificate[] startingCertificateChain = null, endingCertificateChain = null;\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(AcmeConstants.RENEW_CERT_MIN - 1000 + \"ms\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST 1: The server will start up without the specified keystore available. It\n+\t\t * should generate a new keystore with a certificate retrieved from the ACME CA\n+\t\t * server.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST renew is set to below the minimum renew time.\");\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the CA.\n+\t\t\t */\n+\t\t\tendingCertificateChain = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3MDY4MQ==", "bodyText": "javadoc", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417570681", "createdAt": "2020-04-29T19:50:56Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.internal.util.AcmeConstants;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Verify that we log the correct warnings for different\n+ * validity/renewBeforeExpiration settings\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class AcmeValidityAndRenewTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprivate static ServerConfiguration ORIGINAL_CONFIG;\n+\tprivate static final String[] DOMAINS1 = { \"domain1.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\t\n+\tpublic static final long timeBufferToExpire = 30000L; // milliseconds\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\ttry {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t} catch (Exception e) {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t}\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() {\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should be\n+\t * used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * This test will verify that the server starts up and requests a new\n+\t * certificate from the ACME server when required.\n+\t * \n+\t * @throws Exception If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowMinRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowMinRenew\";\n+\t\tCertificate[] startingCertificateChain = null, endingCertificateChain = null;\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(AcmeConstants.RENEW_CERT_MIN - 1000 + \"ms\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST 1: The server will start up without the specified keystore available. It\n+\t\t * should generate a new keystore with a certificate retrieved from the ACME CA\n+\t\t * server.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST renew is set to below the minimum renew time.\");\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the CA.\n+\t\t\t */\n+\t\t\tendingCertificateChain = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tassertNotNull(\"Should log warning on minimum renewBeforeExpiration\", server.waitForStringInLog(\"CWPKI2051W\"));\n+\n+\t\t} finally {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST 1: Shutdown.\");\n+\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2051W\");\n+\t\t}\n+\t}\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowWarnRenew() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3MDg2NQ==", "bodyText": "Outdated description", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417570865", "createdAt": "2020-04-29T19:51:16Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.internal.util.AcmeConstants;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Verify that we log the correct warnings for different\n+ * validity/renewBeforeExpiration settings\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class AcmeValidityAndRenewTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprivate static ServerConfiguration ORIGINAL_CONFIG;\n+\tprivate static final String[] DOMAINS1 = { \"domain1.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\t\n+\tpublic static final long timeBufferToExpire = 30000L; // milliseconds\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\ttry {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t} catch (Exception e) {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t}\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() {\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should be\n+\t * used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * This test will verify that the server starts up and requests a new\n+\t * certificate from the ACME server when required.\n+\t * \n+\t * @throws Exception If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowMinRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowMinRenew\";\n+\t\tCertificate[] startingCertificateChain = null, endingCertificateChain = null;\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(AcmeConstants.RENEW_CERT_MIN - 1000 + \"ms\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST 1: The server will start up without the specified keystore available. It\n+\t\t * should generate a new keystore with a certificate retrieved from the ACME CA\n+\t\t * server.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST renew is set to below the minimum renew time.\");\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the CA.\n+\t\t\t */\n+\t\t\tendingCertificateChain = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tassertNotNull(\"Should log warning on minimum renewBeforeExpiration\", server.waitForStringInLog(\"CWPKI2051W\"));\n+\n+\t\t} finally {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST 1: Shutdown.\");\n+\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2051W\");\n+\t\t}\n+\t}\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowWarnRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowWarnRenew\";\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(AcmeConstants.RENEW_CERT_MIN_WARN_LEVEL -1000 + \"ms\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3MTEwNw==", "bodyText": "javadoc / test description", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417571107", "createdAt": "2020-04-29T19:51:41Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.internal.util.AcmeConstants;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Verify that we log the correct warnings for different\n+ * validity/renewBeforeExpiration settings\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class AcmeValidityAndRenewTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprivate static ServerConfiguration ORIGINAL_CONFIG;\n+\tprivate static final String[] DOMAINS1 = { \"domain1.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\t\n+\tpublic static final long timeBufferToExpire = 30000L; // milliseconds\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\ttry {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t} catch (Exception e) {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t}\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() {\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should be\n+\t * used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * This test will verify that the server starts up and requests a new\n+\t * certificate from the ACME server when required.\n+\t * \n+\t * @throws Exception If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowMinRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowMinRenew\";\n+\t\tCertificate[] startingCertificateChain = null, endingCertificateChain = null;\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(AcmeConstants.RENEW_CERT_MIN - 1000 + \"ms\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST 1: The server will start up without the specified keystore available. It\n+\t\t * should generate a new keystore with a certificate retrieved from the ACME CA\n+\t\t * server.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST renew is set to below the minimum renew time.\");\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the CA.\n+\t\t\t */\n+\t\t\tendingCertificateChain = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tassertNotNull(\"Should log warning on minimum renewBeforeExpiration\", server.waitForStringInLog(\"CWPKI2051W\"));\n+\n+\t\t} finally {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST 1: Shutdown.\");\n+\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2051W\");\n+\t\t}\n+\t}\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowWarnRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowWarnRenew\";\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(AcmeConstants.RENEW_CERT_MIN_WARN_LEVEL -1000 + \"ms\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST The server will start up with the ACME certificate generated in the\n+\t\t * first test. A new certificate should be fetched as the previous one should be\n+\t\t * expired.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST renew is set to below the minimum renew warning time.\");\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for acme to determine the certificate was good.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeAppToStart(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is using a certificate signed by the CA.\n+\t\t\t */\n+\t\t\tAcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tassertNotNull(\"Should log warning on renewBeforeExpiration being too short\", server.waitForStringInLog(\"CWPKI2049W\"));\n+\n+\t\t} finally {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST 2: Shutdown.\");\n+\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2049W\");\n+\t\t}\n+\t\t\n+\t}\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverRenewLongerThanValidity() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3MTQ2Nw==", "bodyText": "outdated description", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417571467", "createdAt": "2020-04-29T19:52:21Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.internal.util.AcmeConstants;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Verify that we log the correct warnings for different\n+ * validity/renewBeforeExpiration settings\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class AcmeValidityAndRenewTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprivate static ServerConfiguration ORIGINAL_CONFIG;\n+\tprivate static final String[] DOMAINS1 = { \"domain1.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\t\n+\tpublic static final long timeBufferToExpire = 30000L; // milliseconds\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\ttry {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t} catch (Exception e) {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t}\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() {\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should be\n+\t * used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * This test will verify that the server starts up and requests a new\n+\t * certificate from the ACME server when required.\n+\t * \n+\t * @throws Exception If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowMinRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowMinRenew\";\n+\t\tCertificate[] startingCertificateChain = null, endingCertificateChain = null;\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(AcmeConstants.RENEW_CERT_MIN - 1000 + \"ms\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST 1: The server will start up without the specified keystore available. It\n+\t\t * should generate a new keystore with a certificate retrieved from the ACME CA\n+\t\t * server.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST renew is set to below the minimum renew time.\");\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the CA.\n+\t\t\t */\n+\t\t\tendingCertificateChain = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tassertNotNull(\"Should log warning on minimum renewBeforeExpiration\", server.waitForStringInLog(\"CWPKI2051W\"));\n+\n+\t\t} finally {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST 1: Shutdown.\");\n+\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2051W\");\n+\t\t}\n+\t}\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowWarnRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowWarnRenew\";\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(AcmeConstants.RENEW_CERT_MIN_WARN_LEVEL -1000 + \"ms\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST The server will start up with the ACME certificate generated in the\n+\t\t * first test. A new certificate should be fetched as the previous one should be\n+\t\t * expired.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST renew is set to below the minimum renew warning time.\");\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for acme to determine the certificate was good.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeAppToStart(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is using a certificate signed by the CA.\n+\t\t\t */\n+\t\t\tAcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tassertNotNull(\"Should log warning on renewBeforeExpiration being too short\", server.waitForStringInLog(\"CWPKI2049W\"));\n+\n+\t\t} finally {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST 2: Shutdown.\");\n+\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2049W\");\n+\t\t}\n+\t\t\n+\t}\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverRenewLongerThanValidity() throws Exception {\n+\t\tfinal String methodName = \"serverRenewLongerThanValidity\";\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(365 * 5 + 1 +\"d\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST The server will start up with the ACME certificate generated in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3MTc1Nw==", "bodyText": "javadoc / test description.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417571757", "createdAt": "2020-04-29T19:52:54Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.internal.util.AcmeConstants;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Verify that we log the correct warnings for different\n+ * validity/renewBeforeExpiration settings\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class AcmeValidityAndRenewTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprivate static ServerConfiguration ORIGINAL_CONFIG;\n+\tprivate static final String[] DOMAINS1 = { \"domain1.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\t\n+\tpublic static final long timeBufferToExpire = 30000L; // milliseconds\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\ttry {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t} catch (Exception e) {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t}\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() {\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should be\n+\t * used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * This test will verify that the server starts up and requests a new\n+\t * certificate from the ACME server when required.\n+\t * \n+\t * @throws Exception If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowMinRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowMinRenew\";\n+\t\tCertificate[] startingCertificateChain = null, endingCertificateChain = null;\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(AcmeConstants.RENEW_CERT_MIN - 1000 + \"ms\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST 1: The server will start up without the specified keystore available. It\n+\t\t * should generate a new keystore with a certificate retrieved from the ACME CA\n+\t\t * server.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST renew is set to below the minimum renew time.\");\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the CA.\n+\t\t\t */\n+\t\t\tendingCertificateChain = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tassertNotNull(\"Should log warning on minimum renewBeforeExpiration\", server.waitForStringInLog(\"CWPKI2051W\"));\n+\n+\t\t} finally {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST 1: Shutdown.\");\n+\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2051W\");\n+\t\t}\n+\t}\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowWarnRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowWarnRenew\";\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(AcmeConstants.RENEW_CERT_MIN_WARN_LEVEL -1000 + \"ms\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST The server will start up with the ACME certificate generated in the\n+\t\t * first test. A new certificate should be fetched as the previous one should be\n+\t\t * expired.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST renew is set to below the minimum renew warning time.\");\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for acme to determine the certificate was good.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeAppToStart(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is using a certificate signed by the CA.\n+\t\t\t */\n+\t\t\tAcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tassertNotNull(\"Should log warning on renewBeforeExpiration being too short\", server.waitForStringInLog(\"CWPKI2049W\"));\n+\n+\t\t} finally {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST 2: Shutdown.\");\n+\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2049W\");\n+\t\t}\n+\t\t\n+\t}\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverRenewLongerThanValidity() throws Exception {\n+\t\tfinal String methodName = \"serverRenewLongerThanValidity\";\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(365 * 5 + 1 +\"d\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST The server will start up with the ACME certificate generated in the\n+\t\t * first test. A new certificate should be fetched as the previous one should be\n+\t\t * expired.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST renew is set longer than the certificate validity period.\");\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for acme to determine the certificate was good.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeAppToStart(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is using a certificate signed by the CA.\n+\t\t\t */\n+\t\t\tAcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tassertNotNull(\"Should log warning that renewBeforeExpiration is too long compared to the cert validity period\", server.waitForStringInLog(\"CWPKI2048W\"));\n+\n+\t\t} finally {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST Shutdown.\");\n+\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2048W\");\n+\t\t}\n+\n+\t}\n+\t\n+\t@Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3MTg2MQ==", "bodyText": "outdated", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417571861", "createdAt": "2020-04-29T19:53:05Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -0,0 +1,355 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.internal.util.AcmeConstants;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Verify that we log the correct warnings for different\n+ * validity/renewBeforeExpiration settings\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class AcmeValidityAndRenewTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprivate static ServerConfiguration ORIGINAL_CONFIG;\n+\tprivate static final String[] DOMAINS1 = { \"domain1.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\t\n+\tpublic static final long timeBufferToExpire = 30000L; // milliseconds\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\ttry {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t} catch (Exception e) {\n+\t\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\t}\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() {\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should be\n+\t * used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * This test will verify that the server starts up and requests a new\n+\t * certificate from the ACME server when required.\n+\t * \n+\t * @throws Exception If the test failed for some reason.\n+\t */\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowMinRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowMinRenew\";\n+\t\tCertificate[] startingCertificateChain = null, endingCertificateChain = null;\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(AcmeConstants.RENEW_CERT_MIN - 1000 + \"ms\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST 1: The server will start up without the specified keystore available. It\n+\t\t * should generate a new keystore with a certificate retrieved from the ACME CA\n+\t\t * server.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST renew is set to below the minimum renew time.\");\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for the certificate to be installed.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeToCreateCertificate(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is now using a certificate signed by the CA.\n+\t\t\t */\n+\t\t\tendingCertificateChain = AcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tassertNotNull(\"Should log warning on minimum renewBeforeExpiration\", server.waitForStringInLog(\"CWPKI2051W\"));\n+\n+\t\t} finally {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST 1: Shutdown.\");\n+\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2051W\");\n+\t\t}\n+\t}\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverBelowWarnRenew() throws Exception {\n+\t\tfinal String methodName = \"serverBelowWarnRenew\";\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(AcmeConstants.RENEW_CERT_MIN_WARN_LEVEL -1000 + \"ms\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST The server will start up with the ACME certificate generated in the\n+\t\t * first test. A new certificate should be fetched as the previous one should be\n+\t\t * expired.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST renew is set to below the minimum renew warning time.\");\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for acme to determine the certificate was good.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeAppToStart(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is using a certificate signed by the CA.\n+\t\t\t */\n+\t\t\tAcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tassertNotNull(\"Should log warning on renewBeforeExpiration being too short\", server.waitForStringInLog(\"CWPKI2049W\"));\n+\n+\t\t} finally {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST 2: Shutdown.\");\n+\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2049W\");\n+\t\t}\n+\t\t\n+\t}\n+\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverRenewLongerThanValidity() throws Exception {\n+\t\tfinal String methodName = \"serverRenewLongerThanValidity\";\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tconfiguration.getAcmeCA().setRenewBeforeExpiration(365 * 5 + 1 +\"d\");\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST The server will start up with the ACME certificate generated in the\n+\t\t * first test. A new certificate should be fetched as the previous one should be\n+\t\t * expired.\n+\t\t * \n+\t\t **********************************************************************/\n+\t\ttry {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST renew is set longer than the certificate validity period.\");\n+\n+\t\t\t/*\n+\t\t\t * Start the server and wait for acme to determine the certificate was good.\n+\t\t\t */\n+\t\t\tserver.startServer();\n+\t\t\tAcmeFatUtils.waitForAcmeAppToStart(server);\n+\t\t\tAcmeFatUtils.waitForSslEndpoint(server);\n+\n+\t\t\t/*\n+\t\t\t * Verify that the server is using a certificate signed by the CA.\n+\t\t\t */\n+\t\t\tAcmeFatUtils.assertAndGetServerCertificate(server, caContainer);\n+\n+\t\t\tassertNotNull(\"Should log warning that renewBeforeExpiration is too long compared to the cert validity period\", server.waitForStringInLog(\"CWPKI2048W\"));\n+\n+\t\t} finally {\n+\t\t\tLog.info(this.getClass(), methodName, \"TEST Shutdown.\");\n+\n+\t\t\t/*\n+\t\t\t * Stop the server.\n+\t\t\t */\n+\t\t\tserver.stopServer(\"CWPKI2048W\");\n+\t\t}\n+\n+\t}\n+\t\n+\t@Test\n+\t@CheckForLeakedPasswords(AcmeFatUtils.PEBBLE_TRUSTSTORE_PASSWORD)\n+\tpublic void serverRenewOnRestart() throws Exception {\n+\t\tfinal String methodName = \"serverRenewOnRestart\";\n+\t\tCertificate[] startingCertificateChain = null, endingCertificateChain = null;\n+\n+\t\t/*\n+\t\t * Configure the acmeCA-2.0 feature.\n+\t\t * \n+\t\t */\n+\n+\t\tServerConfiguration configuration = ORIGINAL_CONFIG.clone();\n+\t\tAcmeFatUtils.configureAcmeCA(server, caContainer, configuration, useAcmeURIs(), DOMAINS1);\n+\t\t\n+\t\tlong serverTime = System.currentTimeMillis();\n+\n+\t\t/***********************************************************************\n+\t\t * \n+\t\t * TEST The server will start up with the ACME certificate generated in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6"}, "originalPosition": 267}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/29213dd8b209c6adaed5cfb6e444ebb8ecfc93e6", "committedDate": "2020-04-28T18:39:38Z", "message": "Issue 11185: Add renewal request time configuration"}, "afterCommit": {"oid": "75b2bb79e35b8635be40abf224a87d171d98149c", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/75b2bb79e35b8635be40abf224a87d171d98149c", "committedDate": "2020-04-29T22:09:38Z", "message": "Issue 11185: Add renewal request time configuration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "75b2bb79e35b8635be40abf224a87d171d98149c", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/75b2bb79e35b8635be40abf224a87d171d98149c", "committedDate": "2020-04-29T22:09:38Z", "message": "Issue 11185: Add renewal request time configuration"}, "afterCommit": {"oid": "dc4499c7e27ae906afd13cd0bc37431cd2077311", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/dc4499c7e27ae906afd13cd0bc37431cd2077311", "committedDate": "2020-04-29T22:14:59Z", "message": "Issue 11185: Add renewal request time configuration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dc4499c7e27ae906afd13cd0bc37431cd2077311", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/dc4499c7e27ae906afd13cd0bc37431cd2077311", "committedDate": "2020-04-29T22:14:59Z", "message": "Issue 11185: Add renewal request time configuration"}, "afterCommit": {"oid": "40191687be135d881f3ff55137f4a58361665dce", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/40191687be135d881f3ff55137f4a58361665dce", "committedDate": "2020-04-29T22:45:52Z", "message": "Issue 11185: Add renewal request time configuration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNDkyMTgy", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#pullrequestreview-403492182", "createdAt": "2020-04-30T12:57:03Z", "commit": {"oid": "40191687be135d881f3ff55137f4a58361665dce"}, "state": "COMMENTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjo1NzowM1rOGOoAYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDowOTo0NFrOGOrExw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk4ODcwNw==", "bodyText": "Change\nSetting the renewBeforeExpiration property to zero or negative disables automatically renewing the certificate.\nto\nSetting the renewBeforeExpiration property to zero or a negative value disables automatic certificate renewal.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417988707", "createdAt": "2020-04-30T12:57:03Z", "author": {"login": "dmuelle"}, "path": "dev/com.ibm.ws.security.acme/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -63,3 +63,6 @@ trustStorePassword.desc=The password that is used to load the truststore file. T\n \n trustStoreType=Truststore type\n trustStoreType.desc=The keystore type for the truststore. Supported types are JKS, PKCS12 and JCEKS.\n+\n+renewBeforeExpiration=Renew time before expiration\n+renewBeforeExpiration.desc=The amount of time before the expiration date of the certificate to request a new certificate. If the first request fails, the certificate renew request continues until a new certificate is received. For example, if the renewBeforeExpiration property is set to seven days, the ACME service starts requesting a new certificate seven days before the expiration date of the current certificate. Setting the renewBeforeExpiration property to zero or negative disables automatically renewing the certificate.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40191687be135d881f3ff55137f4a58361665dce"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk4OTU4MQ==", "bodyText": "change\nThe renewBeforeExpiration property is set to {0} which is shorter than the minimum renew time. The renewBeforeExpiration property is reset to {1}.\nto\nThe renewBeforeExpiration property was set to {0}, which is shorter than the minimum renew time. The renewBeforeExpiration property is reset to {1}.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417989581", "createdAt": "2020-04-30T12:58:34Z", "author": {"login": "dmuelle"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -226,3 +225,28 @@ CWPKI2049E.useraction=Manually replace the account key pair files as directed in\n CWPKI2050E=CWPKI2050E: Failed to back up the existing account key pair file while refreshing the account key pair. The error is ''{0}''.\n CWPKI2050E.explanation=The existing account key pair file was not be backed up. \n CWPKI2050E.useraction=Ensure that the directory that contains the existing account key pair file is writable. Review the error message for details on the failure.\n+\n+CWPKI2051W=CWPKI2051W: The renewBeforeExpiration property is set to {0} which is shorter than the minimum renew time. The renewBeforeExpiration property is reset to {1}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40191687be135d881f3ff55137f4a58361665dce"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk5MTAwMA==", "bodyText": "does the property automatically reset to an acceptable value? the message seems to suggest this, but the explanation and user action indicate the user needs to reset the property. What is the significance then of the reset?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417991000", "createdAt": "2020-04-30T13:00:48Z", "author": {"login": "dmuelle"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -226,3 +225,28 @@ CWPKI2049E.useraction=Manually replace the account key pair files as directed in\n CWPKI2050E=CWPKI2050E: Failed to back up the existing account key pair file while refreshing the account key pair. The error is ''{0}''.\n CWPKI2050E.explanation=The existing account key pair file was not be backed up. \n CWPKI2050E.useraction=Ensure that the directory that contains the existing account key pair file is writable. Review the error message for details on the failure.\n+\n+CWPKI2051W=CWPKI2051W: The renewBeforeExpiration property is set to {0} which is shorter than the minimum renew time. The renewBeforeExpiration property is reset to {1}.\n+CWPKI2051W.explanation=The renewBeforeExpiration property is below the minimum duration to request a new certificate. This could have a negative impact on server performance. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40191687be135d881f3ff55137f4a58361665dce"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk5MjUxOQ==", "bodyText": "change\nSet the renewBeforeExpiration property in the server configuration to a duration that is more than the minimum time. Or remove the renewBeforeExpiration property to use the default setting.\nto\nSet the renewBeforeExpiration property in the server configuration to a duration that is longer than the specified minimum time. To use the default setting, remove the renewBeforeExpiration property from the server configuration.\nHow would a user know what the minimum time is?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417992519", "createdAt": "2020-04-30T13:03:16Z", "author": {"login": "dmuelle"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -226,3 +225,28 @@ CWPKI2049E.useraction=Manually replace the account key pair files as directed in\n CWPKI2050E=CWPKI2050E: Failed to back up the existing account key pair file while refreshing the account key pair. The error is ''{0}''.\n CWPKI2050E.explanation=The existing account key pair file was not be backed up. \n CWPKI2050E.useraction=Ensure that the directory that contains the existing account key pair file is writable. Review the error message for details on the failure.\n+\n+CWPKI2051W=CWPKI2051W: The renewBeforeExpiration property is set to {0} which is shorter than the minimum renew time. The renewBeforeExpiration property is reset to {1}.\n+CWPKI2051W.explanation=The renewBeforeExpiration property is below the minimum duration to request a new certificate. This could have a negative impact on server performance. \n+CWPKI2051W.useraction=Set the renewBeforeExpiration property in the server configuration to a duration that is more than the minimum time. Or remove the renewBeforeExpiration property to use the default setting.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40191687be135d881f3ff55137f4a58361665dce"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk5OTE3Mg==", "bodyText": "Is there any indication of when the service starts a new certificate request? The message text is unclear about the relationship between these two sentences. Could be-\nThe certificate with the {0} serial number expires on {1}. The ACME service requests a new certificate from the ACME certificate authority at the {2} URI. The ACME service starts requesting a new certificate at a time specified by the  renewBeforeExpiration property in the server configuration", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r417999172", "createdAt": "2020-04-30T13:13:59Z", "author": {"login": "dmuelle"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -226,3 +225,28 @@ CWPKI2049E.useraction=Manually replace the account key pair files as directed in\n CWPKI2050E=CWPKI2050E: Failed to back up the existing account key pair file while refreshing the account key pair. The error is ''{0}''.\n CWPKI2050E.explanation=The existing account key pair file was not be backed up. \n CWPKI2050E.useraction=Ensure that the directory that contains the existing account key pair file is writable. Review the error message for details on the failure.\n+\n+CWPKI2051W=CWPKI2051W: The renewBeforeExpiration property is set to {0} which is shorter than the minimum renew time. The renewBeforeExpiration property is reset to {1}.\n+CWPKI2051W.explanation=The renewBeforeExpiration property is below the minimum duration to request a new certificate. This could have a negative impact on server performance. \n+CWPKI2051W.useraction=Set the renewBeforeExpiration property in the server configuration to a duration that is more than the minimum time. Or remove the renewBeforeExpiration property to use the default setting.\n+\n+CWPKI2052I=CWPKI2052I: The certificate with {0} serial number expires on {1}. The ACME service starts a new certificate request from the ACME certificate authority at the {2} URI.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40191687be135d881f3ff55137f4a58361665dce"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAwMDMwOQ==", "bodyText": "then for the explanation:\nThe ACME service starts a new certificate based on the value of the renewBeforeExpiration property in the server configuration. If the renewBeforeExpiration property is not set, the default value is used.\nis a there any way for the user to know the default value? what determines it?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418000309", "createdAt": "2020-04-30T13:15:46Z", "author": {"login": "dmuelle"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -226,3 +225,28 @@ CWPKI2049E.useraction=Manually replace the account key pair files as directed in\n CWPKI2050E=CWPKI2050E: Failed to back up the existing account key pair file while refreshing the account key pair. The error is ''{0}''.\n CWPKI2050E.explanation=The existing account key pair file was not be backed up. \n CWPKI2050E.useraction=Ensure that the directory that contains the existing account key pair file is writable. Review the error message for details on the failure.\n+\n+CWPKI2051W=CWPKI2051W: The renewBeforeExpiration property is set to {0} which is shorter than the minimum renew time. The renewBeforeExpiration property is reset to {1}.\n+CWPKI2051W.explanation=The renewBeforeExpiration property is below the minimum duration to request a new certificate. This could have a negative impact on server performance. \n+CWPKI2051W.useraction=Set the renewBeforeExpiration property in the server configuration to a duration that is more than the minimum time. Or remove the renewBeforeExpiration property to use the default setting.\n+\n+CWPKI2052I=CWPKI2052I: The certificate with {0} serial number expires on {1}. The ACME service starts a new certificate request from the ACME certificate authority at the {2} URI.\n+CWPKI2052I.explanation=The ACME service starts a new certificate based on the renewBeforeExpiration property in the server configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40191687be135d881f3ff55137f4a58361665dce"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAwMTMxOQ==", "bodyText": "change\nThe TLS/SSL requests cannot complete as the certificate expired.\nto\nThe TLS/SSL requests cannot complete because the certificate expired.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418001319", "createdAt": "2020-04-30T13:17:08Z", "author": {"login": "dmuelle"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -226,3 +225,28 @@ CWPKI2049E.useraction=Manually replace the account key pair files as directed in\n CWPKI2050E=CWPKI2050E: Failed to back up the existing account key pair file while refreshing the account key pair. The error is ''{0}''.\n CWPKI2050E.explanation=The existing account key pair file was not be backed up. \n CWPKI2050E.useraction=Ensure that the directory that contains the existing account key pair file is writable. Review the error message for details on the failure.\n+\n+CWPKI2051W=CWPKI2051W: The renewBeforeExpiration property is set to {0} which is shorter than the minimum renew time. The renewBeforeExpiration property is reset to {1}.\n+CWPKI2051W.explanation=The renewBeforeExpiration property is below the minimum duration to request a new certificate. This could have a negative impact on server performance. \n+CWPKI2051W.useraction=Set the renewBeforeExpiration property in the server configuration to a duration that is more than the minimum time. Or remove the renewBeforeExpiration property to use the default setting.\n+\n+CWPKI2052I=CWPKI2052I: The certificate with {0} serial number expires on {1}. The ACME service starts a new certificate request from the ACME certificate authority at the {2} URI.\n+CWPKI2052I.explanation=The ACME service starts a new certificate based on the renewBeforeExpiration property in the server configuration.\n+CWPKI2052I.useraction=No action is required.\n+\n+CWPKI2053W=CWPKI2053W: The certificate with {0} serial number expired on {1}. The ACME service is not configured to automatically request a new certificate.\n+CWPKI2053W.explanation=The TLS/SSL requests cannot complete as the certificate expired.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40191687be135d881f3ff55137f4a58361665dce"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAwMjMwOQ==", "bodyText": "change\nUse the ACME REST interface to request a new certificate. Or update the renewBeforeExpiration property in the server configuration to a value greater than 0.\nto\nUpdate the renewBeforeExpiration property in the server configuration to a value greater than 0 or use the ACME REST interface to request a new certificate.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418002309", "createdAt": "2020-04-30T13:18:41Z", "author": {"login": "dmuelle"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -226,3 +225,28 @@ CWPKI2049E.useraction=Manually replace the account key pair files as directed in\n CWPKI2050E=CWPKI2050E: Failed to back up the existing account key pair file while refreshing the account key pair. The error is ''{0}''.\n CWPKI2050E.explanation=The existing account key pair file was not be backed up. \n CWPKI2050E.useraction=Ensure that the directory that contains the existing account key pair file is writable. Review the error message for details on the failure.\n+\n+CWPKI2051W=CWPKI2051W: The renewBeforeExpiration property is set to {0} which is shorter than the minimum renew time. The renewBeforeExpiration property is reset to {1}.\n+CWPKI2051W.explanation=The renewBeforeExpiration property is below the minimum duration to request a new certificate. This could have a negative impact on server performance. \n+CWPKI2051W.useraction=Set the renewBeforeExpiration property in the server configuration to a duration that is more than the minimum time. Or remove the renewBeforeExpiration property to use the default setting.\n+\n+CWPKI2052I=CWPKI2052I: The certificate with {0} serial number expires on {1}. The ACME service starts a new certificate request from the ACME certificate authority at the {2} URI.\n+CWPKI2052I.explanation=The ACME service starts a new certificate based on the renewBeforeExpiration property in the server configuration.\n+CWPKI2052I.useraction=No action is required.\n+\n+CWPKI2053W=CWPKI2053W: The certificate with {0} serial number expired on {1}. The ACME service is not configured to automatically request a new certificate.\n+CWPKI2053W.explanation=The TLS/SSL requests cannot complete as the certificate expired.\n+CWPKI2053W.useraction=Use the ACME REST interface to request a new certificate. Or update the renewBeforeExpiration property in the server configuration to a value greater than 0.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40191687be135d881f3ff55137f4a58361665dce"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAwMzAyOQ==", "bodyText": "add comma for dependent clause. Also, I think in cases where the property is automatically reset, its clearer to use the past tense for the original value- since the system has already changed that value at the time of this notification.\nThe renewBeforeExpiration property was set to {0}, which is equal to or longer than the validity period of the certificate with the {1} serial number.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418003029", "createdAt": "2020-04-30T13:19:47Z", "author": {"login": "dmuelle"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -226,3 +225,28 @@ CWPKI2049E.useraction=Manually replace the account key pair files as directed in\n CWPKI2050E=CWPKI2050E: Failed to back up the existing account key pair file while refreshing the account key pair. The error is ''{0}''.\n CWPKI2050E.explanation=The existing account key pair file was not be backed up. \n CWPKI2050E.useraction=Ensure that the directory that contains the existing account key pair file is writable. Review the error message for details on the failure.\n+\n+CWPKI2051W=CWPKI2051W: The renewBeforeExpiration property is set to {0} which is shorter than the minimum renew time. The renewBeforeExpiration property is reset to {1}.\n+CWPKI2051W.explanation=The renewBeforeExpiration property is below the minimum duration to request a new certificate. This could have a negative impact on server performance. \n+CWPKI2051W.useraction=Set the renewBeforeExpiration property in the server configuration to a duration that is more than the minimum time. Or remove the renewBeforeExpiration property to use the default setting.\n+\n+CWPKI2052I=CWPKI2052I: The certificate with {0} serial number expires on {1}. The ACME service starts a new certificate request from the ACME certificate authority at the {2} URI.\n+CWPKI2052I.explanation=The ACME service starts a new certificate based on the renewBeforeExpiration property in the server configuration.\n+CWPKI2052I.useraction=No action is required.\n+\n+CWPKI2053W=CWPKI2053W: The certificate with {0} serial number expired on {1}. The ACME service is not configured to automatically request a new certificate.\n+CWPKI2053W.explanation=The TLS/SSL requests cannot complete as the certificate expired.\n+CWPKI2053W.useraction=Use the ACME REST interface to request a new certificate. Or update the renewBeforeExpiration property in the server configuration to a value greater than 0.\n+\n+CWPKI2054W=CWPKI2054W: The renewBeforeExpiration property is set to {0} which is equal to or longer than the validity period of the certificate with {1} serial number. The validity period of the certificate is {2}. The renewBeforeExpiration property is reset to {3}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40191687be135d881f3ff55137f4a58361665dce"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAwNTEyMw==", "bodyText": "change\nThe renewBeforeExpiration property is longer than the validity period of the certificate. The renewBeforeExpiration property is set to the default.\nto\nThe value of the renewBeforeExpiration property was longer than the validity period of the certificate. The renewBeforeExpiration property is reset to the default value.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418005123", "createdAt": "2020-04-30T13:22:51Z", "author": {"login": "dmuelle"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -226,3 +225,28 @@ CWPKI2049E.useraction=Manually replace the account key pair files as directed in\n CWPKI2050E=CWPKI2050E: Failed to back up the existing account key pair file while refreshing the account key pair. The error is ''{0}''.\n CWPKI2050E.explanation=The existing account key pair file was not be backed up. \n CWPKI2050E.useraction=Ensure that the directory that contains the existing account key pair file is writable. Review the error message for details on the failure.\n+\n+CWPKI2051W=CWPKI2051W: The renewBeforeExpiration property is set to {0} which is shorter than the minimum renew time. The renewBeforeExpiration property is reset to {1}.\n+CWPKI2051W.explanation=The renewBeforeExpiration property is below the minimum duration to request a new certificate. This could have a negative impact on server performance. \n+CWPKI2051W.useraction=Set the renewBeforeExpiration property in the server configuration to a duration that is more than the minimum time. Or remove the renewBeforeExpiration property to use the default setting.\n+\n+CWPKI2052I=CWPKI2052I: The certificate with {0} serial number expires on {1}. The ACME service starts a new certificate request from the ACME certificate authority at the {2} URI.\n+CWPKI2052I.explanation=The ACME service starts a new certificate based on the renewBeforeExpiration property in the server configuration.\n+CWPKI2052I.useraction=No action is required.\n+\n+CWPKI2053W=CWPKI2053W: The certificate with {0} serial number expired on {1}. The ACME service is not configured to automatically request a new certificate.\n+CWPKI2053W.explanation=The TLS/SSL requests cannot complete as the certificate expired.\n+CWPKI2053W.useraction=Use the ACME REST interface to request a new certificate. Or update the renewBeforeExpiration property in the server configuration to a value greater than 0.\n+\n+CWPKI2054W=CWPKI2054W: The renewBeforeExpiration property is set to {0} which is equal to or longer than the validity period of the certificate with {1} serial number. The validity period of the certificate is {2}. The renewBeforeExpiration property is reset to {3}.\n+CWPKI2054W.explanation=The renewBeforeExpiration property is longer than the validity period of the certificate. The renewBeforeExpiration property is set to the default.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40191687be135d881f3ff55137f4a58361665dce"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAxMjA0MA==", "bodyText": "change\nSet the renewBeforeExpiration property in the server configuration to an amount of time less than the length of validity period of the certificate. Or remove the renewBeforeExpiration property to use the default setting.\nto\nSet the renewBeforeExpiration property in the server configuration to an amount of time that is less than the length of the validity period of the certificate. To use the default setting, remove the renewBeforeExpiration property.\nAgain here it is a little unclear whether the user needs to remove the property to use the default or if the system reset of the property takes care of it", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418012040", "createdAt": "2020-04-30T13:32:54Z", "author": {"login": "dmuelle"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -226,3 +225,28 @@ CWPKI2049E.useraction=Manually replace the account key pair files as directed in\n CWPKI2050E=CWPKI2050E: Failed to back up the existing account key pair file while refreshing the account key pair. The error is ''{0}''.\n CWPKI2050E.explanation=The existing account key pair file was not be backed up. \n CWPKI2050E.useraction=Ensure that the directory that contains the existing account key pair file is writable. Review the error message for details on the failure.\n+\n+CWPKI2051W=CWPKI2051W: The renewBeforeExpiration property is set to {0} which is shorter than the minimum renew time. The renewBeforeExpiration property is reset to {1}.\n+CWPKI2051W.explanation=The renewBeforeExpiration property is below the minimum duration to request a new certificate. This could have a negative impact on server performance. \n+CWPKI2051W.useraction=Set the renewBeforeExpiration property in the server configuration to a duration that is more than the minimum time. Or remove the renewBeforeExpiration property to use the default setting.\n+\n+CWPKI2052I=CWPKI2052I: The certificate with {0} serial number expires on {1}. The ACME service starts a new certificate request from the ACME certificate authority at the {2} URI.\n+CWPKI2052I.explanation=The ACME service starts a new certificate based on the renewBeforeExpiration property in the server configuration.\n+CWPKI2052I.useraction=No action is required.\n+\n+CWPKI2053W=CWPKI2053W: The certificate with {0} serial number expired on {1}. The ACME service is not configured to automatically request a new certificate.\n+CWPKI2053W.explanation=The TLS/SSL requests cannot complete as the certificate expired.\n+CWPKI2053W.useraction=Use the ACME REST interface to request a new certificate. Or update the renewBeforeExpiration property in the server configuration to a value greater than 0.\n+\n+CWPKI2054W=CWPKI2054W: The renewBeforeExpiration property is set to {0} which is equal to or longer than the validity period of the certificate with {1} serial number. The validity period of the certificate is {2}. The renewBeforeExpiration property is reset to {3}.\n+CWPKI2054W.explanation=The renewBeforeExpiration property is longer than the validity period of the certificate. The renewBeforeExpiration property is set to the default.\n+CWPKI2054W.useraction=Set the renewBeforeExpiration property in the server configuration to an amount of time less than the length of validity period of the certificate. Or remove the renewBeforeExpiration property to use the default setting.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40191687be135d881f3ff55137f4a58361665dce"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAyNTg2MA==", "bodyText": "change\nThe renewBeforeExpiration property is set to {0}. The ACME service will make frequent requests for a new certificate.\nto*\nThe renewBeforeExpiration property is set to {0}. The ACME service  makes frequent requests for a new certificate.\nIf this is a warning message, it's not really warning of anything. maybe the message text should mention \"short amount of time\", while the explanation fpoucuses on what constitutes \"short\"", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418025860", "createdAt": "2020-04-30T13:51:45Z", "author": {"login": "dmuelle"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -226,3 +225,28 @@ CWPKI2049E.useraction=Manually replace the account key pair files as directed in\n CWPKI2050E=CWPKI2050E: Failed to back up the existing account key pair file while refreshing the account key pair. The error is ''{0}''.\n CWPKI2050E.explanation=The existing account key pair file was not be backed up. \n CWPKI2050E.useraction=Ensure that the directory that contains the existing account key pair file is writable. Review the error message for details on the failure.\n+\n+CWPKI2051W=CWPKI2051W: The renewBeforeExpiration property is set to {0} which is shorter than the minimum renew time. The renewBeforeExpiration property is reset to {1}.\n+CWPKI2051W.explanation=The renewBeforeExpiration property is below the minimum duration to request a new certificate. This could have a negative impact on server performance. \n+CWPKI2051W.useraction=Set the renewBeforeExpiration property in the server configuration to a duration that is more than the minimum time. Or remove the renewBeforeExpiration property to use the default setting.\n+\n+CWPKI2052I=CWPKI2052I: The certificate with {0} serial number expires on {1}. The ACME service starts a new certificate request from the ACME certificate authority at the {2} URI.\n+CWPKI2052I.explanation=The ACME service starts a new certificate based on the renewBeforeExpiration property in the server configuration.\n+CWPKI2052I.useraction=No action is required.\n+\n+CWPKI2053W=CWPKI2053W: The certificate with {0} serial number expired on {1}. The ACME service is not configured to automatically request a new certificate.\n+CWPKI2053W.explanation=The TLS/SSL requests cannot complete as the certificate expired.\n+CWPKI2053W.useraction=Use the ACME REST interface to request a new certificate. Or update the renewBeforeExpiration property in the server configuration to a value greater than 0.\n+\n+CWPKI2054W=CWPKI2054W: The renewBeforeExpiration property is set to {0} which is equal to or longer than the validity period of the certificate with {1} serial number. The validity period of the certificate is {2}. The renewBeforeExpiration property is reset to {3}.\n+CWPKI2054W.explanation=The renewBeforeExpiration property is longer than the validity period of the certificate. The renewBeforeExpiration property is set to the default.\n+CWPKI2054W.useraction=Set the renewBeforeExpiration property in the server configuration to an amount of time less than the length of validity period of the certificate. Or remove the renewBeforeExpiration property to use the default setting.\n+\n+CWPKI2055W=CWPKI2055W: The renewBeforeExpiration property is set to {0}. The ACME service will make frequent requests for a new certificate.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40191687be135d881f3ff55137f4a58361665dce"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAyNjA4MQ==", "bodyText": "see previous comment", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418026081", "createdAt": "2020-04-30T13:52:04Z", "author": {"login": "dmuelle"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -226,3 +225,28 @@ CWPKI2049E.useraction=Manually replace the account key pair files as directed in\n CWPKI2050E=CWPKI2050E: Failed to back up the existing account key pair file while refreshing the account key pair. The error is ''{0}''.\n CWPKI2050E.explanation=The existing account key pair file was not be backed up. \n CWPKI2050E.useraction=Ensure that the directory that contains the existing account key pair file is writable. Review the error message for details on the failure.\n+\n+CWPKI2051W=CWPKI2051W: The renewBeforeExpiration property is set to {0} which is shorter than the minimum renew time. The renewBeforeExpiration property is reset to {1}.\n+CWPKI2051W.explanation=The renewBeforeExpiration property is below the minimum duration to request a new certificate. This could have a negative impact on server performance. \n+CWPKI2051W.useraction=Set the renewBeforeExpiration property in the server configuration to a duration that is more than the minimum time. Or remove the renewBeforeExpiration property to use the default setting.\n+\n+CWPKI2052I=CWPKI2052I: The certificate with {0} serial number expires on {1}. The ACME service starts a new certificate request from the ACME certificate authority at the {2} URI.\n+CWPKI2052I.explanation=The ACME service starts a new certificate based on the renewBeforeExpiration property in the server configuration.\n+CWPKI2052I.useraction=No action is required.\n+\n+CWPKI2053W=CWPKI2053W: The certificate with {0} serial number expired on {1}. The ACME service is not configured to automatically request a new certificate.\n+CWPKI2053W.explanation=The TLS/SSL requests cannot complete as the certificate expired.\n+CWPKI2053W.useraction=Use the ACME REST interface to request a new certificate. Or update the renewBeforeExpiration property in the server configuration to a value greater than 0.\n+\n+CWPKI2054W=CWPKI2054W: The renewBeforeExpiration property is set to {0} which is equal to or longer than the validity period of the certificate with {1} serial number. The validity period of the certificate is {2}. The renewBeforeExpiration property is reset to {3}.\n+CWPKI2054W.explanation=The renewBeforeExpiration property is longer than the validity period of the certificate. The renewBeforeExpiration property is set to the default.\n+CWPKI2054W.useraction=Set the renewBeforeExpiration property in the server configuration to an amount of time less than the length of validity period of the certificate. Or remove the renewBeforeExpiration property to use the default setting.\n+\n+CWPKI2055W=CWPKI2055W: The renewBeforeExpiration property is set to {0}. The ACME service will make frequent requests for a new certificate.\n+CWPKI2055W.explanation=The renewBeforeExpiration property is set to a short amount of time. This could have a negative impact on server performance.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40191687be135d881f3ff55137f4a58361665dce"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAyNzI4Mg==", "bodyText": "change\nSet the renewBeforeExpiration property in the server configuration to a longer duration. To use the default setting, remove the renewBeforeExpiration property from the server configuration.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418027282", "createdAt": "2020-04-30T13:53:31Z", "author": {"login": "dmuelle"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -226,3 +225,28 @@ CWPKI2049E.useraction=Manually replace the account key pair files as directed in\n CWPKI2050E=CWPKI2050E: Failed to back up the existing account key pair file while refreshing the account key pair. The error is ''{0}''.\n CWPKI2050E.explanation=The existing account key pair file was not be backed up. \n CWPKI2050E.useraction=Ensure that the directory that contains the existing account key pair file is writable. Review the error message for details on the failure.\n+\n+CWPKI2051W=CWPKI2051W: The renewBeforeExpiration property is set to {0} which is shorter than the minimum renew time. The renewBeforeExpiration property is reset to {1}.\n+CWPKI2051W.explanation=The renewBeforeExpiration property is below the minimum duration to request a new certificate. This could have a negative impact on server performance. \n+CWPKI2051W.useraction=Set the renewBeforeExpiration property in the server configuration to a duration that is more than the minimum time. Or remove the renewBeforeExpiration property to use the default setting.\n+\n+CWPKI2052I=CWPKI2052I: The certificate with {0} serial number expires on {1}. The ACME service starts a new certificate request from the ACME certificate authority at the {2} URI.\n+CWPKI2052I.explanation=The ACME service starts a new certificate based on the renewBeforeExpiration property in the server configuration.\n+CWPKI2052I.useraction=No action is required.\n+\n+CWPKI2053W=CWPKI2053W: The certificate with {0} serial number expired on {1}. The ACME service is not configured to automatically request a new certificate.\n+CWPKI2053W.explanation=The TLS/SSL requests cannot complete as the certificate expired.\n+CWPKI2053W.useraction=Use the ACME REST interface to request a new certificate. Or update the renewBeforeExpiration property in the server configuration to a value greater than 0.\n+\n+CWPKI2054W=CWPKI2054W: The renewBeforeExpiration property is set to {0} which is equal to or longer than the validity period of the certificate with {1} serial number. The validity period of the certificate is {2}. The renewBeforeExpiration property is reset to {3}.\n+CWPKI2054W.explanation=The renewBeforeExpiration property is longer than the validity period of the certificate. The renewBeforeExpiration property is set to the default.\n+CWPKI2054W.useraction=Set the renewBeforeExpiration property in the server configuration to an amount of time less than the length of validity period of the certificate. Or remove the renewBeforeExpiration property to use the default setting.\n+\n+CWPKI2055W=CWPKI2055W: The renewBeforeExpiration property is set to {0}. The ACME service will make frequent requests for a new certificate.\n+CWPKI2055W.explanation=The renewBeforeExpiration property is set to a short amount of time. This could have a negative impact on server performance.\n+CWPKI2055W.useraction=Set the renewBeforeExpiration property in the server configuration to a longer duration. Or remove the renewBeforeExpiration property to use the default setting.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40191687be135d881f3ff55137f4a58361665dce"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAyODE5Mw==", "bodyText": "The validity period of the certificate with {0} serial number is shorter than the minimum renew time allowed.\nis the minimum renew time the value set by the renewBeforeExpiration property?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418028193", "createdAt": "2020-04-30T13:54:46Z", "author": {"login": "dmuelle"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -226,3 +225,28 @@ CWPKI2049E.useraction=Manually replace the account key pair files as directed in\n CWPKI2050E=CWPKI2050E: Failed to back up the existing account key pair file while refreshing the account key pair. The error is ''{0}''.\n CWPKI2050E.explanation=The existing account key pair file was not be backed up. \n CWPKI2050E.useraction=Ensure that the directory that contains the existing account key pair file is writable. Review the error message for details on the failure.\n+\n+CWPKI2051W=CWPKI2051W: The renewBeforeExpiration property is set to {0} which is shorter than the minimum renew time. The renewBeforeExpiration property is reset to {1}.\n+CWPKI2051W.explanation=The renewBeforeExpiration property is below the minimum duration to request a new certificate. This could have a negative impact on server performance. \n+CWPKI2051W.useraction=Set the renewBeforeExpiration property in the server configuration to a duration that is more than the minimum time. Or remove the renewBeforeExpiration property to use the default setting.\n+\n+CWPKI2052I=CWPKI2052I: The certificate with {0} serial number expires on {1}. The ACME service starts a new certificate request from the ACME certificate authority at the {2} URI.\n+CWPKI2052I.explanation=The ACME service starts a new certificate based on the renewBeforeExpiration property in the server configuration.\n+CWPKI2052I.useraction=No action is required.\n+\n+CWPKI2053W=CWPKI2053W: The certificate with {0} serial number expired on {1}. The ACME service is not configured to automatically request a new certificate.\n+CWPKI2053W.explanation=The TLS/SSL requests cannot complete as the certificate expired.\n+CWPKI2053W.useraction=Use the ACME REST interface to request a new certificate. Or update the renewBeforeExpiration property in the server configuration to a value greater than 0.\n+\n+CWPKI2054W=CWPKI2054W: The renewBeforeExpiration property is set to {0} which is equal to or longer than the validity period of the certificate with {1} serial number. The validity period of the certificate is {2}. The renewBeforeExpiration property is reset to {3}.\n+CWPKI2054W.explanation=The renewBeforeExpiration property is longer than the validity period of the certificate. The renewBeforeExpiration property is set to the default.\n+CWPKI2054W.useraction=Set the renewBeforeExpiration property in the server configuration to an amount of time less than the length of validity period of the certificate. Or remove the renewBeforeExpiration property to use the default setting.\n+\n+CWPKI2055W=CWPKI2055W: The renewBeforeExpiration property is set to {0}. The ACME service will make frequent requests for a new certificate.\n+CWPKI2055W.explanation=The renewBeforeExpiration property is set to a short amount of time. This could have a negative impact on server performance.\n+CWPKI2055W.useraction=Set the renewBeforeExpiration property in the server configuration to a longer duration. Or remove the renewBeforeExpiration property to use the default setting.\n+\n+CWPKI2056W=CWPKI2056W: The validity period of the certificate with {0} serial number is shorter than the minimum renew time allowed. The validity period of the certification is {1}. The renewBeforeExpiration property is reset to {2}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40191687be135d881f3ff55137f4a58361665dce"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAzNzczNw==", "bodyText": "change\nThe validity period is shorter than the minimum renewal time allowed. The certificate will expire before a new certificate is requested.\nto*\nThe validity period is shorter than the minimum renewal time. The certificate expires before a new certificate is requested.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418037737", "createdAt": "2020-04-30T14:07:57Z", "author": {"login": "dmuelle"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -226,3 +225,28 @@ CWPKI2049E.useraction=Manually replace the account key pair files as directed in\n CWPKI2050E=CWPKI2050E: Failed to back up the existing account key pair file while refreshing the account key pair. The error is ''{0}''.\n CWPKI2050E.explanation=The existing account key pair file was not be backed up. \n CWPKI2050E.useraction=Ensure that the directory that contains the existing account key pair file is writable. Review the error message for details on the failure.\n+\n+CWPKI2051W=CWPKI2051W: The renewBeforeExpiration property is set to {0} which is shorter than the minimum renew time. The renewBeforeExpiration property is reset to {1}.\n+CWPKI2051W.explanation=The renewBeforeExpiration property is below the minimum duration to request a new certificate. This could have a negative impact on server performance. \n+CWPKI2051W.useraction=Set the renewBeforeExpiration property in the server configuration to a duration that is more than the minimum time. Or remove the renewBeforeExpiration property to use the default setting.\n+\n+CWPKI2052I=CWPKI2052I: The certificate with {0} serial number expires on {1}. The ACME service starts a new certificate request from the ACME certificate authority at the {2} URI.\n+CWPKI2052I.explanation=The ACME service starts a new certificate based on the renewBeforeExpiration property in the server configuration.\n+CWPKI2052I.useraction=No action is required.\n+\n+CWPKI2053W=CWPKI2053W: The certificate with {0} serial number expired on {1}. The ACME service is not configured to automatically request a new certificate.\n+CWPKI2053W.explanation=The TLS/SSL requests cannot complete as the certificate expired.\n+CWPKI2053W.useraction=Use the ACME REST interface to request a new certificate. Or update the renewBeforeExpiration property in the server configuration to a value greater than 0.\n+\n+CWPKI2054W=CWPKI2054W: The renewBeforeExpiration property is set to {0} which is equal to or longer than the validity period of the certificate with {1} serial number. The validity period of the certificate is {2}. The renewBeforeExpiration property is reset to {3}.\n+CWPKI2054W.explanation=The renewBeforeExpiration property is longer than the validity period of the certificate. The renewBeforeExpiration property is set to the default.\n+CWPKI2054W.useraction=Set the renewBeforeExpiration property in the server configuration to an amount of time less than the length of validity period of the certificate. Or remove the renewBeforeExpiration property to use the default setting.\n+\n+CWPKI2055W=CWPKI2055W: The renewBeforeExpiration property is set to {0}. The ACME service will make frequent requests for a new certificate.\n+CWPKI2055W.explanation=The renewBeforeExpiration property is set to a short amount of time. This could have a negative impact on server performance.\n+CWPKI2055W.useraction=Set the renewBeforeExpiration property in the server configuration to a longer duration. Or remove the renewBeforeExpiration property to use the default setting.\n+\n+CWPKI2056W=CWPKI2056W: The validity period of the certificate with {0} serial number is shorter than the minimum renew time allowed. The validity period of the certification is {1}. The renewBeforeExpiration property is reset to {2}.\n+CWPKI2056W.explanation=The validity period is shorter than the minimum renewal time allowed. The certificate will expire before a new certificate is requested.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40191687be135d881f3ff55137f4a58361665dce"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAzODk4Mw==", "bodyText": "Request a certificate with a longer validity period. Set the validFor property in the server configuration.\nRequest a certificate with a longer validity period. Set the validFor property in the server configuration.\nWhat is the relationship between these two actions? Either/or? Both? Or does the resetting the validFor property request a new cert?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418038983", "createdAt": "2020-04-30T14:09:44Z", "author": {"login": "dmuelle"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -226,3 +225,28 @@ CWPKI2049E.useraction=Manually replace the account key pair files as directed in\n CWPKI2050E=CWPKI2050E: Failed to back up the existing account key pair file while refreshing the account key pair. The error is ''{0}''.\n CWPKI2050E.explanation=The existing account key pair file was not be backed up. \n CWPKI2050E.useraction=Ensure that the directory that contains the existing account key pair file is writable. Review the error message for details on the failure.\n+\n+CWPKI2051W=CWPKI2051W: The renewBeforeExpiration property is set to {0} which is shorter than the minimum renew time. The renewBeforeExpiration property is reset to {1}.\n+CWPKI2051W.explanation=The renewBeforeExpiration property is below the minimum duration to request a new certificate. This could have a negative impact on server performance. \n+CWPKI2051W.useraction=Set the renewBeforeExpiration property in the server configuration to a duration that is more than the minimum time. Or remove the renewBeforeExpiration property to use the default setting.\n+\n+CWPKI2052I=CWPKI2052I: The certificate with {0} serial number expires on {1}. The ACME service starts a new certificate request from the ACME certificate authority at the {2} URI.\n+CWPKI2052I.explanation=The ACME service starts a new certificate based on the renewBeforeExpiration property in the server configuration.\n+CWPKI2052I.useraction=No action is required.\n+\n+CWPKI2053W=CWPKI2053W: The certificate with {0} serial number expired on {1}. The ACME service is not configured to automatically request a new certificate.\n+CWPKI2053W.explanation=The TLS/SSL requests cannot complete as the certificate expired.\n+CWPKI2053W.useraction=Use the ACME REST interface to request a new certificate. Or update the renewBeforeExpiration property in the server configuration to a value greater than 0.\n+\n+CWPKI2054W=CWPKI2054W: The renewBeforeExpiration property is set to {0} which is equal to or longer than the validity period of the certificate with {1} serial number. The validity period of the certificate is {2}. The renewBeforeExpiration property is reset to {3}.\n+CWPKI2054W.explanation=The renewBeforeExpiration property is longer than the validity period of the certificate. The renewBeforeExpiration property is set to the default.\n+CWPKI2054W.useraction=Set the renewBeforeExpiration property in the server configuration to an amount of time less than the length of validity period of the certificate. Or remove the renewBeforeExpiration property to use the default setting.\n+\n+CWPKI2055W=CWPKI2055W: The renewBeforeExpiration property is set to {0}. The ACME service will make frequent requests for a new certificate.\n+CWPKI2055W.explanation=The renewBeforeExpiration property is set to a short amount of time. This could have a negative impact on server performance.\n+CWPKI2055W.useraction=Set the renewBeforeExpiration property in the server configuration to a longer duration. Or remove the renewBeforeExpiration property to use the default setting.\n+\n+CWPKI2056W=CWPKI2056W: The validity period of the certificate with {0} serial number is shorter than the minimum renew time allowed. The validity period of the certification is {1}. The renewBeforeExpiration property is reset to {2}.\n+CWPKI2056W.explanation=The validity period is shorter than the minimum renewal time allowed. The certificate will expire before a new certificate is requested.\n+CWPKI2056W.useraction=Request a certificate with a longer validity period. Set the validFor property in the server configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40191687be135d881f3ff55137f4a58361665dce"}, "originalPosition": 35}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "40191687be135d881f3ff55137f4a58361665dce", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/40191687be135d881f3ff55137f4a58361665dce", "committedDate": "2020-04-29T22:45:52Z", "message": "Issue 11185: Add renewal request time configuration"}, "afterCommit": {"oid": "f8ca31a02cb8994e56b3aada9fd56c2d6e6e1039", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/f8ca31a02cb8994e56b3aada9fd56c2d6e6e1039", "committedDate": "2020-04-30T18:26:04Z", "message": "Issue 11185: Add renewal request time configuration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNzkxMTU1", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#pullrequestreview-403791155", "createdAt": "2020-04-30T18:53:43Z", "commit": {"oid": "f8ca31a02cb8994e56b3aada9fd56c2d6e6e1039"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1Mzo0M1rOGO2KuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTowNTozN1rOGO2kXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMDcyOA==", "bodyText": "change\nIf the first request fails, the certificate renew request continues until a new certificate is received.\nto\nIf the first request fails, the certificate renewal request continues until a new certificate is received.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418220728", "createdAt": "2020-04-30T18:53:43Z", "author": {"login": "dmuelle"}, "path": "dev/com.ibm.ws.security.acme/resources/OSGI-INF/l10n/metatype.properties", "diffHunk": "@@ -63,3 +63,6 @@ trustStorePassword.desc=The password that is used to load the truststore file. T\n \n trustStoreType=Truststore type\n trustStoreType.desc=The keystore type for the truststore. Supported types are JKS, PKCS12 and JCEKS.\n+\n+renewBeforeExpiration=Renew time before expiration\n+renewBeforeExpiration.desc=The amount of time before the expiration date of the certificate to request a new certificate. If the first request fails, the certificate renew request continues until a new certificate is received. For example, if the renewBeforeExpiration property is set to seven days, the ACME service starts requesting a new certificate seven days before the expiration date of the current certificate. Setting the renewBeforeExpiration property to zero or a negative value disables automatic certificate renewal.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8ca31a02cb8994e56b3aada9fd56c2d6e6e1039"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMjMwNg==", "bodyText": "use \"minimum renew time\" consistently\nchange\nThe renewBeforeExpiration property was below the minimum duration to request a new certificate and is set to the minimum duration.\nto\nThe value for the renewBeforeExpiration property was below the minimum duration to request a new certificate and is reset to the minimum renew time.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418222306", "createdAt": "2020-04-30T18:56:28Z", "author": {"login": "dmuelle"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -226,3 +225,28 @@ CWPKI2049E.useraction=Manually replace the account key pair files as directed in\n CWPKI2050E=CWPKI2050E: Failed to back up the existing account key pair file while refreshing the account key pair. The error is ''{0}''.\n CWPKI2050E.explanation=The existing account key pair file was not be backed up. \n CWPKI2050E.useraction=Ensure that the directory that contains the existing account key pair file is writable. Review the error message for details on the failure.\n+\n+CWPKI2051W=CWPKI2051W: The renewBeforeExpiration property was set to {0} which is shorter than the minimum renew time. The renewBeforeExpiration property is reset to {1}.\n+CWPKI2051W.explanation=The renewBeforeExpiration property was below the minimum duration to request a new certificate and is set to the minimum duration. This could have a negative impact on server performance.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8ca31a02cb8994e56b3aada9fd56c2d6e6e1039"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMjkxNA==", "bodyText": "change\nTo avoid this warning message, set the renewBeforeExpiration property in the server configuration to a duration that is longer than the minimum time.\nto\nTo avoid this warning message, set the renewBeforeExpiration property in the server configuration to a duration that is longer than the minimum renew time.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418222914", "createdAt": "2020-04-30T18:57:28Z", "author": {"login": "dmuelle"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -226,3 +225,28 @@ CWPKI2049E.useraction=Manually replace the account key pair files as directed in\n CWPKI2050E=CWPKI2050E: Failed to back up the existing account key pair file while refreshing the account key pair. The error is ''{0}''.\n CWPKI2050E.explanation=The existing account key pair file was not be backed up. \n CWPKI2050E.useraction=Ensure that the directory that contains the existing account key pair file is writable. Review the error message for details on the failure.\n+\n+CWPKI2051W=CWPKI2051W: The renewBeforeExpiration property was set to {0} which is shorter than the minimum renew time. The renewBeforeExpiration property is reset to {1}.\n+CWPKI2051W.explanation=The renewBeforeExpiration property was below the minimum duration to request a new certificate and is set to the minimum duration. This could have a negative impact on server performance.\n+CWPKI2051W.useraction=To avoid this warning message, set the renewBeforeExpiration property in the server configuration to a duration that is longer than the minimum time. To use the default setting, remove the renewBeforeExpiration property from the server configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8ca31a02cb8994e56b3aada9fd56c2d6e6e1039"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyNTQyNg==", "bodyText": "change\nThe frequency of certificate requests can a negative impact on server performance.\nto\nFrequent certificate requests can have a negative impact on server performance.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418225426", "createdAt": "2020-04-30T19:01:55Z", "author": {"login": "dmuelle"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -226,3 +225,28 @@ CWPKI2049E.useraction=Manually replace the account key pair files as directed in\n CWPKI2050E=CWPKI2050E: Failed to back up the existing account key pair file while refreshing the account key pair. The error is ''{0}''.\n CWPKI2050E.explanation=The existing account key pair file was not be backed up. \n CWPKI2050E.useraction=Ensure that the directory that contains the existing account key pair file is writable. Review the error message for details on the failure.\n+\n+CWPKI2051W=CWPKI2051W: The renewBeforeExpiration property was set to {0} which is shorter than the minimum renew time. The renewBeforeExpiration property is reset to {1}.\n+CWPKI2051W.explanation=The renewBeforeExpiration property was below the minimum duration to request a new certificate and is set to the minimum duration. This could have a negative impact on server performance.\n+CWPKI2051W.useraction=To avoid this warning message, set the renewBeforeExpiration property in the server configuration to a duration that is longer than the minimum time. To use the default setting, remove the renewBeforeExpiration property from the server configuration.\n+\n+CWPKI2052I=CWPKI2052I: The certificate with {0} serial number expires on {1}. The ACME service will request a new certificate from the ACME certificate authority at the {2} URI.\n+CWPKI2052I.explanation=The ACME service requests a new certificate based on the renewBeforeExpiration property in the server configuration and the expiration date of the certificate. If the renewBeforeExpiration property is not configured, the default value is used.\n+CWPKI2052I.useraction=No action is required.\n+\n+CWPKI2053W=CWPKI2053W: The certificate with {0} serial number expired on {1}. The ACME service is not configured to automatically request a new certificate.\n+CWPKI2053W.explanation=The TLS/SSL requests cannot complete because the certificate expired.\n+CWPKI2053W.useraction=Update the renewBeforeExpiration property in the server configuration to a value greater than 0 to automatically request a new certificate or use the ACME REST interface to request a new certificate.\n+\n+CWPKI2054W=CWPKI2054W: The renewBeforeExpiration property was set to {0}, which is equal to or longer than the validity period of the certificate with {1} serial number. The validity period of the certificate is {2}. The renewBeforeExpiration property is reset to {3}.\n+CWPKI2054W.explanation=The value of the renewBeforeExpiration property was longer than the validity period of the certificate. The renewBeforeExpiration property is reset to the default value.\n+CWPKI2054W.useraction=To avoid this warning message, set the renewBeforeExpiration property in the server configuration to an amount that is less than the length of the validity period of the certificate. To use the default setting, remove the renewBeforeExpiration property.\n+\n+CWPKI2055W=CWPKI2055W: The renewBeforeExpiration property is set to a short amount of time. The ACME service makes frequent requests for a new certificate. The renewBeforeExpiration property is {0}.\n+CWPKI2055W.explanation=The frequency of certificate requests can a negative impact on server performance. The frequency of requests can also exceed the number allowed by the certificate authority.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8ca31a02cb8994e56b3aada9fd56c2d6e6e1039"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyNzI5NA==", "bodyText": "change\nThe validity period of the certificate with {0} serial number is shorter than the minimum renew time of {1}.\nto\nThe validity period of the certificate with {0} serial number is shorter than the {1} minimum renew time.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418227294", "createdAt": "2020-04-30T19:05:37Z", "author": {"login": "dmuelle"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -226,3 +225,28 @@ CWPKI2049E.useraction=Manually replace the account key pair files as directed in\n CWPKI2050E=CWPKI2050E: Failed to back up the existing account key pair file while refreshing the account key pair. The error is ''{0}''.\n CWPKI2050E.explanation=The existing account key pair file was not be backed up. \n CWPKI2050E.useraction=Ensure that the directory that contains the existing account key pair file is writable. Review the error message for details on the failure.\n+\n+CWPKI2051W=CWPKI2051W: The renewBeforeExpiration property was set to {0} which is shorter than the minimum renew time. The renewBeforeExpiration property is reset to {1}.\n+CWPKI2051W.explanation=The renewBeforeExpiration property was below the minimum duration to request a new certificate and is set to the minimum duration. This could have a negative impact on server performance.\n+CWPKI2051W.useraction=To avoid this warning message, set the renewBeforeExpiration property in the server configuration to a duration that is longer than the minimum time. To use the default setting, remove the renewBeforeExpiration property from the server configuration.\n+\n+CWPKI2052I=CWPKI2052I: The certificate with {0} serial number expires on {1}. The ACME service will request a new certificate from the ACME certificate authority at the {2} URI.\n+CWPKI2052I.explanation=The ACME service requests a new certificate based on the renewBeforeExpiration property in the server configuration and the expiration date of the certificate. If the renewBeforeExpiration property is not configured, the default value is used.\n+CWPKI2052I.useraction=No action is required.\n+\n+CWPKI2053W=CWPKI2053W: The certificate with {0} serial number expired on {1}. The ACME service is not configured to automatically request a new certificate.\n+CWPKI2053W.explanation=The TLS/SSL requests cannot complete because the certificate expired.\n+CWPKI2053W.useraction=Update the renewBeforeExpiration property in the server configuration to a value greater than 0 to automatically request a new certificate or use the ACME REST interface to request a new certificate.\n+\n+CWPKI2054W=CWPKI2054W: The renewBeforeExpiration property was set to {0}, which is equal to or longer than the validity period of the certificate with {1} serial number. The validity period of the certificate is {2}. The renewBeforeExpiration property is reset to {3}.\n+CWPKI2054W.explanation=The value of the renewBeforeExpiration property was longer than the validity period of the certificate. The renewBeforeExpiration property is reset to the default value.\n+CWPKI2054W.useraction=To avoid this warning message, set the renewBeforeExpiration property in the server configuration to an amount that is less than the length of the validity period of the certificate. To use the default setting, remove the renewBeforeExpiration property.\n+\n+CWPKI2055W=CWPKI2055W: The renewBeforeExpiration property is set to a short amount of time. The ACME service makes frequent requests for a new certificate. The renewBeforeExpiration property is {0}.\n+CWPKI2055W.explanation=The frequency of certificate requests can a negative impact on server performance. The frequency of requests can also exceed the number allowed by the certificate authority.\n+CWPKI2055W.useraction=To avoid this warning message, set the renewBeforeExpiration property in the server configuration to a longer duration. To use the default setting, remove the renewBeforeExpiration property from the server configuration.\n+\n+CWPKI2056W=CWPKI2056W: The validity period of the certificate with {0} serial number is shorter than the minimum renew time of {1}. The validity period of the certification is {2}. The renewBeforeExpiration property is reset to {3}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8ca31a02cb8994e56b3aada9fd56c2d6e6e1039"}, "originalPosition": 33}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f8ca31a02cb8994e56b3aada9fd56c2d6e6e1039", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/f8ca31a02cb8994e56b3aada9fd56c2d6e6e1039", "committedDate": "2020-04-30T18:26:04Z", "message": "Issue 11185: Add renewal request time configuration"}, "afterCommit": {"oid": "82cca7ed5650ce13ba5deb1f473b4d1dcdfc8311", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/82cca7ed5650ce13ba5deb1f473b4d1dcdfc8311", "committedDate": "2020-04-30T19:38:16Z", "message": "Issue 11185: Add renewal request time configuration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODM1Nzg2", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#pullrequestreview-403835786", "createdAt": "2020-04-30T20:00:35Z", "commit": {"oid": "82cca7ed5650ce13ba5deb1f473b4d1dcdfc8311"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDowMDozNlrOGO4Srw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDowMToyOVrOGO4UYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1NTUzNQ==", "bodyText": "change\nThe frequency of requests can also exceed the number allowed by the certificate authority.\nto\nThe number of requests can also exceed the number allowed by the certificate authority.\nunless the CA limits the frequency as opposed to total number....", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418255535", "createdAt": "2020-04-30T20:00:36Z", "author": {"login": "dmuelle"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -226,3 +225,28 @@ CWPKI2049E.useraction=Manually replace the account key pair files as directed in\n CWPKI2050E=CWPKI2050E: Failed to back up the existing account key pair file while refreshing the account key pair. The error is ''{0}''.\n CWPKI2050E.explanation=The existing account key pair file was not be backed up. \n CWPKI2050E.useraction=Ensure that the directory that contains the existing account key pair file is writable. Review the error message for details on the failure.\n+\n+CWPKI2051W=CWPKI2051W: The renewBeforeExpiration property was set to {0} which is shorter than the minimum renew time. The renewBeforeExpiration property is reset to {1}.\n+CWPKI2051W.explanation=The value for the renewBeforeExpiration property was below the minimum duration to request a new certificate and is reset to the minimum renew time. This could have a negative impact on server performance.\n+CWPKI2051W.useraction=To avoid this warning message, set the renewBeforeExpiration property in the server configuration to a duration that is longer than the minimum renew time. To use the default setting, remove the renewBeforeExpiration property from the server configuration.\n+\n+CWPKI2052I=CWPKI2052I: The certificate with {0} serial number expires on {1}. The ACME service will request a new certificate from the ACME certificate authority at the {2} URI.\n+CWPKI2052I.explanation=The ACME service requests a new certificate based on the renewBeforeExpiration property in the server configuration and the expiration date of the certificate. If the renewBeforeExpiration property is not configured, the default value is used.\n+CWPKI2052I.useraction=No action is required.\n+\n+CWPKI2053W=CWPKI2053W: The certificate with {0} serial number expired on {1}. The ACME service is not configured to automatically request a new certificate.\n+CWPKI2053W.explanation=The TLS/SSL requests cannot complete because the certificate expired.\n+CWPKI2053W.useraction=Update the renewBeforeExpiration property in the server configuration to a value greater than 0 to automatically request a new certificate or use the ACME REST interface to request a new certificate.\n+\n+CWPKI2054W=CWPKI2054W: The renewBeforeExpiration property was set to {0}, which is equal to or longer than the validity period of the certificate with {1} serial number. The validity period of the certificate is {2}. The renewBeforeExpiration property is reset to {3}.\n+CWPKI2054W.explanation=The value of the renewBeforeExpiration property was longer than the validity period of the certificate. The renewBeforeExpiration property is reset to the default value.\n+CWPKI2054W.useraction=To avoid this warning message, set the renewBeforeExpiration property in the server configuration to an amount that is less than the length of the validity period of the certificate. To use the default setting, remove the renewBeforeExpiration property.\n+\n+CWPKI2055W=CWPKI2055W: The renewBeforeExpiration property is set to a short amount of time. The ACME service makes frequent requests for a new certificate. The renewBeforeExpiration property is {0}.\n+CWPKI2055W.explanation=Frequent certificate requests can have a negative impact on server performance. The frequency of requests can also exceed the number allowed by the certificate authority.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82cca7ed5650ce13ba5deb1f473b4d1dcdfc8311"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1NTk2OA==", "bodyText": "change\nThe validity period is shorter than the minimum renewal time.\nto\nThe validity period is shorter than the minimum renew time.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418255968", "createdAt": "2020-04-30T20:01:29Z", "author": {"login": "dmuelle"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -226,3 +225,28 @@ CWPKI2049E.useraction=Manually replace the account key pair files as directed in\n CWPKI2050E=CWPKI2050E: Failed to back up the existing account key pair file while refreshing the account key pair. The error is ''{0}''.\n CWPKI2050E.explanation=The existing account key pair file was not be backed up. \n CWPKI2050E.useraction=Ensure that the directory that contains the existing account key pair file is writable. Review the error message for details on the failure.\n+\n+CWPKI2051W=CWPKI2051W: The renewBeforeExpiration property was set to {0} which is shorter than the minimum renew time. The renewBeforeExpiration property is reset to {1}.\n+CWPKI2051W.explanation=The value for the renewBeforeExpiration property was below the minimum duration to request a new certificate and is reset to the minimum renew time. This could have a negative impact on server performance.\n+CWPKI2051W.useraction=To avoid this warning message, set the renewBeforeExpiration property in the server configuration to a duration that is longer than the minimum renew time. To use the default setting, remove the renewBeforeExpiration property from the server configuration.\n+\n+CWPKI2052I=CWPKI2052I: The certificate with {0} serial number expires on {1}. The ACME service will request a new certificate from the ACME certificate authority at the {2} URI.\n+CWPKI2052I.explanation=The ACME service requests a new certificate based on the renewBeforeExpiration property in the server configuration and the expiration date of the certificate. If the renewBeforeExpiration property is not configured, the default value is used.\n+CWPKI2052I.useraction=No action is required.\n+\n+CWPKI2053W=CWPKI2053W: The certificate with {0} serial number expired on {1}. The ACME service is not configured to automatically request a new certificate.\n+CWPKI2053W.explanation=The TLS/SSL requests cannot complete because the certificate expired.\n+CWPKI2053W.useraction=Update the renewBeforeExpiration property in the server configuration to a value greater than 0 to automatically request a new certificate or use the ACME REST interface to request a new certificate.\n+\n+CWPKI2054W=CWPKI2054W: The renewBeforeExpiration property was set to {0}, which is equal to or longer than the validity period of the certificate with {1} serial number. The validity period of the certificate is {2}. The renewBeforeExpiration property is reset to {3}.\n+CWPKI2054W.explanation=The value of the renewBeforeExpiration property was longer than the validity period of the certificate. The renewBeforeExpiration property is reset to the default value.\n+CWPKI2054W.useraction=To avoid this warning message, set the renewBeforeExpiration property in the server configuration to an amount that is less than the length of the validity period of the certificate. To use the default setting, remove the renewBeforeExpiration property.\n+\n+CWPKI2055W=CWPKI2055W: The renewBeforeExpiration property is set to a short amount of time. The ACME service makes frequent requests for a new certificate. The renewBeforeExpiration property is {0}.\n+CWPKI2055W.explanation=Frequent certificate requests can have a negative impact on server performance. The frequency of requests can also exceed the number allowed by the certificate authority.\n+CWPKI2055W.useraction=To avoid this warning message, set the renewBeforeExpiration property in the server configuration to a longer duration. To use the default setting, remove the renewBeforeExpiration property from the server configuration.\n+\n+CWPKI2056W=CWPKI2056W: The validity period of the certificate with {0} serial number is shorter than the {1} minimum renew time.. The validity period of the certification is {2}. The renewBeforeExpiration property is reset to {3}.\n+CWPKI2056W.explanation=The validity period is shorter than the minimum renewal time. The certificate expires before a new certificate is requested.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82cca7ed5650ce13ba5deb1f473b4d1dcdfc8311"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODMwNTM1", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#pullrequestreview-403830535", "createdAt": "2020-04-30T19:52:39Z", "commit": {"oid": "82cca7ed5650ce13ba5deb1f473b4d1dcdfc8311"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTo1MjozOVrOGO4DRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDowMTo1NFrOGO4VJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1MTU4OQ==", "bodyText": "This didn't get added to the toString(). Mind putting the methods by the other get / set methods?", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418251589", "createdAt": "2020-04-30T19:52:39Z", "author": {"login": "jvanhill"}, "path": "dev/fattest.simplicity/src/com/ibm/websphere/simplicity/config/AcmeCA.java", "diffHunk": "@@ -45,6 +45,23 @@\n \n     private String validFor; // Duration\n \n+    private String renewBeforeExpiration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82cca7ed5650ce13ba5deb1f473b4d1dcdfc8311"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1MzE5Ng==", "bodyText": "Why was this message changed? Doesn't seem like it should have been.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418253196", "createdAt": "2020-04-30T19:55:55Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeClient.java", "diffHunk": "@@ -1013,7 +1018,7 @@ public void renewAccountKeyPair() throws AcmeCaException {\n \t\t\t\t\t\t */\n \t\t\t\t\t\tTr.error(tc, \"CWPKI2049E\", acmeConfig.getAccountKeyFile(), backupFile.getAbsolutePath());\n \t\t\t\t\t}\n-\t\t\t\t\tthrow new AcmeCaException(Tr.formatMessage(tc, \"CWPKI2047E\", e.getMessage()), e);\n+\t\t\t\t\tthrow new AcmeCaException(Tr.formatMessage(tc, \"CWPKI2053E\", e.getMessage()), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82cca7ed5650ce13ba5deb1f473b4d1dcdfc8311"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1MzI5OQ==", "bodyText": "Why was this message changed? Doesn't seem like it should have been.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418253299", "createdAt": "2020-04-30T19:56:10Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeClient.java", "diffHunk": "@@ -990,7 +995,7 @@ public void renewAccountKeyPair() throws AcmeCaException {\n \t\t\t\t\t * We failed to generate a new file. Remove the backup file.\n \t\t\t\t\t */\n \t\t\t\t\tdeleteFile(backupFile);\n-\t\t\t\t\tthrow new AcmeCaException(Tr.formatMessage(tc, \"CWPKI2047E\", e.getMessage()), e);\n+\t\t\t\t\tthrow new AcmeCaException(Tr.formatMessage(tc, \"CWPKI2053E\", e.getMessage()), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82cca7ed5650ce13ba5deb1f473b4d1dcdfc8311"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1NDQwOA==", "bodyText": "Not sure this method belongs here. AcmeConfig is more of a place holder for configuration (and validation of configuration) more so then for holding the logic of ACME.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418254408", "createdAt": "2020-04-30T19:58:25Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme/src/com/ibm/ws/security/acme/internal/AcmeConfig.java", "diffHunk": "@@ -439,6 +448,73 @@ private void processSubjectDN(String subjectDN) throws AcmeCaException {\n \t\t\t}\n \t\t}\n \t}\n+\t\n+\t/**\n+\t * Set the amount of time before certificate expiration to renew the certificate\n+\t * \n+\t * @param retries\n+\t *            The number of time to try to update a challenge.\n+\t */\n+\t@Trivial\n+\tprivate void setRenewBeforeExpirationMs(Long ms) {\n+\t\tautoRenewOnExpiration = true;\n+\t\tif (ms != null) {\n+\t\t\tif (ms <= 0) { // disable auto renew\n+\t\t\t\tthis.renewBeforeExpirationMs = 0L;\n+\t\t\t\tautoRenewOnExpiration = false;\n+\t\t\t\tif (tc.isDebugEnabled()) {\n+\t\t\t\t\tTr.debug(tc, \"Auto renewal of the certificate is disabled, renewBeforeExpirationMs was configured to \" + ms);\n+\t\t\t\t}\n+\t\t\t} else if (ms < AcmeConstants.RENEW_CERT_MIN) { // too low of a timeout, reset to the min newew allowed\n+\t\t\t\tthis.renewBeforeExpirationMs = AcmeConstants.RENEW_CERT_MIN;\n+\t\t\t\tTr.warning(tc, \"CWPKI2051W\", ms  +\"ms\", AcmeConstants.RENEW_CERT_MIN +\"ms\");\n+\t\t\t} else { \n+\t\t\t\tthis.renewBeforeExpirationMs = ms;\n+\t\t\t\t\n+\t\t\t\tif (ms < AcmeConstants.RENEW_CERT_MIN_WARN_LEVEL) { // we have a really low time configured. Allow it, but print a general warning.\n+\t\t\t\t\tTr.warning(tc, \"CWPKI2055W\", renewBeforeExpirationMs +\"ms\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t * Check that the valid period of the certificate works with the configured renewBeforeExpiration. Adjust the\n+\t * renew timing if necessary.\n+\t * \n+\t * @param notBefore\n+\t * @param notAfter\n+\t * @param serialNumber\n+\t */\n+\tpublic void checkRenewTimeAgainstCertValidityPeriod(Date notBefore, Date notAfter, String serialNumber) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82cca7ed5650ce13ba5deb1f473b4d1dcdfc8311"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1NjE2NQ==", "bodyText": "Probably don't need this. We used this in AcmeSimpleTest so we could make it work for both Pebble (https and acme URIs) and Boulder.", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418256165", "createdAt": "2020-04-30T20:01:54Z", "author": {"login": "jvanhill"}, "path": "dev/com.ibm.ws.security.acme_fat/fat/src/com/ibm/ws/security/acme/fat/AcmeValidityAndRenewTest.java", "diffHunk": "@@ -0,0 +1,373 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.security.acme.fat;\n+\n+import static junit.framework.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.ibm.websphere.simplicity.config.ServerConfiguration;\n+import com.ibm.websphere.simplicity.log.Log;\n+import com.ibm.ws.security.acme.docker.CAContainer;\n+import com.ibm.ws.security.acme.internal.util.AcmeConstants;\n+import com.ibm.ws.security.acme.utils.AcmeFatUtils;\n+\n+import componenttest.annotation.CheckForLeakedPasswords;\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+\n+/**\n+ * Verify that we log the correct warnings for different\n+ * validity/renewBeforeExpiration settings\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class AcmeValidityAndRenewTest {\n+\n+\t@Server(\"com.ibm.ws.security.acme.fat.simple\")\n+\tpublic static LibertyServer server;\n+\n+\tprivate static ServerConfiguration ORIGINAL_CONFIG;\n+\tprivate static final String[] DOMAINS1 = { \"domain1.com\" };\n+\n+\tpublic static CAContainer caContainer;\n+\n+\tpublic static final long timeBufferToExpire = 30000L; // milliseconds\n+\n+\t@BeforeClass\n+\tpublic static void beforeClass() throws Exception {\n+\t\tORIGINAL_CONFIG = server.getServerConfiguration();\n+\t\tcaContainer = new com.ibm.ws.security.acme.docker.pebble.PebbleContainer();\n+\t\tAcmeFatUtils.checkPortOpen(caContainer.getHttpPort(), 60000);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void afterClass() throws Exception {\n+\t\tif (caContainer != null) {\n+\t\t\tcaContainer.stop();\n+\t\t}\n+\t}\n+\n+\t@After\n+\tpublic void afterTest() {\n+\t\t/*\n+\t\t * Cleanup any generated ACME files.\n+\t\t */\n+\t\tAcmeFatUtils.deleteAcmeFiles(server);\n+\n+\t}\n+\n+\t/**\n+\t * Whether to use \"acme://\" style URIs, or \"https://\" style URIs.\n+\t * \n+\t * <p/>\n+\t * Sub-classes can override this method to determine which style URIs should be\n+\t * used.\n+\t * \n+\t * @return Whether to use \"acme://\" style URIs.\n+\t */\n+\tprotected boolean useAcmeURIs() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82cca7ed5650ce13ba5deb1f473b4d1dcdfc8311"}, "originalPosition": 88}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "82cca7ed5650ce13ba5deb1f473b4d1dcdfc8311", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/82cca7ed5650ce13ba5deb1f473b4d1dcdfc8311", "committedDate": "2020-04-30T19:38:16Z", "message": "Issue 11185: Add renewal request time configuration"}, "afterCommit": {"oid": "8bad02ebc415d86c5c420f4228d11015958ccd83", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/8bad02ebc415d86c5c420f4228d11015958ccd83", "committedDate": "2020-04-30T20:55:56Z", "message": "Issue 11185: Add renewal request time configuration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzOTI4NTQ4", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#pullrequestreview-403928548", "createdAt": "2020-04-30T22:47:05Z", "commit": {"oid": "8bad02ebc415d86c5c420f4228d11015958ccd83"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjo0NzowNVrOGO87ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjo0NzowNVrOGO87ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzMTQ5OA==", "bodyText": "remove double period\nThe validity period of the certificate with {0} serial number is shorter than the {1} minimum renew time..", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#discussion_r418331498", "createdAt": "2020-04-30T22:47:05Z", "author": {"login": "dmuelle"}, "path": "dev/com.ibm.ws.security.acme/resources/com/ibm/ws/security/acme/resources/AcmeMessages.nlsprops", "diffHunk": "@@ -226,3 +225,28 @@ CWPKI2049E.useraction=Manually replace the account key pair files as directed in\n CWPKI2050E=CWPKI2050E: Failed to back up the existing account key pair file while refreshing the account key pair. The error is ''{0}''.\n CWPKI2050E.explanation=The existing account key pair file was not be backed up. \n CWPKI2050E.useraction=Ensure that the directory that contains the existing account key pair file is writable. Review the error message for details on the failure.\n+\n+CWPKI2051W=CWPKI2051W: The renewBeforeExpiration property was set to {0} which is shorter than the minimum renew time. The renewBeforeExpiration property is reset to {1}.\n+CWPKI2051W.explanation=The value for the renewBeforeExpiration property was below the minimum duration to request a new certificate and is reset to the minimum renew time. This could have a negative impact on server performance.\n+CWPKI2051W.useraction=To avoid this warning message, set the renewBeforeExpiration property in the server configuration to a duration that is longer than the minimum renew time. To use the default setting, remove the renewBeforeExpiration property from the server configuration.\n+\n+CWPKI2052I=CWPKI2052I: The certificate with {0} serial number expires on {1}. The ACME service will request a new certificate from the ACME certificate authority at the {2} URI.\n+CWPKI2052I.explanation=The ACME service requests a new certificate based on the renewBeforeExpiration property in the server configuration and the expiration date of the certificate. If the renewBeforeExpiration property is not configured, the default value is used.\n+CWPKI2052I.useraction=No action is required.\n+\n+CWPKI2053W=CWPKI2053W: The certificate with {0} serial number expired on {1}. The ACME service is not configured to automatically request a new certificate.\n+CWPKI2053W.explanation=The TLS/SSL requests cannot complete because the certificate expired.\n+CWPKI2053W.useraction=Update the renewBeforeExpiration property in the server configuration to a value greater than 0 to automatically request a new certificate or use the ACME REST interface to request a new certificate.\n+\n+CWPKI2054W=CWPKI2054W: The renewBeforeExpiration property was set to {0}, which is equal to or longer than the validity period of the certificate with {1} serial number. The validity period of the certificate is {2}. The renewBeforeExpiration property is reset to {3}.\n+CWPKI2054W.explanation=The value of the renewBeforeExpiration property was longer than the validity period of the certificate. The renewBeforeExpiration property is reset to the default value.\n+CWPKI2054W.useraction=To avoid this warning message, set the renewBeforeExpiration property in the server configuration to an amount that is less than the length of the validity period of the certificate. To use the default setting, remove the renewBeforeExpiration property.\n+\n+CWPKI2055W=CWPKI2055W: The renewBeforeExpiration property is set to a short amount of time. The ACME service makes frequent requests for a new certificate. The renewBeforeExpiration property is {0}.\n+CWPKI2055W.explanation=Frequent certificate requests can have a negative impact on server performance. The number of requests can also exceed the number allowed by the certificate authority.\n+CWPKI2055W.useraction=To avoid this warning message, set the renewBeforeExpiration property in the server configuration to a longer duration. To use the default setting, remove the renewBeforeExpiration property from the server configuration.\n+\n+CWPKI2056W=CWPKI2056W: The validity period of the certificate with {0} serial number is shorter than the {1} minimum renew time.. The validity period of the certification is {2}. The renewBeforeExpiration property is reset to {3}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bad02ebc415d86c5c420f4228d11015958ccd83"}, "originalPosition": 33}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8bad02ebc415d86c5c420f4228d11015958ccd83", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/8bad02ebc415d86c5c420f4228d11015958ccd83", "committedDate": "2020-04-30T20:55:56Z", "message": "Issue 11185: Add renewal request time configuration"}, "afterCommit": {"oid": "2ce41549841ed860fb7297878336309b9ee7c3d8", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/2ce41549841ed860fb7297878336309b9ee7c3d8", "committedDate": "2020-05-01T02:07:51Z", "message": "Issue 11185: Add renewal request time configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "392706ee7ab5edfaa334fff6999cb3d33f2c9eb4", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/392706ee7ab5edfaa334fff6999cb3d33f2c9eb4", "committedDate": "2020-05-01T02:26:35Z", "message": "Issue 11185: Add renewal request time configuration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2ce41549841ed860fb7297878336309b9ee7c3d8", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/2ce41549841ed860fb7297878336309b9ee7c3d8", "committedDate": "2020-05-01T02:07:51Z", "message": "Issue 11185: Add renewal request time configuration"}, "afterCommit": {"oid": "392706ee7ab5edfaa334fff6999cb3d33f2c9eb4", "author": {"user": {"login": "kristip17", "name": "Kristi Peterson"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/392706ee7ab5edfaa334fff6999cb3d33f2c9eb4", "committedDate": "2020-05-01T02:26:35Z", "message": "Issue 11185: Add renewal request time configuration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MDA1MzA1", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#pullrequestreview-404005305", "createdAt": "2020-05-01T03:32:08Z", "commit": {"oid": "392706ee7ab5edfaa334fff6999cb3d33f2c9eb4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MTM5NTEy", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#pullrequestreview-404139512", "createdAt": "2020-05-01T12:39:25Z", "commit": {"oid": "392706ee7ab5edfaa334fff6999cb3d33f2c9eb4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MTU0NTgx", "url": "https://github.com/OpenLiberty/open-liberty/pull/11737#pullrequestreview-404154581", "createdAt": "2020-05-01T13:19:58Z", "commit": {"oid": "392706ee7ab5edfaa334fff6999cb3d33f2c9eb4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2798, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}