{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExNzg5MjMw", "number": 14742, "title": "Migrate FAT project 'com.ibm.ws.messaging.open_jms20context_fat' from\u2026", "bodyText": "Migration of JMS20 Context FAT from commercial: Folder 'dev/com.ibm.ws.messaging.jms20.JMSContext_fat'  migrated as 'com.ibm.ws.messaging.open_jms20context_fat':\nCreate FAT project.\nEnabled all tests, with the following exceptions:\n    JMSContextTest_118058\n    JMSContextTest_118061, except\n        testJMSRedelivered_B_SecOff() -- disabled in commercial liberty\n        testJMSRedelivered_TCP_SecOff() -- disabled in commercial liberty\n    JMSContextTest_118062\n        testGetMessageSelector_Null_B_SecOff() -- disabled in commercial liberty\n        testGetMessageSelector_Null_TCP_SecOff() -- disabled in commercial liberty\n    JMSContextTest_118067\n    JMSContextTest_118070\n    JMSContextTest_118075\n        testCloseConsumerDepth_TcpIp_SecOff() -- disabled in commercial liberty\n        testCloseConsumerSubscription_TcpIp_SecOff() -- disabled in commercial liberty\n        testNoLocalTrue_TcpIp_SecOff() -- disabled in commercial liberty\n\n    JMSContextTest_118065_TQ\n    JMSContextTest_118066_TQ\n    JMSContextTest_118068_TQ\n    JMSContextTest_118077_TQ\n\n    LiteBucketSet1Test\n    LiteBucketSet2Test\n        testTopicNameTOPIC_B_SecOff() -- not working; disabled\n        testTopicNameTOPIC_TcpIp_SecOff() -- not working; disabled\n    LiteBucketSet3Test\n\nThis is a FAT only update.  No produce or build code was updated.\nAt the completion of this FAT project migration, the corresponding FAT project commercial liberty will be removed.", "createdAt": "2020-10-28T19:32:53Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/14742", "merged": true, "mergeCommit": {"oid": "710603e1197d4f16ec45c3172948679c0d6433d6"}, "closed": true, "closedAt": "2020-11-07T23:58:41Z", "author": {"login": "tbitonti"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXC7HAABqjM5MzMwODMwMzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZ8kgLgFqTUyNTQ1MjIxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "564a88f90a7465bd30460ccc65ace8a2ed65c54c", "author": {"user": {"login": "tbitonti", "name": "Thomas Bitonti"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/564a88f90a7465bd30460ccc65ace8a2ed65c54c", "committedDate": "2020-10-28T19:25:08Z", "message": "Migrate FAT project 'com.ibm.ws.messaging.open_jms20context_fat' from commercial liberty.\nCreate FAT project;\nEnable all JMSTemporaryQueue test classes and one context test class:\n    JMSContextTest_118065_TQ\n    JMSContextTest_118066_TQ\n    JMSContextTest_118068_TQ\n    JMSContextTest_118077_TQ\n    JMSContextTest_118067"}, "afterCommit": {"oid": "ee4b07560cb2beead89cd6d292c215f1050e6d6a", "author": {"user": {"login": "tbitonti", "name": "Thomas Bitonti"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/ee4b07560cb2beead89cd6d292c215f1050e6d6a", "committedDate": "2020-10-28T19:41:28Z", "message": "Migrate FAT project 'com.ibm.ws.messaging.open_jms20context_fat' from commercial liberty.\nCreate FAT project;\nEnable all JMSTemporaryQueue test classes and one context test class:\n    JMSContextTest_118065_TQ\n    JMSContextTest_118066_TQ\n    JMSContextTest_118068_TQ\n    JMSContextTest_118077_TQ\n    JMSContextTest_118067"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eaf3803ab662f3233b41e3e221459f4162cd80f7", "author": {"user": {"login": "tbitonti", "name": "Thomas Bitonti"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/eaf3803ab662f3233b41e3e221459f4162cd80f7", "committedDate": "2020-10-28T19:44:19Z", "message": "Migrate FAT project 'com.ibm.ws.messaging.open_jms20context_fat' from commercial liberty.\nCreate FAT project;\nEnable all JMSTemporaryQueue test classes and one context test class:\n    JMSContextTest_118065_TQ\n    JMSContextTest_118066_TQ\n    JMSContextTest_118068_TQ\n    JMSContextTest_118077_TQ\n    JMSContextTest_118067"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee4b07560cb2beead89cd6d292c215f1050e6d6a", "author": {"user": {"login": "tbitonti", "name": "Thomas Bitonti"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/ee4b07560cb2beead89cd6d292c215f1050e6d6a", "committedDate": "2020-10-28T19:41:28Z", "message": "Migrate FAT project 'com.ibm.ws.messaging.open_jms20context_fat' from commercial liberty.\nCreate FAT project;\nEnable all JMSTemporaryQueue test classes and one context test class:\n    JMSContextTest_118065_TQ\n    JMSContextTest_118066_TQ\n    JMSContextTest_118068_TQ\n    JMSContextTest_118077_TQ\n    JMSContextTest_118067"}, "afterCommit": {"oid": "eaf3803ab662f3233b41e3e221459f4162cd80f7", "author": {"user": {"login": "tbitonti", "name": "Thomas Bitonti"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/eaf3803ab662f3233b41e3e221459f4162cd80f7", "committedDate": "2020-10-28T19:44:19Z", "message": "Migrate FAT project 'com.ibm.ws.messaging.open_jms20context_fat' from commercial liberty.\nCreate FAT project;\nEnable all JMSTemporaryQueue test classes and one context test class:\n    JMSContextTest_118065_TQ\n    JMSContextTest_118066_TQ\n    JMSContextTest_118068_TQ\n    JMSContextTest_118077_TQ\n    JMSContextTest_118067"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4af70cae056b4d16e3282ed57b3dbc435cdd7f89", "author": {"user": {"login": "tbitonti", "name": "Thomas Bitonti"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/4af70cae056b4d16e3282ed57b3dbc435cdd7f89", "committedDate": "2020-10-29T02:10:14Z", "message": "Enable test class JMSContext_118070Servlet."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5ODQ2NDYx", "url": "https://github.com/OpenLiberty/open-liberty/pull/14742#pullrequestreview-519846461", "createdAt": "2020-10-29T16:21:56Z", "commit": {"oid": "4af70cae056b4d16e3282ed57b3dbc435cdd7f89"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNjoyMTo1N1rOHqj_gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxODoyMzowMFrOHqpBaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM5MTkzOA==", "bodyText": "Please enable the FAT suite to run ee9, only.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14742#discussion_r514391938", "createdAt": "2020-10-29T16:21:57Z", "author": {"login": "dazavala"}, "path": "dev/com.ibm.ws.messaging.open_jms20context_fat/fat/src/com/ibm/ws/messaging/JMS20/fat/FATSuite.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*******************************************************************************\n+ * Copyright (c) 2013, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.messaging.JMS20.fat;\n+\n+import org.junit.ClassRule;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Suite;\n+import org.junit.runners.Suite.SuiteClasses;\n+\n+import componenttest.rules.repeater.JakartaEE9Action;\n+import componenttest.rules.repeater.RepeatTests;\n+\n+@RunWith(Suite.class)\n+@SuiteClasses({\n+        // All tests use the same client and engine servers:\n+        //   JMSContextClient, JMSContextEngine;\n+\n+        // Lite mode test classes:\n+\n+        // LiteBucketSet1Test.class,\n+        // LiteBucketSet2Test.class,\n+        // LiteBucketSet3Test.class,\n+\n+        // Full mode test classes:\n+\n+        // Many of the tests use the same client and engine server configurations?\n+        //   JMSContextClient.xml, JMSContextEngine.xml\n+\n+        // JMSContextTest_118058.class, // JMSContext App\n+        // JMSContextTest_118061.class, // JMSContext App\n+        // JMSContextTest_118062.class, // JMSContext App\n+\n+        JMSContextTest_118067.class, // JMSContext_118067 App\n+        JMSContextTest_118070.class, // JMSContext_118070 App\n+        // JMSContextTest_118075.class, // JMSContext_118075 App\n+\n+        // The temporary queue tests use different client and engine server configurations:\n+        //   JMSContextEngine_TQ.xml, JMSContextClient_TQ.xml; \n+\n+        JMSContextTest_118065_TQ.class, // JMSTemporaryQueue App\n+        JMSContextTest_118066_TQ.class, // JMSTemporaryQueue App\n+        JMSContextTest_118068_TQ.class, // JMSTemporaryQueue App\n+        JMSContextTest_118077_TQ.class, // JMSTemporaryQueue App\n+})\n+public class FATSuite {\n+    // Run only during the Jakarta repeat for now.  When\n+    // the tests are removed from WS-CD-Open, the pre-jakarta\n+    // repeat can be re-enabled in open-liberty.\n+\n+    @ClassRule", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af70cae056b4d16e3282ed57b3dbc435cdd7f89"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ2ODAwNQ==", "bodyText": "Eventually this server configuration file, and all others that contain jmsActivationSpec elements that declare a javax.jms.Queue or Topic as the destinationType, must be transformed.  Server and client xml files that require transformation for messaging tests are declared in the jakarta-xml-master.properties file in section #Messaging.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14742#discussion_r514468005", "createdAt": "2020-10-29T18:12:43Z", "author": {"login": "dazavala"}, "path": "dev/com.ibm.ws.messaging.open_jms20context_fat/publish/files/unused/185047_Bindings.xml", "diffHunk": "@@ -0,0 +1,76 @@\n+<server>\n+    <featureManager>                                                   \n+        <feature>jsp-2.3</feature>                                     \n+                <feature>wasJmsServer-1.0</feature>                    \n+                <feature>wasJmsClient-2.0</feature>                    \n+                <feature>jmsMdb-3.2</feature>\n+                <feature>testjmsinternals-1.0</feature>\n+                 <feature>timedexit-1.0</feature>                           \n+    </featureManager>\n+\n+    <include optional=\"true\" location=\"../fatTestPorts.xml\"/>\n+\n+    <variable name=\"onError\" value=\"FAIL\"/>\n+\n+    <messagingEngine id=\"defaultME\" >\n+\n+\t\t<queue id=\"Queue1\" \n+\t\t\t   maxRedeliveryCount=\"2\"\n+\t\t\t   >\n+\t\t</queue>\n+\t\t<queue id=\"Queue2\" \n+\t\t\t   maxRedeliveryCount=\"2\"\n+\t\t\t   >\n+\t\t</queue>\t\n+\t\n+\t\t\n+    <fileStore id=\"com.ibm.ws.sib.fileStore\"\n+      logFileSize=\"10\">\n+    </fileStore>\n+\n+\t </messagingEngine>\n+   \n+ <jmsQueue id=\"jndi_INPUT_Q\" jndiName=\"jndi_INPUT_Q\">\n+      <properties.wasJms queueName=\"newQueue\" />\n+    </jmsQueue> \n+          \n+    <jmsQueue id=\"eis/queue1\" jndiName=\"eis/queue1\">\n+      <properties.wasJms queueName=\"QUEUE1\" />\n+    </jmsQueue>\n+    \n+    <jmsQueue id=\"eis/queue2\" jndiName=\"eis/queue2\">\n+      <properties.wasJms queueName=\"Queue2\" />\n+    </jmsQueue>\n+    \n+    <jmsQueue id=\"queue/test\" jndiName=\"queue/test\">\n+      <properties.wasJms queueName=\"Queue10\" />\n+    </jmsQueue>\n+    \n+     <jmsQueue id=\"Queue11/test\" jndiName=\"Queue11/test\">\n+      <properties.wasJms queueName=\"Queue11\" />\n+    </jmsQueue>\n+    \n+    \n+    <connectionManager id=\"ConMgr5\" maxPoolSize=\"2\"/>\n+    \n+   <jmsQueueConnectionFactory jndiName=\"jndi_JMS_BASE_QCF1\" connectionManagerRef=\"ConMgr5\">                    \n+        <properties.wasJms remoteServerAddress=\"localhost:${bvt.prop.jms.1}:BootstrapBasicMessaging\"           \n+targetTransportChain=\"InboundBasicMessaging\"/>                         \n+    </jmsQueueConnectionFactory>\n+    \n+     <jmsQueueConnectionFactory jndiName=\"jndi_JMS_BASE_QCF\" connectionManagerRef=\"ConMgr6\">\n+      <properties.wasJms userName=\"CF1USER\" password=\"junkpassword\" /> \n+\t\t\t\t\t\t\t\t\t\t\t\t\n+    </jmsQueueConnectionFactory>\n+    \n+      \n+    \n+    <jmsActivationSpec id=\"jmsapp/jmsmdb/AckModeMessageDrivenBean\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af70cae056b4d16e3282ed57b3dbc435cdd7f89"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ3NDM0Nw==", "bodyText": "Fyi, If you scan for pattern // @Test when enabling specific test methods, you might miss this one.", "url": "https://github.com/OpenLiberty/open-liberty/pull/14742#discussion_r514474347", "createdAt": "2020-10-29T18:23:00Z", "author": {"login": "dazavala"}, "path": "dev/com.ibm.ws.messaging.open_jms20context_fat/fat/src/com/ibm/ws/messaging/JMS20/fat/JMSContextTest_118061.java", "diffHunk": "@@ -0,0 +1,467 @@\n+/*******************************************************************************\n+ * Copyright (c) 2013, 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.messaging.JMS20.fat;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.impl.LibertyServerFactory;\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+\n+@Mode(TestMode.FULL)\n+public class JMSContextTest_118061 {\n+    private static LibertyServer engineServer =\n+        LibertyServerFactory.getLibertyServer(\"JMSContextEngine\");\n+\n+    private static LibertyServer clientServer =\n+        LibertyServerFactory.getLibertyServer(\"JMSContextClient\");\n+    private static final int clientPort = clientServer.getHttpDefaultPort();\n+    private static final String clientHost = clientServer.getHostname();\n+\n+    private static final String appName = \"JMSContext\";\n+    private static final String[] appPackages = new String[] { \"jmscontext.web\" };\n+    private static final String contextRoot = \"JMSContext\";\n+\n+    private boolean runInServlet(String test) throws IOException {\n+        return TestUtils.runInServlet(clientHost, clientPort, contextRoot, test);\n+        // throws IOException\n+    }\n+\n+    @BeforeClass\n+    public static void testConfigFileChange() throws Exception {\n+        engineServer.copyFileToLibertyInstallRoot(\n+            \"lib/features\",\n+            \"features/testjmsinternals-1.0.mf\");\n+        engineServer.setServerConfigurationFile(\"JMSContextEngine.xml\");\n+\n+        clientServer.copyFileToLibertyInstallRoot(\n+            \"lib/features\",\n+            \"features/testjmsinternals-1.0.mf\");\n+        clientServer.setServerConfigurationFile(\"JMSContextClient.xml\");\n+        TestUtils.addDropinsWebApp(clientServer, appName, appPackages);\n+\n+        engineServer.startServer(\"JMSContextTest_118061_Engine.log\");\n+        clientServer.startServer(\"JMSContextTest_118061_Client.log\");\n+    }\n+\n+    @AfterClass\n+    public static void tearDown() {\n+        try {\n+            clientServer.stopServer();\n+        } catch ( Exception e ) {\n+            e.printStackTrace();\n+        }\n+\n+        try {\n+            engineServer.stopServer();\n+        } catch ( Exception e ) {\n+            e.printStackTrace();\n+        }\n+\n+        ShrinkHelper.cleanAllExportedArchives();\n+    }\n+\n+    // 118061 :JMSContext: Handle creation of various Message types for the\n+    // JMSContext to be used by applications to send and receive JMS messages\n+\n+    // 118061_3 Verify creation of Object message from JMSContext.\n+    // createObjectMessage(Serializable object).Perform a getObject,setObject\n+    // and getBody. Send and Receive\n+\n+    @Mode(TestMode.FULL)\n+    @Test\n+    public void testCreateObjectMessageSer_B_SecOff() throws Exception {\n+        boolean testResult = runInServlet(\"testCreateObjectMessageSer_B_SecOff\");\n+        assertTrue(\"Test testCreateObjectMessageSer_B_SecOff failed\", testResult);\n+    }\n+\n+    @Mode(TestMode.FULL)\n+    @Test\n+    public void testCreateObjectMessageSer_TCP_SecOff() throws Exception {\n+        boolean testResult = runInServlet(\"testCreateObjectMessageSer_TCP_SecOff\");\n+        assertTrue(\"Test testCreateObjectMessageSer_TCP_SecOff failed\", testResult);\n+    }\n+\n+    // 118061_4 Verify creation of Stream Message from\n+    // JMSContext.createStreamMessage(), Perform operation for setdata and\n+    // reading data. Send and Receive\n+\n+    @Mode(TestMode.FULL)\n+    @Test\n+    public void testCreateStreamMessage_B_SecOff() throws Exception {\n+        boolean testResult = runInServlet(\"testCreateStreamMessage_B_SecOff\");\n+        assertTrue(\"Test testCreateStreamMessage_B_SecOff failed\", testResult);\n+    }\n+\n+    @Mode(TestMode.FULL)\n+    @Test\n+    public void testCreateStreamMessage_TCP_SecOff() throws Exception {\n+        boolean testResult = runInServlet(\"testCreateStreamMessage_TCP_SecOff\");\n+        assertTrue(\"Test testCreateStreamMessage_TCP_SecOff failed\", testResult);\n+    }\n+\n+    // 118061_6 Verify creation of Text Message from\n+    // JMSContext.createTextMessage(String text). Send and Receive\n+\n+    @Mode(TestMode.FULL)\n+    @Test\n+    public void testCreateTextMessageStr_B_SecOff() throws Exception {\n+        boolean testResult = runInServlet(\"testCreateTextMessageStr_B_SecOff\");\n+        assertTrue(\"Test testCreateTextMessageStr_B_SecOff failed\", testResult);\n+    }\n+\n+    // TCP and Security Off\n+    @Mode(TestMode.FULL)\n+    @Test\n+    public void testCreateTextMessageStr_TCP_SecOff() throws Exception {\n+        boolean testResult = runInServlet(\"testCreateTextMessageStr_TCP_SecOff\");\n+        assertTrue(\"Test testCreateTextMessageStr_TCP_SecOff failed\", testResult);\n+    }\n+\n+    // 118061_7 Verify creation of Map Message from\n+    // JMSContext.createMapMessage() .Perform set and get operation. Send and\n+    // receive\n+\n+    @Mode(TestMode.FULL)\n+    @Test\n+    public void testCreateMapMessage_B_SecOff() throws Exception {\n+        boolean testResult = runInServlet(\"testCreateMapMessage_B_SecOff\");\n+        assertTrue(\"Test testCreateMapMessage_B_SecOff failed\", testResult);\n+    }\n+\n+    @Mode(TestMode.FULL)\n+    @Test\n+    public void testCreateMapMessage_TCP_SecOff() throws Exception {\n+        boolean testResult = runInServlet(\"testCreateMapMessage_TCP_SecOff\");\n+        assertTrue(\"Test testCreateMapMessage_TCP_SecOff failed\", testResult);\n+    }\n+\n+    // 118061_8 Verify creation of ByteMessage from\n+    // JMSContext.createBytesMessage(). Peform writeBytes, readBytes and getBody\n+    // operation. Send and Receive.\n+\n+    @Mode(TestMode.FULL)\n+    @Test\n+    public void testCreateBytesMessage_B_SecOff() throws Exception {\n+        boolean testResult = runInServlet(\"testCreateBytesMessage_B_SecOff\");\n+        assertTrue(\"Test testCreateBytesMessage_B_SecOff failed\", testResult);\n+    }\n+\n+    // TCP and Security Off\n+    @Mode(TestMode.FULL)\n+    @Test\n+    public void testCreateBytesMessage_TCP_SecOff() throws Exception {\n+        boolean testResult = runInServlet(\"testCreateBytesMessage_TCP_SecOff\");\n+        assertTrue(\"Test testCreateBytesMessage_TCP_SecOff failed\", testResult);\n+    }\n+\n+    // 118061_9 Verify set and get operation on Message header field\n+    // JMSDestination-\n+\n+    @Mode(TestMode.FULL)\n+    @Test\n+    public void testJMSDestination_B_SecOff() throws Exception {\n+        boolean testResult = runInServlet(\"testJMSDestination_B_SecOff\");\n+        assertTrue(\"Test testJMSDestination_B_SecOff failed\", testResult);\n+    }\n+\n+    @Mode(TestMode.FULL)\n+    @Test\n+    public void testJMSDestination_TCP_SecOff() throws Exception {\n+        boolean testResult = runInServlet(\"testJMSDestination_TCP_SecOff\");\n+        assertTrue(\"Test testJMSDestination_TCP_SecOff failed\", testResult);\n+    }\n+\n+    // 118061_10 Verify set and get operation on Message header field\n+    // JMSDeliveryMode-\n+\n+    @Mode(TestMode.FULL)\n+    @Test\n+    public void testJMSDeliveryMode_B_SecOff() throws Exception {\n+        boolean testResult = runInServlet(\"testJMSDeliveryMode_B_SecOff\");\n+        assertTrue(\"Test testJMSDeliveryMode_B_SecOff failed\", testResult);\n+    }\n+\n+    // TCP and Security Off\n+    @Mode(TestMode.FULL)\n+    @Test\n+    public void testJMSDeliveryMode_TCP_SecOff() throws Exception {\n+        boolean testResult = runInServlet(\"testJMSDeliveryMode_TCP_SecOff\");\n+        assertTrue(\"Test testJMSDeliveryMode_TCP_SecOff failed\", testResult);\n+    }\n+\n+    // 118061_12 Verify set and get operation on Message header field\n+    // JMSTimeStamp\n+\n+    @Mode(TestMode.FULL)\n+    @Test\n+    public void testJMSTimestamp_B_SecOff() throws Exception {\n+        boolean testResult = runInServlet(\"testJMSTimestamp_B_SecOff\");\n+        assertTrue(\"Test testJMSTimestamp_B_SecOff failed\", testResult);\n+    }\n+\n+    // TCP and Security Off\n+    @Mode(TestMode.FULL)\n+    @Test\n+    public void testJMSTimestamp_TCP_SecOff() throws Exception {\n+        boolean testResult = runInServlet(\"testJMSTimestamp_TCP_SecOff\");\n+        assertTrue(\"Test testJMSTimestamp_TCP_SecOff failed\", testResult);\n+    }\n+\n+    // 118061_13 Verify set and get operation on Message header field\n+    // JMSCorrelationID\n+\n+    @Mode(TestMode.FULL)\n+    @Test\n+    public void testJMSCorrelationID_B_SecOff() throws Exception {\n+        boolean testResult = runInServlet(\"testJMSCorrelationID_B_SecOff\");\n+        assertTrue(\"Test testJMSCorrelationID_B_SecOff failed\", testResult);\n+    }\n+\n+    @Mode(TestMode.FULL)\n+    @Test\n+    public void testJMSCorrelationID_TCP_SecOff() throws Exception {\n+        boolean testResult = runInServlet(\"testJMSCorrelationID_TCP_SecOff\");\n+        assertTrue(\"Test testJMSCorrelationID_TCP_SecOff failed\", testResult);\n+    }\n+\n+    // 118061_14 Verify set and get operation on Message header field\n+    // JMSCorrelationIDAsBytes\n+\n+    @Mode(TestMode.FULL)\n+    @Test\n+    public void testJMSCorrelationIDAsBytes_B_SecOff() throws Exception {\n+        boolean testResult = runInServlet(\"testJMSCorrelationIDAsBytes_B_SecOff\");\n+        assertTrue(\"Test testJMSCorrelationIDAsBytes_B_SecOff failed\", testResult);\n+    }\n+\n+    @Mode(TestMode.FULL)\n+    @Test\n+    public void testJMSCorrelationIDAsBytes_TCP_SecOff() throws Exception {\n+        boolean testResult = runInServlet(\"testJMSCorrelationIDAsBytes_TCP_SecOff\");\n+        assertTrue(\"Test testJMSCorrelationIDAsBytes_TCP_SecOff failed\", testResult);\n+    }\n+\n+    // 118061_15 Verify set and get operation on Message header field JMSReplyTo\n+\n+    @Mode(TestMode.FULL)\n+    @Test\n+    public void testJMSReplyTo_B_SecOff() throws Exception {\n+        boolean testResult = runInServlet(\"testJMSReplyTo_B_SecOff\");\n+        assertTrue(\"Test testJMSReplyTo_B_SecOff failed\", testResult);\n+    }\n+\n+    @Mode(TestMode.FULL)\n+    @Test\n+    public void testJMSReplyTo_TCP_SecOff() throws Exception {\n+        boolean testResult = runInServlet(\"testJMSReplyTo_TCP_SecOff\");\n+        assertTrue(\"Test testJMSReplyTo_TCP_SecOff failed\", testResult);\n+    }\n+\n+    // 118061_16 Verify set and get operation on Message header field\n+    // JMSRedelivered\n+\n+    // @Test\n+    public void testJMSRedelivered_B_SecOff() throws Exception {\n+        boolean testResult = runInServlet(\"testJMSRedelivered_B_SecOff\");\n+        assertTrue(\"Test testJMSRedelivered_B_SecOff failed\", testResult);\n+    }\n+\n+    //@Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4af70cae056b4d16e3282ed57b3dbc435cdd7f89"}, "originalPosition": 286}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88f535fd0d38c5d381c0a7e1344c9a1178ed6ea7", "author": {"user": {"login": "tbitonti", "name": "Thomas Bitonti"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/88f535fd0d38c5d381c0a7e1344c9a1178ed6ea7", "committedDate": "2020-11-04T04:49:41Z", "message": "Enable JMSContextTest_118075."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MzQ4NTM3", "url": "https://github.com/OpenLiberty/open-liberty/pull/14742#pullrequestreview-524348537", "createdAt": "2020-11-05T15:00:12Z", "commit": {"oid": "88f535fd0d38c5d381c0a7e1344c9a1178ed6ea7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd6f0a0b828fa0bbd9068bb1c87587fd84edbe45", "author": {"user": {"login": "tbitonti", "name": "Thomas Bitonti"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/dd6f0a0b828fa0bbd9068bb1c87587fd84edbe45", "committedDate": "2020-11-06T19:26:53Z", "message": "Enable Lite mode tests: LiteBucketSet1Test.java, LiteBucketSet2Test.java, LiteBucketSet3Test.java.\nSwitch to running with the Jakarta repeat, only.\nMove mdb application to \"unused\"."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1NDUyMjE1", "url": "https://github.com/OpenLiberty/open-liberty/pull/14742#pullrequestreview-525452215", "createdAt": "2020-11-06T19:59:31Z", "commit": {"oid": "dd6f0a0b828fa0bbd9068bb1c87587fd84edbe45"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3024, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}