{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3MjE5MDkw", "number": 13180, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoyMzowN1rOEbDATw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDowODoxMFrOEblqLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Nzk2MjM5OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.grpc_fat/fat/src/com/ibm/ws/fat/grpc/ClientConfigTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoyMzowN1rOHE1Qvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoyMzowN1rOHE1Qvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyODk5MA==", "bodyText": "How do we know that the new parm took affect?", "url": "https://github.com/OpenLiberty/open-liberty/pull/13180#discussion_r474828990", "createdAt": "2020-08-21T17:23:07Z", "author": {"login": "loriadi"}, "path": "dev/com.ibm.ws.grpc_fat/fat/src/com/ibm/ws/fat/grpc/ClientConfigTests.java", "diffHunk": "@@ -0,0 +1,415 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.fat.grpc;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.logging.Logger;\n+\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.gargoylesoftware.htmlunit.WebClient;\n+import com.gargoylesoftware.htmlunit.html.HtmlForm;\n+import com.gargoylesoftware.htmlunit.html.HtmlPage;\n+import com.gargoylesoftware.htmlunit.html.HtmlSubmitInput;\n+import com.gargoylesoftware.htmlunit.html.HtmlTextInput;\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.FATServletClient;\n+\n+/**\n+ *\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class ClientConfigTests extends FATServletClient {\n+\n+    protected static final Class<?> c = ClientConfigTests.class;\n+    private static final Logger LOG = Logger.getLogger(c.getName());\n+    private static final Set<String> appName = Collections.singleton(\"HelloWorldClient\");\n+    private static final Set<String> appName_srv = Collections.singleton(\"HelloWorldService\");\n+    private static final String DEFAULT_CONFIG_FILE = \"grpc.client.server.xml\";\n+    private static final String GRPCTARGET_ELEMENT = \"grpc.client.target.server.xml\";\n+    private static final String GRPCTARGET_PARAM = \"grpc.client.param.server.xml\";\n+    private static final String GRPCTARGET_NOMATCH = \"grpc.client.nomatch.server.xml\";\n+    private static final String GRPCTARGET_SPEC = \"grpc.client.spec.server.xml\";\n+    private static final String GRPCTARGET_WILDCARD = \"grpc.client.wildcard.server.xml\";\n+    private static final String NO_GRPCTARGET_ELEMENT = \"grpc.client.notarget.server.xml\";\n+    private static final String GRPCTARGET_MSGSIZEINVALID = \"grpc.client.invalidmsgsize.server.xml\";\n+    private static final String GRPCTARGET_MSGSIZESM = \"grpc.client.smallmsgsize.server.xml\";\n+    private static final String GRPCSERVER_SPEC = \"grpc.server.spec.server.xml\";\n+    private static final int SHORT_TIMEOUT = 500; // .5 seconds\n+    private static String serverConfigurationFile = DEFAULT_CONFIG_FILE;\n+\n+    @Server(\"GrpcClientOnly\")\n+    public static LibertyServer GrpcClientOnly;\n+\n+    @Server(\"GrpcServerOnly\")\n+    public static LibertyServer GrpcServerOnly;\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+        LOG.info(\"ClientConfigTests : setUp() : add helloWorldClient app to the grpc client\");\n+        // add all classes from com.ibm.ws.grpc.fat.helloworld.client, io.grpc.examples.helloworld,\n+        // and com.ibm.ws.fat.grpc.tls to a new app HelloWorldClient.war in the server that holds\n+        // the client.\n+        ShrinkHelper.defaultDropinApp(GrpcClientOnly, \"HelloWorldClient.war\",\n+                                      \"com.ibm.ws.grpc.fat.helloworld.client\",\n+                                      \"io.grpc.examples.helloworld\");\n+\n+        // Drop the server app into a different server\n+        LOG.info(\"ClientConfigTests : setUp() : add helloWorldServer app to the grpc server\");\n+        ShrinkHelper.defaultDropinApp(GrpcServerOnly, \"HelloWorldService.war\",\n+                                      \"com.ibm.ws.grpc.fat.helloworld.service\",\n+                                      \"io.grpc.examples.helloworld\");\n+\n+        LOG.info(\"ClientConfigTests : setUp() : start the grpc servers\");\n+        GrpcClientOnly.useSecondaryHTTPPort();\n+        GrpcClientOnly.startServer(ClientConfigTests.class.getSimpleName() + \".client.log\");\n+        GrpcServerOnly.startServer(ClientConfigTests.class.getSimpleName() + \".server.log\");\n+    }\n+\n+    @Rule\n+    public TestName name = new TestName();\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n+        // Stop the servers\n+        if (GrpcClientOnly != null && GrpcClientOnly.isStarted()) {\n+            GrpcClientOnly.stopServer(\"CWWKG0075E\", \"CWWKG0076W\");\n+        }\n+        if (GrpcServerOnly != null && GrpcServerOnly.isStarted()) {\n+            GrpcServerOnly.stopServer();\n+        }\n+    }\n+\n+    /**\n+     * Add a new <grpcTarget/> element and make sure it's applied\n+     * The original server.xml enables the grpc feature, but has no grpcTarget element.\n+     * Update the server with a server.xml that has a grpcTarget element,\n+     * make sure no errors, send a request.\n+     *\n+     * @throws Exception\n+     *\n+     **/\n+    @Test\n+    public void testAddGrpcClientElement() throws Exception {\n+\n+        LOG.info(\"ServiceConfigTests : testAddGrpcTargetElement() : update the server.xml file to one with a <grpcTarget> element.\");\n+\n+        // Update to a config file with a <grpcTarget> element\n+        setServerConfiguration(GrpcClientOnly, GRPCTARGET_ELEMENT);\n+        GrpcClientOnly.waitForConfigUpdateInLogUsingMark(appName);\n+    }\n+\n+    /**\n+     * Update an existing grpcTarget element\n+     *\n+     *\n+     * @throws Exception\n+     *\n+     **/\n+    @Test\n+    public void testUpdateGrpcClientParam() throws Exception {\n+        LOG.info(\"ServiceConfigTests : testUpdateGrpcClientParam() : update <grpcTarget> element with new parms.\");\n+\n+        // Update to a config file with a <grpcTarget> element\n+        setServerConfiguration(GrpcClientOnly, GRPCTARGET_PARAM);\n+        GrpcClientOnly.waitForConfigUpdateInLogUsingMark(appName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8de6b4b8d19a3b1f4e8ec29e80b681a4dbef2687"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Nzk2NTcyOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.grpc_fat/fat/src/com/ibm/ws/fat/grpc/ClientConfigTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoyNDowNlrOHE1StQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoyNDowNlrOHE1StQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyOTQ5Mw==", "bodyText": "I don't think changing the config is enough.  You should prove that the element worked, and then prove it stopped working after removing it.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13180#discussion_r474829493", "createdAt": "2020-08-21T17:24:06Z", "author": {"login": "loriadi"}, "path": "dev/com.ibm.ws.grpc_fat/fat/src/com/ibm/ws/fat/grpc/ClientConfigTests.java", "diffHunk": "@@ -0,0 +1,415 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.fat.grpc;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.logging.Logger;\n+\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.gargoylesoftware.htmlunit.WebClient;\n+import com.gargoylesoftware.htmlunit.html.HtmlForm;\n+import com.gargoylesoftware.htmlunit.html.HtmlPage;\n+import com.gargoylesoftware.htmlunit.html.HtmlSubmitInput;\n+import com.gargoylesoftware.htmlunit.html.HtmlTextInput;\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.FATServletClient;\n+\n+/**\n+ *\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class ClientConfigTests extends FATServletClient {\n+\n+    protected static final Class<?> c = ClientConfigTests.class;\n+    private static final Logger LOG = Logger.getLogger(c.getName());\n+    private static final Set<String> appName = Collections.singleton(\"HelloWorldClient\");\n+    private static final Set<String> appName_srv = Collections.singleton(\"HelloWorldService\");\n+    private static final String DEFAULT_CONFIG_FILE = \"grpc.client.server.xml\";\n+    private static final String GRPCTARGET_ELEMENT = \"grpc.client.target.server.xml\";\n+    private static final String GRPCTARGET_PARAM = \"grpc.client.param.server.xml\";\n+    private static final String GRPCTARGET_NOMATCH = \"grpc.client.nomatch.server.xml\";\n+    private static final String GRPCTARGET_SPEC = \"grpc.client.spec.server.xml\";\n+    private static final String GRPCTARGET_WILDCARD = \"grpc.client.wildcard.server.xml\";\n+    private static final String NO_GRPCTARGET_ELEMENT = \"grpc.client.notarget.server.xml\";\n+    private static final String GRPCTARGET_MSGSIZEINVALID = \"grpc.client.invalidmsgsize.server.xml\";\n+    private static final String GRPCTARGET_MSGSIZESM = \"grpc.client.smallmsgsize.server.xml\";\n+    private static final String GRPCSERVER_SPEC = \"grpc.server.spec.server.xml\";\n+    private static final int SHORT_TIMEOUT = 500; // .5 seconds\n+    private static String serverConfigurationFile = DEFAULT_CONFIG_FILE;\n+\n+    @Server(\"GrpcClientOnly\")\n+    public static LibertyServer GrpcClientOnly;\n+\n+    @Server(\"GrpcServerOnly\")\n+    public static LibertyServer GrpcServerOnly;\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+        LOG.info(\"ClientConfigTests : setUp() : add helloWorldClient app to the grpc client\");\n+        // add all classes from com.ibm.ws.grpc.fat.helloworld.client, io.grpc.examples.helloworld,\n+        // and com.ibm.ws.fat.grpc.tls to a new app HelloWorldClient.war in the server that holds\n+        // the client.\n+        ShrinkHelper.defaultDropinApp(GrpcClientOnly, \"HelloWorldClient.war\",\n+                                      \"com.ibm.ws.grpc.fat.helloworld.client\",\n+                                      \"io.grpc.examples.helloworld\");\n+\n+        // Drop the server app into a different server\n+        LOG.info(\"ClientConfigTests : setUp() : add helloWorldServer app to the grpc server\");\n+        ShrinkHelper.defaultDropinApp(GrpcServerOnly, \"HelloWorldService.war\",\n+                                      \"com.ibm.ws.grpc.fat.helloworld.service\",\n+                                      \"io.grpc.examples.helloworld\");\n+\n+        LOG.info(\"ClientConfigTests : setUp() : start the grpc servers\");\n+        GrpcClientOnly.useSecondaryHTTPPort();\n+        GrpcClientOnly.startServer(ClientConfigTests.class.getSimpleName() + \".client.log\");\n+        GrpcServerOnly.startServer(ClientConfigTests.class.getSimpleName() + \".server.log\");\n+    }\n+\n+    @Rule\n+    public TestName name = new TestName();\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n+        // Stop the servers\n+        if (GrpcClientOnly != null && GrpcClientOnly.isStarted()) {\n+            GrpcClientOnly.stopServer(\"CWWKG0075E\", \"CWWKG0076W\");\n+        }\n+        if (GrpcServerOnly != null && GrpcServerOnly.isStarted()) {\n+            GrpcServerOnly.stopServer();\n+        }\n+    }\n+\n+    /**\n+     * Add a new <grpcTarget/> element and make sure it's applied\n+     * The original server.xml enables the grpc feature, but has no grpcTarget element.\n+     * Update the server with a server.xml that has a grpcTarget element,\n+     * make sure no errors, send a request.\n+     *\n+     * @throws Exception\n+     *\n+     **/\n+    @Test\n+    public void testAddGrpcClientElement() throws Exception {\n+\n+        LOG.info(\"ServiceConfigTests : testAddGrpcTargetElement() : update the server.xml file to one with a <grpcTarget> element.\");\n+\n+        // Update to a config file with a <grpcTarget> element\n+        setServerConfiguration(GrpcClientOnly, GRPCTARGET_ELEMENT);\n+        GrpcClientOnly.waitForConfigUpdateInLogUsingMark(appName);\n+    }\n+\n+    /**\n+     * Update an existing grpcTarget element\n+     *\n+     *\n+     * @throws Exception\n+     *\n+     **/\n+    @Test\n+    public void testUpdateGrpcClientParam() throws Exception {\n+        LOG.info(\"ServiceConfigTests : testUpdateGrpcClientParam() : update <grpcTarget> element with new parms.\");\n+\n+        // Update to a config file with a <grpcTarget> element\n+        setServerConfiguration(GrpcClientOnly, GRPCTARGET_PARAM);\n+        GrpcClientOnly.waitForConfigUpdateInLogUsingMark(appName);\n+    }\n+\n+    /**\n+     * remove an existing grpcTarget element\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testRemoveGrpcClientElement() throws Exception {\n+        LOG.info(\"ServiceConfigTests : testRemoveGrpcClientElement() : remove <grpcTarget> element.\");\n+\n+        // First set a config with a <grpcTarget>\n+        setServerConfiguration(GrpcClientOnly, GRPCTARGET_ELEMENT);\n+        GrpcClientOnly.waitForConfigUpdateInLogUsingMark(appName);\n+\n+        // Update to a config file without a <grpcTarget> element\n+        setServerConfiguration(GrpcClientOnly, NO_GRPCTARGET_ELEMENT);\n+        GrpcClientOnly.waitForConfigUpdateInLogUsingMark(appName);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8de6b4b8d19a3b1f4e8ec29e80b681a4dbef2687"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODAwMjE0OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.grpc_fat/publish/files/grpc.client.server.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzozNjowMlrOHE1pKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzozNjowMlrOHE1pKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgzNTI0MA==", "bodyText": "This seems identical to the existing gprc.client.xml file, might not need it?", "url": "https://github.com/OpenLiberty/open-liberty/pull/13180#discussion_r474835240", "createdAt": "2020-08-21T17:36:02Z", "author": {"login": "loriadi"}, "path": "dev/com.ibm.ws.grpc_fat/publish/files/grpc.client.server.xml", "diffHunk": "@@ -0,0 +1,24 @@\n+<!--\n+    Copyright (c) 2020 IBM Corporation and others.\n+    All rights reserved. This program and the accompanying materials\n+    are made available under the terms of the Eclipse Public License v1.0\n+    which accompanies this distribution, and is available at\n+    http://www.eclipse.org/legal/epl-v10.html\n+   \n+    Contributors:\n+        IBM Corporation - initial API and implementation\n+ -->\n+<server description=\"FAT configuration for gRPC Client with no grpcTarget elements\">\n+    <featureManager>\n+        <feature>grpcClient-1.0</feature>\n+    </featureManager>\n+\n+\t<httpEndpoint id=\"defaultHttpEndpoint\"\n+                  host=\"*\"\n+                  httpPort=\"${bvt.prop.HTTP_secondary}\"\n+                  httpsPort=\"${bvt.prop.HTTP_secondary.secure}\"/>\n+    \n+    <include location=\"../fatTestCommon.xml\"/>\n+   \n+    <javaPermission className=\"java.security.AllPermission\"  name=\"*\" actions=\"*\" />\n+</server>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8de6b4b8d19a3b1f4e8ec29e80b681a4dbef2687"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzY0MDEzOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.grpc_fat/fat/src/com/ibm/ws/fat/grpc/ClientConfigTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDowODoxMFrOHFmuqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNToyMzozMFrOHFqOXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzOTQ2NQ==", "bodyText": "Going by the comment, I'd expect this test to check for an error case.  If you set a very small max inbound message size and request a response that's larger than that value, will it give an error?  This test case as it's written doesn't test that since us3r1 is less than 16 bytes.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13180#discussion_r475639465", "createdAt": "2020-08-24T14:08:10Z", "author": {"login": "wtlucy"}, "path": "dev/com.ibm.ws.grpc_fat/fat/src/com/ibm/ws/fat/grpc/ClientConfigTests.java", "diffHunk": "@@ -0,0 +1,592 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.fat.grpc;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.logging.Logger;\n+\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.gargoylesoftware.htmlunit.WebClient;\n+import com.gargoylesoftware.htmlunit.html.HtmlForm;\n+import com.gargoylesoftware.htmlunit.html.HtmlPage;\n+import com.gargoylesoftware.htmlunit.html.HtmlSubmitInput;\n+import com.gargoylesoftware.htmlunit.html.HtmlTextInput;\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.FATServletClient;\n+\n+/**\n+ *\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class ClientConfigTests extends FATServletClient {\n+\n+    protected static final Class<?> c = ClientConfigTests.class;\n+    private static final Logger LOG = Logger.getLogger(c.getName());\n+    private static final Set<String> appName = Collections.singleton(\"HelloWorldClient\");\n+    private static final Set<String> appName_srv = Collections.singleton(\"HelloWorldService\");\n+    private static final String DEFAULT_CONFIG_FILE = \"grpc.client.xml\";\n+    private static final String GRPCTARGET_ELEMENT = \"grpc.client.target.server.xml\";\n+    private static final String GRPCTARGET_PARAM = \"grpc.client.param.server.xml\";\n+    private static final String GRPCTARGET_NOMATCH = \"grpc.client.nomatch.server.xml\";\n+    private static final String GRPCTARGET_SPEC = \"grpc.client.spec.server.xml\";\n+    private static final String GRPCTARGET_WILDCARD = \"grpc.client.wildcard.server.xml\";\n+    private static final String NO_GRPCTARGET_ELEMENT = \"grpc.client.notarget.server.xml\";\n+    private static final String GRPCTARGET_MSGSIZEINVALID = \"grpc.client.invalidmsgsize.server.xml\";\n+    private static final String GRPCTARGET_MSGSIZESM = \"grpc.client.smallmsgsize.server.xml\";\n+    private static final String GRPCSERVER_SPEC = \"grpc.server.spec.server.xml\";\n+    private static final int SHORT_TIMEOUT = 500; // .5 seconds\n+    private static String serverConfigurationFile = DEFAULT_CONFIG_FILE;\n+\n+    @Server(\"GrpcClientOnly\")\n+    public static LibertyServer GrpcClientOnly;\n+\n+    @Server(\"GrpcServerOnly\")\n+    public static LibertyServer GrpcServerOnly;\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+        LOG.info(\"ClientConfigTests : setUp() : add helloWorldClient app to the grpc client\");\n+        // add all classes from com.ibm.ws.grpc.fat.helloworld.client, io.grpc.examples.helloworld,\n+        // and com.ibm.ws.fat.grpc.tls to a new app HelloWorldClient.war in the server that holds\n+        // the client.\n+        ShrinkHelper.defaultDropinApp(GrpcClientOnly, \"HelloWorldClient.war\",\n+                                      \"com.ibm.ws.grpc.fat.helloworld.client\",\n+                                      \"io.grpc.examples.helloworld\");\n+\n+        // Drop the server app into a different server\n+        LOG.info(\"ClientConfigTests : setUp() : add helloWorldServer app to the grpc server\");\n+        ShrinkHelper.defaultDropinApp(GrpcServerOnly, \"HelloWorldService.war\",\n+                                      \"com.ibm.ws.grpc.fat.helloworld.service\",\n+                                      \"io.grpc.examples.helloworld\");\n+\n+        LOG.info(\"ClientConfigTests : setUp() : start the grpc servers\");\n+        GrpcClientOnly.useSecondaryHTTPPort();\n+        GrpcClientOnly.startServer(ClientConfigTests.class.getSimpleName() + \".client.log\");\n+        GrpcServerOnly.startServer(ClientConfigTests.class.getSimpleName() + \".server.log\");\n+    }\n+\n+    @Rule\n+    public TestName name = new TestName();\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n+        // Stop the servers\n+        if (GrpcClientOnly != null && GrpcClientOnly.isStarted()) {\n+            GrpcClientOnly.stopServer(\"CWWKG0075E\", \"CWWKG0076W\");\n+        }\n+        if (GrpcServerOnly != null && GrpcServerOnly.isStarted()) {\n+            GrpcServerOnly.stopServer();\n+        }\n+    }\n+\n+    /**\n+     * Add a new <grpcTarget/> element and make sure it's applied\n+     * The original server.xml enables the grpc feature, but has no grpcTarget element.\n+     * Update the server with a server.xml that has a grpcTarget element,\n+     * make sure no errors, send a request.\n+     *\n+     * @throws Exception\n+     *\n+     **/\n+    @Test\n+    public void testAddGrpcClientElement() throws Exception {\n+\n+        LOG.info(\"ServiceConfigTests : testAddGrpcTargetElement() : update the server.xml file to one with a <grpcTarget> element.\");\n+\n+        // Update to a config file with a <grpcTarget> element\n+        setServerConfiguration(GrpcClientOnly, GRPCTARGET_ELEMENT);\n+        GrpcClientOnly.waitForConfigUpdateInLogUsingMark(appName);\n+        String contextRoot = \"HelloWorldClient\";\n+        try (WebClient webClient = new WebClient()) {\n+\n+            // Construct the URL for the test\n+            URL url = GrpcTestUtils.createHttpUrl(GrpcClientOnly, contextRoot, \"grpcClient\");\n+            HtmlPage page = (HtmlPage) webClient.getPage(url);\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            Log.info(c, name.getMethodName(), page.asXml());\n+\n+            assertTrue(\"the servlet was not loaded correctly\",\n+                       page.asText().contains(\"gRPC helloworld client example\"));\n+\n+            HtmlForm form = page.getFormByName(\"form1\");\n+\n+            // set a name in the form, which we'll expect the RPC to return\n+            HtmlTextInput inputText = (HtmlTextInput) form.getInputByName(\"user\");\n+            inputText.setValueAttribute(\"us3r1\");\n+\n+            // set the port of the grpcserver in the form\n+            HtmlTextInput inputPort = (HtmlTextInput) form.getInputByName(\"port\");\n+            inputPort.setValueAttribute(String.valueOf(GrpcServerOnly.getHttpDefaultPort()));\n+\n+            // set the hostname of the gprcserver in the form\n+            HtmlTextInput inputHost = (HtmlTextInput) form.getInputByName(\"address\");\n+            inputHost.setValueAttribute(GrpcServerOnly.getHostname());\n+\n+            // submit to the grpcClient, and execute the RPC\n+            HtmlSubmitInput submitButton = form.getInputByName(\"submit\");\n+            page = submitButton.click();\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            assertTrue(\"the gRPC request did not complete correctly\", page.asText().contains(\"us3r1\"));\n+\n+            //Make sure the Interceptor was called to verify match\n+            String interceptorHasRun = GrpcClientOnly.waitForStringInLog(\"com.ibm.ws.grpc.fat.helloworld.client.HelloWorldClientInterceptor has been invoked!\",\n+                                                                         SHORT_TIMEOUT);\n+            if (interceptorHasRun == null) {\n+                Assert.fail(c + \": server.xml with <grpcTarget> element: no interceptor ran when it should have in \" + SHORT_TIMEOUT + \"ms\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update an existing grpcTarget element\n+     *\n+     * @throws Exception\n+     *\n+     **/\n+    @Test\n+    public void testUpdateGrpcClientParam() throws Exception {\n+        LOG.info(\"ServiceConfigTests : testUpdateGrpcClientParam() : update <grpcTarget> element with new parms.\");\n+\n+        // First set a config with a <grpcTarget> that wouldn't match the helloworld client\n+        setServerConfiguration(GrpcClientOnly, GRPCTARGET_NOMATCH);\n+        GrpcClientOnly.waitForConfigUpdateInLogUsingMark(appName);\n+\n+        // Update to a config with a <grpcTarget> element with different parms\n+        setServerConfiguration(GrpcClientOnly, GRPCTARGET_PARAM);\n+        GrpcClientOnly.waitForConfigUpdateInLogUsingMark(appName);\n+\n+        String contextRoot = \"HelloWorldClient\";\n+        try (WebClient webClient = new WebClient()) {\n+\n+            // Construct the URL for the test\n+            URL url = GrpcTestUtils.createHttpUrl(GrpcClientOnly, contextRoot, \"grpcClient\");\n+            HtmlPage page = (HtmlPage) webClient.getPage(url);\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            Log.info(c, name.getMethodName(), page.asXml());\n+\n+            assertTrue(\"the servlet was not loaded correctly\",\n+                       page.asText().contains(\"gRPC helloworld client example\"));\n+\n+            HtmlForm form = page.getFormByName(\"form1\");\n+\n+            // set a name in the form, which we'll expect the RPC to return\n+            HtmlTextInput inputText = (HtmlTextInput) form.getInputByName(\"user\");\n+            inputText.setValueAttribute(\"us3r1\");\n+\n+            // set the port of the grpcserver in the form\n+            HtmlTextInput inputPort = (HtmlTextInput) form.getInputByName(\"port\");\n+            inputPort.setValueAttribute(String.valueOf(GrpcServerOnly.getHttpDefaultPort()));\n+\n+            // set the hostname of the gprcserver in the form\n+            HtmlTextInput inputHost = (HtmlTextInput) form.getInputByName(\"address\");\n+            inputHost.setValueAttribute(GrpcServerOnly.getHostname());\n+\n+            // submit to the grpcClient, and execute the RPC\n+            HtmlSubmitInput submitButton = form.getInputByName(\"submit\");\n+            page = submitButton.click();\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            assertTrue(\"the gRPC request did not complete correctly\", page.asText().contains(\"us3r1\"));\n+\n+            //Make sure the Interceptor was called to verify match\n+            String interceptorHasRun = GrpcClientOnly.waitForStringInLog(\"com.ibm.ws.grpc.fat.helloworld.client.HelloWorldClientInterceptor has been invoked!\",\n+                                                                         SHORT_TIMEOUT);\n+            if (interceptorHasRun == null) {\n+                Assert.fail(c + \": server.xml with <grpcTarget> element: no interceptor ran when it should have in \" + SHORT_TIMEOUT + \"ms\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * remove an existing grpcTarget element\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testRemoveGrpcClientElement() throws Exception {\n+        LOG.info(\"ServiceConfigTests : testRemoveGrpcClientElement() : remove <grpcTarget> element.\");\n+\n+        // First set a config with a <grpcTarget>\n+        setServerConfiguration(GrpcClientOnly, GRPCTARGET_ELEMENT);\n+        GrpcClientOnly.waitForConfigUpdateInLogUsingMark(appName);\n+\n+        // verify this client uses the target\n+        String contextRoot = \"HelloWorldClient\";\n+        try (WebClient webClient = new WebClient()) {\n+\n+            // Construct the URL for the test\n+            URL url = GrpcTestUtils.createHttpUrl(GrpcClientOnly, contextRoot, \"grpcClient\");\n+            HtmlPage page = (HtmlPage) webClient.getPage(url);\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            Log.info(c, name.getMethodName(), page.asXml());\n+\n+            assertTrue(\"the servlet was not loaded correctly\",\n+                       page.asText().contains(\"gRPC helloworld client example\"));\n+\n+            HtmlForm form = page.getFormByName(\"form1\");\n+\n+            // set a name in the form, which we'll expect the RPC to return\n+            HtmlTextInput inputText = (HtmlTextInput) form.getInputByName(\"user\");\n+            inputText.setValueAttribute(\"us3r1\");\n+\n+            // set the port of the grpcserver in the form\n+            HtmlTextInput inputPort = (HtmlTextInput) form.getInputByName(\"port\");\n+            inputPort.setValueAttribute(String.valueOf(GrpcServerOnly.getHttpDefaultPort()));\n+\n+            // set the hostname of the gprcserver in the form\n+            HtmlTextInput inputHost = (HtmlTextInput) form.getInputByName(\"address\");\n+            inputHost.setValueAttribute(GrpcServerOnly.getHostname());\n+\n+            // submit to the grpcClient, and execute the RPC\n+            HtmlSubmitInput submitButton = form.getInputByName(\"submit\");\n+            page = submitButton.click();\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            assertTrue(\"the gRPC request did not complete correctly\", page.asText().contains(\"us3r1\"));\n+\n+            //Make sure the Interceptor was called to verify match\n+            String interceptorHasRun = GrpcClientOnly.waitForStringInLog(\"com.ibm.ws.grpc.fat.helloworld.client.HelloWorldClientInterceptor has been invoked!\",\n+                                                                         SHORT_TIMEOUT);\n+            if (interceptorHasRun == null) {\n+                Assert.fail(c + \": server.xml with <grpcTarget> element: no interceptor ran when it should have in \" + SHORT_TIMEOUT + \"ms\");\n+            }\n+        }\n+\n+        // Update to a config file without a <grpcTarget> element\n+        setServerConfiguration(GrpcClientOnly, NO_GRPCTARGET_ELEMENT);\n+        GrpcClientOnly.waitForConfigUpdateInLogUsingMark(appName);\n+\n+        try (WebClient webClient = new WebClient()) {\n+\n+            // Construct the URL for the test\n+            URL url = GrpcTestUtils.createHttpUrl(GrpcClientOnly, contextRoot, \"grpcClient\");\n+            HtmlPage page = (HtmlPage) webClient.getPage(url);\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            Log.info(c, name.getMethodName(), page.asXml());\n+\n+            assertTrue(\"the servlet was not loaded correctly\",\n+                       page.asText().contains(\"gRPC helloworld client example\"));\n+\n+            HtmlForm form = page.getFormByName(\"form1\");\n+\n+            // set a name in the form, which we'll expect the RPC to return\n+            HtmlTextInput inputText = (HtmlTextInput) form.getInputByName(\"user\");\n+            inputText.setValueAttribute(\"us3r1\");\n+\n+            // set the port of the grpcserver in the form\n+            HtmlTextInput inputPort = (HtmlTextInput) form.getInputByName(\"port\");\n+            inputPort.setValueAttribute(String.valueOf(GrpcServerOnly.getHttpDefaultPort()));\n+\n+            // set the hostname of the gprcserver in the form\n+            HtmlTextInput inputHost = (HtmlTextInput) form.getInputByName(\"address\");\n+            inputHost.setValueAttribute(GrpcServerOnly.getHostname());\n+\n+            // submit to the grpcClient, and execute the RPC\n+            HtmlSubmitInput submitButton = form.getInputByName(\"submit\");\n+            page = submitButton.click();\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            assertTrue(\"the gRPC request did not complete correctly\", page.asText().contains(\"us3r1\"));\n+\n+            //Make sure the Interceptor was not called and did not log a message\n+            String interceptorHasRun = GrpcClientOnly.verifyStringNotInLogUsingMark(\"com.ibm.ws.grpc.fat.helloworld.client.HelloWorldClientInterceptor has been invoked!\",\n+                                                                                    SHORT_TIMEOUT);\n+            if (interceptorHasRun != null) {\n+                Assert.fail(c + \": server.xml with <grpcTarget> element interceptor ran when it should not have\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * validate that * matches all outbound calls\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testClientTargetWildcard() throws Exception {\n+        LOG.info(\"ServiceConfigTests : testClientTargetWildcard() : validate that * matches all outbound calls.\");\n+\n+        setServerConfiguration(GrpcClientOnly, GRPCTARGET_WILDCARD);\n+        GrpcClientOnly.waitForConfigUpdateInLogUsingMark(appName);\n+        String contextRoot = \"HelloWorldClient\";\n+        try (WebClient webClient = new WebClient()) {\n+\n+            // Construct the URL for the test\n+            URL url = GrpcTestUtils.createHttpUrl(GrpcClientOnly, contextRoot, \"grpcClient\");\n+            HtmlPage page = (HtmlPage) webClient.getPage(url);\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            Log.info(c, name.getMethodName(), page.asXml());\n+\n+            assertTrue(\"the servlet was not loaded correctly\",\n+                       page.asText().contains(\"gRPC helloworld client example\"));\n+\n+            HtmlForm form = page.getFormByName(\"form1\");\n+\n+            // set a name in the form, which we'll expect the RPC to return\n+            HtmlTextInput inputText = (HtmlTextInput) form.getInputByName(\"user\");\n+            inputText.setValueAttribute(\"us3r1\");\n+\n+            // set the port of the grpcserver in the form\n+            HtmlTextInput inputPort = (HtmlTextInput) form.getInputByName(\"port\");\n+            inputPort.setValueAttribute(String.valueOf(GrpcServerOnly.getHttpDefaultPort()));\n+\n+            // set the hostname of the gprcserver in the form\n+            HtmlTextInput inputHost = (HtmlTextInput) form.getInputByName(\"address\");\n+            inputHost.setValueAttribute(GrpcServerOnly.getHostname());\n+\n+            // submit to the grpcClient, and execute the RPC\n+            HtmlSubmitInput submitButton = form.getInputByName(\"submit\");\n+            page = submitButton.click();\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            assertTrue(\"the gRPC request did not complete correctly\", page.asText().contains(\"us3r1\"));\n+\n+            //Make sure the Interceptor was called to verify match\n+            String interceptorHasRun = GrpcClientOnly.waitForStringInLog(\"com.ibm.ws.grpc.fat.helloworld.client.HelloWorldClientInterceptor has been invoked!\",\n+                                                                         SHORT_TIMEOUT);\n+            if (interceptorHasRun == null) {\n+                Assert.fail(c + \": server.xml with <grpcTarget> element: no interceptor ran when it should have in \" + SHORT_TIMEOUT + \"ms\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Set a target that matches no existing service paths.\n+     * Verify with interceptor that should never run.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testClientTargetNoMatch() throws Exception {\n+        LOG.info(\"ServiceConfigTests : testClientTargetNoMatch() : validate no matches.\");\n+\n+        setServerConfiguration(GrpcClientOnly, GRPCTARGET_NOMATCH);\n+        GrpcClientOnly.waitForConfigUpdateInLogUsingMark(appName);\n+        String contextRoot = \"HelloWorldClient\";\n+        try (WebClient webClient = new WebClient()) {\n+\n+            // Construct the URL for the test\n+            URL url = GrpcTestUtils.createHttpUrl(GrpcClientOnly, contextRoot, \"grpcClient\");\n+            HtmlPage page = (HtmlPage) webClient.getPage(url);\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            Log.info(c, name.getMethodName(), page.asXml());\n+\n+            assertTrue(\"the servlet was not loaded correctly\",\n+                       page.asText().contains(\"gRPC helloworld client example\"));\n+\n+            HtmlForm form = page.getFormByName(\"form1\");\n+\n+            // set a name in the form, which we'll expect the RPC to return\n+            HtmlTextInput inputText = (HtmlTextInput) form.getInputByName(\"user\");\n+            inputText.setValueAttribute(\"us3r1\");\n+\n+            // set the port of the grpcserver in the form\n+            HtmlTextInput inputPort = (HtmlTextInput) form.getInputByName(\"port\");\n+            inputPort.setValueAttribute(String.valueOf(GrpcServerOnly.getHttpDefaultPort()));\n+\n+            // set the hostname of the gprcserver in the form\n+            HtmlTextInput inputHost = (HtmlTextInput) form.getInputByName(\"address\");\n+            inputHost.setValueAttribute(GrpcServerOnly.getHostname());\n+\n+            // submit to the grpcClient, and execute the RPC\n+            HtmlSubmitInput submitButton = form.getInputByName(\"submit\");\n+            page = submitButton.click();\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            assertTrue(\"the gRPC request did not complete correctly\", page.asText().contains(\"us3r1\"));\n+\n+            //Make sure the Interceptor was not called and did not log a message\n+            String interceptorHasRun = GrpcClientOnly.verifyStringNotInLogUsingMark(\"com.ibm.ws.grpc.fat.helloworld.client.HelloWorldClientInterceptor has been invoked!\",\n+                                                                                    SHORT_TIMEOUT);\n+            if (interceptorHasRun != null) {\n+                Assert.fail(c + \": server.xml with <grpcTarget> element interceptor ran when it should not have\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * test a specific match\n+     *\n+     * @throws Exception\n+     */\n+    // This test currently fails due to issue 13586\n+    //@Test\n+    public void testClientTargetSpecificMatch() throws Exception {\n+        LOG.info(\"ServiceConfigTests : testClientTargetSpecificMatch() : validate a specific match.\");\n+\n+        // set up client and server with same target name\n+        setServerConfiguration(GrpcClientOnly, GRPCTARGET_SPEC);\n+        GrpcClientOnly.waitForConfigUpdateInLogUsingMark(appName);\n+\n+        String contextRoot = \"HelloWorldClient\";\n+        try (WebClient webClient = new WebClient()) {\n+\n+            // Construct the URL for the test\n+            URL url = GrpcTestUtils.createHttpUrl(GrpcClientOnly, contextRoot, \"grpcClient\");\n+            HtmlPage page = (HtmlPage) webClient.getPage(url);\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            Log.info(c, name.getMethodName(), page.asXml());\n+\n+            assertTrue(\"the servlet was not loaded correctly\",\n+                       page.asText().contains(\"gRPC helloworld client example\"));\n+\n+            HtmlForm form = page.getFormByName(\"form1\");\n+\n+            // set a name in the form, which we'll expect the RPC to return\n+            HtmlTextInput inputText = (HtmlTextInput) form.getInputByName(\"user\");\n+            inputText.setValueAttribute(\"us3r1\");\n+\n+            // set the port of the grpcserver in the form\n+            HtmlTextInput inputPort = (HtmlTextInput) form.getInputByName(\"port\");\n+            inputPort.setValueAttribute(String.valueOf(GrpcServerOnly.getHttpDefaultPort()));\n+\n+            // set the hostname of the gprcserver in the form\n+            HtmlTextInput inputHost = (HtmlTextInput) form.getInputByName(\"address\");\n+            inputHost.setValueAttribute(GrpcServerOnly.getHostname());\n+\n+            // submit to the grpcClient, and execute the RPC\n+            HtmlSubmitInput submitButton = form.getInputByName(\"submit\");\n+            page = submitButton.click();\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            assertTrue(\"the gRPC request did not complete correctly\", page.asText().contains(\"us3r1\"));\n+\n+            //Make sure the Interceptor was called to verify match\n+            String interceptorHasRun = GrpcClientOnly.waitForStringInLog(\"com.ibm.ws.grpc.fat.helloworld.client.HelloWorldClientInterceptor has been invoked!\",\n+                                                                         SHORT_TIMEOUT);\n+            if (interceptorHasRun == null) {\n+                Assert.fail(c + \": server.xml with <grpcTarget> element: no interceptor ran when it should have in \" + SHORT_TIMEOUT + \"ms\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * test an invalid setting, verify error CWWKG0075E occurs\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testInvalidMaxInboundMessageSize() throws Exception {\n+        LOG.info(\"ServiceConfigTests : testInvalidMaxInboundMessageSize() : test an invalid setting.\");\n+\n+        setServerConfiguration(GrpcClientOnly, GRPCTARGET_MSGSIZEINVALID);\n+        GrpcClientOnly.waitForConfigUpdateInLogUsingMark(appName);\n+        assertNotNull(GrpcClientOnly.waitForStringInLog(\"CWWKG0075E: The value junk is not valid for attribute maxInboundMessageSize of configuration element grpcTarget\"));\n+    }\n+\n+    /**\n+     * test a very small setting, send a gRPC message\n+     * exceeding the value, and check the server error\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testSmallMaxInboundMessageSize() throws Exception {\n+        LOG.info(\"ServiceConfigTests : testSmallMaxInboundMessageSize() : test very small MaxInboundMessageSize.\");\n+\n+        setServerConfiguration(GrpcClientOnly, GRPCTARGET_MSGSIZESM);\n+        GrpcClientOnly.waitForConfigUpdateInLogUsingMark(appName);\n+        String contextRoot = \"HelloWorldClient\";\n+        try (WebClient webClient = new WebClient()) {\n+\n+            // Construct the URL for the test\n+            URL url = GrpcTestUtils.createHttpUrl(GrpcClientOnly, contextRoot, \"grpcClient\");\n+            HtmlPage page = (HtmlPage) webClient.getPage(url);\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            Log.info(c, name.getMethodName(), page.asXml());\n+\n+            assertTrue(\"the servlet was not loaded correctly\",\n+                       page.asText().contains(\"gRPC helloworld client example\"));\n+\n+            HtmlForm form = page.getFormByName(\"form1\");\n+\n+            // set a name in the form, which we'll expect the RPC to return\n+            HtmlTextInput inputText = (HtmlTextInput) form.getInputByName(\"user\");\n+            inputText.setValueAttribute(\"us3r1\");\n+\n+            // set the port of the grpcserver in the form\n+            HtmlTextInput inputPort = (HtmlTextInput) form.getInputByName(\"port\");\n+            inputPort.setValueAttribute(String.valueOf(GrpcServerOnly.getHttpDefaultPort()));\n+\n+            // set the hostname of the gprcserver in the form\n+            HtmlTextInput inputHost = (HtmlTextInput) form.getInputByName(\"address\");\n+            inputHost.setValueAttribute(GrpcServerOnly.getHostname());\n+\n+            // submit to the grpcClient, and execute the RPC\n+            HtmlSubmitInput submitButton = form.getInputByName(\"submit\");\n+            page = submitButton.click();\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            assertTrue(\"the gRPC request did not complete correctly\", page.asText().contains(\"us3r1\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b0475259a84ab8a6ee1ac07815203b9f4d8b676"}, "originalPosition": 573}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY5NjczNA==", "bodyText": "Ooops, meant to circle back to that test after I got the others working and forgot.  I'll have it fixed up momentarily.", "url": "https://github.com/OpenLiberty/open-liberty/pull/13180#discussion_r475696734", "createdAt": "2020-08-24T15:23:30Z", "author": {"login": "epj"}, "path": "dev/com.ibm.ws.grpc_fat/fat/src/com/ibm/ws/fat/grpc/ClientConfigTests.java", "diffHunk": "@@ -0,0 +1,592 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.fat.grpc;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.logging.Logger;\n+\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestName;\n+import org.junit.runner.RunWith;\n+\n+import com.gargoylesoftware.htmlunit.WebClient;\n+import com.gargoylesoftware.htmlunit.html.HtmlForm;\n+import com.gargoylesoftware.htmlunit.html.HtmlPage;\n+import com.gargoylesoftware.htmlunit.html.HtmlSubmitInput;\n+import com.gargoylesoftware.htmlunit.html.HtmlTextInput;\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+import com.ibm.websphere.simplicity.log.Log;\n+\n+import componenttest.annotation.Server;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.FATServletClient;\n+\n+/**\n+ *\n+ */\n+@RunWith(FATRunner.class)\n+@Mode(TestMode.FULL)\n+public class ClientConfigTests extends FATServletClient {\n+\n+    protected static final Class<?> c = ClientConfigTests.class;\n+    private static final Logger LOG = Logger.getLogger(c.getName());\n+    private static final Set<String> appName = Collections.singleton(\"HelloWorldClient\");\n+    private static final Set<String> appName_srv = Collections.singleton(\"HelloWorldService\");\n+    private static final String DEFAULT_CONFIG_FILE = \"grpc.client.xml\";\n+    private static final String GRPCTARGET_ELEMENT = \"grpc.client.target.server.xml\";\n+    private static final String GRPCTARGET_PARAM = \"grpc.client.param.server.xml\";\n+    private static final String GRPCTARGET_NOMATCH = \"grpc.client.nomatch.server.xml\";\n+    private static final String GRPCTARGET_SPEC = \"grpc.client.spec.server.xml\";\n+    private static final String GRPCTARGET_WILDCARD = \"grpc.client.wildcard.server.xml\";\n+    private static final String NO_GRPCTARGET_ELEMENT = \"grpc.client.notarget.server.xml\";\n+    private static final String GRPCTARGET_MSGSIZEINVALID = \"grpc.client.invalidmsgsize.server.xml\";\n+    private static final String GRPCTARGET_MSGSIZESM = \"grpc.client.smallmsgsize.server.xml\";\n+    private static final String GRPCSERVER_SPEC = \"grpc.server.spec.server.xml\";\n+    private static final int SHORT_TIMEOUT = 500; // .5 seconds\n+    private static String serverConfigurationFile = DEFAULT_CONFIG_FILE;\n+\n+    @Server(\"GrpcClientOnly\")\n+    public static LibertyServer GrpcClientOnly;\n+\n+    @Server(\"GrpcServerOnly\")\n+    public static LibertyServer GrpcServerOnly;\n+\n+    @BeforeClass\n+    public static void setUp() throws Exception {\n+        LOG.info(\"ClientConfigTests : setUp() : add helloWorldClient app to the grpc client\");\n+        // add all classes from com.ibm.ws.grpc.fat.helloworld.client, io.grpc.examples.helloworld,\n+        // and com.ibm.ws.fat.grpc.tls to a new app HelloWorldClient.war in the server that holds\n+        // the client.\n+        ShrinkHelper.defaultDropinApp(GrpcClientOnly, \"HelloWorldClient.war\",\n+                                      \"com.ibm.ws.grpc.fat.helloworld.client\",\n+                                      \"io.grpc.examples.helloworld\");\n+\n+        // Drop the server app into a different server\n+        LOG.info(\"ClientConfigTests : setUp() : add helloWorldServer app to the grpc server\");\n+        ShrinkHelper.defaultDropinApp(GrpcServerOnly, \"HelloWorldService.war\",\n+                                      \"com.ibm.ws.grpc.fat.helloworld.service\",\n+                                      \"io.grpc.examples.helloworld\");\n+\n+        LOG.info(\"ClientConfigTests : setUp() : start the grpc servers\");\n+        GrpcClientOnly.useSecondaryHTTPPort();\n+        GrpcClientOnly.startServer(ClientConfigTests.class.getSimpleName() + \".client.log\");\n+        GrpcServerOnly.startServer(ClientConfigTests.class.getSimpleName() + \".server.log\");\n+    }\n+\n+    @Rule\n+    public TestName name = new TestName();\n+\n+    @AfterClass\n+    public static void tearDown() throws Exception {\n+        // Stop the servers\n+        if (GrpcClientOnly != null && GrpcClientOnly.isStarted()) {\n+            GrpcClientOnly.stopServer(\"CWWKG0075E\", \"CWWKG0076W\");\n+        }\n+        if (GrpcServerOnly != null && GrpcServerOnly.isStarted()) {\n+            GrpcServerOnly.stopServer();\n+        }\n+    }\n+\n+    /**\n+     * Add a new <grpcTarget/> element and make sure it's applied\n+     * The original server.xml enables the grpc feature, but has no grpcTarget element.\n+     * Update the server with a server.xml that has a grpcTarget element,\n+     * make sure no errors, send a request.\n+     *\n+     * @throws Exception\n+     *\n+     **/\n+    @Test\n+    public void testAddGrpcClientElement() throws Exception {\n+\n+        LOG.info(\"ServiceConfigTests : testAddGrpcTargetElement() : update the server.xml file to one with a <grpcTarget> element.\");\n+\n+        // Update to a config file with a <grpcTarget> element\n+        setServerConfiguration(GrpcClientOnly, GRPCTARGET_ELEMENT);\n+        GrpcClientOnly.waitForConfigUpdateInLogUsingMark(appName);\n+        String contextRoot = \"HelloWorldClient\";\n+        try (WebClient webClient = new WebClient()) {\n+\n+            // Construct the URL for the test\n+            URL url = GrpcTestUtils.createHttpUrl(GrpcClientOnly, contextRoot, \"grpcClient\");\n+            HtmlPage page = (HtmlPage) webClient.getPage(url);\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            Log.info(c, name.getMethodName(), page.asXml());\n+\n+            assertTrue(\"the servlet was not loaded correctly\",\n+                       page.asText().contains(\"gRPC helloworld client example\"));\n+\n+            HtmlForm form = page.getFormByName(\"form1\");\n+\n+            // set a name in the form, which we'll expect the RPC to return\n+            HtmlTextInput inputText = (HtmlTextInput) form.getInputByName(\"user\");\n+            inputText.setValueAttribute(\"us3r1\");\n+\n+            // set the port of the grpcserver in the form\n+            HtmlTextInput inputPort = (HtmlTextInput) form.getInputByName(\"port\");\n+            inputPort.setValueAttribute(String.valueOf(GrpcServerOnly.getHttpDefaultPort()));\n+\n+            // set the hostname of the gprcserver in the form\n+            HtmlTextInput inputHost = (HtmlTextInput) form.getInputByName(\"address\");\n+            inputHost.setValueAttribute(GrpcServerOnly.getHostname());\n+\n+            // submit to the grpcClient, and execute the RPC\n+            HtmlSubmitInput submitButton = form.getInputByName(\"submit\");\n+            page = submitButton.click();\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            assertTrue(\"the gRPC request did not complete correctly\", page.asText().contains(\"us3r1\"));\n+\n+            //Make sure the Interceptor was called to verify match\n+            String interceptorHasRun = GrpcClientOnly.waitForStringInLog(\"com.ibm.ws.grpc.fat.helloworld.client.HelloWorldClientInterceptor has been invoked!\",\n+                                                                         SHORT_TIMEOUT);\n+            if (interceptorHasRun == null) {\n+                Assert.fail(c + \": server.xml with <grpcTarget> element: no interceptor ran when it should have in \" + SHORT_TIMEOUT + \"ms\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Update an existing grpcTarget element\n+     *\n+     * @throws Exception\n+     *\n+     **/\n+    @Test\n+    public void testUpdateGrpcClientParam() throws Exception {\n+        LOG.info(\"ServiceConfigTests : testUpdateGrpcClientParam() : update <grpcTarget> element with new parms.\");\n+\n+        // First set a config with a <grpcTarget> that wouldn't match the helloworld client\n+        setServerConfiguration(GrpcClientOnly, GRPCTARGET_NOMATCH);\n+        GrpcClientOnly.waitForConfigUpdateInLogUsingMark(appName);\n+\n+        // Update to a config with a <grpcTarget> element with different parms\n+        setServerConfiguration(GrpcClientOnly, GRPCTARGET_PARAM);\n+        GrpcClientOnly.waitForConfigUpdateInLogUsingMark(appName);\n+\n+        String contextRoot = \"HelloWorldClient\";\n+        try (WebClient webClient = new WebClient()) {\n+\n+            // Construct the URL for the test\n+            URL url = GrpcTestUtils.createHttpUrl(GrpcClientOnly, contextRoot, \"grpcClient\");\n+            HtmlPage page = (HtmlPage) webClient.getPage(url);\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            Log.info(c, name.getMethodName(), page.asXml());\n+\n+            assertTrue(\"the servlet was not loaded correctly\",\n+                       page.asText().contains(\"gRPC helloworld client example\"));\n+\n+            HtmlForm form = page.getFormByName(\"form1\");\n+\n+            // set a name in the form, which we'll expect the RPC to return\n+            HtmlTextInput inputText = (HtmlTextInput) form.getInputByName(\"user\");\n+            inputText.setValueAttribute(\"us3r1\");\n+\n+            // set the port of the grpcserver in the form\n+            HtmlTextInput inputPort = (HtmlTextInput) form.getInputByName(\"port\");\n+            inputPort.setValueAttribute(String.valueOf(GrpcServerOnly.getHttpDefaultPort()));\n+\n+            // set the hostname of the gprcserver in the form\n+            HtmlTextInput inputHost = (HtmlTextInput) form.getInputByName(\"address\");\n+            inputHost.setValueAttribute(GrpcServerOnly.getHostname());\n+\n+            // submit to the grpcClient, and execute the RPC\n+            HtmlSubmitInput submitButton = form.getInputByName(\"submit\");\n+            page = submitButton.click();\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            assertTrue(\"the gRPC request did not complete correctly\", page.asText().contains(\"us3r1\"));\n+\n+            //Make sure the Interceptor was called to verify match\n+            String interceptorHasRun = GrpcClientOnly.waitForStringInLog(\"com.ibm.ws.grpc.fat.helloworld.client.HelloWorldClientInterceptor has been invoked!\",\n+                                                                         SHORT_TIMEOUT);\n+            if (interceptorHasRun == null) {\n+                Assert.fail(c + \": server.xml with <grpcTarget> element: no interceptor ran when it should have in \" + SHORT_TIMEOUT + \"ms\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * remove an existing grpcTarget element\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testRemoveGrpcClientElement() throws Exception {\n+        LOG.info(\"ServiceConfigTests : testRemoveGrpcClientElement() : remove <grpcTarget> element.\");\n+\n+        // First set a config with a <grpcTarget>\n+        setServerConfiguration(GrpcClientOnly, GRPCTARGET_ELEMENT);\n+        GrpcClientOnly.waitForConfigUpdateInLogUsingMark(appName);\n+\n+        // verify this client uses the target\n+        String contextRoot = \"HelloWorldClient\";\n+        try (WebClient webClient = new WebClient()) {\n+\n+            // Construct the URL for the test\n+            URL url = GrpcTestUtils.createHttpUrl(GrpcClientOnly, contextRoot, \"grpcClient\");\n+            HtmlPage page = (HtmlPage) webClient.getPage(url);\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            Log.info(c, name.getMethodName(), page.asXml());\n+\n+            assertTrue(\"the servlet was not loaded correctly\",\n+                       page.asText().contains(\"gRPC helloworld client example\"));\n+\n+            HtmlForm form = page.getFormByName(\"form1\");\n+\n+            // set a name in the form, which we'll expect the RPC to return\n+            HtmlTextInput inputText = (HtmlTextInput) form.getInputByName(\"user\");\n+            inputText.setValueAttribute(\"us3r1\");\n+\n+            // set the port of the grpcserver in the form\n+            HtmlTextInput inputPort = (HtmlTextInput) form.getInputByName(\"port\");\n+            inputPort.setValueAttribute(String.valueOf(GrpcServerOnly.getHttpDefaultPort()));\n+\n+            // set the hostname of the gprcserver in the form\n+            HtmlTextInput inputHost = (HtmlTextInput) form.getInputByName(\"address\");\n+            inputHost.setValueAttribute(GrpcServerOnly.getHostname());\n+\n+            // submit to the grpcClient, and execute the RPC\n+            HtmlSubmitInput submitButton = form.getInputByName(\"submit\");\n+            page = submitButton.click();\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            assertTrue(\"the gRPC request did not complete correctly\", page.asText().contains(\"us3r1\"));\n+\n+            //Make sure the Interceptor was called to verify match\n+            String interceptorHasRun = GrpcClientOnly.waitForStringInLog(\"com.ibm.ws.grpc.fat.helloworld.client.HelloWorldClientInterceptor has been invoked!\",\n+                                                                         SHORT_TIMEOUT);\n+            if (interceptorHasRun == null) {\n+                Assert.fail(c + \": server.xml with <grpcTarget> element: no interceptor ran when it should have in \" + SHORT_TIMEOUT + \"ms\");\n+            }\n+        }\n+\n+        // Update to a config file without a <grpcTarget> element\n+        setServerConfiguration(GrpcClientOnly, NO_GRPCTARGET_ELEMENT);\n+        GrpcClientOnly.waitForConfigUpdateInLogUsingMark(appName);\n+\n+        try (WebClient webClient = new WebClient()) {\n+\n+            // Construct the URL for the test\n+            URL url = GrpcTestUtils.createHttpUrl(GrpcClientOnly, contextRoot, \"grpcClient\");\n+            HtmlPage page = (HtmlPage) webClient.getPage(url);\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            Log.info(c, name.getMethodName(), page.asXml());\n+\n+            assertTrue(\"the servlet was not loaded correctly\",\n+                       page.asText().contains(\"gRPC helloworld client example\"));\n+\n+            HtmlForm form = page.getFormByName(\"form1\");\n+\n+            // set a name in the form, which we'll expect the RPC to return\n+            HtmlTextInput inputText = (HtmlTextInput) form.getInputByName(\"user\");\n+            inputText.setValueAttribute(\"us3r1\");\n+\n+            // set the port of the grpcserver in the form\n+            HtmlTextInput inputPort = (HtmlTextInput) form.getInputByName(\"port\");\n+            inputPort.setValueAttribute(String.valueOf(GrpcServerOnly.getHttpDefaultPort()));\n+\n+            // set the hostname of the gprcserver in the form\n+            HtmlTextInput inputHost = (HtmlTextInput) form.getInputByName(\"address\");\n+            inputHost.setValueAttribute(GrpcServerOnly.getHostname());\n+\n+            // submit to the grpcClient, and execute the RPC\n+            HtmlSubmitInput submitButton = form.getInputByName(\"submit\");\n+            page = submitButton.click();\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            assertTrue(\"the gRPC request did not complete correctly\", page.asText().contains(\"us3r1\"));\n+\n+            //Make sure the Interceptor was not called and did not log a message\n+            String interceptorHasRun = GrpcClientOnly.verifyStringNotInLogUsingMark(\"com.ibm.ws.grpc.fat.helloworld.client.HelloWorldClientInterceptor has been invoked!\",\n+                                                                                    SHORT_TIMEOUT);\n+            if (interceptorHasRun != null) {\n+                Assert.fail(c + \": server.xml with <grpcTarget> element interceptor ran when it should not have\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * validate that * matches all outbound calls\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testClientTargetWildcard() throws Exception {\n+        LOG.info(\"ServiceConfigTests : testClientTargetWildcard() : validate that * matches all outbound calls.\");\n+\n+        setServerConfiguration(GrpcClientOnly, GRPCTARGET_WILDCARD);\n+        GrpcClientOnly.waitForConfigUpdateInLogUsingMark(appName);\n+        String contextRoot = \"HelloWorldClient\";\n+        try (WebClient webClient = new WebClient()) {\n+\n+            // Construct the URL for the test\n+            URL url = GrpcTestUtils.createHttpUrl(GrpcClientOnly, contextRoot, \"grpcClient\");\n+            HtmlPage page = (HtmlPage) webClient.getPage(url);\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            Log.info(c, name.getMethodName(), page.asXml());\n+\n+            assertTrue(\"the servlet was not loaded correctly\",\n+                       page.asText().contains(\"gRPC helloworld client example\"));\n+\n+            HtmlForm form = page.getFormByName(\"form1\");\n+\n+            // set a name in the form, which we'll expect the RPC to return\n+            HtmlTextInput inputText = (HtmlTextInput) form.getInputByName(\"user\");\n+            inputText.setValueAttribute(\"us3r1\");\n+\n+            // set the port of the grpcserver in the form\n+            HtmlTextInput inputPort = (HtmlTextInput) form.getInputByName(\"port\");\n+            inputPort.setValueAttribute(String.valueOf(GrpcServerOnly.getHttpDefaultPort()));\n+\n+            // set the hostname of the gprcserver in the form\n+            HtmlTextInput inputHost = (HtmlTextInput) form.getInputByName(\"address\");\n+            inputHost.setValueAttribute(GrpcServerOnly.getHostname());\n+\n+            // submit to the grpcClient, and execute the RPC\n+            HtmlSubmitInput submitButton = form.getInputByName(\"submit\");\n+            page = submitButton.click();\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            assertTrue(\"the gRPC request did not complete correctly\", page.asText().contains(\"us3r1\"));\n+\n+            //Make sure the Interceptor was called to verify match\n+            String interceptorHasRun = GrpcClientOnly.waitForStringInLog(\"com.ibm.ws.grpc.fat.helloworld.client.HelloWorldClientInterceptor has been invoked!\",\n+                                                                         SHORT_TIMEOUT);\n+            if (interceptorHasRun == null) {\n+                Assert.fail(c + \": server.xml with <grpcTarget> element: no interceptor ran when it should have in \" + SHORT_TIMEOUT + \"ms\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Set a target that matches no existing service paths.\n+     * Verify with interceptor that should never run.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testClientTargetNoMatch() throws Exception {\n+        LOG.info(\"ServiceConfigTests : testClientTargetNoMatch() : validate no matches.\");\n+\n+        setServerConfiguration(GrpcClientOnly, GRPCTARGET_NOMATCH);\n+        GrpcClientOnly.waitForConfigUpdateInLogUsingMark(appName);\n+        String contextRoot = \"HelloWorldClient\";\n+        try (WebClient webClient = new WebClient()) {\n+\n+            // Construct the URL for the test\n+            URL url = GrpcTestUtils.createHttpUrl(GrpcClientOnly, contextRoot, \"grpcClient\");\n+            HtmlPage page = (HtmlPage) webClient.getPage(url);\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            Log.info(c, name.getMethodName(), page.asXml());\n+\n+            assertTrue(\"the servlet was not loaded correctly\",\n+                       page.asText().contains(\"gRPC helloworld client example\"));\n+\n+            HtmlForm form = page.getFormByName(\"form1\");\n+\n+            // set a name in the form, which we'll expect the RPC to return\n+            HtmlTextInput inputText = (HtmlTextInput) form.getInputByName(\"user\");\n+            inputText.setValueAttribute(\"us3r1\");\n+\n+            // set the port of the grpcserver in the form\n+            HtmlTextInput inputPort = (HtmlTextInput) form.getInputByName(\"port\");\n+            inputPort.setValueAttribute(String.valueOf(GrpcServerOnly.getHttpDefaultPort()));\n+\n+            // set the hostname of the gprcserver in the form\n+            HtmlTextInput inputHost = (HtmlTextInput) form.getInputByName(\"address\");\n+            inputHost.setValueAttribute(GrpcServerOnly.getHostname());\n+\n+            // submit to the grpcClient, and execute the RPC\n+            HtmlSubmitInput submitButton = form.getInputByName(\"submit\");\n+            page = submitButton.click();\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            assertTrue(\"the gRPC request did not complete correctly\", page.asText().contains(\"us3r1\"));\n+\n+            //Make sure the Interceptor was not called and did not log a message\n+            String interceptorHasRun = GrpcClientOnly.verifyStringNotInLogUsingMark(\"com.ibm.ws.grpc.fat.helloworld.client.HelloWorldClientInterceptor has been invoked!\",\n+                                                                                    SHORT_TIMEOUT);\n+            if (interceptorHasRun != null) {\n+                Assert.fail(c + \": server.xml with <grpcTarget> element interceptor ran when it should not have\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * test a specific match\n+     *\n+     * @throws Exception\n+     */\n+    // This test currently fails due to issue 13586\n+    //@Test\n+    public void testClientTargetSpecificMatch() throws Exception {\n+        LOG.info(\"ServiceConfigTests : testClientTargetSpecificMatch() : validate a specific match.\");\n+\n+        // set up client and server with same target name\n+        setServerConfiguration(GrpcClientOnly, GRPCTARGET_SPEC);\n+        GrpcClientOnly.waitForConfigUpdateInLogUsingMark(appName);\n+\n+        String contextRoot = \"HelloWorldClient\";\n+        try (WebClient webClient = new WebClient()) {\n+\n+            // Construct the URL for the test\n+            URL url = GrpcTestUtils.createHttpUrl(GrpcClientOnly, contextRoot, \"grpcClient\");\n+            HtmlPage page = (HtmlPage) webClient.getPage(url);\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            Log.info(c, name.getMethodName(), page.asXml());\n+\n+            assertTrue(\"the servlet was not loaded correctly\",\n+                       page.asText().contains(\"gRPC helloworld client example\"));\n+\n+            HtmlForm form = page.getFormByName(\"form1\");\n+\n+            // set a name in the form, which we'll expect the RPC to return\n+            HtmlTextInput inputText = (HtmlTextInput) form.getInputByName(\"user\");\n+            inputText.setValueAttribute(\"us3r1\");\n+\n+            // set the port of the grpcserver in the form\n+            HtmlTextInput inputPort = (HtmlTextInput) form.getInputByName(\"port\");\n+            inputPort.setValueAttribute(String.valueOf(GrpcServerOnly.getHttpDefaultPort()));\n+\n+            // set the hostname of the gprcserver in the form\n+            HtmlTextInput inputHost = (HtmlTextInput) form.getInputByName(\"address\");\n+            inputHost.setValueAttribute(GrpcServerOnly.getHostname());\n+\n+            // submit to the grpcClient, and execute the RPC\n+            HtmlSubmitInput submitButton = form.getInputByName(\"submit\");\n+            page = submitButton.click();\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            assertTrue(\"the gRPC request did not complete correctly\", page.asText().contains(\"us3r1\"));\n+\n+            //Make sure the Interceptor was called to verify match\n+            String interceptorHasRun = GrpcClientOnly.waitForStringInLog(\"com.ibm.ws.grpc.fat.helloworld.client.HelloWorldClientInterceptor has been invoked!\",\n+                                                                         SHORT_TIMEOUT);\n+            if (interceptorHasRun == null) {\n+                Assert.fail(c + \": server.xml with <grpcTarget> element: no interceptor ran when it should have in \" + SHORT_TIMEOUT + \"ms\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * test an invalid setting, verify error CWWKG0075E occurs\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testInvalidMaxInboundMessageSize() throws Exception {\n+        LOG.info(\"ServiceConfigTests : testInvalidMaxInboundMessageSize() : test an invalid setting.\");\n+\n+        setServerConfiguration(GrpcClientOnly, GRPCTARGET_MSGSIZEINVALID);\n+        GrpcClientOnly.waitForConfigUpdateInLogUsingMark(appName);\n+        assertNotNull(GrpcClientOnly.waitForStringInLog(\"CWWKG0075E: The value junk is not valid for attribute maxInboundMessageSize of configuration element grpcTarget\"));\n+    }\n+\n+    /**\n+     * test a very small setting, send a gRPC message\n+     * exceeding the value, and check the server error\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testSmallMaxInboundMessageSize() throws Exception {\n+        LOG.info(\"ServiceConfigTests : testSmallMaxInboundMessageSize() : test very small MaxInboundMessageSize.\");\n+\n+        setServerConfiguration(GrpcClientOnly, GRPCTARGET_MSGSIZESM);\n+        GrpcClientOnly.waitForConfigUpdateInLogUsingMark(appName);\n+        String contextRoot = \"HelloWorldClient\";\n+        try (WebClient webClient = new WebClient()) {\n+\n+            // Construct the URL for the test\n+            URL url = GrpcTestUtils.createHttpUrl(GrpcClientOnly, contextRoot, \"grpcClient\");\n+            HtmlPage page = (HtmlPage) webClient.getPage(url);\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            Log.info(c, name.getMethodName(), page.asXml());\n+\n+            assertTrue(\"the servlet was not loaded correctly\",\n+                       page.asText().contains(\"gRPC helloworld client example\"));\n+\n+            HtmlForm form = page.getFormByName(\"form1\");\n+\n+            // set a name in the form, which we'll expect the RPC to return\n+            HtmlTextInput inputText = (HtmlTextInput) form.getInputByName(\"user\");\n+            inputText.setValueAttribute(\"us3r1\");\n+\n+            // set the port of the grpcserver in the form\n+            HtmlTextInput inputPort = (HtmlTextInput) form.getInputByName(\"port\");\n+            inputPort.setValueAttribute(String.valueOf(GrpcServerOnly.getHttpDefaultPort()));\n+\n+            // set the hostname of the gprcserver in the form\n+            HtmlTextInput inputHost = (HtmlTextInput) form.getInputByName(\"address\");\n+            inputHost.setValueAttribute(GrpcServerOnly.getHostname());\n+\n+            // submit to the grpcClient, and execute the RPC\n+            HtmlSubmitInput submitButton = form.getInputByName(\"submit\");\n+            page = submitButton.click();\n+\n+            // Log the page for debugging if necessary in the future.\n+            Log.info(c, name.getMethodName(), page.asText());\n+            assertTrue(\"the gRPC request did not complete correctly\", page.asText().contains(\"us3r1\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzOTQ2NQ=="}, "originalCommit": {"oid": "4b0475259a84ab8a6ee1ac07815203b9f4d8b676"}, "originalPosition": 573}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2979, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}