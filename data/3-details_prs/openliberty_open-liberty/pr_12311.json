{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMzk2MDY5", "number": 12311, "title": "Issue #11857: Create JakartaEE compliant feature for JACC.", "bodyText": "", "createdAt": "2020-05-21T14:46:55Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311", "merged": true, "mergeCommit": {"oid": "cf1e34ab8e5a4d7585d0c83d340782ee50967674"}, "closed": true, "closedAt": "2020-07-09T16:32:49Z", "author": {"login": "jvanhill"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclMfp7gBqjMzNzU2NjU0OTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczCwrcAFqTQ0NTE4NDY0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df82457589c7db872f189e60a66724ba8ce5ac11", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/df82457589c7db872f189e60a66724ba8ce5ac11", "committedDate": "2020-05-21T14:45:55Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}, "afterCommit": {"oid": "97be38f96d9bf4ba67ae5f4710cee6f20bba68c4", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/97be38f96d9bf4ba67ae5f4710cee6f20bba68c4", "committedDate": "2020-05-26T22:22:45Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "97be38f96d9bf4ba67ae5f4710cee6f20bba68c4", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/97be38f96d9bf4ba67ae5f4710cee6f20bba68c4", "committedDate": "2020-05-26T22:22:45Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}, "afterCommit": {"oid": "8c473824d597bd7dcb44194b2c3b34ba59d34e69", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/8c473824d597bd7dcb44194b2c3b34ba59d34e69", "committedDate": "2020-05-26T22:37:13Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8c473824d597bd7dcb44194b2c3b34ba59d34e69", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/8c473824d597bd7dcb44194b2c3b34ba59d34e69", "committedDate": "2020-05-26T22:37:13Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}, "afterCommit": {"oid": "86a7a06713bb3faf39a8ca4b5b572b2eeea32526", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/86a7a06713bb3faf39a8ca4b5b572b2eeea32526", "committedDate": "2020-05-29T21:52:37Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "86a7a06713bb3faf39a8ca4b5b572b2eeea32526", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/86a7a06713bb3faf39a8ca4b5b572b2eeea32526", "committedDate": "2020-05-29T21:52:37Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}, "afterCommit": {"oid": "2979c4d58fb90a3cb773fe285a23c36d54f265b4", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/2979c4d58fb90a3cb773fe285a23c36d54f265b4", "committedDate": "2020-05-29T22:19:24Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2979c4d58fb90a3cb773fe285a23c36d54f265b4", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/2979c4d58fb90a3cb773fe285a23c36d54f265b4", "committedDate": "2020-05-29T22:19:24Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}, "afterCommit": {"oid": "17ff0017c7ef5a1dd66c84f6cc4da57a21ad9174", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/17ff0017c7ef5a1dd66c84f6cc4da57a21ad9174", "committedDate": "2020-05-29T22:26:05Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "17ff0017c7ef5a1dd66c84f6cc4da57a21ad9174", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/17ff0017c7ef5a1dd66c84f6cc4da57a21ad9174", "committedDate": "2020-05-29T22:26:05Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}, "afterCommit": {"oid": "8bec6015730e8e9aed791afff7a7cb86edd89a36", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/8bec6015730e8e9aed791afff7a7cb86edd89a36", "committedDate": "2020-06-01T18:45:07Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8bec6015730e8e9aed791afff7a7cb86edd89a36", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/8bec6015730e8e9aed791afff7a7cb86edd89a36", "committedDate": "2020-06-01T18:45:07Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}, "afterCommit": {"oid": "4fe25075d95c6d4d9f075cfdc5f1b22b45429caf", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/4fe25075d95c6d4d9f075cfdc5f1b22b45429caf", "committedDate": "2020-06-02T16:32:39Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4fe25075d95c6d4d9f075cfdc5f1b22b45429caf", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/4fe25075d95c6d4d9f075cfdc5f1b22b45429caf", "committedDate": "2020-06-02T16:32:39Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}, "afterCommit": {"oid": "40032d8fbaaf20dfba7c6e5580c72379ed77b5b1", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/40032d8fbaaf20dfba7c6e5580c72379ed77b5b1", "committedDate": "2020-07-01T14:39:50Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "40032d8fbaaf20dfba7c6e5580c72379ed77b5b1", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/40032d8fbaaf20dfba7c6e5580c72379ed77b5b1", "committedDate": "2020-07-01T14:39:50Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}, "afterCommit": {"oid": "a70ee37508469d445d802c7518b885144841db81", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/a70ee37508469d445d802c7518b885144841db81", "committedDate": "2020-07-02T14:23:00Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a70ee37508469d445d802c7518b885144841db81", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/a70ee37508469d445d802c7518b885144841db81", "committedDate": "2020-07-02T14:23:00Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}, "afterCommit": {"oid": "4992e7bbb58c85ea7d4a8e28b4def1352715ec46", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/4992e7bbb58c85ea7d4a8e28b4def1352715ec46", "committedDate": "2020-07-02T14:30:17Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4992e7bbb58c85ea7d4a8e28b4def1352715ec46", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/4992e7bbb58c85ea7d4a8e28b4def1352715ec46", "committedDate": "2020-07-02T14:30:17Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}, "afterCommit": {"oid": "e4c4e9d1e2a7ca4b0776283be586139ad3b3411d", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/e4c4e9d1e2a7ca4b0776283be586139ad3b3411d", "committedDate": "2020-07-02T18:44:25Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMjIxNjQ3", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#pullrequestreview-443221647", "createdAt": "2020-07-06T16:17:31Z", "commit": {"oid": "e4c4e9d1e2a7ca4b0776283be586139ad3b3411d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjoxNzozMVrOGteKqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODozMzo1NFrOGtit3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMzMzM1NA==", "bodyText": "This bundle is already included as part of jacc-2.0 feature so it doesn't need to be exported again in this auto feature.  Same thing with jaccWeb-2.0 feature.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#discussion_r450333354", "createdAt": "2020-07-06T16:17:31Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.websphere.appserver.features/visibility/auto/io.openliberty.jaccEjb-2.0.feature", "diffHunk": "@@ -0,0 +1,9 @@\n+-include= ~${workspace}/cnf/resources/bnd/feature.props\n+symbolicName=io.openliberty.jaccEjb-2.0\n+IBM-Provision-Capability: osgi.identity; filter:=\"(&(type=osgi.subsystem.feature)(osgi.identity=io.openliberty.ejbCore-2.0))\", \\\n+ osgi.identity; filter:=\"(&(type=osgi.subsystem.feature)(osgi.identity=io.openliberty.jacc-2.0))\"\n+IBM-Install-Policy: when-satisfied\n+-bundles=io.openliberty.security.authorization.jacc.internal.ejb, \\\n+ io.openliberty.jakarta.jacc.2.0; location:=\"dev/api/spec/,lib\"; mavenCoordinates=\"jakarta.authorization:jakarta.authorization-api:2.0.0-RC1\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c4e9d1e2a7ca4b0776283be586139ad3b3411d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMzMzg5OQ==", "bodyText": "Should the io.openliberty.security.authorization.jacc.internal.xxx bundles be io.openliberty.security.authorization.internal.jacc.xxx?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#discussion_r450333899", "createdAt": "2020-07-06T16:18:19Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.websphere.appserver.features/visibility/auto/io.openliberty.jaccEjb-2.0.feature", "diffHunk": "@@ -0,0 +1,9 @@\n+-include= ~${workspace}/cnf/resources/bnd/feature.props\n+symbolicName=io.openliberty.jaccEjb-2.0\n+IBM-Provision-Capability: osgi.identity; filter:=\"(&(type=osgi.subsystem.feature)(osgi.identity=io.openliberty.ejbCore-2.0))\", \\\n+ osgi.identity; filter:=\"(&(type=osgi.subsystem.feature)(osgi.identity=io.openliberty.jacc-2.0))\"\n+IBM-Install-Policy: when-satisfied\n+-bundles=io.openliberty.security.authorization.jacc.internal.ejb, \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c4e9d1e2a7ca4b0776283be586139ad3b3411d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMzNzIxNQ==", "bodyText": "This should be the API private feature, not the public feature.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#discussion_r450337215", "createdAt": "2020-07-06T16:23:30Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.websphere.appserver.features/visibility/public/jacc-2.0/io.openliberty.jacc-2.0.feature", "diffHunk": "@@ -0,0 +1,22 @@\n+-include= ~${workspace}/cnf/resources/bnd/feature.props\n+symbolicName=io.openliberty.jacc-2.0\n+visibility=public\n+IBM-App-ForceRestart: install, \\\n+ uninstall\n+IBM-API-Package: jakarta.security.jacc; type=\"spec\", \\\n+ com.ibm.wsspi.security.authorization.jacc; type=\"ibm-api\"\n+IBM-ShortName: jacc-2.0\n+Subsystem-Name: Jakarta Authorization Contract for Containers 2.0\n+IBM-Install-Policy: when-satisfied\n+-features=com.ibm.websphere.appserver.servlet-5.0, \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c4e9d1e2a7ca4b0776283be586139ad3b3411d"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM1OTQyNA==", "bodyText": "Why did you create a new component instead of transforming the com.ibm.websphere.appserver.api.jacc component?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#discussion_r450359424", "createdAt": "2020-07-06T17:00:21Z", "author": {"login": "jhanders34"}, "path": "dev/io.openliberty.jacc.2.0/bnd.bnd", "diffHunk": "@@ -0,0 +1,27 @@\n+#*******************************************************************************\n+# Copyright (c) 2020 IBM Corporation and others.\n+# All rights reserved. This program and the accompanying materials\n+# are made available under the terms of the Eclipse Public License v1.0\n+# which accompanies this distribution, and is available at\n+# http://www.eclipse.org/legal/epl-v10.html\n+#\n+# Contributors:\n+#     IBM Corporation - initial API and implementation\n+#*******************************************************************************\n+-include= ~../cnf/resources/bnd/bundle.props\n+bVersion: 1.0\n+\n+Bundle-Name: JACC 2.0 Service Provider Interface", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c4e9d1e2a7ca4b0776283be586139ad3b3411d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwNTIzOA==", "bodyText": "I am concerned about the jaccHandlerKeyArray.  Does there need to be jakarta version of those properties instead of the java EE ones.  You can use something like what is done here to help with some of this:\nhttps://github.com/OpenLiberty/open-liberty/blob/integration/dev/com.ibm.ws.concurrent/src/com/ibm/ws/concurrent/internal/ScheduledTask.java#L431\nYou can have an eeVersion put into your Component to allow you to know if you are doing EE9 or less than EE9.  You can see how to do that in the concurrent project.  If you need help, let me know.  But you can avoid the calling of getMessageContext(InitialContext) and some of the follow on code if it is EE9 or above.\nYou could also consider to have a second impl of this class where you call a method to do the MessageContext and it does nothing for EE9, but does the old way for EE8 and less.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#discussion_r450405238", "createdAt": "2020-07-06T18:28:32Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.ws.security.authorization.jacc.ejb/src/com/ibm/ws/security/authorization/jacc/ejb/impl/EJBSecurityValidatorImpl.java", "diffHunk": "@@ -84,66 +90,110 @@ private boolean checkMethodConstraints(final String contextId,\n                                            final HashMap<String, Object> handlerObjects) throws PrivilegedActionException {\n         Boolean result = Boolean.FALSE;\n         result = AccessController.doPrivileged(\n-                        new PrivilegedExceptionAction<Boolean>() {\n-                            @Override\n-                            public Boolean run() throws javax.security.jacc.PolicyContextException {\n-                                PolicyContext.setContextID(contextId);\n+                                               new PrivilegedExceptionAction<Boolean>() {\n+                                                   @Override\n+                                                   public Boolean run() throws javax.security.jacc.PolicyContextException {\n+                                                       PolicyContext.setContextID(contextId);\n \n-                                if (tc.isDebugEnabled())\n-                                    Tr.debug(tc, \"Registering JACC context handlers\");\n-                                for (String key : jaccHandlerKeyArray) {\n-                                    PolicyContext.registerHandler(key, pch, true);\n-                                }\n-                                handlerObjects.put(jaccHandlerKeyArray[0], subject);\n-                                handlerObjects.put(jaccHandlerKeyArray[1], bean);\n-                                handlerObjects.put(jaccHandlerKeyArray[2], methodParameters);\n-                                MessageContext mc = null;\n-                                try {\n-                                    InitialContext ic = new InitialContext();\n-                                    mc = getMessageContext(ic);\n-                                } catch (NamingException e) {\n-                                    if (tc.isDebugEnabled())\n-                                        Tr.debug(tc, \"NamingException is caught. Ignoring..\", e);\n-                                }\n-                                if (mc != null) {\n-                                    if (tc.isDebugEnabled())\n-                                        Tr.debug(tc, \"javax.xml.soap.SOAPMessage is set: \", mc);\n-                                    handlerObjects.put(jaccHandlerKeyArray[3], mc);\n-                                }\n-                                ProtectionDomain pd = null;\n-\n-                                if (subject != null && subject.getPrincipals().size() > 0) {\n-                                    Principal[] principalArray = subject.getPrincipals().toArray(new Principal[subject.getPrincipals().size()]);\n-                                    pd = new ProtectionDomain(nullCs, null, null, principalArray);\n-                                } else {\n-                                    pd = nullPd;\n-                                }\n+                                                       if (tc.isDebugEnabled())\n+                                                           Tr.debug(tc, \"Registering JACC context handlers\");\n+                                                       for (String key : jaccHandlerKeyArray) {\n+                                                           PolicyContext.registerHandler(key, pch, true);\n+                                                       }\n+                                                       handlerObjects.put(jaccHandlerKeyArray[0], subject);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c4e9d1e2a7ca4b0776283be586139ad3b3411d"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwNzkwMg==", "bodyText": "Need to look at the generated manifest to see if the JAXRPC is added to the manifest for the Jakarta EE 9 version of the bundle.  If it is, then you may need to adjust the imports to make it optional possibly.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#discussion_r450407902", "createdAt": "2020-07-06T18:33:54Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.ws.security.authorization.jacc.ejb/bnd.bnd", "diffHunk": "@@ -16,6 +16,15 @@ Bundle-SymbolicName: com.ibm.ws.security.authorization.jacc.ejb\n Bundle-Description: WAS Security EJB support for JACC Service, version=${bVersion}\n Bundle-ActivationPolicy: lazy\n \n+#\n+# Produce a JakartaEE compliant JAR.\n+#\n+jakartaeeMe: true\n+jakartaee.transform.jar.name=io.openliberty.security.authorization.jacc.internal.ejb.jar\n+JakartaEE-Bundle-Name: EJB support for Jakarta Authorization 2.0\n+JakartaEE-Bundle-Symbolic-Name: io.openliberty.security.authorization.jacc.internal.ejb\n+JakartaEE-Bundle-Description: EJB support for Jakarta Authorization 2.0\n+JakartaEE-Bundle-Version: 2.0\n \n WS-TraceGroup: Authorization\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4c4e9d1e2a7ca4b0776283be586139ad3b3411d"}, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e4c4e9d1e2a7ca4b0776283be586139ad3b3411d", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/e4c4e9d1e2a7ca4b0776283be586139ad3b3411d", "committedDate": "2020-07-02T18:44:25Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}, "afterCommit": {"oid": "dee8a62ee5a497175fd5e69ec9b00e064660c259", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/dee8a62ee5a497175fd5e69ec9b00e064660c259", "committedDate": "2020-07-07T15:37:15Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MDkwMTA1", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#pullrequestreview-444090105", "createdAt": "2020-07-07T17:08:24Z", "commit": {"oid": "dee8a62ee5a497175fd5e69ec9b00e064660c259"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzowODoyNFrOGuH3Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzozMTo1NVrOGuItFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxNjQ5OQ==", "bodyText": "Add output=\"bin_test\" to this classpathentry.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#discussion_r451016499", "createdAt": "2020-07-07T17:08:24Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.ws.security.authorization.jacc.ejb/.classpath", "diffHunk": "@@ -1,6 +1,7 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <classpath>\n \t<classpathentry kind=\"src\" path=\"src\"/>\n+\t<classpathentry kind=\"src\" path=\"test\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dee8a62ee5a497175fd5e69ec9b00e064660c259"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxOTI0Mw==", "bodyText": "Do the copyrights of the test files need to be updated to have ,2020 on them as well?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#discussion_r451019243", "createdAt": "2020-07-07T17:13:02Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.ws.security.authorization.jacc.ejb/test/com/ibm/ws/security/authorization/jacc/ejb/impl/DummyPolicyConfigurationFactory.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015 IBM Corporation and others.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dee8a62ee5a497175fd5e69ec9b00e064660c259"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyMjQ1NQ==", "bodyText": "To be clear JakartaEE 9 removed this support.  It is still there in JakartaEE 8", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#discussion_r451022455", "createdAt": "2020-07-07T17:18:23Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.ws.security.authorization.jacc.ejb/src/com/ibm/ws/security/authorization/jacc/ejb/impl/EJBSecurityValidatorImpl.java", "diffHunk": "@@ -84,67 +92,81 @@ private boolean checkMethodConstraints(final String contextId,\n                                            final HashMap<String, Object> handlerObjects) throws PrivilegedActionException {\n         Boolean result = Boolean.FALSE;\n         result = AccessController.doPrivileged(\n-                        new PrivilegedExceptionAction<Boolean>() {\n-                            @Override\n-                            public Boolean run() throws javax.security.jacc.PolicyContextException {\n-                                PolicyContext.setContextID(contextId);\n-\n-                                if (tc.isDebugEnabled())\n-                                    Tr.debug(tc, \"Registering JACC context handlers\");\n-                                for (String key : jaccHandlerKeyArray) {\n-                                    PolicyContext.registerHandler(key, pch, true);\n-                                }\n-                                handlerObjects.put(jaccHandlerKeyArray[0], subject);\n-                                handlerObjects.put(jaccHandlerKeyArray[1], bean);\n-                                handlerObjects.put(jaccHandlerKeyArray[2], methodParameters);\n-                                MessageContext mc = null;\n-                                try {\n-                                    InitialContext ic = new InitialContext();\n-                                    mc = getMessageContext(ic);\n-                                } catch (NamingException e) {\n-                                    if (tc.isDebugEnabled())\n-                                        Tr.debug(tc, \"NamingException is caught. Ignoring..\", e);\n-                                }\n-                                if (mc != null) {\n-                                    if (tc.isDebugEnabled())\n-                                        Tr.debug(tc, \"javax.xml.soap.SOAPMessage is set: \", mc);\n-                                    handlerObjects.put(jaccHandlerKeyArray[3], mc);\n-                                }\n-                                ProtectionDomain pd = null;\n-\n-                                if (subject != null && subject.getPrincipals().size() > 0) {\n-                                    Principal[] principalArray = subject.getPrincipals().toArray(new Principal[subject.getPrincipals().size()]);\n-                                    pd = new ProtectionDomain(nullCs, null, null, principalArray);\n-                                } else {\n-                                    pd = nullPd;\n-                                }\n-\n-                                if (tc.isDebugEnabled())\n-                                    Tr.debug(tc, \"Setting JACC handler data\");\n-                                PolicyContext.setHandlerData(handlerObjects);\n-                                if (tc.isDebugEnabled())\n-                                    Tr.debug(tc, \"Calling JACC implies. PD : \" + pd);\n-                                return Policy.getPolicy().implies(pd, permission);\n-                            }\n-                        });\n+                                               new PrivilegedExceptionAction<Boolean>() {\n+                                                   @Override\n+                                                   public Boolean run() throws javax.security.jacc.PolicyContextException {\n+                                                       PolicyContext.setContextID(contextId);\n+\n+                                                       if (tc.isDebugEnabled())\n+                                                           Tr.debug(tc, \"Registering JACC context handlers\");\n+                                                       for (String key : jaccHandlerKeyArray) {\n+                                                           PolicyContext.registerHandler(key, pch, true);\n+                                                       }\n+                                                       handlerObjects.put(jaccHandlerKeyArray[0], subject);\n+                                                       handlerObjects.put(jaccHandlerKeyArray[1], bean);\n+                                                       handlerObjects.put(jaccHandlerKeyArray[2], methodParameters);\n+\n+                                                       /*\n+                                                        * JavaEE supports JAX-RPC MessageContext. JakartaEE removed this support.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dee8a62ee5a497175fd5e69ec9b00e064660c259"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAzMDI5Mg==", "bodyText": "I had hoped that the version check would have been here before newing up the InitialContext.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#discussion_r451030292", "createdAt": "2020-07-07T17:31:55Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.ws.security.authorization.jacc.ejb/src/com/ibm/ws/security/authorization/jacc/ejb/impl/EJBSecurityValidatorImpl.java", "diffHunk": "@@ -84,67 +92,81 @@ private boolean checkMethodConstraints(final String contextId,\n                                            final HashMap<String, Object> handlerObjects) throws PrivilegedActionException {\n         Boolean result = Boolean.FALSE;\n         result = AccessController.doPrivileged(\n-                        new PrivilegedExceptionAction<Boolean>() {\n-                            @Override\n-                            public Boolean run() throws javax.security.jacc.PolicyContextException {\n-                                PolicyContext.setContextID(contextId);\n-\n-                                if (tc.isDebugEnabled())\n-                                    Tr.debug(tc, \"Registering JACC context handlers\");\n-                                for (String key : jaccHandlerKeyArray) {\n-                                    PolicyContext.registerHandler(key, pch, true);\n-                                }\n-                                handlerObjects.put(jaccHandlerKeyArray[0], subject);\n-                                handlerObjects.put(jaccHandlerKeyArray[1], bean);\n-                                handlerObjects.put(jaccHandlerKeyArray[2], methodParameters);\n-                                MessageContext mc = null;\n-                                try {\n-                                    InitialContext ic = new InitialContext();\n-                                    mc = getMessageContext(ic);\n-                                } catch (NamingException e) {\n-                                    if (tc.isDebugEnabled())\n-                                        Tr.debug(tc, \"NamingException is caught. Ignoring..\", e);\n-                                }\n-                                if (mc != null) {\n-                                    if (tc.isDebugEnabled())\n-                                        Tr.debug(tc, \"javax.xml.soap.SOAPMessage is set: \", mc);\n-                                    handlerObjects.put(jaccHandlerKeyArray[3], mc);\n-                                }\n-                                ProtectionDomain pd = null;\n-\n-                                if (subject != null && subject.getPrincipals().size() > 0) {\n-                                    Principal[] principalArray = subject.getPrincipals().toArray(new Principal[subject.getPrincipals().size()]);\n-                                    pd = new ProtectionDomain(nullCs, null, null, principalArray);\n-                                } else {\n-                                    pd = nullPd;\n-                                }\n-\n-                                if (tc.isDebugEnabled())\n-                                    Tr.debug(tc, \"Setting JACC handler data\");\n-                                PolicyContext.setHandlerData(handlerObjects);\n-                                if (tc.isDebugEnabled())\n-                                    Tr.debug(tc, \"Calling JACC implies. PD : \" + pd);\n-                                return Policy.getPolicy().implies(pd, permission);\n-                            }\n-                        });\n+                                               new PrivilegedExceptionAction<Boolean>() {\n+                                                   @Override\n+                                                   public Boolean run() throws javax.security.jacc.PolicyContextException {\n+                                                       PolicyContext.setContextID(contextId);\n+\n+                                                       if (tc.isDebugEnabled())\n+                                                           Tr.debug(tc, \"Registering JACC context handlers\");\n+                                                       for (String key : jaccHandlerKeyArray) {\n+                                                           PolicyContext.registerHandler(key, pch, true);\n+                                                       }\n+                                                       handlerObjects.put(jaccHandlerKeyArray[0], subject);\n+                                                       handlerObjects.put(jaccHandlerKeyArray[1], bean);\n+                                                       handlerObjects.put(jaccHandlerKeyArray[2], methodParameters);\n+\n+                                                       /*\n+                                                        * JavaEE supports JAX-RPC MessageContext. JakartaEE removed this support.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyMjQ1NQ=="}, "originalCommit": {"oid": "dee8a62ee5a497175fd5e69ec9b00e064660c259"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MTEwMzQy", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#pullrequestreview-444110342", "createdAt": "2020-07-07T17:36:45Z", "commit": {"oid": "dee8a62ee5a497175fd5e69ec9b00e064660c259"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzozNjo0NVrOGuI33A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzozNjo0NVrOGuI33A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAzMzA1Mg==", "bodyText": "Shouldn't this be io.openliberty.security.authorization.internal.jacc?", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#discussion_r451033052", "createdAt": "2020-07-07T17:36:45Z", "author": {"login": "jhanders34"}, "path": "dev/io.openliberty.jacc.2.0/bnd.bnd", "diffHunk": "@@ -0,0 +1,27 @@\n+#*******************************************************************************\n+# Copyright (c) 2020 IBM Corporation and others.\n+# All rights reserved. This program and the accompanying materials\n+# are made available under the terms of the Eclipse Public License v1.0\n+# which accompanies this distribution, and is available at\n+# http://www.eclipse.org/legal/epl-v10.html\n+#\n+# Contributors:\n+#     IBM Corporation - initial API and implementation\n+#*******************************************************************************\n+-include= ~../cnf/resources/bnd/bundle.props\n+bVersion: 1.0\n+\n+Bundle-Name: JACC 2.0 Service Provider Interface\n+Bundle-Description: JACC 2.0 Service Provider Interface, version ${bVersion}\n+Bundle-SymbolicName: io.openliberty.jacc.2.0\n+\n+Import-Package: com.ibm.wsspi.security.authorization.jacc\n+\n+Export-Package: com.ibm.wsspi.security.authorization.jacc\n+\n+-includeresource: {META-INF/maven/io.openliberty.api/io.openliberty.jacc.2.0/pom.xml=io.openliberty.jacc.2.0.pom}\n+\n+publish.wlp.jar.suffix: dev/api/ibm\n+\n+-buildpath: \\\n+\tcom.ibm.ws.security.authorization.jacc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dee8a62ee5a497175fd5e69ec9b00e064660c259"}, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dee8a62ee5a497175fd5e69ec9b00e064660c259", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/dee8a62ee5a497175fd5e69ec9b00e064660c259", "committedDate": "2020-07-07T15:37:15Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}, "afterCommit": {"oid": "6fc1becec5f23a0595746894e692893674796974", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/6fc1becec5f23a0595746894e692893674796974", "committedDate": "2020-07-07T22:16:36Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0de586caa8ad421d48da385a42c65ec9b8f1928e", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/0de586caa8ad421d48da385a42c65ec9b8f1928e", "committedDate": "2020-07-08T21:28:56Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6fc1becec5f23a0595746894e692893674796974", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/6fc1becec5f23a0595746894e692893674796974", "committedDate": "2020-07-07T22:16:36Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}, "afterCommit": {"oid": "0de586caa8ad421d48da385a42c65ec9b8f1928e", "author": {"user": {"login": "jvanhill", "name": "Jesse Van Hill"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/0de586caa8ad421d48da385a42c65ec9b8f1928e", "committedDate": "2020-07-08T21:28:56Z", "message": "Issue #11857: Create JakartaEE compliant feature for JACC."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MTg0NjQx", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#pullrequestreview-445184641", "createdAt": "2020-07-08T23:01:05Z", "commit": {"oid": "0de586caa8ad421d48da385a42c65ec9b8f1928e"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMzowMTowNVrOGu8BQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMzowMTowNVrOGu8BQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg3MTA0Mw==", "bodyText": "Is PolicyContextHandlerImpl the only possible handler?  By setting both you can get an IllegalArgumentException if the handler doesn't support the key.  If it is a JACC 1.5 handler it won't know how to process the EE9 arguments, so you will end up breaking zero migration.  Also since you know that argument 0 and 1 are the same it seems like a waste to call it for each one of them even if you stuck with this approach.  I think you need to do what you were doing before and just do the first arguments for the spec level.  The jacc provider will have to implement the jarkarta handler and update to do the new parameters anyway.  Maybe have a common array as well if you are going to keep with your current approach.", "url": "https://github.com/OpenLiberty/open-liberty/pull/12311#discussion_r451871043", "createdAt": "2020-07-08T23:01:05Z", "author": {"login": "jhanders34"}, "path": "dev/com.ibm.ws.security.authorization.jacc.ejb/src/com/ibm/ws/security/authorization/jacc/ejb/impl/EJBSecurityValidatorImpl.java", "diffHunk": "@@ -84,55 +98,70 @@ private boolean checkMethodConstraints(final String contextId,\n                                            final HashMap<String, Object> handlerObjects) throws PrivilegedActionException {\n         Boolean result = Boolean.FALSE;\n         result = AccessController.doPrivileged(\n-                        new PrivilegedExceptionAction<Boolean>() {\n-                            @Override\n-                            public Boolean run() throws javax.security.jacc.PolicyContextException {\n-                                PolicyContext.setContextID(contextId);\n-\n-                                if (tc.isDebugEnabled())\n-                                    Tr.debug(tc, \"Registering JACC context handlers\");\n-                                for (String key : jaccHandlerKeyArray) {\n-                                    PolicyContext.registerHandler(key, pch, true);\n-                                }\n-                                handlerObjects.put(jaccHandlerKeyArray[0], subject);\n-                                handlerObjects.put(jaccHandlerKeyArray[1], bean);\n-                                handlerObjects.put(jaccHandlerKeyArray[2], methodParameters);\n-                                MessageContext mc = null;\n-                                try {\n-                                    InitialContext ic = new InitialContext();\n-                                    mc = getMessageContext(ic);\n-                                } catch (NamingException e) {\n-                                    if (tc.isDebugEnabled())\n-                                        Tr.debug(tc, \"NamingException is caught. Ignoring..\", e);\n-                                }\n-                                if (mc != null) {\n-                                    if (tc.isDebugEnabled())\n-                                        Tr.debug(tc, \"javax.xml.soap.SOAPMessage is set: \", mc);\n-                                    handlerObjects.put(jaccHandlerKeyArray[3], mc);\n-                                }\n-                                ProtectionDomain pd = null;\n-\n-                                if (subject != null && subject.getPrincipals().size() > 0) {\n-                                    Principal[] principalArray = subject.getPrincipals().toArray(new Principal[subject.getPrincipals().size()]);\n-                                    pd = new ProtectionDomain(nullCs, null, null, principalArray);\n-                                } else {\n-                                    pd = nullPd;\n-                                }\n-\n-                                if (tc.isDebugEnabled())\n-                                    Tr.debug(tc, \"Setting JACC handler data\");\n-                                PolicyContext.setHandlerData(handlerObjects);\n-                                if (tc.isDebugEnabled())\n-                                    Tr.debug(tc, \"Calling JACC implies. PD : \" + pd);\n-                                return Policy.getPolicy().implies(pd, permission);\n-                            }\n-                        });\n+                                               new PrivilegedExceptionAction<Boolean>() {\n+                                                   @Override\n+                                                   public Boolean run() throws javax.security.jacc.PolicyContextException {\n+                                                       PolicyContext.setContextID(contextId);\n+\n+                                                       if (tc.isDebugEnabled())\n+                                                           Tr.debug(tc, \"Registering JACC context handlers\");\n+\n+                                                       for (String key : jaccHandlerKeyArrayEe8) {\n+                                                           PolicyContext.registerHandler(key, pch, true);\n+                                                       }\n+                                                       for (String key : jaccHandlerKeyArrayEe9) {\n+                                                           PolicyContext.registerHandler(key, pch, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de586caa8ad421d48da385a42c65ec9b8f1928e"}, "originalPosition": 112}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2491, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}