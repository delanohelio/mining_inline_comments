{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0OTUzMjU2", "number": 10494, "title": "Expose Producer and ConsumerRecord", "bodyText": "#build\ninvestigation for epic #9570", "createdAt": "2020-01-20T18:12:45Z", "url": "https://github.com/OpenLiberty/open-liberty/pull/10494", "merged": true, "mergeCommit": {"oid": "8816b5fd4bf9e62847ba37606aa4e33b333c013d"}, "closed": true, "closedAt": "2020-02-03T19:21:29Z", "author": {"login": "tevans78"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8hjuAAFqTM0NTg4NDI0OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_eIsEAFqTM1MTAxMTA5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1ODg0MjQ4", "url": "https://github.com/OpenLiberty/open-liberty/pull/10494#pullrequestreview-345884248", "createdAt": "2020-01-21T13:43:19Z", "commit": {"oid": "57fca8ce421d3626c190caa11c18608840334336"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzo0MzoxOVrOFf6X4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzo1NDo1OFrOFf6v9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAwNjU2MA==", "bodyText": "I don't really like putting this logic in what's meant to be a thin wrapper layer.\nI get that if we want to handle Kafka classes directly, then we can only do so so in the adaptor layer, but maybe we could separate the functionality for turning a value into a ProducerRecord from the simple wrapping logic.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10494#discussion_r369006560", "createdAt": "2020-01-21T13:43:19Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.impl/src/com/ibm/ws/microprofile/reactive/messaging/kafka/adapter/impl/KafkaProducerImpl.java", "diffHunk": "@@ -21,22 +21,40 @@\n /**\n  *\n  */\n-public class KafkaProducerImpl<K, V> extends AbstractKafkaAdapter<org.apache.kafka.clients.producer.KafkaProducer<K, V>> implements KafkaProducer<K, V> {\n+public class KafkaProducerImpl<K, V, T> extends AbstractKafkaAdapter<org.apache.kafka.clients.producer.KafkaProducer<K, T>> implements KafkaProducer<K, V> {\n \n     private static final String CLAZZ = KafkaProducerImpl.class.getName();\n     private static final Logger LOGGER = Logger.getLogger(CLAZZ);\n \n     public KafkaProducerImpl(Map<String, Object> producerConfig) {\n-        super(new org.apache.kafka.clients.producer.KafkaProducer<K, V>(producerConfig));\n+        super(new org.apache.kafka.clients.producer.KafkaProducer<K, T>(producerConfig));\n     }\n \n     /** {@inheritDoc} */\n     @Override\n-    public void send(String topic, V value, Callback callback) {\n+    public void send(String configuredTopic, V value, Callback callback, boolean useProducerRecordTopic) {\n         if (LOGGER.isLoggable(Level.FINEST)) {\n-            LOGGER.logp(Level.FINEST, CLAZZ, \"send\", \"Topic: {0}, Value: {1}\", new String[] { topic, value.toString() });\n+            LOGGER.logp(Level.FINEST, CLAZZ, \"send\", \"Configured Topic: {0}, Value: {1}, Use ProducerRecord topic: {2}\",\n+                        new String[] { configuredTopic, value.toString(), Boolean.toString(useProducerRecordTopic) });\n+        }\n+\n+        org.apache.kafka.clients.producer.ProducerRecord<K, T> delegateRecord;\n+\n+        if (value instanceof org.apache.kafka.clients.producer.ProducerRecord) {\n+            org.apache.kafka.clients.producer.ProducerRecord<K, T> userProducerRecord = (org.apache.kafka.clients.producer.ProducerRecord<K, T>) value;\n+            org.apache.kafka.common.header.Headers headers = userProducerRecord.headers();\n+            K key = userProducerRecord.key();\n+            Integer partition = userProducerRecord.partition();\n+            Long timestamp = userProducerRecord.timestamp();\n+            String userTopic = userProducerRecord.topic();\n+            T userValue = userProducerRecord.value();\n+\n+            String topic = useProducerRecordTopic ? userTopic : configuredTopic;\n+\n+            delegateRecord = new org.apache.kafka.clients.producer.ProducerRecord<>(topic, partition, timestamp, key, userValue, headers);\n+        } else {\n+            delegateRecord = new org.apache.kafka.clients.producer.ProducerRecord<>(configuredTopic, (T) value);\n         }\n-        org.apache.kafka.clients.producer.ProducerRecord<K, V> delegateRecord = new org.apache.kafka.clients.producer.ProducerRecord<>(topic, value);\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57fca8ce421d3626c190caa11c18608840334336"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAwODQyOQ==", "bodyText": "If we go ahead with something using this approach, we should make sure the special value makes sense to the user configuring the application.\nI think something like this would make more sense:\nmp.reactive.messaging.outgoing.foobar.topic=APPLICATION_PROVIDED", "url": "https://github.com/OpenLiberty/open-liberty/pull/10494#discussion_r369008429", "createdAt": "2020-01-21T13:47:04Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging.kafka/src/com/ibm/ws/microprofile/reactive/messaging/kafka/KafkaConnectorConstants.java", "diffHunk": "@@ -26,6 +26,10 @@\n     //The producer or consumer topic\n     public static final String TOPIC = \"topic\";\n \n+    //If the topic is set to this value then when the message payload is a ProducerRecord,\n+    //use the topic set in the ProducerRecord rather than the one set in MP Config\n+    public static final String USE_PRODUCER_RECORD_TOPIC = \"USE_PRODUCER_RECORD_TOPIC\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57fca8ce421d3626c190caa11c18608840334336"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxMDYwNw==", "bodyText": "It's not valid for ack to be null (Trying to follow it through, I think ack will be passed as the second argument to Message.of(payload, ack) which doesn't permit null)", "url": "https://github.com/OpenLiberty/open-liberty/pull/10494#discussion_r369010607", "createdAt": "2020-01-21T13:51:06Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging.kafka/src/com/ibm/ws/microprofile/reactive/messaging/kafka/KafkaInput.java", "diffHunk": "@@ -140,12 +145,18 @@ public KafkaInput(KafkaAdapterFactory kafkaAdapterFactory, KafkaConsumer<K, V> k\n     }\n \n     private Message<V> wrapInMessage(ConsumerRecord<K, V> record) {\n+        Message<V> message = null;\n         try {\n-            return Message.of(record.value(), this.ackTracker.trackRecord(record));\n+            Supplier<CompletionStage<Void>> ack = null;\n+            if (this.ackTracker != null) {\n+                ack = this.ackTracker.trackRecord(record);\n+            }\n+            message = this.kafkaAdapterFactory.newIncomingKafkaMessage(record, ack);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57fca8ce421d3626c190caa11c18608840334336"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxMTkyOA==", "bodyText": "I'd prefer either setting the key on the original message, or generating the key completely in the processor method.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10494#discussion_r369011928", "createdAt": "2020-01-21T13:53:33Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging_fat/fat/src/com/ibm/ws/microprofile/reactive/messaging/fat/kafka/message/KafkaMessageServlet.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.microprofile.reactive.messaging.fat.kafka.message;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.time.Duration;\n+import java.util.List;\n+\n+import javax.servlet.annotation.WebServlet;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.junit.Test;\n+\n+import com.ibm.ws.microprofile.reactive.messaging.fat.kafka.framework.AbstractKafkaTestServlet;\n+import com.ibm.ws.microprofile.reactive.messaging.fat.kafka.framework.SimpleKafkaReader;\n+import com.ibm.ws.microprofile.reactive.messaging.fat.kafka.framework.SimpleKafkaWriter;\n+\n+@WebServlet(\"/kafkaMessageTest\")\n+public class KafkaMessageServlet extends AbstractKafkaTestServlet {\n+\n+    @Test\n+    public void testKafkaMessage() {\n+        SimpleKafkaWriter<String> writer = kafkaTestClient.writerFor(KafkaMessageBean.CHANNEL_IN);\n+        String value = \"hello\";\n+        writer.sendMessage(value);\n+\n+        SimpleKafkaReader<String> reader = kafkaTestClient.readerFor(KafkaMessageBean.CHANNEL_OUT);\n+        List<ConsumerRecord<String, String>> records = reader.waitForRecords(1, Duration.ofSeconds(2));\n+\n+        assertEquals(1, records.size());\n+\n+        ConsumerRecord<String, String> record = records.get(0);\n+        assertEquals(\"OUT_null\", record.key()); //original key defaults to null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57fca8ce421d3626c190caa11c18608840334336"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxMjcyNA==", "bodyText": "Should we also test that nothing is received on CHANNEL_ALT?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10494#discussion_r369012724", "createdAt": "2020-01-21T13:54:58Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging_fat/fat/src/com/ibm/ws/microprofile/reactive/messaging/fat/kafka/message/KafkaMessageServlet.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.microprofile.reactive.messaging.fat.kafka.message;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.time.Duration;\n+import java.util.List;\n+\n+import javax.servlet.annotation.WebServlet;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.junit.Test;\n+\n+import com.ibm.ws.microprofile.reactive.messaging.fat.kafka.framework.AbstractKafkaTestServlet;\n+import com.ibm.ws.microprofile.reactive.messaging.fat.kafka.framework.SimpleKafkaReader;\n+import com.ibm.ws.microprofile.reactive.messaging.fat.kafka.framework.SimpleKafkaWriter;\n+\n+@WebServlet(\"/kafkaMessageTest\")\n+public class KafkaMessageServlet extends AbstractKafkaTestServlet {\n+\n+    @Test\n+    public void testKafkaMessage() {\n+        SimpleKafkaWriter<String> writer = kafkaTestClient.writerFor(KafkaMessageBean.CHANNEL_IN);\n+        String value = \"hello\";\n+        writer.sendMessage(value);\n+\n+        SimpleKafkaReader<String> reader = kafkaTestClient.readerFor(KafkaMessageBean.CHANNEL_OUT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57fca8ce421d3626c190caa11c18608840334336"}, "originalPosition": 36}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "57fca8ce421d3626c190caa11c18608840334336", "author": {"user": {"login": "tevans78", "name": "Tom Evans"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/57fca8ce421d3626c190caa11c18608840334336", "committedDate": "2020-01-20T18:10:11Z", "message": "Expose Producer and ConsumerRecord"}, "afterCommit": {"oid": "ec20b98173e1357935d61fa3b6ef8f7afc37e2cd", "author": {"user": {"login": "tevans78", "name": "Tom Evans"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/ec20b98173e1357935d61fa3b6ef8f7afc37e2cd", "committedDate": "2020-01-24T16:05:08Z", "message": "Expose Producer and ConsumerRecord"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MTE5NTcz", "url": "https://github.com/OpenLiberty/open-liberty/pull/10494#pullrequestreview-348119573", "createdAt": "2020-01-24T17:48:39Z", "commit": {"oid": "ec20b98173e1357935d61fa3b6ef8f7afc37e2cd"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzo0ODozOVrOFhlcNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMTo1NDoxOVrOFiAMAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2MDc1Ng==", "bodyText": "a) true what?\nb) What requires not checking that the correct number of records were fetched?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10494#discussion_r370760756", "createdAt": "2020-01-24T17:48:39Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging_fat/fat/src/com/ibm/ws/microprofile/reactive/messaging/fat/kafka/framework/ExtendedKafkaReader.java", "diffHunk": "@@ -50,6 +50,10 @@ public ExtendedKafkaReader(KafkaConsumer<K, V> kafkaConsumer, String topic) {\n      * @return the list of records received\n      */\n     public List<ConsumerRecord<K, V>> waitForRecords(int count, Duration timeout) {\n+        return waitForRecords(count, timeout, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec20b98173e1357935d61fa3b6ef8f7afc37e2cd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE4Nzg4NA==", "bodyText": "Instead of passing beta guard booleans around, can we put a static somewhere in the interface bundle?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10494#discussion_r371187884", "createdAt": "2020-01-27T11:26:42Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging.kafka.adapter/src/com/ibm/ws/microprofile/reactive/messaging/kafka/adapter/KafkaAdapterFactory.java", "diffHunk": "@@ -29,7 +33,7 @@\n     private static final Class<?>[] KAFKA_CONSUMER_ARG_TYPES = { Map.class };\n \n     private static final String KAFKA_PRODUCER_IMPL = \"com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.impl.KafkaProducerImpl\";\n-    private static final Class<?>[] KAFKA_PRODUCER_ARG_TYPES = { Map.class };\n+    private static final Class<?>[] KAFKA_PRODUCER_ARG_TYPES = { Map.class, boolean.class }; //TODO remove beta guard before GA", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec20b98173e1357935d61fa3b6ef8f7afc37e2cd"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE4ODMyNQ==", "bodyText": "This method in particular needs doc because it's not a simple passthrough.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10494#discussion_r371188325", "createdAt": "2020-01-27T11:27:40Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging.kafka.adapter/src/com/ibm/ws/microprofile/reactive/messaging/kafka/adapter/KafkaProducer.java", "diffHunk": "@@ -18,10 +18,12 @@\n public interface KafkaProducer<K, V> extends KafkaAdapter {\n \n     /**\n-     * @param record\n+     * @param topic\n+     * @param channelName\n+     * @param value\n      * @param callback\n      */\n-    void send(String topic, V value, Callback callback);\n+    void send(String topic, String channelName, V value, Callback callback);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec20b98173e1357935d61fa3b6ef8f7afc37e2cd"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE4ODUwNA==", "bodyText": "Remove if this is the only change :)", "url": "https://github.com/OpenLiberty/open-liberty/pull/10494#discussion_r371188504", "createdAt": "2020-01-27T11:28:03Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging.kafka/src/com/ibm/ws/microprofile/reactive/messaging/kafka/KafkaConnectorConstants.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 2019 IBM Corporation and others.\n+ * Copyright (c) 2019, 2020 IBM Corporation and others.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec20b98173e1357935d61fa3b6ef8f7afc37e2cd"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE5MDE2Mw==", "bodyText": "Reading it through again, it doesn't go to Message.of(), you have your own Message implementation which accepts null as the ack argument.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10494#discussion_r371190163", "createdAt": "2020-01-27T11:32:16Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging.kafka/src/com/ibm/ws/microprofile/reactive/messaging/kafka/KafkaInput.java", "diffHunk": "@@ -140,12 +145,18 @@ public KafkaInput(KafkaAdapterFactory kafkaAdapterFactory, KafkaConsumer<K, V> k\n     }\n \n     private Message<V> wrapInMessage(ConsumerRecord<K, V> record) {\n+        Message<V> message = null;\n         try {\n-            return Message.of(record.value(), this.ackTracker.trackRecord(record));\n+            Supplier<CompletionStage<Void>> ack = null;\n+            if (this.ackTracker != null) {\n+                ack = this.ackTracker.trackRecord(record);\n+            }\n+            message = this.kafkaAdapterFactory.newIncomingKafkaMessage(record, ack);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxMDYwNw=="}, "originalCommit": {"oid": "57fca8ce421d3626c190caa11c18608840334336"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE5Mzk3Ng==", "bodyText": "Can we have two separate methods instead of a boolean argument.\nMaybe\nreadRecords(int maxCount, Duration timeout);\n\nand\nassertReadRecords(int count, Duration timeout)", "url": "https://github.com/OpenLiberty/open-liberty/pull/10494#discussion_r371193976", "createdAt": "2020-01-27T11:41:44Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging_fat/fat/src/com/ibm/ws/microprofile/reactive/messaging/fat/kafka/framework/ExtendedKafkaReader.java", "diffHunk": "@@ -50,6 +50,10 @@ public ExtendedKafkaReader(KafkaConsumer<K, V> kafkaConsumer, String topic) {\n      * @return the list of records received\n      */\n     public List<ConsumerRecord<K, V>> waitForRecords(int count, Duration timeout) {\n+        return waitForRecords(count, timeout, true);\n+    }\n+\n+    public List<ConsumerRecord<K, V>> waitForRecords(int count, Duration timeout, boolean assertNumberOfRecords) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec20b98173e1357935d61fa3b6ef8f7afc37e2cd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE5NTgxNQ==", "bodyText": "Simplify this method.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10494#discussion_r371195815", "createdAt": "2020-01-27T11:46:28Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging_fat/fat/src/com/ibm/ws/microprofile/reactive/messaging/fat/kafka/message/AbstractTopicServlet.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.microprofile.reactive.messaging.fat.kafka.message;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import java.time.Duration;\n+import java.util.List;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+\n+import com.ibm.ws.microprofile.reactive.messaging.fat.kafka.framework.AbstractKafkaTestServlet;\n+import com.ibm.ws.microprofile.reactive.messaging.fat.kafka.framework.SimpleKafkaReader;\n+import com.ibm.ws.microprofile.reactive.messaging.fat.kafka.framework.SimpleKafkaWriter;\n+\n+public class AbstractTopicServlet extends AbstractKafkaTestServlet {\n+\n+    public void testTopic(String topicIn, String expectedTopicOut, String unexpectedTopicOut, String keyOut, String valueOut) {\n+        SimpleKafkaWriter<String> writer = kafkaTestClient.writerFor(topicIn);\n+        String value = \"hello\"; //this value doesn't matter\n+        writer.sendMessage(value);\n+\n+        SimpleKafkaReader<String> reader = kafkaTestClient.readerFor(expectedTopicOut);\n+        List<ConsumerRecord<String, String>> records = reader.waitForRecords(1, Duration.ofSeconds(1), false);\n+\n+        if (records.size() != 1) {\n+            reader = kafkaTestClient.readerFor(unexpectedTopicOut);\n+            records = reader.waitForRecords(1, Duration.ofSeconds(1), false);\n+\n+            if (records.size() == 1) {\n+                fail(\"Message was sent to wrong topic: \" + unexpectedTopicOut);\n+            } else {\n+                fail(\"Message not found on any topic\");\n+            }\n+        }\n+\n+        ConsumerRecord<String, String> record = records.get(0);\n+        assertEquals(keyOut, record.key());\n+        assertEquals(valueOut, record.value());\n+        assertEquals(expectedTopicOut, record.topic());\n+\n+        reader = kafkaTestClient.readerFor(unexpectedTopicOut);\n+        records = reader.waitForRecords(1, Duration.ofSeconds(1), false);\n+\n+        assertEquals(\"Message may have been sent to more than one topic???\", 0, records.size());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec20b98173e1357935d61fa3b6ef8f7afc37e2cd"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE5NjExNA==", "bodyText": "Should be able to check this now.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10494#discussion_r371196114", "createdAt": "2020-01-27T11:47:13Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging_fat/fat/src/com/ibm/ws/microprofile/reactive/messaging/fat/kafka/message/ConsumerRecordBean.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.microprofile.reactive.messaging.fat.kafka.message;\n+\n+import java.io.UnsupportedEncodingException;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.header.Header;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+\n+@ApplicationScoped\n+public class ConsumerRecordBean {\n+\n+    public static final String CHANNEL_IN = \"consumer-record-in\";\n+    public static final String CHANNEL_OUT = \"consumer-record-out\";\n+    public static final String GROUP_ID = \"consumer-record-app-group\";\n+\n+    public static final String TOPIC = CHANNEL_IN;\n+    public static final String KEY = \"test_key\";\n+    public static final String VALUE = \"hello\";\n+    //public static final int PARTITION = 9;\n+    public static final long TIMESTAMP = 100L;\n+    public static final int NUM_HEADERS = 5;\n+    public static final String HEADER_KEY_PREFIX = \"headerKey\";\n+    public static final String HEADER_VALUE_PREFIX = \"headerKey\";\n+    public static final String PASS = \"PASS\";\n+\n+    @Incoming(CHANNEL_IN)\n+    @Outgoing(CHANNEL_OUT)\n+    public Message<String> checkConsumerRecord(Message<String> in) throws UnsupportedEncodingException {\n+\n+        @SuppressWarnings(\"unchecked\")\n+        ConsumerRecord<String, String> consumerRecord = in.unwrap(ConsumerRecord.class);\n+\n+        String incomingKey = consumerRecord.key();\n+        String incomingValue = consumerRecord.value();\n+        String incomingTopic = consumerRecord.topic();\n+        //int incomingPartition = consumerRecord.partition();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec20b98173e1357935d61fa3b6ef8f7afc37e2cd"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE5ODU1MA==", "bodyText": "It's hard to read what this is doing. Can we remove the abstract class, even if that means duplicating the test code?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10494#discussion_r371198550", "createdAt": "2020-01-27T11:53:11Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging_fat/fat/src/com/ibm/ws/microprofile/reactive/messaging/fat/kafka/message/UseConfiguredTopicServlet.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.microprofile.reactive.messaging.fat.kafka.message;\n+\n+import javax.servlet.annotation.WebServlet;\n+\n+import org.junit.Test;\n+\n+@WebServlet(\"/useConfiguredTopicTest\")\n+public class UseConfiguredTopicServlet extends AbstractTopicServlet {\n+\n+    @Test\n+    public void testConfiguredTopic() {\n+        testTopic(ConfiguredTopicBean.CHANNEL_IN, ConfiguredTopicBean.CONFIGURED_TOPIC, ConfiguredTopicBean.PRODUCER_RECORD_TOPIC, ConfiguredTopicBean.PRODUCER_RECORD_KEY,\n+                  ConfiguredTopicBean.PRODUCER_RECORD_VALUE);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec20b98173e1357935d61fa3b6ef8f7afc37e2cd"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE5ODk3OA==", "bodyText": "Comment to point out that this is a beta flag (and also TODO to remove later)", "url": "https://github.com/OpenLiberty/open-liberty/pull/10494#discussion_r371198978", "createdAt": "2020-01-27T11:54:19Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging_fat/publish/servers/ProducerRecordMessagingServer/bootstrap.properties", "diffHunk": "@@ -0,0 +1,14 @@\n+###############################################################################\n+# Copyright (c) 2017, 2020 IBM Corporation and others.\n+# All rights reserved. This program and the accompanying materials\n+# are made available under the terms of the Eclipse Public License v1.0\n+# which accompanies this distribution, and is available at\n+# http://www.eclipse.org/legal/epl-v10.html\n+#\n+# Contributors:\n+#     IBM Corporation - initial API and implementation\n+###############################################################################\n+bootstrap.include=../testports.properties\n+osgi.console=5471\n+com.ibm.ws.logging.trace.specification = *=info:logservice=detail:REACTIVEMESSAGE=all:com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.impl.*=FINEST\n+use.kafka.producer.record=true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec20b98173e1357935d61fa3b6ef8f7afc37e2cd"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ec20b98173e1357935d61fa3b6ef8f7afc37e2cd", "author": {"user": {"login": "tevans78", "name": "Tom Evans"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/ec20b98173e1357935d61fa3b6ef8f7afc37e2cd", "committedDate": "2020-01-24T16:05:08Z", "message": "Expose Producer and ConsumerRecord"}, "afterCommit": {"oid": "4b7820d0549ae3d98766fdd3e99601ad8728d280", "author": {"user": {"login": "tevans78", "name": "Tom Evans"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/4b7820d0549ae3d98766fdd3e99601ad8728d280", "committedDate": "2020-01-28T18:13:11Z", "message": "Refactor KafkaReader and KafkaWriter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b7820d0549ae3d98766fdd3e99601ad8728d280", "author": {"user": {"login": "tevans78", "name": "Tom Evans"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/4b7820d0549ae3d98766fdd3e99601ad8728d280", "committedDate": "2020-01-28T18:13:11Z", "message": "Refactor KafkaReader and KafkaWriter"}, "afterCommit": {"oid": "f7ac08ee1d5e0c07afb040f6b482389bed6952d2", "author": {"user": {"login": "tevans78", "name": "Tom Evans"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/f7ac08ee1d5e0c07afb040f6b482389bed6952d2", "committedDate": "2020-01-29T11:55:23Z", "message": "dependabot update"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f7ac08ee1d5e0c07afb040f6b482389bed6952d2", "author": {"user": {"login": "tevans78", "name": "Tom Evans"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/f7ac08ee1d5e0c07afb040f6b482389bed6952d2", "committedDate": "2020-01-29T11:55:23Z", "message": "dependabot update"}, "afterCommit": {"oid": "e76a10f140b618fa9d486b6f6aaef7ca568e2fdf", "author": {"user": {"login": "tevans78", "name": "Tom Evans"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/e76a10f140b618fa9d486b6f6aaef7ca568e2fdf", "committedDate": "2020-01-29T11:59:03Z", "message": "dependabot update"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e76a10f140b618fa9d486b6f6aaef7ca568e2fdf", "author": {"user": {"login": "tevans78", "name": "Tom Evans"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/e76a10f140b618fa9d486b6f6aaef7ca568e2fdf", "committedDate": "2020-01-29T11:59:03Z", "message": "dependabot update"}, "afterCommit": {"oid": "5f66f823f12fd5d579df5f6e61a23b04af23d149", "author": {"user": {"login": "tevans78", "name": "Tom Evans"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/5f66f823f12fd5d579df5f6e61a23b04af23d149", "committedDate": "2020-01-29T11:59:53Z", "message": "dependabot update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNzQzMTA1", "url": "https://github.com/OpenLiberty/open-liberty/pull/10494#pullrequestreview-350743105", "createdAt": "2020-01-30T11:07:02Z", "commit": {"oid": "5f66f823f12fd5d579df5f6e61a23b04af23d149"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTowNzowMlrOFjnPgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTozOTowNVrOFjoEAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg4NzQyNA==", "bodyText": "Exception messages need NLS before final release.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10494#discussion_r372887424", "createdAt": "2020-01-30T11:07:02Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.impl/src/com/ibm/ws/microprofile/reactive/messaging/kafka/adapter/impl/IncomingKafkaMessage.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.impl;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+\n+import com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.BetaUtils;\n+import com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.ConsumerRecord;\n+\n+/**\n+ *\n+ */\n+public class IncomingKafkaMessage<T> implements Message<T> {\n+\n+    private final ConsumerRecord<?, T> consumerRecord;\n+    private final Supplier<CompletionStage<Void>> ack;\n+\n+    public IncomingKafkaMessage(ConsumerRecord<?, T> consumerRecord, Supplier<CompletionStage<Void>> ack) {\n+        this.consumerRecord = consumerRecord;\n+        this.ack = ack;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public T getPayload() {\n+        return this.consumerRecord.value();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public CompletionStage<Void> ack() {\n+        if (this.ack != null) {\n+            return this.ack.get();\n+        } else {\n+            return CompletableFuture.completedFuture(null);\n+        }\n+    }\n+\n+    @Override\n+    public <C> C unwrap(Class<C> unwrapType) {\n+        if (unwrapType == null) {\n+            throw new IllegalArgumentException(\"The target class must not be `null`\");\n+        }\n+        if (BetaUtils.USE_KAFKA_PRODUCER_RECORD) { //TODO remove guard before GA\n+            if (org.apache.kafka.clients.consumer.ConsumerRecord.class.equals(unwrapType)) {\n+                return unwrapType.cast(this.consumerRecord.getDelegate());\n+            }\n+        }\n+        try {\n+            return unwrapType.cast(this);\n+        } catch (ClassCastException e) {\n+            throw new IllegalArgumentException(\"Cannot unwrap an instance of \" + this.getClass().getName()\n+                                               + \" to \" + unwrapType.getName(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f66f823f12fd5d579df5f6e61a23b04af23d149"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwMDg2Ng==", "bodyText": "Silly question: have you run the tests with this property set on the other test servers to check it doesn't cause any regressions?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10494#discussion_r372900866", "createdAt": "2020-01-30T11:39:05Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging_fat/publish/servers/ProducerRecordMessagingServer/bootstrap.properties", "diffHunk": "@@ -0,0 +1,16 @@\n+###############################################################################\n+# Copyright (c) 2017, 2020 IBM Corporation and others.\n+# All rights reserved. This program and the accompanying materials\n+# are made available under the terms of the Eclipse Public License v1.0\n+# which accompanies this distribution, and is available at\n+# http://www.eclipse.org/legal/epl-v10.html\n+#\n+# Contributors:\n+#     IBM Corporation - initial API and implementation\n+###############################################################################\n+bootstrap.include=../testports.properties\n+osgi.console=5471\n+com.ibm.ws.logging.trace.specification = *=info:logservice=detail:REACTIVEMESSAGE=all:com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.impl.*=FINEST\n+\n+# This is an override to force the new beta-level code to be used in these FAT tests. It should be removed before GA.\n+use.kafka.producer.record=true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f66f823f12fd5d579df5f6e61a23b04af23d149"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNzY5NzM1", "url": "https://github.com/OpenLiberty/open-liberty/pull/10494#pullrequestreview-350769735", "createdAt": "2020-01-30T11:57:40Z", "commit": {"oid": "5f66f823f12fd5d579df5f6e61a23b04af23d149"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo1Nzo0MFrOFjohgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo1Nzo0MFrOFjohgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwODQxOQ==", "bodyText": "Technically, the type variables don't match up here.\nYou can pass in a ProducerRecord<String, String> as the value (i.e. V = ProducerRecord<String, String>) and you'll get back a ProducerRecord<String, String> (i.e. V = String).\nIt might be clearer to make value an Object to acknowledge that there's no type safety here. It might even make sense to return ProducerRecord<?, ?> if we don't actually need to know K and V.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10494#discussion_r372908419", "createdAt": "2020-01-30T11:57:40Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.impl/src/com/ibm/ws/microprofile/reactive/messaging/kafka/adapter/impl/ProducerRecordFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.impl;\n+\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.BetaUtils;\n+\n+public class ProducerRecordFactory {\n+\n+    private static final String CLAZZ = ProducerRecordFactory.class.getName();\n+    private static final Logger LOGGER = Logger.getLogger(CLAZZ);\n+\n+    public static <K, V> org.apache.kafka.clients.producer.ProducerRecord<K, V> newDelegateProducerRecord(String configuredTopic, String channelName, V value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f66f823f12fd5d579df5f6e61a23b04af23d149"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73e228406ffea758a7541ca0059d3e2cdc4a9c34", "author": {"user": {"login": "tevans78", "name": "Tom Evans"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/73e228406ffea758a7541ca0059d3e2cdc4a9c34", "committedDate": "2020-01-30T17:16:19Z", "message": "Expose Producer and ConsumerRecord"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4c23bd228e1da55b9d8d86ca0050347096d7ae1", "author": {"user": {"login": "tevans78", "name": "Tom Evans"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/f4c23bd228e1da55b9d8d86ca0050347096d7ae1", "committedDate": "2020-01-30T17:16:19Z", "message": "Kafka Producer Record - review updates 1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fb2735635b256b54ca474f85802b2254299f528", "author": {"user": {"login": "tevans78", "name": "Tom Evans"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/8fb2735635b256b54ca474f85802b2254299f528", "committedDate": "2020-01-30T17:16:19Z", "message": "Refactor KafkaReader and KafkaWriter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82030408bb5552e80e85dbd7c254c08a50c15674", "author": {"user": {"login": "tevans78", "name": "Tom Evans"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/82030408bb5552e80e85dbd7c254c08a50c15674", "committedDate": "2020-01-30T17:16:19Z", "message": "Clarify test assertions, javadoc and tweak timeouts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5586b731457b538be19d15ff14388b7af2172cb0", "author": {"user": {"login": "tevans78", "name": "Tom Evans"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/5586b731457b538be19d15ff14388b7af2172cb0", "committedDate": "2020-01-30T17:16:19Z", "message": "Final review updates"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5f66f823f12fd5d579df5f6e61a23b04af23d149", "author": {"user": {"login": "tevans78", "name": "Tom Evans"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/5f66f823f12fd5d579df5f6e61a23b04af23d149", "committedDate": "2020-01-29T11:59:53Z", "message": "dependabot update"}, "afterCommit": {"oid": "5586b731457b538be19d15ff14388b7af2172cb0", "author": {"user": {"login": "tevans78", "name": "Tom Evans"}}, "url": "https://github.com/OpenLiberty/open-liberty/commit/5586b731457b538be19d15ff14388b7af2172cb0", "committedDate": "2020-01-30T17:16:19Z", "message": "Final review updates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMDExMDk3", "url": "https://github.com/OpenLiberty/open-liberty/pull/10494#pullrequestreview-351011097", "createdAt": "2020-01-30T17:34:43Z", "commit": {"oid": "5586b731457b538be19d15ff14388b7af2172cb0"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNzozNDo0M1rOFjzs8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNzozNDo0M1rOFjzs8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA5MTU2OQ==", "bodyText": "if (configuredTopic == null || configuredTopic.equals(userProducerRecord.topic())) { might be clearer here", "url": "https://github.com/OpenLiberty/open-liberty/pull/10494#discussion_r373091569", "createdAt": "2020-01-30T17:34:43Z", "author": {"login": "Azquelt"}, "path": "dev/com.ibm.ws.microprofile.reactive.messaging.kafka.adapter.impl/src/com/ibm/ws/microprofile/reactive/messaging/kafka/adapter/impl/ProducerRecordFactory.java", "diffHunk": "@@ -61,4 +61,39 @@\n \n         return delegateRecord;\n     }\n+\n+    /**\n+     * Extract a suitable delegate ProducerRecord from a user provided one.\n+     * It will be a brand new ProducerRecord if the configuredTopic does not match the one in the user ProducerRecord.\n+     * If the topic is the same then this method will just return the user's ProducerRecord as-is\n+     *\n+     * @param <K> key type\n+     * @param <V> value type\n+     * @param configuredTopic The configured topic\n+     * @param userProducerRecord The user's producer record\n+     * @return\n+     */\n+    public static <K, V> org.apache.kafka.clients.producer.ProducerRecord<K, V> extractUserProducerRecord(String configuredTopic,\n+                                                                                                          org.apache.kafka.clients.producer.ProducerRecord<K, V> userProducerRecord) {\n+\n+        org.apache.kafka.clients.producer.ProducerRecord<K, V> delegateRecord;\n+\n+        String userTopic = userProducerRecord.topic();\n+\n+        //if a topic was not configured, use the one in the user provided ProducerRecord\n+        String topic = configuredTopic == null ? userTopic : configuredTopic;\n+        if (topic.contentEquals(userTopic)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5586b731457b538be19d15ff14388b7af2172cb0"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3387, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}