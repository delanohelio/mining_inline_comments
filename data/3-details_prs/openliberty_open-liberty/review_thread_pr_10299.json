{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NzIyMzQ2", "number": 10299, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMTo1MToxMlrODWGMgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMjoyMTowMlrODWGmzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDk2NzcxOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/bnd.bnd", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMTo1MToxMlrOFaqSqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMTo1MToxMlrOFaqSqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUwMDIwMA==", "bodyText": "copyrights will need to include 2020 here and elsewhere", "url": "https://github.com/OpenLiberty/open-liberty/pull/10299#discussion_r363500200", "createdAt": "2020-01-06T21:51:12Z", "author": {"login": "njr-11"}, "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/bnd.bnd", "diffHunk": "@@ -0,0 +1,43 @@\n+#*******************************************************************************\n+# Copyright (c) 2019 IBM Corporation and others.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "853fea0cb6748d989cb49f84513c117d60e9f5e6"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDk3MDk4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/fat/src/com/ibm/ws/concurrent/persistent/fat/demo/timers/DemoTimerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMTo1MjoyNlrOFaqUqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMTo1MjoyNlrOFaqUqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUwMDcxMg==", "bodyText": "minor: mix of tabs and spaces in this file and a few other files causes indentation to appear off", "url": "https://github.com/OpenLiberty/open-liberty/pull/10299#discussion_r363500712", "createdAt": "2020-01-06T21:52:26Z", "author": {"login": "njr-11"}, "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/fat/src/com/ibm/ws/concurrent/persistent/fat/demo/timers/DemoTimerTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+\n+package com.ibm.ws.concurrent.persistent.fat.demo.timers;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.runner.RunWith;\n+import org.testcontainers.containers.JdbcDatabaseContainer;\n+\n+import com.ibm.websphere.simplicity.ShrinkHelper;\n+\n+import componenttest.annotation.Server;\n+import componenttest.annotation.TestServlet;\n+import componenttest.custom.junit.runner.FATRunner;\n+import componenttest.topology.database.container.DatabaseContainerFactory;\n+import componenttest.topology.database.container.DatabaseContainerType;\n+import componenttest.topology.database.container.DatabaseContainerUtil;\n+import componenttest.topology.impl.LibertyServer;\n+import componenttest.topology.utils.FATServletClient;\n+import ejb.timers.PersistentDemoTimersServlet;\n+\n+/**\n+ * This test suite start's an application that has automated timers, \n+ * and scheduled timers that will perform some sort of in memory data manipulation.\n+ * This is to simulate the situation where customers use timers to do something\n+ * like unit conversions, data processing, etc. \n+ * \n+ * These timers will run every half second.  That sort of frequency is the \n+ * maximum we would ever expect a customer to run a timer that is doing \n+ * in memory work.\n+ */\n+@RunWith(FATRunner.class)\n+public class DemoTimerTest extends FATServletClient {\n+\n+\tpublic static final String APP_NAME = \"demotimer\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "853fea0cb6748d989cb49f84513c117d60e9f5e6"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDk4MzkzOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMTo1ODowOFrOFaqdGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMTo1ODowOFrOFaqdGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUwMjg3Mw==", "bodyText": "I think this comment is wrong.  The code later in this class is for every 30 seconds, not 2.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10299#discussion_r363502873", "createdAt": "2020-01-06T21:58:08Z", "author": {"login": "njr-11"}, "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package ejb.timers;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import javax.annotation.Resource;\n+import javax.ejb.Schedule;\n+import javax.ejb.SessionContext;\n+import javax.ejb.Singleton;\n+import javax.ejb.Timer;\n+import javax.sql.DataSource;\n+\n+/**\n+ * This class uses the @Schedule annotation.\n+ * Using this annotation will start the timer immediately on start and will run every 2 seconds. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "853fea0cb6748d989cb49f84513c117d60e9f5e6"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDk4ODM4OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMjowMDowM1rOFaqf9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMjowMDowM1rOFaqf9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUwMzYwNA==", "bodyText": "An error here ought to fail the test", "url": "https://github.com/OpenLiberty/open-liberty/pull/10299#discussion_r363503604", "createdAt": "2020-01-06T22:00:03Z", "author": {"login": "njr-11"}, "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package ejb.timers;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import javax.annotation.Resource;\n+import javax.ejb.Schedule;\n+import javax.ejb.SessionContext;\n+import javax.ejb.Singleton;\n+import javax.ejb.Timer;\n+import javax.sql.DataSource;\n+\n+/**\n+ * This class uses the @Schedule annotation.\n+ * Using this annotation will start the timer immediately on start and will run every 2 seconds. \n+ */\n+@Singleton\n+public class AutomaticDatabase {\n+\t@Resource\n+    private SessionContext sessionContext; //Used to get information about timer\n+    \n+    @Resource(name = \"DefaultDatasource\") //Datasource used to create a new table\n+    private DataSource ds;\n+    \n+    private int count = -1; //Incremented with each execution of timer\n+    \n+    private boolean isTableCreated = false;\n+    \n+    /**\n+     * Cancels timer execution\n+     */\n+    public void cancel() {\n+        for (Timer timer : sessionContext.getTimerService().getTimers())\n+            timer.cancel();\n+    }\n+\n+    /**\n+     * Get the value of count.\n+     */\n+    public int getRunCount() {\n+        return count;\n+    }\n+    \n+    /**\n+     * Runs ever 30 seconds.  Automatically starts when application starts. \n+     */\n+    @Schedule(info = \"Performing Database Operations\", hour = \"*\", minute = \"*\", second = \"*/30\")\n+    public void run(Timer timer) {\n+    \tif(!isTableCreated)\n+    \t\tinitTable();\n+    \t\n+        System.out.println(\"Running execution \" + incrementCount(timer) + \" of timer \" + timer.getInfo());\n+    }\n+    \n+    private void initTable() {\n+    \tfinal String createTable = \"CREATE TABLE AutomaticDatabase (name VARCHAR(64) NOT NULL PRIMARY KEY, count INT)\";\n+    \t\n+    \ttry (Connection conn = ds.getConnection()) {\n+    \t\t//See if table was created by another server\n+        \tDatabaseMetaData md = conn.getMetaData();\n+        \tResultSet rs = md.getTables(null, null, \"AutomaticDatabase\", null);\n+        \twhile(rs.next()) {\n+        \t\tisTableCreated = true;\n+        \t\treturn;\n+        \t}\n+    \t\t\n+    \t\t//If not, create it.    \t\t\n+    \t\ttry (PreparedStatement pstmt= conn.prepareStatement(createTable)) {\n+    \t\t\tpstmt.executeUpdate();\n+    \t\t}\n+    \t\tisTableCreated = true;\n+    \t} catch (SQLException e) {\n+\t\t\te.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "853fea0cb6748d989cb49f84513c117d60e9f5e6"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDk5NDY2OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMjowMjo1NlrOFaqkCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMjowMjo1NlrOFaqkCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUwNDY0OA==", "bodyText": "Should fail the test instead of suppressing the error, unless there is any reason why init logic is expected to fail and need a retry.", "url": "https://github.com/OpenLiberty/open-liberty/pull/10299#discussion_r363504648", "createdAt": "2020-01-06T22:02:56Z", "author": {"login": "njr-11"}, "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package ejb.timers;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import javax.annotation.Resource;\n+import javax.ejb.Schedule;\n+import javax.ejb.SessionContext;\n+import javax.ejb.Singleton;\n+import javax.ejb.Timer;\n+import javax.sql.DataSource;\n+\n+/**\n+ * This class uses the @Schedule annotation.\n+ * Using this annotation will start the timer immediately on start and will run every 2 seconds. \n+ */\n+@Singleton\n+public class AutomaticDatabase {\n+\t@Resource\n+    private SessionContext sessionContext; //Used to get information about timer\n+    \n+    @Resource(name = \"DefaultDatasource\") //Datasource used to create a new table\n+    private DataSource ds;\n+    \n+    private int count = -1; //Incremented with each execution of timer\n+    \n+    private boolean isTableCreated = false;\n+    \n+    /**\n+     * Cancels timer execution\n+     */\n+    public void cancel() {\n+        for (Timer timer : sessionContext.getTimerService().getTimers())\n+            timer.cancel();\n+    }\n+\n+    /**\n+     * Get the value of count.\n+     */\n+    public int getRunCount() {\n+        return count;\n+    }\n+    \n+    /**\n+     * Runs ever 30 seconds.  Automatically starts when application starts. \n+     */\n+    @Schedule(info = \"Performing Database Operations\", hour = \"*\", minute = \"*\", second = \"*/30\")\n+    public void run(Timer timer) {\n+    \tif(!isTableCreated)\n+    \t\tinitTable();\n+    \t\n+        System.out.println(\"Running execution \" + incrementCount(timer) + \" of timer \" + timer.getInfo());\n+    }\n+    \n+    private void initTable() {\n+    \tfinal String createTable = \"CREATE TABLE AutomaticDatabase (name VARCHAR(64) NOT NULL PRIMARY KEY, count INT)\";\n+    \t\n+    \ttry (Connection conn = ds.getConnection()) {\n+    \t\t//See if table was created by another server\n+        \tDatabaseMetaData md = conn.getMetaData();\n+        \tResultSet rs = md.getTables(null, null, \"AutomaticDatabase\", null);\n+        \twhile(rs.next()) {\n+        \t\tisTableCreated = true;\n+        \t\treturn;\n+        \t}\n+    \t\t\n+    \t\t//If not, create it.    \t\t\n+    \t\ttry (PreparedStatement pstmt= conn.prepareStatement(createTable)) {\n+    \t\t\tpstmt.executeUpdate();\n+    \t\t}\n+    \t\tisTableCreated = true;\n+    \t} catch (SQLException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+    }\n+    \n+    private void initCounter(Timer timer) {\n+    \tfinal String createRow = \"INSERT INTO AutomaticDatabase VALUES(?,?)\";\n+    \t\n+    \t//create count\n+    \tcount = 1;\n+    \t\n+    \ttry (Connection conn = ds.getConnection()) {\n+    \t\ttry (PreparedStatement pstmt = conn.prepareStatement(createRow)) {\n+    \t\t\tpstmt.setString(1, timer.getInfo().toString());\n+    \t\t\tpstmt.setInt(2, count);\n+    \t\t\tpstmt.execute();\n+    \t\t}\n+    \t} catch (SQLException e) {\n+    \t\tcount = -1;\n+\t\t\te.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "853fea0cb6748d989cb49f84513c117d60e9f5e6"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTAwMDg3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMjowNTo1MlrOFaqn_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMjowNTo1MlrOFaqn_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUwNTY2MA==", "bodyText": "Should pre-populating the row just be part of initTable?", "url": "https://github.com/OpenLiberty/open-liberty/pull/10299#discussion_r363505660", "createdAt": "2020-01-06T22:05:52Z", "author": {"login": "njr-11"}, "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/AutomaticDatabase.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package ejb.timers;\n+\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+import javax.annotation.Resource;\n+import javax.ejb.Schedule;\n+import javax.ejb.SessionContext;\n+import javax.ejb.Singleton;\n+import javax.ejb.Timer;\n+import javax.sql.DataSource;\n+\n+/**\n+ * This class uses the @Schedule annotation.\n+ * Using this annotation will start the timer immediately on start and will run every 2 seconds. \n+ */\n+@Singleton\n+public class AutomaticDatabase {\n+\t@Resource\n+    private SessionContext sessionContext; //Used to get information about timer\n+    \n+    @Resource(name = \"DefaultDatasource\") //Datasource used to create a new table\n+    private DataSource ds;\n+    \n+    private int count = -1; //Incremented with each execution of timer\n+    \n+    private boolean isTableCreated = false;\n+    \n+    /**\n+     * Cancels timer execution\n+     */\n+    public void cancel() {\n+        for (Timer timer : sessionContext.getTimerService().getTimers())\n+            timer.cancel();\n+    }\n+\n+    /**\n+     * Get the value of count.\n+     */\n+    public int getRunCount() {\n+        return count;\n+    }\n+    \n+    /**\n+     * Runs ever 30 seconds.  Automatically starts when application starts. \n+     */\n+    @Schedule(info = \"Performing Database Operations\", hour = \"*\", minute = \"*\", second = \"*/30\")\n+    public void run(Timer timer) {\n+    \tif(!isTableCreated)\n+    \t\tinitTable();\n+    \t\n+        System.out.println(\"Running execution \" + incrementCount(timer) + \" of timer \" + timer.getInfo());\n+    }\n+    \n+    private void initTable() {\n+    \tfinal String createTable = \"CREATE TABLE AutomaticDatabase (name VARCHAR(64) NOT NULL PRIMARY KEY, count INT)\";\n+    \t\n+    \ttry (Connection conn = ds.getConnection()) {\n+    \t\t//See if table was created by another server\n+        \tDatabaseMetaData md = conn.getMetaData();\n+        \tResultSet rs = md.getTables(null, null, \"AutomaticDatabase\", null);\n+        \twhile(rs.next()) {\n+        \t\tisTableCreated = true;\n+        \t\treturn;\n+        \t}\n+    \t\t\n+    \t\t//If not, create it.    \t\t\n+    \t\ttry (PreparedStatement pstmt= conn.prepareStatement(createTable)) {\n+    \t\t\tpstmt.executeUpdate();\n+    \t\t}\n+    \t\tisTableCreated = true;\n+    \t} catch (SQLException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+    }\n+    \n+    private void initCounter(Timer timer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "853fea0cb6748d989cb49f84513c117d60e9f5e6"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTAzMzc3OnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/PersistentDemoTimersServlet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMjoyMDozMVrOFaq8XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMjoyMDozMVrOFaq8XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUxMDg3Nw==", "bodyText": "I think it is getting the wrong EJB here. Probably meant \"AutomaticMemory\"", "url": "https://github.com/OpenLiberty/open-liberty/pull/10299#discussion_r363510877", "createdAt": "2020-01-06T22:20:31Z", "author": {"login": "njr-11"}, "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/PersistentDemoTimersServlet.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package ejb.timers;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Resource;\n+import javax.ejb.EJB;\n+import javax.servlet.annotation.WebServlet;\n+import javax.transaction.UserTransaction;\n+\n+import org.junit.Test;\n+\n+import componenttest.app.FATServlet;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+\n+@SuppressWarnings(\"serial\")\n+@WebServlet(\"/*\")\n+public class PersistentDemoTimersServlet extends FATServlet {\n+\n+    /**\n+     * Interval in milliseconds between polling for task results.\n+     */\n+    private static final long POLL_INTERVAL = 200;\n+\n+    @EJB\n+    private AutomaticDatabase autoTimerDatabase;\n+    \n+    @EJB\n+    private AutomaticDatabase autoTimerMemory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "853fea0cb6748d989cb49f84513c117d60e9f5e6"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTAzNTAwOnYy", "diffSide": "RIGHT", "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/PersistentDemoTimersServlet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMjoyMTowMlrOFaq9JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMjoyMTowMlrOFaq9JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUxMTA3Ng==", "bodyText": "Also getting the wrong EJB here. Probably intended \"AutomaticId\"", "url": "https://github.com/OpenLiberty/open-liberty/pull/10299#discussion_r363511076", "createdAt": "2020-01-06T22:21:02Z", "author": {"login": "njr-11"}, "path": "dev/com.ibm.ws.concurrent.persistent_fat_demo_timers/test-application/demotimers/src/ejb/timers/PersistentDemoTimersServlet.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 IBM Corporation and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *     IBM Corporation - initial API and implementation\n+ *******************************************************************************/\n+package ejb.timers;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Resource;\n+import javax.ejb.EJB;\n+import javax.servlet.annotation.WebServlet;\n+import javax.transaction.UserTransaction;\n+\n+import org.junit.Test;\n+\n+import componenttest.app.FATServlet;\n+import componenttest.custom.junit.runner.Mode;\n+import componenttest.custom.junit.runner.Mode.TestMode;\n+\n+@SuppressWarnings(\"serial\")\n+@WebServlet(\"/*\")\n+public class PersistentDemoTimersServlet extends FATServlet {\n+\n+    /**\n+     * Interval in milliseconds between polling for task results.\n+     */\n+    private static final long POLL_INTERVAL = 200;\n+\n+    @EJB\n+    private AutomaticDatabase autoTimerDatabase;\n+    \n+    @EJB\n+    private AutomaticDatabase autoTimerMemory;\n+\n+    @EJB\n+    private AutomaticDatabase autoTimerIO;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "853fea0cb6748d989cb49f84513c117d60e9f5e6"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2280, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}