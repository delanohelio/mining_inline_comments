{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5ODIxMzAy", "number": 154, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODo0MDozMVrOEaGroA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODo1MTo1OFrOEaG6bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODA3OTA0OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODo0MDozMVrOHDUgKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMDoxMzoxOFrOHDXbkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0MzY4OQ==", "bodyText": "Will it be empty? Should we check empty too?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/154#discussion_r473243689", "createdAt": "2020-08-19T18:40:31Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,227 +1,75 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.cloud.bigquery.*;\n-import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n-import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n-import com.google.gson.Gson;\n-import com.google.gson.GsonBuilder;\n-import org.apache.commons.cli.Option;\n-import org.apache.commons.cli.*;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.auth.oauth2.ServiceAccountCredentials;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.utils.queryfixer.cmd.CommandLineInteraction;\n+import com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions;\n \n-import java.util.List;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n \n-public class QueryFixerMain {\n-\n-  private static final String CREDENTIAL_SHORTCUT = \"c\";\n-  private static final String CREDENTIAL = \"credential\";\n-\n-  private static final String PROJECT_ID_SHORTCUT = \"p\";\n-  private static final String PROJECT_ID = \"project-id\";\n-\n-  private static final String OUTPUT_SHORTCUT = \"o\";\n-  private static final String OUTPUT = \"output\";\n-  private static final String JSON_OUTPUT = \"json\";\n-  private static final String NATURAL_OUTPUT = \"natural\";\n-\n-  private static final String MODE_SHORTCUT = \"m\";\n-  private static final String MODE = \"mode\";\n-  private static final String AUTO_MODE = \"auto\";\n-  private static final String USER_ASSISTANCE_MODE = \"user-assistance\";\n-  // The abbreviation of USER_ASSISTANCE_MODE\n-  private static final String UA_MODE = \"ua\";\n-  private static final String FIX_ONCE_MODE = \"fix-once\";\n-  // The abbreviation of FIX_ONCE_MODE\n-  private static final String FO_MODE = \"fo\";\n-\n-  private static CommandLine readFlags(String[] args) {\n-    Options options = new Options();\n-\n-    Option option =\n-        new Option(\n-            /*opt=*/ CREDENTIAL_SHORTCUT,\n-            /*long-opt=*/ CREDENTIAL,\n-            /*hasArg=*/ true,\n-            /*description=*/ \"The path to the credential file of the service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n-    options.addOption(option);\n-    option =\n-        new Option(\n-            /*opt=*/ PROJECT_ID_SHORTCUT,\n-            /*long-opt=*/ PROJECT_ID,\n-            /*hasArg=*/ true,\n-            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n-    options.addOption(option);\n-    option =\n-        new Option(\n-            /*opt=*/ OUTPUT_SHORTCUT,\n-            /*long-opt=*/ OUTPUT,\n-            /*hasArg=*/ true,\n-            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n-    options.addOption(option);\n-    option =\n-        new Option(\n-            /*opt=*/ MODE_SHORTCUT,\n-            /*long-opt=*/ MODE,\n-            /*hasArg=*/ true,\n-            /*description=*/ \"Interactive Mode. The available mode are \\\"auto\\\" (default), \\\"ua/user-assistance\\\" and \\\"fo/fix-once\\\". Please see the README file for the detailed description.\");\n-    options.addOption(option);\n-\n-    if (args.length == 0) {\n-      System.out.println(\"Please provide arguments.\");\n-      printHelpAndExit(options);\n-    }\n-\n-    CommandLineParser parser = new DefaultParser();\n-    try {\n-      return parser.parse(options, args);\n-    } catch (ParseException e) {\n-      System.out.println(e.getMessage());\n-      printHelpAndExit(options);\n-      return null;\n-    }\n-  }\n+import static com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions.*;\n+import static java.lang.System.exit;\n \n-  public static void printHelpAndExit(Options options) {\n-    HelpFormatter formatter = new HelpFormatter();\n-    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n-    System.exit(1);\n-  }\n+public class QueryFixerMain {\n \n   public static void main(String[] args) {\n-    CommandLine cmd = readFlags(args);\n+    QueryFixerOptions queryFixerOptions = QueryFixerOptions.readUserInput(args);\n+    if (queryFixerOptions == null) {\n+      QueryFixerOptions.printHelpAndExit();\n+    }\n \n-    String credentialPath = cmd.getOptionValue(CREDENTIAL);\n-    String projectId = cmd.getOptionValue(PROJECT_ID);\n-    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+    String credentialsPath = queryFixerOptions.getOptionValue(CREDENTIALS);\n+    String projectId = queryFixerOptions.getOptionValue(PROJECT_ID);\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialsPath, projectId);\n \n-    if (cmd.getArgList().isEmpty()) {\n+    String query = queryFixerOptions.getQuery();\n+    if (query == null) {\n       // In CLI mode, all the instructions are output by print functions, because logger outputs\n       // extract info (time, code position) that distracts users.\n       System.out.println(\n           \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+      exit(1);\n     }\n-\n-    String query = cmd.getArgList().get(0);\n-    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n-\n-    String mode = cmd.getOptionValue(MODE);\n-    if (mode == null) {\n-      mode = AUTO_MODE;\n-    }\n-    switch (mode) {\n-      case AUTO_MODE:\n-        // TODO: Implement Non-interactive mode\n-        FixResult fixResult = queryFixer.fix(query);\n-        if (fixResult.getOptions().isEmpty()) {\n-          return;\n-        }\n-        String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n-        printQueryResult(newQuery, bigQueryOptions);\n-        break;\n-\n-      case USER_ASSISTANCE_MODE:\n-      case UA_MODE:\n-        // TODO: Implement guide mode\n-        return;\n-\n-      case FIX_ONCE_MODE:\n-      case FO_MODE:\n-        fixResult = fixQueryInFullInteractMode(queryFixer, query);\n-        printFixResult(query, fixResult, cmd.getOptionValue(OUTPUT));\n-        break;\n-\n-      default:\n-        System.out.println(\"Mode (-m) is incorrect. Use --help for usage.\");\n-        System.exit(1);\n-    }\n+    String mode = queryFixerOptions.getOptionValue(MODE);\n+    String outputFormat = queryFixerOptions.getOptionValue(OUTPUT);\n+    CommandLineInteraction interaction =\n+        CommandLineInteraction.create(mode, outputFormat, bigQueryOptions);\n+    interaction.interact(query);\n   }\n \n-  private static BigQueryOptions buildBigQueryOptions(String credentialPath, String projectId) {\n-    if (credentialPath == null) {\n-      return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n-    } else {\n-      // TODO: should support this in near future.\n-      System.out.println(\"Customized credential path is not supported\");\n-      System.exit(1);\n-      return null;\n-    }\n-  }\n-\n-  private static FixResult fixQueryInFullInteractMode(\n-      AutomaticQueryFixer queryFixer, String query) {\n-    return queryFixer.fix(query);\n-  }\n-\n-  private static void printFixResult(String query, FixResult fixResult, String outputFormat) {\n-    if (outputFormat == null || outputFormat.equalsIgnoreCase(NATURAL_OUTPUT)) {\n-      System.out.println(\"Input query: \" + query);\n-      printFixResultInCommandLine(fixResult);\n-    } else if (outputFormat.equalsIgnoreCase(JSON_OUTPUT)) {\n-      printFixResultAsJson(fixResult);\n-    } else {\n-      System.out.println(\"Output format (-o) is incorrect. Use --help for usage.\");\n-      System.exit(1);\n+  /** Create the BigQueryOption based on user-input credentials path and project ID. */\n+  private static BigQueryOptions buildBigQueryOptions(String credentialsPath, String projectId) {\n+    if (projectId == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb95e7420a661b8a44d36ed951dba2a82cd53b77"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI5MTY2Nw==", "bodyText": "If it is empty, it will be handled inside BigQueryOptions. It should be treated the same as an incorrect project ID. Therefore, no extra handle needs to be taken here.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/154#discussion_r473291667", "createdAt": "2020-08-19T20:13:18Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,227 +1,75 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.cloud.bigquery.*;\n-import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n-import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n-import com.google.gson.Gson;\n-import com.google.gson.GsonBuilder;\n-import org.apache.commons.cli.Option;\n-import org.apache.commons.cli.*;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.auth.oauth2.ServiceAccountCredentials;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.utils.queryfixer.cmd.CommandLineInteraction;\n+import com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions;\n \n-import java.util.List;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n \n-public class QueryFixerMain {\n-\n-  private static final String CREDENTIAL_SHORTCUT = \"c\";\n-  private static final String CREDENTIAL = \"credential\";\n-\n-  private static final String PROJECT_ID_SHORTCUT = \"p\";\n-  private static final String PROJECT_ID = \"project-id\";\n-\n-  private static final String OUTPUT_SHORTCUT = \"o\";\n-  private static final String OUTPUT = \"output\";\n-  private static final String JSON_OUTPUT = \"json\";\n-  private static final String NATURAL_OUTPUT = \"natural\";\n-\n-  private static final String MODE_SHORTCUT = \"m\";\n-  private static final String MODE = \"mode\";\n-  private static final String AUTO_MODE = \"auto\";\n-  private static final String USER_ASSISTANCE_MODE = \"user-assistance\";\n-  // The abbreviation of USER_ASSISTANCE_MODE\n-  private static final String UA_MODE = \"ua\";\n-  private static final String FIX_ONCE_MODE = \"fix-once\";\n-  // The abbreviation of FIX_ONCE_MODE\n-  private static final String FO_MODE = \"fo\";\n-\n-  private static CommandLine readFlags(String[] args) {\n-    Options options = new Options();\n-\n-    Option option =\n-        new Option(\n-            /*opt=*/ CREDENTIAL_SHORTCUT,\n-            /*long-opt=*/ CREDENTIAL,\n-            /*hasArg=*/ true,\n-            /*description=*/ \"The path to the credential file of the service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n-    options.addOption(option);\n-    option =\n-        new Option(\n-            /*opt=*/ PROJECT_ID_SHORTCUT,\n-            /*long-opt=*/ PROJECT_ID,\n-            /*hasArg=*/ true,\n-            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n-    options.addOption(option);\n-    option =\n-        new Option(\n-            /*opt=*/ OUTPUT_SHORTCUT,\n-            /*long-opt=*/ OUTPUT,\n-            /*hasArg=*/ true,\n-            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n-    options.addOption(option);\n-    option =\n-        new Option(\n-            /*opt=*/ MODE_SHORTCUT,\n-            /*long-opt=*/ MODE,\n-            /*hasArg=*/ true,\n-            /*description=*/ \"Interactive Mode. The available mode are \\\"auto\\\" (default), \\\"ua/user-assistance\\\" and \\\"fo/fix-once\\\". Please see the README file for the detailed description.\");\n-    options.addOption(option);\n-\n-    if (args.length == 0) {\n-      System.out.println(\"Please provide arguments.\");\n-      printHelpAndExit(options);\n-    }\n-\n-    CommandLineParser parser = new DefaultParser();\n-    try {\n-      return parser.parse(options, args);\n-    } catch (ParseException e) {\n-      System.out.println(e.getMessage());\n-      printHelpAndExit(options);\n-      return null;\n-    }\n-  }\n+import static com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions.*;\n+import static java.lang.System.exit;\n \n-  public static void printHelpAndExit(Options options) {\n-    HelpFormatter formatter = new HelpFormatter();\n-    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n-    System.exit(1);\n-  }\n+public class QueryFixerMain {\n \n   public static void main(String[] args) {\n-    CommandLine cmd = readFlags(args);\n+    QueryFixerOptions queryFixerOptions = QueryFixerOptions.readUserInput(args);\n+    if (queryFixerOptions == null) {\n+      QueryFixerOptions.printHelpAndExit();\n+    }\n \n-    String credentialPath = cmd.getOptionValue(CREDENTIAL);\n-    String projectId = cmd.getOptionValue(PROJECT_ID);\n-    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+    String credentialsPath = queryFixerOptions.getOptionValue(CREDENTIALS);\n+    String projectId = queryFixerOptions.getOptionValue(PROJECT_ID);\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialsPath, projectId);\n \n-    if (cmd.getArgList().isEmpty()) {\n+    String query = queryFixerOptions.getQuery();\n+    if (query == null) {\n       // In CLI mode, all the instructions are output by print functions, because logger outputs\n       // extract info (time, code position) that distracts users.\n       System.out.println(\n           \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+      exit(1);\n     }\n-\n-    String query = cmd.getArgList().get(0);\n-    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n-\n-    String mode = cmd.getOptionValue(MODE);\n-    if (mode == null) {\n-      mode = AUTO_MODE;\n-    }\n-    switch (mode) {\n-      case AUTO_MODE:\n-        // TODO: Implement Non-interactive mode\n-        FixResult fixResult = queryFixer.fix(query);\n-        if (fixResult.getOptions().isEmpty()) {\n-          return;\n-        }\n-        String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n-        printQueryResult(newQuery, bigQueryOptions);\n-        break;\n-\n-      case USER_ASSISTANCE_MODE:\n-      case UA_MODE:\n-        // TODO: Implement guide mode\n-        return;\n-\n-      case FIX_ONCE_MODE:\n-      case FO_MODE:\n-        fixResult = fixQueryInFullInteractMode(queryFixer, query);\n-        printFixResult(query, fixResult, cmd.getOptionValue(OUTPUT));\n-        break;\n-\n-      default:\n-        System.out.println(\"Mode (-m) is incorrect. Use --help for usage.\");\n-        System.exit(1);\n-    }\n+    String mode = queryFixerOptions.getOptionValue(MODE);\n+    String outputFormat = queryFixerOptions.getOptionValue(OUTPUT);\n+    CommandLineInteraction interaction =\n+        CommandLineInteraction.create(mode, outputFormat, bigQueryOptions);\n+    interaction.interact(query);\n   }\n \n-  private static BigQueryOptions buildBigQueryOptions(String credentialPath, String projectId) {\n-    if (credentialPath == null) {\n-      return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n-    } else {\n-      // TODO: should support this in near future.\n-      System.out.println(\"Customized credential path is not supported\");\n-      System.exit(1);\n-      return null;\n-    }\n-  }\n-\n-  private static FixResult fixQueryInFullInteractMode(\n-      AutomaticQueryFixer queryFixer, String query) {\n-    return queryFixer.fix(query);\n-  }\n-\n-  private static void printFixResult(String query, FixResult fixResult, String outputFormat) {\n-    if (outputFormat == null || outputFormat.equalsIgnoreCase(NATURAL_OUTPUT)) {\n-      System.out.println(\"Input query: \" + query);\n-      printFixResultInCommandLine(fixResult);\n-    } else if (outputFormat.equalsIgnoreCase(JSON_OUTPUT)) {\n-      printFixResultAsJson(fixResult);\n-    } else {\n-      System.out.println(\"Output format (-o) is incorrect. Use --help for usage.\");\n-      System.exit(1);\n+  /** Create the BigQueryOption based on user-input credentials path and project ID. */\n+  private static BigQueryOptions buildBigQueryOptions(String credentialsPath, String projectId) {\n+    if (projectId == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0MzY4OQ=="}, "originalCommit": {"oid": "fb95e7420a661b8a44d36ed951dba2a82cd53b77"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODA4MTgzOnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODo0MToyMFrOHDUh0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMDoxNDoyN1rOHDXd8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0NDExNA==", "bodyText": "Will it be empty too?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/154#discussion_r473244114", "createdAt": "2020-08-19T18:41:20Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,227 +1,75 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.cloud.bigquery.*;\n-import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n-import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n-import com.google.gson.Gson;\n-import com.google.gson.GsonBuilder;\n-import org.apache.commons.cli.Option;\n-import org.apache.commons.cli.*;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.auth.oauth2.ServiceAccountCredentials;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.utils.queryfixer.cmd.CommandLineInteraction;\n+import com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions;\n \n-import java.util.List;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n \n-public class QueryFixerMain {\n-\n-  private static final String CREDENTIAL_SHORTCUT = \"c\";\n-  private static final String CREDENTIAL = \"credential\";\n-\n-  private static final String PROJECT_ID_SHORTCUT = \"p\";\n-  private static final String PROJECT_ID = \"project-id\";\n-\n-  private static final String OUTPUT_SHORTCUT = \"o\";\n-  private static final String OUTPUT = \"output\";\n-  private static final String JSON_OUTPUT = \"json\";\n-  private static final String NATURAL_OUTPUT = \"natural\";\n-\n-  private static final String MODE_SHORTCUT = \"m\";\n-  private static final String MODE = \"mode\";\n-  private static final String AUTO_MODE = \"auto\";\n-  private static final String USER_ASSISTANCE_MODE = \"user-assistance\";\n-  // The abbreviation of USER_ASSISTANCE_MODE\n-  private static final String UA_MODE = \"ua\";\n-  private static final String FIX_ONCE_MODE = \"fix-once\";\n-  // The abbreviation of FIX_ONCE_MODE\n-  private static final String FO_MODE = \"fo\";\n-\n-  private static CommandLine readFlags(String[] args) {\n-    Options options = new Options();\n-\n-    Option option =\n-        new Option(\n-            /*opt=*/ CREDENTIAL_SHORTCUT,\n-            /*long-opt=*/ CREDENTIAL,\n-            /*hasArg=*/ true,\n-            /*description=*/ \"The path to the credential file of the service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n-    options.addOption(option);\n-    option =\n-        new Option(\n-            /*opt=*/ PROJECT_ID_SHORTCUT,\n-            /*long-opt=*/ PROJECT_ID,\n-            /*hasArg=*/ true,\n-            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n-    options.addOption(option);\n-    option =\n-        new Option(\n-            /*opt=*/ OUTPUT_SHORTCUT,\n-            /*long-opt=*/ OUTPUT,\n-            /*hasArg=*/ true,\n-            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n-    options.addOption(option);\n-    option =\n-        new Option(\n-            /*opt=*/ MODE_SHORTCUT,\n-            /*long-opt=*/ MODE,\n-            /*hasArg=*/ true,\n-            /*description=*/ \"Interactive Mode. The available mode are \\\"auto\\\" (default), \\\"ua/user-assistance\\\" and \\\"fo/fix-once\\\". Please see the README file for the detailed description.\");\n-    options.addOption(option);\n-\n-    if (args.length == 0) {\n-      System.out.println(\"Please provide arguments.\");\n-      printHelpAndExit(options);\n-    }\n-\n-    CommandLineParser parser = new DefaultParser();\n-    try {\n-      return parser.parse(options, args);\n-    } catch (ParseException e) {\n-      System.out.println(e.getMessage());\n-      printHelpAndExit(options);\n-      return null;\n-    }\n-  }\n+import static com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions.*;\n+import static java.lang.System.exit;\n \n-  public static void printHelpAndExit(Options options) {\n-    HelpFormatter formatter = new HelpFormatter();\n-    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n-    System.exit(1);\n-  }\n+public class QueryFixerMain {\n \n   public static void main(String[] args) {\n-    CommandLine cmd = readFlags(args);\n+    QueryFixerOptions queryFixerOptions = QueryFixerOptions.readUserInput(args);\n+    if (queryFixerOptions == null) {\n+      QueryFixerOptions.printHelpAndExit();\n+    }\n \n-    String credentialPath = cmd.getOptionValue(CREDENTIAL);\n-    String projectId = cmd.getOptionValue(PROJECT_ID);\n-    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+    String credentialsPath = queryFixerOptions.getOptionValue(CREDENTIALS);\n+    String projectId = queryFixerOptions.getOptionValue(PROJECT_ID);\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialsPath, projectId);\n \n-    if (cmd.getArgList().isEmpty()) {\n+    String query = queryFixerOptions.getQuery();\n+    if (query == null) {\n       // In CLI mode, all the instructions are output by print functions, because logger outputs\n       // extract info (time, code position) that distracts users.\n       System.out.println(\n           \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+      exit(1);\n     }\n-\n-    String query = cmd.getArgList().get(0);\n-    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n-\n-    String mode = cmd.getOptionValue(MODE);\n-    if (mode == null) {\n-      mode = AUTO_MODE;\n-    }\n-    switch (mode) {\n-      case AUTO_MODE:\n-        // TODO: Implement Non-interactive mode\n-        FixResult fixResult = queryFixer.fix(query);\n-        if (fixResult.getOptions().isEmpty()) {\n-          return;\n-        }\n-        String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n-        printQueryResult(newQuery, bigQueryOptions);\n-        break;\n-\n-      case USER_ASSISTANCE_MODE:\n-      case UA_MODE:\n-        // TODO: Implement guide mode\n-        return;\n-\n-      case FIX_ONCE_MODE:\n-      case FO_MODE:\n-        fixResult = fixQueryInFullInteractMode(queryFixer, query);\n-        printFixResult(query, fixResult, cmd.getOptionValue(OUTPUT));\n-        break;\n-\n-      default:\n-        System.out.println(\"Mode (-m) is incorrect. Use --help for usage.\");\n-        System.exit(1);\n-    }\n+    String mode = queryFixerOptions.getOptionValue(MODE);\n+    String outputFormat = queryFixerOptions.getOptionValue(OUTPUT);\n+    CommandLineInteraction interaction =\n+        CommandLineInteraction.create(mode, outputFormat, bigQueryOptions);\n+    interaction.interact(query);\n   }\n \n-  private static BigQueryOptions buildBigQueryOptions(String credentialPath, String projectId) {\n-    if (credentialPath == null) {\n-      return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n-    } else {\n-      // TODO: should support this in near future.\n-      System.out.println(\"Customized credential path is not supported\");\n-      System.exit(1);\n-      return null;\n-    }\n-  }\n-\n-  private static FixResult fixQueryInFullInteractMode(\n-      AutomaticQueryFixer queryFixer, String query) {\n-    return queryFixer.fix(query);\n-  }\n-\n-  private static void printFixResult(String query, FixResult fixResult, String outputFormat) {\n-    if (outputFormat == null || outputFormat.equalsIgnoreCase(NATURAL_OUTPUT)) {\n-      System.out.println(\"Input query: \" + query);\n-      printFixResultInCommandLine(fixResult);\n-    } else if (outputFormat.equalsIgnoreCase(JSON_OUTPUT)) {\n-      printFixResultAsJson(fixResult);\n-    } else {\n-      System.out.println(\"Output format (-o) is incorrect. Use --help for usage.\");\n-      System.exit(1);\n+  /** Create the BigQueryOption based on user-input credentials path and project ID. */\n+  private static BigQueryOptions buildBigQueryOptions(String credentialsPath, String projectId) {\n+    if (projectId == null) {\n+      System.out.println(\"Project ID should not be null. Please provide it through the flag -p.\");\n+      printHelpAndExit();\n     }\n-  }\n-\n-  private static void printFixResultAsJson(FixResult fixResult) {\n-    Gson gson = new GsonBuilder().setPrettyPrinting().serializeNulls().create();\n-    System.out.println(gson.toJson(fixResult));\n-  }\n-\n-  private static void printFixResultInCommandLine(FixResult fixResult) {\n-    if (fixResult.getStatus() == FixResult.Status.NO_ERROR) {\n-      System.out.println(\"The input query is valid. No errors to fix.\");\n-      return;\n-    }\n-\n-    System.out.println(\"The query has an error: \" + fixResult.getError());\n \n-    if (fixResult.getStatus() == FixResult.Status.FAILURE) {\n-      System.out.println(\"Failed to fix the input query.\");\n-      return;\n-    }\n-\n-    System.out.println(\"It can be fixed by the approach: \" + fixResult.getApproach());\n-    printFixOptions(fixResult.getOptions());\n-  }\n-\n-  private static void printFixOptions(List<FixOption> options) {\n-    System.out.println();\n-    int count = 1;\n-    for (FixOption option : options) {\n-      System.out.println(String.format(\"%d. Option: %s\", count++, option.getDescription()));\n-      System.out.println(String.format(\"   Fixed query: %s\", option.getFixedQuery()));\n-      System.out.println();\n+    // If no credentials is provided, the program uses:\n+    // <ol>\n+    // <li> the default path in the Env variable: GOOGLE_APPLICATION_CREDENTIALS.\n+    // <li> Default credentials location (OS dependent). For example,\n+    // \"~/.config/gcloud/application_default_credentials.json\" in Linux. Usually, it should be same\n+    // path of the credentials you create through calling the command \"gcloud auth\n+    // application-default login\".\n+    // </ol>\n+    if (credentialsPath == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb95e7420a661b8a44d36ed951dba2a82cd53b77"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI5MjI3NA==", "bodyText": "Yes, similar as the projectID. If it is an empty string, it should be considered as an incorrect path to a credentials. It will be handled inside BigQueryOptions.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/154#discussion_r473292274", "createdAt": "2020-08-19T20:14:27Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,227 +1,75 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.cloud.bigquery.*;\n-import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n-import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n-import com.google.gson.Gson;\n-import com.google.gson.GsonBuilder;\n-import org.apache.commons.cli.Option;\n-import org.apache.commons.cli.*;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.auth.oauth2.ServiceAccountCredentials;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.utils.queryfixer.cmd.CommandLineInteraction;\n+import com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions;\n \n-import java.util.List;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n \n-public class QueryFixerMain {\n-\n-  private static final String CREDENTIAL_SHORTCUT = \"c\";\n-  private static final String CREDENTIAL = \"credential\";\n-\n-  private static final String PROJECT_ID_SHORTCUT = \"p\";\n-  private static final String PROJECT_ID = \"project-id\";\n-\n-  private static final String OUTPUT_SHORTCUT = \"o\";\n-  private static final String OUTPUT = \"output\";\n-  private static final String JSON_OUTPUT = \"json\";\n-  private static final String NATURAL_OUTPUT = \"natural\";\n-\n-  private static final String MODE_SHORTCUT = \"m\";\n-  private static final String MODE = \"mode\";\n-  private static final String AUTO_MODE = \"auto\";\n-  private static final String USER_ASSISTANCE_MODE = \"user-assistance\";\n-  // The abbreviation of USER_ASSISTANCE_MODE\n-  private static final String UA_MODE = \"ua\";\n-  private static final String FIX_ONCE_MODE = \"fix-once\";\n-  // The abbreviation of FIX_ONCE_MODE\n-  private static final String FO_MODE = \"fo\";\n-\n-  private static CommandLine readFlags(String[] args) {\n-    Options options = new Options();\n-\n-    Option option =\n-        new Option(\n-            /*opt=*/ CREDENTIAL_SHORTCUT,\n-            /*long-opt=*/ CREDENTIAL,\n-            /*hasArg=*/ true,\n-            /*description=*/ \"The path to the credential file of the service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n-    options.addOption(option);\n-    option =\n-        new Option(\n-            /*opt=*/ PROJECT_ID_SHORTCUT,\n-            /*long-opt=*/ PROJECT_ID,\n-            /*hasArg=*/ true,\n-            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n-    options.addOption(option);\n-    option =\n-        new Option(\n-            /*opt=*/ OUTPUT_SHORTCUT,\n-            /*long-opt=*/ OUTPUT,\n-            /*hasArg=*/ true,\n-            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n-    options.addOption(option);\n-    option =\n-        new Option(\n-            /*opt=*/ MODE_SHORTCUT,\n-            /*long-opt=*/ MODE,\n-            /*hasArg=*/ true,\n-            /*description=*/ \"Interactive Mode. The available mode are \\\"auto\\\" (default), \\\"ua/user-assistance\\\" and \\\"fo/fix-once\\\". Please see the README file for the detailed description.\");\n-    options.addOption(option);\n-\n-    if (args.length == 0) {\n-      System.out.println(\"Please provide arguments.\");\n-      printHelpAndExit(options);\n-    }\n-\n-    CommandLineParser parser = new DefaultParser();\n-    try {\n-      return parser.parse(options, args);\n-    } catch (ParseException e) {\n-      System.out.println(e.getMessage());\n-      printHelpAndExit(options);\n-      return null;\n-    }\n-  }\n+import static com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions.*;\n+import static java.lang.System.exit;\n \n-  public static void printHelpAndExit(Options options) {\n-    HelpFormatter formatter = new HelpFormatter();\n-    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n-    System.exit(1);\n-  }\n+public class QueryFixerMain {\n \n   public static void main(String[] args) {\n-    CommandLine cmd = readFlags(args);\n+    QueryFixerOptions queryFixerOptions = QueryFixerOptions.readUserInput(args);\n+    if (queryFixerOptions == null) {\n+      QueryFixerOptions.printHelpAndExit();\n+    }\n \n-    String credentialPath = cmd.getOptionValue(CREDENTIAL);\n-    String projectId = cmd.getOptionValue(PROJECT_ID);\n-    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+    String credentialsPath = queryFixerOptions.getOptionValue(CREDENTIALS);\n+    String projectId = queryFixerOptions.getOptionValue(PROJECT_ID);\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialsPath, projectId);\n \n-    if (cmd.getArgList().isEmpty()) {\n+    String query = queryFixerOptions.getQuery();\n+    if (query == null) {\n       // In CLI mode, all the instructions are output by print functions, because logger outputs\n       // extract info (time, code position) that distracts users.\n       System.out.println(\n           \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+      exit(1);\n     }\n-\n-    String query = cmd.getArgList().get(0);\n-    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n-\n-    String mode = cmd.getOptionValue(MODE);\n-    if (mode == null) {\n-      mode = AUTO_MODE;\n-    }\n-    switch (mode) {\n-      case AUTO_MODE:\n-        // TODO: Implement Non-interactive mode\n-        FixResult fixResult = queryFixer.fix(query);\n-        if (fixResult.getOptions().isEmpty()) {\n-          return;\n-        }\n-        String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n-        printQueryResult(newQuery, bigQueryOptions);\n-        break;\n-\n-      case USER_ASSISTANCE_MODE:\n-      case UA_MODE:\n-        // TODO: Implement guide mode\n-        return;\n-\n-      case FIX_ONCE_MODE:\n-      case FO_MODE:\n-        fixResult = fixQueryInFullInteractMode(queryFixer, query);\n-        printFixResult(query, fixResult, cmd.getOptionValue(OUTPUT));\n-        break;\n-\n-      default:\n-        System.out.println(\"Mode (-m) is incorrect. Use --help for usage.\");\n-        System.exit(1);\n-    }\n+    String mode = queryFixerOptions.getOptionValue(MODE);\n+    String outputFormat = queryFixerOptions.getOptionValue(OUTPUT);\n+    CommandLineInteraction interaction =\n+        CommandLineInteraction.create(mode, outputFormat, bigQueryOptions);\n+    interaction.interact(query);\n   }\n \n-  private static BigQueryOptions buildBigQueryOptions(String credentialPath, String projectId) {\n-    if (credentialPath == null) {\n-      return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n-    } else {\n-      // TODO: should support this in near future.\n-      System.out.println(\"Customized credential path is not supported\");\n-      System.exit(1);\n-      return null;\n-    }\n-  }\n-\n-  private static FixResult fixQueryInFullInteractMode(\n-      AutomaticQueryFixer queryFixer, String query) {\n-    return queryFixer.fix(query);\n-  }\n-\n-  private static void printFixResult(String query, FixResult fixResult, String outputFormat) {\n-    if (outputFormat == null || outputFormat.equalsIgnoreCase(NATURAL_OUTPUT)) {\n-      System.out.println(\"Input query: \" + query);\n-      printFixResultInCommandLine(fixResult);\n-    } else if (outputFormat.equalsIgnoreCase(JSON_OUTPUT)) {\n-      printFixResultAsJson(fixResult);\n-    } else {\n-      System.out.println(\"Output format (-o) is incorrect. Use --help for usage.\");\n-      System.exit(1);\n+  /** Create the BigQueryOption based on user-input credentials path and project ID. */\n+  private static BigQueryOptions buildBigQueryOptions(String credentialsPath, String projectId) {\n+    if (projectId == null) {\n+      System.out.println(\"Project ID should not be null. Please provide it through the flag -p.\");\n+      printHelpAndExit();\n     }\n-  }\n-\n-  private static void printFixResultAsJson(FixResult fixResult) {\n-    Gson gson = new GsonBuilder().setPrettyPrinting().serializeNulls().create();\n-    System.out.println(gson.toJson(fixResult));\n-  }\n-\n-  private static void printFixResultInCommandLine(FixResult fixResult) {\n-    if (fixResult.getStatus() == FixResult.Status.NO_ERROR) {\n-      System.out.println(\"The input query is valid. No errors to fix.\");\n-      return;\n-    }\n-\n-    System.out.println(\"The query has an error: \" + fixResult.getError());\n \n-    if (fixResult.getStatus() == FixResult.Status.FAILURE) {\n-      System.out.println(\"Failed to fix the input query.\");\n-      return;\n-    }\n-\n-    System.out.println(\"It can be fixed by the approach: \" + fixResult.getApproach());\n-    printFixOptions(fixResult.getOptions());\n-  }\n-\n-  private static void printFixOptions(List<FixOption> options) {\n-    System.out.println();\n-    int count = 1;\n-    for (FixOption option : options) {\n-      System.out.println(String.format(\"%d. Option: %s\", count++, option.getDescription()));\n-      System.out.println(String.format(\"   Fixed query: %s\", option.getFixedQuery()));\n-      System.out.println();\n+    // If no credentials is provided, the program uses:\n+    // <ol>\n+    // <li> the default path in the Env variable: GOOGLE_APPLICATION_CREDENTIALS.\n+    // <li> Default credentials location (OS dependent). For example,\n+    // \"~/.config/gcloud/application_default_credentials.json\" in Linux. Usually, it should be same\n+    // path of the credentials you create through calling the command \"gcloud auth\n+    // application-default login\".\n+    // </ol>\n+    if (credentialsPath == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0NDExNA=="}, "originalCommit": {"oid": "fb95e7420a661b8a44d36ed951dba2a82cd53b77"}, "originalPosition": 234}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODA5NTQ0OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODo0NToxMlrOHDUqIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMDoxNjoyOVrOHDXh1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0NjI0Mw==", "bodyText": "nit: will never reach to the point, return null is enforced by compilation.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/154#discussion_r473246243", "createdAt": "2020-08-19T18:45:12Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,227 +1,75 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.cloud.bigquery.*;\n-import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n-import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n-import com.google.gson.Gson;\n-import com.google.gson.GsonBuilder;\n-import org.apache.commons.cli.Option;\n-import org.apache.commons.cli.*;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.auth.oauth2.ServiceAccountCredentials;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.utils.queryfixer.cmd.CommandLineInteraction;\n+import com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions;\n \n-import java.util.List;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n \n-public class QueryFixerMain {\n-\n-  private static final String CREDENTIAL_SHORTCUT = \"c\";\n-  private static final String CREDENTIAL = \"credential\";\n-\n-  private static final String PROJECT_ID_SHORTCUT = \"p\";\n-  private static final String PROJECT_ID = \"project-id\";\n-\n-  private static final String OUTPUT_SHORTCUT = \"o\";\n-  private static final String OUTPUT = \"output\";\n-  private static final String JSON_OUTPUT = \"json\";\n-  private static final String NATURAL_OUTPUT = \"natural\";\n-\n-  private static final String MODE_SHORTCUT = \"m\";\n-  private static final String MODE = \"mode\";\n-  private static final String AUTO_MODE = \"auto\";\n-  private static final String USER_ASSISTANCE_MODE = \"user-assistance\";\n-  // The abbreviation of USER_ASSISTANCE_MODE\n-  private static final String UA_MODE = \"ua\";\n-  private static final String FIX_ONCE_MODE = \"fix-once\";\n-  // The abbreviation of FIX_ONCE_MODE\n-  private static final String FO_MODE = \"fo\";\n-\n-  private static CommandLine readFlags(String[] args) {\n-    Options options = new Options();\n-\n-    Option option =\n-        new Option(\n-            /*opt=*/ CREDENTIAL_SHORTCUT,\n-            /*long-opt=*/ CREDENTIAL,\n-            /*hasArg=*/ true,\n-            /*description=*/ \"The path to the credential file of the service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n-    options.addOption(option);\n-    option =\n-        new Option(\n-            /*opt=*/ PROJECT_ID_SHORTCUT,\n-            /*long-opt=*/ PROJECT_ID,\n-            /*hasArg=*/ true,\n-            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n-    options.addOption(option);\n-    option =\n-        new Option(\n-            /*opt=*/ OUTPUT_SHORTCUT,\n-            /*long-opt=*/ OUTPUT,\n-            /*hasArg=*/ true,\n-            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n-    options.addOption(option);\n-    option =\n-        new Option(\n-            /*opt=*/ MODE_SHORTCUT,\n-            /*long-opt=*/ MODE,\n-            /*hasArg=*/ true,\n-            /*description=*/ \"Interactive Mode. The available mode are \\\"auto\\\" (default), \\\"ua/user-assistance\\\" and \\\"fo/fix-once\\\". Please see the README file for the detailed description.\");\n-    options.addOption(option);\n-\n-    if (args.length == 0) {\n-      System.out.println(\"Please provide arguments.\");\n-      printHelpAndExit(options);\n-    }\n-\n-    CommandLineParser parser = new DefaultParser();\n-    try {\n-      return parser.parse(options, args);\n-    } catch (ParseException e) {\n-      System.out.println(e.getMessage());\n-      printHelpAndExit(options);\n-      return null;\n-    }\n-  }\n+import static com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions.*;\n+import static java.lang.System.exit;\n \n-  public static void printHelpAndExit(Options options) {\n-    HelpFormatter formatter = new HelpFormatter();\n-    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n-    System.exit(1);\n-  }\n+public class QueryFixerMain {\n \n   public static void main(String[] args) {\n-    CommandLine cmd = readFlags(args);\n+    QueryFixerOptions queryFixerOptions = QueryFixerOptions.readUserInput(args);\n+    if (queryFixerOptions == null) {\n+      QueryFixerOptions.printHelpAndExit();\n+    }\n \n-    String credentialPath = cmd.getOptionValue(CREDENTIAL);\n-    String projectId = cmd.getOptionValue(PROJECT_ID);\n-    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+    String credentialsPath = queryFixerOptions.getOptionValue(CREDENTIALS);\n+    String projectId = queryFixerOptions.getOptionValue(PROJECT_ID);\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialsPath, projectId);\n \n-    if (cmd.getArgList().isEmpty()) {\n+    String query = queryFixerOptions.getQuery();\n+    if (query == null) {\n       // In CLI mode, all the instructions are output by print functions, because logger outputs\n       // extract info (time, code position) that distracts users.\n       System.out.println(\n           \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+      exit(1);\n     }\n-\n-    String query = cmd.getArgList().get(0);\n-    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n-\n-    String mode = cmd.getOptionValue(MODE);\n-    if (mode == null) {\n-      mode = AUTO_MODE;\n-    }\n-    switch (mode) {\n-      case AUTO_MODE:\n-        // TODO: Implement Non-interactive mode\n-        FixResult fixResult = queryFixer.fix(query);\n-        if (fixResult.getOptions().isEmpty()) {\n-          return;\n-        }\n-        String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n-        printQueryResult(newQuery, bigQueryOptions);\n-        break;\n-\n-      case USER_ASSISTANCE_MODE:\n-      case UA_MODE:\n-        // TODO: Implement guide mode\n-        return;\n-\n-      case FIX_ONCE_MODE:\n-      case FO_MODE:\n-        fixResult = fixQueryInFullInteractMode(queryFixer, query);\n-        printFixResult(query, fixResult, cmd.getOptionValue(OUTPUT));\n-        break;\n-\n-      default:\n-        System.out.println(\"Mode (-m) is incorrect. Use --help for usage.\");\n-        System.exit(1);\n-    }\n+    String mode = queryFixerOptions.getOptionValue(MODE);\n+    String outputFormat = queryFixerOptions.getOptionValue(OUTPUT);\n+    CommandLineInteraction interaction =\n+        CommandLineInteraction.create(mode, outputFormat, bigQueryOptions);\n+    interaction.interact(query);\n   }\n \n-  private static BigQueryOptions buildBigQueryOptions(String credentialPath, String projectId) {\n-    if (credentialPath == null) {\n-      return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n-    } else {\n-      // TODO: should support this in near future.\n-      System.out.println(\"Customized credential path is not supported\");\n-      System.exit(1);\n-      return null;\n-    }\n-  }\n-\n-  private static FixResult fixQueryInFullInteractMode(\n-      AutomaticQueryFixer queryFixer, String query) {\n-    return queryFixer.fix(query);\n-  }\n-\n-  private static void printFixResult(String query, FixResult fixResult, String outputFormat) {\n-    if (outputFormat == null || outputFormat.equalsIgnoreCase(NATURAL_OUTPUT)) {\n-      System.out.println(\"Input query: \" + query);\n-      printFixResultInCommandLine(fixResult);\n-    } else if (outputFormat.equalsIgnoreCase(JSON_OUTPUT)) {\n-      printFixResultAsJson(fixResult);\n-    } else {\n-      System.out.println(\"Output format (-o) is incorrect. Use --help for usage.\");\n-      System.exit(1);\n+  /** Create the BigQueryOption based on user-input credentials path and project ID. */\n+  private static BigQueryOptions buildBigQueryOptions(String credentialsPath, String projectId) {\n+    if (projectId == null) {\n+      System.out.println(\"Project ID should not be null. Please provide it through the flag -p.\");\n+      printHelpAndExit();\n     }\n-  }\n-\n-  private static void printFixResultAsJson(FixResult fixResult) {\n-    Gson gson = new GsonBuilder().setPrettyPrinting().serializeNulls().create();\n-    System.out.println(gson.toJson(fixResult));\n-  }\n-\n-  private static void printFixResultInCommandLine(FixResult fixResult) {\n-    if (fixResult.getStatus() == FixResult.Status.NO_ERROR) {\n-      System.out.println(\"The input query is valid. No errors to fix.\");\n-      return;\n-    }\n-\n-    System.out.println(\"The query has an error: \" + fixResult.getError());\n \n-    if (fixResult.getStatus() == FixResult.Status.FAILURE) {\n-      System.out.println(\"Failed to fix the input query.\");\n-      return;\n-    }\n-\n-    System.out.println(\"It can be fixed by the approach: \" + fixResult.getApproach());\n-    printFixOptions(fixResult.getOptions());\n-  }\n-\n-  private static void printFixOptions(List<FixOption> options) {\n-    System.out.println();\n-    int count = 1;\n-    for (FixOption option : options) {\n-      System.out.println(String.format(\"%d. Option: %s\", count++, option.getDescription()));\n-      System.out.println(String.format(\"   Fixed query: %s\", option.getFixedQuery()));\n-      System.out.println();\n+    // If no credentials is provided, the program uses:\n+    // <ol>\n+    // <li> the default path in the Env variable: GOOGLE_APPLICATION_CREDENTIALS.\n+    // <li> Default credentials location (OS dependent). For example,\n+    // \"~/.config/gcloud/application_default_credentials.json\" in Linux. Usually, it should be same\n+    // path of the credentials you create through calling the command \"gcloud auth\n+    // application-default login\".\n+    // </ol>\n+    if (credentialsPath == null) {\n+      return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n     }\n-  }\n \n-  private static void printQueryResult(String query, BigQueryOptions options) {\n-    BigQuery bigQuery = options.getService();\n-\n-    QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).build();\n-    try {\n-      int maxCount = 10;\n-      int count = 0;\n-      System.out.println(\"=\".repeat(20));\n-      System.out.println(\"Now query: \" + query);\n-      System.out.printf(\"Only %d rows are printed\\n\", maxCount);\n-      TableResult result = bigQuery.query(queryConfig);\n-\n-      for (Field field : result.getSchema().getFields()) {\n-        System.out.printf(\"%s,\", field.getName());\n-      }\n-      System.out.print(\"\\n\");\n-\n-      for (FieldValueList row : bigQuery.query(queryConfig).iterateAll()) {\n-        for (FieldValue val : row) {\n-          System.out.printf(\"%s,\", val.getValue());\n-        }\n-        System.out.print(\"\\n\");\n-        if (++count >= maxCount) {\n-          break;\n-        }\n-      }\n-    } catch (InterruptedException ignored) {\n+    File credentialsFile = new File(credentialsPath);\n+    GoogleCredentials credentials;\n+    try (FileInputStream serviceAccountStream = new FileInputStream(credentialsFile)) {\n+      credentials = ServiceAccountCredentials.fromStream(serviceAccountStream);\n+    } catch (IOException e) {\n+      System.out.println(\n+          \"Cannot read the credentials from the flag -c. Please provide a correct credentials path with read permission.\");\n+      exit(1);\n+      // The program will never go down, but the compiler needs a extra RETURN to realize it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb95e7420a661b8a44d36ed951dba2a82cd53b77"}, "originalPosition": 274}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI5MzI3MQ==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/154#discussion_r473293271", "createdAt": "2020-08-19T20:16:29Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,227 +1,75 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.cloud.bigquery.*;\n-import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n-import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n-import com.google.gson.Gson;\n-import com.google.gson.GsonBuilder;\n-import org.apache.commons.cli.Option;\n-import org.apache.commons.cli.*;\n+import com.google.auth.oauth2.GoogleCredentials;\n+import com.google.auth.oauth2.ServiceAccountCredentials;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.utils.queryfixer.cmd.CommandLineInteraction;\n+import com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions;\n \n-import java.util.List;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n \n-public class QueryFixerMain {\n-\n-  private static final String CREDENTIAL_SHORTCUT = \"c\";\n-  private static final String CREDENTIAL = \"credential\";\n-\n-  private static final String PROJECT_ID_SHORTCUT = \"p\";\n-  private static final String PROJECT_ID = \"project-id\";\n-\n-  private static final String OUTPUT_SHORTCUT = \"o\";\n-  private static final String OUTPUT = \"output\";\n-  private static final String JSON_OUTPUT = \"json\";\n-  private static final String NATURAL_OUTPUT = \"natural\";\n-\n-  private static final String MODE_SHORTCUT = \"m\";\n-  private static final String MODE = \"mode\";\n-  private static final String AUTO_MODE = \"auto\";\n-  private static final String USER_ASSISTANCE_MODE = \"user-assistance\";\n-  // The abbreviation of USER_ASSISTANCE_MODE\n-  private static final String UA_MODE = \"ua\";\n-  private static final String FIX_ONCE_MODE = \"fix-once\";\n-  // The abbreviation of FIX_ONCE_MODE\n-  private static final String FO_MODE = \"fo\";\n-\n-  private static CommandLine readFlags(String[] args) {\n-    Options options = new Options();\n-\n-    Option option =\n-        new Option(\n-            /*opt=*/ CREDENTIAL_SHORTCUT,\n-            /*long-opt=*/ CREDENTIAL,\n-            /*hasArg=*/ true,\n-            /*description=*/ \"The path to the credential file of the service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n-    options.addOption(option);\n-    option =\n-        new Option(\n-            /*opt=*/ PROJECT_ID_SHORTCUT,\n-            /*long-opt=*/ PROJECT_ID,\n-            /*hasArg=*/ true,\n-            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n-    options.addOption(option);\n-    option =\n-        new Option(\n-            /*opt=*/ OUTPUT_SHORTCUT,\n-            /*long-opt=*/ OUTPUT,\n-            /*hasArg=*/ true,\n-            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n-    options.addOption(option);\n-    option =\n-        new Option(\n-            /*opt=*/ MODE_SHORTCUT,\n-            /*long-opt=*/ MODE,\n-            /*hasArg=*/ true,\n-            /*description=*/ \"Interactive Mode. The available mode are \\\"auto\\\" (default), \\\"ua/user-assistance\\\" and \\\"fo/fix-once\\\". Please see the README file for the detailed description.\");\n-    options.addOption(option);\n-\n-    if (args.length == 0) {\n-      System.out.println(\"Please provide arguments.\");\n-      printHelpAndExit(options);\n-    }\n-\n-    CommandLineParser parser = new DefaultParser();\n-    try {\n-      return parser.parse(options, args);\n-    } catch (ParseException e) {\n-      System.out.println(e.getMessage());\n-      printHelpAndExit(options);\n-      return null;\n-    }\n-  }\n+import static com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions.*;\n+import static java.lang.System.exit;\n \n-  public static void printHelpAndExit(Options options) {\n-    HelpFormatter formatter = new HelpFormatter();\n-    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n-    System.exit(1);\n-  }\n+public class QueryFixerMain {\n \n   public static void main(String[] args) {\n-    CommandLine cmd = readFlags(args);\n+    QueryFixerOptions queryFixerOptions = QueryFixerOptions.readUserInput(args);\n+    if (queryFixerOptions == null) {\n+      QueryFixerOptions.printHelpAndExit();\n+    }\n \n-    String credentialPath = cmd.getOptionValue(CREDENTIAL);\n-    String projectId = cmd.getOptionValue(PROJECT_ID);\n-    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+    String credentialsPath = queryFixerOptions.getOptionValue(CREDENTIALS);\n+    String projectId = queryFixerOptions.getOptionValue(PROJECT_ID);\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialsPath, projectId);\n \n-    if (cmd.getArgList().isEmpty()) {\n+    String query = queryFixerOptions.getQuery();\n+    if (query == null) {\n       // In CLI mode, all the instructions are output by print functions, because logger outputs\n       // extract info (time, code position) that distracts users.\n       System.out.println(\n           \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+      exit(1);\n     }\n-\n-    String query = cmd.getArgList().get(0);\n-    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n-\n-    String mode = cmd.getOptionValue(MODE);\n-    if (mode == null) {\n-      mode = AUTO_MODE;\n-    }\n-    switch (mode) {\n-      case AUTO_MODE:\n-        // TODO: Implement Non-interactive mode\n-        FixResult fixResult = queryFixer.fix(query);\n-        if (fixResult.getOptions().isEmpty()) {\n-          return;\n-        }\n-        String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n-        printQueryResult(newQuery, bigQueryOptions);\n-        break;\n-\n-      case USER_ASSISTANCE_MODE:\n-      case UA_MODE:\n-        // TODO: Implement guide mode\n-        return;\n-\n-      case FIX_ONCE_MODE:\n-      case FO_MODE:\n-        fixResult = fixQueryInFullInteractMode(queryFixer, query);\n-        printFixResult(query, fixResult, cmd.getOptionValue(OUTPUT));\n-        break;\n-\n-      default:\n-        System.out.println(\"Mode (-m) is incorrect. Use --help for usage.\");\n-        System.exit(1);\n-    }\n+    String mode = queryFixerOptions.getOptionValue(MODE);\n+    String outputFormat = queryFixerOptions.getOptionValue(OUTPUT);\n+    CommandLineInteraction interaction =\n+        CommandLineInteraction.create(mode, outputFormat, bigQueryOptions);\n+    interaction.interact(query);\n   }\n \n-  private static BigQueryOptions buildBigQueryOptions(String credentialPath, String projectId) {\n-    if (credentialPath == null) {\n-      return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n-    } else {\n-      // TODO: should support this in near future.\n-      System.out.println(\"Customized credential path is not supported\");\n-      System.exit(1);\n-      return null;\n-    }\n-  }\n-\n-  private static FixResult fixQueryInFullInteractMode(\n-      AutomaticQueryFixer queryFixer, String query) {\n-    return queryFixer.fix(query);\n-  }\n-\n-  private static void printFixResult(String query, FixResult fixResult, String outputFormat) {\n-    if (outputFormat == null || outputFormat.equalsIgnoreCase(NATURAL_OUTPUT)) {\n-      System.out.println(\"Input query: \" + query);\n-      printFixResultInCommandLine(fixResult);\n-    } else if (outputFormat.equalsIgnoreCase(JSON_OUTPUT)) {\n-      printFixResultAsJson(fixResult);\n-    } else {\n-      System.out.println(\"Output format (-o) is incorrect. Use --help for usage.\");\n-      System.exit(1);\n+  /** Create the BigQueryOption based on user-input credentials path and project ID. */\n+  private static BigQueryOptions buildBigQueryOptions(String credentialsPath, String projectId) {\n+    if (projectId == null) {\n+      System.out.println(\"Project ID should not be null. Please provide it through the flag -p.\");\n+      printHelpAndExit();\n     }\n-  }\n-\n-  private static void printFixResultAsJson(FixResult fixResult) {\n-    Gson gson = new GsonBuilder().setPrettyPrinting().serializeNulls().create();\n-    System.out.println(gson.toJson(fixResult));\n-  }\n-\n-  private static void printFixResultInCommandLine(FixResult fixResult) {\n-    if (fixResult.getStatus() == FixResult.Status.NO_ERROR) {\n-      System.out.println(\"The input query is valid. No errors to fix.\");\n-      return;\n-    }\n-\n-    System.out.println(\"The query has an error: \" + fixResult.getError());\n \n-    if (fixResult.getStatus() == FixResult.Status.FAILURE) {\n-      System.out.println(\"Failed to fix the input query.\");\n-      return;\n-    }\n-\n-    System.out.println(\"It can be fixed by the approach: \" + fixResult.getApproach());\n-    printFixOptions(fixResult.getOptions());\n-  }\n-\n-  private static void printFixOptions(List<FixOption> options) {\n-    System.out.println();\n-    int count = 1;\n-    for (FixOption option : options) {\n-      System.out.println(String.format(\"%d. Option: %s\", count++, option.getDescription()));\n-      System.out.println(String.format(\"   Fixed query: %s\", option.getFixedQuery()));\n-      System.out.println();\n+    // If no credentials is provided, the program uses:\n+    // <ol>\n+    // <li> the default path in the Env variable: GOOGLE_APPLICATION_CREDENTIALS.\n+    // <li> Default credentials location (OS dependent). For example,\n+    // \"~/.config/gcloud/application_default_credentials.json\" in Linux. Usually, it should be same\n+    // path of the credentials you create through calling the command \"gcloud auth\n+    // application-default login\".\n+    // </ol>\n+    if (credentialsPath == null) {\n+      return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n     }\n-  }\n \n-  private static void printQueryResult(String query, BigQueryOptions options) {\n-    BigQuery bigQuery = options.getService();\n-\n-    QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).build();\n-    try {\n-      int maxCount = 10;\n-      int count = 0;\n-      System.out.println(\"=\".repeat(20));\n-      System.out.println(\"Now query: \" + query);\n-      System.out.printf(\"Only %d rows are printed\\n\", maxCount);\n-      TableResult result = bigQuery.query(queryConfig);\n-\n-      for (Field field : result.getSchema().getFields()) {\n-        System.out.printf(\"%s,\", field.getName());\n-      }\n-      System.out.print(\"\\n\");\n-\n-      for (FieldValueList row : bigQuery.query(queryConfig).iterateAll()) {\n-        for (FieldValue val : row) {\n-          System.out.printf(\"%s,\", val.getValue());\n-        }\n-        System.out.print(\"\\n\");\n-        if (++count >= maxCount) {\n-          break;\n-        }\n-      }\n-    } catch (InterruptedException ignored) {\n+    File credentialsFile = new File(credentialsPath);\n+    GoogleCredentials credentials;\n+    try (FileInputStream serviceAccountStream = new FileInputStream(credentialsFile)) {\n+      credentials = ServiceAccountCredentials.fromStream(serviceAccountStream);\n+    } catch (IOException e) {\n+      System.out.println(\n+          \"Cannot read the credentials from the flag -c. Please provide a correct credentials path with read permission.\");\n+      exit(1);\n+      // The program will never go down, but the compiler needs a extra RETURN to realize it.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0NjI0Mw=="}, "originalCommit": {"oid": "fb95e7420a661b8a44d36ed951dba2a82cd53b77"}, "originalPosition": 274}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODEwNjIwOnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/cmd/AutoModeInteraction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODo0ODo0M1rOHDUxNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMDoxNjoyNlrOHDXhxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0ODA1NQ==", "bodyText": "maybe use static const?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/154#discussion_r473248055", "createdAt": "2020-08-19T18:48:43Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/cmd/AutoModeInteraction.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.google.cloud.bigquery.utils.queryfixer.cmd;\n+\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+\n+import java.util.List;\n+\n+import static com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions.JSON_OUTPUT;\n+import static com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions.NATURAL_OUTPUT;\n+\n+/**\n+ * A class responsible for the interaction between users and the query fixer in Auto mode. It\n+ * continually tries to fix every error in a query until the query is correct or unable to be fixed.\n+ * If an error can be fixed in multiple ways, then the first method will be selected. In this mode,\n+ * the query fixer takes the input query and outputs the final fix results without interacting with\n+ * users during the fix process.\n+ */\n+public class AutoModeInteraction extends CommandLineInteraction {\n+\n+  AutoModeInteraction(String outputFormat, BigQueryOptions bigQueryOptions) {\n+    super(outputFormat, bigQueryOptions);\n+  }\n+\n+  /**\n+   * Interact with users in Auto mode.\n+   *\n+   * @param query input query.\n+   */\n+  public void interact(String query) {\n+    List<FixResult> fixResults = queryFixer.autoFix(query);\n+    printFixResults(query, fixResults);\n+\n+    // Print the first 10 rows of the query's result if the query is correct.\n+    // This preview only runs when the output format is natural language.\n+    if (outputFormat.equals(NATURAL_OUTPUT)) {\n+      FixResult latestResult = fixResults.get(fixResults.size() - 1);\n+      if (latestResult.getStatus() == FixResult.Status.NO_ERROR) {\n+        printQueryResult(latestResult.getQuery());\n+      }\n+    }\n+  }\n+\n+  private void printQueryResult(String query) {\n+    BigQuery bigQuery = bigQueryOptions.getService();\n+\n+    QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).build();\n+    try {\n+      int maxCount = 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb95e7420a661b8a44d36ed951dba2a82cd53b77"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI5MzI1NA==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/154#discussion_r473293254", "createdAt": "2020-08-19T20:16:26Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/cmd/AutoModeInteraction.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.google.cloud.bigquery.utils.queryfixer.cmd;\n+\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+\n+import java.util.List;\n+\n+import static com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions.JSON_OUTPUT;\n+import static com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions.NATURAL_OUTPUT;\n+\n+/**\n+ * A class responsible for the interaction between users and the query fixer in Auto mode. It\n+ * continually tries to fix every error in a query until the query is correct or unable to be fixed.\n+ * If an error can be fixed in multiple ways, then the first method will be selected. In this mode,\n+ * the query fixer takes the input query and outputs the final fix results without interacting with\n+ * users during the fix process.\n+ */\n+public class AutoModeInteraction extends CommandLineInteraction {\n+\n+  AutoModeInteraction(String outputFormat, BigQueryOptions bigQueryOptions) {\n+    super(outputFormat, bigQueryOptions);\n+  }\n+\n+  /**\n+   * Interact with users in Auto mode.\n+   *\n+   * @param query input query.\n+   */\n+  public void interact(String query) {\n+    List<FixResult> fixResults = queryFixer.autoFix(query);\n+    printFixResults(query, fixResults);\n+\n+    // Print the first 10 rows of the query's result if the query is correct.\n+    // This preview only runs when the output format is natural language.\n+    if (outputFormat.equals(NATURAL_OUTPUT)) {\n+      FixResult latestResult = fixResults.get(fixResults.size() - 1);\n+      if (latestResult.getStatus() == FixResult.Status.NO_ERROR) {\n+        printQueryResult(latestResult.getQuery());\n+      }\n+    }\n+  }\n+\n+  private void printQueryResult(String query) {\n+    BigQuery bigQuery = bigQueryOptions.getService();\n+\n+    QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).build();\n+    try {\n+      int maxCount = 10;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0ODA1NQ=="}, "originalCommit": {"oid": "fb95e7420a661b8a44d36ed951dba2a82cd53b77"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODEwNzQ5OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/cmd/AutoModeInteraction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODo0OTowNVrOHDUx9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMDoxNjo1M1rOHDXiuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0ODI0NA==", "bodyText": "println()", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/154#discussion_r473248244", "createdAt": "2020-08-19T18:49:05Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/cmd/AutoModeInteraction.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.google.cloud.bigquery.utils.queryfixer.cmd;\n+\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+\n+import java.util.List;\n+\n+import static com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions.JSON_OUTPUT;\n+import static com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions.NATURAL_OUTPUT;\n+\n+/**\n+ * A class responsible for the interaction between users and the query fixer in Auto mode. It\n+ * continually tries to fix every error in a query until the query is correct or unable to be fixed.\n+ * If an error can be fixed in multiple ways, then the first method will be selected. In this mode,\n+ * the query fixer takes the input query and outputs the final fix results without interacting with\n+ * users during the fix process.\n+ */\n+public class AutoModeInteraction extends CommandLineInteraction {\n+\n+  AutoModeInteraction(String outputFormat, BigQueryOptions bigQueryOptions) {\n+    super(outputFormat, bigQueryOptions);\n+  }\n+\n+  /**\n+   * Interact with users in Auto mode.\n+   *\n+   * @param query input query.\n+   */\n+  public void interact(String query) {\n+    List<FixResult> fixResults = queryFixer.autoFix(query);\n+    printFixResults(query, fixResults);\n+\n+    // Print the first 10 rows of the query's result if the query is correct.\n+    // This preview only runs when the output format is natural language.\n+    if (outputFormat.equals(NATURAL_OUTPUT)) {\n+      FixResult latestResult = fixResults.get(fixResults.size() - 1);\n+      if (latestResult.getStatus() == FixResult.Status.NO_ERROR) {\n+        printQueryResult(latestResult.getQuery());\n+      }\n+    }\n+  }\n+\n+  private void printQueryResult(String query) {\n+    BigQuery bigQuery = bigQueryOptions.getService();\n+\n+    QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).build();\n+    try {\n+      int maxCount = 10;\n+      int count = 0;\n+      System.out.println(\"=\".repeat(20));\n+      System.out.println(\"Now query: \" + query);\n+      System.out.printf(\"Only %d rows are printed\\n\", maxCount);\n+      TableResult result = bigQuery.query(queryConfig);\n+\n+      for (Field field : result.getSchema().getFields()) {\n+        System.out.printf(\"%s,\", field.getName());\n+      }\n+      System.out.print(\"\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb95e7420a661b8a44d36ed951dba2a82cd53b77"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI5MzQ5OQ==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/154#discussion_r473293499", "createdAt": "2020-08-19T20:16:53Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/cmd/AutoModeInteraction.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.google.cloud.bigquery.utils.queryfixer.cmd;\n+\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+\n+import java.util.List;\n+\n+import static com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions.JSON_OUTPUT;\n+import static com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions.NATURAL_OUTPUT;\n+\n+/**\n+ * A class responsible for the interaction between users and the query fixer in Auto mode. It\n+ * continually tries to fix every error in a query until the query is correct or unable to be fixed.\n+ * If an error can be fixed in multiple ways, then the first method will be selected. In this mode,\n+ * the query fixer takes the input query and outputs the final fix results without interacting with\n+ * users during the fix process.\n+ */\n+public class AutoModeInteraction extends CommandLineInteraction {\n+\n+  AutoModeInteraction(String outputFormat, BigQueryOptions bigQueryOptions) {\n+    super(outputFormat, bigQueryOptions);\n+  }\n+\n+  /**\n+   * Interact with users in Auto mode.\n+   *\n+   * @param query input query.\n+   */\n+  public void interact(String query) {\n+    List<FixResult> fixResults = queryFixer.autoFix(query);\n+    printFixResults(query, fixResults);\n+\n+    // Print the first 10 rows of the query's result if the query is correct.\n+    // This preview only runs when the output format is natural language.\n+    if (outputFormat.equals(NATURAL_OUTPUT)) {\n+      FixResult latestResult = fixResults.get(fixResults.size() - 1);\n+      if (latestResult.getStatus() == FixResult.Status.NO_ERROR) {\n+        printQueryResult(latestResult.getQuery());\n+      }\n+    }\n+  }\n+\n+  private void printQueryResult(String query) {\n+    BigQuery bigQuery = bigQueryOptions.getService();\n+\n+    QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).build();\n+    try {\n+      int maxCount = 10;\n+      int count = 0;\n+      System.out.println(\"=\".repeat(20));\n+      System.out.println(\"Now query: \" + query);\n+      System.out.printf(\"Only %d rows are printed\\n\", maxCount);\n+      TableResult result = bigQuery.query(queryConfig);\n+\n+      for (Field field : result.getSchema().getFields()) {\n+        System.out.printf(\"%s,\", field.getName());\n+      }\n+      System.out.print(\"\\n\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0ODI0NA=="}, "originalCommit": {"oid": "fb95e7420a661b8a44d36ed951dba2a82cd53b77"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODExMzA3OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/cmd/AutoModeInteraction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODo1MDo0MlrOHDU1Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMDo0MzozOVrOHDYXnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0OTExMA==", "bodyText": "At least log or throw", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/154#discussion_r473249110", "createdAt": "2020-08-19T18:50:42Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/cmd/AutoModeInteraction.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.google.cloud.bigquery.utils.queryfixer.cmd;\n+\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+\n+import java.util.List;\n+\n+import static com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions.JSON_OUTPUT;\n+import static com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions.NATURAL_OUTPUT;\n+\n+/**\n+ * A class responsible for the interaction between users and the query fixer in Auto mode. It\n+ * continually tries to fix every error in a query until the query is correct or unable to be fixed.\n+ * If an error can be fixed in multiple ways, then the first method will be selected. In this mode,\n+ * the query fixer takes the input query and outputs the final fix results without interacting with\n+ * users during the fix process.\n+ */\n+public class AutoModeInteraction extends CommandLineInteraction {\n+\n+  AutoModeInteraction(String outputFormat, BigQueryOptions bigQueryOptions) {\n+    super(outputFormat, bigQueryOptions);\n+  }\n+\n+  /**\n+   * Interact with users in Auto mode.\n+   *\n+   * @param query input query.\n+   */\n+  public void interact(String query) {\n+    List<FixResult> fixResults = queryFixer.autoFix(query);\n+    printFixResults(query, fixResults);\n+\n+    // Print the first 10 rows of the query's result if the query is correct.\n+    // This preview only runs when the output format is natural language.\n+    if (outputFormat.equals(NATURAL_OUTPUT)) {\n+      FixResult latestResult = fixResults.get(fixResults.size() - 1);\n+      if (latestResult.getStatus() == FixResult.Status.NO_ERROR) {\n+        printQueryResult(latestResult.getQuery());\n+      }\n+    }\n+  }\n+\n+  private void printQueryResult(String query) {\n+    BigQuery bigQuery = bigQueryOptions.getService();\n+\n+    QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).build();\n+    try {\n+      int maxCount = 10;\n+      int count = 0;\n+      System.out.println(\"=\".repeat(20));\n+      System.out.println(\"Now query: \" + query);\n+      System.out.printf(\"Only %d rows are printed\\n\", maxCount);\n+      TableResult result = bigQuery.query(queryConfig);\n+\n+      for (Field field : result.getSchema().getFields()) {\n+        System.out.printf(\"%s,\", field.getName());\n+      }\n+      System.out.print(\"\\n\");\n+\n+      for (FieldValueList row : bigQuery.query(queryConfig).iterateAll()) {\n+        for (FieldValue val : row) {\n+          System.out.printf(\"%s,\", val.getValue());\n+        }\n+        System.out.print(\"\\n\");\n+        if (++count >= maxCount) {\n+          break;\n+        }\n+      }\n+    } catch (InterruptedException ignored) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb95e7420a661b8a44d36ed951dba2a82cd53b77"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMwNzAzOQ==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/154#discussion_r473307039", "createdAt": "2020-08-19T20:43:39Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/cmd/AutoModeInteraction.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.google.cloud.bigquery.utils.queryfixer.cmd;\n+\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+\n+import java.util.List;\n+\n+import static com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions.JSON_OUTPUT;\n+import static com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions.NATURAL_OUTPUT;\n+\n+/**\n+ * A class responsible for the interaction between users and the query fixer in Auto mode. It\n+ * continually tries to fix every error in a query until the query is correct or unable to be fixed.\n+ * If an error can be fixed in multiple ways, then the first method will be selected. In this mode,\n+ * the query fixer takes the input query and outputs the final fix results without interacting with\n+ * users during the fix process.\n+ */\n+public class AutoModeInteraction extends CommandLineInteraction {\n+\n+  AutoModeInteraction(String outputFormat, BigQueryOptions bigQueryOptions) {\n+    super(outputFormat, bigQueryOptions);\n+  }\n+\n+  /**\n+   * Interact with users in Auto mode.\n+   *\n+   * @param query input query.\n+   */\n+  public void interact(String query) {\n+    List<FixResult> fixResults = queryFixer.autoFix(query);\n+    printFixResults(query, fixResults);\n+\n+    // Print the first 10 rows of the query's result if the query is correct.\n+    // This preview only runs when the output format is natural language.\n+    if (outputFormat.equals(NATURAL_OUTPUT)) {\n+      FixResult latestResult = fixResults.get(fixResults.size() - 1);\n+      if (latestResult.getStatus() == FixResult.Status.NO_ERROR) {\n+        printQueryResult(latestResult.getQuery());\n+      }\n+    }\n+  }\n+\n+  private void printQueryResult(String query) {\n+    BigQuery bigQuery = bigQueryOptions.getService();\n+\n+    QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).build();\n+    try {\n+      int maxCount = 10;\n+      int count = 0;\n+      System.out.println(\"=\".repeat(20));\n+      System.out.println(\"Now query: \" + query);\n+      System.out.printf(\"Only %d rows are printed\\n\", maxCount);\n+      TableResult result = bigQuery.query(queryConfig);\n+\n+      for (Field field : result.getSchema().getFields()) {\n+        System.out.printf(\"%s,\", field.getName());\n+      }\n+      System.out.print(\"\\n\");\n+\n+      for (FieldValueList row : bigQuery.query(queryConfig).iterateAll()) {\n+        for (FieldValue val : row) {\n+          System.out.printf(\"%s,\", val.getValue());\n+        }\n+        System.out.print(\"\\n\");\n+        if (++count >= maxCount) {\n+          break;\n+        }\n+      }\n+    } catch (InterruptedException ignored) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0OTExMA=="}, "originalCommit": {"oid": "fb95e7420a661b8a44d36ed951dba2a82cd53b77"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODExNjk1OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/cmd/AutoModeInteraction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODo1MTo1OFrOHDU3nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMDo0NDowMlrOHDYYSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0OTY5Mg==", "bodyText": "For longer queries, maybe save as file?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/154#discussion_r473249692", "createdAt": "2020-08-19T18:51:58Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/cmd/AutoModeInteraction.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.google.cloud.bigquery.utils.queryfixer.cmd;\n+\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+\n+import java.util.List;\n+\n+import static com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions.JSON_OUTPUT;\n+import static com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions.NATURAL_OUTPUT;\n+\n+/**\n+ * A class responsible for the interaction between users and the query fixer in Auto mode. It\n+ * continually tries to fix every error in a query until the query is correct or unable to be fixed.\n+ * If an error can be fixed in multiple ways, then the first method will be selected. In this mode,\n+ * the query fixer takes the input query and outputs the final fix results without interacting with\n+ * users during the fix process.\n+ */\n+public class AutoModeInteraction extends CommandLineInteraction {\n+\n+  AutoModeInteraction(String outputFormat, BigQueryOptions bigQueryOptions) {\n+    super(outputFormat, bigQueryOptions);\n+  }\n+\n+  /**\n+   * Interact with users in Auto mode.\n+   *\n+   * @param query input query.\n+   */\n+  public void interact(String query) {\n+    List<FixResult> fixResults = queryFixer.autoFix(query);\n+    printFixResults(query, fixResults);\n+\n+    // Print the first 10 rows of the query's result if the query is correct.\n+    // This preview only runs when the output format is natural language.\n+    if (outputFormat.equals(NATURAL_OUTPUT)) {\n+      FixResult latestResult = fixResults.get(fixResults.size() - 1);\n+      if (latestResult.getStatus() == FixResult.Status.NO_ERROR) {\n+        printQueryResult(latestResult.getQuery());\n+      }\n+    }\n+  }\n+\n+  private void printQueryResult(String query) {\n+    BigQuery bigQuery = bigQueryOptions.getService();\n+\n+    QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).build();\n+    try {\n+      int maxCount = 10;\n+      int count = 0;\n+      System.out.println(\"=\".repeat(20));\n+      System.out.println(\"Now query: \" + query);\n+      System.out.printf(\"Only %d rows are printed\\n\", maxCount);\n+      TableResult result = bigQuery.query(queryConfig);\n+\n+      for (Field field : result.getSchema().getFields()) {\n+        System.out.printf(\"%s,\", field.getName());\n+      }\n+      System.out.print(\"\\n\");\n+\n+      for (FieldValueList row : bigQuery.query(queryConfig).iterateAll()) {\n+        for (FieldValue val : row) {\n+          System.out.printf(\"%s,\", val.getValue());\n+        }\n+        System.out.print(\"\\n\");\n+        if (++count >= maxCount) {\n+          break;\n+        }\n+      }\n+    } catch (InterruptedException ignored) {\n+    }\n+  }\n+\n+  private void printFixResults(String query, List<FixResult> fixResults) {\n+    switch (outputFormat) {\n+      case NATURAL_OUTPUT:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb95e7420a661b8a44d36ed951dba2a82cd53b77"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMwNzIwOQ==", "bodyText": "Agree. I will allow the user to store JSON locally in future.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/154#discussion_r473307209", "createdAt": "2020-08-19T20:44:02Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/cmd/AutoModeInteraction.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.google.cloud.bigquery.utils.queryfixer.cmd;\n+\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+\n+import java.util.List;\n+\n+import static com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions.JSON_OUTPUT;\n+import static com.google.cloud.bigquery.utils.queryfixer.cmd.QueryFixerOptions.NATURAL_OUTPUT;\n+\n+/**\n+ * A class responsible for the interaction between users and the query fixer in Auto mode. It\n+ * continually tries to fix every error in a query until the query is correct or unable to be fixed.\n+ * If an error can be fixed in multiple ways, then the first method will be selected. In this mode,\n+ * the query fixer takes the input query and outputs the final fix results without interacting with\n+ * users during the fix process.\n+ */\n+public class AutoModeInteraction extends CommandLineInteraction {\n+\n+  AutoModeInteraction(String outputFormat, BigQueryOptions bigQueryOptions) {\n+    super(outputFormat, bigQueryOptions);\n+  }\n+\n+  /**\n+   * Interact with users in Auto mode.\n+   *\n+   * @param query input query.\n+   */\n+  public void interact(String query) {\n+    List<FixResult> fixResults = queryFixer.autoFix(query);\n+    printFixResults(query, fixResults);\n+\n+    // Print the first 10 rows of the query's result if the query is correct.\n+    // This preview only runs when the output format is natural language.\n+    if (outputFormat.equals(NATURAL_OUTPUT)) {\n+      FixResult latestResult = fixResults.get(fixResults.size() - 1);\n+      if (latestResult.getStatus() == FixResult.Status.NO_ERROR) {\n+        printQueryResult(latestResult.getQuery());\n+      }\n+    }\n+  }\n+\n+  private void printQueryResult(String query) {\n+    BigQuery bigQuery = bigQueryOptions.getService();\n+\n+    QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).build();\n+    try {\n+      int maxCount = 10;\n+      int count = 0;\n+      System.out.println(\"=\".repeat(20));\n+      System.out.println(\"Now query: \" + query);\n+      System.out.printf(\"Only %d rows are printed\\n\", maxCount);\n+      TableResult result = bigQuery.query(queryConfig);\n+\n+      for (Field field : result.getSchema().getFields()) {\n+        System.out.printf(\"%s,\", field.getName());\n+      }\n+      System.out.print(\"\\n\");\n+\n+      for (FieldValueList row : bigQuery.query(queryConfig).iterateAll()) {\n+        for (FieldValue val : row) {\n+          System.out.printf(\"%s,\", val.getValue());\n+        }\n+        System.out.print(\"\\n\");\n+        if (++count >= maxCount) {\n+          break;\n+        }\n+      }\n+    } catch (InterruptedException ignored) {\n+    }\n+  }\n+\n+  private void printFixResults(String query, List<FixResult> fixResults) {\n+    switch (outputFormat) {\n+      case NATURAL_OUTPUT:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0OTY5Mg=="}, "originalCommit": {"oid": "fb95e7420a661b8a44d36ed951dba2a82cd53b77"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3115, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}