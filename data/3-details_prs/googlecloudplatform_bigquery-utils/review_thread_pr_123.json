{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NzcwMTg2", "number": 123, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNjo1MDo0M1rOETw0rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTowNjo0MVrOEUKU0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTU4MzE4OnYy", "diffSide": "RIGHT", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/LocationTracker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNjo1MDo0M1rOG5rhnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNjo1MDo0M1rOG5rhnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEzNTEzMw==", "bodyText": "throw UnsupportedOperationExceptions instead of return null.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/123#discussion_r463135133", "createdAt": "2020-07-30T16:50:43Z", "author": {"login": "feiling"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/LocationTracker.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package com.google.bigquery;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * This class tracks the original location of components in the query, thereby making sure that\n+ * the error locations are correctly represented.\n+ */\n+public class LocationTracker {\n+  /* we keep a double arraylist to represent the position of each character (line and column).\n+     We can do this as the line number of the component will not change\n+     (deletion and replacement won't change the line numbers)\n+   */\n+  private ArrayList<ArrayList<Integer>> location;\n+\n+  /**\n+   * Constructor for the class\n+   */\n+  public LocationTracker() {\n+    location = new ArrayList<>();\n+  }\n+\n+  /**\n+   * This method interacts with the InputReader and adds a pair to the location field that\n+   * represents the position (x, y) in the original query. x and y are 1-indexed, so we\n+   * adjust accordingly.\n+   */\n+  public void add(int x, int y) {\n+    location.get(x - 1).add(y);\n+  }\n+\n+  /**\n+   * This method adds an empty line to the location field\n+   */\n+  public void addLine() {\n+    location.add(new ArrayList<>());\n+  }\n+\n+  /**\n+   * This method removes an entry from location specified by (x, y) in the original query\n+   */\n+  public void remove(int x, int y) {\n+    if (x > 0 && x <= location.size()) {\n+      if (y > 0 && y <= location.get(x - 1).size()) {\n+        location.get(x - 1).remove(y - 1);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method gets the original position of the component in (x,y) of the intermediate query\n+   */\n+  public int getOriginalPosition(int x, int y) {\n+    return location.get(x - 1).get(y - 1);\n+  }\n+\n+  /**\n+   * This method ensures that the location field is kept correctly despite the deletion.\n+   */\n+  public LocationTracker delete(int line, int startColumn, int endColumn) {\n+    LocationTracker lt = cloneTracker();\n+    for (int i = startColumn; i < endColumn + 1; i++) {\n+     lt.remove(line, startColumn);\n+    }\n+    return lt;\n+  }\n+\n+  /**\n+   * To be implemented\n+   */\n+  public LocationTracker replace() {\n+    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de1bf6d4eb9924f18f9c002256af1778e134dbe5"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTU5MjMwOnYy", "diffSide": "RIGHT", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/InputReader.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNjo1MzoxM1rOG5rnaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNjozNToyNFrOG6OzRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEzNjYxNg==", "bodyText": "Just use name locationTracker.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/123#discussion_r463136616", "createdAt": "2020-07-30T16:53:13Z", "author": {"login": "feiling"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/InputReader.java", "diffHunk": "@@ -12,31 +11,62 @@\n  */\n public class InputReader {\n \n+  private LocationTracker lt;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de1bf6d4eb9924f18f9c002256af1778e134dbe5"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE1ODc0Nw==", "bodyText": "should I change all the lt's to locationTracker?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/123#discussion_r463158747", "createdAt": "2020-07-30T17:31:45Z", "author": {"login": "subinbean"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/InputReader.java", "diffHunk": "@@ -12,31 +11,62 @@\n  */\n public class InputReader {\n \n+  private LocationTracker lt;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEzNjYxNg=="}, "originalCommit": {"oid": "de1bf6d4eb9924f18f9c002256af1778e134dbe5"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcwMTczOQ==", "bodyText": "yes", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/123#discussion_r463701739", "createdAt": "2020-07-31T16:12:12Z", "author": {"login": "feiling"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/InputReader.java", "diffHunk": "@@ -12,31 +11,62 @@\n  */\n public class InputReader {\n \n+  private LocationTracker lt;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEzNjYxNg=="}, "originalCommit": {"oid": "de1bf6d4eb9924f18f9c002256af1778e134dbe5"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcxMzA5Mg==", "bodyText": "fixed!", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/123#discussion_r463713092", "createdAt": "2020-07-31T16:35:24Z", "author": {"login": "subinbean"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/InputReader.java", "diffHunk": "@@ -12,31 +11,62 @@\n  */\n public class InputReader {\n \n+  private LocationTracker lt;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEzNjYxNg=="}, "originalCommit": {"oid": "de1bf6d4eb9924f18f9c002256af1778e134dbe5"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTYyNjg3OnYy", "diffSide": "RIGHT", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/LocationTracker.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNzowMjoyNlrOG5r85Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMjoxMzo0NFrOG6YSpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE0MjExNw==", "bodyText": "It's not clear to me how LocationTracker works. It seems that for each pair of (line, column), location.get(line - 1).get(column-1) will return the location. But I don't understand what the location value represents. It's an integer, so I guess it mean the index in the input string?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/123#discussion_r463142117", "createdAt": "2020-07-30T17:02:26Z", "author": {"login": "feiling"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/LocationTracker.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package com.google.bigquery;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * This class tracks the original location of components in the query, thereby making sure that\n+ * the error locations are correctly represented.\n+ */\n+public class LocationTracker {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de1bf6d4eb9924f18f9c002256af1778e134dbe5"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE1ODYwMw==", "bodyText": "Ah! So for each pair of (line, column), it is initialized in position at the (line - 1)th arraylist and (column - 1)th element of the arraylist as the integer column - 1. Since the line number won't ever change (but the column number will change constantly), we simply keep track of the original column number as the integer in the double arraylist", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/123#discussion_r463158603", "createdAt": "2020-07-30T17:31:30Z", "author": {"login": "subinbean"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/LocationTracker.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package com.google.bigquery;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * This class tracks the original location of components in the query, thereby making sure that\n+ * the error locations are correctly represented.\n+ */\n+public class LocationTracker {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE0MjExNw=="}, "originalCommit": {"oid": "de1bf6d4eb9924f18f9c002256af1778e134dbe5"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc4MTkwMg==", "bodyText": "I see. Please add comment to explain this.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/123#discussion_r463781902", "createdAt": "2020-07-31T19:05:39Z", "author": {"login": "feiling"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/LocationTracker.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package com.google.bigquery;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * This class tracks the original location of components in the query, thereby making sure that\n+ * the error locations are correctly represented.\n+ */\n+public class LocationTracker {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE0MjExNw=="}, "originalCommit": {"oid": "de1bf6d4eb9924f18f9c002256af1778e134dbe5"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg2ODU4MA==", "bodyText": "yup! more documentation is now added", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/123#discussion_r463868580", "createdAt": "2020-07-31T22:13:44Z", "author": {"login": "subinbean"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/LocationTracker.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package com.google.bigquery;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * This class tracks the original location of components in the query, thereby making sure that\n+ * the error locations are correctly represented.\n+ */\n+public class LocationTracker {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE0MjExNw=="}, "originalCommit": {"oid": "de1bf6d4eb9924f18f9c002256af1778e134dbe5"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTc2MTQ1OnYy", "diffSide": "RIGHT", "path": "tools/query_breakdown/src/test/java/com/google/bigquery/LocationTrackerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTowNjo0MVrOG6TBuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMjoxNDowMVrOG6YS3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc4MjMyOQ==", "bodyText": "Unit tests should be self-contained, i.e. they don't rely on other data. So we shouldn't rely on the file multipleLineQuery.txt. Please add a method to InputReader such as readFromString(string input), then the test data can be passed to inputReader in the test itself.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/123#discussion_r463782329", "createdAt": "2020-07-31T19:06:41Z", "author": {"login": "feiling"}, "path": "tools/query_breakdown/src/test/java/com/google/bigquery/LocationTrackerTest.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.google.bigquery;\n+\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import org.junit.Test;\n+\n+public class LocationTrackerTest {\n+\n+  @Test\n+  public void locationTrackerTestInitializedCorrectly() throws IOException {\n+    InputReader ir = new InputReader();\n+    String absPath = new File(\"\").getAbsolutePath();\n+    ir.readInput(absPath + \"/src/test/java/com/google/bigquery\"\n+            + \"/InputTestFiles/multipleLineQuery.txt\");\n+    assertEquals(4, ir.getLocationTracker().getOriginalPosition(3, 4));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de1bf6d4eb9924f18f9c002256af1778e134dbe5"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg2ODYzNg==", "bodyText": "Just added the method in inputreader and changed the tests accordingly", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/123#discussion_r463868636", "createdAt": "2020-07-31T22:14:01Z", "author": {"login": "subinbean"}, "path": "tools/query_breakdown/src/test/java/com/google/bigquery/LocationTrackerTest.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.google.bigquery;\n+\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import org.junit.Test;\n+\n+public class LocationTrackerTest {\n+\n+  @Test\n+  public void locationTrackerTestInitializedCorrectly() throws IOException {\n+    InputReader ir = new InputReader();\n+    String absPath = new File(\"\").getAbsolutePath();\n+    ir.readInput(absPath + \"/src/test/java/com/google/bigquery\"\n+            + \"/InputTestFiles/multipleLineQuery.txt\");\n+    assertEquals(4, ir.getLocationTracker().getOriginalPosition(3, 4));\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc4MjMyOQ=="}, "originalCommit": {"oid": "de1bf6d4eb9924f18f9c002256af1778e134dbe5"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3069, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}