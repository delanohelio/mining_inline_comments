{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxODE3MjY0", "number": 159, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODoxNzozNFrOEcMGMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODozMToyOFrOEcMZIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTkzNzc2OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/ExpectKeywordButGotOthersFixer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODoxNzozNFrOHGkPEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzo1Mzo1N1rOHHXPww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0NzE4Ng==", "bodyText": "'Insert'?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/159#discussion_r476647186", "createdAt": "2020-08-25T18:17:34Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/ExpectKeywordButGotOthersFixer.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package com.google.cloud.bigquery.utils.queryfixer.fixer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.Position;\n+import com.google.cloud.bigquery.utils.queryfixer.errors.ExpectKeywordButGotOthersError;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.QueryTokenProcessor;\n+import com.google.cloud.bigquery.utils.queryfixer.util.StringUtil;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * A class to fix {@link ExpectKeywordButGotOthersError}. If the expected token is a keyword, then\n+ * the fixer will either (1) replace a token near the error position that is similar to the expected\n+ * keyword to the expected one, or (2) insert the expected keyword at the error location.\n+ *\n+ * <p>Here is a BigQuery query with this error:\n+ *\n+ * <pre>\n+ *     Select max(col1) from table group col2\n+ * </pre>\n+ *\n+ * The error message is \"Syntax error: Expected keyword BY but got identifier \"col2\" at [1:34]\".\n+ * Thus, the fixer will insert a BY keyword at this error position, which looks like\n+ *\n+ * <pre>\n+ *     Select max(col1) from table group BY col2\n+ * </pre>\n+ */\n+public class ExpectKeywordButGotOthersFixer implements IFixer {\n+\n+  private final String query;\n+  private final ExpectKeywordButGotOthersError err;\n+  private final QueryTokenProcessor queryTokenProcessor;\n+\n+  // TODO: it could be configured by users in future.\n+  private static final double SIMILARITY_THRESHOLD = 0.5;\n+\n+  public ExpectKeywordButGotOthersFixer(\n+          String query, ExpectKeywordButGotOthersError err, QueryTokenProcessor queryTokenProcessor) {\n+    this.query = query;\n+    this.err = err;\n+    this.queryTokenProcessor = queryTokenProcessor;\n+  }\n+\n+  @Override\n+  public FixResult fix() {\n+    Position errorPosition = err.getErrorPosition();\n+    IToken token =\n+        queryTokenProcessor.getTokenAt(query, errorPosition.getRow(), errorPosition.getColumn());\n+\n+    List<FixOption> fixOptions = new ArrayList<>();\n+    if (isTokenSimilarAsExpectedKeyword(token)) {\n+      fixOptions.add(replaceToken(token));\n+    }\n+    fixOptions.add(insertKeyword(token));\n+\n+    String approach =\n+        String.format(\"Put keyword %s at the error position\", err.getExpectedKeyword());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8f031dac491be271cf668e7b232629161167afa"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4Mjk0Nw==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/159#discussion_r477482947", "createdAt": "2020-08-26T17:53:57Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/ExpectKeywordButGotOthersFixer.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package com.google.cloud.bigquery.utils.queryfixer.fixer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.Position;\n+import com.google.cloud.bigquery.utils.queryfixer.errors.ExpectKeywordButGotOthersError;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.QueryTokenProcessor;\n+import com.google.cloud.bigquery.utils.queryfixer.util.StringUtil;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * A class to fix {@link ExpectKeywordButGotOthersError}. If the expected token is a keyword, then\n+ * the fixer will either (1) replace a token near the error position that is similar to the expected\n+ * keyword to the expected one, or (2) insert the expected keyword at the error location.\n+ *\n+ * <p>Here is a BigQuery query with this error:\n+ *\n+ * <pre>\n+ *     Select max(col1) from table group col2\n+ * </pre>\n+ *\n+ * The error message is \"Syntax error: Expected keyword BY but got identifier \"col2\" at [1:34]\".\n+ * Thus, the fixer will insert a BY keyword at this error position, which looks like\n+ *\n+ * <pre>\n+ *     Select max(col1) from table group BY col2\n+ * </pre>\n+ */\n+public class ExpectKeywordButGotOthersFixer implements IFixer {\n+\n+  private final String query;\n+  private final ExpectKeywordButGotOthersError err;\n+  private final QueryTokenProcessor queryTokenProcessor;\n+\n+  // TODO: it could be configured by users in future.\n+  private static final double SIMILARITY_THRESHOLD = 0.5;\n+\n+  public ExpectKeywordButGotOthersFixer(\n+          String query, ExpectKeywordButGotOthersError err, QueryTokenProcessor queryTokenProcessor) {\n+    this.query = query;\n+    this.err = err;\n+    this.queryTokenProcessor = queryTokenProcessor;\n+  }\n+\n+  @Override\n+  public FixResult fix() {\n+    Position errorPosition = err.getErrorPosition();\n+    IToken token =\n+        queryTokenProcessor.getTokenAt(query, errorPosition.getRow(), errorPosition.getColumn());\n+\n+    List<FixOption> fixOptions = new ArrayList<>();\n+    if (isTokenSimilarAsExpectedKeyword(token)) {\n+      fixOptions.add(replaceToken(token));\n+    }\n+    fixOptions.add(insertKeyword(token));\n+\n+    String approach =\n+        String.format(\"Put keyword %s at the error position\", err.getExpectedKeyword());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0NzE4Ng=="}, "originalCommit": {"oid": "b8f031dac491be271cf668e7b232629161167afa"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTk0Mjk1OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/FixerFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODoxOTowM1rOHGkSUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzo1NToyN1rOHHXTPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0ODAxNg==", "bodyText": "nit: The", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/159#discussion_r476648016", "createdAt": "2020-08-25T18:19:03Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/FixerFactory.java", "diffHunk": "@@ -39,6 +36,29 @@ public IFixer getFixer(String query, BigQuerySqlError error) {\n       return new FunctionNotFoundFixer(query, functionError, queryTokenProcessor);\n     }\n \n+    if (error instanceof UnexpectedKeywordError) {\n+      return new UnexpectedKeywordFixer(query, (UnexpectedKeywordError) error, queryTokenProcessor);\n+    }\n+\n+    if (error instanceof IllegalInputCharacterError) {\n+      return new IllegalInputCharacterFixer(query, (IllegalInputCharacterError) error);\n+    }\n+\n+    if (error instanceof ExpectKeywordButGotOthersError) {\n+      ExpectKeywordButGotOthersError expectKeywordError = (ExpectKeywordButGotOthersError) error;\n+\n+      // the parser probably expects multiple keywords, but the error messages only provide the last", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8f031dac491be271cf668e7b232629161167afa"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4MzgzOA==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/159#discussion_r477483838", "createdAt": "2020-08-26T17:55:27Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/FixerFactory.java", "diffHunk": "@@ -39,6 +36,29 @@ public IFixer getFixer(String query, BigQuerySqlError error) {\n       return new FunctionNotFoundFixer(query, functionError, queryTokenProcessor);\n     }\n \n+    if (error instanceof UnexpectedKeywordError) {\n+      return new UnexpectedKeywordFixer(query, (UnexpectedKeywordError) error, queryTokenProcessor);\n+    }\n+\n+    if (error instanceof IllegalInputCharacterError) {\n+      return new IllegalInputCharacterFixer(query, (IllegalInputCharacterError) error);\n+    }\n+\n+    if (error instanceof ExpectKeywordButGotOthersError) {\n+      ExpectKeywordButGotOthersError expectKeywordError = (ExpectKeywordButGotOthersError) error;\n+\n+      // the parser probably expects multiple keywords, but the error messages only provide the last", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0ODAxNg=="}, "originalCommit": {"oid": "b8f031dac491be271cf668e7b232629161167afa"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTk1NDk3OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/NearbyTokenFixer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODoyMjozNVrOHGkZ2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzo1NTozMFrOHHXTZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0OTk0NA==", "bodyText": "'anc' -> 'and'", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/159#discussion_r476649944", "createdAt": "2020-08-25T18:22:35Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/NearbyTokenFixer.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.google.cloud.bigquery.utils.queryfixer.fixer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.Position;\n+import com.google.cloud.bigquery.utils.queryfixer.errors.ExpectKeywordButGotOthersError;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.QueryTokenProcessor;\n+import com.google.cloud.bigquery.utils.queryfixer.util.StringUtil;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A class to fix general syntax errors. Usually, a general syntax error looks like {@link\n+ * ExpectKeywordButGotOthersError} but expects \"end of input\". It basically means there may be\n+ * multiple expected tokens but the error message cannot recognize them, so the fixer will try to\n+ * see if the tokens near the error position are similar to any keywords. If yes, then replace the\n+ * token to the similar keyword anc check if the error is eliminated from the query.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8f031dac491be271cf668e7b232629161167afa"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4Mzg3OA==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/159#discussion_r477483878", "createdAt": "2020-08-26T17:55:30Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/NearbyTokenFixer.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.google.cloud.bigquery.utils.queryfixer.fixer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.Position;\n+import com.google.cloud.bigquery.utils.queryfixer.errors.ExpectKeywordButGotOthersError;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.QueryTokenProcessor;\n+import com.google.cloud.bigquery.utils.queryfixer.util.StringUtil;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A class to fix general syntax errors. Usually, a general syntax error looks like {@link\n+ * ExpectKeywordButGotOthersError} but expects \"end of input\". It basically means there may be\n+ * multiple expected tokens but the error message cannot recognize them, so the fixer will try to\n+ * see if the tokens near the error position are similar to any keywords. If yes, then replace the\n+ * token to the similar keyword anc check if the error is eliminated from the query.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0OTk0NA=="}, "originalCommit": {"oid": "b8f031dac491be271cf668e7b232629161167afa"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTk4NjI1OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/NearbyTokenFixer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODozMToyOFrOHGktbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzo1NjozN1rOHHXWFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY1NDk1Ng==", "bodyText": "Do we have a use case where this would be confident? where left edit distance = right distance and use both of them?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/159#discussion_r476654956", "createdAt": "2020-08-25T18:31:28Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/NearbyTokenFixer.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.google.cloud.bigquery.utils.queryfixer.fixer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.Position;\n+import com.google.cloud.bigquery.utils.queryfixer.errors.ExpectKeywordButGotOthersError;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.QueryTokenProcessor;\n+import com.google.cloud.bigquery.utils.queryfixer.util.StringUtil;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A class to fix general syntax errors. Usually, a general syntax error looks like {@link\n+ * ExpectKeywordButGotOthersError} but expects \"end of input\". It basically means there may be\n+ * multiple expected tokens but the error message cannot recognize them, so the fixer will try to\n+ * see if the tokens near the error position are similar to any keywords. If yes, then replace the\n+ * token to the similar keyword anc check if the error is eliminated from the query.\n+ *\n+ * <p>Here is an example with an input query:\n+ *\n+ * <pre>\n+ *     SELECT status FORM `bigquery-public-data.austin_311.311_request` LIMIT 10\n+ * </pre>\n+ *\n+ * It causes an error \"Syntax error: Expected end of input but got identifier `...` at [1:20]\". The\n+ * fixer will look around this position and find FORM looks like a keyword FROM and convert it to\n+ * FROM, leading to a new query\n+ *\n+ * <pre>\n+ *     SELECT status FROM `bigquery-public-data.austin_311.311_request` LIMIT 10\n+ * </pre>\n+ */\n+public class NearbyTokenFixer implements IFixer {\n+\n+  private final String query;\n+  private final ExpectKeywordButGotOthersError err;\n+  private final QueryTokenProcessor queryTokenProcessor;\n+  private final List<String> keywords;\n+\n+  // TODO: it could be configured by users in future.\n+  private static final double SIMILARITY_THRESHOLD = 0.5;\n+\n+  public NearbyTokenFixer(\n+      String query, ExpectKeywordButGotOthersError err, QueryTokenProcessor queryTokenProcessor) {\n+    this.query = query;\n+    this.err = err;\n+    this.queryTokenProcessor = queryTokenProcessor;\n+    this.keywords = getAllKeywords();\n+  }\n+\n+  @Override\n+  public FixResult fix() {\n+\n+    Position errorPosition = err.getErrorPosition();\n+    Pair<IToken, IToken> tokens =\n+        queryTokenProcessor.getNearbyTokens(\n+            query, errorPosition.getRow(), errorPosition.getColumn());\n+\n+    StringUtil.SimilarStrings rightTokenSimilarStrings = findSimilarKeywords(tokens.getRight());\n+    StringUtil.SimilarStrings leftTokenSimilarStrings = findSimilarKeywords(tokens.getLeft());\n+\n+    // The overall logic below is that if left token has a more similar (measured by\n+    // edit distance) keyword, then only choose the fixes on left tokens. If right token\n+    // has more similar keywords, choose the fixes on right tokens. If both of them have\n+    // the similar keywords with the same edit distance, then choose both of them.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8f031dac491be271cf668e7b232629161167afa"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4NDU2NQ==", "bodyText": "I think it is hard to consider them as confident, because we are guessing the correct keywords rather than inferring one from the error message.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/159#discussion_r477484565", "createdAt": "2020-08-26T17:56:37Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/NearbyTokenFixer.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.google.cloud.bigquery.utils.queryfixer.fixer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.Position;\n+import com.google.cloud.bigquery.utils.queryfixer.errors.ExpectKeywordButGotOthersError;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.QueryTokenProcessor;\n+import com.google.cloud.bigquery.utils.queryfixer.util.StringUtil;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A class to fix general syntax errors. Usually, a general syntax error looks like {@link\n+ * ExpectKeywordButGotOthersError} but expects \"end of input\". It basically means there may be\n+ * multiple expected tokens but the error message cannot recognize them, so the fixer will try to\n+ * see if the tokens near the error position are similar to any keywords. If yes, then replace the\n+ * token to the similar keyword anc check if the error is eliminated from the query.\n+ *\n+ * <p>Here is an example with an input query:\n+ *\n+ * <pre>\n+ *     SELECT status FORM `bigquery-public-data.austin_311.311_request` LIMIT 10\n+ * </pre>\n+ *\n+ * It causes an error \"Syntax error: Expected end of input but got identifier `...` at [1:20]\". The\n+ * fixer will look around this position and find FORM looks like a keyword FROM and convert it to\n+ * FROM, leading to a new query\n+ *\n+ * <pre>\n+ *     SELECT status FROM `bigquery-public-data.austin_311.311_request` LIMIT 10\n+ * </pre>\n+ */\n+public class NearbyTokenFixer implements IFixer {\n+\n+  private final String query;\n+  private final ExpectKeywordButGotOthersError err;\n+  private final QueryTokenProcessor queryTokenProcessor;\n+  private final List<String> keywords;\n+\n+  // TODO: it could be configured by users in future.\n+  private static final double SIMILARITY_THRESHOLD = 0.5;\n+\n+  public NearbyTokenFixer(\n+      String query, ExpectKeywordButGotOthersError err, QueryTokenProcessor queryTokenProcessor) {\n+    this.query = query;\n+    this.err = err;\n+    this.queryTokenProcessor = queryTokenProcessor;\n+    this.keywords = getAllKeywords();\n+  }\n+\n+  @Override\n+  public FixResult fix() {\n+\n+    Position errorPosition = err.getErrorPosition();\n+    Pair<IToken, IToken> tokens =\n+        queryTokenProcessor.getNearbyTokens(\n+            query, errorPosition.getRow(), errorPosition.getColumn());\n+\n+    StringUtil.SimilarStrings rightTokenSimilarStrings = findSimilarKeywords(tokens.getRight());\n+    StringUtil.SimilarStrings leftTokenSimilarStrings = findSimilarKeywords(tokens.getLeft());\n+\n+    // The overall logic below is that if left token has a more similar (measured by\n+    // edit distance) keyword, then only choose the fixes on left tokens. If right token\n+    // has more similar keywords, choose the fixes on right tokens. If both of them have\n+    // the similar keywords with the same edit distance, then choose both of them.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY1NDk1Ng=="}, "originalCommit": {"oid": "b8f031dac491be271cf668e7b232629161167afa"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3123, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}