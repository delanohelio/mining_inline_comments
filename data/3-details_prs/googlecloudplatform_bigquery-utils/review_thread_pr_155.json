{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNDUwMzEz", "number": 155, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMDoxNTozOVrOEasN6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMjozNjoyNFrOEcY5Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDIyODg5OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/entity/TokenImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMDoxNTozOVrOHERwoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMDoyMzo0NVrOHESBOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI0NzMyOQ==", "bodyText": "788? i think it should corresponding to the index defined in the kind enum?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/155#discussion_r474247329", "createdAt": "2020-08-20T20:15:39Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/entity/TokenImpl.java", "diffHunk": "@@ -13,8 +13,11 @@ public TokenImpl (Token token) {\n     this.token = token;\n   }\n \n-  @Override public int getKind() {\n-    return token.kind;\n+  @Override public Kind getKind() {\n+    if (token.kind == 788) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36e4e2a0ca7cf9f0127c3bf7b4402ea6b2214e7"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI1MTU3OQ==", "bodyText": "Calcite defines hundreds of token kinds, so number 788 indeed means an ordinary identifier. Anyway this token class will be deprecated very soon once the ZetaSQL server is setup and a ZetaSQL token is introduced.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/155#discussion_r474251579", "createdAt": "2020-08-20T20:23:45Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/entity/TokenImpl.java", "diffHunk": "@@ -13,8 +13,11 @@ public TokenImpl (Token token) {\n     this.token = token;\n   }\n \n-  @Override public int getKind() {\n-    return token.kind;\n+  @Override public Kind getKind() {\n+    if (token.kind == 788) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI0NzMyOQ=="}, "originalCommit": {"oid": "e36e4e2a0ca7cf9f0127c3bf7b4402ea6b2214e7"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDI0NjU1OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/FixerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMDoyMDo0NlrOHER7NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODozMDozOVrOHE3LTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI1MDAzNw==", "bodyText": "i think the most common case would be 'datasetid.tableid', please make sure we handle this case.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/155#discussion_r474250037", "createdAt": "2020-08-20T20:20:46Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/FixerTest.java", "diffHunk": "@@ -47,6 +47,7 @@ public void setup() {\n     fixerFactory = new FixerFactory(tokenProcessor, bigQueryServiceMock);\n   }\n \n+  //TODO: More test cases are need to test different table name, like `a.b`.c, `a.b.c`, `a`.`b`.c, and a.b.c.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36e4e2a0ca7cf9f0127c3bf7b4402ea6b2214e7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2MDM2NQ==", "bodyText": "The new commit has covered this case", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/155#discussion_r474860365", "createdAt": "2020-08-21T18:30:39Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/FixerTest.java", "diffHunk": "@@ -47,6 +47,7 @@ public void setup() {\n     fixerFactory = new FixerFactory(tokenProcessor, bigQueryServiceMock);\n   }\n \n+  //TODO: More test cases are need to test different table name, like `a.b`.c, `a.b.c`, `a`.`b`.c, and a.b.c.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI1MDAzNw=="}, "originalCommit": {"oid": "e36e4e2a0ca7cf9f0127c3bf7b4402ea6b2214e7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDI1NTcwOnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/TableNotFoundFixer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMDoyMzozOFrOHESBAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzozNjo0NlrOHE1qeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI1MTUyMQ==", "bodyText": "\"?\" would match one or more times, what is it is \"datasetid.tableid\" without \"\"? how about \"datasetid.tableid`\" which is the most common case.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/155#discussion_r474251521", "createdAt": "2020-08-20T20:23:38Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/TableNotFoundFixer.java", "diffHunk": "@@ -100,24 +106,32 @@ private String constructFullTableName(String projectId, String datasetId, String\n     return String.format(\"%s.%s.%s\", projectId, datasetId, tableName);\n   }\n \n-  private int findTheIndexOfIncorrectTable() {\n-    // The table in the error message is presented in the legacySQL mode, but this fixer is used to\n-    // fix the\n-    // standardSQL. Thus, the table name needs to be converted to the one consistent with\n-    // standardSQL.\n-    // The change is from project:dataset.table to project.dataset.table.\n-    String tableName = err.getTableName().replace(':', '.');\n-    int index = query.indexOf(tableName);\n-\n-    // Since the TableNotFound error has no position info, this method will convert the index to the\n-    // position and assign to the `err`.\n-    Position position = queryPositionConverter.indexToPos(index);\n-    this.err.setErrorPosition(position);\n-    return index;\n+  private SubstringView findSubstringViewOfIncorrectTable(TableId fullTableId) {\n+    String regex =\n+        String.format(\n+            \"`?%s`?.`?%s`?.`?%s`?\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e36e4e2a0ca7cf9f0127c3bf7b4402ea6b2214e7"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgzNTU3Nw==", "bodyText": "Good point. I will cover this case.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/155#discussion_r474835577", "createdAt": "2020-08-21T17:36:46Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/TableNotFoundFixer.java", "diffHunk": "@@ -100,24 +106,32 @@ private String constructFullTableName(String projectId, String datasetId, String\n     return String.format(\"%s.%s.%s\", projectId, datasetId, tableName);\n   }\n \n-  private int findTheIndexOfIncorrectTable() {\n-    // The table in the error message is presented in the legacySQL mode, but this fixer is used to\n-    // fix the\n-    // standardSQL. Thus, the table name needs to be converted to the one consistent with\n-    // standardSQL.\n-    // The change is from project:dataset.table to project.dataset.table.\n-    String tableName = err.getTableName().replace(':', '.');\n-    int index = query.indexOf(tableName);\n-\n-    // Since the TableNotFound error has no position info, this method will convert the index to the\n-    // position and assign to the `err`.\n-    Position position = queryPositionConverter.indexToPos(index);\n-    this.err.setErrorPosition(position);\n-    return index;\n+  private SubstringView findSubstringViewOfIncorrectTable(TableId fullTableId) {\n+    String regex =\n+        String.format(\n+            \"`?%s`?.`?%s`?.`?%s`?\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI1MTUyMQ=="}, "originalCommit": {"oid": "e36e4e2a0ca7cf9f0127c3bf7b4402ea6b2214e7"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjAxOTM1OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/entity/TokenImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMjozMjoxM1rOHG5caw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzozMDoyN1rOHHWbQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk5NDY2Nw==", "bodyText": "I forgot maybe you explained last time why it is 786?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/155#discussion_r476994667", "createdAt": "2020-08-26T02:32:13Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/entity/TokenImpl.java", "diffHunk": "@@ -13,8 +13,11 @@ public TokenImpl (Token token) {\n     this.token = token;\n   }\n \n-  @Override public int getKind() {\n-    return token.kind;\n+  @Override public Kind getKind() {\n+    if (token.kind == 786 || token.kind == 788) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a1be982d047bceac1052b7487c83479f0cf4a95"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2OTIxMQ==", "bodyText": "786 is the identifier with backticks, but 788 is an identifier without any enclosing.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/155#discussion_r477469211", "createdAt": "2020-08-26T17:29:59Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/entity/TokenImpl.java", "diffHunk": "@@ -13,8 +13,11 @@ public TokenImpl (Token token) {\n     this.token = token;\n   }\n \n-  @Override public int getKind() {\n-    return token.kind;\n+  @Override public Kind getKind() {\n+    if (token.kind == 786 || token.kind == 788) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk5NDY2Nw=="}, "originalCommit": {"oid": "4a1be982d047bceac1052b7487c83479f0cf4a95"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2OTUwNQ==", "bodyText": "They will be deprecated very soon. Probably next a few PRs when the ZetaSQL is used.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/155#discussion_r477469505", "createdAt": "2020-08-26T17:30:27Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/entity/TokenImpl.java", "diffHunk": "@@ -13,8 +13,11 @@ public TokenImpl (Token token) {\n     this.token = token;\n   }\n \n-  @Override public int getKind() {\n-    return token.kind;\n+  @Override public Kind getKind() {\n+    if (token.kind == 786 || token.kind == 788) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk5NDY2Nw=="}, "originalCommit": {"oid": "4a1be982d047bceac1052b7487c83479f0cf4a95"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjAzMzk4OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/TableNotFoundFixer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMjozNjoyNFrOHG5l_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzozMToyMVrOHHWdKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk5NzExOA==", "bodyText": "Theoretically I think we should handle single 'table' too? We can add TODO here.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/155#discussion_r476997118", "createdAt": "2020-08-26T02:36:24Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/TableNotFoundFixer.java", "diffHunk": "@@ -100,24 +107,43 @@ private String constructFullTableName(String projectId, String datasetId, String\n     return String.format(\"%s.%s.%s\", projectId, datasetId, tableName);\n   }\n \n-  private int findTheIndexOfIncorrectTable() {\n-    // The table in the error message is presented in the legacySQL mode, but this fixer is used to\n-    // fix the\n-    // standardSQL. Thus, the table name needs to be converted to the one consistent with\n-    // standardSQL.\n-    // The change is from project:dataset.table to project.dataset.table.\n-    String tableName = err.getTableName().replace(':', '.');\n-    int index = query.indexOf(tableName);\n-\n-    // Since the TableNotFound error has no position info, this method will convert the index to the\n-    // position and assign to the `err`.\n-    Position position = queryPositionConverter.indexToPos(index);\n-    this.err.setErrorPosition(position);\n-    return index;\n+  private SubstringView findSubstringViewOfIncorrectTable(TableId fullTableId) {\n+    String regex;\n+    // If the project ID is the default one, then the actual table may not include project ID,\n+    // which looks like \"dataset.table\".", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a1be982d047bceac1052b7487c83479f0cf4a95"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2OTk5NA==", "bodyText": "Yes, if a user specifies the default dataset in the input options. TODO is added.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/155#discussion_r477469994", "createdAt": "2020-08-26T17:31:21Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/TableNotFoundFixer.java", "diffHunk": "@@ -100,24 +107,43 @@ private String constructFullTableName(String projectId, String datasetId, String\n     return String.format(\"%s.%s.%s\", projectId, datasetId, tableName);\n   }\n \n-  private int findTheIndexOfIncorrectTable() {\n-    // The table in the error message is presented in the legacySQL mode, but this fixer is used to\n-    // fix the\n-    // standardSQL. Thus, the table name needs to be converted to the one consistent with\n-    // standardSQL.\n-    // The change is from project:dataset.table to project.dataset.table.\n-    String tableName = err.getTableName().replace(':', '.');\n-    int index = query.indexOf(tableName);\n-\n-    // Since the TableNotFound error has no position info, this method will convert the index to the\n-    // position and assign to the `err`.\n-    Position position = queryPositionConverter.indexToPos(index);\n-    this.err.setErrorPosition(position);\n-    return index;\n+  private SubstringView findSubstringViewOfIncorrectTable(TableId fullTableId) {\n+    String regex;\n+    // If the project ID is the default one, then the actual table may not include project ID,\n+    // which looks like \"dataset.table\".", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk5NzExOA=="}, "originalCommit": {"oid": "4a1be982d047bceac1052b7487c83479f0cf4a95"}, "originalPosition": 110}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3117, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}