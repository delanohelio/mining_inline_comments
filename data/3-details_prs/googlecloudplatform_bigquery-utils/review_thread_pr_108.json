{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxMzM0OTI4", "number": 108, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMDozMzo0MFrOER__eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMDo0ODoxNVrOESAFkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzA5Njg4OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/errors/SqlErrorFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMDozMzo0MFrOG3A8pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMDozMzo0MFrOG3A8pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MDM5MA==", "bodyText": "If some keyword is not recognized, will it be \"unrecognized name\" too or it is only for column name?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/108#discussion_r460340390", "createdAt": "2020-07-25T00:33:40Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/errors/SqlErrorFactory.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.google.cloud.bigquery.utils.queryfixer.errors;\n+\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.Position;\n+import com.google.cloud.bigquery.utils.queryfixer.util.PatternMatcher;\n+\n+import java.util.List;\n+\n+/**\n+ * A factory to create {@link BigQuerySqlError} from {@link BigQueryException}. Currently, it\n+ * supports {@link TableNotFoundError}, {@link UnrecognizedColumnError}, and {@link\n+ * FunctionNotFoundError}.\n+ */\n+public class SqlErrorFactory {\n+\n+  public static final String TableNotFoundRegex = \"^Not found: Table (.*?) was not found\";\n+\n+  public static final String UnrecognizedNameRegex =\n+      \"^Unrecognized name: (.*?)(; Did you mean (.*?)\\\\?)? at (.*?)$\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c904515daa5d85c2d7761784ea040e7f41188120"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzEwMTQ0OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/errors/SqlErrorFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMDozNzo0M1rOG3A-7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODoxNTowM1rOG3t_uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MDk3NQ==", "bodyText": "I'm not sure if this is the recommended practice to save one line, but up to you :)", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/108#discussion_r460340975", "createdAt": "2020-07-25T00:37:43Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/errors/SqlErrorFactory.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.google.cloud.bigquery.utils.queryfixer.errors;\n+\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.Position;\n+import com.google.cloud.bigquery.utils.queryfixer.util.PatternMatcher;\n+\n+import java.util.List;\n+\n+/**\n+ * A factory to create {@link BigQuerySqlError} from {@link BigQueryException}. Currently, it\n+ * supports {@link TableNotFoundError}, {@link UnrecognizedColumnError}, and {@link\n+ * FunctionNotFoundError}.\n+ */\n+public class SqlErrorFactory {\n+\n+  public static final String TableNotFoundRegex = \"^Not found: Table (.*?) was not found\";\n+\n+  public static final String UnrecognizedNameRegex =\n+      \"^Unrecognized name: (.*?)(; Did you mean (.*?)\\\\?)? at (.*?)$\";\n+\n+  public static final String FunctionNotFoundRegex =\n+      \"^Function not found: (.*?)(; Did you mean (.*?)\\\\?)? at (.*?)$\";\n+\n+  /**\n+   * The method to convert {@link BigQueryException} to {@link BigQuerySqlError}. If the input\n+   * exception can not be resolved, a null pointer will be returned instead.\n+   *\n+   * @param exception the BigQueryException to resolve.\n+   * @return BigQuerySqlError object or null pointer.\n+   */\n+  public BigQuerySqlError getError(BigQueryException exception) {\n+    BigQuerySqlError error;\n+\n+    if ((error = tryTableNotFoundError(exception)) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c904515daa5d85c2d7761784ea040e7f41188120"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3ODQ1Ng==", "bodyText": "Let's keep in this style and change it later if the style is discouraged.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/108#discussion_r461078456", "createdAt": "2020-07-27T18:15:03Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/errors/SqlErrorFactory.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.google.cloud.bigquery.utils.queryfixer.errors;\n+\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.Position;\n+import com.google.cloud.bigquery.utils.queryfixer.util.PatternMatcher;\n+\n+import java.util.List;\n+\n+/**\n+ * A factory to create {@link BigQuerySqlError} from {@link BigQueryException}. Currently, it\n+ * supports {@link TableNotFoundError}, {@link UnrecognizedColumnError}, and {@link\n+ * FunctionNotFoundError}.\n+ */\n+public class SqlErrorFactory {\n+\n+  public static final String TableNotFoundRegex = \"^Not found: Table (.*?) was not found\";\n+\n+  public static final String UnrecognizedNameRegex =\n+      \"^Unrecognized name: (.*?)(; Did you mean (.*?)\\\\?)? at (.*?)$\";\n+\n+  public static final String FunctionNotFoundRegex =\n+      \"^Function not found: (.*?)(; Did you mean (.*?)\\\\?)? at (.*?)$\";\n+\n+  /**\n+   * The method to convert {@link BigQueryException} to {@link BigQuerySqlError}. If the input\n+   * exception can not be resolved, a null pointer will be returned instead.\n+   *\n+   * @param exception the BigQueryException to resolve.\n+   * @return BigQuerySqlError object or null pointer.\n+   */\n+  public BigQuerySqlError getError(BigQueryException exception) {\n+    BigQuerySqlError error;\n+\n+    if ((error = tryTableNotFoundError(exception)) != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MDk3NQ=="}, "originalCommit": {"oid": "c904515daa5d85c2d7761784ea040e7f41188120"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzEwMzkzOnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/errors/SqlErrorFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMDo0MDowNVrOG3BATg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODoxNTo1NVrOG3uB2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MTMyNg==", "bodyText": "Check if length is as expected before get(0)?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/108#discussion_r460341326", "createdAt": "2020-07-25T00:40:05Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/errors/SqlErrorFactory.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.google.cloud.bigquery.utils.queryfixer.errors;\n+\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.Position;\n+import com.google.cloud.bigquery.utils.queryfixer.util.PatternMatcher;\n+\n+import java.util.List;\n+\n+/**\n+ * A factory to create {@link BigQuerySqlError} from {@link BigQueryException}. Currently, it\n+ * supports {@link TableNotFoundError}, {@link UnrecognizedColumnError}, and {@link\n+ * FunctionNotFoundError}.\n+ */\n+public class SqlErrorFactory {\n+\n+  public static final String TableNotFoundRegex = \"^Not found: Table (.*?) was not found\";\n+\n+  public static final String UnrecognizedNameRegex =\n+      \"^Unrecognized name: (.*?)(; Did you mean (.*?)\\\\?)? at (.*?)$\";\n+\n+  public static final String FunctionNotFoundRegex =\n+      \"^Function not found: (.*?)(; Did you mean (.*?)\\\\?)? at (.*?)$\";\n+\n+  /**\n+   * The method to convert {@link BigQueryException} to {@link BigQuerySqlError}. If the input\n+   * exception can not be resolved, a null pointer will be returned instead.\n+   *\n+   * @param exception the BigQueryException to resolve.\n+   * @return BigQuerySqlError object or null pointer.\n+   */\n+  public BigQuerySqlError getError(BigQueryException exception) {\n+    BigQuerySqlError error;\n+\n+    if ((error = tryTableNotFoundError(exception)) != null) {\n+      return error;\n+    }\n+\n+    if ((error = tryUnrecognizedNameError(exception)) != null) {\n+      return error;\n+    }\n+\n+    if ((error = tryFunctionNotFoundError(exception)) != null) {\n+      return error;\n+    }\n+\n+    return null;\n+  }\n+\n+  /**\n+   * Try to convert the {@link BigQueryException} to {@link TableNotFoundError}. If it fails, a null\n+   * point will be returned.\n+   *\n+   * <p>The regex to extract information is `^Not found: Table (.*?) was not found`. Please see\n+   * {@link TableNotFoundError} for details on what information the regex extracts.\n+   *\n+   * @param exception BigQueryException\n+   * @return TableNotFoundError and null\n+   */\n+  private TableNotFoundError tryTableNotFoundError(BigQueryException exception) {\n+    List<String> contents =\n+        PatternMatcher.extract(exception.getError().getMessage(), TableNotFoundRegex);\n+    if (contents == null) {\n+      return null;\n+    }\n+\n+    // Here shows the index of matching places.\n+    // \"^Not found: Table (0) was not found\"\n+    String incorrectTable = contents.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c904515daa5d85c2d7761784ea040e7f41188120"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3OTAwMQ==", "bodyText": "There is no need to check size, because the size of extracted substrings has been determined by the pattern. A comment has been added to the code to clarify this.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/108#discussion_r461079001", "createdAt": "2020-07-27T18:15:55Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/errors/SqlErrorFactory.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.google.cloud.bigquery.utils.queryfixer.errors;\n+\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.Position;\n+import com.google.cloud.bigquery.utils.queryfixer.util.PatternMatcher;\n+\n+import java.util.List;\n+\n+/**\n+ * A factory to create {@link BigQuerySqlError} from {@link BigQueryException}. Currently, it\n+ * supports {@link TableNotFoundError}, {@link UnrecognizedColumnError}, and {@link\n+ * FunctionNotFoundError}.\n+ */\n+public class SqlErrorFactory {\n+\n+  public static final String TableNotFoundRegex = \"^Not found: Table (.*?) was not found\";\n+\n+  public static final String UnrecognizedNameRegex =\n+      \"^Unrecognized name: (.*?)(; Did you mean (.*?)\\\\?)? at (.*?)$\";\n+\n+  public static final String FunctionNotFoundRegex =\n+      \"^Function not found: (.*?)(; Did you mean (.*?)\\\\?)? at (.*?)$\";\n+\n+  /**\n+   * The method to convert {@link BigQueryException} to {@link BigQuerySqlError}. If the input\n+   * exception can not be resolved, a null pointer will be returned instead.\n+   *\n+   * @param exception the BigQueryException to resolve.\n+   * @return BigQuerySqlError object or null pointer.\n+   */\n+  public BigQuerySqlError getError(BigQueryException exception) {\n+    BigQuerySqlError error;\n+\n+    if ((error = tryTableNotFoundError(exception)) != null) {\n+      return error;\n+    }\n+\n+    if ((error = tryUnrecognizedNameError(exception)) != null) {\n+      return error;\n+    }\n+\n+    if ((error = tryFunctionNotFoundError(exception)) != null) {\n+      return error;\n+    }\n+\n+    return null;\n+  }\n+\n+  /**\n+   * Try to convert the {@link BigQueryException} to {@link TableNotFoundError}. If it fails, a null\n+   * point will be returned.\n+   *\n+   * <p>The regex to extract information is `^Not found: Table (.*?) was not found`. Please see\n+   * {@link TableNotFoundError} for details on what information the regex extracts.\n+   *\n+   * @param exception BigQueryException\n+   * @return TableNotFoundError and null\n+   */\n+  private TableNotFoundError tryTableNotFoundError(BigQueryException exception) {\n+    List<String> contents =\n+        PatternMatcher.extract(exception.getError().getMessage(), TableNotFoundRegex);\n+    if (contents == null) {\n+      return null;\n+    }\n+\n+    // Here shows the index of matching places.\n+    // \"^Not found: Table (0) was not found\"\n+    String incorrectTable = contents.get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MTMyNg=="}, "originalCommit": {"oid": "c904515daa5d85c2d7761784ea040e7f41188120"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzEwNDMzOnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/errors/SqlErrorFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMDo0MDoyNVrOG3BAfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMDo0MDoyNVrOG3BAfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MTM3NQ==", "bodyText": "Check if length is as expected before get(0)?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/108#discussion_r460341375", "createdAt": "2020-07-25T00:40:25Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/errors/SqlErrorFactory.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.google.cloud.bigquery.utils.queryfixer.errors;\n+\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.Position;\n+import com.google.cloud.bigquery.utils.queryfixer.util.PatternMatcher;\n+\n+import java.util.List;\n+\n+/**\n+ * A factory to create {@link BigQuerySqlError} from {@link BigQueryException}. Currently, it\n+ * supports {@link TableNotFoundError}, {@link UnrecognizedColumnError}, and {@link\n+ * FunctionNotFoundError}.\n+ */\n+public class SqlErrorFactory {\n+\n+  public static final String TableNotFoundRegex = \"^Not found: Table (.*?) was not found\";\n+\n+  public static final String UnrecognizedNameRegex =\n+      \"^Unrecognized name: (.*?)(; Did you mean (.*?)\\\\?)? at (.*?)$\";\n+\n+  public static final String FunctionNotFoundRegex =\n+      \"^Function not found: (.*?)(; Did you mean (.*?)\\\\?)? at (.*?)$\";\n+\n+  /**\n+   * The method to convert {@link BigQueryException} to {@link BigQuerySqlError}. If the input\n+   * exception can not be resolved, a null pointer will be returned instead.\n+   *\n+   * @param exception the BigQueryException to resolve.\n+   * @return BigQuerySqlError object or null pointer.\n+   */\n+  public BigQuerySqlError getError(BigQueryException exception) {\n+    BigQuerySqlError error;\n+\n+    if ((error = tryTableNotFoundError(exception)) != null) {\n+      return error;\n+    }\n+\n+    if ((error = tryUnrecognizedNameError(exception)) != null) {\n+      return error;\n+    }\n+\n+    if ((error = tryFunctionNotFoundError(exception)) != null) {\n+      return error;\n+    }\n+\n+    return null;\n+  }\n+\n+  /**\n+   * Try to convert the {@link BigQueryException} to {@link TableNotFoundError}. If it fails, a null\n+   * point will be returned.\n+   *\n+   * <p>The regex to extract information is `^Not found: Table (.*?) was not found`. Please see\n+   * {@link TableNotFoundError} for details on what information the regex extracts.\n+   *\n+   * @param exception BigQueryException\n+   * @return TableNotFoundError and null\n+   */\n+  private TableNotFoundError tryTableNotFoundError(BigQueryException exception) {\n+    List<String> contents =\n+        PatternMatcher.extract(exception.getError().getMessage(), TableNotFoundRegex);\n+    if (contents == null) {\n+      return null;\n+    }\n+\n+    // Here shows the index of matching places.\n+    // \"^Not found: Table (0) was not found\"\n+    String incorrectTable = contents.get(0);\n+    return new TableNotFoundError(incorrectTable, /*errPos= */ null, exception);\n+  }\n+\n+  /**\n+   * Try to convert the {@link BigQueryException} to {@link UnrecognizedColumnError}. If it fails, a\n+   * null point will be returned.\n+   *\n+   * <p>The regex to extract information is `^Unrecognized name: (.*?)(; Did you mean (.*?)\\?)? at\n+   * (.*?)`. Please see {@link UnrecognizedColumnError} for details on what information the regex\n+   * extracts.\n+   *\n+   * @param exception BigQueryException\n+   * @return TableNotFoundError and null\n+   */\n+  private UnrecognizedColumnError tryUnrecognizedNameError(BigQueryException exception) {\n+    List<String> contents =\n+        PatternMatcher.extract(exception.getError().getMessage(), UnrecognizedNameRegex);\n+    if (contents == null) {\n+      return null;\n+    }\n+\n+    // Here shows the index of matching places.\n+    // \"^Unrecognized name: (0)(; Did you mean (2)\\\\?)? at (3)$\"\n+    String unrecognizedName = contents.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c904515daa5d85c2d7761784ea040e7f41188120"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzEwNDYwOnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/errors/SqlErrorFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMDo0MDo0MVrOG3BAqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMDo0MDo0MVrOG3BAqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MTQxOQ==", "bodyText": "Check if length is as expected before get(0)?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/108#discussion_r460341419", "createdAt": "2020-07-25T00:40:41Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/errors/SqlErrorFactory.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.google.cloud.bigquery.utils.queryfixer.errors;\n+\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.Position;\n+import com.google.cloud.bigquery.utils.queryfixer.util.PatternMatcher;\n+\n+import java.util.List;\n+\n+/**\n+ * A factory to create {@link BigQuerySqlError} from {@link BigQueryException}. Currently, it\n+ * supports {@link TableNotFoundError}, {@link UnrecognizedColumnError}, and {@link\n+ * FunctionNotFoundError}.\n+ */\n+public class SqlErrorFactory {\n+\n+  public static final String TableNotFoundRegex = \"^Not found: Table (.*?) was not found\";\n+\n+  public static final String UnrecognizedNameRegex =\n+      \"^Unrecognized name: (.*?)(; Did you mean (.*?)\\\\?)? at (.*?)$\";\n+\n+  public static final String FunctionNotFoundRegex =\n+      \"^Function not found: (.*?)(; Did you mean (.*?)\\\\?)? at (.*?)$\";\n+\n+  /**\n+   * The method to convert {@link BigQueryException} to {@link BigQuerySqlError}. If the input\n+   * exception can not be resolved, a null pointer will be returned instead.\n+   *\n+   * @param exception the BigQueryException to resolve.\n+   * @return BigQuerySqlError object or null pointer.\n+   */\n+  public BigQuerySqlError getError(BigQueryException exception) {\n+    BigQuerySqlError error;\n+\n+    if ((error = tryTableNotFoundError(exception)) != null) {\n+      return error;\n+    }\n+\n+    if ((error = tryUnrecognizedNameError(exception)) != null) {\n+      return error;\n+    }\n+\n+    if ((error = tryFunctionNotFoundError(exception)) != null) {\n+      return error;\n+    }\n+\n+    return null;\n+  }\n+\n+  /**\n+   * Try to convert the {@link BigQueryException} to {@link TableNotFoundError}. If it fails, a null\n+   * point will be returned.\n+   *\n+   * <p>The regex to extract information is `^Not found: Table (.*?) was not found`. Please see\n+   * {@link TableNotFoundError} for details on what information the regex extracts.\n+   *\n+   * @param exception BigQueryException\n+   * @return TableNotFoundError and null\n+   */\n+  private TableNotFoundError tryTableNotFoundError(BigQueryException exception) {\n+    List<String> contents =\n+        PatternMatcher.extract(exception.getError().getMessage(), TableNotFoundRegex);\n+    if (contents == null) {\n+      return null;\n+    }\n+\n+    // Here shows the index of matching places.\n+    // \"^Not found: Table (0) was not found\"\n+    String incorrectTable = contents.get(0);\n+    return new TableNotFoundError(incorrectTable, /*errPos= */ null, exception);\n+  }\n+\n+  /**\n+   * Try to convert the {@link BigQueryException} to {@link UnrecognizedColumnError}. If it fails, a\n+   * null point will be returned.\n+   *\n+   * <p>The regex to extract information is `^Unrecognized name: (.*?)(; Did you mean (.*?)\\?)? at\n+   * (.*?)`. Please see {@link UnrecognizedColumnError} for details on what information the regex\n+   * extracts.\n+   *\n+   * @param exception BigQueryException\n+   * @return TableNotFoundError and null\n+   */\n+  private UnrecognizedColumnError tryUnrecognizedNameError(BigQueryException exception) {\n+    List<String> contents =\n+        PatternMatcher.extract(exception.getError().getMessage(), UnrecognizedNameRegex);\n+    if (contents == null) {\n+      return null;\n+    }\n+\n+    // Here shows the index of matching places.\n+    // \"^Unrecognized name: (0)(; Did you mean (2)\\\\?)? at (3)$\"\n+    String unrecognizedName = contents.get(0);\n+    String suggestion = contents.get(2);\n+    String errPosStr = contents.get(3);\n+    Position errorPosition = extractPosition(errPosStr);\n+\n+    return new UnrecognizedColumnError(unrecognizedName, errorPosition, suggestion, exception);\n+  }\n+\n+  /**\n+   * Try to convert the {@link BigQueryException} to {@link FunctionNotFoundError}. If it fails, a\n+   * null point will be returned.\n+   *\n+   * <p>The regex to extract information is `^Function not found: (.*?)(; Did you mean (.*?)\\\\?)? at\n+   * (.*?)$`. Please see {@link FunctionNotFoundError} for details on what information the regex\n+   * extracts.\n+   *\n+   * @param exception BigQueryException\n+   * @return TableNotFoundError and null\n+   */\n+  private FunctionNotFoundError tryFunctionNotFoundError(BigQueryException exception) {\n+    List<String> contents =\n+        PatternMatcher.extract(exception.getError().getMessage(), FunctionNotFoundRegex);\n+    if (contents == null) {\n+      return null;\n+    }\n+    // Here shows the index of matching places.\n+    // \"^Function not found: (0)(; Did you mean (2)\\\\?)? at (3)$\"\n+    String functionName = contents.get(0);\n+    String suggestion = contents.get(2);\n+    String errPosStr = contents.get(3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c904515daa5d85c2d7761784ea040e7f41188120"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzExMjIzOnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/errors/SqlErrorFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMDo0Nzo1NVrOG3BE4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMDo0Nzo1NVrOG3BE4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MjQ5OA==", "bodyText": "check length :)", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/108#discussion_r460342498", "createdAt": "2020-07-25T00:47:55Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/errors/SqlErrorFactory.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.google.cloud.bigquery.utils.queryfixer.errors;\n+\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.Position;\n+import com.google.cloud.bigquery.utils.queryfixer.util.PatternMatcher;\n+\n+import java.util.List;\n+\n+/**\n+ * A factory to create {@link BigQuerySqlError} from {@link BigQueryException}. Currently, it\n+ * supports {@link TableNotFoundError}, {@link UnrecognizedColumnError}, and {@link\n+ * FunctionNotFoundError}.\n+ */\n+public class SqlErrorFactory {\n+\n+  public static final String TableNotFoundRegex = \"^Not found: Table (.*?) was not found\";\n+\n+  public static final String UnrecognizedNameRegex =\n+      \"^Unrecognized name: (.*?)(; Did you mean (.*?)\\\\?)? at (.*?)$\";\n+\n+  public static final String FunctionNotFoundRegex =\n+      \"^Function not found: (.*?)(; Did you mean (.*?)\\\\?)? at (.*?)$\";\n+\n+  /**\n+   * The method to convert {@link BigQueryException} to {@link BigQuerySqlError}. If the input\n+   * exception can not be resolved, a null pointer will be returned instead.\n+   *\n+   * @param exception the BigQueryException to resolve.\n+   * @return BigQuerySqlError object or null pointer.\n+   */\n+  public BigQuerySqlError getError(BigQueryException exception) {\n+    BigQuerySqlError error;\n+\n+    if ((error = tryTableNotFoundError(exception)) != null) {\n+      return error;\n+    }\n+\n+    if ((error = tryUnrecognizedNameError(exception)) != null) {\n+      return error;\n+    }\n+\n+    if ((error = tryFunctionNotFoundError(exception)) != null) {\n+      return error;\n+    }\n+\n+    return null;\n+  }\n+\n+  /**\n+   * Try to convert the {@link BigQueryException} to {@link TableNotFoundError}. If it fails, a null\n+   * point will be returned.\n+   *\n+   * <p>The regex to extract information is `^Not found: Table (.*?) was not found`. Please see\n+   * {@link TableNotFoundError} for details on what information the regex extracts.\n+   *\n+   * @param exception BigQueryException\n+   * @return TableNotFoundError and null\n+   */\n+  private TableNotFoundError tryTableNotFoundError(BigQueryException exception) {\n+    List<String> contents =\n+        PatternMatcher.extract(exception.getError().getMessage(), TableNotFoundRegex);\n+    if (contents == null) {\n+      return null;\n+    }\n+\n+    // Here shows the index of matching places.\n+    // \"^Not found: Table (0) was not found\"\n+    String incorrectTable = contents.get(0);\n+    return new TableNotFoundError(incorrectTable, /*errPos= */ null, exception);\n+  }\n+\n+  /**\n+   * Try to convert the {@link BigQueryException} to {@link UnrecognizedColumnError}. If it fails, a\n+   * null point will be returned.\n+   *\n+   * <p>The regex to extract information is `^Unrecognized name: (.*?)(; Did you mean (.*?)\\?)? at\n+   * (.*?)`. Please see {@link UnrecognizedColumnError} for details on what information the regex\n+   * extracts.\n+   *\n+   * @param exception BigQueryException\n+   * @return TableNotFoundError and null\n+   */\n+  private UnrecognizedColumnError tryUnrecognizedNameError(BigQueryException exception) {\n+    List<String> contents =\n+        PatternMatcher.extract(exception.getError().getMessage(), UnrecognizedNameRegex);\n+    if (contents == null) {\n+      return null;\n+    }\n+\n+    // Here shows the index of matching places.\n+    // \"^Unrecognized name: (0)(; Did you mean (2)\\\\?)? at (3)$\"\n+    String unrecognizedName = contents.get(0);\n+    String suggestion = contents.get(2);\n+    String errPosStr = contents.get(3);\n+    Position errorPosition = extractPosition(errPosStr);\n+\n+    return new UnrecognizedColumnError(unrecognizedName, errorPosition, suggestion, exception);\n+  }\n+\n+  /**\n+   * Try to convert the {@link BigQueryException} to {@link FunctionNotFoundError}. If it fails, a\n+   * null point will be returned.\n+   *\n+   * <p>The regex to extract information is `^Function not found: (.*?)(; Did you mean (.*?)\\\\?)? at\n+   * (.*?)$`. Please see {@link FunctionNotFoundError} for details on what information the regex\n+   * extracts.\n+   *\n+   * @param exception BigQueryException\n+   * @return TableNotFoundError and null\n+   */\n+  private FunctionNotFoundError tryFunctionNotFoundError(BigQueryException exception) {\n+    List<String> contents =\n+        PatternMatcher.extract(exception.getError().getMessage(), FunctionNotFoundRegex);\n+    if (contents == null) {\n+      return null;\n+    }\n+    // Here shows the index of matching places.\n+    // \"^Function not found: (0)(; Did you mean (2)\\\\?)? at (3)$\"\n+    String functionName = contents.get(0);\n+    String suggestion = contents.get(2);\n+    String errPosStr = contents.get(3);\n+    Position errorPosition = extractPosition(errPosStr);\n+\n+    return new FunctionNotFoundError(functionName, errorPosition, suggestion, exception);\n+  }\n+\n+  private Position extractPosition(String posStr) {\n+    List<String> contents = PatternMatcher.extract(posStr, /*regex= */ \"\\\\[(.*?):(.*?)\\\\]\");\n+    if (contents == null) {\n+      return null;\n+    }\n+    int rowNum = Integer.parseInt(contents.get(0));\n+    int colNum = Integer.parseInt(contents.get(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c904515daa5d85c2d7761784ea040e7f41188120"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzExMjQ5OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/util/PatternMatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwMDo0ODoxNVrOG3BFCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODoxNzoxMFrOG3uE-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MjUzOA==", "bodyText": "this new line seems really weird :)", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/108#discussion_r460342538", "createdAt": "2020-07-25T00:48:15Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/util/PatternMatcher.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.google.cloud.bigquery.utils.queryfixer.util;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.NonNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * A helper class that provides static methods to extract substrings from a string based on regular\n+ * expression.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c904515daa5d85c2d7761784ea040e7f41188120"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3OTgwMg==", "bodyText": "Rerun the auto format. Seems it looks good.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/108#discussion_r461079802", "createdAt": "2020-07-27T18:17:10Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/util/PatternMatcher.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.google.cloud.bigquery.utils.queryfixer.util;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.NonNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * A helper class that provides static methods to extract substrings from a string based on regular\n+ * expression.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM0MjUzOA=="}, "originalCommit": {"oid": "c904515daa5d85c2d7761784ea040e7f41188120"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3046, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}