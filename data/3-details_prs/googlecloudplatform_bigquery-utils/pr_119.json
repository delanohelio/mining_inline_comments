{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3MjY5NDk1", "number": 119, "title": "Query Breakdown: Program now executes successfully with deletion (w/o location tracking)", "bodyText": "TLDR\n\nFiles to look at: QueryBreakdown, Node\nThe program now executes with deletion and outputs the correct result! (which means that the run, loop, deletion function are all working properly). The caveat is that the location in which the error occurs is not tracked correctly yet (an issue discovered late last week) but will be fixed in the next next PR.\nThe PR is big in terms of code changed because I was initially going to make 1 big PR but realized (and learned) that PR's should be smaller. As such, for this PR I'm asking for a review on just QueryBreakdown and Node files pertaining to the program's execution for deletion! There will be code in QueryBreakdown pertaining to replacement but I commented it out as it will be the next PR.\n\nSpecifics\n\nThe Node class has changed to better reflect the information that it should contain.\nQueryBreakdown has some major changes explained below:\n\n\nIt is refactored as an object-based class: details are in the comments\nThe main loop as well as the run command is implemented and works seamlessly with deletion\nDeletion is refactored to be more concise using the returnIndex function\n\nFuture To-Do's/PR's\n\nNext PR: the main loop works correctly with replacement (w/o location tracking)\nNext, Next PR: the program now supports correct location tracking\nAhead after that: redesign the exception class to wrap SqlParseException (which should fix casting errors), format output into a JSON format or text file, support runtime limits", "createdAt": "2020-07-27T16:25:35Z", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/119", "merged": true, "mergeCommit": {"oid": "f03196846f71a386b4f6a8385b006326a276299a"}, "closed": true, "closedAt": "2020-07-28T23:51:56Z", "author": {"login": "subinbean"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc4I5vagH2gAyNDU3MjY5NDk1OmYzMmI2ZGRmNzc4NDI3M2M0ZjA4NGJjMTM2YzI0MGFjNGQ4YjMxNTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5fTlkgH2gAyNDU3MjY5NDk1OjdjMzAyNzkyYWU3MWJjNTQzMGZjN2FmYzViYzYxOGRkNWIzMDFlZWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f32b6ddf7784273c4f084bc136c240ac4d8b3154", "author": {"user": {"login": "subinbean", "name": "Subin Lee"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/f32b6ddf7784273c4f084bc136c240ac4d8b3154", "committedDate": "2020-07-24T19:08:09Z", "message": "replacement and main loop draft done"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b09301ba1de656c47401c254eb3979049a24773", "author": {"user": {"login": "subinbean", "name": "Subin Lee"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/7b09301ba1de656c47401c254eb3979049a24773", "committedDate": "2020-07-24T21:47:02Z", "message": "refactored QueryBreakdown, organized code for PR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28adf1077930405db08f5b673d45863f82a0be44", "author": {"user": {"login": "subinbean", "name": "Subin Lee"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/28adf1077930405db08f5b673d45863f82a0be44", "committedDate": "2020-07-27T16:09:55Z", "message": "deletion is now working with the main loop and run"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MDQyNjA2", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/119#pullrequestreview-456042606", "createdAt": "2020-07-27T18:44:33Z", "commit": {"oid": "28adf1077930405db08f5b673d45863f82a0be44"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04235d9d37e21ec1a6a3df531b3e9f1d49432313", "author": {"user": {"login": "feiling", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/04235d9d37e21ec1a6a3df531b3e9f1d49432313", "committedDate": "2020-07-27T18:44:41Z", "message": "Merge branch 'master' into milestone1_3"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MTk1OTIw", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/119#pullrequestreview-456195920", "createdAt": "2020-07-27T23:11:04Z", "commit": {"oid": "04235d9d37e21ec1a6a3df531b3e9f1d49432313"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzoxMTowNFrOG32wOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzoxNjozN1rOG323Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMTk0Ng==", "bodyText": "Nit: try to use str.format over + from the readability standpoint.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/119#discussion_r461221946", "createdAt": "2020-07-27T23:11:04Z", "author": {"login": "AayushBhatnagar"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/Node.java", "diffHunk": "@@ -27,15 +27,91 @@\n   private int unparseableCount;\n \n   // indicates how we handled the error\n-  enum errorHandlingType {\n+  enum ErrorHandlingType {\n     DELETION,\n     REPLACEMENT\n   }\n \n+  ErrorHandlingType type;\n+\n+  /**\n+   * constructor for the node class for deletion\n+   */\n+  public Node (Node parent, int startLine, int startColumn, int endLine, int endColumn,\n+      int unparseableCount) {\n+    this.parent = parent;\n+    this.startLine = startLine;\n+    this.startColumn = startColumn;\n+    this.endLine = endLine;\n+    this.endColumn = endColumn;\n+    type = ErrorHandlingType.DELETION;\n+    this.unparseableCount = unparseableCount;\n+  }\n+\n   /**\n-   * constructor for the node class\n+   * constructor for the node class for replacement\n    */\n   public Node (Node parent, int startLine, int startColumn, int endLine, int endColumn,\n-      boolean errorHandlingType, String replaceFrom, String replaceTo, int unparseableCount) {\n+      String replaceFrom, String replaceTo, int unparseableCount) {\n+    this.parent = parent;\n+    this.startLine = startLine;\n+    this.startColumn = startColumn;\n+    this.endLine = endLine;\n+    this.endColumn = endColumn;\n+    type = ErrorHandlingType.REPLACEMENT;\n+    this.replaceFrom = replaceFrom;\n+    this.replaceTo = replaceTo;\n+    this.unparseableCount = unparseableCount;\n+  }\n+\n+  /**\n+   * Override toString method for better debugging\n+   */\n+  @Override\n+  public String toString() {\n+    return \"Parent: \" + parent.getStartColumn() + parent.getEndColumn()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04235d9d37e21ec1a6a3df531b3e9f1d49432313"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMjE3NQ==", "bodyText": "inconsistent var naming. either use this. for all members or none at all.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/119#discussion_r461222175", "createdAt": "2020-07-27T23:11:44Z", "author": {"login": "AayushBhatnagar"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/QueryBreakdown.java", "diffHunk": "@@ -16,52 +15,109 @@\n public class QueryBreakdown {\n \n   // global fields that keeps track of the minimum unparseable component so far\n-  private int minimumUnparseableComp = Integer.MAX_VALUE;\n+  private int minimumUnparseableComp;\n   private Node solution;\n \n   // the generated tree\n   private Node root;\n-  private static Parser parser;\n+  private Parser parser;\n \n   /**\n-   * This is the method that will run QueryBreakdown given an original query and output\n-   * it to the specified output file, or if that is null, generate a new file to put the output in.\n-   * The provided timeLimit will stop the tool from running over a certain time.\n+   * Constructor for the QueryBreakdown object. We model this class as an object rather than\n+   * through static methods because the user should be able to call QueryBreakdown multiple\n+   * times and create multiple instances of it.\n    */\n-  public static void run(String originalQuery, String outputFile, int errorLimit) {\n+  public QueryBreakdown(Parser parser) {\n+    minimumUnparseableComp = Integer.MAX_VALUE;\n+    root = new Node();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04235d9d37e21ec1a6a3df531b3e9f1d49432313"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMjk4MA==", "bodyText": "Please verify that this a sqlparseexception type before casting it into one something like\nif (e instanceof SqlParseException) {\n....\n}\nbetter still catch SqlParseException besides catching superclass Exception.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/119#discussion_r461222980", "createdAt": "2020-07-27T23:14:16Z", "author": {"login": "AayushBhatnagar"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/QueryBreakdown.java", "diffHunk": "@@ -16,52 +15,109 @@\n public class QueryBreakdown {\n \n   // global fields that keeps track of the minimum unparseable component so far\n-  private int minimumUnparseableComp = Integer.MAX_VALUE;\n+  private int minimumUnparseableComp;\n   private Node solution;\n \n   // the generated tree\n   private Node root;\n-  private static Parser parser;\n+  private Parser parser;\n \n   /**\n-   * This is the method that will run QueryBreakdown given an original query and output\n-   * it to the specified output file, or if that is null, generate a new file to put the output in.\n-   * The provided timeLimit will stop the tool from running over a certain time.\n+   * Constructor for the QueryBreakdown object. We model this class as an object rather than\n+   * through static methods because the user should be able to call QueryBreakdown multiple\n+   * times and create multiple instances of it.\n    */\n-  public static void run(String originalQuery, String outputFile, int errorLimit) {\n+  public QueryBreakdown(Parser parser) {\n+    minimumUnparseableComp = Integer.MAX_VALUE;\n+    root = new Node();\n+    this.parser = parser;\n+  }\n \n-    // determines which parser to use\n-    parser = new CalciteParser();\n+  /**\n+   * This is the method that will run QueryBreakdown given an original query and output\n+   * it to the specified output file or commandline. The provided errorLimit will stop the\n+   * tool from running over a certain time.\n+   *\n+   * TODO: output file feature and runtime limit support\n+   */\n+  public void run(String originalQuery, String outputFile, int errorLimit) {\n \n     // uses the loop function to generate and traverse the tree of possible error recoveries\n-    loop(originalQuery, errorLimit);\n+    // this will set the variable solution\n+    loop(originalQuery, errorLimit, root, 0);\n+\n+    // case where entire query can be parsed\n+    if (solution.equals(root)) {\n+      System.out.println(\"The entire query can be parsed without error\");\n+    }\n \n     // write termination logic for output (tracing the node back, reconstructing path, output)\n+    Node current = solution;\n+    while (current.getParent() != null) {\n+      // print out the result\n+      System.out.println(\"Unparseable portion: Start Line \" + current.getStartLine() +\n+          \", End Line \" + current.getEndLine() + \", Start Column \" + current.getStartColumn() +\n+          \", End Column \" + current.getEndColumn() + \", \" + current.getErrorHandlingType());\n+\n+      // if replacement\n+      if (current.getErrorHandlingType().equals(\"Replacement\")) {\n+        System.out.println(\": replaced \" + current.getReplaceFrom() + \" with \" +\n+            current.getReplaceTo() + \"\\n\");\n+      }\n+\n+      // update for loop\n+      current = current.getParent();\n+    }\n   }\n \n   /**\n-   * This is where the code for the algorithm will go: essentially, there will be a loop that\n-   * constantly inputs a new query after adequate error handling\n+   * This is where the code for the algorithm resides: essentially, there is a loop that\n+   * constantly inputs a new query after adequate error handling. The loop terminates once\n+   * the parsing doesn't throw any errors, and in the case that it went through a smaller\n+   * number of unparseable components than the global minimum, it sets the solution as\n+   * the global solution and also alters the minimumUnparseableComp variable.\n+   *\n+   * TODO: implement errorLimit logic, deal with exception casting\n    */\n-  private static void loop(String inputQuery, int errorLimit) {\n+  private void loop(String inputQuery, int errorLimit, Node parent, int depth) {\n     try {\n       parser.parseQuery(inputQuery);\n     } catch (Exception e) {\n       // generates new queries through deletion and replacement\n       SqlParserPos pos = ((SqlParseException) e).getPos();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04235d9d37e21ec1a6a3df531b3e9f1d49432313"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMzU1Ng==", "bodyText": "remove this import.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/119#discussion_r461223556", "createdAt": "2020-07-27T23:16:07Z", "author": {"login": "AayushBhatnagar"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/ReplacementLogic.java", "diffHunk": "@@ -1,7 +1,7 @@\n package com.google.bigquery;\n \n import java.util.ArrayList;\n-import java.util.List;\n+import java.util.HashSet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04235d9d37e21ec1a6a3df531b3e9f1d49432313"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMzcxOA==", "bodyText": "final modifier??", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/119#discussion_r461223718", "createdAt": "2020-07-27T23:16:37Z", "author": {"login": "AayushBhatnagar"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/ReplacedComponent.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.google.bigquery;\n+\n+/**\n+ * This class captures the replaced query, original component, and what it is replaced with\n+ */\n+public class ReplacedComponent {\n+  private String query;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04235d9d37e21ec1a6a3df531b3e9f1d49432313"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3ac9ad11d0ad5c103fec41f615e0be4d3074065", "author": {"user": {"login": "subinbean", "name": "Subin Lee"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/e3ac9ad11d0ad5c103fec41f615e0be4d3074065", "committedDate": "2020-07-28T19:39:41Z", "message": "string formatted"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af045886a4700a3063f7cf6c7024385f2a610379", "author": {"user": {"login": "subinbean", "name": "Subin Lee"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/af045886a4700a3063f7cf6c7024385f2a610379", "committedDate": "2020-07-28T19:44:02Z", "message": "string formatted for querybreakdown as well"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd046b4053b0d43e738e54acfa50fd0246aaa39b", "author": {"user": {"login": "subinbean", "name": "Subin Lee"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/fd046b4053b0d43e738e54acfa50fd0246aaa39b", "committedDate": "2020-07-28T20:00:13Z", "message": "comments further addressed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28ef50de6950a51cd7d8f35e00441320fcf38edd", "author": {"user": {"login": "subinbean", "name": "Subin Lee"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/28ef50de6950a51cd7d8f35e00441320fcf38edd", "committedDate": "2020-07-28T20:01:20Z", "message": "Merge branch 'milestone1_3' of https://github.com/subinbean/bigquery-utils into milestone1_3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "560c82e2a0a12bdcb6dbdb99929b8b30d14652a2", "author": {"user": {"login": "AayushBhatnagar", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/560c82e2a0a12bdcb6dbdb99929b8b30d14652a2", "committedDate": "2020-07-28T22:28:21Z", "message": "Merge branch 'master' into milestone1_3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3df13d228dcb02373ba78e132578f8a94916a580", "author": {"user": {"login": "subinbean", "name": "Subin Lee"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/3df13d228dcb02373ba78e132578f8a94916a580", "committedDate": "2020-07-28T23:47:52Z", "message": "added this to the constructor for consistency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c302792ae71bc5430fc7afc5bc618dd5b301eec", "author": {"user": {"login": "subinbean", "name": "Subin Lee"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/7c302792ae71bc5430fc7afc5bc618dd5b301eec", "committedDate": "2020-07-28T23:48:13Z", "message": "Merge branch 'milestone1_3' of https://github.com/subinbean/bigquery-utils into milestone1_3"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 696, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}