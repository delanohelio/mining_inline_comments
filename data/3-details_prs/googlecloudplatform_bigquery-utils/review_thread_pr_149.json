{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NTgzNTA3", "number": 149, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNjoxNToyNVrOEY53cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOToxNjo1N1rOEZnk3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTQ5MzYxOnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/entity/FixResult.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNjoxNToyNVrOHBa8Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMTozNTo1MlrOHCnh-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI1MjAzOA==", "bodyText": "why we want this flag? What if we are not confident\uff1f\nMaybe give confidence level instead of boolean?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/149#discussion_r471252038", "createdAt": "2020-08-17T06:15:25Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/entity/FixResult.java", "diffHunk": "@@ -27,17 +29,25 @@\n   /** The position at the query where the error occurs. */\n   Position errorPosition;\n \n+  /** Is query fixer confident about this fixing */\n+  Boolean isConfident;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd28247905d4b9aed66b646577cf5df13df0540"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc0MDk2Mg==", "bodyText": "The confident flag is used when the program is in user-assistance mode. Usually, the program only asks users to select an option if multiple ones exist. However, if an approach is marked not confident, then the program will ask users to confirm the option even if only one option exists.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/149#discussion_r471740962", "createdAt": "2020-08-17T19:55:58Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/entity/FixResult.java", "diffHunk": "@@ -27,17 +29,25 @@\n   /** The position at the query where the error occurs. */\n   Position errorPosition;\n \n+  /** Is query fixer confident about this fixing */\n+  Boolean isConfident;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI1MjAzOA=="}, "originalCommit": {"oid": "0dd28247905d4b9aed66b646577cf5df13df0540"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxOTM5Nw==", "bodyText": "ok. How do we know if we are confident or not?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/149#discussion_r472419397", "createdAt": "2020-08-18T19:09:11Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/entity/FixResult.java", "diffHunk": "@@ -27,17 +29,25 @@\n   /** The position at the query where the error occurs. */\n   Position errorPosition;\n \n+  /** Is query fixer confident about this fixing */\n+  Boolean isConfident;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI1MjAzOA=="}, "originalCommit": {"oid": "0dd28247905d4b9aed66b646577cf5df13df0540"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwNjg3Mw==", "bodyText": "Currently, it is determined by developers. For example, fixing the unrecognized column is confident, because the column to replace is the most similar column to the incorrect one.\nHowever, fixing some syntax error could be not confident. One case is \"Expect End of Input but got others\". Most unparsable query will result in this error, but this error message contains no useful information. Thus, there is no way to fix this error in a confident way. In this situation, the query fixer will mark this fix as \"not confident\".", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/149#discussion_r472506873", "createdAt": "2020-08-18T21:35:52Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/entity/FixResult.java", "diffHunk": "@@ -27,17 +29,25 @@\n   /** The position at the query where the error occurs. */\n   Position errorPosition;\n \n+  /** Is query fixer confident about this fixing */\n+  Boolean isConfident;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI1MjAzOA=="}, "originalCommit": {"oid": "0dd28247905d4b9aed66b646577cf5df13df0540"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTQ5Nzk2OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/FunctionNotFoundFixer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNjoxNzozN1rOHBa-2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMTozNjo0NlrOHCnjpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI1MjY5OA==", "bodyText": "Does this mean if the 'dry-run' error message doesn't provide similar function suggestions we will return error?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/149#discussion_r471252698", "createdAt": "2020-08-17T06:17:37Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/FunctionNotFoundFixer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.google.cloud.bigquery.utils.queryfixer.fixer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+import com.google.cloud.bigquery.utils.queryfixer.errors.FunctionNotFoundError;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.QueryTokenProcessor;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.Collections;\n+\n+/**\n+ * The fixer class responsible for unrecognized functions. It fixes the error by (1) reading the\n+ * similar function suggestion from the error message, and (2) replace the unrecognized function\n+ * with the suggested one.\n+ *\n+ * <p>If the error message does not provide similar function suggestions, the fixer will directly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd28247905d4b9aed66b646577cf5df13df0540"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc0MTUzMA==", "bodyText": "For built-in function, yes. However, if the function is UDF, then logic will be implemented in future, like querying the server to find the UDF with similar names.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/149#discussion_r471741530", "createdAt": "2020-08-17T19:57:13Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/FunctionNotFoundFixer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.google.cloud.bigquery.utils.queryfixer.fixer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+import com.google.cloud.bigquery.utils.queryfixer.errors.FunctionNotFoundError;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.QueryTokenProcessor;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.Collections;\n+\n+/**\n+ * The fixer class responsible for unrecognized functions. It fixes the error by (1) reading the\n+ * similar function suggestion from the error message, and (2) replace the unrecognized function\n+ * with the suggested one.\n+ *\n+ * <p>If the error message does not provide similar function suggestions, the fixer will directly", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI1MjY5OA=="}, "originalCommit": {"oid": "0dd28247905d4b9aed66b646577cf5df13df0540"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyMTIxMQ==", "bodyText": "OK. Please document the behavior somewhere so we know what to expect :).", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/149#discussion_r472421211", "createdAt": "2020-08-18T19:12:31Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/FunctionNotFoundFixer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.google.cloud.bigquery.utils.queryfixer.fixer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+import com.google.cloud.bigquery.utils.queryfixer.errors.FunctionNotFoundError;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.QueryTokenProcessor;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.Collections;\n+\n+/**\n+ * The fixer class responsible for unrecognized functions. It fixes the error by (1) reading the\n+ * similar function suggestion from the error message, and (2) replace the unrecognized function\n+ * with the suggested one.\n+ *\n+ * <p>If the error message does not provide similar function suggestions, the fixer will directly", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI1MjY5OA=="}, "originalCommit": {"oid": "0dd28247905d4b9aed66b646577cf5df13df0540"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwNzMwMA==", "bodyText": "Yes, a TODO is put in the code. I will document this logic once it is implemented.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/149#discussion_r472507300", "createdAt": "2020-08-18T21:36:46Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/FunctionNotFoundFixer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.google.cloud.bigquery.utils.queryfixer.fixer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+import com.google.cloud.bigquery.utils.queryfixer.errors.FunctionNotFoundError;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.QueryTokenProcessor;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.Collections;\n+\n+/**\n+ * The fixer class responsible for unrecognized functions. It fixes the error by (1) reading the\n+ * similar function suggestion from the error message, and (2) replace the unrecognized function\n+ * with the suggested one.\n+ *\n+ * <p>If the error message does not provide similar function suggestions, the fixer will directly", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI1MjY5OA=="}, "originalCommit": {"oid": "0dd28247905d4b9aed66b646577cf5df13df0540"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTQ5ODk1OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/FunctionNotFoundFixer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNjoxODowOFrOHBa_bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTowMjoyOFrOHCh-yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI1Mjg0NQ==", "bodyText": "nit: If", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/149#discussion_r471252845", "createdAt": "2020-08-17T06:18:08Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/FunctionNotFoundFixer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.google.cloud.bigquery.utils.queryfixer.fixer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+import com.google.cloud.bigquery.utils.queryfixer.errors.FunctionNotFoundError;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.QueryTokenProcessor;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.Collections;\n+\n+/**\n+ * The fixer class responsible for unrecognized functions. It fixes the error by (1) reading the\n+ * similar function suggestion from the error message, and (2) replace the unrecognized function\n+ * with the suggested one.\n+ *\n+ * <p>If the error message does not provide similar function suggestions, the fixer will directly\n+ * return the error without providing any fix options.\n+ */\n+@AllArgsConstructor\n+@Getter\n+public class FunctionNotFoundFixer implements IFixer {\n+\n+  private final String query;\n+  private final FunctionNotFoundError err;\n+  private final QueryTokenProcessor queryTokenProcessor;\n+\n+  @Override\n+  public FixResult fix() {\n+    // if the failure does not include a suggestion, directly inform users that it cannot be auto", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd28247905d4b9aed66b646577cf5df13df0540"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxNTk0Ng==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/149#discussion_r472415946", "createdAt": "2020-08-18T19:02:28Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/FunctionNotFoundFixer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.google.cloud.bigquery.utils.queryfixer.fixer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+import com.google.cloud.bigquery.utils.queryfixer.errors.FunctionNotFoundError;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.QueryTokenProcessor;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.Collections;\n+\n+/**\n+ * The fixer class responsible for unrecognized functions. It fixes the error by (1) reading the\n+ * similar function suggestion from the error message, and (2) replace the unrecognized function\n+ * with the suggested one.\n+ *\n+ * <p>If the error message does not provide similar function suggestions, the fixer will directly\n+ * return the error without providing any fix options.\n+ */\n+@AllArgsConstructor\n+@Getter\n+public class FunctionNotFoundFixer implements IFixer {\n+\n+  private final String query;\n+  private final FunctionNotFoundError err;\n+  private final QueryTokenProcessor queryTokenProcessor;\n+\n+  @Override\n+  public FixResult fix() {\n+    // if the failure does not include a suggestion, directly inform users that it cannot be auto", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI1Mjg0NQ=="}, "originalCommit": {"oid": "0dd28247905d4b9aed66b646577cf5df13df0540"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTUwMDc2OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/UnrecognizedColumnFixer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNjoxOTowN1rOHBbAjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTowMjozM1rOHCh--g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI1MzEzNA==", "bodyText": "nit: If", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/149#discussion_r471253134", "createdAt": "2020-08-17T06:19:07Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/UnrecognizedColumnFixer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.google.cloud.bigquery.utils.queryfixer.fixer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+import com.google.cloud.bigquery.utils.queryfixer.errors.UnrecognizedColumnError;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.QueryTokenProcessor;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.Collections;\n+\n+/**\n+ * The fixer class responsible for unrecognized columns. It fixes the error by (1) reading the\n+ * similar column suggestion from the error message, and (2) replace the unrecognized column with\n+ * the suggested one.\n+ *\n+ * <p>If the error message does not provide similar column suggestions, the fixer will directly\n+ * return the error without providing any fix options.\n+ */\n+@AllArgsConstructor\n+@Getter\n+public class UnrecognizedColumnFixer implements IFixer {\n+\n+  private final String query;\n+  private final UnrecognizedColumnError err;\n+  private final QueryTokenProcessor queryTokenProcessor;\n+\n+  @Override\n+  public FixResult fix() {\n+    // if the failure does not include a suggestion, directly inform users that it cannot be auto\n+    // fixed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dd28247905d4b9aed66b646577cf5df13df0540"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxNTk5NA==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/149#discussion_r472415994", "createdAt": "2020-08-18T19:02:33Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/UnrecognizedColumnFixer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.google.cloud.bigquery.utils.queryfixer.fixer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+import com.google.cloud.bigquery.utils.queryfixer.errors.UnrecognizedColumnError;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.QueryTokenProcessor;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.Collections;\n+\n+/**\n+ * The fixer class responsible for unrecognized columns. It fixes the error by (1) reading the\n+ * similar column suggestion from the error message, and (2) replace the unrecognized column with\n+ * the suggested one.\n+ *\n+ * <p>If the error message does not provide similar column suggestions, the fixer will directly\n+ * return the error without providing any fix options.\n+ */\n+@AllArgsConstructor\n+@Getter\n+public class UnrecognizedColumnFixer implements IFixer {\n+\n+  private final String query;\n+  private final UnrecognizedColumnError err;\n+  private final QueryTokenProcessor queryTokenProcessor;\n+\n+  @Override\n+  public FixResult fix() {\n+    // if the failure does not include a suggestion, directly inform users that it cannot be auto\n+    // fixed.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI1MzEzNA=="}, "originalCommit": {"oid": "0dd28247905d4b9aed66b646577cf5df13df0540"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Mjk1ODcyOnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/entity/FixResult.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTowOTo0MVrOHCiNaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMTozODozMlrOHCnmwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxOTY4OQ==", "bodyText": "nit: fix 'failed'?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/149#discussion_r472419689", "createdAt": "2020-08-18T19:09:41Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/entity/FixResult.java", "diffHunk": "@@ -27,17 +29,25 @@\n   /** The position at the query where the error occurs. */\n   Position errorPosition;\n \n+  /** Is query fixer confident about this fixing */\n+  Boolean isConfident;\n+\n+  /** The reason why this fix is failed. It is only not null when the Status is FAILURE. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79e7910a2ad9df57fa5243f3981629a296d87db8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwODA5Ng==", "bodyText": "Rephrase to \"The detail of why the query fails to be fixed.\".", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/149#discussion_r472508096", "createdAt": "2020-08-18T21:38:32Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/entity/FixResult.java", "diffHunk": "@@ -27,17 +29,25 @@\n   /** The position at the query where the error occurs. */\n   Position errorPosition;\n \n+  /** Is query fixer confident about this fixing */\n+  Boolean isConfident;\n+\n+  /** The reason why this fix is failed. It is only not null when the Status is FAILURE. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxOTY4OQ=="}, "originalCommit": {"oid": "79e7910a2ad9df57fa5243f3981629a296d87db8"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Mjk2NDA1OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/entity/FixResult.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOToxMToxNFrOHCiQuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMTozOToyOFrOHCnoew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyMDUzOQ==", "bodyText": "maybe 'errorDetail' or 'failureDetail'?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/149#discussion_r472420539", "createdAt": "2020-08-18T19:11:14Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/entity/FixResult.java", "diffHunk": "@@ -27,17 +29,25 @@\n   /** The position at the query where the error occurs. */\n   Position errorPosition;\n \n+  /** Is query fixer confident about this fixing */\n+  Boolean isConfident;\n+\n+  /** The reason why this fix is failed. It is only not null when the Status is FAILURE. */\n+  String failureReason;\n+\n   /**\n    * Create a Failure FixResult indicating that a {@link BigQuerySqlError} can not be fixed.\n    *\n    * @param error un-fixable error\n+   * @param failureReason reason why this fix is failed.\n    * @return FixResult with FAILURE Status\n    */\n-  public static FixResult failure(BigQuerySqlError error) {\n+  public static FixResult failure(BigQuerySqlError error, String failureReason) {\n     return FixResult.builder()\n         .status(Status.FAILURE)\n         .error(error.getErrorSource().getMessage())\n         .errorPosition(error.getErrorPosition())\n+        .failureReason(failureReason)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79e7910a2ad9df57fa5243f3981629a296d87db8"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwODUzOQ==", "bodyText": "Change to \"failureDetail\"", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/149#discussion_r472508539", "createdAt": "2020-08-18T21:39:28Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/entity/FixResult.java", "diffHunk": "@@ -27,17 +29,25 @@\n   /** The position at the query where the error occurs. */\n   Position errorPosition;\n \n+  /** Is query fixer confident about this fixing */\n+  Boolean isConfident;\n+\n+  /** The reason why this fix is failed. It is only not null when the Status is FAILURE. */\n+  String failureReason;\n+\n   /**\n    * Create a Failure FixResult indicating that a {@link BigQuerySqlError} can not be fixed.\n    *\n    * @param error un-fixable error\n+   * @param failureReason reason why this fix is failed.\n    * @return FixResult with FAILURE Status\n    */\n-  public static FixResult failure(BigQuerySqlError error) {\n+  public static FixResult failure(BigQuerySqlError error, String failureReason) {\n     return FixResult.builder()\n         .status(Status.FAILURE)\n         .error(error.getErrorSource().getMessage())\n         .errorPosition(error.getErrorPosition())\n+        .failureReason(failureReason)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyMDUzOQ=="}, "originalCommit": {"oid": "79e7910a2ad9df57fa5243f3981629a296d87db8"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Mjk3MjI3OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/FunctionNotFoundFixer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOToxMzo0N1rOHCiV5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMTo0MToxNFrOHCnrxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyMTg2MQ==", "bodyText": "Do we find similar function using edit distance too or other algo?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/149#discussion_r472421861", "createdAt": "2020-08-18T19:13:47Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/FunctionNotFoundFixer.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.google.cloud.bigquery.utils.queryfixer.fixer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+import com.google.cloud.bigquery.utils.queryfixer.errors.FunctionNotFoundError;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.QueryTokenProcessor;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.Collections;\n+\n+/**\n+ * The fixer class responsible for unrecognized functions. It fixes the error by (1) reading the\n+ * similar function suggestion from the error message, and (2) replace the unrecognized function\n+ * with the suggested one.\n+ *\n+ * <p>If the error message does not provide similar function suggestions, the fixer will directly\n+ * return the error without providing any fix options.\n+ */\n+@AllArgsConstructor\n+@Getter\n+public class FunctionNotFoundFixer implements IFixer {\n+\n+  private final String query;\n+  private final FunctionNotFoundError err;\n+  private final QueryTokenProcessor queryTokenProcessor;\n+\n+  @Override\n+  public FixResult fix() {\n+    // If the failure does not include a suggestion, directly inform users that it cannot be auto\n+    // fixed.\n+    if (!err.hasSuggestion()) {\n+      return FixResult.failure(err, \"No similar function was found.\");\n+    }\n+\n+    // TODO: If the unrecognized function looks like a UDF (i.e. proj.dataset.function), then\n+    // request BigQuery for a list of functions and find the most similar one.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79e7910a2ad9df57fa5243f3981629a296d87db8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwOTM4MQ==", "bodyText": "Yes, the similarity is based on edit distance. Currently, we only consider the similarity in function names. It is hard to examine whether the function has a valid signature.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/149#discussion_r472509381", "createdAt": "2020-08-18T21:41:14Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/FunctionNotFoundFixer.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.google.cloud.bigquery.utils.queryfixer.fixer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+import com.google.cloud.bigquery.utils.queryfixer.errors.FunctionNotFoundError;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.QueryTokenProcessor;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.Collections;\n+\n+/**\n+ * The fixer class responsible for unrecognized functions. It fixes the error by (1) reading the\n+ * similar function suggestion from the error message, and (2) replace the unrecognized function\n+ * with the suggested one.\n+ *\n+ * <p>If the error message does not provide similar function suggestions, the fixer will directly\n+ * return the error without providing any fix options.\n+ */\n+@AllArgsConstructor\n+@Getter\n+public class FunctionNotFoundFixer implements IFixer {\n+\n+  private final String query;\n+  private final FunctionNotFoundError err;\n+  private final QueryTokenProcessor queryTokenProcessor;\n+\n+  @Override\n+  public FixResult fix() {\n+    // If the failure does not include a suggestion, directly inform users that it cannot be auto\n+    // fixed.\n+    if (!err.hasSuggestion()) {\n+      return FixResult.failure(err, \"No similar function was found.\");\n+    }\n+\n+    // TODO: If the unrecognized function looks like a UDF (i.e. proj.dataset.function), then\n+    // request BigQuery for a list of functions and find the most similar one.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyMTg2MQ=="}, "originalCommit": {"oid": "79e7910a2ad9df57fa5243f3981629a296d87db8"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Mjk3Mzg1OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/FunctionNotFoundFixer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOToxNDoyMVrOHCiW3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMTo1OTo1N1rOHCoLqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyMjEwOQ==", "bodyText": "'Replace the function'? since we are using a new function instead", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/149#discussion_r472422109", "createdAt": "2020-08-18T19:14:21Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/FunctionNotFoundFixer.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.google.cloud.bigquery.utils.queryfixer.fixer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+import com.google.cloud.bigquery.utils.queryfixer.errors.FunctionNotFoundError;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.QueryTokenProcessor;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.Collections;\n+\n+/**\n+ * The fixer class responsible for unrecognized functions. It fixes the error by (1) reading the\n+ * similar function suggestion from the error message, and (2) replace the unrecognized function\n+ * with the suggested one.\n+ *\n+ * <p>If the error message does not provide similar function suggestions, the fixer will directly\n+ * return the error without providing any fix options.\n+ */\n+@AllArgsConstructor\n+@Getter\n+public class FunctionNotFoundFixer implements IFixer {\n+\n+  private final String query;\n+  private final FunctionNotFoundError err;\n+  private final QueryTokenProcessor queryTokenProcessor;\n+\n+  @Override\n+  public FixResult fix() {\n+    // If the failure does not include a suggestion, directly inform users that it cannot be auto\n+    // fixed.\n+    if (!err.hasSuggestion()) {\n+      return FixResult.failure(err, \"No similar function was found.\");\n+    }\n+\n+    // TODO: If the unrecognized function looks like a UDF (i.e. proj.dataset.function), then\n+    // request BigQuery for a list of functions and find the most similar one.\n+\n+    IToken token =\n+        queryTokenProcessor.getTokenAt(\n+            query, err.getErrorPosition().getRow(), err.getErrorPosition().getColumn());\n+    String fixedQuery = queryTokenProcessor.replaceToken(query, token, err.getSuggestion());\n+    FixOption fixOption = FixOption.of(err.getSuggestion(), fixedQuery);\n+    return FixResult.success(\n+        /*suggestion= */ \"Modify the function\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79e7910a2ad9df57fa5243f3981629a296d87db8"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxNzU0Ng==", "bodyText": "Agree. I have rephrased it.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/149#discussion_r472517546", "createdAt": "2020-08-18T21:59:57Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/fixer/FunctionNotFoundFixer.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.google.cloud.bigquery.utils.queryfixer.fixer;\n+\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.IToken;\n+import com.google.cloud.bigquery.utils.queryfixer.errors.FunctionNotFoundError;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.QueryTokenProcessor;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.Collections;\n+\n+/**\n+ * The fixer class responsible for unrecognized functions. It fixes the error by (1) reading the\n+ * similar function suggestion from the error message, and (2) replace the unrecognized function\n+ * with the suggested one.\n+ *\n+ * <p>If the error message does not provide similar function suggestions, the fixer will directly\n+ * return the error without providing any fix options.\n+ */\n+@AllArgsConstructor\n+@Getter\n+public class FunctionNotFoundFixer implements IFixer {\n+\n+  private final String query;\n+  private final FunctionNotFoundError err;\n+  private final QueryTokenProcessor queryTokenProcessor;\n+\n+  @Override\n+  public FixResult fix() {\n+    // If the failure does not include a suggestion, directly inform users that it cannot be auto\n+    // fixed.\n+    if (!err.hasSuggestion()) {\n+      return FixResult.failure(err, \"No similar function was found.\");\n+    }\n+\n+    // TODO: If the unrecognized function looks like a UDF (i.e. proj.dataset.function), then\n+    // request BigQuery for a list of functions and find the most similar one.\n+\n+    IToken token =\n+        queryTokenProcessor.getTokenAt(\n+            query, err.getErrorPosition().getRow(), err.getErrorPosition().getColumn());\n+    String fixedQuery = queryTokenProcessor.replaceToken(query, token, err.getSuggestion());\n+    FixOption fixOption = FixOption.of(err.getSuggestion(), fixedQuery);\n+    return FixResult.success(\n+        /*suggestion= */ \"Modify the function\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyMjEwOQ=="}, "originalCommit": {"oid": "79e7910a2ad9df57fa5243f3981629a296d87db8"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Mjk4MjY5OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/FixerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOToxNjo1N1rOHCicPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMjowMTowM1rOHCoNkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyMzQ4NA==", "bodyText": "We should add more test cases for each error type, consider using parameterized tests or file-based test. We need to test more complicated queries.\nFeel free to add TODO and add it later.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/149#discussion_r472423484", "createdAt": "2020-08-18T19:16:57Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/FixerTest.java", "diffHunk": "@@ -74,6 +72,45 @@ public void fixTableNotFound() {\n     assertEquals(22, result.getErrorPosition().getColumn());\n   }\n \n+  @Test\n+  public void fixUnrecognizedColumn() {\n+    String query = \"SELECT state From `bigquery-public-data.austin_311.311_request` LIMIT 10\";\n+    String message = \"Unrecognized name: state; Did you mean status? at [1:8]\";\n+    BigQuerySqlError error = buildError(message);\n+\n+    IFixer fixer = fixerFactory.getFixer(query, error);\n+    assertTrue(fixer instanceof UnrecognizedColumnFixer);\n+\n+    FixResult result = fixer.fix();\n+    assertEquals(1, result.getOptions().size());\n+    assertEquals(\n+        \"SELECT status From `bigquery-public-data.austin_311.311_request` LIMIT 10\",\n+        result.getOptions().get(0).getFixedQuery());\n+\n+    assertEquals(1, result.getErrorPosition().getRow());\n+    assertEquals(8, result.getErrorPosition().getColumn());\n+  }\n+\n+  @Test\n+  public void fixFunctionNotFound() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79e7910a2ad9df57fa5243f3981629a296d87db8"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxODAzMg==", "bodyText": "Agree. TODO is added.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/149#discussion_r472518032", "createdAt": "2020-08-18T22:01:03Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/FixerTest.java", "diffHunk": "@@ -74,6 +72,45 @@ public void fixTableNotFound() {\n     assertEquals(22, result.getErrorPosition().getColumn());\n   }\n \n+  @Test\n+  public void fixUnrecognizedColumn() {\n+    String query = \"SELECT state From `bigquery-public-data.austin_311.311_request` LIMIT 10\";\n+    String message = \"Unrecognized name: state; Did you mean status? at [1:8]\";\n+    BigQuerySqlError error = buildError(message);\n+\n+    IFixer fixer = fixerFactory.getFixer(query, error);\n+    assertTrue(fixer instanceof UnrecognizedColumnFixer);\n+\n+    FixResult result = fixer.fix();\n+    assertEquals(1, result.getOptions().size());\n+    assertEquals(\n+        \"SELECT status From `bigquery-public-data.austin_311.311_request` LIMIT 10\",\n+        result.getOptions().get(0).getFixedQuery());\n+\n+    assertEquals(1, result.getErrorPosition().getRow());\n+    assertEquals(8, result.getErrorPosition().getColumn());\n+  }\n+\n+  @Test\n+  public void fixFunctionNotFound() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyMzQ4NA=="}, "originalCommit": {"oid": "79e7910a2ad9df57fa5243f3981629a296d87db8"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3109, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}