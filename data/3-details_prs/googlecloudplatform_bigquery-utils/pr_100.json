{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5MTcxNTE1", "number": 100, "title": "Auto Query Fixer: add a new method to the BigQueryService component.", "bodyText": "Add the listTables method to the BigQueryService.\nTest is included.", "createdAt": "2020-07-15T00:04:12Z", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100", "merged": true, "mergeCommit": {"oid": "d22661cdc44a5fd4cf85181c74ca108c39291949"}, "closed": true, "closedAt": "2020-07-23T01:14:52Z", "author": {"login": "mingen-pan"}, "timelineItems": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuk54QAH2gAyNDQ5MTcxNTE1OmEyYTVhODRmZmRmNmNlZWJkNDNjZGRhMzlmMTc3ZjBiNGIxZGMxODc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3k8C0gH2gAyNDQ5MTcxNTE1OjYyZWM2MGMxYzMzNTcxNzE0M2MwM2JiOTQzZTdhYjlkNzkzZTZhZWQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a2a5a84ffdf6ceebd43cdda39f177f0b4b1dc187", "author": {"user": {"login": "mingen-pan", "name": "Mingen Pan"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/a2a5a84ffdf6ceebd43cdda39f177f0b4b1dc187", "committedDate": "2020-06-25T02:06:24Z", "message": "init a project\ncreate and test a QueryTokenService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f80bd6fc66697b00f278c0cc5ecee9063fb7639", "author": {"user": {"login": "mingen-pan", "name": "Mingen Pan"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/0f80bd6fc66697b00f278c0cc5ecee9063fb7639", "committedDate": "2020-06-30T21:11:52Z", "message": "reformat the code\nAdd comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ebc50fab3773e85f8b30490392fce784f714f88", "author": {"user": {"login": "mingen-pan", "name": "Mingen Pan"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/0ebc50fab3773e85f8b30490392fce784f714f88", "committedDate": "2020-07-01T01:45:14Z", "message": "rename the package name to 'queryfixer'\n\nadd documents for classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eccb3d14310ca239e761705b5cab3c7c36768ff5", "author": {"user": {"login": "mingen-pan", "name": "Mingen Pan"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/eccb3d14310ca239e761705b5cab3c7c36768ff5", "committedDate": "2020-07-07T00:11:26Z", "message": "decompose the PR into multiple parts.\nThis is the first part: init the project and implement one feature of the QueryTokenProcessor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "author": {"user": {"login": "mingen-pan", "name": "Mingen Pan"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/5cd85f8bc0d7b871f86f875ca230bc9ad75121f3", "committedDate": "2020-07-07T00:39:55Z", "message": "minor change in BigQueryParserFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd47ab9d336640ffccccd762a54e7fa3058fb4ba", "author": {"user": {"login": "mingen-pan", "name": "Mingen Pan"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/cd47ab9d336640ffccccd762a54e7fa3058fb4ba", "committedDate": "2020-07-08T20:08:21Z", "message": "add BigQueryService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b86a8e36bd784a29c6e7357ff786036a77b80bf", "author": {"user": {"login": "mingen-pan", "name": "Mingen Pan"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/8b86a8e36bd784a29c6e7357ff786036a77b80bf", "committedDate": "2020-07-09T18:43:35Z", "message": "revise the review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f907074ad2175483fa52068793fbafe3baf970e", "author": {"user": {"login": "mingen-pan", "name": "Mingen Pan"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/7f907074ad2175483fa52068793fbafe3baf970e", "committedDate": "2020-07-11T00:19:20Z", "message": "minor fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fc21d436af780f16ed51e00bb3b00c2509b0f4e", "author": {"user": {"login": "mingen-pan", "name": "Mingen Pan"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/5fc21d436af780f16ed51e00bb3b00c2509b0f4e", "committedDate": "2020-07-11T00:26:03Z", "message": "Merge branch 'mepan_init' into master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c41e10f848ea306e0d10842bfa3e05592798b7e", "author": {"user": {"login": "mingen-pan", "name": "Mingen Pan"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/2c41e10f848ea306e0d10842bfa3e05592798b7e", "committedDate": "2020-07-11T00:49:36Z", "message": "Merge branch 'master' into mepan_add_bq_server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf3f6c4eafc7c91b8c0172ce82d1ff8566968d19", "author": {"user": {"login": "mingen-pan", "name": "Mingen Pan"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/cf3f6c4eafc7c91b8c0172ce82d1ff8566968d19", "committedDate": "2020-07-14T23:12:20Z", "message": "Minor change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97", "author": {"user": {"login": "mingen-pan", "name": "Mingen Pan"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/a99d4fd7dcaa9f09862abaf20741242986a5af97", "committedDate": "2020-07-14T23:33:51Z", "message": "Add the `listTables` method to the BigQueryService"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NDQyMzcz", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#pullrequestreview-449442373", "createdAt": "2020-07-16T01:13:05Z", "commit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMToxMzowNVrOGyWmEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMToxMzowNVrOGyWmEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1MjE3OA==", "bodyText": "check not null?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455452178", "createdAt": "2020-07-16T01:13:05Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.google.cloud.bigquery.utils.queryfixer.service;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A service to connect with the BigQuery server. It is used to communicate with the server like\n+ * sending queries and receiving data.\n+ * */\n+public class BigQueryService {\n+\n+  private final BigQuery bigquery;\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the customized options.\n+   * @param options customized options\n+   * */\n+  public BigQueryService(BigQueryOptions options) {\n+    this.bigquery = new BigQueryOptions.DefaultBigQueryFactory().create(options);\n+  }\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the default setting. The projectID should be specified.\n+   * @param projectId project ID\n+   * */\n+  public BigQueryService(String projectId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NDQzMTg0", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#pullrequestreview-449443184", "createdAt": "2020-07-16T01:15:43Z", "commit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMToxNTo0M1rOGyWo1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMToxNTo0M1rOGyWo1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1Mjg4NA==", "bodyText": "nit: You can just  .build() here.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455452884", "createdAt": "2020-07-16T01:15:43Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.google.cloud.bigquery.utils.queryfixer.service;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A service to connect with the BigQuery server. It is used to communicate with the server like\n+ * sending queries and receiving data.\n+ * */\n+public class BigQueryService {\n+\n+  private final BigQuery bigquery;\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the customized options.\n+   * @param options customized options\n+   * */\n+  public BigQueryService(BigQueryOptions options) {\n+    this.bigquery = new BigQueryOptions.DefaultBigQueryFactory().create(options);\n+  }\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the default setting. The projectID should be specified.\n+   * @param projectId project ID\n+   * */\n+  public BigQueryService(String projectId) {\n+    BigQueryOptions.Builder builder = BigQueryOptions.newBuilder()\n+        .setProjectId(projectId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NDQzMjQz", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#pullrequestreview-449443243", "createdAt": "2020-07-16T01:15:55Z", "commit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMToxNTo1NlrOGyWpCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMToxNTo1NlrOGyWpCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1MjkzNg==", "bodyText": "nit: Return", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455452936", "createdAt": "2020-07-16T01:15:56Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.google.cloud.bigquery.utils.queryfixer.service;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A service to connect with the BigQuery server. It is used to communicate with the server like\n+ * sending queries and receiving data.\n+ * */\n+public class BigQueryService {\n+\n+  private final BigQuery bigquery;\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the customized options.\n+   * @param options customized options\n+   * */\n+  public BigQueryService(BigQueryOptions options) {\n+    this.bigquery = new BigQueryOptions.DefaultBigQueryFactory().create(options);\n+  }\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the default setting. The projectID should be specified.\n+   * @param projectId project ID\n+   * */\n+  public BigQueryService(String projectId) {\n+    BigQueryOptions.Builder builder = BigQueryOptions.newBuilder()\n+        .setProjectId(projectId);\n+    this.bigquery = builder.build().getService();\n+  }\n+\n+  /**\n+   * Dry run a BigQuery query and return the job instance. If a BigQuery Exception is generated, it will be thrown.\n+   * @param query the dry-run query\n+   * @return the job representing this dry run\n+   * @throws BigQueryException the error from the BigQuery Server.\n+   */\n+  public Job dryRun(String query) throws BigQueryException {\n+    QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).setDryRun(true).build();\n+    return bigquery.create(JobInfo.of(queryConfig));\n+  }\n+\n+  /**\n+   * return the BigQuery Exception if the dry run of a query generated the exception. If the query is correct and no", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NDQ0Mzky", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#pullrequestreview-449444392", "createdAt": "2020-07-16T01:19:45Z", "commit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMToxOTo0NVrOGyWs0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMToxOTo0NVrOGyWs0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1MzkwNA==", "bodyText": "I think normally we don't indicate if exception is caught or thrown  \"catException..\" in the method name. This method can be called \"dryRun\" - the other method can be merged together here.\nI don't quite understand why you want to catch and return? You can just throw it.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455453904", "createdAt": "2020-07-16T01:19:45Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.google.cloud.bigquery.utils.queryfixer.service;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A service to connect with the BigQuery server. It is used to communicate with the server like\n+ * sending queries and receiving data.\n+ * */\n+public class BigQueryService {\n+\n+  private final BigQuery bigquery;\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the customized options.\n+   * @param options customized options\n+   * */\n+  public BigQueryService(BigQueryOptions options) {\n+    this.bigquery = new BigQueryOptions.DefaultBigQueryFactory().create(options);\n+  }\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the default setting. The projectID should be specified.\n+   * @param projectId project ID\n+   * */\n+  public BigQueryService(String projectId) {\n+    BigQueryOptions.Builder builder = BigQueryOptions.newBuilder()\n+        .setProjectId(projectId);\n+    this.bigquery = builder.build().getService();\n+  }\n+\n+  /**\n+   * Dry run a BigQuery query and return the job instance. If a BigQuery Exception is generated, it will be thrown.\n+   * @param query the dry-run query\n+   * @return the job representing this dry run\n+   * @throws BigQueryException the error from the BigQuery Server.\n+   */\n+  public Job dryRun(String query) throws BigQueryException {\n+    QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).setDryRun(true).build();\n+    return bigquery.create(JobInfo.of(queryConfig));\n+  }\n+\n+  /**\n+   * return the BigQuery Exception if the dry run of a query generated the exception. If the query is correct and no\n+   * errors exist in the server, null will be returned.\n+   * @param query the dry-run query\n+   * @return the BigQueryException related with this query\n+   */\n+  public BigQueryException catchExceptionFromDryRun(String query) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NDQ0ODIy", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#pullrequestreview-449444822", "createdAt": "2020-07-16T01:21:13Z", "commit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMToyMToxM1rOGyWuWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMToyMToxM1rOGyWuWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1NDI5Nw==", "bodyText": "nit: The line break looks weird. I think you should not hit \"new line\" manually when typing otherwise after reformatting it would look weird :).", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455454297", "createdAt": "2020-07-16T01:21:13Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.google.cloud.bigquery.utils.queryfixer.service;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A service to connect with the BigQuery server. It is used to communicate with the server like\n+ * sending queries and receiving data.\n+ * */\n+public class BigQueryService {\n+\n+  private final BigQuery bigquery;\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the customized options.\n+   * @param options customized options\n+   * */\n+  public BigQueryService(BigQueryOptions options) {\n+    this.bigquery = new BigQueryOptions.DefaultBigQueryFactory().create(options);\n+  }\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the default setting. The projectID should be specified.\n+   * @param projectId project ID\n+   * */\n+  public BigQueryService(String projectId) {\n+    BigQueryOptions.Builder builder = BigQueryOptions.newBuilder()\n+        .setProjectId(projectId);\n+    this.bigquery = builder.build().getService();\n+  }\n+\n+  /**\n+   * Dry run a BigQuery query and return the job instance. If a BigQuery Exception is generated, it will be thrown.\n+   * @param query the dry-run query\n+   * @return the job representing this dry run\n+   * @throws BigQueryException the error from the BigQuery Server.\n+   */\n+  public Job dryRun(String query) throws BigQueryException {\n+    QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).setDryRun(true).build();\n+    return bigquery.create(JobInfo.of(queryConfig));\n+  }\n+\n+  /**\n+   * return the BigQuery Exception if the dry run of a query generated the exception. If the query is correct and no\n+   * errors exist in the server, null will be returned.\n+   * @param query the dry-run query\n+   * @return the BigQueryException related with this query\n+   */\n+  public BigQueryException catchExceptionFromDryRun(String query) {\n+    try {\n+      dryRun(query);\n+    } catch (BigQueryException exception) {\n+      return exception;\n+    }\n+\n+    return null;\n+  }\n+\n+  /**\n+   * Fetch the names of all table from the BigQuery given the project and dataset. If the project and/or dataset do", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NDQ1ODM1", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#pullrequestreview-449445835", "createdAt": "2020-07-16T01:24:17Z", "commit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMToyNDoxN1rOGyWxqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMToyNDoxN1rOGyWxqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1NTE0NA==", "bodyText": "How many tables can be returned at maximum?  If there are 10k+  tables, how long does it take roughly?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455455144", "createdAt": "2020-07-16T01:24:17Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.google.cloud.bigquery.utils.queryfixer.service;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A service to connect with the BigQuery server. It is used to communicate with the server like\n+ * sending queries and receiving data.\n+ * */\n+public class BigQueryService {\n+\n+  private final BigQuery bigquery;\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the customized options.\n+   * @param options customized options\n+   * */\n+  public BigQueryService(BigQueryOptions options) {\n+    this.bigquery = new BigQueryOptions.DefaultBigQueryFactory().create(options);\n+  }\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the default setting. The projectID should be specified.\n+   * @param projectId project ID\n+   * */\n+  public BigQueryService(String projectId) {\n+    BigQueryOptions.Builder builder = BigQueryOptions.newBuilder()\n+        .setProjectId(projectId);\n+    this.bigquery = builder.build().getService();\n+  }\n+\n+  /**\n+   * Dry run a BigQuery query and return the job instance. If a BigQuery Exception is generated, it will be thrown.\n+   * @param query the dry-run query\n+   * @return the job representing this dry run\n+   * @throws BigQueryException the error from the BigQuery Server.\n+   */\n+  public Job dryRun(String query) throws BigQueryException {\n+    QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).setDryRun(true).build();\n+    return bigquery.create(JobInfo.of(queryConfig));\n+  }\n+\n+  /**\n+   * return the BigQuery Exception if the dry run of a query generated the exception. If the query is correct and no\n+   * errors exist in the server, null will be returned.\n+   * @param query the dry-run query\n+   * @return the BigQueryException related with this query\n+   */\n+  public BigQueryException catchExceptionFromDryRun(String query) {\n+    try {\n+      dryRun(query);\n+    } catch (BigQueryException exception) {\n+      return exception;\n+    }\n+\n+    return null;\n+  }\n+\n+  /**\n+   * Fetch the names of all table from the BigQuery given the project and dataset. If the project and/or dataset do\n+   * not exist or not visible to the provided service account, {@link com.google.cloud.bigquery.BigQueryException} will\n+   * be thrown.\n+   * @param projectId project id\n+   * @param datasetId dataset id\n+   * @return list of table names belonging to the given project and dataset\n+   */\n+  public List<String> listTableNames(String projectId, String datasetId) throws BigQueryException {\n+    DatasetId projectDatasetId = DatasetId.of(projectId, datasetId);\n+    Page<Table> tables = bigquery.listTables(projectDatasetId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NDQ2NTQy", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#pullrequestreview-449446542", "createdAt": "2020-07-16T01:26:31Z", "commit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMToyNjozMVrOGyW0GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMToyNjozMVrOGyW0GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1NTc2OA==", "bodyText": "What does it mean here? Where do we read in the credentials?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455455768", "createdAt": "2020-07-16T01:26:31Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/BigQueryServiceTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobStatistics;\n+import com.google.cloud.bigquery.utils.queryfixer.service.BigQueryService;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsIterableContainingInOrder.contains;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class BigQueryServiceTest {\n+\n+  private BigQueryService service;\n+\n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NDQ2NzY0", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#pullrequestreview-449446764", "createdAt": "2020-07-16T01:27:12Z", "commit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMToyNzoxMlrOGyW00Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMToyNzoxMlrOGyW00Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1NTk1Mw==", "bodyText": "dryRun_success", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455455953", "createdAt": "2020-07-16T01:27:12Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/BigQueryServiceTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobStatistics;\n+import com.google.cloud.bigquery.utils.queryfixer.service.BigQueryService;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsIterableContainingInOrder.contains;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class BigQueryServiceTest {\n+\n+  private BigQueryService service;\n+\n+  /**\n+   * Please modify this method if your BigQuery credential is not at default path or you would like\n+   * to use other options.\n+   *\n+   * @return a default BigQuery options\n+   */\n+  private BigQueryOptions getOptions() {\n+    String projectId = \"sql-gravity-internship\";\n+    BigQueryOptions.Builder builder = BigQueryOptions.newBuilder().setProjectId(projectId);\n+    return builder.build();\n+  }\n+\n+  @Before\n+  public void getService() {\n+    service = new BigQueryService(getOptions());\n+  }\n+\n+  @Test\n+  public void dryRun1() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NDQ3MDAy", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#pullrequestreview-449447002", "createdAt": "2020-07-16T01:27:57Z", "commit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMToyNzo1N1rOGyW1rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMToyNzo1N1rOGyW1rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1NjE3Mw==", "bodyText": "If you want to test different cases for the same flow, consider using parameterized test, we should avoid using dryRun1, dryRun2, dryRun3...", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455456173", "createdAt": "2020-07-16T01:27:57Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/BigQueryServiceTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobStatistics;\n+import com.google.cloud.bigquery.utils.queryfixer.service.BigQueryService;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsIterableContainingInOrder.contains;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class BigQueryServiceTest {\n+\n+  private BigQueryService service;\n+\n+  /**\n+   * Please modify this method if your BigQuery credential is not at default path or you would like\n+   * to use other options.\n+   *\n+   * @return a default BigQuery options\n+   */\n+  private BigQueryOptions getOptions() {\n+    String projectId = \"sql-gravity-internship\";\n+    BigQueryOptions.Builder builder = BigQueryOptions.newBuilder().setProjectId(projectId);\n+    return builder.build();\n+  }\n+\n+  @Before\n+  public void getService() {\n+    service = new BigQueryService(getOptions());\n+  }\n+\n+  @Test\n+  public void dryRun1() {\n+    String query =\n+        \"SELECT corpus FROM `bigquery-public-data.samples.shakespeare` GROUP BY corpus limit 1000\";\n+    Job job = service.dryRun(query);\n+    JobStatistics.QueryStatistics statistics = job.getStatistics();\n+    FieldList fields = statistics.getSchema().getFields();\n+    assertEquals(\"corpus\", fields.get(0).getName());\n+  }\n+\n+  @Test\n+  public void dryRun2() {\n+    String query = \"SELECT corpus FROM `bigquery-public-data.samples.shakespearex`\";\n+    BigQueryException exception = service.catchExceptionFromDryRun(query);\n+    assertNotNull(exception);\n+    assertEquals(\"Not found: Table\", exception.getMessage().substring(0, 16));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b001eae137df2d528d4c2abc7dbdd4b62a49693", "author": {"user": {"login": "mingen-pan", "name": "Mingen Pan"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/4b001eae137df2d528d4c2abc7dbdd4b62a49693", "committedDate": "2020-07-16T16:27:15Z", "message": "refactor the code based on review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5OTg2NTAx", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#pullrequestreview-449986501", "createdAt": "2020-07-16T15:54:10Z", "commit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo1NDoxMVrOGyxeqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjoyNzo1OFrOGyy3_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MjY0OQ==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455892649", "createdAt": "2020-07-16T15:54:11Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.google.cloud.bigquery.utils.queryfixer.service;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A service to connect with the BigQuery server. It is used to communicate with the server like\n+ * sending queries and receiving data.\n+ * */\n+public class BigQueryService {\n+\n+  private final BigQuery bigquery;\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the customized options.\n+   * @param options customized options\n+   * */\n+  public BigQueryService(BigQueryOptions options) {\n+    this.bigquery = new BigQueryOptions.DefaultBigQueryFactory().create(options);\n+  }\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the default setting. The projectID should be specified.\n+   * @param projectId project ID\n+   * */\n+  public BigQueryService(String projectId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1MjE3OA=="}, "originalCommit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MjY5MA==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455892690", "createdAt": "2020-07-16T15:54:15Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.google.cloud.bigquery.utils.queryfixer.service;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A service to connect with the BigQuery server. It is used to communicate with the server like\n+ * sending queries and receiving data.\n+ * */\n+public class BigQueryService {\n+\n+  private final BigQuery bigquery;\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the customized options.\n+   * @param options customized options\n+   * */\n+  public BigQueryService(BigQueryOptions options) {\n+    this.bigquery = new BigQueryOptions.DefaultBigQueryFactory().create(options);\n+  }\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the default setting. The projectID should be specified.\n+   * @param projectId project ID\n+   * */\n+  public BigQueryService(String projectId) {\n+    BigQueryOptions.Builder builder = BigQueryOptions.newBuilder()\n+        .setProjectId(projectId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1Mjg4NA=="}, "originalCommit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MjgxNQ==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455892815", "createdAt": "2020-07-16T15:54:25Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.google.cloud.bigquery.utils.queryfixer.service;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A service to connect with the BigQuery server. It is used to communicate with the server like\n+ * sending queries and receiving data.\n+ * */\n+public class BigQueryService {\n+\n+  private final BigQuery bigquery;\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the customized options.\n+   * @param options customized options\n+   * */\n+  public BigQueryService(BigQueryOptions options) {\n+    this.bigquery = new BigQueryOptions.DefaultBigQueryFactory().create(options);\n+  }\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the default setting. The projectID should be specified.\n+   * @param projectId project ID\n+   * */\n+  public BigQueryService(String projectId) {\n+    BigQueryOptions.Builder builder = BigQueryOptions.newBuilder()\n+        .setProjectId(projectId);\n+    this.bigquery = builder.build().getService();\n+  }\n+\n+  /**\n+   * Dry run a BigQuery query and return the job instance. If a BigQuery Exception is generated, it will be thrown.\n+   * @param query the dry-run query\n+   * @return the job representing this dry run\n+   * @throws BigQueryException the error from the BigQuery Server.\n+   */\n+  public Job dryRun(String query) throws BigQueryException {\n+    QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).setDryRun(true).build();\n+    return bigquery.create(JobInfo.of(queryConfig));\n+  }\n+\n+  /**\n+   * return the BigQuery Exception if the dry run of a query generated the exception. If the query is correct and no", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1MjkzNg=="}, "originalCommit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5NTI1Nw==", "bodyText": "The error message of dry run is embed in this exception. The auto fixer actually needs the exception rather than the result of dry run.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455895257", "createdAt": "2020-07-16T15:57:48Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.google.cloud.bigquery.utils.queryfixer.service;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A service to connect with the BigQuery server. It is used to communicate with the server like\n+ * sending queries and receiving data.\n+ * */\n+public class BigQueryService {\n+\n+  private final BigQuery bigquery;\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the customized options.\n+   * @param options customized options\n+   * */\n+  public BigQueryService(BigQueryOptions options) {\n+    this.bigquery = new BigQueryOptions.DefaultBigQueryFactory().create(options);\n+  }\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the default setting. The projectID should be specified.\n+   * @param projectId project ID\n+   * */\n+  public BigQueryService(String projectId) {\n+    BigQueryOptions.Builder builder = BigQueryOptions.newBuilder()\n+        .setProjectId(projectId);\n+    this.bigquery = builder.build().getService();\n+  }\n+\n+  /**\n+   * Dry run a BigQuery query and return the job instance. If a BigQuery Exception is generated, it will be thrown.\n+   * @param query the dry-run query\n+   * @return the job representing this dry run\n+   * @throws BigQueryException the error from the BigQuery Server.\n+   */\n+  public Job dryRun(String query) throws BigQueryException {\n+    QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).setDryRun(true).build();\n+    return bigquery.create(JobInfo.of(queryConfig));\n+  }\n+\n+  /**\n+   * return the BigQuery Exception if the dry run of a query generated the exception. If the query is correct and no\n+   * errors exist in the server, null will be returned.\n+   * @param query the dry-run query\n+   * @return the BigQueryException related with this query\n+   */\n+  public BigQueryException catchExceptionFromDryRun(String query) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1MzkwNA=="}, "originalCommit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwNjY1Mw==", "bodyText": "Given the page structure, it can download as many as it can if we use call nextPage. Here to make it simple, I will add an constraint to allow this method to only fetch max 1000 tables. Given a Table only contains name information if not reloaded, so the traffic shouldn't be heavy.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455906653", "createdAt": "2020-07-16T16:14:17Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.google.cloud.bigquery.utils.queryfixer.service;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A service to connect with the BigQuery server. It is used to communicate with the server like\n+ * sending queries and receiving data.\n+ * */\n+public class BigQueryService {\n+\n+  private final BigQuery bigquery;\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the customized options.\n+   * @param options customized options\n+   * */\n+  public BigQueryService(BigQueryOptions options) {\n+    this.bigquery = new BigQueryOptions.DefaultBigQueryFactory().create(options);\n+  }\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the default setting. The projectID should be specified.\n+   * @param projectId project ID\n+   * */\n+  public BigQueryService(String projectId) {\n+    BigQueryOptions.Builder builder = BigQueryOptions.newBuilder()\n+        .setProjectId(projectId);\n+    this.bigquery = builder.build().getService();\n+  }\n+\n+  /**\n+   * Dry run a BigQuery query and return the job instance. If a BigQuery Exception is generated, it will be thrown.\n+   * @param query the dry-run query\n+   * @return the job representing this dry run\n+   * @throws BigQueryException the error from the BigQuery Server.\n+   */\n+  public Job dryRun(String query) throws BigQueryException {\n+    QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).setDryRun(true).build();\n+    return bigquery.create(JobInfo.of(queryConfig));\n+  }\n+\n+  /**\n+   * return the BigQuery Exception if the dry run of a query generated the exception. If the query is correct and no\n+   * errors exist in the server, null will be returned.\n+   * @param query the dry-run query\n+   * @return the BigQueryException related with this query\n+   */\n+  public BigQueryException catchExceptionFromDryRun(String query) {\n+    try {\n+      dryRun(query);\n+    } catch (BigQueryException exception) {\n+      return exception;\n+    }\n+\n+    return null;\n+  }\n+\n+  /**\n+   * Fetch the names of all table from the BigQuery given the project and dataset. If the project and/or dataset do\n+   * not exist or not visible to the provided service account, {@link com.google.cloud.bigquery.BigQueryException} will\n+   * be thrown.\n+   * @param projectId project id\n+   * @param datasetId dataset id\n+   * @return list of table names belonging to the given project and dataset\n+   */\n+  public List<String> listTableNames(String projectId, String datasetId) throws BigQueryException {\n+    DatasetId projectDatasetId = DatasetId.of(projectId, datasetId);\n+    Page<Table> tables = bigquery.listTables(projectDatasetId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1NTE0NA=="}, "originalCommit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwODc4NA==", "bodyText": "This method requires connection with BigQuery server.\nUses can call gcloud auth application-default login and the credential will stored in the default path, which will be read by this method.\nHowever, uses can download a service account credential and put it elsewhere. If this is the case, they need to modify the test cases manually.\nI will put this demonstration in the comment", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455908784", "createdAt": "2020-07-16T16:17:16Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/BigQueryServiceTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobStatistics;\n+import com.google.cloud.bigquery.utils.queryfixer.service.BigQueryService;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsIterableContainingInOrder.contains;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class BigQueryServiceTest {\n+\n+  private BigQueryService service;\n+\n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1NTc2OA=="}, "originalCommit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxMzA5Mw==", "bodyText": "Thanks for providing this.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455913093", "createdAt": "2020-07-16T16:24:09Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/BigQueryServiceTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobStatistics;\n+import com.google.cloud.bigquery.utils.queryfixer.service.BigQueryService;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.collection.IsIterableContainingInOrder.contains;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class BigQueryServiceTest {\n+\n+  private BigQueryService service;\n+\n+  /**\n+   * Please modify this method if your BigQuery credential is not at default path or you would like\n+   * to use other options.\n+   *\n+   * @return a default BigQuery options\n+   */\n+  private BigQueryOptions getOptions() {\n+    String projectId = \"sql-gravity-internship\";\n+    BigQueryOptions.Builder builder = BigQueryOptions.newBuilder().setProjectId(projectId);\n+    return builder.build();\n+  }\n+\n+  @Before\n+  public void getService() {\n+    service = new BigQueryService(getOptions());\n+  }\n+\n+  @Test\n+  public void dryRun1() {\n+    String query =\n+        \"SELECT corpus FROM `bigquery-public-data.samples.shakespeare` GROUP BY corpus limit 1000\";\n+    Job job = service.dryRun(query);\n+    JobStatistics.QueryStatistics statistics = job.getStatistics();\n+    FieldList fields = statistics.getSchema().getFields();\n+    assertEquals(\"corpus\", fields.get(0).getName());\n+  }\n+\n+  @Test\n+  public void dryRun2() {\n+    String query = \"SELECT corpus FROM `bigquery-public-data.samples.shakespearex`\";\n+    BigQueryException exception = service.catchExceptionFromDryRun(query);\n+    assertNotNull(exception);\n+    assertEquals(\"Not found: Table\", exception.getMessage().substring(0, 16));\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1NjE3Mw=="}, "originalCommit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkxNTUxOA==", "bodyText": "I rerun it. It seems auto format will break every 100 char", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r455915518", "createdAt": "2020-07-16T16:27:58Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.google.cloud.bigquery.utils.queryfixer.service;\n+\n+import com.google.api.gax.paging.Page;\n+import com.google.cloud.bigquery.BigQuery;\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.DatasetId;\n+import com.google.cloud.bigquery.Job;\n+import com.google.cloud.bigquery.JobInfo;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+/**\n+ * A service to connect with the BigQuery server. It is used to communicate with the server like\n+ * sending queries and receiving data.\n+ * */\n+public class BigQueryService {\n+\n+  private final BigQuery bigquery;\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the customized options.\n+   * @param options customized options\n+   * */\n+  public BigQueryService(BigQueryOptions options) {\n+    this.bigquery = new BigQueryOptions.DefaultBigQueryFactory().create(options);\n+  }\n+\n+  /**\n+   * Initialize a connection to BigQuery server with the default setting. The projectID should be specified.\n+   * @param projectId project ID\n+   * */\n+  public BigQueryService(String projectId) {\n+    BigQueryOptions.Builder builder = BigQueryOptions.newBuilder()\n+        .setProjectId(projectId);\n+    this.bigquery = builder.build().getService();\n+  }\n+\n+  /**\n+   * Dry run a BigQuery query and return the job instance. If a BigQuery Exception is generated, it will be thrown.\n+   * @param query the dry-run query\n+   * @return the job representing this dry run\n+   * @throws BigQueryException the error from the BigQuery Server.\n+   */\n+  public Job dryRun(String query) throws BigQueryException {\n+    QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(query).setDryRun(true).build();\n+    return bigquery.create(JobInfo.of(queryConfig));\n+  }\n+\n+  /**\n+   * return the BigQuery Exception if the dry run of a query generated the exception. If the query is correct and no\n+   * errors exist in the server, null will be returned.\n+   * @param query the dry-run query\n+   * @return the BigQueryException related with this query\n+   */\n+  public BigQueryException catchExceptionFromDryRun(String query) {\n+    try {\n+      dryRun(query);\n+    } catch (BigQueryException exception) {\n+      return exception;\n+    }\n+\n+    return null;\n+  }\n+\n+  /**\n+   * Fetch the names of all table from the BigQuery given the project and dataset. If the project and/or dataset do", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1NDI5Nw=="}, "originalCommit": {"oid": "a99d4fd7dcaa9f09862abaf20741242986a5af97"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "031c6962bc4ae5e369edea681aa239c67f27d56d", "author": {"user": {"login": "mingen-pan", "name": "Mingen Pan"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/031c6962bc4ae5e369edea681aa239c67f27d56d", "committedDate": "2020-07-17T17:35:08Z", "message": "Merge remote-tracking branch 'upstream/master' into bq_service_add_feature\n\n# Conflicts:\n#\ttools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java\n#\ttools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/BigQueryServiceTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "490879957727af10494879d3cb871a4c446d9f89", "author": {"user": {"login": "mingen-pan", "name": "Mingen Pan"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/490879957727af10494879d3cb871a4c446d9f89", "committedDate": "2020-07-18T01:30:04Z", "message": "mock the BigQuery"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODUwODUy", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#pullrequestreview-451850852", "createdAt": "2020-07-20T18:21:42Z", "commit": {"oid": "490879957727af10494879d3cb871a4c446d9f89"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODoyMTo0M1rOG0Z_kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODoyMTo0M1rOG0Z_kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwNTAwOQ==", "bodyText": "Its recommended to use UPPER_SNAKE_CASE for constant variable names. \"TABLE_FETCH_SIZE\"", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r457605009", "createdAt": "2020-07-20T18:21:43Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java", "diffHunk": "@@ -1,52 +1,69 @@\n package com.google.cloud.bigquery.utils.queryfixer.service;\n \n+import com.google.api.gax.paging.Page;\n import com.google.cloud.bigquery.BigQuery;\n import com.google.cloud.bigquery.BigQueryException;\n import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.DatasetId;\n import com.google.cloud.bigquery.Job;\n import com.google.cloud.bigquery.JobInfo;\n import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.Table;\n+\n+import lombok.NonNull;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n \n /**\n  * A service to connect with the BigQuery server. It is used to communicate with the server like\n  * sending queries and receiving data.\n- * */\n+ */\n public class BigQueryService {\n \n-  private final BigQuery bigquery;\n+  private static final int TableFetchSize = 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490879957727af10494879d3cb871a4c446d9f89"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODUzMTM0", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#pullrequestreview-451853134", "createdAt": "2020-07-20T18:25:11Z", "commit": {"oid": "490879957727af10494879d3cb871a4c446d9f89"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODoyNToxMVrOG0aG2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODoyNToxMVrOG0aG2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwNjg3Mw==", "bodyText": "1000 seems a bit small.. :) Maybe you can adjust this later.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r457606873", "createdAt": "2020-07-20T18:25:11Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java", "diffHunk": "@@ -59,4 +76,29 @@ public BigQueryException catchExceptionFromDryRun(String query) {\n \n     return null;\n   }\n+\n+  /**\n+   * Fetch the names of all table from the BigQuery given the project and dataset. If the project\n+   * and/or dataset do not exist or not visible to the provided service account, {@link\n+   * com.google.cloud.bigquery.BigQueryException} will be thrown.\n+   *\n+   * <p>It is possible that a dataset contains a large amount of tables, so this method will only\n+   * fetch maximum 1000 of them.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490879957727af10494879d3cb871a4c446d9f89"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODU0ODI5", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#pullrequestreview-451854829", "createdAt": "2020-07-20T18:27:37Z", "commit": {"oid": "490879957727af10494879d3cb871a4c446d9f89"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODoyNzozN1rOG0aL_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODoyNzozN1rOG0aL_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwODE5MQ==", "bodyText": "I don't the \"param\" comment make many sense so far(they are mostly self-explanary), as seen from other methods. Later you can just keep the comment of the method but leave out the comments for the params.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r457608191", "createdAt": "2020-07-20T18:27:37Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java", "diffHunk": "@@ -59,4 +76,29 @@ public BigQueryException catchExceptionFromDryRun(String query) {\n \n     return null;\n   }\n+\n+  /**\n+   * Fetch the names of all table from the BigQuery given the project and dataset. If the project\n+   * and/or dataset do not exist or not visible to the provided service account, {@link\n+   * com.google.cloud.bigquery.BigQueryException} will be thrown.\n+   *\n+   * <p>It is possible that a dataset contains a large amount of tables, so this method will only\n+   * fetch maximum 1000 of them.\n+   *\n+   * @param projectId project id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490879957727af10494879d3cb871a4c446d9f89"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODU1NTA4", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#pullrequestreview-451855508", "createdAt": "2020-07-20T18:28:34Z", "commit": {"oid": "490879957727af10494879d3cb871a4c446d9f89"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODoyODozNVrOG0aOEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODoyODozNVrOG0aOEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwODcyMQ==", "bodyText": "what if you set the \"parallel= true\", can you add a comment why you decided to set it to false and when we have to set it to true?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r457608721", "createdAt": "2020-07-20T18:28:35Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/service/BigQueryService.java", "diffHunk": "@@ -59,4 +76,29 @@ public BigQueryException catchExceptionFromDryRun(String query) {\n \n     return null;\n   }\n+\n+  /**\n+   * Fetch the names of all table from the BigQuery given the project and dataset. If the project\n+   * and/or dataset do not exist or not visible to the provided service account, {@link\n+   * com.google.cloud.bigquery.BigQueryException} will be thrown.\n+   *\n+   * <p>It is possible that a dataset contains a large amount of tables, so this method will only\n+   * fetch maximum 1000 of them.\n+   *\n+   * @param projectId project id\n+   * @param datasetId dataset id\n+   * @return list of table names belonging to the given project and dataset\n+   */\n+  public List<String> listTableNames(String projectId, String datasetId) throws BigQueryException {\n+    DatasetId projectDatasetId = DatasetId.of(projectId, datasetId);\n+    Page<Table> tables =\n+        bigQuery.listTables(projectDatasetId, BigQuery.TableListOption.pageSize(TableFetchSize));\n+    return StreamSupport.stream(tables.iterateAll().spliterator(), /* parallel= */ false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490879957727af10494879d3cb871a4c446d9f89"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODU2ODQ2", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#pullrequestreview-451856846", "createdAt": "2020-07-20T18:30:21Z", "commit": {"oid": "490879957727af10494879d3cb871a4c446d9f89"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODozMDoyMVrOG0aSrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODozMDoyMVrOG0aSrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwOTkwMA==", "bodyText": "Since the service is going to be shared, we should init the variable before all tests starts and use mock annotation.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r457609900", "createdAt": "2020-07-20T18:30:21Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/BigQueryServiceTest.java", "diffHunk": "@@ -42,11 +54,85 @@ public void dryRun1() {\n   }\n \n   @Test\n-  public void dryRun2() {\n-    BigQueryService service = getService();\n+  public void dryRun_tableNotFound() {\n     String query = \"SELECT corpus FROM `bigquery-public-data.samples.shakespearex`\";\n     BigQueryException exception = service.catchExceptionFromDryRun(query);\n     assertNotNull(exception);\n     assertEquals(\"Not found: Table\", exception.getMessage().substring(0, 16));\n   }\n+\n+  @Test\n+  public void listTables() {\n+    String project = \"bigquery-public-data\";\n+    String dataset = \"austin_311\";\n+    List<String> tables = service.listTableNames(project, dataset);\n+    assertEquals(2, tables.size());\n+    assertThat(tables, contains(\"311_request\", \"311_service_requests\"));\n+  }\n+\n+  /**\n+   * Mock the connection to the BigQuery server. Use reflection to inject the fake connection into\n+   * the {@link BigQueryService}.\n+   */\n+  private void fakeBigQuery() {\n+    BigQuery bigQuery = mock(BigQuery.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490879957727af10494879d3cb871a4c446d9f89"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxOTY4ODM1", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#pullrequestreview-451968835", "createdAt": "2020-07-20T21:22:13Z", "commit": {"oid": "490879957727af10494879d3cb871a4c446d9f89"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMToyMjoxM1rOG0fvXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMToyMjoxM1rOG0fvXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5OTE2NA==", "bodyText": "Why you need to mock this simple object? you can create a default instance job instance", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r457699164", "createdAt": "2020-07-20T21:22:13Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/BigQueryServiceTest.java", "diffHunk": "@@ -69,4 +69,70 @@ public void listTables() {\n     assertEquals(2, tables.size());\n     assertThat(tables, contains(\"311_request\", \"311_service_requests\"));\n   }\n+\n+  /**\n+   * Mock the connection to the BigQuery server. Use reflection to inject the fake connection into\n+   * the {@link BigQueryService}.\n+   */\n+  private void fakeBigQuery() {\n+    BigQuery bigQuery = mock(BigQuery.class);\n+    correctShakespeare(bigQuery);\n+    incorrectShakespeare(bigQuery);\n+    fakeTables(bigQuery);\n+    try {\n+      FieldUtils.writeField(service, \"bigQuery\", bigQuery, true);\n+    } catch (IllegalAccessException ignored) {\n+    }\n+  }\n+\n+  /**\n+   * Mock the response of dry run if \"SELECT corpus FROM `bigquery-public-data.samples.shakespeare`\n+   * GROUP BY corpus limit 1000\" is given.\n+   */\n+  private void correctShakespeare(BigQuery bigQuery) {\n+    String query =\n+        \"SELECT corpus FROM `bigquery-public-data.samples.shakespeare` GROUP BY corpus limit 1000\";\n+    QueryJobConfiguration queryConfig =\n+        QueryJobConfiguration.newBuilder(query).setDryRun(true).build();\n+\n+    Job job = mock(Job.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490879957727af10494879d3cb871a4c446d9f89"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxOTY5Mzk1", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#pullrequestreview-451969395", "createdAt": "2020-07-20T21:23:07Z", "commit": {"oid": "490879957727af10494879d3cb871a4c446d9f89"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMToyMzowN1rOG0fxSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMToyMzowN1rOG0fxSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY5OTY1Nw==", "bodyText": "Same there, just use a default instance. We usually don't mock out these simple objects.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r457699657", "createdAt": "2020-07-20T21:23:07Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/BigQueryServiceTest.java", "diffHunk": "@@ -69,4 +69,70 @@ public void listTables() {\n     assertEquals(2, tables.size());\n     assertThat(tables, contains(\"311_request\", \"311_service_requests\"));\n   }\n+\n+  /**\n+   * Mock the connection to the BigQuery server. Use reflection to inject the fake connection into\n+   * the {@link BigQueryService}.\n+   */\n+  private void fakeBigQuery() {\n+    BigQuery bigQuery = mock(BigQuery.class);\n+    correctShakespeare(bigQuery);\n+    incorrectShakespeare(bigQuery);\n+    fakeTables(bigQuery);\n+    try {\n+      FieldUtils.writeField(service, \"bigQuery\", bigQuery, true);\n+    } catch (IllegalAccessException ignored) {\n+    }\n+  }\n+\n+  /**\n+   * Mock the response of dry run if \"SELECT corpus FROM `bigquery-public-data.samples.shakespeare`\n+   * GROUP BY corpus limit 1000\" is given.\n+   */\n+  private void correctShakespeare(BigQuery bigQuery) {\n+    String query =\n+        \"SELECT corpus FROM `bigquery-public-data.samples.shakespeare` GROUP BY corpus limit 1000\";\n+    QueryJobConfiguration queryConfig =\n+        QueryJobConfiguration.newBuilder(query).setDryRun(true).build();\n+\n+    Job job = mock(Job.class);\n+    JobStatistics.QueryStatistics queryStatistics = mock(JobStatistics.QueryStatistics.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "490879957727af10494879d3cb871a4c446d9f89"}, "originalPosition": 94}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "654c74fd69d1a606f20be9c841ebb46dece72119", "author": {"user": {"login": "mingen-pan", "name": "Mingen Pan"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/654c74fd69d1a606f20be9c841ebb46dece72119", "committedDate": "2020-07-21T01:29:59Z", "message": "reformat the mock test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMDIwNDc4", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#pullrequestreview-453020478", "createdAt": "2020-07-22T06:11:53Z", "commit": {"oid": "654c74fd69d1a606f20be9c841ebb46dece72119"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjoxMTo1M1rOG1UF4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjoxMTo1M1rOG1UF4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU1Njg5OQ==", "bodyText": "nit: /* blahcomment = true*/", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#discussion_r458556899", "createdAt": "2020-07-22T06:11:53Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/test/java/com/google/cloud/bigquery/utils/queryfixer/BigQueryServiceTest.java", "diffHunk": "@@ -30,109 +31,105 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.mockito.Mockito.any;\n-import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n public class BigQueryServiceTest {\n \n   private BigQueryService service;\n \n+  private static final String FIELD = \"corpus\";\n+  private static final String TABLE_NOT_FOUND =\n+      \"Not found: Table bigquery-public-data:samples.shakespearex was not found in location US\";\n+  private static final String TABLE_1 = \"311_request\";\n+  private static final String TABLE_2 = \"311_service_requests\";\n+\n+  @Mock\n+  BigQuery bigQueryMock;\n+  @Mock\n+  Job jobMock;\n+  @Mock\n+  JobStatistics.QueryStatistics queryStatisticsMock;\n+  @Mock\n+  Page<Table> tablePageMock;\n+  @Mock\n+  Table tableMock1;\n+  @Mock\n+  Table tableMock2;\n+\n   @Before\n-  public void getService() {\n+  public void setup() {\n+    MockitoAnnotations.initMocks(this);\n     service = new BigQueryService(\"\");\n-    fakeBigQuery();\n+    injectBigQueryMockIntoService();\n   }\n \n   @Test\n   public void dryRun_success() {\n+    setupBigQueryMock_returnSchema();\n     String query =\n         \"SELECT corpus FROM `bigquery-public-data.samples.shakespeare` GROUP BY corpus limit 1000\";\n     Job job = service.dryRun(query);\n     JobStatistics.QueryStatistics statistics = job.getStatistics();\n     FieldList fields = statistics.getSchema().getFields();\n-    assertEquals(\"corpus\", fields.get(0).getName());\n+    assertEquals(FIELD, fields.get(0).getName());\n   }\n \n   @Test\n   public void dryRun_tableNotFound() {\n+    setupBigQueryMock_throwException();\n     String query = \"SELECT corpus FROM `bigquery-public-data.samples.shakespearex`\";\n     BigQueryException exception = service.catchExceptionFromDryRun(query);\n     assertNotNull(exception);\n-    assertEquals(\"Not found: Table\", exception.getMessage().substring(0, 16));\n+    assertEquals(TABLE_NOT_FOUND, exception.getMessage());\n   }\n \n   @Test\n   public void listTables() {\n+    setupBigQueryMock_returnTablePageMock();\n     String project = \"bigquery-public-data\";\n     String dataset = \"austin_311\";\n     List<String> tables = service.listTableNames(project, dataset);\n     assertEquals(2, tables.size());\n-    assertThat(tables, contains(\"311_request\", \"311_service_requests\"));\n+    assertThat(tables, contains(TABLE_1, TABLE_2));\n   }\n \n   /**\n    * Mock the connection to the BigQuery server. Use reflection to inject the fake connection into\n    * the {@link BigQueryService}.\n    */\n-  private void fakeBigQuery() {\n-    BigQuery bigQuery = mock(BigQuery.class);\n-    correctShakespeare(bigQuery);\n-    incorrectShakespeare(bigQuery);\n-    fakeTables(bigQuery);\n+  private void injectBigQueryMockIntoService() {\n     try {\n-      FieldUtils.writeField(service, \"bigQuery\", bigQuery, true);\n+      FieldUtils.writeField(service, \"bigQuery\", bigQueryMock, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "654c74fd69d1a606f20be9c841ebb46dece72119"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMDIwOTMx", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/100#pullrequestreview-453020931", "createdAt": "2020-07-22T06:12:58Z", "commit": {"oid": "654c74fd69d1a606f20be9c841ebb46dece72119"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f23169db92b4c407ec564934e8f267bdc9887d5e", "author": {"user": {"login": "mingen-pan", "name": "Mingen Pan"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/f23169db92b4c407ec564934e8f267bdc9887d5e", "committedDate": "2020-07-23T01:09:38Z", "message": "auto format + add comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a81b3c5b01cd1bfbf0cb74ae45fa49a195b621e", "author": {"user": {"login": "mingen-pan", "name": "Mingen Pan"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/9a81b3c5b01cd1bfbf0cb74ae45fa49a195b621e", "committedDate": "2020-07-23T01:11:35Z", "message": "auto format + add comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62ec60c1c335717143c03bb943e7ab9d793e6aed", "author": {"user": {"login": "mingen-pan", "name": "Mingen Pan"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/62ec60c1c335717143c03bb943e7ab9d793e6aed", "committedDate": "2020-07-23T01:14:05Z", "message": "Merge branch 'master' into bq_service_add_feature"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 657, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}