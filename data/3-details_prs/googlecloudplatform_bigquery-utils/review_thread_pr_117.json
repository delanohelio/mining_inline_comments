{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NTM3NzQz", "number": 117, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzoyMDozMlrOESe7MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzoyMjo0NlrOESe-jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODE2NDk2OnYy", "diffSide": "RIGHT", "path": "tools/vscode_sql_extraction/.gitignore", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzoyMDozMlrOG3sF5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODozNTo1MlrOG3utjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NzI3MQ==", "bodyText": "Are all those files under the .vscode directory needed to build the plugin?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/117#discussion_r461047271", "createdAt": "2020-07-27T17:20:32Z", "author": {"login": "feiling"}, "path": "tools/vscode_sql_extraction/.gitignore", "diffHunk": "@@ -3,3 +3,4 @@ node_modules\n .vscode-test/\n *.vsix\n /resources/sql_extraction\n+!/.vscode/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e86f2c0e207a2dbff9d70f4f82270e964f55c3e3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5MDE4OA==", "bodyText": "I believe so. The samples on GitHub all have those 4 files.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/117#discussion_r461090188", "createdAt": "2020-07-27T18:35:52Z", "author": {"login": "creativitRy"}, "path": "tools/vscode_sql_extraction/.gitignore", "diffHunk": "@@ -3,3 +3,4 @@ node_modules\n .vscode-test/\n *.vsix\n /resources/sql_extraction\n+!/.vscode/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NzI3MQ=="}, "originalCommit": {"oid": "e86f2c0e207a2dbff9d70f4f82270e964f55c3e3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODE3MzU3OnYy", "diffSide": "RIGHT", "path": "tools/vscode_sql_extraction/src/highlighter.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzoyMjo0NlrOG3sLQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODozNzo0MFrOG3uxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0ODY0MQ==", "bodyText": "In another pull request, please change getColor() to use the highlight color of the current theme. Add a TODO comment here.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/117#discussion_r461048641", "createdAt": "2020-07-27T17:22:46Z", "author": {"login": "feiling"}, "path": "tools/vscode_sql_extraction/src/highlighter.ts", "diffHunk": "@@ -0,0 +1,100 @@\n+import * as path from 'path';\n+import * as vscode from 'vscode';\n+import {Query, locationToRange} from './query';\n+import randomColor from 'randomcolor';\n+\n+/**\n+ * Highlights found queries in the text editor.\n+ */\n+export class Highlighter {\n+  decorations: vscode.TextEditorDecorationType[] = [];\n+\n+  /**\n+   * Highlights all queries in the open document.\n+   *\n+   * @param openEditor currently open editor.\n+   * @param workspaceRoot root path of the open workspace.\n+   * @param queries list of found queries.\n+   */\n+  highlight(\n+    openEditor: vscode.TextEditor,\n+    workspaceRoot: string,\n+    queries: Query[]\n+  ) {\n+    const currentQueries = this.getAllQueriesInCurrentFile(\n+      openEditor,\n+      workspaceRoot,\n+      queries\n+    );\n+    if (currentQueries.length <= 0) {\n+      return;\n+    }\n+\n+    currentQueries.forEach((query, index) => {\n+      const ranges: vscode.Range[] = [];\n+\n+      const workRemaining = [query.query];\n+      while (workRemaining.length > 0) {\n+        const fragment = workRemaining.pop()!;\n+        if (fragment.literal) {\n+          ranges.push(locationToRange(fragment.location));\n+        } else {\n+          // recurse for child fragments\n+          fragment.complex!.forEach(child => {\n+            workRemaining.push(child);\n+          });\n+        }\n+      }\n+\n+      query.usages.forEach(usage => {\n+        ranges.push(locationToRange(usage));\n+      });\n+\n+      openEditor.setDecorations(this.getColor(index), ranges);\n+    });\n+  }\n+\n+  /**\n+   * Gets all queries located in the currently open file.\n+   *\n+   * @param openEditor currently open editor.\n+   * @param workspaceRoot root path of the open workspace.\n+   * @param queries list of found queries.\n+   */\n+  private getAllQueriesInCurrentFile(\n+    openEditor: vscode.TextEditor,\n+    workspaceRoot: string,\n+    queries: Query[]\n+  ) {\n+    let openPath = openEditor.document.uri.path.toString();\n+    if (!path.isAbsolute(openPath)) {\n+      openPath = path.join(workspaceRoot, openPath);\n+    }\n+\n+    return queries.filter(query => {\n+      let filePath = query.file;\n+      if (!path.isAbsolute(filePath)) {\n+        filePath = path.join(workspaceRoot!, query.file);\n+      }\n+      return filePath === openPath;\n+    });\n+  }\n+\n+  /**\n+   * Updates the cache if needed, and then returns the relevant decoration.\n+   *\n+   * @param index decoration number to return.\n+   */\n+  private getColor(index: number): vscode.TextEditorDecorationType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e86f2c0e207a2dbff9d70f4f82270e964f55c3e3"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5MTEyNw==", "bodyText": "Good idea! Currently, I'm highlighting each query using a different color, but I can just have a few theme colors and cycle between them.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/117#discussion_r461091127", "createdAt": "2020-07-27T18:37:40Z", "author": {"login": "creativitRy"}, "path": "tools/vscode_sql_extraction/src/highlighter.ts", "diffHunk": "@@ -0,0 +1,100 @@\n+import * as path from 'path';\n+import * as vscode from 'vscode';\n+import {Query, locationToRange} from './query';\n+import randomColor from 'randomcolor';\n+\n+/**\n+ * Highlights found queries in the text editor.\n+ */\n+export class Highlighter {\n+  decorations: vscode.TextEditorDecorationType[] = [];\n+\n+  /**\n+   * Highlights all queries in the open document.\n+   *\n+   * @param openEditor currently open editor.\n+   * @param workspaceRoot root path of the open workspace.\n+   * @param queries list of found queries.\n+   */\n+  highlight(\n+    openEditor: vscode.TextEditor,\n+    workspaceRoot: string,\n+    queries: Query[]\n+  ) {\n+    const currentQueries = this.getAllQueriesInCurrentFile(\n+      openEditor,\n+      workspaceRoot,\n+      queries\n+    );\n+    if (currentQueries.length <= 0) {\n+      return;\n+    }\n+\n+    currentQueries.forEach((query, index) => {\n+      const ranges: vscode.Range[] = [];\n+\n+      const workRemaining = [query.query];\n+      while (workRemaining.length > 0) {\n+        const fragment = workRemaining.pop()!;\n+        if (fragment.literal) {\n+          ranges.push(locationToRange(fragment.location));\n+        } else {\n+          // recurse for child fragments\n+          fragment.complex!.forEach(child => {\n+            workRemaining.push(child);\n+          });\n+        }\n+      }\n+\n+      query.usages.forEach(usage => {\n+        ranges.push(locationToRange(usage));\n+      });\n+\n+      openEditor.setDecorations(this.getColor(index), ranges);\n+    });\n+  }\n+\n+  /**\n+   * Gets all queries located in the currently open file.\n+   *\n+   * @param openEditor currently open editor.\n+   * @param workspaceRoot root path of the open workspace.\n+   * @param queries list of found queries.\n+   */\n+  private getAllQueriesInCurrentFile(\n+    openEditor: vscode.TextEditor,\n+    workspaceRoot: string,\n+    queries: Query[]\n+  ) {\n+    let openPath = openEditor.document.uri.path.toString();\n+    if (!path.isAbsolute(openPath)) {\n+      openPath = path.join(workspaceRoot, openPath);\n+    }\n+\n+    return queries.filter(query => {\n+      let filePath = query.file;\n+      if (!path.isAbsolute(filePath)) {\n+        filePath = path.join(workspaceRoot!, query.file);\n+      }\n+      return filePath === openPath;\n+    });\n+  }\n+\n+  /**\n+   * Updates the cache if needed, and then returns the relevant decoration.\n+   *\n+   * @param index decoration number to return.\n+   */\n+  private getColor(index: number): vscode.TextEditorDecorationType {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0ODY0MQ=="}, "originalCommit": {"oid": "e86f2c0e207a2dbff9d70f4f82270e964f55c3e3"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3059, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}