{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyODU4NTM0", "number": 80, "title": "Template generation\u2014Initial PR", "bodyText": "Initial Commits\nThis is the Template-Based Query Generation team's first PR. We've added keyword handler classes to parse user config files, create initial mappings between a user-friendly language and PostgreSQL/BigQuery, and constructed the Markov Chain class we'll be using to generate the random queries. We've also written initial tests for these classes.\nUpcoming Revisions/Known Issues\nThe parsers read from .txt files, which we intend to change in the next PR to a more structured file type, such as .json or .xaml.\nThe UtilsTest class doesn't have unit tests for functions that write to files. Are there any standard ways of unit testing write functions without actually creating new files?\nThe parsers use relative file paths to read from the user_config and dialect_config files. This was discussed with Bonan, who confirmed this approach is okay, but if there are better ways to achieve this let us know!\nCurrently QueryGenerator parses from the config files; we intend to change this such that QueryGenerator uses an instance of the KeyWord class to get the set of user-specified keywords instead, separating parsing and query generation between the classes.\nThe current keyword sets and mappings aren't exhaustive; we plan to complete these in the coming weeks.\nNext Commits\nWe'll focus on the revisions mentioned above, as well as create Skeleton classes for formatting generated queries.", "createdAt": "2020-07-01T18:04:39Z", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80", "merged": true, "mergeCommit": {"oid": "9384c3d7cdb9e0cec56534d28c29edab7edc735b"}, "closed": true, "closedAt": "2020-07-13T20:02:29Z", "author": {"login": "spoiledhua"}, "timelineItems": {"totalCount": 61, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrn0EoAH2gAyNDQyODU4NTM0OmU3MDllMzU3YWQxMmNiOTE0M2JmMDk0ZDJiNmJkYjI4MTBmNjdmN2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc0nDl_AH2gAyNDQyODU4NTM0OjEzYTY2NDkyODQzOWYyYzFiMTExNzY0Mjg4YjU0MjRkNjMwNzJjOWQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e709e357ad12cb9143bf094d2b6bdb2810f67f7b", "author": {"user": null}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/e709e357ad12cb9143bf094d2b6bdb2810f67f7b", "committedDate": "2020-06-15T21:48:00Z", "message": "added .gitignore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "716104019609169be4b02864ca8333581f55940f", "author": {"user": null}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/716104019609169be4b02864ca8333581f55940f", "committedDate": "2020-06-15T21:50:30Z", "message": "added rough markov chain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87f3234afcb3b4b5dca19f9d50cc1ba31b77b4e6", "author": {"user": null}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/87f3234afcb3b4b5dca19f9d50cc1ba31b77b4e6", "committedDate": "2020-06-16T20:15:59Z", "message": "improved style in MarkovChain, Node, and Test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f849e082bf2ba65ad198000d0ccd6243a92f455", "author": {"user": null}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/1f849e082bf2ba65ad198000d0ccd6243a92f455", "committedDate": "2020-06-22T17:23:31Z", "message": "added some tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b80f4548d0735de2a3677bab154e550cedda753f", "author": {"user": {"login": "spoiledhua", "name": "Victor Hua"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/b80f4548d0735de2a3677bab154e550cedda753f", "committedDate": "2020-06-24T17:49:10Z", "message": "initial Utils class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f039630c973653fd3da7ade1f38fdd5ed8a3e46", "author": {"user": null}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/9f039630c973653fd3da7ade1f38fdd5ed8a3e46", "committedDate": "2020-06-24T20:25:46Z", "message": "restructured project"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d51981ecd07b483b66c8ed7b11b0e5d7ec26749", "author": {"user": null}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/0d51981ecd07b483b66c8ed7b11b0e5d7ec26749", "committedDate": "2020-06-24T20:26:09Z", "message": "Merge branch 'template-generation' of https://github.com/AllenWang314/bigquery-utils into template-generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72035d3abbd5d006ec0dc3f86c01241c5b7672c1", "author": {"user": null}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/72035d3abbd5d006ec0dc3f86c01241c5b7672c1", "committedDate": "2020-06-24T20:28:07Z", "message": "merged with branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d89bdf64f9da1a509c40389527861626273f31fb", "author": {"user": null}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/d89bdf64f9da1a509c40389527861626273f31fb", "committedDate": "2020-06-24T21:37:30Z", "message": "restructured project"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae059ffe16652108005f8866215baaed29e7e6df", "author": {"user": {"login": "spoiledhua", "name": "Victor Hua"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/ae059ffe16652108005f8866215baaed29e7e6df", "committedDate": "2020-06-25T19:25:04Z", "message": "refactored Utils with Guava, added Utils tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "919ae1913d927461276d2a4d4a8aebdbdd8360ba", "author": {"user": {"login": "spoiledhua", "name": "Victor Hua"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/919ae1913d927461276d2a4d4a8aebdbdd8360ba", "committedDate": "2020-06-26T21:10:58Z", "message": "added Keywords interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b284b717813ead3776d12bf8df56ccb90a4f5c9", "author": {"user": {"login": "spoiledhua", "name": "Victor Hua"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/6b284b717813ead3776d12bf8df56ccb90a4f5c9", "committedDate": "2020-06-26T21:13:25Z", "message": "Added initial DML keywords"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6310308df6145625e67ac2cdb712317c2b7102bc", "author": {"user": {"login": "spoiledhua", "name": "Victor Hua"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/6310308df6145625e67ac2cdb712317c2b7102bc", "committedDate": "2020-06-26T21:14:31Z", "message": "Added DML Keywords class and test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f73334122547d093d07a50fa8342735585b5ff2", "author": {"user": null}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/0f73334122547d093d07a50fa8342735585b5ff2", "committedDate": "2020-06-26T21:37:41Z", "message": "added Query, QueryGenerator, and QueryType, set up structure for config files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6327f64647656533cc532ccb0b0aaabd29e371ba", "author": {"user": null}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/6327f64647656533cc532ccb0b0aaabd29e371ba", "committedDate": "2020-06-26T21:39:44Z", "message": "merged"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e59174aa1d578c149c4db0dfce33af2bb7768e2", "author": {"user": null}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/9e59174aa1d578c149c4db0dfce33af2bb7768e2", "committedDate": "2020-06-30T02:27:01Z", "message": "finished adding unit tests to NodeTest and MarkovChainTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8b89d15040e072810e43d27b8d9423847fdb286", "author": {"user": null}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/c8b89d15040e072810e43d27b8d9423847fdb286", "committedDate": "2020-06-30T17:20:53Z", "message": "changed config files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2acac0c3bd5b5d61189d424d1befdedff3a7edce", "author": {"user": null}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/2acac0c3bd5b5d61189d424d1befdedff3a7edce", "committedDate": "2020-06-30T22:11:44Z", "message": "finished QueryGenerator and added rudimentary corresponding test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "943cd57697563e87f03239fc5be8240dc2be3483", "author": {"user": {"login": "spoiledhua", "name": "Victor Hua"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/943cd57697563e87f03239fc5be8240dc2be3483", "committedDate": "2020-07-01T00:19:13Z", "message": "defined keyword set interface and classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59cc5097057b9293d4659cb18f7667f5d719bc1c", "author": {"user": {"login": "spoiledhua", "name": "Victor Hua"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/59cc5097057b9293d4659cb18f7667f5d719bc1c", "committedDate": "2020-07-01T00:21:02Z", "message": "initial keyword mapping configs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45aff938a2a2086c6b5b867e95a5f29485296464", "author": {"user": {"login": "spoiledhua", "name": "Victor Hua"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/45aff938a2a2086c6b5b867e95a5f29485296464", "committedDate": "2020-07-01T00:22:06Z", "message": "modified immutable set and map function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31b42237ffab1f5a0f5ab04872436138088c25aa", "author": {"user": {"login": "spoiledhua", "name": "Victor Hua"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/31b42237ffab1f5a0f5ab04872436138088c25aa", "committedDate": "2020-07-01T04:55:28Z", "message": "corrected DQL mapping file, deleted old test file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "341cd2f1ede7b8335e8acc06d99f20db289fd99a", "author": {"user": {"login": "spoiledhua", "name": "Victor Hua"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/341cd2f1ede7b8335e8acc06d99f20db289fd99a", "committedDate": "2020-07-01T04:57:02Z", "message": "initial keywords mapping interface and classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cef2a4415652fa1eae8ee2f365bc5f75b1b54c45", "author": {"user": {"login": "spoiledhua", "name": "Victor Hua"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/cef2a4415652fa1eae8ee2f365bc5f75b1b54c45", "committedDate": "2020-07-01T04:58:21Z", "message": "added unit tests for Utils, Keywords, KeywordsMapping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b", "author": {"user": {"login": "spoiledhua", "name": "Victor Hua"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/a28bf9bd409b1569b8a716abf4602786db40ab2b", "committedDate": "2020-07-01T06:01:53Z", "message": "fixed relative file path typos"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MzA1MTU3", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#pullrequestreview-444305157", "createdAt": "2020-07-07T22:57:47Z", "commit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b"}, "state": "COMMENTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjo1Nzo0OFrOGuSbZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjoyNDo0MFrOGuV04w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4OTYwNg==", "bodyText": "Can we have a more meaningful name for the groupId?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451189606", "createdAt": "2020-07-07T22:57:48Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/pom.xml", "diffHunk": "@@ -0,0 +1,101 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <java.version>1.8</java.version>\n+        <maven.compiler.version>3.6.0</maven.compiler.version>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <groupId>org.example</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4OTcwOQ==", "bodyText": "Please delete the unused code.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451189709", "createdAt": "2020-07-07T22:58:07Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/pom.xml", "diffHunk": "@@ -0,0 +1,101 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <properties>\n+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+        <java.version>1.8</java.version>\n+        <maven.compiler.version>3.6.0</maven.compiler.version>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <groupId>org.example</groupId>\n+    <artifactId>template_based_query_generation</artifactId>\n+    <version>1.0-SNAPSHOT</version>\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter</artifactId>\n+            <version>5.4.2</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-api</artifactId>\n+            <version>5.4.2</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.google.collections</groupId>\n+            <artifactId>google-collections</artifactId>\n+            <version>1.0</version>\n+        </dependency>\n+        <!-- https://mvnrepository.com/artifact/com.opensymphony/xwork-core -->\n+        <dependency>\n+            <groupId>com.opensymphony</groupId>\n+            <artifactId>xwork-core</artifactId>\n+            <version>2.1.5</version>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>${maven.compiler.version}</version>\n+                <configuration>\n+                    <encoding>UTF-8</encoding>\n+                    <source>${java.version}</source>\n+                    <target>${java.version}</target>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <version>2.22.2</version>\n+            </plugin>\n+            <!--            <plugin>-->\n+            <!--                <groupId>org.codehaus.mojo</groupId>-->\n+            <!--                <artifactId>build-helper-maven-plugin</artifactId>-->\n+            <!--                <version>3.0.0</version>-->\n+            <!--                <executions>-->\n+            <!--                    <execution>-->\n+            <!--                        <id>sample-execution</id>-->\n+            <!--                        <phase>generate-sources</phase>-->\n+            <!--                        <goals>-->\n+            <!--                            <goal>add-source</goal>-->\n+            <!--                        </goals>-->\n+            <!--                        <configuration>-->\n+            <!--                            <sources>-->\n+            <!--                                <source>source-path-goes-here</source>-->\n+            <!--                            </sources>-->\n+            <!--                        </configuration>-->\n+            <!--                    </execution>-->\n+            <!--                </executions>-->\n+            <!--            </plugin>-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4OTgwNQ==", "bodyText": "I ve noticed that we have inherited 3 classes for ddl, dml & dql with identical code. Do we expect more difference with the keyword class for ddl, dml & dql? If the only difference is the file location, can we use this Keywords class to cover the 3 cases? For example, we can introduce the file_path as a class parameter.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451189805", "createdAt": "2020-07-07T22:58:25Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/main/java/Keywords.java", "diffHunk": "@@ -0,0 +1,23 @@\n+import com.google.common.collect.ImmutableSet;\n+\n+/**\n+ * Keywords set interface that all keyword set classes implement\n+ */\n+\n+public interface Keywords {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE5MjY4Mg==", "bodyText": "Similar to keywords class. Here we also have 3 different classes for DML, DDL & DQL with identical code. Do we expect more difference with the code for 3 classes? If not, we could consider use this KeywordMapping directly.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451192682", "createdAt": "2020-07-07T23:07:44Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/main/java/KeywordsMapping.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/**\n+ * Keywords mapping interface that all keyword mapping classes implement\n+ */\n+\n+public interface KeywordsMapping {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxMDM5Mw==", "bodyText": "Do we always expect a seed number from user input? (for example, from config?) If not, we need another constructor do not have this field.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451210393", "createdAt": "2020-07-08T00:07:10Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/main/java/MarkovChain.java", "diffHunk": "@@ -0,0 +1,55 @@\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.HashMap;\n+import java.util.Random;\n+\n+/**\n+ * Class that represents src.main.MarkovChain encoding query and keyword dependencies\n+ */\n+public class MarkovChain<E> {\n+    \n+    private HashSet<Node<E>> nodes;\n+    private Random r;\n+\n+    /**\n+     * constructs MarkovChain object from edge weights and random seed\n+     * @param nodes\n+     * @param seed\n+     */\n+    public MarkovChain(HashMap<Node<E>, HashMap<Node<E>, Double>> nodes, int seed) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxMTk3OA==", "bodyText": "As this variable is only used one, we can probably directly use this.neighbors.keySet() in the for loop?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451211978", "createdAt": "2020-07-08T00:13:24Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/main/java/Node.java", "diffHunk": "@@ -0,0 +1,124 @@\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.ArrayList;\n+import java.util.Random;\n+\n+/**\n+ * class representing node for a query in the markov chain\n+ */\n+public class Node<E> {\n+\n+    private E obj;\n+    private HashMap<Node<E>, Double> neighbors;\n+    private ArrayList<Node<E>> neighborList; // list of neighbors and corresponding cumulative probabilities\n+    private ArrayList<Double> cProbabilities; // cumulative probabilities\n+    private Random r;\n+\n+    /**\n+     * constructs node from query\n+     * @param obj\n+     */\n+    public Node(E obj, int seed) {\n+        this.obj = obj;\n+        this.r = new Random(seed);\n+        this.setNeighbors(new HashMap<Node<E>, Double>());\n+    }\n+\n+    /**\n+     * updates neighborList and cProbabilities when neighbors is changed\n+     */\n+    private void updateProbabilities() {\n+        if (this.neighbors.size() != 0) {\n+            Set<Node<E>> neighborSet = this.neighbors.keySet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNDYyMQ==", "bodyText": "We should avoid storing duplicated information in two object.\nLooks like we only loop through the list of neighbor, and do not need to get the probability of a provided neighbor node. If that is the case, we could use an array of pair instead of hashmap.\nAlso, we may only need to store the cumulative probability instead of the individual probability with the current implementation.\nAnother possible approach is to use a TreeMap with ceilingEntry. So that in this Tree map we use cumulative probabilities as a key, and choose a node with ceilingEntry function. The time complexity of ceilingEntry is o(logn), which is the same as your binary search approach, so both approaches are good for our use case.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451224621", "createdAt": "2020-07-08T01:03:15Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/main/java/Node.java", "diffHunk": "@@ -0,0 +1,124 @@\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.ArrayList;\n+import java.util.Random;\n+\n+/**\n+ * class representing node for a query in the markov chain\n+ */\n+public class Node<E> {\n+\n+    private E obj;\n+    private HashMap<Node<E>, Double> neighbors;\n+    private ArrayList<Node<E>> neighborList; // list of neighbors and corresponding cumulative probabilities\n+    private ArrayList<Double> cProbabilities; // cumulative probabilities", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIyNjM2NQ==", "bodyText": "Looks like this r is never used?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451226365", "createdAt": "2020-07-08T01:10:11Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/main/java/MarkovChain.java", "diffHunk": "@@ -0,0 +1,55 @@\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.HashMap;\n+import java.util.Random;\n+\n+/**\n+ * Class that represents src.main.MarkovChain encoding query and keyword dependencies\n+ */\n+public class MarkovChain<E> {\n+    \n+    private HashSet<Node<E>> nodes;\n+    private Random r;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzMzY5MQ==", "bodyText": "Please consider de-duplicate those lines. Probably consider making helper function with callback.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451233691", "createdAt": "2020-07-08T01:39:18Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/main/java/QueryGenerator.java", "diffHunk": "@@ -0,0 +1,142 @@\n+import com.opensymphony.xwork2.util.ClassLoaderUtil;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.ArrayList;\n+\n+\n+/**\n+ * Class that parses config file and creates queries from markov chain\n+ */\n+public class QueryGenerator {\n+\n+    private MarkovChain<Query> mcGenerator;\n+    private Node<Query> queryRoot;\n+\n+    /**\n+     *\n+     * @param dialectConfigPaths\n+     * @param userConfigPaths\n+     * @param mainUserConfig\n+     * @throws Exception\n+     */\n+    public QueryGenerator(String[] dialectConfigPaths, String[] userConfigPaths, String mainUserConfig) throws Exception {\n+        // read in lines from userConfigPaths, ignoring lines that begin with ' ' or '/'\n+        // stores active queries in activatedQueries\n+        HashSet<String> activatedQueries = new HashSet<String>();\n+        String line;\n+        for (String path: userConfigPaths) {\n+            InputStream inputStream = ClassLoaderUtil.getResourceAsStream(path, QueryGenerator.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzNDY0NQ==", "bodyText": "break here after we find the root.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451234645", "createdAt": "2020-07-08T01:42:52Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/main/java/QueryGenerator.java", "diffHunk": "@@ -0,0 +1,142 @@\n+import com.opensymphony.xwork2.util.ClassLoaderUtil;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.ArrayList;\n+\n+\n+/**\n+ * Class that parses config file and creates queries from markov chain\n+ */\n+public class QueryGenerator {\n+\n+    private MarkovChain<Query> mcGenerator;\n+    private Node<Query> queryRoot;\n+\n+    /**\n+     *\n+     * @param dialectConfigPaths\n+     * @param userConfigPaths\n+     * @param mainUserConfig\n+     * @throws Exception\n+     */\n+    public QueryGenerator(String[] dialectConfigPaths, String[] userConfigPaths, String mainUserConfig) throws Exception {\n+        // read in lines from userConfigPaths, ignoring lines that begin with ' ' or '/'\n+        // stores active queries in activatedQueries\n+        HashSet<String> activatedQueries = new HashSet<String>();\n+        String line;\n+        for (String path: userConfigPaths) {\n+            InputStream inputStream = ClassLoaderUtil.getResourceAsStream(path, QueryGenerator.class);\n+            InputStreamReader streamReader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n+            BufferedReader br = new BufferedReader(streamReader);\n+            while ((line = br.readLine()) != null) {\n+                if (line.length() > 2 && line.charAt(0) != ' '\n+                        && !(line.charAt(0) == '/' && line.charAt(1) == '/')) {\n+                    String[] res = line.split(\":\");\n+                    if (res[1].charAt(0) == '1') {\n+                        activatedQueries.add(res[0]);\n+                    }\n+                }\n+            }\n+            br.close();\n+        }\n+\n+        // read in lines from dialectConfigPaths, ignoring lines that begin with ' ' or '/'\n+        // stores directed edges in dependencies\n+        HashMap<String, HashSet<String>> dependencies = new HashMap<String, HashSet<String>>();\n+        for (String path: dialectConfigPaths) {\n+            InputStream inputStream = ClassLoaderUtil.getResourceAsStream(path, QueryGenerator.class);\n+            InputStreamReader streamReader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n+            BufferedReader br = new BufferedReader(streamReader);\n+            while ((line = br.readLine()) != null) {\n+                if (line.length() > 2 && line.charAt(0) != ' '\n+                        && !(line.charAt(0) == '/' && line.charAt(1) == '/')) {\n+                    String[] res = line.split(\":\");\n+                    if (!dependencies.keySet().contains(res[0]) && activatedQueries.contains(res[0])) {\n+                        dependencies.put(res[0], new HashSet<String>());\n+                    }\n+                    if (!dependencies.keySet().contains(res[1]) && activatedQueries.contains(res[1])) {\n+                        dependencies.put(res[1], new HashSet<String>());\n+                    }\n+                    if (activatedQueries.contains(res[0]) && activatedQueries.contains(res[1])) {\n+                        dependencies.get(res[0]).add(res[1]);\n+                    }\n+                }\n+            }\n+            br.close();\n+        }\n+\n+        // create a Node object for each query\n+        HashMap<String, Node<Query>> nodes = new HashMap<String, Node<Query>>();\n+        for (String query: activatedQueries) {\n+            nodes.put(query, new Node(new Query(QueryType.valueOf(query)),0));\n+        }\n+\n+        // for each query, correctly set neighbors and set root\n+        for (String query: activatedQueries) {\n+            HashSet<Node<Query>> neighbors = new HashSet<Node<Query>>();\n+            for (String s2: dependencies.get(query)) {\n+                neighbors.add(nodes.get(s2));\n+            }\n+            nodes.get(query).setNeighbors(neighbors);\n+        }\n+\n+        // parse lines from mainUserConfig, ignoring lines that begin with ' ' or '/'\n+        InputStream inputStream = ClassLoaderUtil.getResourceAsStream(mainUserConfig, QueryGenerator.class);\n+        InputStreamReader streamReader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n+        BufferedReader br = new BufferedReader(streamReader);\n+        while ((line = br.readLine()) != null) {\n+            if (line.length() > 2 && line.charAt(0) != ' '\n+                    && !(line.charAt(0) == '/' && line.charAt(1) == '/')) {\n+                String[] res = line.split(\":\");\n+                if(res[0].equals(\"root\")) {\n+                    this.queryRoot = nodes.get(res[1]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzOTU5NA==", "bodyText": "DML/DQL/DDL does not seem to be in the equivalent type as DDL_CREATE/DDL_PARTITION/... Consider splitting?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451239594", "createdAt": "2020-07-08T02:02:04Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/main/java/QueryType.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/**\n+ * Types of queries in SQL language encoding\n+ */\n+public enum QueryType {\n+    QUERY_ROOT,\n+    DML,\n+    DQL,\n+    DDL,\n+    SINK,\n+    DDL_CREATE,\n+    DDL_PARTITION,\n+    DDL_CLUSTER,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0MTMzNA==", "bodyText": "consider use CHARSET.charAt(random.nextInt(0,52)) ?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451241334", "createdAt": "2020-07-08T02:08:52Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/main/java/Utils.java", "diffHunk": "@@ -0,0 +1,185 @@\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Utilities class that provides random and IO helper functions.\n+ */\n+public class Utils {\n+\n+\tprivate static final ThreadLocalRandom random = ThreadLocalRandom.current();\n+\n+\tprivate static final int lowerBound = 0;\n+\n+\tprivate static final String CHARSET = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_\";\n+\n+\t/**\n+\t * Returns a random integer between a lowerBound and an upperBound, inclusive\n+\t *\n+\t * @param upperBound a non-negative integer upper bound on the generated random integer, inclusive\n+\t * @return a random integer between lowerBound and upperBound, inclusive\n+\t * @throws IllegalArgumentException if upperBound is negative\n+\t */\n+\tpublic static int getRandomInteger(int upperBound) throws IllegalArgumentException {\n+\t\tif (upperBound < 0) {\n+\t\t\tthrow new IllegalArgumentException(\"Upper bound cannot be negative\");\n+\t\t}\n+\n+\t\treturn random.nextInt(lowerBound, upperBound + 1);\n+\t}\n+\n+\t/**\n+\t * Returns a random string with a specified length that matches the regex '[a-zA-Z_]'\n+\t *\n+\t * @param length a nonzero integer specifying the desired length of the generated string\n+\t * @return a random string that matches the regex '[a-zA-Z_]' and has the specified length\n+\t */\n+\tpublic static String getRandomString(int length) throws IllegalArgumentException {\n+\t\tif (length <= 0) {\n+\t\t\tthrow new IllegalArgumentException(\"Random string must have positive length\");\n+\t\t}\n+\n+\t\tStringBuilder sb = new StringBuilder();\n+\n+\t\tfor (int i = 0; i < length; i++) {\n+\t\t\tint randomIndex = (int) (random.nextDouble() * CHARSET.length());\n+\t\t\tchar randomChar = CHARSET.charAt(randomIndex);\n+\t\t\tif (i == 0 && Character.isDigit(randomChar)) {\n+\t\t\t\t// SQL identifiers can't start with digits, so replace with an arbitrary character\n+\t\t\t\trandomChar = 'a';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0MTUyNw==", "bodyText": "CHARSET.charAt(random.nextInt(0,63))", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451241527", "createdAt": "2020-07-08T02:09:41Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/main/java/Utils.java", "diffHunk": "@@ -0,0 +1,185 @@\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Utilities class that provides random and IO helper functions.\n+ */\n+public class Utils {\n+\n+\tprivate static final ThreadLocalRandom random = ThreadLocalRandom.current();\n+\n+\tprivate static final int lowerBound = 0;\n+\n+\tprivate static final String CHARSET = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_\";\n+\n+\t/**\n+\t * Returns a random integer between a lowerBound and an upperBound, inclusive\n+\t *\n+\t * @param upperBound a non-negative integer upper bound on the generated random integer, inclusive\n+\t * @return a random integer between lowerBound and upperBound, inclusive\n+\t * @throws IllegalArgumentException if upperBound is negative\n+\t */\n+\tpublic static int getRandomInteger(int upperBound) throws IllegalArgumentException {\n+\t\tif (upperBound < 0) {\n+\t\t\tthrow new IllegalArgumentException(\"Upper bound cannot be negative\");\n+\t\t}\n+\n+\t\treturn random.nextInt(lowerBound, upperBound + 1);\n+\t}\n+\n+\t/**\n+\t * Returns a random string with a specified length that matches the regex '[a-zA-Z_]'\n+\t *\n+\t * @param length a nonzero integer specifying the desired length of the generated string\n+\t * @return a random string that matches the regex '[a-zA-Z_]' and has the specified length\n+\t */\n+\tpublic static String getRandomString(int length) throws IllegalArgumentException {\n+\t\tif (length <= 0) {\n+\t\t\tthrow new IllegalArgumentException(\"Random string must have positive length\");\n+\t\t}\n+\n+\t\tStringBuilder sb = new StringBuilder();\n+\n+\t\tfor (int i = 0; i < length; i++) {\n+\t\t\tint randomIndex = (int) (random.nextDouble() * CHARSET.length());\n+\t\t\tchar randomChar = CHARSET.charAt(randomIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0Mzg0OA==", "bodyText": "Please add tests for this method and remove unused code.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451243848", "createdAt": "2020-07-08T02:18:55Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/test/java/UtilsTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class UtilsTest {\n+\n+\t@Test\n+\tpublic void test_getRandomInteger() {\n+\t\tint randomInt1 = Utils.getRandomInteger(10);\n+\t\tassertTrue(randomInt1 > 0);\n+\t\tassertTrue(randomInt1 <= 10);\n+\t\tassertEquals(0, Utils.getRandomInteger(0));\n+\t\tassertThrows(IllegalArgumentException.class, () -> {\n+\t\t\tUtils.getRandomInteger(-1);\n+\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void test_getRandomString() {\n+\t\tString randomString1 = Utils.getRandomString(10);\n+\t\tassertEquals(10, randomString1.length());\n+\t\tassertFalse(randomString1.contains(\"!\"));\n+\t\tassertFalse(Character.isDigit(randomString1.charAt(0)));\n+\t\tassertThrows(IllegalArgumentException.class, () -> {\n+\t\t\tUtils.getRandomString(0);\n+\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void test_writeDirectory() {\n+\t\tassertEquals(1, 1);\n+\t\t/*\n+\t\tList<String> bq_skeletons = new ArrayList<>();\n+\t\tbq_skeletons.add(\"BQ Skeletons!\");\n+\t\tList<String> bq_tokenized = new ArrayList<>();\n+\t\tbq_tokenized.add(\"BQ Tokens!\");\n+\t\tList<String> postgre_skeletons = new ArrayList<>();\n+\t\tpostgre_skeletons.add(\"PostgreSQL Skeletons!\");\n+\t\tList<String> postgre_tokenized = new ArrayList<>();\n+\t\tpostgre_tokenized.add(\"PostgreSQL Tokens!\");\n+\t\tMap<String, ImmutableList<String>> outputs = new HashMap<>();\n+\t\toutputs.put(\"BQ_skeletons\", ImmutableList.copyOf(bq_skeletons));\n+\t\toutputs.put(\"BQ_tokenized\", ImmutableList.copyOf(bq_tokenized));\n+\t\toutputs.put(\"Postgre_skeletons\", ImmutableList.copyOf(postgre_skeletons));\n+\t\toutputs.put(\"Postgre_tokenized\", ImmutableList.copyOf(postgre_tokenized));\n+\t\ttry {\n+\t\t\tUtils.writeDirectory(ImmutableMap.copyOf(outputs));\n+\t\t} catch (IOException exception) {\n+\t\t\tSystem.out.println(exception);\n+\t\t}\n+\t\t */\n+\t}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0NDAwMA==", "bodyText": "Please use assert instead of print in test. Also, consider use test data in case real data is too long.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451244000", "createdAt": "2020-07-08T02:19:33Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/test/java/QueryGeneratorTest.java", "diffHunk": "@@ -0,0 +1,27 @@\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class QueryGeneratorTest {\n+\n+    @Test\n+    public void test_generateQueries_1() throws Exception {\n+        String[] dialectConfigPaths = new String[] {\"dialect_config/ddl_dependencies.txt\",\n+                \"dialect_config/dml_dependencies.txt\",\n+                \"dialect_config/dql_dependencies.txt\",\n+                \"dialect_config/root_dependencies.txt\"};\n+        String[] userConfigPaths = new String[] {\"user_config/ddl.txt\",\n+                \"user_config/dml.txt\",\n+                \"user_config/dql.txt\",\n+                \"user_config/root.txt\"};\n+        String mainUserConfig = \"user_config/config.txt\";\n+        QueryGenerator qg = new QueryGenerator(dialectConfigPaths, userConfigPaths, mainUserConfig);\n+        ArrayList<ArrayList<Query>> queries = qg.generateQueries(50);\n+        for (ArrayList<Query> query: queries) {\n+            System.out.println(query);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0NDgxNA==", "bodyText": "Consider to use getCumulativeProbabilities instead of getCProbabilities to make it more readable.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451244814", "createdAt": "2020-07-08T02:22:43Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/main/java/Node.java", "diffHunk": "@@ -0,0 +1,124 @@\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.ArrayList;\n+import java.util.Random;\n+\n+/**\n+ * class representing node for a query in the markov chain\n+ */\n+public class Node<E> {\n+\n+    private E obj;\n+    private HashMap<Node<E>, Double> neighbors;\n+    private ArrayList<Node<E>> neighborList; // list of neighbors and corresponding cumulative probabilities\n+    private ArrayList<Double> cProbabilities; // cumulative probabilities\n+    private Random r;\n+\n+    /**\n+     * constructs node from query\n+     * @param obj\n+     */\n+    public Node(E obj, int seed) {\n+        this.obj = obj;\n+        this.r = new Random(seed);\n+        this.setNeighbors(new HashMap<Node<E>, Double>());\n+    }\n+\n+    /**\n+     * updates neighborList and cProbabilities when neighbors is changed\n+     */\n+    private void updateProbabilities() {\n+        if (this.neighbors.size() != 0) {\n+            Set<Node<E>> neighborSet = this.neighbors.keySet();\n+            double total = 0;\n+            ArrayList<Node<E>> newNeighborList = new ArrayList<Node<E>>();\n+            ArrayList<Double> newCProbabilities = new ArrayList<Double>();\n+            for (Node<E> n: neighborSet) {\n+                newNeighborList.add(n);\n+                newCProbabilities.add(total);\n+                total += this.neighbors.get(n);\n+            }\n+            this.neighborList = newNeighborList;\n+            this.cProbabilities = newCProbabilities;\n+        } else {\n+            this.neighborList = new ArrayList<Node<E>>();\n+            this.cProbabilities = new ArrayList<Double>();\n+        }\n+    }\n+\n+    /**\n+     * \n+     * @return if node is sink\n+     */\n+    public boolean hasNextNode() {\n+        return (neighbors.size() > 0);\n+    }\n+\n+    /**\n+     * \n+     * @return next random node from current node, returns null if node is sink\n+     */\n+    public Node nextNode() {\n+        if (this.neighborList.size() == 0) {\n+            return null;\n+        }\n+        double randDouble = this.r.nextDouble();\n+\n+        // find largest index such that cProbabilities is less than randDouble\n+        int low = 0, high = this.neighborList.size();\n+        while (high - low > 1) {\n+            int mid = (low + high) / 2;\n+            if (this.cProbabilities.get(mid) > randDouble) {\n+                high = mid;\n+            } else {\n+                low = mid;\n+            }\n+        }\n+        return this.neighborList.get(low);\n+    }\n+\n+    public String toString() {\n+        return this.obj.toString();\n+    }\n+\n+    public E getObj() {\n+        return this.obj;\n+    }\n+\n+    public void setObj(String query) {\n+        this.obj = obj;\n+    }\n+\n+    public HashMap<Node<E>, Double> getNeighbors() {\n+        return this.neighbors;\n+    }\n+\n+    public void setNeighbors(HashMap<Node<E>, Double> neighbors) {\n+        this.neighbors = neighbors;\n+        this.updateProbabilities();\n+    }\n+\n+    /**\n+     * sets neighbors with \n+     * @param neighbors\n+     */\n+    public void setNeighbors(HashSet<Node<E>> neighbors) {\n+        HashMap<Node<E>, Double> edges = new HashMap<Node<E>, Double>();\n+        double c = (neighbors.size() == 0) ? 0 : 1.0/neighbors.size();\n+        for (Node<E> n: neighbors) {\n+            edges.put(n, c);\n+        }\n+        this.neighbors = edges;\n+        this.updateProbabilities();\n+    }\n+\n+    public ArrayList<Node<E>> getNeighborList() {\n+        return neighborList;\n+    }\n+\n+    public ArrayList<Double> getCProbabilities() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0NTI4Mw==", "bodyText": "Consider have assignment for each todo? For example \"TODO(spoiledhua):...\"", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451245283", "createdAt": "2020-07-08T02:24:40Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/main/java/Utils.java", "diffHunk": "@@ -0,0 +1,185 @@\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Utilities class that provides random and IO helper functions.\n+ */\n+public class Utils {\n+\n+\tprivate static final ThreadLocalRandom random = ThreadLocalRandom.current();\n+\n+\tprivate static final int lowerBound = 0;\n+\n+\tprivate static final String CHARSET = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_\";\n+\n+\t/**\n+\t * Returns a random integer between a lowerBound and an upperBound, inclusive\n+\t *\n+\t * @param upperBound a non-negative integer upper bound on the generated random integer, inclusive\n+\t * @return a random integer between lowerBound and upperBound, inclusive\n+\t * @throws IllegalArgumentException if upperBound is negative\n+\t */\n+\tpublic static int getRandomInteger(int upperBound) throws IllegalArgumentException {\n+\t\tif (upperBound < 0) {\n+\t\t\tthrow new IllegalArgumentException(\"Upper bound cannot be negative\");\n+\t\t}\n+\n+\t\treturn random.nextInt(lowerBound, upperBound + 1);\n+\t}\n+\n+\t/**\n+\t * Returns a random string with a specified length that matches the regex '[a-zA-Z_]'\n+\t *\n+\t * @param length a nonzero integer specifying the desired length of the generated string\n+\t * @return a random string that matches the regex '[a-zA-Z_]' and has the specified length\n+\t */\n+\tpublic static String getRandomString(int length) throws IllegalArgumentException {\n+\t\tif (length <= 0) {\n+\t\t\tthrow new IllegalArgumentException(\"Random string must have positive length\");\n+\t\t}\n+\n+\t\tStringBuilder sb = new StringBuilder();\n+\n+\t\tfor (int i = 0; i < length; i++) {\n+\t\t\tint randomIndex = (int) (random.nextDouble() * CHARSET.length());\n+\t\t\tchar randomChar = CHARSET.charAt(randomIndex);\n+\t\t\tif (i == 0 && Character.isDigit(randomChar)) {\n+\t\t\t\t// SQL identifiers can't start with digits, so replace with an arbitrary character\n+\t\t\t\trandomChar = 'a';\n+\t\t\t}\n+\t\t\tsb.append(randomChar);\n+\t\t}\n+\n+\t\treturn sb.toString();\n+\t}\n+\n+\t/**\n+\t * Writes generated outputs to a specified directory, creating one if it doesn't exist.\n+\t *\n+\t * @param outputs       collection of statements to write\n+\t * @param directoryName relative path of a specified directory\n+\t * @throws IOException if the IO fails or creating the necessary files or folders fails\n+\t */\n+\tpublic static void writeDirectory(ImmutableMap<String, ImmutableList<String>> outputs, String directoryName) throws IOException {\n+\t\tString outputDirectory = getOutputDirectory(directoryName);\n+\t\tFile file = new File(outputDirectory);\n+\n+\t\tif (!file.exists() && !file.mkdir()) {\n+\t\t\tthrow new FileNotFoundException(\"No such directory or the directory could not be created\");\n+\t\t}\n+\n+\t\twriteFile(outputs.get(\"BQ_skeletons\"), outputDirectory + \"/bq_skeleton.txt\");\n+\t\twriteFile(outputs.get(\"BQ_tokenized\"), outputDirectory + \"/bq_tokenized.txt\");\n+\t\twriteFile(outputs.get(\"Postgre_skeletons\"), outputDirectory + \"/postgre_skeleton.txt\");\n+\t\twriteFile(outputs.get(\"Postgre_tokenized\"), outputDirectory + \"/postgre_tokenized.txt\");\n+\t\t// TODO: write sample data to file", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b"}, "originalPosition": 83}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc810e37ceb4709e118dada8d9f161f0b8f062d1", "author": {"user": {"login": "spoiledhua", "name": "Victor Hua"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/bc810e37ceb4709e118dada8d9f161f0b8f062d1", "committedDate": "2020-07-08T18:37:50Z", "message": "deleted unused code, refactored randomization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d72bb0d92386387c3cf965baec965e530e2b112", "author": {"user": {"login": "spoiledhua", "name": "Victor Hua"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/9d72bb0d92386387c3cf965baec965e530e2b112", "committedDate": "2020-07-08T18:38:54Z", "message": "deleted unused code, refactored randomization"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MDcxNjQx", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#pullrequestreview-445071641", "createdAt": "2020-07-08T19:36:26Z", "commit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxOTozNjoyNlrOGu2gpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMToyNzoxMFrOGu50sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc4MDc3Mg==", "bodyText": "I would recommend to break this constructor into a few helper methods.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451780772", "createdAt": "2020-07-08T19:36:26Z", "author": {"login": "bonancao"}, "path": "tools/template_based_query_generation/src/main/java/QueryGenerator.java", "diffHunk": "@@ -0,0 +1,142 @@\n+import com.opensymphony.xwork2.util.ClassLoaderUtil;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.ArrayList;\n+\n+\n+/**\n+ * Class that parses config file and creates queries from markov chain\n+ */\n+public class QueryGenerator {\n+\n+    private MarkovChain<Query> mcGenerator;\n+    private Node<Query> queryRoot;\n+\n+    /**\n+     *\n+     * @param dialectConfigPaths\n+     * @param userConfigPaths\n+     * @param mainUserConfig\n+     * @throws Exception\n+     */\n+    public QueryGenerator(String[] dialectConfigPaths, String[] userConfigPaths, String mainUserConfig) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc4NTEwOA==", "bodyText": "The indentation in the first few files looks weird.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451785108", "createdAt": "2020-07-08T19:45:03Z", "author": {"login": "bonancao"}, "path": "tools/template_based_query_generation/src/main/java/Keywords.java", "diffHunk": "@@ -0,0 +1,23 @@\n+import com.google.common.collect.ImmutableSet;\n+\n+/**\n+ * Keywords set interface that all keyword set classes implement\n+ */\n+\n+public interface Keywords {\n+\n+\t/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc4NjcwNA==", "bodyText": "Please remove this line if not required.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451786704", "createdAt": "2020-07-08T19:48:08Z", "author": {"login": "bonancao"}, "path": "tools/template_based_query_generation/src/main/java/KeywordsMappingDDL.java", "diffHunk": "@@ -0,0 +1,55 @@\n+import com.google.common.collect.ImmutableMap;\n+\n+public class KeywordsMappingDDL implements KeywordsMapping {\n+\n+\tprivate final String fileNamePostgre = \"./src/main/resources/dialect_config/ddl_mapping_postgre.txt\";\n+\n+\tprivate final String fileNameBQ = \"./src/main/resources/dialect_config/ddl_mapping_BQ.txt\";\n+\n+\tprivate final KeywordsDDL keywordsSetDDL = new KeywordsDDL();\n+\n+\tprivate final ImmutableMap<String, String> keywordsMapPostgre;\n+\n+\tprivate final ImmutableMap<String, String> keywordsMapBQ;\n+\n+\t/**\n+\t * Constructor of DDL keywords mapping, parsed from the config file\n+\t */\n+\tpublic KeywordsMappingDDL() {\n+\t\tkeywordsMapPostgre = Utils.makeImmutableMap(fileNamePostgre, keywordsSetDDL);\n+\n+\t\tkeywordsMapBQ = Utils.makeImmutableMap(fileNameBQ, keywordsSetDDL);\n+\n+\t\tSystem.out.println(System.getProperty(\"user.dir\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzNTA1OQ==", "bodyText": "Should we keep a Random instance in each node or all of the nodes should share the same instance?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451835059", "createdAt": "2020-07-08T21:27:10Z", "author": {"login": "bonancao"}, "path": "tools/template_based_query_generation/src/main/java/Node.java", "diffHunk": "@@ -0,0 +1,124 @@\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.ArrayList;\n+import java.util.Random;\n+\n+/**\n+ * class representing node for a query in the markov chain\n+ */\n+public class Node<E> {\n+\n+    private E obj;\n+    private HashMap<Node<E>, Double> neighbors;\n+    private ArrayList<Node<E>> neighborList; // list of neighbors and corresponding cumulative probabilities\n+    private ArrayList<Double> cProbabilities; // cumulative probabilities\n+    private Random r;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cbd93ab51b3b39970cf34be28f1098858061196", "author": {"user": {"login": "spoiledhua", "name": "Victor Hua"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/3cbd93ab51b3b39970cf34be28f1098858061196", "committedDate": "2020-07-08T22:22:19Z", "message": "refactored Keywords and KeywordsMapping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "608046c9b39e98ec1eb3db900aab2edf0ab32b75", "author": {"user": {"login": "spoiledhua", "name": "Victor Hua"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/608046c9b39e98ec1eb3db900aab2edf0ab32b75", "committedDate": "2020-07-08T22:23:23Z", "message": "refactored tests for Keywords and KeywordsMapping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47f067ba8f4837bfe2f5ca6a40d927fa7434f6d0", "author": {"user": {"login": "spoiledhua", "name": "Victor Hua"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/47f067ba8f4837bfe2f5ca6a40d927fa7434f6d0", "committedDate": "2020-07-08T22:28:47Z", "message": "fixed Utils to match Keywords refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MjE1ODEz", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#pullrequestreview-445215813", "createdAt": "2020-07-09T00:35:28Z", "commit": {"oid": "47f067ba8f4837bfe2f5ca6a40d927fa7434f6d0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMDozNToyOFrOGu9trw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMDozNToyOFrOGu9trw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5ODc5OQ==", "bodyText": "Removed unused variable: randomIndex", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451898799", "createdAt": "2020-07-09T00:35:28Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/main/java/Utils.java", "diffHunk": "@@ -50,10 +51,10 @@ public static String getRandomString(int length) throws IllegalArgumentException\n \n \t\tfor (int i = 0; i < length; i++) {\n \t\t\tint randomIndex = (int) (random.nextDouble() * CHARSET.length());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47f067ba8f4837bfe2f5ca6a40d927fa7434f6d0"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MjE2MTYw", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#pullrequestreview-445216160", "createdAt": "2020-07-09T00:36:41Z", "commit": {"oid": "47f067ba8f4837bfe2f5ca6a40d927fa7434f6d0"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMDozNjo0MVrOGu9u3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMDozOToyN1rOGu9xog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5OTEwMw==", "bodyText": "Sorry for asking for change back and forth. I guess it would be better to use CHARSET.charAt(random.nextInt(0, CHARSET.length())) here.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451899103", "createdAt": "2020-07-09T00:36:41Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/main/java/Utils.java", "diffHunk": "@@ -50,10 +51,10 @@ public static String getRandomString(int length) throws IllegalArgumentException\n \n \t\tfor (int i = 0; i < length; i++) {\n \t\t\tint randomIndex = (int) (random.nextDouble() * CHARSET.length());\n-\t\t\tchar randomChar = CHARSET.charAt(randomIndex);\n+\t\t\tchar randomChar = CHARSET.charAt(random.nextInt(0, 63));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47f067ba8f4837bfe2f5ca6a40d927fa7434f6d0"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5OTgxMA==", "bodyText": "If we have a default seed value in config, does that mean if user does not notice that, we will always use the same seed and generate the same output?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r451899810", "createdAt": "2020-07-09T00:39:27Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/main/java/MarkovChain.java", "diffHunk": "@@ -0,0 +1,55 @@\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.HashMap;\n+import java.util.Random;\n+\n+/**\n+ * Class that represents src.main.MarkovChain encoding query and keyword dependencies\n+ */\n+public class MarkovChain<E> {\n+    \n+    private HashSet<Node<E>> nodes;\n+    private Random r;\n+\n+    /**\n+     * constructs MarkovChain object from edge weights and random seed\n+     * @param nodes\n+     * @param seed\n+     */\n+    public MarkovChain(HashMap<Node<E>, HashMap<Node<E>, Double>> nodes, int seed) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIxMDM5Mw=="}, "originalCommit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fc68790872f208ed5bcb32c0174911527d599a1", "author": {"user": {"login": "spoiledhua", "name": "Victor Hua"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/2fc68790872f208ed5bcb32c0174911527d599a1", "committedDate": "2020-07-09T15:31:29Z", "message": "refactored KeywordsTest for less repetition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f59c191b57deaca8e3f447c209b2958c6b8dab2", "author": {"user": {"login": "spoiledhua", "name": "Victor Hua"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/7f59c191b57deaca8e3f447c209b2958c6b8dab2", "committedDate": "2020-07-09T20:28:19Z", "message": "added tests for Utils write functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c9adfb9cbe7db04844f953384354933674dda49", "author": {"user": null}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/8c9adfb9cbe7db04844f953384354933674dda49", "committedDate": "2020-07-10T16:55:56Z", "message": "made changes to MarkovChain and Node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46203ca09921e4df62c76f98cf6e4dd6940665b6", "author": {"user": null}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/46203ca09921e4df62c76f98cf6e4dd6940665b6", "committedDate": "2020-07-10T16:56:03Z", "message": "Merge branch 'template-generation' of https://github.com/AllenWang314/bigquery-utils into template-generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4512cbd838e28dba6b1abe671ea9087681b3fad8", "author": {"user": {"login": "spoiledhua", "name": "Victor Hua"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/4512cbd838e28dba6b1abe671ea9087681b3fad8", "committedDate": "2020-07-10T18:49:30Z", "message": "mockito dependency removed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55fd96636d3e6815d154c861b65f463dacc1ecd5", "author": {"user": null}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/55fd96636d3e6815d154c861b65f463dacc1ecd5", "committedDate": "2020-07-10T20:06:27Z", "message": "fixed tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e175fbc1ab39d3563867f4ae9d888247642d76e4", "author": {"user": null}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/e175fbc1ab39d3563867f4ae9d888247642d76e4", "committedDate": "2020-07-10T20:06:46Z", "message": "Merge branch 'template-generation' of https://github.com/AllenWang314/bigquery-utils into template-generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "083d94eb378131a0901deecc294c4d7978ff92bd", "author": {"user": {"login": "spoiledhua", "name": "Victor Hua"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/083d94eb378131a0901deecc294c4d7978ff92bd", "committedDate": "2020-07-10T20:14:57Z", "message": "refactored user config to json"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2Njc5MDQ0", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#pullrequestreview-446679044", "createdAt": "2020-07-10T20:21:16Z", "commit": {"oid": "e175fbc1ab39d3563867f4ae9d888247642d76e4"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDoyMToxNlrOGwElKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDozMDowMlrOGwEx_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1OTg4MQ==", "bodyText": "We still store duplicated data in this neighbors hashmap and the following cumulativeProbabilities. Even though the storage space is not sensitive in this project, storing same info in different places and also expect those 2 objects storing identical nodes could possible cause more errors in the future when we or someone else edit it. Do we really need to store this neighbor variable? Looks like the probability was only used to calculated the cumulativeProbability. If the probability need to be kept for some other use, can we store it in the cumulativeProbabilities object? For example, use TreeMap<Double, Pair<Node, Double>>", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453059881", "createdAt": "2020-07-10T20:21:16Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/main/java/Node.java", "diffHunk": "@@ -0,0 +1,99 @@\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.TreeMap;\n+import java.util.Random;\n+\n+/**\n+ * class representing node for a query in the markov chain\n+ */\n+public class Node<E> {\n+\n+    private E obj;\n+    private HashMap<Node<E>, Double> neighbors;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e175fbc1ab39d3563867f4ae9d888247642d76e4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2MDU1Ng==", "bodyText": "Please add a todo here.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453060556", "createdAt": "2020-07-10T20:23:05Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/main/java/QueryType.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/**\n+ * Types of queries in SQL language encoding\n+ */\n+public enum QueryType {\n+    QUERY_ROOT,\n+    DML,\n+    DQL,\n+    DDL,\n+    SINK,\n+    DDL_CREATE,\n+    DDL_PARTITION,\n+    DDL_CLUSTER,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzOTU5NA=="}, "originalCommit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2MTI4MA==", "bodyText": "As discussed offline, this file will be changed after we moved to gson. Please add a todo in this file as well as the test file with some short explanation of the proposing change. Thank you!", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453061280", "createdAt": "2020-07-10T20:25:02Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/main/java/QueryGenerator.java", "diffHunk": "@@ -0,0 +1,142 @@\n+import com.opensymphony.xwork2.util.ClassLoaderUtil;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.ArrayList;\n+\n+\n+/**\n+ * Class that parses config file and creates queries from markov chain\n+ */\n+public class QueryGenerator {\n+\n+    private MarkovChain<Query> mcGenerator;\n+    private Node<Query> queryRoot;\n+\n+    /**\n+     *\n+     * @param dialectConfigPaths\n+     * @param userConfigPaths\n+     * @param mainUserConfig\n+     * @throws Exception\n+     */\n+    public QueryGenerator(String[] dialectConfigPaths, String[] userConfigPaths, String mainUserConfig) throws Exception {\n+        // read in lines from userConfigPaths, ignoring lines that begin with ' ' or '/'\n+        // stores active queries in activatedQueries\n+        HashSet<String> activatedQueries = new HashSet<String>();\n+        String line;\n+        for (String path: userConfigPaths) {\n+            InputStream inputStream = ClassLoaderUtil.getResourceAsStream(path, QueryGenerator.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTIzMzY5MQ=="}, "originalCommit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2MzE2Ng==", "bodyText": "With the current implementation I believe it each not will have its own instance as the instance is initialized in the contructor?\nAlso, vote +1 for sharing the same instance. If they do not share the same instance, I guess with the same seed each node will get same list of random numbers.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453063166", "createdAt": "2020-07-10T20:30:02Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/main/java/Node.java", "diffHunk": "@@ -0,0 +1,124 @@\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.ArrayList;\n+import java.util.Random;\n+\n+/**\n+ * class representing node for a query in the markov chain\n+ */\n+public class Node<E> {\n+\n+    private E obj;\n+    private HashMap<Node<E>, Double> neighbors;\n+    private ArrayList<Node<E>> neighborList; // list of neighbors and corresponding cumulative probabilities\n+    private ArrayList<Double> cProbabilities; // cumulative probabilities\n+    private Random r;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzNTA1OQ=="}, "originalCommit": {"oid": "a28bf9bd409b1569b8a716abf4602786db40ab2b"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "820464f6603367b4e651800e7c743358b46f8c82", "author": {"user": {"login": "spoiledhua", "name": "Victor Hua"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/820464f6603367b4e651800e7c743358b46f8c82", "committedDate": "2020-07-11T00:27:59Z", "message": "replaced .txt reader with .json Gson"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90da5dac443270bbc6bf54996d9845244312eb9a", "author": {"user": {"login": "spoiledhua", "name": "Victor Hua"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/90da5dac443270bbc6bf54996d9845244312eb9a", "committedDate": "2020-07-11T00:29:22Z", "message": "refacted QueryGenerator with .json file paths"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33835babc5a545ddf0f7fbbd442e277e56124165", "author": {"user": {"login": "spoiledhua", "name": "Victor Hua"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/33835babc5a545ddf0f7fbbd442e277e56124165", "committedDate": "2020-07-11T00:37:18Z", "message": "added comments for new JSON helper classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "356957072c23dddd47718d162f11fd4179cccc32", "author": {"user": null}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/356957072c23dddd47718d162f11fd4179cccc32", "committedDate": "2020-07-11T01:56:05Z", "message": "made revisions for first PR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "771fbf9116b8bff81ef70f07c3ffa9828033b3bb", "author": {"user": null}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/771fbf9116b8bff81ef70f07c3ffa9828033b3bb", "committedDate": "2020-07-11T01:58:24Z", "message": "merged with Victor's edits"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NDQyMzIz", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#pullrequestreview-447442323", "createdAt": "2020-07-13T17:11:39Z", "commit": {"oid": "771fbf9116b8bff81ef70f07c3ffa9828033b3bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzoxMTozOVrOGwx3Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzoxMTozOVrOGwx3Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwMTgzMQ==", "bodyText": "Please resolve those merging conflicts", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453801831", "createdAt": "2020-07-13T17:11:39Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/main/resources/user_config/dql.json", "diffHunk": "@@ -0,0 +1,49 @@\n+{\n+<<<<<<< HEAD", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "771fbf9116b8bff81ef70f07c3ffa9828033b3bb"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NDQyNjU5", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#pullrequestreview-447442659", "createdAt": "2020-07-13T17:12:07Z", "commit": {"oid": "771fbf9116b8bff81ef70f07c3ffa9828033b3bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzoxMjowN1rOGwx4bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzoxMjowN1rOGwx4bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgwMjA5NQ==", "bodyText": "Please resolve those lined caused by merging conflicts.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453802095", "createdAt": "2020-07-13T17:12:07Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/test/java/QueryGeneratorTest.java", "diffHunk": "@@ -0,0 +1,36 @@\n+import org.junit.jupiter.api.Test;\n+\n+<<<<<<< HEAD", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "771fbf9116b8bff81ef70f07c3ffa9828033b3bb"}, "originalPosition": 3}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd56d5981647c395189b684a9b636e5b6080b487", "author": {"user": null}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/dd56d5981647c395189b684a9b636e5b6080b487", "committedDate": "2020-07-13T18:17:08Z", "message": "fixed merge conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a89b003680d9fd5bf8013cb87fc944fa49a19da1", "author": {"user": {"login": "spoiledhua", "name": "Victor Hua"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/a89b003680d9fd5bf8013cb87fc944fa49a19da1", "committedDate": "2020-07-13T19:29:11Z", "message": "fixed indentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f2c698b51c8a3a36016fa6bd1e7cb2ba58e9735", "author": {"user": {"login": "spoiledhua", "name": "Victor Hua"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/1f2c698b51c8a3a36016fa6bd1e7cb2ba58e9735", "committedDate": "2020-07-13T19:29:20Z", "message": "Merge branch 'template-generation' of https://github.com/AllenWang314/bigquery-utils into template-generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23edcc679481219b40d4bf4d408079af60b389ed", "author": {"user": null}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/23edcc679481219b40d4bf4d408079af60b389ed", "committedDate": "2020-07-13T19:32:56Z", "message": "fixed spacing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7ec890435329dd0fd152ca78339c6efe7028c61", "author": {"user": null}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/f7ec890435329dd0fd152ca78339c6efe7028c61", "committedDate": "2020-07-13T19:33:14Z", "message": "Merge branch 'template-generation' of https://github.com/AllenWang314/bigquery-utils into template-generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fe1e6166ab121d617128e1a2caf54676dd8cd98", "author": {"user": {"login": "spoiledhua", "name": "Victor Hua"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/1fe1e6166ab121d617128e1a2caf54676dd8cd98", "committedDate": "2020-07-13T19:41:36Z", "message": "added TODOs for .json conversion"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NTUwMDc0", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#pullrequestreview-447550074", "createdAt": "2020-07-13T19:47:13Z", "commit": {"oid": "1fe1e6166ab121d617128e1a2caf54676dd8cd98"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOTo0NzoxM1rOGw3TtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOTo0NzoxM1rOGw3TtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg5MDk5Ng==", "bodyText": "Please delete the weird character", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/80#discussion_r453890996", "createdAt": "2020-07-13T19:47:13Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/main/java/MarkovChain.java", "diffHunk": "@@ -0,0 +1,50 @@\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.HashMap;\n+import java.util.Random;\n+\n+/**\n+ * Class that represents src.main.MarkovChain encoding query and keyword dependencies\n+ */\n+public class MarkovChain<E> {\n+\n+\tprivate HashSet<Node<E>> nodes;\n+\n+\t/**\u00e5", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fe1e6166ab121d617128e1a2caf54676dd8cd98"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87a25f852923ef4dfd86b503102ca0f37e631561", "author": {"user": null}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/87a25f852923ef4dfd86b503102ca0f37e631561", "committedDate": "2020-07-13T19:57:31Z", "message": "fixed typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba9768d7ae9426b4d469a20ba134c1837980ed97", "author": {"user": null}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/ba9768d7ae9426b4d469a20ba134c1837980ed97", "committedDate": "2020-07-13T19:58:25Z", "message": "fixed typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5568b93422d8a435633b5da0e9e2d67093d94b0f", "author": {"user": null}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/5568b93422d8a435633b5da0e9e2d67093d94b0f", "committedDate": "2020-07-13T19:59:54Z", "message": "fixed merge conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13a664928439f2c1b111764288b5424d63072c9d", "author": {"user": {"login": "AllenWang314", "name": "Allen Wang"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/13a664928439f2c1b111764288b5424d63072c9d", "committedDate": "2020-07-13T20:00:22Z", "message": "Merge branch 'master' into template-generation"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 604, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}