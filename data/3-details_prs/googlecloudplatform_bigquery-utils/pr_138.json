{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNjk0NzY1", "number": 138, "title": "SQL Classifier: Added SQL classification", "bodyText": "This PR adds binary JAR files, which are the dialect parsers for Calcite. These should be REMOVED once these are published.", "createdAt": "2020-08-05T23:25:07Z", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/138", "merged": true, "mergeCommit": {"oid": "23fdb09e5708f81d2e0e930f1b4ca08e16da148c"}, "closed": true, "closedAt": "2020-08-10T18:09:15Z", "author": {"login": "noah-kuo"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8DqIGAH2gAyNDYzNjk0NzY1OjBhMTdlNGE4MzRmNTRiOTE0MDM1NWYxYmU1ZTFlMzI4MGJhNDJlZWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9mPlwgH2gAyNDYzNjk0NzY1OmJjMjdkNGMyZWVmZGRiN2Q0YmIzYTEwYzZlZTY4M2I0ZTM4YmI0MDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0a17e4a834f54b9140355f1be5e1e3280ba42eef", "author": {"user": {"login": "noah-kuo", "name": "Noah Kuo"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/0a17e4a834f54b9140355f1be5e1e3280ba42eef", "committedDate": "2020-08-05T23:17:16Z", "message": "Added pom and parser classifier files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f289def6268887bfe7582a0debcd5140a189f91d", "author": {"user": {"login": "noah-kuo", "name": "Noah Kuo"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/f289def6268887bfe7582a0debcd5140a189f91d", "committedDate": "2020-08-05T23:17:28Z", "message": "Added test files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69a2e43317c6066d2c7c29731bffeab9ec2f3155", "author": {"user": {"login": "noah-kuo", "name": "Noah Kuo"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/69a2e43317c6066d2c7c29731bffeab9ec2f3155", "committedDate": "2020-08-05T23:19:12Z", "message": "Added dialect parser jars"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8523b45c397cf1120c9bf380ebeb532c9836f40e", "author": {"user": {"login": "noah-kuo", "name": "Noah Kuo"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/8523b45c397cf1120c9bf380ebeb532c9836f40e", "committedDate": "2020-08-05T23:23:24Z", "message": "Updated README"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNjc4MjM2", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/138#pullrequestreview-462678236", "createdAt": "2020-08-06T16:25:47Z", "commit": {"oid": "8523b45c397cf1120c9bf380ebeb532c9836f40e"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNjoyNTo0N1rOG86-_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNjozMzoxMVrOG87PiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUzNDE0Mw==", "bodyText": "Why it's called like this? Should be Classifier or something similar?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/138#discussion_r466534143", "createdAt": "2020-08-06T16:25:47Z", "author": {"login": "yzhvictor"}, "path": "tools/unsupervised_dataset/sql_classifier/parserc/src/main/java/Parserc.java", "diffHunk": "@@ -0,0 +1,156 @@\n+import com.opencsv.*;\n+import org.apache.calcite.sql.parser.SqlParseException;\n+import org.apache.calcite.sql.parser.SqlParser;\n+\n+import org.apache.calcite.sql.parser.dialect1.Dialect1ParserImpl;\n+import org.apache.calcite.sql.parser.bigquery.BigQueryParserImpl;\n+import org.apache.calcite.sql.parser.defaultdialect.DefaultDialectParserImpl;\n+import org.apache.calcite.sql.parser.postgresql.PostgreSQLParserImpl;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.Date;\n+\n+public class Parserc {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8523b45c397cf1120c9bf380ebeb532c9836f40e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUzNjc2NQ==", "bodyText": "Instead of adding it one by one, is it possible to do it in a loop to add all dialects Calcite has. Therefore, when Calcite has new dialect, it will be automatically included?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/138#discussion_r466536765", "createdAt": "2020-08-06T16:30:17Z", "author": {"login": "yzhvictor"}, "path": "tools/unsupervised_dataset/sql_classifier/parserc/src/main/java/Parserc.java", "diffHunk": "@@ -0,0 +1,156 @@\n+import com.opencsv.*;\n+import org.apache.calcite.sql.parser.SqlParseException;\n+import org.apache.calcite.sql.parser.SqlParser;\n+\n+import org.apache.calcite.sql.parser.dialect1.Dialect1ParserImpl;\n+import org.apache.calcite.sql.parser.bigquery.BigQueryParserImpl;\n+import org.apache.calcite.sql.parser.defaultdialect.DefaultDialectParserImpl;\n+import org.apache.calcite.sql.parser.postgresql.PostgreSQLParserImpl;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.Date;\n+\n+public class Parserc {\n+    /*\n+     * Runs the classification tool. Takes a CSV file of queries, classifies queries based on dialect, and creates\n+     * several subdirectories to store the queries by dialect.\n+     *\n+     * @param args Command line arguments\n+     */\n+    public static void main(String[] args) {\n+        if (args.length == 0) {\n+            System.out.println(\"Please provide a CSV file.\");\n+            return;\n+        }\n+        List<String[]> allData = readCSV(args[0]);\n+        if (allData == null) {\n+            return;\n+        }\n+        SqlParser.Config[] parserConfigs = new SqlParser.Config[4];\n+        parserConfigs[0] = SqlParser.configBuilder().setParserFactory(DefaultDialectParserImpl.FACTORY).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8523b45c397cf1120c9bf380ebeb532c9836f40e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUzNzI5Ng==", "bodyText": "consider using logger instead of system.out.print", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/138#discussion_r466537296", "createdAt": "2020-08-06T16:31:12Z", "author": {"login": "yzhvictor"}, "path": "tools/unsupervised_dataset/sql_classifier/parserc/src/main/java/Parserc.java", "diffHunk": "@@ -0,0 +1,156 @@\n+import com.opencsv.*;\n+import org.apache.calcite.sql.parser.SqlParseException;\n+import org.apache.calcite.sql.parser.SqlParser;\n+\n+import org.apache.calcite.sql.parser.dialect1.Dialect1ParserImpl;\n+import org.apache.calcite.sql.parser.bigquery.BigQueryParserImpl;\n+import org.apache.calcite.sql.parser.defaultdialect.DefaultDialectParserImpl;\n+import org.apache.calcite.sql.parser.postgresql.PostgreSQLParserImpl;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.Date;\n+\n+public class Parserc {\n+    /*\n+     * Runs the classification tool. Takes a CSV file of queries, classifies queries based on dialect, and creates\n+     * several subdirectories to store the queries by dialect.\n+     *\n+     * @param args Command line arguments\n+     */\n+    public static void main(String[] args) {\n+        if (args.length == 0) {\n+            System.out.println(\"Please provide a CSV file.\");\n+            return;\n+        }\n+        List<String[]> allData = readCSV(args[0]);\n+        if (allData == null) {\n+            return;\n+        }\n+        SqlParser.Config[] parserConfigs = new SqlParser.Config[4];\n+        parserConfigs[0] = SqlParser.configBuilder().setParserFactory(DefaultDialectParserImpl.FACTORY).build();\n+        parserConfigs[1] = SqlParser.configBuilder().setParserFactory(Dialect1ParserImpl.FACTORY).build();\n+        parserConfigs[2] = SqlParser.configBuilder().setParserFactory(BigQueryParserImpl.FACTORY).build();\n+        parserConfigs[3] = SqlParser.configBuilder().setParserFactory(PostgreSQLParserImpl.FACTORY).build();\n+\n+        CSVWriter[] writers = setupOutput();\n+\n+        for (String[] data : allData) {\n+            boolean[] results = classifyQuery(cleanQuery(data[0]), parserConfigs);\n+            boolean unclassified = true;\n+            String[] nextLine = {data[0], data[1]};\n+            for (int i = 0; i < results.length; i++) {\n+                if (results[i]) {\n+                    unclassified = false;\n+                    writers[i].writeNext(nextLine);\n+                }\n+            }\n+            if (unclassified) {\n+                writers[writers.length-1].writeNext(nextLine);\n+            }\n+        }\n+        try {\n+            for (CSVWriter writer : writers) {\n+                writer.close();\n+            }\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+\n+    }\n+\n+    /*\n+     * Reads a CSV file and returns the data as a list of String arrays.\n+     *\n+     * @param filename Path to a CSV file\n+     * @return Contents of the CSV file\n+     */\n+    static List<String[]> readCSV(String filename) {\n+        try {\n+            FileReader filereader = new FileReader(filename);\n+            CSVReader csvReader = new CSVReaderBuilder(filereader).withSkipLines(1).build();\n+            return csvReader.readAll();\n+        }\n+        catch (Exception e) {\n+            System.out.println(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8523b45c397cf1120c9bf380ebeb532c9836f40e"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUzNzk3MQ==", "bodyText": "null may cause issues if other parts didn't handle correctly, consider using Optional<List<String[]>> as return type.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/138#discussion_r466537971", "createdAt": "2020-08-06T16:32:26Z", "author": {"login": "yzhvictor"}, "path": "tools/unsupervised_dataset/sql_classifier/parserc/src/main/java/Parserc.java", "diffHunk": "@@ -0,0 +1,156 @@\n+import com.opencsv.*;\n+import org.apache.calcite.sql.parser.SqlParseException;\n+import org.apache.calcite.sql.parser.SqlParser;\n+\n+import org.apache.calcite.sql.parser.dialect1.Dialect1ParserImpl;\n+import org.apache.calcite.sql.parser.bigquery.BigQueryParserImpl;\n+import org.apache.calcite.sql.parser.defaultdialect.DefaultDialectParserImpl;\n+import org.apache.calcite.sql.parser.postgresql.PostgreSQLParserImpl;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.Date;\n+\n+public class Parserc {\n+    /*\n+     * Runs the classification tool. Takes a CSV file of queries, classifies queries based on dialect, and creates\n+     * several subdirectories to store the queries by dialect.\n+     *\n+     * @param args Command line arguments\n+     */\n+    public static void main(String[] args) {\n+        if (args.length == 0) {\n+            System.out.println(\"Please provide a CSV file.\");\n+            return;\n+        }\n+        List<String[]> allData = readCSV(args[0]);\n+        if (allData == null) {\n+            return;\n+        }\n+        SqlParser.Config[] parserConfigs = new SqlParser.Config[4];\n+        parserConfigs[0] = SqlParser.configBuilder().setParserFactory(DefaultDialectParserImpl.FACTORY).build();\n+        parserConfigs[1] = SqlParser.configBuilder().setParserFactory(Dialect1ParserImpl.FACTORY).build();\n+        parserConfigs[2] = SqlParser.configBuilder().setParserFactory(BigQueryParserImpl.FACTORY).build();\n+        parserConfigs[3] = SqlParser.configBuilder().setParserFactory(PostgreSQLParserImpl.FACTORY).build();\n+\n+        CSVWriter[] writers = setupOutput();\n+\n+        for (String[] data : allData) {\n+            boolean[] results = classifyQuery(cleanQuery(data[0]), parserConfigs);\n+            boolean unclassified = true;\n+            String[] nextLine = {data[0], data[1]};\n+            for (int i = 0; i < results.length; i++) {\n+                if (results[i]) {\n+                    unclassified = false;\n+                    writers[i].writeNext(nextLine);\n+                }\n+            }\n+            if (unclassified) {\n+                writers[writers.length-1].writeNext(nextLine);\n+            }\n+        }\n+        try {\n+            for (CSVWriter writer : writers) {\n+                writer.close();\n+            }\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+\n+    }\n+\n+    /*\n+     * Reads a CSV file and returns the data as a list of String arrays.\n+     *\n+     * @param filename Path to a CSV file\n+     * @return Contents of the CSV file\n+     */\n+    static List<String[]> readCSV(String filename) {\n+        try {\n+            FileReader filereader = new FileReader(filename);\n+            CSVReader csvReader = new CSVReaderBuilder(filereader).withSkipLines(1).build();\n+            return csvReader.readAll();\n+        }\n+        catch (Exception e) {\n+            System.out.println(e);\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8523b45c397cf1120c9bf380ebeb532c9836f40e"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUzODM3Ng==", "bodyText": "will a map be more explicit? key can be dialect, value is true or false?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/138#discussion_r466538376", "createdAt": "2020-08-06T16:33:11Z", "author": {"login": "yzhvictor"}, "path": "tools/unsupervised_dataset/sql_classifier/parserc/src/main/java/Parserc.java", "diffHunk": "@@ -0,0 +1,156 @@\n+import com.opencsv.*;\n+import org.apache.calcite.sql.parser.SqlParseException;\n+import org.apache.calcite.sql.parser.SqlParser;\n+\n+import org.apache.calcite.sql.parser.dialect1.Dialect1ParserImpl;\n+import org.apache.calcite.sql.parser.bigquery.BigQueryParserImpl;\n+import org.apache.calcite.sql.parser.defaultdialect.DefaultDialectParserImpl;\n+import org.apache.calcite.sql.parser.postgresql.PostgreSQLParserImpl;\n+\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.text.SimpleDateFormat;\n+import java.util.List;\n+import java.util.Date;\n+\n+public class Parserc {\n+    /*\n+     * Runs the classification tool. Takes a CSV file of queries, classifies queries based on dialect, and creates\n+     * several subdirectories to store the queries by dialect.\n+     *\n+     * @param args Command line arguments\n+     */\n+    public static void main(String[] args) {\n+        if (args.length == 0) {\n+            System.out.println(\"Please provide a CSV file.\");\n+            return;\n+        }\n+        List<String[]> allData = readCSV(args[0]);\n+        if (allData == null) {\n+            return;\n+        }\n+        SqlParser.Config[] parserConfigs = new SqlParser.Config[4];\n+        parserConfigs[0] = SqlParser.configBuilder().setParserFactory(DefaultDialectParserImpl.FACTORY).build();\n+        parserConfigs[1] = SqlParser.configBuilder().setParserFactory(Dialect1ParserImpl.FACTORY).build();\n+        parserConfigs[2] = SqlParser.configBuilder().setParserFactory(BigQueryParserImpl.FACTORY).build();\n+        parserConfigs[3] = SqlParser.configBuilder().setParserFactory(PostgreSQLParserImpl.FACTORY).build();\n+\n+        CSVWriter[] writers = setupOutput();\n+\n+        for (String[] data : allData) {\n+            boolean[] results = classifyQuery(cleanQuery(data[0]), parserConfigs);\n+            boolean unclassified = true;\n+            String[] nextLine = {data[0], data[1]};\n+            for (int i = 0; i < results.length; i++) {\n+                if (results[i]) {\n+                    unclassified = false;\n+                    writers[i].writeNext(nextLine);\n+                }\n+            }\n+            if (unclassified) {\n+                writers[writers.length-1].writeNext(nextLine);\n+            }\n+        }\n+        try {\n+            for (CSVWriter writer : writers) {\n+                writer.close();\n+            }\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+\n+    }\n+\n+    /*\n+     * Reads a CSV file and returns the data as a list of String arrays.\n+     *\n+     * @param filename Path to a CSV file\n+     * @return Contents of the CSV file\n+     */\n+    static List<String[]> readCSV(String filename) {\n+        try {\n+            FileReader filereader = new FileReader(filename);\n+            CSVReader csvReader = new CSVReaderBuilder(filereader).withSkipLines(1).build();\n+            return csvReader.readAll();\n+        }\n+        catch (Exception e) {\n+            System.out.println(e);\n+            return null;\n+        }\n+    }\n+\n+    /*\n+     * Classifies a single query using different SQL parsers.\n+     *\n+     * @param query The query to be classified\n+     * @param parserConfigs The parsers for each of the different dialects\n+     * @return A boolean array, with true values if the query can be classified in a dialect and false otherwise\n+     */\n+    static boolean[] classifyQuery(String query, SqlParser.Config[] parserConfigs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8523b45c397cf1120c9bf380ebeb532c9836f40e"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00c12982caceaadeb6906b13f36e3a8c52541e96", "author": {"user": {"login": "noah-kuo", "name": "Noah Kuo"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/00c12982caceaadeb6906b13f36e3a8c52541e96", "committedDate": "2020-08-06T19:30:00Z", "message": "Updated file and class names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c67d962de0583d487cfcd5ec91168e834551fd5", "author": {"user": {"login": "noah-kuo", "name": "Noah Kuo"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/1c67d962de0583d487cfcd5ec91168e834551fd5", "committedDate": "2020-08-06T22:41:30Z", "message": "Edited some method signatures and changed some variable types to improve readability and clarity"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NDUyNzY4", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/138#pullrequestreview-464452768", "createdAt": "2020-08-10T17:58:32Z", "commit": {"oid": "1c67d962de0583d487cfcd5ec91168e834551fd5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc27d4c2eefddb7d4bb3a10c6ee683b4e38bb407", "author": {"user": {"login": "noah-kuo", "name": "Noah Kuo"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/bc27d4c2eefddb7d4bb3a10c6ee683b4e38bb407", "committedDate": "2020-08-10T18:08:53Z", "message": "Merge branch 'master' into classifier"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 725, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}