{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3ODM5MDc2", "number": 94, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODowMjowN1rOEmt4mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxNTo1MDowNFrOFdIB8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDMzMTE0OnYy", "diffSide": "RIGHT", "path": "udfs/community/test_cases.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODowMjowN1rOHW6Utg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxNTo0Nzo1M1rOIpePzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4NjI5NA==", "bodyText": "please add one more test which checks for an expected 0 result like the following:\ninput: CAST(23 AS INT64), CAST(3 AS INT64)\nexpected_output: CAST(0 AS INT64)", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/94#discussion_r493786294", "createdAt": "2020-09-23T18:02:07Z", "author": {"login": "danieldeleo"}, "path": "udfs/community/test_cases.yaml", "diffHunk": "@@ -293,4 +293,7 @@ percentage_difference:\n   - test:\n     input: CAST(1.0 AS FLOAT64), CAST(1000000000 AS INT64)\n     expected_output: CAST(2.0 AS FLOAT64)\n- \n+getbit:\n+  - test:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "736fc211a03efa1b5decc9cdf3f64a2958a25c2c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDM1ODA5Mg==", "bodyText": "Hey @epishova any chance you can push this final change through and resolve the merge conflict? This is otherwise ready to go!", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/94#discussion_r580358092", "createdAt": "2021-02-22T15:47:53Z", "author": {"login": "danieldeleo"}, "path": "udfs/community/test_cases.yaml", "diffHunk": "@@ -293,4 +293,7 @@ percentage_difference:\n   - test:\n     input: CAST(1.0 AS FLOAT64), CAST(1000000000 AS INT64)\n     expected_output: CAST(2.0 AS FLOAT64)\n- \n+getbit:\n+  - test:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4NjI5NA=="}, "originalCommit": {"oid": "736fc211a03efa1b5decc9cdf3f64a2958a25c2c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY2MDg0NTkyOnYy", "diffSide": "RIGHT", "path": "udfs/community/getbit.sql", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxNTo1MDowNFrOIpeXSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxNTo1MDowNFrOIpeXSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDM2MDAwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            CREATE OR REPLACE FUNCTION fn.getbit(target_arg INT64, target_bit_arg INT64) AS \n          \n          \n            \n            (\n          \n          \n            \n              (\n          \n          \n            \n                SELECT\n          \n          \n            \n                  (target_arg & 1 << target_bit_arg) >> target_bit_arg\n          \n          \n            \n              )\n          \n          \n            \n            );\n          \n          \n            \n            CREATE OR REPLACE FUNCTION fn.getbit(target_arg INT64, target_bit_arg INT64) AS \n          \n          \n            \n            ((\n          \n          \n            \n                SELECT\n          \n          \n            \n                  (target_arg & 1 << target_bit_arg) >> target_bit_arg\n          \n          \n            \n            ));", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/94#discussion_r580360008", "createdAt": "2021-02-22T15:50:04Z", "author": {"login": "danieldeleo"}, "path": "udfs/community/getbit.sql", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+-- gitbit: Given an INTEGER value, returns the value of a bit at a specified position.\n+-- Input: target_arg value, INT64 target_bit_arg position of the bit, starting at 0 \n+-- Output: value of the bit (0 or 1) at the specified position.\n+CREATE OR REPLACE FUNCTION fn.getbit(target_arg INT64, target_bit_arg INT64) AS \n+(\n+  (\n+    SELECT\n+      (target_arg & 1 << target_bit_arg) >> target_bit_arg\n+  )\n+);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "736fc211a03efa1b5decc9cdf3f64a2958a25c2c"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3022, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}