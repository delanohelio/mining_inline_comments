{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MzQ0NDcz", "number": 141, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxOTo1MzoyMlrOEW8GlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDoxNToyMlrOEX1-XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDg4ODUzOnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/AutomaticQueryFixer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxOTo1MzoyMlrOG-dSoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxOTo1MzoyMlrOG-dSoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE0NDgwMQ==", "bodyText": "\u201cThe error cannot be fixed automatically. \u201d", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468144801", "createdAt": "2020-08-10T19:53:22Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/AutomaticQueryFixer.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.cloud.bigquery.utils.queryfixer.errors.BigQuerySqlError;\n+import com.google.cloud.bigquery.utils.queryfixer.errors.SqlErrorFactory;\n+import com.google.cloud.bigquery.utils.queryfixer.fixer.FixerFactory;\n+import com.google.cloud.bigquery.utils.queryfixer.fixer.IFixer;\n+import com.google.cloud.bigquery.utils.queryfixer.service.BigQueryService;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.CalciteTokenizer;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.QueryTokenProcessor;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.Tokenizer;\n+\n+/**\n+ * The entity to perform fixing logic. It uses dry-run to identify an error, extracts a fixer based\n+ * on the error, fix the error, and return the fix result.\n+ */\n+public class AutomaticQueryFixer {\n+\n+  private final BigQueryService service;\n+  private final SqlErrorFactory errorFactory;\n+  private final FixerFactory fixerFactory;\n+\n+  public AutomaticQueryFixer(BigQueryOptions options) {\n+    service = new BigQueryService(options);\n+    errorFactory = new SqlErrorFactory();\n+    QueryTokenProcessor tokenProcessor = buildQueryTokenProcessor();\n+    fixerFactory = new FixerFactory(tokenProcessor, service);\n+  }\n+\n+  public FixResult fix(String query) {\n+    BigQueryException exception = service.catchExceptionFromDryRun(query);\n+    if (exception == null) {\n+      return FixResult.noError();\n+    }\n+\n+    BigQuerySqlError sqlError = errorFactory.getError(exception);\n+    if (sqlError == null) {\n+      return fixNotSupport(exception);\n+    }\n+\n+    IFixer fixer = fixerFactory.getFixer(query, sqlError);\n+    if (fixer == null) {\n+      return fixNotSupport(sqlError);\n+    }\n+\n+    return fixer.fix();\n+  }\n+\n+  private QueryTokenProcessor buildQueryTokenProcessor() {\n+    BigQueryParserFactory parserFactory = new BigQueryParserFactory();\n+    Tokenizer tokenizer = new CalciteTokenizer(parserFactory);\n+    return new QueryTokenProcessor(tokenizer);\n+  }\n+\n+  private FixResult fixNotSupport(BigQueryException exception) {\n+    return FixResult.builder()\n+        .status(FixResult.Status.FAILURE)\n+        .approach(\"The fix of this error is not supported\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0b6c3b67b941470566dc93425bb6de0373538f3"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDg4OTM3OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/AutomaticQueryFixer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxOTo1MzozM1rOG-dTEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxOTo1MzozM1rOG-dTEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE0NDkxMg==", "bodyText": "\u201cThe error cannot be fixed automatically. \u201d", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468144912", "createdAt": "2020-08-10T19:53:33Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/AutomaticQueryFixer.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.google.cloud.bigquery.utils.queryfixer;\n+\n+import com.google.cloud.bigquery.BigQueryException;\n+import com.google.cloud.bigquery.BigQueryOptions;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.cloud.bigquery.utils.queryfixer.errors.BigQuerySqlError;\n+import com.google.cloud.bigquery.utils.queryfixer.errors.SqlErrorFactory;\n+import com.google.cloud.bigquery.utils.queryfixer.fixer.FixerFactory;\n+import com.google.cloud.bigquery.utils.queryfixer.fixer.IFixer;\n+import com.google.cloud.bigquery.utils.queryfixer.service.BigQueryService;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.CalciteTokenizer;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.QueryTokenProcessor;\n+import com.google.cloud.bigquery.utils.queryfixer.tokenizer.Tokenizer;\n+\n+/**\n+ * The entity to perform fixing logic. It uses dry-run to identify an error, extracts a fixer based\n+ * on the error, fix the error, and return the fix result.\n+ */\n+public class AutomaticQueryFixer {\n+\n+  private final BigQueryService service;\n+  private final SqlErrorFactory errorFactory;\n+  private final FixerFactory fixerFactory;\n+\n+  public AutomaticQueryFixer(BigQueryOptions options) {\n+    service = new BigQueryService(options);\n+    errorFactory = new SqlErrorFactory();\n+    QueryTokenProcessor tokenProcessor = buildQueryTokenProcessor();\n+    fixerFactory = new FixerFactory(tokenProcessor, service);\n+  }\n+\n+  public FixResult fix(String query) {\n+    BigQueryException exception = service.catchExceptionFromDryRun(query);\n+    if (exception == null) {\n+      return FixResult.noError();\n+    }\n+\n+    BigQuerySqlError sqlError = errorFactory.getError(exception);\n+    if (sqlError == null) {\n+      return fixNotSupport(exception);\n+    }\n+\n+    IFixer fixer = fixerFactory.getFixer(query, sqlError);\n+    if (fixer == null) {\n+      return fixNotSupport(sqlError);\n+    }\n+\n+    return fixer.fix();\n+  }\n+\n+  private QueryTokenProcessor buildQueryTokenProcessor() {\n+    BigQueryParserFactory parserFactory = new BigQueryParserFactory();\n+    Tokenizer tokenizer = new CalciteTokenizer(parserFactory);\n+    return new QueryTokenProcessor(tokenizer);\n+  }\n+\n+  private FixResult fixNotSupport(BigQueryException exception) {\n+    return FixResult.builder()\n+        .status(FixResult.Status.FAILURE)\n+        .approach(\"The fix of this error is not supported\")\n+        .error(exception.getMessage())\n+        .build();\n+  }\n+\n+  private FixResult fixNotSupport(BigQuerySqlError error) {\n+    return FixResult.builder()\n+        .status(FixResult.Status.FAILURE)\n+        .approach(\"The fix of this error is not supported\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0b6c3b67b941470566dc93425bb6de0373538f3"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDkwNDA0OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxOTo1ODowMlrOG-dcMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo0Mzo1MFrOG-g2BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE0NzI1MQ==", "bodyText": "nit: of 'the' service account\nShould user provide the path to the json file here?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468147251", "createdAt": "2020-08-10T19:58:02Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0b6c3b67b941470566dc93425bb6de0373538f3"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5ODg3NA==", "bodyText": "Yes, this flag actually receives the path of the json file, rather than the content.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468198874", "createdAt": "2020-08-10T21:34:06Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE0NzI1MQ=="}, "originalCommit": {"oid": "f0b6c3b67b941470566dc93425bb6de0373538f3"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMzAxMg==", "bodyText": "I have modified the description.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468203012", "createdAt": "2020-08-10T21:43:50Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE0NzI1MQ=="}, "originalCommit": {"oid": "f0b6c3b67b941470566dc93425bb6de0373538f3"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDkxNjMzOnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDowMTo1MVrOG-djug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDowNjoxMFrOG_HWLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE0OTE3OA==", "bodyText": "maybe declare option value as constants \"output\", similar with others.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468149178", "createdAt": "2020-08-10T20:01:51Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n+      // todo: Implement Non-interactive mode\n+      FixResult fixResult = queryFixer.fix(query);\n+      if (fixResult.getOptions().isEmpty()) {\n+        return;\n+      }\n+      String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+      printQueryResult(newQuery, bigQueryOptions);\n+\n+    } else if (interactMode.equalsIgnoreCase(\"guide\")) {\n+      // todo: Implement guide mode\n+      return;\n+    } else if (interactMode.equalsIgnoreCase(\"all\") || interactMode.equalsIgnoreCase(\"full\")) {\n+      FixResult fixResult = fullInteractMode(queryFixer, query);\n+      printFixResult(fixResult, cmd.getOptionValue(\"output\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0b6c3b67b941470566dc93425bb6de0373538f3"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzMzgzNg==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468833836", "createdAt": "2020-08-11T20:06:10Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n+      // todo: Implement Non-interactive mode\n+      FixResult fixResult = queryFixer.fix(query);\n+      if (fixResult.getOptions().isEmpty()) {\n+        return;\n+      }\n+      String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+      printQueryResult(newQuery, bigQueryOptions);\n+\n+    } else if (interactMode.equalsIgnoreCase(\"guide\")) {\n+      // todo: Implement guide mode\n+      return;\n+    } else if (interactMode.equalsIgnoreCase(\"all\") || interactMode.equalsIgnoreCase(\"full\")) {\n+      FixResult fixResult = fullInteractMode(queryFixer, query);\n+      printFixResult(fixResult, cmd.getOptionValue(\"output\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE0OTE3OA=="}, "originalCommit": {"oid": "f0b6c3b67b941470566dc93425bb6de0373538f3"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDkxNzU3OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDowMjoxNVrOG-dkmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDowNzo1OFrOG-dvZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE0OTQwMQ==", "bodyText": "use static const", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468149401", "createdAt": "2020-08-10T20:02:15Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n+      // todo: Implement Non-interactive mode\n+      FixResult fixResult = queryFixer.fix(query);\n+      if (fixResult.getOptions().isEmpty()) {\n+        return;\n+      }\n+      String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+      printQueryResult(newQuery, bigQueryOptions);\n+\n+    } else if (interactMode.equalsIgnoreCase(\"guide\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0b6c3b67b941470566dc93425bb6de0373538f3"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MjE2NA==", "bodyText": "maybe \"tutorial\"? or \"interactive\" instead of \"guide\"", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468152164", "createdAt": "2020-08-10T20:07:58Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n+      // todo: Implement Non-interactive mode\n+      FixResult fixResult = queryFixer.fix(query);\n+      if (fixResult.getOptions().isEmpty()) {\n+        return;\n+      }\n+      String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+      printQueryResult(newQuery, bigQueryOptions);\n+\n+    } else if (interactMode.equalsIgnoreCase(\"guide\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE0OTQwMQ=="}, "originalCommit": {"oid": "f0b6c3b67b941470566dc93425bb6de0373538f3"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDkxODExOnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDowMjoyOVrOG-dk9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoxMToyOVrOG_HgVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE0OTQ5NQ==", "bodyText": "use static const", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468149495", "createdAt": "2020-08-10T20:02:29Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0b6c3b67b941470566dc93425bb6de0373538f3"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzNjQzNw==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468836437", "createdAt": "2020-08-11T20:11:29Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE0OTQ5NQ=="}, "originalCommit": {"oid": "f0b6c3b67b941470566dc93425bb6de0373538f3"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDkyODM5OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDowNTo0MVrOG-drPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoxMjoyNlrOG_HiOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MTEwMw==", "bodyText": "What is customized credential here?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468151103", "createdAt": "2020-08-10T20:05:41Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n+      // todo: Implement Non-interactive mode\n+      FixResult fixResult = queryFixer.fix(query);\n+      if (fixResult.getOptions().isEmpty()) {\n+        return;\n+      }\n+      String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+      printQueryResult(newQuery, bigQueryOptions);\n+\n+    } else if (interactMode.equalsIgnoreCase(\"guide\")) {\n+      // todo: Implement guide mode\n+      return;\n+    } else if (interactMode.equalsIgnoreCase(\"all\") || interactMode.equalsIgnoreCase(\"full\")) {\n+      FixResult fixResult = fullInteractMode(queryFixer, query);\n+      printFixResult(fixResult, cmd.getOptionValue(\"output\"));\n+    } else {\n+      System.out.println(\"Interact Mode (-i) is incorrect. Use --help for usage.\");\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static BigQueryOptions buildBigQueryOptions(String credentialPath, String projectId) {\n+    if (credentialPath == null) {\n+      return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n+    } else {\n+      // TODO: should support this in near future.\n+      System.out.println(\"customized credential is not supported\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0b6c3b67b941470566dc93425bb6de0373538f3"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzNjkyMw==", "bodyText": "I haven't implement the logic to read a credential file with a given path yet.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468836923", "createdAt": "2020-08-11T20:12:26Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n+      // todo: Implement Non-interactive mode\n+      FixResult fixResult = queryFixer.fix(query);\n+      if (fixResult.getOptions().isEmpty()) {\n+        return;\n+      }\n+      String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+      printQueryResult(newQuery, bigQueryOptions);\n+\n+    } else if (interactMode.equalsIgnoreCase(\"guide\")) {\n+      // todo: Implement guide mode\n+      return;\n+    } else if (interactMode.equalsIgnoreCase(\"all\") || interactMode.equalsIgnoreCase(\"full\")) {\n+      FixResult fixResult = fullInteractMode(queryFixer, query);\n+      printFixResult(fixResult, cmd.getOptionValue(\"output\"));\n+    } else {\n+      System.out.println(\"Interact Mode (-i) is incorrect. Use --help for usage.\");\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static BigQueryOptions buildBigQueryOptions(String credentialPath, String projectId) {\n+    if (credentialPath == null) {\n+      return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n+    } else {\n+      // TODO: should support this in near future.\n+      System.out.println(\"customized credential is not supported\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MTEwMw=="}, "originalCommit": {"oid": "f0b6c3b67b941470566dc93425bb6de0373538f3"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDkyOTk1OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDowNjoxMFrOG-dsHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoxMjozM1rOG_Hifw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MTMyNQ==", "bodyText": "static const", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468151325", "createdAt": "2020-08-10T20:06:10Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n+      // todo: Implement Non-interactive mode\n+      FixResult fixResult = queryFixer.fix(query);\n+      if (fixResult.getOptions().isEmpty()) {\n+        return;\n+      }\n+      String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+      printQueryResult(newQuery, bigQueryOptions);\n+\n+    } else if (interactMode.equalsIgnoreCase(\"guide\")) {\n+      // todo: Implement guide mode\n+      return;\n+    } else if (interactMode.equalsIgnoreCase(\"all\") || interactMode.equalsIgnoreCase(\"full\")) {\n+      FixResult fixResult = fullInteractMode(queryFixer, query);\n+      printFixResult(fixResult, cmd.getOptionValue(\"output\"));\n+    } else {\n+      System.out.println(\"Interact Mode (-i) is incorrect. Use --help for usage.\");\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static BigQueryOptions buildBigQueryOptions(String credentialPath, String projectId) {\n+    if (credentialPath == null) {\n+      return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n+    } else {\n+      // TODO: should support this in near future.\n+      System.out.println(\"customized credential is not supported\");\n+      System.exit(1);\n+      return null;\n+    }\n+  }\n+\n+  private static FixResult fullInteractMode(AutomaticQueryFixer queryFixer, String query) {\n+    return queryFixer.fix(query);\n+  }\n+\n+  private static void printFixResult(FixResult fixResult, String outputFormat) {\n+    if (outputFormat == null || outputFormat.equalsIgnoreCase(\"natural\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0b6c3b67b941470566dc93425bb6de0373538f3"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzNjk5MQ==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468836991", "createdAt": "2020-08-11T20:12:33Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n+      // todo: Implement Non-interactive mode\n+      FixResult fixResult = queryFixer.fix(query);\n+      if (fixResult.getOptions().isEmpty()) {\n+        return;\n+      }\n+      String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+      printQueryResult(newQuery, bigQueryOptions);\n+\n+    } else if (interactMode.equalsIgnoreCase(\"guide\")) {\n+      // todo: Implement guide mode\n+      return;\n+    } else if (interactMode.equalsIgnoreCase(\"all\") || interactMode.equalsIgnoreCase(\"full\")) {\n+      FixResult fixResult = fullInteractMode(queryFixer, query);\n+      printFixResult(fixResult, cmd.getOptionValue(\"output\"));\n+    } else {\n+      System.out.println(\"Interact Mode (-i) is incorrect. Use --help for usage.\");\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static BigQueryOptions buildBigQueryOptions(String credentialPath, String projectId) {\n+    if (credentialPath == null) {\n+      return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n+    } else {\n+      // TODO: should support this in near future.\n+      System.out.println(\"customized credential is not supported\");\n+      System.exit(1);\n+      return null;\n+    }\n+  }\n+\n+  private static FixResult fullInteractMode(AutomaticQueryFixer queryFixer, String query) {\n+    return queryFixer.fix(query);\n+  }\n+\n+  private static void printFixResult(FixResult fixResult, String outputFormat) {\n+    if (outputFormat == null || outputFormat.equalsIgnoreCase(\"natural\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MTMyNQ=="}, "originalCommit": {"oid": "f0b6c3b67b941470566dc93425bb6de0373538f3"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDkzMDY0OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDowNjoyMVrOG-dsfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoxMjozN1rOG_HipA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MTQyMA==", "bodyText": "static const", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468151420", "createdAt": "2020-08-10T20:06:21Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n+      // todo: Implement Non-interactive mode\n+      FixResult fixResult = queryFixer.fix(query);\n+      if (fixResult.getOptions().isEmpty()) {\n+        return;\n+      }\n+      String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+      printQueryResult(newQuery, bigQueryOptions);\n+\n+    } else if (interactMode.equalsIgnoreCase(\"guide\")) {\n+      // todo: Implement guide mode\n+      return;\n+    } else if (interactMode.equalsIgnoreCase(\"all\") || interactMode.equalsIgnoreCase(\"full\")) {\n+      FixResult fixResult = fullInteractMode(queryFixer, query);\n+      printFixResult(fixResult, cmd.getOptionValue(\"output\"));\n+    } else {\n+      System.out.println(\"Interact Mode (-i) is incorrect. Use --help for usage.\");\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static BigQueryOptions buildBigQueryOptions(String credentialPath, String projectId) {\n+    if (credentialPath == null) {\n+      return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n+    } else {\n+      // TODO: should support this in near future.\n+      System.out.println(\"customized credential is not supported\");\n+      System.exit(1);\n+      return null;\n+    }\n+  }\n+\n+  private static FixResult fullInteractMode(AutomaticQueryFixer queryFixer, String query) {\n+    return queryFixer.fix(query);\n+  }\n+\n+  private static void printFixResult(FixResult fixResult, String outputFormat) {\n+    if (outputFormat == null || outputFormat.equalsIgnoreCase(\"natural\")) {\n+      printFixResultInCommandLine(fixResult);\n+    } else if (outputFormat.equalsIgnoreCase(\"json\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0b6c3b67b941470566dc93425bb6de0373538f3"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzNzAyOA==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468837028", "createdAt": "2020-08-11T20:12:37Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n+      // todo: Implement Non-interactive mode\n+      FixResult fixResult = queryFixer.fix(query);\n+      if (fixResult.getOptions().isEmpty()) {\n+        return;\n+      }\n+      String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+      printQueryResult(newQuery, bigQueryOptions);\n+\n+    } else if (interactMode.equalsIgnoreCase(\"guide\")) {\n+      // todo: Implement guide mode\n+      return;\n+    } else if (interactMode.equalsIgnoreCase(\"all\") || interactMode.equalsIgnoreCase(\"full\")) {\n+      FixResult fixResult = fullInteractMode(queryFixer, query);\n+      printFixResult(fixResult, cmd.getOptionValue(\"output\"));\n+    } else {\n+      System.out.println(\"Interact Mode (-i) is incorrect. Use --help for usage.\");\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static BigQueryOptions buildBigQueryOptions(String credentialPath, String projectId) {\n+    if (credentialPath == null) {\n+      return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n+    } else {\n+      // TODO: should support this in near future.\n+      System.out.println(\"customized credential is not supported\");\n+      System.exit(1);\n+      return null;\n+    }\n+  }\n+\n+  private static FixResult fullInteractMode(AutomaticQueryFixer queryFixer, String query) {\n+    return queryFixer.fix(query);\n+  }\n+\n+  private static void printFixResult(FixResult fixResult, String outputFormat) {\n+    if (outputFormat == null || outputFormat.equalsIgnoreCase(\"natural\")) {\n+      printFixResultInCommandLine(fixResult);\n+    } else if (outputFormat.equalsIgnoreCase(\"json\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MTQyMA=="}, "originalCommit": {"oid": "f0b6c3b67b941470566dc93425bb6de0373538f3"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDk0MDEzOnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDowOTozMlrOG-dyPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoxMzo0MVrOG_Hkjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1Mjg5Mw==", "bodyText": "nit: \"fullInteractMode\" -> \"fixQueryInFullInteractMode\"? maybe \"fixQueryInInteractiveMode\"?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468152893", "createdAt": "2020-08-10T20:09:32Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n+      // todo: Implement Non-interactive mode\n+      FixResult fixResult = queryFixer.fix(query);\n+      if (fixResult.getOptions().isEmpty()) {\n+        return;\n+      }\n+      String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+      printQueryResult(newQuery, bigQueryOptions);\n+\n+    } else if (interactMode.equalsIgnoreCase(\"guide\")) {\n+      // todo: Implement guide mode\n+      return;\n+    } else if (interactMode.equalsIgnoreCase(\"all\") || interactMode.equalsIgnoreCase(\"full\")) {\n+      FixResult fixResult = fullInteractMode(queryFixer, query);\n+      printFixResult(fixResult, cmd.getOptionValue(\"output\"));\n+    } else {\n+      System.out.println(\"Interact Mode (-i) is incorrect. Use --help for usage.\");\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static BigQueryOptions buildBigQueryOptions(String credentialPath, String projectId) {\n+    if (credentialPath == null) {\n+      return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n+    } else {\n+      // TODO: should support this in near future.\n+      System.out.println(\"customized credential is not supported\");\n+      System.exit(1);\n+      return null;\n+    }\n+  }\n+\n+  private static FixResult fullInteractMode(AutomaticQueryFixer queryFixer, String query) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0b6c3b67b941470566dc93425bb6de0373538f3"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzNzUxOQ==", "bodyText": "change to fixQueryInFullInteractMode.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468837519", "createdAt": "2020-08-11T20:13:41Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n+      // todo: Implement Non-interactive mode\n+      FixResult fixResult = queryFixer.fix(query);\n+      if (fixResult.getOptions().isEmpty()) {\n+        return;\n+      }\n+      String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+      printQueryResult(newQuery, bigQueryOptions);\n+\n+    } else if (interactMode.equalsIgnoreCase(\"guide\")) {\n+      // todo: Implement guide mode\n+      return;\n+    } else if (interactMode.equalsIgnoreCase(\"all\") || interactMode.equalsIgnoreCase(\"full\")) {\n+      FixResult fixResult = fullInteractMode(queryFixer, query);\n+      printFixResult(fixResult, cmd.getOptionValue(\"output\"));\n+    } else {\n+      System.out.println(\"Interact Mode (-i) is incorrect. Use --help for usage.\");\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static BigQueryOptions buildBigQueryOptions(String credentialPath, String projectId) {\n+    if (credentialPath == null) {\n+      return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n+    } else {\n+      // TODO: should support this in near future.\n+      System.out.println(\"customized credential is not supported\");\n+      System.exit(1);\n+      return null;\n+    }\n+  }\n+\n+  private static FixResult fullInteractMode(AutomaticQueryFixer queryFixer, String query) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1Mjg5Mw=="}, "originalCommit": {"oid": "f0b6c3b67b941470566dc93425bb6de0373538f3"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDk0ODQyOnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDoxMjowMFrOG-d3AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoxNDoxMVrOG_Hlhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1NDExMw==", "bodyText": "nit: \"The input query is valid. No errors to fix.'", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468154113", "createdAt": "2020-08-10T20:12:00Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n+      // todo: Implement Non-interactive mode\n+      FixResult fixResult = queryFixer.fix(query);\n+      if (fixResult.getOptions().isEmpty()) {\n+        return;\n+      }\n+      String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+      printQueryResult(newQuery, bigQueryOptions);\n+\n+    } else if (interactMode.equalsIgnoreCase(\"guide\")) {\n+      // todo: Implement guide mode\n+      return;\n+    } else if (interactMode.equalsIgnoreCase(\"all\") || interactMode.equalsIgnoreCase(\"full\")) {\n+      FixResult fixResult = fullInteractMode(queryFixer, query);\n+      printFixResult(fixResult, cmd.getOptionValue(\"output\"));\n+    } else {\n+      System.out.println(\"Interact Mode (-i) is incorrect. Use --help for usage.\");\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static BigQueryOptions buildBigQueryOptions(String credentialPath, String projectId) {\n+    if (credentialPath == null) {\n+      return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n+    } else {\n+      // TODO: should support this in near future.\n+      System.out.println(\"customized credential is not supported\");\n+      System.exit(1);\n+      return null;\n+    }\n+  }\n+\n+  private static FixResult fullInteractMode(AutomaticQueryFixer queryFixer, String query) {\n+    return queryFixer.fix(query);\n+  }\n+\n+  private static void printFixResult(FixResult fixResult, String outputFormat) {\n+    if (outputFormat == null || outputFormat.equalsIgnoreCase(\"natural\")) {\n+      printFixResultInCommandLine(fixResult);\n+    } else if (outputFormat.equalsIgnoreCase(\"json\")) {\n+      printFixResultAsJson(fixResult);\n+    } else {\n+      System.out.println(\"Output Mode (-o) is incorrect. Use --help for usage.\");\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static void printFixResultAsJson(FixResult fixResult) {\n+    Gson gson = new GsonBuilder().setPrettyPrinting().serializeNulls().create();\n+    System.out.println(gson.toJson(fixResult));\n+  }\n+\n+  private static void printFixResultInCommandLine(FixResult fixResult) {\n+    if (fixResult.getStatus() == FixResult.Status.NO_ERROR) {\n+      System.out.println(\"The input query is correct\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0b6c3b67b941470566dc93425bb6de0373538f3"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzNzc2Nw==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468837767", "createdAt": "2020-08-11T20:14:11Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n+      // todo: Implement Non-interactive mode\n+      FixResult fixResult = queryFixer.fix(query);\n+      if (fixResult.getOptions().isEmpty()) {\n+        return;\n+      }\n+      String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+      printQueryResult(newQuery, bigQueryOptions);\n+\n+    } else if (interactMode.equalsIgnoreCase(\"guide\")) {\n+      // todo: Implement guide mode\n+      return;\n+    } else if (interactMode.equalsIgnoreCase(\"all\") || interactMode.equalsIgnoreCase(\"full\")) {\n+      FixResult fixResult = fullInteractMode(queryFixer, query);\n+      printFixResult(fixResult, cmd.getOptionValue(\"output\"));\n+    } else {\n+      System.out.println(\"Interact Mode (-i) is incorrect. Use --help for usage.\");\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static BigQueryOptions buildBigQueryOptions(String credentialPath, String projectId) {\n+    if (credentialPath == null) {\n+      return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n+    } else {\n+      // TODO: should support this in near future.\n+      System.out.println(\"customized credential is not supported\");\n+      System.exit(1);\n+      return null;\n+    }\n+  }\n+\n+  private static FixResult fullInteractMode(AutomaticQueryFixer queryFixer, String query) {\n+    return queryFixer.fix(query);\n+  }\n+\n+  private static void printFixResult(FixResult fixResult, String outputFormat) {\n+    if (outputFormat == null || outputFormat.equalsIgnoreCase(\"natural\")) {\n+      printFixResultInCommandLine(fixResult);\n+    } else if (outputFormat.equalsIgnoreCase(\"json\")) {\n+      printFixResultAsJson(fixResult);\n+    } else {\n+      System.out.println(\"Output Mode (-o) is incorrect. Use --help for usage.\");\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static void printFixResultAsJson(FixResult fixResult) {\n+    Gson gson = new GsonBuilder().setPrettyPrinting().serializeNulls().create();\n+    System.out.println(gson.toJson(fixResult));\n+  }\n+\n+  private static void printFixResultInCommandLine(FixResult fixResult) {\n+    if (fixResult.getStatus() == FixResult.Status.NO_ERROR) {\n+      System.out.println(\"The input query is correct\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1NDExMw=="}, "originalCommit": {"oid": "f0b6c3b67b941470566dc93425bb6de0373538f3"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDk5MTg3OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDoxNzoyOFrOG-eSVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDoxNTowMFrOG_HnOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2MTEwOA==", "bodyText": "\"Failed to fix the input query.\"", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468161108", "createdAt": "2020-08-10T20:17:28Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n+      // todo: Implement Non-interactive mode\n+      FixResult fixResult = queryFixer.fix(query);\n+      if (fixResult.getOptions().isEmpty()) {\n+        return;\n+      }\n+      String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+      printQueryResult(newQuery, bigQueryOptions);\n+\n+    } else if (interactMode.equalsIgnoreCase(\"guide\")) {\n+      // todo: Implement guide mode\n+      return;\n+    } else if (interactMode.equalsIgnoreCase(\"all\") || interactMode.equalsIgnoreCase(\"full\")) {\n+      FixResult fixResult = fullInteractMode(queryFixer, query);\n+      printFixResult(fixResult, cmd.getOptionValue(\"output\"));\n+    } else {\n+      System.out.println(\"Interact Mode (-i) is incorrect. Use --help for usage.\");\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static BigQueryOptions buildBigQueryOptions(String credentialPath, String projectId) {\n+    if (credentialPath == null) {\n+      return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n+    } else {\n+      // TODO: should support this in near future.\n+      System.out.println(\"customized credential is not supported\");\n+      System.exit(1);\n+      return null;\n+    }\n+  }\n+\n+  private static FixResult fullInteractMode(AutomaticQueryFixer queryFixer, String query) {\n+    return queryFixer.fix(query);\n+  }\n+\n+  private static void printFixResult(FixResult fixResult, String outputFormat) {\n+    if (outputFormat == null || outputFormat.equalsIgnoreCase(\"natural\")) {\n+      printFixResultInCommandLine(fixResult);\n+    } else if (outputFormat.equalsIgnoreCase(\"json\")) {\n+      printFixResultAsJson(fixResult);\n+    } else {\n+      System.out.println(\"Output Mode (-o) is incorrect. Use --help for usage.\");\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static void printFixResultAsJson(FixResult fixResult) {\n+    Gson gson = new GsonBuilder().setPrettyPrinting().serializeNulls().create();\n+    System.out.println(gson.toJson(fixResult));\n+  }\n+\n+  private static void printFixResultInCommandLine(FixResult fixResult) {\n+    if (fixResult.getStatus() == FixResult.Status.NO_ERROR) {\n+      System.out.println(\"The input query is correct\");\n+      return;\n+    }\n+\n+    System.out.println(\"The query has an error: \" + fixResult.getError());\n+\n+    if (fixResult.getStatus() == FixResult.Status.FAILURE) {\n+      System.out.println(\"The input query is unable to fix\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0b6c3b67b941470566dc93425bb6de0373538f3"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2MTgzMw==", "bodyText": "or \"Error occurred when fixing the input query.\"", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468161833", "createdAt": "2020-08-10T20:17:58Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n+      // todo: Implement Non-interactive mode\n+      FixResult fixResult = queryFixer.fix(query);\n+      if (fixResult.getOptions().isEmpty()) {\n+        return;\n+      }\n+      String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+      printQueryResult(newQuery, bigQueryOptions);\n+\n+    } else if (interactMode.equalsIgnoreCase(\"guide\")) {\n+      // todo: Implement guide mode\n+      return;\n+    } else if (interactMode.equalsIgnoreCase(\"all\") || interactMode.equalsIgnoreCase(\"full\")) {\n+      FixResult fixResult = fullInteractMode(queryFixer, query);\n+      printFixResult(fixResult, cmd.getOptionValue(\"output\"));\n+    } else {\n+      System.out.println(\"Interact Mode (-i) is incorrect. Use --help for usage.\");\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static BigQueryOptions buildBigQueryOptions(String credentialPath, String projectId) {\n+    if (credentialPath == null) {\n+      return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n+    } else {\n+      // TODO: should support this in near future.\n+      System.out.println(\"customized credential is not supported\");\n+      System.exit(1);\n+      return null;\n+    }\n+  }\n+\n+  private static FixResult fullInteractMode(AutomaticQueryFixer queryFixer, String query) {\n+    return queryFixer.fix(query);\n+  }\n+\n+  private static void printFixResult(FixResult fixResult, String outputFormat) {\n+    if (outputFormat == null || outputFormat.equalsIgnoreCase(\"natural\")) {\n+      printFixResultInCommandLine(fixResult);\n+    } else if (outputFormat.equalsIgnoreCase(\"json\")) {\n+      printFixResultAsJson(fixResult);\n+    } else {\n+      System.out.println(\"Output Mode (-o) is incorrect. Use --help for usage.\");\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static void printFixResultAsJson(FixResult fixResult) {\n+    Gson gson = new GsonBuilder().setPrettyPrinting().serializeNulls().create();\n+    System.out.println(gson.toJson(fixResult));\n+  }\n+\n+  private static void printFixResultInCommandLine(FixResult fixResult) {\n+    if (fixResult.getStatus() == FixResult.Status.NO_ERROR) {\n+      System.out.println(\"The input query is correct\");\n+      return;\n+    }\n+\n+    System.out.println(\"The query has an error: \" + fixResult.getError());\n+\n+    if (fixResult.getStatus() == FixResult.Status.FAILURE) {\n+      System.out.println(\"The input query is unable to fix\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2MTEwOA=="}, "originalCommit": {"oid": "f0b6c3b67b941470566dc93425bb6de0373538f3"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzODIwMg==", "bodyText": "Change to \"Failed to fix the input query.\"", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r468838202", "createdAt": "2020-08-11T20:15:00Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -1,19 +1,196 @@\n package com.google.cloud.bigquery.utils.queryfixer;\n \n-import com.google.common.flogger.FluentLogger;\n+import com.google.cloud.bigquery.*;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixOption;\n+import com.google.cloud.bigquery.utils.queryfixer.entity.FixResult;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.*;\n+\n+import java.util.List;\n \n public class QueryFixerMain {\n \n-  private static final FluentLogger logger = FluentLogger.forEnclosingClass();\n+  private static CommandLine readFlags(String[] args) {\n+    Options options = new Options();\n \n-  public static void main(String[] args) {\n+    Option option =\n+        new Option(\n+            /*opt=*/ \"c\",\n+            /*long-opt=*/ \"credential\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The credential file (in JSON) of service account connecting to BigQuery. Otherwise, the default application-login credential will be used.\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"p\",\n+            /*long-opt=*/ \"project-id\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The ID of project where queries will be performed. This field is required if the project is not specified in credential\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"o\",\n+            /*long-opt=*/ \"output\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"The format to output fix results. The available formats are \\\"natural\\\" (default) and \\\"json\\\"\");\n+    options.addOption(option);\n+    option =\n+        new Option(\n+            /*opt=*/ \"i\",\n+            /*long-opt=*/ \"interact\",\n+            /*hasArg=*/ true,\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+    options.addOption(option);\n \n     if (args.length == 0) {\n-      // TODO: provide a more actionable info. This will be done once we finalize the input parameters.\n-      logger.atInfo().log(\"not enough arguments\");\n+      System.out.println(\"Please provide arguments.\");\n+      printHelpAndExit(options);\n+    }\n+\n+    CommandLineParser parser = new DefaultParser();\n+    try {\n+      return parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(e.getMessage());\n+      printHelpAndExit(options);\n+      return null;\n+    }\n+  }\n+\n+  public static void printHelpAndExit(Options options) {\n+    HelpFormatter formatter = new HelpFormatter();\n+    formatter.printHelp(\"-opt <value> --long-opt <value> \\\"query\\\"\", options);\n+    System.exit(1);\n+  }\n+\n+  public static void main(String[] args) {\n+    CommandLine cmd = readFlags(args);\n+\n+    String credentialPath = cmd.getOptionValue(\"credential\");\n+    String projectId = cmd.getOptionValue(\"project-id\");\n+    BigQueryOptions bigQueryOptions = buildBigQueryOptions(credentialPath, projectId);\n+\n+    if (cmd.getArgList().isEmpty()) {\n+      // In CLI mode, all the instructions are output by print functions, because logger outputs\n+      // extract info (time, code position) that distracts users.\n+      System.out.println(\n+          \"Please provide the query as an argument, enclosed by double quote. Use --help for instruction.\");\n+    }\n+\n+    String query = cmd.getArgList().get(0);\n+    System.out.println(\"Input query: \" + query);\n+\n+    AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n+\n+    String interactMode = cmd.getOptionValue(\"interact\");\n+    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n+      // todo: Implement Non-interactive mode\n+      FixResult fixResult = queryFixer.fix(query);\n+      if (fixResult.getOptions().isEmpty()) {\n+        return;\n+      }\n+      String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+      printQueryResult(newQuery, bigQueryOptions);\n+\n+    } else if (interactMode.equalsIgnoreCase(\"guide\")) {\n+      // todo: Implement guide mode\n+      return;\n+    } else if (interactMode.equalsIgnoreCase(\"all\") || interactMode.equalsIgnoreCase(\"full\")) {\n+      FixResult fixResult = fullInteractMode(queryFixer, query);\n+      printFixResult(fixResult, cmd.getOptionValue(\"output\"));\n+    } else {\n+      System.out.println(\"Interact Mode (-i) is incorrect. Use --help for usage.\");\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static BigQueryOptions buildBigQueryOptions(String credentialPath, String projectId) {\n+    if (credentialPath == null) {\n+      return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n+    } else {\n+      // TODO: should support this in near future.\n+      System.out.println(\"customized credential is not supported\");\n+      System.exit(1);\n+      return null;\n+    }\n+  }\n+\n+  private static FixResult fullInteractMode(AutomaticQueryFixer queryFixer, String query) {\n+    return queryFixer.fix(query);\n+  }\n+\n+  private static void printFixResult(FixResult fixResult, String outputFormat) {\n+    if (outputFormat == null || outputFormat.equalsIgnoreCase(\"natural\")) {\n+      printFixResultInCommandLine(fixResult);\n+    } else if (outputFormat.equalsIgnoreCase(\"json\")) {\n+      printFixResultAsJson(fixResult);\n+    } else {\n+      System.out.println(\"Output Mode (-o) is incorrect. Use --help for usage.\");\n+      System.exit(1);\n+    }\n+  }\n+\n+  private static void printFixResultAsJson(FixResult fixResult) {\n+    Gson gson = new GsonBuilder().setPrettyPrinting().serializeNulls().create();\n+    System.out.println(gson.toJson(fixResult));\n+  }\n+\n+  private static void printFixResultInCommandLine(FixResult fixResult) {\n+    if (fixResult.getStatus() == FixResult.Status.NO_ERROR) {\n+      System.out.println(\"The input query is correct\");\n+      return;\n+    }\n+\n+    System.out.println(\"The query has an error: \" + fixResult.getError());\n+\n+    if (fixResult.getStatus() == FixResult.Status.FAILURE) {\n+      System.out.println(\"The input query is unable to fix\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2MTEwOA=="}, "originalCommit": {"oid": "f0b6c3b67b941470566dc93425bb6de0373538f3"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDM2Njc5OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDoxMzo0MVrOG_3HBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNzozMjoxMlrOHAWCzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNjM5MQ==", "bodyText": "nit: TODO:", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r469616391", "createdAt": "2020-08-13T00:13:41Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -84,25 +102,34 @@ public static void main(String[] args) {\n \n     AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n \n-    String interactMode = cmd.getOptionValue(\"interact\");\n-    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n-      // todo: Implement Non-interactive mode\n-      FixResult fixResult = queryFixer.fix(query);\n-      if (fixResult.getOptions().isEmpty()) {\n+    String interactMode = cmd.getOptionValue(INTERACT);\n+    if (interactMode == null) {\n+      interactMode = INTERACT_MODE_NONE;\n+    }\n+    switch (interactMode) {\n+      case INTERACT_MODE_NONE:\n+        // todo: Implement Non-interactive mode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b096853e36a902f0254cdbe9faf4d5c69384b7ba"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEyMzIxMg==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r470123212", "createdAt": "2020-08-13T17:32:12Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -84,25 +102,34 @@ public static void main(String[] args) {\n \n     AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n \n-    String interactMode = cmd.getOptionValue(\"interact\");\n-    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n-      // todo: Implement Non-interactive mode\n-      FixResult fixResult = queryFixer.fix(query);\n-      if (fixResult.getOptions().isEmpty()) {\n+    String interactMode = cmd.getOptionValue(INTERACT);\n+    if (interactMode == null) {\n+      interactMode = INTERACT_MODE_NONE;\n+    }\n+    switch (interactMode) {\n+      case INTERACT_MODE_NONE:\n+        // todo: Implement Non-interactive mode", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNjM5MQ=="}, "originalCommit": {"oid": "b096853e36a902f0254cdbe9faf4d5c69384b7ba"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDM2NzE2OnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDoxMzo0OVrOG_3HOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNzozMjoyNlrOHAWDqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNjQ0MQ==", "bodyText": "nit: TODO", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r469616441", "createdAt": "2020-08-13T00:13:49Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -84,25 +102,34 @@ public static void main(String[] args) {\n \n     AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n \n-    String interactMode = cmd.getOptionValue(\"interact\");\n-    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n-      // todo: Implement Non-interactive mode\n-      FixResult fixResult = queryFixer.fix(query);\n-      if (fixResult.getOptions().isEmpty()) {\n+    String interactMode = cmd.getOptionValue(INTERACT);\n+    if (interactMode == null) {\n+      interactMode = INTERACT_MODE_NONE;\n+    }\n+    switch (interactMode) {\n+      case INTERACT_MODE_NONE:\n+        // todo: Implement Non-interactive mode\n+        FixResult fixResult = queryFixer.fix(query);\n+        if (fixResult.getOptions().isEmpty()) {\n+          return;\n+        }\n+        String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+        printQueryResult(newQuery, bigQueryOptions);\n+        break;\n+\n+      case INTERACT_MODE_GUIDE:\n+        // todo: Implement guide mode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b096853e36a902f0254cdbe9faf4d5c69384b7ba"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEyMzQzNQ==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r470123435", "createdAt": "2020-08-13T17:32:26Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -84,25 +102,34 @@ public static void main(String[] args) {\n \n     AutomaticQueryFixer queryFixer = new AutomaticQueryFixer(bigQueryOptions);\n \n-    String interactMode = cmd.getOptionValue(\"interact\");\n-    if (interactMode == null || interactMode.equalsIgnoreCase(\"none\")) {\n-      // todo: Implement Non-interactive mode\n-      FixResult fixResult = queryFixer.fix(query);\n-      if (fixResult.getOptions().isEmpty()) {\n+    String interactMode = cmd.getOptionValue(INTERACT);\n+    if (interactMode == null) {\n+      interactMode = INTERACT_MODE_NONE;\n+    }\n+    switch (interactMode) {\n+      case INTERACT_MODE_NONE:\n+        // todo: Implement Non-interactive mode\n+        FixResult fixResult = queryFixer.fix(query);\n+        if (fixResult.getOptions().isEmpty()) {\n+          return;\n+        }\n+        String newQuery = fixResult.getOptions().get(0).getFixedQuery();\n+        printQueryResult(newQuery, bigQueryOptions);\n+        break;\n+\n+      case INTERACT_MODE_GUIDE:\n+        // todo: Implement guide mode", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNjQ0MQ=="}, "originalCommit": {"oid": "b096853e36a902f0254cdbe9faf4d5c69384b7ba"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDM2ODAzOnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDoxNDoyMVrOG_3Hwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNzozMzo1M1rOHAWIxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNjU3OA==", "bodyText": "nit: 'C'ustomized credential path...", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r469616578", "createdAt": "2020-08-13T00:14:21Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -111,20 +138,21 @@ private static BigQueryOptions buildBigQueryOptions(String credentialPath, Strin\n       return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n     } else {\n       // TODO: should support this in near future.\n-      System.out.println(\"customized credential is not supported\");\n+      System.out.println(\"customized credential path is not supported\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b096853e36a902f0254cdbe9faf4d5c69384b7ba"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEyNDc0MA==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r470124740", "createdAt": "2020-08-13T17:33:53Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -111,20 +138,21 @@ private static BigQueryOptions buildBigQueryOptions(String credentialPath, Strin\n       return BigQueryOptions.newBuilder().setProjectId(projectId).build();\n     } else {\n       // TODO: should support this in near future.\n-      System.out.println(\"customized credential is not supported\");\n+      System.out.println(\"customized credential path is not supported\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNjU3OA=="}, "originalCommit": {"oid": "b096853e36a902f0254cdbe9faf4d5c69384b7ba"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDM3MDIxOnYy", "diffSide": "RIGHT", "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDoxNToyMlrOG_3I-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNzozMzo1MlrOHAWImA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNjg4OA==", "bodyText": "nit: \"modes\"", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r469616888", "createdAt": "2020-08-13T00:15:22Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -56,10 +59,10 @@ private static CommandLine readFlags(String[] args) {\n     options.addOption(option);\n     option =\n         new Option(\n-            /*opt=*/ INTERACT_SHORTCUT,\n-            /*long-opt=*/ INTERACT,\n+            /*opt=*/ MODE_SHORTCUT,\n+            /*long-opt=*/ MODE,\n             /*hasArg=*/ true,\n-            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"auto\\\" (default), \\\"ua/user-assistance\\\" and \\\"fo/fix-once\\\". Please see the README file for their meanings\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4449a298e84aef68a35a48b0acc5874a6e81e8da"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNzAwNw==", "bodyText": "nit: \"their meanings\" -> \"the detailed description.\"", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r469617007", "createdAt": "2020-08-13T00:15:54Z", "author": {"login": "kikkyo"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -56,10 +59,10 @@ private static CommandLine readFlags(String[] args) {\n     options.addOption(option);\n     option =\n         new Option(\n-            /*opt=*/ INTERACT_SHORTCUT,\n-            /*long-opt=*/ INTERACT,\n+            /*opt=*/ MODE_SHORTCUT,\n+            /*long-opt=*/ MODE,\n             /*hasArg=*/ true,\n-            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"auto\\\" (default), \\\"ua/user-assistance\\\" and \\\"fo/fix-once\\\". Please see the README file for their meanings\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNjg4OA=="}, "originalCommit": {"oid": "4449a298e84aef68a35a48b0acc5874a6e81e8da"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEyNDY5Ng==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/141#discussion_r470124696", "createdAt": "2020-08-13T17:33:52Z", "author": {"login": "mingen-pan"}, "path": "tools/automatic_query_fixer/src/main/java/com/google/cloud/bigquery/utils/queryfixer/QueryFixerMain.java", "diffHunk": "@@ -56,10 +59,10 @@ private static CommandLine readFlags(String[] args) {\n     options.addOption(option);\n     option =\n         new Option(\n-            /*opt=*/ INTERACT_SHORTCUT,\n-            /*long-opt=*/ INTERACT,\n+            /*opt=*/ MODE_SHORTCUT,\n+            /*long-opt=*/ MODE,\n             /*hasArg=*/ true,\n-            /*description=*/ \"Interactive Mode. The available mode are \\\"none\\\" (default), \\\"guide\\\" and \\\"all/full\\\"\");\n+            /*description=*/ \"Interactive Mode. The available mode are \\\"auto\\\" (default), \\\"ua/user-assistance\\\" and \\\"fo/fix-once\\\". Please see the README file for their meanings\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNjg4OA=="}, "originalCommit": {"oid": "4449a298e84aef68a35a48b0acc5874a6e81e8da"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3099, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}