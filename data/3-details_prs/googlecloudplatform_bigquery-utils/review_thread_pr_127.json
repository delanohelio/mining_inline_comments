{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwMzQ1NjY2", "number": 127, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTo0OToxOVrOEULD6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQxOToyMzoxM1rOEUaShg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTg4MjAzOnYy", "diffSide": "RIGHT", "path": "tools/template_based_query_generation/src/main/java/data/Column.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTo0OToxOVrOG6UK7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMToxMDo0MVrOG6W2AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwMTA2OQ==", "bodyText": "As this column only need to store data for one kind of dataType, instead of a Column class with arrayList of all the types, please use Generic Class instead.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/127#discussion_r463801069", "createdAt": "2020-07-31T19:49:19Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/main/java/data/Column.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package data;\n+\n+import parser.Utils;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+\n+public class Column {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5028f2f5811428c5f71a2a2b7a7fb5d61c73504"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg0NDg2NQ==", "bodyText": "Deleted the column class and moved the data generation methods to Table. Now the data is store in ArrayList<ArrayList<?>> instead of ArrayList < Column >", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/127#discussion_r463844865", "createdAt": "2020-07-31T21:10:41Z", "author": {"login": "AllenWang314"}, "path": "tools/template_based_query_generation/src/main/java/data/Column.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package data;\n+\n+import parser.Utils;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+\n+public class Column {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwMTA2OQ=="}, "originalCommit": {"oid": "d5028f2f5811428c5f71a2a2b7a7fb5d61c73504"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTg5MTkzOnYy", "diffSide": "RIGHT", "path": "tools/template_based_query_generation/src/main/java/parser/Utils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTo1MzoxMFrOG6UQ9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDo0ODoyOVrOG6V3Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwMjYxNQ==", "bodyText": "A string with only 0s and 1s does not seem to matches this regex? Consider update this comment.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/127#discussion_r463802615", "createdAt": "2020-07-31T19:53:10Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/main/java/parser/Utils.java", "diffHunk": "@@ -79,6 +81,30 @@ public static String getRandomString(int length) throws IllegalArgumentException\n     return sb.toString();\n   }\n \n+  /**\n+   * Returns a random string with a specified length consisting of 0s and 1s\n+   *\n+   * @param length a nonzero integer specifying the desired length of the generated string\n+   * @return a random string that matches the regex '[a-zA-Z_]' and has the specified length", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5028f2f5811428c5f71a2a2b7a7fb5d61c73504"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyODc2Ng==", "bodyText": "changed to '[0|1]*'", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/127#discussion_r463828766", "createdAt": "2020-07-31T20:48:29Z", "author": {"login": "AllenWang314"}, "path": "tools/template_based_query_generation/src/main/java/parser/Utils.java", "diffHunk": "@@ -79,6 +81,30 @@ public static String getRandomString(int length) throws IllegalArgumentException\n     return sb.toString();\n   }\n \n+  /**\n+   * Returns a random string with a specified length consisting of 0s and 1s\n+   *\n+   * @param length a nonzero integer specifying the desired length of the generated string\n+   * @return a random string that matches the regex '[a-zA-Z_]' and has the specified length", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwMjYxNQ=="}, "originalCommit": {"oid": "d5028f2f5811428c5f71a2a2b7a7fb5d61c73504"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTg5NDg4OnYy", "diffSide": "RIGHT", "path": "tools/template_based_query_generation/src/main/java/parser/Utils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTo1NDoyMVrOG6USwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDo0MjoyNVrOG6Vr_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwMzA3NA==", "bodyText": "Please use space here to fix the style.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/127#discussion_r463803074", "createdAt": "2020-07-31T19:54:21Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/main/java/parser/Utils.java", "diffHunk": "@@ -209,6 +235,127 @@ private static String getOutputDirectory(String directoryName) {\n \n     return map;\n   }\n-\n   // TODO(spoiledhua): refactor IO exception handling\n+\n+\n+  /**\n+   *\n+   * @param dataType\n+   * @return random data of type dataType\n+   * @throws IllegalArgumentException\n+   */\n+  public static int generateRandomIntegerData(DataType dataType) throws IllegalArgumentException {\n+    if (dataType == DataType.SMALL_INT) {\n+      return \trandom.nextInt(-32768,32769);\n+    } else if (dataType == DataType.INTEGER) {\n+      return \trandom.nextInt();\n+    } else if (dataType == DataType.SMALL_SERIAL) {\n+      return \trandom.nextInt(1, 32768);\n+    } else if (dataType == DataType.SERIAL) {\n+      int num = random.nextInt();\n+      if (num == Integer.MIN_VALUE) {\n+        return 0;\n+      } else {\n+        return\tMath.abs(num);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5028f2f5811428c5f71a2a2b7a7fb5d61c73504"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyNTkxOA==", "bodyText": "fixed!", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/127#discussion_r463825918", "createdAt": "2020-07-31T20:42:25Z", "author": {"login": "AllenWang314"}, "path": "tools/template_based_query_generation/src/main/java/parser/Utils.java", "diffHunk": "@@ -209,6 +235,127 @@ private static String getOutputDirectory(String directoryName) {\n \n     return map;\n   }\n-\n   // TODO(spoiledhua): refactor IO exception handling\n+\n+\n+  /**\n+   *\n+   * @param dataType\n+   * @return random data of type dataType\n+   * @throws IllegalArgumentException\n+   */\n+  public static int generateRandomIntegerData(DataType dataType) throws IllegalArgumentException {\n+    if (dataType == DataType.SMALL_INT) {\n+      return \trandom.nextInt(-32768,32769);\n+    } else if (dataType == DataType.INTEGER) {\n+      return \trandom.nextInt();\n+    } else if (dataType == DataType.SMALL_SERIAL) {\n+      return \trandom.nextInt(1, 32768);\n+    } else if (dataType == DataType.SERIAL) {\n+      int num = random.nextInt();\n+      if (num == Integer.MIN_VALUE) {\n+        return 0;\n+      } else {\n+        return\tMath.abs(num);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwMzA3NA=="}, "originalCommit": {"oid": "d5028f2f5811428c5f71a2a2b7a7fb5d61c73504"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTg5ODAzOnYy", "diffSide": "RIGHT", "path": "tools/template_based_query_generation/src/main/java/parser/Utils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTo1NTowNlrOG6UUbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDo0MjoyMFrOG6Vr2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwMzUwMA==", "bodyText": "Please use space here to fix the style.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/127#discussion_r463803500", "createdAt": "2020-07-31T19:55:06Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/main/java/parser/Utils.java", "diffHunk": "@@ -209,6 +235,127 @@ private static String getOutputDirectory(String directoryName) {\n \n     return map;\n   }\n-\n   // TODO(spoiledhua): refactor IO exception handling\n+\n+\n+  /**\n+   *\n+   * @param dataType\n+   * @return random data of type dataType\n+   * @throws IllegalArgumentException\n+   */\n+  public static int generateRandomIntegerData(DataType dataType) throws IllegalArgumentException {\n+    if (dataType == DataType.SMALL_INT) {\n+      return \trandom.nextInt(-32768,32769);\n+    } else if (dataType == DataType.INTEGER) {\n+      return \trandom.nextInt();\n+    } else if (dataType == DataType.SMALL_SERIAL) {\n+      return \trandom.nextInt(1, 32768);\n+    } else if (dataType == DataType.SERIAL) {\n+      int num = random.nextInt();\n+      if (num == Integer.MIN_VALUE) {\n+        return 0;\n+      } else {\n+        return\tMath.abs(num);\n+      }\n+    } else {\n+      throw new IllegalArgumentException(\"dataType cannot be represented by an int type\");\n+    }\n+  }\n+\n+  /**\n+   *\n+   * @param dataType\n+   * @return random data of type dataType\n+   * @throws IllegalArgumentException\n+   */\n+  public static long generateRandomLongData(DataType dataType) {\n+    if (dataType == DataType.BIG_INT) {\n+      return \trandom.nextLong();\n+    } else if (dataType == DataType.BIG_SERIAL) {\n+      long num = random.nextLong();\n+      if (num == Long.MIN_VALUE) {\n+        return 0;\n+      } else {\n+        return\tMath.abs(num);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5028f2f5811428c5f71a2a2b7a7fb5d61c73504"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyNTg4MA==", "bodyText": "fixed!", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/127#discussion_r463825880", "createdAt": "2020-07-31T20:42:20Z", "author": {"login": "AllenWang314"}, "path": "tools/template_based_query_generation/src/main/java/parser/Utils.java", "diffHunk": "@@ -209,6 +235,127 @@ private static String getOutputDirectory(String directoryName) {\n \n     return map;\n   }\n-\n   // TODO(spoiledhua): refactor IO exception handling\n+\n+\n+  /**\n+   *\n+   * @param dataType\n+   * @return random data of type dataType\n+   * @throws IllegalArgumentException\n+   */\n+  public static int generateRandomIntegerData(DataType dataType) throws IllegalArgumentException {\n+    if (dataType == DataType.SMALL_INT) {\n+      return \trandom.nextInt(-32768,32769);\n+    } else if (dataType == DataType.INTEGER) {\n+      return \trandom.nextInt();\n+    } else if (dataType == DataType.SMALL_SERIAL) {\n+      return \trandom.nextInt(1, 32768);\n+    } else if (dataType == DataType.SERIAL) {\n+      int num = random.nextInt();\n+      if (num == Integer.MIN_VALUE) {\n+        return 0;\n+      } else {\n+        return\tMath.abs(num);\n+      }\n+    } else {\n+      throw new IllegalArgumentException(\"dataType cannot be represented by an int type\");\n+    }\n+  }\n+\n+  /**\n+   *\n+   * @param dataType\n+   * @return random data of type dataType\n+   * @throws IllegalArgumentException\n+   */\n+  public static long generateRandomLongData(DataType dataType) {\n+    if (dataType == DataType.BIG_INT) {\n+      return \trandom.nextLong();\n+    } else if (dataType == DataType.BIG_SERIAL) {\n+      long num = random.nextLong();\n+      if (num == Long.MIN_VALUE) {\n+        return 0;\n+      } else {\n+        return\tMath.abs(num);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwMzUwMA=="}, "originalCommit": {"oid": "d5028f2f5811428c5f71a2a2b7a7fb5d61c73504"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODM3NzAyOnYy", "diffSide": "RIGHT", "path": "tools/template_based_query_generation/src/main/java/token/Tokenizer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQxOToyMzoxM1rOG6nQ9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjozMDoyMFrOG7AVZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDExMzkwOA==", "bodyText": "Should we still use ArrayList here?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/127#discussion_r464113908", "createdAt": "2020-08-02T19:23:13Z", "author": {"login": "Bei-z"}, "path": "tools/template_based_query_generation/src/main/java/token/Tokenizer.java", "diffHunk": "@@ -200,11 +211,34 @@ private void generateInsertExp(Token token) {\n   }\n \n   /**\n-   * TODO: needs a function to generate a few rows of data to insert into table\n+   * TODO: fix with Utils string builder to increase efficiency\n+   * sets token to be a values expression\n    * @param token\n    */\n   private void generateValuesExp(Token token) {\n-\n+    int placeHolder = generateNextPlaceHolder(token.getTokenInfo().getTokenType());\n+    int numRows = r.nextInt(this.maxNumColumnsValues) + 1;\n+    ArrayList<Column> values = this.table.generateData(numRows);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15df682543cbab4a2836236eccc467167978518"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyNDY0NA==", "bodyText": "Yes, fixed this. Writing up some manual tests and pushing afterwards", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/127#discussion_r464524644", "createdAt": "2020-08-03T16:30:20Z", "author": {"login": "AllenWang314"}, "path": "tools/template_based_query_generation/src/main/java/token/Tokenizer.java", "diffHunk": "@@ -200,11 +211,34 @@ private void generateInsertExp(Token token) {\n   }\n \n   /**\n-   * TODO: needs a function to generate a few rows of data to insert into table\n+   * TODO: fix with Utils string builder to increase efficiency\n+   * sets token to be a values expression\n    * @param token\n    */\n   private void generateValuesExp(Token token) {\n-\n+    int placeHolder = generateNextPlaceHolder(token.getTokenInfo().getTokenType());\n+    int numRows = r.nextInt(this.maxNumColumnsValues) + 1;\n+    ArrayList<Column> values = this.table.generateData(numRows);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDExMzkwOA=="}, "originalCommit": {"oid": "f15df682543cbab4a2836236eccc467167978518"}, "originalPosition": 119}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3075, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}