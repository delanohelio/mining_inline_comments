{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MTIzOTU2", "number": 139, "title": "Query Verification: Comparing query results", "bodyText": "Added the logic for converting BQ data types and for comparing the results of queries.", "createdAt": "2020-08-06T16:10:56Z", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139", "merged": true, "mergeCommit": {"oid": "2f9e98847805c245d3984e5c50e9a81a83b4dd8a"}, "closed": true, "closedAt": "2020-08-11T13:20:04Z", "author": {"login": "krishsuchdev"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8SBVMgH2gAyNDY0MTIzOTU2OjYyNTgwZDk4YzY2MTZiZTIxYWY1NzcwYzdjMmM1YzY4NDNmMDk4Njg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc92soSgH2gAyNDY0MTIzOTU2OjMzNWEwMWZjODM1ZTdhZWRjYTVkODk0ZjhiYTUwY2ExYWUwZWY3NGI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "62580d98c6616be21af5770c7c2c5c6843f09868", "author": {"user": {"login": "krishsuchdev", "name": "Krish Suchdev"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/62580d98c6616be21af5770c7c2c5c6843f09868", "committedDate": "2020-08-06T16:01:17Z", "message": "Comparing query results"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNzQwNTM5", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#pullrequestreview-462740539", "createdAt": "2020-08-06T17:41:27Z", "commit": {"oid": "62580d98c6616be21af5770c7c2c5c6843f09868"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzo0MToyN1rOG89xrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzo0NDoxMVrOG893eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3OTg4NQ==", "bodyText": "return null may cause unexpected issue if other parts didn't handle carefully. Consider using Optional as return type", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466579885", "createdAt": "2020-08-06T17:41:27Z", "author": {"login": "yzhvictor"}, "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java", "diffHunk": "@@ -112,5 +117,43 @@ public void verifyDataAware() throws InterruptedException {\n         System.out.println(\"Data-Aware Verification Completed\");\n     }\n \n+    /**\n+     * Finds extra and missing results by locating the differences between the results.\n+     * @param migratedResults Parsed results returned from BQ\n+     * @param originalResults Parsed results returned from original data warehouse service\n+     * @return Differences classified as either extra or missing from migrated results.\n+     */\n+    public ResultDifferences compareResults(List<QueryJobResults> migratedResults, List<QueryJobResults> originalResults) {\n+        // Check if same amount of queries were run\n+        if (migratedResults.size() == originalResults.size()) {\n+            // Rows present in migrated query results, but not original query results\n+            List<List<Object>> extraResults = new ArrayList<List<Object>>();\n+\n+            // Rows present in original query results, but not migrated query results\n+            List<List<Object>> missingResults = new ArrayList<List<Object>>();\n+\n+            for (int i = 0; i < migratedResults.size(); i++) {\n+                QueryJobResults migratedJobResults = migratedResults.get(i);\n+\n+                QueryJobResults originalJobResults = originalResults.get(i);\n+                Set<List<Object>> missingResultsSet = originalJobResults.results();\n+\n+                for (List<Object> migratedQueryResults : migratedJobResults.results()) {\n+                    // Rows that exist in both results are removed from missing results set\n+                    if (!missingResultsSet.remove(migratedQueryResults)) {\n+                        // Rows in the migrated results that don't exist in original results are classified as extra in migrated results\n+                        extraResults.add(migratedQueryResults);\n+                    }\n+                }\n+\n+                // Any leftover rows in the original results without a match are classified as missing in migrated results\n+                missingResults.addAll(missingResultsSet);\n+            }\n+\n+            return ResultDifferences.create(extraResults, missingResults);\n+        } else {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62580d98c6616be21af5770c7c2c5c6843f09868"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU4MDM1Ng==", "bodyText": "Do we need to have a default to at least put some warnings for unsupported types.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466580356", "createdAt": "2020-08-06T17:42:21Z", "author": {"login": "yzhvictor"}, "path": "tools/query_verification/src/main/java/com/google/bigquery/BigQueryManager.java", "diffHunk": "@@ -279,8 +281,55 @@ public String getName() {\n             StandardSQLTypeName type = fields.get(i).getType().getStandardType();\n \n             Object result;\n-            // TODO Convert value to appropriate Java type\n-            result = value.getStringValue();\n+            try {\n+                switch (type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62580d98c6616be21af5770c7c2c5c6843f09868"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU4MDYzNg==", "bodyText": "use Optional.empty()", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466580636", "createdAt": "2020-08-06T17:42:52Z", "author": {"login": "yzhvictor"}, "path": "tools/query_verification/src/main/java/com/google/bigquery/BigQueryManager.java", "diffHunk": "@@ -279,8 +281,55 @@ public String getName() {\n             StandardSQLTypeName type = fields.get(i).getType().getStandardType();\n \n             Object result;\n-            // TODO Convert value to appropriate Java type\n-            result = value.getStringValue();\n+            try {\n+                switch (type) {\n+                    case BOOL:\n+                        // returns boolean\n+                        result = value.getBooleanValue();\n+                        break;\n+                    case FLOAT64:\n+                        // returns double\n+                        result = value.getDoubleValue();\n+                        break;\n+                    case INT64:\n+                        // returns long\n+                        result = value.getLongValue();\n+                        break;\n+                    case NUMERIC:\n+                        // returns BigDecimal\n+                        result = value.getNumericValue();\n+                        break;\n+                    case STRUCT:\n+                        FieldList subFields = fields.get(i).getSubFields();\n+                        FieldValueList subValues = value.getRecordValue();\n+                        List<Object> subResults = parseResults(subValues, subFields);\n+\n+                        // returns List<Object>\n+                        result = subResults;\n+                        break;\n+                    case DATE:\n+                        // returns Date\n+                        result = new SimpleDateFormat(\"yyyy-MM-dd\").parse(value.getStringValue());\n+                        break;\n+                    case DATETIME:\n+                        // returns Date\n+                        result = new SimpleDateFormat(\"yyyy-MM-dd'T'hh:mm:ss.SSSSSS\").parse(value.getStringValue());\n+                        break;\n+                    case TIME:\n+                        // returns Date\n+                        result = new SimpleDateFormat(\"hh:mm:ss.SSSSSS\").parse(value.getStringValue());\n+                        break;\n+                    case TIMESTAMP:\n+                        // returns Date\n+                        result = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss.SSSSSS zzz\").parse(value.getStringValue());\n+                        break;\n+                    case STRING: default:\n+                        // returns String\n+                        result = value.getStringValue();\n+                }\n+            } catch (ParseException e) {\n+                result = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62580d98c6616be21af5770c7c2c5c6843f09868"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU4MTM3MA==", "bodyText": "will run queries keep the same order in 2 databases?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466581370", "createdAt": "2020-08-06T17:44:11Z", "author": {"login": "yzhvictor"}, "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java", "diffHunk": "@@ -72,8 +74,11 @@ public void verifyDataFree() throws InterruptedException {\n     /**\n      * Verifies migrated query by sending query jobs to BQ and TD to check for differences in the query results.\n      */\n-    public void verifyDataAware() throws InterruptedException {\n+    public void verifyDataAware() throws Exception {\n         List<QueryJobResults> migratedResults = migratedInstance.runQueries();\n+        List<QueryJobResults> originalResults = originalInstance.runQueries();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62580d98c6616be21af5770c7c2c5c6843f09868"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyODAzMTE3", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#pullrequestreview-462803117", "createdAt": "2020-08-06T19:11:35Z", "commit": {"oid": "62580d98c6616be21af5770c7c2c5c6843f09868"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOToxMTozNlrOG9Awog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOToyODo1NFrOG9BTdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYyODc3MA==", "bodyText": "I think you can combine this line like result = parseResult(subValues, subFields).", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466628770", "createdAt": "2020-08-06T19:11:36Z", "author": {"login": "Luminarys"}, "path": "tools/query_verification/src/main/java/com/google/bigquery/BigQueryManager.java", "diffHunk": "@@ -279,8 +281,55 @@ public String getName() {\n             StandardSQLTypeName type = fields.get(i).getType().getStandardType();\n \n             Object result;\n-            // TODO Convert value to appropriate Java type\n-            result = value.getStringValue();\n+            try {\n+                switch (type) {\n+                    case BOOL:\n+                        // returns boolean\n+                        result = value.getBooleanValue();\n+                        break;\n+                    case FLOAT64:\n+                        // returns double\n+                        result = value.getDoubleValue();\n+                        break;\n+                    case INT64:\n+                        // returns long\n+                        result = value.getLongValue();\n+                        break;\n+                    case NUMERIC:\n+                        // returns BigDecimal\n+                        result = value.getNumericValue();\n+                        break;\n+                    case STRUCT:\n+                        FieldList subFields = fields.get(i).getSubFields();\n+                        FieldValueList subValues = value.getRecordValue();\n+                        List<Object> subResults = parseResults(subValues, subFields);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62580d98c6616be21af5770c7c2c5c6843f09868"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYyOTg1NA==", "bodyText": "I would recommend making these separate cases and leaving a comment that we choose to use the String representation if the type is not known otherwise.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466629854", "createdAt": "2020-08-06T19:13:37Z", "author": {"login": "Luminarys"}, "path": "tools/query_verification/src/main/java/com/google/bigquery/BigQueryManager.java", "diffHunk": "@@ -279,8 +281,55 @@ public String getName() {\n             StandardSQLTypeName type = fields.get(i).getType().getStandardType();\n \n             Object result;\n-            // TODO Convert value to appropriate Java type\n-            result = value.getStringValue();\n+            try {\n+                switch (type) {\n+                    case BOOL:\n+                        // returns boolean\n+                        result = value.getBooleanValue();\n+                        break;\n+                    case FLOAT64:\n+                        // returns double\n+                        result = value.getDoubleValue();\n+                        break;\n+                    case INT64:\n+                        // returns long\n+                        result = value.getLongValue();\n+                        break;\n+                    case NUMERIC:\n+                        // returns BigDecimal\n+                        result = value.getNumericValue();\n+                        break;\n+                    case STRUCT:\n+                        FieldList subFields = fields.get(i).getSubFields();\n+                        FieldValueList subValues = value.getRecordValue();\n+                        List<Object> subResults = parseResults(subValues, subFields);\n+\n+                        // returns List<Object>\n+                        result = subResults;\n+                        break;\n+                    case DATE:\n+                        // returns Date\n+                        result = new SimpleDateFormat(\"yyyy-MM-dd\").parse(value.getStringValue());\n+                        break;\n+                    case DATETIME:\n+                        // returns Date\n+                        result = new SimpleDateFormat(\"yyyy-MM-dd'T'hh:mm:ss.SSSSSS\").parse(value.getStringValue());\n+                        break;\n+                    case TIME:\n+                        // returns Date\n+                        result = new SimpleDateFormat(\"hh:mm:ss.SSSSSS\").parse(value.getStringValue());\n+                        break;\n+                    case TIMESTAMP:\n+                        // returns Date\n+                        result = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss.SSSSSS zzz\").parse(value.getStringValue());\n+                        break;\n+                    case STRING: default:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62580d98c6616be21af5770c7c2c5c6843f09868"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzNDc0NQ==", "bodyText": "I think we can remove all these // returns comments, the type information is already present", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466634745", "createdAt": "2020-08-06T19:23:20Z", "author": {"login": "Luminarys"}, "path": "tools/query_verification/src/main/java/com/google/bigquery/BigQueryManager.java", "diffHunk": "@@ -279,8 +281,55 @@ public String getName() {\n             StandardSQLTypeName type = fields.get(i).getType().getStandardType();\n \n             Object result;\n-            // TODO Convert value to appropriate Java type\n-            result = value.getStringValue();\n+            try {\n+                switch (type) {\n+                    case BOOL:\n+                        // returns boolean", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62580d98c6616be21af5770c7c2c5c6843f09868"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzNzQxNQ==", "bodyText": "Why does this have to be an if condition? I would assume we'd want to return information around differences in row counts etc.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466637415", "createdAt": "2020-08-06T19:28:22Z", "author": {"login": "Luminarys"}, "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java", "diffHunk": "@@ -112,5 +117,43 @@ public void verifyDataAware() throws InterruptedException {\n         System.out.println(\"Data-Aware Verification Completed\");\n     }\n \n+    /**\n+     * Finds extra and missing results by locating the differences between the results.\n+     * @param migratedResults Parsed results returned from BQ\n+     * @param originalResults Parsed results returned from original data warehouse service\n+     * @return Differences classified as either extra or missing from migrated results.\n+     */\n+    public ResultDifferences compareResults(List<QueryJobResults> migratedResults, List<QueryJobResults> originalResults) {\n+        // Check if same amount of queries were run\n+        if (migratedResults.size() == originalResults.size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62580d98c6616be21af5770c7c2c5c6843f09868"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzNzY4NA==", "bodyText": "Seconding this. I also wonder why we even need this else branch since I think we should be able to produce a result difference no matter what the size of each result set is.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466637684", "createdAt": "2020-08-06T19:28:54Z", "author": {"login": "Luminarys"}, "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java", "diffHunk": "@@ -112,5 +117,43 @@ public void verifyDataAware() throws InterruptedException {\n         System.out.println(\"Data-Aware Verification Completed\");\n     }\n \n+    /**\n+     * Finds extra and missing results by locating the differences between the results.\n+     * @param migratedResults Parsed results returned from BQ\n+     * @param originalResults Parsed results returned from original data warehouse service\n+     * @return Differences classified as either extra or missing from migrated results.\n+     */\n+    public ResultDifferences compareResults(List<QueryJobResults> migratedResults, List<QueryJobResults> originalResults) {\n+        // Check if same amount of queries were run\n+        if (migratedResults.size() == originalResults.size()) {\n+            // Rows present in migrated query results, but not original query results\n+            List<List<Object>> extraResults = new ArrayList<List<Object>>();\n+\n+            // Rows present in original query results, but not migrated query results\n+            List<List<Object>> missingResults = new ArrayList<List<Object>>();\n+\n+            for (int i = 0; i < migratedResults.size(); i++) {\n+                QueryJobResults migratedJobResults = migratedResults.get(i);\n+\n+                QueryJobResults originalJobResults = originalResults.get(i);\n+                Set<List<Object>> missingResultsSet = originalJobResults.results();\n+\n+                for (List<Object> migratedQueryResults : migratedJobResults.results()) {\n+                    // Rows that exist in both results are removed from missing results set\n+                    if (!missingResultsSet.remove(migratedQueryResults)) {\n+                        // Rows in the migrated results that don't exist in original results are classified as extra in migrated results\n+                        extraResults.add(migratedQueryResults);\n+                    }\n+                }\n+\n+                // Any leftover rows in the original results without a match are classified as missing in migrated results\n+                missingResults.addAll(missingResultsSet);\n+            }\n+\n+            return ResultDifferences.create(extraResults, missingResults);\n+        } else {\n+            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3OTg4NQ=="}, "originalCommit": {"oid": "62580d98c6616be21af5770c7c2c5c6843f09868"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25635b95af67bb2d252b785bfb61fecc990f7757", "author": {"user": {"login": "krishsuchdev", "name": "Krish Suchdev"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/25635b95af67bb2d252b785bfb61fecc990f7757", "committedDate": "2020-08-06T22:25:36Z", "message": "Add unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6763191ea892f1f4abd258e4da02a72510c05cf1", "author": {"user": {"login": "krishsuchdev", "name": "Krish Suchdev"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/6763191ea892f1f4abd258e4da02a72510c05cf1", "committedDate": "2020-08-06T22:28:05Z", "message": "Improved compare results error handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "343196288dbabd69bc1005dab7b7453b86e206b0", "author": {"user": {"login": "krishsuchdev", "name": "Krish Suchdev"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/343196288dbabd69bc1005dab7b7453b86e206b0", "committedDate": "2020-08-06T22:30:12Z", "message": "Parse results formatting changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyOTQxODcx", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#pullrequestreview-462941871", "createdAt": "2020-08-06T23:25:15Z", "commit": {"oid": "343196288dbabd69bc1005dab7b7453b86e206b0"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMzoyNToxNVrOG9Ha1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMzozMjo1OVrOG9HjfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjczNzg3Ng==", "bodyText": "Don't forget the break", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466737876", "createdAt": "2020-08-06T23:25:15Z", "author": {"login": "Luminarys"}, "path": "tools/query_verification/src/main/java/com/google/bigquery/BigQueryManager.java", "diffHunk": "@@ -279,8 +281,46 @@ public String getName() {\n             StandardSQLTypeName type = fields.get(i).getType().getStandardType();\n \n             Object result;\n-            // TODO Convert value to appropriate Java type\n-            result = value.getStringValue();\n+            try {\n+                switch (type) {\n+                    case BOOL:\n+                        result = value.getBooleanValue();\n+                        break;\n+                    case FLOAT64:\n+                        result = value.getDoubleValue();\n+                        break;\n+                    case INT64:\n+                        result = value.getLongValue();\n+                        break;\n+                    case NUMERIC:\n+                        result = value.getNumericValue();\n+                        break;\n+                    case STRUCT:\n+                        FieldList subFields = fields.get(i).getSubFields();\n+                        FieldValueList subValues = value.getRecordValue();\n+                        result = parseResults(subValues, subFields);\n+                        break;\n+                    case DATE:\n+                        result = new SimpleDateFormat(\"yyyy-MM-dd\").parse(value.getStringValue());\n+                        break;\n+                    case DATETIME:\n+                        result = new SimpleDateFormat(\"yyyy-MM-dd'T'hh:mm:ss.SSSSSS\").parse(value.getStringValue());\n+                        break;\n+                    case TIME:\n+                        result = new SimpleDateFormat(\"hh:mm:ss.SSSSSS\").parse(value.getStringValue());\n+                        break;\n+                    case TIMESTAMP:\n+                        result = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss.SSSSSS zzz\").parse(value.getStringValue());\n+                        break;\n+                    case STRING:\n+                        result = value.getStringValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "343196288dbabd69bc1005dab7b7453b86e206b0"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjczODQyMA==", "bodyText": "I see, makes sense then. Thanks!", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466738420", "createdAt": "2020-08-06T23:27:16Z", "author": {"login": "Luminarys"}, "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java", "diffHunk": "@@ -112,5 +117,43 @@ public void verifyDataAware() throws InterruptedException {\n         System.out.println(\"Data-Aware Verification Completed\");\n     }\n \n+    /**\n+     * Finds extra and missing results by locating the differences between the results.\n+     * @param migratedResults Parsed results returned from BQ\n+     * @param originalResults Parsed results returned from original data warehouse service\n+     * @return Differences classified as either extra or missing from migrated results.\n+     */\n+    public ResultDifferences compareResults(List<QueryJobResults> migratedResults, List<QueryJobResults> originalResults) {\n+        // Check if same amount of queries were run\n+        if (migratedResults.size() == originalResults.size()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzNzQxNQ=="}, "originalCommit": {"oid": "62580d98c6616be21af5770c7c2c5c6843f09868"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc0MDA5Mw==", "bodyText": "Zihao did you want each object to be Optional or did you want an empty Optional added like this? I actually think null is ok in this situation.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r466740093", "createdAt": "2020-08-06T23:32:59Z", "author": {"login": "Luminarys"}, "path": "tools/query_verification/src/main/java/com/google/bigquery/BigQueryManager.java", "diffHunk": "@@ -279,8 +281,46 @@ public String getName() {\n             StandardSQLTypeName type = fields.get(i).getType().getStandardType();\n \n             Object result;\n-            // TODO Convert value to appropriate Java type\n-            result = value.getStringValue();\n+            try {\n+                switch (type) {\n+                    case BOOL:\n+                        result = value.getBooleanValue();\n+                        break;\n+                    case FLOAT64:\n+                        result = value.getDoubleValue();\n+                        break;\n+                    case INT64:\n+                        result = value.getLongValue();\n+                        break;\n+                    case NUMERIC:\n+                        result = value.getNumericValue();\n+                        break;\n+                    case STRUCT:\n+                        FieldList subFields = fields.get(i).getSubFields();\n+                        FieldValueList subValues = value.getRecordValue();\n+                        result = parseResults(subValues, subFields);\n+                        break;\n+                    case DATE:\n+                        result = new SimpleDateFormat(\"yyyy-MM-dd\").parse(value.getStringValue());\n+                        break;\n+                    case DATETIME:\n+                        result = new SimpleDateFormat(\"yyyy-MM-dd'T'hh:mm:ss.SSSSSS\").parse(value.getStringValue());\n+                        break;\n+                    case TIME:\n+                        result = new SimpleDateFormat(\"hh:mm:ss.SSSSSS\").parse(value.getStringValue());\n+                        break;\n+                    case TIMESTAMP:\n+                        result = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss.SSSSSS zzz\").parse(value.getStringValue());\n+                        break;\n+                    case STRING:\n+                        result = value.getStringValue();\n+                    default:\n+                        // Handle unknown/unsupported types as String\n+                        result = value.getStringValue();\n+                }\n+            } catch (ParseException e) {\n+                result = Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "343196288dbabd69bc1005dab7b7453b86e206b0"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d44f4b3d41f2e9d412bf13916480a9be53b2103b", "author": {"user": {"login": "krishsuchdev", "name": "Krish Suchdev"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/d44f4b3d41f2e9d412bf13916480a9be53b2103b", "committedDate": "2020-08-07T00:29:10Z", "message": "Add break"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NjI1MTc3", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#pullrequestreview-464625177", "createdAt": "2020-08-10T22:16:08Z", "commit": {"oid": "343196288dbabd69bc1005dab7b7453b86e206b0"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjoxNjowOFrOG-hqJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjoxNjo0OVrOG-hrMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIxNjM1OA==", "bodyText": "I think Optional.empty() looks good. My impression is java guide suggests to use optional whenever applicable.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r468216358", "createdAt": "2020-08-10T22:16:08Z", "author": {"login": "yzhvictor"}, "path": "tools/query_verification/src/main/java/com/google/bigquery/BigQueryManager.java", "diffHunk": "@@ -279,8 +281,46 @@ public String getName() {\n             StandardSQLTypeName type = fields.get(i).getType().getStandardType();\n \n             Object result;\n-            // TODO Convert value to appropriate Java type\n-            result = value.getStringValue();\n+            try {\n+                switch (type) {\n+                    case BOOL:\n+                        result = value.getBooleanValue();\n+                        break;\n+                    case FLOAT64:\n+                        result = value.getDoubleValue();\n+                        break;\n+                    case INT64:\n+                        result = value.getLongValue();\n+                        break;\n+                    case NUMERIC:\n+                        result = value.getNumericValue();\n+                        break;\n+                    case STRUCT:\n+                        FieldList subFields = fields.get(i).getSubFields();\n+                        FieldValueList subValues = value.getRecordValue();\n+                        result = parseResults(subValues, subFields);\n+                        break;\n+                    case DATE:\n+                        result = new SimpleDateFormat(\"yyyy-MM-dd\").parse(value.getStringValue());\n+                        break;\n+                    case DATETIME:\n+                        result = new SimpleDateFormat(\"yyyy-MM-dd'T'hh:mm:ss.SSSSSS\").parse(value.getStringValue());\n+                        break;\n+                    case TIME:\n+                        result = new SimpleDateFormat(\"hh:mm:ss.SSSSSS\").parse(value.getStringValue());\n+                        break;\n+                    case TIMESTAMP:\n+                        result = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss.SSSSSS zzz\").parse(value.getStringValue());\n+                        break;\n+                    case STRING:\n+                        result = value.getStringValue();\n+                    default:\n+                        // Handle unknown/unsupported types as String\n+                        result = value.getStringValue();\n+                }\n+            } catch (ParseException e) {\n+                result = Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc0MDA5Mw=="}, "originalCommit": {"oid": "343196288dbabd69bc1005dab7b7453b86e206b0"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIxNjYyNw==", "bodyText": "Adding a warning sounds good, since it can help us identify the unsupported types.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/139#discussion_r468216627", "createdAt": "2020-08-10T22:16:49Z", "author": {"login": "yzhvictor"}, "path": "tools/query_verification/src/main/java/com/google/bigquery/BigQueryManager.java", "diffHunk": "@@ -279,8 +281,55 @@ public String getName() {\n             StandardSQLTypeName type = fields.get(i).getType().getStandardType();\n \n             Object result;\n-            // TODO Convert value to appropriate Java type\n-            result = value.getStringValue();\n+            try {\n+                switch (type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU4MDM1Ng=="}, "originalCommit": {"oid": "62580d98c6616be21af5770c7c2c5c6843f09868"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5d29a4d05ef1ef5fdafbdc916dad280ee4eb798", "author": {"user": {"login": "krishsuchdev", "name": "Krish Suchdev"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/a5d29a4d05ef1ef5fdafbdc916dad280ee4eb798", "committedDate": "2020-08-11T13:16:49Z", "message": "Add warning for unsupported type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "335a01fc835e7aedca5d894f8ba50ca1ae0ef74b", "author": {"user": {"login": "krishsuchdev", "name": "Krish Suchdev"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/335a01fc835e7aedca5d894f8ba50ca1ae0ef74b", "committedDate": "2020-08-11T13:19:05Z", "message": "Merge branch 'master' into compareResults"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 727, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}