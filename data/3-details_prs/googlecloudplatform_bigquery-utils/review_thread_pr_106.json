{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwNTUwMTUy", "number": 106, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTozNToyMlrOEQQWVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzoxOTozN1rOEQTCTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDgwNTMzOnYy", "diffSide": "RIGHT", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTozNToyMlrOG0TpGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTozNToyMlrOG0TpGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUwMDk1NA==", "bodyText": "I think we should prefer a loop like for (int i = 0; i < jobInfos.size(); i++) { JobInfo jobInfo = jobInfos.get(i); ...  over using listIterator, I believe it should be more clear as opposed to using the iterator methods", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/106#discussion_r457500954", "createdAt": "2020-07-20T15:35:22Z", "author": {"login": "Luminarys"}, "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java", "diffHunk": "@@ -70,37 +66,49 @@ public void verifyDataFree() {\n                 }\n \n                 List<TableId> tableIds = QueryVerifier.getTableIdsFromDdlSchema(migratedSchema);\n-                for (TableId tableId : tableIds) {\n-                    Table table = bigQuery.getTable(tableId);\n-                    tables.add(table);\n-                }\n+                tableIds.forEach(tableId -> tables.add(bigQuery.getTable(tableId)));\n             }\n \n             if (tables.isEmpty()) {\n                 System.out.println(migratedSchema.path() + \" is not correctly formatted.\");\n             }\n         }\n \n-        // Create dry-run job\n-        JobInfo jobInfo = configureJob(migratedQuery.query(), true);\n+        // Create dry-run jobs\n+        List<JobInfo> jobInfos = getJobInfosFromQuery(migratedQuery, true);\n+        ListIterator<JobInfo> jobInfoListIterator = jobInfos.listIterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a381a354a88c74a8abddf65b793870199a9603dc"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTI0NTU3OnYy", "diffSide": "RIGHT", "path": "tools/query_verification/src/test/java/com/google/bigquery/QueryVerifierTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzoxOTozN1rOG0X1fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDoxNTo1NFrOG0dt4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2OTY2Mg==", "bodyText": "I would inline this into the return and then remove the {} from the lambda so it looks like jobInfo -> jobInfo.getConfiguration().getQuery() (I think this is valid syntax)", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/106#discussion_r457569662", "createdAt": "2020-07-20T17:19:37Z", "author": {"login": "Luminarys"}, "path": "tools/query_verification/src/test/java/com/google/bigquery/QueryVerifierTest.java", "diffHunk": "@@ -102,4 +103,34 @@ public void testGetMultipleTableIdFromDdlSchema() {\n         assertEquals(tableId.getTable(), \"secondTable\");\n     }\n \n+    @Test\n+    public void testGetJobInfoFromQuery() {\n+        String queryContents = \"SELECT * FROM table\";\n+        QueryVerificationQuery query = QueryVerificationQuery.create(queryContents, \"\");\n+        List<JobInfo> jobInfos = QueryVerifier.getJobInfosFromQuery(query, true);\n+\n+        assertEquals(jobInfos.size(), 1);\n+\n+        QueryJobConfiguration queryJobConfiguration = jobInfos.get(0).getConfiguration();\n+        assertEquals(queryJobConfiguration.getQuery(), \"SELECT * FROM table\");\n+    }\n+\n+    @Test\n+    public void testGetMultipleJobInfosFromQuery() {\n+        String queryContents = \"SELECT * FROM table1;\\nSELECT column1 FROM table2; SELECT column2 FROM table2;\";\n+        QueryVerificationQuery query = QueryVerificationQuery.create(queryContents, \"\");\n+        List<JobInfo> jobInfos = QueryVerifier.getJobInfosFromQuery(query, true);\n+\n+        assertEquals(jobInfos.size(), 3);\n+\n+        List<String> queries = jobInfos.stream().map(jobInfo -> {\n+            QueryJobConfiguration queryJobConfiguration = jobInfo.getConfiguration();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba362087e071059d69674d354b8661ebdfb4d29b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU3ODU5Nw==", "bodyText": "Only reason I didn't do that is because that actually requires manual casting since .getConfiguration() returns a JobConfiguration type (super class of QueryJobConfiguration) and doesn't have a .getQuery() method", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/106#discussion_r457578597", "createdAt": "2020-07-20T17:35:07Z", "author": {"login": "krishsuchdev"}, "path": "tools/query_verification/src/test/java/com/google/bigquery/QueryVerifierTest.java", "diffHunk": "@@ -102,4 +103,34 @@ public void testGetMultipleTableIdFromDdlSchema() {\n         assertEquals(tableId.getTable(), \"secondTable\");\n     }\n \n+    @Test\n+    public void testGetJobInfoFromQuery() {\n+        String queryContents = \"SELECT * FROM table\";\n+        QueryVerificationQuery query = QueryVerificationQuery.create(queryContents, \"\");\n+        List<JobInfo> jobInfos = QueryVerifier.getJobInfosFromQuery(query, true);\n+\n+        assertEquals(jobInfos.size(), 1);\n+\n+        QueryJobConfiguration queryJobConfiguration = jobInfos.get(0).getConfiguration();\n+        assertEquals(queryJobConfiguration.getQuery(), \"SELECT * FROM table\");\n+    }\n+\n+    @Test\n+    public void testGetMultipleJobInfosFromQuery() {\n+        String queryContents = \"SELECT * FROM table1;\\nSELECT column1 FROM table2; SELECT column2 FROM table2;\";\n+        QueryVerificationQuery query = QueryVerificationQuery.create(queryContents, \"\");\n+        List<JobInfo> jobInfos = QueryVerifier.getJobInfosFromQuery(query, true);\n+\n+        assertEquals(jobInfos.size(), 3);\n+\n+        List<String> queries = jobInfos.stream().map(jobInfo -> {\n+            QueryJobConfiguration queryJobConfiguration = jobInfo.getConfiguration();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2OTY2Mg=="}, "originalCommit": {"oid": "ba362087e071059d69674d354b8661ebdfb4d29b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0OTE5Mw==", "bodyText": "QueryJobConfiguration queryJobConfiguration = jobInfo.getConfiguration(); doesn't seem to have a downcast, is it not needed when you assign like this?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/106#discussion_r457649193", "createdAt": "2020-07-20T19:43:20Z", "author": {"login": "Luminarys"}, "path": "tools/query_verification/src/test/java/com/google/bigquery/QueryVerifierTest.java", "diffHunk": "@@ -102,4 +103,34 @@ public void testGetMultipleTableIdFromDdlSchema() {\n         assertEquals(tableId.getTable(), \"secondTable\");\n     }\n \n+    @Test\n+    public void testGetJobInfoFromQuery() {\n+        String queryContents = \"SELECT * FROM table\";\n+        QueryVerificationQuery query = QueryVerificationQuery.create(queryContents, \"\");\n+        List<JobInfo> jobInfos = QueryVerifier.getJobInfosFromQuery(query, true);\n+\n+        assertEquals(jobInfos.size(), 1);\n+\n+        QueryJobConfiguration queryJobConfiguration = jobInfos.get(0).getConfiguration();\n+        assertEquals(queryJobConfiguration.getQuery(), \"SELECT * FROM table\");\n+    }\n+\n+    @Test\n+    public void testGetMultipleJobInfosFromQuery() {\n+        String queryContents = \"SELECT * FROM table1;\\nSELECT column1 FROM table2; SELECT column2 FROM table2;\";\n+        QueryVerificationQuery query = QueryVerificationQuery.create(queryContents, \"\");\n+        List<JobInfo> jobInfos = QueryVerifier.getJobInfosFromQuery(query, true);\n+\n+        assertEquals(jobInfos.size(), 3);\n+\n+        List<String> queries = jobInfos.stream().map(jobInfo -> {\n+            QueryJobConfiguration queryJobConfiguration = jobInfo.getConfiguration();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2OTY2Mg=="}, "originalCommit": {"oid": "ba362087e071059d69674d354b8661ebdfb4d29b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2NjAxNw==", "bodyText": "So it looks like JobConfiguration is an abstract class and .getConfiguration() instead returns <C extends JobConfiguration>", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/106#discussion_r457666017", "createdAt": "2020-07-20T20:15:54Z", "author": {"login": "krishsuchdev"}, "path": "tools/query_verification/src/test/java/com/google/bigquery/QueryVerifierTest.java", "diffHunk": "@@ -102,4 +103,34 @@ public void testGetMultipleTableIdFromDdlSchema() {\n         assertEquals(tableId.getTable(), \"secondTable\");\n     }\n \n+    @Test\n+    public void testGetJobInfoFromQuery() {\n+        String queryContents = \"SELECT * FROM table\";\n+        QueryVerificationQuery query = QueryVerificationQuery.create(queryContents, \"\");\n+        List<JobInfo> jobInfos = QueryVerifier.getJobInfosFromQuery(query, true);\n+\n+        assertEquals(jobInfos.size(), 1);\n+\n+        QueryJobConfiguration queryJobConfiguration = jobInfos.get(0).getConfiguration();\n+        assertEquals(queryJobConfiguration.getQuery(), \"SELECT * FROM table\");\n+    }\n+\n+    @Test\n+    public void testGetMultipleJobInfosFromQuery() {\n+        String queryContents = \"SELECT * FROM table1;\\nSELECT column1 FROM table2; SELECT column2 FROM table2;\";\n+        QueryVerificationQuery query = QueryVerificationQuery.create(queryContents, \"\");\n+        List<JobInfo> jobInfos = QueryVerifier.getJobInfosFromQuery(query, true);\n+\n+        assertEquals(jobInfos.size(), 3);\n+\n+        List<String> queries = jobInfos.stream().map(jobInfo -> {\n+            QueryJobConfiguration queryJobConfiguration = jobInfo.getConfiguration();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2OTY2Mg=="}, "originalCommit": {"oid": "ba362087e071059d69674d354b8661ebdfb4d29b"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3042, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}