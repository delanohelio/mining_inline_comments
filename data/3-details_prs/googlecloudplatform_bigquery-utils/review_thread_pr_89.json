{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2NTQxNDk5", "number": 89, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMTowNzoyMlrOEMtJfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMjozODo1M1rOENFGTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzU4MDc4OnYy", "diffSide": "RIGHT", "path": "tools/query_verification/src/test/resources/schema1.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMTowNzoyMlrOGu-MpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMTowNzoyMlrOGu-MpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwNjcyNA==", "bodyText": "Do you need this if it only contains 1 property, will this work:\n[\n{\n\"fields\": [],\n\"tableReference\": {\n....\n}\n}\n]", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/89#discussion_r451906724", "createdAt": "2020-07-09T01:07:22Z", "author": {"login": "yzhvictor"}, "path": "tools/query_verification/src/test/resources/schema1.json", "diffHunk": "@@ -0,0 +1,11 @@\n+[\n+  {\n+    \"schema\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95b43a5d64312357c289693ac89b4a317328bb63"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzU4MjI0OnYy", "diffSide": "RIGHT", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMTowODoxOVrOGu-Njw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMTowODoxOVrOGu-Njw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwNjk1OQ==", "bodyText": "Should we check length before accessing?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/89#discussion_r451906959", "createdAt": "2020-07-09T01:08:19Z", "author": {"login": "yzhvictor"}, "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java", "diffHunk": "@@ -54,4 +101,28 @@ public void verifyDataAware() {\n         System.out.printf(\"Data-Aware Verification %s\\n\", verificationResult ? \"Succeeded\" : \"Failed\");\n     }\n \n+    /**\n+     * Reads JSON schema to create table fields based on the schema\n+     * @param queryVerificationSchema Schema to read from\n+     * @return New table info\n+     */\n+    public static TableInfo getTableInfoFromJsonSchema(QueryVerificationSchema queryVerificationSchema) {\n+        // TODO Support multiple table schema\n+        JsonObject schemaObject = queryVerificationSchema.getJsonArray().get(0).getAsJsonObject();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95b43a5d64312357c289693ac89b4a317328bb63"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzU4NDE4OnYy", "diffSide": "RIGHT", "path": "tools/query_verification/src/main/java/com/google/bigquery/BigQuerySchemaJsonDeserializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMTowOTozMFrOGu-OuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMTowOTozMFrOGu-OuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwNzI1Ng==", "bodyText": "Maybe add more comments regarding why using LegacySQLTypeName", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/89#discussion_r451907256", "createdAt": "2020-07-09T01:09:30Z", "author": {"login": "yzhvictor"}, "path": "tools/query_verification/src/main/java/com/google/bigquery/BigQuerySchemaJsonDeserializer.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.google.bigquery;\n+\n+import com.google.cloud.bigquery.Field;\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.LegacySQLTypeName;\n+import com.google.cloud.bigquery.StandardSQLTypeName;\n+import com.google.gson.*;\n+\n+import java.lang.reflect.Type;\n+\n+/**\n+ * Class to deserialize the JSON schema to BigQuery fields\n+ */\n+public class BigQuerySchemaJsonDeserializer implements JsonDeserializer<FieldList> {\n+\n+    @Override\n+    public FieldList deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {\n+        JsonArray fieldsArray = jsonElement.getAsJsonArray();\n+\n+        for (JsonElement fieldElement : fieldsArray) {\n+            JsonObject fieldObject = fieldElement.getAsJsonObject();\n+\n+            // Field class uses LegacySQLTypeName for type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95b43a5d64312357c289693ac89b4a317328bb63"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDkxNDY4OnYy", "diffSide": "RIGHT", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxOToxNjoyMVrOGved_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxOToxNjoyMVrOGved_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQzNTQ1Mg==", "bodyText": "Although this saves some lines of code I'd advise against catching a NPE as it could be triggered for a variety of reasons. If possible I'd recommend handling null objects in the verifier code even if it makes a bit more verbose.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/89#discussion_r452435452", "createdAt": "2020-07-09T19:16:21Z", "author": {"login": "Luminarys"}, "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java", "diffHunk": "@@ -38,7 +44,48 @@ public void verify() {\n     public void verifyDataFree() {\n         boolean verificationResult = false;\n \n-        // TODO Implement data free verification\n+        BigQuery bigQuery = BigQueryOptions.getDefaultInstance().getService();\n+\n+        List<Table> tables = new ArrayList<Table>();\n+\n+        // Create tables based on schema\n+        if (migratedSchema != null) {\n+            try {\n+                if (migratedSchema.isInJsonFormat()) {\n+                    TableInfo tableInfo = QueryVerifier.getTableInfoFromJsonSchema(migratedSchema);\n+                    Table table = bigQuery.create(tableInfo);\n+                    tables.add(table);\n+                } else {\n+                    // TODO Load schema from DDL\n+                }\n+            } catch (NullPointerException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578baa20ae5784322f9bd308bd268a963da7c595"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDkyNTcyOnYy", "diffSide": "RIGHT", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxOToxOToyN1rOGvekvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxOToxOToyN1rOGvekvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQzNzE4Mw==", "bodyText": "I assume in the case of a bad query we'd get back some error information from queryJob, it's probably worth collecting that if we can.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/89#discussion_r452437183", "createdAt": "2020-07-09T19:19:27Z", "author": {"login": "Luminarys"}, "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java", "diffHunk": "@@ -38,7 +44,48 @@ public void verify() {\n     public void verifyDataFree() {\n         boolean verificationResult = false;\n \n-        // TODO Implement data free verification\n+        BigQuery bigQuery = BigQueryOptions.getDefaultInstance().getService();\n+\n+        List<Table> tables = new ArrayList<Table>();\n+\n+        // Create tables based on schema\n+        if (migratedSchema != null) {\n+            try {\n+                if (migratedSchema.isInJsonFormat()) {\n+                    TableInfo tableInfo = QueryVerifier.getTableInfoFromJsonSchema(migratedSchema);\n+                    Table table = bigQuery.create(tableInfo);\n+                    tables.add(table);\n+                } else {\n+                    // TODO Load schema from DDL\n+                }\n+            } catch (NullPointerException e) {\n+                System.out.println(migratedSchema.path() + \" is not correctly formatted.\");\n+            }\n+        }\n+\n+        // Create dry-run job\n+        QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(migratedQuery.query())\n+                .setDryRun(true)\n+                .build();\n+        JobId jobId = JobId.of(UUID.randomUUID().toString());\n+        JobInfo jobInfo = JobInfo.newBuilder(queryConfig)\n+                .setJobId(jobId)\n+                .build();\n+\n+        // TODO Support multiple queries\n+\n+        try {\n+            // Run dry-run\n+            Job queryJob = bigQuery.create(jobInfo);\n+            verificationResult = queryJob.getStatistics() != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578baa20ae5784322f9bd308bd268a963da7c595"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTUwNDc5OnYy", "diffSide": "RIGHT", "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMjozODo1M1rOGvkHeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMToyNzoyNlrOGvm9Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUyNzk5Mw==", "bodyText": "Have you tested an exception is thrown due to a bad query, not just due to something like a failure to connect/bad credentials etc?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/89#discussion_r452527993", "createdAt": "2020-07-09T22:38:53Z", "author": {"login": "Luminarys"}, "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java", "diffHunk": "@@ -38,7 +44,49 @@ public void verify() {\n     public void verifyDataFree() {\n         boolean verificationResult = false;\n \n-        // TODO Implement data free verification\n+        BigQuery bigQuery = BigQueryOptions.getDefaultInstance().getService();\n+\n+        List<Table> tables = new ArrayList<Table>();\n+\n+        // Create tables based on schema\n+        if (migratedSchema != null) {\n+            if (migratedSchema.isInJsonFormat()) {\n+                TableInfo tableInfo = QueryVerifier.getTableInfoFromJsonSchema(migratedSchema);\n+                if (tableInfo != null) {\n+                    Table table = bigQuery.create(tableInfo);\n+                    tables.add(table);\n+                } else {\n+                    System.out.println(migratedSchema.path() + \" is not correctly formatted.\");\n+                }\n+            } else {\n+                // TODO Load schema from DDL\n+            }\n+        }\n+\n+        // Create dry-run job\n+        QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(migratedQuery.query())\n+                .setDryRun(true)\n+                .build();\n+        JobId jobId = JobId.of(UUID.randomUUID().toString());\n+        JobInfo jobInfo = JobInfo.newBuilder(queryConfig)\n+                .setJobId(jobId)\n+                .build();\n+\n+        // TODO Support multiple queries\n+\n+        try {\n+            // Run dry-run\n+            Job queryJob = bigQuery.create(jobInfo);\n+            verificationResult = queryJob.getStatus().getState() == JobStatus.State.DONE;\n+        } catch (BigQueryException e) {\n+            // Print out syntax/semantic errors returned from BQ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0220ede92a935af662f0cdd028a4477c25d264ff"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0MTE0NQ==", "bodyText": "I've found that if the query is invalid from a syntax or semantic error, BQ throws an exception so I can just print the error message in catch block.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/89#discussion_r452541145", "createdAt": "2020-07-09T23:20:41Z", "author": {"login": "krishsuchdev"}, "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java", "diffHunk": "@@ -38,7 +44,49 @@ public void verify() {\n     public void verifyDataFree() {\n         boolean verificationResult = false;\n \n-        // TODO Implement data free verification\n+        BigQuery bigQuery = BigQueryOptions.getDefaultInstance().getService();\n+\n+        List<Table> tables = new ArrayList<Table>();\n+\n+        // Create tables based on schema\n+        if (migratedSchema != null) {\n+            if (migratedSchema.isInJsonFormat()) {\n+                TableInfo tableInfo = QueryVerifier.getTableInfoFromJsonSchema(migratedSchema);\n+                if (tableInfo != null) {\n+                    Table table = bigQuery.create(tableInfo);\n+                    tables.add(table);\n+                } else {\n+                    System.out.println(migratedSchema.path() + \" is not correctly formatted.\");\n+                }\n+            } else {\n+                // TODO Load schema from DDL\n+            }\n+        }\n+\n+        // Create dry-run job\n+        QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(migratedQuery.query())\n+                .setDryRun(true)\n+                .build();\n+        JobId jobId = JobId.of(UUID.randomUUID().toString());\n+        JobInfo jobInfo = JobInfo.newBuilder(queryConfig)\n+                .setJobId(jobId)\n+                .build();\n+\n+        // TODO Support multiple queries\n+\n+        try {\n+            // Run dry-run\n+            Job queryJob = bigQuery.create(jobInfo);\n+            verificationResult = queryJob.getStatus().getState() == JobStatus.State.DONE;\n+        } catch (BigQueryException e) {\n+            // Print out syntax/semantic errors returned from BQ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUyNzk5Mw=="}, "originalCommit": {"oid": "0220ede92a935af662f0cdd028a4477c25d264ff"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3NDU2Mw==", "bodyText": "Ok that should be good for now then, thanks!", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/89#discussion_r452574563", "createdAt": "2020-07-10T01:27:26Z", "author": {"login": "Luminarys"}, "path": "tools/query_verification/src/main/java/com/google/bigquery/QueryVerifier.java", "diffHunk": "@@ -38,7 +44,49 @@ public void verify() {\n     public void verifyDataFree() {\n         boolean verificationResult = false;\n \n-        // TODO Implement data free verification\n+        BigQuery bigQuery = BigQueryOptions.getDefaultInstance().getService();\n+\n+        List<Table> tables = new ArrayList<Table>();\n+\n+        // Create tables based on schema\n+        if (migratedSchema != null) {\n+            if (migratedSchema.isInJsonFormat()) {\n+                TableInfo tableInfo = QueryVerifier.getTableInfoFromJsonSchema(migratedSchema);\n+                if (tableInfo != null) {\n+                    Table table = bigQuery.create(tableInfo);\n+                    tables.add(table);\n+                } else {\n+                    System.out.println(migratedSchema.path() + \" is not correctly formatted.\");\n+                }\n+            } else {\n+                // TODO Load schema from DDL\n+            }\n+        }\n+\n+        // Create dry-run job\n+        QueryJobConfiguration queryConfig = QueryJobConfiguration.newBuilder(migratedQuery.query())\n+                .setDryRun(true)\n+                .build();\n+        JobId jobId = JobId.of(UUID.randomUUID().toString());\n+        JobInfo jobInfo = JobInfo.newBuilder(queryConfig)\n+                .setJobId(jobId)\n+                .build();\n+\n+        // TODO Support multiple queries\n+\n+        try {\n+            // Run dry-run\n+            Job queryJob = bigQuery.create(jobInfo);\n+            verificationResult = queryJob.getStatus().getState() == JobStatus.State.DONE;\n+        } catch (BigQueryException e) {\n+            // Print out syntax/semantic errors returned from BQ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUyNzk5Mw=="}, "originalCommit": {"oid": "0220ede92a935af662f0cdd028a4477c25d264ff"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3006, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}