{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4MjU1OTc5", "number": 171, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODoyNDo0MlrOEgG1PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODo0MTo0M1rOEgHOpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTAxODIxOnYy", "diffSide": "RIGHT", "path": "tools/zetasql_helper/zetasql_helper/fixer/fix_column_not_grouped.cc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODoyNDo0MlrOHMygFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTowNDozMFrOHMz3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE3MjM3Mg==", "bodyText": "Can you use absl::StatusOr if it is released?  so you don't have pass output as string*?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/171#discussion_r483172372", "createdAt": "2020-09-03T18:24:42Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/fixer/fix_column_not_grouped.cc", "diffHunk": "@@ -0,0 +1,160 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#include \"fix_column_not_grouped.h\"\n+\n+#include \"absl/strings/str_cat.h\"\n+#include \"zetasql/parser/parser.h\"\n+#include \"zetasql_helper/util/util.h\"\n+\n+\n+namespace bigquery::utils::zetasql_helper {\n+\n+\n+absl::Status\n+FixColumnNotGrouped(absl::string_view query, absl::string_view missing_column, int line_number, int column_number,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f903a871816d19338298cf3f0539ac3cd71f2aa8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE5NDY3OQ==", "bodyText": "absl::StatusOr is not released, but I use the one defined in ZetaSQL - zetasql_base:StatusOr", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/171#discussion_r483194679", "createdAt": "2020-09-03T19:04:30Z", "author": {"login": "mingen-pan"}, "path": "tools/zetasql_helper/zetasql_helper/fixer/fix_column_not_grouped.cc", "diffHunk": "@@ -0,0 +1,160 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#include \"fix_column_not_grouped.h\"\n+\n+#include \"absl/strings/str_cat.h\"\n+#include \"zetasql/parser/parser.h\"\n+#include \"zetasql_helper/util/util.h\"\n+\n+\n+namespace bigquery::utils::zetasql_helper {\n+\n+\n+absl::Status\n+FixColumnNotGrouped(absl::string_view query, absl::string_view missing_column, int line_number, int column_number,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE3MjM3Mg=="}, "originalCommit": {"oid": "f903a871816d19338298cf3f0539ac3cd71f2aa8"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTAyMzE5OnYy", "diffSide": "RIGHT", "path": "tools/zetasql_helper/zetasql_helper/fixer/fix_column_not_grouped.cc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODoyNjowMVrOHMyjCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODoyNjowMVrOHMyjCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE3MzEzMQ==", "bodyText": "nit: Cannot locate the ungrouped column \".\"", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/171#discussion_r483173131", "createdAt": "2020-09-03T18:26:01Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/fixer/fix_column_not_grouped.cc", "diffHunk": "@@ -0,0 +1,160 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#include \"fix_column_not_grouped.h\"\n+\n+#include \"absl/strings/str_cat.h\"\n+#include \"zetasql/parser/parser.h\"\n+#include \"zetasql_helper/util/util.h\"\n+\n+\n+namespace bigquery::utils::zetasql_helper {\n+\n+\n+absl::Status\n+FixColumnNotGrouped(absl::string_view query, absl::string_view missing_column, int line_number, int column_number,\n+                    std::string* fixed_query) {\n+\n+  std::unique_ptr<zetasql::ParserOutput> parser_output;\n+  auto options = BigQueryOptions();\n+  auto status = ParseStatement(query, options.GetParserOptions(), &parser_output);\n+  if (!status.ok()) {\n+    return status;\n+  }\n+\n+  missing_column = remove_backtick(missing_column);\n+\n+  auto offset = get_offset(query, line_number, column_number);\n+  if (offset == -1) {\n+    return absl::Status(absl::StatusCode::kInvalidArgument, \"Line and/or column numbers are incorrect\");\n+  }\n+  auto select_node = find_select_node_having_column(parser_output->statement(), offset, missing_column);\n+  if (select_node == nullptr) {\n+    return absl::Status(absl::StatusCode::kInvalidArgument, \"Cannot locate the ungrouped column\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f903a871816d19338298cf3f0539ac3cd71f2aa8"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTAzNzY3OnYy", "diffSide": "RIGHT", "path": "tools/zetasql_helper/zetasql_helper/fixer/fix_duplicate_columns.h", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODoyOTowOFrOHMyr-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTowODozN1rOHMz_Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE3NTQxNg==", "bodyText": "c++ style guide recommends function naming as \"AddTableEntry\"...", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/171#discussion_r483175416", "createdAt": "2020-09-03T18:29:08Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/fixer/fix_duplicate_columns.h", "diffHunk": "@@ -0,0 +1,59 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#ifndef ZETASQL_HELPER_FIX_DUPLICATE_COLUMNS_H\n+#define ZETASQL_HELPER_FIX_DUPLICATE_COLUMNS_H\n+\n+#include \"absl/status/status.h\"\n+#include \"absl/strings/string_view.h\"\n+#include \"zetasql/parser/parse_tree.h\"\n+\n+namespace bigquery::utils::zetasql_helper {\n+\n+// Fix the \"Duplicate Column\" error. It will add numeric suffix (e.g. _1, _2, ..) to the duplicate name\n+// as the new aliases for each duplicate columns.\n+// Input:\n+// query: incorrect SQL with the error\n+// duplicate_column_name: name of the duplicate columns\n+//\n+// The function will assign the fixed query to the fixed_query pointer\n+absl::Status FixDuplicateColumns(absl::string_view query, absl::string_view duplicate_column_name,\n+                                 std::string* fixed_query);\n+\n+\n+// Find the ASTSelectList Node having duplicate columns, whose name is the input name.\n+const zetasql::ASTSelectList*\n+find_select_list_with_duplicate_columns(const zetasql::ASTNode& node, absl::string_view column_name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f903a871816d19338298cf3f0539ac3cd71f2aa8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE5NjcwNw==", "bodyText": "Have changed the style", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/171#discussion_r483196707", "createdAt": "2020-09-03T19:08:37Z", "author": {"login": "mingen-pan"}, "path": "tools/zetasql_helper/zetasql_helper/fixer/fix_duplicate_columns.h", "diffHunk": "@@ -0,0 +1,59 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#ifndef ZETASQL_HELPER_FIX_DUPLICATE_COLUMNS_H\n+#define ZETASQL_HELPER_FIX_DUPLICATE_COLUMNS_H\n+\n+#include \"absl/status/status.h\"\n+#include \"absl/strings/string_view.h\"\n+#include \"zetasql/parser/parse_tree.h\"\n+\n+namespace bigquery::utils::zetasql_helper {\n+\n+// Fix the \"Duplicate Column\" error. It will add numeric suffix (e.g. _1, _2, ..) to the duplicate name\n+// as the new aliases for each duplicate columns.\n+// Input:\n+// query: incorrect SQL with the error\n+// duplicate_column_name: name of the duplicate columns\n+//\n+// The function will assign the fixed query to the fixed_query pointer\n+absl::Status FixDuplicateColumns(absl::string_view query, absl::string_view duplicate_column_name,\n+                                 std::string* fixed_query);\n+\n+\n+// Find the ASTSelectList Node having duplicate columns, whose name is the input name.\n+const zetasql::ASTSelectList*\n+find_select_list_with_duplicate_columns(const zetasql::ASTNode& node, absl::string_view column_name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE3NTQxNg=="}, "originalCommit": {"oid": "f903a871816d19338298cf3f0539ac3cd71f2aa8"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTAzOTg0OnYy", "diffSide": "RIGHT", "path": "tools/zetasql_helper/zetasql_helper/fixer/fix_duplicate_columns.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODoyOToyN1rOHMytNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODoyOToyN1rOHMytNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE3NTczMg==", "bodyText": "GetColumnName(", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/171#discussion_r483175732", "createdAt": "2020-09-03T18:29:27Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/fixer/fix_duplicate_columns.h", "diffHunk": "@@ -0,0 +1,59 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#ifndef ZETASQL_HELPER_FIX_DUPLICATE_COLUMNS_H\n+#define ZETASQL_HELPER_FIX_DUPLICATE_COLUMNS_H\n+\n+#include \"absl/status/status.h\"\n+#include \"absl/strings/string_view.h\"\n+#include \"zetasql/parser/parse_tree.h\"\n+\n+namespace bigquery::utils::zetasql_helper {\n+\n+// Fix the \"Duplicate Column\" error. It will add numeric suffix (e.g. _1, _2, ..) to the duplicate name\n+// as the new aliases for each duplicate columns.\n+// Input:\n+// query: incorrect SQL with the error\n+// duplicate_column_name: name of the duplicate columns\n+//\n+// The function will assign the fixed query to the fixed_query pointer\n+absl::Status FixDuplicateColumns(absl::string_view query, absl::string_view duplicate_column_name,\n+                                 std::string* fixed_query);\n+\n+\n+// Find the ASTSelectList Node having duplicate columns, whose name is the input name.\n+const zetasql::ASTSelectList*\n+find_select_list_with_duplicate_columns(const zetasql::ASTNode& node, absl::string_view column_name);\n+\n+// Get the column name of an ASTSelectColumn node.\n+std::string get_column_name(const zetasql::ASTSelectColumn* column_node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f903a871816d19338298cf3f0539ac3cd71f2aa8"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTA0MDk0OnYy", "diffSide": "RIGHT", "path": "tools/zetasql_helper/zetasql_helper/fixer/fix_duplicate_columns.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODoyOTo0MFrOHMyt-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODoyOTo0MFrOHMyt-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE3NTkyOQ==", "bodyText": "UpdateAlias", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/171#discussion_r483175929", "createdAt": "2020-09-03T18:29:40Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/fixer/fix_duplicate_columns.h", "diffHunk": "@@ -0,0 +1,59 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#ifndef ZETASQL_HELPER_FIX_DUPLICATE_COLUMNS_H\n+#define ZETASQL_HELPER_FIX_DUPLICATE_COLUMNS_H\n+\n+#include \"absl/status/status.h\"\n+#include \"absl/strings/string_view.h\"\n+#include \"zetasql/parser/parse_tree.h\"\n+\n+namespace bigquery::utils::zetasql_helper {\n+\n+// Fix the \"Duplicate Column\" error. It will add numeric suffix (e.g. _1, _2, ..) to the duplicate name\n+// as the new aliases for each duplicate columns.\n+// Input:\n+// query: incorrect SQL with the error\n+// duplicate_column_name: name of the duplicate columns\n+//\n+// The function will assign the fixed query to the fixed_query pointer\n+absl::Status FixDuplicateColumns(absl::string_view query, absl::string_view duplicate_column_name,\n+                                 std::string* fixed_query);\n+\n+\n+// Find the ASTSelectList Node having duplicate columns, whose name is the input name.\n+const zetasql::ASTSelectList*\n+find_select_list_with_duplicate_columns(const zetasql::ASTNode& node, absl::string_view column_name);\n+\n+// Get the column name of an ASTSelectColumn node.\n+std::string get_column_name(const zetasql::ASTSelectColumn* column_node);\n+\n+// Change the duplicate names to their new names by adding numeric suffix after them.\n+void\n+replace_duplicate_columns_of_select_list(const zetasql::ASTSelectList& select_list, absl::string_view column_name,\n+                                         zetasql_base::UnsafeArena* arena, zetasql::IdStringPool* id_string_pool);\n+\n+// Update or create an alias node of an ASTSelectColumn\n+void update_alias(zetasql::ASTSelectColumn* column_node, absl::string_view new_alias,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f903a871816d19338298cf3f0539ac3cd71f2aa8"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTA0MjAzOnYy", "diffSide": "RIGHT", "path": "tools/zetasql_helper/zetasql_helper/fixer/fix_duplicate_columns.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODoyOTo1M1rOHMyutQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODoyOTo1M1rOHMyutQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE3NjExNw==", "bodyText": "same here.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/171#discussion_r483176117", "createdAt": "2020-09-03T18:29:53Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/fixer/fix_duplicate_columns.h", "diffHunk": "@@ -0,0 +1,59 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#ifndef ZETASQL_HELPER_FIX_DUPLICATE_COLUMNS_H\n+#define ZETASQL_HELPER_FIX_DUPLICATE_COLUMNS_H\n+\n+#include \"absl/status/status.h\"\n+#include \"absl/strings/string_view.h\"\n+#include \"zetasql/parser/parse_tree.h\"\n+\n+namespace bigquery::utils::zetasql_helper {\n+\n+// Fix the \"Duplicate Column\" error. It will add numeric suffix (e.g. _1, _2, ..) to the duplicate name\n+// as the new aliases for each duplicate columns.\n+// Input:\n+// query: incorrect SQL with the error\n+// duplicate_column_name: name of the duplicate columns\n+//\n+// The function will assign the fixed query to the fixed_query pointer\n+absl::Status FixDuplicateColumns(absl::string_view query, absl::string_view duplicate_column_name,\n+                                 std::string* fixed_query);\n+\n+\n+// Find the ASTSelectList Node having duplicate columns, whose name is the input name.\n+const zetasql::ASTSelectList*\n+find_select_list_with_duplicate_columns(const zetasql::ASTNode& node, absl::string_view column_name);\n+\n+// Get the column name of an ASTSelectColumn node.\n+std::string get_column_name(const zetasql::ASTSelectColumn* column_node);\n+\n+// Change the duplicate names to their new names by adding numeric suffix after them.\n+void\n+replace_duplicate_columns_of_select_list(const zetasql::ASTSelectList& select_list, absl::string_view column_name,\n+                                         zetasql_base::UnsafeArena* arena, zetasql::IdStringPool* id_string_pool);\n+\n+// Update or create an alias node of an ASTSelectColumn\n+void update_alias(zetasql::ASTSelectColumn* column_node, absl::string_view new_alias,\n+                  zetasql_base::UnsafeArena* arena, zetasql::IdStringPool* id_string_pool);\n+\n+// Create an alias node of an ASTSelectColumn\n+zetasql::ASTAlias* create_alias_node(absl::string_view new_alias, zetasql_base::UnsafeArena* arena,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f903a871816d19338298cf3f0539ac3cd71f2aa8"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTA1MDA4OnYy", "diffSide": "RIGHT", "path": "tools/zetasql_helper/zetasql_helper/local_service/local_service.cc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODozMTo0NVrOHMyz_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTowOToyMlrOHM0AjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE3NzQ2OA==", "bodyText": "why need cast here? it is std::string right ?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/171#discussion_r483177468", "createdAt": "2020-09-03T18:31:45Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/local_service/local_service.cc", "diffHunk": "@@ -81,5 +83,35 @@ absl::Status ZetaSqlHelperLocalServiceImpl::GetAllKeywords(const GetAllKeywordsR\n   return absl::Status();\n }\n \n+\n+absl::Status ZetaSqlHelperLocalServiceImpl::FixColumnNotGrouped(\n+    const FixColumnNotGroupedRequest& request,\n+    FixColumnNotGroupedResponse* response) {\n+\n+  std::string fix_query;\n+  ZETASQL_RETURN_IF_ERROR(\n+      ::bigquery::utils::zetasql_helper::FixColumnNotGrouped(\n+          request.query(), request.missing_column(), request.line_number(), request.column_number(),\n+          &fix_query\n+      ));\n+\n+  response->set_fixed_query(std::string(fix_query));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f903a871816d19338298cf3f0539ac3cd71f2aa8"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE5NzA2OA==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/171#discussion_r483197068", "createdAt": "2020-09-03T19:09:22Z", "author": {"login": "mingen-pan"}, "path": "tools/zetasql_helper/zetasql_helper/local_service/local_service.cc", "diffHunk": "@@ -81,5 +83,35 @@ absl::Status ZetaSqlHelperLocalServiceImpl::GetAllKeywords(const GetAllKeywordsR\n   return absl::Status();\n }\n \n+\n+absl::Status ZetaSqlHelperLocalServiceImpl::FixColumnNotGrouped(\n+    const FixColumnNotGroupedRequest& request,\n+    FixColumnNotGroupedResponse* response) {\n+\n+  std::string fix_query;\n+  ZETASQL_RETURN_IF_ERROR(\n+      ::bigquery::utils::zetasql_helper::FixColumnNotGrouped(\n+          request.query(), request.missing_column(), request.line_number(), request.column_number(),\n+          &fix_query\n+      ));\n+\n+  response->set_fixed_query(std::string(fix_query));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE3NzQ2OA=="}, "originalCommit": {"oid": "f903a871816d19338298cf3f0539ac3cd71f2aa8"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTA1NDY2OnYy", "diffSide": "RIGHT", "path": "tools/zetasql_helper/zetasql_helper/local_service/local_service_test.cc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODozMzoxN1rOHMy2_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOToxMDoyMlrOHM0CgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE3ODIzNg==", "bodyText": "nit: stylewise you don't need the GetAllKeywords\"Test\"\njust GetAllKeywords", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/171#discussion_r483178236", "createdAt": "2020-09-03T18:33:17Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/local_service/local_service_test.cc", "diffHunk": "@@ -89,12 +89,57 @@ TEST_F(LocalServiceTest, LocateTableRangesTest) {\n }\n \n \n-TEST_F(LocalServiceTest, GetAllKeywords) {\n+TEST_F(LocalServiceTest, GetAllKeywordsTest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f903a871816d19338298cf3f0539ac3cd71f2aa8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE5NzU2OA==", "bodyText": "Have changed all of the tests", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/171#discussion_r483197568", "createdAt": "2020-09-03T19:10:22Z", "author": {"login": "mingen-pan"}, "path": "tools/zetasql_helper/zetasql_helper/local_service/local_service_test.cc", "diffHunk": "@@ -89,12 +89,57 @@ TEST_F(LocalServiceTest, LocateTableRangesTest) {\n }\n \n \n-TEST_F(LocalServiceTest, GetAllKeywords) {\n+TEST_F(LocalServiceTest, GetAllKeywordsTest) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE3ODIzNg=="}, "originalCommit": {"oid": "f903a871816d19338298cf3f0539ac3cd71f2aa8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTA1NTYyOnYy", "diffSide": "RIGHT", "path": "tools/zetasql_helper/zetasql_helper/local_service/local_service_test.cc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODozMzozNVrOHMy3kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODozMzozNVrOHMy3kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE3ODM4NA==", "bodyText": "nit: FixDuplicateColumns", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/171#discussion_r483178384", "createdAt": "2020-09-03T18:33:35Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/local_service/local_service_test.cc", "diffHunk": "@@ -89,12 +89,57 @@ TEST_F(LocalServiceTest, LocateTableRangesTest) {\n }\n \n \n-TEST_F(LocalServiceTest, GetAllKeywords) {\n+TEST_F(LocalServiceTest, GetAllKeywordsTest) {\n   GetAllKeywordsRequest request;\n   GetAllKeywordsResponse response;\n   GetService().GetAllKeywords(nullptr, &request, &response);\n \n   EXPECT_EQ(231, response.keywords().size());\n }\n+\n+TEST_F(LocalServiceTest, FixDuplicateColumnsTest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f903a871816d19338298cf3f0539ac3cd71f2aa8"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTA1OTE1OnYy", "diffSide": "RIGHT", "path": "tools/zetasql_helper/zetasql_helper/scanner/locate_table.cc", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODozNDozM1rOHMy5xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOToxMjozOVrOHM0HGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE3ODk1MA==", "bodyText": "you can pass by reference :)", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/171#discussion_r483178950", "createdAt": "2020-09-03T18:34:33Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/scanner/locate_table.cc", "diffHunk": "@@ -31,8 +31,8 @@ absl::Status LocateTableRanges(absl::string_view query,\n   ZETASQL_RETURN_IF_ERROR(ParseStatement(query, options.GetParserOptions(), &parser_output));\n \n   // Predicate to find a table whose name meets the table_rex\n-  auto find_table = [table_regex](const zetasql::ASTNode *node) {\n-    auto table_path = dynamic_cast<const zetasql::ASTTablePathExpression *>(node);\n+  auto find_table = [table_regex](const zetasql::ASTNode* node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f903a871816d19338298cf3f0539ac3cd71f2aa8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE5ODQ2NA==", "bodyText": "pointer is safer here. This is predicator, so even giving a null pointer will be considered as false.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/171#discussion_r483198464", "createdAt": "2020-09-03T19:12:10Z", "author": {"login": "mingen-pan"}, "path": "tools/zetasql_helper/zetasql_helper/scanner/locate_table.cc", "diffHunk": "@@ -31,8 +31,8 @@ absl::Status LocateTableRanges(absl::string_view query,\n   ZETASQL_RETURN_IF_ERROR(ParseStatement(query, options.GetParserOptions(), &parser_output));\n \n   // Predicate to find a table whose name meets the table_rex\n-  auto find_table = [table_regex](const zetasql::ASTNode *node) {\n-    auto table_path = dynamic_cast<const zetasql::ASTTablePathExpression *>(node);\n+  auto find_table = [table_regex](const zetasql::ASTNode* node) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE3ODk1MA=="}, "originalCommit": {"oid": "f903a871816d19338298cf3f0539ac3cd71f2aa8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE5ODc0NQ==", "bodyText": "During the find process, it is possible that a child can be null pointer.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/171#discussion_r483198745", "createdAt": "2020-09-03T19:12:39Z", "author": {"login": "mingen-pan"}, "path": "tools/zetasql_helper/zetasql_helper/scanner/locate_table.cc", "diffHunk": "@@ -31,8 +31,8 @@ absl::Status LocateTableRanges(absl::string_view query,\n   ZETASQL_RETURN_IF_ERROR(ParseStatement(query, options.GetParserOptions(), &parser_output));\n \n   // Predicate to find a table whose name meets the table_rex\n-  auto find_table = [table_regex](const zetasql::ASTNode *node) {\n-    auto table_path = dynamic_cast<const zetasql::ASTTablePathExpression *>(node);\n+  auto find_table = [table_regex](const zetasql::ASTNode* node) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE3ODk1MA=="}, "originalCommit": {"oid": "f903a871816d19338298cf3f0539ac3cd71f2aa8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTA2MjM0OnYy", "diffSide": "RIGHT", "path": "tools/zetasql_helper/zetasql_helper/local_service/local_service_grpc.cc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODozNToyNFrOHMy7qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOToxMzozMFrOHM0IwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE3OTQzMg==", "bodyText": "pass by reference", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/171#discussion_r483179432", "createdAt": "2020-09-03T18:35:24Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/local_service/local_service_grpc.cc", "diffHunk": "@@ -90,4 +90,18 @@ grpc::Status ZetaSqlHelperLocalServiceGrpcImpl::GetAllKeywords(grpc::ServerConte\n   return ToGrpcStatus(service_.GetAllKeywords(*request, response));\n }\n \n+grpc::Status ZetaSqlHelperLocalServiceGrpcImpl::FixColumnNotGrouped(grpc::ServerContext* context,\n+                                                                    const FixColumnNotGroupedRequest* request,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f903a871816d19338298cf3f0539ac3cd71f2aa8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE5OTE2OQ==", "bodyText": "This schema is defined by the gRPC..", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/171#discussion_r483199169", "createdAt": "2020-09-03T19:13:30Z", "author": {"login": "mingen-pan"}, "path": "tools/zetasql_helper/zetasql_helper/local_service/local_service_grpc.cc", "diffHunk": "@@ -90,4 +90,18 @@ grpc::Status ZetaSqlHelperLocalServiceGrpcImpl::GetAllKeywords(grpc::ServerConte\n   return ToGrpcStatus(service_.GetAllKeywords(*request, response));\n }\n \n+grpc::Status ZetaSqlHelperLocalServiceGrpcImpl::FixColumnNotGrouped(grpc::ServerContext* context,\n+                                                                    const FixColumnNotGroupedRequest* request,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE3OTQzMg=="}, "originalCommit": {"oid": "f903a871816d19338298cf3f0539ac3cd71f2aa8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTA2NzI5OnYy", "diffSide": "RIGHT", "path": "tools/zetasql_helper/zetasql_helper/fixer/fixer_test.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODozNjo1MFrOHMy-yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOToxNTo0M1rOHM0NJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE4MDIzMg==", "bodyText": "in general, don't recommned using Test3, we should give it meaning full test case name\nFixColumnNotGroupedWith....", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/171#discussion_r483180232", "createdAt": "2020-09-03T18:36:50Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/fixer/fixer_test.cpp", "diffHunk": "@@ -0,0 +1,119 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#include \"gtest/gtest.h\"\n+#include \"fix_duplicate_columns.h\"\n+#include \"fix_column_not_grouped.h\"\n+\n+using namespace bigquery::utils::zetasql_helper;\n+\n+class FixerTest : public ::testing::Test {\n+\n+};\n+\n+\n+TEST_F(FixerTest, FixDuplicateColumnsTest) {\n+    absl::string_view query = \"SELECT status, status FROM `bigquery-public-data.austin_311.311_request` LIMIT 1000\";\n+    absl::string_view duplicate_column = \"status\";\n+    std::string fixed_query;\n+\n+    auto status = FixDuplicateColumns(query, duplicate_column, &fixed_query);\n+\n+    EXPECT_TRUE(status.ok());\n+    EXPECT_EQ(\"SELECT\\n\"\n+              \"  status AS status_1,\\n\"\n+              \"  status AS status_2\\n\"\n+              \"FROM\\n\"\n+              \"  `bigquery-public-data.austin_311.311_request`\\n\"\n+              \"LIMIT 1000\\n\", fixed_query);\n+}\n+\n+TEST_F(FixerTest, FixColumnNotGroupedTest1) {\n+    absl::string_view query = \"SELECT status, max(unique_key) FROM `bigquery-public-data.austin_311.311_request` LIMIT 1000\";\n+    absl::string_view missing_column = \"status\";\n+    int line_number = 1;\n+    int col_number = 8;\n+    std::string fixed_query;\n+\n+    auto status = FixColumnNotGrouped(query, missing_column, line_number, col_number, &fixed_query);\n+\n+    EXPECT_TRUE(status.ok());\n+    EXPECT_EQ(\"SELECT\\n\"\n+              \"  status,\\n\"\n+              \"  max(unique_key)\\n\"\n+              \"FROM\\n\"\n+              \"  `bigquery-public-data.austin_311.311_request`\\n\"\n+              \"GROUP BY status\\n\"\n+              \"LIMIT 1000\\n\", fixed_query);\n+}\n+\n+TEST_F(FixerTest, FixColumnNotGroupedTest2) {\n+    absl::string_view query = \"SELECT status, max(unique_key) FROM `bigquery-public-data.austin_311.311_request` group by city LIMIT 1000\";\n+    absl::string_view missing_column = \"status\";\n+    int line_number = 1;\n+    int col_number = 8;\n+    std::string fixed_query;\n+\n+    auto status = FixColumnNotGrouped(query, missing_column, line_number, col_number, &fixed_query);\n+\n+    EXPECT_TRUE(status.ok());\n+    EXPECT_EQ(\"SELECT\\n\"\n+              \"  status,\\n\"\n+              \"  max(unique_key)\\n\"\n+              \"FROM\\n\"\n+              \"  `bigquery-public-data.austin_311.311_request`\\n\"\n+              \"GROUP BY city, status\\n\"\n+              \"LIMIT 1000\\n\", fixed_query);\n+}\n+\n+TEST_F(FixerTest, FixColumnNotGroupedTest3) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f903a871816d19338298cf3f0539ac3cd71f2aa8"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwMDI5Mg==", "bodyText": "Agree, I have changed their names", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/171#discussion_r483200292", "createdAt": "2020-09-03T19:15:43Z", "author": {"login": "mingen-pan"}, "path": "tools/zetasql_helper/zetasql_helper/fixer/fixer_test.cpp", "diffHunk": "@@ -0,0 +1,119 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#include \"gtest/gtest.h\"\n+#include \"fix_duplicate_columns.h\"\n+#include \"fix_column_not_grouped.h\"\n+\n+using namespace bigquery::utils::zetasql_helper;\n+\n+class FixerTest : public ::testing::Test {\n+\n+};\n+\n+\n+TEST_F(FixerTest, FixDuplicateColumnsTest) {\n+    absl::string_view query = \"SELECT status, status FROM `bigquery-public-data.austin_311.311_request` LIMIT 1000\";\n+    absl::string_view duplicate_column = \"status\";\n+    std::string fixed_query;\n+\n+    auto status = FixDuplicateColumns(query, duplicate_column, &fixed_query);\n+\n+    EXPECT_TRUE(status.ok());\n+    EXPECT_EQ(\"SELECT\\n\"\n+              \"  status AS status_1,\\n\"\n+              \"  status AS status_2\\n\"\n+              \"FROM\\n\"\n+              \"  `bigquery-public-data.austin_311.311_request`\\n\"\n+              \"LIMIT 1000\\n\", fixed_query);\n+}\n+\n+TEST_F(FixerTest, FixColumnNotGroupedTest1) {\n+    absl::string_view query = \"SELECT status, max(unique_key) FROM `bigquery-public-data.austin_311.311_request` LIMIT 1000\";\n+    absl::string_view missing_column = \"status\";\n+    int line_number = 1;\n+    int col_number = 8;\n+    std::string fixed_query;\n+\n+    auto status = FixColumnNotGrouped(query, missing_column, line_number, col_number, &fixed_query);\n+\n+    EXPECT_TRUE(status.ok());\n+    EXPECT_EQ(\"SELECT\\n\"\n+              \"  status,\\n\"\n+              \"  max(unique_key)\\n\"\n+              \"FROM\\n\"\n+              \"  `bigquery-public-data.austin_311.311_request`\\n\"\n+              \"GROUP BY status\\n\"\n+              \"LIMIT 1000\\n\", fixed_query);\n+}\n+\n+TEST_F(FixerTest, FixColumnNotGroupedTest2) {\n+    absl::string_view query = \"SELECT status, max(unique_key) FROM `bigquery-public-data.austin_311.311_request` group by city LIMIT 1000\";\n+    absl::string_view missing_column = \"status\";\n+    int line_number = 1;\n+    int col_number = 8;\n+    std::string fixed_query;\n+\n+    auto status = FixColumnNotGrouped(query, missing_column, line_number, col_number, &fixed_query);\n+\n+    EXPECT_TRUE(status.ok());\n+    EXPECT_EQ(\"SELECT\\n\"\n+              \"  status,\\n\"\n+              \"  max(unique_key)\\n\"\n+              \"FROM\\n\"\n+              \"  `bigquery-public-data.austin_311.311_request`\\n\"\n+              \"GROUP BY city, status\\n\"\n+              \"LIMIT 1000\\n\", fixed_query);\n+}\n+\n+TEST_F(FixerTest, FixColumnNotGroupedTest3) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE4MDIzMg=="}, "originalCommit": {"oid": "f903a871816d19338298cf3f0539ac3cd71f2aa8"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTA3NTk4OnYy", "diffSide": "RIGHT", "path": "tools/zetasql_helper/zetasql_helper/fixer/fix_duplicate_columns.cc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODozOTozMlrOHMzEHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODo1NDo0NVrOHMzi6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE4MTU5Ng==", "bodyText": "are we expecting to change arena and id_string_pool in the function body? if not mark const and pass by reference", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/171#discussion_r483181596", "createdAt": "2020-09-03T18:39:32Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/fixer/fix_duplicate_columns.cc", "diffHunk": "@@ -0,0 +1,160 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#include \"fix_duplicate_columns.h\"\n+#include \"zetasql/parser/parser.h\"\n+#include \"zetasql/public/analyzer.h\"\n+#include \"zetasql_helper/util/util.h\"\n+\n+\n+namespace bigquery::utils::zetasql_helper {\n+\n+absl::Status FixDuplicateColumns(absl::string_view query, absl::string_view duplicate_column_name,\n+                                 std::string* fixed_query) {\n+  std::unique_ptr<zetasql::ParserOutput> parser_output;\n+  auto options = BigQueryOptions();\n+  ZETASQL_RETURN_IF_ERROR(ParseStatement(query, options.GetParserOptions(), &parser_output));\n+\n+  duplicate_column_name = remove_backtick(duplicate_column_name);\n+\n+  auto select_list = find_select_list_with_duplicate_columns(*parser_output->statement(), duplicate_column_name);\n+  if (select_list == nullptr) {\n+    return absl::Status(absl::StatusCode::kInvalidArgument, \"Duplicate columns does not exist.\");\n+  }\n+\n+  replace_duplicate_columns_of_select_list(*select_list, duplicate_column_name, parser_output->arena().get(),\n+                                           parser_output->id_string_pool().get());\n+\n+  *fixed_query = Unparse(parser_output->statement());\n+  return absl::OkStatus();\n+}\n+\n+const zetasql::ASTSelectList*\n+find_select_list_with_duplicate_columns(const zetasql::ASTNode& node, absl::string_view column_name) {\n+  // Set up the predicator to find the target node.\n+  auto predicator = [column_name](const zetasql::ASTNode* node) {\n+    if (node->node_kind() != zetasql::ASTNodeKind::AST_SELECT_LIST) {\n+      return false;\n+    }\n+    auto select_list = dynamic_cast<const zetasql::ASTSelectList*>(node);\n+\n+    // Count how many columns have the input name\n+    int count = 0;\n+\n+    for (auto column : select_list->columns()) {\n+      if (column_name == get_column_name(column)) {\n+        count++;\n+      }\n+    }\n+\n+    // count > 1 means duplicate columns.\n+    if (count > 1) {\n+      return true;\n+    }\n+\n+  };\n+\n+  auto candidate = find_node(&node, predicator);\n+  return dynamic_cast<const zetasql::ASTSelectList*>(candidate);\n+\n+}\n+\n+std::string get_column_name(const zetasql::ASTSelectColumn* column_node) {\n+  if (column_node == nullptr) {\n+    return \"\";\n+  }\n+\n+  // If alias is set, return the alias\n+  auto alias = column_node->alias();\n+  if (alias != nullptr) {\n+    return alias->identifier()->GetAsString();\n+  }\n+\n+  for (int i = 0; i < column_node->num_children(); i++) {\n+    auto child = column_node->child(i);\n+    if (child->node_kind() == zetasql::ASTNodeKind::AST_ALIAS) {\n+      continue;\n+    }\n+\n+    auto path_expression = dynamic_cast<const zetasql::ASTPathExpression*>(child);\n+\n+    // If the child is of ASTSelectColumn is not ASTPathExpression, then the name should be empty\n+    if (path_expression == nullptr) {\n+      return \"\";\n+    }\n+\n+    // Return the last name of ASTPathExpression as the column name.\n+    return path_expression->last_name()->GetAsString();\n+  }\n+}\n+\n+void replace_duplicate_columns_of_select_list(\n+    const zetasql::ASTSelectList& select_list,\n+    absl::string_view column_name,\n+    zetasql_base::UnsafeArena* arena,\n+    zetasql::IdStringPool* id_string_pool\n+) {\n+  std::vector<zetasql::ASTSelectColumn*> duplicate_columns;\n+\n+  // Find all the duplicate columns\n+  for (auto column : select_list.columns()) {\n+    if (column_name == get_column_name(column)) {\n+      duplicate_columns.push_back(const_cast<zetasql::ASTSelectColumn*>(column));\n+    }\n+  }\n+\n+  for (int i = 0; i < duplicate_columns.size(); i++) {\n+    auto new_alias = absl::StrCat(column_name, \"_\", std::to_string(i + 1));\n+    // rename the column with 1-based index\n+    update_alias(duplicate_columns[i], new_alias, arena, id_string_pool);\n+  }\n+}\n+\n+void update_alias(\n+    zetasql::ASTSelectColumn* column_node,\n+    absl::string_view new_alias,\n+    zetasql_base::UnsafeArena* arena,\n+    zetasql::IdStringPool* id_string_pool\n+) {\n+  if (column_node->alias() == nullptr) {\n+    auto alias_node = create_alias_node(new_alias, arena, id_string_pool);\n+    column_node->AddChild(alias_node);\n+    ((zetasql::ASTNode*) column_node)->InitFields();\n+    return;\n+  }\n+\n+  auto identifier = const_cast<zetasql::ASTIdentifier*>(column_node->alias()->identifier());\n+  identifier->SetIdentifier(id_string_pool->Make(new_alias));\n+  ((zetasql::ASTNode*) identifier)->InitFields();\n+}\n+\n+zetasql::ASTAlias* create_alias_node(\n+    absl::string_view new_alias,\n+    zetasql_base::UnsafeArena* arena,\n+    zetasql::IdStringPool* id_string_pool", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f903a871816d19338298cf3f0539ac3cd71f2aa8"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE4OTQ4Mg==", "bodyText": "I believe we do. We use arena to allocate space and String pool to create a new string.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/171#discussion_r483189482", "createdAt": "2020-09-03T18:54:45Z", "author": {"login": "mingen-pan"}, "path": "tools/zetasql_helper/zetasql_helper/fixer/fix_duplicate_columns.cc", "diffHunk": "@@ -0,0 +1,160 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#include \"fix_duplicate_columns.h\"\n+#include \"zetasql/parser/parser.h\"\n+#include \"zetasql/public/analyzer.h\"\n+#include \"zetasql_helper/util/util.h\"\n+\n+\n+namespace bigquery::utils::zetasql_helper {\n+\n+absl::Status FixDuplicateColumns(absl::string_view query, absl::string_view duplicate_column_name,\n+                                 std::string* fixed_query) {\n+  std::unique_ptr<zetasql::ParserOutput> parser_output;\n+  auto options = BigQueryOptions();\n+  ZETASQL_RETURN_IF_ERROR(ParseStatement(query, options.GetParserOptions(), &parser_output));\n+\n+  duplicate_column_name = remove_backtick(duplicate_column_name);\n+\n+  auto select_list = find_select_list_with_duplicate_columns(*parser_output->statement(), duplicate_column_name);\n+  if (select_list == nullptr) {\n+    return absl::Status(absl::StatusCode::kInvalidArgument, \"Duplicate columns does not exist.\");\n+  }\n+\n+  replace_duplicate_columns_of_select_list(*select_list, duplicate_column_name, parser_output->arena().get(),\n+                                           parser_output->id_string_pool().get());\n+\n+  *fixed_query = Unparse(parser_output->statement());\n+  return absl::OkStatus();\n+}\n+\n+const zetasql::ASTSelectList*\n+find_select_list_with_duplicate_columns(const zetasql::ASTNode& node, absl::string_view column_name) {\n+  // Set up the predicator to find the target node.\n+  auto predicator = [column_name](const zetasql::ASTNode* node) {\n+    if (node->node_kind() != zetasql::ASTNodeKind::AST_SELECT_LIST) {\n+      return false;\n+    }\n+    auto select_list = dynamic_cast<const zetasql::ASTSelectList*>(node);\n+\n+    // Count how many columns have the input name\n+    int count = 0;\n+\n+    for (auto column : select_list->columns()) {\n+      if (column_name == get_column_name(column)) {\n+        count++;\n+      }\n+    }\n+\n+    // count > 1 means duplicate columns.\n+    if (count > 1) {\n+      return true;\n+    }\n+\n+  };\n+\n+  auto candidate = find_node(&node, predicator);\n+  return dynamic_cast<const zetasql::ASTSelectList*>(candidate);\n+\n+}\n+\n+std::string get_column_name(const zetasql::ASTSelectColumn* column_node) {\n+  if (column_node == nullptr) {\n+    return \"\";\n+  }\n+\n+  // If alias is set, return the alias\n+  auto alias = column_node->alias();\n+  if (alias != nullptr) {\n+    return alias->identifier()->GetAsString();\n+  }\n+\n+  for (int i = 0; i < column_node->num_children(); i++) {\n+    auto child = column_node->child(i);\n+    if (child->node_kind() == zetasql::ASTNodeKind::AST_ALIAS) {\n+      continue;\n+    }\n+\n+    auto path_expression = dynamic_cast<const zetasql::ASTPathExpression*>(child);\n+\n+    // If the child is of ASTSelectColumn is not ASTPathExpression, then the name should be empty\n+    if (path_expression == nullptr) {\n+      return \"\";\n+    }\n+\n+    // Return the last name of ASTPathExpression as the column name.\n+    return path_expression->last_name()->GetAsString();\n+  }\n+}\n+\n+void replace_duplicate_columns_of_select_list(\n+    const zetasql::ASTSelectList& select_list,\n+    absl::string_view column_name,\n+    zetasql_base::UnsafeArena* arena,\n+    zetasql::IdStringPool* id_string_pool\n+) {\n+  std::vector<zetasql::ASTSelectColumn*> duplicate_columns;\n+\n+  // Find all the duplicate columns\n+  for (auto column : select_list.columns()) {\n+    if (column_name == get_column_name(column)) {\n+      duplicate_columns.push_back(const_cast<zetasql::ASTSelectColumn*>(column));\n+    }\n+  }\n+\n+  for (int i = 0; i < duplicate_columns.size(); i++) {\n+    auto new_alias = absl::StrCat(column_name, \"_\", std::to_string(i + 1));\n+    // rename the column with 1-based index\n+    update_alias(duplicate_columns[i], new_alias, arena, id_string_pool);\n+  }\n+}\n+\n+void update_alias(\n+    zetasql::ASTSelectColumn* column_node,\n+    absl::string_view new_alias,\n+    zetasql_base::UnsafeArena* arena,\n+    zetasql::IdStringPool* id_string_pool\n+) {\n+  if (column_node->alias() == nullptr) {\n+    auto alias_node = create_alias_node(new_alias, arena, id_string_pool);\n+    column_node->AddChild(alias_node);\n+    ((zetasql::ASTNode*) column_node)->InitFields();\n+    return;\n+  }\n+\n+  auto identifier = const_cast<zetasql::ASTIdentifier*>(column_node->alias()->identifier());\n+  identifier->SetIdentifier(id_string_pool->Make(new_alias));\n+  ((zetasql::ASTNode*) identifier)->InitFields();\n+}\n+\n+zetasql::ASTAlias* create_alias_node(\n+    absl::string_view new_alias,\n+    zetasql_base::UnsafeArena* arena,\n+    zetasql::IdStringPool* id_string_pool", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE4MTU5Ng=="}, "originalCommit": {"oid": "f903a871816d19338298cf3f0539ac3cd71f2aa8"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTA3OTkyOnYy", "diffSide": "RIGHT", "path": "tools/zetasql_helper/zetasql_helper/fixer/fix_column_not_grouped.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODo0MDo0MlrOHMzGdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODo0MDo0MlrOHMzGdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE4MjE5Ng==", "bodyText": "findSelectNodeHavingColumn", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/171#discussion_r483182196", "createdAt": "2020-09-03T18:40:42Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/fixer/fix_column_not_grouped.h", "diffHunk": "@@ -0,0 +1,79 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#ifndef ZETASQL_HELPER_FIX_COLUMN_NOT_GROUPED_H\n+#define ZETASQL_HELPER_FIX_COLUMN_NOT_GROUPED_H\n+\n+#include \"absl/status/status.h\"\n+#include \"absl/strings/string_view.h\"\n+#include \"zetasql/parser/parse_tree.h\"\n+\n+\n+namespace bigquery::utils::zetasql_helper {\n+\n+// Fix the \"Column Not Grouped\" error. It will add the missing (ungrouped) column to the corresponding\n+// group-by clause. If the group-by clause does not exist, it will create a new one.\n+// Input:\n+// query: incorrect SQL with the error\n+// missing_column: name of the missing (ungrouped) column\n+// line/column number: the starting position of the ungrouped column (1-based index)\n+//\n+// The function will assign the fixed query to the fixed_query pointer\n+absl::Status\n+FixColumnNotGrouped(absl::string_view query, absl::string_view missing_column, int line_number, int column_number,\n+                    std::string* fixed_query);\n+\n+// Find the AST_Select Node having a column node. The column node should start at the given offset\n+// and has the given column name.\n+const zetasql::ASTSelect*\n+find_select_node_having_column(const zetasql::ASTStatement* statement, int column_start_offset,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f903a871816d19338298cf3f0539ac3cd71f2aa8"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTA4MzI3OnYy", "diffSide": "RIGHT", "path": "tools/zetasql_helper/zetasql_helper/fixer/fix_column_not_grouped.cc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODo0MTo0M1rOHMzImw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODo0MTo0M1rOHMzImw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE4Mjc0Nw==", "bodyText": "FindSelectNodeHavingColumn", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/171#discussion_r483182747", "createdAt": "2020-09-03T18:41:43Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/fixer/fix_column_not_grouped.cc", "diffHunk": "@@ -0,0 +1,160 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#include \"fix_column_not_grouped.h\"\n+\n+#include \"absl/strings/str_cat.h\"\n+#include \"zetasql/parser/parser.h\"\n+#include \"zetasql_helper/util/util.h\"\n+\n+\n+namespace bigquery::utils::zetasql_helper {\n+\n+\n+absl::Status\n+FixColumnNotGrouped(absl::string_view query, absl::string_view missing_column, int line_number, int column_number,\n+                    std::string* fixed_query) {\n+\n+  std::unique_ptr<zetasql::ParserOutput> parser_output;\n+  auto options = BigQueryOptions();\n+  auto status = ParseStatement(query, options.GetParserOptions(), &parser_output);\n+  if (!status.ok()) {\n+    return status;\n+  }\n+\n+  missing_column = remove_backtick(missing_column);\n+\n+  auto offset = get_offset(query, line_number, column_number);\n+  if (offset == -1) {\n+    return absl::Status(absl::StatusCode::kInvalidArgument, \"Line and/or column numbers are incorrect\");\n+  }\n+  auto select_node = find_select_node_having_column(parser_output->statement(), offset, missing_column);\n+  if (select_node == nullptr) {\n+    return absl::Status(absl::StatusCode::kInvalidArgument, \"Cannot locate the ungrouped column\");\n+  }\n+\n+  add_column_to_group_by_clause(\n+      const_cast<zetasql::ASTSelect*>(select_node),\n+      missing_column, parser_output->arena().get(),\n+      parser_output->id_string_pool().get()\n+  );\n+\n+  *fixed_query = Unparse(parser_output->statement());\n+  return absl::OkStatus();\n+}\n+\n+const zetasql::ASTSelect*\n+find_select_node_having_column(const zetasql::ASTStatement* statement, int column_start_offset,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f903a871816d19338298cf3f0539ac3cd71f2aa8"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2897, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}