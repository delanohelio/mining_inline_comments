{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNjQ4Nzk2", "number": 136, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOToxNTo1MFrOEWU6Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOToxNTo1MFrOEWU6Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODQ2NjY3OnYy", "diffSide": "RIGHT", "path": "tools/sql_extraction/src/main/kotlin/DataFlowEngine.kt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOToxNTo1MFrOG9lHPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOTo0NToxNVrOG9l20A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIyNDM4Mw==", "bodyText": "For the sample test\n   @SqlUpdate(\"insert into users (id, name) values (?, ?)\")\n    void insert(long id, String name);\n\nWhat is the value of currentQuery here?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/136#discussion_r467224383", "createdAt": "2020-08-07T19:15:50Z", "author": {"login": "feiling"}, "path": "tools/sql_extraction/src/main/kotlin/DataFlowEngine.kt", "diffHunk": "@@ -30,6 +30,25 @@ class DataFlowEngine(private val environment: Environment = Environment()) {\n             .map { QueryUsages(it.key, it.value.sorted()) }\n     }\n \n+    /**\n+     * Visits an annotation located at [location].\n+     * Strings passed as arguments can be considered a usage.\n+     *\n+     * @param[visitArguments] Potential visit for all annotation arguments.\n+     */\n+    fun visitAnnotation(location: Location, visitArguments: () -> Unit) {\n+        val prevQuery = currentQuery\n+\n+        currentQuery = null\n+        visitArguments()\n+\n+        if (currentQuery != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bd5a0232ad84fa3526d8beceabd408dd258011a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIzMjk4OA==", "bodyText": "It would be the QueryFragment corresponding to the following json:\n{\n  \"count\": \"SINGLE\",\n  \"location\": {\n    \"startLine\": 1,\n    \"startColumn\": 17, // index of 'i' right after the first quote\n    \"endLine\": 1,\n    \"endColumn\": 58 // index of ')' right before the second quote\n  },\n  \"literal\": \"insert into users (id, name) values (?, ?)\" // quotes are not included\n}", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/136#discussion_r467232988", "createdAt": "2020-08-07T19:36:26Z", "author": {"login": "creativitRy"}, "path": "tools/sql_extraction/src/main/kotlin/DataFlowEngine.kt", "diffHunk": "@@ -30,6 +30,25 @@ class DataFlowEngine(private val environment: Environment = Environment()) {\n             .map { QueryUsages(it.key, it.value.sorted()) }\n     }\n \n+    /**\n+     * Visits an annotation located at [location].\n+     * Strings passed as arguments can be considered a usage.\n+     *\n+     * @param[visitArguments] Potential visit for all annotation arguments.\n+     */\n+    fun visitAnnotation(location: Location, visitArguments: () -> Unit) {\n+        val prevQuery = currentQuery\n+\n+        currentQuery = null\n+        visitArguments()\n+\n+        if (currentQuery != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIyNDM4Mw=="}, "originalCommit": {"oid": "7bd5a0232ad84fa3526d8beceabd408dd258011a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIzNjU2MA==", "bodyText": "CurrentQuery will only be null if no string literals or variables holding query fragments are found in the annotation arguments.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/136#discussion_r467236560", "createdAt": "2020-08-07T19:45:15Z", "author": {"login": "creativitRy"}, "path": "tools/sql_extraction/src/main/kotlin/DataFlowEngine.kt", "diffHunk": "@@ -30,6 +30,25 @@ class DataFlowEngine(private val environment: Environment = Environment()) {\n             .map { QueryUsages(it.key, it.value.sorted()) }\n     }\n \n+    /**\n+     * Visits an annotation located at [location].\n+     * Strings passed as arguments can be considered a usage.\n+     *\n+     * @param[visitArguments] Potential visit for all annotation arguments.\n+     */\n+    fun visitAnnotation(location: Location, visitArguments: () -> Unit) {\n+        val prevQuery = currentQuery\n+\n+        currentQuery = null\n+        visitArguments()\n+\n+        if (currentQuery != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIyNDM4Mw=="}, "originalCommit": {"oid": "7bd5a0232ad84fa3526d8beceabd408dd258011a"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3089, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}