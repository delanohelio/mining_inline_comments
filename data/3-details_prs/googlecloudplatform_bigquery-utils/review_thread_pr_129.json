{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwNDMxMDc3", "number": 129, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOToyMDo0N1rOEWU_ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOToyMTo0OFrOEWVAiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODQ4MDQyOnYy", "diffSide": "RIGHT", "path": "tools/sql_extraction/src/test/kotlin/PythonAnalysisTest.kt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOToyMDo0N1rOG9lPkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOTo0OTo0MFrOG9l97w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIyNjUxMw==", "bodyText": "How come the result is \"(helloworld)\" and not \"helloworld\"?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/129#discussion_r467226513", "createdAt": "2020-08-07T19:20:47Z", "author": {"login": "feiling"}, "path": "tools/sql_extraction/src/test/kotlin/PythonAnalysisTest.kt", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.google.cloud.sqlecosystem.sqlextraction\n+\n+import com.google.cloud.sqlecosystem.sqlextraction.output.QueryUsages\n+import org.antlr.v4.runtime.CharStreams\n+import kotlin.test.Test\n+import kotlin.test.assertEquals\n+\n+class PythonAnalysisTest {\n+    @Test\n+    fun `simple string return`() {\n+        val program = \"\"\"\n+def test():\n+    return \"test\"\n+\"\"\"\n+\n+        val result = analyze(program)\n+\n+        assertCorrect(result, \"test\")\n+    }\n+\n+    @Test\n+    fun `simple method argument`() {\n+        val program = \"\"\"\n+import something\n+something.some_method(\"test\")\n+\"\"\"\n+\n+        val result = analyze(program)\n+\n+        assertCorrect(result, \"test\")\n+    }\n+\n+    @Test\n+    fun `literal concatenation`() {\n+        val program = \"\"\"\n+import something\n+something.some_method(\"hello\" + \"world\")\n+\"\"\"\n+\n+        val result = analyze(program)\n+\n+        assertCorrect(result, \"(helloworld)\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3236747b9aa6d4c01ef564886e34bf892b6c1438"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIzNTI0OA==", "bodyText": "For any complex query fragments, I added parentheses around the internal fragments (https://github.com/GoogleCloudPlatform/bigquery-utils/blob/master/tools/sql_extraction/src/main/kotlin/output/QueryFragment.kt#L74-L78).\nWould it be a good idea to trim them off at the end of the recursion?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/129#discussion_r467235248", "createdAt": "2020-08-07T19:41:57Z", "author": {"login": "creativitRy"}, "path": "tools/sql_extraction/src/test/kotlin/PythonAnalysisTest.kt", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.google.cloud.sqlecosystem.sqlextraction\n+\n+import com.google.cloud.sqlecosystem.sqlextraction.output.QueryUsages\n+import org.antlr.v4.runtime.CharStreams\n+import kotlin.test.Test\n+import kotlin.test.assertEquals\n+\n+class PythonAnalysisTest {\n+    @Test\n+    fun `simple string return`() {\n+        val program = \"\"\"\n+def test():\n+    return \"test\"\n+\"\"\"\n+\n+        val result = analyze(program)\n+\n+        assertCorrect(result, \"test\")\n+    }\n+\n+    @Test\n+    fun `simple method argument`() {\n+        val program = \"\"\"\n+import something\n+something.some_method(\"test\")\n+\"\"\"\n+\n+        val result = analyze(program)\n+\n+        assertCorrect(result, \"test\")\n+    }\n+\n+    @Test\n+    fun `literal concatenation`() {\n+        val program = \"\"\"\n+import something\n+something.some_method(\"hello\" + \"world\")\n+\"\"\"\n+\n+        val result = analyze(program)\n+\n+        assertCorrect(result, \"(helloworld)\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIyNjUxMw=="}, "originalCommit": {"oid": "3236747b9aa6d4c01ef564886e34bf892b6c1438"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIzODM4Mw==", "bodyText": "I see. That's fine. You can keep it.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/129#discussion_r467238383", "createdAt": "2020-08-07T19:49:40Z", "author": {"login": "feiling"}, "path": "tools/sql_extraction/src/test/kotlin/PythonAnalysisTest.kt", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.google.cloud.sqlecosystem.sqlextraction\n+\n+import com.google.cloud.sqlecosystem.sqlextraction.output.QueryUsages\n+import org.antlr.v4.runtime.CharStreams\n+import kotlin.test.Test\n+import kotlin.test.assertEquals\n+\n+class PythonAnalysisTest {\n+    @Test\n+    fun `simple string return`() {\n+        val program = \"\"\"\n+def test():\n+    return \"test\"\n+\"\"\"\n+\n+        val result = analyze(program)\n+\n+        assertCorrect(result, \"test\")\n+    }\n+\n+    @Test\n+    fun `simple method argument`() {\n+        val program = \"\"\"\n+import something\n+something.some_method(\"test\")\n+\"\"\"\n+\n+        val result = analyze(program)\n+\n+        assertCorrect(result, \"test\")\n+    }\n+\n+    @Test\n+    fun `literal concatenation`() {\n+        val program = \"\"\"\n+import something\n+something.some_method(\"hello\" + \"world\")\n+\"\"\"\n+\n+        val result = analyze(program)\n+\n+        assertCorrect(result, \"(helloworld)\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIyNjUxMw=="}, "originalCommit": {"oid": "3236747b9aa6d4c01ef564886e34bf892b6c1438"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODQ4MzI5OnYy", "diffSide": "RIGHT", "path": "tools/sql_extraction/src/test/kotlin/PythonAnalysisTest.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxOToyMTo0OFrOG9lRRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMDoxMTozMVrOG9mg3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIyNjk0OA==", "bodyText": "Does the analyzer support multi-line strings?  If so, please add a unit test. If not, pls add support in another PR.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/129#discussion_r467226948", "createdAt": "2020-08-07T19:21:48Z", "author": {"login": "feiling"}, "path": "tools/sql_extraction/src/test/kotlin/PythonAnalysisTest.kt", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.google.cloud.sqlecosystem.sqlextraction\n+\n+import com.google.cloud.sqlecosystem.sqlextraction.output.QueryUsages\n+import org.antlr.v4.runtime.CharStreams\n+import kotlin.test.Test\n+import kotlin.test.assertEquals\n+\n+class PythonAnalysisTest {\n+    @Test\n+    fun `simple string return`() {\n+        val program = \"\"\"\n+def test():\n+    return \"test\"\n+\"\"\"\n+\n+        val result = analyze(program)\n+\n+        assertCorrect(result, \"test\")\n+    }\n+\n+    @Test\n+    fun `simple method argument`() {\n+        val program = \"\"\"\n+import something\n+something.some_method(\"test\")\n+\"\"\"\n+\n+        val result = analyze(program)\n+\n+        assertCorrect(result, \"test\")\n+    }\n+\n+    @Test\n+    fun `literal concatenation`() {\n+        val program = \"\"\"\n+import something\n+something.some_method(\"hello\" + \"world\")\n+\"\"\"\n+\n+        val result = analyze(program)\n+\n+        assertCorrect(result, \"(helloworld)\")\n+    }\n+\n+    @Test\n+    fun `variable assignment and usage`() {\n+        val program = \"\"\"\n+import something\n+a = \"test\"\n+something.some_method(a)\n+\"\"\"\n+\n+        val result = analyze(program)\n+\n+        assertCorrect(result, \"test\")\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3236747b9aa6d4c01ef564886e34bf892b6c1438"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI0NzMyNw==", "bodyText": "Good idea! I'll add tests for them", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/129#discussion_r467247327", "createdAt": "2020-08-07T20:11:31Z", "author": {"login": "creativitRy"}, "path": "tools/sql_extraction/src/test/kotlin/PythonAnalysisTest.kt", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.google.cloud.sqlecosystem.sqlextraction\n+\n+import com.google.cloud.sqlecosystem.sqlextraction.output.QueryUsages\n+import org.antlr.v4.runtime.CharStreams\n+import kotlin.test.Test\n+import kotlin.test.assertEquals\n+\n+class PythonAnalysisTest {\n+    @Test\n+    fun `simple string return`() {\n+        val program = \"\"\"\n+def test():\n+    return \"test\"\n+\"\"\"\n+\n+        val result = analyze(program)\n+\n+        assertCorrect(result, \"test\")\n+    }\n+\n+    @Test\n+    fun `simple method argument`() {\n+        val program = \"\"\"\n+import something\n+something.some_method(\"test\")\n+\"\"\"\n+\n+        val result = analyze(program)\n+\n+        assertCorrect(result, \"test\")\n+    }\n+\n+    @Test\n+    fun `literal concatenation`() {\n+        val program = \"\"\"\n+import something\n+something.some_method(\"hello\" + \"world\")\n+\"\"\"\n+\n+        val result = analyze(program)\n+\n+        assertCorrect(result, \"(helloworld)\")\n+    }\n+\n+    @Test\n+    fun `variable assignment and usage`() {\n+        val program = \"\"\"\n+import something\n+a = \"test\"\n+something.some_method(a)\n+\"\"\"\n+\n+        val result = analyze(program)\n+\n+        assertCorrect(result, \"test\")\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIyNjk0OA=="}, "originalCommit": {"oid": "3236747b9aa6d4c01ef564886e34bf892b6c1438"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3077, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}