{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzMDI5Mjk4", "number": 81, "title": "SQL Extraction: dataflow engine variable scope and environment", "bodyText": "Environment is the data structure that the dataflow engine uses to keep track of all possible query fragments a variable can have.", "createdAt": "2020-07-01T22:32:11Z", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81", "merged": true, "mergeCommit": {"oid": "6b8c436f9ee7fbc464f87f8a06b46ecc11a9e8f6"}, "closed": true, "closedAt": "2020-07-10T16:14:30Z", "author": {"login": "creativitRy"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwyAC6gH2gAyNDQzMDI5Mjk4OjlhYTFhZTg1MGYwNGQ4MTNlMmI1ZDNiYWJiZDFjN2FkYzdiMDhjMGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczWxVWgH2gAyNDQzMDI5Mjk4OjBiY2VlZTM0NmJjODI3NGJjYmZmMDBlNGVlOGNmNWE3ODhkMGE5MTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e", "author": {"user": {"login": "creativitRy", "name": "Gahwon Lee"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e", "committedDate": "2020-07-01T22:29:45Z", "message": "SQL Extraction: dataflow engine variable scope and environment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMzU4NzA2", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#pullrequestreview-443358706", "createdAt": "2020-07-06T19:42:21Z", "commit": {"oid": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTo0MjoyMVrOGtkv6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTo0MjoyMVrOGtkv6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0MTE5NA==", "bodyText": "nit: Visits method scope from an Antlr visitor**.** (with periods)", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r450441194", "createdAt": "2020-07-06T19:42:21Z", "author": {"login": "kikkyo"}, "path": "tools/sql_extraction/src/main/kotlin/DataFlowEngine.kt", "diffHunk": "@@ -20,6 +24,42 @@ class DataFlowEngine {\n             .map { QueryUsages(it.key, it.value.sorted()) }\n     }\n \n+    /**\n+     * Visits method scope from an Antlr visitor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMzYyMDE2", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#pullrequestreview-443362016", "createdAt": "2020-07-06T19:48:08Z", "commit": {"oid": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTo0ODowOFrOGtk6Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTo0ODowOFrOGtk6Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0MzgzNA==", "bodyText": "nit: This comment is intentionally leave there for debugging purpose?\nIf just for logging, should we use LOGGER.log (if there is a log method :)).. and we should use \"Add method parameter $paramName.\"", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r450443834", "createdAt": "2020-07-06T19:48:08Z", "author": {"login": "kikkyo"}, "path": "tools/sql_extraction/src/main/kotlin/DataFlowEngine.kt", "diffHunk": "@@ -20,6 +24,42 @@ class DataFlowEngine {\n             .map { QueryUsages(it.key, it.value.sorted()) }\n     }\n \n+    /**\n+     * Visits method scope from an Antlr visitor\n+     *\n+     * @param[visitChildren] function to visit the rest of the method\n+     */\n+    fun visitMethod(visitChildren: () -> Unit) {\n+        visitScope(visitChildren)\n+    }\n+\n+    /**\n+     * Associates [paramName] as a method argument for the most recently called [visitMethod]\n+     */\n+    fun addMethodParameter(paramName: String) {\n+        LOGGER.debug(\"add method parameter $paramName\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMzYzNzQw", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#pullrequestreview-443363740", "createdAt": "2020-07-06T19:51:01Z", "commit": {"oid": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTo1MTowMVrOGtk_dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTo1MTowMVrOGtk_dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0NTE3Mg==", "bodyText": "nit: in java we usually just use interface Map<QueryFragment, Set> = HashMap() if it is the same in kotlin..", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r450445172", "createdAt": "2020-07-06T19:51:01Z", "author": {"login": "kikkyo"}, "path": "tools/sql_extraction/src/main/kotlin/DataFlowEngine.kt", "diffHunk": "@@ -3,12 +3,16 @@ package com.google.cloud.sqlecosystem.sqlextraction\n import com.google.cloud.sqlecosystem.sqlextraction.output.Location\n import com.google.cloud.sqlecosystem.sqlextraction.output.QueryFragment\n import com.google.cloud.sqlecosystem.sqlextraction.output.QueryUsages\n+import mu.KotlinLogging\n+\n+private val LOGGER = KotlinLogging.logger { }\n \n /**\n  * Backend engine for running data-flow analysis\n+ *\n  * @see FrontEnd\n  */\n-class DataFlowEngine {\n+class DataFlowEngine(private val environment: Environment = Environment()) {\n     private val queryUsages: HashMap<QueryFragment, HashSet<Location>> = HashMap()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMzY0MjY2", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#pullrequestreview-443364266", "createdAt": "2020-07-06T19:51:54Z", "commit": {"oid": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTo1MTo1NFrOGtlBBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTo1MTo1NFrOGtlBBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ0NTU3NQ==", "bodyText": "Is this a global logger? should this be inside the class?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r450445575", "createdAt": "2020-07-06T19:51:54Z", "author": {"login": "kikkyo"}, "path": "tools/sql_extraction/src/main/kotlin/DataFlowEngine.kt", "diffHunk": "@@ -3,12 +3,16 @@ package com.google.cloud.sqlecosystem.sqlextraction\n import com.google.cloud.sqlecosystem.sqlextraction.output.Location\n import com.google.cloud.sqlecosystem.sqlextraction.output.QueryFragment\n import com.google.cloud.sqlecosystem.sqlextraction.output.QueryUsages\n+import mu.KotlinLogging\n+\n+private val LOGGER = KotlinLogging.logger { }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMzgxMDM0", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#pullrequestreview-443381034", "createdAt": "2020-07-06T20:20:43Z", "commit": {"oid": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDoyMDo0M1rOGtlz_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMDoyMDo0M1rOGtlz_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ1ODYyMQ==", "bodyText": "Should we use init block instead?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r450458621", "createdAt": "2020-07-06T20:20:43Z", "author": {"login": "kikkyo"}, "path": "tools/sql_extraction/src/main/kotlin/Environment.kt", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.google.cloud.sqlecosystem.sqlextraction\n+\n+import com.google.cloud.sqlecosystem.sqlextraction.output.QueryFragment\n+\n+/**\n+ * A mapping from variable name to all possible query fragment values\n+ */\n+class Environment {\n+    private var parentScope: Environment?\n+    private var reachingDefs: HashMap<String, QueryFragment?>\n+\n+    constructor() {\n+        this.parentScope = null\n+        this.reachingDefs = HashMap()\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MTE3MDY1", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#pullrequestreview-444117065", "createdAt": "2020-07-07T17:46:15Z", "commit": {"oid": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzo0NjoxNVrOGuJNWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzo0NjoxNVrOGuJNWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAzODU1NA==", "bodyText": "The name reachingDefs is less than ideal for me. I would use something like variableUsage or variableReference.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r451038554", "createdAt": "2020-07-07T17:46:15Z", "author": {"login": "feiling"}, "path": "tools/sql_extraction/src/main/kotlin/Environment.kt", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.google.cloud.sqlecosystem.sqlextraction\n+\n+import com.google.cloud.sqlecosystem.sqlextraction.output.QueryFragment\n+\n+/**\n+ * A mapping from variable name to all possible query fragment values\n+ */\n+class Environment {\n+    private var parentScope: Environment?\n+    private var reachingDefs: HashMap<String, QueryFragment?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MTE4MzM0", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#pullrequestreview-444118334", "createdAt": "2020-07-07T17:48:06Z", "commit": {"oid": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzo0ODowNlrOGuJRSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzo1ODo0M1rOGuJpng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAzOTU2MQ==", "bodyText": "I prefer name isVariableDeclaredInScope.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r451039561", "createdAt": "2020-07-07T17:48:06Z", "author": {"login": "feiling"}, "path": "tools/sql_extraction/src/main/kotlin/Environment.kt", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.google.cloud.sqlecosystem.sqlextraction\n+\n+import com.google.cloud.sqlecosystem.sqlextraction.output.QueryFragment\n+\n+/**\n+ * A mapping from variable name to all possible query fragment values\n+ */\n+class Environment {\n+    private var parentScope: Environment?\n+    private var reachingDefs: HashMap<String, QueryFragment?>\n+\n+    constructor() {\n+        this.parentScope = null\n+        this.reachingDefs = HashMap()\n+    }\n+\n+    private constructor(copy: Environment) {\n+        this.parentScope = copy.parentScope\n+        this.reachingDefs = copy.reachingDefs\n+    }\n+\n+    /**\n+     * Declare [varName] as a newly declared variable. Its initial reaching query is null.\n+     * [setVariable] only runs successfully for declared variables.\n+     */\n+    fun declareVariable(varName: String) {\n+        reachingDefs[varName] = null\n+    }\n+\n+    /**\n+     * Checks whether a variable of name [varName] was declared in this current scope.\n+     *\n+     * @return true if variable was declared in this scope\n+     */\n+    fun hasVariableInScope(varName: String): Boolean {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0MDI4NA==", "bodyText": "I prefer name like getVariableUsage or getVariableReference", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r451040284", "createdAt": "2020-07-07T17:49:21Z", "author": {"login": "feiling"}, "path": "tools/sql_extraction/src/main/kotlin/Environment.kt", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.google.cloud.sqlecosystem.sqlextraction\n+\n+import com.google.cloud.sqlecosystem.sqlextraction.output.QueryFragment\n+\n+/**\n+ * A mapping from variable name to all possible query fragment values\n+ */\n+class Environment {\n+    private var parentScope: Environment?\n+    private var reachingDefs: HashMap<String, QueryFragment?>\n+\n+    constructor() {\n+        this.parentScope = null\n+        this.reachingDefs = HashMap()\n+    }\n+\n+    private constructor(copy: Environment) {\n+        this.parentScope = copy.parentScope\n+        this.reachingDefs = copy.reachingDefs\n+    }\n+\n+    /**\n+     * Declare [varName] as a newly declared variable. Its initial reaching query is null.\n+     * [setVariable] only runs successfully for declared variables.\n+     */\n+    fun declareVariable(varName: String) {\n+        reachingDefs[varName] = null\n+    }\n+\n+    /**\n+     * Checks whether a variable of name [varName] was declared in this current scope.\n+     *\n+     * @return true if variable was declared in this scope\n+     */\n+    fun hasVariableInScope(varName: String): Boolean {\n+        return varName in reachingDefs\n+    }\n+\n+    /**\n+     * Gets all possible queries for the variable [varName].\n+     * Variable can be declared in any reachable scope.\n+     *\n+     * @throws[NullPointerException] if variable does not exist\n+     */\n+    fun getVariable(varName: String): QueryFragment? {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0MTQzMA==", "bodyText": "Similarly, getVariableUsageOrDefault or getVariableReferenceOrDefault.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r451041430", "createdAt": "2020-07-07T17:51:21Z", "author": {"login": "feiling"}, "path": "tools/sql_extraction/src/main/kotlin/Environment.kt", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.google.cloud.sqlecosystem.sqlextraction\n+\n+import com.google.cloud.sqlecosystem.sqlextraction.output.QueryFragment\n+\n+/**\n+ * A mapping from variable name to all possible query fragment values\n+ */\n+class Environment {\n+    private var parentScope: Environment?\n+    private var reachingDefs: HashMap<String, QueryFragment?>\n+\n+    constructor() {\n+        this.parentScope = null\n+        this.reachingDefs = HashMap()\n+    }\n+\n+    private constructor(copy: Environment) {\n+        this.parentScope = copy.parentScope\n+        this.reachingDefs = copy.reachingDefs\n+    }\n+\n+    /**\n+     * Declare [varName] as a newly declared variable. Its initial reaching query is null.\n+     * [setVariable] only runs successfully for declared variables.\n+     */\n+    fun declareVariable(varName: String) {\n+        reachingDefs[varName] = null\n+    }\n+\n+    /**\n+     * Checks whether a variable of name [varName] was declared in this current scope.\n+     *\n+     * @return true if variable was declared in this scope\n+     */\n+    fun hasVariableInScope(varName: String): Boolean {\n+        return varName in reachingDefs\n+    }\n+\n+    /**\n+     * Gets all possible queries for the variable [varName].\n+     * Variable can be declared in any reachable scope.\n+     *\n+     * @throws[NullPointerException] if variable does not exist\n+     */\n+    fun getVariable(varName: String): QueryFragment? {\n+        return if (hasVariableInScope(varName)) {\n+            reachingDefs[varName]\n+        } else {\n+            parentScope!!.getVariable(varName)\n+        }\n+    }\n+\n+    /**\n+     * Gets all possible queries for the variable [varName].\n+     * Variable can be declared in any reachable scope.\n+     * [default] is returned if variable doesn't exist in any reachable scope.\n+     */\n+    fun getVariableOrDefault(varName: String, default: QueryFragment? = null): QueryFragment? {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0Mjg4MQ==", "bodyText": "Seems parentScope!!.getVariableOrDefault(varName) should be parentScope!!.getVariableOrDefault(varName, default)?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r451042881", "createdAt": "2020-07-07T17:53:50Z", "author": {"login": "feiling"}, "path": "tools/sql_extraction/src/main/kotlin/Environment.kt", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.google.cloud.sqlecosystem.sqlextraction\n+\n+import com.google.cloud.sqlecosystem.sqlextraction.output.QueryFragment\n+\n+/**\n+ * A mapping from variable name to all possible query fragment values\n+ */\n+class Environment {\n+    private var parentScope: Environment?\n+    private var reachingDefs: HashMap<String, QueryFragment?>\n+\n+    constructor() {\n+        this.parentScope = null\n+        this.reachingDefs = HashMap()\n+    }\n+\n+    private constructor(copy: Environment) {\n+        this.parentScope = copy.parentScope\n+        this.reachingDefs = copy.reachingDefs\n+    }\n+\n+    /**\n+     * Declare [varName] as a newly declared variable. Its initial reaching query is null.\n+     * [setVariable] only runs successfully for declared variables.\n+     */\n+    fun declareVariable(varName: String) {\n+        reachingDefs[varName] = null\n+    }\n+\n+    /**\n+     * Checks whether a variable of name [varName] was declared in this current scope.\n+     *\n+     * @return true if variable was declared in this scope\n+     */\n+    fun hasVariableInScope(varName: String): Boolean {\n+        return varName in reachingDefs\n+    }\n+\n+    /**\n+     * Gets all possible queries for the variable [varName].\n+     * Variable can be declared in any reachable scope.\n+     *\n+     * @throws[NullPointerException] if variable does not exist\n+     */\n+    fun getVariable(varName: String): QueryFragment? {\n+        return if (hasVariableInScope(varName)) {\n+            reachingDefs[varName]\n+        } else {\n+            parentScope!!.getVariable(varName)\n+        }\n+    }\n+\n+    /**\n+     * Gets all possible queries for the variable [varName].\n+     * Variable can be declared in any reachable scope.\n+     * [default] is returned if variable doesn't exist in any reachable scope.\n+     */\n+    fun getVariableOrDefault(varName: String, default: QueryFragment? = null): QueryFragment? {\n+        return when {\n+            hasVariableInScope(varName) -> reachingDefs[varName]\n+            parentScope != null -> parentScope!!.getVariableOrDefault(varName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0NTc5MA==", "bodyText": "Will setVariable be called multiple times for the same variable?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#discussion_r451045790", "createdAt": "2020-07-07T17:58:43Z", "author": {"login": "feiling"}, "path": "tools/sql_extraction/src/main/kotlin/Environment.kt", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.google.cloud.sqlecosystem.sqlextraction\n+\n+import com.google.cloud.sqlecosystem.sqlextraction.output.QueryFragment\n+\n+/**\n+ * A mapping from variable name to all possible query fragment values\n+ */\n+class Environment {\n+    private var parentScope: Environment?\n+    private var reachingDefs: HashMap<String, QueryFragment?>\n+\n+    constructor() {\n+        this.parentScope = null\n+        this.reachingDefs = HashMap()\n+    }\n+\n+    private constructor(copy: Environment) {\n+        this.parentScope = copy.parentScope\n+        this.reachingDefs = copy.reachingDefs\n+    }\n+\n+    /**\n+     * Declare [varName] as a newly declared variable. Its initial reaching query is null.\n+     * [setVariable] only runs successfully for declared variables.\n+     */\n+    fun declareVariable(varName: String) {\n+        reachingDefs[varName] = null\n+    }\n+\n+    /**\n+     * Checks whether a variable of name [varName] was declared in this current scope.\n+     *\n+     * @return true if variable was declared in this scope\n+     */\n+    fun hasVariableInScope(varName: String): Boolean {\n+        return varName in reachingDefs\n+    }\n+\n+    /**\n+     * Gets all possible queries for the variable [varName].\n+     * Variable can be declared in any reachable scope.\n+     *\n+     * @throws[NullPointerException] if variable does not exist\n+     */\n+    fun getVariable(varName: String): QueryFragment? {\n+        return if (hasVariableInScope(varName)) {\n+            reachingDefs[varName]\n+        } else {\n+            parentScope!!.getVariable(varName)\n+        }\n+    }\n+\n+    /**\n+     * Gets all possible queries for the variable [varName].\n+     * Variable can be declared in any reachable scope.\n+     * [default] is returned if variable doesn't exist in any reachable scope.\n+     */\n+    fun getVariableOrDefault(varName: String, default: QueryFragment? = null): QueryFragment? {\n+        return when {\n+            hasVariableInScope(varName) -> reachingDefs[varName]\n+            parentScope != null -> parentScope!!.getVariableOrDefault(varName)\n+            else -> default\n+        }\n+    }\n+\n+    /**\n+     * Overwrites the possible queries for the variable [varName] existing in the most recent scope.\n+     * Variable needs to be defined first to be set.\n+     *\n+     * @throws[NullPointerException] if variable does not exist\n+     */\n+    fun setVariable(varName: String, query: QueryFragment?) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9aa1ae850f04d813e2b5d3babbd1c7adc7b08c0e"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe048f4735174e46ae581477e6bac4388593adf3", "author": {"user": {"login": "creativitRy", "name": "Gahwon Lee"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/fe048f4735174e46ae581477e6bac4388593adf3", "committedDate": "2020-07-07T20:17:26Z", "message": "Better names, better comments, better logs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86ef7f32161426493fc29eb2cfa0d9804bbde637", "author": {"user": {"login": "creativitRy", "name": "Gahwon Lee"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/86ef7f32161426493fc29eb2cfa0d9804bbde637", "committedDate": "2020-07-08T19:39:51Z", "message": "Fixed tests becoming flaky due to mocking lambda"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MDEwNTE1", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/81#pullrequestreview-446010515", "createdAt": "2020-07-09T22:27:54Z", "commit": {"oid": "86ef7f32161426493fc29eb2cfa0d9804bbde637"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bceee346bc8274bcbff00e4ee8cf5a788d0a918", "author": {"user": {"login": "feiling", "name": null}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/0bceee346bc8274bcbff00e4ee8cf5a788d0a918", "committedDate": "2020-07-09T22:28:01Z", "message": "Merge branch 'master' into env"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 607, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}