{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NzU3NTY0", "number": 103, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODozNDo0NlrOEPovQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMzo0MDo0MlrOEQ4HQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODMxNTU0OnYy", "diffSide": "RIGHT", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/Main.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODozNDo0NlrOGzdQPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDowNjoyMlrOG1kEMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwOTg1Mw==", "bodyText": "The logic seems wrong here. Seems it should be\nif (args[0] == null) {", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r456609853", "createdAt": "2020-07-17T18:34:46Z", "author": {"login": "feiling"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/Main.java", "diffHunk": "@@ -1,13 +1,17 @@\n+package com.google.bigquery;\n+\n+import java.io.IOException;\n+\n /**\n  * this file is the main file for the command line tool. The first argument is a txt file\n  * containing the queries. The second argument, which is optional, is a time limit that we\n  * impose on processing a single query. The third argument, which is optional, is a file\n  * that we want to write the results to.\n  */\n-public class QueryBreakdown {\n+public class Main {\n   public static void main(String[] args) {\n     String inputFile = null;\n-    double timeLimit = 0.0;\n+    int errorLimit = 0;\n     String outputFile = null;\n \n     if (args[0] != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bf1dc28c233a1d28404bf27305d5d7e89d7e589"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjczNzgxNw==", "bodyText": "I think the logic here was that if an argument was provided, the variable would be initialized. I maintained the same logic for my new code--let me know if this is wrong!", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r456737817", "createdAt": "2020-07-18T02:28:21Z", "author": {"login": "subinbean"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/Main.java", "diffHunk": "@@ -1,13 +1,17 @@\n+package com.google.bigquery;\n+\n+import java.io.IOException;\n+\n /**\n  * this file is the main file for the command line tool. The first argument is a txt file\n  * containing the queries. The second argument, which is optional, is a time limit that we\n  * impose on processing a single query. The third argument, which is optional, is a file\n  * that we want to write the results to.\n  */\n-public class QueryBreakdown {\n+public class Main {\n   public static void main(String[] args) {\n     String inputFile = null;\n-    double timeLimit = 0.0;\n+    int errorLimit = 0;\n     String outputFile = null;\n \n     if (args[0] != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwOTg1Mw=="}, "originalCommit": {"oid": "1bf1dc28c233a1d28404bf27305d5d7e89d7e589"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUxMjI4MA==", "bodyText": "in this case, the code block should be something like this:\nif (args[0] != null) {\n  inputFile = args[0];\n} else {\n  System.out.println(\"You have not specified the input file\");\n  return -1;\n}\nIn the current form, inputFile is not initialized.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r458512280", "createdAt": "2020-07-22T03:28:41Z", "author": {"login": "feiling"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/Main.java", "diffHunk": "@@ -1,13 +1,17 @@\n+package com.google.bigquery;\n+\n+import java.io.IOException;\n+\n /**\n  * this file is the main file for the command line tool. The first argument is a txt file\n  * containing the queries. The second argument, which is optional, is a time limit that we\n  * impose on processing a single query. The third argument, which is optional, is a file\n  * that we want to write the results to.\n  */\n-public class QueryBreakdown {\n+public class Main {\n   public static void main(String[] args) {\n     String inputFile = null;\n-    double timeLimit = 0.0;\n+    int errorLimit = 0;\n     String outputFile = null;\n \n     if (args[0] != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwOTg1Mw=="}, "originalCommit": {"oid": "1bf1dc28c233a1d28404bf27305d5d7e89d7e589"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgxODYxMA==", "bodyText": "Gotcha, I changed the code in main.java to reflect the CLI interface, so I do believe the current way should resolve this issue. Resolving for now!", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r458818610", "createdAt": "2020-07-22T14:06:22Z", "author": {"login": "subinbean"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/Main.java", "diffHunk": "@@ -1,13 +1,17 @@\n+package com.google.bigquery;\n+\n+import java.io.IOException;\n+\n /**\n  * this file is the main file for the command line tool. The first argument is a txt file\n  * containing the queries. The second argument, which is optional, is a time limit that we\n  * impose on processing a single query. The third argument, which is optional, is a file\n  * that we want to write the results to.\n  */\n-public class QueryBreakdown {\n+public class Main {\n   public static void main(String[] args) {\n     String inputFile = null;\n-    double timeLimit = 0.0;\n+    int errorLimit = 0;\n     String outputFile = null;\n \n     if (args[0] != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwOTg1Mw=="}, "originalCommit": {"oid": "1bf1dc28c233a1d28404bf27305d5d7e89d7e589"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODMxOTU2OnYy", "diffSide": "RIGHT", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/Main.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODozNjowNlrOGzdSxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODozNjowNlrOGzdSxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMDUwMA==", "bodyText": "When this happens, shouldn't you need to throw an exception to stop the execution?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r456610500", "createdAt": "2020-07-17T18:36:06Z", "author": {"login": "feiling"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/Main.java", "diffHunk": "@@ -17,19 +21,24 @@ public static void main(String[] args) {\n       System.out.println(\"You have not specified the input file\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bf1dc28c233a1d28404bf27305d5d7e89d7e589"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODMyMTY4OnYy", "diffSide": "RIGHT", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/Main.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODozNjo0N1rOGzdUGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODozNjo0N1rOGzdUGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMDg0Mw==", "bodyText": "inputFile is not initialized.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r456610843", "createdAt": "2020-07-17T18:36:47Z", "author": {"login": "feiling"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/Main.java", "diffHunk": "@@ -17,19 +21,24 @@ public static void main(String[] args) {\n       System.out.println(\"You have not specified the input file\");\n     }\n     if (args[1] != null) {\n-      timeLimit = Double.parseDouble(args[1]);\n+      errorLimit = Integer.parseInt(args[1]);\n     }\n     if (args[2] != null) {\n       outputFile = args[2];\n     }\n \n     // this is where we will put the file I/O logic through the input reader.\n-    String originalQuery = InputReader.readInput(inputFile);\n+    String originalQuery = null;\n+    try {\n+      originalQuery = InputReader.readInput(inputFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bf1dc28c233a1d28404bf27305d5d7e89d7e589"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODMyNzQxOnYy", "diffSide": "RIGHT", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/InputReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODozODo0OVrOGzdX1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODozODo0OVrOGzdX1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMTc5Ng==", "bodyText": "The code can be simplified by calling readAllLines.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r456611796", "createdAt": "2020-07-17T18:38:49Z", "author": {"login": "feiling"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/InputReader.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.google.bigquery;\n+\n+import java.io.BufferedReader;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+\n+/**\n+ * This class will take care of the input handling logic, essentially parsing the input document\n+ * into queries and data-cleaning if needed.\n+ */\n+public class InputReader {\n+\n+  /**\n+   * This method will take in a txt file name, use BufferedReader to parse the input, and return\n+   * all the queries in a string format\n+   */\n+  public static String readInput(String filename) throws IOException {\n+    BufferedReader reader = null;\n+    String currentLine = \"\";\n+    try {\n+      reader = new BufferedReader(new FileReader((filename)));\n+    } catch (FileNotFoundException e) {\n+      System.out.println(\"A file of this name is not found\");\n+    }\n+\n+    StringBuilder sb = new StringBuilder();\n+\n+    while (currentLine != null) {\n+      sb.append(currentLine);\n+      currentLine = reader.readLine();\n+    }\n+\n+    reader.close();\n+\n+    return sb.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bf1dc28c233a1d28404bf27305d5d7e89d7e589"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODMzNzYxOnYy", "diffSide": "RIGHT", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/Main.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODo0MjoxNlrOGzdeGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMjoyNzoyMFrOGzlD3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMzQwMw==", "bodyText": "Please create a work item to use a library such as http://commons.apache.org/proper/commons-cli/ to process command line args", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r456613403", "createdAt": "2020-07-17T18:42:16Z", "author": {"login": "feiling"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/Main.java", "diffHunk": "@@ -17,19 +21,24 @@ public static void main(String[] args) {\n       System.out.println(\"You have not specified the input file\");\n     }\n     if (args[1] != null) {\n-      timeLimit = Double.parseDouble(args[1]);\n+      errorLimit = Integer.parseInt(args[1]);\n     }\n     if (args[2] != null) {\n       outputFile = args[2];\n     }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bf1dc28c233a1d28404bf27305d5d7e89d7e589"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjczNzc1OA==", "bodyText": "Addressed in most recent commit :)", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r456737758", "createdAt": "2020-07-18T02:27:20Z", "author": {"login": "subinbean"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/Main.java", "diffHunk": "@@ -17,19 +21,24 @@ public static void main(String[] args) {\n       System.out.println(\"You have not specified the input file\");\n     }\n     if (args[1] != null) {\n-      timeLimit = Double.parseDouble(args[1]);\n+      errorLimit = Integer.parseInt(args[1]);\n     }\n     if (args[2] != null) {\n       outputFile = args[2];\n     }\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMzQwMw=="}, "originalCommit": {"oid": "1bf1dc28c233a1d28404bf27305d5d7e89d7e589"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODM0MTYzOnYy", "diffSide": "RIGHT", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/Node.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODo0Mzo0MFrOGzdglg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMzowMDoyOFrOGzjOFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxNDAzOA==", "bodyText": "Use an enum instead of boolean for errorHandlingType.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r456614038", "createdAt": "2020-07-17T18:43:40Z", "author": {"login": "feiling"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/Node.java", "diffHunk": "@@ -7,22 +9,23 @@\n public class Node {\n \n   // ensures tree structure\n-  ArrayList<Node> children;\n-  Node parent;\n+\n+  private ArrayList<Node> children;\n+  private Node parent;\n \n   // ensures that we know which location the error occurs in\n-  int startLine;\n-  int startColumn;\n-  int endLine;\n-  int endColumn;\n+  private int startLine;\n+  private int startColumn;\n+  private int endLine;\n+  private int endColumn;\n \n   // ensures that we know how the error was handled\n-  boolean errorHandlingType;\n-  String replaceFrom;\n-  String replaceTo;\n+  private boolean errorHandlingType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bf1dc28c233a1d28404bf27305d5d7e89d7e589"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwNzYwNg==", "bodyText": "Hopefully resolved with the most recent commit!", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r456707606", "createdAt": "2020-07-17T23:00:28Z", "author": {"login": "subinbean"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/Node.java", "diffHunk": "@@ -7,22 +9,23 @@\n public class Node {\n \n   // ensures tree structure\n-  ArrayList<Node> children;\n-  Node parent;\n+\n+  private ArrayList<Node> children;\n+  private Node parent;\n \n   // ensures that we know which location the error occurs in\n-  int startLine;\n-  int startColumn;\n-  int endLine;\n-  int endColumn;\n+  private int startLine;\n+  private int startColumn;\n+  private int endLine;\n+  private int endColumn;\n \n   // ensures that we know how the error was handled\n-  boolean errorHandlingType;\n-  String replaceFrom;\n-  String replaceTo;\n+  private boolean errorHandlingType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxNDAzOA=="}, "originalCommit": {"oid": "1bf1dc28c233a1d28404bf27305d5d7e89d7e589"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTczOTIzOnYy", "diffSide": "RIGHT", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/CalciteParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzozMToxNFrOG1CiiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzozMToxNFrOG1CiiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2OTMyMA==", "bodyText": "should we make it a final field?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r458269320", "createdAt": "2020-07-21T17:31:14Z", "author": {"login": "AayushBhatnagar"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/CalciteParser.java", "diffHunk": "@@ -12,10 +14,10 @@\n  * Calcite Parser can be used as a blackbox.\n  */\n public class CalciteParser implements Parser {\n-  SqlParser.Config config;\n+  private SqlParser.Config config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e37932466db7a3d5318013b1c0d36ef462200ee2"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTc2Nzc2OnYy", "diffSide": "RIGHT", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/InputReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzozOTowOVrOG1C01A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDo0NzoyOFrOG1l81w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3NDAwNA==", "bodyText": "Why not first replace and then substring? In this case you end up doing substring, replace and append.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r458274004", "createdAt": "2020-07-21T17:39:09Z", "author": {"login": "AayushBhatnagar"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/InputReader.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.google.bigquery;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+/**\n+ * This class will take care of the input handling logic, essentially parsing the input document\n+ * into queries and data-cleaning if needed.\n+ */\n+public class InputReader {\n+\n+  /**\n+   * This method will take in a txt file name, use BufferedReader to parse the input, and return\n+   * all the queries in a string format\n+   */\n+  public static String readInput(String filename) throws IOException {\n+    List<String> lines = Files.readAllLines(Paths.get(filename));\n+\n+    StringBuilder sb = new StringBuilder();\n+    for (String line : lines) {\n+      sb.append(line);\n+    }\n+\n+    String parsedInput = sb.toString();\n+    int len = parsedInput.length();\n+    boolean lastSemicolon = false;\n+\n+    // deals with case where last query ends with a semicolon\n+    if (parsedInput.charAt(len - 1) == ';') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e37932466db7a3d5318013b1c0d36ef462200ee2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg0OTQ5NQ==", "bodyText": "fixed accordingly!", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r458849495", "createdAt": "2020-07-22T14:47:28Z", "author": {"login": "subinbean"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/InputReader.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.google.bigquery;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+/**\n+ * This class will take care of the input handling logic, essentially parsing the input document\n+ * into queries and data-cleaning if needed.\n+ */\n+public class InputReader {\n+\n+  /**\n+   * This method will take in a txt file name, use BufferedReader to parse the input, and return\n+   * all the queries in a string format\n+   */\n+  public static String readInput(String filename) throws IOException {\n+    List<String> lines = Files.readAllLines(Paths.get(filename));\n+\n+    StringBuilder sb = new StringBuilder();\n+    for (String line : lines) {\n+      sb.append(line);\n+    }\n+\n+    String parsedInput = sb.toString();\n+    int len = parsedInput.length();\n+    boolean lastSemicolon = false;\n+\n+    // deals with case where last query ends with a semicolon\n+    if (parsedInput.charAt(len - 1) == ';') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3NDAwNA=="}, "originalCommit": {"oid": "e37932466db7a3d5318013b1c0d36ef462200ee2"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTc4MzI0OnYy", "diffSide": "RIGHT", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/QueryBreakdown.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzo0MzowMVrOG1C-gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTowMjozOVrOG10GnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3NjQ4MA==", "bodyText": "private?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r458276480", "createdAt": "2020-07-21T17:43:01Z", "author": {"login": "AayushBhatnagar"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/QueryBreakdown.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.google.bigquery;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import org.apache.calcite.sql.parser.SqlParseException;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+\n+/**\n+ * This class is where the main logic lives for the algorithm that this tool utilizes. It will\n+ * also be in charge of outputting the results.\n+ */\n+public class QueryBreakdown {\n+\n+  // global fields that keeps track of the minimum unparseable component so far\n+  private int minimumUnparseableComp = Integer.MAX_VALUE;\n+  private Node solution;\n+\n+  // the generated tree\n+  private Node root;\n+  private static Parser parser;\n+\n+  /**\n+   * This is the method that will run QueryBreakdown given an original query and output\n+   * it to the specified output file, or if that is null, generate a new file to put the output in.\n+   * The provided timeLimit will stop the tool from running over a certain time.\n+   */\n+  public static void run(String originalQuery, String outputFile, int errorLimit) {\n+\n+    // determines which parser to use\n+    parser = new CalciteParser();\n+\n+    // uses the loop function to generate and traverse the tree of possible error recoveries\n+    loop(originalQuery, errorLimit);\n+\n+    // write termination logic for output (tracing the node back, reconstructing path, output)\n+    return;\n+  }\n+\n+  /**\n+   * This is where the code for the algorithm will go: essentially, there will be a loop that\n+   * constantly inputs a new query after adequate error handling\n+   */\n+  private static void loop(String inputQuery, int errorLimit) {\n+    try {\n+      parser.parseQuery(inputQuery);\n+    } catch (Exception e) {\n+      // generates new queries through deletion and replacement\n+      SqlParserPos pos = ((SqlParseException) e).getPos();\n+      String deletionQuery = deletion(inputQuery, pos.getLineNum(), pos.getColumnNum(),\n+          pos.getEndColumnNum());\n+      List<String> replacementQueries = replacement(inputQuery, pos.getLineNum(),\n+          pos.getColumnNum(), pos.getEndColumnNum(),\n+          ((SqlParseException) e).getExpectedTokenNames());\n+\n+      // recursively loops through the new queries\n+      loop(deletionQuery, errorLimit);\n+      for (String s: replacementQueries) {\n+        loop(s, errorLimit);\n+      }\n+    }\n+    // termination condition: if the parsing doesn't throw exceptions, then the leaf is reached\n+    return;\n+  }\n+\n+  /**\n+   * This method implements the deletion mechanism: given the position of the component, it\n+   * generates a new query with that component deleted.\n+   */\n+  static String deletion(String inputQuery, int startLine, int startColumn,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e37932466db7a3d5318013b1c0d36ef462200ee2"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg1NTg4OQ==", "bodyText": "left as package private for now as sort of a \"test hook.\" Will address privacy settings later.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r458855889", "createdAt": "2020-07-22T14:55:45Z", "author": {"login": "subinbean"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/QueryBreakdown.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.google.bigquery;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import org.apache.calcite.sql.parser.SqlParseException;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+\n+/**\n+ * This class is where the main logic lives for the algorithm that this tool utilizes. It will\n+ * also be in charge of outputting the results.\n+ */\n+public class QueryBreakdown {\n+\n+  // global fields that keeps track of the minimum unparseable component so far\n+  private int minimumUnparseableComp = Integer.MAX_VALUE;\n+  private Node solution;\n+\n+  // the generated tree\n+  private Node root;\n+  private static Parser parser;\n+\n+  /**\n+   * This is the method that will run QueryBreakdown given an original query and output\n+   * it to the specified output file, or if that is null, generate a new file to put the output in.\n+   * The provided timeLimit will stop the tool from running over a certain time.\n+   */\n+  public static void run(String originalQuery, String outputFile, int errorLimit) {\n+\n+    // determines which parser to use\n+    parser = new CalciteParser();\n+\n+    // uses the loop function to generate and traverse the tree of possible error recoveries\n+    loop(originalQuery, errorLimit);\n+\n+    // write termination logic for output (tracing the node back, reconstructing path, output)\n+    return;\n+  }\n+\n+  /**\n+   * This is where the code for the algorithm will go: essentially, there will be a loop that\n+   * constantly inputs a new query after adequate error handling\n+   */\n+  private static void loop(String inputQuery, int errorLimit) {\n+    try {\n+      parser.parseQuery(inputQuery);\n+    } catch (Exception e) {\n+      // generates new queries through deletion and replacement\n+      SqlParserPos pos = ((SqlParseException) e).getPos();\n+      String deletionQuery = deletion(inputQuery, pos.getLineNum(), pos.getColumnNum(),\n+          pos.getEndColumnNum());\n+      List<String> replacementQueries = replacement(inputQuery, pos.getLineNum(),\n+          pos.getColumnNum(), pos.getEndColumnNum(),\n+          ((SqlParseException) e).getExpectedTokenNames());\n+\n+      // recursively loops through the new queries\n+      loop(deletionQuery, errorLimit);\n+      for (String s: replacementQueries) {\n+        loop(s, errorLimit);\n+      }\n+    }\n+    // termination condition: if the parsing doesn't throw exceptions, then the leaf is reached\n+    return;\n+  }\n+\n+  /**\n+   * This method implements the deletion mechanism: given the position of the component, it\n+   * generates a new query with that component deleted.\n+   */\n+  static String deletion(String inputQuery, int startLine, int startColumn,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3NjQ4MA=="}, "originalCommit": {"oid": "e37932466db7a3d5318013b1c0d36ef462200ee2"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2MjM1OA==", "bodyText": "can you please add a comment in the code explaining the justification of extended visibility of the function?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r459062358", "createdAt": "2020-07-22T20:26:29Z", "author": {"login": "AayushBhatnagar"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/QueryBreakdown.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.google.bigquery;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import org.apache.calcite.sql.parser.SqlParseException;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+\n+/**\n+ * This class is where the main logic lives for the algorithm that this tool utilizes. It will\n+ * also be in charge of outputting the results.\n+ */\n+public class QueryBreakdown {\n+\n+  // global fields that keeps track of the minimum unparseable component so far\n+  private int minimumUnparseableComp = Integer.MAX_VALUE;\n+  private Node solution;\n+\n+  // the generated tree\n+  private Node root;\n+  private static Parser parser;\n+\n+  /**\n+   * This is the method that will run QueryBreakdown given an original query and output\n+   * it to the specified output file, or if that is null, generate a new file to put the output in.\n+   * The provided timeLimit will stop the tool from running over a certain time.\n+   */\n+  public static void run(String originalQuery, String outputFile, int errorLimit) {\n+\n+    // determines which parser to use\n+    parser = new CalciteParser();\n+\n+    // uses the loop function to generate and traverse the tree of possible error recoveries\n+    loop(originalQuery, errorLimit);\n+\n+    // write termination logic for output (tracing the node back, reconstructing path, output)\n+    return;\n+  }\n+\n+  /**\n+   * This is where the code for the algorithm will go: essentially, there will be a loop that\n+   * constantly inputs a new query after adequate error handling\n+   */\n+  private static void loop(String inputQuery, int errorLimit) {\n+    try {\n+      parser.parseQuery(inputQuery);\n+    } catch (Exception e) {\n+      // generates new queries through deletion and replacement\n+      SqlParserPos pos = ((SqlParseException) e).getPos();\n+      String deletionQuery = deletion(inputQuery, pos.getLineNum(), pos.getColumnNum(),\n+          pos.getEndColumnNum());\n+      List<String> replacementQueries = replacement(inputQuery, pos.getLineNum(),\n+          pos.getColumnNum(), pos.getEndColumnNum(),\n+          ((SqlParseException) e).getExpectedTokenNames());\n+\n+      // recursively loops through the new queries\n+      loop(deletionQuery, errorLimit);\n+      for (String s: replacementQueries) {\n+        loop(s, errorLimit);\n+      }\n+    }\n+    // termination condition: if the parsing doesn't throw exceptions, then the leaf is reached\n+    return;\n+  }\n+\n+  /**\n+   * This method implements the deletion mechanism: given the position of the component, it\n+   * generates a new query with that component deleted.\n+   */\n+  static String deletion(String inputQuery, int startLine, int startColumn,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3NjQ4MA=="}, "originalCommit": {"oid": "e37932466db7a3d5318013b1c0d36ef462200ee2"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4MTM3Mg==", "bodyText": "yup, it's more of a comment that's applicable for the entire class so just added a comment above the entire thing", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r459081372", "createdAt": "2020-07-22T21:02:39Z", "author": {"login": "subinbean"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/QueryBreakdown.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.google.bigquery;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import org.apache.calcite.sql.parser.SqlParseException;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+\n+/**\n+ * This class is where the main logic lives for the algorithm that this tool utilizes. It will\n+ * also be in charge of outputting the results.\n+ */\n+public class QueryBreakdown {\n+\n+  // global fields that keeps track of the minimum unparseable component so far\n+  private int minimumUnparseableComp = Integer.MAX_VALUE;\n+  private Node solution;\n+\n+  // the generated tree\n+  private Node root;\n+  private static Parser parser;\n+\n+  /**\n+   * This is the method that will run QueryBreakdown given an original query and output\n+   * it to the specified output file, or if that is null, generate a new file to put the output in.\n+   * The provided timeLimit will stop the tool from running over a certain time.\n+   */\n+  public static void run(String originalQuery, String outputFile, int errorLimit) {\n+\n+    // determines which parser to use\n+    parser = new CalciteParser();\n+\n+    // uses the loop function to generate and traverse the tree of possible error recoveries\n+    loop(originalQuery, errorLimit);\n+\n+    // write termination logic for output (tracing the node back, reconstructing path, output)\n+    return;\n+  }\n+\n+  /**\n+   * This is where the code for the algorithm will go: essentially, there will be a loop that\n+   * constantly inputs a new query after adequate error handling\n+   */\n+  private static void loop(String inputQuery, int errorLimit) {\n+    try {\n+      parser.parseQuery(inputQuery);\n+    } catch (Exception e) {\n+      // generates new queries through deletion and replacement\n+      SqlParserPos pos = ((SqlParseException) e).getPos();\n+      String deletionQuery = deletion(inputQuery, pos.getLineNum(), pos.getColumnNum(),\n+          pos.getEndColumnNum());\n+      List<String> replacementQueries = replacement(inputQuery, pos.getLineNum(),\n+          pos.getColumnNum(), pos.getEndColumnNum(),\n+          ((SqlParseException) e).getExpectedTokenNames());\n+\n+      // recursively loops through the new queries\n+      loop(deletionQuery, errorLimit);\n+      for (String s: replacementQueries) {\n+        loop(s, errorLimit);\n+      }\n+    }\n+    // termination condition: if the parsing doesn't throw exceptions, then the leaf is reached\n+    return;\n+  }\n+\n+  /**\n+   * This method implements the deletion mechanism: given the position of the component, it\n+   * generates a new query with that component deleted.\n+   */\n+  static String deletion(String inputQuery, int startLine, int startColumn,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3NjQ4MA=="}, "originalCommit": {"oid": "e37932466db7a3d5318013b1c0d36ef462200ee2"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTc4NTgyOnYy", "diffSide": "RIGHT", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/QueryBreakdown.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzo0Mzo0MVrOG1DAHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzo0Mzo0MVrOG1DAHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3Njg5NA==", "bodyText": "If all methods are static, then why these fields are not static?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r458276894", "createdAt": "2020-07-21T17:43:41Z", "author": {"login": "AayushBhatnagar"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/QueryBreakdown.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.google.bigquery;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import org.apache.calcite.sql.parser.SqlParseException;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+\n+/**\n+ * This class is where the main logic lives for the algorithm that this tool utilizes. It will\n+ * also be in charge of outputting the results.\n+ */\n+public class QueryBreakdown {\n+\n+  // global fields that keeps track of the minimum unparseable component so far\n+  private int minimumUnparseableComp = Integer.MAX_VALUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e37932466db7a3d5318013b1c0d36ef462200ee2"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTc4ODY2OnYy", "diffSide": "RIGHT", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/QueryBreakdown.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzo0NDoyNlrOG1DB7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTowMjoxN1rOG10F3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3NzM1Ng==", "bodyText": "no need for this statement.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r458277356", "createdAt": "2020-07-21T17:44:26Z", "author": {"login": "AayushBhatnagar"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/QueryBreakdown.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.google.bigquery;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import org.apache.calcite.sql.parser.SqlParseException;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+\n+/**\n+ * This class is where the main logic lives for the algorithm that this tool utilizes. It will\n+ * also be in charge of outputting the results.\n+ */\n+public class QueryBreakdown {\n+\n+  // global fields that keeps track of the minimum unparseable component so far\n+  private int minimumUnparseableComp = Integer.MAX_VALUE;\n+  private Node solution;\n+\n+  // the generated tree\n+  private Node root;\n+  private static Parser parser;\n+\n+  /**\n+   * This is the method that will run QueryBreakdown given an original query and output\n+   * it to the specified output file, or if that is null, generate a new file to put the output in.\n+   * The provided timeLimit will stop the tool from running over a certain time.\n+   */\n+  public static void run(String originalQuery, String outputFile, int errorLimit) {\n+\n+    // determines which parser to use\n+    parser = new CalciteParser();\n+\n+    // uses the loop function to generate and traverse the tree of possible error recoveries\n+    loop(originalQuery, errorLimit);\n+\n+    // write termination logic for output (tracing the node back, reconstructing path, output)\n+    return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e37932466db7a3d5318013b1c0d36ef462200ee2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2MTY4OA==", "bodyText": "I can still see this return statement. can you please remove it first?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r459061688", "createdAt": "2020-07-22T20:25:11Z", "author": {"login": "AayushBhatnagar"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/QueryBreakdown.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.google.bigquery;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import org.apache.calcite.sql.parser.SqlParseException;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+\n+/**\n+ * This class is where the main logic lives for the algorithm that this tool utilizes. It will\n+ * also be in charge of outputting the results.\n+ */\n+public class QueryBreakdown {\n+\n+  // global fields that keeps track of the minimum unparseable component so far\n+  private int minimumUnparseableComp = Integer.MAX_VALUE;\n+  private Node solution;\n+\n+  // the generated tree\n+  private Node root;\n+  private static Parser parser;\n+\n+  /**\n+   * This is the method that will run QueryBreakdown given an original query and output\n+   * it to the specified output file, or if that is null, generate a new file to put the output in.\n+   * The provided timeLimit will stop the tool from running over a certain time.\n+   */\n+  public static void run(String originalQuery, String outputFile, int errorLimit) {\n+\n+    // determines which parser to use\n+    parser = new CalciteParser();\n+\n+    // uses the loop function to generate and traverse the tree of possible error recoveries\n+    loop(originalQuery, errorLimit);\n+\n+    // write termination logic for output (tracing the node back, reconstructing path, output)\n+    return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3NzM1Ng=="}, "originalCommit": {"oid": "e37932466db7a3d5318013b1c0d36ef462200ee2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA4MTE4MA==", "bodyText": "yikes, my bad--should be removed now", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r459081180", "createdAt": "2020-07-22T21:02:17Z", "author": {"login": "subinbean"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/QueryBreakdown.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.google.bigquery;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import org.apache.calcite.sql.parser.SqlParseException;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+\n+/**\n+ * This class is where the main logic lives for the algorithm that this tool utilizes. It will\n+ * also be in charge of outputting the results.\n+ */\n+public class QueryBreakdown {\n+\n+  // global fields that keeps track of the minimum unparseable component so far\n+  private int minimumUnparseableComp = Integer.MAX_VALUE;\n+  private Node solution;\n+\n+  // the generated tree\n+  private Node root;\n+  private static Parser parser;\n+\n+  /**\n+   * This is the method that will run QueryBreakdown given an original query and output\n+   * it to the specified output file, or if that is null, generate a new file to put the output in.\n+   * The provided timeLimit will stop the tool from running over a certain time.\n+   */\n+  public static void run(String originalQuery, String outputFile, int errorLimit) {\n+\n+    // determines which parser to use\n+    parser = new CalciteParser();\n+\n+    // uses the loop function to generate and traverse the tree of possible error recoveries\n+    loop(originalQuery, errorLimit);\n+\n+    // write termination logic for output (tracing the node back, reconstructing path, output)\n+    return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3NzM1Ng=="}, "originalCommit": {"oid": "e37932466db7a3d5318013b1c0d36ef462200ee2"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTc5MTM0OnYy", "diffSide": "RIGHT", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/QueryBreakdown.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzo0NTowNFrOG1DDpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNToxMzozM1rOG1nI3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3Nzc5Ng==", "bodyText": "is there a cast failure possibility?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r458277796", "createdAt": "2020-07-21T17:45:04Z", "author": {"login": "AayushBhatnagar"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/QueryBreakdown.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.google.bigquery;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import org.apache.calcite.sql.parser.SqlParseException;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+\n+/**\n+ * This class is where the main logic lives for the algorithm that this tool utilizes. It will\n+ * also be in charge of outputting the results.\n+ */\n+public class QueryBreakdown {\n+\n+  // global fields that keeps track of the minimum unparseable component so far\n+  private int minimumUnparseableComp = Integer.MAX_VALUE;\n+  private Node solution;\n+\n+  // the generated tree\n+  private Node root;\n+  private static Parser parser;\n+\n+  /**\n+   * This is the method that will run QueryBreakdown given an original query and output\n+   * it to the specified output file, or if that is null, generate a new file to put the output in.\n+   * The provided timeLimit will stop the tool from running over a certain time.\n+   */\n+  public static void run(String originalQuery, String outputFile, int errorLimit) {\n+\n+    // determines which parser to use\n+    parser = new CalciteParser();\n+\n+    // uses the loop function to generate and traverse the tree of possible error recoveries\n+    loop(originalQuery, errorLimit);\n+\n+    // write termination logic for output (tracing the node back, reconstructing path, output)\n+    return;\n+  }\n+\n+  /**\n+   * This is where the code for the algorithm will go: essentially, there will be a loop that\n+   * constantly inputs a new query after adequate error handling\n+   */\n+  private static void loop(String inputQuery, int errorLimit) {\n+    try {\n+      parser.parseQuery(inputQuery);\n+    } catch (Exception e) {\n+      // generates new queries through deletion and replacement\n+      SqlParserPos pos = ((SqlParseException) e).getPos();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e37932466db7a3d5318013b1c0d36ef462200ee2"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2ODk1OQ==", "bodyText": "An issue is that the exception can catch other unwanted exceptions: design will be changed in the future by creating an exception superclass", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r458868959", "createdAt": "2020-07-22T15:13:33Z", "author": {"login": "subinbean"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/QueryBreakdown.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.google.bigquery;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import org.apache.calcite.sql.parser.SqlParseException;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+\n+/**\n+ * This class is where the main logic lives for the algorithm that this tool utilizes. It will\n+ * also be in charge of outputting the results.\n+ */\n+public class QueryBreakdown {\n+\n+  // global fields that keeps track of the minimum unparseable component so far\n+  private int minimumUnparseableComp = Integer.MAX_VALUE;\n+  private Node solution;\n+\n+  // the generated tree\n+  private Node root;\n+  private static Parser parser;\n+\n+  /**\n+   * This is the method that will run QueryBreakdown given an original query and output\n+   * it to the specified output file, or if that is null, generate a new file to put the output in.\n+   * The provided timeLimit will stop the tool from running over a certain time.\n+   */\n+  public static void run(String originalQuery, String outputFile, int errorLimit) {\n+\n+    // determines which parser to use\n+    parser = new CalciteParser();\n+\n+    // uses the loop function to generate and traverse the tree of possible error recoveries\n+    loop(originalQuery, errorLimit);\n+\n+    // write termination logic for output (tracing the node back, reconstructing path, output)\n+    return;\n+  }\n+\n+  /**\n+   * This is where the code for the algorithm will go: essentially, there will be a loop that\n+   * constantly inputs a new query after adequate error handling\n+   */\n+  private static void loop(String inputQuery, int errorLimit) {\n+    try {\n+      parser.parseQuery(inputQuery);\n+    } catch (Exception e) {\n+      // generates new queries through deletion and replacement\n+      SqlParserPos pos = ((SqlParseException) e).getPos();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3Nzc5Ng=="}, "originalCommit": {"oid": "e37932466db7a3d5318013b1c0d36ef462200ee2"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTc5NzU0OnYy", "diffSide": "RIGHT", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/QueryBreakdown.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzo0Njo0NFrOG1DHnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzo0Njo0NFrOG1DHnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3ODgxMw==", "bodyText": "no need for this statement.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r458278813", "createdAt": "2020-07-21T17:46:44Z", "author": {"login": "AayushBhatnagar"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/QueryBreakdown.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.google.bigquery;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import org.apache.calcite.sql.parser.SqlParseException;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+\n+/**\n+ * This class is where the main logic lives for the algorithm that this tool utilizes. It will\n+ * also be in charge of outputting the results.\n+ */\n+public class QueryBreakdown {\n+\n+  // global fields that keeps track of the minimum unparseable component so far\n+  private int minimumUnparseableComp = Integer.MAX_VALUE;\n+  private Node solution;\n+\n+  // the generated tree\n+  private Node root;\n+  private static Parser parser;\n+\n+  /**\n+   * This is the method that will run QueryBreakdown given an original query and output\n+   * it to the specified output file, or if that is null, generate a new file to put the output in.\n+   * The provided timeLimit will stop the tool from running over a certain time.\n+   */\n+  public static void run(String originalQuery, String outputFile, int errorLimit) {\n+\n+    // determines which parser to use\n+    parser = new CalciteParser();\n+\n+    // uses the loop function to generate and traverse the tree of possible error recoveries\n+    loop(originalQuery, errorLimit);\n+\n+    // write termination logic for output (tracing the node back, reconstructing path, output)\n+    return;\n+  }\n+\n+  /**\n+   * This is where the code for the algorithm will go: essentially, there will be a loop that\n+   * constantly inputs a new query after adequate error handling\n+   */\n+  private static void loop(String inputQuery, int errorLimit) {\n+    try {\n+      parser.parseQuery(inputQuery);\n+    } catch (Exception e) {\n+      // generates new queries through deletion and replacement\n+      SqlParserPos pos = ((SqlParseException) e).getPos();\n+      String deletionQuery = deletion(inputQuery, pos.getLineNum(), pos.getColumnNum(),\n+          pos.getEndColumnNum());\n+      List<String> replacementQueries = replacement(inputQuery, pos.getLineNum(),\n+          pos.getColumnNum(), pos.getEndColumnNum(),\n+          ((SqlParseException) e).getExpectedTokenNames());\n+\n+      // recursively loops through the new queries\n+      loop(deletionQuery, errorLimit);\n+      for (String s: replacementQueries) {\n+        loop(s, errorLimit);\n+      }\n+    }\n+    // termination condition: if the parsing doesn't throw exceptions, then the leaf is reached\n+    return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e37932466db7a3d5318013b1c0d36ef462200ee2"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTgwMDEwOnYy", "diffSide": "RIGHT", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/QueryBreakdown.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzo0NzoxOFrOG1DJOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzo0NzoxOFrOG1DJOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3OTIyNg==", "bodyText": "Whats the use of errorLimit variable?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r458279226", "createdAt": "2020-07-21T17:47:18Z", "author": {"login": "AayushBhatnagar"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/QueryBreakdown.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.google.bigquery;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import org.apache.calcite.sql.parser.SqlParseException;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+\n+/**\n+ * This class is where the main logic lives for the algorithm that this tool utilizes. It will\n+ * also be in charge of outputting the results.\n+ */\n+public class QueryBreakdown {\n+\n+  // global fields that keeps track of the minimum unparseable component so far\n+  private int minimumUnparseableComp = Integer.MAX_VALUE;\n+  private Node solution;\n+\n+  // the generated tree\n+  private Node root;\n+  private static Parser parser;\n+\n+  /**\n+   * This is the method that will run QueryBreakdown given an original query and output\n+   * it to the specified output file, or if that is null, generate a new file to put the output in.\n+   * The provided timeLimit will stop the tool from running over a certain time.\n+   */\n+  public static void run(String originalQuery, String outputFile, int errorLimit) {\n+\n+    // determines which parser to use\n+    parser = new CalciteParser();\n+\n+    // uses the loop function to generate and traverse the tree of possible error recoveries\n+    loop(originalQuery, errorLimit);\n+\n+    // write termination logic for output (tracing the node back, reconstructing path, output)\n+    return;\n+  }\n+\n+  /**\n+   * This is where the code for the algorithm will go: essentially, there will be a loop that\n+   * constantly inputs a new query after adequate error handling\n+   */\n+  private static void loop(String inputQuery, int errorLimit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e37932466db7a3d5318013b1c0d36ef462200ee2"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTMxMjgxOnYy", "diffSide": "RIGHT", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/InputReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMzozNTo1MVrOG1RexQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMzozNTo1MVrOG1RexQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUxNDExNw==", "bodyText": "Please add a //TODO comment that a more robust way to break the input into statements will be implemented in the future. The current code probably works for simple cases, but it doesn't handle comments, or semicolon in strings for example.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r458514117", "createdAt": "2020-07-22T03:35:51Z", "author": {"login": "feiling"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/InputReader.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.google.bigquery;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+/**\n+ * This class will take care of the input handling logic, essentially parsing the input document\n+ * into queries and data-cleaning if needed.\n+ */\n+public class InputReader {\n+\n+  /**\n+   * This method will take in a txt file name, use BufferedReader to parse the input, and return\n+   * all the queries in a string format\n+   */\n+  public static String readInput(String filename) throws IOException {\n+    List<String> lines = Files.readAllLines(Paths.get(filename));\n+\n+    StringBuilder sb = new StringBuilder();\n+    for (String line : lines) {\n+      sb.append(line);\n+    }\n+\n+    String parsedInput = sb.toString();\n+    int len = parsedInput.length();\n+    boolean lastSemicolon = false;\n+\n+    // deals with case where last query ends with a semicolon\n+    if (parsedInput.charAt(len - 1) == ';') {\n+      parsedInput = parsedInput.substring(0, len - 1);\n+      lastSemicolon = true;\n+    }\n+\n+    parsedInput = parsedInput.replaceAll(\";\", \";\\n\");\n+    if (lastSemicolon) {\n+      parsedInput = parsedInput + ';';\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e37932466db7a3d5318013b1c0d36ef462200ee2"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTMxNDM1OnYy", "diffSide": "RIGHT", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/Main.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMzozNjo1NVrOG1Rfow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMzozNjo1NVrOG1Rfow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUxNDMzOQ==", "bodyText": "Please add comment describes what command line flags are supported. Also, add some sample usages.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r458514339", "createdAt": "2020-07-22T03:36:55Z", "author": {"login": "feiling"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/Main.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.google.bigquery;\n+\n+import org.apache.commons.cli.*;\n+\n+import java.io.IOException;\n+import java.util.Comparator;\n+\n+/**\n+ * this file is the main file for the command line tool. The first argument is a txt file\n+ * containing the queries. The second argument, which is optional, is a time limit that we\n+ * impose on processing a single query. The third argument, which is optional, is a file\n+ * that we want to write the results to.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e37932466db7a3d5318013b1c0d36ef462200ee2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTMxNzI4OnYy", "diffSide": "RIGHT", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/Main.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMzozOTowM1rOG1RhdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDoyMjozNlrOG1kyag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUxNDgwNA==", "bodyText": "What's the purpose of having this comparator?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r458514804", "createdAt": "2020-07-22T03:39:03Z", "author": {"login": "feiling"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/Main.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.google.bigquery;\n+\n+import org.apache.commons.cli.*;\n+\n+import java.io.IOException;\n+import java.util.Comparator;\n+\n+/**\n+ * this file is the main file for the command line tool. The first argument is a txt file\n+ * containing the queries. The second argument, which is optional, is a time limit that we\n+ * impose on processing a single query. The third argument, which is optional, is a file\n+ * that we want to write the results to.\n+ */\n+public class Main {\n+  public static void main(String[] args) {\n+    String inputFile = null;\n+    int errorLimit = 0;\n+    String outputFile = null;\n+    CommandLine cl = createCommand(args);\n+\n+    // if there is an error in parsing the commandline\n+    if (cl == null) {\n+      System.exit(1);\n+    }\n+\n+    if (cl.hasOption(\"r\")) {\n+      inputFile = cl.getOptionValue(\"r\");\n+    }\n+    if (cl.hasOption(\"w\")) {\n+      outputFile = cl.getOptionValue(\"w\");\n+    }\n+    if (cl.hasOption(\"l\")) {\n+      errorLimit = Integer.parseInt( cl.getOptionValue(\"l\"));\n+    }\n+\n+    // this is where we will put the file I/O logic through the input reader.\n+    String originalQuery = null;\n+    try {\n+      originalQuery = InputReader.readInput(inputFile);\n+    } catch (IOException e) {\n+      System.out.println(\"there was an I/O error while reading the input\");\n+    }\n+\n+    /* this is where we feed in the original query to the UnparseableDetector, which will find\n+       all the unparseable components of the query and output them into the output file if\n+       specified. Otherwise, it will be autogenerated.\n+     */\n+    QueryBreakdown.run(originalQuery, outputFile, errorLimit);\n+  }\n+\n+  /**\n+   * This is the method that instantiates a CommandLine object for the Apache CLI Interface. It deals with\n+   * command line parsing as well as help generation once parsing is unavailable\n+   */\n+  public static CommandLine createCommand(String[] args) {\n+    CommandLineParser parser = new DefaultParser();\n+    Options options = createOptions();\n+    HelpFormatter help = new HelpFormatter();\n+\n+    help.setOptionComparator(new Comparator<Option>() {\n+      public int compare(Option option1, Option option2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e37932466db7a3d5318013b1c0d36ef462200ee2"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgzMDQ0Mg==", "bodyText": "The purpose of the comparator is to just order the commands in the order I want it, since the default is alphabetical.\nBefore: -r -l -w\nAfter: -r -w -l", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r458830442", "createdAt": "2020-07-22T14:22:36Z", "author": {"login": "subinbean"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/Main.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.google.bigquery;\n+\n+import org.apache.commons.cli.*;\n+\n+import java.io.IOException;\n+import java.util.Comparator;\n+\n+/**\n+ * this file is the main file for the command line tool. The first argument is a txt file\n+ * containing the queries. The second argument, which is optional, is a time limit that we\n+ * impose on processing a single query. The third argument, which is optional, is a file\n+ * that we want to write the results to.\n+ */\n+public class Main {\n+  public static void main(String[] args) {\n+    String inputFile = null;\n+    int errorLimit = 0;\n+    String outputFile = null;\n+    CommandLine cl = createCommand(args);\n+\n+    // if there is an error in parsing the commandline\n+    if (cl == null) {\n+      System.exit(1);\n+    }\n+\n+    if (cl.hasOption(\"r\")) {\n+      inputFile = cl.getOptionValue(\"r\");\n+    }\n+    if (cl.hasOption(\"w\")) {\n+      outputFile = cl.getOptionValue(\"w\");\n+    }\n+    if (cl.hasOption(\"l\")) {\n+      errorLimit = Integer.parseInt( cl.getOptionValue(\"l\"));\n+    }\n+\n+    // this is where we will put the file I/O logic through the input reader.\n+    String originalQuery = null;\n+    try {\n+      originalQuery = InputReader.readInput(inputFile);\n+    } catch (IOException e) {\n+      System.out.println(\"there was an I/O error while reading the input\");\n+    }\n+\n+    /* this is where we feed in the original query to the UnparseableDetector, which will find\n+       all the unparseable components of the query and output them into the output file if\n+       specified. Otherwise, it will be autogenerated.\n+     */\n+    QueryBreakdown.run(originalQuery, outputFile, errorLimit);\n+  }\n+\n+  /**\n+   * This is the method that instantiates a CommandLine object for the Apache CLI Interface. It deals with\n+   * command line parsing as well as help generation once parsing is unavailable\n+   */\n+  public static CommandLine createCommand(String[] args) {\n+    CommandLineParser parser = new DefaultParser();\n+    Options options = createOptions();\n+    HelpFormatter help = new HelpFormatter();\n+\n+    help.setOptionComparator(new Comparator<Option>() {\n+      public int compare(Option option1, Option option2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUxNDgwNA=="}, "originalCommit": {"oid": "e37932466db7a3d5318013b1c0d36ef462200ee2"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTMxOTgzOnYy", "diffSide": "RIGHT", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/Main.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMzo0MDoyM1rOG1Ri4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMzo0MDoyM1rOG1Ri4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUxNTE2OA==", "bodyText": "I think \"i\" and \"inputFile\" is a better name for this flag.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r458515168", "createdAt": "2020-07-22T03:40:23Z", "author": {"login": "feiling"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/Main.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.google.bigquery;\n+\n+import org.apache.commons.cli.*;\n+\n+import java.io.IOException;\n+import java.util.Comparator;\n+\n+/**\n+ * this file is the main file for the command line tool. The first argument is a txt file\n+ * containing the queries. The second argument, which is optional, is a time limit that we\n+ * impose on processing a single query. The third argument, which is optional, is a file\n+ * that we want to write the results to.\n+ */\n+public class Main {\n+  public static void main(String[] args) {\n+    String inputFile = null;\n+    int errorLimit = 0;\n+    String outputFile = null;\n+    CommandLine cl = createCommand(args);\n+\n+    // if there is an error in parsing the commandline\n+    if (cl == null) {\n+      System.exit(1);\n+    }\n+\n+    if (cl.hasOption(\"r\")) {\n+      inputFile = cl.getOptionValue(\"r\");\n+    }\n+    if (cl.hasOption(\"w\")) {\n+      outputFile = cl.getOptionValue(\"w\");\n+    }\n+    if (cl.hasOption(\"l\")) {\n+      errorLimit = Integer.parseInt( cl.getOptionValue(\"l\"));\n+    }\n+\n+    // this is where we will put the file I/O logic through the input reader.\n+    String originalQuery = null;\n+    try {\n+      originalQuery = InputReader.readInput(inputFile);\n+    } catch (IOException e) {\n+      System.out.println(\"there was an I/O error while reading the input\");\n+    }\n+\n+    /* this is where we feed in the original query to the UnparseableDetector, which will find\n+       all the unparseable components of the query and output them into the output file if\n+       specified. Otherwise, it will be autogenerated.\n+     */\n+    QueryBreakdown.run(originalQuery, outputFile, errorLimit);\n+  }\n+\n+  /**\n+   * This is the method that instantiates a CommandLine object for the Apache CLI Interface. It deals with\n+   * command line parsing as well as help generation once parsing is unavailable\n+   */\n+  public static CommandLine createCommand(String[] args) {\n+    CommandLineParser parser = new DefaultParser();\n+    Options options = createOptions();\n+    HelpFormatter help = new HelpFormatter();\n+\n+    help.setOptionComparator(new Comparator<Option>() {\n+      public int compare(Option option1, Option option2) {\n+        if (option1.isRequired() != option2.isRequired()) {\n+          return option1.isRequired() ? -1 : 1;\n+        }\n+        else {\n+          return (option1.getLongOpt().equals(\"write\")) ? -1 : 1;\n+        }\n+      }\n+    });\n+\n+    CommandLine cl = null;\n+    try {\n+      cl = parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(\"there was an issue parsing the commandline\" + e.getMessage());\n+      help.printHelp(\"query_breakdown\", options, true);\n+    }\n+\n+    return cl;\n+  }\n+\n+  /**\n+   * This is the method that instantiates options for the Apache CLI interface\n+   */\n+  public static Options createOptions() {\n+    Options options = new Options();\n+    options.addOption(Option.builder(\"r\").required(true).longOpt(\"read\").hasArg(true).argName(\"PATH\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e37932466db7a3d5318013b1c0d36ef462200ee2"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTMyMDMyOnYy", "diffSide": "RIGHT", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/Main.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMzo0MDo0MlrOG1RjIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMzo0MDo0MlrOG1RjIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUxNTIzNQ==", "bodyText": "Use \"o\" and \"outputFile\" for this flag.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/103#discussion_r458515235", "createdAt": "2020-07-22T03:40:42Z", "author": {"login": "feiling"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/Main.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.google.bigquery;\n+\n+import org.apache.commons.cli.*;\n+\n+import java.io.IOException;\n+import java.util.Comparator;\n+\n+/**\n+ * this file is the main file for the command line tool. The first argument is a txt file\n+ * containing the queries. The second argument, which is optional, is a time limit that we\n+ * impose on processing a single query. The third argument, which is optional, is a file\n+ * that we want to write the results to.\n+ */\n+public class Main {\n+  public static void main(String[] args) {\n+    String inputFile = null;\n+    int errorLimit = 0;\n+    String outputFile = null;\n+    CommandLine cl = createCommand(args);\n+\n+    // if there is an error in parsing the commandline\n+    if (cl == null) {\n+      System.exit(1);\n+    }\n+\n+    if (cl.hasOption(\"r\")) {\n+      inputFile = cl.getOptionValue(\"r\");\n+    }\n+    if (cl.hasOption(\"w\")) {\n+      outputFile = cl.getOptionValue(\"w\");\n+    }\n+    if (cl.hasOption(\"l\")) {\n+      errorLimit = Integer.parseInt( cl.getOptionValue(\"l\"));\n+    }\n+\n+    // this is where we will put the file I/O logic through the input reader.\n+    String originalQuery = null;\n+    try {\n+      originalQuery = InputReader.readInput(inputFile);\n+    } catch (IOException e) {\n+      System.out.println(\"there was an I/O error while reading the input\");\n+    }\n+\n+    /* this is where we feed in the original query to the UnparseableDetector, which will find\n+       all the unparseable components of the query and output them into the output file if\n+       specified. Otherwise, it will be autogenerated.\n+     */\n+    QueryBreakdown.run(originalQuery, outputFile, errorLimit);\n+  }\n+\n+  /**\n+   * This is the method that instantiates a CommandLine object for the Apache CLI Interface. It deals with\n+   * command line parsing as well as help generation once parsing is unavailable\n+   */\n+  public static CommandLine createCommand(String[] args) {\n+    CommandLineParser parser = new DefaultParser();\n+    Options options = createOptions();\n+    HelpFormatter help = new HelpFormatter();\n+\n+    help.setOptionComparator(new Comparator<Option>() {\n+      public int compare(Option option1, Option option2) {\n+        if (option1.isRequired() != option2.isRequired()) {\n+          return option1.isRequired() ? -1 : 1;\n+        }\n+        else {\n+          return (option1.getLongOpt().equals(\"write\")) ? -1 : 1;\n+        }\n+      }\n+    });\n+\n+    CommandLine cl = null;\n+    try {\n+      cl = parser.parse(options, args);\n+    } catch (ParseException e) {\n+      System.out.println(\"there was an issue parsing the commandline\" + e.getMessage());\n+      help.printHelp(\"query_breakdown\", options, true);\n+    }\n+\n+    return cl;\n+  }\n+\n+  /**\n+   * This is the method that instantiates options for the Apache CLI interface\n+   */\n+  public static Options createOptions() {\n+    Options options = new Options();\n+    options.addOption(Option.builder(\"r\").required(true).longOpt(\"read\").hasArg(true).argName(\"PATH\")\n+            .desc(\"this is the file containing queries to be inputted into the tool\").build());\n+    options.addOption(Option.builder(\"w\").longOpt(\"write\").hasArg(true).argName(\"PATH\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e37932466db7a3d5318013b1c0d36ef462200ee2"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3036, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}