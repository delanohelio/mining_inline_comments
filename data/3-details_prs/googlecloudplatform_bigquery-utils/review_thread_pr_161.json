{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxOTIyNzE3", "number": 161, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjo1NTo0MlrOEbxPRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjo1OTo1OFrOEbxS9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTUzNzMyOnYy", "diffSide": "LEFT", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/ReplacementLogic.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjo1NTo0MlrOHF4_1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMToxMDoxN1rOHF-YJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkzODc3NA==", "bodyText": "Please add a comment to explain what's the purpose of n.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/161#discussion_r475938774", "createdAt": "2020-08-24T22:55:42Z", "author": {"login": "feiling"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/ReplacementLogic.java", "diffHunk": "@@ -9,23 +10,50 @@\n \n   /**\n    * Given a component, provides a recommendation as to which component the input should be\n-   * replaced with. Returns a list of components that it recommends.\n+   * replaced with. Returns a list of components that it recommends. The default method of\n+   * choosing recommendations is through randomization.\n    *\n    * We choose ArrayLists as the data structure because we want to impose a certain ordering\n    * with the recommendations: certain recommendations should be \"better\" than others\n+   *\n+   * n is an integer that controls the number of replacement options\n    */\n   public static ArrayList<String> replace (String component, ArrayList<String> options) {\n-    // simply returns the first n options", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a96ab4e20c67af1adb791ba3c791e05505f725d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAyNjkxNw==", "bodyText": "addressed in the next PR!", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/161#discussion_r476026917", "createdAt": "2020-08-25T01:10:17Z", "author": {"login": "subinbean"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/ReplacementLogic.java", "diffHunk": "@@ -9,23 +10,50 @@\n \n   /**\n    * Given a component, provides a recommendation as to which component the input should be\n-   * replaced with. Returns a list of components that it recommends.\n+   * replaced with. Returns a list of components that it recommends. The default method of\n+   * choosing recommendations is through randomization.\n    *\n    * We choose ArrayLists as the data structure because we want to impose a certain ordering\n    * with the recommendations: certain recommendations should be \"better\" than others\n+   *\n+   * n is an integer that controls the number of replacement options\n    */\n   public static ArrayList<String> replace (String component, ArrayList<String> options) {\n-    // simply returns the first n options", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkzODc3NA=="}, "originalCommit": {"oid": "6a96ab4e20c67af1adb791ba3c791e05505f725d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTU0Njc5OnYy", "diffSide": "RIGHT", "path": "tools/query_breakdown/src/main/java/com/google/bigquery/ReplacementLogic.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjo1OTo1OFrOHF5Flw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMToyNjo0MFrOHF_Cvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0MDI0Nw==", "bodyText": "You should use Random.nextInt() (https://docs.oracle.com/javase/8/docs/api/java/util/Random.html#nextInt--)", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/161#discussion_r475940247", "createdAt": "2020-08-24T22:59:58Z", "author": {"login": "feiling"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/ReplacementLogic.java", "diffHunk": "@@ -9,23 +10,50 @@\n \n   /**\n    * Given a component, provides a recommendation as to which component the input should be\n-   * replaced with. Returns a list of components that it recommends.\n+   * replaced with. Returns a list of components that it recommends. The default method of\n+   * choosing recommendations is through randomization.\n    *\n    * We choose ArrayLists as the data structure because we want to impose a certain ordering\n    * with the recommendations: certain recommendations should be \"better\" than others\n+   *\n+   * n is an integer that controls the number of replacement options\n    */\n   public static ArrayList<String> replace (String component, ArrayList<String> options) {\n-    // simply returns the first n options\n     int n = 3;\n \n+    ArrayList<String> result = new ArrayList<>();\n+\n     if (options.size() <= n) {\n-      return new ArrayList<>(options);\n+      for (int i = 0; i < options.size(); i++) {\n+        // gets rid of cases such as <QUOTED_STRING>\n+        if (options.get(i).charAt(0) != '<' || options.get(i).length() <= 1) {\n+          result.add(options.get(i));\n+        }\n+      }\n+      return result;\n     }\n \n-    ArrayList<String> result = new ArrayList<>();\n-    for (int i = 0; i < n; i++) {\n-      result.add(options.get(i));\n+    HashSet<Integer> seen = new HashSet<>();\n+    // randomly populate result until full\n+    while (result.size() < n && seen.size() < options.size()) {\n+      int random = randomNumber(options.size() - 1);\n+      if (seen.contains(random)) {\n+        continue;\n+      }\n+      else if (options.get(random).charAt(0) == '<' && options.get(random).length() > 1) {\n+        seen.add(random);\n+        continue;\n+      }\n+      else {\n+        result.add(options.get(random));\n+        seen.add(random);\n+      }\n     }\n     return result;\n   }\n+\n+  // helper function that returns a random integer between 0 - n\n+  private static int randomNumber(int n) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a96ab4e20c67af1adb791ba3c791e05505f725d"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAzNzgyMg==", "bodyText": "yup! Resolved", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/161#discussion_r476037822", "createdAt": "2020-08-25T01:26:40Z", "author": {"login": "subinbean"}, "path": "tools/query_breakdown/src/main/java/com/google/bigquery/ReplacementLogic.java", "diffHunk": "@@ -9,23 +10,50 @@\n \n   /**\n    * Given a component, provides a recommendation as to which component the input should be\n-   * replaced with. Returns a list of components that it recommends.\n+   * replaced with. Returns a list of components that it recommends. The default method of\n+   * choosing recommendations is through randomization.\n    *\n    * We choose ArrayLists as the data structure because we want to impose a certain ordering\n    * with the recommendations: certain recommendations should be \"better\" than others\n+   *\n+   * n is an integer that controls the number of replacement options\n    */\n   public static ArrayList<String> replace (String component, ArrayList<String> options) {\n-    // simply returns the first n options\n     int n = 3;\n \n+    ArrayList<String> result = new ArrayList<>();\n+\n     if (options.size() <= n) {\n-      return new ArrayList<>(options);\n+      for (int i = 0; i < options.size(); i++) {\n+        // gets rid of cases such as <QUOTED_STRING>\n+        if (options.get(i).charAt(0) != '<' || options.get(i).length() <= 1) {\n+          result.add(options.get(i));\n+        }\n+      }\n+      return result;\n     }\n \n-    ArrayList<String> result = new ArrayList<>();\n-    for (int i = 0; i < n; i++) {\n-      result.add(options.get(i));\n+    HashSet<Integer> seen = new HashSet<>();\n+    // randomly populate result until full\n+    while (result.size() < n && seen.size() < options.size()) {\n+      int random = randomNumber(options.size() - 1);\n+      if (seen.contains(random)) {\n+        continue;\n+      }\n+      else if (options.get(random).charAt(0) == '<' && options.get(random).length() > 1) {\n+        seen.add(random);\n+        continue;\n+      }\n+      else {\n+        result.add(options.get(random));\n+        seen.add(random);\n+      }\n     }\n     return result;\n   }\n+\n+  // helper function that returns a random integer between 0 - n\n+  private static int randomNumber(int n) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk0MDI0Nw=="}, "originalCommit": {"oid": "6a96ab4e20c67af1adb791ba3c791e05505f725d"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2887, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}