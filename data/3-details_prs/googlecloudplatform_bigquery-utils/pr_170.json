{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NTU4MTQx", "number": 170, "title": "Auto Query Fixer: Implement ExtractFunctionRange, LocateTableRanges, GetAllKeywords methods in ZetaSQL Helper server", "bodyText": "Develop ExtractFunctionRange, LocateTableRanges, and GetAllKeywords methods\nRPC calls are added\nTest cases are included.", "createdAt": "2020-08-31T21:46:15Z", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170", "merged": true, "mergeCommit": {"oid": "6f14803d37e8af00e0d6cc429759b8cdd09f48e3"}, "closed": true, "closedAt": "2020-09-02T20:26:05Z", "author": {"login": "mingen-pan"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEZuXQAH2gAyNDc2NTU4MTQxOjg4OTJmY2FhOGYwYTZkY2JlMWZlZTZjZWY5MWNmNDQzNWUxZmU5ZjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFB9jwAH2gAyNDc2NTU4MTQxOmVkNmQ0NDE0OWMyNzhkYjc0MTcyMjgxYjZhZDJlOTYwNDU2NDg4OTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8892fcaa8f0a6dcbe1fee6cef91cf4435e1fe9f1", "author": {"user": {"login": "mingen-pan", "name": "Mingen Pan"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/8892fcaa8f0a6dcbe1fee6cef91cf4435e1fe9f1", "committedDate": "2020-08-31T21:31:12Z", "message": "Develop ExtractFunctionRange and LocateTableRanges methods\nRPC calls are added\nTest cases are included."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aab4f4e858bea71ef98bca5f597effee94dcbffe", "author": {"user": {"login": "mingen-pan", "name": "Mingen Pan"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/aab4f4e858bea71ef98bca5f597effee94dcbffe", "committedDate": "2020-08-31T21:46:00Z", "message": "License"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de", "author": {"user": {"login": "mingen-pan", "name": "Mingen Pan"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/8c237f5ed77af698740d346cabe4d16a3c9df6de", "committedDate": "2020-08-31T21:49:39Z", "message": "Minor fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5MDU0MDUz", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#pullrequestreview-479054053", "createdAt": "2020-08-31T23:36:39Z", "commit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzozNjozOVrOHKNzVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzozNjozOVrOHKNzVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3Mzk0Mg==", "bodyText": "why const pointer? if you don't expect to change the request, we should use const reference.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480473942", "createdAt": "2020-08-31T23:36:39Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/local_service/local_service.cc", "diffHunk": "@@ -33,5 +36,51 @@ absl::Status ZetaSqlHelperLocalServiceImpl::Tokenize(\n   return absl::OkStatus();\n }\n \n+absl::Status ZetaSqlHelperLocalServiceImpl::ExtractFunctionRange(\n+    const ExtractFunctionRangeRequest *request,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5MDU0OTM5", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#pullrequestreview-479054939", "createdAt": "2020-08-31T23:37:04Z", "commit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzozNzowNFrOHKNzzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzozNzowNFrOHKNzzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NDA2Mg==", "bodyText": "nit: ExtractFunctionRangeResponse* response", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480474062", "createdAt": "2020-08-31T23:37:04Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/local_service/local_service.cc", "diffHunk": "@@ -33,5 +36,51 @@ absl::Status ZetaSqlHelperLocalServiceImpl::Tokenize(\n   return absl::OkStatus();\n }\n \n+absl::Status ZetaSqlHelperLocalServiceImpl::ExtractFunctionRange(\n+    const ExtractFunctionRangeRequest *request,\n+    ExtractFunctionRangeResponse *response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5MDU5MjUx", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#pullrequestreview-479059251", "createdAt": "2020-08-31T23:39:08Z", "commit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzozOTowOFrOHKN1_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzozOTowOFrOHKN1_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NDYyMw==", "bodyText": "why return status separately? if error occurs, should it return at line 44? or there could be cases line 44 is ok but getting status() is not ok?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480474623", "createdAt": "2020-08-31T23:39:08Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/local_service/local_service.cc", "diffHunk": "@@ -33,5 +36,51 @@ absl::Status ZetaSqlHelperLocalServiceImpl::Tokenize(\n   return absl::OkStatus();\n }\n \n+absl::Status ZetaSqlHelperLocalServiceImpl::ExtractFunctionRange(\n+    const ExtractFunctionRangeRequest *request,\n+    ExtractFunctionRangeResponse *response) {\n+\n+  std::unique_ptr<::bigquery::utils::zetasql_helper::FunctionRange> output;\n+  ZETASQL_RETURN_IF_ERROR(\n+      ::bigquery::utils::zetasql_helper::ExtractFunctionRange(\n+          request->query(), request->line_number(), request->column_number(), &output\n+      ));\n+\n+  auto status_or_function_range_proto = output->ToProto();\n+  ZETASQL_RETURN_IF_ERROR(status_or_function_range_proto.status());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5MDYyNDI5", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#pullrequestreview-479062429", "createdAt": "2020-08-31T23:40:42Z", "commit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo0MDo0MlrOHKN35A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo0MDo0MlrOHKN35A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NTEwOA==", "bodyText": "you can use unique_ptr ?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480475108", "createdAt": "2020-08-31T23:40:42Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/local_service/local_service.cc", "diffHunk": "@@ -33,5 +36,51 @@ absl::Status ZetaSqlHelperLocalServiceImpl::Tokenize(\n   return absl::OkStatus();\n }\n \n+absl::Status ZetaSqlHelperLocalServiceImpl::ExtractFunctionRange(\n+    const ExtractFunctionRangeRequest *request,\n+    ExtractFunctionRangeResponse *response) {\n+\n+  std::unique_ptr<::bigquery::utils::zetasql_helper::FunctionRange> output;\n+  ZETASQL_RETURN_IF_ERROR(\n+      ::bigquery::utils::zetasql_helper::ExtractFunctionRange(\n+          request->query(), request->line_number(), request->column_number(), &output\n+      ));\n+\n+  auto status_or_function_range_proto = output->ToProto();\n+  ZETASQL_RETURN_IF_ERROR(status_or_function_range_proto.status());\n+\n+  // Convert the proto to heap value and hand over the ownership to the response.\n+  auto function_range_proto = new ::bigquery::utils::zetasql_helper::FunctionRangeProto(\n+      status_or_function_range_proto.value()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5MDY2Njc1", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#pullrequestreview-479066675", "createdAt": "2020-08-31T23:42:46Z", "commit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo0Mjo0NlrOHKN6Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo0Mjo0NlrOHKN6Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NTcxMQ==", "bodyText": "pass by reference", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480475711", "createdAt": "2020-08-31T23:42:46Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/local_service/local_service.cc", "diffHunk": "@@ -33,5 +36,51 @@ absl::Status ZetaSqlHelperLocalServiceImpl::Tokenize(\n   return absl::OkStatus();\n }\n \n+absl::Status ZetaSqlHelperLocalServiceImpl::ExtractFunctionRange(\n+    const ExtractFunctionRangeRequest *request,\n+    ExtractFunctionRangeResponse *response) {\n+\n+  std::unique_ptr<::bigquery::utils::zetasql_helper::FunctionRange> output;\n+  ZETASQL_RETURN_IF_ERROR(\n+      ::bigquery::utils::zetasql_helper::ExtractFunctionRange(\n+          request->query(), request->line_number(), request->column_number(), &output\n+      ));\n+\n+  auto status_or_function_range_proto = output->ToProto();\n+  ZETASQL_RETURN_IF_ERROR(status_or_function_range_proto.status());\n+\n+  // Convert the proto to heap value and hand over the ownership to the response.\n+  auto function_range_proto = new ::bigquery::utils::zetasql_helper::FunctionRangeProto(\n+      status_or_function_range_proto.value()\n+  );\n+  response->set_allocated_function_range(function_range_proto);\n+  return absl::OkStatus();\n+}\n+\n+absl::Status ZetaSqlHelperLocalServiceImpl::LocateTableRanges(const LocateTableRangesRequest *request,\n+                                                              LocateTableRangesResponse *response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5MDY5NDM5", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#pullrequestreview-479069439", "createdAt": "2020-08-31T23:44:04Z", "commit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo0NDowNFrOHKN7qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo0NDowNFrOHKN7qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NjA3Mg==", "bodyText": "Please add comment to the proto below.", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480476072", "createdAt": "2020-08-31T23:44:04Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/local_service/local_service.proto", "diffHunk": "@@ -36,4 +47,33 @@ message TokenizeRequest {\n \n message TokenizeResponse {\n   repeated ParseTokenProto parse_token = 1;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5MDcxNDc5", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#pullrequestreview-479071479", "createdAt": "2020-08-31T23:45:07Z", "commit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo0NTowN1rOHKN86w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo0NTowN1rOHKN86w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NjM5NQ==", "bodyText": "nit: GetAllKeywordsRequest? method name GetAllKeywords?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480476395", "createdAt": "2020-08-31T23:45:07Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/local_service/local_service_grpc.h", "diffHunk": "@@ -30,6 +30,17 @@ class ZetaSqlHelperLocalServiceGrpcImpl : public ZetaSqlHelperLocalService::Serv\n   grpc::Status Tokenize(grpc::ServerContext *context, const TokenizeRequest *req,\n                         TokenizeResponse *resp) override;\n \n+  grpc::Status ExtractFunctionRange(grpc::ServerContext *context, const ExtractFunctionRangeRequest *request,\n+                                    ExtractFunctionRangeResponse *response) override;\n+\n+  grpc::Status LocateTableRanges(grpc::ServerContext *context,\n+                                 const LocateTableRangesRequest *request,\n+                                 LocateTableRangesResponse *response) override;\n+\n+  grpc::Status AllKeywords(grpc::ServerContext *context,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5MDc0MDI2", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#pullrequestreview-479074026", "createdAt": "2020-08-31T23:46:20Z", "commit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo0NjoyMFrOHKN-RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo0NjoyMFrOHKN-RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3Njc0MA==", "bodyText": "pass by reference if ready only :)", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480476740", "createdAt": "2020-08-31T23:46:20Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/scanner/extract_function.cc", "diffHunk": "@@ -0,0 +1,94 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#include \"extract_function.h\"\n+#include \"zetasql/public/analyzer.h\"\n+#include \"zetasql/parser/parser.h\"\n+#include \"zetasql_helper/util/util.h\"\n+\n+namespace bigquery::utils::zetasql_helper {\n+\n+FunctionRange::FunctionRange(const zetasql::ASTFunctionCall *function_call) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5MDg4MjEy", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#pullrequestreview-479088212", "createdAt": "2020-08-31T23:53:11Z", "commit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo1MzoxMVrOHKOGfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo1MzoxMVrOHKOGfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3ODg0NQ==", "bodyText": "nit: const auto& argument_range: ....", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480478845", "createdAt": "2020-08-31T23:53:11Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/scanner/extract_function.cc", "diffHunk": "@@ -0,0 +1,94 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#include \"extract_function.h\"\n+#include \"zetasql/public/analyzer.h\"\n+#include \"zetasql/parser/parser.h\"\n+#include \"zetasql_helper/util/util.h\"\n+\n+namespace bigquery::utils::zetasql_helper {\n+\n+FunctionRange::FunctionRange(const zetasql::ASTFunctionCall *function_call) {\n+  function = function_call->GetParseLocationRange();\n+  name = function_call->function()->GetParseLocationRange();\n+  std::vector<zetasql::ParseLocationRange> ranges;\n+  for (auto argument : function_call->arguments()) {\n+    ranges.push_back(argument->GetParseLocationRange());\n+  }\n+  arguments = ranges;\n+}\n+\n+zetasql_base::StatusOr<FunctionRangeProto> FunctionRange::ToProto() const {\n+  FunctionRangeProto proto;\n+  // location range transfer\n+  auto status_or_function_proto = function.ToProto();\n+  ZETASQL_RETURN_IF_ERROR(status_or_function_proto.status());\n+\n+  auto range_proto = new zetasql::ParseLocationRangeProto(status_or_function_proto.value());\n+  proto.set_allocated_function(range_proto);\n+\n+  // name range transfer\n+  auto status_or_name_proto = name.ToProto();\n+  ZETASQL_RETURN_IF_ERROR(status_or_name_proto.status());\n+\n+  range_proto = new zetasql::ParseLocationRangeProto(status_or_name_proto.value());\n+  proto.set_allocated_name(range_proto);\n+\n+  for (auto &argument_range : arguments) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5MDg5ODEy", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#pullrequestreview-479089812", "createdAt": "2020-08-31T23:53:59Z", "commit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo1Mzo1OVrOHKOHZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo1Mzo1OVrOHKOHZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3OTA3Nw==", "bodyText": "nit: zetasql::ASTNode* node", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480479077", "createdAt": "2020-08-31T23:53:59Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/scanner/extract_function.cc", "diffHunk": "@@ -0,0 +1,94 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#include \"extract_function.h\"\n+#include \"zetasql/public/analyzer.h\"\n+#include \"zetasql/parser/parser.h\"\n+#include \"zetasql_helper/util/util.h\"\n+\n+namespace bigquery::utils::zetasql_helper {\n+\n+FunctionRange::FunctionRange(const zetasql::ASTFunctionCall *function_call) {\n+  function = function_call->GetParseLocationRange();\n+  name = function_call->function()->GetParseLocationRange();\n+  std::vector<zetasql::ParseLocationRange> ranges;\n+  for (auto argument : function_call->arguments()) {\n+    ranges.push_back(argument->GetParseLocationRange());\n+  }\n+  arguments = ranges;\n+}\n+\n+zetasql_base::StatusOr<FunctionRangeProto> FunctionRange::ToProto() const {\n+  FunctionRangeProto proto;\n+  // location range transfer\n+  auto status_or_function_proto = function.ToProto();\n+  ZETASQL_RETURN_IF_ERROR(status_or_function_proto.status());\n+\n+  auto range_proto = new zetasql::ParseLocationRangeProto(status_or_function_proto.value());\n+  proto.set_allocated_function(range_proto);\n+\n+  // name range transfer\n+  auto status_or_name_proto = name.ToProto();\n+  ZETASQL_RETURN_IF_ERROR(status_or_name_proto.status());\n+\n+  range_proto = new zetasql::ParseLocationRangeProto(status_or_name_proto.value());\n+  proto.set_allocated_name(range_proto);\n+\n+  for (auto &argument_range : arguments) {\n+\n+    auto status_or_argument_proto = argument_range.ToProto();\n+    ZETASQL_RETURN_IF_ERROR(status_or_argument_proto.status());\n+    proto.add_arguments()->CopyFrom(status_or_argument_proto.value());\n+  }\n+\n+  return proto;\n+}\n+\n+\n+absl::Status ExtractFunctionRange(absl::string_view query,\n+                                  int row,\n+                                  int column,\n+                                  std::unique_ptr<FunctionRange> *output) {\n+\n+  std::unique_ptr<zetasql::ParserOutput> parser_output;\n+  auto options = BigQueryOptions();\n+  auto status = ParseStatement(query, options.GetParserOptions(), &parser_output);\n+  if (!status.ok()) {\n+    return status;\n+  }\n+\n+  auto offset = get_offset(query, row, column);\n+  auto predicator = [offset](const zetasql::ASTNode *node) {\n+    return node->GetParseLocationRange().start().GetByteOffset() == offset &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5MDkwNDc5", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#pullrequestreview-479090479", "createdAt": "2020-08-31T23:54:17Z", "commit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo1NDoxOFrOHKOHzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo1NDoxOFrOHKOHzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3OTE4MQ==", "bodyText": "nit: ASTFunctionCall*", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480479181", "createdAt": "2020-08-31T23:54:18Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/scanner/extract_function.cc", "diffHunk": "@@ -0,0 +1,94 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#include \"extract_function.h\"\n+#include \"zetasql/public/analyzer.h\"\n+#include \"zetasql/parser/parser.h\"\n+#include \"zetasql_helper/util/util.h\"\n+\n+namespace bigquery::utils::zetasql_helper {\n+\n+FunctionRange::FunctionRange(const zetasql::ASTFunctionCall *function_call) {\n+  function = function_call->GetParseLocationRange();\n+  name = function_call->function()->GetParseLocationRange();\n+  std::vector<zetasql::ParseLocationRange> ranges;\n+  for (auto argument : function_call->arguments()) {\n+    ranges.push_back(argument->GetParseLocationRange());\n+  }\n+  arguments = ranges;\n+}\n+\n+zetasql_base::StatusOr<FunctionRangeProto> FunctionRange::ToProto() const {\n+  FunctionRangeProto proto;\n+  // location range transfer\n+  auto status_or_function_proto = function.ToProto();\n+  ZETASQL_RETURN_IF_ERROR(status_or_function_proto.status());\n+\n+  auto range_proto = new zetasql::ParseLocationRangeProto(status_or_function_proto.value());\n+  proto.set_allocated_function(range_proto);\n+\n+  // name range transfer\n+  auto status_or_name_proto = name.ToProto();\n+  ZETASQL_RETURN_IF_ERROR(status_or_name_proto.status());\n+\n+  range_proto = new zetasql::ParseLocationRangeProto(status_or_name_proto.value());\n+  proto.set_allocated_name(range_proto);\n+\n+  for (auto &argument_range : arguments) {\n+\n+    auto status_or_argument_proto = argument_range.ToProto();\n+    ZETASQL_RETURN_IF_ERROR(status_or_argument_proto.status());\n+    proto.add_arguments()->CopyFrom(status_or_argument_proto.value());\n+  }\n+\n+  return proto;\n+}\n+\n+\n+absl::Status ExtractFunctionRange(absl::string_view query,\n+                                  int row,\n+                                  int column,\n+                                  std::unique_ptr<FunctionRange> *output) {\n+\n+  std::unique_ptr<zetasql::ParserOutput> parser_output;\n+  auto options = BigQueryOptions();\n+  auto status = ParseStatement(query, options.GetParserOptions(), &parser_output);\n+  if (!status.ok()) {\n+    return status;\n+  }\n+\n+  auto offset = get_offset(query, row, column);\n+  auto predicator = [offset](const zetasql::ASTNode *node) {\n+    return node->GetParseLocationRange().start().GetByteOffset() == offset &&\n+        node->node_kind() == zetasql::ASTNodeKind::AST_FUNCTION_CALL;\n+  };\n+\n+  auto candidate = find_node(parser_output->statement(), predicator);\n+  if (candidate == nullptr) {\n+    return absl::Status(absl::StatusCode::kInvalidArgument, \"Line and/or column numbers are incorrect\");\n+  }\n+\n+  auto function_call = dynamic_cast<const zetasql::ASTFunctionCall *>(candidate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5MDkxNDY5", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#pullrequestreview-479091469", "createdAt": "2020-08-31T23:54:46Z", "commit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo1NDo0NlrOHKOITw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo1NDo0NlrOHKOITw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3OTMxMQ==", "bodyText": "nit:", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480479311", "createdAt": "2020-08-31T23:54:46Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/scanner/extract_function.h", "diffHunk": "@@ -0,0 +1,60 @@\n+//\n+// Created by mepan on 8/22/20.\n+//\n+\n+#ifndef ZETASQL_HELPER_ZETASQL_HELPER_FUNCTION_LOCATE_FUNCTION_H_\n+#define ZETASQL_HELPER_ZETASQL_HELPER_FUNCTION_LOCATE_FUNCTION_H_\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#include \"zetasql/public/parse_location.h\"\n+#include \"zetasql/parser/parse_tree.h\"\n+#include \"zetasql_helper/scanner/function_range.pb.h\"\n+\n+namespace bigquery::utils::zetasql_helper {\n+\n+// A struct to store the range of different components of a function. It includes the range\n+// of the whole function, the name, and each arguments.\n+struct FunctionRange {\n+  zetasql::ParseLocationRange function;\n+  zetasql::ParseLocationRange name;\n+  std::vector<zetasql::ParseLocationRange> arguments;\n+\n+  FunctionRange(const zetasql::ASTFunctionCall *function_call);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5MDkyMzAx", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#pullrequestreview-479092301", "createdAt": "2020-08-31T23:55:10Z", "commit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo1NToxMFrOHKOI6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo1NToxMFrOHKOI6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3OTQ2NQ==", "bodyText": "nit: delete the line?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480479465", "createdAt": "2020-08-31T23:55:10Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/scanner/scanner_test.cc", "diffHunk": "@@ -0,0 +1,76 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#include \"gtest/gtest.h\"\n+#include \"zetasql_helper/scanner/locate_table.h\"\n+#include \"zetasql_helper/scanner/extract_function.h\"\n+\n+using namespace bigquery::utils::zetasql_helper;\n+\n+class LocationTest : public ::testing::Test {\n+\n+};\n+\n+TEST_F(LocationTest, LocateTableTest1) {\n+  std::string query =\n+      \"SELECT `\u7279\u6b8a\u5b57\u7b26 (unicode characters)`, status FROM bigquery-public-data.`austin_311.311_request`\"\n+      \"cross join `austin_311`.311_request\\n\"\n+      \"where status = '`bigquery-public-data.austin_311.311_request`'\";\n+\n+  std::string table_regex = \"(bigquery-public-data.)?austin_311.311_request\";\n+\n+  std::vector<zetasql::ParseLocationRange> ranges;\n+  auto status = LocateTableRanges(query, table_regex, ranges);\n+\n+  EXPECT_TRUE(status.ok());\n+  EXPECT_EQ(2, ranges.size());\n+//  EXPECT_EQ(2, ranges[0].start().GetByteOffset())\n+}\n+\n+std::string range_to_string(absl::string_view query, zetasql::ParseLocationRange &range) {\n+  auto start = range.start().GetByteOffset();\n+  auto length = range.end().GetByteOffset() - range.start().GetByteOffset();\n+  return std::string(query.substr(start, length));\n+}\n+\n+TEST_F(LocationTest, LocateTableTest2) {\n+  std::string query = \"Select max(foo) from bigquery-public-data.mock.survey_2017 group by bar limit 10\";\n+  std::string table_regex = \"bigquery-public-data\\\\.mock\\\\.survey_2017\";\n+\n+  std::vector<zetasql::ParseLocationRange> ranges;\n+  auto status = LocateTableRanges(query, table_regex, ranges);\n+\n+  EXPECT_TRUE(status.ok());\n+  EXPECT_EQ(1, ranges.size());\n+//  EXPECT_EQ(2, ranges[0].start().GetByteOffset())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5MDkyNzAy", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#pullrequestreview-479092702", "createdAt": "2020-08-31T23:55:21Z", "commit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo1NToyMVrOHKOJKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo1NToyMVrOHKOJKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3OTUyOQ==", "bodyText": "nit: delete the line?", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480479529", "createdAt": "2020-08-31T23:55:21Z", "author": {"login": "kikkyo"}, "path": "tools/zetasql_helper/zetasql_helper/scanner/scanner_test.cc", "diffHunk": "@@ -0,0 +1,76 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#include \"gtest/gtest.h\"\n+#include \"zetasql_helper/scanner/locate_table.h\"\n+#include \"zetasql_helper/scanner/extract_function.h\"\n+\n+using namespace bigquery::utils::zetasql_helper;\n+\n+class LocationTest : public ::testing::Test {\n+\n+};\n+\n+TEST_F(LocationTest, LocateTableTest1) {\n+  std::string query =\n+      \"SELECT `\u7279\u6b8a\u5b57\u7b26 (unicode characters)`, status FROM bigquery-public-data.`austin_311.311_request`\"\n+      \"cross join `austin_311`.311_request\\n\"\n+      \"where status = '`bigquery-public-data.austin_311.311_request`'\";\n+\n+  std::string table_regex = \"(bigquery-public-data.)?austin_311.311_request\";\n+\n+  std::vector<zetasql::ParseLocationRange> ranges;\n+  auto status = LocateTableRanges(query, table_regex, ranges);\n+\n+  EXPECT_TRUE(status.ok());\n+  EXPECT_EQ(2, ranges.size());\n+//  EXPECT_EQ(2, ranges[0].start().GetByteOffset())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bee5debed0ad8065f23dee190b936fd4adcd358d", "author": {"user": {"login": "mingen-pan", "name": "Mingen Pan"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/bee5debed0ad8065f23dee190b936fd4adcd358d", "committedDate": "2020-09-01T01:08:35Z", "message": "Fix some syntax"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5MjMzMDQx", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#pullrequestreview-479233041", "createdAt": "2020-09-01T00:56:56Z", "commit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMDo1Njo1NlrOHKQiYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMTowNjoxNVrOHKRJGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDUxODc1NA==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480518754", "createdAt": "2020-09-01T00:56:56Z", "author": {"login": "mingen-pan"}, "path": "tools/zetasql_helper/zetasql_helper/local_service/local_service.proto", "diffHunk": "@@ -36,4 +47,33 @@ message TokenizeRequest {\n \n message TokenizeResponse {\n   repeated ParseTokenProto parse_token = 1;\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NjA3Mg=="}, "originalCommit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDUyMjg5MQ==", "bodyText": "Yes, I have changed them all to GetAllKeywords", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480522891", "createdAt": "2020-09-01T01:00:47Z", "author": {"login": "mingen-pan"}, "path": "tools/zetasql_helper/zetasql_helper/local_service/local_service_grpc.h", "diffHunk": "@@ -30,6 +30,17 @@ class ZetaSqlHelperLocalServiceGrpcImpl : public ZetaSqlHelperLocalService::Serv\n   grpc::Status Tokenize(grpc::ServerContext *context, const TokenizeRequest *req,\n                         TokenizeResponse *resp) override;\n \n+  grpc::Status ExtractFunctionRange(grpc::ServerContext *context, const ExtractFunctionRangeRequest *request,\n+                                    ExtractFunctionRangeResponse *response) override;\n+\n+  grpc::Status LocateTableRanges(grpc::ServerContext *context,\n+                                 const LocateTableRangesRequest *request,\n+                                 LocateTableRangesResponse *response) override;\n+\n+  grpc::Status AllKeywords(grpc::ServerContext *context,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NjM5NQ=="}, "originalCommit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDUyMzI4Mw==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480523283", "createdAt": "2020-09-01T01:01:11Z", "author": {"login": "mingen-pan"}, "path": "tools/zetasql_helper/zetasql_helper/scanner/extract_function.cc", "diffHunk": "@@ -0,0 +1,94 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#include \"extract_function.h\"\n+#include \"zetasql/public/analyzer.h\"\n+#include \"zetasql/parser/parser.h\"\n+#include \"zetasql_helper/util/util.h\"\n+\n+namespace bigquery::utils::zetasql_helper {\n+\n+FunctionRange::FunctionRange(const zetasql::ASTFunctionCall *function_call) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3Njc0MA=="}, "originalCommit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDUyNDE5OQ==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480524199", "createdAt": "2020-09-01T01:02:01Z", "author": {"login": "mingen-pan"}, "path": "tools/zetasql_helper/zetasql_helper/scanner/extract_function.cc", "diffHunk": "@@ -0,0 +1,94 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#include \"extract_function.h\"\n+#include \"zetasql/public/analyzer.h\"\n+#include \"zetasql/parser/parser.h\"\n+#include \"zetasql_helper/util/util.h\"\n+\n+namespace bigquery::utils::zetasql_helper {\n+\n+FunctionRange::FunctionRange(const zetasql::ASTFunctionCall *function_call) {\n+  function = function_call->GetParseLocationRange();\n+  name = function_call->function()->GetParseLocationRange();\n+  std::vector<zetasql::ParseLocationRange> ranges;\n+  for (auto argument : function_call->arguments()) {\n+    ranges.push_back(argument->GetParseLocationRange());\n+  }\n+  arguments = ranges;\n+}\n+\n+zetasql_base::StatusOr<FunctionRangeProto> FunctionRange::ToProto() const {\n+  FunctionRangeProto proto;\n+  // location range transfer\n+  auto status_or_function_proto = function.ToProto();\n+  ZETASQL_RETURN_IF_ERROR(status_or_function_proto.status());\n+\n+  auto range_proto = new zetasql::ParseLocationRangeProto(status_or_function_proto.value());\n+  proto.set_allocated_function(range_proto);\n+\n+  // name range transfer\n+  auto status_or_name_proto = name.ToProto();\n+  ZETASQL_RETURN_IF_ERROR(status_or_name_proto.status());\n+\n+  range_proto = new zetasql::ParseLocationRangeProto(status_or_name_proto.value());\n+  proto.set_allocated_name(range_proto);\n+\n+  for (auto &argument_range : arguments) {\n+\n+    auto status_or_argument_proto = argument_range.ToProto();\n+    ZETASQL_RETURN_IF_ERROR(status_or_argument_proto.status());\n+    proto.add_arguments()->CopyFrom(status_or_argument_proto.value());\n+  }\n+\n+  return proto;\n+}\n+\n+\n+absl::Status ExtractFunctionRange(absl::string_view query,\n+                                  int row,\n+                                  int column,\n+                                  std::unique_ptr<FunctionRange> *output) {\n+\n+  std::unique_ptr<zetasql::ParserOutput> parser_output;\n+  auto options = BigQueryOptions();\n+  auto status = ParseStatement(query, options.GetParserOptions(), &parser_output);\n+  if (!status.ok()) {\n+    return status;\n+  }\n+\n+  auto offset = get_offset(query, row, column);\n+  auto predicator = [offset](const zetasql::ASTNode *node) {\n+    return node->GetParseLocationRange().start().GetByteOffset() == offset &&\n+        node->node_kind() == zetasql::ASTNodeKind::AST_FUNCTION_CALL;\n+  };\n+\n+  auto candidate = find_node(parser_output->statement(), predicator);\n+  if (candidate == nullptr) {\n+    return absl::Status(absl::StatusCode::kInvalidArgument, \"Line and/or column numbers are incorrect\");\n+  }\n+\n+  auto function_call = dynamic_cast<const zetasql::ASTFunctionCall *>(candidate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3OTE4MQ=="}, "originalCommit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDUyNDI5MA==", "bodyText": "Done", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480524290", "createdAt": "2020-09-01T01:02:06Z", "author": {"login": "mingen-pan"}, "path": "tools/zetasql_helper/zetasql_helper/scanner/extract_function.cc", "diffHunk": "@@ -0,0 +1,94 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#include \"extract_function.h\"\n+#include \"zetasql/public/analyzer.h\"\n+#include \"zetasql/parser/parser.h\"\n+#include \"zetasql_helper/util/util.h\"\n+\n+namespace bigquery::utils::zetasql_helper {\n+\n+FunctionRange::FunctionRange(const zetasql::ASTFunctionCall *function_call) {\n+  function = function_call->GetParseLocationRange();\n+  name = function_call->function()->GetParseLocationRange();\n+  std::vector<zetasql::ParseLocationRange> ranges;\n+  for (auto argument : function_call->arguments()) {\n+    ranges.push_back(argument->GetParseLocationRange());\n+  }\n+  arguments = ranges;\n+}\n+\n+zetasql_base::StatusOr<FunctionRangeProto> FunctionRange::ToProto() const {\n+  FunctionRangeProto proto;\n+  // location range transfer\n+  auto status_or_function_proto = function.ToProto();\n+  ZETASQL_RETURN_IF_ERROR(status_or_function_proto.status());\n+\n+  auto range_proto = new zetasql::ParseLocationRangeProto(status_or_function_proto.value());\n+  proto.set_allocated_function(range_proto);\n+\n+  // name range transfer\n+  auto status_or_name_proto = name.ToProto();\n+  ZETASQL_RETURN_IF_ERROR(status_or_name_proto.status());\n+\n+  range_proto = new zetasql::ParseLocationRangeProto(status_or_name_proto.value());\n+  proto.set_allocated_name(range_proto);\n+\n+  for (auto &argument_range : arguments) {\n+\n+    auto status_or_argument_proto = argument_range.ToProto();\n+    ZETASQL_RETURN_IF_ERROR(status_or_argument_proto.status());\n+    proto.add_arguments()->CopyFrom(status_or_argument_proto.value());\n+  }\n+\n+  return proto;\n+}\n+\n+\n+absl::Status ExtractFunctionRange(absl::string_view query,\n+                                  int row,\n+                                  int column,\n+                                  std::unique_ptr<FunctionRange> *output) {\n+\n+  std::unique_ptr<zetasql::ParserOutput> parser_output;\n+  auto options = BigQueryOptions();\n+  auto status = ParseStatement(query, options.GetParserOptions(), &parser_output);\n+  if (!status.ok()) {\n+    return status;\n+  }\n+\n+  auto offset = get_offset(query, row, column);\n+  auto predicator = [offset](const zetasql::ASTNode *node) {\n+    return node->GetParseLocationRange().start().GetByteOffset() == offset &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3OTA3Nw=="}, "originalCommit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDUyODY2NA==", "bodyText": "I have changed it to two new EXPECT_EQ", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#discussion_r480528664", "createdAt": "2020-09-01T01:06:15Z", "author": {"login": "mingen-pan"}, "path": "tools/zetasql_helper/zetasql_helper/scanner/scanner_test.cc", "diffHunk": "@@ -0,0 +1,76 @@\n+//\n+// Copyright 2020 BigQuery Utils\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+//\n+\n+#include \"gtest/gtest.h\"\n+#include \"zetasql_helper/scanner/locate_table.h\"\n+#include \"zetasql_helper/scanner/extract_function.h\"\n+\n+using namespace bigquery::utils::zetasql_helper;\n+\n+class LocationTest : public ::testing::Test {\n+\n+};\n+\n+TEST_F(LocationTest, LocateTableTest1) {\n+  std::string query =\n+      \"SELECT `\u7279\u6b8a\u5b57\u7b26 (unicode characters)`, status FROM bigquery-public-data.`austin_311.311_request`\"\n+      \"cross join `austin_311`.311_request\\n\"\n+      \"where status = '`bigquery-public-data.austin_311.311_request`'\";\n+\n+  std::string table_regex = \"(bigquery-public-data.)?austin_311.311_request\";\n+\n+  std::vector<zetasql::ParseLocationRange> ranges;\n+  auto status = LocateTableRanges(query, table_regex, ranges);\n+\n+  EXPECT_TRUE(status.ok());\n+  EXPECT_EQ(2, ranges.size());\n+//  EXPECT_EQ(2, ranges[0].start().GetByteOffset())\n+}\n+\n+std::string range_to_string(absl::string_view query, zetasql::ParseLocationRange &range) {\n+  auto start = range.start().GetByteOffset();\n+  auto length = range.end().GetByteOffset() - range.start().GetByteOffset();\n+  return std::string(query.substr(start, length));\n+}\n+\n+TEST_F(LocationTest, LocateTableTest2) {\n+  std::string query = \"Select max(foo) from bigquery-public-data.mock.survey_2017 group by bar limit 10\";\n+  std::string table_regex = \"bigquery-public-data\\\\.mock\\\\.survey_2017\";\n+\n+  std::vector<zetasql::ParseLocationRange> ranges;\n+  auto status = LocateTableRanges(query, table_regex, ranges);\n+\n+  EXPECT_TRUE(status.ok());\n+  EXPECT_EQ(1, ranges.size());\n+//  EXPECT_EQ(2, ranges[0].start().GetByteOffset())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3OTQ2NQ=="}, "originalCommit": {"oid": "8c237f5ed77af698740d346cabe4d16a3c9df6de"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMjIyNDg3", "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/pull/170#pullrequestreview-481222487", "createdAt": "2020-09-02T19:20:04Z", "commit": {"oid": "bee5debed0ad8065f23dee190b936fd4adcd358d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed6d44149c278db74172281b6ad2e96045648892", "author": {"user": {"login": "mingen-pan", "name": "Mingen Pan"}}, "url": "https://github.com/GoogleCloudPlatform/bigquery-utils/commit/ed6d44149c278db74172281b6ad2e96045648892", "committedDate": "2020-09-02T20:24:00Z", "message": "Merge branch 'master' into zetasql_helper_server"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 523, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}