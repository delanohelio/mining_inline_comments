{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwOTAwNDY2", "number": 14484, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjozMzoyOFrOEmD6sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjozNTo0NlrOEmD-IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzQ1NTIyOnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/transactionlog/domain.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjozMzoyOFrOHV3wrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjo0Mzo0OVrOHV4JeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY5NTcyNg==", "bodyText": "This if should be unneeded, we know that completed is set, otherwise previous line would have caused a crash.", "url": "https://github.com/vespa-engine/vespa/pull/14484#discussion_r492695726", "createdAt": "2020-09-22T12:33:28Z", "author": {"login": "toregge"}, "path": "searchlib/src/vespa/searchlib/transactionlog/domain.cpp", "diffHunk": "@@ -318,22 +323,78 @@ Domain::optionallyRotateFile(SerialNum serialNum) {\n     return dp;\n }\n \n+void\n+Domain::append(const Packet & packet, Writer::DoneCallback onDone) {\n+    vespalib::MonitorGuard guard(_currentChunkMonitor);\n+    if (_lastSerial >= packet.range().from()) {\n+        throw runtime_error(fmt(\"Incoming serial number(%\" PRIu64 \") must be bigger than the last one (%\" PRIu64 \").\",\n+                                packet.range().from(), _lastSerial));\n+    } else {\n+        _lastSerial = packet.range().to();\n+    }\n+    _currentChunk->add(packet, std::move(onDone));\n+    commitIfFull(guard);\n+}\n+\n Domain::CommitResult\n Domain::startCommit(DoneCallback onDone) {\n-    (void) onDone;\n+    vespalib::MonitorGuard guard(_currentChunkMonitor);\n+    if ( !_currentChunk->empty() ) {\n+        auto completed = grabCurrentChunk(guard);\n+        assert(completed);\n+        completed->setCommitDoneCallback(std::move(onDone));\n+        CommitResult result(completed->createCommitResult());\n+        commitChunk(std::move(completed), guard);\n+        return result;\n+    }\n     return CommitResult();\n }\n \n void\n-Domain::append(const Packet & packet, Writer::DoneCallback onDone)\n-{\n-    (void) onDone;\n+Domain::commitIfFull(const vespalib::MonitorGuard &guard) {\n+    if (_currentChunk->sizeBytes() > _config.getChunkSizeLimit()) {\n+        auto completed = std::move(_currentChunk);\n+        _currentChunk = std::make_unique<CommitChunk>(_config.getChunkSizeLimit(), completed->stealCallbacks());\n+        if (completed) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fc48b76ba4187b88c303f5fb7372c4df2a93f1e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcwMjA3Mw==", "bodyText": "Correct, fixed", "url": "https://github.com/vespa-engine/vespa/pull/14484#discussion_r492702073", "createdAt": "2020-09-22T12:43:49Z", "author": {"login": "baldersheim"}, "path": "searchlib/src/vespa/searchlib/transactionlog/domain.cpp", "diffHunk": "@@ -318,22 +323,78 @@ Domain::optionallyRotateFile(SerialNum serialNum) {\n     return dp;\n }\n \n+void\n+Domain::append(const Packet & packet, Writer::DoneCallback onDone) {\n+    vespalib::MonitorGuard guard(_currentChunkMonitor);\n+    if (_lastSerial >= packet.range().from()) {\n+        throw runtime_error(fmt(\"Incoming serial number(%\" PRIu64 \") must be bigger than the last one (%\" PRIu64 \").\",\n+                                packet.range().from(), _lastSerial));\n+    } else {\n+        _lastSerial = packet.range().to();\n+    }\n+    _currentChunk->add(packet, std::move(onDone));\n+    commitIfFull(guard);\n+}\n+\n Domain::CommitResult\n Domain::startCommit(DoneCallback onDone) {\n-    (void) onDone;\n+    vespalib::MonitorGuard guard(_currentChunkMonitor);\n+    if ( !_currentChunk->empty() ) {\n+        auto completed = grabCurrentChunk(guard);\n+        assert(completed);\n+        completed->setCommitDoneCallback(std::move(onDone));\n+        CommitResult result(completed->createCommitResult());\n+        commitChunk(std::move(completed), guard);\n+        return result;\n+    }\n     return CommitResult();\n }\n \n void\n-Domain::append(const Packet & packet, Writer::DoneCallback onDone)\n-{\n-    (void) onDone;\n+Domain::commitIfFull(const vespalib::MonitorGuard &guard) {\n+    if (_currentChunk->sizeBytes() > _config.getChunkSizeLimit()) {\n+        auto completed = std::move(_currentChunk);\n+        _currentChunk = std::make_unique<CommitChunk>(_config.getChunkSizeLimit(), completed->stealCallbacks());\n+        if (completed) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY5NTcyNg=="}, "originalCommit": {"oid": "2fc48b76ba4187b88c303f5fb7372c4df2a93f1e"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzQ2NDAwOnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/transactionlog/domain.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjozNTo0NlrOHV32KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjo0NDoxMVrOHV4KYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY5NzEyOQ==", "bodyText": "This guard should be moved into the following lambda. We want to keep chunk alive until previous chunks have been committed.", "url": "https://github.com/vespa-engine/vespa/pull/14484#discussion_r492697129", "createdAt": "2020-09-22T12:35:46Z", "author": {"login": "toregge"}, "path": "searchlib/src/vespa/searchlib/transactionlog/domain.cpp", "diffHunk": "@@ -318,22 +323,78 @@ Domain::optionallyRotateFile(SerialNum serialNum) {\n     return dp;\n }\n \n+void\n+Domain::append(const Packet & packet, Writer::DoneCallback onDone) {\n+    vespalib::MonitorGuard guard(_currentChunkMonitor);\n+    if (_lastSerial >= packet.range().from()) {\n+        throw runtime_error(fmt(\"Incoming serial number(%\" PRIu64 \") must be bigger than the last one (%\" PRIu64 \").\",\n+                                packet.range().from(), _lastSerial));\n+    } else {\n+        _lastSerial = packet.range().to();\n+    }\n+    _currentChunk->add(packet, std::move(onDone));\n+    commitIfFull(guard);\n+}\n+\n Domain::CommitResult\n Domain::startCommit(DoneCallback onDone) {\n-    (void) onDone;\n+    vespalib::MonitorGuard guard(_currentChunkMonitor);\n+    if ( !_currentChunk->empty() ) {\n+        auto completed = grabCurrentChunk(guard);\n+        assert(completed);\n+        completed->setCommitDoneCallback(std::move(onDone));\n+        CommitResult result(completed->createCommitResult());\n+        commitChunk(std::move(completed), guard);\n+        return result;\n+    }\n     return CommitResult();\n }\n \n void\n-Domain::append(const Packet & packet, Writer::DoneCallback onDone)\n-{\n-    (void) onDone;\n+Domain::commitIfFull(const vespalib::MonitorGuard &guard) {\n+    if (_currentChunk->sizeBytes() > _config.getChunkSizeLimit()) {\n+        auto completed = std::move(_currentChunk);\n+        _currentChunk = std::make_unique<CommitChunk>(_config.getChunkSizeLimit(), completed->stealCallbacks());\n+        if (completed) {\n+            commitChunk(std::move(completed), guard);\n+        }\n+    }\n+}\n+\n+std::unique_ptr<CommitChunk>\n+Domain::grabCurrentChunk(const vespalib::MonitorGuard & guard) {\n+    assert(guard.monitors(_currentChunkMonitor));\n+    auto chunk = std::move(_currentChunk);\n+    _currentChunk = createCommitChunk(_config);\n+    return chunk;\n+}\n+\n+bool\n+Domain::commitChunk(std::unique_ptr<CommitChunk> chunk, const vespalib::MonitorGuard & chunkOrderGuard) {\n+    assert(chunkOrderGuard.monitors(_currentChunkMonitor));\n+    if ( ! chunk->getPacket().empty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fc48b76ba4187b88c303f5fb7372c4df2a93f1e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcwMjMwNA==", "bodyText": "Correct, fixed.", "url": "https://github.com/vespa-engine/vespa/pull/14484#discussion_r492702304", "createdAt": "2020-09-22T12:44:11Z", "author": {"login": "baldersheim"}, "path": "searchlib/src/vespa/searchlib/transactionlog/domain.cpp", "diffHunk": "@@ -318,22 +323,78 @@ Domain::optionallyRotateFile(SerialNum serialNum) {\n     return dp;\n }\n \n+void\n+Domain::append(const Packet & packet, Writer::DoneCallback onDone) {\n+    vespalib::MonitorGuard guard(_currentChunkMonitor);\n+    if (_lastSerial >= packet.range().from()) {\n+        throw runtime_error(fmt(\"Incoming serial number(%\" PRIu64 \") must be bigger than the last one (%\" PRIu64 \").\",\n+                                packet.range().from(), _lastSerial));\n+    } else {\n+        _lastSerial = packet.range().to();\n+    }\n+    _currentChunk->add(packet, std::move(onDone));\n+    commitIfFull(guard);\n+}\n+\n Domain::CommitResult\n Domain::startCommit(DoneCallback onDone) {\n-    (void) onDone;\n+    vespalib::MonitorGuard guard(_currentChunkMonitor);\n+    if ( !_currentChunk->empty() ) {\n+        auto completed = grabCurrentChunk(guard);\n+        assert(completed);\n+        completed->setCommitDoneCallback(std::move(onDone));\n+        CommitResult result(completed->createCommitResult());\n+        commitChunk(std::move(completed), guard);\n+        return result;\n+    }\n     return CommitResult();\n }\n \n void\n-Domain::append(const Packet & packet, Writer::DoneCallback onDone)\n-{\n-    (void) onDone;\n+Domain::commitIfFull(const vespalib::MonitorGuard &guard) {\n+    if (_currentChunk->sizeBytes() > _config.getChunkSizeLimit()) {\n+        auto completed = std::move(_currentChunk);\n+        _currentChunk = std::make_unique<CommitChunk>(_config.getChunkSizeLimit(), completed->stealCallbacks());\n+        if (completed) {\n+            commitChunk(std::move(completed), guard);\n+        }\n+    }\n+}\n+\n+std::unique_ptr<CommitChunk>\n+Domain::grabCurrentChunk(const vespalib::MonitorGuard & guard) {\n+    assert(guard.monitors(_currentChunkMonitor));\n+    auto chunk = std::move(_currentChunk);\n+    _currentChunk = createCommitChunk(_config);\n+    return chunk;\n+}\n+\n+bool\n+Domain::commitChunk(std::unique_ptr<CommitChunk> chunk, const vespalib::MonitorGuard & chunkOrderGuard) {\n+    assert(chunkOrderGuard.monitors(_currentChunkMonitor));\n+    if ( ! chunk->getPacket().empty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY5NzEyOQ=="}, "originalCommit": {"oid": "2fc48b76ba4187b88c303f5fb7372c4df2a93f1e"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1373, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}