{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyMjAyNTU5", "number": 14839, "title": "- Use std::mutex/std::condition_varaible over vespalib::Monitor.", "bodyText": "use vespa::duration over storage::framework::XXXTime.\n\n@vekterli PR\nNote the ordering of parameters in Component::startThread, they seem to differ in definition and implementation.\nI note they are incosistent other places too.", "createdAt": "2020-10-13T11:06:01Z", "url": "https://github.com/vespa-engine/vespa/pull/14839", "merged": true, "mergeCommit": {"oid": "eff53bd7664a53741f8ab66737d532cec4387c18"}, "closed": true, "closedAt": "2020-10-13T20:37:57Z", "author": {"login": "baldersheim"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSGgk0gH2gAyNTAyMjAyNTU5OmQwMzBmYzYwZTM4ZmY4OTNlYzAxMjY3MjExYWIwMDg5MGJjZDIxNTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSOiI_AH2gAyNTAyMjAyNTU5OjVmOWY2YWE3ZjJmOWRjMmE5MTY5MmQ2ZGI4NzZiMjFjYWE2MGVlMTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d030fc60e38ff893ec01267211ab00890bcd2159", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/d030fc60e38ff893ec01267211ab00890bcd2159", "committedDate": "2020-10-13T11:02:53Z", "message": "- Use std::mutex/std::condition_varaible over vespalib::Monitor.\n- use vespa::duration over storage::framework::XXXTime."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e8713cdec730d347e44e2eb55aafc74cbfa374e", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/8e8713cdec730d347e44e2eb55aafc74cbfa374e", "committedDate": "2020-10-13T12:30:25Z", "message": "Use std::mutex"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3NDM2NTA3", "url": "https://github.com/vespa-engine/vespa/pull/14839#pullrequestreview-507436507", "createdAt": "2020-10-13T13:30:32Z", "commit": {"oid": "8e8713cdec730d347e44e2eb55aafc74cbfa374e"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzozMDozMlrOHgm2FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOToxMjo0N1rOHg1nUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk1MjkxNw==", "bodyText": "Can this function be removed entirely?", "url": "https://github.com/vespa-engine/vespa/pull/14839#discussion_r503952917", "createdAt": "2020-10-13T13:30:32Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/common/statusmetricconsumer.cpp", "diffHunk": "@@ -337,17 +337,9 @@ StatusMetricConsumer::reportStatus(std::ostream& out,\n }\n \n void\n-StatusMetricConsumer::waitUntilTimeProcessed(framework::SecondTime t) const\n+StatusMetricConsumer::waitUntilTimeProcessed(framework::SecondTime ) const\n {\n-    return; // Return straight away as thread is not running now.\n-        // This is used in unit testing to wait for internal thread to have\n-        // generated snapshots. Wait aggressively and signal other thread to\n-        // make it do it quick (as it uses fake timer)\n-    vespalib::MonitorGuard sync(_waiter);\n-    while (_processedTime < t) {\n-        sync.signal();\n-        sync.wait(1);\n-    }\n+    return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8713cdec730d347e44e2eb55aafc74cbfa374e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4MDg2Nw==", "bodyText": "Will std::atomic of chrono types be lock-free, or will it be considered some opaque POD type that gets wrapped by spinlocks? Not that it actually matters for this component; if anything we should consider removing it since it doesn't really do much these days. If we suspect a deadlock, a pstack/gcore is likely the only reasonable course of action for forensics, not log messages or internal status pages.", "url": "https://github.com/vespa-engine/vespa/pull/14839#discussion_r503980867", "createdAt": "2020-10-13T14:05:58Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/frameworkimpl/thread/deadlockdetector.h", "diffHunk": "@@ -81,8 +79,8 @@ struct DeadLockDetector : private framework::Runnable,\n     std::condition_variable _cond;\n     bool _enableWarning;\n     bool _enableShutdown;\n-    std::atomic<uint64_t> _processSlackMs;\n-    std::atomic<uint64_t> _waitSlackMs;\n+    std::atomic<vespalib::duration> _processSlackMs;\n+    std::atomic<vespalib::duration> _waitSlackMs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8713cdec730d347e44e2eb55aafc74cbfa374e"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4NDkzNw==", "bodyText": "Consider bringing back lock on _pauseMonitor here since it enforces visibility of the write to _paused to the thread being woken up. Relaxed store/load does not guarantee that.", "url": "https://github.com/vespa-engine/vespa/pull/14839#discussion_r503984937", "createdAt": "2020-10-13T14:11:03Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/persistence/filestorage/filestorhandlerimpl.cpp", "diffHunk": "@@ -1347,9 +1347,8 @@ FileStorHandlerImpl::pause()\n void\n FileStorHandlerImpl::resume()\n {\n-    vespalib::MonitorGuard g(_pauseMonitor);\n     _paused.store(false, std::memory_order_relaxed);\n-    g.broadcast();\n+    _pauseCond.notify_all();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8713cdec730d347e44e2eb55aafc74cbfa374e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwOTk3Nw==", "bodyText": "Technically this should never be true when a monotonic time source is used. Should we remove it or keep it around just in case we want to discover if there's any funny kernel business going on? \ud83d\ude42", "url": "https://github.com/vespa-engine/vespa/pull/14839#discussion_r504009977", "createdAt": "2020-10-13T14:42:25Z", "author": {"login": "vekterli"}, "path": "storageframework/src/vespa/storageframework/defaultimplementation/thread/threadimpl.cpp", "diffHunk": "@@ -69,30 +69,29 @@ ThreadImpl::join()\n }\n \n void\n-ThreadImpl::registerTick(CycleType cycleType, MilliSecTime time)\n+ThreadImpl::registerTick(CycleType cycleType, vespalib::steady_time now)\n {\n-    if (!time.isSet()) time = _pool.getClock().getTimeInMillis();\n+    if (now.time_since_epoch() == vespalib::duration::zero()) now = _pool.getClock().getMonotonicTime();\n     ThreadTickData data(getTickData());\n-    uint64_t previousTickMs = data._lastTickMs;\n-    uint64_t nowMs = time.getTime();\n-    data._lastTickMs = nowMs;\n+    vespalib::steady_clock::time_point previousTick = data._lastTick;\n+    data._lastTick = now;\n     data._lastTickType = cycleType;\n     setTickData(data);\n \n-    if (data._lastTickMs == 0) { return; }\n+    if (data._lastTick.time_since_epoch() == vespalib::duration::zero()) { return; }\n \n-    if (previousTickMs > nowMs) {\n+    if (previousTick > now) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8713cdec730d347e44e2eb55aafc74cbfa374e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAxNjUyMg==", "bodyText": "Consider doing a quick sweep of variables/parameters that are now vespalib::duration and remove \"Ms\" etc. explicit unit suffix", "url": "https://github.com/vespa-engine/vespa/pull/14839#discussion_r504016522", "createdAt": "2020-10-13T14:50:16Z", "author": {"login": "vekterli"}, "path": "storageframework/src/vespa/storageframework/defaultimplementation/thread/threadimpl.h", "diffHunk": "@@ -26,10 +26,16 @@ class ThreadImpl : public Thread\n      * on code using it.\n      */\n     struct AtomicThreadTickData {\n+        AtomicThreadTickData() noexcept\n+            : _lastTickType(),\n+              _lastTickMs(vespalib::steady_time(vespalib::duration::zero())),\n+              _maxProcessingTimeSeenMs(),\n+              _maxWaitTimeSeenMs()\n+        {}\n         std::atomic<CycleType> _lastTickType;\n-        std::atomic<uint64_t> _lastTickMs;\n-        std::atomic<uint64_t> _maxProcessingTimeSeenMs;\n-        std::atomic<uint64_t> _maxWaitTimeSeenMs;\n+        std::atomic<vespalib::steady_time> _lastTickMs;\n+        std::atomic<vespalib::duration> _maxProcessingTimeSeenMs;\n+        std::atomic<vespalib::duration> _maxWaitTimeSeenMs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8713cdec730d347e44e2eb55aafc74cbfa374e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5NDg5OQ==", "bodyText": "Shouldn't this class take in a mutex and a condition_variable and instantiate a unique_lock instead? The previous impl acquired a MonitorGuard while this impl does not end up taking any locks.", "url": "https://github.com/vespa-engine/vespa/pull/14839#discussion_r504194899", "createdAt": "2020-10-13T19:12:47Z", "author": {"login": "vekterli"}, "path": "storageframework/src/vespa/storageframework/generic/thread/tickingthread.cpp", "diffHunk": "@@ -120,40 +124,40 @@ class TickingThreadPoolImpl final : public TickingThreadPool {\n         void broadcast() override {}\n     };\n     struct CriticalGuard final : public TickingLockGuard::Impl {\n-        vespalib::MonitorGuard _guard;\n+        std::condition_variable &_cond;\n \n-        explicit CriticalGuard(vespalib::Monitor& m) : _guard(m) {}\n+        explicit CriticalGuard(std::condition_variable & cond) : _cond(cond) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8713cdec730d347e44e2eb55aafc74cbfa374e"}, "originalPosition": 129}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af77cdd1fb34e8e4cb7259bea395427a91bf8a39", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/af77cdd1fb34e8e4cb7259bea395427a91bf8a39", "committedDate": "2020-10-13T19:44:44Z", "message": "GC unused method."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "231962269b22d5f5f9d58d62ea15430587ab00b0", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/231962269b22d5f5f9d58d62ea15430587ab00b0", "committedDate": "2020-10-13T19:58:10Z", "message": "Time is no longer given in milliseconds."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdbaea53fb49e3c41b7788f2519d34cd971dad07", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/cdbaea53fb49e3c41b7788f2519d34cd971dad07", "committedDate": "2020-10-13T20:03:13Z", "message": "Put back guard to ensure thread visibility."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33291d95a41eeb9919392805da8b2986188c7014", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/33291d95a41eeb9919392805da8b2986188c7014", "committedDate": "2020-10-13T20:13:37Z", "message": "Verify that atomic duration time_point is lock free."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f9f6aa7f2f9dc2a91692d6db876b21caa60ee12", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/5f9f6aa7f2f9dc2a91692d6db876b21caa60ee12", "committedDate": "2020-10-13T20:23:50Z", "message": "Properly lock criticalk section."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2357, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}