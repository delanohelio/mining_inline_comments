{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMDEzMDQ4", "number": 13710, "title": "Add filter iterators for weighted set blueprints.", "bodyText": "@geirst : please review\n@arnej27959 : FYI", "createdAt": "2020-06-25T13:15:15Z", "url": "https://github.com/vespa-engine/vespa/pull/13710", "merged": true, "mergeCommit": {"oid": "c5248092fa13c86fe7ada994f59f238160c6586a"}, "closed": true, "closedAt": "2020-06-26T11:14:20Z", "author": {"login": "toregge"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuua14gH2gAyNDQwMDEzMDQ4OjA3MzQ0ZTA0YjU2MjhiNTJkYTU0YWFlYWVkNmEyOGZlOTc5ZTgzZjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcvBVw6AFqTQzODIxMTk0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "07344e04b5628b52da54aaeaed6a28fe979e83f1", "author": {"user": null}, "url": "https://github.com/vespa-engine/vespa/commit/07344e04b5628b52da54aaeaed6a28fe979e83f1", "committedDate": "2020-06-25T13:11:33Z", "message": "Add filter iterators for weighted set blueprints."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MDY1MTUw", "url": "https://github.com/vespa-engine/vespa/pull/13710#pullrequestreview-438065150", "createdAt": "2020-06-26T07:16:53Z", "commit": {"oid": "07344e04b5628b52da54aaeaed6a28fe979e83f1"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzoxNjo1NFrOGpWRSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNzoxNjo1NFrOGpWRSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAwOTY3NQ==", "bodyText": "Any reason for not using uint32_t (same as docId)? Consider replacing", "url": "https://github.com/vespa-engine/vespa/pull/13710#discussion_r446009675", "createdAt": "2020-06-26T07:16:54Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/attribute/document_weight_or_filter_search.cpp", "diffHunk": "@@ -0,0 +1,80 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"document_weight_or_filter_search.h\"\n+#include \"iterator_pack.h\"\n+#include <vespa/searchlib/common/bitvector.h>\n+#include <vespa/searchlib/queryeval/emptysearch.h>\n+\n+namespace search::attribute {\n+\n+class DocumentWeightOrFilterSearchImpl : public DocumentWeightOrFilterSearch\n+{\n+    AttributeIteratorPack _children;\n+public:\n+    DocumentWeightOrFilterSearchImpl(AttributeIteratorPack&& children);\n+    ~DocumentWeightOrFilterSearchImpl();\n+\n+    void doSeek(uint32_t docId) override;\n+    \n+    void doUnpack(uint32_t) override;\n+\n+    void initRange(uint32_t begin, uint32_t end) override {\n+        SearchIterator::initRange(begin, end);\n+        _children.initRange(begin, end);\n+    }\n+\n+    void or_hits_into(BitVector &result, uint32_t begin_id) override {\n+        return _children.or_hits_into(result, begin_id);\n+    }\n+\n+    void and_hits_into(BitVector &result, uint32_t begin_id) override {\n+        return result.andWith(*get_hits(begin_id));\n+    }\n+\n+    std::unique_ptr<BitVector> get_hits(uint32_t begin_id) override {\n+        return _children.get_hits(begin_id, getEndId());\n+    }\n+\n+    Trinary is_strict() const override { return Trinary::True; }\n+};\n+\n+DocumentWeightOrFilterSearchImpl::DocumentWeightOrFilterSearchImpl(AttributeIteratorPack&& children)\n+    : DocumentWeightOrFilterSearch(),\n+      _children(std::move(children))\n+{\n+}\n+\n+DocumentWeightOrFilterSearchImpl::~DocumentWeightOrFilterSearchImpl() = default;\n+\n+void\n+DocumentWeightOrFilterSearchImpl::doSeek(uint32_t docId)\n+{\n+    if (_children.get_docid(0) < docId) {\n+        _children.seek(0, docId);\n+    }\n+    uint32_t min_doc_id = _children.get_docid(0);\n+    for (unsigned int i = 1; min_doc_id > docId && i < _children.size(); ++i) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07344e04b5628b52da54aaeaed6a28fe979e83f1"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c39384dbe4a5b366a0f0d5743f5c899597c81b91", "author": {"user": null}, "url": "https://github.com/vespa-engine/vespa/commit/c39384dbe4a5b366a0f0d5743f5c899597c81b91", "committedDate": "2020-06-26T09:42:42Z", "message": "Use uint16_t data type for loop variable over children."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MjExOTQy", "url": "https://github.com/vespa-engine/vespa/pull/13710#pullrequestreview-438211942", "createdAt": "2020-06-26T11:14:12Z", "commit": {"oid": "c39384dbe4a5b366a0f0d5743f5c899597c81b91"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3577, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}