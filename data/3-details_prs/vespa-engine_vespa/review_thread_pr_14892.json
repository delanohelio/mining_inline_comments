{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzOTI0MDQz", "number": 14892, "reviewThreads": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOTo1NDozMFrOEt6tWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNDowOTo1NVrOEuA7Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTgzMjU5OnYy", "diffSide": "RIGHT", "path": "document/src/tests/documentupdatetestcase.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOTo1NDozMFrOHiABlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOTo1NDozMFrOHiABlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQxNDAzNg==", "bodyText": "prefer not using is_tensor, consider checking the type or spec for validity instead.", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505414036", "createdAt": "2020-10-15T09:54:30Z", "author": {"login": "havardpe"}, "path": "document/src/tests/documentupdatetestcase.cpp", "diffHunk": "@@ -771,11 +772,12 @@ TEST(DocumentUpdateTest, testMapValueUpdate)\n     EXPECT_EQ(fv4->find(StringFieldValue(\"apple\")), fv4->end());\n }\n \n-std::unique_ptr<Tensor>\n+std::unique_ptr<vespalib::eval::Value>\n makeTensor(const TensorSpec &spec)\n {\n-    auto result = DefaultTensorEngine::ref().from_spec(spec);\n-    return std::unique_ptr<Tensor>(dynamic_cast<Tensor*>(result.release()));\n+    auto result = EngineOrFactory::get().from_spec(spec);\n+    EXPECT_TRUE(result->is_tensor());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTg2OTMwOnYy", "diffSide": "RIGHT", "path": "searchcore/src/tests/proton/common/attribute_updater/attribute_updater_test.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDowMzowNFrOHiAYag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDowMzowNFrOHiAYag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQxOTg4Mg==", "bodyText": "combine lines?", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505419882", "createdAt": "2020-10-15T10:03:04Z", "author": {"login": "havardpe"}, "path": "searchcore/src/tests/proton/common/attribute_updater/attribute_updater_test.cpp", "diffHunk": "@@ -442,7 +442,9 @@ struct TensorFixture : public Fixture {\n     }\n \n     void assertTensor(const TensorSpec &expSpec) {\n-        EXPECT_EQUAL(expSpec, attribute->getTensor(1)->toSpec());\n+        auto engine = EngineOrFactory::get();\n+        auto actual = engine.to_spec(*attribute->getTensor(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTg3MDc3OnYy", "diffSide": "RIGHT", "path": "searchcore/src/tests/proton/docsummary/docsummary.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDowMzoyOVrOHiAZXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDowMzoyOVrOHiAZXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQyMDEyNQ==", "bodyText": "just return here?", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505420125", "createdAt": "2020-10-15T10:03:29Z", "author": {"login": "havardpe"}, "path": "searchcore/src/tests/proton/docsummary/docsummary.cpp", "diffHunk": "@@ -139,9 +138,9 @@ getDocTypeName()\n     return \"searchdocument\";\n }\n \n-Tensor::UP make_tensor(const TensorSpec &spec) {\n-    auto tensor = DefaultTensorEngine::ref().from_spec(spec);\n-    return Tensor::UP(dynamic_cast<Tensor*>(tensor.release()));\n+vespalib::eval::Value::UP make_tensor(const TensorSpec &spec) {\n+    auto tensor = EngineOrFactory::get().from_spec(spec);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTg5MzEwOnYy", "diffSide": "RIGHT", "path": "searchcore/src/vespa/searchcore/proton/matching/docsum_matcher.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDowOTo0MFrOHiAnSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDowOTo0MFrOHiAnSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQyMzY5MQ==", "bodyText": "prefer checking type instead obj.get().type().is_double()", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505423691", "createdAt": "2020-10-15T10:09:40Z", "author": {"login": "havardpe"}, "path": "searchcore/src/vespa/searchcore/proton/matching/docsum_matcher.cpp", "diffHunk": "@@ -71,9 +72,9 @@ get_feature_set(const MatchToolsFactory &mtf,\n             for (uint32_t j = 0; j < featureNames.size(); ++j) {\n                 if (resolver.is_object(j)) {\n                     auto obj = resolver.resolve(j).as_object(docId);\n-                    if (const auto *tensor = obj.get().as_tensor()) {\n+                    if (! obj.get().is_double()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTkyNDI3OnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/attribute/tensorattribute/tensorattribute_test.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDoxODo0MVrOHiA6_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDoxODo0MVrOHiA6_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQyODczMw==", "bodyText": "return here?", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505428733", "createdAt": "2020-10-15T10:18:41Z", "author": {"login": "havardpe"}, "path": "searchlib/src/tests/attribute/tensorattribute/tensorattribute_test.cpp", "diffHunk": "@@ -50,36 +50,19 @@ using search::tensor::PrepareResult;\n using search::tensor::TensorAttribute;\n using vespalib::eval::TensorSpec;\n using vespalib::eval::ValueType;\n-using vespalib::tensor::DefaultTensorEngine;\n-using vespalib::tensor::DenseTensor;\n-using vespalib::tensor::DenseTensorView;\n-using vespalib::tensor::Tensor;\n+using vespalib::eval::Value;\n+using vespalib::eval::EngineOrFactory;\n \n using DoubleVector = std::vector<double>;\n using generation_t = vespalib::GenerationHandler::generation_t;\n \n-namespace vespalib::tensor {\n-\n-static bool operator==(const Tensor &lhs, const Tensor &rhs)\n-{\n-    return lhs.equals(rhs);\n-}\n-\n-}\n-\n vespalib::string sparseSpec(\"tensor(x{},y{})\");\n vespalib::string denseSpec(\"tensor(x[2],y[3])\");\n vespalib::string vec_2d_spec(\"tensor(x[2])\");\n \n-Tensor::UP createTensor(const TensorSpec &spec) {\n-    auto value = DefaultTensorEngine::ref().from_spec(spec);\n-    if (value->is_double()) {\n-        return Tensor::UP(new DenseTensor<double>(ValueType::double_type(), {value->as_double()}));\n-    }\n-    Tensor *tensor = dynamic_cast<Tensor*>(value.get());\n-    ASSERT_TRUE(tensor != nullptr);\n-    value.release();\n-    return Tensor::UP(tensor);\n+Value::UP createTensor(const TensorSpec &spec) {\n+    auto value = EngineOrFactory::get().from_spec(spec);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTkyNzAzOnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/attribute/tensorattribute/tensorattribute_test.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDoxOTozMlrOHiA80Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDoxOTozMlrOHiA80Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQyOTIwMQ==", "bodyText": "return here?", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505429201", "createdAt": "2020-10-15T10:19:32Z", "author": {"login": "havardpe"}, "path": "searchlib/src/tests/attribute/tensorattribute/tensorattribute_test.cpp", "diffHunk": "@@ -922,12 +903,9 @@ class NearestNeighborBlueprintFixture : public DenseTensorAttributeMockIndex {\n         set_tensor(10, vec_2d(0, 0));\n     }\n \n-    std::unique_ptr<QueryTensor> createDenseTensor(const TensorSpec &spec) {\n-        auto value = DefaultTensorEngine::ref().from_spec(spec);\n-        QueryTensor *tensor = dynamic_cast<QueryTensor *>(value.get());\n-        ASSERT_TRUE(tensor != nullptr);\n-        value.release();\n-        return std::unique_ptr<QueryTensor>(tensor);\n+    std::unique_ptr<Value> createDenseTensor(const TensorSpec &spec) {\n+        auto value = EngineOrFactory::get().from_spec(spec);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTkyOTc3OnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/features/tensor_from_weighted_set/tensor_from_weighted_set_test.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDoyMDoxOFrOHiA-iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDoyMDoxOFrOHiA-iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQyOTY0Mw==", "bodyText": "return here?", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505429643", "createdAt": "2020-10-15T10:20:18Z", "author": {"login": "havardpe"}, "path": "searchlib/src/tests/features/tensor_from_weighted_set/tensor_from_weighted_set_test.cpp", "diffHunk": "@@ -27,21 +28,20 @@ using search::StringAttribute;\n using vespalib::eval::Value;\n using vespalib::eval::Function;\n using vespalib::eval::TensorSpec;\n-using vespalib::tensor::Tensor;\n-using vespalib::tensor::DefaultTensorEngine;\n+using vespalib::eval::EngineOrFactory;\n \n typedef search::attribute::Config AVC;\n typedef search::attribute::BasicType AVBT;\n typedef search::attribute::CollectionType AVCT;\n typedef search::AttributeVector::SP AttributePtr;\n typedef FtTestApp FTA;\n \n-Tensor::UP make_tensor(const TensorSpec &spec) {\n-    auto tensor = DefaultTensorEngine::ref().from_spec(spec);\n-    return Tensor::UP(dynamic_cast<Tensor*>(tensor.release()));\n+Value::UP make_tensor(const TensorSpec &spec) {\n+    auto tensor = EngineOrFactory::get().from_spec(spec);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTkzMjg2OnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/tensor/dense_tensor_store/dense_tensor_store_test.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDoyMTowNlrOHiBAZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDoyMTowNlrOHiBAZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQzMDExOQ==", "bodyText": "return here?", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505430119", "createdAt": "2020-10-15T10:21:06Z", "author": {"login": "havardpe"}, "path": "searchlib/src/tests/tensor/dense_tensor_store/dense_tensor_store_test.cpp", "diffHunk": "@@ -3,26 +3,28 @@\n LOG_SETUP(\"dense_tensor_store_test\");\n #include <vespa/vespalib/testkit/test_kit.h>\n #include <vespa/searchlib/tensor/dense_tensor_store.h>\n+#include <vespa/eval/eval/engine_or_factory.h>\n #include <vespa/eval/eval/tensor_spec.h>\n+#include <vespa/eval/eval/test/value_compare.h>\n+#include <vespa/eval/eval/value.h>\n #include <vespa/eval/eval/value_type.h>\n #include <vespa/eval/tensor/default_tensor_engine.h>\n-#include <vespa/eval/tensor/tensor.h>\n #include <vespa/eval/tensor/dense/mutable_dense_tensor_view.h>\n \n using search::tensor::DenseTensorStore;\n using vespalib::eval::TensorSpec;\n+using vespalib::eval::Value;\n using vespalib::eval::ValueType;\n+using vespalib::eval::EngineOrFactory;\n using vespalib::tensor::MutableDenseTensorView;\n-using vespalib::tensor::Tensor;\n-using vespalib::tensor::DefaultTensorEngine;\n \n using EntryRef = DenseTensorStore::EntryRef;\n \n-Tensor::UP\n+Value::UP\n makeTensor(const TensorSpec &spec)\n {\n-    auto tensor = DefaultTensorEngine::ref().from_spec(spec);\n-    return Tensor::UP(dynamic_cast<Tensor *>(tensor.release()));\n+    auto tensor = EngineOrFactory::get().from_spec(spec);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTkzNzk1OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/attribute/attribute_blueprint_factory.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDoyMjozNFrOHiBDig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDoyMjozNFrOHiBDig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQzMDkyMg==", "bodyText": "query_tensor->type() -> qt_type", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505430922", "createdAt": "2020-10-15T10:22:34Z", "author": {"login": "havardpe"}, "path": "searchlib/src/vespa/searchlib/attribute/attribute_blueprint_factory.cpp", "diffHunk": "@@ -724,19 +723,17 @@ class CreateBlueprintVisitor : public CreateBlueprintVisitorHelper\n         if (query_tensor.get() == nullptr) {\n             return fail_nearest_neighbor_term(n, \"Query tensor was not found in request context\");\n         }\n-        auto* dense_query_tensor = dynamic_cast<DenseTensorView*>(query_tensor.get());\n-        if (dense_query_tensor == nullptr) {\n+        const auto & qt_type = query_tensor->type();\n+        if (! qt_type.is_dense()) {\n             return fail_nearest_neighbor_term(n, make_string(\"Query tensor is not a dense tensor (type=%s)\",\n                                                              query_tensor->type().to_spec().c_str()));\n         }\n-        if (!is_compatible_for_nearest_neighbor(dense_attr_tensor->getTensorType(), dense_query_tensor->type())) {\n+        if (!is_compatible_for_nearest_neighbor(dense_attr_tensor->getTensorType(), qt_type)) {\n             return fail_nearest_neighbor_term(n, make_string(\"Attribute tensor type (%s) and query tensor type (%s) are not compatible\",\n-                                                             dense_attr_tensor->getTensorType().to_spec().c_str(), dense_query_tensor->type().to_spec().c_str()));\n+                                                             dense_attr_tensor->getTensorType().to_spec().c_str(), query_tensor->type().to_spec().c_str()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjA4MDAyOnYy", "diffSide": "RIGHT", "path": "document/src/vespa/document/update/tensor_add_update.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowMjozNlrOHiCa2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowMjozNlrOHiCa2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1MzI3NQ==", "bodyText": "Consider return {}; instead.", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505453275", "createdAt": "2020-10-15T11:02:36Z", "author": {"login": "geirst"}, "path": "document/src/vespa/document/update/tensor_add_update.cpp", "diffHunk": "@@ -78,14 +82,34 @@ TensorAddUpdate::checkCompatibility(const Field& field) const\n     }\n }\n \n-std::unique_ptr<Tensor>\n-TensorAddUpdate::applyTo(const Tensor &tensor) const\n+namespace {\n+\n+std::unique_ptr<vespalib::eval::Value>\n+old_add(const vespalib::eval::Value *input,\n+        const vespalib::eval::Value *add_cells)\n+{\n+    auto a = dynamic_cast<const vespalib::tensor::Tensor *>(input);\n+    assert(a);\n+    auto b = dynamic_cast<const vespalib::tensor::Tensor *>(add_cells);\n+    assert(b);\n+    return a->add(*b);\n+}\n+\n+} // namespace\n+\n+std::unique_ptr<vespalib::eval::Value>\n+TensorAddUpdate::applyTo(const vespalib::eval::Value &tensor) const\n {\n     auto addTensor = _tensor->getAsTensorPtr();\n     if (addTensor) {\n-        return tensor.add(*addTensor);\n+        auto engine = EngineOrFactory::get();\n+        if (engine.is_factory()) {\n+            return TensorPartialUpdate::add(tensor, *addTensor, engine.factory());\n+        } else {\n+            return old_add(&tensor, addTensor);\n+        }\n     }\n-    return std::unique_ptr<Tensor>();\n+    return std::unique_ptr<vespalib::eval::Value>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjA4MDcxOnYy", "diffSide": "RIGHT", "path": "document/src/vespa/document/update/tensor_modify_update.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowMjo0OVrOHiCbUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowMjo0OVrOHiCbUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1MzM5NA==", "bodyText": "Consider return {}; instead.", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505453394", "createdAt": "2020-10-15T11:02:49Z", "author": {"login": "geirst"}, "path": "document/src/vespa/document/update/tensor_modify_update.cpp", "diffHunk": "@@ -156,16 +160,32 @@ TensorModifyUpdate::checkCompatibility(const Field& field) const\n     }\n }\n \n-std::unique_ptr<Tensor>\n-TensorModifyUpdate::applyTo(const Tensor &tensor) const\n+\n+std::unique_ptr<vespalib::eval::Value>\n+old_modify(const vespalib::eval::Value *input,\n+           const vespalib::eval::Value *modify_spec,\n+           join_fun_t function)\n+{\n+    auto a = dynamic_cast<const vespalib::tensor::Tensor *>(input);\n+    // Cells tensor being sparse was validated during deserialize().\n+    auto b = dynamic_cast<const vespalib::tensor::SparseTensor *>(modify_spec);\n+    vespalib::tensor::CellValues cellValues(*b);\n+    return a->modify(function, cellValues);\n+}\n+\n+std::unique_ptr<vespalib::eval::Value>\n+TensorModifyUpdate::applyTo(const vespalib::eval::Value &tensor) const\n {\n     auto cellsTensor = _tensor->getAsTensorPtr();\n     if (cellsTensor) {\n-        // Cells tensor being sparse was validated during deserialize().\n-        vespalib::tensor::CellValues cellValues(static_cast<const vespalib::tensor::SparseTensor &>(*cellsTensor));\n-        return tensor.modify(getJoinFunction(_operation), cellValues);\n+        auto engine = EngineOrFactory::get();\n+        if (engine.is_factory()) {\n+            return TensorPartialUpdate::modify(tensor, getJoinFunction(_operation), *cellsTensor, engine.factory());\n+        } else {\n+            return old_modify(&tensor, cellsTensor, getJoinFunction(_operation));\n+        }\n     }\n-    return std::unique_ptr<Tensor>();\n+    return std::unique_ptr<vespalib::eval::Value>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjA4MzQxOnYy", "diffSide": "RIGHT", "path": "document/src/vespa/document/update/tensor_remove_update.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowMzozMlrOHiCc2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowMzozMlrOHiCc2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1Mzc4NA==", "bodyText": "Consider return {}; instead.", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505453784", "createdAt": "2020-10-15T11:03:32Z", "author": {"login": "geirst"}, "path": "document/src/vespa/document/update/tensor_remove_update.cpp", "diffHunk": "@@ -102,16 +117,19 @@ TensorRemoveUpdate::checkCompatibility(const Field &field) const\n     }\n }\n \n-std::unique_ptr<Tensor>\n-TensorRemoveUpdate::applyTo(const Tensor &tensor) const\n+std::unique_ptr<vespalib::eval::Value>\n+TensorRemoveUpdate::applyTo(const vespalib::eval::Value &tensor) const\n {\n     auto addressTensor = _tensor->getAsTensorPtr();\n     if (addressTensor) {\n-        // Address tensor being sparse was validated during deserialize().\n-        vespalib::tensor::CellValues cellAddresses(static_cast<const vespalib::tensor::SparseTensor &>(*addressTensor));\n-        return tensor.remove(cellAddresses);\n+        auto engine = EngineOrFactory::get();\n+        if (engine.is_factory()) {\n+            return TensorPartialUpdate::remove(tensor, *addressTensor, engine.factory());\n+        } else {\n+            return old_remove(&tensor, addressTensor);\n+        }\n     }\n-    return std::unique_ptr<Tensor>();\n+    return std::unique_ptr<vespalib::eval::Value>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjA5MjI0OnYy", "diffSide": "RIGHT", "path": "searchcore/src/tests/proton/docsummary/docsummary.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowNjowOVrOHiCiCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowNjowOVrOHiCiCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1NTExMw==", "bodyText": "Consider auto tensor instead.", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505455113", "createdAt": "2020-10-15T11:06:09Z", "author": {"login": "geirst"}, "path": "searchcore/src/tests/proton/docsummary/docsummary.cpp", "diffHunk": "@@ -335,7 +334,7 @@ assertTensor(const Tensor::UP & exp, const std::string & fieldName,\n     EXPECT_EQUAL(exp.get() == nullptr, data.size == 0u);\n     if (exp) {\n         vespalib::nbostream x(data.data, data.size);\n-        Tensor::UP tensor = vespalib::tensor::TypedBinaryFormat::deserialize(x);\n+        vespalib::eval::Value::UP tensor = EngineOrFactory::get().decode(x);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjA5ODIyOnYy", "diffSide": "RIGHT", "path": "searchcore/src/tests/proton/docsummary/summaryfieldconverter_test.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowODowMlrOHiCl4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowODowMlrOHiCl4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1NjA5Ng==", "bodyText": "Consider returning here.", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505456096", "createdAt": "2020-10-15T11:08:02Z", "author": {"login": "geirst"}, "path": "searchcore/src/tests/proton/docsummary/summaryfieldconverter_test.cpp", "diffHunk": "@@ -675,9 +676,9 @@ Test::requireThatPredicateIsPrinted()\n                 SFC::convertSummaryField(false, *doc.getValue(\"predicate\")).get());\n }\n \n-Tensor::UP make_tensor(const TensorSpec &spec) {\n-    auto tensor = DefaultTensorEngine::ref().from_spec(spec);\n-    return Tensor::UP(dynamic_cast<Tensor*>(tensor.release()));\n+Value::UP make_tensor(const TensorSpec &spec) {\n+    auto tensor = EngineOrFactory::get().from_spec(spec);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjA5OTQ4OnYy", "diffSide": "RIGHT", "path": "searchcore/src/tests/proton/common/attribute_updater/attribute_updater_test.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowODoyM1rOHiCmsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowODoyM1rOHiCmsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1NjMwNA==", "bodyText": "Consider returning here.", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505456304", "createdAt": "2020-10-15T11:08:23Z", "author": {"login": "geirst"}, "path": "searchcore/src/tests/proton/common/attribute_updater/attribute_updater_test.cpp", "diffHunk": "@@ -408,11 +408,11 @@ getTensorDataType(const vespalib::string &spec)\n     return *insres.first->second;\n }\n \n-std::unique_ptr<Tensor>\n+std::unique_ptr<Value>\n makeTensor(const TensorSpec &spec)\n {\n-    auto result = DefaultTensorEngine::ref().from_spec(spec);\n-    return std::unique_ptr<Tensor>(dynamic_cast<Tensor*>(result.release()));\n+    auto result = EngineOrFactory::get().from_spec(spec);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEwMTY2OnYy", "diffSide": "RIGHT", "path": "searchcore/src/tests/proton/server/documentretriever_test.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowOTowNlrOHiCoDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowOTowNlrOHiCoDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1NjY1NQ==", "bodyText": "Consider using auto.", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505456655", "createdAt": "2020-10-15T11:09:06Z", "author": {"login": "geirst"}, "path": "searchcore/src/tests/proton/server/documentretriever_test.cpp", "diffHunk": "@@ -110,8 +113,8 @@ const char dyn_field_nas[] = \"dynamic null attr string field\"; // in document, n\n const char position_field[] = \"position_field\";\n vespalib::string dyn_field_tensor(\"dynamic_tensor_field\");\n vespalib::string tensor_spec(\"tensor(x{})\");\n-std::unique_ptr<Tensor> static_tensor = makeTensor<Tensor>(TensorSpec(tensor_spec).add({{\"x\", \"1\"}}, 1.5));\n-std::unique_ptr<Tensor> dynamic_tensor = makeTensor<Tensor>(TensorSpec(tensor_spec).add({{\"x\", \"2\"}}, 3.5));\n+std::unique_ptr<Value> static_tensor = makeTensor<Value>(TensorSpec(tensor_spec).add({{\"x\", \"1\"}}, 1.5));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEwMjEyOnYy", "diffSide": "RIGHT", "path": "searchcore/src/tests/proton/server/documentretriever_test.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowOToxNVrOHiCoVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMTowOToxNVrOHiCoVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1NjcyNA==", "bodyText": "Consider using auto.", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505456724", "createdAt": "2020-10-15T11:09:15Z", "author": {"login": "geirst"}, "path": "searchcore/src/tests/proton/server/documentretriever_test.cpp", "diffHunk": "@@ -110,8 +113,8 @@ const char dyn_field_nas[] = \"dynamic null attr string field\"; // in document, n\n const char position_field[] = \"position_field\";\n vespalib::string dyn_field_tensor(\"dynamic_tensor_field\");\n vespalib::string tensor_spec(\"tensor(x{})\");\n-std::unique_ptr<Tensor> static_tensor = makeTensor<Tensor>(TensorSpec(tensor_spec).add({{\"x\", \"1\"}}, 1.5));\n-std::unique_ptr<Tensor> dynamic_tensor = makeTensor<Tensor>(TensorSpec(tensor_spec).add({{\"x\", \"2\"}}, 3.5));\n+std::unique_ptr<Value> static_tensor = makeTensor<Value>(TensorSpec(tensor_spec).add({{\"x\", \"1\"}}, 1.5));\n+std::unique_ptr<Value> dynamic_tensor = makeTensor<Value>(TensorSpec(tensor_spec).add({{\"x\", \"2\"}}, 3.5));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEwNTgxOnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/attribute/tensorattribute/tensorattribute_test.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxMDoyNFrOHiCqnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxMDoyNFrOHiCqnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1NzMxMQ==", "bodyText": "Consider using auto.", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505457311", "createdAt": "2020-10-15T11:10:24Z", "author": {"login": "geirst"}, "path": "searchlib/src/tests/attribute/tensorattribute/tensorattribute_test.cpp", "diffHunk": "@@ -435,14 +418,14 @@ struct Fixture {\n \n     void assertGetNoTensor(uint32_t docId) {\n         AttributeGuard guard(_attr);\n-        Tensor::UP actTensor = _tensorAttr->getTensor(docId);\n+        Value::UP actTensor = _tensorAttr->getTensor(docId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEwNjU1OnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/attribute/tensorattribute/tensorattribute_test.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxMDozMlrOHiCrAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxMDozMlrOHiCrAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1NzQxMQ==", "bodyText": "Consider using auto.", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505457411", "createdAt": "2020-10-15T11:10:32Z", "author": {"login": "geirst"}, "path": "searchlib/src/tests/attribute/tensorattribute/tensorattribute_test.cpp", "diffHunk": "@@ -435,14 +418,14 @@ struct Fixture {\n \n     void assertGetNoTensor(uint32_t docId) {\n         AttributeGuard guard(_attr);\n-        Tensor::UP actTensor = _tensorAttr->getTensor(docId);\n+        Value::UP actTensor = _tensorAttr->getTensor(docId);\n         EXPECT_FALSE(actTensor);\n     }\n \n     void assertGetTensor(const TensorSpec &expSpec, uint32_t docId) {\n-        Tensor::UP expTensor = createTensor(expSpec);\n+        Value::UP expTensor = createTensor(expSpec);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEwNjg1OnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/attribute/tensorattribute/tensorattribute_test.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxMDozN1rOHiCrMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxMDozN1rOHiCrMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1NzQ1Ng==", "bodyText": "Consider using auto.", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505457456", "createdAt": "2020-10-15T11:10:37Z", "author": {"login": "geirst"}, "path": "searchlib/src/tests/attribute/tensorattribute/tensorattribute_test.cpp", "diffHunk": "@@ -435,14 +418,14 @@ struct Fixture {\n \n     void assertGetNoTensor(uint32_t docId) {\n         AttributeGuard guard(_attr);\n-        Tensor::UP actTensor = _tensorAttr->getTensor(docId);\n+        Value::UP actTensor = _tensorAttr->getTensor(docId);\n         EXPECT_FALSE(actTensor);\n     }\n \n     void assertGetTensor(const TensorSpec &expSpec, uint32_t docId) {\n-        Tensor::UP expTensor = createTensor(expSpec);\n+        Value::UP expTensor = createTensor(expSpec);\n         AttributeGuard guard(_attr);\n-        Tensor::UP actTensor = _tensorAttr->getTensor(docId);\n+        Value::UP actTensor = _tensorAttr->getTensor(docId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEwNzIxOnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/attribute/tensorattribute/tensorattribute_test.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxMDo0NVrOHiCraA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxMDo0NVrOHiCraA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1NzUxMg==", "bodyText": "Consider using auto.", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505457512", "createdAt": "2020-10-15T11:10:45Z", "author": {"login": "geirst"}, "path": "searchlib/src/tests/attribute/tensorattribute/tensorattribute_test.cpp", "diffHunk": "@@ -655,7 +638,7 @@ void\n Fixture::testEmptyTensor()\n {\n     const TensorAttribute &tensorAttr = *_tensorAttr;\n-    Tensor::UP emptyTensor = tensorAttr.getEmptyTensor();\n+    Value::UP emptyTensor = tensorAttr.getEmptyTensor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEwNzkxOnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/features/constant/constant_test.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxMTowMFrOHiCr3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxMTowMFrOHiCr3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1NzYzMQ==", "bodyText": "Consider using auto.", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505457631", "createdAt": "2020-10-15T11:11:00Z", "author": {"login": "geirst"}, "path": "searchlib/src/tests/features/constant/constant_test.cpp", "diffHunk": "@@ -63,7 +62,7 @@ struct ExecFixture\n     void addTensor(const vespalib::string &name,\n                    const TensorSpec &spec)\n     {\n-        Tensor::UP tensor = make_tensor(spec);\n+        Value::UP tensor = make_tensor(spec);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEwOTM5OnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/features/tensor_from_labels/tensor_from_labels_test.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxMToyOFrOHiCszw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxMToyOFrOHiCszw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1Nzg3MQ==", "bodyText": "Consider returning here.", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505457871", "createdAt": "2020-10-15T11:11:28Z", "author": {"login": "geirst"}, "path": "searchlib/src/tests/features/tensor_from_labels/tensor_from_labels_test.cpp", "diffHunk": "@@ -26,21 +27,20 @@ using search::StringAttribute;\n using vespalib::eval::Value;\n using vespalib::eval::Function;\n using vespalib::eval::TensorSpec;\n-using vespalib::tensor::DefaultTensorEngine;\n-using vespalib::tensor::Tensor;\n+using vespalib::eval::EngineOrFactory;\n \n typedef search::attribute::Config AVC;\n typedef search::attribute::BasicType AVBT;\n typedef search::attribute::CollectionType AVCT;\n typedef search::AttributeVector::SP AttributePtr;\n typedef FtTestApp FTA;\n \n-Tensor::UP make_tensor(const TensorSpec &spec) {\n-    auto tensor = DefaultTensorEngine::ref().from_spec(spec);\n-    return Tensor::UP(dynamic_cast<Tensor*>(tensor.release()));\n+Value::UP make_tensor(const TensorSpec &spec) {\n+    auto tensor = EngineOrFactory::get().from_spec(spec);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjExMTMxOnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/tensor/dense_tensor_store/dense_tensor_store_test.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxMjowMlrOHiCt7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxMjowMlrOHiCt7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1ODE1Ng==", "bodyText": "Consider using auto.", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505458156", "createdAt": "2020-10-15T11:12:02Z", "author": {"login": "geirst"}, "path": "searchlib/src/tests/tensor/dense_tensor_store/dense_tensor_store_test.cpp", "diffHunk": "@@ -32,23 +34,23 @@ struct Fixture\n         : store(ValueType::from_spec(tensorType))\n     {}\n     void assertSetAndGetTensor(const TensorSpec &tensorSpec) {\n-        Tensor::UP expTensor = makeTensor(tensorSpec);\n+        Value::UP expTensor = makeTensor(tensorSpec);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjExMTU1OnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/tensor/dense_tensor_store/dense_tensor_store_test.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxMjowN1rOHiCuEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxMjowN1rOHiCuEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1ODE5Mg==", "bodyText": "Consider using auto.", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505458192", "createdAt": "2020-10-15T11:12:07Z", "author": {"login": "geirst"}, "path": "searchlib/src/tests/tensor/dense_tensor_store/dense_tensor_store_test.cpp", "diffHunk": "@@ -32,23 +34,23 @@ struct Fixture\n         : store(ValueType::from_spec(tensorType))\n     {}\n     void assertSetAndGetTensor(const TensorSpec &tensorSpec) {\n-        Tensor::UP expTensor = makeTensor(tensorSpec);\n+        Value::UP expTensor = makeTensor(tensorSpec);\n         EntryRef ref = store.setTensor(*expTensor);\n-        Tensor::UP actTensor = store.getTensor(ref);\n-        EXPECT_EQUAL(expTensor->toSpec(), actTensor->toSpec());\n+        Value::UP actTensor = store.getTensor(ref);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjExMTk3OnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/tensor/dense_tensor_store/dense_tensor_store_test.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxMjoxMlrOHiCuVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxMjoxMlrOHiCuVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1ODI2MA==", "bodyText": "Consider using auto.", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505458260", "createdAt": "2020-10-15T11:12:12Z", "author": {"login": "geirst"}, "path": "searchlib/src/tests/tensor/dense_tensor_store/dense_tensor_store_test.cpp", "diffHunk": "@@ -32,23 +34,23 @@ struct Fixture\n         : store(ValueType::from_spec(tensorType))\n     {}\n     void assertSetAndGetTensor(const TensorSpec &tensorSpec) {\n-        Tensor::UP expTensor = makeTensor(tensorSpec);\n+        Value::UP expTensor = makeTensor(tensorSpec);\n         EntryRef ref = store.setTensor(*expTensor);\n-        Tensor::UP actTensor = store.getTensor(ref);\n-        EXPECT_EQUAL(expTensor->toSpec(), actTensor->toSpec());\n+        Value::UP actTensor = store.getTensor(ref);\n+        EXPECT_EQUAL(*expTensor, *actTensor);\n         assertTensorView(ref, *expTensor);\n     }\n     void assertEmptyTensor(const TensorSpec &tensorSpec) {\n-        Tensor::UP expTensor = makeTensor(tensorSpec);\n+        Value::UP expTensor = makeTensor(tensorSpec);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjExMjIwOnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/tensor/dense_tensor_store/dense_tensor_store_test.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxMjoxN1rOHiCudw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxMjoxN1rOHiCudw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1ODI5NQ==", "bodyText": "Consider using auto.", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505458295", "createdAt": "2020-10-15T11:12:17Z", "author": {"login": "geirst"}, "path": "searchlib/src/tests/tensor/dense_tensor_store/dense_tensor_store_test.cpp", "diffHunk": "@@ -32,23 +34,23 @@ struct Fixture\n         : store(ValueType::from_spec(tensorType))\n     {}\n     void assertSetAndGetTensor(const TensorSpec &tensorSpec) {\n-        Tensor::UP expTensor = makeTensor(tensorSpec);\n+        Value::UP expTensor = makeTensor(tensorSpec);\n         EntryRef ref = store.setTensor(*expTensor);\n-        Tensor::UP actTensor = store.getTensor(ref);\n-        EXPECT_EQUAL(expTensor->toSpec(), actTensor->toSpec());\n+        Value::UP actTensor = store.getTensor(ref);\n+        EXPECT_EQUAL(*expTensor, *actTensor);\n         assertTensorView(ref, *expTensor);\n     }\n     void assertEmptyTensor(const TensorSpec &tensorSpec) {\n-        Tensor::UP expTensor = makeTensor(tensorSpec);\n+        Value::UP expTensor = makeTensor(tensorSpec);\n         EntryRef ref;\n-        Tensor::UP actTensor = store.getTensor(ref);\n+        Value::UP actTensor = store.getTensor(ref);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjExOTA0OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/tensor/dense_tensor_attribute.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNDoxNVrOHiCyhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNDoxNVrOHiCyhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1OTMzMw==", "bodyText": "Consider return {}; instead.", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505459333", "createdAt": "2020-10-15T11:14:15Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/tensor/dense_tensor_attribute.cpp", "diffHunk": "@@ -164,15 +160,15 @@ DenseTensorAttribute::complete_set_tensor(DocId docid, const Tensor& tensor,\n     }\n }\n \n-std::unique_ptr<Tensor>\n+std::unique_ptr<vespalib::eval::Value>\n DenseTensorAttribute::getTensor(DocId docId) const\n {\n     EntryRef ref;\n     if (docId < getCommittedDocIdLimit()) {\n         ref = _refVector[docId];\n     }\n     if (!ref.valid()) {\n-        return std::unique_ptr<Tensor>();\n+        return std::unique_ptr<vespalib::eval::Value>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyMTY1OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/tensor/dense_tensor_store.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNDo1NlrOHiCz9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNDo1NlrOHiCz9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ1OTcwMQ==", "bodyText": "Consider return {}; instead.", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505459701", "createdAt": "2020-10-15T11:14:56Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/tensor/dense_tensor_store.cpp", "diffHunk": "@@ -131,14 +127,14 @@ DenseTensorStore::move(EntryRef ref)\n     return newraw.ref;\n }\n \n-std::unique_ptr<Tensor>\n+std::unique_ptr<Value>\n DenseTensorStore::getTensor(EntryRef ref) const\n {\n     if (!ref.valid()) {\n-        return std::unique_ptr<Tensor>();\n+        return std::unique_ptr<Value>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyODQyOnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/tensor/serialized_tensor_attribute.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNjo1MFrOHiC38g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNjo1MFrOHiC38g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDcyMg==", "bodyText": "Consider return {};  instead.", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505460722", "createdAt": "2020-10-15T11:16:50Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/tensor/serialized_tensor_attribute.cpp", "diffHunk": "@@ -34,23 +34,23 @@ SerializedTensorAttribute::~SerializedTensorAttribute()\n }\n \n void\n-SerializedTensorAttribute::setTensor(DocId docId, const Tensor &tensor)\n+SerializedTensorAttribute::setTensor(DocId docId, const vespalib::eval::Value &tensor)\n {\n     checkTensorType(tensor);\n     EntryRef ref = _serializedTensorStore.setTensor(tensor);\n     setTensorRef(docId, ref);\n }\n \n \n-std::unique_ptr<Tensor>\n+std::unique_ptr<Value>\n SerializedTensorAttribute::getTensor(DocId docId) const\n {\n     EntryRef ref;\n     if (docId < getCommittedDocIdLimit()) {\n         ref = _refVector[docId];\n     }\n     if (!ref.valid()) {\n-        return std::unique_ptr<Tensor>();\n+        return std::unique_ptr<Value>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjEyOTc1OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/tensor/serialized_tensor_store.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNzoxOVrOHiC40g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToxNzoxOVrOHiC40g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MDk0Ng==", "bodyText": "Consider return {}; instead.", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505460946", "createdAt": "2020-10-15T11:17:19Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/tensor/serialized_tensor_store.cpp", "diffHunk": "@@ -87,21 +86,21 @@ SerializedTensorStore::move(EntryRef ref)\n     return newraw.ref;\n }\n \n-std::unique_ptr<Tensor>\n+std::unique_ptr<Value>\n SerializedTensorStore::getTensor(EntryRef ref) const\n {\n     auto raw = getRawBuffer(ref);\n     if (raw.second == 0u) {\n-        return std::unique_ptr<Tensor>();\n+        return std::unique_ptr<Value>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08393e9e14635f1c6a6c84650c25023a0db7ed0b"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Njg0NTQ3OnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/queryeval/nearest_neighbor/nearest_neighbor_test.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNDowODozNVrOHiJvOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNDowODozNVrOHiJvOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU3MzE3Nw==", "bodyText": "can probably just return here", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505573177", "createdAt": "2020-10-15T14:08:35Z", "author": {"login": "havardpe"}, "path": "searchlib/src/tests/queryeval/nearest_neighbor/nearest_neighbor_test.cpp", "diffHunk": "@@ -42,7 +42,6 @@ DistanceFunction::UP euclid_f = search::tensor::make_distance_function(DistanceM\n \n std::unique_ptr<Value> createTensor(const TensorSpec &spec) {\n     auto value = EngineOrFactory::get().from_spec(spec);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78c40cb1330fea628684b9aaa8aa993fd70eecc"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Njg1MDM3OnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/features/tensor_from_weighted_set/tensor_from_weighted_set_test.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNDowOTozOVrOHiJyfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNDowOTozOVrOHiJyfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU3NDAxMw==", "bodyText": "can probably just return here using implicit cast operator from std::reference_wrapper<>", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505574013", "createdAt": "2020-10-15T14:09:39Z", "author": {"login": "havardpe"}, "path": "searchlib/src/tests/features/tensor_from_weighted_set/tensor_from_weighted_set_test.cpp", "diffHunk": "@@ -122,7 +121,6 @@ struct ExecFixture\n     }\n     const Value &extractTensor(uint32_t docid) {\n         Value::CREF value = test.resolveObjectFeature(docid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78c40cb1330fea628684b9aaa8aa993fd70eecc"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Njg1MTUwOnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/features/tensor_from_labels/tensor_from_labels_test.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNDowOTo1NVrOHiJzNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNDowOTo1NVrOHiJzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU3NDE5Ng==", "bodyText": "can probably just return here using implicit cast operator from std::reference_wrapper<>", "url": "https://github.com/vespa-engine/vespa/pull/14892#discussion_r505574196", "createdAt": "2020-10-15T14:09:55Z", "author": {"login": "havardpe"}, "path": "searchlib/src/tests/features/tensor_from_labels/tensor_from_labels_test.cpp", "diffHunk": "@@ -123,7 +122,6 @@ struct ExecFixture\n     }\n     const Value &extractTensor(uint32_t docid) {\n         Value::CREF value = test.resolveObjectFeature(docid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78c40cb1330fea628684b9aaa8aa993fd70eecc"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1181, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}