{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyOTE2NTYy", "number": 13146, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoyMDozOFrOD49nnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzozMDo1MFrOD4_SlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDU2NDEyOnYy", "diffSide": "RIGHT", "path": "configdefinitions/src/vespa/stor-filestor.def", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoyMDozOFrOGP9zrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDowMDoyOFrOGQBs7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5NDQ3Nw==", "bodyText": "Typo: thread -> threads", "url": "https://github.com/vespa-engine/vespa/pull/13146#discussion_r419394477", "createdAt": "2020-05-04T12:20:38Z", "author": {"login": "vekterli"}, "path": "configdefinitions/src/vespa/stor-filestor.def", "diffHunk": "@@ -26,6 +26,11 @@ disk_operation_timeout int default=0 restart\n ## Number of threads to use for each mountpoint.\n num_threads int default=8 restart\n \n+## Number of thread for response processing and delivery", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f57ad042b46830003497d2b5e47cd5157fa12054"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1ODI4NQ==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/13146#discussion_r419458285", "createdAt": "2020-05-04T14:00:28Z", "author": {"login": "baldersheim"}, "path": "configdefinitions/src/vespa/stor-filestor.def", "diffHunk": "@@ -26,6 +26,11 @@ disk_operation_timeout int default=0 restart\n ## Number of threads to use for each mountpoint.\n num_threads int default=8 restart\n \n+## Number of thread for response processing and delivery", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5NDQ3Nw=="}, "originalCommit": {"oid": "f57ad042b46830003497d2b5e47cd5157fa12054"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDY0NzEzOnYy", "diffSide": "RIGHT", "path": "storage/src/vespa/storage/persistence/filestorage/filestormanager.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjo0NDo0MlrOGP-mEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDowMzo1MlrOGQB2Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNzM3Nw==", "bodyText": "Is there a container resource constraint-aware config for this that we should prefer to use instead of the raw number of cores on the node itself?", "url": "https://github.com/vespa-engine/vespa/pull/13146#discussion_r419407377", "createdAt": "2020-05-04T12:44:42Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/persistence/filestorage/filestormanager.cpp", "diffHunk": "@@ -88,6 +89,13 @@ FileStorManager::print(std::ostream& out, bool verbose, const std::string& inden\n     out << \"FileStorManager\";\n }\n \n+namespace {\n+\n+uint32_t computeNumResponseThreads(int configured) {\n+    return (configured < 0) ? std::max(1u, std::thread::hardware_concurrency()/4) : configured;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f57ad042b46830003497d2b5e47cd5157fa12054"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2MDYxNA==", "bodyText": "In the hosted solution this number will be controlled by the config model.\nBut I think that a default of -1 will handle it best for non-hosted.\nThis is in line(I think) with how we do it for similar cpu core controlled configs.", "url": "https://github.com/vespa-engine/vespa/pull/13146#discussion_r419460614", "createdAt": "2020-05-04T14:03:52Z", "author": {"login": "baldersheim"}, "path": "storage/src/vespa/storage/persistence/filestorage/filestormanager.cpp", "diffHunk": "@@ -88,6 +89,13 @@ FileStorManager::print(std::ostream& out, bool verbose, const std::string& inden\n     out << \"FileStorManager\";\n }\n \n+namespace {\n+\n+uint32_t computeNumResponseThreads(int configured) {\n+    return (configured < 0) ? std::max(1u, std::thread::hardware_concurrency()/4) : configured;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNzM3Nw=="}, "originalCommit": {"oid": "f57ad042b46830003497d2b5e47cd5157fa12054"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDgzNzk3OnYy", "diffSide": "RIGHT", "path": "storage/src/vespa/storage/persistence/persistencethread.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzozMDo1MFrOGQAZyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDoxMToxNVrOGQCLyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzNzAwMQ==", "bodyText": "tracker->context() should be extracted as own variable before calling putAsync, as eval order is undefined and makeResultTask tries to capture it with a std::move(tracker). Possible to move away tracker before it's dereferenced.", "url": "https://github.com/vespa-engine/vespa/pull/13146#discussion_r419437001", "createdAt": "2020-05-04T13:30:50Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/persistence/persistencethread.cpp", "diffHunk": "@@ -102,9 +176,20 @@ PersistenceThread::handlePut(api::PutCommand& cmd, MessageTracker::UP tracker)\n         return tracker;\n     }\n \n-    spi::Result response = _spi.put(getBucket(cmd.getDocumentId(), cmd.getBucket()),\n-                                    spi::Timestamp(cmd.getTimestamp()), std::move(cmd.getDocument()), tracker->context());\n-    tracker->checkForError(response);\n+    if (_sequencedExecutor == nullptr) {\n+        spi::Result response = _spi.put(getBucket(cmd.getDocumentId(), cmd.getBucket()),\n+                                        spi::Timestamp(cmd.getTimestamp()), std::move(cmd.getDocument()),\n+                                        tracker->context());\n+        tracker->checkForError(response);\n+    } else {\n+        _spi.putAsync(getBucket(cmd.getDocumentId(), cmd.getBucket()), spi::Timestamp(cmd.getTimestamp()),\n+                      std::move(cmd.getDocument()), tracker->context(),\n+                      std::make_unique<ResultTaskOperationDone>(*_sequencedExecutor, cmd.getBucketId(),\n+                              makeResultTask([tracker = std::move(tracker)](spi::Result::UP response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f57ad042b46830003497d2b5e47cd5157fa12054"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ2NjE4NA==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/13146#discussion_r419466184", "createdAt": "2020-05-04T14:11:15Z", "author": {"login": "baldersheim"}, "path": "storage/src/vespa/storage/persistence/persistencethread.cpp", "diffHunk": "@@ -102,9 +176,20 @@ PersistenceThread::handlePut(api::PutCommand& cmd, MessageTracker::UP tracker)\n         return tracker;\n     }\n \n-    spi::Result response = _spi.put(getBucket(cmd.getDocumentId(), cmd.getBucket()),\n-                                    spi::Timestamp(cmd.getTimestamp()), std::move(cmd.getDocument()), tracker->context());\n-    tracker->checkForError(response);\n+    if (_sequencedExecutor == nullptr) {\n+        spi::Result response = _spi.put(getBucket(cmd.getDocumentId(), cmd.getBucket()),\n+                                        spi::Timestamp(cmd.getTimestamp()), std::move(cmd.getDocument()),\n+                                        tracker->context());\n+        tracker->checkForError(response);\n+    } else {\n+        _spi.putAsync(getBucket(cmd.getDocumentId(), cmd.getBucket()), spi::Timestamp(cmd.getTimestamp()),\n+                      std::move(cmd.getDocument()), tracker->context(),\n+                      std::make_unique<ResultTaskOperationDone>(*_sequencedExecutor, cmd.getBucketId(),\n+                              makeResultTask([tracker = std::move(tracker)](spi::Result::UP response) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzNzAwMQ=="}, "originalCommit": {"oid": "f57ad042b46830003497d2b5e47cd5157fa12054"}, "originalPosition": 114}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1698, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}