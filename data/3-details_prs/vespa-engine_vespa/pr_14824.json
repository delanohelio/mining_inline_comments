{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNjgxNjIy", "number": 14824, "title": "Use MonitorGuard -> std::mutex/std::condition_variable and signal wit\u2026", "bodyText": "\u2026hout holding lock.\n@vekterli or @toregge or @geirst PR", "createdAt": "2020-10-12T16:25:19Z", "url": "https://github.com/vespa-engine/vespa/pull/14824", "merged": true, "mergeCommit": {"oid": "9886120a1bddd1016466cec317a445cd37650bff"}, "closed": true, "closedAt": "2020-10-12T17:23:37Z", "author": {"login": "baldersheim"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdR2fVlgH2gAyNTAxNjgxNjIyOjFlYzU5OTZkYjI3YzQ0ZWQyYjljMTBjOTlkZmFkZDViNjQ0MWNhNjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdR3pS_AFqTUwNjgwNjU0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1ec5996db27c44ed2b9c10c99dfadd5b6441ca60", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/1ec5996db27c44ed2b9c10c99dfadd5b6441ca60", "committedDate": "2020-10-12T16:23:03Z", "message": "Use MonitorGuard -> std::mutex/std::condition_variable and signal without holding lock."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NzgxODE0", "url": "https://github.com/vespa-engine/vespa/pull/14824#pullrequestreview-506781814", "createdAt": "2020-10-12T16:58:29Z", "commit": {"oid": "1ec5996db27c44ed2b9c10c99dfadd5b6441ca60"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2ODA2NTQ5", "url": "https://github.com/vespa-engine/vespa/pull/14824#pullrequestreview-506806549", "createdAt": "2020-10-12T17:42:13Z", "commit": {"oid": "1ec5996db27c44ed2b9c10c99dfadd5b6441ca60"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzo0MjoxM1rOHgHtOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzo0MjoxM1rOHgHtOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0Mjc0NQ==", "bodyText": "Out of curiosity, why the added indirection?", "url": "https://github.com/vespa-engine/vespa/pull/14824#discussion_r503442745", "createdAt": "2020-10-12T17:42:13Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/persistence/filestorage/filestorhandlerimpl.h", "diffHunk": "@@ -109,47 +110,47 @@ class FileStorHandlerImpl : private framework::MetricUpdateHook,\n         void waitInactive(const AbortBucketOperationsCommand& cmd) const;\n \n         void broadcast() {\n-            vespalib::MonitorGuard guard(_lock);\n-            guard.broadcast();\n+            _cond->notify_all();\n         }\n         size_t getQueueSize() const {\n-            vespalib::MonitorGuard guard(_lock);\n+            std::lock_guard guard(*_lock);\n             return _queue->size();\n         }\n         void release(const document::Bucket & bucket, api::LockingRequirements reqOfReleasedLock,\n                      api::StorageMessage::Id lockMsgId);\n \n         // Subsumes isLocked\n-        bool operationIsInhibited(const vespalib::MonitorGuard&, const document::Bucket&,\n+        bool operationIsInhibited(const monitor_guard &, const document::Bucket&,\n                                   const api::StorageMessage&) const noexcept;\n-        bool isLocked(const vespalib::MonitorGuard &, const document::Bucket&,\n+        bool isLocked(const monitor_guard &, const document::Bucket&,\n                       api::LockingRequirements lockReq) const noexcept;\n \n-        void lock(const vespalib::MonitorGuard &, const document::Bucket & bucket,\n+        void lock(const monitor_guard &, const document::Bucket & bucket,\n                   api::LockingRequirements lockReq, const LockEntry & lockEntry);\n \n         std::shared_ptr<FileStorHandler::BucketLockInterface> lock(const document::Bucket & bucket, api::LockingRequirements lockReq);\n         void failOperations(const document::Bucket & bucket, const api::ReturnCode & code);\n \n-        FileStorHandler::LockedMessage getNextMessage(uint32_t timeout, Disk & disk);\n+        FileStorHandler::LockedMessage getNextMessage(vespalib::duration timeout, Disk & disk);\n         void dumpQueue(std::ostream & os) const;\n         void dumpActiveHtml(std::ostream & os) const;\n         void dumpQueueHtml(std::ostream & os) const;\n-        vespalib::Monitor & exposeLock() { return _lock; }\n+        std::mutex & exposeLock() { return *_lock; }\n         PriorityQueue & exposeQueue() { return *_queue; }\n         BucketIdx & exposeBucketIdx() { return bmi::get<2>(*_queue); }\n         void setMetrics(FileStorStripeMetrics * metrics) { _metrics = metrics; }\n     private:\n-        bool hasActive(vespalib::MonitorGuard & monitor, const AbortBucketOperationsCommand& cmd) const;\n+        bool hasActive(monitor_guard & monitor, const AbortBucketOperationsCommand& cmd) const;\n         // Precondition: the bucket used by `iter`s operation is not locked in a way that conflicts\n         // with its locking requirements.\n-        FileStorHandler::LockedMessage getMessage(vespalib::MonitorGuard & guard, PriorityIdx & idx,\n+        FileStorHandler::LockedMessage getMessage(monitor_guard & guard, PriorityIdx & idx,\n                                                   PriorityIdx::iterator iter);\n         using LockedBuckets = vespalib::hash_map<document::Bucket, MultiLockEntry, document::Bucket::hash>;\n         const FileStorHandlerImpl      &_owner;\n         MessageSender                  &_messageSender;\n         FileStorStripeMetrics          *_metrics;\n-        vespalib::Monitor               _lock;\n+        std::unique_ptr<std::mutex>                _lock;\n+        std::unique_ptr<std::condition_variable>   _cond;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec5996db27c44ed2b9c10c99dfadd5b6441ca60"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2344, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}