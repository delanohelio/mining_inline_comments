{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1MzAzMjgz", "number": 11872, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNDowOTo1NVrODZgRNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNDowOTo1NVrODZgRNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDY5Njg1OnYy", "diffSide": "RIGHT", "path": "configserver/src/main/java/com/yahoo/vespa/config/server/ApplicationRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNDowOTo1NVrOFf7QpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMTo1NDozNFrOFgKEbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAyMTA5Mg==", "bodyText": "I think this will still fail for the case we looked at earlier today (where getOptionalApplication is the method that throws, but it isn't called until forEach evaluates the stream calls).\nHow about rewriting it to a regular loop and wrap everything except listApplications in a try-catch?\nfor (var application : listApplications()) {\n    try {\n      ...\n    } catch (Exception e) {\n      ...\n    }\n}", "url": "https://github.com/vespa-engine/vespa/pull/11872#discussion_r369021092", "createdAt": "2020-01-21T14:09:55Z", "author": {"login": "mpolden"}, "path": "configserver/src/main/java/com/yahoo/vespa/config/server/ApplicationRepository.java", "diffHunk": "@@ -426,12 +426,19 @@ public HttpResponse filedistributionStatus(ApplicationId applicationId, Duration\n \n         Set<String> fileReferencesInUse = new HashSet<>();\n         // Intentionally skip applications that we for some reason do not find\n+        // or that we fail to get file references for (they will be retried on the next run)\n         listApplications().stream()\n                 .map(this::getOptionalApplication)\n                 .map(Optional::get)\n-                .forEach(application -> fileReferencesInUse.addAll(application.getModel().fileReferences().stream()\n-                                                                           .map(FileReference::value)\n-                                                                           .collect(Collectors.toSet())));\n+                .forEach(application -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fbace7e7541d3511c2962c6b1aed4c8ad51c7a4"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI2MzcyNQ==", "bodyText": "Yes, thanks, done.", "url": "https://github.com/vespa-engine/vespa/pull/11872#discussion_r369263725", "createdAt": "2020-01-21T21:54:34Z", "author": {"login": "hmusum"}, "path": "configserver/src/main/java/com/yahoo/vespa/config/server/ApplicationRepository.java", "diffHunk": "@@ -426,12 +426,19 @@ public HttpResponse filedistributionStatus(ApplicationId applicationId, Duration\n \n         Set<String> fileReferencesInUse = new HashSet<>();\n         // Intentionally skip applications that we for some reason do not find\n+        // or that we fail to get file references for (they will be retried on the next run)\n         listApplications().stream()\n                 .map(this::getOptionalApplication)\n                 .map(Optional::get)\n-                .forEach(application -> fileReferencesInUse.addAll(application.getModel().fileReferences().stream()\n-                                                                           .map(FileReference::value)\n-                                                                           .collect(Collectors.toSet())));\n+                .forEach(application -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAyMTA5Mg=="}, "originalCommit": {"oid": "8fbace7e7541d3511c2962c6b1aed4c8ad51c7a4"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2600, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}