{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNjg4OTcw", "number": 13569, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMzo0OToyM1rOEFELjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNDowMjoyOVrOEFEfhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzQ2ODI4OnYy", "diffSide": "RIGHT", "path": "container-core/src/main/java/com/yahoo/container/handler/LogReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMzo0OToyM1rOGjEp1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMzo0OToyM1rOGjEp1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQyOTU5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    System.err.println(logsByTimestamp);", "url": "https://github.com/vespa-engine/vespa/pull/13569#discussion_r439429590", "createdAt": "2020-06-12T13:49:23Z", "author": {"login": "jonmv"}, "path": "container-core/src/main/java/com/yahoo/container/handler/LogReader.java", "diffHunk": "@@ -127,15 +134,53 @@ public FileVisitResult postVisitDirectory(Path dir, IOException exc) {\n             throw new UncheckedIOException(e);\n         }\n \n-        List<Path> sorted = new ArrayList<>();\n-        for (var entries = paths.entrySet().stream().sorted(comparing(Map.Entry::getValue)).iterator(); entries.hasNext(); ) {\n-            var entry = entries.next();\n-            if (entry.getValue().isAfter(from))\n-                sorted.add(entry.getKey());\n-            if (entry.getValue().isAfter(to))\n+        var logsByTimestamp = paths.stream()\n+                                   .collect(Collectors.groupingBy(this::extractTimestamp,\n+                                                                  TreeMap::new,\n+                                                                  Collectors.toList()));\n+        System.err.println(logsByTimestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a36842785c919e626fcb3665e8be9d4a9df31a6"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzQ3MzAwOnYy", "diffSide": "RIGHT", "path": "container-core/src/main/java/com/yahoo/container/handler/LogReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMzo1MDozOFrOGjEsyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMzo1MDozOFrOGjEsyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQzMDM0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                Integer.parseInt(matcher.group(6)) + 1, // timestamp is that of the last entry, with seconds truncated\n          \n          \n            \n                                                Integer.parseInt(matcher.group(6)) + 1, // timestamp is that of the last entry, truncated to second accuracy", "url": "https://github.com/vespa-engine/vespa/pull/13569#discussion_r439430347", "createdAt": "2020-06-12T13:50:38Z", "author": {"login": "jonmv"}, "path": "container-core/src/main/java/com/yahoo/container/handler/LogReader.java", "diffHunk": "@@ -127,15 +134,52 @@ public FileVisitResult postVisitDirectory(Path dir, IOException exc) {\n             throw new UncheckedIOException(e);\n         }\n \n-        List<Path> sorted = new ArrayList<>();\n-        for (var entries = paths.entrySet().stream().sorted(comparing(Map.Entry::getValue)).iterator(); entries.hasNext(); ) {\n-            var entry = entries.next();\n-            if (entry.getValue().isAfter(from))\n-                sorted.add(entry.getKey());\n-            if (entry.getValue().isAfter(to))\n+        var logsByTimestamp = paths.stream()\n+                                   .collect(Collectors.groupingBy(this::extractTimestamp,\n+                                                                  TreeMap::new,\n+                                                                  Collectors.toList()));\n+\n+        List<List<Path>> sorted = new ArrayList<>();\n+        for (var entry : logsByTimestamp.entrySet()) {\n+            if (entry.getKey().isAfter(from))\n+                sorted.add(entry.getValue());\n+            if (entry.getKey().isAfter(to))\n                 break;\n         }\n         return sorted;\n     }\n \n+    /** Extracts a timestamp after all entries in the log file with the given path. */\n+    Instant extractTimestamp(Path path) {\n+        String relativePath = logDirectory.relativize(path).toString();\n+        Matcher matcher = logArchivePathPattern.matcher(relativePath);\n+        if (matcher.matches()) {\n+            return ZonedDateTime.of(Integer.parseInt(matcher.group(1)),\n+                                    Integer.parseInt(matcher.group(2)),\n+                                    Integer.parseInt(matcher.group(3)),\n+                                    Integer.parseInt(matcher.group(4)) + 1, // timestamp is start of hour range of the log file\n+                                    0,\n+                                    0,\n+                                    0,\n+                                    ZoneId.of(\"UTC\"))\n+                                .toInstant();\n+        }\n+        matcher = vespaLogPathPattern.matcher(relativePath);\n+        if (matcher.matches()) {\n+            if (matcher.group(1) == null)\n+                return Instant.MAX;\n+\n+            return ZonedDateTime.of(Integer.parseInt(matcher.group(1)),\n+                                    Integer.parseInt(matcher.group(2)),\n+                                    Integer.parseInt(matcher.group(3)),\n+                                    Integer.parseInt(matcher.group(4)),\n+                                    Integer.parseInt(matcher.group(5)),\n+                                    Integer.parseInt(matcher.group(6)) + 1, // timestamp is that of the last entry, with seconds truncated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2ec1bd2e5007fa8b67a21f9a5f1e4c0e6eee4fd"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzUxOTQwOnYy", "diffSide": "RIGHT", "path": "container-core/src/main/java/com/yahoo/container/handler/LogReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNDowMjoyOVrOGjFKfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNDowMjoyOVrOGjFKfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQzNzk0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                static final Pattern logArchivePathPattern = Pattern.compile(\"(\\\\d{4})/(\\\\d{2})/(\\\\d{2})/(\\\\d{2})-\\\\d(.gz)?\");\n          \n          \n            \n                static final Pattern logArchivePathPattern = Pattern.compile(\"(\\\\d{4})/(\\\\d{2})/(\\\\d{2})/(\\\\d{2})-\\\\d+(.gz)?\");", "url": "https://github.com/vespa-engine/vespa/pull/13569#discussion_r439437948", "createdAt": "2020-06-12T14:02:29Z", "author": {"login": "jonmv"}, "path": "container-core/src/main/java/com/yahoo/container/handler/LogReader.java", "diffHunk": "@@ -39,6 +41,9 @@\n  */\n class LogReader {\n \n+    static final Pattern logArchivePathPattern = Pattern.compile(\"(\\\\d{4})/(\\\\d{2})/(\\\\d{2})/(\\\\d{2})-\\\\d(.gz)?\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6979d980148739185c8745f03ff20406fceb463"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1928, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}