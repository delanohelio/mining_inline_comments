{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4NDM0MDg4", "number": 14056, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMDoyNjo1OFrOEY_PKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMDozMDowMFrOEY_TnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NjM3MzU0OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/common/locationiterators.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMDoyNjo1OFrOHBjIlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNDoxODoyNlrOHBqu-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM4NjI2Mg==", "bodyText": "consider while loop for more robustness", "url": "https://github.com/vespa-engine/vespa/pull/14056#discussion_r471386262", "createdAt": "2020-08-17T10:26:58Z", "author": {"login": "havardpe"}, "path": "searchlib/src/vespa/searchlib/common/locationiterators.cpp", "diffHunk": "@@ -7,6 +7,106 @@\n #include <vespa/log/log.h>\n LOG_SETUP(\".searchlib.common.locationiterators\");\n \n+namespace search::common {\n+\n+class LocationIterator : public search::queryeval::SearchIterator\n+{\n+private:\n+    static constexpr double pi = 3.14159265358979323846;\n+    // microdegrees -> degrees -> radians -> km (using Earth mean radius)\n+    static constexpr double udeg_to_km = 1.0e-6 * (pi / 180.0) * 6371.0088;\n+    search::fef::TermFieldMatchData & _tfmd;\n+    const unsigned int _numDocs;\n+    const bool         _strict;\n+    const Location &   _location;\n+    std::vector<search::AttributeVector::largeint_t> _pos;\n+\n+    void doSeek(uint32_t docId) override;\n+    void doUnpack(uint32_t docId) override;\n+public:\n+    LocationIterator(search::fef::TermFieldMatchData &tfmd,\n+                     unsigned int numDocs,\n+                     bool strict,\n+                     const Location & location);\n+    ~LocationIterator() override;\n+};\n+\n+LocationIterator::LocationIterator(search::fef::TermFieldMatchData &tfmd,\n+                                   unsigned int numDocs,\n+                                   bool strict,\n+                                   const Location & location)\n+  : SearchIterator(),\n+    _tfmd(tfmd),\n+    _numDocs(numDocs),\n+    _strict(strict),\n+    _location(location),\n+    _pos()\n+{\n+    _pos.resize(1);  //Need at least 1 entry as the singlevalue attributes does not honour given size.\n+    LOG(debug, \"created LocationIterator(numDocs=%u)\\n\", numDocs);\n+};\n+\n+\n+LocationIterator::~LocationIterator() = default;\n+\n+void\n+LocationIterator::doSeek(uint32_t docId)\n+{\n+    while (__builtin_expect(docId < getEndId(), true)) {\n+        if (__builtin_expect(docId >= _numDocs, false)) {\n+            break;\n+        }\n+        uint32_t numValues = _location.getVec()->get(docId, &_pos[0], _pos.size());\n+        if (numValues > _pos.size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd5676ce345feecf1bbc04b962954b26e84a03e1"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUxMDc3OQ==", "bodyText": "done.", "url": "https://github.com/vespa-engine/vespa/pull/14056#discussion_r471510779", "createdAt": "2020-08-17T14:18:26Z", "author": {"login": "arnej27959"}, "path": "searchlib/src/vespa/searchlib/common/locationiterators.cpp", "diffHunk": "@@ -7,6 +7,106 @@\n #include <vespa/log/log.h>\n LOG_SETUP(\".searchlib.common.locationiterators\");\n \n+namespace search::common {\n+\n+class LocationIterator : public search::queryeval::SearchIterator\n+{\n+private:\n+    static constexpr double pi = 3.14159265358979323846;\n+    // microdegrees -> degrees -> radians -> km (using Earth mean radius)\n+    static constexpr double udeg_to_km = 1.0e-6 * (pi / 180.0) * 6371.0088;\n+    search::fef::TermFieldMatchData & _tfmd;\n+    const unsigned int _numDocs;\n+    const bool         _strict;\n+    const Location &   _location;\n+    std::vector<search::AttributeVector::largeint_t> _pos;\n+\n+    void doSeek(uint32_t docId) override;\n+    void doUnpack(uint32_t docId) override;\n+public:\n+    LocationIterator(search::fef::TermFieldMatchData &tfmd,\n+                     unsigned int numDocs,\n+                     bool strict,\n+                     const Location & location);\n+    ~LocationIterator() override;\n+};\n+\n+LocationIterator::LocationIterator(search::fef::TermFieldMatchData &tfmd,\n+                                   unsigned int numDocs,\n+                                   bool strict,\n+                                   const Location & location)\n+  : SearchIterator(),\n+    _tfmd(tfmd),\n+    _numDocs(numDocs),\n+    _strict(strict),\n+    _location(location),\n+    _pos()\n+{\n+    _pos.resize(1);  //Need at least 1 entry as the singlevalue attributes does not honour given size.\n+    LOG(debug, \"created LocationIterator(numDocs=%u)\\n\", numDocs);\n+};\n+\n+\n+LocationIterator::~LocationIterator() = default;\n+\n+void\n+LocationIterator::doSeek(uint32_t docId)\n+{\n+    while (__builtin_expect(docId < getEndId(), true)) {\n+        if (__builtin_expect(docId >= _numDocs, false)) {\n+            break;\n+        }\n+        uint32_t numValues = _location.getVec()->get(docId, &_pos[0], _pos.size());\n+        if (numValues > _pos.size()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM4NjI2Mg=="}, "originalCommit": {"oid": "bd5676ce345feecf1bbc04b962954b26e84a03e1"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NjM4NDkzOnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/common/locationiterators.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMDozMDowMVrOHBjO8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNDoxODozM1rOHBqvNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM4Nzg4OQ==", "bodyText": "should probably use already fetched values here", "url": "https://github.com/vespa-engine/vespa/pull/14056#discussion_r471387889", "createdAt": "2020-08-17T10:30:01Z", "author": {"login": "havardpe"}, "path": "searchlib/src/vespa/searchlib/common/locationiterators.cpp", "diffHunk": "@@ -7,6 +7,106 @@\n #include <vespa/log/log.h>\n LOG_SETUP(\".searchlib.common.locationiterators\");\n \n+namespace search::common {\n+\n+class LocationIterator : public search::queryeval::SearchIterator\n+{\n+private:\n+    static constexpr double pi = 3.14159265358979323846;\n+    // microdegrees -> degrees -> radians -> km (using Earth mean radius)\n+    static constexpr double udeg_to_km = 1.0e-6 * (pi / 180.0) * 6371.0088;\n+    search::fef::TermFieldMatchData & _tfmd;\n+    const unsigned int _numDocs;\n+    const bool         _strict;\n+    const Location &   _location;\n+    std::vector<search::AttributeVector::largeint_t> _pos;\n+\n+    void doSeek(uint32_t docId) override;\n+    void doUnpack(uint32_t docId) override;\n+public:\n+    LocationIterator(search::fef::TermFieldMatchData &tfmd,\n+                     unsigned int numDocs,\n+                     bool strict,\n+                     const Location & location);\n+    ~LocationIterator() override;\n+};\n+\n+LocationIterator::LocationIterator(search::fef::TermFieldMatchData &tfmd,\n+                                   unsigned int numDocs,\n+                                   bool strict,\n+                                   const Location & location)\n+  : SearchIterator(),\n+    _tfmd(tfmd),\n+    _numDocs(numDocs),\n+    _strict(strict),\n+    _location(location),\n+    _pos()\n+{\n+    _pos.resize(1);  //Need at least 1 entry as the singlevalue attributes does not honour given size.\n+    LOG(debug, \"created LocationIterator(numDocs=%u)\\n\", numDocs);\n+};\n+\n+\n+LocationIterator::~LocationIterator() = default;\n+\n+void\n+LocationIterator::doSeek(uint32_t docId)\n+{\n+    while (__builtin_expect(docId < getEndId(), true)) {\n+        if (__builtin_expect(docId >= _numDocs, false)) {\n+            break;\n+        }\n+        uint32_t numValues = _location.getVec()->get(docId, &_pos[0], _pos.size());\n+        if (numValues > _pos.size()) {\n+            _pos.resize(numValues);\n+            numValues = _location.getVec()->get(docId, &_pos[0], _pos.size());\n+        }\n+        for (uint32_t i = 0; i < numValues; i++) {\n+            int64_t docxy(_pos[i]);\n+            if (_location.inside_limit(docxy)) {\n+                setDocId(docId);\n+                return;\n+            }\n+        }\n+        if (!_strict) {\n+            return;\n+        }\n+        ++docId;\n+    }\n+    setAtEnd();\n+}\n+\n+void\n+LocationIterator::doUnpack(uint32_t docId)\n+{\n+    uint64_t sqabsdist = std::numeric_limits<uint64_t>::max();\n+    int32_t docx = 0;\n+    int32_t docy = 0;\n+    uint32_t numValues = _location.getVec()->get(docId, &_pos[0], _pos.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd5676ce345feecf1bbc04b962954b26e84a03e1"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUxMDgzOA==", "bodyText": "fixed.", "url": "https://github.com/vespa-engine/vespa/pull/14056#discussion_r471510838", "createdAt": "2020-08-17T14:18:33Z", "author": {"login": "arnej27959"}, "path": "searchlib/src/vespa/searchlib/common/locationiterators.cpp", "diffHunk": "@@ -7,6 +7,106 @@\n #include <vespa/log/log.h>\n LOG_SETUP(\".searchlib.common.locationiterators\");\n \n+namespace search::common {\n+\n+class LocationIterator : public search::queryeval::SearchIterator\n+{\n+private:\n+    static constexpr double pi = 3.14159265358979323846;\n+    // microdegrees -> degrees -> radians -> km (using Earth mean radius)\n+    static constexpr double udeg_to_km = 1.0e-6 * (pi / 180.0) * 6371.0088;\n+    search::fef::TermFieldMatchData & _tfmd;\n+    const unsigned int _numDocs;\n+    const bool         _strict;\n+    const Location &   _location;\n+    std::vector<search::AttributeVector::largeint_t> _pos;\n+\n+    void doSeek(uint32_t docId) override;\n+    void doUnpack(uint32_t docId) override;\n+public:\n+    LocationIterator(search::fef::TermFieldMatchData &tfmd,\n+                     unsigned int numDocs,\n+                     bool strict,\n+                     const Location & location);\n+    ~LocationIterator() override;\n+};\n+\n+LocationIterator::LocationIterator(search::fef::TermFieldMatchData &tfmd,\n+                                   unsigned int numDocs,\n+                                   bool strict,\n+                                   const Location & location)\n+  : SearchIterator(),\n+    _tfmd(tfmd),\n+    _numDocs(numDocs),\n+    _strict(strict),\n+    _location(location),\n+    _pos()\n+{\n+    _pos.resize(1);  //Need at least 1 entry as the singlevalue attributes does not honour given size.\n+    LOG(debug, \"created LocationIterator(numDocs=%u)\\n\", numDocs);\n+};\n+\n+\n+LocationIterator::~LocationIterator() = default;\n+\n+void\n+LocationIterator::doSeek(uint32_t docId)\n+{\n+    while (__builtin_expect(docId < getEndId(), true)) {\n+        if (__builtin_expect(docId >= _numDocs, false)) {\n+            break;\n+        }\n+        uint32_t numValues = _location.getVec()->get(docId, &_pos[0], _pos.size());\n+        if (numValues > _pos.size()) {\n+            _pos.resize(numValues);\n+            numValues = _location.getVec()->get(docId, &_pos[0], _pos.size());\n+        }\n+        for (uint32_t i = 0; i < numValues; i++) {\n+            int64_t docxy(_pos[i]);\n+            if (_location.inside_limit(docxy)) {\n+                setDocId(docId);\n+                return;\n+            }\n+        }\n+        if (!_strict) {\n+            return;\n+        }\n+        ++docId;\n+    }\n+    setAtEnd();\n+}\n+\n+void\n+LocationIterator::doUnpack(uint32_t docId)\n+{\n+    uint64_t sqabsdist = std::numeric_limits<uint64_t>::max();\n+    int32_t docx = 0;\n+    int32_t docy = 0;\n+    uint32_t numValues = _location.getVec()->get(docId, &_pos[0], _pos.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM4Nzg4OQ=="}, "originalCommit": {"oid": "bd5676ce345feecf1bbc04b962954b26e84a03e1"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1520, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}