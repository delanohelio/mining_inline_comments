{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1Mzk2MDQy", "number": 14634, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzoyMToyNFrOEpeMfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzozNjo0NFrOEpenPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTIxNzkwOnYy", "diffSide": "RIGHT", "path": "vespaclient-container-plugin/src/test/java/com/yahoo/document/restapi/resource/DocumentV1ApiTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzoyMToyNFrOHbKFYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzo1NDoxM1rOHbLhWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIzODgxOQ==", "bodyText": "Use the JSON assert helper in testutils", "url": "https://github.com/vespa-engine/vespa/pull/14634#discussion_r498238819", "createdAt": "2020-10-01T13:21:24Z", "author": {"login": "bjorncs"}, "path": "vespaclient-container-plugin/src/test/java/com/yahoo/document/restapi/resource/DocumentV1ApiTest.java", "diffHunk": "@@ -0,0 +1,277 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.document.restapi.resource;\n+\n+import com.yahoo.container.jdisc.RequestHandlerTestDriver;\n+import com.yahoo.docproc.jdisc.metric.NullMetric;\n+import com.yahoo.document.Document;\n+import com.yahoo.document.DocumentGet;\n+import com.yahoo.document.DocumentPut;\n+import com.yahoo.document.DocumentRemove;\n+import com.yahoo.document.DocumentType;\n+import com.yahoo.document.DocumentTypeManager;\n+import com.yahoo.document.DocumentUpdate;\n+import com.yahoo.document.TestAndSetCondition;\n+import com.yahoo.document.config.DocumentmanagerConfig;\n+import com.yahoo.document.datatypes.StringFieldValue;\n+import com.yahoo.document.restapi.DocumentOperationExecutor;\n+import com.yahoo.document.restapi.DocumentOperationExecutor.Group;\n+import com.yahoo.document.restapi.DocumentOperationExecutor.VisitorOptions;\n+import com.yahoo.document.restapi.DocumentOperationExecutorMock;\n+import com.yahoo.document.restapi.resource.DocumentV1ApiHandler.DocumentOperationParser;\n+import com.yahoo.document.update.FieldUpdate;\n+import com.yahoo.documentapi.DocumentAccessParams;\n+import com.yahoo.documentapi.local.LocalDocumentAccess;\n+import com.yahoo.jdisc.Metric;\n+import com.yahoo.jdisc.http.HttpRequest;\n+import com.yahoo.metrics.simple.MetricReceiver;\n+import com.yahoo.prelude.fastsearch.StringField;\n+import com.yahoo.searchdefinition.derived.Deriver;\n+import com.yahoo.slime.JsonFormat;\n+import com.yahoo.slime.SlimeUtils;\n+import com.yahoo.test.ManualClock;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Optional;\n+\n+import static com.yahoo.document.restapi.DocumentOperationExecutor.ErrorType.BAD_REQUEST;\n+import static com.yahoo.document.restapi.DocumentOperationExecutor.ErrorType.ERROR;\n+import static com.yahoo.documentapi.DocumentOperationParameters.parameters;\n+import static com.yahoo.jdisc.http.HttpRequest.Method.DELETE;\n+import static com.yahoo.jdisc.http.HttpRequest.Method.POST;\n+import static com.yahoo.jdisc.http.HttpRequest.Method.PUT;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * @author jonmv\n+ */\n+public class DocumentV1ApiTest {\n+\n+    final DocumentmanagerConfig docConfig = Deriver.getDocumentManagerConfig(\"src/test/cfg/music.sd\").build();\n+    final DocumentTypeManager manager = new DocumentTypeManager(docConfig);\n+    final Document doc1 = new Document(manager.getDocumentType(\"music\"), \"id:space:music::one\");\n+    final Document doc2 = new Document(manager.getDocumentType(\"music\"), \"id:space:music:n=1:two\");\n+    final Document doc3 = new Document(manager.getDocumentType(\"music\"), \"id:space:music:g=a:three\");\n+    {\n+        doc1.setFieldValue(\"artist\", \"Tom Waits\");\n+        doc2.setFieldValue(\"artist\", \"Asa-Chan & Jun-Ray\");\n+    }\n+\n+    ManualClock clock;\n+    DocumentOperationParser parser;\n+    LocalDocumentAccess access;\n+    DocumentOperationExecutorMock executor;\n+    Metric metric;\n+    MetricReceiver metrics;\n+    DocumentV1ApiHandler handler;\n+\n+    @Before\n+    public void setUp() {\n+        clock = new ManualClock();\n+        parser = new DocumentOperationParser(docConfig);\n+        access = new LocalDocumentAccess(new DocumentAccessParams().setDocumentmanagerConfig(docConfig));\n+        executor = new DocumentOperationExecutorMock();\n+        metric = new NullMetric();\n+        metrics = new MetricReceiver.MockReceiver();\n+        handler = new DocumentV1ApiHandler(clock, executor, parser, metric, metrics);\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        handler.destroy();\n+    }\n+\n+    @Test\n+    public void testResponses() {\n+        try (RequestHandlerTestDriver driver = new RequestHandlerTestDriver(handler)) {\n+            // GET at non-existent path returns 404 with available paths\n+            var response = driver.sendRequest(\"http://localhost/document/v1/not-found\");\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1/not-found\\\",\" +\n+                           \"  \\\"message\\\": \\\"Nothing at '/document/v1/not-found'. Available paths are:\\\\n\" +\n+                                                   \"/document/v1/\\\\n\" +\n+                                                   \"/document/v1/{namespace}/{documentType}/docid/\\\\n\" +\n+                                                   \"/document/v1/{namespace}/{documentType}/group/{group}/\\\\n\" +\n+                                                   \"/document/v1/{namespace}/{documentType}/number/{number}/\\\\n\" +\n+                                                   \"/document/v1/{namespace}/{documentType}/docid/{docid}\\\\n\" +\n+                                                   \"/document/v1/{namespace}/{documentType}/group/{group}/{docid}\\\\n\" +\n+                                                   \"/document/v1/{namespace}/{documentType}/number/{number}/{docid}\\\"\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(\"application/json; charset=UTF-8\", response.getResponse().headers().getFirst(\"Content-Type\"));\n+            assertEquals(404, response.getStatus());\n+\n+            // GET at root is a visit. Numeric parameters have an upper bound.\n+            response = driver.sendRequest(\"http://localhost/document/v1?cluster=lackluster&bucketSpace=default&wantedDocumentCount=1025&concurrency=123\" +\n+                                          \"&selection=all%20the%20things&fieldSet=[id]&continuation=token\");\n+            executor.lastVisitContext().document(doc1);\n+            executor.lastVisitContext().document(doc2);\n+            executor.lastVisitContext().document(doc3);\n+            executor.lastVisitContext().success(Optional.of(\"token\"));\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1\\\",\" +\n+                           \"  \\\"documents\\\": [\" +\n+                           \"    {\" +\n+                           \"      \\\"id\\\": \\\"id:space:music::one\\\",\" +\n+                           \"      \\\"fields\\\": {\" +\n+                           \"        \\\"artist\\\": \\\"Tom Waits\\\"\" +\n+                           \"      }\" +\n+                           \"    },\" +\n+                           \"    {\" +\n+                           \"      \\\"id\\\": \\\"id:space:music:n=1:two\\\",\" +\n+                           \"      \\\"fields\\\": {\" +\n+                           \"        \\\"artist\\\": \\\"Asa-Chan & Jun-Ray\\\"\" +\n+                           \"      }\" +\n+                           \"    },\" +\n+                           \"    {\" +\n+                           \"     \\\"id\\\": \\\"id:space:music:g=a:three\\\",\" +\n+                           \"     \\\"fields\\\": {}\" +\n+                           \"    }\" +\n+                           \"  ],\" +\n+                           \"  \\\"continuation\\\": \\\"token\\\"\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(200, response.getStatus());\n+            assertEquals(VisitorOptions.builder().cluster(\"lackluster\").bucketSpace(\"default\").wantedDocumentCount(1024)\n+                                       .concurrency(100).selection(\"all the things\").fieldSet(\"[id]\").continuation(\"token\").build(),\n+                         executor.lastOptions());\n+\n+            // GET with namespace and document type is a restricted visit.\n+            response = driver.sendRequest(\"http://localhost/document/v1/space/music/docid\");\n+            executor.lastVisitContext().error(BAD_REQUEST, \"nope\");\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1/space/music/docid\\\",\" +\n+                           \"  \\\"documents\\\": [],\" +\n+                           \"  \\\"message\\\": \\\"nope\\\"\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(400, response.getStatus());\n+            assertEquals(VisitorOptions.builder().namespace(\"space\").documentType(\"music\").build(),\n+                         executor.lastOptions());\n+\n+            // GET with namespace, document type and group is a restricted visit.\n+            response = driver.sendRequest(\"http://localhost/document/v1/space/music/group/best\");\n+            executor.lastVisitContext().error(ERROR, \"error\");\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1/space/music/group/best\\\",\" +\n+                           \"  \\\"documents\\\": [],\" +\n+                           \"  \\\"message\\\": \\\"error\\\"\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(500, response.getStatus());\n+            assertEquals(VisitorOptions.builder().namespace(\"space\").documentType(\"music\").group(Group.of(\"best\")).build(),\n+                         executor.lastOptions());\n+\n+            // GET with namespace, document type and number is a restricted visit.\n+            response = driver.sendRequest(\"http://localhost/document/v1/space/music/number/123\");\n+            executor.lastVisitContext().success(Optional.empty());\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1/space/music/number/123\\\",\" +\n+                           \"  \\\"documents\\\": []\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(200, response.getStatus());\n+            assertEquals(VisitorOptions.builder().namespace(\"space\").documentType(\"music\").group(Group.of(123)).build(),\n+                         executor.lastOptions());\n+\n+            // GET with full document ID is a document get operation which returns 404 when no document is found\n+            response = driver.sendRequest(\"http://localhost/document/v1/space/music/docid/one?cluster=lackluster&fieldSet=go\");\n+            executor.lastOperationContext().success(Optional.empty());\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1/space/music/docid/one\\\",\" +\n+                           \"  \\\"id\\\": \\\"id:space:music::one\\\"\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(404, response.getStatus());\n+            assertEquals(new DocumentGet(doc1.getId()), executor.lastOperation());\n+            assertEquals(parameters().withRoute(\"route-to-lackluster\").withFieldSet(\"go\"), executor.lastParameters());\n+\n+            // GET with full document ID is a document get operation.\n+            response = driver.sendRequest(\"http://localhost/document/v1/space/music/docid/one?\");\n+            executor.lastOperationContext().success(Optional.of(doc1));\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1/space/music/docid/one\\\",\" +\n+                           \"  \\\"id\\\": \\\"id:space:music::one\\\",\" +\n+                           \"  \\\"fields\\\": {\" +\n+                           \"    \\\"artist\\\": \\\"Tom Waits\\\"\" +\n+                           \"  }\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(200, response.getStatus());\n+            assertEquals(new DocumentGet(doc1.getId()), executor.lastOperation());\n+            assertEquals(parameters(), executor.lastParameters());\n+\n+            // POST with a document payload is a document put operation.\n+            response = driver.sendRequest(\"http://localhost/document/v1/space/music/number/1/two?condition=test%20it\", POST,\n+                                          \"{\" +\n+                                          \"  \\\"fields\\\": {\" +\n+                                          \"    \\\"artist\\\": \\\"Asa-Chan & Jun-Ray\\\"\" +\n+                                          \"  }\" +\n+                                          \"}\");\n+            executor.lastOperationContext().success(Optional.empty());\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1/space/music/number/1/two\\\",\" +\n+                           \"  \\\"id\\\": \\\"id:space:music:n=1:two\\\"\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(200, response.getStatus());\n+            DocumentPut put = new DocumentPut(doc2);\n+            put.setCondition(new TestAndSetCondition(\"test it\"));\n+            assertEquals(put, executor.lastOperation());\n+            assertEquals(parameters(), executor.lastParameters());\n+\n+            // PUT with a document update payload is a document update operation.\n+            response = driver.sendRequest(\"http://localhost/document/v1/space/music/group/a/three?create=true\", PUT,\n+                                          \"{\" +\n+                                          \"  \\\"fields\\\": {\" +\n+                                          \"    \\\"artist\\\": { \\\"assign\\\": \\\"Lisa Ekdahl\\\" }\" +\n+                                          \"  }\" +\n+                                          \"}\");\n+            executor.lastOperationContext().success(Optional.empty());\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1/space/music/group/a/three\\\",\" +\n+                           \"  \\\"id\\\": \\\"id:space:music:g=a:three\\\"\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(200, response.getStatus());\n+            DocumentUpdate update = new DocumentUpdate(manager.getDocumentType(\"music\"), \"id:space:music:g=a:three\");\n+            update.addFieldUpdate(FieldUpdate.createAssign(manager.getDocumentType(\"music\").getField(\"artist\"),\n+                                                           new StringFieldValue(\"Lisa Ekdahl\")));\n+            update.setCreateIfNonExistent(true);\n+            assertEquals(update, executor.lastOperation());\n+            assertEquals(parameters(), executor.lastParameters());\n+\n+            // DELETE with full document ID is a document remove operation.\n+            response = driver.sendRequest(\"http://localhost/document/v1/space/music/number/1/two?route=route\", DELETE);\n+            executor.lastOperationContext().success(Optional.empty());\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1/space/music/number/1/two\\\",\" +\n+                           \"  \\\"id\\\": \\\"id:space:music:n=1:two\\\"\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(200, response.getStatus());\n+            assertEquals(new DocumentRemove(doc2.getId()), executor.lastOperation());\n+            assertEquals(parameters().withRoute(\"route\"), executor.lastParameters());\n+        }\n+    }\n+\n+    void assertSameJson(String expected, String actual) {\n+        ByteArrayOutputStream expectedPretty = new ByteArrayOutputStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24e874d8cbc5d132fce1811e25721c8b9c888b1e"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI2MjM2MA==", "bodyText": "Nice, thanks.", "url": "https://github.com/vespa-engine/vespa/pull/14634#discussion_r498262360", "createdAt": "2020-10-01T13:54:13Z", "author": {"login": "jonmv"}, "path": "vespaclient-container-plugin/src/test/java/com/yahoo/document/restapi/resource/DocumentV1ApiTest.java", "diffHunk": "@@ -0,0 +1,277 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.document.restapi.resource;\n+\n+import com.yahoo.container.jdisc.RequestHandlerTestDriver;\n+import com.yahoo.docproc.jdisc.metric.NullMetric;\n+import com.yahoo.document.Document;\n+import com.yahoo.document.DocumentGet;\n+import com.yahoo.document.DocumentPut;\n+import com.yahoo.document.DocumentRemove;\n+import com.yahoo.document.DocumentType;\n+import com.yahoo.document.DocumentTypeManager;\n+import com.yahoo.document.DocumentUpdate;\n+import com.yahoo.document.TestAndSetCondition;\n+import com.yahoo.document.config.DocumentmanagerConfig;\n+import com.yahoo.document.datatypes.StringFieldValue;\n+import com.yahoo.document.restapi.DocumentOperationExecutor;\n+import com.yahoo.document.restapi.DocumentOperationExecutor.Group;\n+import com.yahoo.document.restapi.DocumentOperationExecutor.VisitorOptions;\n+import com.yahoo.document.restapi.DocumentOperationExecutorMock;\n+import com.yahoo.document.restapi.resource.DocumentV1ApiHandler.DocumentOperationParser;\n+import com.yahoo.document.update.FieldUpdate;\n+import com.yahoo.documentapi.DocumentAccessParams;\n+import com.yahoo.documentapi.local.LocalDocumentAccess;\n+import com.yahoo.jdisc.Metric;\n+import com.yahoo.jdisc.http.HttpRequest;\n+import com.yahoo.metrics.simple.MetricReceiver;\n+import com.yahoo.prelude.fastsearch.StringField;\n+import com.yahoo.searchdefinition.derived.Deriver;\n+import com.yahoo.slime.JsonFormat;\n+import com.yahoo.slime.SlimeUtils;\n+import com.yahoo.test.ManualClock;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.Optional;\n+\n+import static com.yahoo.document.restapi.DocumentOperationExecutor.ErrorType.BAD_REQUEST;\n+import static com.yahoo.document.restapi.DocumentOperationExecutor.ErrorType.ERROR;\n+import static com.yahoo.documentapi.DocumentOperationParameters.parameters;\n+import static com.yahoo.jdisc.http.HttpRequest.Method.DELETE;\n+import static com.yahoo.jdisc.http.HttpRequest.Method.POST;\n+import static com.yahoo.jdisc.http.HttpRequest.Method.PUT;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * @author jonmv\n+ */\n+public class DocumentV1ApiTest {\n+\n+    final DocumentmanagerConfig docConfig = Deriver.getDocumentManagerConfig(\"src/test/cfg/music.sd\").build();\n+    final DocumentTypeManager manager = new DocumentTypeManager(docConfig);\n+    final Document doc1 = new Document(manager.getDocumentType(\"music\"), \"id:space:music::one\");\n+    final Document doc2 = new Document(manager.getDocumentType(\"music\"), \"id:space:music:n=1:two\");\n+    final Document doc3 = new Document(manager.getDocumentType(\"music\"), \"id:space:music:g=a:three\");\n+    {\n+        doc1.setFieldValue(\"artist\", \"Tom Waits\");\n+        doc2.setFieldValue(\"artist\", \"Asa-Chan & Jun-Ray\");\n+    }\n+\n+    ManualClock clock;\n+    DocumentOperationParser parser;\n+    LocalDocumentAccess access;\n+    DocumentOperationExecutorMock executor;\n+    Metric metric;\n+    MetricReceiver metrics;\n+    DocumentV1ApiHandler handler;\n+\n+    @Before\n+    public void setUp() {\n+        clock = new ManualClock();\n+        parser = new DocumentOperationParser(docConfig);\n+        access = new LocalDocumentAccess(new DocumentAccessParams().setDocumentmanagerConfig(docConfig));\n+        executor = new DocumentOperationExecutorMock();\n+        metric = new NullMetric();\n+        metrics = new MetricReceiver.MockReceiver();\n+        handler = new DocumentV1ApiHandler(clock, executor, parser, metric, metrics);\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        handler.destroy();\n+    }\n+\n+    @Test\n+    public void testResponses() {\n+        try (RequestHandlerTestDriver driver = new RequestHandlerTestDriver(handler)) {\n+            // GET at non-existent path returns 404 with available paths\n+            var response = driver.sendRequest(\"http://localhost/document/v1/not-found\");\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1/not-found\\\",\" +\n+                           \"  \\\"message\\\": \\\"Nothing at '/document/v1/not-found'. Available paths are:\\\\n\" +\n+                                                   \"/document/v1/\\\\n\" +\n+                                                   \"/document/v1/{namespace}/{documentType}/docid/\\\\n\" +\n+                                                   \"/document/v1/{namespace}/{documentType}/group/{group}/\\\\n\" +\n+                                                   \"/document/v1/{namespace}/{documentType}/number/{number}/\\\\n\" +\n+                                                   \"/document/v1/{namespace}/{documentType}/docid/{docid}\\\\n\" +\n+                                                   \"/document/v1/{namespace}/{documentType}/group/{group}/{docid}\\\\n\" +\n+                                                   \"/document/v1/{namespace}/{documentType}/number/{number}/{docid}\\\"\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(\"application/json; charset=UTF-8\", response.getResponse().headers().getFirst(\"Content-Type\"));\n+            assertEquals(404, response.getStatus());\n+\n+            // GET at root is a visit. Numeric parameters have an upper bound.\n+            response = driver.sendRequest(\"http://localhost/document/v1?cluster=lackluster&bucketSpace=default&wantedDocumentCount=1025&concurrency=123\" +\n+                                          \"&selection=all%20the%20things&fieldSet=[id]&continuation=token\");\n+            executor.lastVisitContext().document(doc1);\n+            executor.lastVisitContext().document(doc2);\n+            executor.lastVisitContext().document(doc3);\n+            executor.lastVisitContext().success(Optional.of(\"token\"));\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1\\\",\" +\n+                           \"  \\\"documents\\\": [\" +\n+                           \"    {\" +\n+                           \"      \\\"id\\\": \\\"id:space:music::one\\\",\" +\n+                           \"      \\\"fields\\\": {\" +\n+                           \"        \\\"artist\\\": \\\"Tom Waits\\\"\" +\n+                           \"      }\" +\n+                           \"    },\" +\n+                           \"    {\" +\n+                           \"      \\\"id\\\": \\\"id:space:music:n=1:two\\\",\" +\n+                           \"      \\\"fields\\\": {\" +\n+                           \"        \\\"artist\\\": \\\"Asa-Chan & Jun-Ray\\\"\" +\n+                           \"      }\" +\n+                           \"    },\" +\n+                           \"    {\" +\n+                           \"     \\\"id\\\": \\\"id:space:music:g=a:three\\\",\" +\n+                           \"     \\\"fields\\\": {}\" +\n+                           \"    }\" +\n+                           \"  ],\" +\n+                           \"  \\\"continuation\\\": \\\"token\\\"\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(200, response.getStatus());\n+            assertEquals(VisitorOptions.builder().cluster(\"lackluster\").bucketSpace(\"default\").wantedDocumentCount(1024)\n+                                       .concurrency(100).selection(\"all the things\").fieldSet(\"[id]\").continuation(\"token\").build(),\n+                         executor.lastOptions());\n+\n+            // GET with namespace and document type is a restricted visit.\n+            response = driver.sendRequest(\"http://localhost/document/v1/space/music/docid\");\n+            executor.lastVisitContext().error(BAD_REQUEST, \"nope\");\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1/space/music/docid\\\",\" +\n+                           \"  \\\"documents\\\": [],\" +\n+                           \"  \\\"message\\\": \\\"nope\\\"\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(400, response.getStatus());\n+            assertEquals(VisitorOptions.builder().namespace(\"space\").documentType(\"music\").build(),\n+                         executor.lastOptions());\n+\n+            // GET with namespace, document type and group is a restricted visit.\n+            response = driver.sendRequest(\"http://localhost/document/v1/space/music/group/best\");\n+            executor.lastVisitContext().error(ERROR, \"error\");\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1/space/music/group/best\\\",\" +\n+                           \"  \\\"documents\\\": [],\" +\n+                           \"  \\\"message\\\": \\\"error\\\"\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(500, response.getStatus());\n+            assertEquals(VisitorOptions.builder().namespace(\"space\").documentType(\"music\").group(Group.of(\"best\")).build(),\n+                         executor.lastOptions());\n+\n+            // GET with namespace, document type and number is a restricted visit.\n+            response = driver.sendRequest(\"http://localhost/document/v1/space/music/number/123\");\n+            executor.lastVisitContext().success(Optional.empty());\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1/space/music/number/123\\\",\" +\n+                           \"  \\\"documents\\\": []\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(200, response.getStatus());\n+            assertEquals(VisitorOptions.builder().namespace(\"space\").documentType(\"music\").group(Group.of(123)).build(),\n+                         executor.lastOptions());\n+\n+            // GET with full document ID is a document get operation which returns 404 when no document is found\n+            response = driver.sendRequest(\"http://localhost/document/v1/space/music/docid/one?cluster=lackluster&fieldSet=go\");\n+            executor.lastOperationContext().success(Optional.empty());\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1/space/music/docid/one\\\",\" +\n+                           \"  \\\"id\\\": \\\"id:space:music::one\\\"\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(404, response.getStatus());\n+            assertEquals(new DocumentGet(doc1.getId()), executor.lastOperation());\n+            assertEquals(parameters().withRoute(\"route-to-lackluster\").withFieldSet(\"go\"), executor.lastParameters());\n+\n+            // GET with full document ID is a document get operation.\n+            response = driver.sendRequest(\"http://localhost/document/v1/space/music/docid/one?\");\n+            executor.lastOperationContext().success(Optional.of(doc1));\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1/space/music/docid/one\\\",\" +\n+                           \"  \\\"id\\\": \\\"id:space:music::one\\\",\" +\n+                           \"  \\\"fields\\\": {\" +\n+                           \"    \\\"artist\\\": \\\"Tom Waits\\\"\" +\n+                           \"  }\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(200, response.getStatus());\n+            assertEquals(new DocumentGet(doc1.getId()), executor.lastOperation());\n+            assertEquals(parameters(), executor.lastParameters());\n+\n+            // POST with a document payload is a document put operation.\n+            response = driver.sendRequest(\"http://localhost/document/v1/space/music/number/1/two?condition=test%20it\", POST,\n+                                          \"{\" +\n+                                          \"  \\\"fields\\\": {\" +\n+                                          \"    \\\"artist\\\": \\\"Asa-Chan & Jun-Ray\\\"\" +\n+                                          \"  }\" +\n+                                          \"}\");\n+            executor.lastOperationContext().success(Optional.empty());\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1/space/music/number/1/two\\\",\" +\n+                           \"  \\\"id\\\": \\\"id:space:music:n=1:two\\\"\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(200, response.getStatus());\n+            DocumentPut put = new DocumentPut(doc2);\n+            put.setCondition(new TestAndSetCondition(\"test it\"));\n+            assertEquals(put, executor.lastOperation());\n+            assertEquals(parameters(), executor.lastParameters());\n+\n+            // PUT with a document update payload is a document update operation.\n+            response = driver.sendRequest(\"http://localhost/document/v1/space/music/group/a/three?create=true\", PUT,\n+                                          \"{\" +\n+                                          \"  \\\"fields\\\": {\" +\n+                                          \"    \\\"artist\\\": { \\\"assign\\\": \\\"Lisa Ekdahl\\\" }\" +\n+                                          \"  }\" +\n+                                          \"}\");\n+            executor.lastOperationContext().success(Optional.empty());\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1/space/music/group/a/three\\\",\" +\n+                           \"  \\\"id\\\": \\\"id:space:music:g=a:three\\\"\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(200, response.getStatus());\n+            DocumentUpdate update = new DocumentUpdate(manager.getDocumentType(\"music\"), \"id:space:music:g=a:three\");\n+            update.addFieldUpdate(FieldUpdate.createAssign(manager.getDocumentType(\"music\").getField(\"artist\"),\n+                                                           new StringFieldValue(\"Lisa Ekdahl\")));\n+            update.setCreateIfNonExistent(true);\n+            assertEquals(update, executor.lastOperation());\n+            assertEquals(parameters(), executor.lastParameters());\n+\n+            // DELETE with full document ID is a document remove operation.\n+            response = driver.sendRequest(\"http://localhost/document/v1/space/music/number/1/two?route=route\", DELETE);\n+            executor.lastOperationContext().success(Optional.empty());\n+            assertSameJson(\"{\" +\n+                           \"  \\\"pathId\\\": \\\"/document/v1/space/music/number/1/two\\\",\" +\n+                           \"  \\\"id\\\": \\\"id:space:music:n=1:two\\\"\" +\n+                           \"}\",\n+                           response.readAll());\n+            assertEquals(200, response.getStatus());\n+            assertEquals(new DocumentRemove(doc2.getId()), executor.lastOperation());\n+            assertEquals(parameters().withRoute(\"route\"), executor.lastParameters());\n+        }\n+    }\n+\n+    void assertSameJson(String expected, String actual) {\n+        ByteArrayOutputStream expectedPretty = new ByteArrayOutputStream();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIzODgxOQ=="}, "originalCommit": {"oid": "24e874d8cbc5d132fce1811e25721c8b9c888b1e"}, "originalPosition": 264}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTI4NjM4OnYy", "diffSide": "RIGHT", "path": "documentapi/src/main/java/com/yahoo/documentapi/local/LocalDocumentAccess.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzozNjo0NFrOHbKwYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMzo1NDoyNFrOHbLh-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI0OTgyNw==", "bodyText": "Unintended change?", "url": "https://github.com/vespa-engine/vespa/pull/14634#discussion_r498249827", "createdAt": "2020-10-01T13:36:44Z", "author": {"login": "bjorncs"}, "path": "documentapi/src/main/java/com/yahoo/documentapi/local/LocalDocumentAccess.java", "diffHunk": "@@ -94,7 +95,7 @@ public SubscriptionSession openSubscription(SubscriptionParameters parameters) {\n      *   session.put(documentPut);\n      *   session.get(documentId);\n      *                                     // Operations wait for this thread to arrive at \"phaser\"\n-     *   phaser.arrive();                  // Let operations send their responses\n+     *   phaser.arriveAndAwaitAdvance();   // Let operations send their responses", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6792ae6918439c535ff518107ad17351bb27fed1"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI2MjUyMA==", "bodyText": "No, it was wrong.", "url": "https://github.com/vespa-engine/vespa/pull/14634#discussion_r498262520", "createdAt": "2020-10-01T13:54:24Z", "author": {"login": "jonmv"}, "path": "documentapi/src/main/java/com/yahoo/documentapi/local/LocalDocumentAccess.java", "diffHunk": "@@ -94,7 +95,7 @@ public SubscriptionSession openSubscription(SubscriptionParameters parameters) {\n      *   session.put(documentPut);\n      *   session.get(documentId);\n      *                                     // Operations wait for this thread to arrive at \"phaser\"\n-     *   phaser.arrive();                  // Let operations send their responses\n+     *   phaser.arriveAndAwaitAdvance();   // Let operations send their responses", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI0OTgyNw=="}, "originalCommit": {"oid": "6792ae6918439c535ff518107ad17351bb27fed1"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1271, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}