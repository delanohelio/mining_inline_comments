{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExNTQ0MTU2", "number": 15066, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDo0NDo1MVrOEy2O-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDo1MjowN1rOEy2d9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNzUyODI3OnYy", "diffSide": "RIGHT", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodePrioritizer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDo0NDo1MVrOHpttFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDo0NDo1MVrOHpttFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwMjQ4Nw==", "bodyText": "Space -> Spare", "url": "https://github.com/vespa-engine/vespa/pull/15066#discussion_r513502487", "createdAt": "2020-10-28T14:44:51Z", "author": {"login": "hakonhall"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodePrioritizer.java", "diffHunk": "@@ -71,9 +71,14 @@\n                 .filter(clusterSpec.group()::equals)\n                 .count();\n \n-        this.allocateForReplacement = isReplacement(nodesInCluster.size(),\n-                                                    nodesInCluster.state(Node.State.failed).size());\n-        this.canAllocateNew = requestedNodes instanceof NodeSpec.CountNodeSpec;\n+        // In dynamically provisioned zones, we can always take spare hosts since we can provision new on-demand,\n+        // NodeCandidate::compareTo will ensure that they will not be used until there is no room elsewhere.\n+        // In non-dynamically provisioned zones, we only allow allocating to spare hosts to replace failed nodes.\n+        this.canAllocateToSpaceHosts = isReplacement(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1d25abb24f5f318a8f25726d21acff3c8ccac20"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNzUzOTAzOnYy", "diffSide": "RIGHT", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodePrioritizer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDo0Njo1NlrOHpt0AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDo0Njo1NlrOHpt0AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwNDI1Ng==", "bodyText": "Nit:  put dynamicProvisioning as the first condition of the || to short-circuit isReplacement expression if true", "url": "https://github.com/vespa-engine/vespa/pull/15066#discussion_r513504256", "createdAt": "2020-10-28T14:46:56Z", "author": {"login": "hakonhall"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodePrioritizer.java", "diffHunk": "@@ -71,9 +71,14 @@\n                 .filter(clusterSpec.group()::equals)\n                 .count();\n \n-        this.allocateForReplacement = isReplacement(nodesInCluster.size(),\n-                                                    nodesInCluster.state(Node.State.failed).size());\n-        this.canAllocateNew = requestedNodes instanceof NodeSpec.CountNodeSpec;\n+        // In dynamically provisioned zones, we can always take spare hosts since we can provision new on-demand,\n+        // NodeCandidate::compareTo will ensure that they will not be used until there is no room elsewhere.\n+        // In non-dynamically provisioned zones, we only allow allocating to spare hosts to replace failed nodes.\n+        this.canAllocateToSpaceHosts = isReplacement(\n+                nodesInCluster.size(), nodesInCluster.state(Node.State.failed).size()) || dynamicProvisioning;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1d25abb24f5f318a8f25726d21acff3c8ccac20"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNzU2NjYxOnYy", "diffSide": "RIGHT", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodePrioritizer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDo1MjowN1rOHpuFqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzoyMjozOVrOHp1VBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwODc3OQ==", "bodyText": "!dynamicProvisioning || --> dynamicProvisioning && ?", "url": "https://github.com/vespa-engine/vespa/pull/15066#discussion_r513508779", "createdAt": "2020-10-28T14:52:07Z", "author": {"login": "hakonhall"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodePrioritizer.java", "diffHunk": "@@ -71,9 +71,14 @@\n                 .filter(clusterSpec.group()::equals)\n                 .count();\n \n-        this.allocateForReplacement = isReplacement(nodesInCluster.size(),\n-                                                    nodesInCluster.state(Node.State.failed).size());\n-        this.canAllocateNew = requestedNodes instanceof NodeSpec.CountNodeSpec;\n+        // In dynamically provisioned zones, we can always take spare hosts since we can provision new on-demand,\n+        // NodeCandidate::compareTo will ensure that they will not be used until there is no room elsewhere.\n+        // In non-dynamically provisioned zones, we only allow allocating to spare hosts to replace failed nodes.\n+        this.canAllocateToSpaceHosts = isReplacement(\n+                nodesInCluster.size(), nodesInCluster.state(Node.State.failed).size()) || dynamicProvisioning;\n+        // Do not allocate new nodes for exclusive deployments in dynamically provisioned zones: provision new host instead.\n+        this.canAllocateNew = requestedNodes instanceof NodeSpec.CountNodeSpec\n+                && (!dynamicProvisioning || !requestedNodes.isExclusive());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1d25abb24f5f318a8f25726d21acff3c8ccac20"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyMDQzNQ==", "bodyText": "Then we wouldn't allocate new nodes in non-dynamically provisioned zones? This should say that we can allocate new nodes on hosts if:\n\nThis is a deployment with count spec\nThis is not an exclusive deployment to dynamically provisioned zone", "url": "https://github.com/vespa-engine/vespa/pull/15066#discussion_r513520435", "createdAt": "2020-10-28T15:05:53Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodePrioritizer.java", "diffHunk": "@@ -71,9 +71,14 @@\n                 .filter(clusterSpec.group()::equals)\n                 .count();\n \n-        this.allocateForReplacement = isReplacement(nodesInCluster.size(),\n-                                                    nodesInCluster.state(Node.State.failed).size());\n-        this.canAllocateNew = requestedNodes instanceof NodeSpec.CountNodeSpec;\n+        // In dynamically provisioned zones, we can always take spare hosts since we can provision new on-demand,\n+        // NodeCandidate::compareTo will ensure that they will not be used until there is no room elsewhere.\n+        // In non-dynamically provisioned zones, we only allow allocating to spare hosts to replace failed nodes.\n+        this.canAllocateToSpaceHosts = isReplacement(\n+                nodesInCluster.size(), nodesInCluster.state(Node.State.failed).size()) || dynamicProvisioning;\n+        // Do not allocate new nodes for exclusive deployments in dynamically provisioned zones: provision new host instead.\n+        this.canAllocateNew = requestedNodes instanceof NodeSpec.CountNodeSpec\n+                && (!dynamicProvisioning || !requestedNodes.isExclusive());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwODc3OQ=="}, "originalCommit": {"oid": "e1d25abb24f5f318a8f25726d21acff3c8ccac20"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyNzM5OQ==", "bodyText": "I see, I confused canAllocateNew with \"can allocate new host\" which has the opposite meaning in that case.", "url": "https://github.com/vespa-engine/vespa/pull/15066#discussion_r513627399", "createdAt": "2020-10-28T17:22:39Z", "author": {"login": "hakonhall"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodePrioritizer.java", "diffHunk": "@@ -71,9 +71,14 @@\n                 .filter(clusterSpec.group()::equals)\n                 .count();\n \n-        this.allocateForReplacement = isReplacement(nodesInCluster.size(),\n-                                                    nodesInCluster.state(Node.State.failed).size());\n-        this.canAllocateNew = requestedNodes instanceof NodeSpec.CountNodeSpec;\n+        // In dynamically provisioned zones, we can always take spare hosts since we can provision new on-demand,\n+        // NodeCandidate::compareTo will ensure that they will not be used until there is no room elsewhere.\n+        // In non-dynamically provisioned zones, we only allow allocating to spare hosts to replace failed nodes.\n+        this.canAllocateToSpaceHosts = isReplacement(\n+                nodesInCluster.size(), nodesInCluster.state(Node.State.failed).size()) || dynamicProvisioning;\n+        // Do not allocate new nodes for exclusive deployments in dynamically provisioned zones: provision new host instead.\n+        this.canAllocateNew = requestedNodes instanceof NodeSpec.CountNodeSpec\n+                && (!dynamicProvisioning || !requestedNodes.isExclusive());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwODc3OQ=="}, "originalCommit": {"oid": "e1d25abb24f5f318a8f25726d21acff3c8ccac20"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1039, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}