{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNDAzNjA2", "number": 13741, "title": "Rename unique feature to globalsequence.", "bodyText": "Invert so that the first doc from the first node will sort first,\nfollowed by the first doc from the second node, and the the last doc of the last node at the end.\nIt will produce number in the range (1 << 48) down to zero.\nSequence = (1 << 48) - ((docId << 16) | disributionKey)\n@havardpe and @geirst PR", "createdAt": "2020-06-29T13:10:24Z", "url": "https://github.com/vespa-engine/vespa/pull/13741", "merged": true, "mergeCommit": {"oid": "01b380ed97dbfe1cce41068ea8a806502a2d2bec"}, "closed": true, "closedAt": "2020-06-30T11:43:44Z", "author": {"login": "baldersheim"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwAxq5AH2gAyNDQxNDAzNjA2OmFmNTQyNTQwOTVmYWUxYmRlYThkMTAxYTljMGY0ODExZGRmNjlmNTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwUEfNgH2gAyNDQxNDAzNjA2OjQzNTc1YjFkNjUxNDk1M2UwODU4Mzk5OWYwZDBkMjlmMjNjZjNiYTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "af54254095fae1bdea8d101a9c0f4811ddf69f56", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/af54254095fae1bdea8d101a9c0f4811ddf69f56", "committedDate": "2020-06-29T13:08:42Z", "message": "Rename unique feature to globalsequence.\nInvert so that the first doc from the first node will sort first,\nfollowed by the first doc from the second node, and the the last doc of the last node at the end.\nIt will produce number in the range (1 << 48) down to zero.\nSequence = (1 << 48) - ((docId << 16) | disributionKey)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5Nzg0MTkw", "url": "https://github.com/vespa-engine/vespa/pull/13741#pullrequestreview-439784190", "createdAt": "2020-06-30T08:25:00Z", "commit": {"oid": "af54254095fae1bdea8d101a9c0f4811ddf69f56"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODoyNTowMFrOGqxcfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODozMzowNFrOGqxyHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwMzQ4NA==", "bodyText": "what about the 3 bits we allow to overlap between distribution key and docid?", "url": "https://github.com/vespa-engine/vespa/pull/13741#discussion_r447503484", "createdAt": "2020-06-30T08:25:00Z", "author": {"login": "havardpe"}, "path": "searchlib/src/vespa/searchlib/features/global_sequence_feature.cpp", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"global_sequence_feature.h\"\n+#include <vespa/vespalib/util/stash.h>\n+\n+using namespace search::fef;\n+\n+namespace search::features {\n+\n+namespace {\n+\n+/**\n+ * Implements the executor for combining lid and distribution key to form a globally unique value.\n+ */\n+class GlobalSequenceExecutor : public fef::FeatureExecutor {\n+private:\n+    uint32_t _distributionKey;\n+\n+public:\n+    GlobalSequenceExecutor(uint32_t distributionKey)\n+        : _distributionKey(distributionKey)\n+    {\n+    }\n+\n+    void execute(uint32_t docId) override {\n+        outputs().set_number(0, ((1ul << 48u) - ((uint64_t(docId) << 16u) | _distributionKey)));\n+    }\n+};\n+\n+}\n+\n+GlobalSequenceBlueprint::GlobalSequenceBlueprint() :\n+    Blueprint(\"globalsequence\"),\n+    _distributionKey(0)\n+{\n+}\n+\n+void\n+GlobalSequenceBlueprint::visitDumpFeatures(const IIndexEnvironment &, IDumpFeatureVisitor &) const\n+{\n+}\n+\n+bool\n+GlobalSequenceBlueprint::setup(const IIndexEnvironment & env, const ParameterList & )\n+{\n+    _distributionKey = env.getDistributionKey();\n+    assert( _distributionKey < 0x80000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af54254095fae1bdea8d101a9c0f4811ddf69f56"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwNjUzOA==", "bodyText": "consider moving the magic to an inlined function in the header that can also be called by the test", "url": "https://github.com/vespa-engine/vespa/pull/13741#discussion_r447506538", "createdAt": "2020-06-30T08:29:23Z", "author": {"login": "havardpe"}, "path": "searchlib/src/vespa/searchlib/features/global_sequence_feature.cpp", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"global_sequence_feature.h\"\n+#include <vespa/vespalib/util/stash.h>\n+\n+using namespace search::fef;\n+\n+namespace search::features {\n+\n+namespace {\n+\n+/**\n+ * Implements the executor for combining lid and distribution key to form a globally unique value.\n+ */\n+class GlobalSequenceExecutor : public fef::FeatureExecutor {\n+private:\n+    uint32_t _distributionKey;\n+\n+public:\n+    GlobalSequenceExecutor(uint32_t distributionKey)\n+        : _distributionKey(distributionKey)\n+    {\n+    }\n+\n+    void execute(uint32_t docId) override {\n+        outputs().set_number(0, ((1ul << 48u) - ((uint64_t(docId) << 16u) | _distributionKey)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af54254095fae1bdea8d101a9c0f4811ddf69f56"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwOTAyMA==", "bodyText": "consider camel case to match naming of other features", "url": "https://github.com/vespa-engine/vespa/pull/13741#discussion_r447509020", "createdAt": "2020-06-30T08:33:04Z", "author": {"login": "havardpe"}, "path": "searchlib/src/vespa/searchlib/features/global_sequence_feature.cpp", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"global_sequence_feature.h\"\n+#include <vespa/vespalib/util/stash.h>\n+\n+using namespace search::fef;\n+\n+namespace search::features {\n+\n+namespace {\n+\n+/**\n+ * Implements the executor for combining lid and distribution key to form a globally unique value.\n+ */\n+class GlobalSequenceExecutor : public fef::FeatureExecutor {\n+private:\n+    uint32_t _distributionKey;\n+\n+public:\n+    GlobalSequenceExecutor(uint32_t distributionKey)\n+        : _distributionKey(distributionKey)\n+    {\n+    }\n+\n+    void execute(uint32_t docId) override {\n+        outputs().set_number(0, ((1ul << 48u) - ((uint64_t(docId) << 16u) | _distributionKey)));\n+    }\n+};\n+\n+}\n+\n+GlobalSequenceBlueprint::GlobalSequenceBlueprint() :\n+    Blueprint(\"globalsequence\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af54254095fae1bdea8d101a9c0f4811ddf69f56"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43575b1d6514953e08583999f0d0d29f23cf3ba1", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/43575b1d6514953e08583999f0d0d29f23cf3ba1", "committedDate": "2020-06-30T11:37:27Z", "message": "Followup from PR comments.\n- CamelCase globalsequence -> globalSequence\n- 0x80000 -> 0x10000\n- Factor out computation to header file and use in both test and globalSequence feature."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3605, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}