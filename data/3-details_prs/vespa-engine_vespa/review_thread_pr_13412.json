{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MzM3MDEw", "number": 13412, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODo0ODoyOFrOEAatzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMDozODoyOVrOEAc_WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODczMTY2OnYy", "diffSide": "RIGHT", "path": "vespalib/src/vespa/vespalib/regex/regex.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODo0ODoyOFrOGbro-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODo0ODoyOFrOGbro-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY3OTczOA==", "bodyText": "According to the RE2 docs, set_dot_nl(bool) has the behavior \"dot matches everything including new line\". Maybe we should call this DotMatchesNewline instead to be explicit that this does not trigger any changes to how anchors work etc? MultiLine might imply some different semantics than what is currently in place.", "url": "https://github.com/vespa-engine/vespa/pull/13412#discussion_r431679738", "createdAt": "2020-05-28T08:48:28Z", "author": {"login": "vekterli"}, "path": "vespalib/src/vespa/vespalib/regex/regex.h", "diffHunk": "@@ -44,7 +44,8 @@ class Regex {\n     // TODO consider using type-safe parameter instead.\n     enum Options {\n         None       = 0,\n-        IgnoreCase = 1\n+        IgnoreCase = 1,\n+        MultiLine  = 2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68078428d1b48bbae8bfefad572b7221b862b37"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODc0MzU3OnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/queryeval/queryeval.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODo1MTo1MFrOGbrwqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODo1MTo1MFrOGbrwqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY4MTcwNQ==", "bodyText": "all EXPECT macros also return whether the check was successful, so the above if could check the EXPECT_TRUE result instead.", "url": "https://github.com/vespa-engine/vespa/pull/13412#discussion_r431681705", "createdAt": "2020-05-28T08:51:50Z", "author": {"login": "havardpe"}, "path": "searchlib/src/tests/queryeval/queryeval.cpp", "diffHunk": "@@ -213,6 +217,16 @@ TEST(\"test that non-strict andnot search does NOT forward to its greedy first ch\n     EXPECT_TRUE(nullptr != search->andWith(std::move(filter), 8).get());\n }\n \n+void expect_match(std::string input, std::string regexp) {\n+    using vespalib::Regex;\n+    Regex pattern = Regex::from_pattern(regexp, Regex::Options::MultiLine);\n+    if (! pattern.partial_match(input)) {\n+        fprintf(stderr, \"no match for pattern: >>>%s<<< in input:\\n>>>\\n%s\\n<<<\\n\",\n+                regexp.c_str(), input.c_str());\n+    }\n+    EXPECT_TRUE(pattern.partial_match(input));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68078428d1b48bbae8bfefad572b7221b862b37"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODc4Mjg4OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/queryeval/intermediate_blueprints.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOTowMjo0MVrOGbsKJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOTowMjo0MVrOGbsKJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY4ODIyOA==", "bodyText": "consider using inheritStrict for consistency", "url": "https://github.com/vespa-engine/vespa/pull/13412#discussion_r431688228", "createdAt": "2020-05-28T09:02:41Z", "author": {"login": "havardpe"}, "path": "searchlib/src/vespa/searchlib/queryeval/intermediate_blueprints.cpp", "diffHunk": "@@ -320,6 +363,19 @@ OrBlueprint::createIntermediateSearch(const MultiSearch::Children &subSearches,\n     return SearchIterator::UP(OrSearch::create(subSearches, strict, unpackInfo));\n }\n \n+SearchIterator::UP\n+OrBlueprint::createFilterSearch(bool strict, FilterConstraint constraint) const\n+{\n+    MultiSearch::Children subSearches;\n+    subSearches.reserve(childCnt());\n+    for (size_t i = 0; i < childCnt(); ++i) {\n+        auto search = getChild(i).createFilterSearch(strict, constraint);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68078428d1b48bbae8bfefad572b7221b862b37"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTEwMjkxOnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/queryeval/intermediate_blueprints.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMDozODowM1rOGbvZSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMDozODowM1rOGbvZSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc0MTI1Nw==", "bodyText": "Consider snake_case for consistency (e.g. child_strict is used further down).", "url": "https://github.com/vespa-engine/vespa/pull/13412#discussion_r431741257", "createdAt": "2020-05-28T10:38:03Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/queryeval/intermediate_blueprints.cpp", "diffHunk": "@@ -168,6 +168,33 @@ AndNotBlueprint::createIntermediateSearch(const MultiSearch::Children &subSearch\n     return SearchIterator::UP(AndNotSearch::create(subSearches, strict));\n }\n \n+namespace {\n+Blueprint::FilterConstraint invert(Blueprint::FilterConstraint constraint) {\n+    if (constraint == Blueprint::FilterConstraint::UPPER_BOUND) {\n+        return Blueprint::FilterConstraint::LOWER_BOUND;\n+    }\n+    if (constraint == Blueprint::FilterConstraint::LOWER_BOUND) {\n+        return Blueprint::FilterConstraint::UPPER_BOUND;\n+    }\n+    abort();\n+}\n+} // namespace <unnamed>\n+\n+SearchIterator::UP\n+AndNotBlueprint::createFilterSearch(bool strict, FilterConstraint constraint) const\n+{\n+    MultiSearch::Children subSearches;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec94e96642e4068f173e1063badc92da8b17366f"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTEwNDAyOnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/queryeval/intermediate_blueprints.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMDozODoyNFrOGbvZ-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMDozODoyNFrOGbvZ-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc0MTQzMg==", "bodyText": "Consider snake_case for consistency.", "url": "https://github.com/vespa-engine/vespa/pull/13412#discussion_r431741432", "createdAt": "2020-05-28T10:38:24Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/queryeval/intermediate_blueprints.cpp", "diffHunk": "@@ -243,6 +270,22 @@ AndBlueprint::createIntermediateSearch(const MultiSearch::Children &subSearches,\n     return SearchIterator::UP(search);\n }\n \n+SearchIterator::UP\n+AndBlueprint::createFilterSearch(bool strict, FilterConstraint constraint) const\n+{\n+    MultiSearch::Children subSearches;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec94e96642e4068f173e1063badc92da8b17366f"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTEwNDI0OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/queryeval/intermediate_blueprints.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMDozODoyOVrOGbvaIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMDozODoyOVrOGbvaIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc0MTQ3NA==", "bodyText": "Consider snake_case for consistency.", "url": "https://github.com/vespa-engine/vespa/pull/13412#discussion_r431741474", "createdAt": "2020-05-28T10:38:29Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/queryeval/intermediate_blueprints.cpp", "diffHunk": "@@ -243,6 +270,22 @@ AndBlueprint::createIntermediateSearch(const MultiSearch::Children &subSearches,\n     return SearchIterator::UP(search);\n }\n \n+SearchIterator::UP\n+AndBlueprint::createFilterSearch(bool strict, FilterConstraint constraint) const\n+{\n+    MultiSearch::Children subSearches;\n+    subSearches.reserve(childCnt());\n+    for (size_t i = 0; i < childCnt(); ++i) {\n+        bool child_strict = strict && inheritStrict(i);\n+        auto search = getChild(i).createFilterSearch(child_strict, constraint);\n+        subSearches.push_back(search.release());\n+    }\n+    UnpackInfo unpackInfo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec94e96642e4068f173e1063badc92da8b17366f"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1551, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}