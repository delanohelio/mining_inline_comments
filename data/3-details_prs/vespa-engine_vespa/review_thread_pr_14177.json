{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0NTg4MjQ2", "number": 14177, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDo0NTo1NlrOEdKi0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDo0NTo1NlrOEdKi0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDE2OTEyOnYy", "diffSide": "RIGHT", "path": "document/src/vespa/document/datatype/structureddatatype.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDo0NTo1NlrOHIKsUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMToxNDowOFrOHILgNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMyNTg0Mw==", "bodyText": "I always get a bit of a cold sweat when I see alloca, in particular since our threads are usually created from pools with stack size configurations that aren't all that big, and I'm not sure if type names are bounded in size. Could the alloca be guarded behind an if on the name size where it will only be used if the size is below a fixed threshold? Say, 256 bytes or so? Could even just use a fixed buffer for this case, which as a bonus is more portable. Fallback to asciistream in the extremely unlikely case where the name is longer.", "url": "https://github.com/vespa-engine/vespa/pull/14177#discussion_r478325843", "createdAt": "2020-08-27T10:45:56Z", "author": {"login": "vekterli"}, "path": "document/src/vespa/document/datatype/structureddatatype.cpp", "diffHunk": "@@ -48,9 +48,11 @@ int32_t StructuredDataType::createId(vespalib::stringref name)\n     // ASCII characters. Probably screwed up otherwise, but generated ids\n     // should only be used in testing anyways. In production this will be\n     // set from the document manager config.\n-    vespalib::asciistream ost;\n-    ost << name << \".0\";  // Hardcode version 0 (version is not supported).\n-    return crappyJavaStringHash(ost.str());\n+    char *bufOnStack = static_cast<char *>(alloca(name.size() + 2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a5c13aa1ab2117cfb5d70e13313426eb7f1a695"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMzOTEyNg==", "bodyText": "Agreed.", "url": "https://github.com/vespa-engine/vespa/pull/14177#discussion_r478339126", "createdAt": "2020-08-27T11:14:08Z", "author": {"login": "baldersheim"}, "path": "document/src/vespa/document/datatype/structureddatatype.cpp", "diffHunk": "@@ -48,9 +48,11 @@ int32_t StructuredDataType::createId(vespalib::stringref name)\n     // ASCII characters. Probably screwed up otherwise, but generated ids\n     // should only be used in testing anyways. In production this will be\n     // set from the document manager config.\n-    vespalib::asciistream ost;\n-    ost << name << \".0\";  // Hardcode version 0 (version is not supported).\n-    return crappyJavaStringHash(ost.str());\n+    char *bufOnStack = static_cast<char *>(alloca(name.size() + 2));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMyNTg0Mw=="}, "originalCommit": {"oid": "0a5c13aa1ab2117cfb5d70e13313426eb7f1a695"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1498, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}