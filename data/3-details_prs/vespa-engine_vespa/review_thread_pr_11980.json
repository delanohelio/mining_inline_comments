{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MDMzNzc3", "number": 11980, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTowNToxMlrODbQP5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTowNToxMlrODbQP5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTA0MzU3OnYy", "diffSide": "RIGHT", "path": "document/src/vespa/document/fieldvalue/serializablearray.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTowNToxMlrOFioZnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNToyMTowN1rOFipBcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1NzgyMw==", "bodyText": "Should _uncompSerData also be reset in this branch?", "url": "https://github.com/vespa-engine/vespa/pull/11980#discussion_r371857823", "createdAt": "2020-01-28T15:05:12Z", "author": {"login": "vekterli"}, "path": "document/src/vespa/document/fieldvalue/serializablearray.cpp", "diffHunk": "@@ -26,20 +26,19 @@ class BufferMap : public BufferMapT {\n \n }\n \n-SerializableArray::SerializableArray(EntryMap entries, ByteBuffer buffer,\n-                                     CompressionConfig::Type comp_type, uint32_t uncompressed_length)\n-    : _entries(std::move(entries)),\n-      _uncompSerData(),\n-      _unlikely()\n+void\n+SerializableArray::set(EntryMap entries, ByteBuffer buffer,\n+                       CompressionConfig::Type comp_type, uint32_t uncompressed_length)\n {\n-\n+    _entries = std::move(entries);\n     if (CompressionConfig::isCompressed(comp_type)) {\n         _unlikely = std::make_unique<RarelyUsedBuffers>();\n         _unlikely->_compSerData = std::move(buffer);\n         _unlikely->_serializedCompression = comp_type;\n         _unlikely->_uncompressedLength = uncompressed_length;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "489e9a99b1df2608413028e90e47cb3f4342ccfe"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg2ODAxOA==", "bodyText": "Yes, it should, even if the place this method is used, this is under control.", "url": "https://github.com/vespa-engine/vespa/pull/11980#discussion_r371868018", "createdAt": "2020-01-28T15:21:07Z", "author": {"login": "baldersheim"}, "path": "document/src/vespa/document/fieldvalue/serializablearray.cpp", "diffHunk": "@@ -26,20 +26,19 @@ class BufferMap : public BufferMapT {\n \n }\n \n-SerializableArray::SerializableArray(EntryMap entries, ByteBuffer buffer,\n-                                     CompressionConfig::Type comp_type, uint32_t uncompressed_length)\n-    : _entries(std::move(entries)),\n-      _uncompSerData(),\n-      _unlikely()\n+void\n+SerializableArray::set(EntryMap entries, ByteBuffer buffer,\n+                       CompressionConfig::Type comp_type, uint32_t uncompressed_length)\n {\n-\n+    _entries = std::move(entries);\n     if (CompressionConfig::isCompressed(comp_type)) {\n         _unlikely = std::make_unique<RarelyUsedBuffers>();\n         _unlikely->_compSerData = std::move(buffer);\n         _unlikely->_serializedCompression = comp_type;\n         _unlikely->_uncompressedLength = uncompressed_length;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1NzgyMw=="}, "originalCommit": {"oid": "489e9a99b1df2608413028e90e47cb3f4342ccfe"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2546, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}