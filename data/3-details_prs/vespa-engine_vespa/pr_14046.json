{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NDcwNjUx", "number": 14046, "title": "Use a vector backed set for speed.", "bodyText": "@havardpe PR\nSuperceeds #14042", "createdAt": "2020-08-13T15:45:55Z", "url": "https://github.com/vespa-engine/vespa/pull/14046", "merged": true, "mergeCommit": {"oid": "5fc7f6e157c4e8b04f3095a01e8e85653fc301f4"}, "closed": true, "closedAt": "2020-08-14T13:21:32Z", "author": {"login": "baldersheim"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-h5alAH2gAyNDY3NDcwNjUxOjdiZjVjNGQzNjMzMzQ5OTMxMzVmOWVkZjc3ZDliYmVkMzA2ZDAzZTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-0aADgH2gAyNDY3NDcwNjUxOmRmNWE1NzY3M2I3ODJhYjM2ZWY4ZDI0ODkzZDYwN2YwNDUxNDYwMGU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7bf5c4d363334993135f9edf77d9bbed306d03e4", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/7bf5c4d363334993135f9edf77d9bbed306d03e4", "committedDate": "2020-08-13T15:38:58Z", "message": "Use a vector backed set for speed."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NDk1Nzcz", "url": "https://github.com/vespa-engine/vespa/pull/14046#pullrequestreview-467495773", "createdAt": "2020-08-14T11:12:56Z", "commit": {"oid": "7bf5c4d363334993135f9edf77d9bbed306d03e4"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMToxMjo1NlrOHAw18A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMTozMTo0NlrOHAxTTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2MjI4OA==", "bodyText": "I would prefer 'add' over 'insert' here, since it implies less. Also, I would prefer 'push_back' over 'emplace_back' for values that already have the appropriate type.", "url": "https://github.com/vespa-engine/vespa/pull/14046#discussion_r470562288", "createdAt": "2020-08-14T11:12:56Z", "author": {"login": "havardpe"}, "path": "document/src/vespa/document/base/field.h", "diffHunk": "@@ -28,16 +28,35 @@ class Field final : public vespalib::FieldBase,\n     const DataType *_dataType;\n     int             _fieldId;\n public:\n-    typedef std::shared_ptr<const Field> CSP;\n-    typedef std::shared_ptr<Field> SP;\n+    using CSP = std::shared_ptr<const Field>;\n+    using SP = std::shared_ptr<Field>;\n+    using CPtr = const Field *;\n \n     struct FieldPtrComparator {\n-        bool operator()(const Field* f1, const Field* f2) const {\n+        bool operator()(CPtr f1, CPtr f2) const {\n             return (*f1 < *f2);\n         }\n     };\n \n-    using Set = std::set<const Field*, FieldPtrComparator>;\n+    class Set {\n+    public:\n+        class Builder {\n+        public:\n+            Builder & reserve(size_t sz) { _vector.reserve(sz); return *this; }\n+            Builder & insert(CPtr field) { _vector.emplace_back(field); return *this; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf5c4d363334993135f9edf77d9bbed306d03e4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2MzY2OA==", "bodyText": "consider doing unique as well, to ensure set property", "url": "https://github.com/vespa-engine/vespa/pull/14046#discussion_r470563668", "createdAt": "2020-08-14T11:16:23Z", "author": {"login": "havardpe"}, "path": "document/src/vespa/document/base/field.cpp", "diffHunk": "@@ -7,9 +7,21 @@\n #include <vespa/vespalib/util/exceptions.h>\n #include <vespa/vespalib/stllike/asciistream.h>\n #include <vespa/vespalib/util/bobhash.h>\n+#include <algorithm>\n \n namespace document {\n \n+Field::Set::Set(std::vector<CPtr> fields)\n+    : _fields(std::move(fields))\n+{\n+    std::sort(_fields.begin(), _fields.end(), Field::FieldPtrComparator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf5c4d363334993135f9edf77d9bbed306d03e4"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2NDcwNg==", "bodyText": "consider adding a contains taking a Field::Set as well since it can be implemented more efficiently using the std::includes function (compared to calling contains per field in the other set)", "url": "https://github.com/vespa-engine/vespa/pull/14046#discussion_r470564706", "createdAt": "2020-08-14T11:19:04Z", "author": {"login": "havardpe"}, "path": "document/src/vespa/document/base/field.h", "diffHunk": "@@ -28,16 +28,35 @@ class Field final : public vespalib::FieldBase,\n     const DataType *_dataType;\n     int             _fieldId;\n public:\n-    typedef std::shared_ptr<const Field> CSP;\n-    typedef std::shared_ptr<Field> SP;\n+    using CSP = std::shared_ptr<const Field>;\n+    using SP = std::shared_ptr<Field>;\n+    using CPtr = const Field *;\n \n     struct FieldPtrComparator {\n-        bool operator()(const Field* f1, const Field* f2) const {\n+        bool operator()(CPtr f1, CPtr f2) const {\n             return (*f1 < *f2);\n         }\n     };\n \n-    using Set = std::set<const Field*, FieldPtrComparator>;\n+    class Set {\n+    public:\n+        class Builder {\n+        public:\n+            Builder & reserve(size_t sz) { _vector.reserve(sz); return *this; }\n+            Builder & insert(CPtr field) { _vector.emplace_back(field); return *this; }\n+            Set build() { return Set(std::move(_vector)); }\n+        private:\n+            std::vector<CPtr> _vector;\n+        };\n+        bool contains(const Field & field) const;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf5c4d363334993135f9edf77d9bbed306d03e4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2NTM2Ng==", "bodyText": "this should be a function on the Field::Set (see other comment)", "url": "https://github.com/vespa-engine/vespa/pull/14046#discussion_r470565366", "createdAt": "2020-08-14T11:20:48Z", "author": {"login": "havardpe"}, "path": "document/src/vespa/document/fieldset/fieldsets.cpp", "diffHunk": "@@ -38,25 +39,10 @@ FieldCollection::contains(const FieldSet& fields) const\n {\n     switch (fields.getType()) {\n         case Type::FIELD:\n-            return _set.find(static_cast<const Field*>(&fields)) != _set.end();\n+            return _set.contains(static_cast<const Field &>(fields));\n         case Type::SET: {\n             const auto & coll = static_cast<const FieldCollection&>(fields);\n-\n-            if (_set.size() < coll._set.size()) {\n-                return false;\n-            }\n-\n-            auto iter = coll.getFields().begin();\n-\n-            while (iter != coll.getFields().end()) {\n-                if (_set.find(*iter) == _set.end()) {\n-                    return false;\n-                }\n-\n-                ++iter;\n-            }\n-\n-            return true;\n+            return std::includes(_set.begin(), _set.end(), coll.getFields().begin(), coll.getFields().end(), Field::FieldPtrComparator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf5c4d363334993135f9edf77d9bbed306d03e4"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2OTgwNA==", "bodyText": "consider adding a static convenience to make this case simpler.", "url": "https://github.com/vespa-engine/vespa/pull/14046#discussion_r470569804", "createdAt": "2020-08-14T11:31:46Z", "author": {"login": "havardpe"}, "path": "searchcore/src/vespa/searchcore/proton/server/documentretriever.cpp", "diffHunk": "@@ -82,14 +82,15 @@ ::DocumentRetriever(const DocTypeName &docTypeName,\n       _attr_manager(attr_manager),\n       _doc_store(doc_store),\n       _possiblePositionFields(),\n-      _attributeFields(),\n+      _attributeFields(document::Field::Set::Builder().build()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf5c4d363334993135f9edf77d9bbed306d03e4"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df5a57673b782ab36ef8d24893d607f04514600e", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/df5a57673b782ab36ef8d24893d607f04514600e", "committedDate": "2020-08-14T13:12:51Z", "message": "Make sure the entries in the set are unique.\nMake both a less and equal operator so std::unique can be used to.\nAdd and interface so that whole sets can be tested effectively if they are subsets."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4490, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}