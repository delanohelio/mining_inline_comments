{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3OTI3NjA3", "number": 15479, "title": "Bjorncs/support sanuri rules", "bodyText": "FYI @tokle", "createdAt": "2020-11-26T08:58:04Z", "url": "https://github.com/vespa-engine/vespa/pull/15479", "merged": true, "mergeCommit": {"oid": "4cc3bb164a730783a7534f5b6adc87737765b632"}, "closed": true, "closedAt": "2020-11-26T13:36:42Z", "author": {"login": "bjorncs"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgBSS5AH2gAyNTI3OTI3NjA3OjY0ZTk3ZDA5OWNiMzNjMzJhMWM4OTBlNzM0ZjUwYzY2NzAxYjE3YTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgTEU4AH2gAyNTI3OTI3NjA3OjhiMTY0MjczZjM5MjI4YjU2YWQ0NzVkMjU3ZDRjNjMxMWQ3YzE4Y2Y=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "64e97d099cb33c32a1c890e734f50c66701b17a6", "author": {"user": {"login": "bjorncs", "name": "Bj\u00f8rn Christian Seime"}}, "url": "https://github.com/vespa-engine/vespa/commit/64e97d099cb33c32a1c890e734f50c66701b17a6", "committedDate": "2020-11-25T16:52:42Z", "message": "Encapsulate pattern implementation in RequiredPeerCredential"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "340042594187f907968bac445bf2ae085fdb9d45", "author": {"user": {"login": "bjorncs", "name": "Bj\u00f8rn Christian Seime"}}, "url": "https://github.com/vespa-engine/vespa/commit/340042594187f907968bac445bf2ae085fdb9d45", "committedDate": "2020-11-25T17:15:07Z", "message": "Add convenience method for adding SAN"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3488082ed378f300c40328891e0ce8dcdd8c4475", "author": {"user": {"login": "bjorncs", "name": "Bj\u00f8rn Christian Seime"}}, "url": "https://github.com/vespa-engine/vespa/commit/3488082ed378f300c40328891e0ce8dcdd8c4475", "committedDate": "2020-11-26T08:57:06Z", "message": "Support SAN URI based rules in authorization policies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MzEyODY4", "url": "https://github.com/vespa-engine/vespa/pull/15479#pullrequestreview-539312868", "createdAt": "2020-11-26T13:25:56Z", "commit": {"oid": "3488082ed378f300c40328891e0ce8dcdd8c4475"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMzoyNTo1NlrOH6bXBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMzoyNTo1NlrOH6bXBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAyNzcxOQ==", "bodyText": "Consider adding a test of SAN URI mismatching as well", "url": "https://github.com/vespa-engine/vespa/pull/15479#discussion_r531027719", "createdAt": "2020-11-26T13:25:56Z", "author": {"login": "vekterli"}, "path": "security-utils/src/test/java/com/yahoo/security/tls/authz/PeerAuthorizerTest.java", "diffHunk": "@@ -91,12 +96,24 @@ public void must_match_all_cn_and_san_patterns() {\n         PeerAuthorizer peerAuthorizer = createPeerAuthorizer(\n                 createPolicy(POLICY_1, emptySet(), cnSuffixRequirement, cnPrefixRequirement, sanPrefixRequirement, sanSuffixRequirement));\n \n-        assertAuthorized(peerAuthorizer.authorizePeer(createCertificate(\"matching.prefix.matching.suffix.cn\", \"matching.prefix.matching.suffix.san\")));\n-        assertUnauthorized(peerAuthorizer.authorizePeer(createCertificate(\"matching.prefix.matching.suffix.cn\", \"matching.prefix.invalid.suffix.san\")));\n-        assertUnauthorized(peerAuthorizer.authorizePeer(createCertificate(\"invalid.prefix.matching.suffix.cn\", \"matching.prefix.matching.suffix.san\")));\n+        assertAuthorized(peerAuthorizer.authorizePeer(createCertificate(\"matching.prefix.matching.suffix.cn\", singletonList(\"matching.prefix.matching.suffix.san\"), emptyList())));\n+        assertUnauthorized(peerAuthorizer.authorizePeer(createCertificate(\"matching.prefix.matching.suffix.cn\", singletonList(\"matching.prefix.invalid.suffix.san\"), emptyList())));\n+        assertUnauthorized(peerAuthorizer.authorizePeer(createCertificate(\"invalid.prefix.matching.suffix.cn\", singletonList(\"matching.prefix.matching.suffix.san\"), emptyList())));\n     }\n \n-    private static X509Certificate createCertificate(String subjectCn, String... sanCns) {\n+    @Test\n+    public void can_exact_match_policy_with_san_uri_pattern() {\n+        RequiredPeerCredential cnRequirement = createRequiredCredential(CN, \"*.matching.cn\");\n+        RequiredPeerCredential sanUriRequirement = createRequiredCredential(SAN_URI, \"myscheme://my/exact/uri\");\n+        PeerAuthorizer authorizer = createPeerAuthorizer(createPolicy(POLICY_1, createRoles(ROLE_1), cnRequirement, sanUriRequirement));\n+\n+        AuthorizationResult result = authorizer.authorizePeer(createCertificate(\"foo.matching.cn\", singletonList(\"foo.irrelevant.san\"), singletonList(\"myscheme://my/exact/uri\")));\n+        assertAuthorized(result);\n+        assertThat(result.assumedRoles()).extracting(Role::name).containsOnly(ROLE_1);\n+        assertThat(result.matchedPolicies()).containsOnly(POLICY_1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3488082ed378f300c40328891e0ce8dcdd8c4475"}, "originalPosition": 88}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b164273f39228b56ad475d257d4c6311d7c18cf", "author": {"user": {"login": "bjorncs", "name": "Bj\u00f8rn Christian Seime"}}, "url": "https://github.com/vespa-engine/vespa/commit/8b164273f39228b56ad475d257d4c6311d7c18cf", "committedDate": "2020-11-26T13:35:44Z", "message": "Test that certificate with non-matching SAN URI is rejected"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1893, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}