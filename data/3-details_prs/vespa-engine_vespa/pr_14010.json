{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0NTgyMzgw", "number": 14010, "title": "- Change APi for fetching documents to support optimal document retri\u2026", "bodyText": "\u2026val when everything is available in memory.\n\nWhen all fields are present only in attributes, only access the fields that are required.\n\n@havardpe PR\n@geirst @vekterli @toregge FYI", "createdAt": "2020-08-07T12:40:00Z", "url": "https://github.com/vespa-engine/vespa/pull/14010", "merged": true, "mergeCommit": {"oid": "165a08ea5331737f21c0f68d0b031acce9871c58"}, "closed": true, "closedAt": "2020-08-12T14:41:38Z", "author": {"login": "baldersheim"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8jq_DAH2gAyNDY0NTgyMzgwOjdhZjA5NjU3ZWQzODIyMTZiMzQwNmUyNmM2Zjc5YmI0M2JhMDkwZTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-LJa_AFqTQ2NTg5ODE3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7af09657ed382216b3406e26c6f79bb43ba090e3", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/7af09657ed382216b3406e26c6f79bb43ba090e3", "committedDate": "2020-08-07T12:35:10Z", "message": "- Change APi for fetching documents to support optimal document retrival when everything is available in memory.\n- When all fields are present only in attributes, only access the fields that are required."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MDMwMTEw", "url": "https://github.com/vespa-engine/vespa/pull/14010#pullrequestreview-465030110", "createdAt": "2020-08-11T12:48:24Z", "commit": {"oid": "7af09657ed382216b3406e26c6f79bb43ba090e3"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjo0ODoyNFrOG-2NBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzozOToxOVrOG-4Osw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1Mjk2Nw==", "bodyText": "getFullDocument?", "url": "https://github.com/vespa-engine/vespa/pull/14010#discussion_r468552967", "createdAt": "2020-08-11T12:48:24Z", "author": {"login": "havardpe"}, "path": "searchcore/src/vespa/searchcore/proton/persistenceengine/i_document_retriever.h", "diffHunk": "@@ -32,10 +32,17 @@ class IDocumentRetriever\n \n     virtual ~IDocumentRetriever() = default;\n \n-    virtual const document::DocumentTypeRepo &getDocumentTypeRepo() const = 0;\n+    virtual const document::DocumentTypeRepo & getDocumentTypeRepo() const = 0;\n     virtual void getBucketMetaData(const storage::spi::Bucket &bucket, search::DocumentMetaData::Vector &result) const = 0;\n     virtual search::DocumentMetaData getDocumentMetaData(const document::DocumentId &id) const = 0;\n-    virtual DocumentUP getDocument(search::DocumentIdT lid) const = 0;\n+    /**\n+     * Extracts the full document based on the LID\n+     */\n+    virtual DocumentUP getDocumentByLidOnly(search::DocumentIdT lid) const = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af09657ed382216b3406e26c6f79bb43ba090e3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1MzE2Nw==", "bodyText": "getPartialDocument?", "url": "https://github.com/vespa-engine/vespa/pull/14010#discussion_r468553167", "createdAt": "2020-08-11T12:48:41Z", "author": {"login": "havardpe"}, "path": "searchcore/src/vespa/searchcore/proton/persistenceengine/i_document_retriever.h", "diffHunk": "@@ -32,10 +32,17 @@ class IDocumentRetriever\n \n     virtual ~IDocumentRetriever() = default;\n \n-    virtual const document::DocumentTypeRepo &getDocumentTypeRepo() const = 0;\n+    virtual const document::DocumentTypeRepo & getDocumentTypeRepo() const = 0;\n     virtual void getBucketMetaData(const storage::spi::Bucket &bucket, search::DocumentMetaData::Vector &result) const = 0;\n     virtual search::DocumentMetaData getDocumentMetaData(const document::DocumentId &id) const = 0;\n-    virtual DocumentUP getDocument(search::DocumentIdT lid) const = 0;\n+    /**\n+     * Extracts the full document based on the LID\n+     */\n+    virtual DocumentUP getDocumentByLidOnly(search::DocumentIdT lid) const = 0;\n+    /**\n+     * Fetches the necessary set of fields, allowing for more optimal fetch when combining only from attributes.\n+     */\n+    virtual DocumentUP getDocument(search::DocumentIdT lid, const document::DocumentId & docId, const document::FieldSet & fieldSet) const = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af09657ed382216b3406e26c6f79bb43ba090e3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU2MjI3OA==", "bodyText": "not sure how much convenience should be in the API, but if there is convenience, consider adding the default implementation of get(Partial)Document as well, to get rid of duplication.", "url": "https://github.com/vespa-engine/vespa/pull/14010#discussion_r468562278", "createdAt": "2020-08-11T13:03:38Z", "author": {"login": "havardpe"}, "path": "searchcore/src/vespa/searchcore/proton/persistenceengine/i_document_retriever.h", "diffHunk": "@@ -47,13 +54,17 @@ class IDocumentRetriever\n     virtual void visitDocuments(const LidVector &lids, search::IDocumentVisitor &visitor, ReadConsistency readConsistency) const = 0;\n \n     virtual CachedSelect::SP parseSelect(const vespalib::string &selection) const = 0;\n+\n+    // Convenience to get all fields\n+    DocumentUP getDocument(search::DocumentIdT lid, const document::DocumentId & docId) const;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af09657ed382216b3406e26c6f79bb43ba090e3"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3MDQ5MQ==", "bodyText": "seems to always be set to false", "url": "https://github.com/vespa-engine/vespa/pull/14010#discussion_r468570491", "createdAt": "2020-08-11T13:16:27Z", "author": {"login": "havardpe"}, "path": "searchcore/src/vespa/searchcore/proton/server/documentretriever.h", "diffHunk": "@@ -25,15 +25,26 @@ class DocumentRetriever : public DocumentRetrieverBase {\n                       const search::IDocumentStore &doc_store);\n     ~DocumentRetriever() override;\n \n-    document::Document::UP getDocument(search::DocumentIdT lid) const override;\n+    document::Document::UP getDocumentByLidOnly(search::DocumentIdT lid) const override;\n     void visitDocuments(const LidVector & lids, search::IDocumentVisitor & visitor, ReadConsistency) const override;\n+    DocumentUP getDocument(search::DocumentIdT lid, const document::DocumentId &, const document::FieldSet &) const override;\n     void populate(search::DocumentIdT lid, document::Document & doc) const;\n+    bool needFetchFromDocStore(const document::FieldSet &) const;\n private:\n+    using FieldSetAttributeMap = vespalib::hash_map<uint64_t, bool>;\n+    bool needFetchFromDocStore(uint64_t key, const document::Field &) const;\n+    bool needFetchFromDocStore(uint64_t key, const document::Field::Set &) const;\n+    void populate(search::DocumentIdT lid, document::Document & doc, const document::Field::Set & attributeFields) const;\n+\n+    bool isFieldAttribute(const document::Field & field) const;\n     const search::index::Schema     &_schema;\n     const search::IAttributeManager &_attr_manager;\n     const search::IDocumentStore    &_doc_store;\n     PositionFields                   _possiblePositionFields;\n-    AttributeFields                  _attributeFields;\n+    document::Field::Set             _attributeFields;\n+    bool                             _areAllFieldsAttributes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af09657ed382216b3406e26c6f79bb43ba090e3"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU3OTQyMg==", "bodyText": "please remove", "url": "https://github.com/vespa-engine/vespa/pull/14010#discussion_r468579422", "createdAt": "2020-08-11T13:29:37Z", "author": {"login": "havardpe"}, "path": "searchcore/src/vespa/searchcore/proton/server/documentretriever.cpp", "diffHunk": "@@ -73,13 +77,82 @@ ::DocumentRetriever(const DocTypeName &docTypeName,\n         } else {\n             const vespalib::string &name = field->getName();\n             AttributeGuard::UP attr = attr_manager.getAttribute(name);\n-            if (attr && attr->valid()) {\n-                _attributeFields.emplace_back(field);\n+            if (attr && attr->valid()\n+                && !_schema.isIndexField(field->getName())\n+                && ((*attr)->getBasicType() != BasicType::PREDICATE)\n+                && ((*attr)->getBasicType() != BasicType::REFERENCE))\n+            {\n+                _attributeFields.insert(field);\n             }\n         }\n     }\n }\n \n+bool\n+DocumentRetriever::needFetchFromDocStore(const document::FieldSet & fieldSet) const {\n+    switch (fieldSet.getType()) {\n+        case document::FieldSet::Type::NONE:\n+            return false;\n+        case document::FieldSet::Type::DOCID:\n+            return false;\n+        case document::FieldSet::Type::ALL:\n+            return ! _areAllFieldsAttributes;\n+        case document::FieldSet::Type::FIELD: {\n+            const auto & field = static_cast<const document::Field &>(fieldSet);\n+            return needFetchFromDocStore(field.getId(), field);\n+        }\n+        case document::FieldSet::Type::SET: {\n+            const auto &set = static_cast<const document::FieldCollection &>(fieldSet);\n+            return needFetchFromDocStore(set.hash(), set.getFields());\n+        }\n+        default:\n+            abort();\n+    }\n+}\n+\n+bool\n+DocumentRetriever::isFieldAttribute(const document::Field & field) const {\n+    return _attributeFields.find(&field) != _attributeFields.end();\n+#if 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af09657ed382216b3406e26c6f79bb43ba090e3"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4NjE2Mw==", "bodyText": "if this is actually useful/needed, please refactor into a separate class telling us if a specific field set is a superset of other field sets or not. How much faster is it to take a lock compared to looking up a set of strings in an immutable hash table?", "url": "https://github.com/vespa-engine/vespa/pull/14010#discussion_r468586163", "createdAt": "2020-08-11T13:39:19Z", "author": {"login": "havardpe"}, "path": "searchcore/src/vespa/searchcore/proton/server/documentretriever.h", "diffHunk": "@@ -25,15 +25,26 @@ class DocumentRetriever : public DocumentRetrieverBase {\n                       const search::IDocumentStore &doc_store);\n     ~DocumentRetriever() override;\n \n-    document::Document::UP getDocument(search::DocumentIdT lid) const override;\n+    document::Document::UP getDocumentByLidOnly(search::DocumentIdT lid) const override;\n     void visitDocuments(const LidVector & lids, search::IDocumentVisitor & visitor, ReadConsistency) const override;\n+    DocumentUP getDocument(search::DocumentIdT lid, const document::DocumentId &, const document::FieldSet &) const override;\n     void populate(search::DocumentIdT lid, document::Document & doc) const;\n+    bool needFetchFromDocStore(const document::FieldSet &) const;\n private:\n+    using FieldSetAttributeMap = vespalib::hash_map<uint64_t, bool>;\n+    bool needFetchFromDocStore(uint64_t key, const document::Field &) const;\n+    bool needFetchFromDocStore(uint64_t key, const document::Field::Set &) const;\n+    void populate(search::DocumentIdT lid, document::Document & doc, const document::Field::Set & attributeFields) const;\n+\n+    bool isFieldAttribute(const document::Field & field) const;\n     const search::index::Schema     &_schema;\n     const search::IAttributeManager &_attr_manager;\n     const search::IDocumentStore    &_doc_store;\n     PositionFields                   _possiblePositionFields;\n-    AttributeFields                  _attributeFields;\n+    document::Field::Set             _attributeFields;\n+    bool                             _areAllFieldsAttributes;\n+    mutable FieldSetAttributeMap     _isFieldSetAttributeOnly;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af09657ed382216b3406e26c6f79bb43ba090e3"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be4d955b8bc9ab94d8ed1b72b03d5a112e196da2", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/be4d955b8bc9ab94d8ed1b72b03d5a112e196da2", "committedDate": "2020-08-12T11:58:14Z", "message": "Follow up of PR comment with renaming and refactoring."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1ODk4MTc5", "url": "https://github.com/vespa-engine/vespa/pull/14010#pullrequestreview-465898179", "createdAt": "2020-08-12T13:08:38Z", "commit": {"oid": "be4d955b8bc9ab94d8ed1b72b03d5a112e196da2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4476, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}