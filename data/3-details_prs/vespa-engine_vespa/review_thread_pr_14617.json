{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0NzQ0MjUx", "number": 14617, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjoxMzozMlrOEohQXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjoxMzozMlrOEohQXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwOTIzMzU2OnYy", "diffSide": "RIGHT", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/NodeFailer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjoxMzozMlrOHZqHHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjoxMzozMlrOHZqHHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY2NjM5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // Already recorded as down, nothing to do\n          \n          \n            \n                        // Already correct record, nothing to do", "url": "https://github.com/vespa-engine/vespa/pull/14617#discussion_r496666396", "createdAt": "2020-09-29T12:13:32Z", "author": {"login": "hakonhall"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/NodeFailer.java", "diffHunk": "@@ -187,27 +188,29 @@ private void updateNodeLivenessEventsForReadyNodes(Mutex lock) {\n      * Otherwise we remove any \"down\" history record.\n      */\n     private void updateNodeDownState() {\n-        Map<String, Node> activeNodesByHostname = nodeRepository().getNodes(Node.State.active).stream()\n-                .collect(Collectors.toMap(Node::hostname, node -> node));\n-\n-        serviceMonitor.getServiceModelSnapshot().getServiceInstancesByHostName()\n-                .forEach((hostName, serviceInstances) -> {\n-                    Node node = activeNodesByHostname.get(hostName.s());\n-                    if (node == null) return;\n-                    try (var lock = nodeRepository().lock(node.allocation().get().owner())) {\n-                        Optional<Node> currentNode = nodeRepository().getNode(node.hostname(), Node.State.active); // re-get inside lock\n-                        if (currentNode.isEmpty()) return; // Node disappeared since acquiring lock\n-                        node = currentNode.get();\n-                        if (badNode(serviceInstances)) {\n-                            recordAsDown(node, lock);\n-                        } else {\n-                            clearDownRecord(node, lock);\n-                        }\n-                    }\n-                    catch (UncheckedTimeoutException e) {\n-                        // Ignore - node may be locked on this round due to deployment\n-                    }\n-                });\n+        NodeList activeNodes = NodeList.copyOf(nodeRepository().getNodes(Node.State.active));\n+        serviceMonitor.getServiceModelSnapshot().getServiceInstancesByHostName().forEach((hostname, serviceInstances) -> {\n+            Optional<Node> node = activeNodes.matching(n -> n.hostname().equals(hostname.toString())).first();\n+            if (node.isEmpty()) return;\n+\n+            // Already recorded as down, nothing to do", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "436e340e6d23e5d5f85ba54a5baca3fbce37a903"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1256, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}