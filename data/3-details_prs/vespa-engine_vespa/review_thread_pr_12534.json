{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2Njk1NDUy", "number": 12534, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNToyMDoyNlrODngpeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNToyMTozN1rODngrew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzU1OTYyOnYy", "diffSide": "RIGHT", "path": "container-core/src/main/java/com/yahoo/container/jdisc/ThreadedRequestHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNToyMDoyNlrOF1jNqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDo1MjowMFrOF1_VeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY5NTc4NA==", "bodyText": "What is the difference between Map.of() and Collections.emptyMap()?", "url": "https://github.com/vespa-engine/vespa/pull/12534#discussion_r391695784", "createdAt": "2020-03-12T15:20:26Z", "author": {"login": "gjoranv"}, "path": "container-core/src/main/java/com/yahoo/container/jdisc/ThreadedRequestHandler.java", "diffHunk": "@@ -97,9 +97,12 @@ protected ThreadedRequestHandler(Executor executor, Metric metric, boolean allow\n         dimensions.put(\"port\", Integer.toString(uri.getPort()));\n         String handlerClassName = getClass().getName();\n         dimensions.put(\"handler-name\", handlerClassName);\n+        dimensions.putAll(extraDimensions);\n         return this.metric.createContext(dimensions);\n     }\n \n+    private Metric.Context contextFor(Request request) { return contextFor(request, Map.of()); }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65cf2af452d0fcdae24e3a212cf9cb8019793ba2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0Njc4Ng==", "bodyText": "Map.of() was introduced in Java 9. The returned Map instance from both have the same semantics (immutable etc). I prefer the new syntax as it is shorter.", "url": "https://github.com/vespa-engine/vespa/pull/12534#discussion_r392146786", "createdAt": "2020-03-13T10:31:16Z", "author": {"login": "bjorncs"}, "path": "container-core/src/main/java/com/yahoo/container/jdisc/ThreadedRequestHandler.java", "diffHunk": "@@ -97,9 +97,12 @@ protected ThreadedRequestHandler(Executor executor, Metric metric, boolean allow\n         dimensions.put(\"port\", Integer.toString(uri.getPort()));\n         String handlerClassName = getClass().getName();\n         dimensions.put(\"handler-name\", handlerClassName);\n+        dimensions.putAll(extraDimensions);\n         return this.metric.createContext(dimensions);\n     }\n \n+    private Metric.Context contextFor(Request request) { return contextFor(request, Map.of()); }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY5NTc4NA=="}, "originalCommit": {"oid": "65cf2af452d0fcdae24e3a212cf9cb8019793ba2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0OTE1MQ==", "bodyText": "When you static import the emptyMap() function, I think that is more describing and almost as short. But this is just nit of course. :)", "url": "https://github.com/vespa-engine/vespa/pull/12534#discussion_r392149151", "createdAt": "2020-03-13T10:36:14Z", "author": {"login": "gjoranv"}, "path": "container-core/src/main/java/com/yahoo/container/jdisc/ThreadedRequestHandler.java", "diffHunk": "@@ -97,9 +97,12 @@ protected ThreadedRequestHandler(Executor executor, Metric metric, boolean allow\n         dimensions.put(\"port\", Integer.toString(uri.getPort()));\n         String handlerClassName = getClass().getName();\n         dimensions.put(\"handler-name\", handlerClassName);\n+        dimensions.putAll(extraDimensions);\n         return this.metric.createContext(dimensions);\n     }\n \n+    private Metric.Context contextFor(Request request) { return contextFor(request, Map.of()); }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY5NTc4NA=="}, "originalCommit": {"oid": "65cf2af452d0fcdae24e3a212cf9cb8019793ba2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE1NjUzNg==", "bodyText": "Agree - if static import is used emptyMap() is more readable \ud83d\udc4d", "url": "https://github.com/vespa-engine/vespa/pull/12534#discussion_r392156536", "createdAt": "2020-03-13T10:52:00Z", "author": {"login": "bjorncs"}, "path": "container-core/src/main/java/com/yahoo/container/jdisc/ThreadedRequestHandler.java", "diffHunk": "@@ -97,9 +97,12 @@ protected ThreadedRequestHandler(Executor executor, Metric metric, boolean allow\n         dimensions.put(\"port\", Integer.toString(uri.getPort()));\n         String handlerClassName = getClass().getName();\n         dimensions.put(\"handler-name\", handlerClassName);\n+        dimensions.putAll(extraDimensions);\n         return this.metric.createContext(dimensions);\n     }\n \n+    private Metric.Context contextFor(Request request) { return contextFor(request, Map.of()); }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY5NTc4NA=="}, "originalCommit": {"oid": "65cf2af452d0fcdae24e3a212cf9cb8019793ba2"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzU2NDc1OnYy", "diffSide": "RIGHT", "path": "container-core/src/main/java/com/yahoo/container/jdisc/ThreadedHttpRequestHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNToyMTozN1rOF1jQzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDozNjozMVrOF1-5IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY5NjU5MA==", "bodyText": "Shouldn't it be ..unhandled_exceptions with the plural 's'? If so, also rename the constant.", "url": "https://github.com/vespa-engine/vespa/pull/12534#discussion_r391696590", "createdAt": "2020-03-12T15:21:37Z", "author": {"login": "gjoranv"}, "path": "container-core/src/main/java/com/yahoo/container/jdisc/ThreadedHttpRequestHandler.java", "diffHunk": "@@ -31,6 +32,7 @@\n \n     public static final String CONTENT_TYPE = \"Content-Type\";\n     private static final String RENDERING_ERRORS = \"rendering_errors\";\n+    private static final String UNHANDLED_EXCEPTION_METRIC = \"jdisc.http.handler.unhandled_exception\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "010535d2d5695c4b5bf08976982640a9cee7ec47"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0Njk5OA==", "bodyText": "Agree - plural sounds better. I will update the PR with a rename.", "url": "https://github.com/vespa-engine/vespa/pull/12534#discussion_r392146998", "createdAt": "2020-03-13T10:31:42Z", "author": {"login": "bjorncs"}, "path": "container-core/src/main/java/com/yahoo/container/jdisc/ThreadedHttpRequestHandler.java", "diffHunk": "@@ -31,6 +32,7 @@\n \n     public static final String CONTENT_TYPE = \"Content-Type\";\n     private static final String RENDERING_ERRORS = \"rendering_errors\";\n+    private static final String UNHANDLED_EXCEPTION_METRIC = \"jdisc.http.handler.unhandled_exception\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY5NjU5MA=="}, "originalCommit": {"oid": "010535d2d5695c4b5bf08976982640a9cee7ec47"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0OTI4MQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/vespa-engine/vespa/pull/12534#discussion_r392149281", "createdAt": "2020-03-13T10:36:31Z", "author": {"login": "gjoranv"}, "path": "container-core/src/main/java/com/yahoo/container/jdisc/ThreadedHttpRequestHandler.java", "diffHunk": "@@ -31,6 +32,7 @@\n \n     public static final String CONTENT_TYPE = \"Content-Type\";\n     private static final String RENDERING_ERRORS = \"rendering_errors\";\n+    private static final String UNHANDLED_EXCEPTION_METRIC = \"jdisc.http.handler.unhandled_exception\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY5NjU5MA=="}, "originalCommit": {"oid": "010535d2d5695c4b5bf08976982640a9cee7ec47"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2244, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}