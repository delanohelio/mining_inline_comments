{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MTA4MDk4", "number": 15488, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNToyMTo0NVrOE9rYRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNToyMzozNVrOE9ra6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTA5MzE3OnYy", "diffSide": "RIGHT", "path": "flags/src/main/java/com/yahoo/vespa/flags/custom/ClusterCapacity.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNToyMTo0NVrOH6fpAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzoxMTowMlrOH6zJDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA5Nzg1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            ((bandwidthGbps.isEmpty() && that.bandwidthGbps.isEmpty()) ||\n          \n          \n            \n                                    ((bandwidthGbps.isPresent() && that.bandwidthGbps.isPresent() &&\n          \n          \n            \n                                            Double.compare(that.bandwidthGbps.get(), bandwidthGbps.get()) == 0)));\n          \n          \n            \n                            bandwidthGbps.equals(that.bandwidthGbps);", "url": "https://github.com/vespa-engine/vespa/pull/15488#discussion_r531097859", "createdAt": "2020-11-26T15:21:45Z", "author": {"login": "freva"}, "path": "flags/src/main/java/com/yahoo/vespa/flags/custom/ClusterCapacity.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.flags.custom;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonGetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * @author freva\n+ */\n+// @Immutable\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(value = JsonInclude.Include.NON_NULL)\n+public class ClusterCapacity {\n+    private final int count;\n+    private final double vcpu;\n+    private final double memoryGb;\n+    private final double diskGb;\n+    private final Optional<Double> bandwidthGbps;\n+\n+    @JsonCreator\n+    public ClusterCapacity(@JsonProperty(\"count\") int count,\n+                           @JsonProperty(\"vcpu\") double vcpu,\n+                           @JsonProperty(\"memoryGb\") double memoryGb,\n+                           @JsonProperty(\"diskGb\") double diskGb,\n+                           @JsonProperty(\"bandwidthGbps\") Double bandwidthGbps) {\n+        this.count = (int) requireNonNegative(\"count\", count);\n+        this.vcpu = requireNonNegative(\"vcpu\", vcpu);\n+        this.memoryGb = requireNonNegative(\"memoryGb\", memoryGb);\n+        this.diskGb = requireNonNegative(\"diskGb\", diskGb);\n+        this.bandwidthGbps = Optional.ofNullable(bandwidthGbps);\n+    }\n+\n+    /** Returns a new ClusterCapacity equal to {@code this}, but with the given count. */\n+    public ClusterCapacity withCount(int count) {\n+        return new ClusterCapacity(count, vcpu, memoryGb, diskGb, bandwidthGbps.orElse(null));\n+    }\n+\n+    @JsonGetter(\"count\") public int count() { return count; }\n+    @JsonGetter(\"vcpu\") public double vcpu() { return vcpu; }\n+    @JsonGetter(\"memoryGb\") public double memoryGb() { return memoryGb; }\n+    @JsonGetter(\"diskGb\") public double diskGb() { return diskGb; }\n+    @JsonGetter(\"bandwidthGbps\") public Double bandwidthGbpsOrNull() { return bandwidthGbps.orElse(null); }\n+\n+    @JsonIgnore\n+    public double bandwidthGbps() { return bandwidthGbps.orElse(1.0); }\n+\n+    @Override\n+    public String toString() {\n+        return \"ClusterCapacity{\" +\n+                \"count=\" + count +\n+                \", vcpu=\" + vcpu +\n+                \", memoryGb=\" + memoryGb +\n+                \", diskGb=\" + diskGb +\n+                \", bandwidthGbps=\" + bandwidthGbps +\n+                '}';\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        ClusterCapacity that = (ClusterCapacity) o;\n+        return count == that.count &&\n+                Double.compare(that.vcpu, vcpu) == 0 &&\n+                Double.compare(that.memoryGb, memoryGb) == 0 &&\n+                Double.compare(that.diskGb, diskGb) == 0 &&\n+                ((bandwidthGbps.isEmpty() && that.bandwidthGbps.isEmpty()) ||\n+                        ((bandwidthGbps.isPresent() && that.bandwidthGbps.isPresent() &&\n+                                Double.compare(that.bandwidthGbps.get(), bandwidthGbps.get()) == 0)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6e727e30087e321911aa240fee03053cc22b1f4"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQxNzM1Ng==", "bodyText": "I decided to use Double.compare because it was used to test for equality by the auto-generated code for all the double fields.  According to Effective Java, Double.compare should be used to compare doubles to 1. take care of +/- 0.0 and NaN and 2. to avoid auto-boxing.  With Optional (2) is not relevant.\nI switched to using OptionalDouble which uses Double.compare in equals.", "url": "https://github.com/vespa-engine/vespa/pull/15488#discussion_r531417356", "createdAt": "2020-11-27T07:11:02Z", "author": {"login": "hakonhall"}, "path": "flags/src/main/java/com/yahoo/vespa/flags/custom/ClusterCapacity.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.flags.custom;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonGetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * @author freva\n+ */\n+// @Immutable\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(value = JsonInclude.Include.NON_NULL)\n+public class ClusterCapacity {\n+    private final int count;\n+    private final double vcpu;\n+    private final double memoryGb;\n+    private final double diskGb;\n+    private final Optional<Double> bandwidthGbps;\n+\n+    @JsonCreator\n+    public ClusterCapacity(@JsonProperty(\"count\") int count,\n+                           @JsonProperty(\"vcpu\") double vcpu,\n+                           @JsonProperty(\"memoryGb\") double memoryGb,\n+                           @JsonProperty(\"diskGb\") double diskGb,\n+                           @JsonProperty(\"bandwidthGbps\") Double bandwidthGbps) {\n+        this.count = (int) requireNonNegative(\"count\", count);\n+        this.vcpu = requireNonNegative(\"vcpu\", vcpu);\n+        this.memoryGb = requireNonNegative(\"memoryGb\", memoryGb);\n+        this.diskGb = requireNonNegative(\"diskGb\", diskGb);\n+        this.bandwidthGbps = Optional.ofNullable(bandwidthGbps);\n+    }\n+\n+    /** Returns a new ClusterCapacity equal to {@code this}, but with the given count. */\n+    public ClusterCapacity withCount(int count) {\n+        return new ClusterCapacity(count, vcpu, memoryGb, diskGb, bandwidthGbps.orElse(null));\n+    }\n+\n+    @JsonGetter(\"count\") public int count() { return count; }\n+    @JsonGetter(\"vcpu\") public double vcpu() { return vcpu; }\n+    @JsonGetter(\"memoryGb\") public double memoryGb() { return memoryGb; }\n+    @JsonGetter(\"diskGb\") public double diskGb() { return diskGb; }\n+    @JsonGetter(\"bandwidthGbps\") public Double bandwidthGbpsOrNull() { return bandwidthGbps.orElse(null); }\n+\n+    @JsonIgnore\n+    public double bandwidthGbps() { return bandwidthGbps.orElse(1.0); }\n+\n+    @Override\n+    public String toString() {\n+        return \"ClusterCapacity{\" +\n+                \"count=\" + count +\n+                \", vcpu=\" + vcpu +\n+                \", memoryGb=\" + memoryGb +\n+                \", diskGb=\" + diskGb +\n+                \", bandwidthGbps=\" + bandwidthGbps +\n+                '}';\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        ClusterCapacity that = (ClusterCapacity) o;\n+        return count == that.count &&\n+                Double.compare(that.vcpu, vcpu) == 0 &&\n+                Double.compare(that.memoryGb, memoryGb) == 0 &&\n+                Double.compare(that.diskGb, diskGb) == 0 &&\n+                ((bandwidthGbps.isEmpty() && that.bandwidthGbps.isEmpty()) ||\n+                        ((bandwidthGbps.isPresent() && that.bandwidthGbps.isPresent() &&\n+                                Double.compare(that.bandwidthGbps.get(), bandwidthGbps.get()) == 0)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA5Nzg1OQ=="}, "originalCommit": {"oid": "d6e727e30087e321911aa240fee03053cc22b1f4"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTA5NTA4OnYy", "diffSide": "RIGHT", "path": "flags/src/main/java/com/yahoo/vespa/flags/custom/ClusterCapacity.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNToyMjoxMVrOH6fqCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzozMzoxMFrOH6zl6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA5ODEyMQ==", "bodyText": "Add optional disk speed and storage type?", "url": "https://github.com/vespa-engine/vespa/pull/15488#discussion_r531098121", "createdAt": "2020-11-26T15:22:11Z", "author": {"login": "freva"}, "path": "flags/src/main/java/com/yahoo/vespa/flags/custom/ClusterCapacity.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.flags.custom;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonGetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * @author freva\n+ */\n+// @Immutable\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(value = JsonInclude.Include.NON_NULL)\n+public class ClusterCapacity {\n+    private final int count;\n+    private final double vcpu;\n+    private final double memoryGb;\n+    private final double diskGb;\n+    private final Optional<Double> bandwidthGbps;\n+\n+    @JsonCreator\n+    public ClusterCapacity(@JsonProperty(\"count\") int count,\n+                           @JsonProperty(\"vcpu\") double vcpu,\n+                           @JsonProperty(\"memoryGb\") double memoryGb,\n+                           @JsonProperty(\"diskGb\") double diskGb,\n+                           @JsonProperty(\"bandwidthGbps\") Double bandwidthGbps) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6e727e30087e321911aa240fee03053cc22b1f4"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQxOTA3MA==", "bodyText": "I'll pass on this - DiskSpeed and StorageType are not available in flags, so I would have to verify validity of String values and still pass through null (to signify defaults) or duplicate defaults.", "url": "https://github.com/vespa-engine/vespa/pull/15488#discussion_r531419070", "createdAt": "2020-11-27T07:16:19Z", "author": {"login": "hakonhall"}, "path": "flags/src/main/java/com/yahoo/vespa/flags/custom/ClusterCapacity.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.flags.custom;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonGetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * @author freva\n+ */\n+// @Immutable\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(value = JsonInclude.Include.NON_NULL)\n+public class ClusterCapacity {\n+    private final int count;\n+    private final double vcpu;\n+    private final double memoryGb;\n+    private final double diskGb;\n+    private final Optional<Double> bandwidthGbps;\n+\n+    @JsonCreator\n+    public ClusterCapacity(@JsonProperty(\"count\") int count,\n+                           @JsonProperty(\"vcpu\") double vcpu,\n+                           @JsonProperty(\"memoryGb\") double memoryGb,\n+                           @JsonProperty(\"diskGb\") double diskGb,\n+                           @JsonProperty(\"bandwidthGbps\") Double bandwidthGbps) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA5ODEyMQ=="}, "originalCommit": {"oid": "d6e727e30087e321911aa240fee03053cc22b1f4"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNDc0Nw==", "bodyText": "We got HostResources that almost does this, but specifies a container count in addition.  Whereas ClusterCapacity is a count of nodes plus NodeResources. So ClusterCapacity and HostResources are practically equal...", "url": "https://github.com/vespa-engine/vespa/pull/15488#discussion_r531424747", "createdAt": "2020-11-27T07:33:10Z", "author": {"login": "hakonhall"}, "path": "flags/src/main/java/com/yahoo/vespa/flags/custom/ClusterCapacity.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.flags.custom;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonGetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * @author freva\n+ */\n+// @Immutable\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(value = JsonInclude.Include.NON_NULL)\n+public class ClusterCapacity {\n+    private final int count;\n+    private final double vcpu;\n+    private final double memoryGb;\n+    private final double diskGb;\n+    private final Optional<Double> bandwidthGbps;\n+\n+    @JsonCreator\n+    public ClusterCapacity(@JsonProperty(\"count\") int count,\n+                           @JsonProperty(\"vcpu\") double vcpu,\n+                           @JsonProperty(\"memoryGb\") double memoryGb,\n+                           @JsonProperty(\"diskGb\") double diskGb,\n+                           @JsonProperty(\"bandwidthGbps\") Double bandwidthGbps) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA5ODEyMQ=="}, "originalCommit": {"oid": "d6e727e30087e321911aa240fee03053cc22b1f4"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTA5OTk1OnYy", "diffSide": "RIGHT", "path": "flags/src/main/java/com/yahoo/vespa/flags/custom/ClusterCapacity.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNToyMzozNVrOH6fs-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNjo0Mjo1MlrOH6ymsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA5ODg3Mg==", "bodyText": "Default is 0.3", "url": "https://github.com/vespa-engine/vespa/pull/15488#discussion_r531098872", "createdAt": "2020-11-26T15:23:35Z", "author": {"login": "freva"}, "path": "flags/src/main/java/com/yahoo/vespa/flags/custom/ClusterCapacity.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.flags.custom;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonGetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * @author freva\n+ */\n+// @Immutable\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(value = JsonInclude.Include.NON_NULL)\n+public class ClusterCapacity {\n+    private final int count;\n+    private final double vcpu;\n+    private final double memoryGb;\n+    private final double diskGb;\n+    private final Optional<Double> bandwidthGbps;\n+\n+    @JsonCreator\n+    public ClusterCapacity(@JsonProperty(\"count\") int count,\n+                           @JsonProperty(\"vcpu\") double vcpu,\n+                           @JsonProperty(\"memoryGb\") double memoryGb,\n+                           @JsonProperty(\"diskGb\") double diskGb,\n+                           @JsonProperty(\"bandwidthGbps\") Double bandwidthGbps) {\n+        this.count = (int) requireNonNegative(\"count\", count);\n+        this.vcpu = requireNonNegative(\"vcpu\", vcpu);\n+        this.memoryGb = requireNonNegative(\"memoryGb\", memoryGb);\n+        this.diskGb = requireNonNegative(\"diskGb\", diskGb);\n+        this.bandwidthGbps = Optional.ofNullable(bandwidthGbps);\n+    }\n+\n+    /** Returns a new ClusterCapacity equal to {@code this}, but with the given count. */\n+    public ClusterCapacity withCount(int count) {\n+        return new ClusterCapacity(count, vcpu, memoryGb, diskGb, bandwidthGbps.orElse(null));\n+    }\n+\n+    @JsonGetter(\"count\") public int count() { return count; }\n+    @JsonGetter(\"vcpu\") public double vcpu() { return vcpu; }\n+    @JsonGetter(\"memoryGb\") public double memoryGb() { return memoryGb; }\n+    @JsonGetter(\"diskGb\") public double diskGb() { return diskGb; }\n+    @JsonGetter(\"bandwidthGbps\") public Double bandwidthGbpsOrNull() { return bandwidthGbps.orElse(null); }\n+\n+    @JsonIgnore\n+    public double bandwidthGbps() { return bandwidthGbps.orElse(1.0); }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6e727e30087e321911aa240fee03053cc22b1f4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwODU2MQ==", "bodyText": "This is only used in DynamicProvisioningMaintainer, which previously hard-coded 1.\nhttps://github.com/vespa-engine/vespa/pull/15488/files#diff-d9c1ee02ba2d19a80dbca3d583a350289329749f9583500eefa68bdfcc818d66L183", "url": "https://github.com/vespa-engine/vespa/pull/15488#discussion_r531408561", "createdAt": "2020-11-27T06:42:52Z", "author": {"login": "hakonhall"}, "path": "flags/src/main/java/com/yahoo/vespa/flags/custom/ClusterCapacity.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.flags.custom;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonGetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * @author freva\n+ */\n+// @Immutable\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(value = JsonInclude.Include.NON_NULL)\n+public class ClusterCapacity {\n+    private final int count;\n+    private final double vcpu;\n+    private final double memoryGb;\n+    private final double diskGb;\n+    private final Optional<Double> bandwidthGbps;\n+\n+    @JsonCreator\n+    public ClusterCapacity(@JsonProperty(\"count\") int count,\n+                           @JsonProperty(\"vcpu\") double vcpu,\n+                           @JsonProperty(\"memoryGb\") double memoryGb,\n+                           @JsonProperty(\"diskGb\") double diskGb,\n+                           @JsonProperty(\"bandwidthGbps\") Double bandwidthGbps) {\n+        this.count = (int) requireNonNegative(\"count\", count);\n+        this.vcpu = requireNonNegative(\"vcpu\", vcpu);\n+        this.memoryGb = requireNonNegative(\"memoryGb\", memoryGb);\n+        this.diskGb = requireNonNegative(\"diskGb\", diskGb);\n+        this.bandwidthGbps = Optional.ofNullable(bandwidthGbps);\n+    }\n+\n+    /** Returns a new ClusterCapacity equal to {@code this}, but with the given count. */\n+    public ClusterCapacity withCount(int count) {\n+        return new ClusterCapacity(count, vcpu, memoryGb, diskGb, bandwidthGbps.orElse(null));\n+    }\n+\n+    @JsonGetter(\"count\") public int count() { return count; }\n+    @JsonGetter(\"vcpu\") public double vcpu() { return vcpu; }\n+    @JsonGetter(\"memoryGb\") public double memoryGb() { return memoryGb; }\n+    @JsonGetter(\"diskGb\") public double diskGb() { return diskGb; }\n+    @JsonGetter(\"bandwidthGbps\") public Double bandwidthGbpsOrNull() { return bandwidthGbps.orElse(null); }\n+\n+    @JsonIgnore\n+    public double bandwidthGbps() { return bandwidthGbps.orElse(1.0); }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA5ODg3Mg=="}, "originalCommit": {"oid": "d6e727e30087e321911aa240fee03053cc22b1f4"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 825, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}