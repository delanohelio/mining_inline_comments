{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NjI1MTY1", "number": 12733, "title": "Add save and load of HNSW index", "bodyText": "split graph data out into a simpler struct\nimplement HnswIndexSaver\nimplement HnswIndexLoader\nadd unit test checking that saving and loading\nworks as expected\n\nI confirm that this contribution is made under the terms of the license found in the root directory of this repository's source tree and that I have the authority necessary to make this contribution on behalf of its copyright owner.\n@havardpe @toregge FYI - please take a look if you want", "createdAt": "2020-03-27T08:45:29Z", "url": "https://github.com/vespa-engine/vespa/pull/12733", "merged": true, "mergeCommit": {"oid": "c46e5b9e351dabf928be60681a4fec73bb4b6930"}, "closed": true, "closedAt": "2020-03-30T07:37:59Z", "author": {"login": "arnej27959"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRdUKiAH2gAyMzk0NjI1MTY1OjNjMmY5ODEyOWUyMjNjMGRiZjcxM2FkMDQ2ZDdlOTEzMjI4ODczYTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcSpi40AFqTM4MzU5OTM3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3c2f98129e223c0dbf713ad046d7e913228873a0", "author": {"user": {"login": "arnej27959", "name": "Arne H Juul"}}, "url": "https://github.com/vespa-engine/vespa/commit/3c2f98129e223c0dbf713ad046d7e913228873a0", "committedDate": "2020-03-26T14:52:04Z", "message": "Add save and load of HNSW index\n\n* split graph data out into a simpler struct\n* implement HnswIndexSaver\n* implement HnswIndexLoader\n* add unit test checking that saving and loading\n  works as expected"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNzgyNDQ3", "url": "https://github.com/vespa-engine/vespa/pull/12733#pullrequestreview-382782447", "createdAt": "2020-03-27T11:38:39Z", "commit": {"oid": "3c2f98129e223c0dbf713ad046d7e913228873a0"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMTozODozOVrOF8tfzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMjoyMDo0OVrOF8uwzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIwNDMwMQ==", "bodyText": "Consider using = default; instead", "url": "https://github.com/vespa-engine/vespa/pull/12733#discussion_r399204301", "createdAt": "2020-03-27T11:38:39Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/tensor/hnsw_graph.cpp", "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"hnsw_graph.h\"\n+#include \"hnsw_index.h\"\n+#include <vespa/vespalib/datastore/array_store.hpp>\n+#include <vespa/vespalib/util/rcuvector.hpp>\n+\n+namespace search::tensor {\n+\n+HnswGraph::HnswGraph()\n+  : node_refs(),\n+    nodes(HnswIndex::make_default_node_store_config()),\n+    links(HnswIndex::make_default_link_store_config()),\n+    entry_docid(0), // Note that docid 0 is reserved and never used\n+    entry_level(-1)\n+{}\n+\n+HnswGraph::~HnswGraph() {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c2f98129e223c0dbf713ad046d7e913228873a0"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIwOTY1MA==", "bodyText": "Consider '{' on next line as used elsewhere.", "url": "https://github.com/vespa-engine/vespa/pull/12733#discussion_r399209650", "createdAt": "2020-03-27T11:49:34Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/tensor/hnsw_graph.cpp", "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"hnsw_graph.h\"\n+#include \"hnsw_index.h\"\n+#include <vespa/vespalib/datastore/array_store.hpp>\n+#include <vespa/vespalib/util/rcuvector.hpp>\n+\n+namespace search::tensor {\n+\n+HnswGraph::HnswGraph()\n+  : node_refs(),\n+    nodes(HnswIndex::make_default_node_store_config()),\n+    links(HnswIndex::make_default_link_store_config()),\n+    entry_docid(0), // Note that docid 0 is reserved and never used\n+    entry_level(-1)\n+{}\n+\n+HnswGraph::~HnswGraph() {}\n+\n+void\n+HnswGraph::make_node_for_document(uint32_t docid, uint32_t num_levels) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c2f98129e223c0dbf713ad046d7e913228873a0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIwOTcwNg==", "bodyText": "Consider '{' on next line as used elsewhere.", "url": "https://github.com/vespa-engine/vespa/pull/12733#discussion_r399209706", "createdAt": "2020-03-27T11:49:41Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/tensor/hnsw_graph.cpp", "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"hnsw_graph.h\"\n+#include \"hnsw_index.h\"\n+#include <vespa/vespalib/datastore/array_store.hpp>\n+#include <vespa/vespalib/util/rcuvector.hpp>\n+\n+namespace search::tensor {\n+\n+HnswGraph::HnswGraph()\n+  : node_refs(),\n+    nodes(HnswIndex::make_default_node_store_config()),\n+    links(HnswIndex::make_default_link_store_config()),\n+    entry_docid(0), // Note that docid 0 is reserved and never used\n+    entry_level(-1)\n+{}\n+\n+HnswGraph::~HnswGraph() {}\n+\n+void\n+HnswGraph::make_node_for_document(uint32_t docid, uint32_t num_levels) {\n+    node_refs.ensure_size(docid + 1, AtomicEntryRef());\n+    // A document cannot be added twice.\n+    assert(!node_refs[docid].load_acquire().valid());\n+    // Note: The level array instance lives as long as the document is present in the index.\n+    vespalib::Array<AtomicEntryRef> levels(num_levels, AtomicEntryRef());\n+    auto node_ref = nodes.add(levels);\n+    node_refs[docid].store_release(node_ref);\n+}\n+\n+void\n+HnswGraph::remove_node_for_document(uint32_t docid) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c2f98129e223c0dbf713ad046d7e913228873a0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxMjM5Nw==", "bodyText": "Please add class description.", "url": "https://github.com/vespa-engine/vespa/pull/12733#discussion_r399212397", "createdAt": "2020-03-27T11:55:09Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/tensor/hnsw_index_loader.h", "diffHunk": "@@ -0,0 +1,20 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+namespace search::fileutil { class LoadedBuffer; }\n+\n+namespace search::tensor {\n+\n+class HnswGraph;\n+\n+class HnswIndexLoader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c2f98129e223c0dbf713ad046d7e913228873a0"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxMzUwNA==", "bodyText": "Consider using '{' instead of one line if statements. Applies to rest of function as well.", "url": "https://github.com/vespa-engine/vespa/pull/12733#discussion_r399213504", "createdAt": "2020-03-27T11:57:34Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/tensor/hnsw_index_loader.cpp", "diffHunk": "@@ -0,0 +1,48 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"hnsw_index_loader.h\"\n+#include \"hnsw_graph.h\"\n+#include <vespa/searchlib/util/fileutil.h>\n+\n+namespace search::tensor {\n+\n+HnswIndexLoader::~HnswIndexLoader() {}\n+\n+HnswIndexLoader::HnswIndexLoader(HnswGraph &graph)\n+    : _graph(graph)\n+{\n+}\n+\n+bool\n+HnswIndexLoader::load(const fileutil::LoadedBuffer& buf)\n+{\n+    size_t num_readable = buf.size(sizeof(uint32_t));\n+    if (num_readable < 3) return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c2f98129e223c0dbf713ad046d7e913228873a0"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIxMzg3MA==", "bodyText": "I suggest we change NearestNeighborIndex::load() to return a bool instead. Then we can choose what to do with an error case on a higher level.", "url": "https://github.com/vespa-engine/vespa/pull/12733#discussion_r399213870", "createdAt": "2020-03-27T11:58:28Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/tensor/hnsw_index.cpp", "diffHunk": "@@ -439,13 +386,17 @@ HnswIndex::get_state(const vespalib::slime::Inserter& inserter) const\n std::unique_ptr<NearestNeighborIndexSaver>\n HnswIndex::make_saver() const\n {\n-    return std::unique_ptr<NearestNeighborIndexSaver>();\n+    return std::make_unique<HnswIndexSaver>(_graph);\n }\n \n void\n HnswIndex::load(const fileutil::LoadedBuffer& buf)\n {\n-    (void) buf;\n+    assert(get_entry_docid() == 0); // cannot load after index has data\n+    HnswIndexLoader loader(_graph);\n+    if (! loader.load(buf)) {\n+        fprintf(stderr, \"ERROR loading HNSW graph\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c2f98129e223c0dbf713ad046d7e913228873a0"}, "originalPosition": 309}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIyNDQyMQ==", "bodyText": "If num_levels is 0 (representing a removed document), we should create an entry for this document to ensure that node_refs has the right size. If the last document loaded has 0 levels (removed) the size of node_refs will be off by one.", "url": "https://github.com/vespa-engine/vespa/pull/12733#discussion_r399224421", "createdAt": "2020-03-27T12:19:40Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/tensor/hnsw_index_loader.cpp", "diffHunk": "@@ -0,0 +1,48 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"hnsw_index_loader.h\"\n+#include \"hnsw_graph.h\"\n+#include <vespa/searchlib/util/fileutil.h>\n+\n+namespace search::tensor {\n+\n+HnswIndexLoader::~HnswIndexLoader() {}\n+\n+HnswIndexLoader::HnswIndexLoader(HnswGraph &graph)\n+    : _graph(graph)\n+{\n+}\n+\n+bool\n+HnswIndexLoader::load(const fileutil::LoadedBuffer& buf)\n+{\n+    size_t num_readable = buf.size(sizeof(uint32_t));\n+    if (num_readable < 3) return false;\n+    const uint32_t *ptr = static_cast<const uint32_t *>(buf.buffer());\n+    const uint32_t *end = ptr + num_readable;\n+    uint32_t entry_docid = *ptr++;\n+    int32_t entry_level = *ptr++;\n+    uint32_t num_nodes = *ptr++;\n+    std::vector<uint32_t> link_array;\n+    for (uint32_t docid = 0; docid < num_nodes; ++docid) {\n+        if (ptr == end) return false;\n+        uint32_t num_levels = *ptr++;\n+        if (num_levels > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c2f98129e223c0dbf713ad046d7e913228873a0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIyNTAzNw==", "bodyText": "Please add class description.", "url": "https://github.com/vespa-engine/vespa/pull/12733#discussion_r399225037", "createdAt": "2020-03-27T12:20:49Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/tensor/hnsw_index_saver.h", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"nearest_neighbor_index_saver.h\"\n+#include <vespa/vespalib/datastore/entryref.h>\n+#include <vector>\n+\n+namespace search::tensor {\n+\n+class HnswGraph;\n+\n+class HnswIndexSaver : public NearestNeighborIndexSaver {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c2f98129e223c0dbf713ad046d7e913228873a0"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d217c94fcbf129e4a557264b64b76f8563c1d892", "author": {"user": {"login": "arnej27959", "name": "Arne H Juul"}}, "url": "https://github.com/vespa-engine/vespa/commit/d217c94fcbf129e4a557264b64b76f8563c1d892", "committedDate": "2020-03-27T13:08:38Z", "message": "review follow-up:\n* add documentation comments\n* style fixes\n* return bool from load() for error handling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNTk3NDAw", "url": "https://github.com/vespa-engine/vespa/pull/12733#pullrequestreview-383597400", "createdAt": "2020-03-30T07:37:50Z", "commit": {"oid": "d217c94fcbf129e4a557264b64b76f8563c1d892"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNTk5Mzcy", "url": "https://github.com/vespa-engine/vespa/pull/12733#pullrequestreview-383599372", "createdAt": "2020-03-30T07:40:55Z", "commit": {"oid": "d217c94fcbf129e4a557264b64b76f8563c1d892"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNzo0MDo1NlrOF9dKgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNzo0MDo1NlrOF9dKgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk4NTI4Mg==", "bodyText": "Please consider snake case for consistency.", "url": "https://github.com/vespa-engine/vespa/pull/12733#discussion_r399985282", "createdAt": "2020-03-30T07:40:56Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/tensor/hnsw_index_loader.h", "diffHunk": "@@ -2,19 +2,34 @@\n \n #pragma once\n \n+#include <cstdint>\n+\n namespace search::fileutil { class LoadedBuffer; }\n \n namespace search::tensor {\n \n class HnswGraph;\n \n+/**\n+ * Implements loading of HNSW graph structure from binary format.\n+ **/\n class HnswIndexLoader {\n public:\n     HnswIndexLoader(HnswGraph &graph);\n     ~HnswIndexLoader();\n     bool load(const fileutil::LoadedBuffer& buf);\n private:\n     HnswGraph &_graph;\n+    const uint32_t *_ptr;\n+    const uint32_t *_end;\n+    bool _failed;\n+    uint32_t nextVal() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d217c94fcbf129e4a557264b64b76f8563c1d892"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2522, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}