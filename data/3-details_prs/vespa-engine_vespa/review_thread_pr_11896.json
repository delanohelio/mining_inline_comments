{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1OTE0MDUx", "number": 11896, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNzo1MzoyM1rODaFCgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODowODoxN1rODaFOnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjcyMTI5OnYy", "diffSide": "RIGHT", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/Node.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNzo1MzoyM1rOFg1PYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODo1MToxNFrOFg2iqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk3MTA0MQ==", "bodyText": "Unintended change?", "url": "https://github.com/vespa-engine/vespa/pull/11896#discussion_r369971041", "createdAt": "2020-01-23T07:53:23Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/Node.java", "diffHunk": "@@ -41,61 +42,57 @@\n     private final NodeType type;\n     private final Reports reports;\n     private final Optional<String> modelName;\n+    private final Optional<TenantName> reservedTo;\n \n     /** Record of the last event of each type happening to this node */\n     private final History history;\n \n     /** The current allocation of this node, if any */\n     private final Optional<Allocation> allocation;\n+    private Node retire;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaf1e0870d990092e9b5b1a1a157d8bac046c48b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5MjM2Mg==", "bodyText": "Yes, thanks!", "url": "https://github.com/vespa-engine/vespa/pull/11896#discussion_r369992362", "createdAt": "2020-01-23T08:51:14Z", "author": {"login": "bratseth"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/Node.java", "diffHunk": "@@ -41,61 +42,57 @@\n     private final NodeType type;\n     private final Reports reports;\n     private final Optional<String> modelName;\n+    private final Optional<TenantName> reservedTo;\n \n     /** Record of the last event of each type happening to this node */\n     private final History history;\n \n     /** The current allocation of this node, if any */\n     private final Optional<Allocation> allocation;\n+    private Node retire;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk3MTA0MQ=="}, "originalCommit": {"oid": "eaf1e0870d990092e9b5b1a1a157d8bac046c48b"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjczNzYzOnYy", "diffSide": "RIGHT", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/Node.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODowMDo1NFrOFg1ZHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODo1NToxM1rOFg2piw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk3MzUzMw==", "bodyText": "The convention is this class seems to be to have a withReservedTo(TenantName) and withoutReservedTo()", "url": "https://github.com/vespa-engine/vespa/pull/11896#discussion_r369973533", "createdAt": "2020-01-23T08:00:54Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/Node.java", "diffHunk": "@@ -265,26 +273,32 @@ public Node allocate(ApplicationId owner, ClusterMembership membership, NodeReso\n      */\n     public Node with(Allocation allocation) {\n         return new Node(id, ipConfig, hostname, parentHostname, flavor, status, state,\n-                        Optional.of(allocation), history, type, reports, modelName);\n+                        Optional.of(allocation), history, type, reports, modelName, reservedTo);\n     }\n \n     /** Returns a new Node without an allocation. */\n     public Node withoutAllocation() {\n         return new Node(id, ipConfig, hostname, parentHostname, flavor, status, state,\n-                        Optional.empty(), history, type, reports, modelName);\n+                        Optional.empty(), history, type, reports, modelName, reservedTo);\n     }\n \n \n     /** Returns a copy of this node with IP config set to the given value. */\n     public Node with(IP.Config ipConfig) {\n         return new Node(id, ipConfig, hostname, parentHostname, flavor, status, state,\n-                        allocation, history, type, reports, modelName);\n+                        allocation, history, type, reports, modelName, reservedTo);\n     }\n \n     /** Returns a copy of this node with the parent hostname assigned to the given value. */\n     public Node withParentHostname(String parentHostname) {\n         return new Node(id, ipConfig, hostname, Optional.of(parentHostname), flavor, status, state,\n-                        allocation, history, type, reports, modelName);\n+                        allocation, history, type, reports, modelName, reservedTo);\n+    }\n+\n+    /** Returns a copy of this node marked as reserved to the given tenant (or empty to remove reservation) */\n+    public Node withReservedTo(Optional<TenantName> reservedTo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaf1e0870d990092e9b5b1a1a157d8bac046c48b"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5NDEyMw==", "bodyText": "Done", "url": "https://github.com/vespa-engine/vespa/pull/11896#discussion_r369994123", "createdAt": "2020-01-23T08:55:13Z", "author": {"login": "bratseth"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/Node.java", "diffHunk": "@@ -265,26 +273,32 @@ public Node allocate(ApplicationId owner, ClusterMembership membership, NodeReso\n      */\n     public Node with(Allocation allocation) {\n         return new Node(id, ipConfig, hostname, parentHostname, flavor, status, state,\n-                        Optional.of(allocation), history, type, reports, modelName);\n+                        Optional.of(allocation), history, type, reports, modelName, reservedTo);\n     }\n \n     /** Returns a new Node without an allocation. */\n     public Node withoutAllocation() {\n         return new Node(id, ipConfig, hostname, parentHostname, flavor, status, state,\n-                        Optional.empty(), history, type, reports, modelName);\n+                        Optional.empty(), history, type, reports, modelName, reservedTo);\n     }\n \n \n     /** Returns a copy of this node with IP config set to the given value. */\n     public Node with(IP.Config ipConfig) {\n         return new Node(id, ipConfig, hostname, parentHostname, flavor, status, state,\n-                        allocation, history, type, reports, modelName);\n+                        allocation, history, type, reports, modelName, reservedTo);\n     }\n \n     /** Returns a copy of this node with the parent hostname assigned to the given value. */\n     public Node withParentHostname(String parentHostname) {\n         return new Node(id, ipConfig, hostname, Optional.of(parentHostname), flavor, status, state,\n-                        allocation, history, type, reports, modelName);\n+                        allocation, history, type, reports, modelName, reservedTo);\n+    }\n+\n+    /** Returns a copy of this node marked as reserved to the given tenant (or empty to remove reservation) */\n+    public Node withReservedTo(Optional<TenantName> reservedTo) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk3MzUzMw=="}, "originalCommit": {"oid": "eaf1e0870d990092e9b5b1a1a157d8bac046c48b"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4Njc0NjQ5OnYy", "diffSide": "RIGHT", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/Activator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODowNTozOFrOFg1eew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwOToyOTozM1rOFg3mYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk3NDkwNw==", "bodyText": "This should lock the tenant host application", "url": "https://github.com/vespa-engine/vespa/pull/11896#discussion_r369974907", "createdAt": "2020-01-23T08:05:38Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/Activator.java", "diffHunk": "@@ -90,6 +89,27 @@ private void activateNodes(ApplicationId application, Collection<HostSpec> hosts\n         nodeRepository.deactivate(activeToRemove, transaction);\n         nodeRepository.activate(updateFrom(hosts, continuedActive), transaction); // update active with any changes\n         nodeRepository.activate(updatePortsFrom(hosts, reservedToActivate), transaction);\n+        unreserveParentsOf(reservedToActivate);\n+    }\n+\n+    /** When a tenant node is activated on a host, we can open up that host for use by others */\n+    private void unreserveParentsOf(List<Node> nodes) {\n+        List<String> reservedParents = nodes.stream()\n+                                            .filter(node -> node.parentHostname().isPresent())\n+                                            .map(node -> nodeRepository.getNode(node.parentHostname().get()))\n+                                            .filter(parent -> parent.isPresent())\n+                                            .filter(parent -> parent.get().reservedTo().isPresent())\n+                                            .map(parent -> parent.get().hostname())\n+                                            .collect(Collectors.toList());\n+        if (reservedParents.isEmpty()) return;\n+\n+        try (Mutex lock = nodeRepository.lockUnallocated()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaf1e0870d990092e9b5b1a1a157d8bac046c48b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAwOTY5Ng==", "bodyText": "That stuff has become pretty weird, and it doesn't seem that's how it is consistently done? Anyway; ok, done.", "url": "https://github.com/vespa-engine/vespa/pull/11896#discussion_r370009696", "createdAt": "2020-01-23T09:29:33Z", "author": {"login": "bratseth"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/Activator.java", "diffHunk": "@@ -90,6 +89,27 @@ private void activateNodes(ApplicationId application, Collection<HostSpec> hosts\n         nodeRepository.deactivate(activeToRemove, transaction);\n         nodeRepository.activate(updateFrom(hosts, continuedActive), transaction); // update active with any changes\n         nodeRepository.activate(updatePortsFrom(hosts, reservedToActivate), transaction);\n+        unreserveParentsOf(reservedToActivate);\n+    }\n+\n+    /** When a tenant node is activated on a host, we can open up that host for use by others */\n+    private void unreserveParentsOf(List<Node> nodes) {\n+        List<String> reservedParents = nodes.stream()\n+                                            .filter(node -> node.parentHostname().isPresent())\n+                                            .map(node -> nodeRepository.getNode(node.parentHostname().get()))\n+                                            .filter(parent -> parent.isPresent())\n+                                            .filter(parent -> parent.get().reservedTo().isPresent())\n+                                            .map(parent -> parent.get().hostname())\n+                                            .collect(Collectors.toList());\n+        if (reservedParents.isEmpty()) return;\n+\n+        try (Mutex lock = nodeRepository.lockUnallocated()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk3NDkwNw=="}, "originalCommit": {"oid": "eaf1e0870d990092e9b5b1a1a157d8bac046c48b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4Njc1MjI4OnYy", "diffSide": "RIGHT", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodePrioritizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODowODoxN1rOFg1hug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODowODoxN1rOFg1hug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk3NTczOA==", "bodyText": "Use appId in this class", "url": "https://github.com/vespa-engine/vespa/pull/11896#discussion_r369975738", "createdAt": "2020-01-23T08:08:17Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodePrioritizer.java", "diffHunk": "@@ -122,12 +122,14 @@ void addSurplusNodes(List<Node> surplusNodes) {\n      *\n      * @param exclusively whether the ready docker nodes should only be added on hosts that\n      *                    already have nodes allocated to this tenant\n+     * @param application the application we are adding nodes for\n      */\n-    void addNewDockerNodes(boolean exclusively) {\n+    void addNewDockerNodes(boolean exclusively, ApplicationId application) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaf1e0870d990092e9b5b1a1a157d8bac046c48b"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2610, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}