{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0OTk0MTIy", "number": 14623, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODoyODo0N1rOEosQvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMToxNjoxMlrOEowpSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTAzNjc5OnYy", "diffSide": "RIGHT", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/Nodelike.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODoyODo0N1rOHZ7fzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODoyODo0N1rOHZ7fzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1MTI0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /** Returns the hostname oif the parent if this is a child node */\n          \n          \n            \n                /** Returns the hostname of the parent if this is a child node */", "url": "https://github.com/vespa-engine/vespa/pull/14623#discussion_r496951247", "createdAt": "2020-09-29T18:28:47Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/Nodelike.java", "diffHunk": "@@ -0,0 +1,23 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.hosted.provision;\n+\n+import com.yahoo.config.provision.NodeResources;\n+import com.yahoo.config.provision.NodeType;\n+\n+import java.util.Optional;\n+\n+/**\n+ * The API of anything that can behave essentially like a node.\n+ *\n+ * @author bratseth\n+ */\n+public interface Nodelike {\n+\n+    NodeResources resources();\n+\n+    /** Returns the hostname oif the parent if this is a child node */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d05f38f1f67b7be20346878ea0c8fa0547c18a4"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTc1NDk4OnYy", "diffSide": "RIGHT", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodeCandidate.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMToxNjoxMlrOHaCaTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODo0ODo1N1rOHaTlfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2NDUyNA==", "bodyText": "The old code would just advance to the next node if resolving failing. If we get a node with broken IP, the allocation will basically not succeed until manual intervention since it would keep trying the same node? We should catch this and try next node if this fails.\nAlso, lets drop the stack trace for this, see #14599", "url": "https://github.com/vespa-engine/vespa/pull/14623#discussion_r497064524", "createdAt": "2020-09-29T21:16:12Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodeCandidate.java", "diffHunk": "@@ -159,76 +186,174 @@ private double skewWith(NodeResources resources) {\n     }\n \n     private boolean isInNodeRepoAndReserved() {\n-        if (isNewNode) return false;\n-        return node.state().equals(Node.State.reserved);\n+        if (isNew) return false;\n+        return state().equals(Node.State.reserved);\n     }\n \n-    @Override\n-    public String toString() {\n-        return node.id();\n+    public static NodeCandidate createChild(Node node,\n+                                            NodeResources freeParentCapacity,\n+                                            Node parent,\n+                                            boolean violatesSpares,\n+                                            boolean isSurplus,\n+                                            boolean isNew,\n+                                            boolean isResizeable) {\n+        return new ConcreteNodeCandidate(node, freeParentCapacity, Optional.of(parent), violatesSpares, isSurplus, isNew, isResizeable);\n     }\n \n-    @Override\n-    public int hashCode() {\n-        return node.hashCode();\n+    public static NodeCandidate createNewChild(NodeResources resources,\n+                                               NodeResources freeParentCapacity,\n+                                               Node parent,\n+                                               boolean violatesSpares,\n+                                               LockedNodeList allNodes,\n+                                               NodeRepository nodeRepository) {\n+        return new VirtualNodeCandidate(resources, freeParentCapacity, parent, violatesSpares, allNodes, nodeRepository);\n     }\n \n-    @Override\n-    public boolean equals(Object other) {\n-        if (other == this) return true;\n-        if ( ! (other instanceof NodeCandidate)) return false;\n-        return this.node.equals(((NodeCandidate)other).node);\n+    public static NodeCandidate createNewExclusiveChild(Node node, Node parent) {\n+        return new ConcreteNodeCandidate(node, node.resources(), Optional.of(parent), false, false, true, false);\n     }\n \n-    static class Builder {\n+    public static NodeCandidate createStandalone(Node node, boolean isSurplus, boolean isNew) {\n+        return new ConcreteNodeCandidate(node, node.resources(), Optional.empty(), false, isSurplus, isNew, false);\n+    }\n+\n+    /** A candidate backed by a node */\n+    static class ConcreteNodeCandidate extends NodeCandidate {\n+\n+        private final Node node;\n+\n+        ConcreteNodeCandidate(Node node, NodeResources freeParentCapacity, Optional<Node> parent,\n+                              boolean violatesSpares,\n+                              boolean isSurplus, boolean isNew, boolean isResizeable) {\n+            super(freeParentCapacity, parent, violatesSpares, isSurplus, isNew, isResizeable);\n+            this.node = Objects.requireNonNull(node, \"Node cannot be null\");\n+        }\n+\n+        @Override\n+        public NodeResources resources() { return node.resources(); }\n+\n+        @Override\n+        public Optional<String> parentHostname() { return node.parentHostname(); }\n+\n+        @Override\n+        public NodeType type() { return node.type(); }\n \n-        public final Node node;\n-        private NodeResources freeParentCapacity;\n-        private Optional<Node> parent = Optional.empty();\n-        private boolean violatesSpares;\n-        private boolean isSurplusNode;\n-        private boolean isNewNode;\n-        private boolean isResizable;\n+        public Optional<Allocation> allocation() { return node.allocation(); }\n \n-        Builder(Node node) {\n-            this.node = node;\n-            this.freeParentCapacity = node.flavor().resources();\n+        public Node.State state() { return node.state(); }\n+\n+        public boolean wantToRetire() { return node.status().wantToRetire(); }\n+\n+        public Flavor flavor() { return node.flavor(); }\n+\n+        public NodeCandidate allocate(ApplicationId owner, ClusterMembership membership, NodeResources requestedResources, Instant at) {\n+            return new ConcreteNodeCandidate(node.allocate(owner, membership, requestedResources, at),\n+                                             freeParentCapacity, parent, violatesSpares, isSurplus, isNew, isResizable);\n         }\n \n-        /** The free capacity of the parent, before adding this node to it */\n-        Builder freeParentCapacity(NodeResources freeParentCapacity) {\n-            this.freeParentCapacity = freeParentCapacity;\n-            return this;\n+        /** Called when the node described by this candidate must be created */\n+        public NodeCandidate withNode() { return this; }\n+\n+        public Node toNode() { return node; }\n+\n+        @Override\n+        public int compareTo(NodeCandidate other) {\n+            int comparison = super.compareTo(other);\n+            if (comparison != 0) return comparison;\n+\n+            // Unimportant tie-breaking:\n+            if ( ! (other instanceof ConcreteNodeCandidate)) return -1;\n+            return this.node.hostname().compareTo(((ConcreteNodeCandidate)other).node.hostname());\n         }\n \n-        Builder parent(Node parent) {\n-            this.parent = Optional.of(parent);\n-            return this;\n+        @Override\n+        public String toString() {\n+            return node.id();\n         }\n \n-        Builder violatesSpares(boolean violatesSpares) {\n-            this.violatesSpares = violatesSpares;\n-            return this;\n+    }\n+\n+    /** A candidate for which no actual node has been created yet */\n+    static class VirtualNodeCandidate extends NodeCandidate {\n+\n+        /** The resources this node must have if created */\n+        private final NodeResources resources;\n+\n+        /** Needed to construct the node */\n+        private final LockedNodeList allNodes;\n+        private final NodeRepository nodeRepository;\n+\n+        private VirtualNodeCandidate(NodeResources resources,\n+                                     NodeResources freeParentCapacity,\n+                                     Node parent,\n+                                     boolean violatesSpares,\n+                                     LockedNodeList allNodes,\n+                                     NodeRepository nodeRepository) {\n+            super(freeParentCapacity, Optional.of(parent), violatesSpares, false, true, false);\n+            this.resources = resources;\n+            this.allNodes = allNodes;\n+            this.nodeRepository = nodeRepository;\n         }\n \n-        Builder surplusNode(boolean surplusNode) {\n-            isSurplusNode = surplusNode;\n-            return this;\n+        @Override\n+        public NodeResources resources() { return resources; }\n+\n+        @Override\n+        public Optional<String> parentHostname() { return Optional.of(parent.get().hostname()); }\n+\n+        @Override\n+        public NodeType type() { return NodeType.tenant; }\n+\n+        public Optional<Allocation> allocation() { return Optional.empty(); }\n+\n+        public Node.State state() { return Node.State.reserved; }\n+\n+        public boolean wantToRetire() { return false; }\n+\n+        public Flavor flavor() { return new Flavor(resources); }\n+\n+        public NodeCandidate allocate(ApplicationId owner, ClusterMembership membership, NodeResources requestedResources, Instant at) {\n+            return withNode().allocate(owner, membership, requestedResources, at);\n         }\n \n-        Builder newNode(boolean newNode) {\n-            isNewNode = newNode;\n-            return this;\n+        /** Called when the node described by this candidate must be created */\n+        public NodeCandidate withNode() {\n+            Optional<IP.Allocation> allocation;\n+            try {\n+                allocation = parent.get().ipConfig().pool().findAllocation(allNodes, nodeRepository.nameResolver());\n+                if (allocation.isEmpty())\n+                    throw new IllegalStateException(\"No free ip addresses on \" + parent.get() + \": Cannot allocate node\");\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Failed allocating IP address on \" + parent.get() +\": \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d254d8378f398ea6e90e2dcf0e270516c4fd1654"}, "originalPosition": 364}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI4MjY1NQ==", "bodyText": "Done, please ptal. I think it would be better if we could expect this not to fail though - perhaps we should have a maintainer looking for it.", "url": "https://github.com/vespa-engine/vespa/pull/14623#discussion_r497282655", "createdAt": "2020-09-30T06:58:58Z", "author": {"login": "bratseth"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodeCandidate.java", "diffHunk": "@@ -159,76 +186,174 @@ private double skewWith(NodeResources resources) {\n     }\n \n     private boolean isInNodeRepoAndReserved() {\n-        if (isNewNode) return false;\n-        return node.state().equals(Node.State.reserved);\n+        if (isNew) return false;\n+        return state().equals(Node.State.reserved);\n     }\n \n-    @Override\n-    public String toString() {\n-        return node.id();\n+    public static NodeCandidate createChild(Node node,\n+                                            NodeResources freeParentCapacity,\n+                                            Node parent,\n+                                            boolean violatesSpares,\n+                                            boolean isSurplus,\n+                                            boolean isNew,\n+                                            boolean isResizeable) {\n+        return new ConcreteNodeCandidate(node, freeParentCapacity, Optional.of(parent), violatesSpares, isSurplus, isNew, isResizeable);\n     }\n \n-    @Override\n-    public int hashCode() {\n-        return node.hashCode();\n+    public static NodeCandidate createNewChild(NodeResources resources,\n+                                               NodeResources freeParentCapacity,\n+                                               Node parent,\n+                                               boolean violatesSpares,\n+                                               LockedNodeList allNodes,\n+                                               NodeRepository nodeRepository) {\n+        return new VirtualNodeCandidate(resources, freeParentCapacity, parent, violatesSpares, allNodes, nodeRepository);\n     }\n \n-    @Override\n-    public boolean equals(Object other) {\n-        if (other == this) return true;\n-        if ( ! (other instanceof NodeCandidate)) return false;\n-        return this.node.equals(((NodeCandidate)other).node);\n+    public static NodeCandidate createNewExclusiveChild(Node node, Node parent) {\n+        return new ConcreteNodeCandidate(node, node.resources(), Optional.of(parent), false, false, true, false);\n     }\n \n-    static class Builder {\n+    public static NodeCandidate createStandalone(Node node, boolean isSurplus, boolean isNew) {\n+        return new ConcreteNodeCandidate(node, node.resources(), Optional.empty(), false, isSurplus, isNew, false);\n+    }\n+\n+    /** A candidate backed by a node */\n+    static class ConcreteNodeCandidate extends NodeCandidate {\n+\n+        private final Node node;\n+\n+        ConcreteNodeCandidate(Node node, NodeResources freeParentCapacity, Optional<Node> parent,\n+                              boolean violatesSpares,\n+                              boolean isSurplus, boolean isNew, boolean isResizeable) {\n+            super(freeParentCapacity, parent, violatesSpares, isSurplus, isNew, isResizeable);\n+            this.node = Objects.requireNonNull(node, \"Node cannot be null\");\n+        }\n+\n+        @Override\n+        public NodeResources resources() { return node.resources(); }\n+\n+        @Override\n+        public Optional<String> parentHostname() { return node.parentHostname(); }\n+\n+        @Override\n+        public NodeType type() { return node.type(); }\n \n-        public final Node node;\n-        private NodeResources freeParentCapacity;\n-        private Optional<Node> parent = Optional.empty();\n-        private boolean violatesSpares;\n-        private boolean isSurplusNode;\n-        private boolean isNewNode;\n-        private boolean isResizable;\n+        public Optional<Allocation> allocation() { return node.allocation(); }\n \n-        Builder(Node node) {\n-            this.node = node;\n-            this.freeParentCapacity = node.flavor().resources();\n+        public Node.State state() { return node.state(); }\n+\n+        public boolean wantToRetire() { return node.status().wantToRetire(); }\n+\n+        public Flavor flavor() { return node.flavor(); }\n+\n+        public NodeCandidate allocate(ApplicationId owner, ClusterMembership membership, NodeResources requestedResources, Instant at) {\n+            return new ConcreteNodeCandidate(node.allocate(owner, membership, requestedResources, at),\n+                                             freeParentCapacity, parent, violatesSpares, isSurplus, isNew, isResizable);\n         }\n \n-        /** The free capacity of the parent, before adding this node to it */\n-        Builder freeParentCapacity(NodeResources freeParentCapacity) {\n-            this.freeParentCapacity = freeParentCapacity;\n-            return this;\n+        /** Called when the node described by this candidate must be created */\n+        public NodeCandidate withNode() { return this; }\n+\n+        public Node toNode() { return node; }\n+\n+        @Override\n+        public int compareTo(NodeCandidate other) {\n+            int comparison = super.compareTo(other);\n+            if (comparison != 0) return comparison;\n+\n+            // Unimportant tie-breaking:\n+            if ( ! (other instanceof ConcreteNodeCandidate)) return -1;\n+            return this.node.hostname().compareTo(((ConcreteNodeCandidate)other).node.hostname());\n         }\n \n-        Builder parent(Node parent) {\n-            this.parent = Optional.of(parent);\n-            return this;\n+        @Override\n+        public String toString() {\n+            return node.id();\n         }\n \n-        Builder violatesSpares(boolean violatesSpares) {\n-            this.violatesSpares = violatesSpares;\n-            return this;\n+    }\n+\n+    /** A candidate for which no actual node has been created yet */\n+    static class VirtualNodeCandidate extends NodeCandidate {\n+\n+        /** The resources this node must have if created */\n+        private final NodeResources resources;\n+\n+        /** Needed to construct the node */\n+        private final LockedNodeList allNodes;\n+        private final NodeRepository nodeRepository;\n+\n+        private VirtualNodeCandidate(NodeResources resources,\n+                                     NodeResources freeParentCapacity,\n+                                     Node parent,\n+                                     boolean violatesSpares,\n+                                     LockedNodeList allNodes,\n+                                     NodeRepository nodeRepository) {\n+            super(freeParentCapacity, Optional.of(parent), violatesSpares, false, true, false);\n+            this.resources = resources;\n+            this.allNodes = allNodes;\n+            this.nodeRepository = nodeRepository;\n         }\n \n-        Builder surplusNode(boolean surplusNode) {\n-            isSurplusNode = surplusNode;\n-            return this;\n+        @Override\n+        public NodeResources resources() { return resources; }\n+\n+        @Override\n+        public Optional<String> parentHostname() { return Optional.of(parent.get().hostname()); }\n+\n+        @Override\n+        public NodeType type() { return NodeType.tenant; }\n+\n+        public Optional<Allocation> allocation() { return Optional.empty(); }\n+\n+        public Node.State state() { return Node.State.reserved; }\n+\n+        public boolean wantToRetire() { return false; }\n+\n+        public Flavor flavor() { return new Flavor(resources); }\n+\n+        public NodeCandidate allocate(ApplicationId owner, ClusterMembership membership, NodeResources requestedResources, Instant at) {\n+            return withNode().allocate(owner, membership, requestedResources, at);\n         }\n \n-        Builder newNode(boolean newNode) {\n-            isNewNode = newNode;\n-            return this;\n+        /** Called when the node described by this candidate must be created */\n+        public NodeCandidate withNode() {\n+            Optional<IP.Allocation> allocation;\n+            try {\n+                allocation = parent.get().ipConfig().pool().findAllocation(allNodes, nodeRepository.nameResolver());\n+                if (allocation.isEmpty())\n+                    throw new IllegalStateException(\"No free ip addresses on \" + parent.get() + \": Cannot allocate node\");\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Failed allocating IP address on \" + parent.get() +\": \", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2NDUyNA=="}, "originalCommit": {"oid": "d254d8378f398ea6e90e2dcf0e270516c4fd1654"}, "originalPosition": 364}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMxNDY0NA==", "bodyText": "It's the product of countless cases of DNS/IP misconfiguration upstream from us. It will continue to happen. \ud83d\ude1e", "url": "https://github.com/vespa-engine/vespa/pull/14623#discussion_r497314644", "createdAt": "2020-09-30T07:58:26Z", "author": {"login": "mpolden"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodeCandidate.java", "diffHunk": "@@ -159,76 +186,174 @@ private double skewWith(NodeResources resources) {\n     }\n \n     private boolean isInNodeRepoAndReserved() {\n-        if (isNewNode) return false;\n-        return node.state().equals(Node.State.reserved);\n+        if (isNew) return false;\n+        return state().equals(Node.State.reserved);\n     }\n \n-    @Override\n-    public String toString() {\n-        return node.id();\n+    public static NodeCandidate createChild(Node node,\n+                                            NodeResources freeParentCapacity,\n+                                            Node parent,\n+                                            boolean violatesSpares,\n+                                            boolean isSurplus,\n+                                            boolean isNew,\n+                                            boolean isResizeable) {\n+        return new ConcreteNodeCandidate(node, freeParentCapacity, Optional.of(parent), violatesSpares, isSurplus, isNew, isResizeable);\n     }\n \n-    @Override\n-    public int hashCode() {\n-        return node.hashCode();\n+    public static NodeCandidate createNewChild(NodeResources resources,\n+                                               NodeResources freeParentCapacity,\n+                                               Node parent,\n+                                               boolean violatesSpares,\n+                                               LockedNodeList allNodes,\n+                                               NodeRepository nodeRepository) {\n+        return new VirtualNodeCandidate(resources, freeParentCapacity, parent, violatesSpares, allNodes, nodeRepository);\n     }\n \n-    @Override\n-    public boolean equals(Object other) {\n-        if (other == this) return true;\n-        if ( ! (other instanceof NodeCandidate)) return false;\n-        return this.node.equals(((NodeCandidate)other).node);\n+    public static NodeCandidate createNewExclusiveChild(Node node, Node parent) {\n+        return new ConcreteNodeCandidate(node, node.resources(), Optional.of(parent), false, false, true, false);\n     }\n \n-    static class Builder {\n+    public static NodeCandidate createStandalone(Node node, boolean isSurplus, boolean isNew) {\n+        return new ConcreteNodeCandidate(node, node.resources(), Optional.empty(), false, isSurplus, isNew, false);\n+    }\n+\n+    /** A candidate backed by a node */\n+    static class ConcreteNodeCandidate extends NodeCandidate {\n+\n+        private final Node node;\n+\n+        ConcreteNodeCandidate(Node node, NodeResources freeParentCapacity, Optional<Node> parent,\n+                              boolean violatesSpares,\n+                              boolean isSurplus, boolean isNew, boolean isResizeable) {\n+            super(freeParentCapacity, parent, violatesSpares, isSurplus, isNew, isResizeable);\n+            this.node = Objects.requireNonNull(node, \"Node cannot be null\");\n+        }\n+\n+        @Override\n+        public NodeResources resources() { return node.resources(); }\n+\n+        @Override\n+        public Optional<String> parentHostname() { return node.parentHostname(); }\n+\n+        @Override\n+        public NodeType type() { return node.type(); }\n \n-        public final Node node;\n-        private NodeResources freeParentCapacity;\n-        private Optional<Node> parent = Optional.empty();\n-        private boolean violatesSpares;\n-        private boolean isSurplusNode;\n-        private boolean isNewNode;\n-        private boolean isResizable;\n+        public Optional<Allocation> allocation() { return node.allocation(); }\n \n-        Builder(Node node) {\n-            this.node = node;\n-            this.freeParentCapacity = node.flavor().resources();\n+        public Node.State state() { return node.state(); }\n+\n+        public boolean wantToRetire() { return node.status().wantToRetire(); }\n+\n+        public Flavor flavor() { return node.flavor(); }\n+\n+        public NodeCandidate allocate(ApplicationId owner, ClusterMembership membership, NodeResources requestedResources, Instant at) {\n+            return new ConcreteNodeCandidate(node.allocate(owner, membership, requestedResources, at),\n+                                             freeParentCapacity, parent, violatesSpares, isSurplus, isNew, isResizable);\n         }\n \n-        /** The free capacity of the parent, before adding this node to it */\n-        Builder freeParentCapacity(NodeResources freeParentCapacity) {\n-            this.freeParentCapacity = freeParentCapacity;\n-            return this;\n+        /** Called when the node described by this candidate must be created */\n+        public NodeCandidate withNode() { return this; }\n+\n+        public Node toNode() { return node; }\n+\n+        @Override\n+        public int compareTo(NodeCandidate other) {\n+            int comparison = super.compareTo(other);\n+            if (comparison != 0) return comparison;\n+\n+            // Unimportant tie-breaking:\n+            if ( ! (other instanceof ConcreteNodeCandidate)) return -1;\n+            return this.node.hostname().compareTo(((ConcreteNodeCandidate)other).node.hostname());\n         }\n \n-        Builder parent(Node parent) {\n-            this.parent = Optional.of(parent);\n-            return this;\n+        @Override\n+        public String toString() {\n+            return node.id();\n         }\n \n-        Builder violatesSpares(boolean violatesSpares) {\n-            this.violatesSpares = violatesSpares;\n-            return this;\n+    }\n+\n+    /** A candidate for which no actual node has been created yet */\n+    static class VirtualNodeCandidate extends NodeCandidate {\n+\n+        /** The resources this node must have if created */\n+        private final NodeResources resources;\n+\n+        /** Needed to construct the node */\n+        private final LockedNodeList allNodes;\n+        private final NodeRepository nodeRepository;\n+\n+        private VirtualNodeCandidate(NodeResources resources,\n+                                     NodeResources freeParentCapacity,\n+                                     Node parent,\n+                                     boolean violatesSpares,\n+                                     LockedNodeList allNodes,\n+                                     NodeRepository nodeRepository) {\n+            super(freeParentCapacity, Optional.of(parent), violatesSpares, false, true, false);\n+            this.resources = resources;\n+            this.allNodes = allNodes;\n+            this.nodeRepository = nodeRepository;\n         }\n \n-        Builder surplusNode(boolean surplusNode) {\n-            isSurplusNode = surplusNode;\n-            return this;\n+        @Override\n+        public NodeResources resources() { return resources; }\n+\n+        @Override\n+        public Optional<String> parentHostname() { return Optional.of(parent.get().hostname()); }\n+\n+        @Override\n+        public NodeType type() { return NodeType.tenant; }\n+\n+        public Optional<Allocation> allocation() { return Optional.empty(); }\n+\n+        public Node.State state() { return Node.State.reserved; }\n+\n+        public boolean wantToRetire() { return false; }\n+\n+        public Flavor flavor() { return new Flavor(resources); }\n+\n+        public NodeCandidate allocate(ApplicationId owner, ClusterMembership membership, NodeResources requestedResources, Instant at) {\n+            return withNode().allocate(owner, membership, requestedResources, at);\n         }\n \n-        Builder newNode(boolean newNode) {\n-            isNewNode = newNode;\n-            return this;\n+        /** Called when the node described by this candidate must be created */\n+        public NodeCandidate withNode() {\n+            Optional<IP.Allocation> allocation;\n+            try {\n+                allocation = parent.get().ipConfig().pool().findAllocation(allNodes, nodeRepository.nameResolver());\n+                if (allocation.isEmpty())\n+                    throw new IllegalStateException(\"No free ip addresses on \" + parent.get() + \": Cannot allocate node\");\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Failed allocating IP address on \" + parent.get() +\": \", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2NDUyNA=="}, "originalCommit": {"oid": "d254d8378f398ea6e90e2dcf0e270516c4fd1654"}, "originalPosition": 364}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMzOTgzMA==", "bodyText": "I would like to stop using DNS but not sure if that would avoid all of that?", "url": "https://github.com/vespa-engine/vespa/pull/14623#discussion_r497339830", "createdAt": "2020-09-30T08:39:19Z", "author": {"login": "bratseth"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodeCandidate.java", "diffHunk": "@@ -159,76 +186,174 @@ private double skewWith(NodeResources resources) {\n     }\n \n     private boolean isInNodeRepoAndReserved() {\n-        if (isNewNode) return false;\n-        return node.state().equals(Node.State.reserved);\n+        if (isNew) return false;\n+        return state().equals(Node.State.reserved);\n     }\n \n-    @Override\n-    public String toString() {\n-        return node.id();\n+    public static NodeCandidate createChild(Node node,\n+                                            NodeResources freeParentCapacity,\n+                                            Node parent,\n+                                            boolean violatesSpares,\n+                                            boolean isSurplus,\n+                                            boolean isNew,\n+                                            boolean isResizeable) {\n+        return new ConcreteNodeCandidate(node, freeParentCapacity, Optional.of(parent), violatesSpares, isSurplus, isNew, isResizeable);\n     }\n \n-    @Override\n-    public int hashCode() {\n-        return node.hashCode();\n+    public static NodeCandidate createNewChild(NodeResources resources,\n+                                               NodeResources freeParentCapacity,\n+                                               Node parent,\n+                                               boolean violatesSpares,\n+                                               LockedNodeList allNodes,\n+                                               NodeRepository nodeRepository) {\n+        return new VirtualNodeCandidate(resources, freeParentCapacity, parent, violatesSpares, allNodes, nodeRepository);\n     }\n \n-    @Override\n-    public boolean equals(Object other) {\n-        if (other == this) return true;\n-        if ( ! (other instanceof NodeCandidate)) return false;\n-        return this.node.equals(((NodeCandidate)other).node);\n+    public static NodeCandidate createNewExclusiveChild(Node node, Node parent) {\n+        return new ConcreteNodeCandidate(node, node.resources(), Optional.of(parent), false, false, true, false);\n     }\n \n-    static class Builder {\n+    public static NodeCandidate createStandalone(Node node, boolean isSurplus, boolean isNew) {\n+        return new ConcreteNodeCandidate(node, node.resources(), Optional.empty(), false, isSurplus, isNew, false);\n+    }\n+\n+    /** A candidate backed by a node */\n+    static class ConcreteNodeCandidate extends NodeCandidate {\n+\n+        private final Node node;\n+\n+        ConcreteNodeCandidate(Node node, NodeResources freeParentCapacity, Optional<Node> parent,\n+                              boolean violatesSpares,\n+                              boolean isSurplus, boolean isNew, boolean isResizeable) {\n+            super(freeParentCapacity, parent, violatesSpares, isSurplus, isNew, isResizeable);\n+            this.node = Objects.requireNonNull(node, \"Node cannot be null\");\n+        }\n+\n+        @Override\n+        public NodeResources resources() { return node.resources(); }\n+\n+        @Override\n+        public Optional<String> parentHostname() { return node.parentHostname(); }\n+\n+        @Override\n+        public NodeType type() { return node.type(); }\n \n-        public final Node node;\n-        private NodeResources freeParentCapacity;\n-        private Optional<Node> parent = Optional.empty();\n-        private boolean violatesSpares;\n-        private boolean isSurplusNode;\n-        private boolean isNewNode;\n-        private boolean isResizable;\n+        public Optional<Allocation> allocation() { return node.allocation(); }\n \n-        Builder(Node node) {\n-            this.node = node;\n-            this.freeParentCapacity = node.flavor().resources();\n+        public Node.State state() { return node.state(); }\n+\n+        public boolean wantToRetire() { return node.status().wantToRetire(); }\n+\n+        public Flavor flavor() { return node.flavor(); }\n+\n+        public NodeCandidate allocate(ApplicationId owner, ClusterMembership membership, NodeResources requestedResources, Instant at) {\n+            return new ConcreteNodeCandidate(node.allocate(owner, membership, requestedResources, at),\n+                                             freeParentCapacity, parent, violatesSpares, isSurplus, isNew, isResizable);\n         }\n \n-        /** The free capacity of the parent, before adding this node to it */\n-        Builder freeParentCapacity(NodeResources freeParentCapacity) {\n-            this.freeParentCapacity = freeParentCapacity;\n-            return this;\n+        /** Called when the node described by this candidate must be created */\n+        public NodeCandidate withNode() { return this; }\n+\n+        public Node toNode() { return node; }\n+\n+        @Override\n+        public int compareTo(NodeCandidate other) {\n+            int comparison = super.compareTo(other);\n+            if (comparison != 0) return comparison;\n+\n+            // Unimportant tie-breaking:\n+            if ( ! (other instanceof ConcreteNodeCandidate)) return -1;\n+            return this.node.hostname().compareTo(((ConcreteNodeCandidate)other).node.hostname());\n         }\n \n-        Builder parent(Node parent) {\n-            this.parent = Optional.of(parent);\n-            return this;\n+        @Override\n+        public String toString() {\n+            return node.id();\n         }\n \n-        Builder violatesSpares(boolean violatesSpares) {\n-            this.violatesSpares = violatesSpares;\n-            return this;\n+    }\n+\n+    /** A candidate for which no actual node has been created yet */\n+    static class VirtualNodeCandidate extends NodeCandidate {\n+\n+        /** The resources this node must have if created */\n+        private final NodeResources resources;\n+\n+        /** Needed to construct the node */\n+        private final LockedNodeList allNodes;\n+        private final NodeRepository nodeRepository;\n+\n+        private VirtualNodeCandidate(NodeResources resources,\n+                                     NodeResources freeParentCapacity,\n+                                     Node parent,\n+                                     boolean violatesSpares,\n+                                     LockedNodeList allNodes,\n+                                     NodeRepository nodeRepository) {\n+            super(freeParentCapacity, Optional.of(parent), violatesSpares, false, true, false);\n+            this.resources = resources;\n+            this.allNodes = allNodes;\n+            this.nodeRepository = nodeRepository;\n         }\n \n-        Builder surplusNode(boolean surplusNode) {\n-            isSurplusNode = surplusNode;\n-            return this;\n+        @Override\n+        public NodeResources resources() { return resources; }\n+\n+        @Override\n+        public Optional<String> parentHostname() { return Optional.of(parent.get().hostname()); }\n+\n+        @Override\n+        public NodeType type() { return NodeType.tenant; }\n+\n+        public Optional<Allocation> allocation() { return Optional.empty(); }\n+\n+        public Node.State state() { return Node.State.reserved; }\n+\n+        public boolean wantToRetire() { return false; }\n+\n+        public Flavor flavor() { return new Flavor(resources); }\n+\n+        public NodeCandidate allocate(ApplicationId owner, ClusterMembership membership, NodeResources requestedResources, Instant at) {\n+            return withNode().allocate(owner, membership, requestedResources, at);\n         }\n \n-        Builder newNode(boolean newNode) {\n-            isNewNode = newNode;\n-            return this;\n+        /** Called when the node described by this candidate must be created */\n+        public NodeCandidate withNode() {\n+            Optional<IP.Allocation> allocation;\n+            try {\n+                allocation = parent.get().ipConfig().pool().findAllocation(allNodes, nodeRepository.nameResolver());\n+                if (allocation.isEmpty())\n+                    throw new IllegalStateException(\"No free ip addresses on \" + parent.get() + \": Cannot allocate node\");\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Failed allocating IP address on \" + parent.get() +\": \", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2NDUyNA=="}, "originalCommit": {"oid": "d254d8378f398ea6e90e2dcf0e270516c4fd1654"}, "originalPosition": 364}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM0NTkxOQ==", "bodyText": "IP assignment and DNS issues typically correlate, at least in our internal infrastructure: If foo.example.com resolves to 1.1.1.1, but 1.1.1.1 resolves to bar.example.com, there's likely an IP conflict where two distinct hosts have been assigned the same IP.\nVespa itself also has strict hostname validation on startup, where hostname and IP are resolved and compared. That's another reason we do this check during allocation as the node would refuse to start in case of misconfiguration anyway.", "url": "https://github.com/vespa-engine/vespa/pull/14623#discussion_r497345919", "createdAt": "2020-09-30T08:48:57Z", "author": {"login": "mpolden"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodeCandidate.java", "diffHunk": "@@ -159,76 +186,174 @@ private double skewWith(NodeResources resources) {\n     }\n \n     private boolean isInNodeRepoAndReserved() {\n-        if (isNewNode) return false;\n-        return node.state().equals(Node.State.reserved);\n+        if (isNew) return false;\n+        return state().equals(Node.State.reserved);\n     }\n \n-    @Override\n-    public String toString() {\n-        return node.id();\n+    public static NodeCandidate createChild(Node node,\n+                                            NodeResources freeParentCapacity,\n+                                            Node parent,\n+                                            boolean violatesSpares,\n+                                            boolean isSurplus,\n+                                            boolean isNew,\n+                                            boolean isResizeable) {\n+        return new ConcreteNodeCandidate(node, freeParentCapacity, Optional.of(parent), violatesSpares, isSurplus, isNew, isResizeable);\n     }\n \n-    @Override\n-    public int hashCode() {\n-        return node.hashCode();\n+    public static NodeCandidate createNewChild(NodeResources resources,\n+                                               NodeResources freeParentCapacity,\n+                                               Node parent,\n+                                               boolean violatesSpares,\n+                                               LockedNodeList allNodes,\n+                                               NodeRepository nodeRepository) {\n+        return new VirtualNodeCandidate(resources, freeParentCapacity, parent, violatesSpares, allNodes, nodeRepository);\n     }\n \n-    @Override\n-    public boolean equals(Object other) {\n-        if (other == this) return true;\n-        if ( ! (other instanceof NodeCandidate)) return false;\n-        return this.node.equals(((NodeCandidate)other).node);\n+    public static NodeCandidate createNewExclusiveChild(Node node, Node parent) {\n+        return new ConcreteNodeCandidate(node, node.resources(), Optional.of(parent), false, false, true, false);\n     }\n \n-    static class Builder {\n+    public static NodeCandidate createStandalone(Node node, boolean isSurplus, boolean isNew) {\n+        return new ConcreteNodeCandidate(node, node.resources(), Optional.empty(), false, isSurplus, isNew, false);\n+    }\n+\n+    /** A candidate backed by a node */\n+    static class ConcreteNodeCandidate extends NodeCandidate {\n+\n+        private final Node node;\n+\n+        ConcreteNodeCandidate(Node node, NodeResources freeParentCapacity, Optional<Node> parent,\n+                              boolean violatesSpares,\n+                              boolean isSurplus, boolean isNew, boolean isResizeable) {\n+            super(freeParentCapacity, parent, violatesSpares, isSurplus, isNew, isResizeable);\n+            this.node = Objects.requireNonNull(node, \"Node cannot be null\");\n+        }\n+\n+        @Override\n+        public NodeResources resources() { return node.resources(); }\n+\n+        @Override\n+        public Optional<String> parentHostname() { return node.parentHostname(); }\n+\n+        @Override\n+        public NodeType type() { return node.type(); }\n \n-        public final Node node;\n-        private NodeResources freeParentCapacity;\n-        private Optional<Node> parent = Optional.empty();\n-        private boolean violatesSpares;\n-        private boolean isSurplusNode;\n-        private boolean isNewNode;\n-        private boolean isResizable;\n+        public Optional<Allocation> allocation() { return node.allocation(); }\n \n-        Builder(Node node) {\n-            this.node = node;\n-            this.freeParentCapacity = node.flavor().resources();\n+        public Node.State state() { return node.state(); }\n+\n+        public boolean wantToRetire() { return node.status().wantToRetire(); }\n+\n+        public Flavor flavor() { return node.flavor(); }\n+\n+        public NodeCandidate allocate(ApplicationId owner, ClusterMembership membership, NodeResources requestedResources, Instant at) {\n+            return new ConcreteNodeCandidate(node.allocate(owner, membership, requestedResources, at),\n+                                             freeParentCapacity, parent, violatesSpares, isSurplus, isNew, isResizable);\n         }\n \n-        /** The free capacity of the parent, before adding this node to it */\n-        Builder freeParentCapacity(NodeResources freeParentCapacity) {\n-            this.freeParentCapacity = freeParentCapacity;\n-            return this;\n+        /** Called when the node described by this candidate must be created */\n+        public NodeCandidate withNode() { return this; }\n+\n+        public Node toNode() { return node; }\n+\n+        @Override\n+        public int compareTo(NodeCandidate other) {\n+            int comparison = super.compareTo(other);\n+            if (comparison != 0) return comparison;\n+\n+            // Unimportant tie-breaking:\n+            if ( ! (other instanceof ConcreteNodeCandidate)) return -1;\n+            return this.node.hostname().compareTo(((ConcreteNodeCandidate)other).node.hostname());\n         }\n \n-        Builder parent(Node parent) {\n-            this.parent = Optional.of(parent);\n-            return this;\n+        @Override\n+        public String toString() {\n+            return node.id();\n         }\n \n-        Builder violatesSpares(boolean violatesSpares) {\n-            this.violatesSpares = violatesSpares;\n-            return this;\n+    }\n+\n+    /** A candidate for which no actual node has been created yet */\n+    static class VirtualNodeCandidate extends NodeCandidate {\n+\n+        /** The resources this node must have if created */\n+        private final NodeResources resources;\n+\n+        /** Needed to construct the node */\n+        private final LockedNodeList allNodes;\n+        private final NodeRepository nodeRepository;\n+\n+        private VirtualNodeCandidate(NodeResources resources,\n+                                     NodeResources freeParentCapacity,\n+                                     Node parent,\n+                                     boolean violatesSpares,\n+                                     LockedNodeList allNodes,\n+                                     NodeRepository nodeRepository) {\n+            super(freeParentCapacity, Optional.of(parent), violatesSpares, false, true, false);\n+            this.resources = resources;\n+            this.allNodes = allNodes;\n+            this.nodeRepository = nodeRepository;\n         }\n \n-        Builder surplusNode(boolean surplusNode) {\n-            isSurplusNode = surplusNode;\n-            return this;\n+        @Override\n+        public NodeResources resources() { return resources; }\n+\n+        @Override\n+        public Optional<String> parentHostname() { return Optional.of(parent.get().hostname()); }\n+\n+        @Override\n+        public NodeType type() { return NodeType.tenant; }\n+\n+        public Optional<Allocation> allocation() { return Optional.empty(); }\n+\n+        public Node.State state() { return Node.State.reserved; }\n+\n+        public boolean wantToRetire() { return false; }\n+\n+        public Flavor flavor() { return new Flavor(resources); }\n+\n+        public NodeCandidate allocate(ApplicationId owner, ClusterMembership membership, NodeResources requestedResources, Instant at) {\n+            return withNode().allocate(owner, membership, requestedResources, at);\n         }\n \n-        Builder newNode(boolean newNode) {\n-            isNewNode = newNode;\n-            return this;\n+        /** Called when the node described by this candidate must be created */\n+        public NodeCandidate withNode() {\n+            Optional<IP.Allocation> allocation;\n+            try {\n+                allocation = parent.get().ipConfig().pool().findAllocation(allNodes, nodeRepository.nameResolver());\n+                if (allocation.isEmpty())\n+                    throw new IllegalStateException(\"No free ip addresses on \" + parent.get() + \": Cannot allocate node\");\n+            } catch (Exception e) {\n+                throw new IllegalStateException(\"Failed allocating IP address on \" + parent.get() +\": \", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA2NDUyNA=="}, "originalCommit": {"oid": "d254d8378f398ea6e90e2dcf0e270516c4fd1654"}, "originalPosition": 364}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1263, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}