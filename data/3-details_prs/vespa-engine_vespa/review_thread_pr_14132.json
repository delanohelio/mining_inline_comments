{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNzA3OTQy", "number": 14132, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzozNzowOVrOEbDRIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzozNzowOVrOEbDRIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODAwNTQ3OnYy", "diffSide": "RIGHT", "path": "container-di/src/test/java/com/yahoo/container/di/componentgraph/core/ComponentGraphTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzozNzowOVrOHE1rQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwNzozNDoxN1rOHFDTdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgzNTc3OA==", "bodyText": "Should this be outerComponent.inject(middleComponent); ?", "url": "https://github.com/vespa-engine/vespa/pull/14132#discussion_r474835778", "createdAt": "2020-08-21T17:37:09Z", "author": {"login": "bratseth"}, "path": "container-di/src/test/java/com/yahoo/container/di/componentgraph/core/ComponentGraphTest.java", "diffHunk": "@@ -86,6 +87,28 @@ public void component_taking_config_can_be_instantiated() {\n         assertThat(instance.config.stringVal(), is(\"test-value\"));\n     }\n \n+    @Test\n+    public void all_created_components_are_returned_in_reverse_topological_order() {\n+        Node innerComponent = mockComponentNode(SimpleComponent.class);\n+        Node middleComponent = mockComponentNode(ComponentTakingComponent.class);\n+        Node outerComponent = mockComponentNode(ComponentTakingComponentTakingComponent.class);\n+        middleComponent.inject(innerComponent);\n+        outerComponent.inject(innerComponent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbcc9107e3ae49e61270e002e241d9a07864facd"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1OTAxNg==", "bodyText": "Yes, it should. Not sure it changes anything, and no idea why it's allowed, though :) Perhaps this isn't needed at all for the unit test.", "url": "https://github.com/vespa-engine/vespa/pull/14132#discussion_r475059016", "createdAt": "2020-08-22T07:33:39Z", "author": {"login": "jonmv"}, "path": "container-di/src/test/java/com/yahoo/container/di/componentgraph/core/ComponentGraphTest.java", "diffHunk": "@@ -86,6 +87,28 @@ public void component_taking_config_can_be_instantiated() {\n         assertThat(instance.config.stringVal(), is(\"test-value\"));\n     }\n \n+    @Test\n+    public void all_created_components_are_returned_in_reverse_topological_order() {\n+        Node innerComponent = mockComponentNode(SimpleComponent.class);\n+        Node middleComponent = mockComponentNode(ComponentTakingComponent.class);\n+        Node outerComponent = mockComponentNode(ComponentTakingComponentTakingComponent.class);\n+        middleComponent.inject(innerComponent);\n+        outerComponent.inject(innerComponent);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgzNTc3OA=="}, "originalCommit": {"oid": "dbcc9107e3ae49e61270e002e241d9a07864facd"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA1OTA2Mw==", "bodyText": "Also, the test should probably run lots of times, to catch the 1/6 false positives each time. With randomised operation order before verification.", "url": "https://github.com/vespa-engine/vespa/pull/14132#discussion_r475059063", "createdAt": "2020-08-22T07:34:17Z", "author": {"login": "jonmv"}, "path": "container-di/src/test/java/com/yahoo/container/di/componentgraph/core/ComponentGraphTest.java", "diffHunk": "@@ -86,6 +87,28 @@ public void component_taking_config_can_be_instantiated() {\n         assertThat(instance.config.stringVal(), is(\"test-value\"));\n     }\n \n+    @Test\n+    public void all_created_components_are_returned_in_reverse_topological_order() {\n+        Node innerComponent = mockComponentNode(SimpleComponent.class);\n+        Node middleComponent = mockComponentNode(ComponentTakingComponent.class);\n+        Node outerComponent = mockComponentNode(ComponentTakingComponentTakingComponent.class);\n+        middleComponent.inject(innerComponent);\n+        outerComponent.inject(innerComponent);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgzNTc3OA=="}, "originalCommit": {"oid": "dbcc9107e3ae49e61270e002e241d9a07864facd"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1485, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}