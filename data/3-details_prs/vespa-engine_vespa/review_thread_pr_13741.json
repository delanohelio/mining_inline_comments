{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNDAzNjA2", "number": 13741, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODoyNTowMFrOEJ_TvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODozMzowNFrOEJ_hww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTA5ODg0OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/features/global_sequence_feature.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODoyNTowMFrOGqxcfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMToyODo0OFrOGq4B_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwMzQ4NA==", "bodyText": "what about the 3 bits we allow to overlap between distribution key and docid?", "url": "https://github.com/vespa-engine/vespa/pull/13741#discussion_r447503484", "createdAt": "2020-06-30T08:25:00Z", "author": {"login": "havardpe"}, "path": "searchlib/src/vespa/searchlib/features/global_sequence_feature.cpp", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"global_sequence_feature.h\"\n+#include <vespa/vespalib/util/stash.h>\n+\n+using namespace search::fef;\n+\n+namespace search::features {\n+\n+namespace {\n+\n+/**\n+ * Implements the executor for combining lid and distribution key to form a globally unique value.\n+ */\n+class GlobalSequenceExecutor : public fef::FeatureExecutor {\n+private:\n+    uint32_t _distributionKey;\n+\n+public:\n+    GlobalSequenceExecutor(uint32_t distributionKey)\n+        : _distributionKey(distributionKey)\n+    {\n+    }\n+\n+    void execute(uint32_t docId) override {\n+        outputs().set_number(0, ((1ul << 48u) - ((uint64_t(docId) << 16u) | _distributionKey)));\n+    }\n+};\n+\n+}\n+\n+GlobalSequenceBlueprint::GlobalSequenceBlueprint() :\n+    Blueprint(\"globalsequence\"),\n+    _distributionKey(0)\n+{\n+}\n+\n+void\n+GlobalSequenceBlueprint::visitDumpFeatures(const IIndexEnvironment &, IDumpFeatureVisitor &) const\n+{\n+}\n+\n+bool\n+GlobalSequenceBlueprint::setup(const IIndexEnvironment & env, const ParameterList & )\n+{\n+    _distributionKey = env.getDistributionKey();\n+    assert( _distributionKey < 0x80000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af54254095fae1bdea8d101a9c0f4811ddf69f56"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYxMTM4OQ==", "bodyText": "Ouch, thanks. That should be 0x10000", "url": "https://github.com/vespa-engine/vespa/pull/13741#discussion_r447611389", "createdAt": "2020-06-30T11:28:48Z", "author": {"login": "baldersheim"}, "path": "searchlib/src/vespa/searchlib/features/global_sequence_feature.cpp", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"global_sequence_feature.h\"\n+#include <vespa/vespalib/util/stash.h>\n+\n+using namespace search::fef;\n+\n+namespace search::features {\n+\n+namespace {\n+\n+/**\n+ * Implements the executor for combining lid and distribution key to form a globally unique value.\n+ */\n+class GlobalSequenceExecutor : public fef::FeatureExecutor {\n+private:\n+    uint32_t _distributionKey;\n+\n+public:\n+    GlobalSequenceExecutor(uint32_t distributionKey)\n+        : _distributionKey(distributionKey)\n+    {\n+    }\n+\n+    void execute(uint32_t docId) override {\n+        outputs().set_number(0, ((1ul << 48u) - ((uint64_t(docId) << 16u) | _distributionKey)));\n+    }\n+};\n+\n+}\n+\n+GlobalSequenceBlueprint::GlobalSequenceBlueprint() :\n+    Blueprint(\"globalsequence\"),\n+    _distributionKey(0)\n+{\n+}\n+\n+void\n+GlobalSequenceBlueprint::visitDumpFeatures(const IIndexEnvironment &, IDumpFeatureVisitor &) const\n+{\n+}\n+\n+bool\n+GlobalSequenceBlueprint::setup(const IIndexEnvironment & env, const ParameterList & )\n+{\n+    _distributionKey = env.getDistributionKey();\n+    assert( _distributionKey < 0x80000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwMzQ4NA=="}, "originalCommit": {"oid": "af54254095fae1bdea8d101a9c0f4811ddf69f56"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTExODUzOnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/features/global_sequence_feature.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODoyOToyM1rOGqxoag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMTozNTozOFrOGq4PIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwNjUzOA==", "bodyText": "consider moving the magic to an inlined function in the header that can also be called by the test", "url": "https://github.com/vespa-engine/vespa/pull/13741#discussion_r447506538", "createdAt": "2020-06-30T08:29:23Z", "author": {"login": "havardpe"}, "path": "searchlib/src/vespa/searchlib/features/global_sequence_feature.cpp", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"global_sequence_feature.h\"\n+#include <vespa/vespalib/util/stash.h>\n+\n+using namespace search::fef;\n+\n+namespace search::features {\n+\n+namespace {\n+\n+/**\n+ * Implements the executor for combining lid and distribution key to form a globally unique value.\n+ */\n+class GlobalSequenceExecutor : public fef::FeatureExecutor {\n+private:\n+    uint32_t _distributionKey;\n+\n+public:\n+    GlobalSequenceExecutor(uint32_t distributionKey)\n+        : _distributionKey(distributionKey)\n+    {\n+    }\n+\n+    void execute(uint32_t docId) override {\n+        outputs().set_number(0, ((1ul << 48u) - ((uint64_t(docId) << 16u) | _distributionKey)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af54254095fae1bdea8d101a9c0f4811ddf69f56"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYxNDc1Mg==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/13741#discussion_r447614752", "createdAt": "2020-06-30T11:35:38Z", "author": {"login": "baldersheim"}, "path": "searchlib/src/vespa/searchlib/features/global_sequence_feature.cpp", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"global_sequence_feature.h\"\n+#include <vespa/vespalib/util/stash.h>\n+\n+using namespace search::fef;\n+\n+namespace search::features {\n+\n+namespace {\n+\n+/**\n+ * Implements the executor for combining lid and distribution key to form a globally unique value.\n+ */\n+class GlobalSequenceExecutor : public fef::FeatureExecutor {\n+private:\n+    uint32_t _distributionKey;\n+\n+public:\n+    GlobalSequenceExecutor(uint32_t distributionKey)\n+        : _distributionKey(distributionKey)\n+    {\n+    }\n+\n+    void execute(uint32_t docId) override {\n+        outputs().set_number(0, ((1ul << 48u) - ((uint64_t(docId) << 16u) | _distributionKey)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwNjUzOA=="}, "originalCommit": {"oid": "af54254095fae1bdea8d101a9c0f4811ddf69f56"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTEzNDc1OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/features/global_sequence_feature.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODozMzowNFrOGqxyHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMTozMDo0MlrOGq4Fnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwOTAyMA==", "bodyText": "consider camel case to match naming of other features", "url": "https://github.com/vespa-engine/vespa/pull/13741#discussion_r447509020", "createdAt": "2020-06-30T08:33:04Z", "author": {"login": "havardpe"}, "path": "searchlib/src/vespa/searchlib/features/global_sequence_feature.cpp", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"global_sequence_feature.h\"\n+#include <vespa/vespalib/util/stash.h>\n+\n+using namespace search::fef;\n+\n+namespace search::features {\n+\n+namespace {\n+\n+/**\n+ * Implements the executor for combining lid and distribution key to form a globally unique value.\n+ */\n+class GlobalSequenceExecutor : public fef::FeatureExecutor {\n+private:\n+    uint32_t _distributionKey;\n+\n+public:\n+    GlobalSequenceExecutor(uint32_t distributionKey)\n+        : _distributionKey(distributionKey)\n+    {\n+    }\n+\n+    void execute(uint32_t docId) override {\n+        outputs().set_number(0, ((1ul << 48u) - ((uint64_t(docId) << 16u) | _distributionKey)));\n+    }\n+};\n+\n+}\n+\n+GlobalSequenceBlueprint::GlobalSequenceBlueprint() :\n+    Blueprint(\"globalsequence\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af54254095fae1bdea8d101a9c0f4811ddf69f56"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUxOTczOQ==", "bodyText": "Yes, the name should use came case.", "url": "https://github.com/vespa-engine/vespa/pull/13741#discussion_r447519739", "createdAt": "2020-06-30T08:49:10Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/features/global_sequence_feature.cpp", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"global_sequence_feature.h\"\n+#include <vespa/vespalib/util/stash.h>\n+\n+using namespace search::fef;\n+\n+namespace search::features {\n+\n+namespace {\n+\n+/**\n+ * Implements the executor for combining lid and distribution key to form a globally unique value.\n+ */\n+class GlobalSequenceExecutor : public fef::FeatureExecutor {\n+private:\n+    uint32_t _distributionKey;\n+\n+public:\n+    GlobalSequenceExecutor(uint32_t distributionKey)\n+        : _distributionKey(distributionKey)\n+    {\n+    }\n+\n+    void execute(uint32_t docId) override {\n+        outputs().set_number(0, ((1ul << 48u) - ((uint64_t(docId) << 16u) | _distributionKey)));\n+    }\n+};\n+\n+}\n+\n+GlobalSequenceBlueprint::GlobalSequenceBlueprint() :\n+    Blueprint(\"globalsequence\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwOTAyMA=="}, "originalCommit": {"oid": "af54254095fae1bdea8d101a9c0f4811ddf69f56"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYxMjMxOQ==", "bodyText": "globalsequence -> globalSequence", "url": "https://github.com/vespa-engine/vespa/pull/13741#discussion_r447612319", "createdAt": "2020-06-30T11:30:42Z", "author": {"login": "baldersheim"}, "path": "searchlib/src/vespa/searchlib/features/global_sequence_feature.cpp", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"global_sequence_feature.h\"\n+#include <vespa/vespalib/util/stash.h>\n+\n+using namespace search::fef;\n+\n+namespace search::features {\n+\n+namespace {\n+\n+/**\n+ * Implements the executor for combining lid and distribution key to form a globally unique value.\n+ */\n+class GlobalSequenceExecutor : public fef::FeatureExecutor {\n+private:\n+    uint32_t _distributionKey;\n+\n+public:\n+    GlobalSequenceExecutor(uint32_t distributionKey)\n+        : _distributionKey(distributionKey)\n+    {\n+    }\n+\n+    void execute(uint32_t docId) override {\n+        outputs().set_number(0, ((1ul << 48u) - ((uint64_t(docId) << 16u) | _distributionKey)));\n+    }\n+};\n+\n+}\n+\n+GlobalSequenceBlueprint::GlobalSequenceBlueprint() :\n+    Blueprint(\"globalsequence\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwOTAyMA=="}, "originalCommit": {"oid": "af54254095fae1bdea8d101a9c0f4811ddf69f56"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1920, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}