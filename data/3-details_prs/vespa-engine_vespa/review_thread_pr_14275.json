{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4NjcwNDY3", "number": 14275, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOTowNToxMlrOEgThkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOTowNToxMlrOEgThkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzA5Nzc2OnYy", "diffSide": "RIGHT", "path": "config-model/src/main/java/com/yahoo/vespa/model/clients/ContainerDocumentApi.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOTowNToxMlrOHNF2gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOTowNToxMlrOHNF2gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ4OTQwOA==", "bodyText": "Factory -> Factor ?", "url": "https://github.com/vespa-engine/vespa/pull/14275#discussion_r483489408", "createdAt": "2020-09-04T09:05:12Z", "author": {"login": "baldersheim"}, "path": "config-model/src/main/java/com/yahoo/vespa/model/clients/ContainerDocumentApi.java", "diffHunk": "@@ -93,29 +92,36 @@ private static ThreadPoolExecutorComponent newExecutorComponent(String name, Con\n         return handler;\n     }\n \n-    private static int maxPoolSize(ContainerCluster<?> cluster) {\n+    private static int maxPoolSize(ContainerCluster<?> cluster, Options options) {\n+        double vcpu = vcpu(cluster);\n+        if (vcpu == 0) return FALLBACK_MAX_POOL_SIZE;\n+        return Math.max(2, (int)Math.ceil(vcpu * options.feedThreadPoolSizeFactory));\n+    }\n+\n+    private static int corePoolSize(ContainerCluster<?> cluster, Options options) {\n+        double vcpu = vcpu(cluster);\n+        if (vcpu == 0) return FALLBACK_CORE_POOL_SIZE;\n+        return Math.max(1, (int)Math.ceil(vcpu * options.feedThreadPoolSizeFactory * 0.5));\n+    }\n+\n+    private static double vcpu(ContainerCluster<?> cluster) {\n         List<Double> vcpus = cluster.getContainers().stream()\n                 .filter(c -> c.getHostResource() != null && c.getHostResource().realResources() != null)\n                 .map(c -> c.getHostResource().realResources().vcpu())\n                 .distinct()\n                 .collect(Collectors.toList());\n         // We can only use host resource for calculation if all container nodes in the cluster are homogeneous (in terms of vcpu)\n-        if (vcpus.size() != 1 || vcpus.get(0) == 0) return FALLBACK_MAX_POOL_SIZE;\n-        return Math.max(2, (int)Math.ceil(vcpus.get(0)));\n-    }\n-\n-    private static int corePoolSize(int maxPoolSize, Options options) {\n-        if (maxPoolSize == FALLBACK_MAX_POOL_SIZE) return FALLBACK_CORE_POOL_SIZE;\n-        return Math.max(1, (int)Math.ceil(options.feedCoreThreadPoolSizeFactor * maxPoolSize));\n+        if (vcpus.size() != 1 || vcpus.get(0) == 0) return 0;\n+        return vcpus.get(0);\n     }\n \n     public static final class Options {\n         private final Collection<String> bindings;\n-        private final double feedCoreThreadPoolSizeFactor;\n+        private final double feedThreadPoolSizeFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9e20a94c5680cc90d31f4eeee5b3e7fee410495"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1453, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}