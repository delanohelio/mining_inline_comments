{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NTM5MDE3", "number": 11998, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNDo0NjozNlrODbmNWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNDo0NjozNlrODbmNWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjY0MTUyOnYy", "diffSide": "RIGHT", "path": "searchcore/src/vespa/searchcore/proton/common/selectcontext.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNDo0NjozNlrOFjK-fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNDo1NToxMVrOFjLUaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQyNDMxOA==", "bodyText": "Do we need to expose AttributeReadGuard here or could we just return the IAttributeVector interface instead (that you get from the guard)? If so, we should probably rename the function to something like attribute_at_index() or guarded_attribute_at_index().", "url": "https://github.com/vespa-engine/vespa/pull/11998#discussion_r372424318", "createdAt": "2020-01-29T14:46:36Z", "author": {"login": "geirst"}, "path": "searchcore/src/vespa/searchcore/proton/common/selectcontext.cpp", "diffHunk": "@@ -26,23 +28,30 @@ SelectContext::SelectContext(const CachedSelect &cachedSelect)\n       _cachedSelect(cachedSelect)\n { }\n \n-SelectContext::~SelectContext() { }\n+SelectContext::~SelectContext() = default;\n \n void\n SelectContext::getAttributeGuards()\n {\n-    _guards->resize(_cachedSelect.attributes().size());\n-    auto j(_cachedSelect.attributes().begin());\n-    for (std::vector<AttributeGuard>::iterator i(_guards->begin()), ie(_guards->end()); i != ie; ++i, ++j) {\n-        *i = AttributeGuard(*j);\n+    _guards->clear();\n+    _guards->reserve(_cachedSelect.attributes().size());\n+    for (const auto& attr : _cachedSelect.attributes()) {\n+        _guards->emplace_back(attr->makeReadGuard(false));\n     }\n }\n \n-\n void\n SelectContext::dropAttributeGuards()\n {\n     _guards->clear();\n }\n \n+const search::attribute::AttributeReadGuard&\n+SelectContext::read_guard_at_index(uint32_t index) const noexcept", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb74faa5f2e56c930db1ec06ebf912e5b316c087"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQyOTkyOQ==", "bodyText": "Agreed, it's better to just expose the IAttributeVector. Will do this as a follow-up since I'm already working on this code base as part of the \"imported fields in selections\" task", "url": "https://github.com/vespa-engine/vespa/pull/11998#discussion_r372429929", "createdAt": "2020-01-29T14:55:11Z", "author": {"login": "vekterli"}, "path": "searchcore/src/vespa/searchcore/proton/common/selectcontext.cpp", "diffHunk": "@@ -26,23 +28,30 @@ SelectContext::SelectContext(const CachedSelect &cachedSelect)\n       _cachedSelect(cachedSelect)\n { }\n \n-SelectContext::~SelectContext() { }\n+SelectContext::~SelectContext() = default;\n \n void\n SelectContext::getAttributeGuards()\n {\n-    _guards->resize(_cachedSelect.attributes().size());\n-    auto j(_cachedSelect.attributes().begin());\n-    for (std::vector<AttributeGuard>::iterator i(_guards->begin()), ie(_guards->end()); i != ie; ++i, ++j) {\n-        *i = AttributeGuard(*j);\n+    _guards->clear();\n+    _guards->reserve(_cachedSelect.attributes().size());\n+    for (const auto& attr : _cachedSelect.attributes()) {\n+        _guards->emplace_back(attr->makeReadGuard(false));\n     }\n }\n \n-\n void\n SelectContext::dropAttributeGuards()\n {\n     _guards->clear();\n }\n \n+const search::attribute::AttributeReadGuard&\n+SelectContext::read_guard_at_index(uint32_t index) const noexcept", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQyNDMxOA=="}, "originalCommit": {"oid": "bb74faa5f2e56c930db1ec06ebf912e5b316c087"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2552, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}