{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2MDM5NTkw", "number": 13207, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTo0NDowNVrOD7NHVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjoyMTozNlrOD7N0QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDA3NDQ0OnYy", "diffSide": "RIGHT", "path": "vespalib/src/vespa/vespalib/stllike/allocator.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTo0NDowNVrOGTYtlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMzoyNDozNVrOGTcErA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MTAxNA==", "bodyText": "This file doesn't include any headers for required alloc types", "url": "https://github.com/vespa-engine/vespa/pull/13207#discussion_r422981014", "createdAt": "2020-05-11T11:44:05Z", "author": {"login": "vekterli"}, "path": "vespalib/src/vespa/vespalib/stllike/allocator.h", "diffHunk": "@@ -0,0 +1,28 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+namespace vespalib {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe84b0f2c3720e98a26a509fd70a9e2307e14db"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAzNjA3Ng==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/13207#discussion_r423036076", "createdAt": "2020-05-11T13:24:35Z", "author": {"login": "baldersheim"}, "path": "vespalib/src/vespa/vespalib/stllike/allocator.h", "diffHunk": "@@ -0,0 +1,28 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+namespace vespalib {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MTAxNA=="}, "originalCommit": {"oid": "efe84b0f2c3720e98a26a509fd70a9e2307e14db"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDE4NDAyOnYy", "diffSide": "RIGHT", "path": "vespalib/src/vespa/vespalib/stllike/allocator.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjoxOTo1OFrOGTZy0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNDozNTowNlrOGTfFpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5ODczOA==", "bodyText": "Since this is technically a stateful allocator whose ability to free an allocated pointer depends on the allocator instance the pointer was originally returned from, I think it might be required to add operator== here for testing allocator equivalence. See https://en.cppreference.com/w/cpp/memory/allocator/operator_cmp and https://howardhinnant.github.io/allocator_boilerplate.html#new", "url": "https://github.com/vespa-engine/vespa/pull/13207#discussion_r422998738", "createdAt": "2020-05-11T12:19:58Z", "author": {"login": "vekterli"}, "path": "vespalib/src/vespa/vespalib/stllike/allocator.h", "diffHunk": "@@ -0,0 +1,28 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+namespace vespalib {\n+\n+/**\n+ * std compliant allocator that will use a smart allocator\n+ * that uses mmap prefering huge pages for large allocations.\n+ * This is a good fit for use with std::vector and std::deque.\n+ */\n+template <typename T>\n+class allocator_large {\n+    using PtrAndSize = alloc::MemoryAllocator::PtrAndSize;\n+public:\n+    allocator_large() : _allocator(alloc::MemoryAllocator::select_allocator()) {}\n+    using value_type = T;\n+    T * allocate(std::size_t n) {\n+        return static_cast<T *>(_allocator->alloc(n*sizeof(T)).first);\n+    }\n+    void deallocate(T * p, std::size_t n) {\n+        _allocator->free(p, n*sizeof(T));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe84b0f2c3720e98a26a509fd70a9e2307e14db"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA4NTQ3Ng==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/13207#discussion_r423085476", "createdAt": "2020-05-11T14:35:06Z", "author": {"login": "baldersheim"}, "path": "vespalib/src/vespa/vespalib/stllike/allocator.h", "diffHunk": "@@ -0,0 +1,28 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+namespace vespalib {\n+\n+/**\n+ * std compliant allocator that will use a smart allocator\n+ * that uses mmap prefering huge pages for large allocations.\n+ * This is a good fit for use with std::vector and std::deque.\n+ */\n+template <typename T>\n+class allocator_large {\n+    using PtrAndSize = alloc::MemoryAllocator::PtrAndSize;\n+public:\n+    allocator_large() : _allocator(alloc::MemoryAllocator::select_allocator()) {}\n+    using value_type = T;\n+    T * allocate(std::size_t n) {\n+        return static_cast<T *>(_allocator->alloc(n*sizeof(T)).first);\n+    }\n+    void deallocate(T * p, std::size_t n) {\n+        _allocator->free(p, n*sizeof(T));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5ODczOA=="}, "originalCommit": {"oid": "efe84b0f2c3720e98a26a509fd70a9e2307e14db"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDE4OTQ0OnYy", "diffSide": "RIGHT", "path": "vespalib/src/vespa/vespalib/stllike/allocator.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjoyMTozNlrOGTZ2VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMzoyNzowOFrOGTcLdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5OTYzNg==", "bodyText": "Could be noexcept", "url": "https://github.com/vespa-engine/vespa/pull/13207#discussion_r422999636", "createdAt": "2020-05-11T12:21:36Z", "author": {"login": "vekterli"}, "path": "vespalib/src/vespa/vespalib/stllike/allocator.h", "diffHunk": "@@ -0,0 +1,28 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+namespace vespalib {\n+\n+/**\n+ * std compliant allocator that will use a smart allocator\n+ * that uses mmap prefering huge pages for large allocations.\n+ * This is a good fit for use with std::vector and std::deque.\n+ */\n+template <typename T>\n+class allocator_large {\n+    using PtrAndSize = alloc::MemoryAllocator::PtrAndSize;\n+public:\n+    allocator_large() : _allocator(alloc::MemoryAllocator::select_allocator()) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe84b0f2c3720e98a26a509fd70a9e2307e14db"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAzNzgxMg==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/13207#discussion_r423037812", "createdAt": "2020-05-11T13:27:08Z", "author": {"login": "baldersheim"}, "path": "vespalib/src/vespa/vespalib/stllike/allocator.h", "diffHunk": "@@ -0,0 +1,28 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+namespace vespalib {\n+\n+/**\n+ * std compliant allocator that will use a smart allocator\n+ * that uses mmap prefering huge pages for large allocations.\n+ * This is a good fit for use with std::vector and std::deque.\n+ */\n+template <typename T>\n+class allocator_large {\n+    using PtrAndSize = alloc::MemoryAllocator::PtrAndSize;\n+public:\n+    allocator_large() : _allocator(alloc::MemoryAllocator::select_allocator()) {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5OTYzNg=="}, "originalCommit": {"oid": "efe84b0f2c3720e98a26a509fd70a9e2307e14db"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1629, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}