{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NjAyMjAz", "number": 15506, "title": "Move bucket ownership methods to DistributorBucketSpace.", "bodyText": "@vekterli : please review", "createdAt": "2020-11-27T13:03:58Z", "url": "https://github.com/vespa-engine/vespa/pull/15506", "merged": true, "mergeCommit": {"oid": "b41c86bed1958c3ef5a817b3102c4a2ab3feec26"}, "closed": true, "closedAt": "2020-11-30T13:58:49Z", "author": {"login": "toregge"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgnFTTAH2gAyNTI4NjAyMjAzOmIxMzhiMDBhOTg3YWZkYWY4ZTQzODNhNGU1NTViNDg4OWQ2ZGI4MWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdhlyXPAFqTU0MDkzMTA0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b138b00a987afdaf8e4383a4e555b4889d6db81d", "author": {"user": null}, "url": "https://github.com/vespa-engine/vespa/commit/b138b00a987afdaf8e4383a4e555b4889d6db81d", "committedDate": "2020-11-27T12:54:54Z", "message": "Move bucket ownership methods to DistributorBucketSpace."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNzk4NDkw", "url": "https://github.com/vespa-engine/vespa/pull/15506#pullrequestreview-540798490", "createdAt": "2020-11-30T10:56:56Z", "commit": {"oid": "b138b00a987afdaf8e4383a4e555b4889d6db81d"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMDo1Njo1NlrOH7103A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMjozOTowMFrOH75SrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUwOTkxNg==", "bodyText": "It would be nice to have a quick comment for the various DistributorBucketSpaceTest::count_* functions to make their semantics more readily apparent. E.g. that deep split implies a bucket split beyond the threshold where the ideal state starts changing per split level", "url": "https://github.com/vespa-engine/vespa/pull/15506#discussion_r532509916", "createdAt": "2020-11-30T10:56:56Z", "author": {"login": "vekterli"}, "path": "storage/src/tests/distributor/distributor_bucket_space_test.cpp", "diffHunk": "@@ -0,0 +1,202 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include <vespa/storage/distributor/distributor_bucket_space.h>\n+#include <vespa/storage/distributor/distributor_bucket_space_repo.h>\n+#include <vespa/vdslib/distribution/distribution.h>\n+#include <vespa/vdslib/state/clusterstate.h>\n+#include <vespa/vespalib/gtest/gtest.h>\n+\n+using document::BucketId;\n+using storage::lib::ClusterState;\n+using storage::lib::Distribution;\n+\n+namespace storage::distributor {\n+\n+namespace {\n+\n+std::shared_ptr<ClusterState> stable_state(std::make_shared<ClusterState>(\"distributor:4 storage:4 bits:8\"));\n+std::shared_ptr<ClusterState> node_1_down_state(std::make_shared<ClusterState>(\"distributor:4 .1.s:d storage:4 .1.s:d bits:8\"));\n+std::shared_ptr<Distribution> distribution_r1(std::make_shared<Distribution>(Distribution::getDefaultDistributionConfig(1, 4)));\n+std::shared_ptr<Distribution> distribution_r2(std::make_shared<Distribution>(Distribution::getDefaultDistributionConfig(2, 4)));\n+\n+}\n+\n+struct DistributorBucketSpaceTest : public ::testing::Test\n+{\n+    using CountVector = std::vector<uint32_t>;\n+\n+    DistributorBucketSpace bucket_space;\n+\n+    DistributorBucketSpaceTest()\n+        : ::testing::Test(),\n+          bucket_space(0u)\n+    {\n+    }\n+    ~DistributorBucketSpaceTest() = default;\n+    uint32_t count_distributor_buckets();\n+    uint32_t count_storage_buckets();\n+    uint32_t count_deep_split_distributor_buckets();\n+    uint32_t count_deep_split_storage_buckets();\n+    CountVector count_buckets();\n+    CountVector count_deep_split_buckets();\n+};\n+\n+uint32_t\n+DistributorBucketSpaceTest::count_distributor_buckets()\n+{\n+    uint32_t owned_buckets = 0;\n+    uint16_t distribution_bits = bucket_space.getClusterState().getDistributionBitCount();\n+    for (uint32_t i = 0; i < (1u << distribution_bits); ++i) {\n+        BucketId bucket(distribution_bits, i);\n+        bool owned = bucket_space.check_ownership_in_pending_and_current_state(bucket).isOwned();\n+        bool check_owned = bucket_space.check_ownership_in_pending_and_current_state_fallback(bucket).isOwned();\n+        EXPECT_EQ(check_owned, owned);\n+        if (owned) {\n+            ++owned_buckets;\n+        }\n+    }\n+    return owned_buckets;\n+}\n+\n+uint32_t\n+DistributorBucketSpaceTest::count_storage_buckets()\n+{\n+    uint32_t owned_buckets = 0;\n+    uint16_t distribution_bits = bucket_space.getClusterState().getDistributionBitCount();\n+    for (uint32_t i = 0; i < (1u << distribution_bits); ++i) {\n+        BucketId bucket(distribution_bits, i);\n+        auto ideal_nodes = bucket_space.get_ideal_nodes(bucket);\n+        auto check_ideal_nodes = bucket_space.get_ideal_nodes_fallback(bucket);\n+        EXPECT_EQ(check_ideal_nodes, ideal_nodes);\n+        for (auto node : ideal_nodes) {\n+            if (node == 0u) {\n+                ++owned_buckets;\n+            }\n+        }\n+    }\n+    return owned_buckets;\n+}\n+\n+uint32_t\n+DistributorBucketSpaceTest::count_deep_split_distributor_buckets()\n+{\n+    uint32_t owned_buckets = 0;\n+    uint16_t distribution_bits = bucket_space.getClusterState().getDistributionBitCount();\n+    uint32_t bias = 0;\n+    uint32_t bias_max = std::min(1u << distribution_bits, 1000u);\n+    for (; bias < bias_max; ++bias) {\n+        BucketId bucket(distribution_bits, bias);\n+        if (bucket_space.check_ownership_in_pending_and_current_state(bucket).isOwned()) {\n+            break;\n+        }\n+    }\n+    assert(bias < bias_max);\n+    for (uint32_t i = 0; i < 100; ++i) {\n+        BucketId bucket(42u, i * (1ul << 32) + bias);\n+        bool owned = bucket_space.check_ownership_in_pending_and_current_state(bucket).isOwned();\n+        bool check_owned = bucket_space.check_ownership_in_pending_and_current_state_fallback(bucket).isOwned();\n+        EXPECT_EQ(check_owned, owned);\n+        if (owned) {\n+            ++owned_buckets;\n+        }\n+    }\n+    return owned_buckets;\n+}\n+\n+uint32_t\n+DistributorBucketSpaceTest::count_deep_split_storage_buckets()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b138b00a987afdaf8e4383a4e555b4889d6db81d"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjU2NjcwMQ==", "bodyText": "Consider adding explicit", "url": "https://github.com/vespa-engine/vespa/pull/15506#discussion_r532566701", "createdAt": "2020-11-30T12:39:00Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/distributor/distributor_bucket_space_repo.h", "diffHunk": "@@ -19,7 +19,7 @@ class DistributorBucketSpaceRepo {\n     BucketSpaceMap _map;\n \n public:\n-    DistributorBucketSpaceRepo();\n+    DistributorBucketSpaceRepo(uint16_t node_index);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b138b00a987afdaf8e4383a4e555b4889d6db81d"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3174a771b6f31281a722eef28353206e43eac9a1", "author": {"user": null}, "url": "https://github.com/vespa-engine/vespa/commit/3174a771b6f31281a722eef28353206e43eac9a1", "committedDate": "2020-11-30T13:46:36Z", "message": "Add explicit keyword."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef611f4f2cc1b57318ffca3d5d647383adae8252", "author": {"user": null}, "url": "https://github.com/vespa-engine/vespa/commit/ef611f4f2cc1b57318ffca3d5d647383adae8252", "committedDate": "2020-11-30T13:46:53Z", "message": "Add comments about ideal nodes changing when bucket used bits > 33."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwOTMxMDQ2", "url": "https://github.com/vespa-engine/vespa/pull/15506#pullrequestreview-540931046", "createdAt": "2020-11-30T13:58:14Z", "commit": {"oid": "ef611f4f2cc1b57318ffca3d5d647383adae8252"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1922, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}