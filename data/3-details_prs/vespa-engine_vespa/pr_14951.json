{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1OTM5NTQ4", "number": 14951, "title": "Split the persistence thread and the message handler.", "bodyText": "Let FileStorManager own and control the Component and PersistenceHandler\nseparately from the Persistence thread.\nLet FileStorManager allocate and control stripe assignment.\n\n@vekterli and @geirst PR", "createdAt": "2020-10-19T12:45:21Z", "url": "https://github.com/vespa-engine/vespa/pull/14951", "merged": true, "mergeCommit": {"oid": "b898bffea4055d8306cf5656957c8a6b4a0fd4c6"}, "closed": true, "closedAt": "2020-10-19T16:00:33Z", "author": {"login": "baldersheim"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUCxDzgH2gAyNTA1OTM5NTQ4OjdkZmYwYTk4Nzk4MDBjOWRhODY0M2QxZjVjN2Q0ZjM5ZmM5MTA0Njc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUGUqNgH2gAyNTA1OTM5NTQ4OjIyOWI1YjNkMDhlYWQ1ZDJiOGYwMjIzNDFiZDI2ZmViMmQ2OTIzMjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7dff0a9879800c9da8643d1f5c7d4f39fc910467", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/7dff0a9879800c9da8643d1f5c7d4f39fc910467", "committedDate": "2020-10-19T11:49:07Z", "message": "Split the persistence thread and the message handler.\n- Let FileStorManager own and control the Component and PersistenceHandler\n  separately from the Persistence thread.\n- Let FileStorManager allocate and control stripe assignment."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExODA2MDAy", "url": "https://github.com/vespa-engine/vespa/pull/14951#pullrequestreview-511806002", "createdAt": "2020-10-19T14:11:34Z", "commit": {"oid": "7dff0a9879800c9da8643d1f5c7d4f39fc910467"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDoxMTozNFrOHkQhFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDoxODo1N1rOHkQ4vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc4MTM5Nw==", "bodyText": "The setup code per test function is very similar, and we could bundle it together in a helper class. Something to consider for upcoming work.", "url": "https://github.com/vespa-engine/vespa/pull/14951#discussion_r507781397", "createdAt": "2020-10-19T14:11:34Z", "author": {"login": "geirst"}, "path": "storage/src/tests/persistence/filestorage/filestormanagertest.cpp", "diffHunk": "@@ -721,12 +714,14 @@ TEST_F(FileStorManagerTest, priority) {\n     FileStorHandlerImpl filestorHandler(messageSender, metrics, _node->getComponentRegister());\n     ServiceLayerComponent component(_node->getComponentRegister(), \"test\");\n     BucketOwnershipNotifier bucketOwnershipNotifier(component, messageSender);\n-    std::unique_ptr<DiskThread> thread(createThread(\n-            *config, *_node, _node->getPersistenceProvider(),\n-            filestorHandler, bucketOwnershipNotifier, *metrics.disks[0]->threads[0]));\n-    std::unique_ptr<DiskThread> thread2(createThread(\n-            *config, *_node, _node->getPersistenceProvider(),\n-            filestorHandler, bucketOwnershipNotifier, *metrics.disks[0]->threads[1]));\n+    vespa::config::content::StorFilestorConfig cfg;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dff0a9879800c9da8643d1f5c7d4f39fc910467"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc4NjAzOQ==", "bodyText": "Please update copyright.", "url": "https://github.com/vespa-engine/vespa/pull/14951#discussion_r507786039", "createdAt": "2020-10-19T14:17:14Z", "author": {"login": "geirst"}, "path": "storage/src/vespa/storage/persistence/persistencehandler.cpp", "diffHunk": "@@ -0,0 +1,162 @@\n+// Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dff0a9879800c9da8643d1f5c7d4f39fc910467"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc4NjE5Ng==", "bodyText": "Please update log target.", "url": "https://github.com/vespa-engine/vespa/pull/14951#discussion_r507786196", "createdAt": "2020-10-19T14:17:24Z", "author": {"login": "geirst"}, "path": "storage/src/vespa/storage/persistence/persistencehandler.cpp", "diffHunk": "@@ -0,0 +1,162 @@\n+// Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"persistencehandler.h\"\n+\n+#include <vespa/storage/common/bucketoperationlogger.h>\n+#include <vespa/document/fieldset/fieldsetrepo.h>\n+#include <vespa/document/base/exceptions.h>\n+#include <vespa/vespalib/util/exceptions.h>\n+#include <vespa/vespalib/util/isequencedtaskexecutor.h>\n+#include <thread>\n+\n+#include <vespa/log/log.h>\n+LOG_SETUP(\".persistence.thread\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dff0a9879800c9da8643d1f5c7d4f39fc910467"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc4NjgzMA==", "bodyText": "Please update message.", "url": "https://github.com/vespa-engine/vespa/pull/14951#discussion_r507786830", "createdAt": "2020-10-19T14:18:09Z", "author": {"login": "geirst"}, "path": "storage/src/vespa/storage/persistence/persistencehandler.cpp", "diffHunk": "@@ -0,0 +1,162 @@\n+// Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"persistencehandler.h\"\n+\n+#include <vespa/storage/common/bucketoperationlogger.h>\n+#include <vespa/document/fieldset/fieldsetrepo.h>\n+#include <vespa/document/base/exceptions.h>\n+#include <vespa/vespalib/util/exceptions.h>\n+#include <vespa/vespalib/util/isequencedtaskexecutor.h>\n+#include <thread>\n+\n+#include <vespa/log/log.h>\n+LOG_SETUP(\".persistence.thread\");\n+\n+using vespalib::make_string_short::fmt;\n+using to_str = vespalib::string;\n+\n+namespace storage {\n+\n+PersistenceHandler::PersistenceHandler(vespalib::ISequencedTaskExecutor & sequencedExecutor,\n+                                     ServiceLayerComponent & component,\n+                                     const vespa::config::content::StorFilestorConfig & cfg,\n+                                     spi::PersistenceProvider& provider,\n+                                     FileStorHandler& filestorHandler,\n+                                     BucketOwnershipNotifier & bucketOwnershipNotifier,\n+                                     FileStorThreadMetrics& metrics)\n+    :\n+      _env(component, filestorHandler, metrics, provider),\n+      _spi(provider),\n+      _processAllHandler(_env, provider),\n+      _mergeHandler(_env, _spi, cfg.bucketMergeChunkSize,\n+                    cfg.enableMergeLocalNodeChooseDocsOptimalization,\n+                    cfg.commonMergeChainOptimalizationMinimumSize),\n+      _asyncHandler(_env, _spi, sequencedExecutor),\n+      _splitJoinHandler(_env, provider, bucketOwnershipNotifier, cfg.enableMultibitSplitOptimalization),\n+      _simpleHandler(_env, provider)\n+{\n+}\n+\n+PersistenceHandler::~PersistenceHandler() = default;\n+\n+MessageTracker::UP\n+PersistenceHandler::handleCommandSplitByType(api::StorageCommand& msg, MessageTracker::UP tracker) const\n+{\n+    switch (msg.getType().getId()) {\n+    case api::MessageType::GET_ID:\n+        return _simpleHandler.handleGet(static_cast<api::GetCommand&>(msg), std::move(tracker));\n+    case api::MessageType::PUT_ID:\n+        return _asyncHandler.handlePut(static_cast<api::PutCommand&>(msg), std::move(tracker));\n+    case api::MessageType::REMOVE_ID:\n+        return _asyncHandler.handleRemove(static_cast<api::RemoveCommand&>(msg), std::move(tracker));\n+    case api::MessageType::UPDATE_ID:\n+        return _asyncHandler.handleUpdate(static_cast<api::UpdateCommand&>(msg), std::move(tracker));\n+    case api::MessageType::REVERT_ID:\n+        return _simpleHandler.handleRevert(static_cast<api::RevertCommand&>(msg), std::move(tracker));\n+    case api::MessageType::CREATEBUCKET_ID:\n+        return _simpleHandler.handleCreateBucket(static_cast<api::CreateBucketCommand&>(msg), std::move(tracker));\n+    case api::MessageType::DELETEBUCKET_ID:\n+        return _simpleHandler.handleDeleteBucket(static_cast<api::DeleteBucketCommand&>(msg), std::move(tracker));\n+    case api::MessageType::JOINBUCKETS_ID:\n+        return _splitJoinHandler.handleJoinBuckets(static_cast<api::JoinBucketsCommand&>(msg), std::move(tracker));\n+    case api::MessageType::SPLITBUCKET_ID:\n+        return _splitJoinHandler.handleSplitBucket(static_cast<api::SplitBucketCommand&>(msg), std::move(tracker));\n+       // Depends on iterators\n+    case api::MessageType::STATBUCKET_ID:\n+        return _processAllHandler.handleStatBucket(static_cast<api::StatBucketCommand&>(msg), std::move(tracker));\n+    case api::MessageType::REMOVELOCATION_ID:\n+        return _processAllHandler.handleRemoveLocation(static_cast<api::RemoveLocationCommand&>(msg), std::move(tracker));\n+    case api::MessageType::MERGEBUCKET_ID:\n+        return _mergeHandler.handleMergeBucket(static_cast<api::MergeBucketCommand&>(msg), std::move(tracker));\n+    case api::MessageType::GETBUCKETDIFF_ID:\n+        return _mergeHandler.handleGetBucketDiff(static_cast<api::GetBucketDiffCommand&>(msg), std::move(tracker));\n+    case api::MessageType::APPLYBUCKETDIFF_ID:\n+        return _mergeHandler.handleApplyBucketDiff(static_cast<api::ApplyBucketDiffCommand&>(msg), std::move(tracker));\n+    case api::MessageType::SETBUCKETSTATE_ID:\n+        return _splitJoinHandler.handleSetBucketState(static_cast<api::SetBucketStateCommand&>(msg), std::move(tracker));\n+    case api::MessageType::INTERNAL_ID:\n+        switch(static_cast<api::InternalCommand&>(msg).getType()) {\n+        case GetIterCommand::ID:\n+            return _simpleHandler.handleGetIter(static_cast<GetIterCommand&>(msg), std::move(tracker));\n+        case CreateIteratorCommand::ID:\n+            return _simpleHandler.handleCreateIterator(static_cast<CreateIteratorCommand&>(msg), std::move(tracker));\n+        case ReadBucketList::ID:\n+            return _simpleHandler.handleReadBucketList(static_cast<ReadBucketList&>(msg), std::move(tracker));\n+        case ReadBucketInfo::ID:\n+            return _simpleHandler.handleReadBucketInfo(static_cast<ReadBucketInfo&>(msg), std::move(tracker));\n+        case InternalBucketJoinCommand::ID:\n+            return _splitJoinHandler.handleInternalBucketJoin(static_cast<InternalBucketJoinCommand&>(msg), std::move(tracker));\n+        case RecheckBucketInfoCommand::ID:\n+            return _splitJoinHandler.handleRecheckBucketInfo(static_cast<RecheckBucketInfoCommand&>(msg), std::move(tracker));\n+        default:\n+            LOG(warning, \"Persistence thread received unhandled internal command %s\", msg.toString().c_str());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dff0a9879800c9da8643d1f5c7d4f39fc910467"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc4NzMxMA==", "bodyText": "Please update copyright.", "url": "https://github.com/vespa-engine/vespa/pull/14951#discussion_r507787310", "createdAt": "2020-10-19T14:18:45Z", "author": {"login": "geirst"}, "path": "storage/src/vespa/storage/persistence/persistencehandler.h", "diffHunk": "@@ -0,0 +1,50 @@\n+// Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dff0a9879800c9da8643d1f5c7d4f39fc910467"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc4NzQ1Mg==", "bodyText": "Consider adding class comment.", "url": "https://github.com/vespa-engine/vespa/pull/14951#discussion_r507787452", "createdAt": "2020-10-19T14:18:57Z", "author": {"login": "geirst"}, "path": "storage/src/vespa/storage/persistence/persistencehandler.h", "diffHunk": "@@ -0,0 +1,50 @@\n+// Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"processallhandler.h\"\n+#include \"mergehandler.h\"\n+#include \"asynchandler.h\"\n+#include \"persistenceutil.h\"\n+#include \"provider_error_wrapper.h\"\n+#include \"splitjoinhandler.h\"\n+#include \"simplemessagehandler.h\"\n+#include <vespa/storage/common/storagecomponent.h>\n+#include <vespa/vespalib/util/isequencedtaskexecutor.h>\n+#include <vespa/config-stor-filestor.h>\n+\n+namespace storage {\n+\n+class BucketOwnershipNotifier;\n+\n+class PersistenceHandler : public Types", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dff0a9879800c9da8643d1f5c7d4f39fc910467"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExODI1ODY2", "url": "https://github.com/vespa-engine/vespa/pull/14951#pullrequestreview-511825866", "createdAt": "2020-10-19T14:28:57Z", "commit": {"oid": "7dff0a9879800c9da8643d1f5c7d4f39fc910467"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDoyODo1N1rOHkRarA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNToxNzo0OVrOHkT7sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc5NjE0MA==", "bodyText": "Since this used to be an inner loop, consider renaming j to i to better mesh with naming expectations", "url": "https://github.com/vespa-engine/vespa/pull/14951#discussion_r507796140", "createdAt": "2020-10-19T14:28:57Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/persistence/filestorage/filestormanager.cpp", "diffHunk": "@@ -133,8 +140,14 @@ FileStorManager::configure(std::unique_ptr<vespa::config::content::StorFilestorC\n         assert(_sequencedExecutor);\n         LOG(spam, \"Setting up the disk\");\n         for (uint32_t j = 0; j < numThreads; j++) {\n-            _threads.push_back(std::make_shared<PersistenceThread>(*_sequencedExecutor, _compReg, *_config, *_provider,\n-                                                                   *_filestorHandler, *_bucketOwnershipNotifier, *_metrics->disks[0]->threads[j]));\n+            _persistenceComponents.push_back(std::make_unique<ServiceLayerComponent>(_compReg, createThreadName(j)));\n+            _persistenceHandlers.push_back(\n+                    std::make_unique<PersistenceHandler>(*_sequencedExecutor,\n+                                                         *_persistenceComponents.back(),\n+                                                         *_config, *_provider, *_filestorHandler,\n+                                                         *_bucketOwnershipNotifier, *_metrics->disks[0]->threads[j]));\n+            _threads.push_back(std::make_unique<PersistenceThread>(*_persistenceHandlers.back(), *_filestorHandler,\n+                                                                   j % numStripes, _component));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dff0a9879800c9da8643d1f5c7d4f39fc910467"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgwMDcwOA==", "bodyText": "Nit: indentation is off", "url": "https://github.com/vespa-engine/vespa/pull/14951#discussion_r507800708", "createdAt": "2020-10-19T14:32:35Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/persistence/persistencehandler.cpp", "diffHunk": "@@ -0,0 +1,162 @@\n+// Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"persistencehandler.h\"\n+\n+#include <vespa/storage/common/bucketoperationlogger.h>\n+#include <vespa/document/fieldset/fieldsetrepo.h>\n+#include <vespa/document/base/exceptions.h>\n+#include <vespa/vespalib/util/exceptions.h>\n+#include <vespa/vespalib/util/isequencedtaskexecutor.h>\n+#include <thread>\n+\n+#include <vespa/log/log.h>\n+LOG_SETUP(\".persistence.thread\");\n+\n+using vespalib::make_string_short::fmt;\n+using to_str = vespalib::string;\n+\n+namespace storage {\n+\n+PersistenceHandler::PersistenceHandler(vespalib::ISequencedTaskExecutor & sequencedExecutor,\n+                                     ServiceLayerComponent & component,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dff0a9879800c9da8643d1f5c7d4f39fc910467"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgzNzM2MA==", "bodyText": "Nit: indentation off by one", "url": "https://github.com/vespa-engine/vespa/pull/14951#discussion_r507837360", "createdAt": "2020-10-19T15:17:49Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/persistence/persistencehandler.h", "diffHunk": "@@ -0,0 +1,50 @@\n+// Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"processallhandler.h\"\n+#include \"mergehandler.h\"\n+#include \"asynchandler.h\"\n+#include \"persistenceutil.h\"\n+#include \"provider_error_wrapper.h\"\n+#include \"splitjoinhandler.h\"\n+#include \"simplemessagehandler.h\"\n+#include <vespa/storage/common/storagecomponent.h>\n+#include <vespa/vespalib/util/isequencedtaskexecutor.h>\n+#include <vespa/config-stor-filestor.h>\n+\n+namespace storage {\n+\n+class BucketOwnershipNotifier;\n+\n+class PersistenceHandler : public Types\n+{\n+public:\n+    PersistenceHandler(vespalib::ISequencedTaskExecutor &, ServiceLayerComponent & component,\n+                      const vespa::config::content::StorFilestorConfig &, spi::PersistenceProvider &,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dff0a9879800c9da8643d1f5c7d4f39fc910467"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "229b5b3d08ead5d2b8f022341bd26feb2d692329", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/229b5b3d08ead5d2b8f022341bd26feb2d692329", "committedDate": "2020-10-19T15:57:43Z", "message": "- Add class comments.\n- Reduce code visibility.\n- Clean up some unused members.\n- Some code unification."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2285, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}