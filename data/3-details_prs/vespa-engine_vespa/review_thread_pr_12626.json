{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwOTg0Nzgy", "number": 12626, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzowMzozNVrODpf2JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzowMjoyN1rODpmNXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODM5OTczOnYy", "diffSide": "RIGHT", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/persistence/NodeSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzowMzozNVrOF4tZtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjo1MTozNlrOF43e3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwODQzNg==", "bodyText": "I realize the deserializer handles empty string, but consider just to serializing dockerImageRepo if it's not set.", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395008436", "createdAt": "2020-03-19T13:03:35Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/persistence/NodeSerializer.java", "diffHunk": "@@ -187,8 +187,7 @@ private void toSlime(Allocation allocation, Cursor object) {\n         object.setLong(currentRestartGenerationKey, allocation.restartGeneration().current());\n         object.setBool(removableKey, allocation.isRemovable());\n         object.setString(wantedVespaVersionKey, allocation.membership().cluster().vespaVersion().toString());\n-        // TODO serialize dockerImageRepo\n-        //object.setString(wantedDockerImageRepoKey, allocation.membership().cluster().dockerImageRepo().orElse(\"\"));\n+        object.setString(wantedDockerImageRepoKey, allocation.membership().cluster().dockerImageRepo().orElse(\"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1760ca738f4d0d463535299ba64a06f50811c3b1"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE3MzU5Ng==", "bodyText": "Yeah, fixed", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395173596", "createdAt": "2020-03-19T16:51:36Z", "author": {"login": "hmusum"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/persistence/NodeSerializer.java", "diffHunk": "@@ -187,8 +187,7 @@ private void toSlime(Allocation allocation, Cursor object) {\n         object.setLong(currentRestartGenerationKey, allocation.restartGeneration().current());\n         object.setBool(removableKey, allocation.isRemovable());\n         object.setString(wantedVespaVersionKey, allocation.membership().cluster().vespaVersion().toString());\n-        // TODO serialize dockerImageRepo\n-        //object.setString(wantedDockerImageRepoKey, allocation.membership().cluster().dockerImageRepo().orElse(\"\"));\n+        object.setString(wantedDockerImageRepoKey, allocation.membership().cluster().dockerImageRepo().orElse(\"\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwODQzNg=="}, "originalCommit": {"oid": "1760ca738f4d0d463535299ba64a06f50811c3b1"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODQxMDg2OnYy", "diffSide": "RIGHT", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/v2/NodesResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzowNjozNlrOF4tgig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjo1MTo0MVrOF43fEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxMDE4Ng==", "bodyText": "Consider having a method on ClusterSpec that returns the full docker image", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395010186", "createdAt": "2020-03-19T13:06:36Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/v2/NodesResponse.java", "diffHunk": "@@ -157,8 +157,11 @@ private void toSlime(Node node, boolean allFields, Cursor object) {\n             toSlime(allocation.membership(), object.setObject(\"membership\"));\n             object.setLong(\"restartGeneration\", allocation.restartGeneration().wanted());\n             object.setLong(\"currentRestartGeneration\", allocation.restartGeneration().current());\n-            object.setString(\"wantedDockerImage\", nodeRepository.dockerImage(node).withTag(allocation.membership().cluster().vespaVersion()).asString());\n-            object.setString(\"wantedVespaVersion\", allocation.membership().cluster().vespaVersion().toFullString());\n+            String wantedVespaVersion = allocation.membership().cluster().vespaVersion().toFullString();\n+            Optional<String> dockerImageRepo = allocation.membership().cluster().dockerImageRepo();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1760ca738f4d0d463535299ba64a06f50811c3b1"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE3MzY1MA==", "bodyText": "Done", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395173650", "createdAt": "2020-03-19T16:51:41Z", "author": {"login": "hmusum"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/v2/NodesResponse.java", "diffHunk": "@@ -157,8 +157,11 @@ private void toSlime(Node node, boolean allFields, Cursor object) {\n             toSlime(allocation.membership(), object.setObject(\"membership\"));\n             object.setLong(\"restartGeneration\", allocation.restartGeneration().wanted());\n             object.setLong(\"currentRestartGeneration\", allocation.restartGeneration().current());\n-            object.setString(\"wantedDockerImage\", nodeRepository.dockerImage(node).withTag(allocation.membership().cluster().vespaVersion()).asString());\n-            object.setString(\"wantedVespaVersion\", allocation.membership().cluster().vespaVersion().toFullString());\n+            String wantedVespaVersion = allocation.membership().cluster().vespaVersion().toFullString();\n+            Optional<String> dockerImageRepo = allocation.membership().cluster().dockerImageRepo();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxMDE4Ng=="}, "originalCommit": {"oid": "1760ca738f4d0d463535299ba64a06f50811c3b1"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODQzNzc4OnYy", "diffSide": "RIGHT", "path": "node-repository/src/test/java/com/yahoo/vespa/hosted/provision/provisioning/ProvisioningTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxMzo1NlrOF4tx3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjo1MTo1MFrOF43fdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNDYyMQ==", "bodyText": "Why is this the case?", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395014621", "createdAt": "2020-03-19T13:13:56Z", "author": {"login": "freva"}, "path": "node-repository/src/test/java/com/yahoo/vespa/hosted/provision/provisioning/ProvisioningTest.java", "diffHunk": "@@ -156,6 +157,33 @@ public void nodeVersionIsReturnedIfSet() {\n         assertEquals(Version.fromString(\"1.2.3\"), host1.version().get());\n     }\n \n+    @Test\n+    public void dockerImageRepoIsReturnedIfSet() {\n+        ProvisioningTester tester = new ProvisioningTester.Builder().zone(new Zone(Environment.dev, RegionName.from(\"us-east\"))).build();\n+\n+        tester.makeReadyNodes(4, defaultResources, NodeType.host, 1);\n+        tester.prepareAndActivateInfraApplication(tester.makeApplicationId(), NodeType.host);\n+\n+        // deploy\n+        ApplicationId application1 = tester.makeApplicationId();\n+        SystemState state1 = prepare(application1, tester, 1, 1, 1, 1, defaultResources, \"1.2.3\");\n+        String dockerImageRepo = \"docker.domain.tld/my/image\";\n+        prepare(application1, tester, 1, 1, 1 , 1 , false, defaultResources, \"1.2.3\", Optional.of(dockerImageRepo));\n+        tester.activate(application1, state1.allHosts);\n+\n+        HostSpec host1 = state1.container0.iterator().next();\n+        assertFalse(host1.version().isPresent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1760ca738f4d0d463535299ba64a06f50811c3b1"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE3Mzc1MA==", "bodyText": "Should not have been there, removed", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395173750", "createdAt": "2020-03-19T16:51:50Z", "author": {"login": "hmusum"}, "path": "node-repository/src/test/java/com/yahoo/vespa/hosted/provision/provisioning/ProvisioningTest.java", "diffHunk": "@@ -156,6 +157,33 @@ public void nodeVersionIsReturnedIfSet() {\n         assertEquals(Version.fromString(\"1.2.3\"), host1.version().get());\n     }\n \n+    @Test\n+    public void dockerImageRepoIsReturnedIfSet() {\n+        ProvisioningTester tester = new ProvisioningTester.Builder().zone(new Zone(Environment.dev, RegionName.from(\"us-east\"))).build();\n+\n+        tester.makeReadyNodes(4, defaultResources, NodeType.host, 1);\n+        tester.prepareAndActivateInfraApplication(tester.makeApplicationId(), NodeType.host);\n+\n+        // deploy\n+        ApplicationId application1 = tester.makeApplicationId();\n+        SystemState state1 = prepare(application1, tester, 1, 1, 1, 1, defaultResources, \"1.2.3\");\n+        String dockerImageRepo = \"docker.domain.tld/my/image\";\n+        prepare(application1, tester, 1, 1, 1 , 1 , false, defaultResources, \"1.2.3\", Optional.of(dockerImageRepo));\n+        tester.activate(application1, state1.allHosts);\n+\n+        HostSpec host1 = state1.container0.iterator().next();\n+        assertFalse(host1.version().isPresent());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNDYyMQ=="}, "originalCommit": {"oid": "1760ca738f4d0d463535299ba64a06f50811c3b1"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODQ0MDEzOnYy", "diffSide": "RIGHT", "path": "node-repository/src/test/java/com/yahoo/vespa/hosted/provision/provisioning/ProvisioningTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxNDozNFrOF4tzZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjo1MjowMlrOF43gCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNTAxMg==", "bodyText": "This actually shouldn't be allowed, current docker image should always include the version as well.", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395015012", "createdAt": "2020-03-19T13:14:34Z", "author": {"login": "freva"}, "path": "node-repository/src/test/java/com/yahoo/vespa/hosted/provision/provisioning/ProvisioningTest.java", "diffHunk": "@@ -156,6 +157,33 @@ public void nodeVersionIsReturnedIfSet() {\n         assertEquals(Version.fromString(\"1.2.3\"), host1.version().get());\n     }\n \n+    @Test\n+    public void dockerImageRepoIsReturnedIfSet() {\n+        ProvisioningTester tester = new ProvisioningTester.Builder().zone(new Zone(Environment.dev, RegionName.from(\"us-east\"))).build();\n+\n+        tester.makeReadyNodes(4, defaultResources, NodeType.host, 1);\n+        tester.prepareAndActivateInfraApplication(tester.makeApplicationId(), NodeType.host);\n+\n+        // deploy\n+        ApplicationId application1 = tester.makeApplicationId();\n+        SystemState state1 = prepare(application1, tester, 1, 1, 1, 1, defaultResources, \"1.2.3\");\n+        String dockerImageRepo = \"docker.domain.tld/my/image\";\n+        prepare(application1, tester, 1, 1, 1 , 1 , false, defaultResources, \"1.2.3\", Optional.of(dockerImageRepo));\n+        tester.activate(application1, state1.allHosts);\n+\n+        HostSpec host1 = state1.container0.iterator().next();\n+        assertFalse(host1.version().isPresent());\n+        Node node1 = tester.nodeRepository().getNode(host1.hostname()).get();\n+        tester.nodeRepository().write(node1.with(node1.status().withDockerImage(DockerImage.fromString(dockerImageRepo))), () -> {});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1760ca738f4d0d463535299ba64a06f50811c3b1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE3Mzg5Nw==", "bodyText": "test code updated", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395173897", "createdAt": "2020-03-19T16:52:02Z", "author": {"login": "hmusum"}, "path": "node-repository/src/test/java/com/yahoo/vespa/hosted/provision/provisioning/ProvisioningTest.java", "diffHunk": "@@ -156,6 +157,33 @@ public void nodeVersionIsReturnedIfSet() {\n         assertEquals(Version.fromString(\"1.2.3\"), host1.version().get());\n     }\n \n+    @Test\n+    public void dockerImageRepoIsReturnedIfSet() {\n+        ProvisioningTester tester = new ProvisioningTester.Builder().zone(new Zone(Environment.dev, RegionName.from(\"us-east\"))).build();\n+\n+        tester.makeReadyNodes(4, defaultResources, NodeType.host, 1);\n+        tester.prepareAndActivateInfraApplication(tester.makeApplicationId(), NodeType.host);\n+\n+        // deploy\n+        ApplicationId application1 = tester.makeApplicationId();\n+        SystemState state1 = prepare(application1, tester, 1, 1, 1, 1, defaultResources, \"1.2.3\");\n+        String dockerImageRepo = \"docker.domain.tld/my/image\";\n+        prepare(application1, tester, 1, 1, 1 , 1 , false, defaultResources, \"1.2.3\", Optional.of(dockerImageRepo));\n+        tester.activate(application1, state1.allHosts);\n+\n+        HostSpec host1 = state1.container0.iterator().next();\n+        assertFalse(host1.version().isPresent());\n+        Node node1 = tester.nodeRepository().getNode(host1.hostname()).get();\n+        tester.nodeRepository().write(node1.with(node1.status().withDockerImage(DockerImage.fromString(dockerImageRepo))), () -> {});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNTAxMg=="}, "originalCommit": {"oid": "1760ca738f4d0d463535299ba64a06f50811c3b1"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTQ0MjIxOnYy", "diffSide": "RIGHT", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/v2/NodesResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzowMjoyN1rOF4377w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzowMjoyN1rOF4377w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE4MTAzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String wantedVespaVersion = allocation.membership().cluster().vespaVersion().toFullString();\n          \n          \n            \n                        object.setString(\"wantedDockerImage\", allocation.membership().cluster().dockerImage()\n          \n          \n            \n                                .orElse(nodeRepository.dockerImage(node).withTag(allocation.membership().cluster().vespaVersion()).asString()));\n          \n          \n            \n                        object.setString(\"wantedVespaVersion\", wantedVespaVersion);\n          \n          \n            \n                        object.setString(\"wantedDockerImage\", allocation.membership().cluster().dockerImage()\n          \n          \n            \n                                .orElseGet(() -> nodeRepository.dockerImage(node).withTag(allocation.membership().cluster().vespaVersion()).asString()));\n          \n          \n            \n                        object.setString(\"wantedVespaVersion\", allocation.membership().cluster().vespaVersion().toFullString());\n          \n      \n    \n    \n  \n\n(Changing back to orElseGet() and setting wantedVespaVersion directly)", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395181039", "createdAt": "2020-03-19T17:02:27Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/v2/NodesResponse.java", "diffHunk": "@@ -157,8 +157,10 @@ private void toSlime(Node node, boolean allFields, Cursor object) {\n             toSlime(allocation.membership(), object.setObject(\"membership\"));\n             object.setLong(\"restartGeneration\", allocation.restartGeneration().wanted());\n             object.setLong(\"currentRestartGeneration\", allocation.restartGeneration().current());\n-            object.setString(\"wantedDockerImage\", nodeRepository.dockerImage(node).withTag(allocation.membership().cluster().vespaVersion()).asString());\n-            object.setString(\"wantedVespaVersion\", allocation.membership().cluster().vespaVersion().toFullString());\n+            String wantedVespaVersion = allocation.membership().cluster().vespaVersion().toFullString();\n+            object.setString(\"wantedDockerImage\", allocation.membership().cluster().dockerImage()\n+                    .orElse(nodeRepository.dockerImage(node).withTag(allocation.membership().cluster().vespaVersion()).asString()));\n+            object.setString(\"wantedVespaVersion\", wantedVespaVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a681535b066cfc7c08d54603b811da8e0472736d"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2190, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}