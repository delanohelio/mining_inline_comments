{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNTE0NjQy", "number": 13789, "title": "Initial structure and functions", "bodyText": "I confirm that this contribution is made under the terms of the license found in the root directory of this repository's source tree and that I have the authority necessary to make this contribution on behalf of its copyright owner.", "createdAt": "2020-07-02T13:23:57Z", "url": "https://github.com/vespa-engine/vespa/pull/13789", "merged": true, "mergeCommit": {"oid": "ded0bfd8058a56883e88246100105e7ba07b7f9f"}, "closed": true, "closedAt": "2020-08-10T14:27:02Z", "author": {"login": "Oracien"}, "timelineItems": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc2y_7EAFqTQ1MTY3MDYxMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9jEqdAFqTQ2NDI3Mjg2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNjcwNjEx", "url": "https://github.com/vespa-engine/vespa/pull/13789#pullrequestreview-451670611", "createdAt": "2020-07-20T14:39:17Z", "commit": {"oid": "336c2c6aadeb96efe2c5291ae15edc2ae99f6018"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDozOToxOFrOG0QbqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTowMjozN1rOG0RwlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ0ODM2MA==", "bodyText": "Where is this used?", "url": "https://github.com/vespa-engine/vespa/pull/13789#discussion_r457448360", "createdAt": "2020-07-20T14:39:18Z", "author": {"login": "olaaun"}, "path": "controller-api/src/main/java/com/yahoo/vespa/hosted/controller/api/identifiers/MetricsType.java", "diffHunk": "@@ -0,0 +1,24 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.hosted.controller.api.identifiers;\n+\n+/**\n+ * @author akvalsvik\n+ */\n+public class MetricsType extends SerializedIdentifier {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "336c2c6aadeb96efe2c5291ae15edc2ae99f6018"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2MjI0Mw==", "bodyText": "No need to specify V1 in this and DeploymentsMetrics", "url": "https://github.com/vespa-engine/vespa/pull/13789#discussion_r457462243", "createdAt": "2020-07-20T14:54:13Z", "author": {"login": "olaaun"}, "path": "configserver/src/main/java/com/yahoo/vespa/config/server/metrics/ClusterProtonMetricsV1Retriever.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package com.yahoo.vespa.config.server.metrics;\n+\n+import com.yahoo.slime.Inspector;\n+import com.yahoo.slime.Slime;\n+import java.net.URI;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import static com.yahoo.vespa.config.server.metrics.ClusterDeploymentMetricsV1Retriever.doMetricsRequest;\n+import static com.yahoo.vespa.config.server.metrics.ClusterDeploymentMetricsV1Retriever.getClusterInfoFromDimensions;\n+\n+public class ClusterProtonMetricsV1Retriever {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "336c2c6aadeb96efe2c5291ae15edc2ae99f6018"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2NDYxNA==", "bodyText": "This endpoint is usable only on container nodes, and will return metrics for all nodes. Additionally, it will have a slightly different dimension set, so reusing getClusterInfoFromDimensions won't work.", "url": "https://github.com/vespa-engine/vespa/pull/13789#discussion_r457464614", "createdAt": "2020-07-20T14:56:44Z", "author": {"login": "olaaun"}, "path": "configserver/src/main/java/com/yahoo/vespa/config/server/metrics/ProtonMetricsV1Retriever.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.yahoo.vespa.config.server.metrics;\n+\n+import com.yahoo.config.model.api.HostInfo;\n+import com.yahoo.config.model.api.ServiceInfo;\n+import com.yahoo.container.handler.metrics.JsonResponse;\n+import com.yahoo.vespa.config.server.application.Application;\n+import java.net.URI;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class ProtonMetricsV1Retriever {\n+\n+    private final ClusterProtonMetricsV1Retriever metricsRetriever;\n+    public ProtonMetricsV1Retriever() {\n+        this( new ClusterProtonMetricsV1Retriever());\n+    }\n+\n+    public ProtonMetricsV1Retriever(ClusterProtonMetricsV1Retriever metricsRetriever) {\n+        this.metricsRetriever = metricsRetriever;\n+    }\n+\n+    public JsonResponse getMetrics(Application application) {\n+        var hosts = getHostsOfApplication(application);\n+        var clusterMetrics = metricsRetriever.requestMetricsGroupedByCluster(hosts);\n+        JSONObject jsonMetrics;\n+        try {\n+            jsonMetrics = buildJSONObject(clusterMetrics);\n+        } catch (JSONException e) {\n+            jsonMetrics = new JSONObject();\n+        }\n+        return new JsonResponse(200, jsonMetrics.toString());\n+    }\n+\n+    public JSONObject buildJSONObject(Map<ClusterInfo, JSONObject> clusterMetrics) throws JSONException {\n+        JSONObject response = new JSONObject();\n+        response.put(\"name\", \"proton.metrics.aggregated\");\n+        JSONArray metrics = new JSONArray();\n+\n+        for (Map.Entry<ClusterInfo, JSONObject> entry : clusterMetrics.entrySet()) {\n+            JSONObject jsonEntry = new JSONObject();\n+            jsonEntry.put(\"cluster.id\", entry.getKey().getClusterId());\n+            jsonEntry.put(\"cluster.type\", entry.getKey().getClusterType());\n+            jsonEntry.put(\"metrics\", entry.getValue());\n+            metrics.put(jsonEntry);\n+        }\n+        response.put(\"metrics\", metrics);\n+        return response;\n+    }\n+\n+    private static Collection<URI> getHostsOfApplication(Application application) {\n+        return application.getModel().getHosts().stream()\n+                .filter(host -> host.getServices().stream().noneMatch(isLogserver()))\n+                .map(HostInfo::getHostname)\n+                .map(ProtonMetricsV1Retriever::createMetricsProxyURI)\n+                .collect(Collectors.toList());\n+    }\n+\n+    private static Predicate<ServiceInfo> isLogserver() {\n+        return serviceInfo -> serviceInfo.getServiceType().equalsIgnoreCase(\"logserver\");\n+    }\n+\n+    private static URI createMetricsProxyURI(String hostname) {\n+        return URI.create(\"http://\" + hostname + \":4080/metrics/v2/values\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "336c2c6aadeb96efe2c5291ae15edc2ae99f6018"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2NjAzMQ==", "bodyText": "Instead of removing private, extract functions to separate class", "url": "https://github.com/vespa-engine/vespa/pull/13789#discussion_r457466031", "createdAt": "2020-07-20T14:58:18Z", "author": {"login": "olaaun"}, "path": "configserver/src/main/java/com/yahoo/vespa/config/server/metrics/ClusterDeploymentMetricsV1Retriever.java", "diffHunk": "@@ -97,7 +97,7 @@ private static void getHostMetrics(URI hostURI, Map<ClusterInfo, MetricsAggregat\n             );\n     }\n \n-    private static Slime doMetricsRequest(URI hostURI) {\n+    static Slime doMetricsRequest(URI hostURI) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "336c2c6aadeb96efe2c5291ae15edc2ae99f6018"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3MDEwMA==", "bodyText": "Instead of JSONObject, return a ProtonMetrics object, which can do validation and aggregation", "url": "https://github.com/vespa-engine/vespa/pull/13789#discussion_r457470100", "createdAt": "2020-07-20T15:02:37Z", "author": {"login": "olaaun"}, "path": "controller-api/src/main/java/com/yahoo/vespa/hosted/controller/api/integration/configserver/ConfigServer.java", "diffHunk": "@@ -53,7 +54,9 @@\n      */\n     InputStream getLogs(DeploymentId deployment, Map<String, String> queryParameters);\n \n-    List<ClusterMetrics> getMetrics(DeploymentId deployment);\n+    List<ClusterMetrics> getDeploymentMetricsV1(DeploymentId deployment);\n+\n+    JSONObject getProtonMetricsV1(DeploymentId deployment);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "336c2c6aadeb96efe2c5291ae15edc2ae99f6018"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MTUzNDY5", "url": "https://github.com/vespa-engine/vespa/pull/13789#pullrequestreview-454153469", "createdAt": "2020-07-23T13:53:25Z", "commit": {"oid": "f57c4f9cd660b46a8c4cb093482d20fba79501f1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzo1MzoyNVrOG2Lk1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDoxMDoyMFrOG2MXYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2NTk0MA==", "bodyText": "services is a list of JSON objects. You want the objects where the name field is vespa.searchnode", "url": "https://github.com/vespa-engine/vespa/pull/13789#discussion_r459465940", "createdAt": "2020-07-23T13:53:25Z", "author": {"login": "olaaun"}, "path": "configserver/src/main/java/com/yahoo/vespa/config/server/metrics/ClusterProtonMetricsRetriever.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package com.yahoo.vespa.config.server.metrics;\n+\n+import ai.vespa.util.http.VespaHttpClientBuilder;\n+import com.yahoo.slime.Inspector;\n+import com.yahoo.slime.Slime;\n+import com.yahoo.yolean.Exceptions;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import static com.yahoo.vespa.config.server.metrics.MetricsSlime.doMetricsRequest;\n+import static com.yahoo.vespa.config.server.metrics.MetricsSlime.getClusterInfoFromDimensions;\n+\n+public class ClusterProtonMetricsRetriever {\n+\n+    private static final Logger log = Logger.getLogger(ClusterProtonMetricsRetriever.class.getName());\n+\n+    private static final CloseableHttpClient httpClient = VespaHttpClientBuilder\n+                                                            .create(PoolingHttpClientConnectionManager::new)\n+                                                            .setDefaultRequestConfig(\n+                                                                    RequestConfig.custom()\n+                                                                            .setConnectTimeout(10 * 1000)\n+                                                                            .setSocketTimeout(10 * 1000)\n+                                                                            .build())\n+                                                            .build();\n+\n+    private static final List<String> DESIRED_METRICS = List.of(\n+            \"content.proton.documentdb.documents.active.last\",\n+            \"content.proton.documentdb.documents.ready.last\",\n+            \"content.proton.documentdb.documents.total.last\",\n+            \"content.proton.documentdb.disk_usage.last\",\n+            \"content.proton.resource_usage.disk.average\",\n+            \"content.proton.resource_usage.memory.average\"\n+    );\n+\n+    public List<ProtonMetricsAggregator> requestMetrics(Collection<URI> hosts) {\n+        List<ProtonMetricsAggregator> protonMetrics = new ArrayList<>();\n+\n+        long startTime = System.currentTimeMillis();\n+        Runnable retrieveMetricsJob = () ->\n+                hosts.parallelStream().forEach(host ->\n+                        addMetricsFromHost(host, protonMetrics)\n+                );\n+\n+        ForkJoinPool threadPool = new ForkJoinPool(10);\n+        threadPool.submit(retrieveMetricsJob);\n+        threadPool.shutdown();\n+\n+        try {\n+            threadPool.awaitTermination(1, TimeUnit.MINUTES);\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        log.log(Level.FINE, () ->\n+                String.format(\"Proton metric retrieval for %d nodes took %d milliseconds\", hosts.size(), System.currentTimeMillis() - startTime)\n+        );\n+\n+        return protonMetrics;\n+    }\n+\n+    private static void addMetricsFromHost(URI hostURI, List<ProtonMetricsAggregator> protonMetrics) {\n+        Slime hostResponseBody;\n+        try {\n+            hostResponseBody = doMetricsRequest(hostURI, httpClient);\n+        } catch (IOException e) {\n+            log.info(\"Was unable to fetch metrics from \" + hostURI + \" : \" + Exceptions.toMessageString(e));\n+            hostResponseBody = new Slime();\n+        }\n+        var parseError = hostResponseBody.get().field(\"error_message\");\n+\n+        if (parseError.valid()) {\n+            log.info(\"Failed to retrieve metrics from \" + hostURI + \": \" + parseError.asString());\n+        }\n+\n+\n+        Inspector metric = hostResponseBody.get().field(\"services\").field(3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f57c4f9cd660b46a8c4cb093482d20fba79501f1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2NjYzMQ==", "bodyText": "Unused", "url": "https://github.com/vespa-engine/vespa/pull/13789#discussion_r459466631", "createdAt": "2020-07-23T13:54:18Z", "author": {"login": "olaaun"}, "path": "configserver/src/main/java/com/yahoo/vespa/config/server/metrics/ClusterProtonMetricsRetriever.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package com.yahoo.vespa.config.server.metrics;\n+\n+import ai.vespa.util.http.VespaHttpClientBuilder;\n+import com.yahoo.slime.Inspector;\n+import com.yahoo.slime.Slime;\n+import com.yahoo.yolean.Exceptions;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ForkJoinPool;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import static com.yahoo.vespa.config.server.metrics.MetricsSlime.doMetricsRequest;\n+import static com.yahoo.vespa.config.server.metrics.MetricsSlime.getClusterInfoFromDimensions;\n+\n+public class ClusterProtonMetricsRetriever {\n+\n+    private static final Logger log = Logger.getLogger(ClusterProtonMetricsRetriever.class.getName());\n+\n+    private static final CloseableHttpClient httpClient = VespaHttpClientBuilder\n+                                                            .create(PoolingHttpClientConnectionManager::new)\n+                                                            .setDefaultRequestConfig(\n+                                                                    RequestConfig.custom()\n+                                                                            .setConnectTimeout(10 * 1000)\n+                                                                            .setSocketTimeout(10 * 1000)\n+                                                                            .build())\n+                                                            .build();\n+\n+    private static final List<String> DESIRED_METRICS = List.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f57c4f9cd660b46a8c4cb093482d20fba79501f1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3MDA0NQ==", "bodyText": "I suggest splitting these into separate strings, making the addAll function more readable.", "url": "https://github.com/vespa-engine/vespa/pull/13789#discussion_r459470045", "createdAt": "2020-07-23T13:58:15Z", "author": {"login": "olaaun"}, "path": "configserver/src/main/java/com/yahoo/vespa/config/server/metrics/ProtonMetricsAggregator.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package com.yahoo.vespa.config.server.metrics;\n+\n+import com.yahoo.slime.Inspector;\n+import java.util.List;\n+\n+public class ProtonMetricsAggregator {\n+\n+    private static final List<String> DESIRED_METRICS = List.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f57c4f9cd660b46a8c4cb093482d20fba79501f1"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3ODg4MQ==", "bodyText": "Two notes on this class:\n\nAn application can have more than one content cluster, so it'd be useful if these metrics are aggregated per cluster.\nIf I'm reading this right, the aggregation just sums the values. At least the percentage based metrics should be averaged instead", "url": "https://github.com/vespa-engine/vespa/pull/13789#discussion_r459478881", "createdAt": "2020-07-23T14:10:20Z", "author": {"login": "olaaun"}, "path": "configserver/src/main/java/com/yahoo/vespa/config/server/metrics/ProtonMetricsAggregator.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package com.yahoo.vespa.config.server.metrics;\n+\n+import com.yahoo.slime.Inspector;\n+import java.util.List;\n+\n+public class ProtonMetricsAggregator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f57c4f9cd660b46a8c4cb093482d20fba79501f1"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "28f157862b044970c1427273fa82db6b9de15c78", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/28f157862b044970c1427273fa82db6b9de15c78", "committedDate": "2020-07-31T10:34:56Z", "message": "added unit tests and resources"}, "afterCommit": {"oid": "6963315e9b2b9d7e0851cb05f273c4db1b9ef4da", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/6963315e9b2b9d7e0851cb05f273c4db1b9ef4da", "committedDate": "2020-07-31T11:52:41Z", "message": "added unit tests and resources"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MTU0NzA3", "url": "https://github.com/vespa-engine/vespa/pull/13789#pullrequestreview-459154707", "createdAt": "2020-07-31T13:01:20Z", "commit": {"oid": "90233299c17399067d8bf03e58b17652f0b48bc5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzowMToyMFrOG6HsZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzowMToyMFrOG6HsZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU5NjY0Ng==", "bodyText": "Use port 19092", "url": "https://github.com/vespa-engine/vespa/pull/13789#discussion_r463596646", "createdAt": "2020-07-31T13:01:20Z", "author": {"login": "olaaun"}, "path": "configserver/src/main/java/com/yahoo/vespa/config/server/metrics/ProtonMetricsRetriever.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.yahoo.vespa.config.server.metrics;\n+\n+import com.yahoo.config.model.api.HostInfo;\n+import com.yahoo.config.model.api.ServiceInfo;\n+import com.yahoo.vespa.config.server.application.Application;\n+import com.yahoo.vespa.config.server.http.v2.ProtonMetricsResponse;\n+import java.net.URI;\n+import java.util.Collection;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+public class ProtonMetricsRetriever {\n+\n+    private final ClusterProtonMetricsRetriever metricsRetriever;\n+    public ProtonMetricsRetriever() {\n+        this( new ClusterProtonMetricsRetriever());\n+    }\n+\n+    public ProtonMetricsRetriever(ClusterProtonMetricsRetriever metricsRetriever) {\n+        this.metricsRetriever = metricsRetriever;\n+    }\n+\n+    public ProtonMetricsResponse getMetrics(Application application) {\n+        var hosts = getHostsOfApplication(application);\n+        var clusterMetrics = metricsRetriever.requestMetricsGroupedByCluster(hosts);\n+        return new ProtonMetricsResponse(200, application.getId(), clusterMetrics);\n+    }\n+\n+    private static Collection<URI> getHostsOfApplication(Application application) {\n+        return application.getModel().getHosts().stream()\n+                .filter(host -> host.getServices().stream().anyMatch(isSearchNode()))\n+                .map(HostInfo::getHostname)\n+                .map(ProtonMetricsRetriever::createMetricsProxyURI)\n+                .collect(Collectors.toList());\n+    }\n+\n+    private static Predicate<ServiceInfo> isSearchNode() {\n+        return serviceInfo -> serviceInfo.getServiceType().equalsIgnoreCase(\"searchnode\");\n+    }\n+    private static URI createMetricsProxyURI(String hostname) {\n+        return URI.create(\"http://\" + hostname + \":4080/metrics/v2/values\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90233299c17399067d8bf03e58b17652f0b48bc5"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MTU3MzE4", "url": "https://github.com/vespa-engine/vespa/pull/13789#pullrequestreview-459157318", "createdAt": "2020-07-31T13:05:30Z", "commit": {"oid": "90233299c17399067d8bf03e58b17652f0b48bc5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzowNTozMFrOG6H0YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzowNTozMFrOG6H0YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU5ODY4OQ==", "bodyText": "It would be good to have a list of two hosts, each having different metric values. Then we would have some actual aggregation", "url": "https://github.com/vespa-engine/vespa/pull/13789#discussion_r463598689", "createdAt": "2020-07-31T13:05:30Z", "author": {"login": "olaaun"}, "path": "configserver/src/test/java/com/yahoo/vespa/config/server/metrics/ClusterProtonMetricsRetrieverTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+// Copyright 2020 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.config.server.metrics;\n+\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.get;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static org.junit.Assert.assertEquals;\n+\n+public class ClusterProtonMetricsRetrieverTest {\n+\n+    @Rule\n+    public final WireMockRule wireMock = new WireMockRule(options().dynamicPort(), true);\n+\n+    @Test\n+    public void testMetricAggregation() throws IOException {\n+        Collection<URI> host = List.of(URI.create(\"http://localhost:\" + wireMock.port() +\"/metrics/v2/values\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90233299c17399067d8bf03e58b17652f0b48bc5"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MTU4MzA4", "url": "https://github.com/vespa-engine/vespa/pull/13789#pullrequestreview-459158308", "createdAt": "2020-07-31T13:07:01Z", "commit": {"oid": "90233299c17399067d8bf03e58b17652f0b48bc5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzowNzowMVrOG6H3NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMzowNzowMVrOG6H3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU5OTQxMg==", "bodyText": "This file can be shortened significantly. It's a sample response from a :4080/metrics/v2 call, which includes metrics from the irrelevant container and logserver nodes as well.", "url": "https://github.com/vespa-engine/vespa/pull/13789#discussion_r463599412", "createdAt": "2020-07-31T13:07:01Z", "author": {"login": "olaaun"}, "path": "configserver/src/test/java/com/yahoo/vespa/config/server/metrics/ClusterProtonMetricsRetrieverTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+// Copyright 2020 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.config.server.metrics;\n+\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.get;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static org.junit.Assert.assertEquals;\n+\n+public class ClusterProtonMetricsRetrieverTest {\n+\n+    @Rule\n+    public final WireMockRule wireMock = new WireMockRule(options().dynamicPort(), true);\n+\n+    @Test\n+    public void testMetricAggregation() throws IOException {\n+        Collection<URI> host = List.of(URI.create(\"http://localhost:\" + wireMock.port() +\"/metrics/v2/values\"));\n+\n+        stubFor(get(urlEqualTo(\"/metrics/v2/values\"))\n+                .willReturn(aResponse()\n+                        .withStatus(200)\n+                        .withBody(nodeMetrics())));\n+\n+        String expectedClusterName = \"content/content/0/0\";\n+        Map<String, ProtonMetricsAggregator> aggregatorMap = new ClusterProtonMetricsRetriever().requestMetricsGroupedByCluster(host);\n+\n+        compareAggregators(\n+                new ProtonMetricsAggregator()\n+                .addDocumentReadyCount(1275)\n+                .addDocumentActiveCount(1275)\n+                .addDocumentTotalCount(1275)\n+                .addDocumentDiskUsage(14781856)\n+                .addResourceDiskUsageAverage(0.0009083386306)\n+                .addResourceMemoryUsageAverage(0.0183488434436),\n+                aggregatorMap.get(expectedClusterName)\n+        );\n+\n+        wireMock.stop();\n+    }\n+\n+    private String nodeMetrics() throws IOException {\n+        return Files.readString(Path.of(\"src/test/resources/metrics/node_metrics\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90233299c17399067d8bf03e58b17652f0b48bc5"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNjQ3OTYw", "url": "https://github.com/vespa-engine/vespa/pull/13789#pullrequestreview-460647960", "createdAt": "2020-08-04T09:27:46Z", "commit": {"oid": "8742b0b08a8567114670507bd28a8cf11d7bcf04"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwOToyNzo0N1rOG7YkJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwOTozNTo0N1rOG7Y19w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkyMTYzNg==", "bodyText": "Unused", "url": "https://github.com/vespa-engine/vespa/pull/13789#discussion_r464921636", "createdAt": "2020-08-04T09:27:47Z", "author": {"login": "olaaun"}, "path": "controller-api/src/main/java/com/yahoo/vespa/hosted/controller/api/integration/configserver/ConfigServer.java", "diffHunk": "@@ -18,6 +19,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n+import org.json.JSONObject;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8742b0b08a8567114670507bd28a8cf11d7bcf04"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkyNDczOQ==", "bodyText": "It's not really this class' responsibility to create HTTP responses, it does metric aggregation.\nYou can build the response directly in ApplicationApiHandler", "url": "https://github.com/vespa-engine/vespa/pull/13789#discussion_r464924739", "createdAt": "2020-08-04T09:33:15Z", "author": {"login": "olaaun"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/metric/ConfigServerMetrics.java", "diffHunk": "@@ -62,4 +71,20 @@ private double weightedAverageLatency(List<ClusterMetrics> metrics,\n         return weightedLatency / rateSum;\n     }\n \n+    public JsonResponse buildResponseFromProtonMetrics(List<ProtonMetrics> protonMetrics) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8742b0b08a8567114670507bd28a8cf11d7bcf04"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkyNTE1OA==", "bodyText": "What's the meaning behind this field?", "url": "https://github.com/vespa-engine/vespa/pull/13789#discussion_r464925158", "createdAt": "2020-08-04T09:34:01Z", "author": {"login": "olaaun"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/metric/ConfigServerMetrics.java", "diffHunk": "@@ -62,4 +71,20 @@ private double weightedAverageLatency(List<ClusterMetrics> metrics,\n         return weightedLatency / rateSum;\n     }\n \n+    public JsonResponse buildResponseFromProtonMetrics(List<ProtonMetrics> protonMetrics) {\n+        try {\n+            var jsonObject = new JSONObject();\n+            jsonObject.put(\"name\", \"proton.metrics.application\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8742b0b08a8567114670507bd28a8cf11d7bcf04"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkyNTUyNA==", "bodyText": "Add unit test for this.", "url": "https://github.com/vespa-engine/vespa/pull/13789#discussion_r464925524", "createdAt": "2020-08-04T09:34:40Z", "author": {"login": "olaaun"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/restapi/application/ApplicationApiHandler.java", "diffHunk": "@@ -644,6 +646,16 @@ public void render(OutputStream outputStream) throws IOException {\n         };\n     }\n \n+    private HttpResponse metrics(String tenantName, String applicationName, String instanceName, String environment, String region) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8742b0b08a8567114670507bd28a8cf11d7bcf04"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkyNjE5OQ==", "bodyText": "This is no longer a method of ConfigServer", "url": "https://github.com/vespa-engine/vespa/pull/13789#discussion_r464926199", "createdAt": "2020-08-04T09:35:47Z", "author": {"login": "olaaun"}, "path": "controller-server/src/test/java/com/yahoo/vespa/hosted/controller/integration/ConfigServerMock.java", "diffHunk": "@@ -445,10 +452,15 @@ public ApplicationView getApplicationView(String tenantName, String applicationN\n     }\n \n     @Override\n-    public List<ClusterMetrics> getMetrics(DeploymentId deployment) {\n+    public List<ClusterMetrics> getDeploymentMetricsV1(DeploymentId deployment) {\n         return Collections.unmodifiableList(clusterMetrics.getOrDefault(deployment, List.of()));\n     }\n \n+    @Override\n+    public JSONObject getProtonMetricsV1(DeploymentId deployment) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8742b0b08a8567114670507bd28a8cf11d7bcf04"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c11c352914dd86e245a78d03a38ef6985f9b89f1", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/c11c352914dd86e245a78d03a38ef6985f9b89f1", "committedDate": "2020-08-10T12:36:48Z", "message": "Initial structure and functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95288055401d80df8901f5a85ac84d16011345fe", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/95288055401d80df8901f5a85ac84d16011345fe", "committedDate": "2020-08-10T12:36:48Z", "message": "Finsihed Cluster. Working on MetricsAggregator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c878461e0aa0cc54b2318186352d7162decbc5b3", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/c878461e0aa0cc54b2318186352d7162decbc5b3", "committedDate": "2020-08-10T12:36:48Z", "message": "WIP. Nearly fixed ClusterMetrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d1f8ec4b55ddabeb18a52b9e36b3a2992d2c15d", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/7d1f8ec4b55ddabeb18a52b9e36b3a2992d2c15d", "committedDate": "2020-08-10T12:36:48Z", "message": "Debugging getMetrics issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f2c0f8c408663bb82e34630eea8751a0a69041a", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/5f2c0f8c408663bb82e34630eea8751a0a69041a", "committedDate": "2020-08-10T12:36:48Z", "message": "Renaming and attempting to fix configServer issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94b278eb548a0b1a7af4af2e18bfcbdff492d1d1", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/94b278eb548a0b1a7af4af2e18bfcbdff492d1d1", "committedDate": "2020-08-10T12:36:48Z", "message": "Added some necessary functions. Finishing ConfigServer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "716b4f2b462213474162d1687dd05896e70c2590", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/716b4f2b462213474162d1687dd05896e70c2590", "committedDate": "2020-08-10T12:36:48Z", "message": "Finishing renaming and starting getting ready for impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf27766d71faa79a69571794fc0b062a41a684c5", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/cf27766d71faa79a69571794fc0b062a41a684c5", "committedDate": "2020-08-10T12:36:48Z", "message": "Fixed bindings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66694b5d1d91be7d7e4297d1765485ff31ab6d0c", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/66694b5d1d91be7d7e4297d1765485ff31ab6d0c", "committedDate": "2020-08-10T12:36:48Z", "message": "Finished pipeline. Added Metrics type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d50f447632817199ea18a514ca671947b0f7e93a", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/d50f447632817199ea18a514ca671947b0f7e93a", "committedDate": "2020-08-10T12:36:49Z", "message": "Implemented necessary methods to make it pass testing, no unit tests yet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "825e5a25a4f1c919474cfb010723bcc990433b3d", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/825e5a25a4f1c919474cfb010723bcc990433b3d", "committedDate": "2020-08-10T12:36:49Z", "message": "Renamed versioning from metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df0bcbb4918077f2550c2f309aca7097fda48287", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/df0bcbb4918077f2550c2f309aca7097fda48287", "committedDate": "2020-08-10T12:36:49Z", "message": "Extracted reused functions to new helper class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "266694594784759c0f9df1fed76867bf0d130deb", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/266694594784759c0f9df1fed76867bf0d130deb", "committedDate": "2020-08-10T12:36:49Z", "message": "Changed format and response structure of ProtonMetrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b2df742bb09126157cf48291bfd2fbe1d8c7913", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/0b2df742bb09126157cf48291bfd2fbe1d8c7913", "committedDate": "2020-08-10T12:36:49Z", "message": "Removed list of metrics name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35a3e1f005976a3e5a1110253c50e3f03cc26c41", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/35a3e1f005976a3e5a1110253c50e3f03cc26c41", "committedDate": "2020-08-10T12:36:49Z", "message": "fixed aggregation for proton metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d61570ad930b22db7c2b0fa7306d3cd8a5b853d1", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/d61570ad930b22db7c2b0fa7306d3cd8a5b853d1", "committedDate": "2020-08-10T12:36:49Z", "message": "updated aggregator to use cluster format and more aligned with metric format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51517c252cbb23ab90d0b98a5a5f018c73c5b38b", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/51517c252cbb23ab90d0b98a5a5f018c73c5b38b", "committedDate": "2020-08-10T12:36:49Z", "message": "added unit tests and resources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60838d0e8024961ed73cd8c3da6cab5de77c566a", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/60838d0e8024961ed73cd8c3da6cab5de77c566a", "committedDate": "2020-08-10T12:36:49Z", "message": "Added correct return object"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "856354dc419b8211c9f84db2ecc95e9e1f3fb4b1", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/856354dc419b8211c9f84db2ecc95e9e1f3fb4b1", "committedDate": "2020-08-10T12:36:49Z", "message": "fixed according to review. added second host. not tested"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bfa5e87d041c263cac82f733787f5fcc2525bf9", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/3bfa5e87d041c263cac82f733787f5fcc2525bf9", "committedDate": "2020-08-10T12:36:49Z", "message": "removes superfluous roles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fdffc2d49bdc63bb4bfc106c052930ed2cb4b18", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/3fdffc2d49bdc63bb4bfc106c052930ed2cb4b18", "committedDate": "2020-08-10T12:36:50Z", "message": "Fixed ConfigServer to align with previous impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1043b80ec22efbe2d1af06033f0e24769f0d6314", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/1043b80ec22efbe2d1af06033f0e24769f0d6314", "committedDate": "2020-08-10T12:36:50Z", "message": "Updated test to use 2 different hosts and clusters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8efa96fd136c60ea6079f2c236ffc7681db47581", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/8efa96fd136c60ea6079f2c236ffc7681db47581", "committedDate": "2020-08-10T12:36:50Z", "message": "Added processing to build proper JsonResponse for proton metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e8067af3542b596c7736b20a6172c0791894cc9", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/5e8067af3542b596c7736b20a6172c0791894cc9", "committedDate": "2020-08-10T12:36:50Z", "message": "changed proton metrics format to be consistent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed75bc4a34e6ba2b1adc8d8fd789b04e845753fc", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/ed75bc4a34e6ba2b1adc8d8fd789b04e845753fc", "committedDate": "2020-08-10T12:36:50Z", "message": "Moved response construction to api handler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0f1e0afb81838fac1a8a9cb178c42d4b8414952", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/d0f1e0afb81838fac1a8a9cb178c42d4b8414952", "committedDate": "2020-08-10T12:36:50Z", "message": "Removed unused import. Removed superfluos name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce5285806752646381ac0765a2f7820145986836", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/ce5285806752646381ac0765a2f7820145986836", "committedDate": "2020-08-10T12:36:50Z", "message": "Updated ConfigServerMock to match new ConfigServer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cac46b1aa2d36b582be98f3cb982e57f2748845c", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/cac46b1aa2d36b582be98f3cb982e57f2748845c", "committedDate": "2020-08-10T12:36:50Z", "message": "developing metrics test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0cad8dbc5a5f505c68033b0988f9a5bf9200f33", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/b0cad8dbc5a5f505c68033b0988f9a5bf9200f33", "committedDate": "2020-08-10T12:36:51Z", "message": "added working unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3b37ccb08396639216cb28233f6221aba6d36a6", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/c3b37ccb08396639216cb28233f6221aba6d36a6", "committedDate": "2020-08-10T12:36:51Z", "message": "updated metrics path to ignore instance"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e498b86b6668673604d2e467dc208e52342fecf9", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/e498b86b6668673604d2e467dc208e52342fecf9", "committedDate": "2020-08-10T12:41:34Z", "message": "merged ApplicationRespository"}, "afterCommit": {"oid": "c3b37ccb08396639216cb28233f6221aba6d36a6", "author": {"user": {"login": "Oracien", "name": "Amund Bergland Kvalsvik"}}, "url": "https://github.com/vespa-engine/vespa/commit/c3b37ccb08396639216cb28233f6221aba6d36a6", "committedDate": "2020-08-10T12:36:51Z", "message": "updated metrics path to ignore instance"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0Mjc3OTEy", "url": "https://github.com/vespa-engine/vespa/pull/13789#pullrequestreview-464277912", "createdAt": "2020-08-10T14:26:35Z", "commit": {"oid": "c3b37ccb08396639216cb28233f6221aba6d36a6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MjcyODY4", "url": "https://github.com/vespa-engine/vespa/pull/13789#pullrequestreview-464272868", "createdAt": "2020-08-10T14:21:11Z", "commit": {"oid": "c3b37ccb08396639216cb28233f6221aba6d36a6"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDoyMToxMlrOG-QqCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDoyNjo1NlrOG-Q6jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkzNzgwMA==", "bodyText": "Also log exception", "url": "https://github.com/vespa-engine/vespa/pull/13789#discussion_r467937800", "createdAt": "2020-08-10T14:21:12Z", "author": {"login": "freva"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/restapi/application/ApplicationApiHandler.java", "diffHunk": "@@ -647,6 +653,31 @@ public void render(OutputStream outputStream) throws IOException {\n         };\n     }\n \n+    private HttpResponse metrics(String tenantName, String applicationName, String instanceName, String environment, String region) {\n+        ApplicationId application = ApplicationId.from(tenantName, applicationName, instanceName);\n+        ZoneId zone = ZoneId.from(environment, region);\n+        DeploymentId deployment = new DeploymentId(application, zone);\n+        List<ProtonMetrics> protonMetrics = controller.serviceRegistry().configServer().getProtonMetrics(deployment);\n+        return buildResponseFromProtonMetrics(protonMetrics);\n+    }\n+\n+    private JsonResponse buildResponseFromProtonMetrics(List<ProtonMetrics> protonMetrics) {\n+        try {\n+            var jsonObject = new JSONObject();\n+            var jsonArray = new JSONArray();\n+            for (ProtonMetrics metrics : protonMetrics) {\n+                jsonArray.put(metrics.toJson());\n+            }\n+            jsonObject.put(\"metrics\", jsonArray);\n+            return new JsonResponse(200, jsonObject.toString());\n+        } catch (JSONException e) {\n+            log.severe(\"Unable to build JsonResponse with Proton data\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b37ccb08396639216cb28233f6221aba6d36a6"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkzNzk5Mg==", "bodyText": "Add some error message here as well", "url": "https://github.com/vespa-engine/vespa/pull/13789#discussion_r467937992", "createdAt": "2020-08-10T14:21:29Z", "author": {"login": "freva"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/restapi/application/ApplicationApiHandler.java", "diffHunk": "@@ -647,6 +653,31 @@ public void render(OutputStream outputStream) throws IOException {\n         };\n     }\n \n+    private HttpResponse metrics(String tenantName, String applicationName, String instanceName, String environment, String region) {\n+        ApplicationId application = ApplicationId.from(tenantName, applicationName, instanceName);\n+        ZoneId zone = ZoneId.from(environment, region);\n+        DeploymentId deployment = new DeploymentId(application, zone);\n+        List<ProtonMetrics> protonMetrics = controller.serviceRegistry().configServer().getProtonMetrics(deployment);\n+        return buildResponseFromProtonMetrics(protonMetrics);\n+    }\n+\n+    private JsonResponse buildResponseFromProtonMetrics(List<ProtonMetrics> protonMetrics) {\n+        try {\n+            var jsonObject = new JSONObject();\n+            var jsonArray = new JSONArray();\n+            for (ProtonMetrics metrics : protonMetrics) {\n+                jsonArray.put(metrics.toJson());\n+            }\n+            jsonObject.put(\"metrics\", jsonArray);\n+            return new JsonResponse(200, jsonObject.toString());\n+        } catch (JSONException e) {\n+            log.severe(\"Unable to build JsonResponse with Proton data\");\n+            return new JsonResponse(500, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b37ccb08396639216cb28233f6221aba6d36a6"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzkzOTQzNQ==", "bodyText": "tenant/application/environment/region/instance is the legacy order, change this to tenant/application/instance/environment/region", "url": "https://github.com/vespa-engine/vespa/pull/13789#discussion_r467939435", "createdAt": "2020-08-10T14:23:33Z", "author": {"login": "freva"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/restapi/application/ApplicationApiHandler.java", "diffHunk": "@@ -228,6 +233,7 @@ private HttpResponse handleGET(Path path, HttpRequest request) {\n         if (path.matches(\"/application/v4/tenant/{tenant}/application/{application}/instance/{instance}/environment/{environment}/region/{region}/nodes\")) return nodes(path.get(\"tenant\"), path.get(\"application\"), path.get(\"instance\"), path.get(\"environment\"), path.get(\"region\"));\n         if (path.matches(\"/application/v4/tenant/{tenant}/application/{application}/instance/{instance}/environment/{environment}/region/{region}/clusters\")) return clusters(path.get(\"tenant\"), path.get(\"application\"), path.get(\"instance\"), path.get(\"environment\"), path.get(\"region\"));\n         if (path.matches(\"/application/v4/tenant/{tenant}/application/{application}/instance/{instance}/environment/{environment}/region/{region}/logs\")) return logs(path.get(\"tenant\"), path.get(\"application\"), path.get(\"instance\"), path.get(\"environment\"), path.get(\"region\"), request.propertyMap());\n+        if (path.matches(\"/application/v4/tenant/{tenant}/application/{application}/environment/{environment}/region/{region}/instance/{instance}/metrics\")) return metrics(path.get(\"tenant\"), path.get(\"application\"), path.get(\"instance\"), path.get(\"environment\"), path.get(\"region\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b37ccb08396639216cb28233f6221aba6d36a6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk0MDk4MA==", "bodyText": "No need to duplicate path here, it will pick the first one that matches", "url": "https://github.com/vespa-engine/vespa/pull/13789#discussion_r467940980", "createdAt": "2020-08-10T14:25:33Z", "author": {"login": "freva"}, "path": "configserver/src/main/java/com/yahoo/vespa/config/server/http/v2/ApplicationHandler.java", "diffHunk": "@@ -55,7 +55,8 @@\n             \"http://*/application/v2/tenant/*/application/*/environment/*/region/*/instance/*/serviceconverge\",\n             \"http://*/application/v2/tenant/*/application/*/environment/*/region/*/instance/*/serviceconverge/*\",\n             \"http://*/application/v2/tenant/*/application/*/environment/*/region/*/instance/*/clustercontroller/*/status/*\",\n-            \"http://*/application/v2/tenant/*/application/*/environment/*/region/*/instance/*/metrics\",\n+            \"http://*/application/v2/tenant/*/application/*/environment/*/region/*/instance/*/metrics/*\",\n+            \"http://*/application/v2/tenant/*/application/*/environment/*/region/*/instance/*/metrics/*\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b37ccb08396639216cb28233f6221aba6d36a6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk0MTUzMw==", "bodyText": "Consider extending com.yahoo.restapi.SlimeJsonResponse", "url": "https://github.com/vespa-engine/vespa/pull/13789#discussion_r467941533", "createdAt": "2020-08-10T14:26:16Z", "author": {"login": "freva"}, "path": "configserver/src/main/java/com/yahoo/vespa/config/server/http/v2/ProtonMetricsResponse.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.yahoo.vespa.config.server.http.v2;\n+\n+import com.yahoo.config.provision.ApplicationId;\n+import com.yahoo.container.jdisc.HttpResponse;\n+import com.yahoo.slime.Cursor;\n+import com.yahoo.slime.JsonFormat;\n+import com.yahoo.slime.Slime;\n+import com.yahoo.vespa.config.server.http.HttpConfigResponse;\n+import com.yahoo.vespa.config.server.metrics.ProtonMetricsAggregator;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Map;\n+\n+public class ProtonMetricsResponse extends HttpResponse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b37ccb08396639216cb28233f6221aba6d36a6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk0MjAzMA==", "bodyText": "Is there anything that currently uses the old path?", "url": "https://github.com/vespa-engine/vespa/pull/13789#discussion_r467942030", "createdAt": "2020-08-10T14:26:56Z", "author": {"login": "freva"}, "path": "configserver/src/main/java/com/yahoo/vespa/config/server/http/v2/ApplicationHandler.java", "diffHunk": "@@ -137,8 +138,12 @@ public HttpResponse handleGET(HttpRequest request) {\n             return applicationRepository.getLogs(applicationId, hostname, apiParams);\n         }\n \n-        if (isMetricsRequest(request)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b37ccb08396639216cb28233f6221aba6d36a6"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3505, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}