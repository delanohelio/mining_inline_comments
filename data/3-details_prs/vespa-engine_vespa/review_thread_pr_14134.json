{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxODQ1NzU1", "number": 14134, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDo1NzowNlrOEbIHyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMTowNToyOVrOEbIUmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODgwMDc1OnYy", "diffSide": "RIGHT", "path": "searchcore/src/vespa/searchcore/proton/common/pendinglidtracker.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDo1NzowNlrOHE9i5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxNTozNzo1MlrOHFF8MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk2NDcxMQ==", "bodyText": "Consider explicitly deleting move assignment too.", "url": "https://github.com/vespa-engine/vespa/pull/14134#discussion_r474964711", "createdAt": "2020-08-21T20:57:06Z", "author": {"login": "toregge"}, "path": "searchcore/src/vespa/searchcore/proton/common/pendinglidtracker.h", "diffHunk": "@@ -10,12 +10,29 @@ namespace proton {\n \n class PendingLidTracker {\n public:\n+    class Token {\n+    public:\n+        Token(uint32_t lid, PendingLidTracker & tracker);\n+        Token(const Token &) = delete;\n+        Token & operator = (const Token &) = delete;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c21bf9387619e3c47f3ec57db0d81ab0ad43da49"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwMjI1Ng==", "bodyText": "Done", "url": "https://github.com/vespa-engine/vespa/pull/14134#discussion_r475102256", "createdAt": "2020-08-22T15:37:52Z", "author": {"login": "baldersheim"}, "path": "searchcore/src/vespa/searchcore/proton/common/pendinglidtracker.h", "diffHunk": "@@ -10,12 +10,29 @@ namespace proton {\n \n class PendingLidTracker {\n public:\n+    class Token {\n+    public:\n+        Token(uint32_t lid, PendingLidTracker & tracker);\n+        Token(const Token &) = delete;\n+        Token & operator = (const Token &) = delete;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk2NDcxMQ=="}, "originalCommit": {"oid": "c21bf9387619e3c47f3ec57db0d81ab0ad43da49"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODgzMzUzOnYy", "diffSide": "RIGHT", "path": "searchcore/src/vespa/searchcore/proton/common/pendinglidtracker.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMTowNToyOVrOHE93mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxNTozODoxNFrOHFF8Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk3MDAwOA==", "bodyText": "Is this needed ? An nested class has access to private member variables and methods in outer class.", "url": "https://github.com/vespa-engine/vespa/pull/14134#discussion_r474970008", "createdAt": "2020-08-21T21:05:29Z", "author": {"login": "toregge"}, "path": "searchcore/src/vespa/searchcore/proton/common/pendinglidtracker.h", "diffHunk": "@@ -10,12 +10,29 @@ namespace proton {\n \n class PendingLidTracker {\n public:\n+    class Token {\n+    public:\n+        Token(uint32_t lid, PendingLidTracker & tracker);\n+        Token(const Token &) = delete;\n+        Token & operator = (const Token &) = delete;\n+        Token(Token && rhs) noexcept\n+            : _tracker(rhs._tracker),\n+              _lid(rhs._lid)\n+        {\n+            rhs._tracker = nullptr;\n+        }\n+        ~Token();\n+    private:\n+        PendingLidTracker * _tracker;\n+        uint32_t            _lid;\n+    };\n     PendingLidTracker();\n     ~PendingLidTracker();\n-    void produce(uint32_t lid);\n-    void consume(uint32_t lid);\n+    Token produce(uint32_t lid);\n     void waitForConsumedLid(uint32_t lid);\n private:\n+    friend Token;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c21bf9387619e3c47f3ec57db0d81ab0ad43da49"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwMjI3MQ==", "bodyText": "No, you are right.", "url": "https://github.com/vespa-engine/vespa/pull/14134#discussion_r475102271", "createdAt": "2020-08-22T15:38:14Z", "author": {"login": "baldersheim"}, "path": "searchcore/src/vespa/searchcore/proton/common/pendinglidtracker.h", "diffHunk": "@@ -10,12 +10,29 @@ namespace proton {\n \n class PendingLidTracker {\n public:\n+    class Token {\n+    public:\n+        Token(uint32_t lid, PendingLidTracker & tracker);\n+        Token(const Token &) = delete;\n+        Token & operator = (const Token &) = delete;\n+        Token(Token && rhs) noexcept\n+            : _tracker(rhs._tracker),\n+              _lid(rhs._lid)\n+        {\n+            rhs._tracker = nullptr;\n+        }\n+        ~Token();\n+    private:\n+        PendingLidTracker * _tracker;\n+        uint32_t            _lid;\n+    };\n     PendingLidTracker();\n     ~PendingLidTracker();\n-    void produce(uint32_t lid);\n-    void consume(uint32_t lid);\n+    Token produce(uint32_t lid);\n     void waitForConsumedLid(uint32_t lid);\n private:\n+    friend Token;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDk3MDAwOA=="}, "originalCommit": {"oid": "c21bf9387619e3c47f3ec57db0d81ab0ad43da49"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1487, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}