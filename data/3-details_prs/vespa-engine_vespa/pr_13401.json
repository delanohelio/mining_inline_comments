{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzODU4OTE1", "number": 13401, "title": "Support provisioning exact capacity", "bodyText": "Depends on internal PR.\n@freva", "createdAt": "2020-05-27T13:38:09Z", "url": "https://github.com/vespa-engine/vespa/pull/13401", "merged": true, "mergeCommit": {"oid": "4552075772789e0db6d4ab0e21157b393274432b"}, "closed": true, "closedAt": "2020-05-28T13:04:27Z", "author": {"login": "mpolden"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclYGotgH2gAyNDIzODU4OTE1OjAyZmY5OWQ3ZjVhNTY3Zjg5MTc0N2JlMWVlZTNmNDQzZmQ5ODQ4N2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclqZRnAFqTQxOTkzMTM4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "02ff99d7f5a567f891747be1eee3f443fd98487d", "author": {"user": {"login": "mpolden", "name": "Martin Polden"}}, "url": "https://github.com/vespa-engine/vespa/commit/02ff99d7f5a567f891747be1eee3f443fd98487d", "committedDate": "2020-05-27T12:06:15Z", "message": "Rewrite test to not use Mockito"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8400289c573467829db1d9fffa370d727b0487b", "author": {"user": {"login": "mpolden", "name": "Martin Polden"}}, "url": "https://github.com/vespa-engine/vespa/commit/f8400289c573467829db1d9fffa370d727b0487b", "committedDate": "2020-05-27T13:08:16Z", "message": "Split provisioning logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9be54355fa8938c3537fbf9b0ede5c0e597b997c", "author": {"user": {"login": "mpolden", "name": "Martin Polden"}}, "url": "https://github.com/vespa-engine/vespa/commit/9be54355fa8938c3537fbf9b0ede5c0e597b997c", "committedDate": "2020-05-27T13:08:24Z", "message": "Add Cloud builder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8d4b2c1ce8b5d52143d39682849e55d74d2ad54", "author": {"user": {"login": "mpolden", "name": "Martin Polden"}}, "url": "https://github.com/vespa-engine/vespa/commit/e8d4b2c1ce8b5d52143d39682849e55d74d2ad54", "committedDate": "2020-05-27T13:08:24Z", "message": "Rename PreprovisionCapacity -> HostCapacity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "122aa54aefce5a04aab5b001f4d2840c99010aa4", "author": {"user": {"login": "mpolden", "name": "Martin Polden"}}, "url": "https://github.com/vespa-engine/vespa/commit/122aa54aefce5a04aab5b001f4d2840c99010aa4", "committedDate": "2020-05-27T13:08:24Z", "message": "Extract method for host provision capability"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5Mjg1Mjg3", "url": "https://github.com/vespa-engine/vespa/pull/13401#pullrequestreview-419285287", "createdAt": "2020-05-27T14:40:36Z", "commit": {"oid": "aa8a63d3e8fb3acfa254376eedd5526d90b5bd90"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDo0MDozNlrOGbNv_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDo0NDozN1rOGbN7iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5MDAxMw==", "bodyText": "Sort by cost, otherwise you risk counting a large host as satisfying a small HostCapacity, but then you wont find match for a larget HostCapacity request", "url": "https://github.com/vespa-engine/vespa/pull/13401#discussion_r431190013", "createdAt": "2020-05-27T14:40:36Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/DynamicProvisioningMaintainer.java", "diffHunk": "@@ -93,31 +94,78 @@ void updateProvisioningNodes(NodeList nodes, Mutex lock) {\n         });\n     }\n \n-    void convergeToCapacity(NodeList nodes) {\n-        Collection<Node> removableHosts = getRemovableHosts(nodes);\n-        List<NodeResources> preProvisionCapacity = preprovisionCapacityFlag.value().stream()\n-                .flatMap(cap -> {\n-                    NodeResources resources = new NodeResources(cap.getVcpu(), cap.getMemoryGb(), cap.getDiskGb(), 1);\n-                    return IntStream.range(0, cap.getCount()).mapToObj(i -> resources);\n-                })\n-                .sorted(NodeResourceComparator.memoryDiskCpuOrder().reversed())\n-                .collect(Collectors.toList());\n+    /** Converge zone to wanted capacity */\n+    private void convergeToCapacity(NodeList nodes) {\n+        List<Node> removableHosts = removableHostsOf(nodes);\n+        List<Node> excessHosts;\n+        if (nodeRepository().zone().getCloud().dynamicProvisioning()) {\n+            excessHosts = preprovisionCapacity(removableHosts);\n+        } else {\n+            excessHosts = provisionExactCapacity(removableHosts);\n+        }\n+        excessHosts.forEach(host -> {\n+            try {\n+                hostProvisioner.deprovision(host);\n+                nodeRepository().removeRecursively(host, true);\n+            } catch (RuntimeException e) {\n+                log.log(Level.WARNING, \"Failed to deprovision \" + host.hostname() + \", will retry in \" + interval(), e);\n+            }\n+        });\n+    }\n \n+    /** Provision the exact capacity declared for this zone, if any.\n+     *\n+     * @return Excess hosts that can be deprovisioned.\n+     */\n+    private List<Node> provisionExactCapacity(List<Node> removableHosts) {\n+        List<NodeResources> capacity = capacityFrom(exactCapacityFlag);\n+        if (capacity.isEmpty()) return List.of();\n+\n+        List<Node> excessHosts = new ArrayList<>(removableHosts);\n+        List<NodeResources> unsatisfiedCapacity = new ArrayList<>(capacity);\n+        for (var resources : capacity) {\n+            for (var host : removableHosts) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa8a63d3e8fb3acfa254376eedd5526d90b5bd90"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5MjQ3Mg==", "bodyText": "removableHosts() only contains \"free\" hosts, so if you were to allocate some of the host, this would lead to provisioning more hosts with exactly-provision-capacity?\nGenerally, I think preprovisionCapacity() and provisionExactCapacity() can be merged, instead you should have 2 variants of removableHostsOf()", "url": "https://github.com/vespa-engine/vespa/pull/13401#discussion_r431192472", "createdAt": "2020-05-27T14:43:57Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/DynamicProvisioningMaintainer.java", "diffHunk": "@@ -93,31 +94,78 @@ void updateProvisioningNodes(NodeList nodes, Mutex lock) {\n         });\n     }\n \n-    void convergeToCapacity(NodeList nodes) {\n-        Collection<Node> removableHosts = getRemovableHosts(nodes);\n-        List<NodeResources> preProvisionCapacity = preprovisionCapacityFlag.value().stream()\n-                .flatMap(cap -> {\n-                    NodeResources resources = new NodeResources(cap.getVcpu(), cap.getMemoryGb(), cap.getDiskGb(), 1);\n-                    return IntStream.range(0, cap.getCount()).mapToObj(i -> resources);\n-                })\n-                .sorted(NodeResourceComparator.memoryDiskCpuOrder().reversed())\n-                .collect(Collectors.toList());\n+    /** Converge zone to wanted capacity */\n+    private void convergeToCapacity(NodeList nodes) {\n+        List<Node> removableHosts = removableHostsOf(nodes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa8a63d3e8fb3acfa254376eedd5526d90b5bd90"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5Mjk2OQ==", "bodyText": "I'm not sure about introducing another effectively permanent flag, especially when these 2 flags are mutually exclusive...", "url": "https://github.com/vespa-engine/vespa/pull/13401#discussion_r431192969", "createdAt": "2020-05-27T14:44:37Z", "author": {"login": "freva"}, "path": "flags/src/main/java/com/yahoo/vespa/flags/Flags.java", "diffHunk": "@@ -122,11 +122,17 @@\n             \"Takes effect on the next run of RetiredExpirer.\",\n             HOSTNAME);\n \n-    public static final UnboundListFlag<PreprovisionCapacity> PREPROVISION_CAPACITY = defineListFlag(\n-            \"preprovision-capacity\", List.of(), PreprovisionCapacity.class,\n-            \"List of node resources and their count that should be present in zone to receive new deployments. When a \" +\n-            \"preprovisioned is taken, new will be provisioned within next iteration of maintainer.\",\n-            \"Takes effect on next iteration of HostProvisionMaintainer.\");\n+    public static final UnboundListFlag<HostCapacity> PREPROVISION_CAPACITY = defineListFlag(\n+            \"preprovision-capacity\", List.of(), HostCapacity.class,\n+            \"List of node resources and their count that should be unallocated in zone to receive new deployments. When a \" +\n+            \"preprovisioned host is taken, another one will be provisioned within next iteration of maintainer.\",\n+            \"Takes effect on next iteration of DynamicProvisioningMaintainer.\");\n+\n+    public static final UnboundListFlag<HostCapacity> EXACT_PROVISION_CAPACITY = defineListFlag(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa8a63d3e8fb3acfa254376eedd5526d90b5bd90"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31c19ba00cd80f1b83edb11cba06d8e4d0a7428b", "author": {"user": {"login": "mpolden", "name": "Martin Polden"}}, "url": "https://github.com/vespa-engine/vespa/commit/31c19ba00cd80f1b83edb11cba06d8e4d0a7428b", "committedDate": "2020-05-28T08:04:53Z", "message": "Support provisioning exact capacity"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aa8a63d3e8fb3acfa254376eedd5526d90b5bd90", "author": {"user": {"login": "mpolden", "name": "Martin Polden"}}, "url": "https://github.com/vespa-engine/vespa/commit/aa8a63d3e8fb3acfa254376eedd5526d90b5bd90", "committedDate": "2020-05-27T13:17:32Z", "message": "Support provisioning exact capacity"}, "afterCommit": {"oid": "31c19ba00cd80f1b83edb11cba06d8e4d0a7428b", "author": {"user": {"login": "mpolden", "name": "Martin Polden"}}, "url": "https://github.com/vespa-engine/vespa/commit/31c19ba00cd80f1b83edb11cba06d8e4d0a7428b", "committedDate": "2020-05-28T08:04:53Z", "message": "Support provisioning exact capacity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8903332a7a6ce57c7777b2f6976c1da781d8b52e", "author": {"user": {"login": "mpolden", "name": "Martin Polden"}}, "url": "https://github.com/vespa-engine/vespa/commit/8903332a7a6ce57c7777b2f6976c1da781d8b52e", "committedDate": "2020-05-28T09:16:19Z", "message": "Ensure that capacity reduction does not remove non-empty hosts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5OTMxMzg0", "url": "https://github.com/vespa-engine/vespa/pull/13401#pullrequestreview-419931384", "createdAt": "2020-05-28T09:24:54Z", "commit": {"oid": "8903332a7a6ce57c7777b2f6976c1da781d8b52e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3071, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}