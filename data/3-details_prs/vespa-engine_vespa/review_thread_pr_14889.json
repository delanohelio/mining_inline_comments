{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzODkxMTky", "number": 14889, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzoyODoyOFrOEt1Thg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzozMTozM1rOEt1cGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDk0NzI2OnYy", "diffSide": "RIGHT", "path": "vespaclient-container-plugin/src/main/java/com/yahoo/document/restapi/resource/DocumentV1ApiHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzoyODoyOFrOHh21wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzoyODoyOFrOHh21wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI2MzU1Mw==", "bodyText": "This shouldn't happen, so throw on it. It would cause multiple operations to be sent to the backend for a single request. Can guard here against buggy usage of this class.", "url": "https://github.com/vespa-engine/vespa/pull/14889#discussion_r505263553", "createdAt": "2020-10-15T07:28:28Z", "author": {"login": "jonmv"}, "path": "vespaclient-container-plugin/src/main/java/com/yahoo/document/restapi/resource/DocumentV1ApiHandler.java", "diffHunk": "@@ -592,46 +594,57 @@ private static void loggingException(Exceptions.RunnableThrowingIOException runn\n \n     // ---------------------------------------------Document Operations ----------------------------------------\n \n-    @FunctionalInterface\n-    interface Operation {\n+    private static abstract class Operation {\n+\n+        private final Lock lock = new ReentrantLock();\n+        private final HttpRequest request;\n+        private final ResponseHandler handler;\n+        private Supplier<Boolean> operation;\n+\n+        Operation(HttpRequest request, ResponseHandler handler) {\n+            this.request = request;\n+            this.handler = handler;\n+        }\n \n         /**\n          * Attempts to dispatch this operation to the document API, and returns whether this completed or not.\n          * This return {@code} true if dispatch was successful, or if it failed fatally; or {@code false} if\n          * dispatch should be retried at a later time.\n          */\n-        boolean dispatch();\n+        boolean dispatch() {\n+            if ( ! lock.tryLock())\n+                throw new IllegalStateException(\"Comcurrent attempts at dispatch \u2014\u00a0this is a bug\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "463729c529464ecea03388b9f2dcf94993d03a7f"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDk1MDk1OnYy", "diffSide": "RIGHT", "path": "vespaclient-container-plugin/src/main/java/com/yahoo/document/restapi/resource/DocumentV1ApiHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzoyOTowM1rOHh24EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzoyOTowM1rOHh24EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI2NDE0NA==", "bodyText": "Old code stupidly tried to parse every time ... \u30fd( \u0ca0\u76ca\u0ca0 )\uff89", "url": "https://github.com/vespa-engine/vespa/pull/14889#discussion_r505264144", "createdAt": "2020-10-15T07:29:03Z", "author": {"login": "jonmv"}, "path": "vespaclient-container-plugin/src/main/java/com/yahoo/document/restapi/resource/DocumentV1ApiHandler.java", "diffHunk": "@@ -592,46 +594,57 @@ private static void loggingException(Exceptions.RunnableThrowingIOException runn\n \n     // ---------------------------------------------Document Operations ----------------------------------------\n \n-    @FunctionalInterface\n-    interface Operation {\n+    private static abstract class Operation {\n+\n+        private final Lock lock = new ReentrantLock();\n+        private final HttpRequest request;\n+        private final ResponseHandler handler;\n+        private Supplier<Boolean> operation;\n+\n+        Operation(HttpRequest request, ResponseHandler handler) {\n+            this.request = request;\n+            this.handler = handler;\n+        }\n \n         /**\n          * Attempts to dispatch this operation to the document API, and returns whether this completed or not.\n          * This return {@code} true if dispatch was successful, or if it failed fatally; or {@code false} if\n          * dispatch should be retried at a later time.\n          */\n-        boolean dispatch();\n+        boolean dispatch() {\n+            if ( ! lock.tryLock())\n+                throw new IllegalStateException(\"Comcurrent attempts at dispatch \u2014\u00a0this is a bug\");\n \n-        /** Wraps the operation parser in an Operation that is parsed the first time it is attempted dispatched. */\n-        static Operation lazilyParsed(HttpRequest request, ResponseHandler handler, Supplier<Operation> parser) {\n-            AtomicReference<Operation> operation = new AtomicReference<>();\n-            return () -> {\n-                try {\n-                    return operation.updateAndGet(value -> value != null ? value : parser.get()).dispatch();\n-                }\n-                catch (IllegalArgumentException e) {\n-                    badRequest(request, e, handler);\n-                }\n-                catch (RuntimeException e) {\n-                    serverError(request, e, handler);\n-                }\n-                return true;\n-            };\n+            try {\n+                if (operation == null)\n+                    operation = parse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "463729c529464ecea03388b9f2dcf94993d03a7f"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDk1NTMwOnYy", "diffSide": "RIGHT", "path": "vespaclient-container-plugin/src/main/java/com/yahoo/document/restapi/resource/DocumentV1ApiHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzoyOTo0MlrOHh267A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzoyOTo0MlrOHh267A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI2NDg3Ng==", "bodyText": "Exception handling now run for all operations \u2014\u00a0not just the lazily parsed ones.", "url": "https://github.com/vespa-engine/vespa/pull/14889#discussion_r505264876", "createdAt": "2020-10-15T07:29:42Z", "author": {"login": "jonmv"}, "path": "vespaclient-container-plugin/src/main/java/com/yahoo/document/restapi/resource/DocumentV1ApiHandler.java", "diffHunk": "@@ -592,46 +594,57 @@ private static void loggingException(Exceptions.RunnableThrowingIOException runn\n \n     // ---------------------------------------------Document Operations ----------------------------------------\n \n-    @FunctionalInterface\n-    interface Operation {\n+    private static abstract class Operation {\n+\n+        private final Lock lock = new ReentrantLock();\n+        private final HttpRequest request;\n+        private final ResponseHandler handler;\n+        private Supplier<Boolean> operation;\n+\n+        Operation(HttpRequest request, ResponseHandler handler) {\n+            this.request = request;\n+            this.handler = handler;\n+        }\n \n         /**\n          * Attempts to dispatch this operation to the document API, and returns whether this completed or not.\n          * This return {@code} true if dispatch was successful, or if it failed fatally; or {@code false} if\n          * dispatch should be retried at a later time.\n          */\n-        boolean dispatch();\n+        boolean dispatch() {\n+            if ( ! lock.tryLock())\n+                throw new IllegalStateException(\"Comcurrent attempts at dispatch \u2014\u00a0this is a bug\");\n \n-        /** Wraps the operation parser in an Operation that is parsed the first time it is attempted dispatched. */\n-        static Operation lazilyParsed(HttpRequest request, ResponseHandler handler, Supplier<Operation> parser) {\n-            AtomicReference<Operation> operation = new AtomicReference<>();\n-            return () -> {\n-                try {\n-                    return operation.updateAndGet(value -> value != null ? value : parser.get()).dispatch();\n-                }\n-                catch (IllegalArgumentException e) {\n-                    badRequest(request, e, handler);\n-                }\n-                catch (RuntimeException e) {\n-                    serverError(request, e, handler);\n-                }\n-                return true;\n-            };\n+            try {\n+                if (operation == null)\n+                    operation = parse();\n+\n+                return operation.get();\n+            }\n+            catch (IllegalArgumentException e) {\n+                badRequest(request, e, handler);\n+            }\n+            catch (RuntimeException e) {\n+                serverError(request, e, handler);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "463729c529464ecea03388b9f2dcf94993d03a7f"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDk2OTIzOnYy", "diffSide": "RIGHT", "path": "vespaclient-container-plugin/src/main/java/com/yahoo/document/restapi/resource/DocumentV1ApiHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzozMTozNFrOHh3EWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNzozMTozNFrOHh3EWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTI2NzI5MQ==", "bodyText": "This is now also run for all operations \u2014\u00a0not just those against the async-session.", "url": "https://github.com/vespa-engine/vespa/pull/14889#discussion_r505267291", "createdAt": "2020-10-15T07:31:34Z", "author": {"login": "jonmv"}, "path": "vespaclient-container-plugin/src/main/java/com/yahoo/document/restapi/resource/DocumentV1ApiHandler.java", "diffHunk": "@@ -592,46 +594,60 @@ private static void loggingException(Exceptions.RunnableThrowingIOException runn\n \n     // ---------------------------------------------Document Operations ----------------------------------------\n \n-    @FunctionalInterface\n-    interface Operation {\n+    private static abstract class Operation {\n+\n+        private final Lock lock = new ReentrantLock();\n+        private final HttpRequest request;\n+        private final ResponseHandler handler;\n+        private Supplier<Boolean> operation;\n+\n+        Operation(HttpRequest request, ResponseHandler handler) {\n+            this.request = request;\n+            this.handler = handler;\n+        }\n \n         /**\n          * Attempts to dispatch this operation to the document API, and returns whether this completed or not.\n          * This return {@code} true if dispatch was successful, or if it failed fatally; or {@code false} if\n          * dispatch should be retried at a later time.\n          */\n-        boolean dispatch();\n-\n-        /** Wraps the operation parser in an Operation that is parsed the first time it is attempted dispatched. */\n-        static Operation lazilyParsed(HttpRequest request, ResponseHandler handler, Supplier<Operation> parser) {\n-            AtomicReference<Operation> operation = new AtomicReference<>();\n-            return () -> {\n-                try {\n-                    return operation.updateAndGet(value -> value != null ? value : parser.get()).dispatch();\n-                }\n-                catch (IllegalArgumentException e) {\n-                    badRequest(request, e, handler);\n-                }\n-                catch (RuntimeException e) {\n-                    serverError(request, e, handler);\n-                }\n+        boolean dispatch() {\n+            if (request.isCancelled())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a3f3ebaecd62fa59442d6659bc4ed7565441de5"}, "originalPosition": 105}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1178, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}