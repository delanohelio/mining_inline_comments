{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4OTkyODI3", "number": 12006, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDozMjozNlrODb3fJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTowMTowOFrODb4AXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTQ3MjM3OnYy", "diffSide": "LEFT", "path": "orchestrator/src/main/java/com/yahoo/vespa/orchestrator/status/ZookeeperStatusService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDozMjozNlrOFjmRFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDozMjozNlrOFjmRFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3MTQ0Nw==", "bodyText": "This line is fairly new. The older code read the cache counter only once, and cleared the cache only once (or didn't clear it at all). While the current code will do cache invalidation on every invocation of the returned Function. The old behavior is restored with this PR.", "url": "https://github.com/vespa-engine/vespa/pull/12006#discussion_r372871447", "createdAt": "2020-01-30T10:32:36Z", "author": {"login": "hakonhall"}, "path": "orchestrator/src/main/java/com/yahoo/vespa/orchestrator/status/ZookeeperStatusService.java", "diffHunk": "@@ -99,12 +99,13 @@ public boolean setHostStatus(ApplicationInstanceReference application, HostName\n \n     /**\n      * Cache is checked for freshness when this mapping is created, and may be invalidated again later\n-     * by other users of the cache. Since this function is backed by the cache, any such invalidations\n+     * by other users of the cache. Since this function is backed by the cache, any such invalidation\n      * will be reflected in the returned mapping; all users of the cache collaborate in repopulating it.\n      */\n     @Override\n-    public Function<ApplicationInstanceReference, Set<HostName>> getSuspendedHostsByApplication() {\n-        return application -> hostInfosCache.getHostInfos(application).suspendedHostsnames();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cac9c69875dee164b45c1eddfbc2322eaa97a6f7"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTU1NzQyOnYy", "diffSide": "RIGHT", "path": "orchestrator/src/main/java/com/yahoo/vespa/orchestrator/status/ZookeeperStatusService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTowMTowOFrOFjnFfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo1NDowOFrOFjobJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg4NDg2Mw==", "bodyText": "Why not just\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return hostInfosCache::getCachedHostInfos;\n          \n          \n            \n                    return hostInfosCache::getHostInfos;\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/vespa-engine/vespa/pull/12006#discussion_r372884863", "createdAt": "2020-01-30T11:01:08Z", "author": {"login": "freva"}, "path": "orchestrator/src/main/java/com/yahoo/vespa/orchestrator/status/ZookeeperStatusService.java", "diffHunk": "@@ -99,12 +99,13 @@ public boolean setHostStatus(ApplicationInstanceReference application, HostName\n \n     /**\n      * Cache is checked for freshness when this mapping is created, and may be invalidated again later\n-     * by other users of the cache. Since this function is backed by the cache, any such invalidations\n+     * by other users of the cache. Since this function is backed by the cache, any such invalidation\n      * will be reflected in the returned mapping; all users of the cache collaborate in repopulating it.\n      */\n     @Override\n-    public Function<ApplicationInstanceReference, Set<HostName>> getSuspendedHostsByApplication() {\n-        return application -> hostInfosCache.getHostInfos(application).suspendedHostsnames();\n+    public Function<ApplicationInstanceReference, HostInfos> getHostInfosByApplicationResolver() {\n+        hostInfosCache.refreshCache();\n+        return hostInfosCache::getCachedHostInfos;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1985cf796f265ffb929b49f944e63158558e8da"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNTI4Mg==", "bodyText": "I tried to explain that to the left?", "url": "https://github.com/vespa-engine/vespa/pull/12006#discussion_r372905282", "createdAt": "2020-01-30T11:50:21Z", "author": {"login": "hakonhall"}, "path": "orchestrator/src/main/java/com/yahoo/vespa/orchestrator/status/ZookeeperStatusService.java", "diffHunk": "@@ -99,12 +99,13 @@ public boolean setHostStatus(ApplicationInstanceReference application, HostName\n \n     /**\n      * Cache is checked for freshness when this mapping is created, and may be invalidated again later\n-     * by other users of the cache. Since this function is backed by the cache, any such invalidations\n+     * by other users of the cache. Since this function is backed by the cache, any such invalidation\n      * will be reflected in the returned mapping; all users of the cache collaborate in repopulating it.\n      */\n     @Override\n-    public Function<ApplicationInstanceReference, Set<HostName>> getSuspendedHostsByApplication() {\n-        return application -> hostInfosCache.getHostInfos(application).suspendedHostsnames();\n+    public Function<ApplicationInstanceReference, HostInfos> getHostInfosByApplicationResolver() {\n+        hostInfosCache.refreshCache();\n+        return hostInfosCache::getCachedHostInfos;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg4NDg2Mw=="}, "originalCommit": {"oid": "c1985cf796f265ffb929b49f944e63158558e8da"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNjc5MA==", "bodyText": "\ud83e\udd26\u200d\u2642\ufe0f", "url": "https://github.com/vespa-engine/vespa/pull/12006#discussion_r372906790", "createdAt": "2020-01-30T11:54:08Z", "author": {"login": "freva"}, "path": "orchestrator/src/main/java/com/yahoo/vespa/orchestrator/status/ZookeeperStatusService.java", "diffHunk": "@@ -99,12 +99,13 @@ public boolean setHostStatus(ApplicationInstanceReference application, HostName\n \n     /**\n      * Cache is checked for freshness when this mapping is created, and may be invalidated again later\n-     * by other users of the cache. Since this function is backed by the cache, any such invalidations\n+     * by other users of the cache. Since this function is backed by the cache, any such invalidation\n      * will be reflected in the returned mapping; all users of the cache collaborate in repopulating it.\n      */\n     @Override\n-    public Function<ApplicationInstanceReference, Set<HostName>> getSuspendedHostsByApplication() {\n-        return application -> hostInfosCache.getHostInfos(application).suspendedHostsnames();\n+    public Function<ApplicationInstanceReference, HostInfos> getHostInfosByApplicationResolver() {\n+        hostInfosCache.refreshCache();\n+        return hostInfosCache::getCachedHostInfos;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg4NDg2Mw=="}, "originalCommit": {"oid": "c1985cf796f265ffb929b49f944e63158558e8da"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2555, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}