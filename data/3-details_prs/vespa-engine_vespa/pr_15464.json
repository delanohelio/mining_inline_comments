{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NDE0OTg4", "number": 15464, "title": "Add class that supports dynamic reconfiguration of zookeeper", "bodyText": "New class ReconfigurableVespaZooKeeperServer supports reconfiguration. Not used yet.", "createdAt": "2020-11-25T12:37:03Z", "url": "https://github.com/vespa-engine/vespa/pull/15464", "merged": true, "mergeCommit": {"oid": "de5a6ac9951c083b8d5cb5557e7a0799ebbb79f7"}, "closed": true, "closedAt": "2020-11-26T13:09:51Z", "author": {"login": "hmusum"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdf9nrRAH2gAyNTI3NDE0OTg4OmFhODk3MjFhMTI4NTY2NjNhMDlmZDEyZGYxMDhjMWRhN2YyYjg1NTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgSjKzgFqTUzOTI5MzQ2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "aa89721a12856663a09fd12df108c1da7f2b8559", "author": {"user": {"login": "hmusum", "name": "Harald Musum"}}, "url": "https://github.com/vespa-engine/vespa/commit/aa89721a12856663a09fd12df108c1da7f2b8559", "committedDate": "2020-11-25T12:36:26Z", "message": "Add class that supports reconfiguring zokeeper"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MjUzNDQ3", "url": "https://github.com/vespa-engine/vespa/pull/15464#pullrequestreview-539253447", "createdAt": "2020-11-26T12:01:03Z", "commit": {"oid": "aa89721a12856663a09fd12df108c1da7f2b8559"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMjowMTowM1rOH6YhDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMjoyNzoxMVrOH6ZXaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk4MTEzNA==", "bodyText": "Nit: Import Logger.", "url": "https://github.com/vespa-engine/vespa/pull/15464#discussion_r530981134", "createdAt": "2020-11-26T12:01:03Z", "author": {"login": "mpolden"}, "path": "zookeeper-server/zookeeper-server-3.5.6/src/main/java/com/yahoo/vespa/zookeeper/Reconfigurer.java", "diffHunk": "@@ -0,0 +1,103 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.zookeeper;\n+\n+import com.google.inject.Inject;\n+import com.yahoo.cloud.config.ZookeeperServerConfig;\n+import com.yahoo.component.AbstractComponent;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.admin.ZooKeeperAdmin;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.logging.Level;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Starts zookeeper server and supports reconfiguring zookeeper cluster. Created as a component\n+ * without any config injected, to make sure that it is not recreated when config changes.\n+ *\n+ * @author hmusum\n+ */\n+public class Reconfigurer extends AbstractComponent {\n+    private static final java.util.logging.Logger log = java.util.logging.Logger.getLogger(Reconfigurer.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa89721a12856663a09fd12df108c1da7f2b8559"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk4MTc3OA==", "bodyText": "Remove.", "url": "https://github.com/vespa-engine/vespa/pull/15464#discussion_r530981778", "createdAt": "2020-11-26T12:02:17Z", "author": {"login": "mpolden"}, "path": "zookeeper-server/zookeeper-server-3.5.6/src/main/java/com/yahoo/vespa/zookeeper/Reconfigurer.java", "diffHunk": "@@ -0,0 +1,103 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.zookeeper;\n+\n+import com.google.inject.Inject;\n+import com.yahoo.cloud.config.ZookeeperServerConfig;\n+import com.yahoo.component.AbstractComponent;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.admin.ZooKeeperAdmin;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.logging.Level;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Starts zookeeper server and supports reconfiguring zookeeper cluster. Created as a component\n+ * without any config injected, to make sure that it is not recreated when config changes.\n+ *\n+ * @author hmusum\n+ */\n+public class Reconfigurer extends AbstractComponent {\n+    private static final java.util.logging.Logger log = java.util.logging.Logger.getLogger(Reconfigurer.class.getName());\n+\n+    private ZooKeeperRunner zooKeeperRunner;\n+\n+    @Inject\n+    public Reconfigurer() {\n+        log.log(Level.FINE, \"Created ZooKeeperReconfigurer\");\n+    }\n+\n+    // For testing only\n+    void startOrReconfigure(ZookeeperServerConfig newConfig) {\n+        if (zooKeeperRunner == null)\n+            zooKeeperRunner = startServer(newConfig);\n+\n+        if (shouldReconfigure(newConfig))\n+            reconfigure(newConfig);\n+    }\n+\n+    boolean shouldReconfigure(ZookeeperServerConfig newConfig) {\n+        ZookeeperServerConfig existingConfig = zooKeeperRunner.zookeeperServerConfig();\n+        if (!newConfig.dynamicReconfiguration() || existingConfig == null) return false;\n+\n+        return !newConfig.equals(existingConfig);\n+    }\n+\n+    private ZooKeeperRunner startServer(ZookeeperServerConfig zookeeperServerConfig) {\n+        //System.out.println(\"Starting server with config \" + zookeeperServerConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa89721a12856663a09fd12df108c1da7f2b8559"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk4MjYxOQ==", "bodyText": "Stale comment? This is called from ReconfigurableVespaZooKeeperServer.", "url": "https://github.com/vespa-engine/vespa/pull/15464#discussion_r530982619", "createdAt": "2020-11-26T12:03:50Z", "author": {"login": "mpolden"}, "path": "zookeeper-server/zookeeper-server-3.5.6/src/main/java/com/yahoo/vespa/zookeeper/Reconfigurer.java", "diffHunk": "@@ -0,0 +1,103 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.zookeeper;\n+\n+import com.google.inject.Inject;\n+import com.yahoo.cloud.config.ZookeeperServerConfig;\n+import com.yahoo.component.AbstractComponent;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.admin.ZooKeeperAdmin;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.logging.Level;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Starts zookeeper server and supports reconfiguring zookeeper cluster. Created as a component\n+ * without any config injected, to make sure that it is not recreated when config changes.\n+ *\n+ * @author hmusum\n+ */\n+public class Reconfigurer extends AbstractComponent {\n+    private static final java.util.logging.Logger log = java.util.logging.Logger.getLogger(Reconfigurer.class.getName());\n+\n+    private ZooKeeperRunner zooKeeperRunner;\n+\n+    @Inject\n+    public Reconfigurer() {\n+        log.log(Level.FINE, \"Created ZooKeeperReconfigurer\");\n+    }\n+\n+    // For testing only\n+    void startOrReconfigure(ZookeeperServerConfig newConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa89721a12856663a09fd12df108c1da7f2b8559"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk4NzAwMg==", "bodyText": "Nit: Make it /** javadoc */.", "url": "https://github.com/vespa-engine/vespa/pull/15464#discussion_r530987002", "createdAt": "2020-11-26T12:12:00Z", "author": {"login": "mpolden"}, "path": "zookeeper-server/zookeeper-server-3.5.6/src/main/java/com/yahoo/vespa/zookeeper/Reconfigurer.java", "diffHunk": "@@ -0,0 +1,103 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.zookeeper;\n+\n+import com.google.inject.Inject;\n+import com.yahoo.cloud.config.ZookeeperServerConfig;\n+import com.yahoo.component.AbstractComponent;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.admin.ZooKeeperAdmin;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.logging.Level;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Starts zookeeper server and supports reconfiguring zookeeper cluster. Created as a component\n+ * without any config injected, to make sure that it is not recreated when config changes.\n+ *\n+ * @author hmusum\n+ */\n+public class Reconfigurer extends AbstractComponent {\n+    private static final java.util.logging.Logger log = java.util.logging.Logger.getLogger(Reconfigurer.class.getName());\n+\n+    private ZooKeeperRunner zooKeeperRunner;\n+\n+    @Inject\n+    public Reconfigurer() {\n+        log.log(Level.FINE, \"Created ZooKeeperReconfigurer\");\n+    }\n+\n+    // For testing only\n+    void startOrReconfigure(ZookeeperServerConfig newConfig) {\n+        if (zooKeeperRunner == null)\n+            zooKeeperRunner = startServer(newConfig);\n+\n+        if (shouldReconfigure(newConfig))\n+            reconfigure(newConfig);\n+    }\n+\n+    boolean shouldReconfigure(ZookeeperServerConfig newConfig) {\n+        ZookeeperServerConfig existingConfig = zooKeeperRunner.zookeeperServerConfig();\n+        if (!newConfig.dynamicReconfiguration() || existingConfig == null) return false;\n+\n+        return !newConfig.equals(existingConfig);\n+    }\n+\n+    private ZooKeeperRunner startServer(ZookeeperServerConfig zookeeperServerConfig) {\n+        //System.out.println(\"Starting server with config \" + zookeeperServerConfig);\n+        return new ZooKeeperRunner(zookeeperServerConfig);\n+    }\n+\n+    void reconfigure(ZookeeperServerConfig newConfig) {\n+        ZookeeperServerConfig existingConfig = zooKeeperRunner.zookeeperServerConfig();\n+\n+        List<String> originalServers = List.copyOf(servers(existingConfig));\n+        log.log(Level.INFO, \"Original servers: \" + originalServers);\n+\n+        List<String> joiningServers = servers(newConfig);\n+        List<String> leavingServers = setDifference(originalServers, joiningServers);\n+        List<String> addedServers = setDifference(joiningServers, leavingServers);\n+\n+        log.log(Level.INFO, \"Will reconfigure zookeeper cluster. Joining servers: \" + joiningServers +\n+                            \", leaving servers: \" + leavingServers +\n+                            \", new members\" + addedServers);\n+\n+        int sessionTimeoutInSeconds = 30;\n+        try {\n+            ZooKeeperAdmin zooKeeperAdmin = new ZooKeeperAdmin(connectionSpec(existingConfig), sessionTimeoutInSeconds, null);\n+\n+            long fromConfig = -1;\n+            zooKeeperAdmin.reconfigure(joiningServers, originalServers, addedServers, fromConfig, null);\n+        } catch (IOException | KeeperException | InterruptedException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    List<String> currentServers() {\n+        if (zooKeeperRunner == null) return List.of();\n+\n+        return servers(zooKeeperRunner.zookeeperServerConfig());\n+    }\n+\n+    // Returns items in set a that are not in set b", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa89721a12856663a09fd12df108c1da7f2b8559"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk4Nzk4Mg==", "bodyText": "Missing @author.", "url": "https://github.com/vespa-engine/vespa/pull/15464#discussion_r530987982", "createdAt": "2020-11-26T12:13:55Z", "author": {"login": "mpolden"}, "path": "zookeeper-server/zookeeper-server-3.5.6/src/test/java/com/yahoo/vespa/zookeeper/ReconfigurerTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.zookeeper;\n+\n+import com.yahoo.cloud.config.ZookeeperServerConfig;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.stream.IntStream;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests dynamic reconfiguration of zookeeper cluster.\n+ */\n+public class ReconfigurerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa89721a12856663a09fd12df108c1da7f2b8559"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk4ODMyOA==", "bodyText": "Nit: s/Harald Musum/hmusum/?", "url": "https://github.com/vespa-engine/vespa/pull/15464#discussion_r530988328", "createdAt": "2020-11-26T12:14:31Z", "author": {"login": "mpolden"}, "path": "zookeeper-server/zookeeper-server-3.5.6/src/main/java/com/yahoo/vespa/zookeeper/ReconfigurableVespaZooKeeperServer.java", "diffHunk": "@@ -0,0 +1,20 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.zookeeper;\n+\n+import com.google.inject.Inject;\n+import com.yahoo.cloud.config.ZookeeperServerConfig;\n+import com.yahoo.component.AbstractComponent;\n+\n+/**\n+ * Starts or reconfigures zookeeper cluster\n+ *\n+ * @author Harald Musum", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa89721a12856663a09fd12df108c1da7f2b8559"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk5NDQ2OQ==", "bodyText": "Consider extracting as constant.", "url": "https://github.com/vespa-engine/vespa/pull/15464#discussion_r530994469", "createdAt": "2020-11-26T12:26:01Z", "author": {"login": "mpolden"}, "path": "zookeeper-server/zookeeper-server-3.5.6/src/main/java/com/yahoo/vespa/zookeeper/Reconfigurer.java", "diffHunk": "@@ -0,0 +1,103 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.zookeeper;\n+\n+import com.google.inject.Inject;\n+import com.yahoo.cloud.config.ZookeeperServerConfig;\n+import com.yahoo.component.AbstractComponent;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.admin.ZooKeeperAdmin;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.logging.Level;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Starts zookeeper server and supports reconfiguring zookeeper cluster. Created as a component\n+ * without any config injected, to make sure that it is not recreated when config changes.\n+ *\n+ * @author hmusum\n+ */\n+public class Reconfigurer extends AbstractComponent {\n+    private static final java.util.logging.Logger log = java.util.logging.Logger.getLogger(Reconfigurer.class.getName());\n+\n+    private ZooKeeperRunner zooKeeperRunner;\n+\n+    @Inject\n+    public Reconfigurer() {\n+        log.log(Level.FINE, \"Created ZooKeeperReconfigurer\");\n+    }\n+\n+    // For testing only\n+    void startOrReconfigure(ZookeeperServerConfig newConfig) {\n+        if (zooKeeperRunner == null)\n+            zooKeeperRunner = startServer(newConfig);\n+\n+        if (shouldReconfigure(newConfig))\n+            reconfigure(newConfig);\n+    }\n+\n+    boolean shouldReconfigure(ZookeeperServerConfig newConfig) {\n+        ZookeeperServerConfig existingConfig = zooKeeperRunner.zookeeperServerConfig();\n+        if (!newConfig.dynamicReconfiguration() || existingConfig == null) return false;\n+\n+        return !newConfig.equals(existingConfig);\n+    }\n+\n+    private ZooKeeperRunner startServer(ZookeeperServerConfig zookeeperServerConfig) {\n+        //System.out.println(\"Starting server with config \" + zookeeperServerConfig);\n+        return new ZooKeeperRunner(zookeeperServerConfig);\n+    }\n+\n+    void reconfigure(ZookeeperServerConfig newConfig) {\n+        ZookeeperServerConfig existingConfig = zooKeeperRunner.zookeeperServerConfig();\n+\n+        List<String> originalServers = List.copyOf(servers(existingConfig));\n+        log.log(Level.INFO, \"Original servers: \" + originalServers);\n+\n+        List<String> joiningServers = servers(newConfig);\n+        List<String> leavingServers = setDifference(originalServers, joiningServers);\n+        List<String> addedServers = setDifference(joiningServers, leavingServers);\n+\n+        log.log(Level.INFO, \"Will reconfigure zookeeper cluster. Joining servers: \" + joiningServers +\n+                            \", leaving servers: \" + leavingServers +\n+                            \", new members\" + addedServers);\n+\n+        int sessionTimeoutInSeconds = 30;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa89721a12856663a09fd12df108c1da7f2b8559"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk5NTA0OQ==", "bodyText": "Consider testing that an equal config does not cause reconfiguration.", "url": "https://github.com/vespa-engine/vespa/pull/15464#discussion_r530995049", "createdAt": "2020-11-26T12:27:11Z", "author": {"login": "mpolden"}, "path": "zookeeper-server/zookeeper-server-3.5.6/src/test/java/com/yahoo/vespa/zookeeper/ReconfigurerTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.zookeeper;\n+\n+import com.yahoo.cloud.config.ZookeeperServerConfig;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.stream.IntStream;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests dynamic reconfiguration of zookeeper cluster.\n+ */\n+public class ReconfigurerTest {\n+\n+    private File cfgFile;\n+    private File idFile;\n+\n+    @Rule\n+    public TemporaryFolder folder = new TemporaryFolder();\n+\n+    @Before\n+    public void setup() throws IOException {\n+        cfgFile = folder.newFile();\n+        idFile = folder.newFile(\"myid\");\n+    }\n+\n+    @Test\n+    public void testStartupAndReconfigure() {\n+        Reconfigurer reconfigurer = new Reconfigurer();\n+        reconfigurer.startOrReconfigure(createConfig(1));\n+\n+        // Created config has dynamicReconfig set to false\n+        assertFalse(reconfigurer.shouldReconfigure(createConfig(2)));\n+\n+        // Created config has dynamicReconfig set to true\n+        assertTrue(reconfigurer.shouldReconfigure(createConfigAllowReconfiguring(2)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa89721a12856663a09fd12df108c1da7f2b8559"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ba59a35b7e8291cb53c6bf3ad7780c1c917514a", "author": {"user": {"login": "hmusum", "name": "Harald Musum"}}, "url": "https://github.com/vespa-engine/vespa/commit/9ba59a35b7e8291cb53c6bf3ad7780c1c917514a", "committedDate": "2020-11-26T12:36:22Z", "message": "Minor fixes after review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f289f61c121600788bbcbc3fab5a255bf0fea3d7", "author": {"user": {"login": "hmusum", "name": "Harald Musum"}}, "url": "https://github.com/vespa-engine/vespa/commit/f289f61c121600788bbcbc3fab5a255bf0fea3d7", "committedDate": "2020-11-26T12:47:56Z", "message": "Test that equal config does not cause reconfiguration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MjkzNDYz", "url": "https://github.com/vespa-engine/vespa/pull/15464#pullrequestreview-539293463", "createdAt": "2020-11-26T12:59:31Z", "commit": {"oid": "f289f61c121600788bbcbc3fab5a255bf0fea3d7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1877, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}