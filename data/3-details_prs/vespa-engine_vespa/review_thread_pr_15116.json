{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMDIxMzA4", "number": 15116, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTo0MDo1MlrOE0TOdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMTowMToyNVrOE0VIVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjc2NDA3OnYy", "diffSide": "RIGHT", "path": "storage/src/vespa/storage/bucketdb/const_iterator.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTo0MDo1MlrOHr8zrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMDowNzo0OVrOHr9zeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0NzA4Ng==", "bodyText": "Consider adding class comment.", "url": "https://github.com/vespa-engine/vespa/pull/15116#discussion_r515847086", "createdAt": "2020-11-02T09:40:52Z", "author": {"login": "geirst"}, "path": "storage/src/vespa/storage/bucketdb/const_iterator.h", "diffHunk": "@@ -0,0 +1,18 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+#pragma once\n+\n+#include <cstdint>\n+\n+namespace storage::bucketdb {\n+\n+template <typename ConstRefT>\n+class ConstIterator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a572948405232c4fd5b74360c667e29058d2f8"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg2MzQxNw==", "bodyText": "Done", "url": "https://github.com/vespa-engine/vespa/pull/15116#discussion_r515863417", "createdAt": "2020-11-02T10:07:49Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/bucketdb/const_iterator.h", "diffHunk": "@@ -0,0 +1,18 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+#pragma once\n+\n+#include <cstdint>\n+\n+namespace storage::bucketdb {\n+\n+template <typename ConstRefT>\n+class ConstIterator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0NzA4Ng=="}, "originalCommit": {"oid": "20a572948405232c4fd5b74360c667e29058d2f8"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjc3MjQ1OnYy", "diffSide": "RIGHT", "path": "storage/src/vespa/storage/bucketdb/striped_btree_lockable_map.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTo0MzowN1rOHr840g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMDowNzo1NlrOHr9zwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0ODQwMg==", "bodyText": "Nitpick: Consider /** */ for class comments as used elsewhere.", "url": "https://github.com/vespa-engine/vespa/pull/15116#discussion_r515848402", "createdAt": "2020-11-02T09:43:07Z", "author": {"login": "geirst"}, "path": "storage/src/vespa/storage/bucketdb/striped_btree_lockable_map.h", "diffHunk": "@@ -0,0 +1,88 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+#pragma once\n+\n+#include \"btree_lockable_map.h\"\n+#include <memory>\n+#include <vector>\n+\n+namespace storage::bucketdb {\n+\n+// Bucket database implementation that stripes all superbuckets across", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a572948405232c4fd5b74360c667e29058d2f8"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg2MzQ4OQ==", "bodyText": "Done", "url": "https://github.com/vespa-engine/vespa/pull/15116#discussion_r515863489", "createdAt": "2020-11-02T10:07:56Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/bucketdb/striped_btree_lockable_map.h", "diffHunk": "@@ -0,0 +1,88 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+#pragma once\n+\n+#include \"btree_lockable_map.h\"\n+#include <memory>\n+#include <vector>\n+\n+namespace storage::bucketdb {\n+\n+// Bucket database implementation that stripes all superbuckets across", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0ODQwMg=="}, "originalCommit": {"oid": "20a572948405232c4fd5b74360c667e29058d2f8"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjc4MTI0OnYy", "diffSide": "RIGHT", "path": "storage/src/vespa/storage/bucketdb/striped_btree_lockable_map.hpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTo0NTowOVrOHr89zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTo1NTo0MlrOHr9XSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0OTY3OA==", "bodyText": "I think we can remove this.", "url": "https://github.com/vespa-engine/vespa/pull/15116#discussion_r515849678", "createdAt": "2020-11-02T09:45:09Z", "author": {"login": "geirst"}, "path": "storage/src/vespa/storage/bucketdb/striped_btree_lockable_map.hpp", "diffHunk": "@@ -0,0 +1,315 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+#pragma once\n+\n+#include \"striped_btree_lockable_map.h\"\n+#include \"btree_lockable_map.hpp\"\n+#include <algorithm>\n+#include <cassert>\n+#include <queue>\n+\n+namespace storage::bucketdb {\n+\n+namespace {\n+\n+constexpr uint8_t used_bits_of(uint64_t key) noexcept {\n+    return static_cast<uint8_t>(key & 0b11'1111ULL);\n+}\n+\n+}\n+\n+// TODO rename to sharded_btree_lockable_map instead?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a572948405232c4fd5b74360c667e29058d2f8"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1NjIwMg==", "bodyText": "Already removed in a subsequent commit \ud83d\ude42", "url": "https://github.com/vespa-engine/vespa/pull/15116#discussion_r515856202", "createdAt": "2020-11-02T09:55:42Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/bucketdb/striped_btree_lockable_map.hpp", "diffHunk": "@@ -0,0 +1,315 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+#pragma once\n+\n+#include \"striped_btree_lockable_map.h\"\n+#include \"btree_lockable_map.hpp\"\n+#include <algorithm>\n+#include <cassert>\n+#include <queue>\n+\n+namespace storage::bucketdb {\n+\n+namespace {\n+\n+constexpr uint8_t used_bits_of(uint64_t key) noexcept {\n+    return static_cast<uint8_t>(key & 0b11'1111ULL);\n+}\n+\n+}\n+\n+// TODO rename to sharded_btree_lockable_map instead?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0OTY3OA=="}, "originalCommit": {"oid": "20a572948405232c4fd5b74360c667e29058d2f8"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjgwOTcxOnYy", "diffSide": "RIGHT", "path": "storage/src/vespa/storage/common/content_bucket_db_options.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTo1MjowN1rOHr9Oyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMDowODowNVrOHr90MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1NDAyNw==", "bodyText": "Nitpick: Consider using /** */ instead.", "url": "https://github.com/vespa-engine/vespa/pull/15116#discussion_r515854027", "createdAt": "2020-11-02T09:52:07Z", "author": {"login": "geirst"}, "path": "storage/src/vespa/storage/common/content_bucket_db_options.h", "diffHunk": "@@ -0,0 +1,16 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+#pragma once\n+\n+#include <cstdint>\n+\n+namespace storage {\n+\n+// Type-safe encapsulation of any options that can be passed from config", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d917736806d1e69b0b662657b5ab09e1bc5b904"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg2MzYwMA==", "bodyText": "Done", "url": "https://github.com/vespa-engine/vespa/pull/15116#discussion_r515863600", "createdAt": "2020-11-02T10:08:05Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/common/content_bucket_db_options.h", "diffHunk": "@@ -0,0 +1,16 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+#pragma once\n+\n+#include <cstdint>\n+\n+namespace storage {\n+\n+// Type-safe encapsulation of any options that can be passed from config", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1NDAyNw=="}, "originalCommit": {"oid": "6d917736806d1e69b0b662657b5ab09e1bc5b904"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzA3NjA0OnYy", "diffSide": "RIGHT", "path": "storage/src/vespa/storage/bucketdb/striped_btree_lockable_map.hpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMTowMToyNVrOHr_ukQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMjowODowM1rOHsBxhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5NDkyOQ==", "bodyText": "This might not work as intended if _n_stripe_bits is 0.", "url": "https://github.com/vespa-engine/vespa/pull/15116#discussion_r515894929", "createdAt": "2020-11-02T11:01:25Z", "author": {"login": "toregge"}, "path": "storage/src/vespa/storage/bucketdb/striped_btree_lockable_map.hpp", "diffHunk": "@@ -0,0 +1,313 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+#pragma once\n+\n+#include \"striped_btree_lockable_map.h\"\n+#include \"btree_lockable_map.hpp\"\n+#include <algorithm>\n+#include <cassert>\n+#include <queue>\n+\n+namespace storage::bucketdb {\n+\n+namespace {\n+\n+constexpr uint8_t used_bits_of(uint64_t key) noexcept {\n+    return static_cast<uint8_t>(key & 0b11'1111ULL);\n+}\n+\n+}\n+\n+template <typename T>\n+StripedBTreeLockableMap<T>::StripedBTreeLockableMap(uint8_t n_stripe_bits)\n+    : _n_stripe_bits(n_stripe_bits),\n+      _n_stripes(1ULL << _n_stripe_bits),\n+      _stripes()\n+{\n+    assert(_n_stripe_bits > 0);\n+    assert(_n_stripe_bits <= MaxStripeBits);\n+    _stripes.reserve(_n_stripes);\n+    for (size_t i = 0; i < _n_stripes; ++i) {\n+        // TODO reduce initial sub-DB data store memory usage based on number of stripes\n+        _stripes.emplace_back(std::make_unique<BTreeLockableMap<T>>());\n+    }\n+}\n+\n+template <typename T>\n+StripedBTreeLockableMap<T>::~StripedBTreeLockableMap() = default;\n+\n+template <typename T>\n+size_t StripedBTreeLockableMap<T>::stripe_of(key_type key) const noexcept {\n+    assert(used_bits_of(key) >= _n_stripe_bits);\n+    // Since bucket keys have count-bits at the LSB positions, we want to look at the MSBs instead.\n+    return (key >> (64 - _n_stripe_bits));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fe9b99240dc82a0416608c1f92c6ab50eea5dc4"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyODQ1Mw==", "bodyText": "_n_stripe_bits is asserted to be in the range [1, 8] at construction time, so this invariant should be maintained", "url": "https://github.com/vespa-engine/vespa/pull/15116#discussion_r515928453", "createdAt": "2020-11-02T12:08:03Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/bucketdb/striped_btree_lockable_map.hpp", "diffHunk": "@@ -0,0 +1,313 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+#pragma once\n+\n+#include \"striped_btree_lockable_map.h\"\n+#include \"btree_lockable_map.hpp\"\n+#include <algorithm>\n+#include <cassert>\n+#include <queue>\n+\n+namespace storage::bucketdb {\n+\n+namespace {\n+\n+constexpr uint8_t used_bits_of(uint64_t key) noexcept {\n+    return static_cast<uint8_t>(key & 0b11'1111ULL);\n+}\n+\n+}\n+\n+template <typename T>\n+StripedBTreeLockableMap<T>::StripedBTreeLockableMap(uint8_t n_stripe_bits)\n+    : _n_stripe_bits(n_stripe_bits),\n+      _n_stripes(1ULL << _n_stripe_bits),\n+      _stripes()\n+{\n+    assert(_n_stripe_bits > 0);\n+    assert(_n_stripe_bits <= MaxStripeBits);\n+    _stripes.reserve(_n_stripes);\n+    for (size_t i = 0; i < _n_stripes; ++i) {\n+        // TODO reduce initial sub-DB data store memory usage based on number of stripes\n+        _stripes.emplace_back(std::make_unique<BTreeLockableMap<T>>());\n+    }\n+}\n+\n+template <typename T>\n+StripedBTreeLockableMap<T>::~StripedBTreeLockableMap() = default;\n+\n+template <typename T>\n+size_t StripedBTreeLockableMap<T>::stripe_of(key_type key) const noexcept {\n+    assert(used_bits_of(key) >= _n_stripe_bits);\n+    // Since bucket keys have count-bits at the LSB positions, we want to look at the MSBs instead.\n+    return (key >> (64 - _n_stripe_bits));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg5NDkyOQ=="}, "originalCommit": {"oid": "7fe9b99240dc82a0416608c1f92c6ab50eea5dc4"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1070, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}