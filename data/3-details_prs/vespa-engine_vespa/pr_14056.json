{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4NDM0MDg4", "number": 14056, "title": "Arnej/set rawscore for locations", "bodyText": "I confirm that this contribution is made under the terms of the license found in the root directory of this repository's source tree and that I have the authority necessary to make this contribution on behalf of its copyright owner.\n@havardpe please review\n@toregge FYI\ni believe we can remove the old iterator afterwards.", "createdAt": "2020-08-16T11:42:24Z", "url": "https://github.com/vespa-engine/vespa/pull/14056", "merged": true, "mergeCommit": {"oid": "ef6227ebc92c625081f703a806e0b0c2c02a5a1c"}, "closed": true, "closedAt": "2020-08-18T08:00:03Z", "author": {"login": "arnej27959"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc_cM5CAH2gAyNDY4NDM0MDg4OmE0ZGI5OWY5ZDEzMDIxY2I0MzcyZTQ1ZmJjZGRiMDQ1Mjk0ZGQxZTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc_0gdrAFqTQ2ODU4ODc5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a4db99f9d13021cb4372e45fbcddb045294dd1e6", "author": {"user": {"login": "arnej27959", "name": "Arne H Juul"}}, "url": "https://github.com/vespa-engine/vespa/commit/a4db99f9d13021cb4372e45fbcddb045294dd1e6", "committedDate": "2020-08-16T11:34:44Z", "message": "add modern location iterator that can set rawscore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd5676ce345feecf1bbc04b962954b26e84a03e1", "author": {"user": {"login": "arnej27959", "name": "Arne H Juul"}}, "url": "https://github.com/vespa-engine/vespa/commit/bd5676ce345feecf1bbc04b962954b26e84a03e1", "committedDate": "2020-08-16T11:40:42Z", "message": "wire in new iterator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MzQ1ODI1", "url": "https://github.com/vespa-engine/vespa/pull/14056#pullrequestreview-468345825", "createdAt": "2020-08-17T10:26:57Z", "commit": {"oid": "bd5676ce345feecf1bbc04b962954b26e84a03e1"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMDoyNjo1OFrOHBjIlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMDozMDowMVrOHBjO8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM4NjI2Mg==", "bodyText": "consider while loop for more robustness", "url": "https://github.com/vespa-engine/vespa/pull/14056#discussion_r471386262", "createdAt": "2020-08-17T10:26:58Z", "author": {"login": "havardpe"}, "path": "searchlib/src/vespa/searchlib/common/locationiterators.cpp", "diffHunk": "@@ -7,6 +7,106 @@\n #include <vespa/log/log.h>\n LOG_SETUP(\".searchlib.common.locationiterators\");\n \n+namespace search::common {\n+\n+class LocationIterator : public search::queryeval::SearchIterator\n+{\n+private:\n+    static constexpr double pi = 3.14159265358979323846;\n+    // microdegrees -> degrees -> radians -> km (using Earth mean radius)\n+    static constexpr double udeg_to_km = 1.0e-6 * (pi / 180.0) * 6371.0088;\n+    search::fef::TermFieldMatchData & _tfmd;\n+    const unsigned int _numDocs;\n+    const bool         _strict;\n+    const Location &   _location;\n+    std::vector<search::AttributeVector::largeint_t> _pos;\n+\n+    void doSeek(uint32_t docId) override;\n+    void doUnpack(uint32_t docId) override;\n+public:\n+    LocationIterator(search::fef::TermFieldMatchData &tfmd,\n+                     unsigned int numDocs,\n+                     bool strict,\n+                     const Location & location);\n+    ~LocationIterator() override;\n+};\n+\n+LocationIterator::LocationIterator(search::fef::TermFieldMatchData &tfmd,\n+                                   unsigned int numDocs,\n+                                   bool strict,\n+                                   const Location & location)\n+  : SearchIterator(),\n+    _tfmd(tfmd),\n+    _numDocs(numDocs),\n+    _strict(strict),\n+    _location(location),\n+    _pos()\n+{\n+    _pos.resize(1);  //Need at least 1 entry as the singlevalue attributes does not honour given size.\n+    LOG(debug, \"created LocationIterator(numDocs=%u)\\n\", numDocs);\n+};\n+\n+\n+LocationIterator::~LocationIterator() = default;\n+\n+void\n+LocationIterator::doSeek(uint32_t docId)\n+{\n+    while (__builtin_expect(docId < getEndId(), true)) {\n+        if (__builtin_expect(docId >= _numDocs, false)) {\n+            break;\n+        }\n+        uint32_t numValues = _location.getVec()->get(docId, &_pos[0], _pos.size());\n+        if (numValues > _pos.size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd5676ce345feecf1bbc04b962954b26e84a03e1"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM4Nzg4OQ==", "bodyText": "should probably use already fetched values here", "url": "https://github.com/vespa-engine/vespa/pull/14056#discussion_r471387889", "createdAt": "2020-08-17T10:30:01Z", "author": {"login": "havardpe"}, "path": "searchlib/src/vespa/searchlib/common/locationiterators.cpp", "diffHunk": "@@ -7,6 +7,106 @@\n #include <vespa/log/log.h>\n LOG_SETUP(\".searchlib.common.locationiterators\");\n \n+namespace search::common {\n+\n+class LocationIterator : public search::queryeval::SearchIterator\n+{\n+private:\n+    static constexpr double pi = 3.14159265358979323846;\n+    // microdegrees -> degrees -> radians -> km (using Earth mean radius)\n+    static constexpr double udeg_to_km = 1.0e-6 * (pi / 180.0) * 6371.0088;\n+    search::fef::TermFieldMatchData & _tfmd;\n+    const unsigned int _numDocs;\n+    const bool         _strict;\n+    const Location &   _location;\n+    std::vector<search::AttributeVector::largeint_t> _pos;\n+\n+    void doSeek(uint32_t docId) override;\n+    void doUnpack(uint32_t docId) override;\n+public:\n+    LocationIterator(search::fef::TermFieldMatchData &tfmd,\n+                     unsigned int numDocs,\n+                     bool strict,\n+                     const Location & location);\n+    ~LocationIterator() override;\n+};\n+\n+LocationIterator::LocationIterator(search::fef::TermFieldMatchData &tfmd,\n+                                   unsigned int numDocs,\n+                                   bool strict,\n+                                   const Location & location)\n+  : SearchIterator(),\n+    _tfmd(tfmd),\n+    _numDocs(numDocs),\n+    _strict(strict),\n+    _location(location),\n+    _pos()\n+{\n+    _pos.resize(1);  //Need at least 1 entry as the singlevalue attributes does not honour given size.\n+    LOG(debug, \"created LocationIterator(numDocs=%u)\\n\", numDocs);\n+};\n+\n+\n+LocationIterator::~LocationIterator() = default;\n+\n+void\n+LocationIterator::doSeek(uint32_t docId)\n+{\n+    while (__builtin_expect(docId < getEndId(), true)) {\n+        if (__builtin_expect(docId >= _numDocs, false)) {\n+            break;\n+        }\n+        uint32_t numValues = _location.getVec()->get(docId, &_pos[0], _pos.size());\n+        if (numValues > _pos.size()) {\n+            _pos.resize(numValues);\n+            numValues = _location.getVec()->get(docId, &_pos[0], _pos.size());\n+        }\n+        for (uint32_t i = 0; i < numValues; i++) {\n+            int64_t docxy(_pos[i]);\n+            if (_location.inside_limit(docxy)) {\n+                setDocId(docId);\n+                return;\n+            }\n+        }\n+        if (!_strict) {\n+            return;\n+        }\n+        ++docId;\n+    }\n+    setAtEnd();\n+}\n+\n+void\n+LocationIterator::doUnpack(uint32_t docId)\n+{\n+    uint64_t sqabsdist = std::numeric_limits<uint64_t>::max();\n+    int32_t docx = 0;\n+    int32_t docy = 0;\n+    uint32_t numValues = _location.getVec()->get(docId, &_pos[0], _pos.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd5676ce345feecf1bbc04b962954b26e84a03e1"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71387f83fbcfe1353f328c66024924d03fba3ca3", "author": {"user": {"login": "arnej27959", "name": "Arne H Juul"}}, "url": "https://github.com/vespa-engine/vespa/commit/71387f83fbcfe1353f328c66024924d03fba3ca3", "committedDate": "2020-08-17T11:09:14Z", "message": "re-use fetched values in unpack"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4NTg4Nzk0", "url": "https://github.com/vespa-engine/vespa/pull/14056#pullrequestreview-468588794", "createdAt": "2020-08-17T15:53:50Z", "commit": {"oid": "71387f83fbcfe1353f328c66024924d03fba3ca3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4497, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}