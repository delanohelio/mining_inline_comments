{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1MzMzMjE4", "number": 11875, "title": "Bratseth/node metrics", "bodyText": "", "createdAt": "2020-01-21T14:26:42Z", "url": "https://github.com/vespa-engine/vespa/pull/11875", "merged": true, "mergeCommit": {"oid": "a4d88fd39aca7ee78eaa8001a73f6d88c30227de"}, "closed": true, "closedAt": "2020-02-26T12:39:53Z", "author": {"login": "bratseth"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8f0tggH2gAyMzY1MzMzMjE4OmJkNjU0NzNiNWM1NmJhYThjMmVhZmY1NTRmMzJlYjk1ZTczMzdmZTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIGA9IgH2gAyMzY1MzMzMjE4OjdjYjhmYWVkMGIyMTk4MTQ4NTY3YTcwZTJiMDUwNTYyYjllYTRhNWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bd65473b5c56baa8c2eaff554f32eb95e7337fe6", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/bd65473b5c56baa8c2eaff554f32eb95e7337fe6", "committedDate": "2020-01-21T11:55:01Z", "message": "Non-functional changes only"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01bde367c9ef90f17c35456332cd9f970a1d6608", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/01bde367c9ef90f17c35456332cd9f970a1d6608", "committedDate": "2020-01-21T14:24:19Z", "message": "Autoscaling sketch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdd4b70d5eecc7e79910e4ba52a89b8ede85098d", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/bdd4b70d5eecc7e79910e4ba52a89b8ede85098d", "committedDate": "2020-01-27T13:15:45Z", "message": "Autoscaling WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f618fc6244ef24577a5121537ee2b1ac8baf3be", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/8f618fc6244ef24577a5121537ee2b1ac8baf3be", "committedDate": "2020-02-17T09:57:08Z", "message": "Autoscaling WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6879ebfed3931378481c89cc2d93832337f2f0fa", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/6879ebfed3931378481c89cc2d93832337f2f0fa", "committedDate": "2020-02-17T16:29:37Z", "message": "Autoscaling WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cd74bff014b8bf923b5f9b9bb5c42dcdb1eb73b", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/4cd74bff014b8bf923b5f9b9bb5c42dcdb1eb73b", "committedDate": "2020-02-18T13:19:48Z", "message": "Autoscaling test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8193e3167e2fba9498ad23161f7a473b666790f9", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/8193e3167e2fba9498ad23161f7a473b666790f9", "committedDate": "2020-02-18T13:47:24Z", "message": "Extract test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a81ebfa954d0450063c3fb4e891950ed95a1a5f", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/1a81ebfa954d0450063c3fb4e891950ed95a1a5f", "committedDate": "2020-02-18T13:57:39Z", "message": "Test scaling back down"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6d5dcff1becb08fb86dcc7ed0f387bf8bd249d0", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/c6d5dcff1becb08fb86dcc7ed0f387bf8bd249d0", "committedDate": "2020-02-18T16:25:37Z", "message": "Don't make small changes, don't autoscale when in flux"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ced3bce5965daddd53e5ae41f8e37310caa8e6a1", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/ced3bce5965daddd53e5ae41f8e37310caa8e6a1", "committedDate": "2020-02-19T11:37:21Z", "message": "Handle grouped clusters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2449a3e66075e7d680263a204302e83b5ba0148", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/d2449a3e66075e7d680263a204302e83b5ba0148", "committedDate": "2020-02-19T11:54:07Z", "message": "Move redundancy consideration inside iterator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5acf4c47e98674cdf73289a782dfda9da7041ead", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/5acf4c47e98674cdf73289a782dfda9da7041ead", "committedDate": "2020-02-20T08:42:19Z", "message": "Merge branch 'master' into bratseth/node-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfa6cd39c6f274b78ec66f97991a56022cc12dc5", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/cfa6cd39c6f274b78ec66f97991a56022cc12dc5", "committedDate": "2020-02-20T22:24:35Z", "message": "Test autoscaling with dynamic provisioning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6584a5218e87563c0a75d4a1be185911d32504b2", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/6584a5218e87563c0a75d4a1be185911d32504b2", "committedDate": "2020-02-21T08:58:09Z", "message": "Parametrize measured resource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f47e13cfeaecf5f1152e3cadbd2362e618d54b63", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/f47e13cfeaecf5f1152e3cadbd2362e618d54b63", "committedDate": "2020-02-21T09:56:07Z", "message": "Test with memory driven rescaling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6a4ebcbb5601874645d48a0ce7a5fe6ee75e850", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/e6a4ebcbb5601874645d48a0ce7a5fe6ee75e850", "committedDate": "2020-02-21T10:23:53Z", "message": "Test correction for AWS memory overhead"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f59d6eecab357b941bf1a731c2ef8d49d78cbcdf", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/f59d6eecab357b941bf1a731c2ef8d49d78cbcdf", "committedDate": "2020-02-21T11:42:52Z", "message": "Stay within lower node resource limits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d08d041bf1612b8f5c9ab2d9823237de11fe2c8e", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/d08d041bf1612b8f5c9ab2d9823237de11fe2c8e", "committedDate": "2020-02-21T16:15:14Z", "message": "Account for fixed cost portion of query cost"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4f90bfade6d624f2994c2898a300926dccec3f8", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/c4f90bfade6d624f2994c2898a300926dccec3f8", "committedDate": "2020-02-22T09:47:33Z", "message": "Use load, not total"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b3715915018cee778f4da2a8cbbbd47c1c500e4", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/7b3715915018cee778f4da2a8cbbbd47c1c500e4", "committedDate": "2020-02-22T10:04:27Z", "message": "Scale correctly with multiple groups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f4145f4a2863dc48d997dea72137cb76c60a3a4", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/8f4145f4a2863dc48d997dea72137cb76c60a3a4", "committedDate": "2020-02-22T11:59:27Z", "message": "Test nodemetricsdb"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "718b7a22f1fe96ca955a5b851143c505bf68dac3", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/718b7a22f1fe96ca955a5b851143c505bf68dac3", "committedDate": "2020-02-22T13:24:03Z", "message": "Share autoscale work between config servers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b3dceee95d17c5693aa65e248f16b880d9cde2f", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/6b3dceee95d17c5693aa65e248f16b880d9cde2f", "committedDate": "2020-02-22T13:37:12Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "183932251bc69f6554d5a5e6a61b6d83d0ad4dd8", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/183932251bc69f6554d5a5e6a61b6d83d0ad4dd8", "committedDate": "2020-02-24T12:50:54Z", "message": "Parse metrics/v2 response and store in batch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7391d147691f8a907f9beb2c2659d57a352de80c", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/7391d147691f8a907f9beb2c2659d57a352de80c", "committedDate": "2020-02-24T13:41:44Z", "message": "Use correct metric output names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d06558911d8194da799a630d1b55abfae8ab836b", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/d06558911d8194da799a630d1b55abfae8ab836b", "committedDate": "2020-02-25T08:53:10Z", "message": "Fetch metrics from a container"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10ea450497cdf53298b539ba4996df134e7d9da6", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/10ea450497cdf53298b539ba4996df134e7d9da6", "committedDate": "2020-02-25T12:17:42Z", "message": "Test metrics fetch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58ccc5ac198042ac8b64647b3d2d9121d571860d", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/58ccc5ac198042ac8b64647b3d2d9121d571860d", "committedDate": "2020-02-25T14:02:25Z", "message": "Update copyright header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "035651fade6aba9bdcfdcd43d52e01f9c42382a9", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/035651fade6aba9bdcfdcd43d52e01f9c42382a9", "committedDate": "2020-02-25T14:07:53Z", "message": "Merge branch 'master' into bratseth/node-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a54b2bbceb9604023259e404472ec08fa9ca885e", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/a54b2bbceb9604023259e404472ec08fa9ca885e", "committedDate": "2020-02-25T15:19:33Z", "message": "Merge branch 'master' into bratseth/node-metrics"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NDUxNDA0", "url": "https://github.com/vespa-engine/vespa/pull/11875#pullrequestreview-364451404", "createdAt": "2020-02-25T21:12:42Z", "commit": {"oid": "a54b2bbceb9604023259e404472ec08fa9ca885e"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMToxMjo0MlrOFuVXUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMjowMTowN1rOFuo52g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEyODg1MA==", "bodyText": "@author", "url": "https://github.com/vespa-engine/vespa/pull/11875#discussion_r384128850", "createdAt": "2020-02-25T21:12:42Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/NodeMetricsDbMaintainer.java", "diffHunk": "@@ -0,0 +1,47 @@\n+// Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.hosted.provision.maintenance;\n+\n+import com.yahoo.config.provision.ApplicationId;\n+import com.yahoo.vespa.hosted.provision.autoscale.NodeMetrics;\n+import com.yahoo.vespa.hosted.provision.NodeRepository;\n+import com.yahoo.vespa.hosted.provision.autoscale.NodeMetricsDb;\n+\n+import java.time.Duration;\n+import java.util.logging.Level;\n+\n+/**\n+ * Maintainer which keeps the node metric db up to date by periodically fetching metrics from all\n+ * active nodes.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a54b2bbceb9604023259e404472ec08fa9ca885e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzNTUwMw==", "bodyText": "Compare the actual object instead? (Otherwise you should at least format the float with locale)", "url": "https://github.com/vespa-engine/vespa/pull/11875#discussion_r384135503", "createdAt": "2020-02-25T21:26:11Z", "author": {"login": "freva"}, "path": "node-repository/src/test/java/com/yahoo/vespa/hosted/provision/autoscale/NodeMetricsFetcherTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.hosted.provision.autoscale;\n+\n+import com.yahoo.config.provision.ApplicationId;\n+import com.yahoo.config.provision.Capacity;\n+import com.yahoo.config.provision.NodeResources;\n+import com.yahoo.vespa.hosted.provision.provisioning.ProvisioningTester;\n+import com.yahoo.vespa.hosted.provision.testutils.OrchestratorMock;\n+import com.yahoo.vespa.applicationmodel.HostName;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class NodeMetricsFetcherTest {\n+\n+    @Test\n+    public void testMetricsFetch() {\n+        NodeResources resources = new NodeResources(1, 10, 100, 1);\n+        ProvisioningTester tester = new ProvisioningTester.Builder().build();\n+        OrchestratorMock orchestrator = new OrchestratorMock();\n+        MockHttpClient httpClient = new MockHttpClient();\n+        NodeMetricsFetcher fetcher = new NodeMetricsFetcher(tester.nodeRepository(), orchestrator, httpClient);\n+\n+        tester.makeReadyNodes(4, resources); // Creates (in order) host-1.yahoo.com, host-2.yahoo.com, host-3.yahoo.com, host-4.yahoo.com\n+        tester.deployZoneApp();\n+\n+        ApplicationId application1 = tester.makeApplicationId();\n+        ApplicationId application2 = tester.makeApplicationId();\n+        tester.deploy(application1, Capacity.fromCount(2, resources)); // host-1.yahoo.com, host-2.yahoo.com\n+        tester.deploy(application2, Capacity.fromCount(2, resources)); // host-4.yahoo.com, host-3.yahoo.com\n+\n+        orchestrator.suspend(new HostName(\"host-4.yahoo.com\"));\n+\n+        {\n+            httpClient.cannedResponse = cannedResponseForApplication1;\n+            List<NodeMetrics.MetricValue> values = new ArrayList<>(fetcher.fetchMetrics(application1));\n+            assertEquals(\"http://host-1.yahoo.com:4080/metrics/v2/values?consumer=vespa-consumer-metrics\",\n+                         httpClient.requestsReceived.get(0));\n+            assertEquals(5, values.size());\n+            assertEquals(\"metric value cpu.util: 16.2 at 1234 for host-1.yahoo.com\", values.get(0).toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a54b2bbceb9604023259e404472ec08fa9ca885e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE0MjQ2Mg==", "bodyText": "Consider using LinkedList/Deque for this", "url": "https://github.com/vespa-engine/vespa/pull/11875#discussion_r384142462", "createdAt": "2020-02-25T21:40:29Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/autoscale/NodeMetricsDb.java", "diffHunk": "@@ -0,0 +1,179 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.hosted.provision.autoscale;\n+\n+import java.time.Clock;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * An in-memory time-series \"database\" of node metrics.\n+ * Thread model: One writer, many readers.\n+ *\n+ * @author bratseth\n+ */\n+public class NodeMetricsDb {\n+\n+    private static final Duration dbWindow = Duration.ofHours(24);\n+\n+    /** Measurements by key. Each list of measurements is sorted by increasing timestamp */\n+    private Map<MeasurementKey, List<Measurement>> db = new HashMap<>();\n+\n+    /** Lock all access for now since we modify lists inside a map */\n+    private final Object lock = new Object();\n+\n+    /** Add a measurement to this */\n+    public void add(Collection<NodeMetrics.MetricValue> metricValues) {\n+        synchronized (lock) {\n+            for (var value : metricValues) {\n+                List<Measurement> measurements = db.computeIfAbsent(new MeasurementKey(value.hostname(),\n+                                                                                       Resource.fromMetric(value.name())),\n+                                                                    (__) -> new ArrayList<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a54b2bbceb9604023259e404472ec08fa9ca885e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2ODc0MQ==", "bodyText": "Why is this 32? It should be 30... I think you are missing brackets in\n\n  \n    \n      vespa/node-repository/src/main/java/com/yahoo/vespa/hosted/provision/autoscale/NodeMetricsDb.java\n    \n    \n         Line 86\n      in\n      a54b2bb\n    \n    \n    \n    \n\n        \n          \n           int measurementsInWindow = measurements.size() - largestIndexOutsideWindow(measurements) + 1; \n        \n    \n  \n\n\nThough I think the stream version is much easier to read:\nreturn (int) keys.stream()\n        .map(db::get)\n        .flatMap(measurements -> measurements == null ? Stream.empty() : measurements.stream())\n        .filter(measurement -> measurement.timestamp >= startTime)\n        .count();", "url": "https://github.com/vespa-engine/vespa/pull/11875#discussion_r384168741", "createdAt": "2020-02-25T22:36:18Z", "author": {"login": "freva"}, "path": "node-repository/src/test/java/com/yahoo/vespa/hosted/provision/autoscale/NodeMetricsDbTest.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.hosted.provision.autoscale;\n+\n+import com.yahoo.test.ManualClock;\n+import org.junit.Test;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class NodeMetricsDbTest {\n+\n+    @Test\n+    public void testNodeMetricsDb() {\n+        ManualClock clock = new ManualClock();\n+        NodeMetricsDb db = new NodeMetricsDb();\n+        List<NodeMetrics.MetricValue> values = new ArrayList<>();\n+        for (int i = 0; i < 40; i++) {\n+            values.add(new NodeMetrics.MetricValue(\"host0\", \"cpu.util\", clock.instant().toEpochMilli(), 0.9f));\n+            clock.advance(Duration.ofHours(1));\n+        }\n+        db.add(values);\n+\n+        assertEquals(32, db.getWindow(clock.instant().minus(Duration.ofHours(30)), Resource.cpu,    List.of(\"host0\")).measurementCount());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a54b2bbceb9604023259e404472ec08fa9ca885e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM4MjM5NA==", "bodyText": "AWS flavors with remote disk are configured with 16 TB disk (EBS max), so this will basically never match. You need to find a host flavor that has same vcpu, memory, storage type and disk speed, then copy disk size from cluster resources. For reference, host provisioner will throw if no AWS flavor satisfies this:\nprivate boolean satisfies(Flavor flavor, NodeResources requestedResources) {\n    NodeResources hostResources = hostResourcesCalculator.availableCapacityOf(flavor.name(), flavor.resources());\n    if (hostResources.storageType() == NodeResources.StorageType.remote) // Then any disk size will work\n        hostResources = hostResources.withDiskGb(requestedResources.diskGb());\n\n    return hostResources.withBandwidthGbps(requestedResources.bandwidthGbps())\n            .compatibleWith(requestedResources);\n}", "url": "https://github.com/vespa-engine/vespa/pull/11875#discussion_r384382394", "createdAt": "2020-02-26T09:51:46Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/autoscale/Autoscaler.java", "diffHunk": "@@ -0,0 +1,187 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.hosted.provision.autoscale;\n+\n+import com.yahoo.config.provision.ApplicationId;\n+import com.yahoo.config.provision.CloudName;\n+import com.yahoo.config.provision.ClusterSpec;\n+import com.yahoo.config.provision.Flavor;\n+import com.yahoo.config.provision.NodeResources;\n+import com.yahoo.vespa.hosted.provision.Node;\n+import com.yahoo.vespa.hosted.provision.NodeRepository;\n+import com.yahoo.vespa.hosted.provision.provisioning.HostResourcesCalculator;\n+import com.yahoo.vespa.hosted.provision.provisioning.NodeResourceLimits;\n+\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The autoscaler makes decisions about the flavor and node count that should be allocated to a cluster\n+ * based on observed behavior.\n+ *\n+ * @author bratseth\n+ */\n+public class Autoscaler {\n+\n+    /*\n+     TODO:\n+     - X Implement node metrics fetch\n+     - X Avoid making decisions for the same app at multiple config servers\n+     - Scale group size\n+     - Have a better idea about whether we have sufficient information to make decisions\n+     - Consider taking spikes/variance into account\n+     - Measure observed regulation lag (startup+redistribution) into account when deciding regulation observation window\n+     - Test AutoscalingMaintainer\n+     - Scale by performance not just load+cost\n+     */\n+\n+    private static final int minimumMeasurements = 500; // TODO: Per node instead? Also say something about interval?\n+\n+    /** What cost difference factor warrants reallocation? */\n+    private static final double costDifferenceRatioWorthReallocation = 0.1;\n+    /** What difference factor from ideal (for any resource) warrants a change? */\n+    private static final double idealDivergenceWorthReallocation = 0.1;\n+\n+    // We only depend on the ratios between these values\n+    private static final double cpuUnitCost = 12.0;\n+    private static final double memoryUnitCost = 1.2;\n+    private static final double diskUnitCost = 0.045;\n+\n+    private final HostResourcesCalculator hostResourcesCalculator;\n+    private final NodeMetricsDb metricsDb;\n+    private final NodeRepository nodeRepository;\n+    private final NodeResourceLimits nodeResourceLimits;\n+\n+    public Autoscaler(HostResourcesCalculator hostResourcesCalculator,\n+                      NodeMetricsDb metricsDb,\n+                      NodeRepository nodeRepository) {\n+        this.hostResourcesCalculator = hostResourcesCalculator;\n+        this.metricsDb = metricsDb;\n+        this.nodeRepository = nodeRepository;\n+        this.nodeResourceLimits = new NodeResourceLimits(nodeRepository.zone());\n+    }\n+\n+    public Optional<ClusterResources> autoscale(ApplicationId applicationId, ClusterSpec cluster, List<Node> clusterNodes) {\n+        if (clusterNodes.stream().anyMatch(node -> node.status().wantToRetire() ||\n+                                                   node.allocation().get().membership().retired() ||\n+                                                   node.allocation().get().isRemovable()))\n+            return Optional.empty(); // Don't autoscale clusters that are in flux\n+        ClusterResources currentAllocation = new ClusterResources(clusterNodes);\n+        Optional<Double> cpuLoad    = averageLoad(Resource.cpu, cluster, clusterNodes);\n+        Optional<Double> memoryLoad = averageLoad(Resource.memory, cluster, clusterNodes);\n+        Optional<Double> diskLoad   = averageLoad(Resource.disk, cluster, clusterNodes);\n+        if (cpuLoad.isEmpty() || memoryLoad.isEmpty() || diskLoad.isEmpty()) return Optional.empty();\n+\n+        Optional<ClusterResourcesWithCost> bestAllocation = findBestAllocation(cpuLoad.get(),\n+                                                                               memoryLoad.get(),\n+                                                                               diskLoad.get(),\n+                                                                               currentAllocation,\n+                                                                               cluster);\n+        if (bestAllocation.isEmpty()) return Optional.empty();\n+\n+        if (closeToIdeal(Resource.cpu, cpuLoad.get()) &&\n+            closeToIdeal(Resource.memory, memoryLoad.get()) &&\n+            closeToIdeal(Resource.disk, diskLoad.get()) &&\n+            similarCost(bestAllocation.get().cost(), currentAllocation.nodes() * costOf(currentAllocation.nodeResources())))\n+            return Optional.empty(); // Avoid small, unnecessary changes\n+        return bestAllocation.map(a -> a.clusterResources());\n+    }\n+\n+    private Optional<ClusterResourcesWithCost> findBestAllocation(double cpuLoad, double memoryLoad, double diskLoad,\n+                                                                  ClusterResources currentAllocation, ClusterSpec cluster) {\n+        Optional<ClusterResourcesWithCost> bestAllocation = Optional.empty();\n+        for (ResourceIterator i = new ResourceIterator(cpuLoad, memoryLoad, diskLoad, currentAllocation); i.hasNext(); ) {\n+            ClusterResources allocation = i.next();\n+            Optional<ClusterResourcesWithCost> allocatableResources = toAllocatableResources(allocation, cluster);\n+            if (allocatableResources.isEmpty()) continue;\n+            if (bestAllocation.isEmpty() || allocatableResources.get().cost() < bestAllocation.get().cost())\n+                bestAllocation = allocatableResources;\n+        }\n+        return bestAllocation;\n+    }\n+\n+    private boolean similarCost(double cost1, double cost2) {\n+        return similar(cost1, cost2, costDifferenceRatioWorthReallocation);\n+    }\n+\n+    private boolean closeToIdeal(Resource resource, double value) {\n+        return similar(resource.idealAverageLoad(), value, idealDivergenceWorthReallocation);\n+    }\n+\n+    private boolean similar(double r1, double r2, double threshold) {\n+        return Math.abs(r1 - r2) / r1 < threshold;\n+    }\n+\n+    /**\n+     * Returns the smallest allocatable node resources larger than the given node resources,\n+     * or empty if none available.\n+     */\n+    private Optional<ClusterResourcesWithCost> toAllocatableResources(ClusterResources resources, ClusterSpec cluster) {\n+        if (allowsHostSharing(nodeRepository.zone().cloud())) {\n+            // Return the requested resources, adjusted to be legal or empty if they cannot fit on existing hosts\n+            NodeResources nodeResources = nodeResourceLimits.enlargeToLegal(resources.nodeResources(), cluster.type());\n+            for (Flavor flavor : nodeRepository.getAvailableFlavors().getFlavors())\n+                if (flavor.resources().satisfies(nodeResources))\n+                    return Optional.of(new ClusterResourcesWithCost(resources.with(nodeResources),\n+                                                                    costOf(nodeResources) * resources.nodes()));\n+            return Optional.empty();\n+        }\n+        else {\n+            // return the cheapest flavor satisfying the target resources, if any\n+            double bestCost = Double.MAX_VALUE;\n+            Optional<Flavor> bestFlavor = Optional.empty();\n+            for (Flavor flavor : nodeRepository.getAvailableFlavors().getFlavors()) {\n+                if ( ! flavor.resources().satisfies(resources.nodeResources())) continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a54b2bbceb9604023259e404472ec08fa9ca885e"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ0ODk4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // and we decide tyhe number of groups.\n          \n          \n            \n                    // and we decide the number of groups.", "url": "https://github.com/vespa-engine/vespa/pull/11875#discussion_r384448986", "createdAt": "2020-02-26T12:01:07Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/autoscale/ResourceIterator.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.hosted.provision.autoscale;\n+\n+import com.yahoo.config.provision.NodeResources;\n+\n+/**\n+ * Provides iteration over possible cluster resource allocations given a target total load\n+ * and current groups/nodes allocation.\n+ */\n+public class ResourceIterator {\n+\n+    // Configured min and max nodes TODO: These should come from the application package\n+    private static final int minimumNodesPerCluster = 3; // Since this is with redundancy it cannot be lower than 2\n+    private static final int maximumNodesPerCluster = 150;\n+\n+    // When a query is issued on a node the cost is the sum of a fixed cost component and a cost component\n+    // proportional to document count. We must account for this when comparing configurations with more or fewer nodes.\n+    // TODO: Measure this, and only take it into account with queries\n+    private static final double fixedCpuCostFraction = 0.1;\n+\n+    // Describes the observed state\n+    private final ClusterResources allocation;\n+    private final double cpuLoad;\n+    private final double memoryLoad;\n+    private final double diskLoad;\n+    private final int groupSize;\n+\n+    // Derived from the observed state\n+    private final int nodeIncrement;\n+    private final boolean singleGroupMode;\n+\n+    // Iterator state\n+    private int currentNodes;\n+\n+    public ResourceIterator(double cpuLoad, double memoryLoad, double diskLoad, ClusterResources currentAllocation) {\n+        this.cpuLoad = cpuLoad;\n+        this.memoryLoad = memoryLoad;\n+        this.diskLoad = diskLoad;\n+\n+        // ceil: If the division does not produce a whole number we assume some node is missing\n+        groupSize = (int)Math.ceil((double)currentAllocation.nodes() / currentAllocation.groups());\n+        allocation = currentAllocation;\n+\n+        // What number of nodes is it effective to add or remove at the time from this cluster?\n+        // This is the group size, since we (for now) assume the group size is decided by someone wiser than us\n+        // and we decide tyhe number of groups.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a54b2bbceb9604023259e404472ec08fa9ca885e"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ae41438327a7bf61a25deb192bb658fce36e8f6", "author": {"user": {"login": "bratseth", "name": "Jon Bratseth"}}, "url": "https://github.com/vespa-engine/vespa/commit/2ae41438327a7bf61a25deb192bb658fce36e8f6", "committedDate": "2020-02-26T12:18:45Z", "message": "Update node-repository/src/main/java/com/yahoo/vespa/hosted/provision/autoscale/ResourceIterator.java\n\nCo-Authored-By: Valerij Fredriksen <freva@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6dccbf9bf0ea25d6ca1c018d9d05ea3dedce905", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/c6dccbf9bf0ea25d6ca1c018d9d05ea3dedce905", "committedDate": "2020-02-26T12:18:47Z", "message": "Non-functional fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec86e9c675420281cbd9b0b0d950540ef1e82ebe", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/ec86e9c675420281cbd9b0b0d950540ef1e82ebe", "committedDate": "2020-02-26T12:37:02Z", "message": "Merge branch 'bratseth/node-metrics' of github.com:vespa-engine/vespa into bratseth/node-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cb8faed0b2198148567a70e2b050562b9ea4a5c", "author": {"user": {"login": "vespa-headless", "name": null}}, "url": "https://github.com/vespa-engine/vespa/commit/7cb8faed0b2198148567a70e2b050562b9ea4a5c", "committedDate": "2020-02-26T12:37:57Z", "message": "More readable code"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3964, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}