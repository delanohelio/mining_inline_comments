{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNjQ4OTY4", "number": 11814, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNDo1NTo0OVrODYh9Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNTowNTo0MlrODYiLjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDQ4NzYzOnYy", "diffSide": "RIGHT", "path": "node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/docker/DockerOperationsImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNDo1NTo0OVrOFecLAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNDo1NTo0OVrOFecLAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ2MzE3MA==", "bodyText": "Btw I think Optional.toString() works fine too (leaving out orElse()).", "url": "https://github.com/vespa-engine/vespa/pull/11814#discussion_r367463170", "createdAt": "2020-01-16T14:55:49Z", "author": {"login": "hakonhall"}, "path": "node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/docker/DockerOperationsImpl.java", "diffHunk": "@@ -120,10 +125,24 @@ public void createContainer(NodeAgentContext context, ContainerData containerDat\n         command.create();\n     }\n \n+    private static void assertEqualIpAddresses(HostName hostName, Optional<? extends InetAddress> resolvedAddress,\n+                                               Set<String> nrAddresses, IPVersion ipVersion) {\n+        Optional<InetAddress> nrAddress = nrAddresses.stream()\n+                .map(InetAddresses::forString)\n+                .filter(ipVersion::match)\n+                .findFirst();\n+        if (resolvedAddress.equals(nrAddress)) return;\n+\n+        throw new ConvergenceException(String.format(\n+                \"IP address (%s) resolved from %s  does not match IP address (%s) in node-repo\",\n+                resolvedAddress.map(InetAddresses::toAddrString).orElse(\"[none]\"), hostName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a87e61b9806e79ab5669b2a126ba0d0960a7c15"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDQ5Mzg4OnYy", "diffSide": "RIGHT", "path": "node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/docker/DockerOperationsImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNDo1NzoyOFrOFecOzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNTozNzo0MFrOFedsLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ2NDE0Mg==", "bodyText": "I'd vote for execute() instead of executeSilently().", "url": "https://github.com/vespa-engine/vespa/pull/11814#discussion_r367464142", "createdAt": "2020-01-16T14:57:28Z", "author": {"login": "hakonhall"}, "path": "node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/docker/DockerOperationsImpl.java", "diffHunk": "@@ -193,31 +212,17 @@ public ProcessResult executeCommandInContainerAsRoot(NodeAgentContext context, S\n     }\n \n     @Override\n-    public ProcessResult executeCommandInNetworkNamespace(NodeAgentContext context, String... command) {\n+    public CommandResult executeCommandInNetworkNamespace(NodeAgentContext context, String... command) {\n         int containerPid = docker.getContainer(context.containerName())\n                 .filter(container -> container.state.isRunning())\n                 .orElseThrow(() -> new RuntimeException(\n                         \"Found no running container named \" + context.containerName().asString()))\n                 .pid;\n \n-        String[] wrappedCommand = Stream.concat(Stream.of(\"nsenter\",\n-                                                          String.format(\"--net=/proc/%d/ns/net\", containerPid),\n-                                                          \"--\"),\n-                                                Stream.of(command))\n-                                        .toArray(String[]::new);\n-\n-        try {\n-            Pair<Integer, String> result = processExecuter.exec(wrappedCommand);\n-            if (result.getFirst() != 0) {\n-                throw new RuntimeException(String.format(\n-                        \"Failed to execute %s in network namespace for %s (PID = %d), exit code: %d, output: %s\",\n-                        Arrays.toString(wrappedCommand), context.containerName().asString(), containerPid, result.getFirst(), result.getSecond()));\n-            }\n-            return new ProcessResult(0, result.getSecond(), \"\");\n-        } catch (IOException e) {\n-            throw new RuntimeException(String.format(\"IOException while executing %s in network namespace for %s (PID = %d)\",\n-                    Arrays.toString(wrappedCommand), context.containerName().asString(), containerPid), e);\n-        }\n+        return terminal.newCommandLine(context)\n+                .add(\"nsenter\", String.format(\"--net=/proc/%d/ns/net\", containerPid), \"--\")\n+                .add(command)\n+                .executeSilently();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a87e61b9806e79ab5669b2a126ba0d0960a7c15"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ3MjAyNA==", "bodyText": "Not really practical at this level - this method is executed every tick to for example list the current rules to see if a modification is needed.", "url": "https://github.com/vespa-engine/vespa/pull/11814#discussion_r367472024", "createdAt": "2020-01-16T15:10:35Z", "author": {"login": "freva"}, "path": "node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/docker/DockerOperationsImpl.java", "diffHunk": "@@ -193,31 +212,17 @@ public ProcessResult executeCommandInContainerAsRoot(NodeAgentContext context, S\n     }\n \n     @Override\n-    public ProcessResult executeCommandInNetworkNamespace(NodeAgentContext context, String... command) {\n+    public CommandResult executeCommandInNetworkNamespace(NodeAgentContext context, String... command) {\n         int containerPid = docker.getContainer(context.containerName())\n                 .filter(container -> container.state.isRunning())\n                 .orElseThrow(() -> new RuntimeException(\n                         \"Found no running container named \" + context.containerName().asString()))\n                 .pid;\n \n-        String[] wrappedCommand = Stream.concat(Stream.of(\"nsenter\",\n-                                                          String.format(\"--net=/proc/%d/ns/net\", containerPid),\n-                                                          \"--\"),\n-                                                Stream.of(command))\n-                                        .toArray(String[]::new);\n-\n-        try {\n-            Pair<Integer, String> result = processExecuter.exec(wrappedCommand);\n-            if (result.getFirst() != 0) {\n-                throw new RuntimeException(String.format(\n-                        \"Failed to execute %s in network namespace for %s (PID = %d), exit code: %d, output: %s\",\n-                        Arrays.toString(wrappedCommand), context.containerName().asString(), containerPid, result.getFirst(), result.getSecond()));\n-            }\n-            return new ProcessResult(0, result.getSecond(), \"\");\n-        } catch (IOException e) {\n-            throw new RuntimeException(String.format(\"IOException while executing %s in network namespace for %s (PID = %d)\",\n-                    Arrays.toString(wrappedCommand), context.containerName().asString(), containerPid), e);\n-        }\n+        return terminal.newCommandLine(context)\n+                .add(\"nsenter\", String.format(\"--net=/proc/%d/ns/net\", containerPid), \"--\")\n+                .add(command)\n+                .executeSilently();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ2NDE0Mg=="}, "originalCommit": {"oid": "9a87e61b9806e79ab5669b2a126ba0d0960a7c15"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ4ODA0Ng==", "bodyText": "got it", "url": "https://github.com/vespa-engine/vespa/pull/11814#discussion_r367488046", "createdAt": "2020-01-16T15:37:40Z", "author": {"login": "hakonhall"}, "path": "node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/docker/DockerOperationsImpl.java", "diffHunk": "@@ -193,31 +212,17 @@ public ProcessResult executeCommandInContainerAsRoot(NodeAgentContext context, S\n     }\n \n     @Override\n-    public ProcessResult executeCommandInNetworkNamespace(NodeAgentContext context, String... command) {\n+    public CommandResult executeCommandInNetworkNamespace(NodeAgentContext context, String... command) {\n         int containerPid = docker.getContainer(context.containerName())\n                 .filter(container -> container.state.isRunning())\n                 .orElseThrow(() -> new RuntimeException(\n                         \"Found no running container named \" + context.containerName().asString()))\n                 .pid;\n \n-        String[] wrappedCommand = Stream.concat(Stream.of(\"nsenter\",\n-                                                          String.format(\"--net=/proc/%d/ns/net\", containerPid),\n-                                                          \"--\"),\n-                                                Stream.of(command))\n-                                        .toArray(String[]::new);\n-\n-        try {\n-            Pair<Integer, String> result = processExecuter.exec(wrappedCommand);\n-            if (result.getFirst() != 0) {\n-                throw new RuntimeException(String.format(\n-                        \"Failed to execute %s in network namespace for %s (PID = %d), exit code: %d, output: %s\",\n-                        Arrays.toString(wrappedCommand), context.containerName().asString(), containerPid, result.getFirst(), result.getSecond()));\n-            }\n-            return new ProcessResult(0, result.getSecond(), \"\");\n-        } catch (IOException e) {\n-            throw new RuntimeException(String.format(\"IOException while executing %s in network namespace for %s (PID = %d)\",\n-                    Arrays.toString(wrappedCommand), context.containerName().asString(), containerPid), e);\n-        }\n+        return terminal.newCommandLine(context)\n+                .add(\"nsenter\", String.format(\"--net=/proc/%d/ns/net\", containerPid), \"--\")\n+                .add(command)\n+                .executeSilently();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ2NDE0Mg=="}, "originalCommit": {"oid": "9a87e61b9806e79ab5669b2a126ba0d0960a7c15"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDQ5ODU5OnYy", "diffSide": "RIGHT", "path": "node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/maintenance/acl/AclMaintainer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNDo1ODo0NFrOFecR6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNDo1ODo0NFrOFecR6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ2NDkzOA==", "bodyText": "nice", "url": "https://github.com/vespa-engine/vespa/pull/11814#discussion_r367464938", "createdAt": "2020-01-16T14:58:44Z", "author": {"login": "hakonhall"}, "path": "node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/maintenance/acl/AclMaintainer.java", "diffHunk": "@@ -88,13 +85,9 @@ private boolean edit(NodeAgentContext context, String table, IPVersion ipVersion\n     }\n \n     private Supplier<List<String>> listTable(NodeAgentContext context, String table, IPVersion ipVersion) {\n-        return () -> {\n-            ProcessResult currentRulesResult =\n-                    dockerOperations.executeCommandInNetworkNamespace(context, ipVersion.iptablesCmd(), \"-S\", \"-t\", table);\n-            return Arrays.stream(currentRulesResult.getOutput().split(\"\\n\"))\n-                    .map(String::trim)\n-                    .collect(Collectors.toList());\n-        };\n+        return () -> dockerOperations\n+                .executeCommandInNetworkNamespace(context, ipVersion.iptablesCmd(), \"-S\", \"-t\", table)\n+                .mapEachLine(String::trim);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a87e61b9806e79ab5669b2a126ba0d0960a7c15"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDUyNDMwOnYy", "diffSide": "RIGHT", "path": "node-admin/src/test/java/com/yahoo/vespa/hosted/node/admin/integrationTests/DockerTester.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNTowNTo0MlrOFech4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNTozNzoxMlrOFedrMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ2OTAyNg==", "bodyText": "Why not use TestTerminal?", "url": "https://github.com/vespa-engine/vespa/pull/11814#discussion_r367469026", "createdAt": "2020-01-16T15:05:42Z", "author": {"login": "hakonhall"}, "path": "node-admin/src/test/java/com/yahoo/vespa/hosted/node/admin/integrationTests/DockerTester.java", "diffHunk": "@@ -75,8 +74,7 @@\n         ipAddresses.addAddress(HOST_HOSTNAME.value(), \"f000::\");\n         for (int i = 1; i < 4; i++) ipAddresses.addAddress(\"host\" + i + \".test.yahoo.com\", \"f000::\" + i);\n \n-        ProcessExecuter processExecuter = mock(ProcessExecuter.class);\n-        uncheck(() -> when(processExecuter.exec(any(String[].class))).thenReturn(new Pair<>(0, \"\")));\n+        TerminalImpl terminal = new TerminalImpl(command -> new TestChildProcess2(0, \"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a87e61b9806e79ab5669b2a126ba0d0960a7c15"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ3MTAxNQ==", "bodyText": "This is basically \"integration test\" for node-admin: it runs the entire node-admin, starts multiple containers which run regular ticks. There is no way to list all the expected commands here...", "url": "https://github.com/vespa-engine/vespa/pull/11814#discussion_r367471015", "createdAt": "2020-01-16T15:08:59Z", "author": {"login": "freva"}, "path": "node-admin/src/test/java/com/yahoo/vespa/hosted/node/admin/integrationTests/DockerTester.java", "diffHunk": "@@ -75,8 +74,7 @@\n         ipAddresses.addAddress(HOST_HOSTNAME.value(), \"f000::\");\n         for (int i = 1; i < 4; i++) ipAddresses.addAddress(\"host\" + i + \".test.yahoo.com\", \"f000::\" + i);\n \n-        ProcessExecuter processExecuter = mock(ProcessExecuter.class);\n-        uncheck(() -> when(processExecuter.exec(any(String[].class))).thenReturn(new Pair<>(0, \"\")));\n+        TerminalImpl terminal = new TerminalImpl(command -> new TestChildProcess2(0, \"\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ2OTAyNg=="}, "originalCommit": {"oid": "9a87e61b9806e79ab5669b2a126ba0d0960a7c15"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ4Nzc5Mg==", "bodyText": "Yes, TestTerminal needs a method that returns a given exit code & response forever. If it's non-trivial it's OK to leave as-is.", "url": "https://github.com/vespa-engine/vespa/pull/11814#discussion_r367487792", "createdAt": "2020-01-16T15:37:12Z", "author": {"login": "hakonhall"}, "path": "node-admin/src/test/java/com/yahoo/vespa/hosted/node/admin/integrationTests/DockerTester.java", "diffHunk": "@@ -75,8 +74,7 @@\n         ipAddresses.addAddress(HOST_HOSTNAME.value(), \"f000::\");\n         for (int i = 1; i < 4; i++) ipAddresses.addAddress(\"host\" + i + \".test.yahoo.com\", \"f000::\" + i);\n \n-        ProcessExecuter processExecuter = mock(ProcessExecuter.class);\n-        uncheck(() -> when(processExecuter.exec(any(String[].class))).thenReturn(new Pair<>(0, \"\")));\n+        TerminalImpl terminal = new TerminalImpl(command -> new TestChildProcess2(0, \"\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ2OTAyNg=="}, "originalCommit": {"oid": "9a87e61b9806e79ab5669b2a126ba0d0960a7c15"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2659, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}