{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNjc5MDUw", "number": 11782, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTo0NDoxNlrODYN_kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTo1Mjo0NFrODYOMTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzIxNjgzOnYy", "diffSide": "RIGHT", "path": "document/src/vespa/document/fieldvalue/document.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTo0NDoxNlrOFd8yvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDo0Mzo0MFrOFeVLPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0OTA1Mg==", "bodyText": "Is explicit toString needed since DocumentId instances are streamable? This question applies to other places where this is done in the PR", "url": "https://github.com/vespa-engine/vespa/pull/11782#discussion_r366949052", "createdAt": "2020-01-15T15:44:16Z", "author": {"login": "vekterli"}, "path": "document/src/vespa/document/fieldvalue/document.cpp", "diffHunk": "@@ -226,9 +226,9 @@ Document::print(std::ostream& out, bool verbose,\n                 const std::string& indent) const\n {\n     if (!verbose) {\n-        out << \"Document(\" << getId() << \", \" << getType() << \")\";\n+        out << \"Document(\" << getId().toString() << \", \" << getType() << \")\";\n     } else {\n-        out << \"Document(\" << getId() << \"\\n\" << indent << \"  \";\n+        out << \"Document(\" << getId().toString() << \"\\n\" << indent << \"  \";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80835efd5c385b6f8e19212a7c032e57af1fd73d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM0ODU0MA==", "bodyText": "No, cleaned usages of toString() not necessary.", "url": "https://github.com/vespa-engine/vespa/pull/11782#discussion_r367348540", "createdAt": "2020-01-16T10:43:40Z", "author": {"login": "baldersheim"}, "path": "document/src/vespa/document/fieldvalue/document.cpp", "diffHunk": "@@ -226,9 +226,9 @@ Document::print(std::ostream& out, bool verbose,\n                 const std::string& indent) const\n {\n     if (!verbose) {\n-        out << \"Document(\" << getId() << \", \" << getType() << \")\";\n+        out << \"Document(\" << getId().toString() << \", \" << getType() << \")\";\n     } else {\n-        out << \"Document(\" << getId() << \"\\n\" << indent << \"  \";\n+        out << \"Document(\" << getId().toString() << \"\\n\" << indent << \"  \";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk0OTA1Mg=="}, "originalCommit": {"oid": "80835efd5c385b6f8e19212a7c032e57af1fd73d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzI0OTQzOnYy", "diffSide": "RIGHT", "path": "document/src/vespa/document/fieldvalue/document.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNTo1Mjo0NFrOFd9HKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDo0NTowMFrOFeVNtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk1NDI4Mw==", "bodyText": "Consider adding a comment that this type must be a compatible DocumentType instance. Or perhaps move the invocation of verifyDocumentType into this function (updating VespaDocumentDeserializer::readDocument accordingly)?", "url": "https://github.com/vespa-engine/vespa/pull/11782#discussion_r366954283", "createdAt": "2020-01-15T15:52:44Z", "author": {"login": "vekterli"}, "path": "document/src/vespa/document/fieldvalue/document.h", "diffHunk": "@@ -54,11 +56,10 @@ class Document : public StructuredFieldValue\n \n     Document& operator=(const Document&);\n \n-    void swap(Document & rhs);\n-\n     void accept(FieldValueVisitor &visitor) override { visitor.visit(*this); }\n     void accept(ConstFieldValueVisitor &visitor) const override { visitor.visit(*this); }\n \n+    void setType(const DataType & type) override;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a772cb05a682fd05fabd0d571417ec7976d0165d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM0OTE3NA==", "bodyText": "I will write it behind my ear and do that in a later PR.", "url": "https://github.com/vespa-engine/vespa/pull/11782#discussion_r367349174", "createdAt": "2020-01-16T10:45:00Z", "author": {"login": "baldersheim"}, "path": "document/src/vespa/document/fieldvalue/document.h", "diffHunk": "@@ -54,11 +56,10 @@ class Document : public StructuredFieldValue\n \n     Document& operator=(const Document&);\n \n-    void swap(Document & rhs);\n-\n     void accept(FieldValueVisitor &visitor) override { visitor.visit(*this); }\n     void accept(ConstFieldValueVisitor &visitor) const override { visitor.visit(*this); }\n \n+    void setType(const DataType & type) override;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk1NDI4Mw=="}, "originalCommit": {"oid": "a772cb05a682fd05fabd0d571417ec7976d0165d"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2634, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}