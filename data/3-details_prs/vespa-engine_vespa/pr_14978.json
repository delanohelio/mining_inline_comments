{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2ODc2NDY3", "number": 14978, "title": "Bjorncs/jetty threadpool", "bodyText": "FYI @baldersheim @tokle", "createdAt": "2020-10-20T14:58:15Z", "url": "https://github.com/vespa-engine/vespa/pull/14978", "merged": true, "mergeCommit": {"oid": "5462aa495dfcfb5398666f16750917f4bd90a939"}, "closed": true, "closedAt": "2020-10-21T07:32:22Z", "author": {"login": "bjorncs"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUaDuJgH2gAyNTA2ODc2NDY3OmQyMzc5ZmI1ZGJmNTk4OTIzZjcxOTg0N2NmNzU5YWQ1NGE5MDc0N2U=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUoRiqgH2gAyNTA2ODc2NDY3OmUzZmEwY2JlYjFkNDdmN2FjMmRjYjRkY2Y5OGQwMjFmYzM1NGU5MzU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d2379fb5dbf598923f719847cf759ad54a90747e", "author": {"user": {"login": "bjorncs", "name": "Bj\u00f8rn Christian Seime"}}, "url": "https://github.com/vespa-engine/vespa/commit/d2379fb5dbf598923f719847cf759ad54a90747e", "committedDate": "2020-10-20T14:57:19Z", "message": "Increase minimum Jetty threadpool size to 16\n\nAlso add HostProvisionerWithCustomRealResource constructor setting number of vcpu."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b80f539311a6dac6629890568ab65022f907894", "author": {"user": {"login": "bjorncs", "name": "Bj\u00f8rn Christian Seime"}}, "url": "https://github.com/vespa-engine/vespa/commit/5b80f539311a6dac6629890568ab65022f907894", "committedDate": "2020-10-20T14:57:28Z", "message": "Reimplement HealthCheckProxyHandler as an asynchronous handler"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMzM5MTA2", "url": "https://github.com/vespa-engine/vespa/pull/14978#pullrequestreview-513339106", "createdAt": "2020-10-21T06:21:56Z", "commit": {"oid": "5b80f539311a6dac6629890568ab65022f907894"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNjoyMTo1N1rOHlb6mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNjoyMTo1N1rOHlb6mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxNjczMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Executor executor = Executors.newSingleThreadExecutor(new DaemonThreadFactory(\"health-check-proxy-client\"));\n          \n          \n            \n                private final Executor executor = Executors.newSingleThreadExecutor(new DaemonThreadFactory(\"health-check-proxy-client-\"));", "url": "https://github.com/vespa-engine/vespa/pull/14978#discussion_r509016730", "createdAt": "2020-10-21T06:21:57Z", "author": {"login": "jonmv"}, "path": "jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java", "diffHunk": "@@ -49,6 +53,7 @@\n \n     private static final String HEALTH_CHECK_PATH = \"/status.html\";\n \n+    private final Executor executor = Executors.newSingleThreadExecutor(new DaemonThreadFactory(\"health-check-proxy-client\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b80f539311a6dac6629890568ab65022f907894"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMzQ1MzU0", "url": "https://github.com/vespa-engine/vespa/pull/14978#pullrequestreview-513345354", "createdAt": "2020-10-21T06:33:37Z", "commit": {"oid": "5b80f539311a6dac6629890568ab65022f907894"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNjozMzozN1rOHlcNIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNjo0MDo1NFrOHlcZdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyMTQ3Mg==", "bodyText": "Super-nitty: this field could just be a local variable in the run method.", "url": "https://github.com/vespa-engine/vespa/pull/14978#discussion_r509021472", "createdAt": "2020-10-21T06:33:37Z", "author": {"login": "jonmv"}, "path": "jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java", "diffHunk": "@@ -124,21 +115,86 @@ protected void doStop() throws Exception {\n         super.doStop();\n     }\n \n+    private static class ProxyRequestTask implements Runnable {\n+\n+        final AsyncContext asyncContext;\n+        final ProxyTarget target;\n+        final HttpServletResponse servletResponse;\n+        final ServletOutputStream output;\n+\n+        ProxyRequestTask(AsyncContext asyncContext, ProxyTarget target, HttpServletResponse servletResponse, ServletOutputStream output) {\n+            this.asyncContext = asyncContext;\n+            this.target = target;\n+            this.servletResponse = servletResponse;\n+            this.output = output;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b80f539311a6dac6629890568ab65022f907894"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyNDM0Mw==", "bodyText": "I don't like the spec here. How much can you write without blocking? Generally, this should be a while loop, but since you only do a single write here, and then close, I guess this is fine.", "url": "https://github.com/vespa-engine/vespa/pull/14978#discussion_r509024343", "createdAt": "2020-10-21T06:40:18Z", "author": {"login": "jonmv"}, "path": "jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java", "diffHunk": "@@ -124,21 +115,86 @@ protected void doStop() throws Exception {\n         super.doStop();\n     }\n \n+    private static class ProxyRequestTask implements Runnable {\n+\n+        final AsyncContext asyncContext;\n+        final ProxyTarget target;\n+        final HttpServletResponse servletResponse;\n+        final ServletOutputStream output;\n+\n+        ProxyRequestTask(AsyncContext asyncContext, ProxyTarget target, HttpServletResponse servletResponse, ServletOutputStream output) {\n+            this.asyncContext = asyncContext;\n+            this.target = target;\n+            this.servletResponse = servletResponse;\n+            this.output = output;\n+        }\n+\n+        @Override\n+        public void run() {\n+            StatusResponse statusResponse = target.requestStatusHtml();\n+            servletResponse.setStatus(statusResponse.statusCode);\n+            if (statusResponse.contentType != null) {\n+                servletResponse.setHeader(\"Content-Type\", statusResponse.contentType);\n+            }\n+            output.setWriteListener(new WriteListener() {\n+                @Override\n+                public void onWritePossible() throws IOException {\n+                    if (output.isReady()) {\n+                        if (statusResponse.content != null) {\n+                            output.write(statusResponse.content);\n+                        }\n+                        asyncContext.complete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b80f539311a6dac6629890568ab65022f907894"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyNDYyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        StatusResponse statusResponse = getStatusResponse();\n          \n          \n            \n                        lastResponse = statusResponse;\n          \n          \n            \n                        return statusResponse;\n          \n          \n            \n                        return lastResponse = getStatusResponse();\n          \n      \n    \n    \n  \n\nI find this easier to read, but personal preference I guess :)", "url": "https://github.com/vespa-engine/vespa/pull/14978#discussion_r509024629", "createdAt": "2020-10-21T06:40:54Z", "author": {"login": "jonmv"}, "path": "jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java", "diffHunk": "@@ -124,21 +115,86 @@ protected void doStop() throws Exception {\n         super.doStop();\n     }\n \n+    private static class ProxyRequestTask implements Runnable {\n+\n+        final AsyncContext asyncContext;\n+        final ProxyTarget target;\n+        final HttpServletResponse servletResponse;\n+        final ServletOutputStream output;\n+\n+        ProxyRequestTask(AsyncContext asyncContext, ProxyTarget target, HttpServletResponse servletResponse, ServletOutputStream output) {\n+            this.asyncContext = asyncContext;\n+            this.target = target;\n+            this.servletResponse = servletResponse;\n+            this.output = output;\n+        }\n+\n+        @Override\n+        public void run() {\n+            StatusResponse statusResponse = target.requestStatusHtml();\n+            servletResponse.setStatus(statusResponse.statusCode);\n+            if (statusResponse.contentType != null) {\n+                servletResponse.setHeader(\"Content-Type\", statusResponse.contentType);\n+            }\n+            output.setWriteListener(new WriteListener() {\n+                @Override\n+                public void onWritePossible() throws IOException {\n+                    if (output.isReady()) {\n+                        if (statusResponse.content != null) {\n+                            output.write(statusResponse.content);\n+                        }\n+                        asyncContext.complete();\n+                    }\n+                }\n+\n+                @Override\n+                public void onError(Throwable t) {\n+                    log.log(Level.FINE, t, () -> \"Failed to write status response: \" + t.getMessage());\n+                    asyncContext.complete();\n+                }\n+            });\n+        }\n+    }\n+\n     private static class ProxyTarget implements AutoCloseable {\n         final int port;\n         final Duration timeout;\n         final SslContextFactory.Server sslContextFactory;\n         volatile CloseableHttpClient client;\n+        volatile StatusResponse lastResponse;\n \n         ProxyTarget(int port, Duration timeout, SslContextFactory.Server sslContextFactory) {\n             this.port = port;\n             this.timeout = timeout;\n             this.sslContextFactory = sslContextFactory;\n         }\n \n-        CloseableHttpResponse requestStatusHtml() throws IOException {\n-            return client()\n-                    .execute(new HttpGet(\"https://localhost:\" + port + HEALTH_CHECK_PATH));\n+        StatusResponse requestStatusHtml() {\n+            StatusResponse response = lastResponse;\n+            if (response != null && !response.isExpired()) {\n+                return response;\n+            }\n+            StatusResponse statusResponse = getStatusResponse();\n+            lastResponse = statusResponse;\n+            return statusResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b80f539311a6dac6629890568ab65022f907894"}, "originalPosition": 150}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3fa0cbeb1d47f7ac2dcb4dcf98d021fc354e935", "author": {"user": {"login": "bjorncs", "name": "Bj\u00f8rn Christian Seime"}}, "url": "https://github.com/vespa-engine/vespa/commit/e3fa0cbeb1d47f7ac2dcb4dcf98d021fc354e935", "committedDate": "2020-10-21T07:31:05Z", "message": "Add suffix in thread name. Combine return statement + assignment."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2310, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}