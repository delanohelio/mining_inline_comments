{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNTg5MzQ2", "number": 14883, "title": "vespalib::Monitor -> std:.mutex/std::condition_variable", "bodyText": "@havardpe PR", "createdAt": "2020-10-14T19:24:45Z", "url": "https://github.com/vespa-engine/vespa/pull/14883", "merged": true, "mergeCommit": {"oid": "36eb309ed6b9df96c4138fc57d3b002dd6dc6412"}, "closed": true, "closedAt": "2020-10-15T10:10:46Z", "author": {"login": "baldersheim"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSiRICgH2gAyNTAzNTg5MzQ2OmM2YjdiYTMxYTViNGYxZGY1MWMzNDU0OTg1ZDViMzgzM2Y0MjYzNWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSvdHqgFqTUwOTI0NzkwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c6b7ba31a5b4f1df51c3454985d5b3833f42635c", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/c6b7ba31a5b4f1df51c3454985d5b3833f42635c", "committedDate": "2020-10-14T19:23:21Z", "message": "vespalib::Monitor -> std:.mutex/std::condition_variable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MTc4MDA2", "url": "https://github.com/vespa-engine/vespa/pull/14883#pullrequestreview-509178006", "createdAt": "2020-10-15T09:15:32Z", "commit": {"oid": "c6b7ba31a5b4f1df51c3454985d5b3833f42635c"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOToxNTozM1rOHh-RYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOToyNzozMFrOHh-xZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4NTMxMg==", "bodyText": "prefer using new types directly in the code to avoid confusion with old concepts", "url": "https://github.com/vespa-engine/vespa/pull/14883#discussion_r505385312", "createdAt": "2020-10-15T09:15:33Z", "author": {"login": "havardpe"}, "path": "vespalib/src/vespa/vespalib/util/threadstackexecutorbase.h", "diffHunk": "@@ -35,6 +34,8 @@ class ThreadStackExecutorBase : public SyncableThreadExecutor,\n {\n public:\n     using init_fun_t = std::function<int(Runnable&)>;\n+    using LockGuard = std::unique_lock<std::mutex>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b7ba31a5b4f1df51c3454985d5b3833f42635c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4NTUzNA==", "bodyText": "same as above", "url": "https://github.com/vespa-engine/vespa/pull/14883#discussion_r505385534", "createdAt": "2020-10-15T09:15:54Z", "author": {"login": "havardpe"}, "path": "vespalib/src/vespa/vespalib/util/threadstackexecutorbase.h", "diffHunk": "@@ -35,6 +34,8 @@ class ThreadStackExecutorBase : public SyncableThreadExecutor,\n {\n public:\n     using init_fun_t = std::function<int(Runnable&)>;\n+    using LockGuard = std::unique_lock<std::mutex>;\n+    using MonitorGuard = std::unique_lock<std::mutex>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b7ba31a5b4f1df51c3454985d5b3833f42635c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4NzM4OQ==", "bodyText": "Prefer calling this one '_lock' as the other places, since a monitor is both a lock and a condition_variable", "url": "https://github.com/vespa-engine/vespa/pull/14883#discussion_r505387389", "createdAt": "2020-10-15T09:18:31Z", "author": {"login": "havardpe"}, "path": "vespalib/src/vespa/vespalib/util/threadstackexecutorbase.h", "diffHunk": "@@ -78,16 +80,20 @@ class ThreadStackExecutorBase : public SyncableThreadExecutor,\n \n     struct BlockedThread {\n         const uint32_t wait_task_count;\n-        Monitor monitor;\n+        mutable std::mutex monitor;\n+        mutable std::condition_variable cond;\n         bool blocked;\n         BlockedThread(uint32_t wait_task_count_in)\n-            : wait_task_count(wait_task_count_in), monitor(), blocked(true) {}\n+            : wait_task_count(wait_task_count_in), monitor(), cond(), blocked(true) {}\n         void wait() const;\n         void unblock();\n     };\n \n     std::unique_ptr<FastOS_ThreadPool>   _pool;\n-    Monitor                              _monitor;\n+    mutable std::mutex                   _monitor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b7ba31a5b4f1df51c3454985d5b3833f42635c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4Nzc5MQ==", "bodyText": "prefer passing this in addition to the held lock in wakeup to avoid protected fields", "url": "https://github.com/vespa-engine/vespa/pull/14883#discussion_r505387791", "createdAt": "2020-10-15T09:19:08Z", "author": {"login": "havardpe"}, "path": "vespalib/src/vespa/vespalib/util/threadstackexecutorbase.h", "diffHunk": "@@ -78,16 +80,20 @@ class ThreadStackExecutorBase : public SyncableThreadExecutor,\n \n     struct BlockedThread {\n         const uint32_t wait_task_count;\n-        Monitor monitor;\n+        mutable std::mutex monitor;\n+        mutable std::condition_variable cond;\n         bool blocked;\n         BlockedThread(uint32_t wait_task_count_in)\n-            : wait_task_count(wait_task_count_in), monitor(), blocked(true) {}\n+            : wait_task_count(wait_task_count_in), monitor(), cond(), blocked(true) {}\n         void wait() const;\n         void unblock();\n     };\n \n     std::unique_ptr<FastOS_ThreadPool>   _pool;\n-    Monitor                              _monitor;\n+    mutable std::mutex                   _monitor;\n+protected:\n+    std::condition_variable              _cond;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b7ba31a5b4f1df51c3454985d5b3833f42635c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM5MzUwOQ==", "bodyText": "prefer 'lock' over 'monitor' (lock/cond/guard seems to match what is done elsewhere in our code)", "url": "https://github.com/vespa-engine/vespa/pull/14883#discussion_r505393509", "createdAt": "2020-10-15T09:27:30Z", "author": {"login": "havardpe"}, "path": "vespalib/src/vespa/vespalib/util/threadstackexecutorbase.h", "diffHunk": "@@ -56,13 +57,14 @@ class ThreadStackExecutorBase : public SyncableThreadExecutor,\n     };\n \n     struct Worker {\n-        Monitor    monitor;\n+        std::mutex              monitor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6b7ba31a5b4f1df51c3454985d5b3833f42635c"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88232fd29c093e6609bb6cbd6df1e0dd1f1d69f5", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/88232fd29c093e6609bb6cbd6df1e0dd1f1d69f5", "committedDate": "2020-10-15T10:06:37Z", "message": "- LockGuard -> unique_lock\n- Pass cond to avoid having protected members.\n- monitor -> lock"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjQ1ODU0", "url": "https://github.com/vespa-engine/vespa/pull/14883#pullrequestreview-509245854", "createdAt": "2020-10-15T10:42:16Z", "commit": {"oid": "88232fd29c093e6609bb6cbd6df1e0dd1f1d69f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDo0MjoxN1rOHiBv5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDo0MjoxN1rOHiBv5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ0MjI3OA==", "bodyText": "this should probably also be called guard", "url": "https://github.com/vespa-engine/vespa/pull/14883#discussion_r505442278", "createdAt": "2020-10-15T10:42:17Z", "author": {"login": "havardpe"}, "path": "vespalib/src/vespa/vespalib/util/threadstackexecutorbase.cpp", "diffHunk": "@@ -72,22 +72,22 @@ ThreadStackExecutorBase::unblock_threads(const MonitorGuard &)\n void\n ThreadStackExecutorBase::assignTask(TaggedTask task, Worker &worker)\n {\n-    MonitorGuard monitor(worker.monitor);\n+    unique_lock monitor(worker.lock);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88232fd29c093e6609bb6cbd6df1e0dd1f1d69f5"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjQ2Mzg5", "url": "https://github.com/vespa-engine/vespa/pull/14883#pullrequestreview-509246389", "createdAt": "2020-10-15T10:43:02Z", "commit": {"oid": "88232fd29c093e6609bb6cbd6df1e0dd1f1d69f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDo0MzowMlrOHiBxrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDo0MzowMlrOHiBxrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ0MjczMw==", "bodyText": "and this", "url": "https://github.com/vespa-engine/vespa/pull/14883#discussion_r505442733", "createdAt": "2020-10-15T10:43:02Z", "author": {"login": "havardpe"}, "path": "vespalib/src/vespa/vespalib/util/threadstackexecutorbase.cpp", "diffHunk": "@@ -72,22 +72,22 @@ ThreadStackExecutorBase::unblock_threads(const MonitorGuard &)\n void\n ThreadStackExecutorBase::assignTask(TaggedTask task, Worker &worker)\n {\n-    MonitorGuard monitor(worker.monitor);\n+    unique_lock monitor(worker.lock);\n     worker.verify(/* idle: */ true);\n     worker.idle = false;\n     worker.task = std::move(task);\n-    monitor.signal();\n+    worker.cond.notify_one();\n }\n \n bool\n ThreadStackExecutorBase::obtainTask(Worker &worker)\n {\n     {\n-        MonitorGuard monitor(_monitor);\n+        unique_lock monitor(_lock);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88232fd29c093e6609bb6cbd6df1e0dd1f1d69f5"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjQ2NjQ2", "url": "https://github.com/vespa-engine/vespa/pull/14883#pullrequestreview-509246646", "createdAt": "2020-10-15T10:43:24Z", "commit": {"oid": "88232fd29c093e6609bb6cbd6df1e0dd1f1d69f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDo0MzoyNFrOHiByaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDo0MzoyNFrOHiByaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ0MjkyMA==", "bodyText": "and this", "url": "https://github.com/vespa-engine/vespa/pull/14883#discussion_r505442920", "createdAt": "2020-10-15T10:43:24Z", "author": {"login": "havardpe"}, "path": "vespalib/src/vespa/vespalib/util/threadstackexecutorbase.cpp", "diffHunk": "@@ -105,9 +105,9 @@ ThreadStackExecutorBase::obtainTask(Worker &worker)\n         _workers.push(&worker);\n     }\n     {\n-        MonitorGuard monitor(worker.monitor);\n+        unique_lock monitor(worker.lock);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88232fd29c093e6609bb6cbd6df1e0dd1f1d69f5"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjQ3OTA5", "url": "https://github.com/vespa-engine/vespa/pull/14883#pullrequestreview-509247909", "createdAt": "2020-10-15T10:45:12Z", "commit": {"oid": "88232fd29c093e6609bb6cbd6df1e0dd1f1d69f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDo0NToxMlrOHiB2BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDo0NToxMlrOHiB2BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ0Mzg0NA==", "bodyText": "should also initialize _cond", "url": "https://github.com/vespa-engine/vespa/pull/14883#discussion_r505443844", "createdAt": "2020-10-15T10:45:12Z", "author": {"login": "havardpe"}, "path": "vespalib/src/vespa/vespalib/util/threadstackexecutorbase.cpp", "diffHunk": "@@ -138,7 +138,7 @@ ThreadStackExecutorBase::ThreadStackExecutorBase(uint32_t stackSize,\n     : SyncableThreadExecutor(),\n       Runnable(),\n       _pool(std::make_unique<FastOS_ThreadPool>(stackSize)),\n-      _monitor(),\n+      _lock(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88232fd29c093e6609bb6cbd6df1e0dd1f1d69f5"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2402, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}