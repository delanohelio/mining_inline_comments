{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyMjAyNTU5", "number": 14839, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzozMDozMlrOEtCliA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOToxMjo0N1rOEtL4zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjYzNzUyOnYy", "diffSide": "RIGHT", "path": "storage/src/vespa/storage/common/statusmetricconsumer.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzozMDozMlrOHgm2FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDowNDowOVrOHg3T8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk1MjkxNw==", "bodyText": "Can this function be removed entirely?", "url": "https://github.com/vespa-engine/vespa/pull/14839#discussion_r503952917", "createdAt": "2020-10-13T13:30:32Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/common/statusmetricconsumer.cpp", "diffHunk": "@@ -337,17 +337,9 @@ StatusMetricConsumer::reportStatus(std::ostream& out,\n }\n \n void\n-StatusMetricConsumer::waitUntilTimeProcessed(framework::SecondTime t) const\n+StatusMetricConsumer::waitUntilTimeProcessed(framework::SecondTime ) const\n {\n-    return; // Return straight away as thread is not running now.\n-        // This is used in unit testing to wait for internal thread to have\n-        // generated snapshots. Wait aggressively and signal other thread to\n-        // make it do it quick (as it uses fake timer)\n-    vespalib::MonitorGuard sync(_waiter);\n-    while (_processedTime < t) {\n-        sync.signal();\n-        sync.wait(1);\n-    }\n+    return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8713cdec730d347e44e2eb55aafc74cbfa374e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIyMjcwNw==", "bodyText": "Yes, done", "url": "https://github.com/vespa-engine/vespa/pull/14839#discussion_r504222707", "createdAt": "2020-10-13T20:04:09Z", "author": {"login": "baldersheim"}, "path": "storage/src/vespa/storage/common/statusmetricconsumer.cpp", "diffHunk": "@@ -337,17 +337,9 @@ StatusMetricConsumer::reportStatus(std::ostream& out,\n }\n \n void\n-StatusMetricConsumer::waitUntilTimeProcessed(framework::SecondTime t) const\n+StatusMetricConsumer::waitUntilTimeProcessed(framework::SecondTime ) const\n {\n-    return; // Return straight away as thread is not running now.\n-        // This is used in unit testing to wait for internal thread to have\n-        // generated snapshots. Wait aggressively and signal other thread to\n-        // make it do it quick (as it uses fake timer)\n-    vespalib::MonitorGuard sync(_waiter);\n-    while (_processedTime < t) {\n-        sync.signal();\n-        sync.wait(1);\n-    }\n+    return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk1MjkxNw=="}, "originalCommit": {"oid": "8e8713cdec730d347e44e2eb55aafc74cbfa374e"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjgxNTU0OnYy", "diffSide": "RIGHT", "path": "storage/src/vespa/storage/frameworkimpl/thread/deadlockdetector.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDowNTo1OFrOHgojQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDoxNzoxMVrOHg3vdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4MDg2Nw==", "bodyText": "Will std::atomic of chrono types be lock-free, or will it be considered some opaque POD type that gets wrapped by spinlocks? Not that it actually matters for this component; if anything we should consider removing it since it doesn't really do much these days. If we suspect a deadlock, a pstack/gcore is likely the only reasonable course of action for forensics, not log messages or internal status pages.", "url": "https://github.com/vespa-engine/vespa/pull/14839#discussion_r503980867", "createdAt": "2020-10-13T14:05:58Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/frameworkimpl/thread/deadlockdetector.h", "diffHunk": "@@ -81,8 +79,8 @@ struct DeadLockDetector : private framework::Runnable,\n     std::condition_variable _cond;\n     bool _enableWarning;\n     bool _enableShutdown;\n-    std::atomic<uint64_t> _processSlackMs;\n-    std::atomic<uint64_t> _waitSlackMs;\n+    std::atomic<vespalib::duration> _processSlackMs;\n+    std::atomic<vespalib::duration> _waitSlackMs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8713cdec730d347e44e2eb55aafc74cbfa374e"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIyOTc0OQ==", "bodyText": "Test added, they are lock free. However I do agree on the deadlock detector. It is overly complicated. It will also have less value when we go fully async, as different threads will experience the trouble.\nWe might want to consider its right to live later on.", "url": "https://github.com/vespa-engine/vespa/pull/14839#discussion_r504229749", "createdAt": "2020-10-13T20:17:11Z", "author": {"login": "baldersheim"}, "path": "storage/src/vespa/storage/frameworkimpl/thread/deadlockdetector.h", "diffHunk": "@@ -81,8 +79,8 @@ struct DeadLockDetector : private framework::Runnable,\n     std::condition_variable _cond;\n     bool _enableWarning;\n     bool _enableShutdown;\n-    std::atomic<uint64_t> _processSlackMs;\n-    std::atomic<uint64_t> _waitSlackMs;\n+    std::atomic<vespalib::duration> _processSlackMs;\n+    std::atomic<vespalib::duration> _waitSlackMs;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4MDg2Nw=="}, "originalCommit": {"oid": "8e8713cdec730d347e44e2eb55aafc74cbfa374e"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Njg0MTUzOnYy", "diffSide": "RIGHT", "path": "storage/src/vespa/storage/persistence/filestorage/filestorhandlerimpl.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDoxMTowM1rOHgozKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDoxNzo0NFrOHg3xeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4NDkzNw==", "bodyText": "Consider bringing back lock on _pauseMonitor here since it enforces visibility of the write to _paused to the thread being woken up. Relaxed store/load does not guarantee that.", "url": "https://github.com/vespa-engine/vespa/pull/14839#discussion_r503984937", "createdAt": "2020-10-13T14:11:03Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/persistence/filestorage/filestorhandlerimpl.cpp", "diffHunk": "@@ -1347,9 +1347,8 @@ FileStorHandlerImpl::pause()\n void\n FileStorHandlerImpl::resume()\n {\n-    vespalib::MonitorGuard g(_pauseMonitor);\n     _paused.store(false, std::memory_order_relaxed);\n-    g.broadcast();\n+    _pauseCond.notify_all();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8713cdec730d347e44e2eb55aafc74cbfa374e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzMDI2NA==", "bodyText": "Done, I assumed that using atomic would ensure that.", "url": "https://github.com/vespa-engine/vespa/pull/14839#discussion_r504230264", "createdAt": "2020-10-13T20:17:44Z", "author": {"login": "baldersheim"}, "path": "storage/src/vespa/storage/persistence/filestorage/filestorhandlerimpl.cpp", "diffHunk": "@@ -1347,9 +1347,8 @@ FileStorHandlerImpl::pause()\n void\n FileStorHandlerImpl::resume()\n {\n-    vespalib::MonitorGuard g(_pauseMonitor);\n     _paused.store(false, std::memory_order_relaxed);\n-    g.broadcast();\n+    _pauseCond.notify_all();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4NDkzNw=="}, "originalCommit": {"oid": "8e8713cdec730d347e44e2eb55aafc74cbfa374e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Njk5NjY1OnYy", "diffSide": "RIGHT", "path": "storageframework/src/vespa/storageframework/defaultimplementation/thread/threadimpl.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDo0MjoyNVrOHgqU-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDoxODoxNVrOHg3zZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwOTk3Nw==", "bodyText": "Technically this should never be true when a monotonic time source is used. Should we remove it or keep it around just in case we want to discover if there's any funny kernel business going on? \ud83d\ude42", "url": "https://github.com/vespa-engine/vespa/pull/14839#discussion_r504009977", "createdAt": "2020-10-13T14:42:25Z", "author": {"login": "vekterli"}, "path": "storageframework/src/vespa/storageframework/defaultimplementation/thread/threadimpl.cpp", "diffHunk": "@@ -69,30 +69,29 @@ ThreadImpl::join()\n }\n \n void\n-ThreadImpl::registerTick(CycleType cycleType, MilliSecTime time)\n+ThreadImpl::registerTick(CycleType cycleType, vespalib::steady_time now)\n {\n-    if (!time.isSet()) time = _pool.getClock().getTimeInMillis();\n+    if (now.time_since_epoch() == vespalib::duration::zero()) now = _pool.getClock().getMonotonicTime();\n     ThreadTickData data(getTickData());\n-    uint64_t previousTickMs = data._lastTickMs;\n-    uint64_t nowMs = time.getTime();\n-    data._lastTickMs = nowMs;\n+    vespalib::steady_clock::time_point previousTick = data._lastTick;\n+    data._lastTick = now;\n     data._lastTickType = cycleType;\n     setTickData(data);\n \n-    if (data._lastTickMs == 0) { return; }\n+    if (data._lastTick.time_since_epoch() == vespalib::duration::zero()) { return; }\n \n-    if (previousTickMs > nowMs) {\n+    if (previousTick > now) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8713cdec730d347e44e2eb55aafc74cbfa374e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzMDc1OQ==", "bodyText": "Keep it for now.", "url": "https://github.com/vespa-engine/vespa/pull/14839#discussion_r504230759", "createdAt": "2020-10-13T20:18:15Z", "author": {"login": "baldersheim"}, "path": "storageframework/src/vespa/storageframework/defaultimplementation/thread/threadimpl.cpp", "diffHunk": "@@ -69,30 +69,29 @@ ThreadImpl::join()\n }\n \n void\n-ThreadImpl::registerTick(CycleType cycleType, MilliSecTime time)\n+ThreadImpl::registerTick(CycleType cycleType, vespalib::steady_time now)\n {\n-    if (!time.isSet()) time = _pool.getClock().getTimeInMillis();\n+    if (now.time_since_epoch() == vespalib::duration::zero()) now = _pool.getClock().getMonotonicTime();\n     ThreadTickData data(getTickData());\n-    uint64_t previousTickMs = data._lastTickMs;\n-    uint64_t nowMs = time.getTime();\n-    data._lastTickMs = nowMs;\n+    vespalib::steady_clock::time_point previousTick = data._lastTick;\n+    data._lastTick = now;\n     data._lastTickType = cycleType;\n     setTickData(data);\n \n-    if (data._lastTickMs == 0) { return; }\n+    if (data._lastTick.time_since_epoch() == vespalib::duration::zero()) { return; }\n \n-    if (previousTickMs > nowMs) {\n+    if (previousTick > now) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwOTk3Nw=="}, "originalCommit": {"oid": "8e8713cdec730d347e44e2eb55aafc74cbfa374e"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzAzODAwOnYy", "diffSide": "RIGHT", "path": "storageframework/src/vespa/storageframework/defaultimplementation/thread/threadimpl.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDo1MDoxNlrOHgquig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDoyMzowN1rOHg4HEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAxNjUyMg==", "bodyText": "Consider doing a quick sweep of variables/parameters that are now vespalib::duration and remove \"Ms\" etc. explicit unit suffix", "url": "https://github.com/vespa-engine/vespa/pull/14839#discussion_r504016522", "createdAt": "2020-10-13T14:50:16Z", "author": {"login": "vekterli"}, "path": "storageframework/src/vespa/storageframework/defaultimplementation/thread/threadimpl.h", "diffHunk": "@@ -26,10 +26,16 @@ class ThreadImpl : public Thread\n      * on code using it.\n      */\n     struct AtomicThreadTickData {\n+        AtomicThreadTickData() noexcept\n+            : _lastTickType(),\n+              _lastTickMs(vespalib::steady_time(vespalib::duration::zero())),\n+              _maxProcessingTimeSeenMs(),\n+              _maxWaitTimeSeenMs()\n+        {}\n         std::atomic<CycleType> _lastTickType;\n-        std::atomic<uint64_t> _lastTickMs;\n-        std::atomic<uint64_t> _maxProcessingTimeSeenMs;\n-        std::atomic<uint64_t> _maxWaitTimeSeenMs;\n+        std::atomic<vespalib::steady_time> _lastTickMs;\n+        std::atomic<vespalib::duration> _maxProcessingTimeSeenMs;\n+        std::atomic<vespalib::duration> _maxWaitTimeSeenMs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8713cdec730d347e44e2eb55aafc74cbfa374e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNTc5NQ==", "bodyText": "Done", "url": "https://github.com/vespa-engine/vespa/pull/14839#discussion_r504235795", "createdAt": "2020-10-13T20:23:07Z", "author": {"login": "baldersheim"}, "path": "storageframework/src/vespa/storageframework/defaultimplementation/thread/threadimpl.h", "diffHunk": "@@ -26,10 +26,16 @@ class ThreadImpl : public Thread\n      * on code using it.\n      */\n     struct AtomicThreadTickData {\n+        AtomicThreadTickData() noexcept\n+            : _lastTickType(),\n+              _lastTickMs(vespalib::steady_time(vespalib::duration::zero())),\n+              _maxProcessingTimeSeenMs(),\n+              _maxWaitTimeSeenMs()\n+        {}\n         std::atomic<CycleType> _lastTickType;\n-        std::atomic<uint64_t> _lastTickMs;\n-        std::atomic<uint64_t> _maxProcessingTimeSeenMs;\n-        std::atomic<uint64_t> _maxWaitTimeSeenMs;\n+        std::atomic<vespalib::steady_time> _lastTickMs;\n+        std::atomic<vespalib::duration> _maxProcessingTimeSeenMs;\n+        std::atomic<vespalib::duration> _maxWaitTimeSeenMs;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAxNjUyMg=="}, "originalCommit": {"oid": "8e8713cdec730d347e44e2eb55aafc74cbfa374e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODE2MTQzOnYy", "diffSide": "RIGHT", "path": "storageframework/src/vespa/storageframework/generic/thread/tickingthread.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOToxMjo0N1rOHg1nUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDoyNDo0MFrOHg4Ldg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5NDg5OQ==", "bodyText": "Shouldn't this class take in a mutex and a condition_variable and instantiate a unique_lock instead? The previous impl acquired a MonitorGuard while this impl does not end up taking any locks.", "url": "https://github.com/vespa-engine/vespa/pull/14839#discussion_r504194899", "createdAt": "2020-10-13T19:12:47Z", "author": {"login": "vekterli"}, "path": "storageframework/src/vespa/storageframework/generic/thread/tickingthread.cpp", "diffHunk": "@@ -120,40 +124,40 @@ class TickingThreadPoolImpl final : public TickingThreadPool {\n         void broadcast() override {}\n     };\n     struct CriticalGuard final : public TickingLockGuard::Impl {\n-        vespalib::MonitorGuard _guard;\n+        std::condition_variable &_cond;\n \n-        explicit CriticalGuard(vespalib::Monitor& m) : _guard(m) {}\n+        explicit CriticalGuard(std::condition_variable & cond) : _cond(cond) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8713cdec730d347e44e2eb55aafc74cbfa374e"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzMTA5OQ==", "bodyText": "Oops, to fast....", "url": "https://github.com/vespa-engine/vespa/pull/14839#discussion_r504231099", "createdAt": "2020-10-13T20:18:36Z", "author": {"login": "baldersheim"}, "path": "storageframework/src/vespa/storageframework/generic/thread/tickingthread.cpp", "diffHunk": "@@ -120,40 +124,40 @@ class TickingThreadPoolImpl final : public TickingThreadPool {\n         void broadcast() override {}\n     };\n     struct CriticalGuard final : public TickingLockGuard::Impl {\n-        vespalib::MonitorGuard _guard;\n+        std::condition_variable &_cond;\n \n-        explicit CriticalGuard(vespalib::Monitor& m) : _guard(m) {}\n+        explicit CriticalGuard(std::condition_variable & cond) : _cond(cond) {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5NDg5OQ=="}, "originalCommit": {"oid": "8e8713cdec730d347e44e2eb55aafc74cbfa374e"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIzNjkxOA==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/14839#discussion_r504236918", "createdAt": "2020-10-13T20:24:40Z", "author": {"login": "baldersheim"}, "path": "storageframework/src/vespa/storageframework/generic/thread/tickingthread.cpp", "diffHunk": "@@ -120,40 +124,40 @@ class TickingThreadPoolImpl final : public TickingThreadPool {\n         void broadcast() override {}\n     };\n     struct CriticalGuard final : public TickingLockGuard::Impl {\n-        vespalib::MonitorGuard _guard;\n+        std::condition_variable &_cond;\n \n-        explicit CriticalGuard(vespalib::Monitor& m) : _guard(m) {}\n+        explicit CriticalGuard(std::condition_variable & cond) : _cond(cond) {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE5NDg5OQ=="}, "originalCommit": {"oid": "8e8713cdec730d347e44e2eb55aafc74cbfa374e"}, "originalPosition": 129}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1142, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}