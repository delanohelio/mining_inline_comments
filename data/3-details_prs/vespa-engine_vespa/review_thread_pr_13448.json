{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NTA4MTc5", "number": 13448, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMToyNDozNVrOEBs8Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzowMDoyM1rOEBu6nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjIwMzA3OnYy", "diffSide": "RIGHT", "path": "documentapi/src/main/java/com/yahoo/documentapi/messagebus/protocol/AdaptiveLoadBalancer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMToyNDozNVrOGdtSEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDo0Njo1NFrOGd1PQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgwMzc5Mw==", "bodyText": "Do we need any special handling of candidateA == candidateB?", "url": "https://github.com/vespa-engine/vespa/pull/13448#discussion_r433803793", "createdAt": "2020-06-02T11:24:35Z", "author": {"login": "vekterli"}, "path": "documentapi/src/main/java/com/yahoo/documentapi/messagebus/protocol/AdaptiveLoadBalancer.java", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.documentapi.messagebus.protocol;\n+\n+import com.yahoo.jrt.slobrok.api.Mirror;\n+\n+import java.util.List;\n+import java.util.Random;\n+\n+/**\n+ * Will pick 2 random candidates and select the one with least pending operations.\n+ *\n+ * @author baldersheim\n+ */\n+class AdaptiveLoadBalancer extends LoadBalancer {\n+    private Random random = new Random();\n+    AdaptiveLoadBalancer(String cluster) {\n+        super(cluster);\n+    }\n+\n+    @Override\n+    Node getRecipient(List<Mirror.Entry> choices) {\n+        if (choices.isEmpty()) return null;\n+        Mirror.Entry entry;\n+        NodeMetrics metrics;\n+        if (choices.size() == 1) {\n+            entry = choices.get(0);\n+            metrics = getNodeMetrics(entry);\n+        } else {\n+            int candidateA = 0;\n+            int candidateB = 1;\n+            if (choices.size() > 2) {\n+                candidateA = random.nextInt(choices.size());\n+                candidateB = random.nextInt(choices.size());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61f755113284dddacec36576af0f30180c3cb13"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5MzM0MA==", "bodyText": "You tell me, will it have any statistical impact, or will it just drown in randomness.", "url": "https://github.com/vespa-engine/vespa/pull/13448#discussion_r433893340", "createdAt": "2020-06-02T13:54:26Z", "author": {"login": "baldersheim"}, "path": "documentapi/src/main/java/com/yahoo/documentapi/messagebus/protocol/AdaptiveLoadBalancer.java", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.documentapi.messagebus.protocol;\n+\n+import com.yahoo.jrt.slobrok.api.Mirror;\n+\n+import java.util.List;\n+import java.util.Random;\n+\n+/**\n+ * Will pick 2 random candidates and select the one with least pending operations.\n+ *\n+ * @author baldersheim\n+ */\n+class AdaptiveLoadBalancer extends LoadBalancer {\n+    private Random random = new Random();\n+    AdaptiveLoadBalancer(String cluster) {\n+        super(cluster);\n+    }\n+\n+    @Override\n+    Node getRecipient(List<Mirror.Entry> choices) {\n+        if (choices.isEmpty()) return null;\n+        Mirror.Entry entry;\n+        NodeMetrics metrics;\n+        if (choices.size() == 1) {\n+            entry = choices.get(0);\n+            metrics = getNodeMetrics(entry);\n+        } else {\n+            int candidateA = 0;\n+            int candidateB = 1;\n+            if (choices.size() > 2) {\n+                candidateA = random.nextInt(choices.size());\n+                candidateB = random.nextInt(choices.size());\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgwMzc5Mw=="}, "originalCommit": {"oid": "b61f755113284dddacec36576af0f30180c3cb13"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkwNTMzMA==", "bodyText": "Probably the latter, although I'm not smart enough to crunch the numbers on it \ud83d\ude42 Easiest would be to measure it in practice in the unit test over a set of runs. If there is a measurable better distribution if the two candidates are forced to be unequal, it would make sense to include it.", "url": "https://github.com/vespa-engine/vespa/pull/13448#discussion_r433905330", "createdAt": "2020-06-02T14:07:38Z", "author": {"login": "vekterli"}, "path": "documentapi/src/main/java/com/yahoo/documentapi/messagebus/protocol/AdaptiveLoadBalancer.java", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.documentapi.messagebus.protocol;\n+\n+import com.yahoo.jrt.slobrok.api.Mirror;\n+\n+import java.util.List;\n+import java.util.Random;\n+\n+/**\n+ * Will pick 2 random candidates and select the one with least pending operations.\n+ *\n+ * @author baldersheim\n+ */\n+class AdaptiveLoadBalancer extends LoadBalancer {\n+    private Random random = new Random();\n+    AdaptiveLoadBalancer(String cluster) {\n+        super(cluster);\n+    }\n+\n+    @Override\n+    Node getRecipient(List<Mirror.Entry> choices) {\n+        if (choices.isEmpty()) return null;\n+        Mirror.Entry entry;\n+        NodeMetrics metrics;\n+        if (choices.size() == 1) {\n+            entry = choices.get(0);\n+            metrics = getNodeMetrics(entry);\n+        } else {\n+            int candidateA = 0;\n+            int candidateB = 1;\n+            if (choices.size() > 2) {\n+                candidateA = random.nextInt(choices.size());\n+                candidateB = random.nextInt(choices.size());\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgwMzc5Mw=="}, "originalCommit": {"oid": "b61f755113284dddacec36576af0f30180c3cb13"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkzNDE0NA==", "bodyText": "After a reading a bit on the algorithm I concluded that it would indeed be better to ensure 2 distinct candidates. The reason is that when same candidate is selected fro both A and B it is in-fact a degradation into pure random. Looking at the numbers made it a simple choice.", "url": "https://github.com/vespa-engine/vespa/pull/13448#discussion_r433934144", "createdAt": "2020-06-02T14:46:54Z", "author": {"login": "baldersheim"}, "path": "documentapi/src/main/java/com/yahoo/documentapi/messagebus/protocol/AdaptiveLoadBalancer.java", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.documentapi.messagebus.protocol;\n+\n+import com.yahoo.jrt.slobrok.api.Mirror;\n+\n+import java.util.List;\n+import java.util.Random;\n+\n+/**\n+ * Will pick 2 random candidates and select the one with least pending operations.\n+ *\n+ * @author baldersheim\n+ */\n+class AdaptiveLoadBalancer extends LoadBalancer {\n+    private Random random = new Random();\n+    AdaptiveLoadBalancer(String cluster) {\n+        super(cluster);\n+    }\n+\n+    @Override\n+    Node getRecipient(List<Mirror.Entry> choices) {\n+        if (choices.isEmpty()) return null;\n+        Mirror.Entry entry;\n+        NodeMetrics metrics;\n+        if (choices.size() == 1) {\n+            entry = choices.get(0);\n+            metrics = getNodeMetrics(entry);\n+        } else {\n+            int candidateA = 0;\n+            int candidateB = 1;\n+            if (choices.size() > 2) {\n+                candidateA = random.nextInt(choices.size());\n+                candidateB = random.nextInt(choices.size());\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgwMzc5Mw=="}, "originalCommit": {"oid": "b61f755113284dddacec36576af0f30180c3cb13"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjM5NzQ5OnYy", "diffSide": "RIGHT", "path": "documentapi/src/test/java/com/yahoo/documentapi/messagebus/protocol/LoadBalancerTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjoyNDo1OFrOGdvLXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzo1Mjo0OFrOGdyq5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzNDg0Nw==", "bodyText": "Since this is based on randomness, should we have a separate constructor overload for AdaptiveLoadBalancer taking in Random instance explicitly? This would allow us to use a deterministic seed for unit tests.", "url": "https://github.com/vespa-engine/vespa/pull/13448#discussion_r433834847", "createdAt": "2020-06-02T12:24:58Z", "author": {"login": "vekterli"}, "path": "documentapi/src/test/java/com/yahoo/documentapi/messagebus/protocol/LoadBalancerTestCase.java", "diffHunk": "@@ -39,8 +41,77 @@ private static void assertIllegalArgument(String clusterName, String recipient,\n     }\n \n     @Test\n-    public void testLoadBalancer() {\n-        LoadBalancer lb = new LoadBalancer(\"foo\");\n+    public void testLoadBalancerCreation() {\n+        LoadBalancerPolicy lbp = new LoadBalancerPolicy(\"cluster=docproc/cluster.mobile.indexing;session=chain.mobile.indexing\");\n+        assertTrue(lbp.getLoadBalancer() instanceof LegacyLoadBalancer);\n+        lbp = new LoadBalancerPolicy(\"cluster=docproc/cluster.mobile.indexing;session=chain.mobile.indexing;type=legacy\");\n+        assertTrue(lbp.getLoadBalancer() instanceof LegacyLoadBalancer);\n+        lbp = new LoadBalancerPolicy(\"cluster=docproc/cluster.mobile.indexing;session=chain.mobile.indexing;type=adaptive\");\n+        assertTrue(lbp.getLoadBalancer() instanceof AdaptiveLoadBalancer);\n+    }\n+\n+    @Test\n+    public void testAdaptiveLoadBalancer() {\n+        LoadBalancer lb = new AdaptiveLoadBalancer(\"foo\");\n+\n+        List<Mirror.Entry> entries = Arrays.asList(new Mirror.Entry(\"foo/0/default\", \"tcp/bar:1\"),\n+                new Mirror.Entry(\"foo/1/default\", \"tcp/bar:2\"),\n+                new Mirror.Entry(\"foo/2/default\", \"tcp/bar:3\"));\n+        List<LoadBalancer.NodeMetrics> weights = lb.getNodeWeights();\n+\n+        for (int i = 0; i < 9999; i++) {\n+            LoadBalancer.Node node = lb.getRecipient(entries);\n+            assertNotNull(node);\n+        }\n+\n+        long sentSum = 0;\n+        for (var metrics : weights) {\n+            assertTrue(10 > Math.abs(metrics.sent() - 3333));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61f755113284dddacec36576af0f30180c3cb13"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5MjA3MA==", "bodyText": "Fixed, I also changed the test to use equals as the results are repeatable.", "url": "https://github.com/vespa-engine/vespa/pull/13448#discussion_r433892070", "createdAt": "2020-06-02T13:52:48Z", "author": {"login": "baldersheim"}, "path": "documentapi/src/test/java/com/yahoo/documentapi/messagebus/protocol/LoadBalancerTestCase.java", "diffHunk": "@@ -39,8 +41,77 @@ private static void assertIllegalArgument(String clusterName, String recipient,\n     }\n \n     @Test\n-    public void testLoadBalancer() {\n-        LoadBalancer lb = new LoadBalancer(\"foo\");\n+    public void testLoadBalancerCreation() {\n+        LoadBalancerPolicy lbp = new LoadBalancerPolicy(\"cluster=docproc/cluster.mobile.indexing;session=chain.mobile.indexing\");\n+        assertTrue(lbp.getLoadBalancer() instanceof LegacyLoadBalancer);\n+        lbp = new LoadBalancerPolicy(\"cluster=docproc/cluster.mobile.indexing;session=chain.mobile.indexing;type=legacy\");\n+        assertTrue(lbp.getLoadBalancer() instanceof LegacyLoadBalancer);\n+        lbp = new LoadBalancerPolicy(\"cluster=docproc/cluster.mobile.indexing;session=chain.mobile.indexing;type=adaptive\");\n+        assertTrue(lbp.getLoadBalancer() instanceof AdaptiveLoadBalancer);\n+    }\n+\n+    @Test\n+    public void testAdaptiveLoadBalancer() {\n+        LoadBalancer lb = new AdaptiveLoadBalancer(\"foo\");\n+\n+        List<Mirror.Entry> entries = Arrays.asList(new Mirror.Entry(\"foo/0/default\", \"tcp/bar:1\"),\n+                new Mirror.Entry(\"foo/1/default\", \"tcp/bar:2\"),\n+                new Mirror.Entry(\"foo/2/default\", \"tcp/bar:3\"));\n+        List<LoadBalancer.NodeMetrics> weights = lb.getNodeWeights();\n+\n+        for (int i = 0; i < 9999; i++) {\n+            LoadBalancer.Node node = lb.getRecipient(entries);\n+            assertNotNull(node);\n+        }\n+\n+        long sentSum = 0;\n+        for (var metrics : weights) {\n+            assertTrue(10 > Math.abs(metrics.sent() - 3333));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzNDg0Nw=="}, "originalCommit": {"oid": "b61f755113284dddacec36576af0f30180c3cb13"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjQxNDg2OnYy", "diffSide": "RIGHT", "path": "documentapi/src/test/java/com/yahoo/documentapi/messagebus/protocol/LoadBalancerTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjoyOTo1OVrOGdvWTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzo0NjoyNFrOGdyYkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzNzY0NQ==", "bodyText": "Nit: some inconsistent spacing here", "url": "https://github.com/vespa-engine/vespa/pull/13448#discussion_r433837645", "createdAt": "2020-06-02T12:29:59Z", "author": {"login": "vekterli"}, "path": "documentapi/src/test/java/com/yahoo/documentapi/messagebus/protocol/LoadBalancerTestCase.java", "diffHunk": "@@ -39,8 +41,77 @@ private static void assertIllegalArgument(String clusterName, String recipient,\n     }\n \n     @Test\n-    public void testLoadBalancer() {\n-        LoadBalancer lb = new LoadBalancer(\"foo\");\n+    public void testLoadBalancerCreation() {\n+        LoadBalancerPolicy lbp = new LoadBalancerPolicy(\"cluster=docproc/cluster.mobile.indexing;session=chain.mobile.indexing\");\n+        assertTrue(lbp.getLoadBalancer() instanceof LegacyLoadBalancer);\n+        lbp = new LoadBalancerPolicy(\"cluster=docproc/cluster.mobile.indexing;session=chain.mobile.indexing;type=legacy\");\n+        assertTrue(lbp.getLoadBalancer() instanceof LegacyLoadBalancer);\n+        lbp = new LoadBalancerPolicy(\"cluster=docproc/cluster.mobile.indexing;session=chain.mobile.indexing;type=adaptive\");\n+        assertTrue(lbp.getLoadBalancer() instanceof AdaptiveLoadBalancer);\n+    }\n+\n+    @Test\n+    public void testAdaptiveLoadBalancer() {\n+        LoadBalancer lb = new AdaptiveLoadBalancer(\"foo\");\n+\n+        List<Mirror.Entry> entries = Arrays.asList(new Mirror.Entry(\"foo/0/default\", \"tcp/bar:1\"),\n+                new Mirror.Entry(\"foo/1/default\", \"tcp/bar:2\"),\n+                new Mirror.Entry(\"foo/2/default\", \"tcp/bar:3\"));\n+        List<LoadBalancer.NodeMetrics> weights = lb.getNodeWeights();\n+\n+        for (int i = 0; i < 9999; i++) {\n+            LoadBalancer.Node node = lb.getRecipient(entries);\n+            assertNotNull(node);\n+        }\n+\n+        long sentSum = 0;\n+        for (var metrics : weights) {\n+            assertTrue(10 > Math.abs(metrics.sent() - 3333));\n+            sentSum += metrics.sent();\n+        }\n+        assertEquals(9999, sentSum);\n+\n+        for (var metrics : weights) {\n+            metrics.reset();\n+        }\n+\n+        // Simulate 1/1, 1/2, 1/4 processing capacity\n+        for (int i = 0; i < 9999; i++) {\n+            LoadBalancer.Node node = lb.getRecipient(entries);\n+            assertNotNull(node);\n+            if (node.entry.getName().contains(\"1\")) {\n+                lb.received(node, false);\n+            } else if (node.entry.getName().contains(\"2\")) {\n+                if ((i % 2) == 0) {\n+                    lb.received(node, false);\n+                }\n+            } else {\n+                if ((i % 4) == 0) {\n+                    lb.received(node, false);\n+                }\n+            }\n+        }\n+\n+        sentSum = 0;\n+        long sumPending = 0;\n+        for (var metrics : weights) {\n+            System.out.println(\"m: s=\" + metrics.sent() + \" p=\" + metrics.pending());\n+            sentSum += metrics.sent();\n+            sumPending += metrics.pending();\n+        }\n+        assertEquals(9999, sentSum);\n+        assertTrue(200 > Math.abs(sumPending -  2700));\n+        assertTrue( 100 > Math.abs(weights.get(0).sent() - 1780));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61f755113284dddacec36576af0f30180c3cb13"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4NzM3Nw==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/13448#discussion_r433887377", "createdAt": "2020-06-02T13:46:24Z", "author": {"login": "baldersheim"}, "path": "documentapi/src/test/java/com/yahoo/documentapi/messagebus/protocol/LoadBalancerTestCase.java", "diffHunk": "@@ -39,8 +41,77 @@ private static void assertIllegalArgument(String clusterName, String recipient,\n     }\n \n     @Test\n-    public void testLoadBalancer() {\n-        LoadBalancer lb = new LoadBalancer(\"foo\");\n+    public void testLoadBalancerCreation() {\n+        LoadBalancerPolicy lbp = new LoadBalancerPolicy(\"cluster=docproc/cluster.mobile.indexing;session=chain.mobile.indexing\");\n+        assertTrue(lbp.getLoadBalancer() instanceof LegacyLoadBalancer);\n+        lbp = new LoadBalancerPolicy(\"cluster=docproc/cluster.mobile.indexing;session=chain.mobile.indexing;type=legacy\");\n+        assertTrue(lbp.getLoadBalancer() instanceof LegacyLoadBalancer);\n+        lbp = new LoadBalancerPolicy(\"cluster=docproc/cluster.mobile.indexing;session=chain.mobile.indexing;type=adaptive\");\n+        assertTrue(lbp.getLoadBalancer() instanceof AdaptiveLoadBalancer);\n+    }\n+\n+    @Test\n+    public void testAdaptiveLoadBalancer() {\n+        LoadBalancer lb = new AdaptiveLoadBalancer(\"foo\");\n+\n+        List<Mirror.Entry> entries = Arrays.asList(new Mirror.Entry(\"foo/0/default\", \"tcp/bar:1\"),\n+                new Mirror.Entry(\"foo/1/default\", \"tcp/bar:2\"),\n+                new Mirror.Entry(\"foo/2/default\", \"tcp/bar:3\"));\n+        List<LoadBalancer.NodeMetrics> weights = lb.getNodeWeights();\n+\n+        for (int i = 0; i < 9999; i++) {\n+            LoadBalancer.Node node = lb.getRecipient(entries);\n+            assertNotNull(node);\n+        }\n+\n+        long sentSum = 0;\n+        for (var metrics : weights) {\n+            assertTrue(10 > Math.abs(metrics.sent() - 3333));\n+            sentSum += metrics.sent();\n+        }\n+        assertEquals(9999, sentSum);\n+\n+        for (var metrics : weights) {\n+            metrics.reset();\n+        }\n+\n+        // Simulate 1/1, 1/2, 1/4 processing capacity\n+        for (int i = 0; i < 9999; i++) {\n+            LoadBalancer.Node node = lb.getRecipient(entries);\n+            assertNotNull(node);\n+            if (node.entry.getName().contains(\"1\")) {\n+                lb.received(node, false);\n+            } else if (node.entry.getName().contains(\"2\")) {\n+                if ((i % 2) == 0) {\n+                    lb.received(node, false);\n+                }\n+            } else {\n+                if ((i % 4) == 0) {\n+                    lb.received(node, false);\n+                }\n+            }\n+        }\n+\n+        sentSum = 0;\n+        long sumPending = 0;\n+        for (var metrics : weights) {\n+            System.out.println(\"m: s=\" + metrics.sent() + \" p=\" + metrics.pending());\n+            sentSum += metrics.sent();\n+            sumPending += metrics.pending();\n+        }\n+        assertEquals(9999, sentSum);\n+        assertTrue(200 > Math.abs(sumPending -  2700));\n+        assertTrue( 100 > Math.abs(weights.get(0).sent() - 1780));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzNzY0NQ=="}, "originalCommit": {"oid": "b61f755113284dddacec36576af0f30180c3cb13"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjUyMzk3OnYy", "diffSide": "RIGHT", "path": "documentapi/src/main/java/com/yahoo/documentapi/messagebus/protocol/LegacyLoadBalancer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjo1OTo0MlrOGdwa4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzo0NDozNVrOGdyTJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1NTIwMA==", "bodyText": "Consider adding @Override to createNodeMetrics, increaseWeights and received", "url": "https://github.com/vespa-engine/vespa/pull/13448#discussion_r433855200", "createdAt": "2020-06-02T12:59:42Z", "author": {"login": "vekterli"}, "path": "documentapi/src/main/java/com/yahoo/documentapi/messagebus/protocol/LegacyLoadBalancer.java", "diffHunk": "@@ -0,0 +1,93 @@\n+// Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.documentapi.messagebus.protocol;\n+\n+import com.yahoo.jrt.slobrok.api.Mirror;\n+\n+import java.util.List;\n+\n+/**\n+ * Load balances over a set of nodes based on statistics gathered from those nodes.\n+ *\n+ * @author thomasg\n+ */\n+class LegacyLoadBalancer extends LoadBalancer {\n+\n+    static class LegacyNodeMetrics extends NodeMetrics {\n+        double weight = 1.0;\n+    }\n+\n+    private double position = 0.0;\n+\n+    public LegacyLoadBalancer(String cluster) {\n+        super(cluster);\n+    }\n+\n+    /**\n+     * The load balancing operation: Returns a node choice from the given choices,\n+     * based on previously gathered statistics on the nodes, and a running \"position\"\n+     * which is increased by 1 on each call to this.\n+     *\n+     * @param choices the node choices, represented as Slobrok entries\n+     * @return the chosen node, or null only if the given choices were zero\n+     */\n+    public Node getRecipient(List<Mirror.Entry> choices) {\n+        if (choices.isEmpty()) return null;\n+\n+        double weightSum = 0.0;\n+        Node selectedNode = null;\n+        synchronized (this) {\n+            for (Mirror.Entry entry : choices) {\n+                LegacyNodeMetrics nodeMetrics = (LegacyNodeMetrics)getNodeMetrics(entry);\n+\n+                weightSum += nodeMetrics.weight;\n+\n+                if (weightSum > position) {\n+                    selectedNode = new Node(entry, nodeMetrics);\n+                    break;\n+                }\n+            }\n+            if (selectedNode == null) { // Position>sum of all weights: Wrap around (but keep the remainder for some reason)\n+                position -= weightSum;\n+                selectedNode = new Node(choices.get(0), getNodeMetrics(choices.get(0)));\n+            }\n+            position += 1.0;\n+            selectedNode.metrics.incSend();\n+        }\n+        return selectedNode;\n+    }\n+\n+    protected NodeMetrics createNodeMetrics() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17a7205ae5a33555f5a91837300e07fcbb7bb4b3"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4NTk4OA==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/13448#discussion_r433885988", "createdAt": "2020-06-02T13:44:35Z", "author": {"login": "baldersheim"}, "path": "documentapi/src/main/java/com/yahoo/documentapi/messagebus/protocol/LegacyLoadBalancer.java", "diffHunk": "@@ -0,0 +1,93 @@\n+// Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.documentapi.messagebus.protocol;\n+\n+import com.yahoo.jrt.slobrok.api.Mirror;\n+\n+import java.util.List;\n+\n+/**\n+ * Load balances over a set of nodes based on statistics gathered from those nodes.\n+ *\n+ * @author thomasg\n+ */\n+class LegacyLoadBalancer extends LoadBalancer {\n+\n+    static class LegacyNodeMetrics extends NodeMetrics {\n+        double weight = 1.0;\n+    }\n+\n+    private double position = 0.0;\n+\n+    public LegacyLoadBalancer(String cluster) {\n+        super(cluster);\n+    }\n+\n+    /**\n+     * The load balancing operation: Returns a node choice from the given choices,\n+     * based on previously gathered statistics on the nodes, and a running \"position\"\n+     * which is increased by 1 on each call to this.\n+     *\n+     * @param choices the node choices, represented as Slobrok entries\n+     * @return the chosen node, or null only if the given choices were zero\n+     */\n+    public Node getRecipient(List<Mirror.Entry> choices) {\n+        if (choices.isEmpty()) return null;\n+\n+        double weightSum = 0.0;\n+        Node selectedNode = null;\n+        synchronized (this) {\n+            for (Mirror.Entry entry : choices) {\n+                LegacyNodeMetrics nodeMetrics = (LegacyNodeMetrics)getNodeMetrics(entry);\n+\n+                weightSum += nodeMetrics.weight;\n+\n+                if (weightSum > position) {\n+                    selectedNode = new Node(entry, nodeMetrics);\n+                    break;\n+                }\n+            }\n+            if (selectedNode == null) { // Position>sum of all weights: Wrap around (but keep the remainder for some reason)\n+                position -= weightSum;\n+                selectedNode = new Node(choices.get(0), getNodeMetrics(choices.get(0)));\n+            }\n+            position += 1.0;\n+            selectedNode.metrics.incSend();\n+        }\n+        return selectedNode;\n+    }\n+\n+    protected NodeMetrics createNodeMetrics() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1NTIwMA=="}, "originalCommit": {"oid": "17a7205ae5a33555f5a91837300e07fcbb7bb4b3"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjUyNzAwOnYy", "diffSide": "RIGHT", "path": "documentapi/src/main/java/com/yahoo/documentapi/messagebus/protocol/LoadBalancerPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzowMDoyM1rOGdwcrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzowMjo0OVrOGdwiqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1NTY2MQ==", "bodyText": "Should use equals() instead of ==.\nAlso consider flipping argument order to implicitly handle type == null in case no balancer type is present.", "url": "https://github.com/vespa-engine/vespa/pull/13448#discussion_r433855661", "createdAt": "2020-06-02T13:00:23Z", "author": {"login": "vekterli"}, "path": "documentapi/src/main/java/com/yahoo/documentapi/messagebus/protocol/LoadBalancerPolicy.java", "diffHunk": "@@ -48,12 +48,19 @@ private LoadBalancerPolicy(Map<String, String> params) {\n         }\n \n         pattern = cluster + \"/*/\" + session;\n-        loadBalancer = new LoadBalancer(cluster);\n+        String type = params.get(\"type\");\n+        if (type == \"adaptive\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17a7205ae5a33555f5a91837300e07fcbb7bb4b3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1NzE5Mw==", "bodyText": "Nevermind, I see this was fixed prior to me submitting this \ud83d\ude42", "url": "https://github.com/vespa-engine/vespa/pull/13448#discussion_r433857193", "createdAt": "2020-06-02T13:02:49Z", "author": {"login": "vekterli"}, "path": "documentapi/src/main/java/com/yahoo/documentapi/messagebus/protocol/LoadBalancerPolicy.java", "diffHunk": "@@ -48,12 +48,19 @@ private LoadBalancerPolicy(Map<String, String> params) {\n         }\n \n         pattern = cluster + \"/*/\" + session;\n-        loadBalancer = new LoadBalancer(cluster);\n+        String type = params.get(\"type\");\n+        if (type == \"adaptive\") {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1NTY2MQ=="}, "originalCommit": {"oid": "17a7205ae5a33555f5a91837300e07fcbb7bb4b3"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1561, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}