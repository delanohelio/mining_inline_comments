{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5ODM3Mzc0", "number": 14295, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzo1Mjo1MVrOEgehkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzo1Mjo1MVrOEgehkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNDkwMDAyOnYy", "diffSide": "RIGHT", "path": "storage/src/vespa/storage/bucketdb/lockablemap.hpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNzo1Mjo1MVrOHNXBog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwODozMDozN1rOHN10Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc3MDc4Ng==", "bodyText": "You should probably count everything as 'used' as well.", "url": "https://github.com/vespa-engine/vespa/pull/14295#discussion_r483770786", "createdAt": "2020-09-04T17:52:51Z", "author": {"login": "geirst"}, "path": "storage/src/vespa/storage/bucketdb/lockablemap.hpp", "diffHunk": "@@ -85,6 +85,15 @@ LockableMap<Map>::getMemoryUsage() const noexcept\n         sizeof(std::mutex) + sizeof(std::condition_variable);\n }\n \n+template <typename Map>\n+vespalib::MemoryUsage LockableMap<Map>::detailed_memory_usage() const noexcept {\n+    // We don't have any details for this map type, just count everything as \"allocated\".\n+    size_t used = getMemoryUsage();\n+    vespalib::MemoryUsage mem_usage;\n+    mem_usage.incAllocatedBytes(used);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca28ce90eaf1c4f247ce70533bb5937bce8755a6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI3NTI4Mg==", "bodyText": "Good point, done", "url": "https://github.com/vespa-engine/vespa/pull/14295#discussion_r484275282", "createdAt": "2020-09-07T08:30:37Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/bucketdb/lockablemap.hpp", "diffHunk": "@@ -85,6 +85,15 @@ LockableMap<Map>::getMemoryUsage() const noexcept\n         sizeof(std::mutex) + sizeof(std::condition_variable);\n }\n \n+template <typename Map>\n+vespalib::MemoryUsage LockableMap<Map>::detailed_memory_usage() const noexcept {\n+    // We don't have any details for this map type, just count everything as \"allocated\".\n+    size_t used = getMemoryUsage();\n+    vespalib::MemoryUsage mem_usage;\n+    mem_usage.incAllocatedBytes(used);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc3MDc4Ng=="}, "originalCommit": {"oid": "ca28ce90eaf1c4f247ce70533bb5937bce8755a6"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1384, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}