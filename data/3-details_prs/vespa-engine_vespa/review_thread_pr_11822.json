{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNzEyNzMw", "number": 11822, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMzozNDowN1rODY0WIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjozMzo0NlrODZjrSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzUwMDUwOnYy", "diffSide": "RIGHT", "path": "documentapi/src/vespa/documentapi/messagebus/routablefactories60.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMzozNDowN1rOFe5EmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNTo1ODoxOFrOFfvJnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkzNjY2NA==", "bodyText": "Could consider wrapping the \"deserialize document from working byte buffer\" case in its own utility method to avoid duplication", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r367936664", "createdAt": "2020-01-17T13:34:07Z", "author": {"login": "vekterli"}, "path": "documentapi/src/vespa/documentapi/messagebus/routablefactories60.cpp", "diffHunk": "@@ -540,7 +542,9 @@ RoutableFactories60::MapVisitorReplyFactory::doEncode(const DocumentReply &, ves\n \n void\n RoutableFactories60::PutDocumentMessageFactory::decodeInto(PutDocumentMessage & msg, document::ByteBuffer & buf) const {\n-    msg.setDocument(make_shared<document::Document>(_repo, buf));\n+    vespalib::nbostream stream(buf.getBufferAtPos(), buf.getRemaining());\n+    msg.setDocument(make_shared<document::Document>(_repo, stream));\n+    buf.incPos(buf.getRemaining() - stream.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3cf455cba32ef3f5280634470858e80761d8450"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyMjY4NQ==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r368822685", "createdAt": "2020-01-21T05:58:18Z", "author": {"login": "baldersheim"}, "path": "documentapi/src/vespa/documentapi/messagebus/routablefactories60.cpp", "diffHunk": "@@ -540,7 +542,9 @@ RoutableFactories60::MapVisitorReplyFactory::doEncode(const DocumentReply &, ves\n \n void\n RoutableFactories60::PutDocumentMessageFactory::decodeInto(PutDocumentMessage & msg, document::ByteBuffer & buf) const {\n-    msg.setDocument(make_shared<document::Document>(_repo, buf));\n+    vespalib::nbostream stream(buf.getBufferAtPos(), buf.getRemaining());\n+    msg.setDocument(make_shared<document::Document>(_repo, stream));\n+    buf.incPos(buf.getRemaining() - stream.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkzNjY2NA=="}, "originalCommit": {"oid": "d3cf455cba32ef3f5280634470858e80761d8450"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzUzOTc2OnYy", "diffSide": "RIGHT", "path": "document/src/vespa/document/fieldvalue/serializablearray.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMzo0Nzo1MFrOFe5cNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNTo0NzoyMlrOFfvAaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk0MjcwOQ==", "bodyText": "Nit: missing whitespace after comma", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r367942709", "createdAt": "2020-01-17T13:47:50Z", "author": {"login": "vekterli"}, "path": "document/src/vespa/document/fieldvalue/serializablearray.cpp", "diffHunk": "@@ -34,6 +34,22 @@ SerializableArray::SerializableArray()\n {\n }\n \n+SerializableArray::SerializableArray(EntryMap entries, ByteBuffer::UP buffer,\n+                                     CompressionConfig::Type comp_type,uint32_t uncompressed_length)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1bc742e8ac18dd41ea8f19919005257fbfa277b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyMDMzMQ==", "bodyText": "Added", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r368820331", "createdAt": "2020-01-21T05:47:22Z", "author": {"login": "baldersheim"}, "path": "document/src/vespa/document/fieldvalue/serializablearray.cpp", "diffHunk": "@@ -34,6 +34,22 @@ SerializableArray::SerializableArray()\n {\n }\n \n+SerializableArray::SerializableArray(EntryMap entries, ByteBuffer::UP buffer,\n+                                     CompressionConfig::Type comp_type,uint32_t uncompressed_length)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk0MjcwOQ=="}, "originalCommit": {"oid": "b1bc742e8ac18dd41ea8f19919005257fbfa277b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzU3NTI1OnYy", "diffSide": "RIGHT", "path": "document/src/tests/documenttestcase.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMzo1OTozOFrOFe5xFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNjowMjozN1rOFfvNYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk0ODA1Mw==", "bodyText": "I'm not sure about testing the size of STL types, as these are implementation defined. Though I suppose we already transitively depend on these since we're checking the sizes of more complex types that include STL types in them...\nCould also make these static_assert instead to catch at compile time, since they don't depend on any runtime info.", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r367948053", "createdAt": "2020-01-17T13:59:38Z", "author": {"login": "vekterli"}, "path": "document/src/tests/documenttestcase.cpp", "diffHunk": "@@ -28,10 +30,15 @@ using namespace fieldvalue;\n \n TEST(DocumentTest, testSizeOf)\n {\n+    EXPECT_EQ(24u, sizeof(std::vector<char>));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d092c8e45fe74f0fe7808a6d4fa363fb0a009181"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyMzY1MA==", "bodyText": "I will keep as is to monitor changes.", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r368823650", "createdAt": "2020-01-21T06:02:37Z", "author": {"login": "baldersheim"}, "path": "document/src/tests/documenttestcase.cpp", "diffHunk": "@@ -28,10 +30,15 @@ using namespace fieldvalue;\n \n TEST(DocumentTest, testSizeOf)\n {\n+    EXPECT_EQ(24u, sizeof(std::vector<char>));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk0ODA1Mw=="}, "originalCommit": {"oid": "d092c8e45fe74f0fe7808a6d4fa363fb0a009181"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzU4NzQ2OnYy", "diffSide": "RIGHT", "path": "document/src/vespa/document/fieldvalue/structfieldvalue.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNDowMzo0MlrOFe54XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNjo1MDoxNlrOFfkXGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk0OTkxNg==", "bodyText": "Since this changes the behavior from using chunk 1 to chunk 0 in the case of (legacy) 2 chunks, I presume we rather want to put it into the \"header\" chunk anyway?", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r367949916", "createdAt": "2020-01-17T14:03:42Z", "author": {"login": "vekterli"}, "path": "document/src/vespa/document/fieldvalue/structfieldvalue.cpp", "diffHunk": "@@ -262,7 +261,7 @@ StructFieldValue::setFieldValue(const Field& field, FieldValue::UP value)\n         _chunks.push_back(std::make_unique<SerializableArray>());\n     }\n \n-    _chunks.back().set(fieldId, std::move(serialized));\n+    _chunks[0].set(fieldId, std::move(serialized));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d092c8e45fe74f0fe7808a6d4fa363fb0a009181"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY0NTkxNA==", "bodyText": "yes.", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r368645914", "createdAt": "2020-01-20T16:50:16Z", "author": {"login": "baldersheim"}, "path": "document/src/vespa/document/fieldvalue/structfieldvalue.cpp", "diffHunk": "@@ -262,7 +261,7 @@ StructFieldValue::setFieldValue(const Field& field, FieldValue::UP value)\n         _chunks.push_back(std::make_unique<SerializableArray>());\n     }\n \n-    _chunks.back().set(fieldId, std::move(serialized));\n+    _chunks[0].set(fieldId, std::move(serialized));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk0OTkxNg=="}, "originalCommit": {"oid": "d092c8e45fe74f0fe7808a6d4fa363fb0a009181"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzY1MDg5OnYy", "diffSide": "RIGHT", "path": "document/src/vespa/document/util/bytebuffer.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNDoyNDoxMFrOFe6fOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNjo1NDo1NlrOFfkfZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk1OTg2NA==", "bodyText": "Consider updating comment to reflect new semantics", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r367959864", "createdAt": "2020-01-17T14:24:10Z", "author": {"login": "vekterli"}, "path": "document/src/vespa/document/util/bytebuffer.h", "diffHunk": "@@ -93,14 +73,11 @@ class ByteBuffer\n     /** @return Returns the index of the current position in the buffer. */\n     size_t getPos() const { return _pos; }\n \n-    /** @return Returns the limit. */\n-    size_t getLimit() const { return _limit; }\n-\n     /**\n      * @return Returns the number of bytes remaining in the buffer - that is,\n      *         getLimit()-getPos().\n     */\n-    size_t getRemaining() const { return _limit-_pos; }\n+    size_t getRemaining() const { return _len -_pos; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eaae9afb93ad82a931e117a14babdbb271762c6"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY0ODAzNw==", "bodyText": "Done", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r368648037", "createdAt": "2020-01-20T16:54:56Z", "author": {"login": "baldersheim"}, "path": "document/src/vespa/document/util/bytebuffer.h", "diffHunk": "@@ -93,14 +73,11 @@ class ByteBuffer\n     /** @return Returns the index of the current position in the buffer. */\n     size_t getPos() const { return _pos; }\n \n-    /** @return Returns the limit. */\n-    size_t getLimit() const { return _limit; }\n-\n     /**\n      * @return Returns the number of bytes remaining in the buffer - that is,\n      *         getLimit()-getPos().\n     */\n-    size_t getRemaining() const { return _limit-_pos; }\n+    size_t getRemaining() const { return _len -_pos; }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk1OTg2NA=="}, "originalCommit": {"oid": "5eaae9afb93ad82a931e117a14babdbb271762c6"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzY2MDU3OnYy", "diffSide": "RIGHT", "path": "document/src/tests/testbytebuffer.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNDoyNzowNFrOFe6lGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNjo1NjowN1rOFfkhlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2MTM2OQ==", "bodyText": "Since getRemaining now has different semantics than it used to, is there any other code that might be expecting the old behavior and may now change in subtle ways?", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r367961369", "createdAt": "2020-01-17T14:27:04Z", "author": {"login": "vekterli"}, "path": "document/src/tests/testbytebuffer.cpp", "diffHunk": "@@ -136,251 +53,248 @@ TEST(ByteBuffer_Test, test_copy_constructor)\n \n TEST(ByteBuffer_Test, test_putGetFlip)\n {\n-    ByteBuffer* newBuf=new ByteBuffer(100);\n+    ByteBuffer newBuf(100);\n \n     try {\n-        newBuf->putInt(10);\n+        newBuf.putInt(10);\n         int test;\n-        newBuf->flip();\n+        newBuf.flip();\n \n-        newBuf->getInt(test);\n-        EXPECT_TRUE(test==10);\n+        newBuf.getInt(test);\n+        EXPECT_EQ(test, 10);\n \n-        newBuf->clear();\n-        newBuf->putDouble(3.35);\n-        newBuf->flip();\n-        EXPECT_TRUE(newBuf->getRemaining()==sizeof(double));\n+        newBuf.clear();\n+        newBuf.putDouble(3.35);\n+        newBuf.flip();\n+        EXPECT_EQ(newBuf.getRemaining(), 100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eaae9afb93ad82a931e117a14babdbb271762c6"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY0ODU5OQ==", "bodyText": "I think that now that length is const and flip, clear, and setPos are gone we are fine.", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r368648599", "createdAt": "2020-01-20T16:56:07Z", "author": {"login": "baldersheim"}, "path": "document/src/tests/testbytebuffer.cpp", "diffHunk": "@@ -136,251 +53,248 @@ TEST(ByteBuffer_Test, test_copy_constructor)\n \n TEST(ByteBuffer_Test, test_putGetFlip)\n {\n-    ByteBuffer* newBuf=new ByteBuffer(100);\n+    ByteBuffer newBuf(100);\n \n     try {\n-        newBuf->putInt(10);\n+        newBuf.putInt(10);\n         int test;\n-        newBuf->flip();\n+        newBuf.flip();\n \n-        newBuf->getInt(test);\n-        EXPECT_TRUE(test==10);\n+        newBuf.getInt(test);\n+        EXPECT_EQ(test, 10);\n \n-        newBuf->clear();\n-        newBuf->putDouble(3.35);\n-        newBuf->flip();\n-        EXPECT_TRUE(newBuf->getRemaining()==sizeof(double));\n+        newBuf.clear();\n+        newBuf.putDouble(3.35);\n+        newBuf.flip();\n+        EXPECT_EQ(newBuf.getRemaining(), 100);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2MTM2OQ=="}, "originalCommit": {"oid": "5eaae9afb93ad82a931e117a14babdbb271762c6"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzY2NjQzOnYy", "diffSide": "RIGHT", "path": "document/src/vespa/document/util/bytebuffer.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNDoyODo1MVrOFe6omQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNjo1NToxMlrOFfkf5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2MjI2NQ==", "bodyText": "Consider updating comment to reflect new semantics", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r367962265", "createdAt": "2020-01-17T14:28:51Z", "author": {"login": "vekterli"}, "path": "document/src/vespa/document/util/bytebuffer.h", "diffHunk": "@@ -134,17 +100,13 @@ class ByteBuffer\n \n     void incPosNoCheck(size_t pos) {\n         _pos += pos;\n-#ifdef __FORCE_VALGRIND_ON_SERIALIZE__\n-        forceValgrindStart2Pos();\n-#endif\n     }\n \n     /**\n      * Resets pos to 0, and sets limit to old pos. Use this before reading\n      * from a buffer you have written to\n      */\n     void flip() {\n-        _limit = _pos;\n         _pos = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eaae9afb93ad82a931e117a14babdbb271762c6"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY0ODE2Nw==", "bodyText": "Code removed", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r368648167", "createdAt": "2020-01-20T16:55:12Z", "author": {"login": "baldersheim"}, "path": "document/src/vespa/document/util/bytebuffer.h", "diffHunk": "@@ -134,17 +100,13 @@ class ByteBuffer\n \n     void incPosNoCheck(size_t pos) {\n         _pos += pos;\n-#ifdef __FORCE_VALGRIND_ON_SERIALIZE__\n-        forceValgrindStart2Pos();\n-#endif\n     }\n \n     /**\n      * Resets pos to 0, and sets limit to old pos. Use this before reading\n      * from a buffer you have written to\n      */\n     void flip() {\n-        _limit = _pos;\n         _pos = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk2MjI2NQ=="}, "originalCommit": {"oid": "5eaae9afb93ad82a931e117a14babdbb271762c6"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDY3MDIyOnYy", "diffSide": "RIGHT", "path": "document/src/tests/documentupdatetestcase.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNDowMjoxMVrOFf7Abw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOToxMTo0OVrOFgFlVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxNjk0Mw==", "bodyText": "Consider adding a data() function to nbostream, since c_str() implies a zero-terminated C string (I don't think we guarantee zero termination of nbostream buffers?)", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r369016943", "createdAt": "2020-01-21T14:02:11Z", "author": {"login": "vekterli"}, "path": "document/src/tests/documentupdatetestcase.cpp", "diffHunk": "@@ -83,25 +82,25 @@ void testRoundtripSerialize(const UpdateType& update, const DataType &type) {\n }\n \n void\n-writeBufferToFile(const ByteBuffer &buf, const vespalib::string &fileName)\n+writeBufferToFile(const nbostream &buf, const vespalib::string &fileName)\n {\n     auto file = std::fstream(fileName, std::ios::out | std::ios::binary);\n-    file.write(buf.getBuffer(), buf.getPos());\n+    file.write(buf.c_str(), buf.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da91b7fd521edc6b00498247c91a58a3d8c132b5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE5MDIyOA==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r369190228", "createdAt": "2020-01-21T19:11:49Z", "author": {"login": "baldersheim"}, "path": "document/src/tests/documentupdatetestcase.cpp", "diffHunk": "@@ -83,25 +82,25 @@ void testRoundtripSerialize(const UpdateType& update, const DataType &type) {\n }\n \n void\n-writeBufferToFile(const ByteBuffer &buf, const vespalib::string &fileName)\n+writeBufferToFile(const nbostream &buf, const vespalib::string &fileName)\n {\n     auto file = std::fstream(fileName, std::ios::out | std::ios::binary);\n-    file.write(buf.getBuffer(), buf.getPos());\n+    file.write(buf.c_str(), buf.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxNjk0Mw=="}, "originalCommit": {"oid": "da91b7fd521edc6b00498247c91a58a3d8c132b5"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDc2MTU5OnYy", "diffSide": "RIGHT", "path": "document/src/vespa/document/util/bytebuffer.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNDoyNzoxMVrOFf73-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo0OToxNVrOFgGrRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzMTE2Mg==", "bodyText": "As a bit of an aside, what is the rationale behind us zero-terminating ByteBuffers during copy construction? I'm not sure if this is an invariant we maintain when constructing ByteBuffers from raw buffers. Seems like if we e.g. try to alloc page-aligned sizes, this behavior will cause copied allocs to use one more page than intended from the one added byte.", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r369031162", "createdAt": "2020-01-21T14:27:11Z", "author": {"login": "vekterli"}, "path": "document/src/vespa/document/util/bytebuffer.cpp", "diffHunk": "@@ -65,21 +84,17 @@ ByteBuffer::ByteBuffer(const ByteBuffer& rhs) :\n       _ownedBuffer()\n {\n     if (rhs._len > 0 && rhs._buffer) {\n-        Alloc::alloc(rhs._len + 1).swap(_ownedBuffer);\n-        _buffer = static_cast<char *>(_ownedBuffer.get());\n-        memcpy(_buffer, rhs._buffer, rhs._len);\n-        _buffer[rhs._len] = 0;\n+        Alloc buf = Alloc::alloc(rhs._len + 1);\n+        memcpy(buf.get(), rhs._buffer, rhs._len);\n+        static_cast<char *>(buf.get())[rhs._len] = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da91b7fd521edc6b00498247c91a58a3d8c132b5"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE5MDgyNg==", "bodyText": "I have no clue. This is the only place we do so and it is not consistent. I will try to remove it and see how it goes.", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r369190826", "createdAt": "2020-01-21T19:13:04Z", "author": {"login": "baldersheim"}, "path": "document/src/vespa/document/util/bytebuffer.cpp", "diffHunk": "@@ -65,21 +84,17 @@ ByteBuffer::ByteBuffer(const ByteBuffer& rhs) :\n       _ownedBuffer()\n {\n     if (rhs._len > 0 && rhs._buffer) {\n-        Alloc::alloc(rhs._len + 1).swap(_ownedBuffer);\n-        _buffer = static_cast<char *>(_ownedBuffer.get());\n-        memcpy(_buffer, rhs._buffer, rhs._len);\n-        _buffer[rhs._len] = 0;\n+        Alloc buf = Alloc::alloc(rhs._len + 1);\n+        memcpy(buf.get(), rhs._buffer, rhs._len);\n+        static_cast<char *>(buf.get())[rhs._len] = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzMTE2Mg=="}, "originalCommit": {"oid": "da91b7fd521edc6b00498247c91a58a3d8c132b5"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIwODEzNA==", "bodyText": "Removed.", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r369208134", "createdAt": "2020-01-21T19:49:15Z", "author": {"login": "baldersheim"}, "path": "document/src/vespa/document/util/bytebuffer.cpp", "diffHunk": "@@ -65,21 +84,17 @@ ByteBuffer::ByteBuffer(const ByteBuffer& rhs) :\n       _ownedBuffer()\n {\n     if (rhs._len > 0 && rhs._buffer) {\n-        Alloc::alloc(rhs._len + 1).swap(_ownedBuffer);\n-        _buffer = static_cast<char *>(_ownedBuffer.get());\n-        memcpy(_buffer, rhs._buffer, rhs._len);\n-        _buffer[rhs._len] = 0;\n+        Alloc buf = Alloc::alloc(rhs._len + 1);\n+        memcpy(buf.get(), rhs._buffer, rhs._len);\n+        static_cast<char *>(buf.get())[rhs._len] = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzMTE2Mg=="}, "originalCommit": {"oid": "da91b7fd521edc6b00498247c91a58a3d8c132b5"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDc4ODI5OnYy", "diffSide": "RIGHT", "path": "document/src/vespa/document/util/bytebuffer.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNDozNDozMlrOFf8Ixg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo0MzowMFrOFgGfgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzNTQ2Mg==", "bodyText": "Consider replacing these reinterpret_casts with memcpy instead for happier days with less casts", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r369035462", "createdAt": "2020-01-21T14:34:32Z", "author": {"login": "vekterli"}, "path": "document/src/vespa/document/util/bytebuffer.cpp", "diffHunk": "@@ -132,309 +128,44 @@ void ByteBuffer::getNumericNetwork(int16_t & v) {\n     if (__builtin_expect(getRemaining() < sizeof(v), 0)) {\n         throwOutOfBounds(getRemaining(), sizeof(v));\n     } else {\n-        uint16_t val = *(uint16_t *) (void *) getBufferAtPos();\n+        uint16_t val = *reinterpret_cast<const uint16_t *>(getBufferAtPos());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da91b7fd521edc6b00498247c91a58a3d8c132b5"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIwNTEyMw==", "bodyText": "Done", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r369205123", "createdAt": "2020-01-21T19:43:00Z", "author": {"login": "baldersheim"}, "path": "document/src/vespa/document/util/bytebuffer.cpp", "diffHunk": "@@ -132,309 +128,44 @@ void ByteBuffer::getNumericNetwork(int16_t & v) {\n     if (__builtin_expect(getRemaining() < sizeof(v), 0)) {\n         throwOutOfBounds(getRemaining(), sizeof(v));\n     } else {\n-        uint16_t val = *(uint16_t *) (void *) getBufferAtPos();\n+        uint16_t val = *reinterpret_cast<const uint16_t *>(getBufferAtPos());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzNTQ2Mg=="}, "originalCommit": {"oid": "da91b7fd521edc6b00498247c91a58a3d8c132b5"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MTI1NTE0OnYy", "diffSide": "RIGHT", "path": "storageapi/src/vespa/storageapi/messageapi/returncode.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjozMzo0NlrOFgAqRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo0MjowNVrOFgGdzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEwOTU3NQ==", "bodyText": "Consider adding explicit operator<< for ReturnCode; it is used in many unit test macros so having it ostreamable makes \"expectation vs. reality\" printing much better.\nThis would also remove need to add toString() calls in a lot of the result printing functions.", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r369109575", "createdAt": "2020-01-21T16:33:46Z", "author": {"login": "vekterli"}, "path": "storageapi/src/vespa/storageapi/messageapi/returncode.h", "diffHunk": "@@ -121,8 +102,7 @@ class ReturnCode : public document::Deserializable,\n     bool isShutdownRelated() const;\n     bool isBucketDisappearance() const;\n     bool isNonCriticalForIntegrityChecker() const;\n+    vespalib::string toString() const;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da91b7fd521edc6b00498247c91a58a3d8c132b5"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIwNDY4NA==", "bodyText": "Done", "url": "https://github.com/vespa-engine/vespa/pull/11822#discussion_r369204684", "createdAt": "2020-01-21T19:42:05Z", "author": {"login": "baldersheim"}, "path": "storageapi/src/vespa/storageapi/messageapi/returncode.h", "diffHunk": "@@ -121,8 +102,7 @@ class ReturnCode : public document::Deserializable,\n     bool isShutdownRelated() const;\n     bool isBucketDisappearance() const;\n     bool isNonCriticalForIntegrityChecker() const;\n+    vespalib::string toString() const;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEwOTU3NQ=="}, "originalCommit": {"oid": "da91b7fd521edc6b00498247c91a58a3d8c132b5"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2670, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}