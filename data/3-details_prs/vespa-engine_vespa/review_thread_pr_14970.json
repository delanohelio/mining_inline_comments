{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2NzI2MTMy", "number": 14970, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDowODowM1rOEvzIlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDowODowM1rOEvzIlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTU2MzExOnYy", "diffSide": "RIGHT", "path": "storage/src/vespa/storage/persistence/filestorage/filestormetrics.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDowODowNFrOHk-x5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOToyMzowMVrOHlNj2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUzOTM2NA==", "bodyText": "Consider replacing with assert", "url": "https://github.com/vespa-engine/vespa/pull/14970#discussion_r508539364", "createdAt": "2020-10-20T14:08:04Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/persistence/filestorage/filestormetrics.cpp", "diffHunk": "@@ -262,24 +262,16 @@ FileStorMetrics::FileStorMetrics(const LoadTypeSet&)\n \n FileStorMetrics::~FileStorMetrics() = default;\n \n-void FileStorMetrics::initDiskMetrics(uint16_t numDisks, const LoadTypeSet& loadTypes, uint32_t numStripes, uint32_t threadsPerDisk)\n+void FileStorMetrics::initDiskMetrics(const LoadTypeSet& loadTypes, uint32_t numStripes, uint32_t threadsPerDisk)\n {\n-    if (!disks.empty()) {\n-        throw vespalib::IllegalStateException(\"Can't initialize disks twice\", VESPA_STRLOC);\n-    }\n-    disks.clear();\n-    disks.resize(numDisks);\n-    for (uint32_t i=0; i<numDisks; ++i) {\n-        // Currently FileStorHandlerImpl expects metrics to exist for\n-        // disks that are not in use too.\n-        std::ostringstream desc;\n-        std::ostringstream name;\n-        name << \"disk_\" << i;\n-        desc << \"Disk \" << i;\n-        disks[i] = std::make_shared<FileStorDiskMetrics>( name.str(), desc.str(), loadTypes, this);\n-        sum.addMetricToSum(*disks[i]);\n-        disks[i]->initDiskMetrics(loadTypes, numStripes, threadsPerDisk);\n+    if (disk) {\n+        throw vespalib::IllegalStateException(\"Can't initialize disk twice\", VESPA_STRLOC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da340d7fcb16069b90dc382a60b20610a642ae7c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4MTUzMQ==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/14970#discussion_r508781531", "createdAt": "2020-10-20T19:23:01Z", "author": {"login": "baldersheim"}, "path": "storage/src/vespa/storage/persistence/filestorage/filestormetrics.cpp", "diffHunk": "@@ -262,24 +262,16 @@ FileStorMetrics::FileStorMetrics(const LoadTypeSet&)\n \n FileStorMetrics::~FileStorMetrics() = default;\n \n-void FileStorMetrics::initDiskMetrics(uint16_t numDisks, const LoadTypeSet& loadTypes, uint32_t numStripes, uint32_t threadsPerDisk)\n+void FileStorMetrics::initDiskMetrics(const LoadTypeSet& loadTypes, uint32_t numStripes, uint32_t threadsPerDisk)\n {\n-    if (!disks.empty()) {\n-        throw vespalib::IllegalStateException(\"Can't initialize disks twice\", VESPA_STRLOC);\n-    }\n-    disks.clear();\n-    disks.resize(numDisks);\n-    for (uint32_t i=0; i<numDisks; ++i) {\n-        // Currently FileStorHandlerImpl expects metrics to exist for\n-        // disks that are not in use too.\n-        std::ostringstream desc;\n-        std::ostringstream name;\n-        name << \"disk_\" << i;\n-        desc << \"Disk \" << i;\n-        disks[i] = std::make_shared<FileStorDiskMetrics>( name.str(), desc.str(), loadTypes, this);\n-        sum.addMetricToSum(*disks[i]);\n-        disks[i]->initDiskMetrics(loadTypes, numStripes, threadsPerDisk);\n+    if (disk) {\n+        throw vespalib::IllegalStateException(\"Can't initialize disk twice\", VESPA_STRLOC);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUzOTM2NA=="}, "originalCommit": {"oid": "da340d7fcb16069b90dc382a60b20610a642ae7c"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1104, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}