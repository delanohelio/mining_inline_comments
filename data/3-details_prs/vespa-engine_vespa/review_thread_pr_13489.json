{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MDM3MzYy", "number": 13489, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwOTowMTowNFrOEC4B5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwOTowMTowNFrOEC4B5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDUwNTk3OnYy", "diffSide": "RIGHT", "path": "configserver/src/main/java/com/yahoo/vespa/config/server/application/TenantApplications.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwOTowMTowNFrOGfmUrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwOToyMTowOFrOGfm_sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc4NjkyNw==", "bodyText": "If all the things are directly available for injection, I suggest to do that instead of using the GlobalComponentRegistry.", "url": "https://github.com/vespa-engine/vespa/pull/13489#discussion_r435786927", "createdAt": "2020-06-05T09:01:04Z", "author": {"login": "gjoranv"}, "path": "configserver/src/main/java/com/yahoo/vespa/config/server/application/TenantApplications.java", "diffHunk": "@@ -38,32 +53,43 @@\n  * @author Ulf Lilleengen\n  * @author jonmv\n  */\n-public class TenantApplications {\n+public class TenantApplications implements RequestHandler, ReloadHandler, HostValidator<ApplicationId> {\n \n     private static final Logger log = Logger.getLogger(TenantApplications.class.getName());\n \n     private final Curator curator;\n     private final Path applicationsPath;\n     private final Path locksPath;\n     private final Curator.DirectoryCache directoryCache;\n-    private final ReloadHandler reloadHandler;\n     private final Executor zkWatcherExecutor;\n+    private final Metrics metrics;\n+    private final TenantName tenant;\n+    private final List<ReloadListener> reloadListeners;\n+    private final ConfigResponseFactory responseFactory;\n+    private final HostRegistry<ApplicationId> hostRegistry;\n+    private final ApplicationMapper applicationMapper = new ApplicationMapper();\n+    private final MetricUpdater tenantMetricUpdater;\n+    private final Clock clock = Clock.systemUTC();\n \n-    private TenantApplications(Curator curator, ReloadHandler reloadHandler, TenantName tenant,\n-                               ExecutorService zkCacheExecutor, StripedExecutor<TenantName> zkWatcherExecutor) {\n-        this.curator = curator;\n+\n+    private TenantApplications(TenantName tenant, GlobalComponentRegistry registry) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be78d3ca58195e5461986f50e0597cfbf16f8810"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc5NzkzNg==", "bodyText": "Yes, agreed, just need to do it in steps", "url": "https://github.com/vespa-engine/vespa/pull/13489#discussion_r435797936", "createdAt": "2020-06-05T09:21:08Z", "author": {"login": "hmusum"}, "path": "configserver/src/main/java/com/yahoo/vespa/config/server/application/TenantApplications.java", "diffHunk": "@@ -38,32 +53,43 @@\n  * @author Ulf Lilleengen\n  * @author jonmv\n  */\n-public class TenantApplications {\n+public class TenantApplications implements RequestHandler, ReloadHandler, HostValidator<ApplicationId> {\n \n     private static final Logger log = Logger.getLogger(TenantApplications.class.getName());\n \n     private final Curator curator;\n     private final Path applicationsPath;\n     private final Path locksPath;\n     private final Curator.DirectoryCache directoryCache;\n-    private final ReloadHandler reloadHandler;\n     private final Executor zkWatcherExecutor;\n+    private final Metrics metrics;\n+    private final TenantName tenant;\n+    private final List<ReloadListener> reloadListeners;\n+    private final ConfigResponseFactory responseFactory;\n+    private final HostRegistry<ApplicationId> hostRegistry;\n+    private final ApplicationMapper applicationMapper = new ApplicationMapper();\n+    private final MetricUpdater tenantMetricUpdater;\n+    private final Clock clock = Clock.systemUTC();\n \n-    private TenantApplications(Curator curator, ReloadHandler reloadHandler, TenantName tenant,\n-                               ExecutorService zkCacheExecutor, StripedExecutor<TenantName> zkWatcherExecutor) {\n-        this.curator = curator;\n+\n+    private TenantApplications(TenantName tenant, GlobalComponentRegistry registry) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc4NjkyNw=="}, "originalCommit": {"oid": "be78d3ca58195e5461986f50e0597cfbf16f8810"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1985, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}