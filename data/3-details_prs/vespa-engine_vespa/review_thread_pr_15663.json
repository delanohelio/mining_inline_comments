{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNDI0NDg1", "number": 15663, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMDoxNTo1OVrOFAumNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMToyNjozNVrOFAwWOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzA3NzY3OnYy", "diffSide": "RIGHT", "path": "fnet/src/vespa/fnet/transport_thread.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMDoxNTo1OVrOH_KJsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMDozOToyMVrOH_LC8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk4ODY1Ng==", "bodyText": "do not use relaxed memory order here.", "url": "https://github.com/vespa-engine/vespa/pull/15663#discussion_r535988656", "createdAt": "2020-12-04T10:15:59Z", "author": {"login": "havardpe"}, "path": "fnet/src/vespa/fnet/transport_thread.cpp", "diffHunk": "@@ -234,7 +235,7 @@ FNET_TransportThread::~FNET_TransportThread()\n     {\n         std::lock_guard<std::mutex> guard(_lock);\n     }\n-    if (_started && !_finished) {\n+    if (_started.load(std::memory_order_relaxed) && !_finished) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9927dcd8cb63ce2ed6e1c35d851f687c0fe764c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMzMxNQ==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/15663#discussion_r536003315", "createdAt": "2020-12-04T10:39:21Z", "author": {"login": "baldersheim"}, "path": "fnet/src/vespa/fnet/transport_thread.cpp", "diffHunk": "@@ -234,7 +235,7 @@ FNET_TransportThread::~FNET_TransportThread()\n     {\n         std::lock_guard<std::mutex> guard(_lock);\n     }\n-    if (_started && !_finished) {\n+    if (_started.load(std::memory_order_relaxed) && !_finished) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk4ODY1Ng=="}, "originalCommit": {"oid": "c9927dcd8cb63ce2ed6e1c35d851f687c0fe764c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzA4NjE5OnYy", "diffSide": "RIGHT", "path": "fnet/src/vespa/fnet/transport_thread.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMDoxNzo1N1rOH_KOoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMDozOTo0M1rOH_LDug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk4OTkyMQ==", "bodyText": "you should rename this lock instead of the other lock", "url": "https://github.com/vespa-engine/vespa/pull/15663#discussion_r535989921", "createdAt": "2020-12-04T10:17:57Z", "author": {"login": "havardpe"}, "path": "fnet/src/vespa/fnet/transport_thread.h", "diffHunk": "@@ -43,10 +43,11 @@ class FNET_TransportThread : public FastOS_Runnable\n     Selector                 _selector;       // I/O event generator\n     FNET_PacketQueue_NoLock  _queue;          // outer event queue\n     FNET_PacketQueue_NoLock  _myQueue;        // inner event queue\n-    std::mutex               _lock;           // used for synchronization\n-    std::condition_variable  _cond;           // used for synchronization\n+    std::mutex               _qLock;          // protects the Q\n+    std::mutex               _lock;           // used for synchronization during shutdown", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9927dcd8cb63ce2ed6e1c35d851f687c0fe764c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMzUxNA==", "bodyText": "Fixed,", "url": "https://github.com/vespa-engine/vespa/pull/15663#discussion_r536003514", "createdAt": "2020-12-04T10:39:43Z", "author": {"login": "baldersheim"}, "path": "fnet/src/vespa/fnet/transport_thread.h", "diffHunk": "@@ -43,10 +43,11 @@ class FNET_TransportThread : public FastOS_Runnable\n     Selector                 _selector;       // I/O event generator\n     FNET_PacketQueue_NoLock  _queue;          // outer event queue\n     FNET_PacketQueue_NoLock  _myQueue;        // inner event queue\n-    std::mutex               _lock;           // used for synchronization\n-    std::condition_variable  _cond;           // used for synchronization\n+    std::mutex               _qLock;          // protects the Q\n+    std::mutex               _lock;           // used for synchronization during shutdown", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk4OTkyMQ=="}, "originalCommit": {"oid": "c9927dcd8cb63ce2ed6e1c35d851f687c0fe764c"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzA4NzU4OnYy", "diffSide": "RIGHT", "path": "fnet/src/vespa/fnet/transport_thread.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMDoxODoxN1rOH_KPaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMDozOTo1NVrOH_LEKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5MDEyMA==", "bodyText": "also rename this to make it match the renamed lock", "url": "https://github.com/vespa-engine/vespa/pull/15663#discussion_r535990120", "createdAt": "2020-12-04T10:18:17Z", "author": {"login": "havardpe"}, "path": "fnet/src/vespa/fnet/transport_thread.h", "diffHunk": "@@ -43,10 +43,11 @@ class FNET_TransportThread : public FastOS_Runnable\n     Selector                 _selector;       // I/O event generator\n     FNET_PacketQueue_NoLock  _queue;          // outer event queue\n     FNET_PacketQueue_NoLock  _myQueue;        // inner event queue\n-    std::mutex               _lock;           // used for synchronization\n-    std::condition_variable  _cond;           // used for synchronization\n+    std::mutex               _qLock;          // protects the Q\n+    std::mutex               _lock;           // used for synchronization during shutdown\n+    std::condition_variable  _cond;           // used for synchronization during shutdown", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9927dcd8cb63ce2ed6e1c35d851f687c0fe764c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMzYyNg==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/15663#discussion_r536003626", "createdAt": "2020-12-04T10:39:55Z", "author": {"login": "baldersheim"}, "path": "fnet/src/vespa/fnet/transport_thread.h", "diffHunk": "@@ -43,10 +43,11 @@ class FNET_TransportThread : public FastOS_Runnable\n     Selector                 _selector;       // I/O event generator\n     FNET_PacketQueue_NoLock  _queue;          // outer event queue\n     FNET_PacketQueue_NoLock  _myQueue;        // inner event queue\n-    std::mutex               _lock;           // used for synchronization\n-    std::condition_variable  _cond;           // used for synchronization\n+    std::mutex               _qLock;          // protects the Q\n+    std::mutex               _lock;           // used for synchronization during shutdown\n+    std::condition_variable  _cond;           // used for synchronization during shutdown", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk5MDEyMA=="}, "originalCommit": {"oid": "c9927dcd8cb63ce2ed6e1c35d851f687c0fe764c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzM2NDQxOnYy", "diffSide": "RIGHT", "path": "fnet/src/vespa/fnet/transport_thread.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMToyNjozNVrOH_MurA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMTo1MjoxMFrOH_Nldw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAzMDg5Mg==", "bodyText": "consider some extra cleanup by removing _waitFinished altogether and always notifying all.", "url": "https://github.com/vespa-engine/vespa/pull/15663#discussion_r536030892", "createdAt": "2020-12-04T11:26:35Z", "author": {"login": "havardpe"}, "path": "fnet/src/vespa/fnet/transport_thread.cpp", "diffHunk": "@@ -556,10 +549,10 @@ FNET_TransportThread::endEventLoop() {\n            _myQueue.IsEmpty_NoLock());\n \n     {\n-        std::lock_guard<std::mutex> guard(_lock);\n+        std::lock_guard<std::mutex> guard(_shutdownLock);\n         _finished = true;\n         if (_waitFinished) {\n-            _cond.notify_all();\n+            _shutdownCond.notify_all();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cff80a28fe335379099ef561ee652f825aeb396c"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAzNTM4Mg==", "bodyText": "Good point, I was wondering about its actual value.", "url": "https://github.com/vespa-engine/vespa/pull/15663#discussion_r536035382", "createdAt": "2020-12-04T11:34:30Z", "author": {"login": "baldersheim"}, "path": "fnet/src/vespa/fnet/transport_thread.cpp", "diffHunk": "@@ -556,10 +549,10 @@ FNET_TransportThread::endEventLoop() {\n            _myQueue.IsEmpty_NoLock());\n \n     {\n-        std::lock_guard<std::mutex> guard(_lock);\n+        std::lock_guard<std::mutex> guard(_shutdownLock);\n         _finished = true;\n         if (_waitFinished) {\n-            _cond.notify_all();\n+            _shutdownCond.notify_all();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAzMDg5Mg=="}, "originalCommit": {"oid": "cff80a28fe335379099ef561ee652f825aeb396c"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA0NDkxOQ==", "bodyText": "It is the 'avoid signals unless someone is waiting' pattern used elsewhere, but no real need for it here.", "url": "https://github.com/vespa-engine/vespa/pull/15663#discussion_r536044919", "createdAt": "2020-12-04T11:52:10Z", "author": {"login": "havardpe"}, "path": "fnet/src/vespa/fnet/transport_thread.cpp", "diffHunk": "@@ -556,10 +549,10 @@ FNET_TransportThread::endEventLoop() {\n            _myQueue.IsEmpty_NoLock());\n \n     {\n-        std::lock_guard<std::mutex> guard(_lock);\n+        std::lock_guard<std::mutex> guard(_shutdownLock);\n         _finished = true;\n         if (_waitFinished) {\n-            _cond.notify_all();\n+            _shutdownCond.notify_all();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAzMDg5Mg=="}, "originalCommit": {"oid": "cff80a28fe335379099ef561ee652f825aeb396c"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2124, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}