{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxODYyMzkz", "number": 13526, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTozMjo0OFrOED8Q7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTozMjo0OFrOED8Q7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTY4NTU4OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/tensor/nearest_neighbor_index.h", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTozMjo0OFrOGhQYjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzoyOToxN1rOGhoL_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyNDYyMw==", "bodyText": "promise and future handling should be at a layer above this code. Consider using std::unique_ptr<PrepareResult>or PrepareResult&instead of std::future<std::unique_ptr<PrepareResult>>.", "url": "https://github.com/vespa-engine/vespa/pull/13526#discussion_r437524623", "createdAt": "2020-06-09T15:32:48Z", "author": {"login": "toregge"}, "path": "searchlib/src/vespa/searchlib/tensor/nearest_neighbor_index.h", "diffHunk": "@@ -36,6 +38,38 @@ class NearestNeighborIndex {\n     };\n     virtual ~NearestNeighborIndex() {}\n     virtual void add_document(uint32_t docid) = 0;\n+\n+    /**\n+     * Performs the prepare step in a two-phase operation to add a document to the index.\n+     *\n+     * This function can be called by any thread.\n+     * The document to add is represented by the given vector as it is _not_ stored in the enclosing tensor attribute at this point in time.\n+     * It should return the result of the costly and non-modifying part of this operation.\n+     * The given read guard must be kept in the result.\n+     */\n+    virtual std::unique_ptr<PrepareResult> prepare_add_document(uint32_t docid,\n+                                                                vespalib::tensor::TypedCells vector,\n+                                                                vespalib::GenerationHandler::Guard read_guard) const {\n+        // TODO: Make it pure virtual after more wiring is complete.\n+        (void) docid;\n+        (void) vector;\n+        (void) read_guard;\n+        return std::unique_ptr<PrepareResult>();\n+    }\n+\n+    /**\n+     * Performs the complete step in a two-phase operation to add a document to the index.\n+     *\n+     * This function is only called by the attribute writer thread.\n+     * It must wait for the result from the prepare step (via the future) before it does the modifying changes.\n+     */\n+    virtual void complete_add_document(uint32_t docid,\n+                                       std::future<std::unique_ptr<PrepareResult>> prepare_result) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "087d679c6e16f8794b26f474151b2703363b5392"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkxNDYyMQ==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/13526#discussion_r437914621", "createdAt": "2020-06-10T07:29:17Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/tensor/nearest_neighbor_index.h", "diffHunk": "@@ -36,6 +38,38 @@ class NearestNeighborIndex {\n     };\n     virtual ~NearestNeighborIndex() {}\n     virtual void add_document(uint32_t docid) = 0;\n+\n+    /**\n+     * Performs the prepare step in a two-phase operation to add a document to the index.\n+     *\n+     * This function can be called by any thread.\n+     * The document to add is represented by the given vector as it is _not_ stored in the enclosing tensor attribute at this point in time.\n+     * It should return the result of the costly and non-modifying part of this operation.\n+     * The given read guard must be kept in the result.\n+     */\n+    virtual std::unique_ptr<PrepareResult> prepare_add_document(uint32_t docid,\n+                                                                vespalib::tensor::TypedCells vector,\n+                                                                vespalib::GenerationHandler::Guard read_guard) const {\n+        // TODO: Make it pure virtual after more wiring is complete.\n+        (void) docid;\n+        (void) vector;\n+        (void) read_guard;\n+        return std::unique_ptr<PrepareResult>();\n+    }\n+\n+    /**\n+     * Performs the complete step in a two-phase operation to add a document to the index.\n+     *\n+     * This function is only called by the attribute writer thread.\n+     * It must wait for the result from the prepare step (via the future) before it does the modifying changes.\n+     */\n+    virtual void complete_add_document(uint32_t docid,\n+                                       std::future<std::unique_ptr<PrepareResult>> prepare_result) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyNDYyMw=="}, "originalCommit": {"oid": "087d679c6e16f8794b26f474151b2703363b5392"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2016, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}