{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2MzM2MTEy", "number": 14211, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDozMzowM1rOEeVUCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDozNToxM1rOEeVYFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjQxOTMwOnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/tensor/direct_tensor_store/direct_tensor_store_test.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDozMzowM1rOHJ7VsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDo1NjozOVrOHJ8SGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE3MTQ0MA==", "bodyText": "Consider removing unneeded log setup.", "url": "https://github.com/vespa-engine/vespa/pull/14211#discussion_r480171440", "createdAt": "2020-08-31T14:33:03Z", "author": {"login": "toregge"}, "path": "searchlib/src/tests/tensor/direct_tensor_store/direct_tensor_store_test.cpp", "diffHunk": "@@ -0,0 +1,93 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include <vespa/searchlib/tensor/direct_tensor_store.h>\n+#include <vespa/vespalib/gtest/gtest.h>\n+#include <vespa/eval/tensor/default_tensor_engine.h>\n+#include <vespa/eval/tensor/tensor.h>\n+\n+#include <vespa/log/log.h>\n+LOG_SETUP(\"direct_tensor_store_test\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35cb626e2825376f4c88d62d5466bd8c205a8d4"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4NjkwNA==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/14211#discussion_r480186904", "createdAt": "2020-08-31T14:56:39Z", "author": {"login": "geirst"}, "path": "searchlib/src/tests/tensor/direct_tensor_store/direct_tensor_store_test.cpp", "diffHunk": "@@ -0,0 +1,93 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include <vespa/searchlib/tensor/direct_tensor_store.h>\n+#include <vespa/vespalib/gtest/gtest.h>\n+#include <vespa/eval/tensor/default_tensor_engine.h>\n+#include <vespa/eval/tensor/tensor.h>\n+\n+#include <vespa/log/log.h>\n+LOG_SETUP(\"direct_tensor_store_test\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE3MTQ0MA=="}, "originalCommit": {"oid": "e35cb626e2825376f4c88d62d5466bd8c205a8d4"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjQyOTY0OnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/tensor/direct_tensor_store/direct_tensor_store_test.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDozNToxM1rOHJ7bow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDo1Njo0N1rOHJ8Sdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE3Mjk2Mw==", "bodyText": "Consider removing unneeded equality check, passing identity check implies equality.", "url": "https://github.com/vespa-engine/vespa/pull/14211#discussion_r480172963", "createdAt": "2020-08-31T14:35:13Z", "author": {"login": "toregge"}, "path": "searchlib/src/tests/tensor/direct_tensor_store/direct_tensor_store_test.cpp", "diffHunk": "@@ -0,0 +1,93 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include <vespa/searchlib/tensor/direct_tensor_store.h>\n+#include <vespa/vespalib/gtest/gtest.h>\n+#include <vespa/eval/tensor/default_tensor_engine.h>\n+#include <vespa/eval/tensor/tensor.h>\n+\n+#include <vespa/log/log.h>\n+LOG_SETUP(\"direct_tensor_store_test\");\n+\n+using namespace search::tensor;\n+\n+using vespalib::datastore::EntryRef;\n+using vespalib::eval::TensorSpec;\n+using vespalib::tensor::DefaultTensorEngine;\n+using vespalib::tensor::Tensor;\n+\n+vespalib::string tensor_spec(\"tensor(x{})\");\n+\n+Tensor::UP\n+make_tensor(const TensorSpec& spec)\n+{\n+    auto value = DefaultTensorEngine::ref().from_spec(spec);\n+    auto* tensor = dynamic_cast<Tensor*>(value.get());\n+    assert(tensor != nullptr);\n+    value.release();\n+    return Tensor::UP(tensor);\n+}\n+\n+Tensor::UP\n+make_tensor(double value)\n+{\n+    return make_tensor(TensorSpec(tensor_spec).add({{\"x\", \"a\"}}, value));\n+}\n+\n+class DirectTensorStoreTest : public ::testing::Test {\n+public:\n+    DirectTensorStore store;\n+\n+    DirectTensorStoreTest() : store() {}\n+\n+    virtual ~DirectTensorStoreTest() {\n+        store.clearHoldLists();\n+    }\n+\n+    void expect_tensor(const Tensor* exp, EntryRef ref) {\n+        const auto* act = store.get_tensor(ref);\n+        ASSERT_TRUE(act);\n+        EXPECT_EQ(exp, act);\n+        EXPECT_EQ(*exp, *act);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35cb626e2825376f4c88d62d5466bd8c205a8d4"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4Njk5OQ==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/14211#discussion_r480186999", "createdAt": "2020-08-31T14:56:47Z", "author": {"login": "geirst"}, "path": "searchlib/src/tests/tensor/direct_tensor_store/direct_tensor_store_test.cpp", "diffHunk": "@@ -0,0 +1,93 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include <vespa/searchlib/tensor/direct_tensor_store.h>\n+#include <vespa/vespalib/gtest/gtest.h>\n+#include <vespa/eval/tensor/default_tensor_engine.h>\n+#include <vespa/eval/tensor/tensor.h>\n+\n+#include <vespa/log/log.h>\n+LOG_SETUP(\"direct_tensor_store_test\");\n+\n+using namespace search::tensor;\n+\n+using vespalib::datastore::EntryRef;\n+using vespalib::eval::TensorSpec;\n+using vespalib::tensor::DefaultTensorEngine;\n+using vespalib::tensor::Tensor;\n+\n+vespalib::string tensor_spec(\"tensor(x{})\");\n+\n+Tensor::UP\n+make_tensor(const TensorSpec& spec)\n+{\n+    auto value = DefaultTensorEngine::ref().from_spec(spec);\n+    auto* tensor = dynamic_cast<Tensor*>(value.get());\n+    assert(tensor != nullptr);\n+    value.release();\n+    return Tensor::UP(tensor);\n+}\n+\n+Tensor::UP\n+make_tensor(double value)\n+{\n+    return make_tensor(TensorSpec(tensor_spec).add({{\"x\", \"a\"}}, value));\n+}\n+\n+class DirectTensorStoreTest : public ::testing::Test {\n+public:\n+    DirectTensorStore store;\n+\n+    DirectTensorStoreTest() : store() {}\n+\n+    virtual ~DirectTensorStoreTest() {\n+        store.clearHoldLists();\n+    }\n+\n+    void expect_tensor(const Tensor* exp, EntryRef ref) {\n+        const auto* act = store.get_tensor(ref);\n+        ASSERT_TRUE(act);\n+        EXPECT_EQ(exp, act);\n+        EXPECT_EQ(*exp, *act);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE3Mjk2Mw=="}, "originalCommit": {"oid": "e35cb626e2825376f4c88d62d5466bd8c205a8d4"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1419, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}