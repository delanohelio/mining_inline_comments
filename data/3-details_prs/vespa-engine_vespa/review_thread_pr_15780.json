{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1OTkwMTg4", "number": 15780, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMTowMTozNFrOFDrkig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMTowMzoxM1rOFDrnIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDAzOTE0OnYy", "diffSide": "RIGHT", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/autoscale/Autoscaler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMTowMTozNFrOIDdHNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMToxNDoxMVrOIDdknA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ5MzYyMg==", "bodyText": "Consider simplifying to Math.max(1, minimumMeasurements).", "url": "https://github.com/vespa-engine/vespa/pull/15780#discussion_r540493622", "createdAt": "2020-12-10T21:01:34Z", "author": {"login": "mpolden"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/autoscale/Autoscaler.java", "diffHunk": "@@ -159,10 +160,15 @@ static Duration maxScalingWindow() {\n         return Duration.ofHours(48);\n     }\n \n-    /** Measurements are currently taken once a minute. See also scalingWindow */\n-    static int minimumMeasurementsPerNode(ClusterSpec cluster) {\n-        if (cluster.isStateful()) return 60;\n-        return 4;\n+    /** Returns the minimum measurements per node (average) we require to give autoscaling advice.*/\n+    private int minimumMeasurementsPerNode(Duration scalingWindow) {\n+        // Measurements are ideally taken every minute, but no guarantees\n+        // (network, nodes may be down, collecting is single threaded and may take longer than 1 minute to complete.\n+        // Since the metric window is 5 minutes, we won't really improve from measuring more often:\n+        long minimumMeasurements = scalingWindow.toMinutes() / 5;\n+        minimumMeasurements = Math.round(0.8 * minimumMeasurements); // Allow 20% metrics collection blackout\n+        if (minimumMeasurements < 1) minimumMeasurements = 1;\n+        return (int)minimumMeasurements;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c26f102ef7e0a06bab9d3daf6f99b6ef7dbbdd05"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUwMTE0OA==", "bodyText": "I always have to think for 1 second when I see max implementing min, so some times I try to do without.", "url": "https://github.com/vespa-engine/vespa/pull/15780#discussion_r540501148", "createdAt": "2020-12-10T21:14:11Z", "author": {"login": "bratseth"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/autoscale/Autoscaler.java", "diffHunk": "@@ -159,10 +160,15 @@ static Duration maxScalingWindow() {\n         return Duration.ofHours(48);\n     }\n \n-    /** Measurements are currently taken once a minute. See also scalingWindow */\n-    static int minimumMeasurementsPerNode(ClusterSpec cluster) {\n-        if (cluster.isStateful()) return 60;\n-        return 4;\n+    /** Returns the minimum measurements per node (average) we require to give autoscaling advice.*/\n+    private int minimumMeasurementsPerNode(Duration scalingWindow) {\n+        // Measurements are ideally taken every minute, but no guarantees\n+        // (network, nodes may be down, collecting is single threaded and may take longer than 1 minute to complete.\n+        // Since the metric window is 5 minutes, we won't really improve from measuring more often:\n+        long minimumMeasurements = scalingWindow.toMinutes() / 5;\n+        minimumMeasurements = Math.round(0.8 * minimumMeasurements); // Allow 20% metrics collection blackout\n+        if (minimumMeasurements < 1) minimumMeasurements = 1;\n+        return (int)minimumMeasurements;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ5MzYyMg=="}, "originalCommit": {"oid": "c26f102ef7e0a06bab9d3daf6f99b6ef7dbbdd05"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDA0NTc2OnYy", "diffSide": "RIGHT", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/autoscale/Autoscaler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMTowMzoxM1rOIDdLGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMToxMjoxNVrOIDdglg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ5NDYxNw==", "bodyText": "Unmatched (. \ud83d\ude04", "url": "https://github.com/vespa-engine/vespa/pull/15780#discussion_r540494617", "createdAt": "2020-12-10T21:03:13Z", "author": {"login": "mpolden"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/autoscale/Autoscaler.java", "diffHunk": "@@ -159,10 +160,15 @@ static Duration maxScalingWindow() {\n         return Duration.ofHours(48);\n     }\n \n-    /** Measurements are currently taken once a minute. See also scalingWindow */\n-    static int minimumMeasurementsPerNode(ClusterSpec cluster) {\n-        if (cluster.isStateful()) return 60;\n-        return 4;\n+    /** Returns the minimum measurements per node (average) we require to give autoscaling advice.*/\n+    private int minimumMeasurementsPerNode(Duration scalingWindow) {\n+        // Measurements are ideally taken every minute, but no guarantees\n+        // (network, nodes may be down, collecting is single threaded and may take longer than 1 minute to complete.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c26f102ef7e0a06bab9d3daf6f99b6ef7dbbdd05"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUwMDExOA==", "bodyText": "Thanks. i'll fix it later", "url": "https://github.com/vespa-engine/vespa/pull/15780#discussion_r540500118", "createdAt": "2020-12-10T21:12:15Z", "author": {"login": "bratseth"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/autoscale/Autoscaler.java", "diffHunk": "@@ -159,10 +160,15 @@ static Duration maxScalingWindow() {\n         return Duration.ofHours(48);\n     }\n \n-    /** Measurements are currently taken once a minute. See also scalingWindow */\n-    static int minimumMeasurementsPerNode(ClusterSpec cluster) {\n-        if (cluster.isStateful()) return 60;\n-        return 4;\n+    /** Returns the minimum measurements per node (average) we require to give autoscaling advice.*/\n+    private int minimumMeasurementsPerNode(Duration scalingWindow) {\n+        // Measurements are ideally taken every minute, but no guarantees\n+        // (network, nodes may be down, collecting is single threaded and may take longer than 1 minute to complete.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ5NDYxNw=="}, "originalCommit": {"oid": "c26f102ef7e0a06bab9d3daf6f99b6ef7dbbdd05"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2100, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}