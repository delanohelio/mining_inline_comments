{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyMzMxMzk4", "number": 15095, "title": "Smorgrav/tenantinfo", "bodyText": "I confirm that this contribution is made under the terms of the license found in the root directory of this repository's source tree and that I have the authority necessary to make this contribution on behalf of its copyright owner.", "createdAt": "2020-10-29T14:49:07Z", "url": "https://github.com/vespa-engine/vespa/pull/15095", "merged": true, "mergeCommit": {"oid": "65d0a37a01a4b1f2420b8f4cae3ea9091b01b189"}, "closed": true, "closedAt": "2020-11-02T10:54:42Z", "author": {"login": "smorgrav"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXO1OZAH2gAyNTEyMzMxMzk4OmE4YTNiNWIwYzg3NGEwMmFiMzY0ODk4ZDU2ZTJkNDgyZDI2OGJhYzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYhJnJgH2gAyNTEyMzMxMzk4OjQyNmZlODA1Zjc1MjA5MzIzNjdlYjI0ZTU1N2FkMGFmNWM1YTE3OTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0", "author": {"user": {"login": "smorgrav", "name": "Torbj\u00f8rn Sm\u00f8rgrav"}}, "url": "https://github.com/vespa-engine/vespa/commit/a8a3b5b0c874a02ab364898d56e2d482d268bac0", "committedDate": "2020-10-29T09:34:18Z", "message": "Add TenantInfo classes and wire them in CloudTenant and serialization code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7812b136b061fed17da514ab831a818bed7daf2", "author": {"user": {"login": "smorgrav", "name": "Torbj\u00f8rn Sm\u00f8rgrav"}}, "url": "https://github.com/vespa-engine/vespa/commit/a7812b136b061fed17da514ab831a818bed7daf2", "committedDate": "2020-10-29T12:15:28Z", "message": "Add unit tests and fix accordingly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "029c1d48dbf1a6405134156bd8d19363f536d00e", "author": {"user": {"login": "smorgrav", "name": "Torbj\u00f8rn Sm\u00f8rgrav"}}, "url": "https://github.com/vespa-engine/vespa/commit/029c1d48dbf1a6405134156bd8d19363f536d00e", "committedDate": "2020-10-29T13:10:36Z", "message": "Back and forth on which cursor to work with in tenantinfo serialization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0683da2b6254a001dbcb2b109e3f79dddaf0c10a", "author": {"user": {"login": "smorgrav", "name": "Torbj\u00f8rn Sm\u00f8rgrav"}}, "url": "https://github.com/vespa-engine/vespa/commit/0683da2b6254a001dbcb2b109e3f79dddaf0c10a", "committedDate": "2020-10-29T14:01:40Z", "message": "Remove rest api parser - for another pr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f87c7ea9fbc39bdc285db1357cc2af001309477", "author": {"user": {"login": "smorgrav", "name": "Torbj\u00f8rn Sm\u00f8rgrav"}}, "url": "https://github.com/vespa-engine/vespa/commit/2f87c7ea9fbc39bdc285db1357cc2af001309477", "committedDate": "2020-10-29T14:55:19Z", "message": "Do not use wildcard imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNjIwMTIy", "url": "https://github.com/vespa-engine/vespa/pull/15095#pullrequestreview-520620122", "createdAt": "2020-10-30T12:27:23Z", "commit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMjoyNzoyM1rOHrM6Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMjozMzoyOFrOHrNGxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MjMxNQ==", "bodyText": "Should be named simply EMPTY, same goes for the other classes.", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515062315", "createdAt": "2020-10-30T12:27:23Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.yahoo.vespa.hosted.controller.tenant;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Tenant information beyond technical tenant id and user authorizations.\n+ *\n+ * This info is used to capture generic support information and invoiced billing information.\n+ *\n+ * All fields are non null but strings can be empty\n+ */\n+public class TenantInfo {\n+    private final String name;\n+    private final String email;\n+    private final String website;\n+    private final String contactName;\n+    private final String contactEmail;\n+    private final String invoiceEmail;\n+    private final TenantInfoAddress address;\n+    private final TenantInfoBillingContact billingContact;\n+\n+    TenantInfo(String name, String email, String website, String contactName, String contactEmail,\n+               String invoiceEmail, TenantInfoAddress address, TenantInfoBillingContact billingContact) {\n+        this.name = Objects.requireNonNull(name);\n+        this.email = Objects.requireNonNull(email);\n+        this.website = Objects.requireNonNull(website);\n+        this.contactName = Objects.requireNonNull(contactName);\n+        this.contactEmail = Objects.requireNonNull(contactEmail);\n+        this.invoiceEmail = Objects.requireNonNull(invoiceEmail);\n+        this.address = Objects.requireNonNull(address);\n+        this.billingContact = Objects.requireNonNull(billingContact);\n+    }\n+\n+    public static TenantInfo EmptyInfo = new TenantInfo(\"\",\"\",\"\", \"\", \"\", \"\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2Mjk4MA==", "bodyText": "This should just call the constructor directly as the immutable builder methods will create a new object per field.", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515062980", "createdAt": "2020-10-30T12:28:43Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializer.java", "diffHunk": "@@ -145,6 +147,67 @@ private CloudTenant cloudTenantFrom(Inspector tenantObject) {\n         return keys.build();\n     }\n \n+    private TenantInfo tenantInfoFromSlime(Inspector infoObject) {\n+        return TenantInfo.EmptyInfo", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MzAzMQ==", "bodyText": "Same as above.", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515063031", "createdAt": "2020-10-30T12:28:50Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializer.java", "diffHunk": "@@ -145,6 +147,67 @@ private CloudTenant cloudTenantFrom(Inspector tenantObject) {\n         return keys.build();\n     }\n \n+    private TenantInfo tenantInfoFromSlime(Inspector infoObject) {\n+        return TenantInfo.EmptyInfo\n+                .withName(infoObject.field(\"name\").asString())\n+                .withEmail(infoObject.field(\"email\").asString())\n+                .withWebsite(infoObject.field(\"website\").asString())\n+                .withContactName(infoObject.field(\"contactName\").asString())\n+                .withContactEmail(infoObject.field(\"contactEmail\").asString())\n+                .withAddress(tenantInfoAddressFromSlime(infoObject.field(\"address\")))\n+                .withBillingContact(tenantInfoBillingContactFromSlime(infoObject.field(\"billingContact\")));\n+    }\n+\n+    private TenantInfoAddress tenantInfoAddressFromSlime(Inspector addressObject) {\n+        return TenantInfoAddress.EmptyAddress", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MzA3Mw==", "bodyText": "Same as above.", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515063073", "createdAt": "2020-10-30T12:28:55Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializer.java", "diffHunk": "@@ -145,6 +147,67 @@ private CloudTenant cloudTenantFrom(Inspector tenantObject) {\n         return keys.build();\n     }\n \n+    private TenantInfo tenantInfoFromSlime(Inspector infoObject) {\n+        return TenantInfo.EmptyInfo\n+                .withName(infoObject.field(\"name\").asString())\n+                .withEmail(infoObject.field(\"email\").asString())\n+                .withWebsite(infoObject.field(\"website\").asString())\n+                .withContactName(infoObject.field(\"contactName\").asString())\n+                .withContactEmail(infoObject.field(\"contactEmail\").asString())\n+                .withAddress(tenantInfoAddressFromSlime(infoObject.field(\"address\")))\n+                .withBillingContact(tenantInfoBillingContactFromSlime(infoObject.field(\"billingContact\")));\n+    }\n+\n+    private TenantInfoAddress tenantInfoAddressFromSlime(Inspector addressObject) {\n+        return TenantInfoAddress.EmptyAddress\n+                .withAddressLines(addressObject.field(\"addressLines\").asString())\n+                .withPostalCodeOrZip(addressObject.field(\"postalCodeOrZip\").asString())\n+                .withCity(addressObject.field(\"city\").asString())\n+                .withStateRegionProvince(addressObject.field(\"stateRegionProvince\").asString())\n+                .withCountry(addressObject.field(\"country\").asString());\n+    }\n+\n+    private TenantInfoBillingContact tenantInfoBillingContactFromSlime(Inspector billingObject) {\n+        return TenantInfoBillingContact.EmptyBillingContact", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MzgyNg==", "bodyText": "If this implements equals/hashCode you can simply return this.equals(EMPTY). Same for the other classes. This will also simplify serialization testing.", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515063826", "createdAt": "2020-10-30T12:30:16Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.yahoo.vespa.hosted.controller.tenant;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Tenant information beyond technical tenant id and user authorizations.\n+ *\n+ * This info is used to capture generic support information and invoiced billing information.\n+ *\n+ * All fields are non null but strings can be empty\n+ */\n+public class TenantInfo {\n+    private final String name;\n+    private final String email;\n+    private final String website;\n+    private final String contactName;\n+    private final String contactEmail;\n+    private final String invoiceEmail;\n+    private final TenantInfoAddress address;\n+    private final TenantInfoBillingContact billingContact;\n+\n+    TenantInfo(String name, String email, String website, String contactName, String contactEmail,\n+               String invoiceEmail, TenantInfoAddress address, TenantInfoBillingContact billingContact) {\n+        this.name = Objects.requireNonNull(name);\n+        this.email = Objects.requireNonNull(email);\n+        this.website = Objects.requireNonNull(website);\n+        this.contactName = Objects.requireNonNull(contactName);\n+        this.contactEmail = Objects.requireNonNull(contactEmail);\n+        this.invoiceEmail = Objects.requireNonNull(invoiceEmail);\n+        this.address = Objects.requireNonNull(address);\n+        this.billingContact = Objects.requireNonNull(billingContact);\n+    }\n+\n+    public static TenantInfo EmptyInfo = new TenantInfo(\"\",\"\",\"\", \"\", \"\", \"\",\n+            TenantInfoAddress.EmptyAddress, TenantInfoBillingContact.EmptyBillingContact);\n+\n+    public String name() {\n+        return name;\n+    }\n+\n+    public String email() {\n+        return email;\n+    }\n+\n+    public String website() {\n+        return website;\n+    }\n+\n+    public String contactName() {\n+        return contactName;\n+    }\n+\n+    public String contactEmail() {\n+        return contactEmail;\n+    }\n+\n+    public String invoiceEmail() {\n+        return invoiceEmail;\n+    }\n+\n+    public TenantInfoAddress address() {\n+        return address;\n+    }\n+\n+    public TenantInfoBillingContact billingContact() {\n+        return billingContact;\n+    }\n+\n+    public TenantInfo withName(String newName) {\n+        return new TenantInfo(newName, email, website, contactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withEmail(String newEmail) {\n+        return new TenantInfo(name, newEmail, website, contactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withWebsite(String newWebsite) {\n+        return new TenantInfo(name, email, newWebsite, contactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withContactName(String newContactName) {\n+        return new TenantInfo(name, email, website, newContactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withContactEmail(String newContactEmail) {\n+        return new TenantInfo(name, email, website, contactName, newContactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withInvoiceEmail(String newInvoiceEmail) {\n+        return new TenantInfo(name, email, website, contactName, contactEmail, newInvoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withAddress(TenantInfoAddress newAddress) {\n+        return new TenantInfo(name, email, website, contactName, contactEmail, invoiceEmail, newAddress, billingContact);\n+    }\n+\n+    public TenantInfo withBillingContact(TenantInfoBillingContact newBillingContact) {\n+        return new TenantInfo(name, email, website, contactName, contactEmail, invoiceEmail, address, newBillingContact);\n+    }\n+\n+    public boolean isEmpty() {\n+        return (name + email + website + contactEmail + contactName + invoiceEmail).isEmpty()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2NDg3NQ==", "bodyText": "Should set a non-empty TenantInfo here, and assert the re-serialized value below to ensure that serialization is correct.", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515064875", "createdAt": "2020-10-30T12:32:15Z", "author": {"login": "mpolden"}, "path": "controller-server/src/test/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializerTest.java", "diffHunk": "@@ -80,7 +81,8 @@ public void cloud_tenant() {\n         CloudTenant tenant = new CloudTenant(TenantName.from(\"elderly-lady\"),\n                                              Optional.of(new SimplePrincipal(\"foobar-user\")),\n                                              ImmutableBiMap.of(publicKey, new SimplePrincipal(\"joe\"),\n-                                                               otherPublicKey, new SimplePrincipal(\"jane\")));\n+                                                               otherPublicKey, new SimplePrincipal(\"jane\")),\n+                                             TenantInfo.EmptyInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2NTM5MQ==", "bodyText": "Missing @author and license header.", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515065391", "createdAt": "2020-10-30T12:33:13Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.yahoo.vespa.hosted.controller.tenant;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Tenant information beyond technical tenant id and user authorizations.\n+ *\n+ * This info is used to capture generic support information and invoiced billing information.\n+ *\n+ * All fields are non null but strings can be empty\n+ */\n+public class TenantInfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2NTQ3NQ==", "bodyText": "Missing @author and license header.", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515065475", "createdAt": "2020-10-30T12:33:22Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfoAddress.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.yahoo.vespa.hosted.controller.tenant;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Address formats are quite diverse across the world both in therms of what fields are used, named and\n+ * the order of them.\n+ *\n+ * To be generic a little future proof the address fields here are a mix of free text (address lines) and fixed fields.\n+ * The address lines can be street address, P.O box, c/o name, apartment, suite, unit, building floor etc etc.\n+ *\n+ * All fields are mandatory but can be an empty string (ie. not null)\n+ */\n+public class TenantInfoAddress {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2NTU0Mw==", "bodyText": "Missing @author and license header.", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515065543", "createdAt": "2020-10-30T12:33:28Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfoBillingContact.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.yahoo.vespa.hosted.controller.tenant;\n+\n+import java.util.Objects;\n+\n+public class TenantInfoBillingContact {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5ff46ba76da9fad3cc0a2281d84366df5025e72", "author": {"user": {"login": "smorgrav", "name": "Torbj\u00f8rn Sm\u00f8rgrav"}}, "url": "https://github.com/vespa-engine/vespa/commit/c5ff46ba76da9fad3cc0a2281d84366df5025e72", "committedDate": "2020-11-02T09:16:39Z", "message": "Rename empty singletons, simplify isEmpty and add author tag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e227423bf8709df56652e7197eccbeea1e057482", "author": {"user": {"login": "smorgrav", "name": "Torbj\u00f8rn Sm\u00f8rgrav"}}, "url": "https://github.com/vespa-engine/vespa/commit/e227423bf8709df56652e7197eccbeea1e057482", "committedDate": "2020-11-02T09:21:15Z", "message": "Add license header"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNDU2MDk1", "url": "https://github.com/vespa-engine/vespa/pull/15095#pullrequestreview-521456095", "createdAt": "2020-11-02T09:25:24Z", "commit": {"oid": "e227423bf8709df56652e7197eccbeea1e057482"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "426fe805f7520932367eb24e557ad0af5c5a1795", "author": {"user": {"login": "smorgrav", "name": "Torbj\u00f8rn Sm\u00f8rgrav"}}, "url": "https://github.com/vespa-engine/vespa/commit/426fe805f7520932367eb24e557ad0af5c5a1795", "committedDate": "2020-11-02T09:28:47Z", "message": "Add one unit test of the cloud tenant serialization with non empty info"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2240, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}