{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MDg1MDM2", "number": 12011, "title": "use refreshed certificates when available (and feature flag is set)", "bodyText": "", "createdAt": "2020-01-30T13:50:37Z", "url": "https://github.com/vespa-engine/vespa/pull/12011", "merged": true, "mergeCommit": {"oid": "e7673b68ad5f69d99343d7e90860d36dff2c3d9e"}, "closed": true, "closedAt": "2020-01-31T08:32:59Z", "author": {"login": "andreer"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_bAhhAFqTM1MDgzODE1Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_p5reAFqTM1MTMyNzU4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwODM4MTUy", "url": "https://github.com/vespa-engine/vespa/pull/12011#pullrequestreview-350838152", "createdAt": "2020-01-30T13:54:54Z", "commit": {"oid": "edb072d91c404d74a2c0cedc564a38e4f7a4dbac"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMzo1NDo1NVrOFjrrOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMzo1OToxNFrOFjr0ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk2MDA1OA==", "bodyText": "This will select the highest keyversion and certversion. We should only consider cert since we might be in the middle of a refresh (where keyversion might be incremented, but certversion still not ready)", "url": "https://github.com/vespa-engine/vespa/pull/12011#discussion_r372960058", "createdAt": "2020-01-30T13:54:55Z", "author": {"login": "tokle"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/endpointcertificates/EndpointCertificateManager.java", "diffHunk": "@@ -42,32 +51,58 @@\n     private final SecretStore secretStore;\n     private final ApplicationCertificateProvider applicationCertificateProvider;\n     private final Clock clock;\n+    private final FlagSource flagSource;\n \n     public EndpointCertificateManager(ZoneRegistry zoneRegistry,\n                                       CuratorDb curator,\n                                       SecretStore secretStore,\n                                       ApplicationCertificateProvider applicationCertificateProvider,\n-                                      Clock clock) {\n+                                      Clock clock, FlagSource flagSource) {\n         this.zoneRegistry = zoneRegistry;\n         this.curator = curator;\n         this.secretStore = secretStore;\n         this.applicationCertificateProvider = applicationCertificateProvider;\n         this.clock = clock;\n+        this.flagSource = flagSource;\n     }\n \n     public Optional<EndpointCertificateMetadata> getEndpointCertificateMetadata(Instance instance, ZoneId zone) {\n \n         if (!zoneRegistry.zones().directlyRouted().ids().contains(zone)) return Optional.empty();\n \n-        // Re-use certificate if already provisioned\n-        Optional<EndpointCertificateMetadata> endpointCertificateMetadata =\n+        // Re-use existing certificate if already provisioned\n+        var endpointCertificateMetadata =\n                 curator.readEndpointCertificateMetadata(instance.id())\n-                        .or(() -> Optional.of(provisionEndpointCertificate(instance)));\n+                        .orElse(provisionEndpointCertificate(instance));\n+\n+        // If feature flag set for application, look for and use refreshed certificate\n+        var useRefreshedEndpointCertificate = Flags.USE_REFRESHED_ENDPOINT_CERTIFICATE.bindTo(flagSource);\n+        if (useRefreshedEndpointCertificate.with(FetchVector.Dimension.APPLICATION_ID, instance.id().serializedForm()).value()) {\n+            var latestAvailableVersion = greatestVersionInSecretStore(endpointCertificateMetadata);\n+\n+            if (latestAvailableVersion.isPresent() && latestAvailableVersion.getAsInt() > endpointCertificateMetadata.version()) {\n+                var refreshedCertificateMetadata = new EndpointCertificateMetadata(\n+                        endpointCertificateMetadata.keyName(),\n+                        endpointCertificateMetadata.certName(),\n+                        latestAvailableVersion.getAsInt()\n+                );\n+\n+                if (verifyEndpointCertificate(refreshedCertificateMetadata, instance, zone, \"Did not refresh, problems with refreshed certificate: \"))\n+                    return Optional.of(refreshedCertificateMetadata);\n+            }\n+        }\n+\n+        // Only log warnings\n+        verifyEndpointCertificate(endpointCertificateMetadata, instance, zone, \"Problems while verifying certificate: \");\n+\n+        return Optional.of(endpointCertificateMetadata);\n+    }\n \n-        // Only logs warnings for now\n-        endpointCertificateMetadata.ifPresent(certificateMetadata -> verifyEndpointCertificate(certificateMetadata, instance, zone));\n+    private OptionalInt greatestVersionInSecretStore(EndpointCertificateMetadata originalCertificateMetadata) {\n+        var certVersions = new HashSet<>(secretStore.listSecretVersions(originalCertificateMetadata.certName()));\n+        var keyVersions = new HashSet<>(secretStore.listSecretVersions(originalCertificateMetadata.keyName()));\n \n-        return endpointCertificateMetadata;\n+        return Sets.union(certVersions, keyVersions).stream().mapToInt(Integer::intValue).max();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edb072d91c404d74a2c0cedc564a38e4f7a4dbac"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk2MjAzNQ==", "bodyText": "Consider moving this to the constructor.", "url": "https://github.com/vespa-engine/vespa/pull/12011#discussion_r372962035", "createdAt": "2020-01-30T13:58:35Z", "author": {"login": "tokle"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/endpointcertificates/EndpointCertificateManager.java", "diffHunk": "@@ -42,32 +51,58 @@\n     private final SecretStore secretStore;\n     private final ApplicationCertificateProvider applicationCertificateProvider;\n     private final Clock clock;\n+    private final FlagSource flagSource;\n \n     public EndpointCertificateManager(ZoneRegistry zoneRegistry,\n                                       CuratorDb curator,\n                                       SecretStore secretStore,\n                                       ApplicationCertificateProvider applicationCertificateProvider,\n-                                      Clock clock) {\n+                                      Clock clock, FlagSource flagSource) {\n         this.zoneRegistry = zoneRegistry;\n         this.curator = curator;\n         this.secretStore = secretStore;\n         this.applicationCertificateProvider = applicationCertificateProvider;\n         this.clock = clock;\n+        this.flagSource = flagSource;\n     }\n \n     public Optional<EndpointCertificateMetadata> getEndpointCertificateMetadata(Instance instance, ZoneId zone) {\n \n         if (!zoneRegistry.zones().directlyRouted().ids().contains(zone)) return Optional.empty();\n \n-        // Re-use certificate if already provisioned\n-        Optional<EndpointCertificateMetadata> endpointCertificateMetadata =\n+        // Re-use existing certificate if already provisioned\n+        var endpointCertificateMetadata =\n                 curator.readEndpointCertificateMetadata(instance.id())\n-                        .or(() -> Optional.of(provisionEndpointCertificate(instance)));\n+                        .orElse(provisionEndpointCertificate(instance));\n+\n+        // If feature flag set for application, look for and use refreshed certificate\n+        var useRefreshedEndpointCertificate = Flags.USE_REFRESHED_ENDPOINT_CERTIFICATE.bindTo(flagSource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edb072d91c404d74a2c0cedc564a38e4f7a4dbac"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk2MjQ2Mg==", "bodyText": "rename greatest -> latest ?", "url": "https://github.com/vespa-engine/vespa/pull/12011#discussion_r372962462", "createdAt": "2020-01-30T13:59:14Z", "author": {"login": "tokle"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/endpointcertificates/EndpointCertificateManager.java", "diffHunk": "@@ -42,32 +51,58 @@\n     private final SecretStore secretStore;\n     private final ApplicationCertificateProvider applicationCertificateProvider;\n     private final Clock clock;\n+    private final FlagSource flagSource;\n \n     public EndpointCertificateManager(ZoneRegistry zoneRegistry,\n                                       CuratorDb curator,\n                                       SecretStore secretStore,\n                                       ApplicationCertificateProvider applicationCertificateProvider,\n-                                      Clock clock) {\n+                                      Clock clock, FlagSource flagSource) {\n         this.zoneRegistry = zoneRegistry;\n         this.curator = curator;\n         this.secretStore = secretStore;\n         this.applicationCertificateProvider = applicationCertificateProvider;\n         this.clock = clock;\n+        this.flagSource = flagSource;\n     }\n \n     public Optional<EndpointCertificateMetadata> getEndpointCertificateMetadata(Instance instance, ZoneId zone) {\n \n         if (!zoneRegistry.zones().directlyRouted().ids().contains(zone)) return Optional.empty();\n \n-        // Re-use certificate if already provisioned\n-        Optional<EndpointCertificateMetadata> endpointCertificateMetadata =\n+        // Re-use existing certificate if already provisioned\n+        var endpointCertificateMetadata =\n                 curator.readEndpointCertificateMetadata(instance.id())\n-                        .or(() -> Optional.of(provisionEndpointCertificate(instance)));\n+                        .orElse(provisionEndpointCertificate(instance));\n+\n+        // If feature flag set for application, look for and use refreshed certificate\n+        var useRefreshedEndpointCertificate = Flags.USE_REFRESHED_ENDPOINT_CERTIFICATE.bindTo(flagSource);\n+        if (useRefreshedEndpointCertificate.with(FetchVector.Dimension.APPLICATION_ID, instance.id().serializedForm()).value()) {\n+            var latestAvailableVersion = greatestVersionInSecretStore(endpointCertificateMetadata);\n+\n+            if (latestAvailableVersion.isPresent() && latestAvailableVersion.getAsInt() > endpointCertificateMetadata.version()) {\n+                var refreshedCertificateMetadata = new EndpointCertificateMetadata(\n+                        endpointCertificateMetadata.keyName(),\n+                        endpointCertificateMetadata.certName(),\n+                        latestAvailableVersion.getAsInt()\n+                );\n+\n+                if (verifyEndpointCertificate(refreshedCertificateMetadata, instance, zone, \"Did not refresh, problems with refreshed certificate: \"))\n+                    return Optional.of(refreshedCertificateMetadata);\n+            }\n+        }\n+\n+        // Only log warnings\n+        verifyEndpointCertificate(endpointCertificateMetadata, instance, zone, \"Problems while verifying certificate: \");\n+\n+        return Optional.of(endpointCertificateMetadata);\n+    }\n \n-        // Only logs warnings for now\n-        endpointCertificateMetadata.ifPresent(certificateMetadata -> verifyEndpointCertificate(certificateMetadata, instance, zone));\n+    private OptionalInt greatestVersionInSecretStore(EndpointCertificateMetadata originalCertificateMetadata) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edb072d91c404d74a2c0cedc564a38e4f7a4dbac"}, "originalPosition": 94}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d83371f0eff1f9ee4cc42db705d5ec32bddfe92", "author": {"user": {"login": "andreer", "name": "Andreas Eriksen"}}, "url": "https://github.com/vespa-engine/vespa/commit/1d83371f0eff1f9ee4cc42db705d5ec32bddfe92", "committedDate": "2020-01-30T14:00:57Z", "message": "use refreshed certificates when available (and feature flag is set)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "edb072d91c404d74a2c0cedc564a38e4f7a4dbac", "author": {"user": {"login": "andreer", "name": "Andreas Eriksen"}}, "url": "https://github.com/vespa-engine/vespa/commit/edb072d91c404d74a2c0cedc564a38e4f7a4dbac", "committedDate": "2020-01-30T13:49:05Z", "message": "use refreshed certificates when available (and feature flag is set)"}, "afterCommit": {"oid": "1d83371f0eff1f9ee4cc42db705d5ec32bddfe92", "author": {"user": {"login": "andreer", "name": "Andreas Eriksen"}}, "url": "https://github.com/vespa-engine/vespa/commit/1d83371f0eff1f9ee4cc42db705d5ec32bddfe92", "committedDate": "2020-01-30T14:00:57Z", "message": "use refreshed certificates when available (and feature flag is set)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "477cb81f22b2ec9c62427e64d1ac7f07076d1cab", "author": {"user": {"login": "andreer", "name": "Andreas Eriksen"}}, "url": "https://github.com/vespa-engine/vespa/commit/477cb81f22b2ec9c62427e64d1ac7f07076d1cab", "committedDate": "2020-01-30T14:04:59Z", "message": "look at intersection of key/cert versions, not union ..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b7925115a7177ff5220787d0e1f92fb288a81e3", "author": {"user": {"login": "andreer", "name": "Andreas Eriksen"}}, "url": "https://github.com/vespa-engine/vespa/commit/7b7925115a7177ff5220787d0e1f92fb288a81e3", "committedDate": "2020-01-30T14:07:44Z", "message": "find latest key/cert version, not greatest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e544725b3de5044ca0b2e8af3c60479ba3216718", "author": {"user": {"login": "andreer", "name": "Andreas Eriksen"}}, "url": "https://github.com/vespa-engine/vespa/commit/e544725b3de5044ca0b2e8af3c60479ba3216718", "committedDate": "2020-01-30T14:07:59Z", "message": "bind flag in constructor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwODQ4ODE2", "url": "https://github.com/vespa-engine/vespa/pull/12011#pullrequestreview-350848816", "createdAt": "2020-01-30T14:09:24Z", "commit": {"oid": "e544725b3de5044ca0b2e8af3c60479ba3216718"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "580f13711f075d584806e2969eefb7fb8c11ea66", "author": {"user": {"login": "andreer", "name": "Andreas Eriksen"}}, "url": "https://github.com/vespa-engine/vespa/commit/580f13711f075d584806e2969eefb7fb8c11ea66", "committedDate": "2020-01-30T14:33:15Z", "message": "whitespace fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c73cda13478d182dfedeee61e802df35889a48c", "author": {"user": {"login": "andreer", "name": "Andreas Eriksen"}}, "url": "https://github.com/vespa-engine/vespa/commit/3c73cda13478d182dfedeee61e802df35889a48c", "committedDate": "2020-01-30T15:05:48Z", "message": "don't provision certificate if we already have one ..."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMzI3NTg1", "url": "https://github.com/vespa-engine/vespa/pull/12011#pullrequestreview-351327585", "createdAt": "2020-01-31T07:21:16Z", "commit": {"oid": "3c73cda13478d182dfedeee61e802df35889a48c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3917, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}