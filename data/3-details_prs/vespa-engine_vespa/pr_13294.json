{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NzgyNTQ2", "number": 13294, "title": "Balder/smarter same element iteration", "bodyText": "@havardpe PR", "createdAt": "2020-05-18T22:56:31Z", "url": "https://github.com/vespa-engine/vespa/pull/13294", "merged": true, "mergeCommit": {"oid": "50153aa259c275764cbd6d9d4fd07933e44272e0"}, "closed": true, "closedAt": "2020-05-19T11:46:55Z", "author": {"login": "baldersheim"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcin_NngH2gAyNDE5NzgyNTQ2OjcyM2YyYWU0MjI4YTgyNjkyODMxYWYyNjgyOTQyZTcwMWJlN2FhMTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABciyekagH2gAyNDE5NzgyNTQ2OmZmMDc3YjY5Zjg0YjM0OTRiMTBjNzVhNjA4ZGVlYTBiNTFlNmU4YjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "723f2ae4228a82692831af2682942e701be7aa16", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/723f2ae4228a82692831af2682942e701be7aa16", "committedDate": "2020-05-18T22:54:51Z", "message": "- Handle more than 64k hits in the element vector.\n- Avoid computing all vectors in full separately and instead do an incremental inline merge with.\n- Also avoid requiring the searchiterator aspect on the wrappers."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b93babac02fbce704f2683d69fd3e6677961c59", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/0b93babac02fbce704f2683d69fd3e6677961c59", "committedDate": "2020-05-18T22:54:52Z", "message": "Test merge with, all, none, and some"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0MjU1MDg3", "url": "https://github.com/vespa-engine/vespa/pull/13294#pullrequestreview-414255087", "createdAt": "2020-05-19T09:14:27Z", "commit": {"oid": "0b93babac02fbce704f2683d69fd3e6677961c59"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOToxNDoyN1rOGXXUAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTozNTo1MVrOGXYIbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1MjM4Nw==", "bodyText": "strange indent", "url": "https://github.com/vespa-engine/vespa/pull/13294#discussion_r427152387", "createdAt": "2020-05-19T09:14:27Z", "author": {"login": "havardpe"}, "path": "searchlib/src/vespa/searchlib/attribute/CMakeLists.txt", "diffHunk": "@@ -34,7 +34,7 @@ vespa_add_library(searchlib_attribute OBJECT\n     defines.cpp\n     diversity.cpp\n     dociditerator.cpp\n-    elementiterator.cpp\n+        searchcontextelementiterator.cpp", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b93babac02fbce704f2683d69fd3e6677961c59"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE1OTQ1NA==", "bodyText": "possible re-write: avoid calling find multiple times for same candidate\npossible re-write: terminate loop when attribute matching is exhausted.", "url": "https://github.com/vespa-engine/vespa/pull/13294#discussion_r427159454", "createdAt": "2020-05-19T09:25:45Z", "author": {"login": "havardpe"}, "path": "searchlib/src/vespa/searchlib/attribute/searchcontextelementiterator.cpp", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright 2018 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"searchcontextelementiterator.h\"\n+#include <vespa/searchcommon/attribute/i_search_context.h>\n+#include <vespa/searchlib/fef/termfieldmatchdata.h>\n+\n+using search::fef::TermFieldMatchDataPosition;\n+\n+namespace search::attribute {\n+\n+void\n+SearchContextElementIterator::getElementIds(uint32_t docId, std::vector<uint32_t> & elementIds) {\n+    int32_t weight(0);\n+    for (int32_t id = _searchContext.find(docId, 0, weight); id >= 0; id = _searchContext.find(docId, id+1, weight)) {\n+        elementIds.push_back(id);\n+    }\n+}\n+void\n+SearchContextElementIterator::mergeElementIds(uint32_t docId, std::vector<uint32_t> & elementIds) {\n+    size_t toKeep(0);\n+    int32_t id(-1);\n+    int32_t weight(0);\n+    for (int32_t candidate : elementIds) {\n+        if (candidate >= id) {\n+            id = _searchContext.find(docId, candidate, weight);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b93babac02fbce704f2683d69fd3e6677961c59"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2MjQwOQ==", "bodyText": "missing newline", "url": "https://github.com/vespa-engine/vespa/pull/13294#discussion_r427162409", "createdAt": "2020-05-19T09:30:23Z", "author": {"login": "havardpe"}, "path": "searchlib/src/vespa/searchlib/queryeval/elementiterator.cpp", "diffHunk": "@@ -0,0 +1,71 @@\n+#include \"elementiterator.h\"\n+#include <vespa/searchlib/fef/termfieldmatchdata.h>\n+#include <vespa/vespalib/objects/objectvisitor.h>\n+\n+namespace search::queryeval {\n+\n+void\n+ElementIterator::visitMembers(vespalib::ObjectVisitor &visitor) const {\n+    visit(visitor, \"iterator\", _search.get());\n+}\n+\n+ElementIteratorWrapper::ElementIteratorWrapper(SearchIterator::UP search, fef::TermFieldMatchData & tfmd)\n+    : ElementIterator(std::move(search)),\n+      _tfmd(tfmd)\n+{}\n+\n+ElementIteratorWrapper::~ElementIteratorWrapper() = default;\n+\n+void\n+ElementIteratorWrapper::getElementIds(uint32_t docId, std::vector<uint32_t> & elementIds) {\n+    _search->unpack(docId);\n+    int prevId(-1);\n+    for (auto element : _tfmd) {\n+        uint32_t id(element.getElementId());\n+        if (prevId != int(id)) {\n+            elementIds.push_back(id);\n+            prevId = id;\n+        }\n+    }\n+}\n+\n+void\n+ElementIteratorWrapper::mergeElementIds(uint32_t docId, std::vector<uint32_t> & elementIds) {\n+    _search->unpack(docId);\n+    size_t toKeep(0);\n+    int32_t id(-1);\n+    auto it = _tfmd.begin();\n+    for (int32_t candidate : elementIds) {\n+        if (candidate >= id) {\n+            while ((it < _tfmd.end()) && (candidate > int(it->getElementId()))) {\n+                it++;\n+            }\n+            if (it == _tfmd.end()) break;\n+            id = it->getElementId();\n+            if (id == candidate) {\n+                elementIds[toKeep++] = candidate;\n+            }\n+        }\n+    }\n+    elementIds.resize(toKeep);\n+}\n+\n+}\n+\n+void visit(vespalib::ObjectVisitor &self, const vespalib::string &name,\n+           const search::queryeval::ElementIterator *obj)\n+{\n+    if (obj != 0) {\n+        self.openStruct(name, \"ElementIterator\");\n+        obj->visitMembers(self);\n+        self.closeStruct();\n+    } else {\n+        self.visitNull(name);\n+    }\n+}\n+\n+void visit(vespalib::ObjectVisitor &self, const vespalib::string &name,\n+           const search::queryeval::ElementIterator &obj)\n+{\n+    visit(self, name, &obj);\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b93babac02fbce704f2683d69fd3e6677961c59"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2NTgwNg==", "bodyText": "possible re-write: avoid seeking for the same candidate multiple times", "url": "https://github.com/vespa-engine/vespa/pull/13294#discussion_r427165806", "createdAt": "2020-05-19T09:35:51Z", "author": {"login": "havardpe"}, "path": "searchlib/src/vespa/searchlib/queryeval/elementiterator.cpp", "diffHunk": "@@ -0,0 +1,71 @@\n+#include \"elementiterator.h\"\n+#include <vespa/searchlib/fef/termfieldmatchdata.h>\n+#include <vespa/vespalib/objects/objectvisitor.h>\n+\n+namespace search::queryeval {\n+\n+void\n+ElementIterator::visitMembers(vespalib::ObjectVisitor &visitor) const {\n+    visit(visitor, \"iterator\", _search.get());\n+}\n+\n+ElementIteratorWrapper::ElementIteratorWrapper(SearchIterator::UP search, fef::TermFieldMatchData & tfmd)\n+    : ElementIterator(std::move(search)),\n+      _tfmd(tfmd)\n+{}\n+\n+ElementIteratorWrapper::~ElementIteratorWrapper() = default;\n+\n+void\n+ElementIteratorWrapper::getElementIds(uint32_t docId, std::vector<uint32_t> & elementIds) {\n+    _search->unpack(docId);\n+    int prevId(-1);\n+    for (auto element : _tfmd) {\n+        uint32_t id(element.getElementId());\n+        if (prevId != int(id)) {\n+            elementIds.push_back(id);\n+            prevId = id;\n+        }\n+    }\n+}\n+\n+void\n+ElementIteratorWrapper::mergeElementIds(uint32_t docId, std::vector<uint32_t> & elementIds) {\n+    _search->unpack(docId);\n+    size_t toKeep(0);\n+    int32_t id(-1);\n+    auto it = _tfmd.begin();\n+    for (int32_t candidate : elementIds) {\n+        if (candidate >= id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b93babac02fbce704f2683d69fd3e6677961c59"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f025340d974120b7eabcfa8223d6663bd49ba113", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/f025340d974120b7eabcfa8223d6663bd49ba113", "committedDate": "2020-05-19T10:59:34Z", "message": "Fix whitespace."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff077b69f84b3494b10c75a608deea0b51e6e8b2", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/ff077b69f84b3494b10c75a608deea0b51e6e8b2", "committedDate": "2020-05-19T11:08:09Z", "message": "Unify merge loops"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3145, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}