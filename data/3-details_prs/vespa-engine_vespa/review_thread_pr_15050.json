{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwODAwODUx", "number": 15050, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNTo0MDo1MFrOEyavVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNTo0NToyMVrOEya5ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzAyMzU3OnYy", "diffSide": "RIGHT", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/GroupPreparer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNTo0MDo1MFrOHpC-IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDoxMTo0MFrOHpiyuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgwMjMzNw==", "bodyText": "Use requestedNodes.isExclusive()?", "url": "https://github.com/vespa-engine/vespa/pull/15050#discussion_r512802337", "createdAt": "2020-10-27T15:40:50Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/GroupPreparer.java", "diffHunk": "@@ -88,7 +88,7 @@ public GroupPreparer(NodeRepository nodeRepository,\n                             .map(deficit -> hostProvisioner.get().provisionHosts(nodeRepository.database().getProvisionIndexes(deficit.getCount()),\n                                                                                  deficit.getFlavor(),\n                                                                                  application,\n-                                                                                 osVersion))\n+                                                                                 osVersion, false))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6247627fcb1b8f2aa7d277d739f11703b488a503"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyMzcwNw==", "bodyText": "Done\nLet me do a few related changes (e.g. move to enum) in a follow-up PR", "url": "https://github.com/vespa-engine/vespa/pull/15050#discussion_r513323707", "createdAt": "2020-10-28T10:11:40Z", "author": {"login": "hakonhall"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/GroupPreparer.java", "diffHunk": "@@ -88,7 +88,7 @@ public GroupPreparer(NodeRepository nodeRepository,\n                             .map(deficit -> hostProvisioner.get().provisionHosts(nodeRepository.database().getProvisionIndexes(deficit.getCount()),\n                                                                                  deficit.getFlavor(),\n                                                                                  application,\n-                                                                                 osVersion))\n+                                                                                 osVersion, false))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgwMjMzNw=="}, "originalCommit": {"oid": "6247627fcb1b8f2aa7d277d739f11703b488a503"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzA1MDI3OnYy", "diffSide": "RIGHT", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/DynamicProvisioningMaintainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNTo0NToyMVrOHpDOnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDowOTo0OFrOHpiuDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgwNjU1Nw==", "bodyText": "This can be removed now since this is 1:1 with presence of HostProvisioner and this maintainer is only created if it is set in NodeRepositoryMaintenance", "url": "https://github.com/vespa-engine/vespa/pull/15050#discussion_r512806557", "createdAt": "2020-10-27T15:45:21Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/DynamicProvisioningMaintainer.java", "diffHunk": "@@ -113,18 +114,32 @@ private void convergeToCapacity(NodeList nodes) {\n \n \n     /**\n-     * Provision the nodes necessary to satisfy given capacity.\n+     * Provision hosts to ensure there is room to allocate spare nodes.\n      *\n-     * @return excess hosts that can safely be deprovisioned, if any\n+     * @param advertisedSpareCapacity the advertised resources of the spare nodes\n+     * @param nodes list of all nodes\n+     * @return excess hosts that can safely be deprovisioned: An excess host 1. contains no nodes allocated\n+     *         to an application, and assuming the spare nodes have been allocated, and 2. is not parked\n+     *         without wantToDeprovision (which means an operator is looking at the node).\n      */\n-    private List<Node> provision(List<NodeResources> capacity, NodeList nodes) {\n-        List<Node> existingHosts = availableHostsOf(nodes);\n-        if (nodeRepository().zone().getCloud().dynamicProvisioning()) {\n-            existingHosts = removableHostsOf(existingHosts, nodes);\n-        } else if (capacity.isEmpty()) {\n+    private List<Node> provision(List<NodeResources> advertisedSpareCapacity, NodeList nodes) {\n+        if (!nodeRepository().zone().getCloud().dynamicProvisioning()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6247627fcb1b8f2aa7d277d739f11703b488a503"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyMjUwOA==", "bodyText": "nice", "url": "https://github.com/vespa-engine/vespa/pull/15050#discussion_r513322508", "createdAt": "2020-10-28T10:09:48Z", "author": {"login": "hakonhall"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/DynamicProvisioningMaintainer.java", "diffHunk": "@@ -113,18 +114,32 @@ private void convergeToCapacity(NodeList nodes) {\n \n \n     /**\n-     * Provision the nodes necessary to satisfy given capacity.\n+     * Provision hosts to ensure there is room to allocate spare nodes.\n      *\n-     * @return excess hosts that can safely be deprovisioned, if any\n+     * @param advertisedSpareCapacity the advertised resources of the spare nodes\n+     * @param nodes list of all nodes\n+     * @return excess hosts that can safely be deprovisioned: An excess host 1. contains no nodes allocated\n+     *         to an application, and assuming the spare nodes have been allocated, and 2. is not parked\n+     *         without wantToDeprovision (which means an operator is looking at the node).\n      */\n-    private List<Node> provision(List<NodeResources> capacity, NodeList nodes) {\n-        List<Node> existingHosts = availableHostsOf(nodes);\n-        if (nodeRepository().zone().getCloud().dynamicProvisioning()) {\n-            existingHosts = removableHostsOf(existingHosts, nodes);\n-        } else if (capacity.isEmpty()) {\n+    private List<Node> provision(List<NodeResources> advertisedSpareCapacity, NodeList nodes) {\n+        if (!nodeRepository().zone().getCloud().dynamicProvisioning()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgwNjU1Nw=="}, "originalCommit": {"oid": "6247627fcb1b8f2aa7d277d739f11703b488a503"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1027, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}