{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3ODcxMjg4", "number": 14257, "title": "Allow setting a request type explicitly", "bodyText": "This lets handler authors control the requestType explicitly\nby setting it on the HttpResponse, which is useful to avoid\nmisclassification of POST requests to reading handlers as writes.", "createdAt": "2020-09-02T14:44:48Z", "url": "https://github.com/vespa-engine/vespa/pull/14257", "merged": true, "mergeCommit": {"oid": "ca5bf7c96534be3e295fe2e440fc980a75bd47b6"}, "closed": true, "closedAt": "2020-09-04T08:59:44Z", "author": {"login": "bratseth"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdE9EmdAH2gAyNDc3ODcxMjg4OjNjOWRlNzgyNzRkNWY3ZTVkN2M3YzE5MTA1ZTQ5MjVhOTExMDNlOWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFhVelgFqTQ4MjQ4MTIzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3c9de78274d5f7e5d7c7c19105e4925a91103e9e", "author": {"user": {"login": "bratseth", "name": "Jon Bratseth"}}, "url": "https://github.com/vespa-engine/vespa/commit/3c9de78274d5f7e5d7c7c19105e4925a91103e9e", "committedDate": "2020-09-02T14:42:10Z", "message": "Allow setting a request type explicitly\n\nThis lets handler authors control the requestType explicitly\nby setting it on the HttpResponse, which is useful to avoid\nmisclassification of POST requests to reading handlers as writes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNjQ2NDQ3", "url": "https://github.com/vespa-engine/vespa/pull/14257#pullrequestreview-481646447", "createdAt": "2020-09-03T09:09:59Z", "commit": {"oid": "3c9de78274d5f7e5d7c7c19105e4925a91103e9e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOToxMDowMFrOHMdb2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOToxNDo1MVrOHMdpZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyNzIyNQ==", "bodyText": "Why is request type as member of HttpResponse? I would assume HttpRequest is more suitable as the \"type\" is a property of the request, not the response. It's also stored in the request type for the jdisc core abstraction layer.", "url": "https://github.com/vespa-engine/vespa/pull/14257#discussion_r482827225", "createdAt": "2020-09-03T09:10:00Z", "author": {"login": "bjorncs"}, "path": "container-core/src/main/java/com/yahoo/container/jdisc/HttpResponse.java", "diffHunk": "@@ -129,4 +125,13 @@ public void complete() { }\n         return Collections::emptyIterator;\n     }\n \n+    /** Sets the type classification of this request for metric collection purposes */\n+    public void setRequestType(Request.RequestType requestType) { this.requestType = requestType; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c9de78274d5f7e5d7c7c19105e4925a91103e9e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyODY0Mw==", "bodyText": "RequestType is a too generic term in my opinion. Consider naming the concept something more specific.", "url": "https://github.com/vespa-engine/vespa/pull/14257#discussion_r482828643", "createdAt": "2020-09-03T09:11:24Z", "author": {"login": "bjorncs"}, "path": "jdisc_core/src/main/java/com/yahoo/jdisc/Request.java", "diffHunk": "@@ -48,6 +48,11 @@\n     private boolean serverRequest;\n     private Long timeout;\n     private URI uri;\n+    private RequestType requestType;\n+\n+    public enum RequestType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c9de78274d5f7e5d7c7c19105e4925a91103e9e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgzMDY5Mg==", "bodyText": "I actually prefer the previous indentation style. The new style requires a re-indentation of all parameters if the name or return type of the method is changed.", "url": "https://github.com/vespa-engine/vespa/pull/14257#discussion_r482830692", "createdAt": "2020-09-03T09:14:51Z", "author": {"login": "bjorncs"}, "path": "jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/JettyHttpServer.java", "diffHunk": "@@ -208,32 +203,26 @@ private static void initializeJettyLogging() {\n     private static void setupJmx(Server server, ServerConfig serverConfig) {\n         if (serverConfig.jmx().enabled()) {\n             System.setProperty(\"java.rmi.server.hostname\", \"localhost\");\n-            server.addBean(\n-                    new MBeanContainer(ManagementFactory.getPlatformMBeanServer()));\n-            server.addBean(\n-                    new ConnectorServer(\n-                            createJmxLoopbackOnlyServiceUrl(serverConfig.jmx().listenPort()),\n-                            \"org.eclipse.jetty.jmx:name=rmiconnectorserver\"));\n+            server.addBean(new MBeanContainer(ManagementFactory.getPlatformMBeanServer()));\n+            server.addBean(new ConnectorServer(createJmxLoopbackOnlyServiceUrl(serverConfig.jmx().listenPort()),\n+                                               \"org.eclipse.jetty.jmx:name=rmiconnectorserver\"));\n         }\n     }\n \n     private static JMXServiceURL createJmxLoopbackOnlyServiceUrl(int port) {\n         try {\n-            return new JMXServiceURL(\n-                    \"rmi\", \"localhost\", port, \"/jndi/rmi://localhost:\" + port + \"/jmxrmi\");\n+            return new JMXServiceURL(\"rmi\", \"localhost\", port, \"/jndi/rmi://localhost:\" + port + \"/jmxrmi\");\n         } catch (MalformedURLException e) {\n             throw new RuntimeException(e);\n         }\n     }\n \n-    private HandlerCollection getHandlerCollection(\n-            ServerConfig serverConfig,\n-            ServletPathsConfig servletPathsConfig,\n-            List<JDiscServerConnector> connectors,\n-            ServletHolder jdiscServlet,\n-            ComponentRegistry<ServletHolder> servletHolders,\n-            FilterHolder jDiscFilterInvokerFilter) {\n-\n+    private HandlerCollection getHandlerCollection(ServerConfig serverConfig,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c9de78274d5f7e5d7c7c19105e4925a91103e9e"}, "originalPosition": 130}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNDgxMjMw", "url": "https://github.com/vespa-engine/vespa/pull/14257#pullrequestreview-482481230", "createdAt": "2020-09-04T08:57:11Z", "commit": {"oid": "3c9de78274d5f7e5d7c7c19105e4925a91103e9e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4386, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}