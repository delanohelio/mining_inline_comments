{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5NTExODky", "number": 14767, "title": "- GC unused code.", "bodyText": "vespalib::Lock -> std::mutex\n\n@toregge or @vekterli PR", "createdAt": "2020-10-07T20:55:28Z", "url": "https://github.com/vespa-engine/vespa/pull/14767", "merged": true, "mergeCommit": {"oid": "4291a9ec03e9b5b7c23473725678b3c0785cbf91"}, "closed": true, "closedAt": "2020-10-07T21:29:10Z", "author": {"login": "baldersheim"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQTWw2gH2gAyNDk5NTExODkyOjM1NjE3MjA0MmNiYzk2Mzc1YmU4ZDY2M2E5NDU4NzliOWYxMGRkNDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQd-PLgFqTUwNDU3MDI3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "356172042cbc96375be8d663a945879b9f10dd41", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/356172042cbc96375be8d663a945879b9f10dd41", "committedDate": "2020-10-07T20:53:05Z", "message": "- GC unused code.\n- vespalib::Lock -> std::mutex"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0fa07975af2ed8812544950f5785a48f0b41dfd", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/b0fa07975af2ed8812544950f5785a48f0b41dfd", "committedDate": "2020-10-07T21:03:58Z", "message": "mutex must be mutable to be used in const method."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MjY2Mjg2", "url": "https://github.com/vespa-engine/vespa/pull/14767#pullrequestreview-504266286", "createdAt": "2020-10-07T21:04:43Z", "commit": {"oid": "b0fa07975af2ed8812544950f5785a48f0b41dfd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0NTcwMjc2", "url": "https://github.com/vespa-engine/vespa/pull/14767#pullrequestreview-504570276", "createdAt": "2020-10-08T08:59:14Z", "commit": {"oid": "b0fa07975af2ed8812544950f5785a48f0b41dfd"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwODo1OToxNFrOHeUtDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwOTowMjowMFrOHeU0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU1ODU0Mg==", "bodyText": "This existing implementation of double-checked locking does not seem entirely correct, as _instance may be read by a thread that has not formed a release-acquire pair with the thread that wrote it (since the reader thread won't be taking the guard).\nCould add explicit fencing, but I'd suggest just moving _instance into a static function scope variable, which makes the code simpler and also correctly does double-checked locking behind the scenes.", "url": "https://github.com/vespa-engine/vespa/pull/14767#discussion_r501558542", "createdAt": "2020-10-08T08:59:14Z", "author": {"login": "vekterli"}, "path": "document/src/vespa/document/datatype/positiondatatype.cpp", "diffHunk": "@@ -30,7 +31,7 @@ const StructDataType &\n PositionDataType::getInstance()\n {\n     if ( ! _instance) {\n-        vespalib::LockGuard guard(_lock);\n+        std::lock_guard guard(_G_lock);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fa07975af2ed8812544950f5785a48f0b41dfd"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2MDM3NQ==", "bodyText": "See comment from PositionDataType re: subtly incorrect double-checked locking.", "url": "https://github.com/vespa-engine/vespa/pull/14767#discussion_r501560375", "createdAt": "2020-10-08T09:02:00Z", "author": {"login": "vekterli"}, "path": "document/src/vespa/document/datatype/urldatatype.cpp", "diffHunk": "@@ -34,7 +40,7 @@ const StructDataType &\n UrlDataType::getInstance()\n {\n     if ( ! _instance ) {\n-        vespalib::LockGuard guard(_lock);\n+        std::lock_guard guard(_G_lock);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fa07975af2ed8812544950f5785a48f0b41dfd"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2474, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}