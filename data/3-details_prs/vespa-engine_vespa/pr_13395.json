{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNzY4MTQx", "number": 13395, "title": "wrapper for iterators needing TFMDA in constructor", "bodyText": "I confirm that this contribution is made under the terms of the license found in the root directory of this repository's source tree and that I have the authority necessary to make this contribution on behalf of its copyright owner.\nTo get started with the createFilterSearch() implementations, I looked at disktermblueprint, and found it could help to have a wrapper (based on BooleanMatchIteratorWrapper) that owns some unused TermFieldMatchData and make wiring in existing iterators easier.\nLonger term we may want to avoid this by making a pure matching filter-only iterator on the lower levels directly, without any match data at all, but this can be used as a bridge for now.\n@havardpe @toregge @geirst please take a look", "createdAt": "2020-05-27T10:50:47Z", "url": "https://github.com/vespa-engine/vespa/pull/13395", "merged": true, "mergeCommit": {"oid": "6a83dfa052f329f92ce6f0859637000268f51973"}, "closed": true, "closedAt": "2020-05-27T14:46:42Z", "author": {"login": "arnej27959"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclW1sDAH2gAyNDIzNzY4MTQxOmRlNGRhYTM2MmVkZDA5MWNhOGUxYjJkYjA1NTlhMjAyMzY0NDdhYWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclXz5fgFqTQxOTEwNzcxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "de4daa362edd091ca8e1b2db0559a20236447aae", "author": {"user": {"login": "arnej27959", "name": "Arne H Juul"}}, "url": "https://github.com/vespa-engine/vespa/commit/de4daa362edd091ca8e1b2db0559a20236447aae", "committedDate": "2020-05-27T10:37:50Z", "message": "wrapper for iterators needing TFMDA in constructor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MDg0NzI2", "url": "https://github.com/vespa-engine/vespa/pull/13395#pullrequestreview-419084726", "createdAt": "2020-05-27T11:05:09Z", "commit": {"oid": "de4daa362edd091ca8e1b2db0559a20236447aae"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MTAyODU0", "url": "https://github.com/vespa-engine/vespa/pull/13395#pullrequestreview-419102854", "createdAt": "2020-05-27T11:33:03Z", "commit": {"oid": "de4daa362edd091ca8e1b2db0559a20236447aae"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MTA3NzEw", "url": "https://github.com/vespa-engine/vespa/pull/13395#pullrequestreview-419107710", "createdAt": "2020-05-27T11:40:48Z", "commit": {"oid": "de4daa362edd091ca8e1b2db0559a20236447aae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMTo0MDo0OFrOGbFXaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMTo0MDo0OFrOGbFXaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1MjY0OA==", "bodyText": "prefer sending the number of fields directly instead of the state to reduces unneeded coupling", "url": "https://github.com/vespa-engine/vespa/pull/13395#discussion_r431052648", "createdAt": "2020-05-27T11:40:48Z", "author": {"login": "havardpe"}, "path": "searchlib/src/vespa/searchlib/queryeval/filter_wrapper.h", "diffHunk": "@@ -0,0 +1,63 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"searchiterator.h\"\n+#include \"blueprint.h\"\n+#include <vespa/searchlib/fef/termfieldmatchdata.h>\n+#include <vespa/searchlib/fef/termfieldmatchdataarray.h>\n+\n+namespace search::queryeval {\n+\n+/**\n+ * Wraps an iterator for use as a filter search.\n+ * Owns TermFieldMatchData the wrapped iterator\n+ * can wire to, and write to if necessary.\n+ **/\n+class FilterWrapper : public SearchIterator {\n+private:\n+    std::vector<fef::TermFieldMatchData> _unused_md;\n+    fef::TermFieldMatchDataArray _tfmda;\n+    std::unique_ptr<SearchIterator> _wrapped_search;\n+public:\n+    FilterWrapper(const Blueprint::State &state)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de4daa362edd091ca8e1b2db0559a20236447aae"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3065, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}