{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MzY5MDMw", "number": 13818, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoxNzo1OVrOEMDQBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNTowNzoxNlrOEMHwBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDcxNjIxOnYy", "diffSide": "RIGHT", "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoxNzo1OVrOGt75kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTowNzo0M1rOGufDjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyMDQ5OA==", "bodyText": "Consider using std::promise<void>, std::future<void>, and a context that just sets the promise in the destructor.", "url": "https://github.com/vespa-engine/vespa/pull/13818#discussion_r450820498", "createdAt": "2020-07-07T12:17:59Z", "author": {"login": "toregge"}, "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.cpp", "diffHunk": "@@ -632,8 +633,10 @@ StoreOnlyFeedView::adjustMetaStore(const DocumentOperation &op, const GlobalId &\n                 putMetaData(_metaStore, docId, op, _params._subDbType == SubDbType::REMOVED);\n             }\n         } else if (op.getValidPrevDbdId(_params._subDbId)) {\n-            _gidToLidChangeHandler.notifyRemove(gid, serialNum);\n+            vespalib::Gate gate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "846f628a129ce3e783cdfbfa833d123fc7693ab6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5NjQ5NA==", "bodyText": "I think it is clearer to use the Gate than the general promise/future trick.", "url": "https://github.com/vespa-engine/vespa/pull/13818#discussion_r451396494", "createdAt": "2020-07-08T09:07:43Z", "author": {"login": "baldersheim"}, "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.cpp", "diffHunk": "@@ -632,8 +633,10 @@ StoreOnlyFeedView::adjustMetaStore(const DocumentOperation &op, const GlobalId &\n                 putMetaData(_metaStore, docId, op, _params._subDbType == SubDbType::REMOVED);\n             }\n         } else if (op.getValidPrevDbdId(_params._subDbId)) {\n-            _gidToLidChangeHandler.notifyRemove(gid, serialNum);\n+            vespalib::Gate gate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyMDQ5OA=="}, "originalCommit": {"oid": "846f628a129ce3e783cdfbfa833d123fc7693ab6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDc1MjU2OnYy", "diffSide": "RIGHT", "path": "searchcore/src/vespa/searchcore/proton/reference/gid_to_lid_change_listener.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoyOTowMlrOGt8QWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo0ODoyNFrOGt88gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyNjMzMA==", "bodyText": "There might be problems if the listener can be destroyed before the task has been completed. Consider extending the destructor to sync the executor (_attributeFieldWriter) in order to ensure that all previously queued tasks have a valid listener. An alternate approach might be capture a copy of _attr in the lambda.", "url": "https://github.com/vespa-engine/vespa/pull/13818#discussion_r450826330", "createdAt": "2020-07-07T12:29:02Z", "author": {"login": "toregge"}, "path": "searchcore/src/vespa/searchcore/proton/reference/gid_to_lid_change_listener.cpp", "diffHunk": "@@ -25,23 +25,23 @@ GidToLidChangeListener::~GidToLidChangeListener()\n }\n \n void\n-GidToLidChangeListener::notifyPutDone(document::GlobalId gid, uint32_t lid)\n+GidToLidChangeListener::notifyPutDone(Context context, document::GlobalId gid, uint32_t lid)\n {\n-    std::promise<void> promise;\n-    auto future = promise.get_future();\n     _attributeFieldWriter.executeLambda(_executorId,\n-                                        [this, &promise, gid, lid]() { _attr->notifyReferencedPut(gid, lid); promise.set_value(); });\n-    future.wait();\n+                                        [this, context=std::move(context), gid, lid]() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "846f628a129ce3e783cdfbfa833d123fc7693ab6"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzNzYzMw==", "bodyText": "Fixed by sync in destructor.", "url": "https://github.com/vespa-engine/vespa/pull/13818#discussion_r450837633", "createdAt": "2020-07-07T12:48:24Z", "author": {"login": "baldersheim"}, "path": "searchcore/src/vespa/searchcore/proton/reference/gid_to_lid_change_listener.cpp", "diffHunk": "@@ -25,23 +25,23 @@ GidToLidChangeListener::~GidToLidChangeListener()\n }\n \n void\n-GidToLidChangeListener::notifyPutDone(document::GlobalId gid, uint32_t lid)\n+GidToLidChangeListener::notifyPutDone(Context context, document::GlobalId gid, uint32_t lid)\n {\n-    std::promise<void> promise;\n-    auto future = promise.get_future();\n     _attributeFieldWriter.executeLambda(_executorId,\n-                                        [this, &promise, gid, lid]() { _attr->notifyReferencedPut(gid, lid); promise.set_value(); });\n-    future.wait();\n+                                        [this, context=std::move(context), gid, lid]() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyNjMzMA=="}, "originalCommit": {"oid": "846f628a129ce3e783cdfbfa833d123fc7693ab6"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDc1NTIyOnYy", "diffSide": "RIGHT", "path": "searchcore/src/vespa/searchcore/proton/reference/gid_to_lid_change_listener.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoyOTo0NFrOGt8R1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo0ODowM1rOGt87vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyNjcxMQ==", "bodyText": "Same issue has in notifyPutDone.", "url": "https://github.com/vespa-engine/vespa/pull/13818#discussion_r450826711", "createdAt": "2020-07-07T12:29:44Z", "author": {"login": "toregge"}, "path": "searchcore/src/vespa/searchcore/proton/reference/gid_to_lid_change_listener.cpp", "diffHunk": "@@ -25,23 +25,23 @@ GidToLidChangeListener::~GidToLidChangeListener()\n }\n \n void\n-GidToLidChangeListener::notifyPutDone(document::GlobalId gid, uint32_t lid)\n+GidToLidChangeListener::notifyPutDone(Context context, document::GlobalId gid, uint32_t lid)\n {\n-    std::promise<void> promise;\n-    auto future = promise.get_future();\n     _attributeFieldWriter.executeLambda(_executorId,\n-                                        [this, &promise, gid, lid]() { _attr->notifyReferencedPut(gid, lid); promise.set_value(); });\n-    future.wait();\n+                                        [this, context=std::move(context), gid, lid]() {\n+                                            (void) context;\n+                                            _attr->notifyReferencedPut(gid, lid);\n+                                        });\n }\n \n void\n-GidToLidChangeListener::notifyRemove(document::GlobalId gid)\n+GidToLidChangeListener::notifyRemove(Context context, document::GlobalId gid)\n {\n-    std::promise<void> promise;\n-    auto future = promise.get_future();\n     _attributeFieldWriter.executeLambda(_executorId,\n-                                        [this, &promise, gid]() { _attr->notifyReferencedRemove(gid); promise.set_value(); });\n-    future.wait();\n+                                        [this, context = std::move(context), gid]() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "846f628a129ce3e783cdfbfa833d123fc7693ab6"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzNzQzOQ==", "bodyText": "Fixed by sync in destructor.", "url": "https://github.com/vespa-engine/vespa/pull/13818#discussion_r450837439", "createdAt": "2020-07-07T12:48:03Z", "author": {"login": "baldersheim"}, "path": "searchcore/src/vespa/searchcore/proton/reference/gid_to_lid_change_listener.cpp", "diffHunk": "@@ -25,23 +25,23 @@ GidToLidChangeListener::~GidToLidChangeListener()\n }\n \n void\n-GidToLidChangeListener::notifyPutDone(document::GlobalId gid, uint32_t lid)\n+GidToLidChangeListener::notifyPutDone(Context context, document::GlobalId gid, uint32_t lid)\n {\n-    std::promise<void> promise;\n-    auto future = promise.get_future();\n     _attributeFieldWriter.executeLambda(_executorId,\n-                                        [this, &promise, gid, lid]() { _attr->notifyReferencedPut(gid, lid); promise.set_value(); });\n-    future.wait();\n+                                        [this, context=std::move(context), gid, lid]() {\n+                                            (void) context;\n+                                            _attr->notifyReferencedPut(gid, lid);\n+                                        });\n }\n \n void\n-GidToLidChangeListener::notifyRemove(document::GlobalId gid)\n+GidToLidChangeListener::notifyRemove(Context context, document::GlobalId gid)\n {\n-    std::promise<void> promise;\n-    auto future = promise.get_future();\n     _attributeFieldWriter.executeLambda(_executorId,\n-                                        [this, &promise, gid]() { _attr->notifyReferencedRemove(gid); promise.set_value(); });\n-    future.wait();\n+                                        [this, context = std::move(context), gid]() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyNjcxMQ=="}, "originalCommit": {"oid": "846f628a129ce3e783cdfbfa833d123fc7693ab6"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTQ1MzUwOnYy", "diffSide": "RIGHT", "path": "searchcore/src/vespa/searchcore/proton/reference/i_gid_to_lid_change_listener.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNTowNzoxNlrOGuDDAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTowNjoyM1rOGufAiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkzNzYwMw==", "bodyText": "I would prefer \"DestructorCallbackSP\" (or similar) instead of \"Context\", which is very generic. Then it is possible to look at a function signature and better understand what the first parameter is representing.", "url": "https://github.com/vespa-engine/vespa/pull/13818#discussion_r450937603", "createdAt": "2020-07-07T15:07:16Z", "author": {"login": "geirst"}, "path": "searchcore/src/vespa/searchcore/proton/reference/i_gid_to_lid_change_listener.h", "diffHunk": "@@ -16,9 +16,10 @@ namespace proton {\n class IGidToLidChangeListener\n {\n public:\n+    using Context = std::shared_ptr<search::IDestructorCallback>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "846f628a129ce3e783cdfbfa833d123fc7693ab6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5NTcyMA==", "bodyText": "Fixed in #13828", "url": "https://github.com/vespa-engine/vespa/pull/13818#discussion_r451395720", "createdAt": "2020-07-08T09:06:23Z", "author": {"login": "baldersheim"}, "path": "searchcore/src/vespa/searchcore/proton/reference/i_gid_to_lid_change_listener.h", "diffHunk": "@@ -16,9 +16,10 @@ namespace proton {\n class IGidToLidChangeListener\n {\n public:\n+    using Context = std::shared_ptr<search::IDestructorCallback>;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkzNzYwMw=="}, "originalCommit": {"oid": "846f628a129ce3e783cdfbfa833d123fc7693ab6"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1853, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}