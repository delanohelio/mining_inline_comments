{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NzQzOTI1", "number": 11854, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDoxNzozNFrODZKQBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDoxNzozNFrODZKQBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzA4OTM0OnYy", "diffSide": "RIGHT", "path": "container-search/src/main/java/com/yahoo/prelude/Pong.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDoxNzozNVrOFfZfJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDoxNzozNVrOFfZfJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ2Nzc0OQ==", "bodyText": "t -> to", "url": "https://github.com/vespa-engine/vespa/pull/11854#discussion_r368467749", "createdAt": "2020-01-20T10:17:35Z", "author": {"login": "geirst"}, "path": "container-search/src/main/java/com/yahoo/prelude/Pong.java", "diffHunk": "@@ -4,82 +4,102 @@\n import com.yahoo.search.result.ErrorMessage;\n import com.yahoo.search.statistics.ElapsedTime;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n+import java.util.stream.Collectors;\n \n /**\n  * An answer from Ping.\n  *\n- * @author Steinar Knutsen\n+ * @author bratseth\n  */\n public class Pong {\n \n-    private String pingInfo=\"\";\n-    private final List<ErrorMessage> errors = new ArrayList<>(1);\n-    private ElapsedTime elapsed = new ElapsedTime();\n+    private final ElapsedTime elapsed = new ElapsedTime();\n     private final Optional<Long> activeDocuments;\n+    private final boolean isBlockingWrites;\n+    private final Optional<ErrorMessage> error;\n \n     public Pong() {\n-        this.activeDocuments = Optional.empty();\n+        this(Optional.empty(), false, Optional.empty());\n     }\n \n     public Pong(ErrorMessage error) {\n-        errors.add(error);\n-        this.activeDocuments = Optional.empty();\n+        this(Optional.empty(), false, Optional.of(error));\n     }\n \n     public Pong(long activeDocuments) {\n-        this.activeDocuments = Optional.of(activeDocuments);\n+        this(Optional.of(activeDocuments), false, Optional.empty());\n     }\n \n-    public void addError(ErrorMessage error) {\n-        errors.add(error);\n+    public Pong(long activeDocuments, boolean isBlockingWrites) {\n+        this(Optional.of(activeDocuments), isBlockingWrites, Optional.empty());\n     }\n \n-    public ErrorMessage getError(int i) {\n-        return errors.get(i);\n+    private Pong(Optional<Long> activeDocuments, boolean isBlockingWrites, Optional<ErrorMessage> error) {\n+        this.activeDocuments = activeDocuments;\n+        this.isBlockingWrites = isBlockingWrites;\n+        this.error = error;\n     }\n \n-    /** Returns the number of active documents in the backend responding in this Pong, if available */\n-    public Optional<Long> activeDocuments() {\n-        return activeDocuments;\n+    /**\n+     * @deprecated do not use. Additional errors are ignored.\n+     */\n+    @Deprecated\n+    public void addError(ErrorMessage error) { }\n+\n+    /**\n+     * @deprecated use error() instead\n+     */\n+    @Deprecated\n+    public ErrorMessage getError(int i) {\n+        if (i > 1) throw new IllegalArgumentException(\"No error at position \" + i);\n+        if (i == 0 && error.isEmpty()) throw new IllegalArgumentException(\"No error at position \" + i);\n+        return error.get();\n     }\n \n-    /** Returns the number of nodes which responded to this Pong, if available */\n+    public Optional<ErrorMessage> error() { return error; }\n+\n+    /** Returns the number of active documents in the backend responding in this Pong, if available */\n+    public Optional<Long> activeDocuments() { return activeDocuments; }\n+\n+    /** Returns true if the pinged node is currently blocking write operations due t being full */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19c9987d9e5e38996b51ca5d11f152a9392ddc83"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2584, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}