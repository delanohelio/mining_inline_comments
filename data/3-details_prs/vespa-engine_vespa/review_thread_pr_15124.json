{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMTIxODQw", "number": 15124, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODoyMDoxMlrOEz6SQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzo1Nzo1NVrOE00VqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODY3Nzc3OnYy", "diffSide": "RIGHT", "path": "config-model-api/src/main/java/com/yahoo/config/model/api/ConfigChangeAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODoyMDoxMlrOHrbLDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODoyMDoxMlrOHrbLDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI5NjAxMg==", "bodyText": "REINDEX would be consistent with the other names here.", "url": "https://github.com/vespa-engine/vespa/pull/15124#discussion_r515296012", "createdAt": "2020-10-30T18:20:12Z", "author": {"login": "jonmv"}, "path": "config-model-api/src/main/java/com/yahoo/config/model/api/ConfigChangeAction.java", "diffHunk": "@@ -15,7 +14,7 @@\n public interface ConfigChangeAction {\n \n     enum Type {\n-        RESTART(\"restart\"), REFEED(\"refeed\");\n+        RESTART(\"restart\"), REFEED(\"refeed\"), REINDEXING(\"reindexing\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9682d9f7c5de1b38943c3c996ac152e896a1f37b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODY4MzU0OnYy", "diffSide": "RIGHT", "path": "config-model-api/src/main/java/com/yahoo/config/model/api/ConfigChangeReindexAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODoyMTo1NlrOHrbOig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODoyNTo0OFrOHrbWDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI5NjkwNg==", "bodyText": "Hmm, suggestions don't work today?\nJust wanted to point out typo bed --> be", "url": "https://github.com/vespa-engine/vespa/pull/15124#discussion_r515296906", "createdAt": "2020-10-30T18:21:56Z", "author": {"login": "jonmv"}, "path": "config-model-api/src/main/java/com/yahoo/config/model/api/ConfigChangeReindexAction.java", "diffHunk": "@@ -0,0 +1,20 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.config.model.api;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Represents an action to re-index a document type in order to handle a config change.\n+ *\n+ * @author bjorncs\n+ */\n+public interface ConfigChangeReindexAction extends ConfigChangeAction {\n+\n+    @Override default Type getType() { return Type.REINDEXING; }\n+\n+    /** @return name identifying this kind of change, used to identify names which should be allowed */\n+    String name();\n+\n+    /** @return name of the document type that must bed re-indexed, or empty if all document types */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9682d9f7c5de1b38943c3c996ac152e896a1f37b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI5ODgzMA==", "bodyText": "Ah, no suggestions in per-commit-view, of course.", "url": "https://github.com/vespa-engine/vespa/pull/15124#discussion_r515298830", "createdAt": "2020-10-30T18:25:48Z", "author": {"login": "jonmv"}, "path": "config-model-api/src/main/java/com/yahoo/config/model/api/ConfigChangeReindexAction.java", "diffHunk": "@@ -0,0 +1,20 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.config.model.api;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Represents an action to re-index a document type in order to handle a config change.\n+ *\n+ * @author bjorncs\n+ */\n+public interface ConfigChangeReindexAction extends ConfigChangeAction {\n+\n+    @Override default Type getType() { return Type.REINDEXING; }\n+\n+    /** @return name identifying this kind of change, used to identify names which should be allowed */\n+    String name();\n+\n+    /** @return name of the document type that must bed re-indexed, or empty if all document types */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI5NjkwNg=="}, "originalCommit": {"oid": "9682d9f7c5de1b38943c3c996ac152e896a1f37b"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODY4NTUwOnYy", "diffSide": "RIGHT", "path": "config-model-api/src/main/java/com/yahoo/config/model/api/ConfigChangeReindexAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODoyMjozOFrOHrbPyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMDoyMToxMVrOHr-UDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI5NzIyNQ==", "bodyText": "Hmm, is \"all document types\" an option here?", "url": "https://github.com/vespa-engine/vespa/pull/15124#discussion_r515297225", "createdAt": "2020-10-30T18:22:38Z", "author": {"login": "jonmv"}, "path": "config-model-api/src/main/java/com/yahoo/config/model/api/ConfigChangeReindexAction.java", "diffHunk": "@@ -0,0 +1,20 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.config.model.api;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Represents an action to re-index a document type in order to handle a config change.\n+ *\n+ * @author bjorncs\n+ */\n+public interface ConfigChangeReindexAction extends ConfigChangeAction {\n+\n+    @Override default Type getType() { return Type.REINDEXING; }\n+\n+    /** @return name identifying this kind of change, used to identify names which should be allowed */\n+    String name();\n+\n+    /** @return name of the document type that must bed re-indexed, or empty if all document types */\n+    Optional<String> getDocumentType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9682d9f7c5de1b38943c3c996ac152e896a1f37b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg3MTc1Nw==", "bodyText": "I'm not sure, most likely not. The programmatic API allows it to be null. It is first null and then later updated with document type (uncertain whether this always happen).", "url": "https://github.com/vespa-engine/vespa/pull/15124#discussion_r515871757", "createdAt": "2020-11-02T10:21:11Z", "author": {"login": "bjorncs"}, "path": "config-model-api/src/main/java/com/yahoo/config/model/api/ConfigChangeReindexAction.java", "diffHunk": "@@ -0,0 +1,20 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.config.model.api;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Represents an action to re-index a document type in order to handle a config change.\n+ *\n+ * @author bjorncs\n+ */\n+public interface ConfigChangeReindexAction extends ConfigChangeAction {\n+\n+    @Override default Type getType() { return Type.REINDEXING; }\n+\n+    /** @return name identifying this kind of change, used to identify names which should be allowed */\n+    String name();\n+\n+    /** @return name of the document type that must bed re-indexed, or empty if all document types */\n+    Optional<String> getDocumentType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI5NzIyNQ=="}, "originalCommit": {"oid": "9682d9f7c5de1b38943c3c996ac152e896a1f37b"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODcwMjU2OnYy", "diffSide": "RIGHT", "path": "config-model/src/test/java/com/yahoo/vespa/model/application/validation/change/ConfigChangeTestUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODoyODowNFrOHrbaXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODoyODowNFrOHrbaXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI5OTkzNQ==", "bodyText": "s/indexing/index/g", "url": "https://github.com/vespa-engine/vespa/pull/15124#discussion_r515299935", "createdAt": "2020-10-30T18:28:04Z", "author": {"login": "jonmv"}, "path": "config-model/src/test/java/com/yahoo/vespa/model/application/validation/change/ConfigChangeTestUtils.java", "diffHunk": "@@ -37,6 +37,15 @@ public static VespaConfigChangeAction newRefeedAction(ClusterSpec.Id id, String\n         return VespaRefeedAction.of(id, name, overrides, message, services, documentType, now);\n     }\n \n+    public static VespaConfigChangeAction newReindexingAction(ClusterSpec.Id id, String name, ValidationOverrides overrides, String message, Instant now) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5edc6a864721e8462df29262b62f801b78b670e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODE3MzQ0OnYy", "diffSide": "RIGHT", "path": "config-model/src/main/java/com/yahoo/vespa/model/content/ContentSearchCluster.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzo1NDoxN1rOHsvwBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDowNTowMlrOHswM-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY4MTczMg==", "bodyText": "Not sure this first part is needed?", "url": "https://github.com/vespa-engine/vespa/pull/15124#discussion_r516681732", "createdAt": "2020-11-03T13:54:17Z", "author": {"login": "jonmv"}, "path": "config-model/src/main/java/com/yahoo/vespa/model/content/ContentSearchCluster.java", "diffHunk": "@@ -336,6 +336,28 @@ public void handleRedundancy(Redundancy redundancy) {\n                 .collect(Collectors.toList());\n     }\n \n+    public List<NewDocumentType> getDocumentTypesWithStreamingCluster() {\n+        List<NewDocumentType> streamingDocTypes = new ArrayList<>();\n+        for (NewDocumentType type : documentDefinitions.values()) {\n+            if (findStreamingCluster(type.getFullName().getName()).isPresent()) {\n+                streamingDocTypes.add(type);\n+            }\n+        }\n+        return streamingDocTypes;\n+    }\n+\n+    public List<NewDocumentType> getDocumentTypesWithIndexedCluster() {\n+        List<NewDocumentType> indexedDocTypes = new ArrayList<>();\n+        for (NewDocumentType type : documentDefinitions.values()) {\n+            if (findStreamingCluster(type.getFullName().getName()).isEmpty()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3cdbc1d2f84860fe1027045daddb8681cc009ca"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY4Nzc2NA==", "bodyText": "It mimics the semantics of getConfig", "url": "https://github.com/vespa-engine/vespa/pull/15124#discussion_r516687764", "createdAt": "2020-11-03T14:02:59Z", "author": {"login": "bjorncs"}, "path": "config-model/src/main/java/com/yahoo/vespa/model/content/ContentSearchCluster.java", "diffHunk": "@@ -336,6 +336,28 @@ public void handleRedundancy(Redundancy redundancy) {\n                 .collect(Collectors.toList());\n     }\n \n+    public List<NewDocumentType> getDocumentTypesWithStreamingCluster() {\n+        List<NewDocumentType> streamingDocTypes = new ArrayList<>();\n+        for (NewDocumentType type : documentDefinitions.values()) {\n+            if (findStreamingCluster(type.getFullName().getName()).isPresent()) {\n+                streamingDocTypes.add(type);\n+            }\n+        }\n+        return streamingDocTypes;\n+    }\n+\n+    public List<NewDocumentType> getDocumentTypesWithIndexedCluster() {\n+        List<NewDocumentType> indexedDocTypes = new ArrayList<>();\n+        for (NewDocumentType type : documentDefinitions.values()) {\n+            if (findStreamingCluster(type.getFullName().getName()).isEmpty()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY4MTczMg=="}, "originalCommit": {"oid": "e3cdbc1d2f84860fe1027045daddb8681cc009ca"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY4OTE0Nw==", "bodyText": "Yeah, if we need to separate streaming and store-only, we need it.", "url": "https://github.com/vespa-engine/vespa/pull/15124#discussion_r516689147", "createdAt": "2020-11-03T14:05:02Z", "author": {"login": "jonmv"}, "path": "config-model/src/main/java/com/yahoo/vespa/model/content/ContentSearchCluster.java", "diffHunk": "@@ -336,6 +336,28 @@ public void handleRedundancy(Redundancy redundancy) {\n                 .collect(Collectors.toList());\n     }\n \n+    public List<NewDocumentType> getDocumentTypesWithStreamingCluster() {\n+        List<NewDocumentType> streamingDocTypes = new ArrayList<>();\n+        for (NewDocumentType type : documentDefinitions.values()) {\n+            if (findStreamingCluster(type.getFullName().getName()).isPresent()) {\n+                streamingDocTypes.add(type);\n+            }\n+        }\n+        return streamingDocTypes;\n+    }\n+\n+    public List<NewDocumentType> getDocumentTypesWithIndexedCluster() {\n+        List<NewDocumentType> indexedDocTypes = new ArrayList<>();\n+        for (NewDocumentType type : documentDefinitions.values()) {\n+            if (findStreamingCluster(type.getFullName().getName()).isEmpty()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY4MTczMg=="}, "originalCommit": {"oid": "e3cdbc1d2f84860fe1027045daddb8681cc009ca"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODE4NzQxOnYy", "diffSide": "RIGHT", "path": "config-model/src/main/java/com/yahoo/vespa/model/content/ContentSearchCluster.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzo1NzozM1rOHsv4pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDowNjozMFrOHswQ2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY4Mzk0MA==", "bodyText": "I don't think we need this, as we should be happy checking whether a document changes between \"index\" and not \"index\".", "url": "https://github.com/vespa-engine/vespa/pull/15124#discussion_r516683940", "createdAt": "2020-11-03T13:57:33Z", "author": {"login": "jonmv"}, "path": "config-model/src/main/java/com/yahoo/vespa/model/content/ContentSearchCluster.java", "diffHunk": "@@ -336,6 +336,28 @@ public void handleRedundancy(Redundancy redundancy) {\n                 .collect(Collectors.toList());\n     }\n \n+    public List<NewDocumentType> getDocumentTypesWithStreamingCluster() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3cdbc1d2f84860fe1027045daddb8681cc009ca"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY4ODM1NQ==", "bodyText": "It's the transitions between indexing modes we want to react on. We have to check if the document type is new or removed otherwise.", "url": "https://github.com/vespa-engine/vespa/pull/15124#discussion_r516688355", "createdAt": "2020-11-03T14:03:55Z", "author": {"login": "bjorncs"}, "path": "config-model/src/main/java/com/yahoo/vespa/model/content/ContentSearchCluster.java", "diffHunk": "@@ -336,6 +336,28 @@ public void handleRedundancy(Redundancy redundancy) {\n                 .collect(Collectors.toList());\n     }\n \n+    public List<NewDocumentType> getDocumentTypesWithStreamingCluster() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY4Mzk0MA=="}, "originalCommit": {"oid": "e3cdbc1d2f84860fe1027045daddb8681cc009ca"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY5MDEzOQ==", "bodyText": "But a document type must be either indexed or not \u2014\u00a0it would suffice to check whether it went from indexed to not indexed, or the other way, I believe.", "url": "https://github.com/vespa-engine/vespa/pull/15124#discussion_r516690139", "createdAt": "2020-11-03T14:06:30Z", "author": {"login": "jonmv"}, "path": "config-model/src/main/java/com/yahoo/vespa/model/content/ContentSearchCluster.java", "diffHunk": "@@ -336,6 +336,28 @@ public void handleRedundancy(Redundancy redundancy) {\n                 .collect(Collectors.toList());\n     }\n \n+    public List<NewDocumentType> getDocumentTypesWithStreamingCluster() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY4Mzk0MA=="}, "originalCommit": {"oid": "e3cdbc1d2f84860fe1027045daddb8681cc009ca"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODE4OTIwOnYy", "diffSide": "RIGHT", "path": "config-model/src/main/java/com/yahoo/vespa/model/application/validation/change/IndexingModeChangeValidator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzo1Nzo1NVrOHsv5vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDowNzo0OVrOHswUag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY4NDIyMw==", "bodyText": "We'll miss changes from \"index\" to \"store-only\", or vv.", "url": "https://github.com/vespa-engine/vespa/pull/15124#discussion_r516684223", "createdAt": "2020-11-03T13:57:55Z", "author": {"login": "jonmv"}, "path": "config-model/src/main/java/com/yahoo/vespa/model/application/validation/change/IndexingModeChangeValidator.java", "diffHunk": "@@ -27,31 +35,56 @@\n         for (Map.Entry<String, ContentCluster> currentEntry : currentModel.getContentClusters().entrySet()) {\n             ContentCluster nextCluster = nextModel.getContentClusters().get(currentEntry.getKey());\n             if (nextCluster == null) continue;\n-\n-            Optional<ConfigChangeAction> change = validateContentCluster(currentEntry.getValue(), nextCluster, overrides, now);\n-            if (change.isPresent())\n-                actions.add(change.get());\n+            actions.addAll(validateContentCluster(currentEntry.getValue(), nextCluster, overrides, now));\n         }\n         return actions;\n     }\n \n-    private Optional<ConfigChangeAction> validateContentCluster(ContentCluster currentCluster, ContentCluster nextCluster,\n-                                                                ValidationOverrides overrides, Instant now) {\n-        boolean currentClusterIsIndexed = currentCluster.getSearch().hasIndexedCluster();\n-        boolean nextClusterIsIndexed = nextCluster.getSearch().hasIndexedCluster();\n-\n-        if (currentClusterIsIndexed == nextClusterIsIndexed) return Optional.empty();\n+    private List<ConfigChangeAction> validateContentCluster(\n+            ContentCluster currentCluster, ContentCluster nextCluster, ValidationOverrides overrides, Instant now) {\n+        List<ConfigChangeAction> changes = new ArrayList<>();\n+        ContentSearchCluster currentSearchCluster = currentCluster.getSearch();\n+        ContentSearchCluster nextSearchCluster = nextCluster.getSearch();\n+        {\n+            Set<String> currentStreamingTypes = toDocumentTypeNames(currentSearchCluster.getDocumentTypesWithStreamingCluster());\n+            Set<String> nextIndexedTypes = toDocumentTypeNames(nextSearchCluster.getDocumentTypesWithIndexedCluster());\n+            for (String type : nextIndexedTypes) {\n+                if (currentStreamingTypes.contains(type)) {\n+                    changes.add(createReindexAction(overrides, now, nextCluster, type, \"streaming\", \"indexed\"));\n+                }\n+            }\n+        }\n+        {\n+            Set<String> currentIndexedTypes = toDocumentTypeNames(currentSearchCluster.getDocumentTypesWithIndexedCluster());\n+            Set<String> nextStreamingTypes = toDocumentTypeNames(nextSearchCluster.getDocumentTypesWithStreamingCluster());\n+            for (String type : nextStreamingTypes) {\n+                if (currentIndexedTypes.contains(type)) {\n+                    changes.add(createReindexAction(overrides, now, nextCluster, type, \"indexed\", \"streaming\"));\n+                }\n+            }\n+        }\n+        return changes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5863d0e39cb17a358fce3caf46f357d9bd6308cb"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY4ODUwNA==", "bodyText": "Ok, I can add that as well", "url": "https://github.com/vespa-engine/vespa/pull/15124#discussion_r516688504", "createdAt": "2020-11-03T14:04:07Z", "author": {"login": "bjorncs"}, "path": "config-model/src/main/java/com/yahoo/vespa/model/application/validation/change/IndexingModeChangeValidator.java", "diffHunk": "@@ -27,31 +35,56 @@\n         for (Map.Entry<String, ContentCluster> currentEntry : currentModel.getContentClusters().entrySet()) {\n             ContentCluster nextCluster = nextModel.getContentClusters().get(currentEntry.getKey());\n             if (nextCluster == null) continue;\n-\n-            Optional<ConfigChangeAction> change = validateContentCluster(currentEntry.getValue(), nextCluster, overrides, now);\n-            if (change.isPresent())\n-                actions.add(change.get());\n+            actions.addAll(validateContentCluster(currentEntry.getValue(), nextCluster, overrides, now));\n         }\n         return actions;\n     }\n \n-    private Optional<ConfigChangeAction> validateContentCluster(ContentCluster currentCluster, ContentCluster nextCluster,\n-                                                                ValidationOverrides overrides, Instant now) {\n-        boolean currentClusterIsIndexed = currentCluster.getSearch().hasIndexedCluster();\n-        boolean nextClusterIsIndexed = nextCluster.getSearch().hasIndexedCluster();\n-\n-        if (currentClusterIsIndexed == nextClusterIsIndexed) return Optional.empty();\n+    private List<ConfigChangeAction> validateContentCluster(\n+            ContentCluster currentCluster, ContentCluster nextCluster, ValidationOverrides overrides, Instant now) {\n+        List<ConfigChangeAction> changes = new ArrayList<>();\n+        ContentSearchCluster currentSearchCluster = currentCluster.getSearch();\n+        ContentSearchCluster nextSearchCluster = nextCluster.getSearch();\n+        {\n+            Set<String> currentStreamingTypes = toDocumentTypeNames(currentSearchCluster.getDocumentTypesWithStreamingCluster());\n+            Set<String> nextIndexedTypes = toDocumentTypeNames(nextSearchCluster.getDocumentTypesWithIndexedCluster());\n+            for (String type : nextIndexedTypes) {\n+                if (currentStreamingTypes.contains(type)) {\n+                    changes.add(createReindexAction(overrides, now, nextCluster, type, \"streaming\", \"indexed\"));\n+                }\n+            }\n+        }\n+        {\n+            Set<String> currentIndexedTypes = toDocumentTypeNames(currentSearchCluster.getDocumentTypesWithIndexedCluster());\n+            Set<String> nextStreamingTypes = toDocumentTypeNames(nextSearchCluster.getDocumentTypesWithStreamingCluster());\n+            for (String type : nextStreamingTypes) {\n+                if (currentIndexedTypes.contains(type)) {\n+                    changes.add(createReindexAction(overrides, now, nextCluster, type, \"indexed\", \"streaming\"));\n+                }\n+            }\n+        }\n+        return changes;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY4NDIyMw=="}, "originalCommit": {"oid": "5863d0e39cb17a358fce3caf46f357d9bd6308cb"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY5MTA1MA==", "bodyText": "Ok, later.", "url": "https://github.com/vespa-engine/vespa/pull/15124#discussion_r516691050", "createdAt": "2020-11-03T14:07:49Z", "author": {"login": "jonmv"}, "path": "config-model/src/main/java/com/yahoo/vespa/model/application/validation/change/IndexingModeChangeValidator.java", "diffHunk": "@@ -27,31 +35,56 @@\n         for (Map.Entry<String, ContentCluster> currentEntry : currentModel.getContentClusters().entrySet()) {\n             ContentCluster nextCluster = nextModel.getContentClusters().get(currentEntry.getKey());\n             if (nextCluster == null) continue;\n-\n-            Optional<ConfigChangeAction> change = validateContentCluster(currentEntry.getValue(), nextCluster, overrides, now);\n-            if (change.isPresent())\n-                actions.add(change.get());\n+            actions.addAll(validateContentCluster(currentEntry.getValue(), nextCluster, overrides, now));\n         }\n         return actions;\n     }\n \n-    private Optional<ConfigChangeAction> validateContentCluster(ContentCluster currentCluster, ContentCluster nextCluster,\n-                                                                ValidationOverrides overrides, Instant now) {\n-        boolean currentClusterIsIndexed = currentCluster.getSearch().hasIndexedCluster();\n-        boolean nextClusterIsIndexed = nextCluster.getSearch().hasIndexedCluster();\n-\n-        if (currentClusterIsIndexed == nextClusterIsIndexed) return Optional.empty();\n+    private List<ConfigChangeAction> validateContentCluster(\n+            ContentCluster currentCluster, ContentCluster nextCluster, ValidationOverrides overrides, Instant now) {\n+        List<ConfigChangeAction> changes = new ArrayList<>();\n+        ContentSearchCluster currentSearchCluster = currentCluster.getSearch();\n+        ContentSearchCluster nextSearchCluster = nextCluster.getSearch();\n+        {\n+            Set<String> currentStreamingTypes = toDocumentTypeNames(currentSearchCluster.getDocumentTypesWithStreamingCluster());\n+            Set<String> nextIndexedTypes = toDocumentTypeNames(nextSearchCluster.getDocumentTypesWithIndexedCluster());\n+            for (String type : nextIndexedTypes) {\n+                if (currentStreamingTypes.contains(type)) {\n+                    changes.add(createReindexAction(overrides, now, nextCluster, type, \"streaming\", \"indexed\"));\n+                }\n+            }\n+        }\n+        {\n+            Set<String> currentIndexedTypes = toDocumentTypeNames(currentSearchCluster.getDocumentTypesWithIndexedCluster());\n+            Set<String> nextStreamingTypes = toDocumentTypeNames(nextSearchCluster.getDocumentTypesWithStreamingCluster());\n+            for (String type : nextStreamingTypes) {\n+                if (currentIndexedTypes.contains(type)) {\n+                    changes.add(createReindexAction(overrides, now, nextCluster, type, \"indexed\", \"streaming\"));\n+                }\n+            }\n+        }\n+        return changes;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY4NDIyMw=="}, "originalCommit": {"oid": "5863d0e39cb17a358fce3caf46f357d9bd6308cb"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 947, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}