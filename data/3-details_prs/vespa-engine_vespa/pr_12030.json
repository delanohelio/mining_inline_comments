{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NzY0ODcy", "number": 12030, "title": "Send ping every second truly async to all nodes who does not have any\u2026", "bodyText": "\u2026 pending pings.\n@havardpe and @bratseth PR", "createdAt": "2020-01-31T20:47:47Z", "url": "https://github.com/vespa-engine/vespa/pull/12030", "merged": true, "mergeCommit": {"oid": "1bdeee7cbe08963de9d9bff68e7c76d68c86cf09"}, "closed": true, "closedAt": "2020-02-03T13:00:31Z", "author": {"login": "baldersheim"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_1agsgH2gAyMzY5NzY0ODcyOjI0MTYxMmM3M2I5ZDlkZDAwZmNmMTk2ZDliZTRiYWZjY2MxZDMwNWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcAsULsgH2gAyMzY5NzY0ODcyOmYxZGFmMmNjZjQ2YjkzZjI3MDIwYzZjMDM3NWIyNzUwMDc1YWIyNzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "241612c73b9d9dd00fcf196d9be4bafccc1d305c", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/241612c73b9d9dd00fcf196d9be4bafccc1d305c", "committedDate": "2020-01-31T20:46:05Z", "message": "Send ping every second truly async to all nodes who does not have any pending pings."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3468dcd4f2185f82eeaceedc30c220cd96aaeb0", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/b3468dcd4f2185f82eeaceedc30c220cd96aaeb0", "committedDate": "2020-01-31T20:50:55Z", "message": "Add comment on semantics."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNzcxODM2", "url": "https://github.com/vespa-engine/vespa/pull/12030#pullrequestreview-351771836", "createdAt": "2020-01-31T20:55:20Z", "commit": {"oid": "241612c73b9d9dd00fcf196d9be4bafccc1d305c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMTYyNDk3", "url": "https://github.com/vespa-engine/vespa/pull/12030#pullrequestreview-352162497", "createdAt": "2020-02-03T10:43:50Z", "commit": {"oid": "b3468dcd4f2185f82eeaceedc30c220cd96aaeb0"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMDo0Mzo1MFrOFktIiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMDo0NDozMFrOFktJsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzMjUyMQ==", "bodyText": "better to use finally than to hide Errors", "url": "https://github.com/vespa-engine/vespa/pull/12030#discussion_r374032521", "createdAt": "2020-02-03T10:43:50Z", "author": {"login": "havardpe"}, "path": "container-search/src/main/java/com/yahoo/search/dispatch/rpc/RpcPing.java", "diffHunk": "@@ -33,32 +31,41 @@ public RpcPing(Node node, ClusterMonitor<Node> clusterMonitor, RpcResourcePool r\n     }\n \n     @Override\n-    public Pong call() throws Exception {\n+    public void ping(PongHandler handler) {\n         try {\n-            var queue = new LinkedBlockingQueue<ResponseOrError<ProtobufResponse>>(1);\n-\n-            sendPing(queue);\n-\n-            var responseOrError = queue.poll(clusterMonitor.getConfiguration().getRequestTimeout(), TimeUnit.MILLISECONDS);\n-            if (responseOrError == null) {\n-                return new Pong(ErrorMessage.createNoAnswerWhenPingingNode(\"Timed out waiting for pong from \" + node));\n-            } else if (responseOrError.error().isPresent()) {\n-                return new Pong(ErrorMessage.createBackendCommunicationError(responseOrError.error().get()));\n+            if (node.sendPing()) {\n+                sendPing(handler);\n             }\n+        } catch (RuntimeException e) {\n+            handler.handle(new Pong(\n+                    ErrorMessage.createBackendCommunicationError(\"Exception when pinging \" + node + \": \" + Exceptions.toMessageString(e))));\n+            node.receivePing();\n+        } catch (Throwable throwable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3468dcd4f2185f82eeaceedc30c220cd96aaeb0"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzMjc2OQ==", "bodyText": "somewhat misleading name", "url": "https://github.com/vespa-engine/vespa/pull/12030#discussion_r374032769", "createdAt": "2020-02-03T10:44:25Z", "author": {"login": "havardpe"}, "path": "container-search/src/main/java/com/yahoo/search/dispatch/searchcluster/Node.java", "diffHunk": "@@ -21,13 +21,20 @@\n     private final AtomicBoolean statusIsKnown = new AtomicBoolean(false);\n     private final AtomicBoolean working = new AtomicBoolean(true);\n     private final AtomicLong activeDocuments = new AtomicLong(0);\n+    private final AtomicBoolean pendingPing = new AtomicBoolean();\n \n     public Node(int key, String hostname, int group) {\n         this.key = key;\n         this.hostname = hostname;\n         this.group = group;\n     }\n \n+    /** Only send ping if this method return true. If not the is a ping outstanding. */\n+    public boolean sendPing() { return ! pendingPing.getAndSet(true); }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3468dcd4f2185f82eeaceedc30c220cd96aaeb0"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzMjgxOA==", "bodyText": "somewhat misleading name", "url": "https://github.com/vespa-engine/vespa/pull/12030#discussion_r374032818", "createdAt": "2020-02-03T10:44:30Z", "author": {"login": "havardpe"}, "path": "container-search/src/main/java/com/yahoo/search/dispatch/searchcluster/Node.java", "diffHunk": "@@ -21,13 +21,20 @@\n     private final AtomicBoolean statusIsKnown = new AtomicBoolean(false);\n     private final AtomicBoolean working = new AtomicBoolean(true);\n     private final AtomicLong activeDocuments = new AtomicLong(0);\n+    private final AtomicBoolean pendingPing = new AtomicBoolean();\n \n     public Node(int key, String hostname, int group) {\n         this.key = key;\n         this.hostname = hostname;\n         this.group = group;\n     }\n \n+    /** Only send ping if this method return true. If not the is a ping outstanding. */\n+    public boolean sendPing() { return ! pendingPing.getAndSet(true); }\n+\n+    /** Need to be called when a pong is called to allow next ping to go through. */\n+    public void receivePing() { pendingPing.set(false); }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3468dcd4f2185f82eeaceedc30c220cd96aaeb0"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e17736281d6e83efc53026fba168a2f0520b6e9", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/7e17736281d6e83efc53026fba168a2f0520b6e9", "committedDate": "2020-02-03T10:47:48Z", "message": "Use sequence numbers and check on Pong reception instead."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21b6882ad7c58aa36fb00297e61cd60e9ddbfb6b", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/21b6882ad7c58aa36fb00297e61cd60e9ddbfb6b", "committedDate": "2020-02-03T10:55:33Z", "message": "Do not catch more than you can handle."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMTk0NDM5", "url": "https://github.com/vespa-engine/vespa/pull/12030#pullrequestreview-352194439", "createdAt": "2020-02-03T11:42:24Z", "commit": {"oid": "7e17736281d6e83efc53026fba168a2f0520b6e9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMTo0MjoyNVrOFkupAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMTo0NjowNlrOFkuu8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA1NzIxOA==", "bodyText": "pong?", "url": "https://github.com/vespa-engine/vespa/pull/12030#discussion_r374057218", "createdAt": "2020-02-03T11:42:25Z", "author": {"login": "havardpe"}, "path": "container-search/src/main/java/com/yahoo/search/dispatch/searchcluster/Node.java", "diffHunk": "@@ -21,19 +21,26 @@\n     private final AtomicBoolean statusIsKnown = new AtomicBoolean(false);\n     private final AtomicBoolean working = new AtomicBoolean(true);\n     private final AtomicLong activeDocuments = new AtomicLong(0);\n-    private final AtomicBoolean pendingPing = new AtomicBoolean();\n+    private final AtomicLong pingSequence = new AtomicLong(0);\n+    private final AtomicLong lastPing = new AtomicLong(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e17736281d6e83efc53026fba168a2f0520b6e9"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA1ODczNg==", "bodyText": "mixing sent and received ping sequence number here seems like a bad idea", "url": "https://github.com/vespa-engine/vespa/pull/12030#discussion_r374058736", "createdAt": "2020-02-03T11:46:06Z", "author": {"login": "havardpe"}, "path": "container-search/src/main/java/com/yahoo/search/dispatch/searchcluster/Node.java", "diffHunk": "@@ -21,19 +21,26 @@\n     private final AtomicBoolean statusIsKnown = new AtomicBoolean(false);\n     private final AtomicBoolean working = new AtomicBoolean(true);\n     private final AtomicLong activeDocuments = new AtomicLong(0);\n-    private final AtomicBoolean pendingPing = new AtomicBoolean();\n+    private final AtomicLong pingSequence = new AtomicLong(0);\n+    private final AtomicLong lastPing = new AtomicLong(0);\n \n     public Node(int key, String hostname, int group) {\n         this.key = key;\n         this.hostname = hostname;\n         this.group = group;\n     }\n \n-    /** Only send ping if this method return true. If not the is a ping outstanding. */\n-    public boolean sendPing() { return ! pendingPing.getAndSet(true); }\n-\n-    /** Need to be called when a pong is called to allow next ping to go through. */\n-    public void receivePing() { pendingPing.set(false); }\n+    /** Give a monotonically increasing sequence number.*/\n+    public long createPingSequenceId() { return pingSequence.incrementAndGet(); }\n+    /** Checks if this pong is received in line and accepted, or out of band and should be ignored..*/\n+    public boolean isLastReceivedPong(long pingId ) {\n+        long last = lastPing.get();\n+        while ((pingId > last) && ! lastPing.compareAndSet(last, pingId)) {\n+            last = pingSequence.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e17736281d6e83efc53026fba168a2f0520b6e9"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec8acd060de8f107aebbbcc1589c5b81a539179d", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/ec8acd060de8f107aebbbcc1589c5b81a539179d", "committedDate": "2020-02-03T12:23:41Z", "message": "lastPing -> lastPong."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1daf2ccf46b93f27020c6c0375b2750075ab278", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/f1daf2ccf46b93f27020c6c0375b2750075ab278", "committedDate": "2020-02-03T12:43:57Z", "message": "Provide pongHandler in constructor to avoid needing an AtomicReference."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3926, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}