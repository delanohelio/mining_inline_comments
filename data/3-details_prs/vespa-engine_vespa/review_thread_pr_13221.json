{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NTgyNTQ4", "number": 13221, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTo0NDo1OFrOD7nM3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTo0NzozNlrOD7nQEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODM0ODQ2OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/queryeval/nearest_neighbor_iterator.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTo0NDo1OFrOGUCsVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTo0NDo1OFrOGUCsVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY2ODgyMA==", "bodyText": "Consider inverting template argument to use_filter instead. It is easier to read it that way.", "url": "https://github.com/vespa-engine/vespa/pull/13221#discussion_r423668820", "createdAt": "2020-05-12T11:44:58Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/queryeval/nearest_neighbor_iterator.cpp", "diffHunk": "@@ -29,7 +30,7 @@ is_compatible(const vespalib::eval::ValueType& lhs,\n  * Keeps a heap of the K best hit distances.\n  * Currently always does brute-force scanning, which is very expensive.\n  **/\n-template <bool strict>\n+template <bool strict, bool no_bitvector>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "503880f98dae838c24fbb6869840108b73684952"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODM1NTIwOnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/queryeval/nearest_neighbor_iterator.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTo0NzowOVrOGUCwpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTo0NzowOVrOGUCwpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY2OTkyNQ==", "bodyText": "Consider renaming bit_vector to filter to match how it is named in hnsw index.", "url": "https://github.com/vespa-engine/vespa/pull/13221#discussion_r423669925", "createdAt": "2020-05-12T11:47:09Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/queryeval/nearest_neighbor_iterator.cpp", "diffHunk": "@@ -112,11 +116,16 @@ NearestNeighborIterator::create(\n         const vespalib::tensor::DenseTensorView &queryTensor,\n         const search::tensor::DenseTensorAttribute &tensorAttribute,\n         NearestNeighborDistanceHeap &distanceHeap,\n+        const search::BitVector *bit_vector,\n         const search::tensor::DistanceFunction *dist_fun)\n \n {\n-    Params params(tfmd, queryTensor, tensorAttribute, distanceHeap, dist_fun);\n-    return resolve_strict_LCT_RCT(strict, params);\n+    Params params(tfmd, queryTensor, tensorAttribute, distanceHeap, bit_vector, dist_fun);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "503880f98dae838c24fbb6869840108b73684952"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODM1NjY1OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/queryeval/nearest_neighbor_iterator.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTo0NzozNlrOGUCxhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMTo0NzozNlrOGUCxhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY3MDE0OA==", "bodyText": "Consider renaming bit_vector to filter to match how it is named in hnsw index. Applies for rest of file.", "url": "https://github.com/vespa-engine/vespa/pull/13221#discussion_r423670148", "createdAt": "2020-05-12T11:47:36Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/queryeval/nearest_neighbor_iterator.h", "diffHunk": "@@ -25,17 +25,20 @@ class NearestNeighborIterator : public SearchIterator\n         const DenseTensorView &queryTensor;\n         const DenseTensorAttribute &tensorAttribute;\n         NearestNeighborDistanceHeap &distanceHeap;\n+        const search::BitVector *bit_vector;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "503880f98dae838c24fbb6869840108b73684952"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1635, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}