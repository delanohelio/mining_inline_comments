{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNjMyMTE4", "number": 15357, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMTo0Njo1NFrOE5-sng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMToyNDozM1rOE6_5Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjMxNTE4OnYy", "diffSide": "RIGHT", "path": "clustercontroller-reindexer/src/main/java/ai/vespa/reindexing/ReindexingMetrics.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMTo0Njo1NFrOH0xJmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNToxOTo0MVrOH05_eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5MzI3Mw==", "bodyText": "Consider having \"percent\" removed from metric name, and instead represent it as a value between 0 and 1.", "url": "https://github.com/vespa-engine/vespa/pull/15357#discussion_r525093273", "createdAt": "2020-11-17T11:46:54Z", "author": {"login": "bjorncs"}, "path": "clustercontroller-reindexer/src/main/java/ai/vespa/reindexing/ReindexingMetrics.java", "diffHunk": "@@ -0,0 +1,47 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package ai.vespa.reindexing;\n+\n+import com.yahoo.documentapi.ProgressToken;\n+import com.yahoo.jdisc.Metric;\n+\n+import java.time.Clock;\n+import java.util.Map;\n+\n+import static ai.vespa.reindexing.Reindexing.State.SUCCESSFUL;\n+\n+/**\n+ * Metrics for reindexing in a content cluster.\n+ *\n+ * @author jonmv\n+ */\n+class ReindexingMetrics {\n+\n+    private final Metric metric;\n+    private final String cluster;\n+\n+    ReindexingMetrics(Metric metric, String cluster) {\n+        this.metric = metric;\n+        this.cluster = cluster;\n+    }\n+\n+    void dump(Reindexing reindexing) {\n+        reindexing.status().forEach((type, status) -> {\n+            metric.set(\"reindexing.percent.done\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe5ea3f84adea4ae5aaf277f61651b35e71f463a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE0NDAzNA==", "bodyText": "Also, we should discuss the metric names in an architect meeting at some time.", "url": "https://github.com/vespa-engine/vespa/pull/15357#discussion_r525144034", "createdAt": "2020-11-17T13:15:41Z", "author": {"login": "geirst"}, "path": "clustercontroller-reindexer/src/main/java/ai/vespa/reindexing/ReindexingMetrics.java", "diffHunk": "@@ -0,0 +1,47 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package ai.vespa.reindexing;\n+\n+import com.yahoo.documentapi.ProgressToken;\n+import com.yahoo.jdisc.Metric;\n+\n+import java.time.Clock;\n+import java.util.Map;\n+\n+import static ai.vespa.reindexing.Reindexing.State.SUCCESSFUL;\n+\n+/**\n+ * Metrics for reindexing in a content cluster.\n+ *\n+ * @author jonmv\n+ */\n+class ReindexingMetrics {\n+\n+    private final Metric metric;\n+    private final String cluster;\n+\n+    ReindexingMetrics(Metric metric, String cluster) {\n+        this.metric = metric;\n+        this.cluster = cluster;\n+    }\n+\n+    void dump(Reindexing reindexing) {\n+        reindexing.status().forEach((type, status) -> {\n+            metric.set(\"reindexing.percent.done\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5MzI3Mw=="}, "originalCommit": {"oid": "fe5ea3f84adea4ae5aaf277f61651b35e71f463a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTIzODEzNw==", "bodyText": "Yes, that\u2019s the intention :) Feel free to reach out early with suggestions.", "url": "https://github.com/vespa-engine/vespa/pull/15357#discussion_r525238137", "createdAt": "2020-11-17T15:19:41Z", "author": {"login": "jonmv"}, "path": "clustercontroller-reindexer/src/main/java/ai/vespa/reindexing/ReindexingMetrics.java", "diffHunk": "@@ -0,0 +1,47 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package ai.vespa.reindexing;\n+\n+import com.yahoo.documentapi.ProgressToken;\n+import com.yahoo.jdisc.Metric;\n+\n+import java.time.Clock;\n+import java.util.Map;\n+\n+import static ai.vespa.reindexing.Reindexing.State.SUCCESSFUL;\n+\n+/**\n+ * Metrics for reindexing in a content cluster.\n+ *\n+ * @author jonmv\n+ */\n+class ReindexingMetrics {\n+\n+    private final Metric metric;\n+    private final String cluster;\n+\n+    ReindexingMetrics(Metric metric, String cluster) {\n+        this.metric = metric;\n+        this.cluster = cluster;\n+    }\n+\n+    void dump(Reindexing reindexing) {\n+        reindexing.status().forEach((type, status) -> {\n+            metric.set(\"reindexing.percent.done\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5MzI3Mw=="}, "originalCommit": {"oid": "fe5ea3f84adea4ae5aaf277f61651b35e71f463a"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjk5NzExOnYy", "diffSide": "RIGHT", "path": "clustercontroller-reindexer/src/main/java/ai/vespa/reindexing/Reindexer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMToyNDozM1rOH2Y0SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNzoyOTo1MFrOH2pwUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MTc1Mw==", "bodyText": "You should probably use a shared monitor/lock for both reindexing and status (unless they are used completely  independently of each other).", "url": "https://github.com/vespa-engine/vespa/pull/15357#discussion_r526791753", "createdAt": "2020-11-19T11:24:33Z", "author": {"login": "bjorncs"}, "path": "clustercontroller-reindexer/src/main/java/ai/vespa/reindexing/Reindexer.java", "diffHunk": "@@ -110,20 +107,20 @@ public void reindex() throws ReindexingLockException {\n     @SuppressWarnings(\"fallthrough\") // (\u30ce\u0ca0 \u2229\u0ca0)\u30ce\u5f61( \\o\u00b0o)\\\n     private void progress(DocumentType type) {\n         // If this is a new document type (or a new cluster), no reindexing is required.\n-        reindexing = database.readReindexing();\n-        status = reindexing.status().getOrDefault(type,\n-                                                  Status.ready(clock.instant())\n-                                                        .running()\n-                                                        .successful(clock.instant()));\n-        if (ready.get(type).isAfter(status.startedAt()))\n-            status = Status.ready(clock.instant()); // Need to restart, as a newer reindexing is required.\n-\n-        database.writeReindexing(reindexing = reindexing.with(type, status));\n-        metrics.dump(reindexing);\n-\n-        switch (status.state()) {\n+        AtomicReference<Reindexing> reindexing = new AtomicReference<>(database.readReindexing());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e70424ae2180ddd6c04267b009c0fb715a41fa5f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA2OTI2NQ==", "bodyText": "They are used independently enough imo.", "url": "https://github.com/vespa-engine/vespa/pull/15357#discussion_r527069265", "createdAt": "2020-11-19T17:29:50Z", "author": {"login": "jonmv"}, "path": "clustercontroller-reindexer/src/main/java/ai/vespa/reindexing/Reindexer.java", "diffHunk": "@@ -110,20 +107,20 @@ public void reindex() throws ReindexingLockException {\n     @SuppressWarnings(\"fallthrough\") // (\u30ce\u0ca0 \u2229\u0ca0)\u30ce\u5f61( \\o\u00b0o)\\\n     private void progress(DocumentType type) {\n         // If this is a new document type (or a new cluster), no reindexing is required.\n-        reindexing = database.readReindexing();\n-        status = reindexing.status().getOrDefault(type,\n-                                                  Status.ready(clock.instant())\n-                                                        .running()\n-                                                        .successful(clock.instant()));\n-        if (ready.get(type).isAfter(status.startedAt()))\n-            status = Status.ready(clock.instant()); // Need to restart, as a newer reindexing is required.\n-\n-        database.writeReindexing(reindexing = reindexing.with(type, status));\n-        metrics.dump(reindexing);\n-\n-        switch (status.state()) {\n+        AtomicReference<Reindexing> reindexing = new AtomicReference<>(database.readReindexing());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc5MTc1Mw=="}, "originalCommit": {"oid": "e70424ae2180ddd6c04267b009c0fb715a41fa5f"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 860, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}