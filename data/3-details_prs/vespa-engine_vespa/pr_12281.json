{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3Njg5OTIy", "number": 12281, "title": "Arnej/add nns iterator", "bodyText": "I confirm that this contribution is made under the terms of the license found in the root directory of this repository's source tree and that I have the authority necessary to make this contribution on behalf of its copyright owner.\n@geirst please review\n@baldersheim @havardpe FYI", "createdAt": "2020-02-20T11:02:32Z", "url": "https://github.com/vespa-engine/vespa/pull/12281", "merged": true, "mergeCommit": {"oid": "3ab530c774be833992bbec327dfd43a5ee7fa33a"}, "closed": true, "closedAt": "2020-02-20T14:19:03Z", "author": {"login": "arnej27959"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGHmTYAH2gAyMzc3Njg5OTIyOjRiMjE2ZWRmNzgzMjU4YWU5NTU1ZWUzMmExMmJkMGI3ZmVkYzVlYTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGe6vAAFqTM2MjU5NzEyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4b216edf783258ae9555ee32a12bd0b7fedc5ea1", "author": {"user": {"login": "arnej27959", "name": "Arne H Juul"}}, "url": "https://github.com/vespa-engine/vespa/commit/4b216edf783258ae9555ee32a12bd0b7fedc5ea1", "committedDate": "2020-02-20T09:20:48Z", "message": "add search iterator using result from find_top_k"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97ebc6ec54db9ea2005eb6cd958c3ce3c76cde63", "author": {"user": {"login": "arnej27959", "name": "Arne H Juul"}}, "url": "https://github.com/vespa-engine/vespa/commit/97ebc6ec54db9ea2005eb6cd958c3ce3c76cde63", "committedDate": "2020-02-20T10:26:05Z", "message": "unit test vector iterator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxODk3OTA2", "url": "https://github.com/vespa-engine/vespa/pull/12281#pullrequestreview-361897906", "createdAt": "2020-02-20T13:27:54Z", "commit": {"oid": "4b216edf783258ae9555ee32a12bd0b7fedc5ea1"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMzoyNzo1NFrOFsTOYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMzo1OTowMFrOFsUTig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk5NjY0MQ==", "bodyText": "Please add a short class description.", "url": "https://github.com/vespa-engine/vespa/pull/12281#discussion_r381996641", "createdAt": "2020-02-20T13:27:54Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/queryeval/nns_index_iterator.h", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright 2020 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"searchiterator.h\"\n+#include <vespa/searchlib/fef/termfieldmatchdata.h>\n+#include <vespa/searchlib/tensor/nearest_neighbor_index.h>\n+\n+namespace search::queryeval {\n+\n+class NnsIndexIterator : public SearchIterator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b216edf783258ae9555ee32a12bd0b7fedc5ea1"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk5ODkyNw==", "bodyText": "Something off with indentation?", "url": "https://github.com/vespa-engine/vespa/pull/12281#discussion_r381998927", "createdAt": "2020-02-20T13:32:07Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/queryeval/nns_index_iterator.cpp", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright 2020 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"nns_index_iterator.h\"\n+#include <vespa/searchlib/tensor/nearest_neighbor_index.h>\n+#include <cmath>\n+\n+using Hit = search::tensor::NearestNeighborIndex::Neighbor;\n+\n+namespace search::queryeval {\n+\n+class NeighborVectorIterator : public NnsIndexIterator\n+{\n+private:\n+    fef::TermFieldMatchData &_tfmd;\n+    const std::vector<Hit> &_hits;\n+    uint32_t _idx;\n+    double _last_sq_dist;\n+public:\n+    NeighborVectorIterator(fef::TermFieldMatchData &tfmd,\n+                           const std::vector<Hit> &hits)\n+        : _tfmd(tfmd),\n+          _hits(hits),\n+          _idx(0),\n+          _last_sq_dist(0.0)\n+    {}\n+\n+    void initRange(uint32_t begin_id, uint32_t end_id) override {\n+        SearchIterator::initRange(begin_id, end_id);\n+        _idx = 0;\n+    }\n+\n+    void doSeek(uint32_t docId) override {\n+        while (_idx < _hits.size()) {\n+            uint32_t hit_id = _hits[_idx].docid;\n+            if (hit_id < docId) {\n+                ++_idx;\n+            } else if (hit_id < getEndId()) {\n+                setDocId(hit_id);\n+                _last_sq_dist = _hits[_idx].distance;\n+                return;\n+            } else {\n+                _idx = _hits.size();\n+            }\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b216edf783258ae9555ee32a12bd0b7fedc5ea1"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAxNDM0Ng==", "bodyText": "To make the test easier to read, consider creating some helper functions: one that seeks and expects a match with associated raw score. The other that seeks but doesn't expect a match, but checks current doc id on the iterator. The last that seeks and expects to be at the end.", "url": "https://github.com/vespa-engine/vespa/pull/12281#discussion_r382014346", "createdAt": "2020-02-20T13:59:00Z", "author": {"login": "geirst"}, "path": "searchlib/src/tests/queryeval/nearest_neighbor/nearest_neighbor_test.cpp", "diffHunk": "@@ -190,4 +191,70 @@ TEST(\"require that NearestNeighborIterator sets expected rawscore\") {\n     TEST_DO(verify_iterator_sets_expected_rawscore(denseSpecFloat, denseSpecDouble));\n }\n \n+TEST(\"require that NnsIndexIterator works as expected\") {\n+    std::vector<NnsIndexIterator::Hit> hits{{2,4.0}, {3,9.0}, {5,1.0}, {8,16.0}, {9,36.0}};\n+    auto md = MatchData::makeTestInstance(2, 2);\n+    auto &tfmd = *(md->resolveTermField(0));\n+    auto search = NnsIndexIterator::create(true, tfmd, hits);\n+    uint32_t docid = 1;\n+    search->initFullRange();\n+    bool match = search->seek(docid);\n+    EXPECT_FALSE(match);\n+    EXPECT_FALSE(search->isAtEnd());\n+    EXPECT_EQUAL(2u, search->getDocId());\n+    docid = 2;\n+    match = search->seek(docid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ebc6ec54db9ea2005eb6cd958c3ce3c76cde63"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNTk0OTQ2", "url": "https://github.com/vespa-engine/vespa/pull/12281#pullrequestreview-362594946", "createdAt": "2020-02-21T12:26:29Z", "commit": {"oid": "97ebc6ec54db9ea2005eb6cd958c3ce3c76cde63"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMjoyNjoyOVrOFs1S1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMjoyNjoyOVrOFs1S1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1NDgzNw==", "bodyText": "consider keeping the Neighbor name", "url": "https://github.com/vespa-engine/vespa/pull/12281#discussion_r382554837", "createdAt": "2020-02-21T12:26:29Z", "author": {"login": "havardpe"}, "path": "searchlib/src/vespa/searchlib/queryeval/nns_index_iterator.h", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright 2020 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"searchiterator.h\"\n+#include <vespa/searchlib/fef/termfieldmatchdata.h>\n+#include <vespa/searchlib/tensor/nearest_neighbor_index.h>\n+\n+namespace search::queryeval {\n+\n+class NnsIndexIterator : public SearchIterator\n+{\n+public:\n+    using Hit = search::tensor::NearestNeighborIndex::Neighbor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ebc6ec54db9ea2005eb6cd958c3ce3c76cde63"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNTk3MTI2", "url": "https://github.com/vespa-engine/vespa/pull/12281#pullrequestreview-362597126", "createdAt": "2020-02-21T12:30:55Z", "commit": {"oid": "97ebc6ec54db9ea2005eb6cd958c3ce3c76cde63"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMjozMDo1NlrOFs1ZTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMjozMDo1NlrOFs1ZTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1NjQ5NQ==", "bodyText": "consider removing this if you are always strict, since the caller is kind of yourself anyways.", "url": "https://github.com/vespa-engine/vespa/pull/12281#discussion_r382556495", "createdAt": "2020-02-21T12:30:56Z", "author": {"login": "havardpe"}, "path": "searchlib/src/vespa/searchlib/queryeval/nns_index_iterator.cpp", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright 2020 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"nns_index_iterator.h\"\n+#include <vespa/searchlib/tensor/nearest_neighbor_index.h>\n+#include <cmath>\n+\n+using Hit = search::tensor::NearestNeighborIndex::Neighbor;\n+\n+namespace search::queryeval {\n+\n+class NeighborVectorIterator : public NnsIndexIterator\n+{\n+private:\n+    fef::TermFieldMatchData &_tfmd;\n+    const std::vector<Hit> &_hits;\n+    uint32_t _idx;\n+    double _last_sq_dist;\n+public:\n+    NeighborVectorIterator(fef::TermFieldMatchData &tfmd,\n+                           const std::vector<Hit> &hits)\n+        : _tfmd(tfmd),\n+          _hits(hits),\n+          _idx(0),\n+          _last_sq_dist(0.0)\n+    {}\n+\n+    void initRange(uint32_t begin_id, uint32_t end_id) override {\n+        SearchIterator::initRange(begin_id, end_id);\n+        _idx = 0;\n+    }\n+\n+    void doSeek(uint32_t docId) override {\n+        while (_idx < _hits.size()) {\n+            uint32_t hit_id = _hits[_idx].docid;\n+            if (hit_id < docId) {\n+                ++_idx;\n+            } else if (hit_id < getEndId()) {\n+                setDocId(hit_id);\n+                _last_sq_dist = _hits[_idx].distance;\n+                return;\n+            } else {\n+                _idx = _hits.size();\n+            }\n+\t}\n+        setAtEnd();\n+    }\n+\n+    void doUnpack(uint32_t docId) override {\n+        _tfmd.setRawScore(docId, sqrt(_last_sq_dist));\n+    }\n+\n+    Trinary is_strict() const override { return Trinary::True; }\n+};\n+\n+std::unique_ptr<NnsIndexIterator>\n+NnsIndexIterator::create(\n+        bool strict,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ebc6ec54db9ea2005eb6cd958c3ce3c76cde63"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2915, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}