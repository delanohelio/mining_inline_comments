{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MzE4NDcw", "number": 12464, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMDowNzo0NVrODlvjxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMDoxMzoyNFrODlvq2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTAzMTA5OnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/features/prod_features.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMDowNzo0NVrOFyzcrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDoxMToxNFrOFzqKCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNjA0Ng==", "bodyText": "in the future: maybe we need to enforce passing the data type", "url": "https://github.com/vespa-engine/vespa/pull/12464#discussion_r388816046", "createdAt": "2020-03-06T10:07:45Z", "author": {"login": "havardpe"}, "path": "searchlib/src/tests/features/prod_features.cpp", "diffHunk": "@@ -410,8 +411,8 @@ Test::setupForAttributeTest(FtFeatureTest &ft, bool setup_env)\n             .addField(FieldType::ATTRIBUTE, CollectionType::SINGLE, \"slong\")\n             .addField(FieldType::ATTRIBUTE, CollectionType::SINGLE, \"sdouble\")\n             .addField(FieldType::ATTRIBUTE, CollectionType::SINGLE, \"sbyte\")\n-            .addField(FieldType::ATTRIBUTE, CollectionType::SINGLE, \"sbool\")\n-            .addField(FieldType::ATTRIBUTE, CollectionType::SINGLE, \"sebool\");\n+            .addField(FieldType::ATTRIBUTE, CollectionType::SINGLE, DataType::BOOL,\"sbool\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a0a4fa7f5c48ca650579d79f1a459bc1d9828f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxMjM5NA==", "bodyText": "Agree.", "url": "https://github.com/vespa-engine/vespa/pull/12464#discussion_r389712394", "createdAt": "2020-03-09T14:11:14Z", "author": {"login": "baldersheim"}, "path": "searchlib/src/tests/features/prod_features.cpp", "diffHunk": "@@ -410,8 +411,8 @@ Test::setupForAttributeTest(FtFeatureTest &ft, bool setup_env)\n             .addField(FieldType::ATTRIBUTE, CollectionType::SINGLE, \"slong\")\n             .addField(FieldType::ATTRIBUTE, CollectionType::SINGLE, \"sdouble\")\n             .addField(FieldType::ATTRIBUTE, CollectionType::SINGLE, \"sbyte\")\n-            .addField(FieldType::ATTRIBUTE, CollectionType::SINGLE, \"sbool\")\n-            .addField(FieldType::ATTRIBUTE, CollectionType::SINGLE, \"sebool\");\n+            .addField(FieldType::ATTRIBUTE, CollectionType::SINGLE, DataType::BOOL,\"sbool\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNjA0Ng=="}, "originalCommit": {"oid": "d5a0a4fa7f5c48ca650579d79f1a459bc1d9828f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTA0MzY4OnYy", "diffSide": "RIGHT", "path": "streamingvisitors/src/vespa/searchvisitor/searchvisitor.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMDoxMTo0NlrOFyzkeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDoyMjoxOVrOFzqrdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxODA0Mg==", "bodyText": "should remove attr variable as well", "url": "https://github.com/vespa-engine/vespa/pull/12464#discussion_r388818042", "createdAt": "2020-03-06T10:11:46Z", "author": {"login": "havardpe"}, "path": "streamingvisitors/src/vespa/searchvisitor/searchvisitor.cpp", "diffHunk": "@@ -99,11 +99,11 @@ createAttribute(const vespalib::string & name, const document::FieldValue & fv)\n     AttributeVector::SP attr;\n \n     if (fv.inherits(document::ByteFieldValue::classId) || fv.inherits(document::IntFieldValue::classId) || fv.inherits(document::LongFieldValue::classId)) {\n-        attr.reset(new search::SingleIntegerExtAttribute(name));\n+        return std::make_shared<search::SingleIntegerExtAttribute>(name);\n     } else if (fv.inherits(document::DoubleFieldValue::classId) || fv.inherits(document::FloatFieldValue::classId)) {\n-        attr.reset(new search::SingleFloatExtAttribute(name));\n+        return std::make_shared<search::SingleFloatExtAttribute>(name);\n     } else if (fv.inherits(document::StringFieldValue::classId)) {\n-        attr.reset(new search::SingleStringExtAttribute(name));\n+        return std::make_shared<search::SingleStringExtAttribute>(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a0a4fa7f5c48ca650579d79f1a459bc1d9828f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyMDk0OA==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/12464#discussion_r389720948", "createdAt": "2020-03-09T14:22:19Z", "author": {"login": "baldersheim"}, "path": "streamingvisitors/src/vespa/searchvisitor/searchvisitor.cpp", "diffHunk": "@@ -99,11 +99,11 @@ createAttribute(const vespalib::string & name, const document::FieldValue & fv)\n     AttributeVector::SP attr;\n \n     if (fv.inherits(document::ByteFieldValue::classId) || fv.inherits(document::IntFieldValue::classId) || fv.inherits(document::LongFieldValue::classId)) {\n-        attr.reset(new search::SingleIntegerExtAttribute(name));\n+        return std::make_shared<search::SingleIntegerExtAttribute>(name);\n     } else if (fv.inherits(document::DoubleFieldValue::classId) || fv.inherits(document::FloatFieldValue::classId)) {\n-        attr.reset(new search::SingleFloatExtAttribute(name));\n+        return std::make_shared<search::SingleFloatExtAttribute>(name);\n     } else if (fv.inherits(document::StringFieldValue::classId)) {\n-        attr.reset(new search::SingleStringExtAttribute(name));\n+        return std::make_shared<search::SingleStringExtAttribute>(name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxODA0Mg=="}, "originalCommit": {"oid": "d5a0a4fa7f5c48ca650579d79f1a459bc1d9828f"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTA0OTIyOnYy", "diffSide": "RIGHT", "path": "streamingvisitors/src/vespa/searchvisitor/searchvisitor.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMDoxMzoyNFrOFyzn1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDoyMjozMFrOFzqr9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxODkwMg==", "bodyText": "could just construct len directly from valueRef.size() instead of using a temporary", "url": "https://github.com/vespa-engine/vespa/pull/12464#discussion_r388818902", "createdAt": "2020-03-06T10:13:24Z", "author": {"login": "havardpe"}, "path": "streamingvisitors/src/vespa/searchvisitor/searchvisitor.cpp", "diffHunk": "@@ -240,9 +240,9 @@ void SearchVisitor::init(const Parameters & params)\n         LOG(debug, \"QFLAG_DUMP_FEATURES: %s\", _rankController.getDumpFeatures() ? \"true\" : \"false\");\n     }\n \n-    if (params.lookup(\"rankproperties\", valueRef) && valueRef.size() > 0) {\n+    if (params.lookup(\"rankproperties\", valueRef) && ! valueRef.empty()) {\n         LOG(spam, \"Received rank properties of %zd bytes\", valueRef.size());\n-        uint32_t len = static_cast<uint32_t>(valueRef.size());\n+        uint32_t len = uint32_t(valueRef.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5a0a4fa7f5c48ca650579d79f1a459bc1d9828f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyMTA3Ng==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/12464#discussion_r389721076", "createdAt": "2020-03-09T14:22:30Z", "author": {"login": "baldersheim"}, "path": "streamingvisitors/src/vespa/searchvisitor/searchvisitor.cpp", "diffHunk": "@@ -240,9 +240,9 @@ void SearchVisitor::init(const Parameters & params)\n         LOG(debug, \"QFLAG_DUMP_FEATURES: %s\", _rankController.getDumpFeatures() ? \"true\" : \"false\");\n     }\n \n-    if (params.lookup(\"rankproperties\", valueRef) && valueRef.size() > 0) {\n+    if (params.lookup(\"rankproperties\", valueRef) && ! valueRef.empty()) {\n         LOG(spam, \"Received rank properties of %zd bytes\", valueRef.size());\n-        uint32_t len = static_cast<uint32_t>(valueRef.size());\n+        uint32_t len = uint32_t(valueRef.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxODkwMg=="}, "originalCommit": {"oid": "d5a0a4fa7f5c48ca650579d79f1a459bc1d9828f"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2317, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}