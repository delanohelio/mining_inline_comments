{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3MjMxMDQ3", "number": 11952, "title": "Use testerReady call via config server for tester containers if flag \u2026", "bodyText": "\u2026is set", "createdAt": "2020-01-26T15:45:20Z", "url": "https://github.com/vespa-engine/vespa/pull/11952", "merged": true, "mergeCommit": {"oid": "e0ce7ed6df4877721284f338f03a85750df112d1"}, "closed": true, "closedAt": "2020-01-26T20:20:33Z", "author": {"login": "hmusum"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-KGqtAH2gAyMzY3MjMxMDQ3OjNkYmY3MzRjZmU1ZWMyN2RkYjc3YzkzNzJlZDVhYTA4YTU2ZmE2MmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb-L5fVgFqTM0ODM5NTA0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3dbf734cfe5ec27ddb77c9372ed5aa08a56fa62f", "author": {"user": {"login": "hmusum", "name": "Harald Musum"}}, "url": "https://github.com/vespa-engine/vespa/commit/3dbf734cfe5ec27ddb77c9372ed5aa08a56fa62f", "committedDate": "2020-01-26T15:44:34Z", "message": "Use testerReady call via config server for tester containers if flag is set"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4Mzk0OTI1", "url": "https://github.com/vespa-engine/vespa/pull/11952#pullrequestreview-348394925", "createdAt": "2020-01-26T17:47:09Z", "commit": {"oid": "3dbf734cfe5ec27ddb77c9372ed5aa08a56fa62f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxNzo0NzowOVrOFh1HKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxNzo0NzowOVrOFh1HKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxNzUxNQ==", "bodyText": "Should this use the config server way as well?", "url": "https://github.com/vespa-engine/vespa/pull/11952#discussion_r371017515", "createdAt": "2020-01-26T17:47:09Z", "author": {"login": "jonmv"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/deployment/InternalStepRunner.java", "diffHunk": "@@ -455,6 +456,22 @@ private boolean containersAreUp(ApplicationId id, ZoneId zoneId, DualLogger logg\n         return true;\n     }\n \n+    /** Returns true iff all containers in the tester deployment give 100 consecutive 200 OK responses on /status.html. */\n+    private boolean testerContainersAreUp(ApplicationId id, ZoneId zoneId, DualLogger logger) {\n+        if (useConfigServerForTesterAPI(zoneId)) {\n+            DeploymentId deploymentId = new DeploymentId(id, zoneId);\n+            if (controller.jobController().cloud().testerReady(deploymentId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dbf734cfe5ec27ddb77c9372ed5aa08a56fa62f"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4Mzk1MDAw", "url": "https://github.com/vespa-engine/vespa/pull/11952#pullrequestreview-348395000", "createdAt": "2020-01-26T17:48:57Z", "commit": {"oid": "3dbf734cfe5ec27ddb77c9372ed5aa08a56fa62f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxNzo0ODo1N1rOFh1HkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxNzo0ODo1N1rOFh1HkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxNzYxNw==", "bodyText": "Was this used? (Reviewing on phone...)", "url": "https://github.com/vespa-engine/vespa/pull/11952#discussion_r371017617", "createdAt": "2020-01-26T17:48:57Z", "author": {"login": "jonmv"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/deployment/InternalStepRunner.java", "diffHunk": "@@ -525,38 +542,58 @@ private String humanize(Node.ServiceState state) {\n                                     .productionDeployments().keySet().stream()\n                                     .map(zone -> new DeploymentId(id.application(), zone))\n                                     .collect(Collectors.toSet());\n-        deployments.add(new DeploymentId(id.application(), id.type().zone(controller.system())));\n+        ZoneId zoneId = id.type().zone(controller.system());\n+        deployments.add(new DeploymentId(id.application(), zoneId));\n \n         logger.log(\"Attempting to find endpoints ...\");\n         var endpoints = controller.applications().clusterEndpoints(deployments);\n-        if ( ! endpoints.containsKey(id.type().zone(controller.system()))) {\n+        if ( ! endpoints.containsKey(zoneId)) {\n             logger.log(WARNING, \"Endpoints for the deployment to test vanished again, while it was still active!\");\n             return Optional.of(error);\n         }\n         logEndpoints(endpoints, logger);\n \n         Optional<URI> testerEndpoint = controller.jobController().testerEndpoint(id);\n-        if (testerEndpoint.isEmpty()) {\n-            logger.log(WARNING, \"Endpoints for the tester container vanished again, while it was still active!\");\n-            return Optional.of(error);\n-        }\n+        if (useConfigServerForTesterAPI(zoneId)) {\n+            if ( ! controller.serviceRegistry().configServer().isTesterReady(getTesterDeploymentId(id))) {\n+                logger.log(WARNING, \"Tester container went bad!\");\n+                return Optional.of(error);\n+            }\n+        } else {\n+            if (testerEndpoint.isEmpty()) {\n+                logger.log(WARNING, \"Endpoints for the tester container vanished again, while it was still active!\");\n+                return Optional.of(error);\n+            }\n \n-        if ( ! controller.jobController().cloud().testerReady(testerEndpoint.get())) {\n-            logger.log(WARNING, \"Tester container went bad!\");\n-            return Optional.of(error);\n+            if ( ! controller.jobController().cloud().testerReady(testerEndpoint.get())) {\n+                logger.log(WARNING, \"Tester container went bad!\");\n+                return Optional.of(error);\n+            }\n         }\n \n         logger.log(\"Starting tests ...\");\n-        controller.jobController().cloud().startTests(testerEndpoint.get(),\n-                                                      TesterCloud.Suite.of(id.type(), isSetup),\n-                                                      testConfigSerializer.configJson(id.application(),\n-                                                                                      id.type(),\n-                                                                                      true,\n-                                                                                      endpoints,\n-                                                                                      controller.applications().contentClustersByZone(deployments)));\n+        TesterCloud.Suite suite = TesterCloud.Suite.of(id.type(), isSetup);\n+        byte[] config = testConfigSerializer.configJson(id.application(),\n+                                                        id.type(),\n+                                                        true,\n+                                                        endpoints,\n+                                                        controller.applications().contentClustersByZone(deployments));\n+        if (useConfigServerForTesterAPI(zoneId)) {\n+            controller.serviceRegistry().configServer().startTests(getTesterDeploymentId(id), suite, config);\n+        } else {\n+            controller.jobController().cloud().startTests(testerEndpoint.get(), suite, config);\n+        }\n         return Optional.of(running);\n     }\n \n+    private boolean testerReady(RunId id, URI testerEndpoint) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dbf734cfe5ec27ddb77c9372ed5aa08a56fa62f"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4Mzk1MDQ3", "url": "https://github.com/vespa-engine/vespa/pull/11952#pullrequestreview-348395047", "createdAt": "2020-01-26T17:49:59Z", "commit": {"oid": "3dbf734cfe5ec27ddb77c9372ed5aa08a56fa62f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3882, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}