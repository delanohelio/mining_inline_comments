{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNDQzNjcx", "number": 14108, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo1Nzo1M1rOEaax-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDoyNDoxNFrOEadaXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTM3MjEwOnYy", "diffSide": "LEFT", "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwODo1Nzo1M1rOHD1mIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMTozMjoyN1rOHD8q9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4NTg4OQ==", "bodyText": "Consider also removing forward declaration earlier in the file.", "url": "https://github.com/vespa-engine/vespa/pull/14108#discussion_r473785889", "createdAt": "2020-08-20T08:57:53Z", "author": {"login": "toregge"}, "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.h", "diffHunk": "@@ -81,24 +81,21 @@ class StoreOnlyFeedView : public IFeedView,\n         const std::shared_ptr<const document::DocumentTypeRepo>    &_repo;\n         searchcorespi::index::IThreadingService &_writeService;\n         documentmetastore::ILidReuseDelayer     &_lidReuseDelayer;\n-        CommitTimeTracker                       &_commitTimeTracker;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c912d10154c3d554ca42d635377b9e34e3c882a4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkwMTgxNA==", "bodyText": "Fixed.", "url": "https://github.com/vespa-engine/vespa/pull/14108#discussion_r473901814", "createdAt": "2020-08-20T11:32:27Z", "author": {"login": "baldersheim"}, "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.h", "diffHunk": "@@ -81,24 +81,21 @@ class StoreOnlyFeedView : public IFeedView,\n         const std::shared_ptr<const document::DocumentTypeRepo>    &_repo;\n         searchcorespi::index::IThreadingService &_writeService;\n         documentmetastore::ILidReuseDelayer     &_lidReuseDelayer;\n-        CommitTimeTracker                       &_commitTimeTracker;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4NTg4OQ=="}, "originalCommit": {"oid": "c912d10154c3d554ca42d635377b9e34e3c882a4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTgwMzE2OnYy", "diffSide": "RIGHT", "path": "searchcore/src/tests/proton/documentdb/configurer/configurer_test.cpp", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDoyNDoxNFrOHD59tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjoyNDo0NVrOHD-YoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1NzQ2Mg==", "bodyText": "Use of auto here triggers a stack use after scope error (detected by address sanitizer).", "url": "https://github.com/vespa-engine/vespa/pull/14108#discussion_r473857462", "createdAt": "2020-08-20T10:24:14Z", "author": {"login": "toregge"}, "path": "searchcore/src/tests/proton/documentdb/configurer/configurer_test.cpp", "diffHunk": "@@ -267,16 +262,16 @@ struct MyFastAccessFeedView\n         ISummaryAdapter::SP summaryAdapter(new MySummaryAdapter());\n         Schema::SP schema(new Schema());\n         _dmsc = make_shared<DocumentMetaStoreContext>(std::make_shared<BucketDBOwner>());\n-        _lidReuseDelayer.reset(new documentmetastore::LidReuseDelayer(_writeService, _dmsc->get()));\n+        _lidReuseDelayer = std::make_unique<documentmetastore::LidReuseDelayer>(_writeService, _dmsc->get());\n         std::shared_ptr<const DocumentTypeRepo> repo = createRepo();\n         StoreOnlyFeedView::Context storeOnlyCtx(summaryAdapter, schema, _dmsc, *_gidToLidChangeHandler, repo,\n-                                                _writeService, *_lidReuseDelayer, _commitTimeTracker);\n+                                                _writeService, *_lidReuseDelayer);\n         StoreOnlyFeedView::PersistentParams params(1, 1, DocTypeName(DOC_TYPE), 0, SubDbType::NOTREADY);\n         auto mgr = make_shared<AttributeManager>(BASE_DIR, \"test.subdb\", TuneFileAttributes(), _fileHeaderContext,\n                                                  _writeService.attributeFieldWriter(), _writeService.shared(), _hwInfo);\n-        IAttributeWriter::SP writer(new AttributeWriter(mgr));\n+        auto writer = std::make_shared<AttributeWriter>(mgr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c912d10154c3d554ca42d635377b9e34e3c882a4"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkwMTc0Mg==", "bodyText": "How does that change scope ?", "url": "https://github.com/vespa-engine/vespa/pull/14108#discussion_r473901742", "createdAt": "2020-08-20T11:32:17Z", "author": {"login": "baldersheim"}, "path": "searchcore/src/tests/proton/documentdb/configurer/configurer_test.cpp", "diffHunk": "@@ -267,16 +262,16 @@ struct MyFastAccessFeedView\n         ISummaryAdapter::SP summaryAdapter(new MySummaryAdapter());\n         Schema::SP schema(new Schema());\n         _dmsc = make_shared<DocumentMetaStoreContext>(std::make_shared<BucketDBOwner>());\n-        _lidReuseDelayer.reset(new documentmetastore::LidReuseDelayer(_writeService, _dmsc->get()));\n+        _lidReuseDelayer = std::make_unique<documentmetastore::LidReuseDelayer>(_writeService, _dmsc->get());\n         std::shared_ptr<const DocumentTypeRepo> repo = createRepo();\n         StoreOnlyFeedView::Context storeOnlyCtx(summaryAdapter, schema, _dmsc, *_gidToLidChangeHandler, repo,\n-                                                _writeService, *_lidReuseDelayer, _commitTimeTracker);\n+                                                _writeService, *_lidReuseDelayer);\n         StoreOnlyFeedView::PersistentParams params(1, 1, DocTypeName(DOC_TYPE), 0, SubDbType::NOTREADY);\n         auto mgr = make_shared<AttributeManager>(BASE_DIR, \"test.subdb\", TuneFileAttributes(), _fileHeaderContext,\n                                                  _writeService.attributeFieldWriter(), _writeService.shared(), _hwInfo);\n-        IAttributeWriter::SP writer(new AttributeWriter(mgr));\n+        auto writer = std::make_shared<AttributeWriter>(mgr);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1NzQ2Mg=="}, "originalCommit": {"oid": "c912d10154c3d554ca42d635377b9e34e3c882a4"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkyMDE0Mg==", "bodyText": "A reference to a temporary std::shared_pointer is passed to FastAccessFeedView::Context constructor and goes out of scope right afterwards, causing fastUpdateCtx to reference a dead stack variable.", "url": "https://github.com/vespa-engine/vespa/pull/14108#discussion_r473920142", "createdAt": "2020-08-20T12:07:01Z", "author": {"login": "toregge"}, "path": "searchcore/src/tests/proton/documentdb/configurer/configurer_test.cpp", "diffHunk": "@@ -267,16 +262,16 @@ struct MyFastAccessFeedView\n         ISummaryAdapter::SP summaryAdapter(new MySummaryAdapter());\n         Schema::SP schema(new Schema());\n         _dmsc = make_shared<DocumentMetaStoreContext>(std::make_shared<BucketDBOwner>());\n-        _lidReuseDelayer.reset(new documentmetastore::LidReuseDelayer(_writeService, _dmsc->get()));\n+        _lidReuseDelayer = std::make_unique<documentmetastore::LidReuseDelayer>(_writeService, _dmsc->get());\n         std::shared_ptr<const DocumentTypeRepo> repo = createRepo();\n         StoreOnlyFeedView::Context storeOnlyCtx(summaryAdapter, schema, _dmsc, *_gidToLidChangeHandler, repo,\n-                                                _writeService, *_lidReuseDelayer, _commitTimeTracker);\n+                                                _writeService, *_lidReuseDelayer);\n         StoreOnlyFeedView::PersistentParams params(1, 1, DocTypeName(DOC_TYPE), 0, SubDbType::NOTREADY);\n         auto mgr = make_shared<AttributeManager>(BASE_DIR, \"test.subdb\", TuneFileAttributes(), _fileHeaderContext,\n                                                  _writeService.attributeFieldWriter(), _writeService.shared(), _hwInfo);\n-        IAttributeWriter::SP writer(new AttributeWriter(mgr));\n+        auto writer = std::make_shared<AttributeWriter>(mgr);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1NzQ2Mg=="}, "originalCommit": {"oid": "c912d10154c3d554ca42d635377b9e34e3c882a4"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkyOTg4OQ==", "bodyText": "Fixed implementation of ...::Context to use shared_ptr by value instead.", "url": "https://github.com/vespa-engine/vespa/pull/14108#discussion_r473929889", "createdAt": "2020-08-20T12:24:45Z", "author": {"login": "baldersheim"}, "path": "searchcore/src/tests/proton/documentdb/configurer/configurer_test.cpp", "diffHunk": "@@ -267,16 +262,16 @@ struct MyFastAccessFeedView\n         ISummaryAdapter::SP summaryAdapter(new MySummaryAdapter());\n         Schema::SP schema(new Schema());\n         _dmsc = make_shared<DocumentMetaStoreContext>(std::make_shared<BucketDBOwner>());\n-        _lidReuseDelayer.reset(new documentmetastore::LidReuseDelayer(_writeService, _dmsc->get()));\n+        _lidReuseDelayer = std::make_unique<documentmetastore::LidReuseDelayer>(_writeService, _dmsc->get());\n         std::shared_ptr<const DocumentTypeRepo> repo = createRepo();\n         StoreOnlyFeedView::Context storeOnlyCtx(summaryAdapter, schema, _dmsc, *_gidToLidChangeHandler, repo,\n-                                                _writeService, *_lidReuseDelayer, _commitTimeTracker);\n+                                                _writeService, *_lidReuseDelayer);\n         StoreOnlyFeedView::PersistentParams params(1, 1, DocTypeName(DOC_TYPE), 0, SubDbType::NOTREADY);\n         auto mgr = make_shared<AttributeManager>(BASE_DIR, \"test.subdb\", TuneFileAttributes(), _fileHeaderContext,\n                                                  _writeService.attributeFieldWriter(), _writeService.shared(), _hwInfo);\n-        IAttributeWriter::SP writer(new AttributeWriter(mgr));\n+        auto writer = std::make_shared<AttributeWriter>(mgr);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1NzQ2Mg=="}, "originalCommit": {"oid": "c912d10154c3d554ca42d635377b9e34e3c882a4"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1468, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}