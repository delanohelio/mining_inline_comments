{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MjI5NzUx", "number": 14190, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwOTo1NTo0OVrOEdm7ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMDowNzowMFrOEdnbbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NDgxOTc5OnYy", "diffSide": "RIGHT", "path": "configserver/src/main/java/com/yahoo/vespa/config/server/session/RemoteSession.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwOTo1NTo0OVrOHI3D8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMDo0MTo0OVrOHI6acg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA1Mjc4Ng==", "bodyText": "Would like a name change here, to deactivated()", "url": "https://github.com/vespa-engine/vespa/pull/14190#discussion_r479052786", "createdAt": "2020-08-28T09:55:49Z", "author": {"login": "jonmv"}, "path": "configserver/src/main/java/com/yahoo/vespa/config/server/session/RemoteSession.java", "diffHunk": "@@ -26,95 +15,46 @@\n  */\n public class RemoteSession extends Session {\n \n-    private static final Logger log = Logger.getLogger(RemoteSession.class.getName());\n-    private ApplicationSet applicationSet = null;\n-    private final ActivatedModelsBuilder applicationLoader;\n-    private final Clock clock;\n+    private final Optional<ApplicationSet> applicationSet;\n \n     /**\n-     * Creates a session. This involves loading the application, validating it and distributing it.\n+     * Creates a remote session, no application set loaded\n      *\n      * @param tenant The name of the tenant creating session\n      * @param sessionId The session id for this session.\n-     * @param componentRegistry a registry of global components\n      * @param zooKeeperClient a SessionZooKeeperClient instance\n      */\n     public RemoteSession(TenantName tenant,\n                          long sessionId,\n-                         GlobalComponentRegistry componentRegistry,\n                          SessionZooKeeperClient zooKeeperClient) {\n-        super(tenant, sessionId, zooKeeperClient);\n-        this.applicationLoader = new ActivatedModelsBuilder(tenant, sessionId, zooKeeperClient, componentRegistry);\n-        this.clock = componentRegistry.getClock();\n-    }\n-\n-    void prepare() {\n-        Curator.CompletionWaiter waiter = sessionZooKeeperClient.getPrepareWaiter();\n-        ensureApplicationLoaded();\n-        notifyCompletion(waiter);\n+        this(tenant, sessionId, zooKeeperClient, Optional.empty());\n     }\n \n-    private ApplicationSet loadApplication() {\n-        ApplicationPackage applicationPackage = sessionZooKeeperClient.loadApplicationPackage();\n-\n-        // Read hosts allocated on the config server instance which created this\n-        Optional<AllocatedHosts> allocatedHosts = applicationPackage.getAllocatedHosts();\n-\n-        return ApplicationSet.fromList(applicationLoader.buildModels(getApplicationId(),\n-                                                                     sessionZooKeeperClient.readDockerImageRepository(),\n-                                                                     sessionZooKeeperClient.readVespaVersion(),\n-                                                                     applicationPackage,\n-                                                                     new SettableOptional<>(allocatedHosts),\n-                                                                     clock.instant()));\n+    /**\n+     * Creates a remote session, with application set\n+     *\n+     * @param tenant The name of the tenant creating session\n+     * @param sessionId The session id for this session.\n+     * @param zooKeeperClient a SessionZooKeeperClient instance\n+     */\n+    public RemoteSession(TenantName tenant,\n+                         long sessionId,\n+                         SessionZooKeeperClient zooKeeperClient,\n+                         Optional<ApplicationSet> applicationSet) {\n+        super(tenant, sessionId, zooKeeperClient);\n+        this.applicationSet = applicationSet;\n     }\n \n-    public synchronized ApplicationSet ensureApplicationLoaded() {\n-        return applicationSet == null ? applicationSet = loadApplication() : applicationSet;\n+    Optional<ApplicationSet> applicationSet() {\n+        return applicationSet;\n     }\n \n-    public synchronized void deactivate() {\n-        applicationSet = null;\n+    public synchronized RemoteSession deactivate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4dc7b37309d87a5cd9ef13891a29132101017c9"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTEwNzY5OA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/vespa-engine/vespa/pull/14190#discussion_r479107698", "createdAt": "2020-08-28T10:41:49Z", "author": {"login": "hmusum"}, "path": "configserver/src/main/java/com/yahoo/vespa/config/server/session/RemoteSession.java", "diffHunk": "@@ -26,95 +15,46 @@\n  */\n public class RemoteSession extends Session {\n \n-    private static final Logger log = Logger.getLogger(RemoteSession.class.getName());\n-    private ApplicationSet applicationSet = null;\n-    private final ActivatedModelsBuilder applicationLoader;\n-    private final Clock clock;\n+    private final Optional<ApplicationSet> applicationSet;\n \n     /**\n-     * Creates a session. This involves loading the application, validating it and distributing it.\n+     * Creates a remote session, no application set loaded\n      *\n      * @param tenant The name of the tenant creating session\n      * @param sessionId The session id for this session.\n-     * @param componentRegistry a registry of global components\n      * @param zooKeeperClient a SessionZooKeeperClient instance\n      */\n     public RemoteSession(TenantName tenant,\n                          long sessionId,\n-                         GlobalComponentRegistry componentRegistry,\n                          SessionZooKeeperClient zooKeeperClient) {\n-        super(tenant, sessionId, zooKeeperClient);\n-        this.applicationLoader = new ActivatedModelsBuilder(tenant, sessionId, zooKeeperClient, componentRegistry);\n-        this.clock = componentRegistry.getClock();\n-    }\n-\n-    void prepare() {\n-        Curator.CompletionWaiter waiter = sessionZooKeeperClient.getPrepareWaiter();\n-        ensureApplicationLoaded();\n-        notifyCompletion(waiter);\n+        this(tenant, sessionId, zooKeeperClient, Optional.empty());\n     }\n \n-    private ApplicationSet loadApplication() {\n-        ApplicationPackage applicationPackage = sessionZooKeeperClient.loadApplicationPackage();\n-\n-        // Read hosts allocated on the config server instance which created this\n-        Optional<AllocatedHosts> allocatedHosts = applicationPackage.getAllocatedHosts();\n-\n-        return ApplicationSet.fromList(applicationLoader.buildModels(getApplicationId(),\n-                                                                     sessionZooKeeperClient.readDockerImageRepository(),\n-                                                                     sessionZooKeeperClient.readVespaVersion(),\n-                                                                     applicationPackage,\n-                                                                     new SettableOptional<>(allocatedHosts),\n-                                                                     clock.instant()));\n+    /**\n+     * Creates a remote session, with application set\n+     *\n+     * @param tenant The name of the tenant creating session\n+     * @param sessionId The session id for this session.\n+     * @param zooKeeperClient a SessionZooKeeperClient instance\n+     */\n+    public RemoteSession(TenantName tenant,\n+                         long sessionId,\n+                         SessionZooKeeperClient zooKeeperClient,\n+                         Optional<ApplicationSet> applicationSet) {\n+        super(tenant, sessionId, zooKeeperClient);\n+        this.applicationSet = applicationSet;\n     }\n \n-    public synchronized ApplicationSet ensureApplicationLoaded() {\n-        return applicationSet == null ? applicationSet = loadApplication() : applicationSet;\n+    Optional<ApplicationSet> applicationSet() {\n+        return applicationSet;\n     }\n \n-    public synchronized void deactivate() {\n-        applicationSet = null;\n+    public synchronized RemoteSession deactivate() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA1Mjc4Ng=="}, "originalCommit": {"oid": "c4dc7b37309d87a5cd9ef13891a29132101017c9"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NDg0MzE3OnYy", "diffSide": "RIGHT", "path": "configserver/src/main/java/com/yahoo/vespa/config/server/session/SessionRepository.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwOTo1OTowOVrOHI3T_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMDo0MTo0NFrOHI6aDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA1Njg5NQ==", "bodyText": "addSession should perhaps also be named putSession?", "url": "https://github.com/vespa-engine/vespa/pull/14190#discussion_r479056895", "createdAt": "2020-08-28T09:59:09Z", "author": {"login": "jonmv"}, "path": "configserver/src/main/java/com/yahoo/vespa/config/server/session/SessionRepository.java", "diffHunk": "@@ -275,13 +280,25 @@ public int deleteExpiredRemoteSessions(Clock clock, Duration expiryTime) {\n             if (session.getStatus() == Session.Status.ACTIVATE) continue;\n             if (sessionHasExpired(session.getCreateTime(), expiryTime, clock)) {\n                 log.log(Level.FINE, \"Remote session \" + sessionId + \" for \" + tenantName + \" has expired, deleting it\");\n-                session.delete();\n+                deleteSession(session);\n                 deleted++;\n             }\n         }\n         return deleted;\n     }\n \n+\n+    public void deactivate(RemoteSession remoteSession) {\n+        remoteSessionCache.addSession(remoteSession.deactivate());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4dc7b37309d87a5cd9ef13891a29132101017c9"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTEwNzU5OA==", "bodyText": "Agreed, will fix", "url": "https://github.com/vespa-engine/vespa/pull/14190#discussion_r479107598", "createdAt": "2020-08-28T10:41:44Z", "author": {"login": "hmusum"}, "path": "configserver/src/main/java/com/yahoo/vespa/config/server/session/SessionRepository.java", "diffHunk": "@@ -275,13 +280,25 @@ public int deleteExpiredRemoteSessions(Clock clock, Duration expiryTime) {\n             if (session.getStatus() == Session.Status.ACTIVATE) continue;\n             if (sessionHasExpired(session.getCreateTime(), expiryTime, clock)) {\n                 log.log(Level.FINE, \"Remote session \" + sessionId + \" for \" + tenantName + \" has expired, deleting it\");\n-                session.delete();\n+                deleteSession(session);\n                 deleted++;\n             }\n         }\n         return deleted;\n     }\n \n+\n+    public void deactivate(RemoteSession remoteSession) {\n+        remoteSessionCache.addSession(remoteSession.deactivate());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA1Njg5NQ=="}, "originalCommit": {"oid": "c4dc7b37309d87a5cd9ef13891a29132101017c9"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NDg2Mjc0OnYy", "diffSide": "RIGHT", "path": "configserver/src/main/java/com/yahoo/vespa/config/server/session/SessionRepository.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMDowMTo0NVrOHI3grQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMDo0NDo0M1rOHI6njw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA2MDE0MQ==", "bodyText": "Shouldn't this also be deactivate(remoteSession)? This does nothing now.", "url": "https://github.com/vespa-engine/vespa/pull/14190#discussion_r479060141", "createdAt": "2020-08-28T10:01:45Z", "author": {"login": "jonmv"}, "path": "configserver/src/main/java/com/yahoo/vespa/config/server/session/SessionRepository.java", "diffHunk": "@@ -358,27 +375,19 @@ void activate(RemoteSession session) {\n         long sessionId = session.getSessionId();\n         Curator.CompletionWaiter waiter = createSessionZooKeeperClient(sessionId).getActiveWaiter();\n         log.log(Level.FINE, () -> session.logPre() + \"Getting session from repo: \" + sessionId);\n-        ApplicationSet app = session.ensureApplicationLoaded();\n+        ApplicationSet app = ensureApplicationLoaded(session);\n         log.log(Level.FINE, () -> session.logPre() + \"Reloading config for \" + sessionId);\n         applicationRepo.reloadConfig(app);\n         log.log(Level.FINE, () -> session.logPre() + \"Notifying \" + waiter);\n-        session.notifyCompletion(waiter);\n+        notifyCompletion(waiter, session);\n         log.log(Level.INFO, session.logPre() + \"Session activated: \" + sessionId);\n     }\n \n-    public void deactivate(RemoteSession remoteSession) {\n-        remoteSession.deactivate();\n-    }\n-\n-    public void delete(RemoteSession remoteSession, Optional<LocalSession> localSession) {\n+    public void deleteSession(RemoteSession remoteSession, Optional<LocalSession> localSession) {\n         localSession.ifPresent(this::deleteLocalSession);\n         remoteSession.deactivate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4dc7b37309d87a5cd9ef13891a29132101017c9"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTExMTA1NQ==", "bodyText": "Yes, thanks", "url": "https://github.com/vespa-engine/vespa/pull/14190#discussion_r479111055", "createdAt": "2020-08-28T10:44:43Z", "author": {"login": "hmusum"}, "path": "configserver/src/main/java/com/yahoo/vespa/config/server/session/SessionRepository.java", "diffHunk": "@@ -358,27 +375,19 @@ void activate(RemoteSession session) {\n         long sessionId = session.getSessionId();\n         Curator.CompletionWaiter waiter = createSessionZooKeeperClient(sessionId).getActiveWaiter();\n         log.log(Level.FINE, () -> session.logPre() + \"Getting session from repo: \" + sessionId);\n-        ApplicationSet app = session.ensureApplicationLoaded();\n+        ApplicationSet app = ensureApplicationLoaded(session);\n         log.log(Level.FINE, () -> session.logPre() + \"Reloading config for \" + sessionId);\n         applicationRepo.reloadConfig(app);\n         log.log(Level.FINE, () -> session.logPre() + \"Notifying \" + waiter);\n-        session.notifyCompletion(waiter);\n+        notifyCompletion(waiter, session);\n         log.log(Level.INFO, session.logPre() + \"Session activated: \" + sessionId);\n     }\n \n-    public void deactivate(RemoteSession remoteSession) {\n-        remoteSession.deactivate();\n-    }\n-\n-    public void delete(RemoteSession remoteSession, Optional<LocalSession> localSession) {\n+    public void deleteSession(RemoteSession remoteSession, Optional<LocalSession> localSession) {\n         localSession.ifPresent(this::deleteLocalSession);\n         remoteSession.deactivate();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA2MDE0MQ=="}, "originalCommit": {"oid": "c4dc7b37309d87a5cd9ef13891a29132101017c9"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NDkwMTU5OnYy", "diffSide": "RIGHT", "path": "configserver/src/main/java/com/yahoo/vespa/config/server/session/SessionRepository.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMDowNzowMFrOHI35vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMDo0MToyN1rOHI6YwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA2NjU1Nw==", "bodyText": "Why session.getSessionZooKeeperClient() here, and createSessionZooKeeperClient(session.getSessionId()) elsewhere?", "url": "https://github.com/vespa-engine/vespa/pull/14190#discussion_r479066557", "createdAt": "2020-08-28T10:07:00Z", "author": {"login": "jonmv"}, "path": "configserver/src/main/java/com/yahoo/vespa/config/server/session/SessionRepository.java", "diffHunk": "@@ -394,13 +403,84 @@ private void loadSessionIfActive(RemoteSession session) {\n         for (ApplicationId applicationId : applicationRepo.activeApplications()) {\n             if (applicationRepo.requireActiveSessionOf(applicationId) == session.getSessionId()) {\n                 log.log(Level.FINE, () -> \"Found active application for session \" + session.getSessionId() + \" , loading it\");\n-                applicationRepo.reloadConfig(session.ensureApplicationLoaded());\n+                applicationRepo.reloadConfig(ensureApplicationLoaded(session));\n                 log.log(Level.INFO, session.logPre() + \"Application activated successfully: \" + applicationId + \" (generation \" + session.getSessionId() + \")\");\n                 return;\n             }\n         }\n     }\n \n+    void prepareRemoteSession(RemoteSession session) {\n+        SessionZooKeeperClient sessionZooKeeperClient = createSessionZooKeeperClient(session.getSessionId());\n+        Curator.CompletionWaiter waiter = sessionZooKeeperClient.getPrepareWaiter();\n+        ensureApplicationLoaded(session);\n+        notifyCompletion(waiter, session);\n+    }\n+\n+    public synchronized ApplicationSet ensureApplicationLoaded(RemoteSession session) {\n+        Optional<ApplicationSet> applicationSet = session.applicationSet();\n+        if (applicationSet.isPresent()) {\n+            return applicationSet.get();\n+        }\n+\n+        ApplicationSet newApplicationSet = loadApplication(session);\n+        RemoteSession newSession = new RemoteSession(session.getTenantName(),\n+                                    session.getSessionId(),\n+                                    session.getSessionZooKeeperClient(),\n+                                    Optional.of(newApplicationSet));\n+        remoteSessionCache.addSession(newSession);\n+        return newApplicationSet;\n+    }\n+\n+    void confirmUpload(RemoteSession session) {\n+        Curator.CompletionWaiter waiter = session.getSessionZooKeeperClient().getUploadWaiter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4dc7b37309d87a5cd9ef13891a29132101017c9"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTEwNzI2NQ==", "bodyText": "Yes, both are used, I want to clean up that, will do in a later PR", "url": "https://github.com/vespa-engine/vespa/pull/14190#discussion_r479107265", "createdAt": "2020-08-28T10:41:27Z", "author": {"login": "hmusum"}, "path": "configserver/src/main/java/com/yahoo/vespa/config/server/session/SessionRepository.java", "diffHunk": "@@ -394,13 +403,84 @@ private void loadSessionIfActive(RemoteSession session) {\n         for (ApplicationId applicationId : applicationRepo.activeApplications()) {\n             if (applicationRepo.requireActiveSessionOf(applicationId) == session.getSessionId()) {\n                 log.log(Level.FINE, () -> \"Found active application for session \" + session.getSessionId() + \" , loading it\");\n-                applicationRepo.reloadConfig(session.ensureApplicationLoaded());\n+                applicationRepo.reloadConfig(ensureApplicationLoaded(session));\n                 log.log(Level.INFO, session.logPre() + \"Application activated successfully: \" + applicationId + \" (generation \" + session.getSessionId() + \")\");\n                 return;\n             }\n         }\n     }\n \n+    void prepareRemoteSession(RemoteSession session) {\n+        SessionZooKeeperClient sessionZooKeeperClient = createSessionZooKeeperClient(session.getSessionId());\n+        Curator.CompletionWaiter waiter = sessionZooKeeperClient.getPrepareWaiter();\n+        ensureApplicationLoaded(session);\n+        notifyCompletion(waiter, session);\n+    }\n+\n+    public synchronized ApplicationSet ensureApplicationLoaded(RemoteSession session) {\n+        Optional<ApplicationSet> applicationSet = session.applicationSet();\n+        if (applicationSet.isPresent()) {\n+            return applicationSet.get();\n+        }\n+\n+        ApplicationSet newApplicationSet = loadApplication(session);\n+        RemoteSession newSession = new RemoteSession(session.getTenantName(),\n+                                    session.getSessionId(),\n+                                    session.getSessionZooKeeperClient(),\n+                                    Optional.of(newApplicationSet));\n+        remoteSessionCache.addSession(newSession);\n+        return newApplicationSet;\n+    }\n+\n+    void confirmUpload(RemoteSession session) {\n+        Curator.CompletionWaiter waiter = session.getSessionZooKeeperClient().getUploadWaiter();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTA2NjU1Nw=="}, "originalCommit": {"oid": "c4dc7b37309d87a5cd9ef13891a29132101017c9"}, "originalPosition": 129}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1410, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}