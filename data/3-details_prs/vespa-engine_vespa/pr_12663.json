{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMjQ0NzQ4", "number": 12663, "title": "Add benchmark for xxhash32, xxhash64 and legacy", "bodyText": "@vekterli PR", "createdAt": "2020-03-23T08:54:50Z", "url": "https://github.com/vespa-engine/vespa/pull/12663", "merged": true, "mergeCommit": {"oid": "88cedb5bacad1be2ef4bae1d4f4c536d5d753692"}, "closed": true, "closedAt": "2020-03-23T08:55:00Z", "author": {"login": "baldersheim"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQaXNOgH2gAyMzkyMjQ0NzQ4OmRmZjY1OTUwNzViNWM2YjQ3YmVmOTI5N2IyOWU5OTM1MTM0MWFkMzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQa9WogFqTM3OTI1ODc5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dff6595075b5c6b47bef9297b29e99351341ad38", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/dff6595075b5c6b47bef9297b29e99351341ad38", "committedDate": "2020-03-23T08:51:45Z", "message": "Add benchmark for xxhash32, xxhash64 and legacy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MjU4Nzk1", "url": "https://github.com/vespa-engine/vespa/pull/12663#pullrequestreview-379258795", "createdAt": "2020-03-23T09:32:43Z", "commit": {"oid": "dff6595075b5c6b47bef9297b29e99351341ad38"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTozMjo0M1rOF59KJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwOTozMjo0M1rOF59KJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMxNTE3NQ==", "bodyText": "Since all these benchmarks are the same aside from the evaluation call, could consider factoring out as template argument to a generic benchmark loop function.", "url": "https://github.com/vespa-engine/vespa/pull/12663#discussion_r396315175", "createdAt": "2020-03-23T09:32:43Z", "author": {"login": "vekterli"}, "path": "vespalib/src/tests/stllike/lookup_benchmark.cpp", "diffHunk": "@@ -95,6 +95,41 @@ size_t benchHashMapVespaLib2(size_t sz, size_t numLookups)\n     return benchM(set, sz, numLookups);\n }\n \n+std::unique_ptr<char []> createData(size_t sz) {\n+    auto data = std::make_unique<char []>(sz);\n+    for (size_t i(0); i < sz; i++) {\n+        data.get()[i] = i + '0';\n+    }\n+    return data;\n+}\n+\n+size_t benchXXHash32(size_t sz, size_t numLookups) {\n+    auto data = createData(sz);\n+    size_t sum(0);\n+    for (size_t i(0); i < numLookups; i++) {\n+        sum += XXH32(data.get(), sz, 0);\n+    }\n+    return sum;\n+}\n+\n+size_t benchXXHash64(size_t sz, size_t numLookups) {\n+    auto data = createData(sz);\n+    size_t sum(0);\n+    for (size_t i(0); i < numLookups; i++) {\n+        sum += XXH64(data.get(), sz, 0);\n+    }\n+    return sum;\n+}\n+\n+size_t benchLegacyHash(size_t sz, size_t numLookups) {\n+    auto data = createData(sz);\n+    size_t sum(0);\n+    for (size_t i(0); i < numLookups; i++) {\n+        sum += vespalib::hashValue(data.get(), sz);\n+    }\n+    return sum;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dff6595075b5c6b47bef9297b29e99351341ad38"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2597, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}