{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MjUyMDY4", "number": 13234, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNDo0MFrOD8AQWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoyMjo0MVrOD8Ft7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjQ1MzM4OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/queryeval/blueprint.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNDo0MVrOGUrPpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNDo0MVrOGUrPpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMzMzIyMg==", "bodyText": "global filter should be const here", "url": "https://github.com/vespa-engine/vespa/pull/13234#discussion_r424333222", "createdAt": "2020-05-13T10:24:41Z", "author": {"login": "havardpe"}, "path": "searchlib/src/vespa/searchlib/queryeval/blueprint.h", "diffHunk": "@@ -186,7 +187,7 @@ class Blueprint\n \n     virtual bool supports_termwise_children() const { return false; }\n     virtual bool always_needs_unpack() const { return false; }\n-    virtual void set_global_filter(std::shared_ptr<BitVector> global_filter);\n+    virtual void set_global_filter(GlobalFilter &global_filter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee292c3b215c8609513e50e4de52afb26912fc94"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjQ1ODQ2OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/queryeval/global_filter.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNjoxNFrOGUrTFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyNjoxNFrOGUrTFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMzNDEwMA==", "bodyText": "just use ctor_tag() instead of x", "url": "https://github.com/vespa-engine/vespa/pull/13234#discussion_r424334100", "createdAt": "2020-05-13T10:26:14Z", "author": {"login": "havardpe"}, "path": "searchlib/src/vespa/searchlib/queryeval/global_filter.h", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <vespa/searchlib/common/bitvector.h>\n+\n+namespace search::queryeval {\n+\n+class GlobalFilter : public std::enable_shared_from_this<GlobalFilter>\n+{\n+private:\n+    struct ctor_tag {};\n+    std::unique_ptr<search::BitVector> bit_vector;\n+\n+    GlobalFilter(const GlobalFilter &) = delete;\n+    GlobalFilter(GlobalFilter &&) = delete;\n+public:\n+\n+    GlobalFilter(ctor_tag, std::unique_ptr<search::BitVector> bit_vector_in)\n+      : bit_vector(std::move(bit_vector_in))\n+    {}\n+\n+    GlobalFilter(ctor_tag) : bit_vector() {}\n+\n+    ~GlobalFilter() {}\n+\n+    template<typename ... Params>\n+    static std::shared_ptr<GlobalFilter> create(Params&& ... params) {\n+        ctor_tag x;\n+        return std::make_shared<GlobalFilter>(x, std::forward<Params>(params)...);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee292c3b215c8609513e50e4de52afb26912fc94"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjQ2NjcwOnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/queryeval/global_filter.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyODo0MVrOGUrYNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoyODo0MVrOGUrYNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMzNTQxMg==", "bodyText": "prefer bool(bit_vector) to (bool)bit_vector", "url": "https://github.com/vespa-engine/vespa/pull/13234#discussion_r424335412", "createdAt": "2020-05-13T10:28:41Z", "author": {"login": "havardpe"}, "path": "searchlib/src/vespa/searchlib/queryeval/global_filter.h", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <vespa/searchlib/common/bitvector.h>\n+\n+namespace search::queryeval {\n+\n+class GlobalFilter : public std::enable_shared_from_this<GlobalFilter>\n+{\n+private:\n+    struct ctor_tag {};\n+    std::unique_ptr<search::BitVector> bit_vector;\n+\n+    GlobalFilter(const GlobalFilter &) = delete;\n+    GlobalFilter(GlobalFilter &&) = delete;\n+public:\n+\n+    GlobalFilter(ctor_tag, std::unique_ptr<search::BitVector> bit_vector_in)\n+      : bit_vector(std::move(bit_vector_in))\n+    {}\n+\n+    GlobalFilter(ctor_tag) : bit_vector() {}\n+\n+    ~GlobalFilter() {}\n+\n+    template<typename ... Params>\n+    static std::shared_ptr<GlobalFilter> create(Params&& ... params) {\n+        ctor_tag x;\n+        return std::make_shared<GlobalFilter>(x, std::forward<Params>(params)...);\n+    }\n+\n+    const search::BitVector *filter() const { return bit_vector.get(); }\n+\n+    bool has_filter() const { return (bool)bit_vector; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee292c3b215c8609513e50e4de52afb26912fc94"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjcwODQ4OnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/queryeval/blueprint/intermediate_blueprints_test.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTo0NzoyM1rOGUtwUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTo0NzoyM1rOGUtwUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3NDM1NA==", "bodyText": "Consider using auto.", "url": "https://github.com/vespa-engine/vespa/pull/13234#discussion_r424374354", "createdAt": "2020-05-13T11:47:23Z", "author": {"login": "geirst"}, "path": "searchlib/src/tests/queryeval/blueprint/intermediate_blueprints_test.cpp", "diffHunk": "@@ -70,8 +70,9 @@ TEST(\"test AndNot Blueprint\") {\n         EXPECT_EQUAL(false, a.getState().want_global_filter());\n         a.addChild(ap(MyLeafSpec(20).addField(1, 1).want_global_filter().create()));\n         EXPECT_EQUAL(true, a.getState().want_global_filter());\n-        std::shared_ptr<BitVector> empty_global_filter;\n-        a.set_global_filter(empty_global_filter);\n+        std::shared_ptr<GlobalFilter> empty_global_filter = GlobalFilter::create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5319a2c4c0614d8fd1dd635a29a92922fd73d0e7"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjcwOTE2OnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/queryeval/blueprint/intermediate_blueprints_test.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTo0NzozNVrOGUtwtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTo0NzozNVrOGUtwtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3NDQ1NQ==", "bodyText": "Consider using auto.", "url": "https://github.com/vespa-engine/vespa/pull/13234#discussion_r424374455", "createdAt": "2020-05-13T11:47:35Z", "author": {"login": "geirst"}, "path": "searchlib/src/tests/queryeval/blueprint/intermediate_blueprints_test.cpp", "diffHunk": "@@ -145,8 +146,8 @@ TEST(\"test And Blueprint\") {\n         EXPECT_EQUAL(false, a.getState().want_global_filter());\n         a.addChild(ap(MyLeafSpec(20).addField(1, 1).want_global_filter().create()));\n         EXPECT_EQUAL(true, a.getState().want_global_filter());\n-        std::shared_ptr<BitVector> empty_global_filter;\n-        a.set_global_filter(empty_global_filter);\n+        std::shared_ptr<GlobalFilter> empty_global_filter = GlobalFilter::create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5319a2c4c0614d8fd1dd635a29a92922fd73d0e7"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjcwOTk4OnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/queryeval/blueprint/intermediate_blueprints_test.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTo0Nzo0N1rOGUtxLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTo0Nzo0N1rOGUtxLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3NDU3NA==", "bodyText": "Consider using auto.", "url": "https://github.com/vespa-engine/vespa/pull/13234#discussion_r424374574", "createdAt": "2020-05-13T11:47:47Z", "author": {"login": "geirst"}, "path": "searchlib/src/tests/queryeval/blueprint/intermediate_blueprints_test.cpp", "diffHunk": "@@ -225,8 +226,8 @@ TEST(\"test Or Blueprint\") {\n         EXPECT_EQUAL(false, o.getState().want_global_filter());\n         o.addChild(ap(MyLeafSpec(20).addField(1, 1).want_global_filter().create()));\n         EXPECT_EQUAL(true, o.getState().want_global_filter());\n-        std::shared_ptr<BitVector> empty_global_filter;\n-        o.set_global_filter(empty_global_filter);\n+        std::shared_ptr<GlobalFilter> empty_global_filter = GlobalFilter::create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5319a2c4c0614d8fd1dd635a29a92922fd73d0e7"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjcxMDU0OnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/queryeval/blueprint/intermediate_blueprints_test.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTo0Nzo1NVrOGUtxgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTo0Nzo1NVrOGUtxgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3NDY1Ng==", "bodyText": "Consider using auto.", "url": "https://github.com/vespa-engine/vespa/pull/13234#discussion_r424374656", "createdAt": "2020-05-13T11:47:55Z", "author": {"login": "geirst"}, "path": "searchlib/src/tests/queryeval/blueprint/intermediate_blueprints_test.cpp", "diffHunk": "@@ -380,8 +381,8 @@ TEST(\"test Rank Blueprint\") {\n         EXPECT_EQUAL(false, a.getState().want_global_filter());\n         a.addChild(ap(MyLeafSpec(20).addField(1, 1).want_global_filter().create()));\n         EXPECT_EQUAL(true, a.getState().want_global_filter());\n-        std::shared_ptr<BitVector> empty_global_filter;\n-        a.set_global_filter(empty_global_filter);\n+        std::shared_ptr<GlobalFilter> empty_global_filter = GlobalFilter::create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5319a2c4c0614d8fd1dd635a29a92922fd73d0e7"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjcxMTk5OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/queryeval/global_filter.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTo0ODoyM1rOGUtybQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTo0ODoyM1rOGUtybQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3NDg5Mw==", "bodyText": "Please add class comment.", "url": "https://github.com/vespa-engine/vespa/pull/13234#discussion_r424374893", "createdAt": "2020-05-13T11:48:23Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/queryeval/global_filter.h", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include <memory>\n+#include <vespa/searchlib/common/bitvector.h>\n+\n+namespace search::queryeval {\n+\n+class GlobalFilter : public std::enable_shared_from_this<GlobalFilter>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5319a2c4c0614d8fd1dd635a29a92922fd73d0e7"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjcyNzA4OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/queryeval/nearest_neighbor_blueprint.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTo1Mjo1OFrOGUt78g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTo1Mjo1OFrOGUt78g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3NzMzMA==", "bodyText": "We should create a unit test for what happens when the global filter is considered. Should be sufficient to test the estimate result on the blueprint, and whether we are still approximate or not.", "url": "https://github.com/vespa-engine/vespa/pull/13234#discussion_r424377330", "createdAt": "2020-05-13T11:52:58Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/queryeval/nearest_neighbor_blueprint.cpp", "diffHunk": "@@ -73,20 +74,31 @@ NearestNeighborBlueprint::NearestNeighborBlueprint(const queryeval::FieldSpec& f\n         _dist_fun = nns_index->distance_function();\n     }\n     uint32_t est_hits = _attr_tensor.getNumDocs();\n-    if (_approximate && nns_index) {\n-        est_hits = std::min(target_num_hits, est_hits);\n-    }\n     setEstimate(HitEstimate(est_hits, false));\n     set_want_global_filter(true);\n }\n \n NearestNeighborBlueprint::~NearestNeighborBlueprint() = default;\n \n void\n-NearestNeighborBlueprint::set_global_filter(std::shared_ptr<BitVector> global_filter)\n+NearestNeighborBlueprint::set_global_filter(const GlobalFilter &global_filter)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5319a2c4c0614d8fd1dd635a29a92922fd73d0e7"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjcyOTcwOnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/queryeval/nearest_neighbor_blueprint.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTo1Mzo0N1rOGUt9kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTo1Mzo0N1rOGUt9kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3Nzc0Ng==", "bodyText": "This threshold should probably be configurable, but that we can do in a later PR.", "url": "https://github.com/vespa-engine/vespa/pull/13234#discussion_r424377746", "createdAt": "2020-05-13T11:53:47Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/queryeval/nearest_neighbor_blueprint.cpp", "diffHunk": "@@ -73,20 +74,31 @@ NearestNeighborBlueprint::NearestNeighborBlueprint(const queryeval::FieldSpec& f\n         _dist_fun = nns_index->distance_function();\n     }\n     uint32_t est_hits = _attr_tensor.getNumDocs();\n-    if (_approximate && nns_index) {\n-        est_hits = std::min(target_num_hits, est_hits);\n-    }\n     setEstimate(HitEstimate(est_hits, false));\n     set_want_global_filter(true);\n }\n \n NearestNeighborBlueprint::~NearestNeighborBlueprint() = default;\n \n void\n-NearestNeighborBlueprint::set_global_filter(std::shared_ptr<BitVector> global_filter)\n+NearestNeighborBlueprint::set_global_filter(const GlobalFilter &global_filter)\n {\n-    // XXX do something with global_filter here\n-    (void) global_filter;\n+    _global_filter = global_filter.shared_from_this();\n+    auto nns_index = _attr_tensor.nearest_neighbor_index();\n+    if (_approximate && nns_index) {\n+        uint32_t est_hits = _attr_tensor.getNumDocs();\n+        if (_global_filter->has_filter()) {\n+            uint32_t max_hits = _global_filter->filter()->countTrueBits();\n+            if (max_hits * 10 < est_hits) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5319a2c4c0614d8fd1dd635a29a92922fd73d0e7"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzM0ODI5OnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/attribute/tensorattribute/tensorattribute_test.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoyMjo0MVrOGU0EWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoyMjo0MVrOGU0EWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ3Nzc4NQ==", "bodyText": "For consideration: To make the tests easier to read I would prefer having one test function for each of the 3 cases tested, and move the common setup (tensor content + blueprint) to a fixture that could inherit DenseTensorAttributeMockIndex.", "url": "https://github.com/vespa-engine/vespa/pull/13234#discussion_r424477785", "createdAt": "2020-05-13T14:22:41Z", "author": {"login": "geirst"}, "path": "searchlib/src/tests/attribute/tensorattribute/tensorattribute_test.cpp", "diffHunk": "@@ -658,6 +667,69 @@ class DenseTensorAttributeMockIndex : public Fixture {\n     DenseTensorAttributeMockIndex() : Fixture(vec_2d_spec, true, true, true) {}\n };\n \n+TEST_F(\"blueprint takes global filter into account\", DenseTensorAttributeMockIndex)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52bbe79b9d91288a83876c79b870f1e90f022fc1"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1648, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}