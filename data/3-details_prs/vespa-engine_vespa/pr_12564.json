{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4MDEyMzQ0", "number": 12564, "title": "When you have a container with both feed and query, you risk that dur\u2026", "bodyText": "\u2026ing warmup the throughput optimized\nfeed pipeline will overwhelm the search pipeline during warmup.\nHere we add an option to enforce a soft start of the feed pipeline, by gradually increasing max number of feed threads.\nIt might not be the perfect solution as mesages will pile up in the dynamic throttle policy, but that should have a builtin\nsoftstart already. So I think this might a good fit.\n@bratseth or @hmusum or @bjorncs PR\n@jobergum and @yngveaasheim FYI", "createdAt": "2020-03-13T21:52:00Z", "url": "https://github.com/vespa-engine/vespa/pull/12564", "merged": true, "mergeCommit": {"oid": "f7c51d8643967b19896f4da6076bc9555ab25af3"}, "closed": true, "closedAt": "2020-03-16T08:46:38Z", "author": {"login": "baldersheim"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNXflogH2gAyMzg4MDEyMzQ0OjJjNTI0MjE0NzhkMWU0N2RiMzJlYzhmZjhjNDgyZjg2MWZkOTNiOTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOLTJ7AFqTM3NTA2Mzg0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2c52421478d1e47db32ec8ff8c482f861fd93b93", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/2c52421478d1e47db32ec8ff8c482f861fd93b93", "committedDate": "2020-03-13T21:49:25Z", "message": "When you have a container with both feed and query, you risk that during warmup the throughput optimized\nfeed pipeline will overwhelm the search pipeline during warmup.\nHere we add an option to enforce a soft start of the feed pipeline, by gradually increasing max number of feed threads.\nIt might not be the perfect solution as mesages will pile up in the dynamic throttle policy, but that should have a builtin\nsoftstart already. So I think this might a good fit."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0OTg5Nzcy", "url": "https://github.com/vespa-engine/vespa/pull/12564#pullrequestreview-374989772", "createdAt": "2020-03-16T08:15:18Z", "commit": {"oid": "2c52421478d1e47db32ec8ff8c482f861fd93b93"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODoxNToxOVrOF2pYBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODoxNToxOVrOF2pYBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg0NTMxNg==", "bodyText": "Minor: I would have used Duration and Instant for these two", "url": "https://github.com/vespa-engine/vespa/pull/12564#discussion_r392845316", "createdAt": "2020-03-16T08:15:19Z", "author": {"login": "hmusum"}, "path": "vespaclient-container-plugin/src/main/java/com/yahoo/vespa/http/server/FeedHandlerV3.java", "diffHunk": "@@ -43,6 +43,9 @@\n     protected final ReplyHandler feedReplyHandler;\n     private final Metric metric;\n     private final Object monitor = new Object();\n+    private int remainingThreadsForFeedingAllowance;\n+    private final long msBetweenBumpingMaxThreads;\n+    private long nextTimeToAllocateAnotherThread;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c52421478d1e47db32ec8ff8c482f861fd93b93"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49c6107c09e539e575f71c2f2b8a148780c28ff8", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/49c6107c09e539e575f71c2f2b8a148780c28ff8", "committedDate": "2020-03-16T08:33:33Z", "message": "Use Instant/Duration for time."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MDA2NjQ1", "url": "https://github.com/vespa-engine/vespa/pull/12564#pullrequestreview-375006645", "createdAt": "2020-03-16T08:43:54Z", "commit": {"oid": "49c6107c09e539e575f71c2f2b8a148780c28ff8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MDYzODQy", "url": "https://github.com/vespa-engine/vespa/pull/12564#pullrequestreview-375063842", "createdAt": "2020-03-16T10:08:34Z", "commit": {"oid": "2c52421478d1e47db32ec8ff8c482f861fd93b93"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDowODozNFrOF2s_1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDowOTozNVrOF2tCHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkwNDY2MQ==", "bodyText": "Why are these member variables not protected by a monitor?", "url": "https://github.com/vespa-engine/vespa/pull/12564#discussion_r392904661", "createdAt": "2020-03-16T10:08:34Z", "author": {"login": "bjorncs"}, "path": "vespaclient-container-plugin/src/main/java/com/yahoo/vespa/http/server/FeedHandlerV3.java", "diffHunk": "@@ -43,6 +43,9 @@\n     protected final ReplyHandler feedReplyHandler;\n     private final Metric metric;\n     private final Object monitor = new Object();\n+    private int remainingThreadsForFeedingAllowance;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c52421478d1e47db32ec8ff8c482f861fd93b93"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkwNTI0NA==", "bodyText": "Consider using Duration.ZERO as sentinel value instead.", "url": "https://github.com/vespa-engine/vespa/pull/12564#discussion_r392905244", "createdAt": "2020-03-16T10:09:35Z", "author": {"login": "bjorncs"}, "path": "vespaclient-container-plugin/src/main/java/com/yahoo/vespa/http/server/FeedHandlerV3.java", "diffHunk": "@@ -66,17 +68,17 @@ public FeedHandlerV3(LoggingRequestHandler.Context parentCtx,\n             remainingThreadsForFeedingAllowance = Math.max((int) (0.4 * threadpoolConfig.maxthreads()), 1);\n             if (threadpoolConfig.softStartSeconds() > 0.0) {\n                 threadsAvailableForFeeding = new AtomicInteger(0);\n-                msBetweenBumpingMaxThreads = (long)threadpoolConfig.softStartSeconds() * 1000 / remainingThreadsForFeedingAllowance;\n+                timeBetweenBumpingMaxThreads = Duration.ofMillis((long)(threadpoolConfig.softStartSeconds() * 1000) / remainingThreadsForFeedingAllowance);\n             } else {\n                 threadsAvailableForFeeding = new AtomicInteger(remainingThreadsForFeedingAllowance);\n                 remainingThreadsForFeedingAllowance = 0;\n-                msBetweenBumpingMaxThreads = 0;\n+                timeBetweenBumpingMaxThreads = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c6107c09e539e575f71c2f2b8a148780c28ff8"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2682, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}