{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0OTc1NDA1", "number": 14383, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo1NTo1NlrOEig4Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzoyMjoxM1rOEiipWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjI1NzU0OnYy", "diffSide": "RIGHT", "path": "storage/src/tests/storageserver/rpc/caching_rpc_target_resolver_test.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo1NTo1NlrOHQb2mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo0MTozNFrOHQfVSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5NTYxMQ==", "bodyText": "Consider making this a static member function instead", "url": "https://github.com/vespa-engine/vespa/pull/14383#discussion_r486995611", "createdAt": "2020-09-11T11:55:56Z", "author": {"login": "vekterli"}, "path": "storage/src/tests/storageserver/rpc/caching_rpc_target_resolver_test.cpp", "diffHunk": "@@ -0,0 +1,134 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include <vespa/slobrok/imirrorapi.h>\n+#include <vespa/storage/storageserver/rpc/caching_rpc_target_resolver.h>\n+#include <vespa/storageapi/messageapi/storagemessage.h>\n+#include <vespa/vdslib/state/nodetype.h>\n+#include <vespa/vespalib/gtest/gtest.h>\n+\n+using namespace storage::rpc;\n+using slobrok::api::IMirrorAPI;\n+using storage::api::StorageMessageAddress;\n+using storage::lib::NodeType;\n+\n+class MockMirror : public IMirrorAPI {\n+public:\n+    using Mappings = std::map<vespalib::string, IMirrorAPI::SpecList>;\n+    Mappings mappings;\n+    uint32_t gen;\n+    MockMirror() : mappings(), gen(1) {}\n+    SpecList lookup(const std::string& pattern) const override {\n+        auto itr = mappings.find(pattern);\n+        if (itr != mappings.end()) {\n+            return itr->second;\n+        }\n+        return {};\n+    }\n+    uint32_t updates() const override { return gen; }\n+    bool ready() const override { return true; }\n+    void inc_gen() { ++gen; }\n+};\n+\n+class MockWrappedFrtTarget : public WrappedFrtTarget {\n+private:\n+    bool& _valid;\n+public:\n+    MockWrappedFrtTarget(bool& valid) : _valid(valid) {}\n+    FRT_Target* get() override { return nullptr; }\n+    bool is_valid() const override { return _valid; }\n+};\n+\n+class MockTargetFactory : public RpcTargetFactory {\n+public:\n+    mutable bool valid_target;\n+\n+    MockTargetFactory() : valid_target(true) {}\n+    std::unique_ptr<RpcTarget> make_target(const vespalib::string& connection_spec, uint32_t slobrok_gen) const override {\n+        return std::make_unique<RpcTarget>(std::make_unique<MockWrappedFrtTarget>(valid_target),\n+                connection_spec, slobrok_gen);\n+    }\n+};\n+\n+class CachingRpcTargetResolverTest : public ::testing::Test {\n+public:\n+    MockMirror mirror;\n+    MockTargetFactory factory;\n+    CachingRpcTargetResolver resolver;\n+    StorageMessageAddress address_0;\n+    StorageMessageAddress address_1;\n+    vespalib::string spec_0;\n+    vespalib::string spec_1;\n+\n+    CachingRpcTargetResolverTest()\n+        : mirror(),\n+          factory(),\n+          resolver(mirror, factory),\n+          address_0(\"my_cluster\", NodeType::STORAGE, 5),\n+          address_1(\"my_cluster\", NodeType::DISTRIBUTOR, 7),\n+          spec_0(\"tcp/my:41\"),\n+          spec_1(\"tcp/my:42\")\n+    {\n+        add_mapping(address_0, spec_0);\n+    }\n+    void add_mapping(const StorageMessageAddress& address, const vespalib::string& connection_spec) {\n+        mirror.mappings[to_slobrok_id(address)] = {{to_slobrok_id(address), connection_spec}};\n+    }\n+    vespalib::string to_slobrok_id(const storage::api::StorageMessageAddress& address) const {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5518be46c5f333c23547fcf02cfc543cebb40f17"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1MjYxNw==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/14383#discussion_r487052617", "createdAt": "2020-09-11T13:41:34Z", "author": {"login": "geirst"}, "path": "storage/src/tests/storageserver/rpc/caching_rpc_target_resolver_test.cpp", "diffHunk": "@@ -0,0 +1,134 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include <vespa/slobrok/imirrorapi.h>\n+#include <vespa/storage/storageserver/rpc/caching_rpc_target_resolver.h>\n+#include <vespa/storageapi/messageapi/storagemessage.h>\n+#include <vespa/vdslib/state/nodetype.h>\n+#include <vespa/vespalib/gtest/gtest.h>\n+\n+using namespace storage::rpc;\n+using slobrok::api::IMirrorAPI;\n+using storage::api::StorageMessageAddress;\n+using storage::lib::NodeType;\n+\n+class MockMirror : public IMirrorAPI {\n+public:\n+    using Mappings = std::map<vespalib::string, IMirrorAPI::SpecList>;\n+    Mappings mappings;\n+    uint32_t gen;\n+    MockMirror() : mappings(), gen(1) {}\n+    SpecList lookup(const std::string& pattern) const override {\n+        auto itr = mappings.find(pattern);\n+        if (itr != mappings.end()) {\n+            return itr->second;\n+        }\n+        return {};\n+    }\n+    uint32_t updates() const override { return gen; }\n+    bool ready() const override { return true; }\n+    void inc_gen() { ++gen; }\n+};\n+\n+class MockWrappedFrtTarget : public WrappedFrtTarget {\n+private:\n+    bool& _valid;\n+public:\n+    MockWrappedFrtTarget(bool& valid) : _valid(valid) {}\n+    FRT_Target* get() override { return nullptr; }\n+    bool is_valid() const override { return _valid; }\n+};\n+\n+class MockTargetFactory : public RpcTargetFactory {\n+public:\n+    mutable bool valid_target;\n+\n+    MockTargetFactory() : valid_target(true) {}\n+    std::unique_ptr<RpcTarget> make_target(const vespalib::string& connection_spec, uint32_t slobrok_gen) const override {\n+        return std::make_unique<RpcTarget>(std::make_unique<MockWrappedFrtTarget>(valid_target),\n+                connection_spec, slobrok_gen);\n+    }\n+};\n+\n+class CachingRpcTargetResolverTest : public ::testing::Test {\n+public:\n+    MockMirror mirror;\n+    MockTargetFactory factory;\n+    CachingRpcTargetResolver resolver;\n+    StorageMessageAddress address_0;\n+    StorageMessageAddress address_1;\n+    vespalib::string spec_0;\n+    vespalib::string spec_1;\n+\n+    CachingRpcTargetResolverTest()\n+        : mirror(),\n+          factory(),\n+          resolver(mirror, factory),\n+          address_0(\"my_cluster\", NodeType::STORAGE, 5),\n+          address_1(\"my_cluster\", NodeType::DISTRIBUTOR, 7),\n+          spec_0(\"tcp/my:41\"),\n+          spec_1(\"tcp/my:42\")\n+    {\n+        add_mapping(address_0, spec_0);\n+    }\n+    void add_mapping(const StorageMessageAddress& address, const vespalib::string& connection_spec) {\n+        mirror.mappings[to_slobrok_id(address)] = {{to_slobrok_id(address), connection_spec}};\n+    }\n+    vespalib::string to_slobrok_id(const storage::api::StorageMessageAddress& address) const {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5NTYxMQ=="}, "originalCommit": {"oid": "5518be46c5f333c23547fcf02cfc543cebb40f17"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjUxNTYxOnYy", "diffSide": "RIGHT", "path": "storage/src/vespa/storage/storageserver/rpc/caching_rpc_target_resolver.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzoxMzo1NVrOHQeUfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo0MjowOFrOHQfXAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzNjAyOQ==", "bodyText": "Could also use [[maybe_unused]] directly on the parameter itself", "url": "https://github.com/vespa-engine/vespa/pull/14383#discussion_r487036029", "createdAt": "2020-09-11T13:13:55Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/storageserver/rpc/caching_rpc_target_resolver.cpp", "diffHunk": "@@ -1,82 +1,107 @@\n // Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n #include \"caching_rpc_target_resolver.h\"\n #include \"shared_rpc_resources.h\"\n-#include <vespa/fnet/frt/supervisor.h>\n #include <vespa/fnet/frt/target.h>\n-#include <vespa/slobrok/sbmirror.h>\n+#include <vespa/slobrok/imirrorapi.h>\n #include <vespa/storageapi/messageapi/storagemessage.h>\n #include <vespa/vespalib/stllike/asciistream.h>\n #include <vespa/vespalib/stllike/hash_map.hpp>\n+#include <cassert>\n \n #include <vespa/log/log.h>\n LOG_SETUP(\".storage.caching_rpc_target_resolver\");\n \n namespace storage::rpc {\n \n-CachingRpcTargetResolver::CachingRpcTargetResolver(SharedRpcResources& rpc_resources)\n-    : _rpc_resources(rpc_resources)\n+CachingRpcTargetResolver::CachingRpcTargetResolver(const slobrok::api::IMirrorAPI& slobrok_mirror,\n+                                                   const RpcTargetFactory& target_factory)\n+    : _slobrok_mirror(slobrok_mirror),\n+      _target_factory(target_factory),\n+      _targets_rwmutex()\n {\n }\n \n CachingRpcTargetResolver::~CachingRpcTargetResolver() = default;\n \n-namespace {\n-\n-vespalib::string address_to_slobrok_id(const api::StorageMessageAddress& address) {\n+vespalib::string\n+CachingRpcTargetResolver::address_to_slobrok_id(const api::StorageMessageAddress& address) {\n     vespalib::asciistream as;\n     as << \"storage/cluster.\" << address.getCluster()\n        << '/' << ((address.getNodeType() == lib::NodeType::STORAGE) ? \"storage\" : \"distributor\")\n        << '/' << address.getIndex();\n     return as.str();\n }\n \n+std::shared_ptr<RpcTarget>\n+CachingRpcTargetResolver::lookup_target(const vespalib::string& slobrok_id, uint32_t curr_slobrok_gen) {\n+    std::shared_lock lock(_targets_rwmutex);\n+    auto itr = _targets.find(slobrok_id);\n+    if ((itr != _targets.end())\n+        && itr->second->_target->is_valid()\n+        && (itr->second->_slobrok_gen == curr_slobrok_gen)) {\n+        return itr->second;\n+    }\n+    return {};\n+}\n+\n+std::shared_ptr<RpcTarget>\n+CachingRpcTargetResolver::consider_update_target(const vespalib::string& slobrok_id,\n+                                                 const vespalib::string& connection_spec,\n+                                                 uint32_t curr_slobrok_gen,\n+                                                 const UniqueLock& targets_lock) {\n+    (void) targets_lock;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5518be46c5f333c23547fcf02cfc543cebb40f17"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1MzA1Ng==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/14383#discussion_r487053056", "createdAt": "2020-09-11T13:42:08Z", "author": {"login": "geirst"}, "path": "storage/src/vespa/storage/storageserver/rpc/caching_rpc_target_resolver.cpp", "diffHunk": "@@ -1,82 +1,107 @@\n // Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n #include \"caching_rpc_target_resolver.h\"\n #include \"shared_rpc_resources.h\"\n-#include <vespa/fnet/frt/supervisor.h>\n #include <vespa/fnet/frt/target.h>\n-#include <vespa/slobrok/sbmirror.h>\n+#include <vespa/slobrok/imirrorapi.h>\n #include <vespa/storageapi/messageapi/storagemessage.h>\n #include <vespa/vespalib/stllike/asciistream.h>\n #include <vespa/vespalib/stllike/hash_map.hpp>\n+#include <cassert>\n \n #include <vespa/log/log.h>\n LOG_SETUP(\".storage.caching_rpc_target_resolver\");\n \n namespace storage::rpc {\n \n-CachingRpcTargetResolver::CachingRpcTargetResolver(SharedRpcResources& rpc_resources)\n-    : _rpc_resources(rpc_resources)\n+CachingRpcTargetResolver::CachingRpcTargetResolver(const slobrok::api::IMirrorAPI& slobrok_mirror,\n+                                                   const RpcTargetFactory& target_factory)\n+    : _slobrok_mirror(slobrok_mirror),\n+      _target_factory(target_factory),\n+      _targets_rwmutex()\n {\n }\n \n CachingRpcTargetResolver::~CachingRpcTargetResolver() = default;\n \n-namespace {\n-\n-vespalib::string address_to_slobrok_id(const api::StorageMessageAddress& address) {\n+vespalib::string\n+CachingRpcTargetResolver::address_to_slobrok_id(const api::StorageMessageAddress& address) {\n     vespalib::asciistream as;\n     as << \"storage/cluster.\" << address.getCluster()\n        << '/' << ((address.getNodeType() == lib::NodeType::STORAGE) ? \"storage\" : \"distributor\")\n        << '/' << address.getIndex();\n     return as.str();\n }\n \n+std::shared_ptr<RpcTarget>\n+CachingRpcTargetResolver::lookup_target(const vespalib::string& slobrok_id, uint32_t curr_slobrok_gen) {\n+    std::shared_lock lock(_targets_rwmutex);\n+    auto itr = _targets.find(slobrok_id);\n+    if ((itr != _targets.end())\n+        && itr->second->_target->is_valid()\n+        && (itr->second->_slobrok_gen == curr_slobrok_gen)) {\n+        return itr->second;\n+    }\n+    return {};\n+}\n+\n+std::shared_ptr<RpcTarget>\n+CachingRpcTargetResolver::consider_update_target(const vespalib::string& slobrok_id,\n+                                                 const vespalib::string& connection_spec,\n+                                                 uint32_t curr_slobrok_gen,\n+                                                 const UniqueLock& targets_lock) {\n+    (void) targets_lock;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzNjAyOQ=="}, "originalCommit": {"oid": "5518be46c5f333c23547fcf02cfc543cebb40f17"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjUzMDAwOnYy", "diffSide": "RIGHT", "path": "storage/src/vespa/storage/storageserver/rpc/caching_rpc_target_resolver.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzoxNzo0OVrOHQedfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzozNTo1MVrOHQfHlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzODMzNQ==", "bodyText": "Should we consider having the factory return shared_ptr instead of unique_ptr? The latter is more obvious that returned objects are unique, the former avoids an extra control block allocation due to make_shared.", "url": "https://github.com/vespa-engine/vespa/pull/14383#discussion_r487038335", "createdAt": "2020-09-11T13:17:49Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/storageserver/rpc/caching_rpc_target_resolver.cpp", "diffHunk": "@@ -1,82 +1,107 @@\n // Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n #include \"caching_rpc_target_resolver.h\"\n #include \"shared_rpc_resources.h\"\n-#include <vespa/fnet/frt/supervisor.h>\n #include <vespa/fnet/frt/target.h>\n-#include <vespa/slobrok/sbmirror.h>\n+#include <vespa/slobrok/imirrorapi.h>\n #include <vespa/storageapi/messageapi/storagemessage.h>\n #include <vespa/vespalib/stllike/asciistream.h>\n #include <vespa/vespalib/stllike/hash_map.hpp>\n+#include <cassert>\n \n #include <vespa/log/log.h>\n LOG_SETUP(\".storage.caching_rpc_target_resolver\");\n \n namespace storage::rpc {\n \n-CachingRpcTargetResolver::CachingRpcTargetResolver(SharedRpcResources& rpc_resources)\n-    : _rpc_resources(rpc_resources)\n+CachingRpcTargetResolver::CachingRpcTargetResolver(const slobrok::api::IMirrorAPI& slobrok_mirror,\n+                                                   const RpcTargetFactory& target_factory)\n+    : _slobrok_mirror(slobrok_mirror),\n+      _target_factory(target_factory),\n+      _targets_rwmutex()\n {\n }\n \n CachingRpcTargetResolver::~CachingRpcTargetResolver() = default;\n \n-namespace {\n-\n-vespalib::string address_to_slobrok_id(const api::StorageMessageAddress& address) {\n+vespalib::string\n+CachingRpcTargetResolver::address_to_slobrok_id(const api::StorageMessageAddress& address) {\n     vespalib::asciistream as;\n     as << \"storage/cluster.\" << address.getCluster()\n        << '/' << ((address.getNodeType() == lib::NodeType::STORAGE) ? \"storage\" : \"distributor\")\n        << '/' << address.getIndex();\n     return as.str();\n }\n \n+std::shared_ptr<RpcTarget>\n+CachingRpcTargetResolver::lookup_target(const vespalib::string& slobrok_id, uint32_t curr_slobrok_gen) {\n+    std::shared_lock lock(_targets_rwmutex);\n+    auto itr = _targets.find(slobrok_id);\n+    if ((itr != _targets.end())\n+        && itr->second->_target->is_valid()\n+        && (itr->second->_slobrok_gen == curr_slobrok_gen)) {\n+        return itr->second;\n+    }\n+    return {};\n+}\n+\n+std::shared_ptr<RpcTarget>\n+CachingRpcTargetResolver::consider_update_target(const vespalib::string& slobrok_id,\n+                                                 const vespalib::string& connection_spec,\n+                                                 uint32_t curr_slobrok_gen,\n+                                                 const UniqueLock& targets_lock) {\n+    (void) targets_lock;\n+    // If address has the same spec as the existing target, just reuse it.\n+    auto itr = _targets.find(slobrok_id);\n+    if ((itr != _targets.end())\n+        && (itr->second->_target->is_valid())\n+        && (itr->second->_spec == connection_spec))\n+    {\n+        LOG(info, \"Updating existing mapping '%s' -> '%s' (gen %u) to gen %u\",\n+            slobrok_id.c_str(), connection_spec.c_str(), itr->second->_slobrok_gen, curr_slobrok_gen);\n+        itr->second->_slobrok_gen = curr_slobrok_gen;\n+        return itr->second;\n+    }\n+    return {};\n+}\n+\n+std::shared_ptr<RpcTarget>\n+CachingRpcTargetResolver::insert_new_target_mapping(const vespalib::string& slobrok_id,\n+                                                    const vespalib::string& connection_spec,\n+                                                    uint32_t curr_slobrok_gen,\n+                                                    const UniqueLock& targets_lock) {\n+    (void) targets_lock;\n+    auto target = _target_factory.make_target(connection_spec, curr_slobrok_gen); // TODO expensive inside lock?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5518be46c5f333c23547fcf02cfc543cebb40f17"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0OTEwOQ==", "bodyText": "Discussed offline. We stick with unique_ptr as that better describes intent.", "url": "https://github.com/vespa-engine/vespa/pull/14383#discussion_r487049109", "createdAt": "2020-09-11T13:35:51Z", "author": {"login": "geirst"}, "path": "storage/src/vespa/storage/storageserver/rpc/caching_rpc_target_resolver.cpp", "diffHunk": "@@ -1,82 +1,107 @@\n // Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n #include \"caching_rpc_target_resolver.h\"\n #include \"shared_rpc_resources.h\"\n-#include <vespa/fnet/frt/supervisor.h>\n #include <vespa/fnet/frt/target.h>\n-#include <vespa/slobrok/sbmirror.h>\n+#include <vespa/slobrok/imirrorapi.h>\n #include <vespa/storageapi/messageapi/storagemessage.h>\n #include <vespa/vespalib/stllike/asciistream.h>\n #include <vespa/vespalib/stllike/hash_map.hpp>\n+#include <cassert>\n \n #include <vespa/log/log.h>\n LOG_SETUP(\".storage.caching_rpc_target_resolver\");\n \n namespace storage::rpc {\n \n-CachingRpcTargetResolver::CachingRpcTargetResolver(SharedRpcResources& rpc_resources)\n-    : _rpc_resources(rpc_resources)\n+CachingRpcTargetResolver::CachingRpcTargetResolver(const slobrok::api::IMirrorAPI& slobrok_mirror,\n+                                                   const RpcTargetFactory& target_factory)\n+    : _slobrok_mirror(slobrok_mirror),\n+      _target_factory(target_factory),\n+      _targets_rwmutex()\n {\n }\n \n CachingRpcTargetResolver::~CachingRpcTargetResolver() = default;\n \n-namespace {\n-\n-vespalib::string address_to_slobrok_id(const api::StorageMessageAddress& address) {\n+vespalib::string\n+CachingRpcTargetResolver::address_to_slobrok_id(const api::StorageMessageAddress& address) {\n     vespalib::asciistream as;\n     as << \"storage/cluster.\" << address.getCluster()\n        << '/' << ((address.getNodeType() == lib::NodeType::STORAGE) ? \"storage\" : \"distributor\")\n        << '/' << address.getIndex();\n     return as.str();\n }\n \n+std::shared_ptr<RpcTarget>\n+CachingRpcTargetResolver::lookup_target(const vespalib::string& slobrok_id, uint32_t curr_slobrok_gen) {\n+    std::shared_lock lock(_targets_rwmutex);\n+    auto itr = _targets.find(slobrok_id);\n+    if ((itr != _targets.end())\n+        && itr->second->_target->is_valid()\n+        && (itr->second->_slobrok_gen == curr_slobrok_gen)) {\n+        return itr->second;\n+    }\n+    return {};\n+}\n+\n+std::shared_ptr<RpcTarget>\n+CachingRpcTargetResolver::consider_update_target(const vespalib::string& slobrok_id,\n+                                                 const vespalib::string& connection_spec,\n+                                                 uint32_t curr_slobrok_gen,\n+                                                 const UniqueLock& targets_lock) {\n+    (void) targets_lock;\n+    // If address has the same spec as the existing target, just reuse it.\n+    auto itr = _targets.find(slobrok_id);\n+    if ((itr != _targets.end())\n+        && (itr->second->_target->is_valid())\n+        && (itr->second->_spec == connection_spec))\n+    {\n+        LOG(info, \"Updating existing mapping '%s' -> '%s' (gen %u) to gen %u\",\n+            slobrok_id.c_str(), connection_spec.c_str(), itr->second->_slobrok_gen, curr_slobrok_gen);\n+        itr->second->_slobrok_gen = curr_slobrok_gen;\n+        return itr->second;\n+    }\n+    return {};\n+}\n+\n+std::shared_ptr<RpcTarget>\n+CachingRpcTargetResolver::insert_new_target_mapping(const vespalib::string& slobrok_id,\n+                                                    const vespalib::string& connection_spec,\n+                                                    uint32_t curr_slobrok_gen,\n+                                                    const UniqueLock& targets_lock) {\n+    (void) targets_lock;\n+    auto target = _target_factory.make_target(connection_spec, curr_slobrok_gen); // TODO expensive inside lock?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzODMzNQ=="}, "originalCommit": {"oid": "5518be46c5f333c23547fcf02cfc543cebb40f17"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjUzODAwOnYy", "diffSide": "RIGHT", "path": "storage/src/vespa/storage/storageserver/rpc/caching_rpc_target_resolver.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzoxOTo1OFrOHQeibQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo0MTo0MlrOHQfVpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzOTU5Nw==", "bodyText": "Consider removing explicit since the constructor has been updated to take in more than one arg", "url": "https://github.com/vespa-engine/vespa/pull/14383#discussion_r487039597", "createdAt": "2020-09-11T13:19:58Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/storageserver/rpc/caching_rpc_target_resolver.h", "diffHunk": "@@ -2,29 +2,50 @@\n #pragma once\n \n #include \"rpc_target.h\"\n+#include \"rpc_target_factory.h\"\n #include <vespa/vespalib/stllike/hash_map.h>\n #include <memory>\n #include <shared_mutex>\n \n+namespace slobrok::api { class IMirrorAPI; }\n+\n namespace storage {\n \n namespace api { class StorageMessageAddress; }\n \n namespace rpc {\n \n-class SharedRpcResources;\n-\n+/**\n+ * Class that resolves and caches rpc targets based on StorageMessageAddress that is mapped to slobrok id,\n+ * with lookup in a slobrok mirror.\n+ */\n class CachingRpcTargetResolver {\n-    SharedRpcResources& _rpc_resources;\n+private:\n+    const slobrok::api::IMirrorAPI& _slobrok_mirror;\n+    const RpcTargetFactory& _target_factory;\n+    using UniqueLock = std::unique_lock<std::shared_mutex>;\n     mutable std::shared_mutex _targets_rwmutex;\n     // TODO LRU? Size cap?\n     vespalib::hash_map<vespalib::string, std::shared_ptr<RpcTarget>> _targets;\n+\n+    std::shared_ptr<RpcTarget> lookup_target(const vespalib::string& slobrok_id, uint32_t curr_slobrok_gen);\n+    std::shared_ptr<RpcTarget> consider_update_target(const vespalib::string& slobrok_id,\n+                                                      const vespalib::string& connection_spec,\n+                                                      uint32_t curr_slobrok_gen,\n+                                                      const UniqueLock& targets_lock);\n+\n+    std::shared_ptr<RpcTarget> insert_new_target_mapping(const vespalib::string& slobrok_id,\n+                                                         const vespalib::string& connection_spec,\n+                                                         uint32_t curr_slobrok_gen,\n+                                                         const UniqueLock& targets_lock);\n+\n public:\n-    // TODO pass explicit slobrok mirror interface and supervisor to make testing easier\n-    // TODO consider wrapping supervisor to make testing easier\n-    explicit CachingRpcTargetResolver(SharedRpcResources& rpc_resources);\n+    explicit CachingRpcTargetResolver(const slobrok::api::IMirrorAPI& slobrok_mirror,\n+                                      const RpcTargetFactory& target_factory);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5518be46c5f333c23547fcf02cfc543cebb40f17"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1MjcxMA==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/14383#discussion_r487052710", "createdAt": "2020-09-11T13:41:42Z", "author": {"login": "geirst"}, "path": "storage/src/vespa/storage/storageserver/rpc/caching_rpc_target_resolver.h", "diffHunk": "@@ -2,29 +2,50 @@\n #pragma once\n \n #include \"rpc_target.h\"\n+#include \"rpc_target_factory.h\"\n #include <vespa/vespalib/stllike/hash_map.h>\n #include <memory>\n #include <shared_mutex>\n \n+namespace slobrok::api { class IMirrorAPI; }\n+\n namespace storage {\n \n namespace api { class StorageMessageAddress; }\n \n namespace rpc {\n \n-class SharedRpcResources;\n-\n+/**\n+ * Class that resolves and caches rpc targets based on StorageMessageAddress that is mapped to slobrok id,\n+ * with lookup in a slobrok mirror.\n+ */\n class CachingRpcTargetResolver {\n-    SharedRpcResources& _rpc_resources;\n+private:\n+    const slobrok::api::IMirrorAPI& _slobrok_mirror;\n+    const RpcTargetFactory& _target_factory;\n+    using UniqueLock = std::unique_lock<std::shared_mutex>;\n     mutable std::shared_mutex _targets_rwmutex;\n     // TODO LRU? Size cap?\n     vespalib::hash_map<vespalib::string, std::shared_ptr<RpcTarget>> _targets;\n+\n+    std::shared_ptr<RpcTarget> lookup_target(const vespalib::string& slobrok_id, uint32_t curr_slobrok_gen);\n+    std::shared_ptr<RpcTarget> consider_update_target(const vespalib::string& slobrok_id,\n+                                                      const vespalib::string& connection_spec,\n+                                                      uint32_t curr_slobrok_gen,\n+                                                      const UniqueLock& targets_lock);\n+\n+    std::shared_ptr<RpcTarget> insert_new_target_mapping(const vespalib::string& slobrok_id,\n+                                                         const vespalib::string& connection_spec,\n+                                                         uint32_t curr_slobrok_gen,\n+                                                         const UniqueLock& targets_lock);\n+\n public:\n-    // TODO pass explicit slobrok mirror interface and supervisor to make testing easier\n-    // TODO consider wrapping supervisor to make testing easier\n-    explicit CachingRpcTargetResolver(SharedRpcResources& rpc_resources);\n+    explicit CachingRpcTargetResolver(const slobrok::api::IMirrorAPI& slobrok_mirror,\n+                                      const RpcTargetFactory& target_factory);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzOTU5Nw=="}, "originalCommit": {"oid": "5518be46c5f333c23547fcf02cfc543cebb40f17"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjU0MjA2OnYy", "diffSide": "RIGHT", "path": "storage/src/vespa/storage/storageserver/rpc/rpc_target.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzoyMTowMlrOHQelDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo0MTo1MVrOHQfWEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0MDI3MA==", "bodyText": "Consider making both these noexcept", "url": "https://github.com/vespa-engine/vespa/pull/14383#discussion_r487040270", "createdAt": "2020-09-11T13:21:02Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/storageserver/rpc/rpc_target.h", "diffHunk": "@@ -8,15 +8,24 @@ class FRT_Target;\n \n namespace storage::rpc {\n \n+/**\n+ * Simple wrapper API to access a FRT_Target.\n+ */\n+class WrappedFrtTarget {\n+public:\n+    virtual ~WrappedFrtTarget() = default;\n+    virtual FRT_Target* get() = 0;\n+    virtual bool is_valid() const = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5518be46c5f333c23547fcf02cfc543cebb40f17"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1MjgxOA==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/14383#discussion_r487052818", "createdAt": "2020-09-11T13:41:51Z", "author": {"login": "geirst"}, "path": "storage/src/vespa/storage/storageserver/rpc/rpc_target.h", "diffHunk": "@@ -8,15 +8,24 @@ class FRT_Target;\n \n namespace storage::rpc {\n \n+/**\n+ * Simple wrapper API to access a FRT_Target.\n+ */\n+class WrappedFrtTarget {\n+public:\n+    virtual ~WrappedFrtTarget() = default;\n+    virtual FRT_Target* get() = 0;\n+    virtual bool is_valid() const = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0MDI3MA=="}, "originalCommit": {"oid": "5518be46c5f333c23547fcf02cfc543cebb40f17"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjU0NjgzOnYy", "diffSide": "RIGHT", "path": "storage/src/vespa/storage/storageserver/rpc/rpc_target_factory.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzoyMjoxM1rOHQeoHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo0MjowMFrOHQfWew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0MTA1Mw==", "bodyText": "Consider = default instead of empty body", "url": "https://github.com/vespa-engine/vespa/pull/14383#discussion_r487041053", "createdAt": "2020-09-11T13:22:13Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/storageserver/rpc/rpc_target_factory.h", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+#pragma once\n+\n+#include <vespa/vespalib/stllike/string.h>\n+#include <memory>\n+\n+namespace storage::rpc {\n+\n+class RpcTarget;\n+\n+/**\n+ * Factory for creating instances of RpcTarget based on a connection spec.\n+ */\n+class RpcTargetFactory {\n+public:\n+    virtual ~RpcTargetFactory() {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5518be46c5f333c23547fcf02cfc543cebb40f17"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1MjkyMw==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/14383#discussion_r487052923", "createdAt": "2020-09-11T13:42:00Z", "author": {"login": "geirst"}, "path": "storage/src/vespa/storage/storageserver/rpc/rpc_target_factory.h", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+#pragma once\n+\n+#include <vespa/vespalib/stllike/string.h>\n+#include <memory>\n+\n+namespace storage::rpc {\n+\n+class RpcTarget;\n+\n+/**\n+ * Factory for creating instances of RpcTarget based on a connection spec.\n+ */\n+class RpcTargetFactory {\n+public:\n+    virtual ~RpcTargetFactory() {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0MTA1Mw=="}, "originalCommit": {"oid": "5518be46c5f333c23547fcf02cfc543cebb40f17"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1405, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}