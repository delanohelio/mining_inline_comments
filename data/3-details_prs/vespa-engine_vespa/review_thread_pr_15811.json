{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5NzU4MjY3", "number": 15811, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOToyNDowMFrOFFe-sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOToyNzozOVrOFFfGAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjk0NzcxOnYy", "diffSide": "RIGHT", "path": "searchcore/src/vespa/searchcore/proton/metrics/documentdb_tagged_metrics.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOToyNDowMFrOIGA-xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOToyOTo1NlrOIGBQYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE3ODQzOA==", "bodyText": "Is this function always called in the context of the MetricManager lock? I'm not confident post-construction changes to a MetricSet are thread safe otherwise (the code is complicated, so hard to tell for sure without some deeper digging).", "url": "https://github.com/vespa-engine/vespa/pull/15811#discussion_r543178438", "createdAt": "2020-12-15T09:24:00Z", "author": {"login": "vekterli"}, "path": "searchcore/src/vespa/searchcore/proton/metrics/documentdb_tagged_metrics.cpp", "diffHunk": "@@ -213,14 +213,15 @@ DocumentDBTaggedMetrics::MatchingMetrics::RankProfileMetrics::update(const Match\n     queryLatency.addValueBatch(stats.queryLatencyAvg(), stats.queryLatencyCount(),\n                                stats.queryLatencyMin(), stats.queryLatencyMax());\n     if (stats.getNumPartitions() > 0) {\n-        if (stats.getNumPartitions() <= partitions.size()) {\n-            for (size_t i = 0; i < stats.getNumPartitions(); ++i) {\n-                partitions[i]->update(stats.getPartition(i));\n-            }\n-        } else {\n-            vespalib::string msg(vespalib::make_string(\"Num partitions used '%ld' is larger than number of partitions '%ld' configured.\",\n-                                             stats.getNumPartitions(), partitions.size()));\n-            throw vespalib::IllegalStateException(msg, VESPA_STRLOC);\n+        for (size_t i = partition.size(); i < stats.getNumPartitions(); ++i) {\n+            // This loop is to handle live reconfigs that changes how many partitions(number of threads) might be used per query.\n+            vespalib::string partitionId(vespalib::make_string(\"docid_part%02ld\", i));\n+            partitions.push_back(std::make_unique<DocIdPartition>(partitionId, this));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3bcec7337142f9d08f8bd560a31271267dedc79"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE4Mjk0Nw==", "bodyText": "I will make another pass and check.", "url": "https://github.com/vespa-engine/vespa/pull/15811#discussion_r543182947", "createdAt": "2020-12-15T09:29:56Z", "author": {"login": "baldersheim"}, "path": "searchcore/src/vespa/searchcore/proton/metrics/documentdb_tagged_metrics.cpp", "diffHunk": "@@ -213,14 +213,15 @@ DocumentDBTaggedMetrics::MatchingMetrics::RankProfileMetrics::update(const Match\n     queryLatency.addValueBatch(stats.queryLatencyAvg(), stats.queryLatencyCount(),\n                                stats.queryLatencyMin(), stats.queryLatencyMax());\n     if (stats.getNumPartitions() > 0) {\n-        if (stats.getNumPartitions() <= partitions.size()) {\n-            for (size_t i = 0; i < stats.getNumPartitions(); ++i) {\n-                partitions[i]->update(stats.getPartition(i));\n-            }\n-        } else {\n-            vespalib::string msg(vespalib::make_string(\"Num partitions used '%ld' is larger than number of partitions '%ld' configured.\",\n-                                             stats.getNumPartitions(), partitions.size()));\n-            throw vespalib::IllegalStateException(msg, VESPA_STRLOC);\n+        for (size_t i = partition.size(); i < stats.getNumPartitions(); ++i) {\n+            // This loop is to handle live reconfigs that changes how many partitions(number of threads) might be used per query.\n+            vespalib::string partitionId(vespalib::make_string(\"docid_part%02ld\", i));\n+            partitions.push_back(std::make_unique<DocIdPartition>(partitionId, this));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE3ODQzOA=="}, "originalCommit": {"oid": "f3bcec7337142f9d08f8bd560a31271267dedc79"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjk2NjQyOnYy", "diffSide": "RIGHT", "path": "searchcore/src/vespa/searchcore/proton/metrics/documentdb_tagged_metrics.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOToyNzozOVrOIGBJ6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTozMDozNFrOIGBSMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE4MTI5MQ==", "bodyText": "Should be partitions, compilation fails:\n/source/searchcore/src/vespa/searchcore/proton/metrics/documentdb_tagged_metrics.cpp:216:25: error: `partition` was not declared in this scope; did you mean `std::partition`?\n  216 |         for (size_t i = partition.size(); i < stats.getNumPartitions(); ++i) {", "url": "https://github.com/vespa-engine/vespa/pull/15811#discussion_r543181291", "createdAt": "2020-12-15T09:27:39Z", "author": {"login": "vekterli"}, "path": "searchcore/src/vespa/searchcore/proton/metrics/documentdb_tagged_metrics.cpp", "diffHunk": "@@ -213,14 +213,15 @@ DocumentDBTaggedMetrics::MatchingMetrics::RankProfileMetrics::update(const Match\n     queryLatency.addValueBatch(stats.queryLatencyAvg(), stats.queryLatencyCount(),\n                                stats.queryLatencyMin(), stats.queryLatencyMax());\n     if (stats.getNumPartitions() > 0) {\n-        if (stats.getNumPartitions() <= partitions.size()) {\n-            for (size_t i = 0; i < stats.getNumPartitions(); ++i) {\n-                partitions[i]->update(stats.getPartition(i));\n-            }\n-        } else {\n-            vespalib::string msg(vespalib::make_string(\"Num partitions used '%ld' is larger than number of partitions '%ld' configured.\",\n-                                             stats.getNumPartitions(), partitions.size()));\n-            throw vespalib::IllegalStateException(msg, VESPA_STRLOC);\n+        for (size_t i = partition.size(); i < stats.getNumPartitions(); ++i) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3bcec7337142f9d08f8bd560a31271267dedc79"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE4MzQwOA==", "bodyText": "Yes, forgot the last commit.", "url": "https://github.com/vespa-engine/vespa/pull/15811#discussion_r543183408", "createdAt": "2020-12-15T09:30:34Z", "author": {"login": "baldersheim"}, "path": "searchcore/src/vespa/searchcore/proton/metrics/documentdb_tagged_metrics.cpp", "diffHunk": "@@ -213,14 +213,15 @@ DocumentDBTaggedMetrics::MatchingMetrics::RankProfileMetrics::update(const Match\n     queryLatency.addValueBatch(stats.queryLatencyAvg(), stats.queryLatencyCount(),\n                                stats.queryLatencyMin(), stats.queryLatencyMax());\n     if (stats.getNumPartitions() > 0) {\n-        if (stats.getNumPartitions() <= partitions.size()) {\n-            for (size_t i = 0; i < stats.getNumPartitions(); ++i) {\n-                partitions[i]->update(stats.getPartition(i));\n-            }\n-        } else {\n-            vespalib::string msg(vespalib::make_string(\"Num partitions used '%ld' is larger than number of partitions '%ld' configured.\",\n-                                             stats.getNumPartitions(), partitions.size()));\n-            throw vespalib::IllegalStateException(msg, VESPA_STRLOC);\n+        for (size_t i = partition.size(); i < stats.getNumPartitions(); ++i) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE4MTI5MQ=="}, "originalCommit": {"oid": "f3bcec7337142f9d08f8bd560a31271267dedc79"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2047, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}