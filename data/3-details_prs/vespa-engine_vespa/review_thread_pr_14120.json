{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxMDk1MzY3", "number": 14120, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjo1MDozNVrOEa0GPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzowMTozMFrOEa0TVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTUxOTk4OnYy", "diffSide": "RIGHT", "path": "configserver/src/main/java/com/yahoo/vespa/config/server/session/SessionRepository.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjo1MDozNVrOHEdppA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNjo1MDozNVrOHEdppA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0MjE0OA==", "bodyText": "Not where I'd necessarily expect to find a Clock, but I guess there may be reasons it's here.", "url": "https://github.com/vespa-engine/vespa/pull/14120#discussion_r474442148", "createdAt": "2020-08-21T06:50:35Z", "author": {"login": "jonmv"}, "path": "configserver/src/main/java/com/yahoo/vespa/config/server/session/SessionRepository.java", "diffHunk": "@@ -691,6 +691,8 @@ public Lock lock(long sessionId) {\n         return curator.lock(lockPath(sessionId), Duration.ofMinutes(1)); // These locks shouldn't be held for very long.\n     }\n \n+    public Clock clock() { return clock; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1b25cf8f5e8dfe9b97f87689d98d48e4f5e96e0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTU1MzUwOnYy", "diffSide": "RIGHT", "path": "configserver/src/main/java/com/yahoo/vespa/config/server/tenant/TenantMetaData.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzowMTozMFrOHEd-Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzoxNDoyNFrOHEekrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0NzQxOQ==", "bodyText": "SlimeUtils lets you easily convert JSON/bytes/Strings, for later :)", "url": "https://github.com/vespa-engine/vespa/pull/14120#discussion_r474447419", "createdAt": "2020-08-21T07:01:30Z", "author": {"login": "jonmv"}, "path": "configserver/src/main/java/com/yahoo/vespa/config/server/tenant/TenantMetaData.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.config.server.tenant;\n+\n+import com.yahoo.slime.Cursor;\n+import com.yahoo.slime.Inspector;\n+import com.yahoo.slime.JsonDecoder;\n+import com.yahoo.slime.JsonFormat;\n+import com.yahoo.slime.Slime;\n+import com.yahoo.text.Utf8;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Instant;\n+\n+/**\n+ * Metadata for a tenant. At the moment only stores last deploy time, to be used by TenantsMaintainer\n+ * to GC unused tenants\n+ *\n+ * @author hmusum\n+ */\n+public class TenantMetaData {\n+\n+    private final Instant lastDeployTimestamp;\n+\n+    public TenantMetaData(Instant instant) {\n+        this.lastDeployTimestamp = instant;\n+    }\n+\n+    public Instant lastDeployTimestamp() {\n+        return lastDeployTimestamp;\n+    }\n+\n+    public String asJsonString() {\n+        Slime slime = getSlime();\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        try {\n+            new JsonFormat(false).encode(baos, slime);\n+            return baos.toString(StandardCharsets.UTF_8);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Unable to encode metadata\", e);\n+        }\n+    }\n+\n+    public static TenantMetaData fromJsonString(String jsonString) {\n+        try {\n+            Slime data = new Slime();\n+            new JsonDecoder().decode(data, Utf8.toBytes(jsonString));\n+            Inspector root = data.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1b25cf8f5e8dfe9b97f87689d98d48e4f5e96e0"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ1NzI2MQ==", "bodyText": "Thanks, forgot about SlimeUtils, I'll do a pass and convert some other code that should use SlimeUtils as well", "url": "https://github.com/vespa-engine/vespa/pull/14120#discussion_r474457261", "createdAt": "2020-08-21T07:14:24Z", "author": {"login": "hmusum"}, "path": "configserver/src/main/java/com/yahoo/vespa/config/server/tenant/TenantMetaData.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.config.server.tenant;\n+\n+import com.yahoo.slime.Cursor;\n+import com.yahoo.slime.Inspector;\n+import com.yahoo.slime.JsonDecoder;\n+import com.yahoo.slime.JsonFormat;\n+import com.yahoo.slime.Slime;\n+import com.yahoo.text.Utf8;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Instant;\n+\n+/**\n+ * Metadata for a tenant. At the moment only stores last deploy time, to be used by TenantsMaintainer\n+ * to GC unused tenants\n+ *\n+ * @author hmusum\n+ */\n+public class TenantMetaData {\n+\n+    private final Instant lastDeployTimestamp;\n+\n+    public TenantMetaData(Instant instant) {\n+        this.lastDeployTimestamp = instant;\n+    }\n+\n+    public Instant lastDeployTimestamp() {\n+        return lastDeployTimestamp;\n+    }\n+\n+    public String asJsonString() {\n+        Slime slime = getSlime();\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        try {\n+            new JsonFormat(false).encode(baos, slime);\n+            return baos.toString(StandardCharsets.UTF_8);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Unable to encode metadata\", e);\n+        }\n+    }\n+\n+    public static TenantMetaData fromJsonString(String jsonString) {\n+        try {\n+            Slime data = new Slime();\n+            new JsonDecoder().decode(data, Utf8.toBytes(jsonString));\n+            Inspector root = data.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ0NzQxOQ=="}, "originalCommit": {"oid": "d1b25cf8f5e8dfe9b97f87689d98d48e4f5e96e0"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1477, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}