{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNjU2NzQ4", "number": 11815, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNDoyNDo1NVrODYhQOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNDoyNDo1NVrODYhQOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDM3MjQwOnYy", "diffSide": "RIGHT", "path": "zkfacade/src/main/java/com/yahoo/vespa/curator/Lock.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNDoyNDo1NVrOFebDnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNDozNzowNFrOFebfeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ0NDg5Mg==", "bodyText": "I found the previous version of this code easer to read, probably because of the implicit non-obvious assumption that tryLock() is assumed to always return true, and then relying on that here.", "url": "https://github.com/vespa-engine/vespa/pull/11815#discussion_r367444892", "createdAt": "2020-01-16T14:24:55Z", "author": {"login": "hakonhall"}, "path": "zkfacade/src/main/java/com/yahoo/vespa/curator/Lock.java", "diffHunk": "@@ -15,31 +16,46 @@\n  */\n public class Lock implements Mutex {\n \n+    private final ReentrantLock lock;\n     private final InterProcessLock mutex;\n     private final String lockPath;\n \n     public Lock(String lockPath, Curator curator) {\n         this.lockPath = lockPath;\n+        this.lock = new ReentrantLock(true);\n         mutex = curator.createMutex(lockPath);\n     }\n \n     /** Take the lock with the given timeout. This may be called multiple times from the same thread - each matched by a close */\n     public void acquire(Duration timeout) throws UncheckedTimeoutException {\n-        boolean acquired;\n+        boolean acquired = false;\n         try {\n             acquired = mutex.acquire(timeout.toMillis(), TimeUnit.MILLISECONDS);\n+            lock.tryLock(); // Should be available to only this thread, while holding the above mutex.\n         }\n         catch (Exception e) {\n+            if (acquired) release();\n             throw new RuntimeException(\"Exception acquiring lock '\" + lockPath + \"'\", e);\n         }\n \n-        if (! acquired)\n+        if ( ! lock.isHeldByCurrentThread()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9775572038f4d8c883a94e1fee1b957b37d0e2f5"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ1MjAyNg==", "bodyText": "Right. Fixed. PTAL.", "url": "https://github.com/vespa-engine/vespa/pull/11815#discussion_r367452026", "createdAt": "2020-01-16T14:37:04Z", "author": {"login": "jonmv"}, "path": "zkfacade/src/main/java/com/yahoo/vespa/curator/Lock.java", "diffHunk": "@@ -15,31 +16,46 @@\n  */\n public class Lock implements Mutex {\n \n+    private final ReentrantLock lock;\n     private final InterProcessLock mutex;\n     private final String lockPath;\n \n     public Lock(String lockPath, Curator curator) {\n         this.lockPath = lockPath;\n+        this.lock = new ReentrantLock(true);\n         mutex = curator.createMutex(lockPath);\n     }\n \n     /** Take the lock with the given timeout. This may be called multiple times from the same thread - each matched by a close */\n     public void acquire(Duration timeout) throws UncheckedTimeoutException {\n-        boolean acquired;\n+        boolean acquired = false;\n         try {\n             acquired = mutex.acquire(timeout.toMillis(), TimeUnit.MILLISECONDS);\n+            lock.tryLock(); // Should be available to only this thread, while holding the above mutex.\n         }\n         catch (Exception e) {\n+            if (acquired) release();\n             throw new RuntimeException(\"Exception acquiring lock '\" + lockPath + \"'\", e);\n         }\n \n-        if (! acquired)\n+        if ( ! lock.isHeldByCurrentThread()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQ0NDg5Mg=="}, "originalCommit": {"oid": "9775572038f4d8c883a94e1fee1b957b37d0e2f5"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2661, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}