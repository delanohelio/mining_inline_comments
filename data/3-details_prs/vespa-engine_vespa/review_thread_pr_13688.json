{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MTE3NTYw", "number": 13688, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDo0OTo0NVrOEIUMHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDo0OTo0NVrOEIUMHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTU0ODQ0OnYy", "diffSide": "RIGHT", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/NodeRepository.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDo0OTo0NVrOGoM9eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMTowOTowOVrOGoNiyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwODU2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                         zone.environment().isProduction() && provisionServiceProvider.getHostProvisioner().isEmpty() ? 1 : 0);\n          \n          \n            \n                         zone.environment().isProduction() && ! zone.getCloud().dynamicProvisioning() ? 1 : 0);", "url": "https://github.com/vespa-engine/vespa/pull/13688#discussion_r444808568", "createdAt": "2020-06-24T10:49:45Z", "author": {"login": "bratseth"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/NodeRepository.java", "diffHunk": "@@ -124,7 +123,7 @@ public NodeRepository(NodeRepositoryConfig config,\n              new DnsNameResolver(),\n              DockerImage.fromString(config.dockerImage()), config.useCuratorClientCache(),\n              provisionServiceProvider.getHostProvisioner().isPresent(),\n-             zone.environment() == Environment.prod ? 1 : 0);\n+             zone.environment().isProduction() && provisionServiceProvider.getHostProvisioner().isEmpty() ? 1 : 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ac30a7be83d3a0965fa49fdd2bffa5bd09f571b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwOTQ3Mg==", "bodyText": "This wont exclude cd-aws-us-east-1a", "url": "https://github.com/vespa-engine/vespa/pull/13688#discussion_r444809472", "createdAt": "2020-06-24T10:51:37Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/NodeRepository.java", "diffHunk": "@@ -124,7 +123,7 @@ public NodeRepository(NodeRepositoryConfig config,\n              new DnsNameResolver(),\n              DockerImage.fromString(config.dockerImage()), config.useCuratorClientCache(),\n              provisionServiceProvider.getHostProvisioner().isPresent(),\n-             zone.environment() == Environment.prod ? 1 : 0);\n+             zone.environment().isProduction() && provisionServiceProvider.getHostProvisioner().isEmpty() ? 1 : 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwODU2OA=="}, "originalCommit": {"oid": "9ac30a7be83d3a0965fa49fdd2bffa5bd09f571b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgxNDQyNg==", "bodyText": "Because we pre-provision there? I think we should correct the definition for it then. dynamicProvisioning() definition:\n\n/** Returns whether this can provision hosts dynamically */\n\nAnd that looks to me like the exact right condition for when we should have spares.", "url": "https://github.com/vespa-engine/vespa/pull/13688#discussion_r444814426", "createdAt": "2020-06-24T11:01:35Z", "author": {"login": "bratseth"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/NodeRepository.java", "diffHunk": "@@ -124,7 +123,7 @@ public NodeRepository(NodeRepositoryConfig config,\n              new DnsNameResolver(),\n              DockerImage.fromString(config.dockerImage()), config.useCuratorClientCache(),\n              provisionServiceProvider.getHostProvisioner().isPresent(),\n-             zone.environment() == Environment.prod ? 1 : 0);\n+             zone.environment().isProduction() && provisionServiceProvider.getHostProvisioner().isEmpty() ? 1 : 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwODU2OA=="}, "originalCommit": {"oid": "9ac30a7be83d3a0965fa49fdd2bffa5bd09f571b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgxODEyMQ==", "bodyText": "... looks like we need to know both whether it can and if it wants to always provision dynamically ... or something. We should clean up this stuff, but independent of this PR.", "url": "https://github.com/vespa-engine/vespa/pull/13688#discussion_r444818121", "createdAt": "2020-06-24T11:09:09Z", "author": {"login": "bratseth"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/NodeRepository.java", "diffHunk": "@@ -124,7 +123,7 @@ public NodeRepository(NodeRepositoryConfig config,\n              new DnsNameResolver(),\n              DockerImage.fromString(config.dockerImage()), config.useCuratorClientCache(),\n              provisionServiceProvider.getHostProvisioner().isPresent(),\n-             zone.environment() == Environment.prod ? 1 : 0);\n+             zone.environment().isProduction() && provisionServiceProvider.getHostProvisioner().isEmpty() ? 1 : 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwODU2OA=="}, "originalCommit": {"oid": "9ac30a7be83d3a0965fa49fdd2bffa5bd09f571b"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1884, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}