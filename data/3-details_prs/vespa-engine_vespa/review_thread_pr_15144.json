{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MTQxMTU2", "number": 15144, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNTo0NjoyMFrOE0byyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNTo0NjoyMFrOE0byyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNDE2Nzc4OnYy", "diffSide": "RIGHT", "path": "storage/src/vespa/storage/distributor/statecheckers.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNTo0NjoyMFrOHsKDsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDozODozOFrOHso8XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA2NDE3Nw==", "bodyText": "This might trigger another kind of starvation if new global documents are fed to a cluster where a node is full.", "url": "https://github.com/vespa-engine/vespa/pull/15144#discussion_r516064177", "createdAt": "2020-11-02T15:46:20Z", "author": {"login": "toregge"}, "path": "storage/src/vespa/storage/distributor/statecheckers.cpp", "diffHunk": "@@ -861,11 +862,18 @@ SynchronizeAndMoveStateChecker::check(StateChecker::Context& c)\n         IdealStateOperation::UP op(\n                 new MergeOperation(BucketAndNodes(c.getBucket(), result.nodes()),\n                                    c.distributorConfig.getMaxNodesPerMerge()));\n-        op->setPriority(result.priority());\n         op->setDetailedReason(result.reason());\n-        MaintenancePriority::Priority schedPri(\n-                result.needsMoveOnly() ? MaintenancePriority::LOW\n-                                       : MaintenancePriority::MEDIUM);\n+        MaintenancePriority::Priority schedPri;\n+        if (c.getBucketSpace() == document::FixedBucketSpaces::default_space()) {\n+            schedPri = (result.needsMoveOnly() ? MaintenancePriority::LOW\n+                                               : MaintenancePriority::MEDIUM);\n+            op->setPriority(result.priority());\n+        } else {\n+            // Since the default bucket space has a dependency on the global bucket space,\n+            // we prioritize scheduling of merges to global buckets over those for default buckets.\n+            schedPri = MaintenancePriority::HIGH;\n+            op->setPriority(c.distributorConfig.getMaintenancePriorities().mergeGlobalBuckets);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "562fd8732238ad886a8bd4301bec19d2cb0cc2b6"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU3MDIwNQ==", "bodyText": "After having looked at the maintenance scheduler, this doesn't seem to be a problem. Buckets are added to a bucket priority database by a maintenance scanner, and the scheduler just picks buckets from that bucket priority database. If a maintenance operation fails then it is not retried until the maintenance scanner checks the bucket again.", "url": "https://github.com/vespa-engine/vespa/pull/15144#discussion_r516570205", "createdAt": "2020-11-03T10:38:38Z", "author": {"login": "toregge"}, "path": "storage/src/vespa/storage/distributor/statecheckers.cpp", "diffHunk": "@@ -861,11 +862,18 @@ SynchronizeAndMoveStateChecker::check(StateChecker::Context& c)\n         IdealStateOperation::UP op(\n                 new MergeOperation(BucketAndNodes(c.getBucket(), result.nodes()),\n                                    c.distributorConfig.getMaxNodesPerMerge()));\n-        op->setPriority(result.priority());\n         op->setDetailedReason(result.reason());\n-        MaintenancePriority::Priority schedPri(\n-                result.needsMoveOnly() ? MaintenancePriority::LOW\n-                                       : MaintenancePriority::MEDIUM);\n+        MaintenancePriority::Priority schedPri;\n+        if (c.getBucketSpace() == document::FixedBucketSpaces::default_space()) {\n+            schedPri = (result.needsMoveOnly() ? MaintenancePriority::LOW\n+                                               : MaintenancePriority::MEDIUM);\n+            op->setPriority(result.priority());\n+        } else {\n+            // Since the default bucket space has a dependency on the global bucket space,\n+            // we prioritize scheduling of merges to global buckets over those for default buckets.\n+            schedPri = MaintenancePriority::HIGH;\n+            op->setPriority(c.distributorConfig.getMaintenancePriorities().mergeGlobalBuckets);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA2NDE3Nw=="}, "originalCommit": {"oid": "562fd8732238ad886a8bd4301bec19d2cb0cc2b6"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 968, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}