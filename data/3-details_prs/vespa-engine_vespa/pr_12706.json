{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNTQ0NzM4", "number": 12706, "title": "Unify the metrics for queuesize similar to what we have for the spi q\u2026", "bodyText": "\u2026ueues.\n@geirst and @vekterli PR", "createdAt": "2020-03-25T11:54:56Z", "url": "https://github.com/vespa-engine/vespa/pull/12706", "merged": true, "mergeCommit": {"oid": "78a34982c126b4d01116a7c64ce2249e8a7b9e97"}, "closed": true, "closedAt": "2020-03-25T13:26:07Z", "author": {"login": "baldersheim"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRF-pkgH2gAyMzkzNTQ0NzM4OjQ0ZWMyZDc0YjVlODI4YjdkMWYwYmM5N2EzMTU4NDZhM2Q1MDUxYWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRIHjSgFqTM4MTE3OTM2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "44ec2d74b5e828b7d1f0bc97a315846a3d5051ac", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/44ec2d74b5e828b7d1f0bc97a315846a3d5051ac", "committedDate": "2020-03-25T11:40:45Z", "message": "Unify the metrics for queuesize similar to what we have for the spi queues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66c572366b31a9766d68b69e3d7dc20470abb50f", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/66c572366b31a9766d68b69e3d7dc20470abb50f", "committedDate": "2020-03-25T12:11:57Z", "message": "Add metrics to metric set."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMTI4MTYz", "url": "https://github.com/vespa-engine/vespa/pull/12706#pullrequestreview-381128163", "createdAt": "2020-03-25T13:08:09Z", "commit": {"oid": "66c572366b31a9766d68b69e3d7dc20470abb50f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMTc5MzYy", "url": "https://github.com/vespa-engine/vespa/pull/12706#pullrequestreview-381179362", "createdAt": "2020-03-25T14:06:10Z", "commit": {"oid": "66c572366b31a9766d68b69e3d7dc20470abb50f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDowNjoxMVrOF7csAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDowNjozNVrOF7ctMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4MDMyMw==", "bodyText": "Consider using auto.", "url": "https://github.com/vespa-engine/vespa/pull/12706#discussion_r397880323", "createdAt": "2020-03-25T14:06:11Z", "author": {"login": "geirst"}, "path": "searchcore/src/vespa/searchcore/proton/metrics/executor_metrics.cpp", "diffHunk": "@@ -7,16 +7,19 @@ namespace proton {\n void\n ExecutorMetrics::update(const vespalib::ThreadStackExecutorBase::Stats &stats)\n {\n-    maxPending.set(stats.maxPendingTasks);\n+    maxPending.set(stats.queueSize.max());\n     accepted.inc(stats.acceptedTasks);\n     rejected.inc(stats.rejectedTasks);\n+    const vespalib::ThreadStackExecutorBase::Stats::QueueSizeT & qSize = stats.queueSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66c572366b31a9766d68b69e3d7dc20470abb50f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4MDYyNg==", "bodyText": "\"size\" -> \"Size\"", "url": "https://github.com/vespa-engine/vespa/pull/12706#discussion_r397880626", "createdAt": "2020-03-25T14:06:35Z", "author": {"login": "geirst"}, "path": "searchcore/src/vespa/searchcore/proton/metrics/executor_metrics.cpp", "diffHunk": "@@ -7,16 +7,19 @@ namespace proton {\n void\n ExecutorMetrics::update(const vespalib::ThreadStackExecutorBase::Stats &stats)\n {\n-    maxPending.set(stats.maxPendingTasks);\n+    maxPending.set(stats.queueSize.max());\n     accepted.inc(stats.acceptedTasks);\n     rejected.inc(stats.rejectedTasks);\n+    const vespalib::ThreadStackExecutorBase::Stats::QueueSizeT & qSize = stats.queueSize;\n+    queueSize.addValueBatch(qSize.average(), qSize.count(), qSize.min(), qSize.max());\n }\n \n ExecutorMetrics::ExecutorMetrics(const std::string &name, metrics::MetricSet *parent)\n     : metrics::MetricSet(name, {}, \"Instance specific thread executor metrics\", parent),\n       maxPending(\"maxpending\", {}, \"Maximum number of pending (active + queued) tasks\", this),\n       accepted(\"accepted\", {}, \"Number of accepted tasks\", this),\n-      rejected(\"rejected\", {}, \"Number of rejected tasks\", this)\n+      rejected(\"rejected\", {}, \"Number of rejected tasks\", this),\n+      queueSize(\"queuesize\", {}, \"size of task queue\", this)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66c572366b31a9766d68b69e3d7dc20470abb50f"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2623, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}