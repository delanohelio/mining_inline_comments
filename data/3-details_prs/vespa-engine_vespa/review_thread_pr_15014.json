{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4MzAwMTc4", "number": 15014, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzo1MTo1N1rOEwxwzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzo1MzozN1rOEwxzxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTgyNDEzOnYy", "diffSide": "RIGHT", "path": "storage/src/tests/persistence/filestorage/filestormanagertest.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzo1MTo1N1rOHmi2Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDowOToxNlrOHmjr-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE3ODg5MA==", "bodyText": "Consider = default", "url": "https://github.com/vespa-engine/vespa/pull/15014#discussion_r510178890", "createdAt": "2020-10-22T13:51:57Z", "author": {"login": "vekterli"}, "path": "storage/src/tests/persistence/filestorage/filestormanagertest.cpp", "diffHunk": "@@ -218,6 +219,57 @@ struct TestFileStorComponents {\n     }\n };\n \n+struct FileStorHandlerComponents {\n+    DummyStorageLink top;\n+    DummyStorageLink* dummyManager;\n+    ForwardingMessageSender messageSender;\n+    documentapi::LoadTypeSet loadTypes;\n+    FileStorMetrics metrics;\n+    std::unique_ptr<FileStorHandler> filestorHandler;\n+\n+    FileStorHandlerComponents(FileStorManagerTest& test, uint32_t threadsPerDisk = 1)\n+        : top(),\n+          dummyManager(new DummyStorageLink),\n+          messageSender(*dummyManager),\n+          loadTypes(\"raw:\"),\n+          metrics(loadTypes.getMetricLoadTypes()),\n+          filestorHandler()\n+    {\n+        top.push_back(std::unique_ptr<StorageLink>(dummyManager));\n+        top.open();\n+\n+        metrics.initDiskMetrics(loadTypes.getMetricLoadTypes(), 1, threadsPerDisk);\n+\n+        filestorHandler = std::make_unique<FileStorHandlerImpl>(messageSender, metrics, test._node->getComponentRegister());\n+        filestorHandler->setGetNextMessageTimeout(50ms);\n+    }\n+    ~FileStorHandlerComponents() {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3adef49574ec1d09a26235f6da34ce21c1d3f396"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE5MjYzNA==", "bodyText": "That was not enough in this case. Inlining of destructor still failed.", "url": "https://github.com/vespa-engine/vespa/pull/15014#discussion_r510192634", "createdAt": "2020-10-22T14:09:16Z", "author": {"login": "geirst"}, "path": "storage/src/tests/persistence/filestorage/filestormanagertest.cpp", "diffHunk": "@@ -218,6 +219,57 @@ struct TestFileStorComponents {\n     }\n };\n \n+struct FileStorHandlerComponents {\n+    DummyStorageLink top;\n+    DummyStorageLink* dummyManager;\n+    ForwardingMessageSender messageSender;\n+    documentapi::LoadTypeSet loadTypes;\n+    FileStorMetrics metrics;\n+    std::unique_ptr<FileStorHandler> filestorHandler;\n+\n+    FileStorHandlerComponents(FileStorManagerTest& test, uint32_t threadsPerDisk = 1)\n+        : top(),\n+          dummyManager(new DummyStorageLink),\n+          messageSender(*dummyManager),\n+          loadTypes(\"raw:\"),\n+          metrics(loadTypes.getMetricLoadTypes()),\n+          filestorHandler()\n+    {\n+        top.push_back(std::unique_ptr<StorageLink>(dummyManager));\n+        top.open();\n+\n+        metrics.initDiskMetrics(loadTypes.getMetricLoadTypes(), 1, threadsPerDisk);\n+\n+        filestorHandler = std::make_unique<FileStorHandlerImpl>(messageSender, metrics, test._node->getComponentRegister());\n+        filestorHandler->setGetNextMessageTimeout(50ms);\n+    }\n+    ~FileStorHandlerComponents() {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE3ODg5MA=="}, "originalCommit": {"oid": "3adef49574ec1d09a26235f6da34ce21c1d3f396"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTgzMTcyOnYy", "diffSide": "RIGHT", "path": "storage/src/tests/persistence/filestorage/filestormanagertest.cpp", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzo1MzozN1rOHmi7YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo1NjoyNlrOHmzgmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE4MDE5Mg==", "bodyText": "Consider = default", "url": "https://github.com/vespa-engine/vespa/pull/15014#discussion_r510180192", "createdAt": "2020-10-22T13:53:37Z", "author": {"login": "vekterli"}, "path": "storage/src/tests/persistence/filestorage/filestormanagertest.cpp", "diffHunk": "@@ -218,6 +219,57 @@ struct TestFileStorComponents {\n     }\n };\n \n+struct FileStorHandlerComponents {\n+    DummyStorageLink top;\n+    DummyStorageLink* dummyManager;\n+    ForwardingMessageSender messageSender;\n+    documentapi::LoadTypeSet loadTypes;\n+    FileStorMetrics metrics;\n+    std::unique_ptr<FileStorHandler> filestorHandler;\n+\n+    FileStorHandlerComponents(FileStorManagerTest& test, uint32_t threadsPerDisk = 1)\n+        : top(),\n+          dummyManager(new DummyStorageLink),\n+          messageSender(*dummyManager),\n+          loadTypes(\"raw:\"),\n+          metrics(loadTypes.getMetricLoadTypes()),\n+          filestorHandler()\n+    {\n+        top.push_back(std::unique_ptr<StorageLink>(dummyManager));\n+        top.open();\n+\n+        metrics.initDiskMetrics(loadTypes.getMetricLoadTypes(), 1, threadsPerDisk);\n+\n+        filestorHandler = std::make_unique<FileStorHandlerImpl>(messageSender, metrics, test._node->getComponentRegister());\n+        filestorHandler->setGetNextMessageTimeout(50ms);\n+    }\n+    ~FileStorHandlerComponents() {}\n+};\n+\n+struct PersistenceHandlerComponents : public FileStorHandlerComponents {\n+    ServiceLayerComponent component;\n+    BucketOwnershipNotifier bucketOwnershipNotifier;\n+    std::unique_ptr<PersistenceHandler> persistenceHandler;\n+\n+    PersistenceHandlerComponents(FileStorManagerTest& test)\n+        : FileStorHandlerComponents(test),\n+          component(test._node->getComponentRegister(), \"test\"),\n+          bucketOwnershipNotifier(component, messageSender),\n+          persistenceHandler()\n+    {\n+        vespa::config::content::StorFilestorConfig cfg;\n+        persistenceHandler =\n+                std::make_unique<PersistenceHandler>(test._node->executor(), component, cfg,\n+                                                     test._node->getPersistenceProvider(),\n+                                                     *filestorHandler, bucketOwnershipNotifier,\n+                                                     *metrics.disk->threads[0]);\n+    }\n+    std::unique_ptr<DiskThread> make_disk_thread() {\n+        return createThread(*persistenceHandler, *filestorHandler, component);\n+    }\n+    ~PersistenceHandlerComponents() {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3adef49574ec1d09a26235f6da34ce21c1d3f396"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE5MjcyMQ==", "bodyText": "That was not enough in this case. Inlining of destructor still failed.", "url": "https://github.com/vespa-engine/vespa/pull/15014#discussion_r510192721", "createdAt": "2020-10-22T14:09:22Z", "author": {"login": "geirst"}, "path": "storage/src/tests/persistence/filestorage/filestormanagertest.cpp", "diffHunk": "@@ -218,6 +219,57 @@ struct TestFileStorComponents {\n     }\n };\n \n+struct FileStorHandlerComponents {\n+    DummyStorageLink top;\n+    DummyStorageLink* dummyManager;\n+    ForwardingMessageSender messageSender;\n+    documentapi::LoadTypeSet loadTypes;\n+    FileStorMetrics metrics;\n+    std::unique_ptr<FileStorHandler> filestorHandler;\n+\n+    FileStorHandlerComponents(FileStorManagerTest& test, uint32_t threadsPerDisk = 1)\n+        : top(),\n+          dummyManager(new DummyStorageLink),\n+          messageSender(*dummyManager),\n+          loadTypes(\"raw:\"),\n+          metrics(loadTypes.getMetricLoadTypes()),\n+          filestorHandler()\n+    {\n+        top.push_back(std::unique_ptr<StorageLink>(dummyManager));\n+        top.open();\n+\n+        metrics.initDiskMetrics(loadTypes.getMetricLoadTypes(), 1, threadsPerDisk);\n+\n+        filestorHandler = std::make_unique<FileStorHandlerImpl>(messageSender, metrics, test._node->getComponentRegister());\n+        filestorHandler->setGetNextMessageTimeout(50ms);\n+    }\n+    ~FileStorHandlerComponents() {}\n+};\n+\n+struct PersistenceHandlerComponents : public FileStorHandlerComponents {\n+    ServiceLayerComponent component;\n+    BucketOwnershipNotifier bucketOwnershipNotifier;\n+    std::unique_ptr<PersistenceHandler> persistenceHandler;\n+\n+    PersistenceHandlerComponents(FileStorManagerTest& test)\n+        : FileStorHandlerComponents(test),\n+          component(test._node->getComponentRegister(), \"test\"),\n+          bucketOwnershipNotifier(component, messageSender),\n+          persistenceHandler()\n+    {\n+        vespa::config::content::StorFilestorConfig cfg;\n+        persistenceHandler =\n+                std::make_unique<PersistenceHandler>(test._node->executor(), component, cfg,\n+                                                     test._node->getPersistenceProvider(),\n+                                                     *filestorHandler, bucketOwnershipNotifier,\n+                                                     *metrics.disk->threads[0]);\n+    }\n+    std::unique_ptr<DiskThread> make_disk_thread() {\n+        return createThread(*persistenceHandler, *filestorHandler, component);\n+    }\n+    ~PersistenceHandlerComponents() {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE4MDE5Mg=="}, "originalCommit": {"oid": "3adef49574ec1d09a26235f6da34ce21c1d3f396"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE5OTgyOA==", "bodyText": "Move PersistenceHandlerComponents::~PersistenceHandlerComponents() = default; outside the class itself and the inliner becomes happy again", "url": "https://github.com/vespa-engine/vespa/pull/15014#discussion_r510199828", "createdAt": "2020-10-22T14:18:18Z", "author": {"login": "vekterli"}, "path": "storage/src/tests/persistence/filestorage/filestormanagertest.cpp", "diffHunk": "@@ -218,6 +219,57 @@ struct TestFileStorComponents {\n     }\n };\n \n+struct FileStorHandlerComponents {\n+    DummyStorageLink top;\n+    DummyStorageLink* dummyManager;\n+    ForwardingMessageSender messageSender;\n+    documentapi::LoadTypeSet loadTypes;\n+    FileStorMetrics metrics;\n+    std::unique_ptr<FileStorHandler> filestorHandler;\n+\n+    FileStorHandlerComponents(FileStorManagerTest& test, uint32_t threadsPerDisk = 1)\n+        : top(),\n+          dummyManager(new DummyStorageLink),\n+          messageSender(*dummyManager),\n+          loadTypes(\"raw:\"),\n+          metrics(loadTypes.getMetricLoadTypes()),\n+          filestorHandler()\n+    {\n+        top.push_back(std::unique_ptr<StorageLink>(dummyManager));\n+        top.open();\n+\n+        metrics.initDiskMetrics(loadTypes.getMetricLoadTypes(), 1, threadsPerDisk);\n+\n+        filestorHandler = std::make_unique<FileStorHandlerImpl>(messageSender, metrics, test._node->getComponentRegister());\n+        filestorHandler->setGetNextMessageTimeout(50ms);\n+    }\n+    ~FileStorHandlerComponents() {}\n+};\n+\n+struct PersistenceHandlerComponents : public FileStorHandlerComponents {\n+    ServiceLayerComponent component;\n+    BucketOwnershipNotifier bucketOwnershipNotifier;\n+    std::unique_ptr<PersistenceHandler> persistenceHandler;\n+\n+    PersistenceHandlerComponents(FileStorManagerTest& test)\n+        : FileStorHandlerComponents(test),\n+          component(test._node->getComponentRegister(), \"test\"),\n+          bucketOwnershipNotifier(component, messageSender),\n+          persistenceHandler()\n+    {\n+        vespa::config::content::StorFilestorConfig cfg;\n+        persistenceHandler =\n+                std::make_unique<PersistenceHandler>(test._node->executor(), component, cfg,\n+                                                     test._node->getPersistenceProvider(),\n+                                                     *filestorHandler, bucketOwnershipNotifier,\n+                                                     *metrics.disk->threads[0]);\n+    }\n+    std::unique_ptr<DiskThread> make_disk_thread() {\n+        return createThread(*persistenceHandler, *filestorHandler, component);\n+    }\n+    ~PersistenceHandlerComponents() {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE4MDE5Mg=="}, "originalCommit": {"oid": "3adef49574ec1d09a26235f6da34ce21c1d3f396"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzNjU5Ng==", "bodyText": "Yes, that is the correct approach. = default in class definition applies the same inliner heuristics as not defining the destructor. Defining and empty destructor with {} changes the heuristics, while doing outside the class definitions avoids the problem.", "url": "https://github.com/vespa-engine/vespa/pull/15014#discussion_r510436596", "createdAt": "2020-10-22T20:27:28Z", "author": {"login": "baldersheim"}, "path": "storage/src/tests/persistence/filestorage/filestormanagertest.cpp", "diffHunk": "@@ -218,6 +219,57 @@ struct TestFileStorComponents {\n     }\n };\n \n+struct FileStorHandlerComponents {\n+    DummyStorageLink top;\n+    DummyStorageLink* dummyManager;\n+    ForwardingMessageSender messageSender;\n+    documentapi::LoadTypeSet loadTypes;\n+    FileStorMetrics metrics;\n+    std::unique_ptr<FileStorHandler> filestorHandler;\n+\n+    FileStorHandlerComponents(FileStorManagerTest& test, uint32_t threadsPerDisk = 1)\n+        : top(),\n+          dummyManager(new DummyStorageLink),\n+          messageSender(*dummyManager),\n+          loadTypes(\"raw:\"),\n+          metrics(loadTypes.getMetricLoadTypes()),\n+          filestorHandler()\n+    {\n+        top.push_back(std::unique_ptr<StorageLink>(dummyManager));\n+        top.open();\n+\n+        metrics.initDiskMetrics(loadTypes.getMetricLoadTypes(), 1, threadsPerDisk);\n+\n+        filestorHandler = std::make_unique<FileStorHandlerImpl>(messageSender, metrics, test._node->getComponentRegister());\n+        filestorHandler->setGetNextMessageTimeout(50ms);\n+    }\n+    ~FileStorHandlerComponents() {}\n+};\n+\n+struct PersistenceHandlerComponents : public FileStorHandlerComponents {\n+    ServiceLayerComponent component;\n+    BucketOwnershipNotifier bucketOwnershipNotifier;\n+    std::unique_ptr<PersistenceHandler> persistenceHandler;\n+\n+    PersistenceHandlerComponents(FileStorManagerTest& test)\n+        : FileStorHandlerComponents(test),\n+          component(test._node->getComponentRegister(), \"test\"),\n+          bucketOwnershipNotifier(component, messageSender),\n+          persistenceHandler()\n+    {\n+        vespa::config::content::StorFilestorConfig cfg;\n+        persistenceHandler =\n+                std::make_unique<PersistenceHandler>(test._node->executor(), component, cfg,\n+                                                     test._node->getPersistenceProvider(),\n+                                                     *filestorHandler, bucketOwnershipNotifier,\n+                                                     *metrics.disk->threads[0]);\n+    }\n+    std::unique_ptr<DiskThread> make_disk_thread() {\n+        return createThread(*persistenceHandler, *filestorHandler, component);\n+    }\n+    ~PersistenceHandlerComponents() {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE4MDE5Mg=="}, "originalCommit": {"oid": "3adef49574ec1d09a26235f6da34ce21c1d3f396"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1MTg2Ng==", "bodyText": "Fixed.", "url": "https://github.com/vespa-engine/vespa/pull/15014#discussion_r510451866", "createdAt": "2020-10-22T20:56:26Z", "author": {"login": "geirst"}, "path": "storage/src/tests/persistence/filestorage/filestormanagertest.cpp", "diffHunk": "@@ -218,6 +219,57 @@ struct TestFileStorComponents {\n     }\n };\n \n+struct FileStorHandlerComponents {\n+    DummyStorageLink top;\n+    DummyStorageLink* dummyManager;\n+    ForwardingMessageSender messageSender;\n+    documentapi::LoadTypeSet loadTypes;\n+    FileStorMetrics metrics;\n+    std::unique_ptr<FileStorHandler> filestorHandler;\n+\n+    FileStorHandlerComponents(FileStorManagerTest& test, uint32_t threadsPerDisk = 1)\n+        : top(),\n+          dummyManager(new DummyStorageLink),\n+          messageSender(*dummyManager),\n+          loadTypes(\"raw:\"),\n+          metrics(loadTypes.getMetricLoadTypes()),\n+          filestorHandler()\n+    {\n+        top.push_back(std::unique_ptr<StorageLink>(dummyManager));\n+        top.open();\n+\n+        metrics.initDiskMetrics(loadTypes.getMetricLoadTypes(), 1, threadsPerDisk);\n+\n+        filestorHandler = std::make_unique<FileStorHandlerImpl>(messageSender, metrics, test._node->getComponentRegister());\n+        filestorHandler->setGetNextMessageTimeout(50ms);\n+    }\n+    ~FileStorHandlerComponents() {}\n+};\n+\n+struct PersistenceHandlerComponents : public FileStorHandlerComponents {\n+    ServiceLayerComponent component;\n+    BucketOwnershipNotifier bucketOwnershipNotifier;\n+    std::unique_ptr<PersistenceHandler> persistenceHandler;\n+\n+    PersistenceHandlerComponents(FileStorManagerTest& test)\n+        : FileStorHandlerComponents(test),\n+          component(test._node->getComponentRegister(), \"test\"),\n+          bucketOwnershipNotifier(component, messageSender),\n+          persistenceHandler()\n+    {\n+        vespa::config::content::StorFilestorConfig cfg;\n+        persistenceHandler =\n+                std::make_unique<PersistenceHandler>(test._node->executor(), component, cfg,\n+                                                     test._node->getPersistenceProvider(),\n+                                                     *filestorHandler, bucketOwnershipNotifier,\n+                                                     *metrics.disk->threads[0]);\n+    }\n+    std::unique_ptr<DiskThread> make_disk_thread() {\n+        return createThread(*persistenceHandler, *filestorHandler, component);\n+    }\n+    ~PersistenceHandlerComponents() {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE4MDE5Mg=="}, "originalCommit": {"oid": "3adef49574ec1d09a26235f6da34ce21c1d3f396"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1124, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}