{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNTY5Mzgy", "number": 14574, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxMzo1Mzo0MFrOEnv0QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxODo0NTo1NFrOEnxFjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTEzMzQ0OnYy", "diffSide": "RIGHT", "path": "eval/src/vespa/eval/tensor/mixed/packed_mappings_builder.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxMzo1Mzo0MFrOHYgaxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxNDowOTozNFrOHYgf2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ1OTAxNQ==", "bodyText": "Is it not better that mem_start is void * ?", "url": "https://github.com/vespa-engine/vespa/pull/14574#discussion_r495459015", "createdAt": "2020-09-26T13:53:40Z", "author": {"login": "baldersheim"}, "path": "eval/src/vespa/eval/tensor/mixed/packed_mappings_builder.cpp", "diffHunk": "@@ -54,8 +54,8 @@ PackedMappingsBuilder::target_memory(char *mem_start, char *mem_end) const\n     ssize_t avail_sz = mem_end - mem_start;\n     assert(needs_sz <= avail_sz);\n \n-    uint32_t * int_store_mem = (uint32_t *) mem_start;\n-    uint32_t * offsets_mem = (uint32_t *) (mem_start + int_store_size);\n+    uint32_t * int_store_mem = (uint32_t *) (void *) mem_start;\n+    uint32_t * offsets_mem = (uint32_t *) (void *) (mem_start + int_store_size);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4098929a837a2d1e433d9248600ff7cf48700a6a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ2MDMxNQ==", "bodyText": "If mem_start is void* then any code using mem_start + offset would need to use ((char *) mem_start) + offset", "url": "https://github.com/vespa-engine/vespa/pull/14574#discussion_r495460315", "createdAt": "2020-09-26T14:09:34Z", "author": {"login": "toregge"}, "path": "eval/src/vespa/eval/tensor/mixed/packed_mappings_builder.cpp", "diffHunk": "@@ -54,8 +54,8 @@ PackedMappingsBuilder::target_memory(char *mem_start, char *mem_end) const\n     ssize_t avail_sz = mem_end - mem_start;\n     assert(needs_sz <= avail_sz);\n \n-    uint32_t * int_store_mem = (uint32_t *) mem_start;\n-    uint32_t * offsets_mem = (uint32_t *) (mem_start + int_store_size);\n+    uint32_t * int_store_mem = (uint32_t *) (void *) mem_start;\n+    uint32_t * offsets_mem = (uint32_t *) (void *) (mem_start + int_store_size);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ1OTAxNQ=="}, "originalCommit": {"oid": "4098929a837a2d1e433d9248600ff7cf48700a6a"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTEzMzgxOnYy", "diffSide": "RIGHT", "path": "eval/src/vespa/eval/tensor/mixed/packed_mixed_tensor_builder.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxMzo1NDozNFrOHYga-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxMzo1NDozNFrOHYga-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ1OTA2NA==", "bodyText": "Is it not better that mem_start is void * ?", "url": "https://github.com/vespa-engine/vespa/pull/14574#discussion_r495459064", "createdAt": "2020-09-26T13:54:34Z", "author": {"login": "baldersheim"}, "path": "eval/src/vespa/eval/tensor/mixed/packed_mixed_tensor_builder.cpp", "diffHunk": "@@ -39,7 +39,7 @@ PackedMixedTensorBuilder<T>::build(std::unique_ptr<ValueBuilder<T>>)\n \n     // copy cells:\n     memcpy(cells_mem, &_cells[0], cells_size);\n-    ConstArrayRef<T> cells((T *)cells_mem, _cells.size());\n+    ConstArrayRef<T> cells((T *)(void *) cells_mem, _cells.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4098929a837a2d1e433d9248600ff7cf48700a6a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMTM0MTU3OnYy", "diffSide": "RIGHT", "path": "storage/src/vespa/storage/storageserver/rpc/storage_api_rpc_service.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxODo0NTo1NFrOHYh82A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQxODo0NTo1NFrOHYh82A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ4NDEyMA==", "bodyText": "This is not the first time this treacherous interface gives us trouble.\nFixed in #14575", "url": "https://github.com/vespa-engine/vespa/pull/14574#discussion_r495484120", "createdAt": "2020-09-26T18:45:54Z", "author": {"login": "baldersheim"}, "path": "storage/src/vespa/storage/storageserver/rpc/storage_api_rpc_service.cpp", "diffHunk": "@@ -117,7 +117,8 @@ void compress_and_add_payload_to_rpc_params(mbus::BlobRef payload,\n \n     params.AddInt8(comp_type);\n     params.AddInt32(static_cast<uint32_t>(to_compress.size()));\n-    params.AddData(buf.stealBuffer(), buf.getDataLen());\n+    auto buffer_len = buf.getDataLen();\n+    params.AddData(buf.stealBuffer(), buffer_len);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4098929a837a2d1e433d9248600ff7cf48700a6a"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1332, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}