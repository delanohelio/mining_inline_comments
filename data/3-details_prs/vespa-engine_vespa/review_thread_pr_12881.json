{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwOTEwNjM2", "number": 12881, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTozMjoxNFrODwDAsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMToyMTo1OFrODwkiTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzA3NTcxOnYy", "diffSide": "RIGHT", "path": "searchcore/src/vespa/searchcore/proton/server/docstorevalidator.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTozMjoxNFrOGC0zPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTo1MTo1OVrOGDnI1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxNTQyMw==", "bodyText": "Note that this will not work properly if gid calculatiation change or document id corruption caused the validation to fail.\nThis is due to document meta store having the gid based upon original gid calculation with original document id, while this remove uses new gid calculation with a possibly corrupted document id.\nThe original validation used a batch remove feed operation that had a vector of lids to remove. I believe that operation needs to be resurrected too in some form.", "url": "https://github.com/vespa-engine/vespa/pull/12881#discussion_r405615423", "createdAt": "2020-04-08T15:32:14Z", "author": {"login": "toregge"}, "path": "searchcore/src/vespa/searchcore/proton/server/docstorevalidator.cpp", "diffHunk": "@@ -127,7 +128,7 @@ void DocStoreValidator::performRemoves(FeedHandler & feedHandler, const search::\n             assert(document);\n             LOG(info, \"Removing document with id %s and lid %u with gid %s in bucket %s\", document->getId().toString().c_str(), lid, metaData.gid.toString().c_str(), metaData.bucketId.toString().c_str());\n             std::unique_ptr<RemoveOperation> remove = std::make_unique<RemoveOperation>(metaData.bucketId, metaData.timestamp, document->getId());\n-            feedHandler.performOperation(FeedToken::UP(), std::move(remove));\n+            feedHandler.performOperation(FeedToken(), std::move(remove));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78298d9906f214fc9e096df782bfb7ee5fa1e76d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY2MTc3MQ==", "bodyText": "Hmm, I will look back in history and see if that is easily resurrected then.\nYou also had another comment on #2576. Is that still valid ?", "url": "https://github.com/vespa-engine/vespa/pull/12881#discussion_r405661771", "createdAt": "2020-04-08T16:39:25Z", "author": {"login": "baldersheim"}, "path": "searchcore/src/vespa/searchcore/proton/server/docstorevalidator.cpp", "diffHunk": "@@ -127,7 +128,7 @@ void DocStoreValidator::performRemoves(FeedHandler & feedHandler, const search::\n             assert(document);\n             LOG(info, \"Removing document with id %s and lid %u with gid %s in bucket %s\", document->getId().toString().c_str(), lid, metaData.gid.toString().c_str(), metaData.bucketId.toString().c_str());\n             std::unique_ptr<RemoveOperation> remove = std::make_unique<RemoveOperation>(metaData.bucketId, metaData.timestamp, document->getId());\n-            feedHandler.performOperation(FeedToken::UP(), std::move(remove));\n+            feedHandler.performOperation(FeedToken(), std::move(remove));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxNTQyMw=="}, "originalCommit": {"oid": "78298d9906f214fc9e096df782bfb7ee5fa1e76d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ0MDE0OA==", "bodyText": "Plan to introduce RemoveWithGid instead.", "url": "https://github.com/vespa-engine/vespa/pull/12881#discussion_r406440148", "createdAt": "2020-04-09T19:51:59Z", "author": {"login": "baldersheim"}, "path": "searchcore/src/vespa/searchcore/proton/server/docstorevalidator.cpp", "diffHunk": "@@ -127,7 +128,7 @@ void DocStoreValidator::performRemoves(FeedHandler & feedHandler, const search::\n             assert(document);\n             LOG(info, \"Removing document with id %s and lid %u with gid %s in bucket %s\", document->getId().toString().c_str(), lid, metaData.gid.toString().c_str(), metaData.bucketId.toString().c_str());\n             std::unique_ptr<RemoveOperation> remove = std::make_unique<RemoveOperation>(metaData.bucketId, metaData.timestamp, document->getId());\n-            feedHandler.performOperation(FeedToken::UP(), std::move(remove));\n+            feedHandler.performOperation(FeedToken(), std::move(remove));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxNTQyMw=="}, "originalCommit": {"oid": "78298d9906f214fc9e096df782bfb7ee5fa1e76d"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDUzNDg1OnYy", "diffSide": "RIGHT", "path": "searchcore/src/vespa/searchcore/proton/feedoperation/removeoperation.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMjowNjoxOFrOGDV2Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTo1MDo0M1rOGDnGHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1NjgxOQ==", "bodyText": "Old lid already exists in grandparent class, c.f. getPrevLid() method.", "url": "https://github.com/vespa-engine/vespa/pull/12881#discussion_r406156819", "createdAt": "2020-04-09T12:06:18Z", "author": {"login": "toregge"}, "path": "searchcore/src/vespa/searchcore/proton/feedoperation/removeoperation.h", "diffHunk": "@@ -7,22 +7,57 @@\n namespace proton {\n \n class RemoveOperation : public DocumentOperation {\n+protected:\n+    explicit RemoveOperation(Type type) : DocumentOperation(type) {}\n+    RemoveOperation(Type type, document::BucketId bucketId, storage::spi::Timestamp timestamp)\n+        : DocumentOperation(type, bucketId, timestamp)\n+    {}\n+public:\n+    virtual bool hasDocType() const = 0;\n+    virtual vespalib::stringref getDocType() const = 0;\n+    virtual const document::GlobalId & getGlobalId() const = 0;\n+};\n+\n+class RemoveOperationWithDocId : public RemoveOperation {\n     document::DocumentId _docId;\n \n public:\n-    RemoveOperation();\n-    RemoveOperation(const document::BucketId &bucketId,\n-                    const storage::spi::Timestamp &timestamp,\n-                    const document::DocumentId &docId);\n-    virtual ~RemoveOperation() {}\n+    RemoveOperationWithDocId();\n+    RemoveOperationWithDocId(document::BucketId bucketId,\n+                             storage::spi::Timestamp timestamp,\n+                             const document::DocumentId &docId);\n+    ~RemoveOperationWithDocId() override;\n     const document::DocumentId &getDocumentId() const { return _docId; }\n-    virtual void serialize(vespalib::nbostream &os) const override;\n-    virtual void deserialize(vespalib::nbostream &is,\n-                             const document::DocumentTypeRepo &repo) override;\n-    virtual vespalib::string toString() const override;\n+    const document::GlobalId & getGlobalId() const override { return _docId.getGlobalId(); }\n+    void serialize(vespalib::nbostream &os) const override;\n+    void deserialize(vespalib::nbostream &is, const document::DocumentTypeRepo &repo) override;\n+    vespalib::string toString() const override;\n+\n+    bool hasDocType() const override { return _docId.hasDocType(); }\n+    vespalib::stringref getDocType() const override { return _docId.getDocType(); }\n+};\n+\n+class RemoveOperationWithGid : public RemoveOperation {\n+    document::GlobalId _gid;\n+    vespalib::string   _docType;\n+    uint32_t           _lid;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e862fb33abde3bb6d6a953a2e74af2cc15506508"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzOTQ1NA==", "bodyText": "OK, revmoved", "url": "https://github.com/vespa-engine/vespa/pull/12881#discussion_r406439454", "createdAt": "2020-04-09T19:50:43Z", "author": {"login": "baldersheim"}, "path": "searchcore/src/vespa/searchcore/proton/feedoperation/removeoperation.h", "diffHunk": "@@ -7,22 +7,57 @@\n namespace proton {\n \n class RemoveOperation : public DocumentOperation {\n+protected:\n+    explicit RemoveOperation(Type type) : DocumentOperation(type) {}\n+    RemoveOperation(Type type, document::BucketId bucketId, storage::spi::Timestamp timestamp)\n+        : DocumentOperation(type, bucketId, timestamp)\n+    {}\n+public:\n+    virtual bool hasDocType() const = 0;\n+    virtual vespalib::stringref getDocType() const = 0;\n+    virtual const document::GlobalId & getGlobalId() const = 0;\n+};\n+\n+class RemoveOperationWithDocId : public RemoveOperation {\n     document::DocumentId _docId;\n \n public:\n-    RemoveOperation();\n-    RemoveOperation(const document::BucketId &bucketId,\n-                    const storage::spi::Timestamp &timestamp,\n-                    const document::DocumentId &docId);\n-    virtual ~RemoveOperation() {}\n+    RemoveOperationWithDocId();\n+    RemoveOperationWithDocId(document::BucketId bucketId,\n+                             storage::spi::Timestamp timestamp,\n+                             const document::DocumentId &docId);\n+    ~RemoveOperationWithDocId() override;\n     const document::DocumentId &getDocumentId() const { return _docId; }\n-    virtual void serialize(vespalib::nbostream &os) const override;\n-    virtual void deserialize(vespalib::nbostream &is,\n-                             const document::DocumentTypeRepo &repo) override;\n-    virtual vespalib::string toString() const override;\n+    const document::GlobalId & getGlobalId() const override { return _docId.getGlobalId(); }\n+    void serialize(vespalib::nbostream &os) const override;\n+    void deserialize(vespalib::nbostream &is, const document::DocumentTypeRepo &repo) override;\n+    vespalib::string toString() const override;\n+\n+    bool hasDocType() const override { return _docId.hasDocType(); }\n+    vespalib::stringref getDocType() const override { return _docId.getDocType(); }\n+};\n+\n+class RemoveOperationWithGid : public RemoveOperation {\n+    document::GlobalId _gid;\n+    vespalib::string   _docType;\n+    uint32_t           _lid;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1NjgxOQ=="}, "originalCommit": {"oid": "e862fb33abde3bb6d6a953a2e74af2cc15506508"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDU0NDk2OnYy", "diffSide": "RIGHT", "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMjowOToyNlrOGDV8WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDoyNTo0MFrOGDoKng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1ODQyNQ==", "bodyText": "This change seems to be unneeded.", "url": "https://github.com/vespa-engine/vespa/pull/12881#discussion_r406158425", "createdAt": "2020-04-09T12:09:26Z", "author": {"login": "toregge"}, "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.cpp", "diffHunk": "@@ -142,46 +143,45 @@ std::vector<document::GlobalId> getGidsToRemove(const IDocumentMetaStore &metaSt\n     return gids;\n }\n \n-void putMetaData(documentmetastore::IStore &meta_store, const DocumentId &doc_id,\n+void putMetaData(documentmetastore::IStore &meta_store, const GlobalId & gid, const DocumentId & doc_id,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e862fb33abde3bb6d6a953a2e74af2cc15506508"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1Njk5MA==", "bodyText": "Agree, since the branch will never be taken.", "url": "https://github.com/vespa-engine/vespa/pull/12881#discussion_r406456990", "createdAt": "2020-04-09T20:25:40Z", "author": {"login": "baldersheim"}, "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.cpp", "diffHunk": "@@ -142,46 +143,45 @@ std::vector<document::GlobalId> getGidsToRemove(const IDocumentMetaStore &metaSt\n     return gids;\n }\n \n-void putMetaData(documentmetastore::IStore &meta_store, const DocumentId &doc_id,\n+void putMetaData(documentmetastore::IStore &meta_store, const GlobalId & gid, const DocumentId & doc_id,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1ODQyNQ=="}, "originalCommit": {"oid": "e862fb33abde3bb6d6a953a2e74af2cc15506508"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDU0NTg3OnYy", "diffSide": "RIGHT", "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMjowOTo0NFrOGDV89A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDoyNjo0OFrOGDoM4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1ODU4MA==", "bodyText": "This change seems to be unneeded.", "url": "https://github.com/vespa-engine/vespa/pull/12881#discussion_r406158580", "createdAt": "2020-04-09T12:09:44Z", "author": {"login": "toregge"}, "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.cpp", "diffHunk": "@@ -142,46 +143,45 @@ std::vector<document::GlobalId> getGidsToRemove(const IDocumentMetaStore &metaSt\n     return gids;\n }\n \n-void putMetaData(documentmetastore::IStore &meta_store, const DocumentId &doc_id,\n+void putMetaData(documentmetastore::IStore &meta_store, const GlobalId & gid, const DocumentId & doc_id,\n                  const DocumentOperation &op, bool is_removed_doc)\n {\n     documentmetastore::IStore::Result putRes(\n-            meta_store.put(doc_id.getGlobalId(),\n+            meta_store.put(gid,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e862fb33abde3bb6d6a953a2e74af2cc15506508"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1NzU3MQ==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/12881#discussion_r406457571", "createdAt": "2020-04-09T20:26:48Z", "author": {"login": "baldersheim"}, "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.cpp", "diffHunk": "@@ -142,46 +143,45 @@ std::vector<document::GlobalId> getGidsToRemove(const IDocumentMetaStore &metaSt\n     return gids;\n }\n \n-void putMetaData(documentmetastore::IStore &meta_store, const DocumentId &doc_id,\n+void putMetaData(documentmetastore::IStore &meta_store, const GlobalId & gid, const DocumentId & doc_id,\n                  const DocumentOperation &op, bool is_removed_doc)\n {\n     documentmetastore::IStore::Result putRes(\n-            meta_store.put(doc_id.getGlobalId(),\n+            meta_store.put(gid,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1ODU4MA=="}, "originalCommit": {"oid": "e862fb33abde3bb6d6a953a2e74af2cc15506508"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDU0NzAyOnYy", "diffSide": "RIGHT", "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMjoxMDowNlrOGDV9nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDoyNzowOFrOGDoNiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1ODc1MQ==", "bodyText": "This change seems to be unneeded.", "url": "https://github.com/vespa-engine/vespa/pull/12881#discussion_r406158751", "createdAt": "2020-04-09T12:10:06Z", "author": {"login": "toregge"}, "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.cpp", "diffHunk": "@@ -142,46 +143,45 @@ std::vector<document::GlobalId> getGidsToRemove(const IDocumentMetaStore &metaSt\n     return gids;\n }\n \n-void putMetaData(documentmetastore::IStore &meta_store, const DocumentId &doc_id,\n+void putMetaData(documentmetastore::IStore &meta_store, const GlobalId & gid, const DocumentId & doc_id,\n                  const DocumentOperation &op, bool is_removed_doc)\n {\n     documentmetastore::IStore::Result putRes(\n-            meta_store.put(doc_id.getGlobalId(),\n+            meta_store.put(gid,\n                            op.getBucketId(), op.getTimestamp(), op.getSerializedDocSize(), op.getLid()));\n     if (!putRes.ok()) {\n         throw IllegalStateException(\n                 make_string(\"Could not put <lid, gid> pair for %sdocument with id '%s' and gid '%s'\",\n                             is_removed_doc ? \"removed \" : \"\", doc_id.toString().c_str(),\n-                            doc_id.getGlobalId().toString().c_str()));\n+                            gid.toString().c_str()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e862fb33abde3bb6d6a953a2e74af2cc15506508"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1NzczNw==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/12881#discussion_r406457737", "createdAt": "2020-04-09T20:27:08Z", "author": {"login": "baldersheim"}, "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.cpp", "diffHunk": "@@ -142,46 +143,45 @@ std::vector<document::GlobalId> getGidsToRemove(const IDocumentMetaStore &metaSt\n     return gids;\n }\n \n-void putMetaData(documentmetastore::IStore &meta_store, const DocumentId &doc_id,\n+void putMetaData(documentmetastore::IStore &meta_store, const GlobalId & gid, const DocumentId & doc_id,\n                  const DocumentOperation &op, bool is_removed_doc)\n {\n     documentmetastore::IStore::Result putRes(\n-            meta_store.put(doc_id.getGlobalId(),\n+            meta_store.put(gid,\n                            op.getBucketId(), op.getTimestamp(), op.getSerializedDocSize(), op.getLid()));\n     if (!putRes.ok()) {\n         throw IllegalStateException(\n                 make_string(\"Could not put <lid, gid> pair for %sdocument with id '%s' and gid '%s'\",\n                             is_removed_doc ? \"removed \" : \"\", doc_id.toString().c_str(),\n-                            doc_id.getGlobalId().toString().c_str()));\n+                            gid.toString().c_str()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1ODc1MQ=="}, "originalCommit": {"oid": "e862fb33abde3bb6d6a953a2e74af2cc15506508"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDU1MzIwOnYy", "diffSide": "RIGHT", "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMjoxMTo1MVrOGDWBSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDoyNzo0MVrOGDoOqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1OTY4OA==", "bodyText": "This change is not needed.", "url": "https://github.com/vespa-engine/vespa/pull/12881#discussion_r406159688", "createdAt": "2020-04-09T12:11:51Z", "author": {"login": "toregge"}, "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.cpp", "diffHunk": "@@ -142,46 +143,45 @@ std::vector<document::GlobalId> getGidsToRemove(const IDocumentMetaStore &metaSt\n     return gids;\n }\n \n-void putMetaData(documentmetastore::IStore &meta_store, const DocumentId &doc_id,\n+void putMetaData(documentmetastore::IStore &meta_store, const GlobalId & gid, const DocumentId & doc_id,\n                  const DocumentOperation &op, bool is_removed_doc)\n {\n     documentmetastore::IStore::Result putRes(\n-            meta_store.put(doc_id.getGlobalId(),\n+            meta_store.put(gid,\n                            op.getBucketId(), op.getTimestamp(), op.getSerializedDocSize(), op.getLid()));\n     if (!putRes.ok()) {\n         throw IllegalStateException(\n                 make_string(\"Could not put <lid, gid> pair for %sdocument with id '%s' and gid '%s'\",\n                             is_removed_doc ? \"removed \" : \"\", doc_id.toString().c_str(),\n-                            doc_id.getGlobalId().toString().c_str()));\n+                            gid.toString().c_str()));\n     }\n     assert(op.getLid() == putRes._lid);\n }\n \n-void removeMetaData(documentmetastore::IStore &meta_store, const DocumentId &doc_id,\n+void removeMetaData(documentmetastore::IStore &meta_store, const GlobalId & gid, const DocumentId &doc_id,\n                     const DocumentOperation &op, bool is_removed_doc) {\n     assert(meta_store.validLid(op.getPrevLid()));\n     assert(is_removed_doc == op.getPrevMarkedAsRemoved());\n     const RawDocumentMetaData &meta(meta_store.getRawMetaData(op.getPrevLid()));\n-    assert(meta.getGid() == doc_id.getGlobalId());\n+    assert(meta.getGid() == gid);\n     (void) meta;\n     if (!meta_store.remove(op.getPrevLid())) {\n         throw IllegalStateException(\n                 make_string(\"Could not remove <lid, gid> pair for %sdocument with id '%s' and gid '%s'\",\n                             is_removed_doc ? \"removed \" : \"\", doc_id.toString().c_str(),\n-                            doc_id.getGlobalId().toString().c_str()));\n+                            gid.toString().c_str()));\n     }\n }\n \n void\n-moveMetaData(documentmetastore::IStore &meta_store, const DocumentId &doc_id, const DocumentOperation &op)\n+moveMetaData(documentmetastore::IStore &meta_store, const GlobalId & gid, const DocumentOperation &op)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e862fb33abde3bb6d6a953a2e74af2cc15506508"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1ODAyNQ==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/12881#discussion_r406458025", "createdAt": "2020-04-09T20:27:41Z", "author": {"login": "baldersheim"}, "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.cpp", "diffHunk": "@@ -142,46 +143,45 @@ std::vector<document::GlobalId> getGidsToRemove(const IDocumentMetaStore &metaSt\n     return gids;\n }\n \n-void putMetaData(documentmetastore::IStore &meta_store, const DocumentId &doc_id,\n+void putMetaData(documentmetastore::IStore &meta_store, const GlobalId & gid, const DocumentId & doc_id,\n                  const DocumentOperation &op, bool is_removed_doc)\n {\n     documentmetastore::IStore::Result putRes(\n-            meta_store.put(doc_id.getGlobalId(),\n+            meta_store.put(gid,\n                            op.getBucketId(), op.getTimestamp(), op.getSerializedDocSize(), op.getLid()));\n     if (!putRes.ok()) {\n         throw IllegalStateException(\n                 make_string(\"Could not put <lid, gid> pair for %sdocument with id '%s' and gid '%s'\",\n                             is_removed_doc ? \"removed \" : \"\", doc_id.toString().c_str(),\n-                            doc_id.getGlobalId().toString().c_str()));\n+                            gid.toString().c_str()));\n     }\n     assert(op.getLid() == putRes._lid);\n }\n \n-void removeMetaData(documentmetastore::IStore &meta_store, const DocumentId &doc_id,\n+void removeMetaData(documentmetastore::IStore &meta_store, const GlobalId & gid, const DocumentId &doc_id,\n                     const DocumentOperation &op, bool is_removed_doc) {\n     assert(meta_store.validLid(op.getPrevLid()));\n     assert(is_removed_doc == op.getPrevMarkedAsRemoved());\n     const RawDocumentMetaData &meta(meta_store.getRawMetaData(op.getPrevLid()));\n-    assert(meta.getGid() == doc_id.getGlobalId());\n+    assert(meta.getGid() == gid);\n     (void) meta;\n     if (!meta_store.remove(op.getPrevLid())) {\n         throw IllegalStateException(\n                 make_string(\"Could not remove <lid, gid> pair for %sdocument with id '%s' and gid '%s'\",\n                             is_removed_doc ? \"removed \" : \"\", doc_id.toString().c_str(),\n-                            doc_id.getGlobalId().toString().c_str()));\n+                            gid.toString().c_str()));\n     }\n }\n \n void\n-moveMetaData(documentmetastore::IStore &meta_store, const DocumentId &doc_id, const DocumentOperation &op)\n+moveMetaData(documentmetastore::IStore &meta_store, const GlobalId & gid, const DocumentOperation &op)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1OTY4OA=="}, "originalCommit": {"oid": "e862fb33abde3bb6d6a953a2e74af2cc15506508"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDU3NDkxOnYy", "diffSide": "RIGHT", "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMjoxODoyOFrOGDWO8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDoyNzoyN1rOGDoOLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE2MzE4Ng==", "bodyText": "putMetaData should not be called for RemoveOperationWithGid. But this should be implicitly enforced by the operation always having 0 (i.e. invalid) as the new lid.", "url": "https://github.com/vespa-engine/vespa/pull/12881#discussion_r406163186", "createdAt": "2020-04-09T12:18:28Z", "author": {"login": "toregge"}, "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.cpp", "diffHunk": "@@ -602,14 +630,14 @@ StoreOnlyFeedView::adjustMetaStore(const DocumentOperation &op, const DocumentId\n                 op.getValidPrevDbdId(_params._subDbId) &&\n                 op.getLid() != op.getPrevLid())\n             {\n-                moveMetaData(_metaStore, docId, op);\n+                moveMetaData(_metaStore, docId.getGlobalId(), op);\n             } else {\n-                putMetaData(_metaStore, docId, op, _params._subDbType == SubDbType::REMOVED);\n+                putMetaData(_metaStore, gid, docId, op, _params._subDbType == SubDbType::REMOVED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e862fb33abde3bb6d6a953a2e74af2cc15506508"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1NzkwMg==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/12881#discussion_r406457902", "createdAt": "2020-04-09T20:27:27Z", "author": {"login": "baldersheim"}, "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.cpp", "diffHunk": "@@ -602,14 +630,14 @@ StoreOnlyFeedView::adjustMetaStore(const DocumentOperation &op, const DocumentId\n                 op.getValidPrevDbdId(_params._subDbId) &&\n                 op.getLid() != op.getPrevLid())\n             {\n-                moveMetaData(_metaStore, docId, op);\n+                moveMetaData(_metaStore, docId.getGlobalId(), op);\n             } else {\n-                putMetaData(_metaStore, docId, op, _params._subDbType == SubDbType::REMOVED);\n+                putMetaData(_metaStore, gid, docId, op, _params._subDbType == SubDbType::REMOVED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE2MzE4Ng=="}, "originalCommit": {"oid": "e862fb33abde3bb6d6a953a2e74af2cc15506508"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDU4MjMzOnYy", "diffSide": "RIGHT", "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMjoyMDo1MFrOGDWTmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDoxNDo1OFrOGDn2Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE2NDM3OA==", "bodyText": "The expression for this if should never evaluate to true.", "url": "https://github.com/vespa-engine/vespa/pull/12881#discussion_r406164378", "createdAt": "2020-04-09T12:20:50Z", "author": {"login": "toregge"}, "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.cpp", "diffHunk": "@@ -575,6 +580,29 @@ StoreOnlyFeedView::internalRemove(FeedToken token, const RemoveOperation &rmOp)\n     }\n }\n \n+void\n+StoreOnlyFeedView::internalRemove(FeedToken token, const RemoveOperationWithGid &rmOp)\n+{\n+    assert(rmOp.getValidNewOrPrevDbdId());\n+    assert(rmOp.notMovingLidInSameSubDb());\n+    const SerialNum serialNum = rmOp.getSerialNum();\n+    DocumentId dummy;\n+    PendingNotifyRemoveDone pendingNotifyRemoveDone = adjustMetaStore(rmOp, rmOp.getGlobalId(), dummy);\n+    considerEarlyAck(token);\n+\n+    if (rmOp.getValidDbdId(_params._subDbId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e862fb33abde3bb6d6a953a2e74af2cc15506508"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1MTc4Ng==", "bodyText": "Removed Section.", "url": "https://github.com/vespa-engine/vespa/pull/12881#discussion_r406451786", "createdAt": "2020-04-09T20:14:58Z", "author": {"login": "baldersheim"}, "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.cpp", "diffHunk": "@@ -575,6 +580,29 @@ StoreOnlyFeedView::internalRemove(FeedToken token, const RemoveOperation &rmOp)\n     }\n }\n \n+void\n+StoreOnlyFeedView::internalRemove(FeedToken token, const RemoveOperationWithGid &rmOp)\n+{\n+    assert(rmOp.getValidNewOrPrevDbdId());\n+    assert(rmOp.notMovingLidInSameSubDb());\n+    const SerialNum serialNum = rmOp.getSerialNum();\n+    DocumentId dummy;\n+    PendingNotifyRemoveDone pendingNotifyRemoveDone = adjustMetaStore(rmOp, rmOp.getGlobalId(), dummy);\n+    considerEarlyAck(token);\n+\n+    if (rmOp.getValidDbdId(_params._subDbId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE2NDM3OA=="}, "originalCommit": {"oid": "e862fb33abde3bb6d6a953a2e74af2cc15506508"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDYxMzA0OnYy", "diffSide": "RIGHT", "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMjoyOTozN1rOGDWmDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDoxMjozNVrOGDnxzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE2OTEwMQ==", "bodyText": "We don't want new entries in the removed sub db if rmOp is a RemoveOperationWithGid. In that case, setDbDocumentId() should not be called.", "url": "https://github.com/vespa-engine/vespa/pull/12881#discussion_r406169101", "createdAt": "2020-04-09T12:29:37Z", "author": {"login": "toregge"}, "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.cpp", "diffHunk": "@@ -530,9 +530,7 @@ StoreOnlyFeedView::removeIndexedFields(SerialNum, Lid, bool, OnRemoveDoneType) {\n void\n StoreOnlyFeedView::prepareRemove(RemoveOperation &rmOp)\n {\n-    const DocumentId &id = rmOp.getDocumentId();\n-    const document::GlobalId &gid = id.getGlobalId();\n-    documentmetastore::IStore::Result inspectRes = _metaStore.inspect(gid);\n+    documentmetastore::IStore::Result inspectRes = _metaStore.inspect(rmOp.getGlobalId());\n     if (_params._subDbType == SubDbType::REMOVED) {\n         rmOp.setDbDocumentId(DbDocumentId(_params._subDbId, inspectRes._lid));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e862fb33abde3bb6d6a953a2e74af2cc15506508"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ1MDYzOQ==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/12881#discussion_r406450639", "createdAt": "2020-04-09T20:12:35Z", "author": {"login": "baldersheim"}, "path": "searchcore/src/vespa/searchcore/proton/server/storeonlyfeedview.cpp", "diffHunk": "@@ -530,9 +530,7 @@ StoreOnlyFeedView::removeIndexedFields(SerialNum, Lid, bool, OnRemoveDoneType) {\n void\n StoreOnlyFeedView::prepareRemove(RemoveOperation &rmOp)\n {\n-    const DocumentId &id = rmOp.getDocumentId();\n-    const document::GlobalId &gid = id.getGlobalId();\n-    documentmetastore::IStore::Result inspectRes = _metaStore.inspect(gid);\n+    documentmetastore::IStore::Result inspectRes = _metaStore.inspect(rmOp.getGlobalId());\n     if (_params._subDbType == SubDbType::REMOVED) {\n         rmOp.setDbDocumentId(DbDocumentId(_params._subDbId, inspectRes._lid));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE2OTEwMQ=="}, "originalCommit": {"oid": "e862fb33abde3bb6d6a953a2e74af2cc15506508"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDY2MTQ4OnYy", "diffSide": "RIGHT", "path": "searchcore/src/vespa/searchcore/proton/feedoperation/removeoperation.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMjo0Mzo1NlrOGDXD6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDowNjowNVrOGDnksg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE3Njc0Ng==", "bodyText": "Pleas add an assert(!getValidDbdId());, to ensure that we're not serializing a bad RemoveOperationWithGid.", "url": "https://github.com/vespa-engine/vespa/pull/12881#discussion_r406176746", "createdAt": "2020-04-09T12:43:56Z", "author": {"login": "toregge"}, "path": "searchcore/src/vespa/searchcore/proton/feedoperation/removeoperation.cpp", "diffHunk": "@@ -40,18 +39,69 @@ RemoveOperation::serialize(vespalib::nbostream &os) const\n \n \n void\n-RemoveOperation::deserialize(vespalib::nbostream &is,\n+RemoveOperationWithDocId::deserialize(vespalib::nbostream &is,\n                           const DocumentTypeRepo &repo)\n {\n-    DocumentOperation::deserialize(is, repo);\n+    RemoveOperation::deserialize(is, repo);\n     size_t oldSize = is.size();\n     _docId = DocumentId(is);\n     _serializedDocSize = oldSize - is.size();\n }\n \n-vespalib::string RemoveOperation::toString() const {\n+vespalib::string\n+RemoveOperationWithDocId::toString() const {\n     return make_string(\"Remove(%s, %s)\",\n-                       _docId.getScheme().toString().c_str(),\n-                       docArgsToString().c_str());\n+                       _docId.getScheme().toString().c_str(), docArgsToString().c_str());\n+}\n+\n+RemoveOperationWithGid::RemoveOperationWithGid()\n+        : RemoveOperation(FeedOperation::REMOVE_GID),\n+          _gid(),\n+          _docType(),\n+          _lid(0)\n+{}\n+\n+\n+RemoveOperationWithGid::RemoveOperationWithGid(BucketId bucketId, Timestamp timestamp, const GlobalId &gid, vespalib::stringref docType, uint32_t lid)\n+        : RemoveOperation(FeedOperation::REMOVE_GID, bucketId, timestamp),\n+          _gid(gid),\n+          _docType(docType),\n+          _lid(lid)\n+{}\n+\n+RemoveOperationWithGid::~RemoveOperationWithGid() = default;\n+\n+void\n+RemoveOperationWithGid::serialize(vespalib::nbostream &os) const\n+{\n+    assertValidBucketId(_gid);\n+    RemoveOperation::serialize(os);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e862fb33abde3bb6d6a953a2e74af2cc15506508"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ0NzI4Mg==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/12881#discussion_r406447282", "createdAt": "2020-04-09T20:06:05Z", "author": {"login": "baldersheim"}, "path": "searchcore/src/vespa/searchcore/proton/feedoperation/removeoperation.cpp", "diffHunk": "@@ -40,18 +39,69 @@ RemoveOperation::serialize(vespalib::nbostream &os) const\n \n \n void\n-RemoveOperation::deserialize(vespalib::nbostream &is,\n+RemoveOperationWithDocId::deserialize(vespalib::nbostream &is,\n                           const DocumentTypeRepo &repo)\n {\n-    DocumentOperation::deserialize(is, repo);\n+    RemoveOperation::deserialize(is, repo);\n     size_t oldSize = is.size();\n     _docId = DocumentId(is);\n     _serializedDocSize = oldSize - is.size();\n }\n \n-vespalib::string RemoveOperation::toString() const {\n+vespalib::string\n+RemoveOperationWithDocId::toString() const {\n     return make_string(\"Remove(%s, %s)\",\n-                       _docId.getScheme().toString().c_str(),\n-                       docArgsToString().c_str());\n+                       _docId.getScheme().toString().c_str(), docArgsToString().c_str());\n+}\n+\n+RemoveOperationWithGid::RemoveOperationWithGid()\n+        : RemoveOperation(FeedOperation::REMOVE_GID),\n+          _gid(),\n+          _docType(),\n+          _lid(0)\n+{}\n+\n+\n+RemoveOperationWithGid::RemoveOperationWithGid(BucketId bucketId, Timestamp timestamp, const GlobalId &gid, vespalib::stringref docType, uint32_t lid)\n+        : RemoveOperation(FeedOperation::REMOVE_GID, bucketId, timestamp),\n+          _gid(gid),\n+          _docType(docType),\n+          _lid(lid)\n+{}\n+\n+RemoveOperationWithGid::~RemoveOperationWithGid() = default;\n+\n+void\n+RemoveOperationWithGid::serialize(vespalib::nbostream &os) const\n+{\n+    assertValidBucketId(_gid);\n+    RemoveOperation::serialize(os);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE3Njc0Ng=="}, "originalCommit": {"oid": "e862fb33abde3bb6d6a953a2e74af2cc15506508"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjU2ODQ3OnYy", "diffSide": "RIGHT", "path": "searchcore/src/tests/proton/feedoperation/feedoperation_test.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMToyMTo1OFrOGDp3aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxODoyODozMlrOGEPIjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4NDg0Mw==", "bodyText": "Please extend unit test to also test (de)serialize of RemoveOperationWithGid.", "url": "https://github.com/vespa-engine/vespa/pull/12881#discussion_r406484843", "createdAt": "2020-04-09T21:21:58Z", "author": {"login": "toregge"}, "path": "searchcore/src/tests/proton/feedoperation/feedoperation_test.cpp", "diffHunk": "@@ -311,15 +311,15 @@ TEST_F(\"require that we can serialize and deserialize remove operations\", Fixtur\n     uint32_t expSerializedDocSize = getDocIdSize(docId);\n     EXPECT_NOT_EQUAL(0u, expSerializedDocSize);\n     {\n-        RemoveOperation op(bucket, Timestamp(10), docId);\n+        RemoveOperationWithDocId op(bucket, Timestamp(10), docId);\n         op.setDbDocumentId({1, 2});\n         op.setPrevDbDocumentId({3, 4});\n         EXPECT_EQUAL(0u, op.getSerializedDocSize());\n         op.serialize(stream);\n         EXPECT_EQUAL(expSerializedDocSize, op.getSerializedDocSize());\n     }\n     {\n-        RemoveOperation op;\n+        RemoveOperationWithDocId op;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "769a19ddb4adb8f69cb5483dce27c07e5862357e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5NTQzOA==", "bodyText": "Test added.", "url": "https://github.com/vespa-engine/vespa/pull/12881#discussion_r407095438", "createdAt": "2020-04-11T18:28:32Z", "author": {"login": "baldersheim"}, "path": "searchcore/src/tests/proton/feedoperation/feedoperation_test.cpp", "diffHunk": "@@ -311,15 +311,15 @@ TEST_F(\"require that we can serialize and deserialize remove operations\", Fixtur\n     uint32_t expSerializedDocSize = getDocIdSize(docId);\n     EXPECT_NOT_EQUAL(0u, expSerializedDocSize);\n     {\n-        RemoveOperation op(bucket, Timestamp(10), docId);\n+        RemoveOperationWithDocId op(bucket, Timestamp(10), docId);\n         op.setDbDocumentId({1, 2});\n         op.setPrevDbDocumentId({3, 4});\n         EXPECT_EQUAL(0u, op.getSerializedDocSize());\n         op.serialize(stream);\n         EXPECT_EQUAL(expSerializedDocSize, op.getSerializedDocSize());\n     }\n     {\n-        RemoveOperation op;\n+        RemoveOperationWithDocId op;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4NDg0Mw=="}, "originalCommit": {"oid": "769a19ddb4adb8f69cb5483dce27c07e5862357e"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1765, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}