{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMjUzMDQ1", "number": 14518, "title": "instruction-level generic join", "bodyText": "also move some stuff out of simple_value\nI confirm that this contribution is made under the terms of the license found in the root directory of this repository's source tree and that I have the authority necessary to make this contribution on behalf of its copyright owner.\n@arnej27959 please review", "createdAt": "2020-09-24T07:43:57Z", "url": "https://github.com/vespa-engine/vespa/pull/14518", "merged": true, "mergeCommit": {"oid": "05c5270aaf5dc6ab04eb89b8bd7f4f59937dfdb7"}, "closed": true, "closedAt": "2020-09-24T09:36:40Z", "author": {"login": "havardpe"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdL8Qt9AH2gAyNDkyMjUzMDQ1OmY0M2IzNmM1NDRmMmEwYjQwZjUzMDBhODVmM2JhNTQzZDY2MjE2MTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdL9KHyAFqTQ5NTMyMDUwNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f43b36c544f2a0b40f5300a85f3ba543d6621613", "author": {"user": {"login": "havardpe", "name": "H\u00e5vard Pettersen"}}, "url": "https://github.com/vespa-engine/vespa/commit/f43b36c544f2a0b40f5300a85f3ba543d6621613", "committedDate": "2020-09-24T07:42:58Z", "message": "instruction-level generic join\n\nalso move some stuff out of simple_value"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MzIwNTA3", "url": "https://github.com/vespa-engine/vespa/pull/14518#pullrequestreview-495320507", "createdAt": "2020-09-24T08:09:53Z", "commit": {"oid": "f43b36c544f2a0b40f5300a85f3ba543d6621613"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODowOTo1NFrOHXOvuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODoxNDoxMVrOHXO57g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEyMDg4OQ==", "bodyText": "There is no \"JoinPlan\".", "url": "https://github.com/vespa-engine/vespa/pull/14518#discussion_r494120889", "createdAt": "2020-09-24T08:09:54Z", "author": {"login": "arnej27959"}, "path": "eval/src/vespa/eval/eval/tensor_instructions.h", "diffHunk": "@@ -0,0 +1,24 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"interpreted_function.h\"\n+\n+namespace vespalib {\n+\n+class Stash;\n+\n+namespace eval {\n+\n+struct JoinPlan;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f43b36c544f2a0b40f5300a85f3ba543d6621613"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEyMjUyMw==", "bodyText": "ending three nested namespaces like this feels confusing to me.\nI suggest something like:\nnamespace vespalib { class Stash; }\n\nnamespace vespalib::eval::tensor_instruction {\n... rest of file ...\n}", "url": "https://github.com/vespa-engine/vespa/pull/14518#discussion_r494122523", "createdAt": "2020-09-24T08:12:34Z", "author": {"login": "arnej27959"}, "path": "eval/src/vespa/eval/eval/tensor_instructions.h", "diffHunk": "@@ -0,0 +1,24 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"interpreted_function.h\"\n+\n+namespace vespalib {\n+\n+class Stash;\n+\n+namespace eval {\n+\n+struct JoinPlan;\n+\n+namespace tensor_instruction {\n+\n+using join_fun_t = double (*)(double, double);\n+\n+InterpretedFunction::Instruction make_join(const ValueType &lhs_type, const ValueType &rhs_type, join_fun_t function,\n+                                           const ValueBuilderFactory &factory, Stash &stash);\n+\n+}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f43b36c544f2a0b40f5300a85f3ba543d6621613"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEyMzUwMg==", "bodyText": "is it possible to move the various execute() implementations to the .cpp file? or would that lead to less inlining opportunities?", "url": "https://github.com/vespa-engine/vespa/pull/14518#discussion_r494123502", "createdAt": "2020-09-24T08:14:11Z", "author": {"login": "arnej27959"}, "path": "eval/src/vespa/eval/eval/tensor_plans.h", "diffHunk": "@@ -0,0 +1,77 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"value_type.h\"\n+#include <vespa/vespalib/stllike/string.h>\n+#include <vector>\n+\n+namespace vespalib::eval {\n+\n+class ValueBuilderFactory;\n+\n+//-----------------------------------------------------------------------------\n+\n+/**\n+ * Plan for how to traverse two partially overlapping dense subspaces\n+ * in parallel, identifying all matching cell index combinations, in\n+ * the exact order the joined cells will be stored in the result. The\n+ * plan can be made up-front during tensor function compilation.\n+ **/\n+struct DenseJoinPlan {\n+    size_t lhs_size;\n+    size_t rhs_size;\n+    size_t out_size;\n+    std::vector<size_t> loop_cnt;\n+    std::vector<size_t> lhs_stride;\n+    std::vector<size_t> rhs_stride;\n+    DenseJoinPlan(const ValueType &lhs_type, const ValueType &rhs_type);\n+    ~DenseJoinPlan();\n+    template <typename F> void execute(size_t lhs, size_t rhs, F &&f) const {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f43b36c544f2a0b40f5300a85f3ba543d6621613"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4190, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}