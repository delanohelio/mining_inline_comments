{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MDI1MTcw", "number": 12748, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODo1MDowN1rODsko3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOTowNjoyN1rODslC8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDY0MjIzOnYy", "diffSide": "RIGHT", "path": "messagebus/src/vespa/messagebus/network/rpctarget.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODo1MDowN1rOF9fn-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOTo1NzowOVrOF9iMnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyNTU5NA==", "bodyText": "There seems to be a transitive data visibility dependency from _state to _version, so to ensure _version is well defined this should be a memory_order_acquire load.", "url": "https://github.com/vespa-engine/vespa/pull/12748#discussion_r400025594", "createdAt": "2020-03-30T08:50:07Z", "author": {"login": "vekterli"}, "path": "messagebus/src/vespa/messagebus/network/rpctarget.cpp", "diffHunk": "@@ -25,11 +25,12 @@ RPCTarget::~RPCTarget()\n void\n RPCTarget::resolveVersion(duration timeout, RPCTarget::IVersionHandler &handler)\n {\n-    bool hasVersion = false;\n     bool shouldInvoke = false;\n-    {\n+    ResolveState state = _state.load(std::memory_order_relaxed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "506d2d5491448fea5683ea8d34957b10e048847b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA2Nzc0MQ==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/12748#discussion_r400067741", "createdAt": "2020-03-30T09:57:09Z", "author": {"login": "baldersheim"}, "path": "messagebus/src/vespa/messagebus/network/rpctarget.cpp", "diffHunk": "@@ -25,11 +25,12 @@ RPCTarget::~RPCTarget()\n void\n RPCTarget::resolveVersion(duration timeout, RPCTarget::IVersionHandler &handler)\n {\n-    bool hasVersion = false;\n     bool shouldInvoke = false;\n-    {\n+    ResolveState state = _state.load(std::memory_order_relaxed);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyNTU5NA=="}, "originalCommit": {"oid": "506d2d5491448fea5683ea8d34957b10e048847b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDY1Mzc0OnYy", "diffSide": "RIGHT", "path": "messagebus/src/vespa/messagebus/network/rpctarget.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODo1Mjo0N1rOF9fuvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMDowMDo1OFrOF9iWPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyNzMyNQ==", "bodyText": "Is RPCTarget::isValid() ever used in a way where the caller assumes something about the contents of _version based on the return value here? If so, consider using memory_order_acquire here as well.", "url": "https://github.com/vespa-engine/vespa/pull/12748#discussion_r400027325", "createdAt": "2020-03-30T08:52:47Z", "author": {"login": "vekterli"}, "path": "messagebus/src/vespa/messagebus/network/rpctarget.cpp", "diffHunk": "@@ -54,11 +55,11 @@ RPCTarget::resolveVersion(duration timeout, RPCTarget::IVersionHandler &handler)\n bool\n RPCTarget::isValid() const\n {\n-    vespalib::MonitorGuard guard(_lock);\n     if (_target.IsValid()) {\n         return true;\n     }\n-    if (_state == TARGET_INVOKED || _state == PROCESSING_HANDLERS) {\n+    ResolveState state = _state.load(std::memory_order_relaxed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "506d2d5491448fea5683ea8d34957b10e048847b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA3MDIwNA==", "bodyText": "No, it is just used once to detect if connection should be dropped and remove from pool.", "url": "https://github.com/vespa-engine/vespa/pull/12748#discussion_r400070204", "createdAt": "2020-03-30T10:00:58Z", "author": {"login": "baldersheim"}, "path": "messagebus/src/vespa/messagebus/network/rpctarget.cpp", "diffHunk": "@@ -54,11 +55,11 @@ RPCTarget::resolveVersion(duration timeout, RPCTarget::IVersionHandler &handler)\n bool\n RPCTarget::isValid() const\n {\n-    vespalib::MonitorGuard guard(_lock);\n     if (_target.IsValid()) {\n         return true;\n     }\n-    if (_state == TARGET_INVOKED || _state == PROCESSING_HANDLERS) {\n+    ResolveState state = _state.load(std::memory_order_relaxed);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyNzMyNQ=="}, "originalCommit": {"oid": "506d2d5491448fea5683ea8d34957b10e048847b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDcwODk3OnYy", "diffSide": "RIGHT", "path": "messagebus/src/vespa/messagebus/network/rpctarget.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOTowNjoyN1rOF9gQfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMDoyODoxMFrOF9jUIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAzNTk2NA==", "bodyText": "By removing the check for _state == VERSION_RESOLVED, doesn't this open up for the following race condition?\n\nThread reads _state == TARGET_INVOKED cached into local state variable, attempts to enter critical section. Is put on hold by kernel.\nMBus thread receives resolved version, enters critical section, finishes processing handlers and finally sets _state = VERSION_RESOLVED\nOriginal thread wakes up, enters critical section\nOriginal thread sees that cached state value is not equal to PROCESSING_HANDLERS, does not enter branch that can set hasVersion = true\nOriginal thread initiates new version fetch towards peer even though version has already been resolved\nNew round of same race condition possible by any other subsequent concurrent senders\n\nNote that it should be safe to use the original expression with both loads being made explicitly relaxed, as visibility should be guaranteed from entering the critical section. That should avoid the race condition while not introducing any memory fences.", "url": "https://github.com/vespa-engine/vespa/pull/12748#discussion_r400035964", "createdAt": "2020-03-30T09:06:27Z", "author": {"login": "vekterli"}, "path": "messagebus/src/vespa/messagebus/network/rpctarget.cpp", "diffHunk": "@@ -25,11 +25,12 @@ RPCTarget::~RPCTarget()\n void\n RPCTarget::resolveVersion(duration timeout, RPCTarget::IVersionHandler &handler)\n {\n-    bool hasVersion = false;\n     bool shouldInvoke = false;\n-    {\n+    ResolveState state = _state.load(std::memory_order_relaxed);\n+    bool hasVersion = (state == VERSION_RESOLVED);\n+    if ( ! hasVersion ) {\n         vespalib::MonitorGuard guard(_lock);\n-        if (_state == VERSION_RESOLVED || _state == PROCESSING_HANDLERS) {\n+        if (state == PROCESSING_HANDLERS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "506d2d5491448fea5683ea8d34957b10e048847b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA4NjA0OA==", "bodyText": "Very good catch - Classic error.", "url": "https://github.com/vespa-engine/vespa/pull/12748#discussion_r400086048", "createdAt": "2020-03-30T10:28:10Z", "author": {"login": "baldersheim"}, "path": "messagebus/src/vespa/messagebus/network/rpctarget.cpp", "diffHunk": "@@ -25,11 +25,12 @@ RPCTarget::~RPCTarget()\n void\n RPCTarget::resolveVersion(duration timeout, RPCTarget::IVersionHandler &handler)\n {\n-    bool hasVersion = false;\n     bool shouldInvoke = false;\n-    {\n+    ResolveState state = _state.load(std::memory_order_relaxed);\n+    bool hasVersion = (state == VERSION_RESOLVED);\n+    if ( ! hasVersion ) {\n         vespalib::MonitorGuard guard(_lock);\n-        if (_state == VERSION_RESOLVED || _state == PROCESSING_HANDLERS) {\n+        if (state == PROCESSING_HANDLERS) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAzNTk2NA=="}, "originalCommit": {"oid": "506d2d5491448fea5683ea8d34957b10e048847b"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2148, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}