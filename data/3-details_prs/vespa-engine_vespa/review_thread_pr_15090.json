{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyMjczODU2", "number": 15090, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTo1MzoyNVrOEzXU6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNjowNDo0MVrOEzXq8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjk1MDE3OnYy", "diffSide": "RIGHT", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/HostResourcesCalculator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTo1MzoyNVrOHqiqGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNjoxNjoxOVrOHqjuvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM3MDA3NA==", "bodyText": "Implementation no longer requires Zone argument", "url": "https://github.com/vespa-engine/vespa/pull/15090#discussion_r514370074", "createdAt": "2020-10-29T15:53:25Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/HostResourcesCalculator.java", "diffHunk": "@@ -34,4 +36,9 @@\n      */\n     NodeResources realToRequest(NodeResources realResources);\n \n+    /**\n+     * Returns the needed thin pool size in base2 Gb.\n+     */\n+    long thinPoolSizeInBase2Gb(Zone zone, NodeType nodeType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31bd8f7ddf34bd305c33a42bf1956d651aff0251"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM4NzY0NA==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/15090#discussion_r514387644", "createdAt": "2020-10-29T16:16:19Z", "author": {"login": "hmusum"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/HostResourcesCalculator.java", "diffHunk": "@@ -34,4 +36,9 @@\n      */\n     NodeResources realToRequest(NodeResources realResources);\n \n+    /**\n+     * Returns the needed thin pool size in base2 Gb.\n+     */\n+    long thinPoolSizeInBase2Gb(Zone zone, NodeType nodeType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM3MDA3NA=="}, "originalCommit": {"oid": "31bd8f7ddf34bd305c33a42bf1956d651aff0251"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzAwNjU2OnYy", "diffSide": "RIGHT", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodeResourceLimits.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNjowNDo0MVrOHqjMyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNjoxNzowNVrOHqjxDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM3ODk1Mw==", "bodyText": "Not sure how we ended up with this (Initially from #13267)... I guess this is the result after dividing by average number of containers on host or something. If so, I guess we need to somehow do something similar for shared hosts in dynamically provisioned zones \ud83d\ude2b", "url": "https://github.com/vespa-engine/vespa/pull/15090#discussion_r514378953", "createdAt": "2020-10-29T16:04:41Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodeResourceLimits.java", "diffHunk": "@@ -75,15 +76,12 @@ private double minAdvertisedDiskGb(NodeResources requested) {\n         return minRealDiskGb() + getThinPoolSize(requested.storageType());\n     }\n \n-    // TODO: Calculate thin pool size instead of hardcoding\n+    // Note: Assumes node type 'host'\n     private long getThinPoolSize(NodeResources.StorageType storageType) {\n-        if (storageType == NodeResources.StorageType.local && zone().getCloud().dynamicProvisioning()) {\n-            if (zone().system() == SystemName.Public)\n-                return 12;\n-            else\n-                return 24;\n-        }\n-        return 4;\n+        if (storageType == NodeResources.StorageType.local && zone().getCloud().dynamicProvisioning())\n+            return nodeRepository.resourcesCalculator().thinPoolSizeInBase2Gb(zone(), NodeType.host);\n+        else\n+            return 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31bd8f7ddf34bd305c33a42bf1956d651aff0251"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM4ODIzNg==", "bodyText": "OK, need to look into that, then", "url": "https://github.com/vespa-engine/vespa/pull/15090#discussion_r514388236", "createdAt": "2020-10-29T16:17:05Z", "author": {"login": "hmusum"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodeResourceLimits.java", "diffHunk": "@@ -75,15 +76,12 @@ private double minAdvertisedDiskGb(NodeResources requested) {\n         return minRealDiskGb() + getThinPoolSize(requested.storageType());\n     }\n \n-    // TODO: Calculate thin pool size instead of hardcoding\n+    // Note: Assumes node type 'host'\n     private long getThinPoolSize(NodeResources.StorageType storageType) {\n-        if (storageType == NodeResources.StorageType.local && zone().getCloud().dynamicProvisioning()) {\n-            if (zone().system() == SystemName.Public)\n-                return 12;\n-            else\n-                return 24;\n-        }\n-        return 4;\n+        if (storageType == NodeResources.StorageType.local && zone().getCloud().dynamicProvisioning())\n+            return nodeRepository.resourcesCalculator().thinPoolSizeInBase2Gb(zone(), NodeType.host);\n+        else\n+            return 4;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM3ODk1Mw=="}, "originalCommit": {"oid": "31bd8f7ddf34bd305c33a42bf1956d651aff0251"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1057, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}