{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NzY0ODcy", "number": 12030, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMDo0Mzo1MFrODclsbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMTo0NjowNlrODcmuCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzA0MzAwOnYy", "diffSide": "RIGHT", "path": "container-search/src/main/java/com/yahoo/search/dispatch/rpc/RpcPing.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMDo0Mzo1MFrOFktIiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMDo1OToxMFrOFktkFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzMjUyMQ==", "bodyText": "better to use finally than to hide Errors", "url": "https://github.com/vespa-engine/vespa/pull/12030#discussion_r374032521", "createdAt": "2020-02-03T10:43:50Z", "author": {"login": "havardpe"}, "path": "container-search/src/main/java/com/yahoo/search/dispatch/rpc/RpcPing.java", "diffHunk": "@@ -33,32 +31,41 @@ public RpcPing(Node node, ClusterMonitor<Node> clusterMonitor, RpcResourcePool r\n     }\n \n     @Override\n-    public Pong call() throws Exception {\n+    public void ping(PongHandler handler) {\n         try {\n-            var queue = new LinkedBlockingQueue<ResponseOrError<ProtobufResponse>>(1);\n-\n-            sendPing(queue);\n-\n-            var responseOrError = queue.poll(clusterMonitor.getConfiguration().getRequestTimeout(), TimeUnit.MILLISECONDS);\n-            if (responseOrError == null) {\n-                return new Pong(ErrorMessage.createNoAnswerWhenPingingNode(\"Timed out waiting for pong from \" + node));\n-            } else if (responseOrError.error().isPresent()) {\n-                return new Pong(ErrorMessage.createBackendCommunicationError(responseOrError.error().get()));\n+            if (node.sendPing()) {\n+                sendPing(handler);\n             }\n+        } catch (RuntimeException e) {\n+            handler.handle(new Pong(\n+                    ErrorMessage.createBackendCommunicationError(\"Exception when pinging \" + node + \": \" + Exceptions.toMessageString(e))));\n+            node.receivePing();\n+        } catch (Throwable throwable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3468dcd4f2185f82eeaceedc30c220cd96aaeb0"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzOTU3NA==", "bodyText": "Take another look, Rewritten to use sequence numbers instead. Simpler and safer.", "url": "https://github.com/vespa-engine/vespa/pull/12030#discussion_r374039574", "createdAt": "2020-02-03T10:59:10Z", "author": {"login": "baldersheim"}, "path": "container-search/src/main/java/com/yahoo/search/dispatch/rpc/RpcPing.java", "diffHunk": "@@ -33,32 +31,41 @@ public RpcPing(Node node, ClusterMonitor<Node> clusterMonitor, RpcResourcePool r\n     }\n \n     @Override\n-    public Pong call() throws Exception {\n+    public void ping(PongHandler handler) {\n         try {\n-            var queue = new LinkedBlockingQueue<ResponseOrError<ProtobufResponse>>(1);\n-\n-            sendPing(queue);\n-\n-            var responseOrError = queue.poll(clusterMonitor.getConfiguration().getRequestTimeout(), TimeUnit.MILLISECONDS);\n-            if (responseOrError == null) {\n-                return new Pong(ErrorMessage.createNoAnswerWhenPingingNode(\"Timed out waiting for pong from \" + node));\n-            } else if (responseOrError.error().isPresent()) {\n-                return new Pong(ErrorMessage.createBackendCommunicationError(responseOrError.error().get()));\n+            if (node.sendPing()) {\n+                sendPing(handler);\n             }\n+        } catch (RuntimeException e) {\n+            handler.handle(new Pong(\n+                    ErrorMessage.createBackendCommunicationError(\"Exception when pinging \" + node + \": \" + Exceptions.toMessageString(e))));\n+            node.receivePing();\n+        } catch (Throwable throwable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzMjUyMQ=="}, "originalCommit": {"oid": "b3468dcd4f2185f82eeaceedc30c220cd96aaeb0"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzA0NDU1OnYy", "diffSide": "RIGHT", "path": "container-search/src/main/java/com/yahoo/search/dispatch/searchcluster/Node.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMDo0NDoyNVrOFktJgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMDo1OToyMVrOFktkZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzMjc2OQ==", "bodyText": "somewhat misleading name", "url": "https://github.com/vespa-engine/vespa/pull/12030#discussion_r374032769", "createdAt": "2020-02-03T10:44:25Z", "author": {"login": "havardpe"}, "path": "container-search/src/main/java/com/yahoo/search/dispatch/searchcluster/Node.java", "diffHunk": "@@ -21,13 +21,20 @@\n     private final AtomicBoolean statusIsKnown = new AtomicBoolean(false);\n     private final AtomicBoolean working = new AtomicBoolean(true);\n     private final AtomicLong activeDocuments = new AtomicLong(0);\n+    private final AtomicBoolean pendingPing = new AtomicBoolean();\n \n     public Node(int key, String hostname, int group) {\n         this.key = key;\n         this.hostname = hostname;\n         this.group = group;\n     }\n \n+    /** Only send ping if this method return true. If not the is a ping outstanding. */\n+    public boolean sendPing() { return ! pendingPing.getAndSet(true); }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3468dcd4f2185f82eeaceedc30c220cd96aaeb0"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzOTY1NA==", "bodyText": "Take another look, Rewritten to use sequence numbers instead. Simpler and safer.", "url": "https://github.com/vespa-engine/vespa/pull/12030#discussion_r374039654", "createdAt": "2020-02-03T10:59:21Z", "author": {"login": "baldersheim"}, "path": "container-search/src/main/java/com/yahoo/search/dispatch/searchcluster/Node.java", "diffHunk": "@@ -21,13 +21,20 @@\n     private final AtomicBoolean statusIsKnown = new AtomicBoolean(false);\n     private final AtomicBoolean working = new AtomicBoolean(true);\n     private final AtomicLong activeDocuments = new AtomicLong(0);\n+    private final AtomicBoolean pendingPing = new AtomicBoolean();\n \n     public Node(int key, String hostname, int group) {\n         this.key = key;\n         this.hostname = hostname;\n         this.group = group;\n     }\n \n+    /** Only send ping if this method return true. If not the is a ping outstanding. */\n+    public boolean sendPing() { return ! pendingPing.getAndSet(true); }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzMjc2OQ=="}, "originalCommit": {"oid": "b3468dcd4f2185f82eeaceedc30c220cd96aaeb0"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzA0NDgyOnYy", "diffSide": "RIGHT", "path": "container-search/src/main/java/com/yahoo/search/dispatch/searchcluster/Node.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMDo0NDozMFrOFktJsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMDo1OTozMFrOFktkqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzMjgxOA==", "bodyText": "somewhat misleading name", "url": "https://github.com/vespa-engine/vespa/pull/12030#discussion_r374032818", "createdAt": "2020-02-03T10:44:30Z", "author": {"login": "havardpe"}, "path": "container-search/src/main/java/com/yahoo/search/dispatch/searchcluster/Node.java", "diffHunk": "@@ -21,13 +21,20 @@\n     private final AtomicBoolean statusIsKnown = new AtomicBoolean(false);\n     private final AtomicBoolean working = new AtomicBoolean(true);\n     private final AtomicLong activeDocuments = new AtomicLong(0);\n+    private final AtomicBoolean pendingPing = new AtomicBoolean();\n \n     public Node(int key, String hostname, int group) {\n         this.key = key;\n         this.hostname = hostname;\n         this.group = group;\n     }\n \n+    /** Only send ping if this method return true. If not the is a ping outstanding. */\n+    public boolean sendPing() { return ! pendingPing.getAndSet(true); }\n+\n+    /** Need to be called when a pong is called to allow next ping to go through. */\n+    public void receivePing() { pendingPing.set(false); }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3468dcd4f2185f82eeaceedc30c220cd96aaeb0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzOTcyMw==", "bodyText": "Take another look, Rewritten to use sequence numbers instead. Simpler and safer.", "url": "https://github.com/vespa-engine/vespa/pull/12030#discussion_r374039723", "createdAt": "2020-02-03T10:59:30Z", "author": {"login": "baldersheim"}, "path": "container-search/src/main/java/com/yahoo/search/dispatch/searchcluster/Node.java", "diffHunk": "@@ -21,13 +21,20 @@\n     private final AtomicBoolean statusIsKnown = new AtomicBoolean(false);\n     private final AtomicBoolean working = new AtomicBoolean(true);\n     private final AtomicLong activeDocuments = new AtomicLong(0);\n+    private final AtomicBoolean pendingPing = new AtomicBoolean();\n \n     public Node(int key, String hostname, int group) {\n         this.key = key;\n         this.hostname = hostname;\n         this.group = group;\n     }\n \n+    /** Only send ping if this method return true. If not the is a ping outstanding. */\n+    public boolean sendPing() { return ! pendingPing.getAndSet(true); }\n+\n+    /** Need to be called when a pong is called to allow next ping to go through. */\n+    public void receivePing() { pendingPing.set(false); }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzMjgxOA=="}, "originalCommit": {"oid": "b3468dcd4f2185f82eeaceedc30c220cd96aaeb0"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzIwMDYxOnYy", "diffSide": "RIGHT", "path": "container-search/src/main/java/com/yahoo/search/dispatch/searchcluster/Node.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMTo0MjoyNVrOFkupAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMjo1MTo1OFrOFkwTnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA1NzIxOA==", "bodyText": "pong?", "url": "https://github.com/vespa-engine/vespa/pull/12030#discussion_r374057218", "createdAt": "2020-02-03T11:42:25Z", "author": {"login": "havardpe"}, "path": "container-search/src/main/java/com/yahoo/search/dispatch/searchcluster/Node.java", "diffHunk": "@@ -21,19 +21,26 @@\n     private final AtomicBoolean statusIsKnown = new AtomicBoolean(false);\n     private final AtomicBoolean working = new AtomicBoolean(true);\n     private final AtomicLong activeDocuments = new AtomicLong(0);\n-    private final AtomicBoolean pendingPing = new AtomicBoolean();\n+    private final AtomicLong pingSequence = new AtomicLong(0);\n+    private final AtomicLong lastPing = new AtomicLong(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e17736281d6e83efc53026fba168a2f0520b6e9"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA4NDUwOA==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/12030#discussion_r374084508", "createdAt": "2020-02-03T12:51:58Z", "author": {"login": "baldersheim"}, "path": "container-search/src/main/java/com/yahoo/search/dispatch/searchcluster/Node.java", "diffHunk": "@@ -21,19 +21,26 @@\n     private final AtomicBoolean statusIsKnown = new AtomicBoolean(false);\n     private final AtomicBoolean working = new AtomicBoolean(true);\n     private final AtomicLong activeDocuments = new AtomicLong(0);\n-    private final AtomicBoolean pendingPing = new AtomicBoolean();\n+    private final AtomicLong pingSequence = new AtomicLong(0);\n+    private final AtomicLong lastPing = new AtomicLong(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA1NzIxOA=="}, "originalCommit": {"oid": "7e17736281d6e83efc53026fba168a2f0520b6e9"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzIxMDk5OnYy", "diffSide": "RIGHT", "path": "container-search/src/main/java/com/yahoo/search/dispatch/searchcluster/Node.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMTo0NjowNlrOFkuu8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMjo1MjoxNVrOFkwUEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA1ODczNg==", "bodyText": "mixing sent and received ping sequence number here seems like a bad idea", "url": "https://github.com/vespa-engine/vespa/pull/12030#discussion_r374058736", "createdAt": "2020-02-03T11:46:06Z", "author": {"login": "havardpe"}, "path": "container-search/src/main/java/com/yahoo/search/dispatch/searchcluster/Node.java", "diffHunk": "@@ -21,19 +21,26 @@\n     private final AtomicBoolean statusIsKnown = new AtomicBoolean(false);\n     private final AtomicBoolean working = new AtomicBoolean(true);\n     private final AtomicLong activeDocuments = new AtomicLong(0);\n-    private final AtomicBoolean pendingPing = new AtomicBoolean();\n+    private final AtomicLong pingSequence = new AtomicLong(0);\n+    private final AtomicLong lastPing = new AtomicLong(0);\n \n     public Node(int key, String hostname, int group) {\n         this.key = key;\n         this.hostname = hostname;\n         this.group = group;\n     }\n \n-    /** Only send ping if this method return true. If not the is a ping outstanding. */\n-    public boolean sendPing() { return ! pendingPing.getAndSet(true); }\n-\n-    /** Need to be called when a pong is called to allow next ping to go through. */\n-    public void receivePing() { pendingPing.set(false); }\n+    /** Give a monotonically increasing sequence number.*/\n+    public long createPingSequenceId() { return pingSequence.incrementAndGet(); }\n+    /** Checks if this pong is received in line and accepted, or out of band and should be ignored..*/\n+    public boolean isLastReceivedPong(long pingId ) {\n+        long last = lastPing.get();\n+        while ((pingId > last) && ! lastPing.compareAndSet(last, pingId)) {\n+            last = pingSequence.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e17736281d6e83efc53026fba168a2f0520b6e9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA4NDYyNA==", "bodyText": "Fixed.", "url": "https://github.com/vespa-engine/vespa/pull/12030#discussion_r374084624", "createdAt": "2020-02-03T12:52:15Z", "author": {"login": "baldersheim"}, "path": "container-search/src/main/java/com/yahoo/search/dispatch/searchcluster/Node.java", "diffHunk": "@@ -21,19 +21,26 @@\n     private final AtomicBoolean statusIsKnown = new AtomicBoolean(false);\n     private final AtomicBoolean working = new AtomicBoolean(true);\n     private final AtomicLong activeDocuments = new AtomicLong(0);\n-    private final AtomicBoolean pendingPing = new AtomicBoolean();\n+    private final AtomicLong pingSequence = new AtomicLong(0);\n+    private final AtomicLong lastPing = new AtomicLong(0);\n \n     public Node(int key, String hostname, int group) {\n         this.key = key;\n         this.hostname = hostname;\n         this.group = group;\n     }\n \n-    /** Only send ping if this method return true. If not the is a ping outstanding. */\n-    public boolean sendPing() { return ! pendingPing.getAndSet(true); }\n-\n-    /** Need to be called when a pong is called to allow next ping to go through. */\n-    public void receivePing() { pendingPing.set(false); }\n+    /** Give a monotonically increasing sequence number.*/\n+    public long createPingSequenceId() { return pingSequence.incrementAndGet(); }\n+    /** Checks if this pong is received in line and accepted, or out of band and should be ignored..*/\n+    public boolean isLastReceivedPong(long pingId ) {\n+        long last = lastPing.get();\n+        while ((pingId > last) && ! lastPing.compareAndSet(last, pingId)) {\n+            last = pingSequence.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA1ODczNg=="}, "originalCommit": {"oid": "7e17736281d6e83efc53026fba168a2f0520b6e9"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2575, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}