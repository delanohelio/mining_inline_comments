{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NTAwNDE4", "number": 11877, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOTo1Nzo0MlrODZxY2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMjo0Nzo0NFrODZ0ZWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzUwMTcxOnYy", "diffSide": "RIGHT", "path": "vespalib/src/tests/stllike/string_test.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOTo1Nzo0MlrOFgWRkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDoyMDozOVrOFgdvcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ2MzY5OQ==", "bodyText": "Nit: \"inthe\" -> \"in the\"", "url": "https://github.com/vespa-engine/vespa/pull/11877#discussion_r369463699", "createdAt": "2020-01-22T09:57:42Z", "author": {"login": "vekterli"}, "path": "vespalib/src/tests/stllike/string_test.cpp", "diffHunk": "@@ -60,6 +60,43 @@ TEST(\"test self assignment of big string\") {\n     EXPECT_EQUAL(text, s);\n }\n \n+void verify_move_constructor(string org) {\n+    string copy(org);\n+    EXPECT_EQUAL(org, copy);\n+    string moved_into(std::move(copy));\n+    EXPECT_EQUAL(org, moved_into);\n+    EXPECT_NOT_EQUAL(org, copy);\n+    EXPECT_EQUAL(string(), copy);\n+}\n+\n+void verify_move_operator(string org) {\n+    string copy(org);\n+    EXPECT_EQUAL(org, copy);\n+    string moved_into_short(\"short movable string\");\n+    EXPECT_NOT_EQUAL(org, moved_into_short);\n+    moved_into_short = std::move(copy);\n+    EXPECT_EQUAL(org, moved_into_short);\n+    EXPECT_NOT_EQUAL(org, copy);\n+    EXPECT_EQUAL(string(), copy);\n+\n+    string moved_into_long(\"longer movable string than the 47 bytes that can be held inthe short string optimization.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0d7ecc0cc0644320518b1c4ff90ef2bb2c8b000"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU4NjAzNQ==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/11877#discussion_r369586035", "createdAt": "2020-01-22T14:20:39Z", "author": {"login": "baldersheim"}, "path": "vespalib/src/tests/stllike/string_test.cpp", "diffHunk": "@@ -60,6 +60,43 @@ TEST(\"test self assignment of big string\") {\n     EXPECT_EQUAL(text, s);\n }\n \n+void verify_move_constructor(string org) {\n+    string copy(org);\n+    EXPECT_EQUAL(org, copy);\n+    string moved_into(std::move(copy));\n+    EXPECT_EQUAL(org, moved_into);\n+    EXPECT_NOT_EQUAL(org, copy);\n+    EXPECT_EQUAL(string(), copy);\n+}\n+\n+void verify_move_operator(string org) {\n+    string copy(org);\n+    EXPECT_EQUAL(org, copy);\n+    string moved_into_short(\"short movable string\");\n+    EXPECT_NOT_EQUAL(org, moved_into_short);\n+    moved_into_short = std::move(copy);\n+    EXPECT_EQUAL(org, moved_into_short);\n+    EXPECT_NOT_EQUAL(org, copy);\n+    EXPECT_EQUAL(string(), copy);\n+\n+    string moved_into_long(\"longer movable string than the 47 bytes that can be held inthe short string optimization.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ2MzY5OQ=="}, "originalCommit": {"oid": "c0d7ecc0cc0644320518b1c4ff90ef2bb2c8b000"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzUwMjM4OnYy", "diffSide": "RIGHT", "path": "vespalib/src/tests/stllike/string_test.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOTo1Nzo1NFrOFgWR-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDoyMDo0OVrOFgdv1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ2MzgwMw==", "bodyText": "Nit: \"inthe\" -> \"in the\"", "url": "https://github.com/vespa-engine/vespa/pull/11877#discussion_r369463803", "createdAt": "2020-01-22T09:57:54Z", "author": {"login": "vekterli"}, "path": "vespalib/src/tests/stllike/string_test.cpp", "diffHunk": "@@ -60,6 +60,43 @@ TEST(\"test self assignment of big string\") {\n     EXPECT_EQUAL(text, s);\n }\n \n+void verify_move_constructor(string org) {\n+    string copy(org);\n+    EXPECT_EQUAL(org, copy);\n+    string moved_into(std::move(copy));\n+    EXPECT_EQUAL(org, moved_into);\n+    EXPECT_NOT_EQUAL(org, copy);\n+    EXPECT_EQUAL(string(), copy);\n+}\n+\n+void verify_move_operator(string org) {\n+    string copy(org);\n+    EXPECT_EQUAL(org, copy);\n+    string moved_into_short(\"short movable string\");\n+    EXPECT_NOT_EQUAL(org, moved_into_short);\n+    moved_into_short = std::move(copy);\n+    EXPECT_EQUAL(org, moved_into_short);\n+    EXPECT_NOT_EQUAL(org, copy);\n+    EXPECT_EQUAL(string(), copy);\n+\n+    string moved_into_long(\"longer movable string than the 47 bytes that can be held inthe short string optimization.\");\n+    EXPECT_NOT_EQUAL(org, moved_into_long);\n+    moved_into_long = std::move(moved_into_short);\n+    EXPECT_EQUAL(org, moved_into_long);\n+    EXPECT_NOT_EQUAL(org, moved_into_short);\n+    EXPECT_EQUAL(string(), moved_into_short);\n+}\n+\n+void verify_move(string org) {\n+    verify_move_constructor(org);\n+    verify_move_operator(org);\n+}\n+\n+TEST(\"test move constructor\") {\n+    TEST_DO(verify_move(\"short string\"));\n+    TEST_DO(verify_move(\"longer string than the 47 bytes that can be held inthe short string optimization.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0d7ecc0cc0644320518b1c4ff90ef2bb2c8b000"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU4NjEzNA==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/11877#discussion_r369586134", "createdAt": "2020-01-22T14:20:49Z", "author": {"login": "baldersheim"}, "path": "vespalib/src/tests/stllike/string_test.cpp", "diffHunk": "@@ -60,6 +60,43 @@ TEST(\"test self assignment of big string\") {\n     EXPECT_EQUAL(text, s);\n }\n \n+void verify_move_constructor(string org) {\n+    string copy(org);\n+    EXPECT_EQUAL(org, copy);\n+    string moved_into(std::move(copy));\n+    EXPECT_EQUAL(org, moved_into);\n+    EXPECT_NOT_EQUAL(org, copy);\n+    EXPECT_EQUAL(string(), copy);\n+}\n+\n+void verify_move_operator(string org) {\n+    string copy(org);\n+    EXPECT_EQUAL(org, copy);\n+    string moved_into_short(\"short movable string\");\n+    EXPECT_NOT_EQUAL(org, moved_into_short);\n+    moved_into_short = std::move(copy);\n+    EXPECT_EQUAL(org, moved_into_short);\n+    EXPECT_NOT_EQUAL(org, copy);\n+    EXPECT_EQUAL(string(), copy);\n+\n+    string moved_into_long(\"longer movable string than the 47 bytes that can be held inthe short string optimization.\");\n+    EXPECT_NOT_EQUAL(org, moved_into_long);\n+    moved_into_long = std::move(moved_into_short);\n+    EXPECT_EQUAL(org, moved_into_long);\n+    EXPECT_NOT_EQUAL(org, moved_into_short);\n+    EXPECT_EQUAL(string(), moved_into_short);\n+}\n+\n+void verify_move(string org) {\n+    verify_move_constructor(org);\n+    verify_move_operator(org);\n+}\n+\n+TEST(\"test move constructor\") {\n+    TEST_DO(verify_move(\"short string\"));\n+    TEST_DO(verify_move(\"longer string than the 47 bytes that can be held inthe short string optimization.\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ2MzgwMw=="}, "originalCommit": {"oid": "c0d7ecc0cc0644320518b1c4ff90ef2bb2c8b000"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzU4Nzg3OnYy", "diffSide": "RIGHT", "path": "vespalib/src/tests/stllike/string_test.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDoyMjo0MFrOFgXEpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDoyNToyM1rOFgd7Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ3Njc3Mw==", "bodyText": "Perhaps a bit overkill, but could add an explicit sanity check that the long string is in fact longer than the small string optimization capacity of the small_string type. Something like\ntemplate <typename T> struct small_string_inplace_capacity;\ntemplate <uint32_t N> struct small_string_inplace_capacity<small_string<N>> {\n    constexpr static size_t size = N;\n};\nEXPECT_GREATER(moved_into_long.size(), small_string_inplace_capacity<string>::size);\nand vice versa for the string expected to be smaller than the small string capacity.\n(or just use something like string().capacity() if it reflects the small string buffer size)", "url": "https://github.com/vespa-engine/vespa/pull/11877#discussion_r369476773", "createdAt": "2020-01-22T10:22:40Z", "author": {"login": "vekterli"}, "path": "vespalib/src/tests/stllike/string_test.cpp", "diffHunk": "@@ -60,6 +60,43 @@ TEST(\"test self assignment of big string\") {\n     EXPECT_EQUAL(text, s);\n }\n \n+void verify_move_constructor(string org) {\n+    string copy(org);\n+    EXPECT_EQUAL(org, copy);\n+    string moved_into(std::move(copy));\n+    EXPECT_EQUAL(org, moved_into);\n+    EXPECT_NOT_EQUAL(org, copy);\n+    EXPECT_EQUAL(string(), copy);\n+}\n+\n+void verify_move_operator(string org) {\n+    string copy(org);\n+    EXPECT_EQUAL(org, copy);\n+    string moved_into_short(\"short movable string\");\n+    EXPECT_NOT_EQUAL(org, moved_into_short);\n+    moved_into_short = std::move(copy);\n+    EXPECT_EQUAL(org, moved_into_short);\n+    EXPECT_NOT_EQUAL(org, copy);\n+    EXPECT_EQUAL(string(), copy);\n+\n+    string moved_into_long(\"longer movable string than the 47 bytes that can be held inthe short string optimization.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0d7ecc0cc0644320518b1c4ff90ef2bb2c8b000"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU4OTAxOQ==", "bodyText": "Fixed, latter solution.", "url": "https://github.com/vespa-engine/vespa/pull/11877#discussion_r369589019", "createdAt": "2020-01-22T14:25:23Z", "author": {"login": "baldersheim"}, "path": "vespalib/src/tests/stllike/string_test.cpp", "diffHunk": "@@ -60,6 +60,43 @@ TEST(\"test self assignment of big string\") {\n     EXPECT_EQUAL(text, s);\n }\n \n+void verify_move_constructor(string org) {\n+    string copy(org);\n+    EXPECT_EQUAL(org, copy);\n+    string moved_into(std::move(copy));\n+    EXPECT_EQUAL(org, moved_into);\n+    EXPECT_NOT_EQUAL(org, copy);\n+    EXPECT_EQUAL(string(), copy);\n+}\n+\n+void verify_move_operator(string org) {\n+    string copy(org);\n+    EXPECT_EQUAL(org, copy);\n+    string moved_into_short(\"short movable string\");\n+    EXPECT_NOT_EQUAL(org, moved_into_short);\n+    moved_into_short = std::move(copy);\n+    EXPECT_EQUAL(org, moved_into_short);\n+    EXPECT_NOT_EQUAL(org, copy);\n+    EXPECT_EQUAL(string(), copy);\n+\n+    string moved_into_long(\"longer movable string than the 47 bytes that can be held inthe short string optimization.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ3Njc3Mw=="}, "originalCommit": {"oid": "c0d7ecc0cc0644320518b1c4ff90ef2bb2c8b000"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4Mzk4NjkxOnYy", "diffSide": "RIGHT", "path": "vespalib/src/vespa/vespalib/stllike/string.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMjo0NTowOFrOFga0rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDoyNjoxNFrOFgd9Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUzODIyMA==", "bodyText": "assign-style functions are less commonly noexcept since it's expected that the underlying allocation may throw. Since we're running under vespamalloc this shouldn't be a problem (process gets killed instead, which is much easier to reason about), but just a general observation.", "url": "https://github.com/vespa-engine/vespa/pull/11877#discussion_r369538220", "createdAt": "2020-01-22T12:45:08Z", "author": {"login": "vekterli"}, "path": "vespalib/src/vespa/vespalib/stllike/string.h", "diffHunk": "@@ -315,12 +349,12 @@ class small_string\n         const char *found = (const char *)memchr(buf, c, _sz-start);\n         return (found != NULL) ? (found - buffer()) : (size_type)npos;\n     }\n-    small_string & assign(const char * s) { return assign(s, strlen(s)); }\n-    small_string & assign(const void * s, size_type sz);\n-    small_string & assign(stringref s, size_type pos, size_type sz) {\n+    small_string & assign(const char * s) noexcept { return assign(s, strlen(s)); }\n+    small_string & assign(const void * s, size_type sz) noexcept;\n+    small_string & assign(stringref s, size_type pos, size_type sz) noexcept {\n         return assign(s.data() + pos, sz);\n     }\n-    small_string & assign(stringref rhs) {\n+    small_string & assign(stringref rhs) noexcept {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0d7ecc0cc0644320518b1c4ff90ef2bb2c8b000"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU4OTU4Mw==", "bodyText": "Agree, but added noexcept for the same reason as you gave here.", "url": "https://github.com/vespa-engine/vespa/pull/11877#discussion_r369589583", "createdAt": "2020-01-22T14:26:14Z", "author": {"login": "baldersheim"}, "path": "vespalib/src/vespa/vespalib/stllike/string.h", "diffHunk": "@@ -315,12 +349,12 @@ class small_string\n         const char *found = (const char *)memchr(buf, c, _sz-start);\n         return (found != NULL) ? (found - buffer()) : (size_type)npos;\n     }\n-    small_string & assign(const char * s) { return assign(s, strlen(s)); }\n-    small_string & assign(const void * s, size_type sz);\n-    small_string & assign(stringref s, size_type pos, size_type sz) {\n+    small_string & assign(const char * s) noexcept { return assign(s, strlen(s)); }\n+    small_string & assign(const void * s, size_type sz) noexcept;\n+    small_string & assign(stringref s, size_type pos, size_type sz) noexcept {\n         return assign(s.data() + pos, sz);\n     }\n-    small_string & assign(stringref rhs) {\n+    small_string & assign(stringref rhs) noexcept {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUzODIyMA=="}, "originalCommit": {"oid": "c0d7ecc0cc0644320518b1c4ff90ef2bb2c8b000"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4Mzk5NDQ4OnYy", "diffSide": "RIGHT", "path": "vespalib/src/vespa/vespalib/stllike/string.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMjo0Nzo0NFrOFga5Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDozMDoyNVrOFgeHsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUzOTM1NA==", "bodyText": "Could consider factoring out the shared code between the move ctor and move assignment operator into a separate function", "url": "https://github.com/vespa-engine/vespa/pull/11877#discussion_r369539354", "createdAt": "2020-01-22T12:47:44Z", "author": {"login": "vekterli"}, "path": "vespalib/src/vespa/vespalib/stllike/string.h", "diffHunk": "@@ -200,7 +216,25 @@ class small_string\n             free(buffer());\n         }\n     }\n-    small_string& operator= (const small_string &rhs) {\n+    small_string& operator= (small_string && rhs) noexcept {\n+        reset();\n+        _sz = rhs._sz;\n+        _bufferSize = rhs._bufferSize;\n+        if (rhs.isAllocated()) {\n+            _buf = rhs._buf;\n+            rhs._buf = rhs._stack;\n+            rhs._sz = 0;\n+            rhs._bufferSize = sizeof(rhs._stack);\n+            rhs._stack[0] = 0;\n+        } else {\n+            _buf = _stack;\n+            memcpy(_stack, rhs._stack, sizeof(_stack));\n+            rhs._sz = 0;\n+            rhs._stack[0] = 0;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0d7ecc0cc0644320518b1c4ff90ef2bb2c8b000"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU5MjI0Mw==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/11877#discussion_r369592243", "createdAt": "2020-01-22T14:30:25Z", "author": {"login": "baldersheim"}, "path": "vespalib/src/vespa/vespalib/stllike/string.h", "diffHunk": "@@ -200,7 +216,25 @@ class small_string\n             free(buffer());\n         }\n     }\n-    small_string& operator= (const small_string &rhs) {\n+    small_string& operator= (small_string && rhs) noexcept {\n+        reset();\n+        _sz = rhs._sz;\n+        _bufferSize = rhs._bufferSize;\n+        if (rhs.isAllocated()) {\n+            _buf = rhs._buf;\n+            rhs._buf = rhs._stack;\n+            rhs._sz = 0;\n+            rhs._bufferSize = sizeof(rhs._stack);\n+            rhs._stack[0] = 0;\n+        } else {\n+            _buf = _stack;\n+            memcpy(_stack, rhs._stack, sizeof(_stack));\n+            rhs._sz = 0;\n+            rhs._stack[0] = 0;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUzOTM1NA=="}, "originalCommit": {"oid": "c0d7ecc0cc0644320518b1c4ff90ef2bb2c8b000"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2607, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}