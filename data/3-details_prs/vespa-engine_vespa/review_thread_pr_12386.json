{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNjM3MTMw", "number": 12386, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxNDo0NTowMlrODkBqPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxNDo0ODozMVrODkBq6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTAyNTI1OnYy", "diffSide": "RIGHT", "path": "service-monitor/src/main/java/com/yahoo/vespa/service/duper/DuperModel.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxNDo0NTowMlrOFwJj_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMzo1NTo1MFrOFwOS2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzMjYzNg==", "bodyText": "Most of the time oldHostnames and hostnames will be equal, maybe consider adding optimization to skip all that removal and addition if that is the case?", "url": "https://github.com/vespa-engine/vespa/pull/12386#discussion_r386032636", "createdAt": "2020-02-29T14:45:02Z", "author": {"login": "freva"}, "path": "service-monitor/src/main/java/com/yahoo/vespa/service/duper/DuperModel.java", "diffHunk": "@@ -20,37 +25,90 @@\n public class DuperModel {\n     private static Logger logger = Logger.getLogger(DuperModel.class.getName());\n \n-    private final Map<ApplicationId, ApplicationInfo> applications = new TreeMap<>();\n+    private final Map<ApplicationId, ApplicationInfo> applicationsById = new HashMap<>();\n+    private final Map<HostName, ApplicationInfo> applicationsByHostname = new HashMap<>();\n+    private final Map<ApplicationId, Set<HostName>> hostnamesById = new HashMap<>();\n+\n     private final List<DuperModelListener> listeners = new ArrayList<>();\n     private boolean isComplete = false;\n \n     public void registerListener(DuperModelListener listener) {\n-        applications.values().forEach(listener::applicationActivated);\n+        applicationsById.values().forEach(listener::applicationActivated);\n         listeners.add(listener);\n     }\n \n-    public void setCompleteness(boolean isComplete) { this.isComplete = isComplete; }\n+    void setComplete() {\n+        if (!isComplete) {\n+            logger.log(LogLevel.INFO, \"Bootstrap done - duper model is complete\");\n+            isComplete = true;\n+\n+            listeners.forEach(DuperModelListener::bootstrapComplete);\n+        }\n+    }\n+\n     public boolean isComplete() { return isComplete; }\n \n+    public int numberOfApplications() {\n+        return applicationsById.size();\n+    }\n+\n+    public int numberOfHosts() {\n+        return applicationsByHostname.size();\n+    }\n+\n     public boolean contains(ApplicationId applicationId) {\n-        return applications.containsKey(applicationId);\n+        return applicationsById.containsKey(applicationId);\n+    }\n+\n+    public Optional<ApplicationInfo> getApplicationInfo(ApplicationId applicationId) {\n+        return Optional.ofNullable(applicationsById.get(applicationId));\n+    }\n+\n+    public Optional<ApplicationInfo> getApplicationInfo(HostName hostName) {\n+        return Optional.ofNullable(applicationsByHostname.get(hostName));\n+    }\n+\n+    public List<ApplicationInfo> getApplicationInfos() {\n+        return List.copyOf(applicationsById.values());\n     }\n \n     public void add(ApplicationInfo applicationInfo) {\n-        applications.put(applicationInfo.getApplicationId(), applicationInfo);\n-        logger.log(LogLevel.DEBUG, \"Added \" + applicationInfo.getApplicationId());\n+        ApplicationInfo oldApplicationInfo = applicationsById.put(applicationInfo.getApplicationId(), applicationInfo);\n+\n+        final String logPrefix;\n+        if (oldApplicationInfo == null) {\n+            logPrefix = isComplete ? \"New application \" : \"Bootstrapped application \";\n+        } else {\n+            logPrefix = isComplete ? \"Reactivated application \" : \"Rebootstrapped application \";\n+        }\n+        logger.log(LogLevel.INFO, logPrefix + applicationInfo.getApplicationId());\n+\n+        Set<HostName> oldHostnames = hostnamesById.remove(applicationInfo.getApplicationId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "801dd522bc2c38a35da62f3d5798b5acc4235877"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2MTcxNQ==", "bodyText": "Something like the following?\n        HashSet<HostName> hostnames = hostnamesById\n                .computeIfAbsent(applicationInfo.getApplicationId(), k -> new HashSet<>());\n\n        Set<HostName> newHostnames;\n        Set<HostName> removedHostnames;\n        {\n            newHostnames = applicationInfo.getModel().getHosts().stream()\n                    .map(HostInfo::getHostname)\n                    .map(HostName::from)\n                    .collect(Collectors.toCollection(HashSet::new));\n\n            removedHostnames = new HashSet<>(hostnames);\n            removedHostnames.removeAll(newHostnames);\n\n            newHostnames.removeAll(hostnames);\n        }\n\n        // These corrects applicationById\n        hostnames.removeAll(removedHostnames);\n        hostnames.addAll(newHostnames);\n\n        // These corrects applicationByHostname\n        removedHostnames.forEach(applicationsByHostname::remove);\n        newHostnames.forEach(hostname -> applicationsByHostname.put(hostname, applicationInfo));\n\nThis will create more objects (1 additional HashSet) and will have one additional O(n) operation (removeAll) compared to current.\nIn addition, I would have to make applicationsByHostname map to ApplicationId instead of ApplicationInfo, otherwise unchanged hostnames may point to old ApplicationInfo. Which would incur a double map lookup to get ApplicationInfo instead of a single lookup.", "url": "https://github.com/vespa-engine/vespa/pull/12386#discussion_r386061715", "createdAt": "2020-02-29T23:01:25Z", "author": {"login": "hakonhall"}, "path": "service-monitor/src/main/java/com/yahoo/vespa/service/duper/DuperModel.java", "diffHunk": "@@ -20,37 +25,90 @@\n public class DuperModel {\n     private static Logger logger = Logger.getLogger(DuperModel.class.getName());\n \n-    private final Map<ApplicationId, ApplicationInfo> applications = new TreeMap<>();\n+    private final Map<ApplicationId, ApplicationInfo> applicationsById = new HashMap<>();\n+    private final Map<HostName, ApplicationInfo> applicationsByHostname = new HashMap<>();\n+    private final Map<ApplicationId, Set<HostName>> hostnamesById = new HashMap<>();\n+\n     private final List<DuperModelListener> listeners = new ArrayList<>();\n     private boolean isComplete = false;\n \n     public void registerListener(DuperModelListener listener) {\n-        applications.values().forEach(listener::applicationActivated);\n+        applicationsById.values().forEach(listener::applicationActivated);\n         listeners.add(listener);\n     }\n \n-    public void setCompleteness(boolean isComplete) { this.isComplete = isComplete; }\n+    void setComplete() {\n+        if (!isComplete) {\n+            logger.log(LogLevel.INFO, \"Bootstrap done - duper model is complete\");\n+            isComplete = true;\n+\n+            listeners.forEach(DuperModelListener::bootstrapComplete);\n+        }\n+    }\n+\n     public boolean isComplete() { return isComplete; }\n \n+    public int numberOfApplications() {\n+        return applicationsById.size();\n+    }\n+\n+    public int numberOfHosts() {\n+        return applicationsByHostname.size();\n+    }\n+\n     public boolean contains(ApplicationId applicationId) {\n-        return applications.containsKey(applicationId);\n+        return applicationsById.containsKey(applicationId);\n+    }\n+\n+    public Optional<ApplicationInfo> getApplicationInfo(ApplicationId applicationId) {\n+        return Optional.ofNullable(applicationsById.get(applicationId));\n+    }\n+\n+    public Optional<ApplicationInfo> getApplicationInfo(HostName hostName) {\n+        return Optional.ofNullable(applicationsByHostname.get(hostName));\n+    }\n+\n+    public List<ApplicationInfo> getApplicationInfos() {\n+        return List.copyOf(applicationsById.values());\n     }\n \n     public void add(ApplicationInfo applicationInfo) {\n-        applications.put(applicationInfo.getApplicationId(), applicationInfo);\n-        logger.log(LogLevel.DEBUG, \"Added \" + applicationInfo.getApplicationId());\n+        ApplicationInfo oldApplicationInfo = applicationsById.put(applicationInfo.getApplicationId(), applicationInfo);\n+\n+        final String logPrefix;\n+        if (oldApplicationInfo == null) {\n+            logPrefix = isComplete ? \"New application \" : \"Bootstrapped application \";\n+        } else {\n+            logPrefix = isComplete ? \"Reactivated application \" : \"Rebootstrapped application \";\n+        }\n+        logger.log(LogLevel.INFO, logPrefix + applicationInfo.getApplicationId());\n+\n+        Set<HostName> oldHostnames = hostnamesById.remove(applicationInfo.getApplicationId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzMjYzNg=="}, "originalCommit": {"oid": "801dd522bc2c38a35da62f3d5798b5acc4235877"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MDkxOA==", "bodyText": "No, I was thinking something like this:\n        Set<HostName> oldHostnames = hostnamesById.get(applicationInfo.getApplicationId());\n        Set<HostName> hostnames = applicationInfo.getModel().getHosts().stream()\n                .map(HostInfo::getHostname)\n                .map(HostName::from)\n                .collect(Collectors.toSet());\n\n        if (!Objects.equals(oldHostnames, hostnames)) {\n            if (oldHostnames != null) {\n                oldHostnames.forEach(applicationsByHostname::remove);\n            }\n\n            hostnamesById.put(applicationInfo.getApplicationId(), hostnames);\n            hostnames.forEach(hostname -> applicationsByHostname.put(hostname, applicationInfo));\n        }", "url": "https://github.com/vespa-engine/vespa/pull/12386#discussion_r386090918", "createdAt": "2020-03-01T09:15:47Z", "author": {"login": "freva"}, "path": "service-monitor/src/main/java/com/yahoo/vespa/service/duper/DuperModel.java", "diffHunk": "@@ -20,37 +25,90 @@\n public class DuperModel {\n     private static Logger logger = Logger.getLogger(DuperModel.class.getName());\n \n-    private final Map<ApplicationId, ApplicationInfo> applications = new TreeMap<>();\n+    private final Map<ApplicationId, ApplicationInfo> applicationsById = new HashMap<>();\n+    private final Map<HostName, ApplicationInfo> applicationsByHostname = new HashMap<>();\n+    private final Map<ApplicationId, Set<HostName>> hostnamesById = new HashMap<>();\n+\n     private final List<DuperModelListener> listeners = new ArrayList<>();\n     private boolean isComplete = false;\n \n     public void registerListener(DuperModelListener listener) {\n-        applications.values().forEach(listener::applicationActivated);\n+        applicationsById.values().forEach(listener::applicationActivated);\n         listeners.add(listener);\n     }\n \n-    public void setCompleteness(boolean isComplete) { this.isComplete = isComplete; }\n+    void setComplete() {\n+        if (!isComplete) {\n+            logger.log(LogLevel.INFO, \"Bootstrap done - duper model is complete\");\n+            isComplete = true;\n+\n+            listeners.forEach(DuperModelListener::bootstrapComplete);\n+        }\n+    }\n+\n     public boolean isComplete() { return isComplete; }\n \n+    public int numberOfApplications() {\n+        return applicationsById.size();\n+    }\n+\n+    public int numberOfHosts() {\n+        return applicationsByHostname.size();\n+    }\n+\n     public boolean contains(ApplicationId applicationId) {\n-        return applications.containsKey(applicationId);\n+        return applicationsById.containsKey(applicationId);\n+    }\n+\n+    public Optional<ApplicationInfo> getApplicationInfo(ApplicationId applicationId) {\n+        return Optional.ofNullable(applicationsById.get(applicationId));\n+    }\n+\n+    public Optional<ApplicationInfo> getApplicationInfo(HostName hostName) {\n+        return Optional.ofNullable(applicationsByHostname.get(hostName));\n+    }\n+\n+    public List<ApplicationInfo> getApplicationInfos() {\n+        return List.copyOf(applicationsById.values());\n     }\n \n     public void add(ApplicationInfo applicationInfo) {\n-        applications.put(applicationInfo.getApplicationId(), applicationInfo);\n-        logger.log(LogLevel.DEBUG, \"Added \" + applicationInfo.getApplicationId());\n+        ApplicationInfo oldApplicationInfo = applicationsById.put(applicationInfo.getApplicationId(), applicationInfo);\n+\n+        final String logPrefix;\n+        if (oldApplicationInfo == null) {\n+            logPrefix = isComplete ? \"New application \" : \"Bootstrapped application \";\n+        } else {\n+            logPrefix = isComplete ? \"Reactivated application \" : \"Rebootstrapped application \";\n+        }\n+        logger.log(LogLevel.INFO, logPrefix + applicationInfo.getApplicationId());\n+\n+        Set<HostName> oldHostnames = hostnamesById.remove(applicationInfo.getApplicationId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzMjYzNg=="}, "originalCommit": {"oid": "801dd522bc2c38a35da62f3d5798b5acc4235877"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjExMDE2OA==", "bodyText": "I now have a version I think is just as effective in the no-change case, but also performs well in the other cases. I have also added a log warning on duplicate host allocation.", "url": "https://github.com/vespa-engine/vespa/pull/12386#discussion_r386110168", "createdAt": "2020-03-01T13:55:50Z", "author": {"login": "hakonhall"}, "path": "service-monitor/src/main/java/com/yahoo/vespa/service/duper/DuperModel.java", "diffHunk": "@@ -20,37 +25,90 @@\n public class DuperModel {\n     private static Logger logger = Logger.getLogger(DuperModel.class.getName());\n \n-    private final Map<ApplicationId, ApplicationInfo> applications = new TreeMap<>();\n+    private final Map<ApplicationId, ApplicationInfo> applicationsById = new HashMap<>();\n+    private final Map<HostName, ApplicationInfo> applicationsByHostname = new HashMap<>();\n+    private final Map<ApplicationId, Set<HostName>> hostnamesById = new HashMap<>();\n+\n     private final List<DuperModelListener> listeners = new ArrayList<>();\n     private boolean isComplete = false;\n \n     public void registerListener(DuperModelListener listener) {\n-        applications.values().forEach(listener::applicationActivated);\n+        applicationsById.values().forEach(listener::applicationActivated);\n         listeners.add(listener);\n     }\n \n-    public void setCompleteness(boolean isComplete) { this.isComplete = isComplete; }\n+    void setComplete() {\n+        if (!isComplete) {\n+            logger.log(LogLevel.INFO, \"Bootstrap done - duper model is complete\");\n+            isComplete = true;\n+\n+            listeners.forEach(DuperModelListener::bootstrapComplete);\n+        }\n+    }\n+\n     public boolean isComplete() { return isComplete; }\n \n+    public int numberOfApplications() {\n+        return applicationsById.size();\n+    }\n+\n+    public int numberOfHosts() {\n+        return applicationsByHostname.size();\n+    }\n+\n     public boolean contains(ApplicationId applicationId) {\n-        return applications.containsKey(applicationId);\n+        return applicationsById.containsKey(applicationId);\n+    }\n+\n+    public Optional<ApplicationInfo> getApplicationInfo(ApplicationId applicationId) {\n+        return Optional.ofNullable(applicationsById.get(applicationId));\n+    }\n+\n+    public Optional<ApplicationInfo> getApplicationInfo(HostName hostName) {\n+        return Optional.ofNullable(applicationsByHostname.get(hostName));\n+    }\n+\n+    public List<ApplicationInfo> getApplicationInfos() {\n+        return List.copyOf(applicationsById.values());\n     }\n \n     public void add(ApplicationInfo applicationInfo) {\n-        applications.put(applicationInfo.getApplicationId(), applicationInfo);\n-        logger.log(LogLevel.DEBUG, \"Added \" + applicationInfo.getApplicationId());\n+        ApplicationInfo oldApplicationInfo = applicationsById.put(applicationInfo.getApplicationId(), applicationInfo);\n+\n+        final String logPrefix;\n+        if (oldApplicationInfo == null) {\n+            logPrefix = isComplete ? \"New application \" : \"Bootstrapped application \";\n+        } else {\n+            logPrefix = isComplete ? \"Reactivated application \" : \"Rebootstrapped application \";\n+        }\n+        logger.log(LogLevel.INFO, logPrefix + applicationInfo.getApplicationId());\n+\n+        Set<HostName> oldHostnames = hostnamesById.remove(applicationInfo.getApplicationId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzMjYzNg=="}, "originalCommit": {"oid": "801dd522bc2c38a35da62f3d5798b5acc4235877"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTAyNjk3OnYy", "diffSide": "RIGHT", "path": "service-monitor/src/main/java/com/yahoo/vespa/service/model/ApplicationInstanceGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxNDo0ODozMVrOFwJk1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxNDo0ODozMVrOFwJk1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzMjg1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static ApplicationId configServerApplicationId = new ConfigServerApplication().getApplicationId();\n          \n          \n            \n                private static final ApplicationId configServerApplicationId = new ConfigServerApplication().getApplicationId();", "url": "https://github.com/vespa-engine/vespa/pull/12386#discussion_r386032854", "createdAt": "2020-02-29T14:48:31Z", "author": {"login": "freva"}, "path": "service-monitor/src/main/java/com/yahoo/vespa/service/model/ApplicationInstanceGenerator.java", "diffHunk": "@@ -37,23 +43,73 @@\n \n     private final ApplicationInfo applicationInfo;\n     private final Zone zone;\n-    private ApplicationId configServerApplicationId;\n+\n+    // This is cheating a bit, but we don't expect DuperModel's config server application ID to be different.\n+    // We do this to avoid passing through the ID through multiple levels.\n+    private static ApplicationId configServerApplicationId = new ConfigServerApplication().getApplicationId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "801dd522bc2c38a35da62f3d5798b5acc4235877"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2386, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}