{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNzE2OTk2", "number": 13328, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzozNjozMlrOD-OHzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzo0Mjo0OFrOD-OUEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTY5Njc4OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/fef/phrase_splitter_query_env.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzozNjozMlrOGYMBrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzozNjozMlrOGYMBrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAxNjA0NA==", "bodyText": "field -> fieldId", "url": "https://github.com/vespa-engine/vespa/pull/13328#discussion_r428016044", "createdAt": "2020-05-20T13:36:32Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/fef/phrase_splitter_query_env.h", "diffHunk": "@@ -0,0 +1,85 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"iqueryenvironment.h\"\n+#include \"simpletermdata.h\"\n+\n+namespace search::fef {\n+\n+/**\n+ * This class is used to split all phrase terms in a query environment\n+ * into separate terms. New TermData and TermFieldMatchData objects\n+ * are created for each splitted phrase term and managed by this\n+ * class.  Unmodified single terms are served from the query\n+ * environment and match data.\n+ *\n+ * The TermFieldMatchData objects managed by this class are updated\n+ * based on the TermFieldMatchData objects associated with the\n+ * original phrase terms. Positions are adjusted with +1 for each term\n+ * after the first one.\n+ *\n+ * Use this class if you want to handle a phrase term the same way as\n+ * single terms.\n+ **/\n+class PhraseSplitterQueryEnv : public IQueryEnvironment\n+{\n+protected:\n+    struct TermIdx {\n+        uint32_t idx;      // index into either query environment or vector of TermData objects\n+        bool     splitted; // whether this term has been splitted or not\n+        TermIdx(uint32_t i, bool s) : idx(i), splitted(s) {}\n+    };\n+    struct PhraseTerm {\n+        const ITermData & term; // for original phrase\n+        uint32_t idx; // index into vector of our TermData objects\n+        TermFieldHandle orig_handle;\n+        PhraseTerm(const ITermData & t, uint32_t i, uint32_t h) : term(t), idx(i), orig_handle(h) {}\n+    };\n+    struct HowToCopy {\n+        TermFieldHandle orig_handle;\n+        TermFieldHandle split_handle;\n+        uint32_t offsetInPhrase;\n+    };\n+\n+    const IQueryEnvironment        &_queryEnv;\n+    std::vector<SimpleTermData>     _terms;       // splitted terms\n+    std::vector<HowToCopy>          _copyInfo;\n+    std::vector<TermIdx>            _termIdxMap;  // renumbering of terms\n+    TermFieldHandle                 _maxHandle;   // the largest among original term field handles\n+    TermFieldHandle                 _skipHandles;   // how many handles to skip\n+\n+    void considerTerm(uint32_t termIdx, const ITermData &term, std::vector<PhraseTerm> &phraseTerms, uint32_t fieldId);\n+\n+public:\n+    /**\n+     * Create a phrase splitter based on the given query environment.\n+     *\n+     * @param queryEnv the query environment to wrap.\n+     * @param field the field where we need to split phrases", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2565a2a4244d0347a0e983dd921bbea130ff2d32"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTcyODE2OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/fef/phrasesplitter.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzo0Mjo0OFrOGYMVFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzo0Mjo0OFrOGYMVFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMTAxNA==", "bodyText": "Could consider to reduce the verbosity if this function name. E.g. get_query_env() instead.", "url": "https://github.com/vespa-engine/vespa/pull/13328#discussion_r428021014", "createdAt": "2020-05-20T13:42:48Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/fef/phrasesplitter.h", "diffHunk": "@@ -72,6 +75,7 @@ class PhraseSplitter : public PhraseSplitterQueryEnv\n     }\n \n     void bind_match_data(const fef::MatchData &md) { _matchData = &md; }\n+    const PhraseSplitterQueryEnv& get_phrase_splitter_query_env() const { return _phrase_splitter_query_env; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bc201d21999b1463b2123b44830351c40de57e8"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1594, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}