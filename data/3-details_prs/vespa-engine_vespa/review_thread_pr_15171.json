{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MTk4NjY4", "number": 15171, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDoxMTo0MVrOE1KBvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMzozMDo0MFrOE1OVvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTc0MjcxOnYy", "diffSide": "RIGHT", "path": "eval/src/vespa/eval/instruction/detect_type.h", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDoxMTo0MVrOHtRZzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMDo1MTowNFrOHtS3cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzMzEwMA==", "bodyText": "what about operator() ?\nindexes = detect_types(a, b)\nindexes<0>()\nindexes<1>()", "url": "https://github.com/vespa-engine/vespa/pull/15171#discussion_r517233100", "createdAt": "2020-11-04T10:11:41Z", "author": {"login": "havardpe"}, "path": "eval/src/vespa/eval/instruction/detect_type.h", "diffHunk": "@@ -0,0 +1,75 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include <typeindex>\n+#include <array>\n+\n+#pragma once\n+\n+namespace vespalib::eval::instruction {\n+\n+/*\n+ * Utilities for detecting implementation class by comparing\n+ * typeindex(typeid(T)); for now these are local to this\n+ * namespace, but we can consider moving them to a more\n+ * common place (probably vespalib) if we see more use-cases.\n+ */\n+\n+/**\n+ * Recognize a (const) instance of type T.  This is cheaper than\n+ * dynamic_cast, but requires the object to be exactly of class T.\n+ * Returns a pointer to the object as T if recognized, nullptr\n+ * otherwise.\n+ **/\n+template<typename T, typename U>\n+const T *\n+recognize_by_type_index(const U & object)\n+{\n+    if (std::type_index(typeid(object)) == std::type_index(typeid(T))) {\n+        return static_cast<const T *>(&object);\n+    }\n+    return nullptr;\n+}\n+\n+/**\n+ * Packs N recognized values into one object, used as return value\n+ * from detect_type<T>.\n+ * \n+ * Use all_converted() or the equivalent bool cast operator to check\n+ * if all objects were recognized.  After this check is successful use\n+ * get<0>(), get<1>() etc to get a reference to the objects.\n+ **/\n+template<typename T, size_t N>\n+class RecognizedValues\n+{\n+private:\n+    std::array<const T *, N> _pointers;\n+public:\n+    RecognizedValues(std::array<const T *, N> && pointers)\n+        : _pointers(std::move(pointers))\n+    {}\n+    bool all_converted() const {\n+        for (auto p : _pointers) {\n+            if (p == nullptr) return false;            \n+        }\n+        return true;\n+    }\n+    operator bool() const { return all_converted(); }\n+    template<size_t idx> const T& get() const {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9856a29b4685a0119c5f73ba93e5fd6bb16d13ea"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI0MjUzMA==", "bodyText": "that would have been prettier, but it doesn't compile at all; according to stackoverflow you have to write\nindexes.operator()<0>();", "url": "https://github.com/vespa-engine/vespa/pull/15171#discussion_r517242530", "createdAt": "2020-11-04T10:26:57Z", "author": {"login": "arnej27959"}, "path": "eval/src/vespa/eval/instruction/detect_type.h", "diffHunk": "@@ -0,0 +1,75 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include <typeindex>\n+#include <array>\n+\n+#pragma once\n+\n+namespace vespalib::eval::instruction {\n+\n+/*\n+ * Utilities for detecting implementation class by comparing\n+ * typeindex(typeid(T)); for now these are local to this\n+ * namespace, but we can consider moving them to a more\n+ * common place (probably vespalib) if we see more use-cases.\n+ */\n+\n+/**\n+ * Recognize a (const) instance of type T.  This is cheaper than\n+ * dynamic_cast, but requires the object to be exactly of class T.\n+ * Returns a pointer to the object as T if recognized, nullptr\n+ * otherwise.\n+ **/\n+template<typename T, typename U>\n+const T *\n+recognize_by_type_index(const U & object)\n+{\n+    if (std::type_index(typeid(object)) == std::type_index(typeid(T))) {\n+        return static_cast<const T *>(&object);\n+    }\n+    return nullptr;\n+}\n+\n+/**\n+ * Packs N recognized values into one object, used as return value\n+ * from detect_type<T>.\n+ * \n+ * Use all_converted() or the equivalent bool cast operator to check\n+ * if all objects were recognized.  After this check is successful use\n+ * get<0>(), get<1>() etc to get a reference to the objects.\n+ **/\n+template<typename T, size_t N>\n+class RecognizedValues\n+{\n+private:\n+    std::array<const T *, N> _pointers;\n+public:\n+    RecognizedValues(std::array<const T *, N> && pointers)\n+        : _pointers(std::move(pointers))\n+    {}\n+    bool all_converted() const {\n+        for (auto p : _pointers) {\n+            if (p == nullptr) return false;            \n+        }\n+        return true;\n+    }\n+    operator bool() const { return all_converted(); }\n+    template<size_t idx> const T& get() const {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzMzEwMA=="}, "originalCommit": {"oid": "9856a29b4685a0119c5f73ba93e5fd6bb16d13ea"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzI1NzA3Mw==", "bodyText": "ok, was worth a try :-)", "url": "https://github.com/vespa-engine/vespa/pull/15171#discussion_r517257073", "createdAt": "2020-11-04T10:51:04Z", "author": {"login": "havardpe"}, "path": "eval/src/vespa/eval/instruction/detect_type.h", "diffHunk": "@@ -0,0 +1,75 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include <typeindex>\n+#include <array>\n+\n+#pragma once\n+\n+namespace vespalib::eval::instruction {\n+\n+/*\n+ * Utilities for detecting implementation class by comparing\n+ * typeindex(typeid(T)); for now these are local to this\n+ * namespace, but we can consider moving them to a more\n+ * common place (probably vespalib) if we see more use-cases.\n+ */\n+\n+/**\n+ * Recognize a (const) instance of type T.  This is cheaper than\n+ * dynamic_cast, but requires the object to be exactly of class T.\n+ * Returns a pointer to the object as T if recognized, nullptr\n+ * otherwise.\n+ **/\n+template<typename T, typename U>\n+const T *\n+recognize_by_type_index(const U & object)\n+{\n+    if (std::type_index(typeid(object)) == std::type_index(typeid(T))) {\n+        return static_cast<const T *>(&object);\n+    }\n+    return nullptr;\n+}\n+\n+/**\n+ * Packs N recognized values into one object, used as return value\n+ * from detect_type<T>.\n+ * \n+ * Use all_converted() or the equivalent bool cast operator to check\n+ * if all objects were recognized.  After this check is successful use\n+ * get<0>(), get<1>() etc to get a reference to the objects.\n+ **/\n+template<typename T, size_t N>\n+class RecognizedValues\n+{\n+private:\n+    std::array<const T *, N> _pointers;\n+public:\n+    RecognizedValues(std::array<const T *, N> && pointers)\n+        : _pointers(std::move(pointers))\n+    {}\n+    bool all_converted() const {\n+        for (auto p : _pointers) {\n+            if (p == nullptr) return false;            \n+        }\n+        return true;\n+    }\n+    operator bool() const { return all_converted(); }\n+    template<size_t idx> const T& get() const {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIzMzEwMA=="}, "originalCommit": {"oid": "9856a29b4685a0119c5f73ba93e5fd6bb16d13ea"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MjQ0NjU2OnYy", "diffSide": "RIGHT", "path": "eval/src/vespa/eval/eval/fast_value.hpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMzozMDowMFrOHtYFfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMzozMDowMFrOHtYFfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM0MjU5MA==", "bodyText": "we should be able to avoid having to handle the lhs address elements again for each rhs element...", "url": "https://github.com/vespa-engine/vespa/pull/15171#discussion_r517342590", "createdAt": "2020-11-04T13:30:00Z", "author": {"login": "havardpe"}, "path": "eval/src/vespa/eval/eval/fast_value.hpp", "diffHunk": "@@ -360,4 +367,45 @@ FastValueIndex::sparse_only_merge(const ValueType &res_type, const Fun &fun,\n \n //-----------------------------------------------------------------------------\n \n+template <typename LCT, typename RCT, typename OCT, typename Fun>\n+const Value &\n+FastValueIndex::sparse_no_overlap_join(const ValueType &res_type, const Fun &fun,\n+                                       const FastValueIndex &lhs, const FastValueIndex &rhs,\n+                                       const std::vector<JoinAddrSource> &addr_sources,\n+                                       ConstArrayRef<LCT> lhs_cells, ConstArrayRef<RCT> rhs_cells, Stash &stash)\n+{\n+    using HashedLabelRef = std::reference_wrapper<const FastSparseMap::HashedLabel>;\n+    auto &result = stash.create<FastValue<OCT>>(res_type, res_type.count_mapped_dimensions(), 1, lhs.map.size()*rhs.map.size());\n+    std::vector<HashedLabelRef> output_addr;\n+    for (size_t lhs_subspace = 0; lhs_subspace < lhs.map.size(); ++lhs_subspace) {\n+        auto l_addr = lhs.map.make_addr(lhs_subspace);\n+        for (size_t rhs_subspace = 0; rhs_subspace < rhs.map.size(); ++rhs_subspace) {\n+            auto r_addr = rhs.map.make_addr(rhs_subspace);\n+            output_addr.clear();\n+            size_t l_idx = 0;\n+            size_t r_idx = 0;\n+            for (JoinAddrSource source : addr_sources) {\n+                switch (source) {\n+                case JoinAddrSource::LHS:\n+                    output_addr.push_back(l_addr[l_idx++]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c00c16f4bc82275d32657f7ca40ead26050b6245"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MjQ0OTI3OnYy", "diffSide": "RIGHT", "path": "eval/src/vespa/eval/eval/fast_value.hpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMzozMDo0MFrOHtYHFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMzozMDo0MFrOHtYHFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM0Mjk5OA==", "bodyText": "count_mapped_dimensions can be replaces with something like sources.size", "url": "https://github.com/vespa-engine/vespa/pull/15171#discussion_r517342998", "createdAt": "2020-11-04T13:30:40Z", "author": {"login": "havardpe"}, "path": "eval/src/vespa/eval/eval/fast_value.hpp", "diffHunk": "@@ -360,4 +367,45 @@ FastValueIndex::sparse_only_merge(const ValueType &res_type, const Fun &fun,\n \n //-----------------------------------------------------------------------------\n \n+template <typename LCT, typename RCT, typename OCT, typename Fun>\n+const Value &\n+FastValueIndex::sparse_no_overlap_join(const ValueType &res_type, const Fun &fun,\n+                                       const FastValueIndex &lhs, const FastValueIndex &rhs,\n+                                       const std::vector<JoinAddrSource> &addr_sources,\n+                                       ConstArrayRef<LCT> lhs_cells, ConstArrayRef<RCT> rhs_cells, Stash &stash)\n+{\n+    using HashedLabelRef = std::reference_wrapper<const FastSparseMap::HashedLabel>;\n+    auto &result = stash.create<FastValue<OCT>>(res_type, res_type.count_mapped_dimensions(), 1, lhs.map.size()*rhs.map.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c00c16f4bc82275d32657f7ca40ead26050b6245"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 982, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}