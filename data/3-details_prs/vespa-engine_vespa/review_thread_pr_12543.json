{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MTI5MDU3", "number": 12543, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTo1ODo0NFrODnZlRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTo1OToxM1rODnZmEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjQwMTk4OnYy", "diffSide": "LEFT", "path": "fbench/src/httpclient/httpclient.h", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTo1ODo0NFrOF1X74w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMzozMToyMFrOF1erJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUxMTAxMQ==", "bodyText": "why is it better to move it out of the class than to reset it when reading headers? (kind of messes with the API)\n(would not simply changing from += to = solve it?)", "url": "https://github.com/vespa-engine/vespa/pull/12543#discussion_r391511011", "createdAt": "2020-03-12T09:58:44Z", "author": {"login": "havardpe"}, "path": "fbench/src/httpclient/httpclient.h", "diffHunk": "@@ -95,21 +95,20 @@ class HTTPClient\n     vespalib::SocketAddress        _address;\n     vespalib::SyncCryptoSocket::UP _socket;\n \n-  std::string      _hostname;\n-  int              _port;\n-  bool             _keepAlive;\n-  bool             _headerBenchmarkdataCoverage;\n-  std::string      _extraHeaders;\n+  const std::string    _hostname;\n+  int                  _port;\n+  bool                 _keepAlive;\n+  bool                 _headerBenchmarkdataCoverage;\n+  const std::string    _extraHeaders;\n   vespalib::SocketSpec _sni_spec;\n-  std::string      _host_header_value;\n-  uint64_t         _reuseCount;\n+  std::string          _host_header_value;\n+  uint64_t             _reuseCount;\n \n   size_t           _bufsize;\n   char            *_buf;\n   ssize_t          _bufused;\n   ssize_t          _bufpos;\n \n-  std::string      _headerinfo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "769da18bf47b480e3b0822dd255f5570f56be846"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYyMDM1Mg==", "bodyText": "I think it is better to have the compiler enforce actual life being the same as semantic lifetime.", "url": "https://github.com/vespa-engine/vespa/pull/12543#discussion_r391620352", "createdAt": "2020-03-12T13:29:37Z", "author": {"login": "baldersheim"}, "path": "fbench/src/httpclient/httpclient.h", "diffHunk": "@@ -95,21 +95,20 @@ class HTTPClient\n     vespalib::SocketAddress        _address;\n     vespalib::SyncCryptoSocket::UP _socket;\n \n-  std::string      _hostname;\n-  int              _port;\n-  bool             _keepAlive;\n-  bool             _headerBenchmarkdataCoverage;\n-  std::string      _extraHeaders;\n+  const std::string    _hostname;\n+  int                  _port;\n+  bool                 _keepAlive;\n+  bool                 _headerBenchmarkdataCoverage;\n+  const std::string    _extraHeaders;\n   vespalib::SocketSpec _sni_spec;\n-  std::string      _host_header_value;\n-  uint64_t         _reuseCount;\n+  std::string          _host_header_value;\n+  uint64_t             _reuseCount;\n \n   size_t           _bufsize;\n   char            *_buf;\n   ssize_t          _bufused;\n   ssize_t          _bufpos;\n \n-  std::string      _headerinfo;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUxMTAxMQ=="}, "originalCommit": {"oid": "769da18bf47b480e3b0822dd255f5570f56be846"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYyMTQxMw==", "bodyText": "The methods only had internal usage, so I made them private. The the API clarity is not much of a problem. Ideally it should have returned an object.", "url": "https://github.com/vespa-engine/vespa/pull/12543#discussion_r391621413", "createdAt": "2020-03-12T13:31:20Z", "author": {"login": "baldersheim"}, "path": "fbench/src/httpclient/httpclient.h", "diffHunk": "@@ -95,21 +95,20 @@ class HTTPClient\n     vespalib::SocketAddress        _address;\n     vespalib::SyncCryptoSocket::UP _socket;\n \n-  std::string      _hostname;\n-  int              _port;\n-  bool             _keepAlive;\n-  bool             _headerBenchmarkdataCoverage;\n-  std::string      _extraHeaders;\n+  const std::string    _hostname;\n+  int                  _port;\n+  bool                 _keepAlive;\n+  bool                 _headerBenchmarkdataCoverage;\n+  const std::string    _extraHeaders;\n   vespalib::SocketSpec _sni_spec;\n-  std::string      _host_header_value;\n-  uint64_t         _reuseCount;\n+  std::string          _host_header_value;\n+  uint64_t             _reuseCount;\n \n   size_t           _bufsize;\n   char            *_buf;\n   ssize_t          _bufused;\n   ssize_t          _bufpos;\n \n-  std::string      _headerinfo;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUxMTAxMQ=="}, "originalCommit": {"oid": "769da18bf47b480e3b0822dd255f5570f56be846"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjQwNDAyOnYy", "diffSide": "RIGHT", "path": "fbench/src/httpclient/httpclient.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTo1OToxNFrOF1X9Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMzoyOTo0OVrOF1enew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUxMTMyNg==", "bodyText": "this seems connected to the headerinfo string somehow...", "url": "https://github.com/vespa-engine/vespa/pull/12543#discussion_r391511326", "createdAt": "2020-03-12T09:59:14Z", "author": {"login": "havardpe"}, "path": "fbench/src/httpclient/httpclient.h", "diffHunk": "@@ -95,21 +95,20 @@ class HTTPClient\n     vespalib::SocketAddress        _address;\n     vespalib::SyncCryptoSocket::UP _socket;\n \n-  std::string      _hostname;\n-  int              _port;\n-  bool             _keepAlive;\n-  bool             _headerBenchmarkdataCoverage;\n-  std::string      _extraHeaders;\n+  const std::string    _hostname;\n+  int                  _port;\n+  bool                 _keepAlive;\n+  bool                 _headerBenchmarkdataCoverage;\n+  const std::string    _extraHeaders;\n   vespalib::SocketSpec _sni_spec;\n-  std::string      _host_header_value;\n-  uint64_t         _reuseCount;\n+  std::string          _host_header_value;\n+  uint64_t             _reuseCount;\n \n   size_t           _bufsize;\n   char            *_buf;\n   ssize_t          _bufused;\n   ssize_t          _bufpos;\n \n-  std::string      _headerinfo;\n   unsigned int     _headerinfoPos;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "769da18bf47b480e3b0822dd255f5570f56be846"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYyMDQ3NQ==", "bodyText": "Not used, removed.", "url": "https://github.com/vespa-engine/vespa/pull/12543#discussion_r391620475", "createdAt": "2020-03-12T13:29:49Z", "author": {"login": "baldersheim"}, "path": "fbench/src/httpclient/httpclient.h", "diffHunk": "@@ -95,21 +95,20 @@ class HTTPClient\n     vespalib::SocketAddress        _address;\n     vespalib::SyncCryptoSocket::UP _socket;\n \n-  std::string      _hostname;\n-  int              _port;\n-  bool             _keepAlive;\n-  bool             _headerBenchmarkdataCoverage;\n-  std::string      _extraHeaders;\n+  const std::string    _hostname;\n+  int                  _port;\n+  bool                 _keepAlive;\n+  bool                 _headerBenchmarkdataCoverage;\n+  const std::string    _extraHeaders;\n   vespalib::SocketSpec _sni_spec;\n-  std::string      _host_header_value;\n-  uint64_t         _reuseCount;\n+  std::string          _host_header_value;\n+  uint64_t             _reuseCount;\n \n   size_t           _bufsize;\n   char            *_buf;\n   ssize_t          _bufused;\n   ssize_t          _bufpos;\n \n-  std::string      _headerinfo;\n   unsigned int     _headerinfoPos;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUxMTMyNg=="}, "originalCommit": {"oid": "769da18bf47b480e3b0822dd255f5570f56be846"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2250, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}