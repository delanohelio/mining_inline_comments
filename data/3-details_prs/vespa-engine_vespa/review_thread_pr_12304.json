{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MjcwOTMy", "number": 12304, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMzo1Njo1MVrODh4r3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMzo1Njo1MVrODh4r3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODU4MzM1OnYy", "diffSide": "RIGHT", "path": "fbench/src/test/authority/authority_test.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMzo1Njo1MVrOFs3pwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMDozMDozOFrOFtbzJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU5MzQ3Mg==", "bodyText": "Is this needed here when it's already declared in util/authority.h?", "url": "https://github.com/vespa-engine/vespa/pull/12304#discussion_r382593472", "createdAt": "2020-02-21T13:56:51Z", "author": {"login": "vekterli"}, "path": "fbench/src/test/authority/authority_test.cpp", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright 2020 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include <util/authority.h>\n+#include <vespa/vespalib/gtest/gtest.h>\n+\n+using vespalib::SocketSpec;\n+\n+//-----------------------------------------------------------------------------\n+\n+TEST(MakeSNISpecTest, host_port_is_parsed_as_expected) {\n+    EXPECT_EQ(make_sni_spec(\"my_host:123\", \"fallback\", 456, false).host(), \"my_host\");\n+    EXPECT_EQ(make_sni_spec(\"my_host:123\", \"fallback\", 456, true).host(), \"my_host\");\n+    EXPECT_EQ(make_sni_spec(\"my_host:123\", \"fallback\", 456, false).port(), 123);\n+    EXPECT_EQ(make_sni_spec(\"my_host:123\", \"fallback\", 456, true).port(), 123);\n+}\n+\n+TEST(MakeSNISpecTest, user_info_is_stripped) {\n+    EXPECT_EQ(make_sni_spec(\"myuser:deprecated@my_host:123\", \"fallback\", 456, false).host(), \"my_host\");\n+    EXPECT_EQ(make_sni_spec(\"myuser:deprecated@my_host:123\", \"fallback\", 456, true).host(), \"my_host\");\n+    EXPECT_EQ(make_sni_spec(\"myuser:deprecated@my_host:123\", \"fallback\", 456, false).port(), 123);\n+    EXPECT_EQ(make_sni_spec(\"myuser:deprecated@my_host:123\", \"fallback\", 456, true).port(), 123);\n+}\n+\n+TEST(MakeSNISpecTest, port_can_be_skipped) {\n+    EXPECT_EQ(make_sni_spec(\"my_host\", \"fallback\", 456, false).host(), \"my_host\");\n+    EXPECT_EQ(make_sni_spec(\"my_host\", \"fallback\", 456, true).host(), \"my_host\");\n+    EXPECT_EQ(make_sni_spec(\"my_host\", \"fallback\", 456, false).port(), 80);\n+    EXPECT_EQ(make_sni_spec(\"my_host\", \"fallback\", 456, true).port(), 443);\n+}\n+\n+TEST(MakeSNISpecTest, quoted_ip_addresses_work_as_expected) {\n+    EXPECT_EQ(make_sni_spec(\"[::1]:123\", \"fallback\", 456, false).host(), \"::1\");\n+    EXPECT_EQ(make_sni_spec(\"[::1]:123\", \"fallback\", 456, true).host(), \"::1\");\n+    EXPECT_EQ(make_sni_spec(\"[::1]:123\", \"fallback\", 456, false).port(), 123);\n+    EXPECT_EQ(make_sni_spec(\"[::1]:123\", \"fallback\", 456, true).port(), 123);\n+    EXPECT_EQ(make_sni_spec(\"[::1]\", \"fallback\", 456, false).host(), \"::1\");\n+    EXPECT_EQ(make_sni_spec(\"[::1]\", \"fallback\", 456, true).host(), \"::1\");\n+    EXPECT_EQ(make_sni_spec(\"[::1]\", \"fallback\", 456, false).port(), 80);\n+    EXPECT_EQ(make_sni_spec(\"[::1]\", \"fallback\", 456, true).port(), 443);\n+}\n+\n+TEST(MakeSNISpecTest, supplied_host_port_is_used_as_fallback) {\n+    EXPECT_EQ(make_sni_spec(\"\", \"fallback\", 456, false).host(), \"fallback\");\n+    EXPECT_EQ(make_sni_spec(\"\", \"fallback\", 456, true).host(), \"fallback\");\n+    EXPECT_EQ(make_sni_spec(\"\", \"fallback\", 456, false).port(), 456);\n+    EXPECT_EQ(make_sni_spec(\"\", \"fallback\", 456, true).port(), 456);\n+}\n+\n+//-----------------------------------------------------------------------------\n+\n+std::string make_host_header_value(const vespalib::SocketSpec &sni_spec, bool use_https);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e23a79c7cef059495a2163de38aca02b8e3c79d"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE4NTcwMg==", "bodyText": "I just had them both copied when writing the tests and forgot to remove this one. will fix.", "url": "https://github.com/vespa-engine/vespa/pull/12304#discussion_r383185702", "createdAt": "2020-02-24T10:30:38Z", "author": {"login": "havardpe"}, "path": "fbench/src/test/authority/authority_test.cpp", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright 2020 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include <util/authority.h>\n+#include <vespa/vespalib/gtest/gtest.h>\n+\n+using vespalib::SocketSpec;\n+\n+//-----------------------------------------------------------------------------\n+\n+TEST(MakeSNISpecTest, host_port_is_parsed_as_expected) {\n+    EXPECT_EQ(make_sni_spec(\"my_host:123\", \"fallback\", 456, false).host(), \"my_host\");\n+    EXPECT_EQ(make_sni_spec(\"my_host:123\", \"fallback\", 456, true).host(), \"my_host\");\n+    EXPECT_EQ(make_sni_spec(\"my_host:123\", \"fallback\", 456, false).port(), 123);\n+    EXPECT_EQ(make_sni_spec(\"my_host:123\", \"fallback\", 456, true).port(), 123);\n+}\n+\n+TEST(MakeSNISpecTest, user_info_is_stripped) {\n+    EXPECT_EQ(make_sni_spec(\"myuser:deprecated@my_host:123\", \"fallback\", 456, false).host(), \"my_host\");\n+    EXPECT_EQ(make_sni_spec(\"myuser:deprecated@my_host:123\", \"fallback\", 456, true).host(), \"my_host\");\n+    EXPECT_EQ(make_sni_spec(\"myuser:deprecated@my_host:123\", \"fallback\", 456, false).port(), 123);\n+    EXPECT_EQ(make_sni_spec(\"myuser:deprecated@my_host:123\", \"fallback\", 456, true).port(), 123);\n+}\n+\n+TEST(MakeSNISpecTest, port_can_be_skipped) {\n+    EXPECT_EQ(make_sni_spec(\"my_host\", \"fallback\", 456, false).host(), \"my_host\");\n+    EXPECT_EQ(make_sni_spec(\"my_host\", \"fallback\", 456, true).host(), \"my_host\");\n+    EXPECT_EQ(make_sni_spec(\"my_host\", \"fallback\", 456, false).port(), 80);\n+    EXPECT_EQ(make_sni_spec(\"my_host\", \"fallback\", 456, true).port(), 443);\n+}\n+\n+TEST(MakeSNISpecTest, quoted_ip_addresses_work_as_expected) {\n+    EXPECT_EQ(make_sni_spec(\"[::1]:123\", \"fallback\", 456, false).host(), \"::1\");\n+    EXPECT_EQ(make_sni_spec(\"[::1]:123\", \"fallback\", 456, true).host(), \"::1\");\n+    EXPECT_EQ(make_sni_spec(\"[::1]:123\", \"fallback\", 456, false).port(), 123);\n+    EXPECT_EQ(make_sni_spec(\"[::1]:123\", \"fallback\", 456, true).port(), 123);\n+    EXPECT_EQ(make_sni_spec(\"[::1]\", \"fallback\", 456, false).host(), \"::1\");\n+    EXPECT_EQ(make_sni_spec(\"[::1]\", \"fallback\", 456, true).host(), \"::1\");\n+    EXPECT_EQ(make_sni_spec(\"[::1]\", \"fallback\", 456, false).port(), 80);\n+    EXPECT_EQ(make_sni_spec(\"[::1]\", \"fallback\", 456, true).port(), 443);\n+}\n+\n+TEST(MakeSNISpecTest, supplied_host_port_is_used_as_fallback) {\n+    EXPECT_EQ(make_sni_spec(\"\", \"fallback\", 456, false).host(), \"fallback\");\n+    EXPECT_EQ(make_sni_spec(\"\", \"fallback\", 456, true).host(), \"fallback\");\n+    EXPECT_EQ(make_sni_spec(\"\", \"fallback\", 456, false).port(), 456);\n+    EXPECT_EQ(make_sni_spec(\"\", \"fallback\", 456, true).port(), 456);\n+}\n+\n+//-----------------------------------------------------------------------------\n+\n+std::string make_host_header_value(const vespalib::SocketSpec &sni_spec, bool use_https);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU5MzQ3Mg=="}, "originalCommit": {"oid": "6e23a79c7cef059495a2163de38aca02b8e3c79d"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2446, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}