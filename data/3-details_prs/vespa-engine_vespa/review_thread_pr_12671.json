{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNDIyMTQy", "number": 12671, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODoyNjoyNlrODqr63g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDoyODoyOVrODq0RWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDg2MzY2OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/tensor/distance_functions.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODoyNjoyNlrOF6lXSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjoyNToxMVrOF6t0_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3Mzg5Ng==", "bodyText": "Would be nice with a pointer to an article / wiki that describes that math behind.", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r396973896", "createdAt": "2020-03-24T08:26:26Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/tensor/distance_functions.h", "diffHunk": "@@ -25,10 +26,111 @@ class SquaredEuclideanDistance : public DistanceFunction {\n         assert(sz == rhs_vector.size());\n         return _computer.squaredEuclideanDistance(&lhs_vector[0], &rhs_vector[0], sz);\n     }\n+    double to_rawscore(double distance) const override {\n+        double d = sqrt(distance);\n+        double score = 1.0 / (1.0 + d);\n+        return score;\n+    }\n+    double calc_with_limit(const vespalib::tensor::TypedCells& lhs,\n+                           const vespalib::tensor::TypedCells& rhs,\n+                           double limit) const override\n+    {\n+        auto lhs_vector = lhs.typify<FloatType>();\n+        auto rhs_vector = rhs.typify<FloatType>();\n+        double sum = 0.0;\n+        size_t sz = lhs_vector.size();\n+        assert(sz == rhs_vector.size());\n+        for (size_t i = 0; i < sz && sum <= limit; ++i) {\n+            double diff = lhs_vector[i] - rhs_vector[i];\n+            sum += diff*diff;\n+        }\n+        return sum;\n+    }\n+\n     const vespalib::hwaccelrated::IAccelrated & _computer;\n };\n \n template class SquaredEuclideanDistance<float>;\n template class SquaredEuclideanDistance<double>;\n \n+/**\n+ * Calculates angular distance between vectors with assumed norm 1.\n+ */\n+template <typename FloatType>\n+class AngularDistance : public DistanceFunction {\n+public:\n+    AngularDistance()\n+        : _computer(vespalib::hwaccelrated::IAccelrated::getAccelrator())\n+    {}\n+    double calc(const vespalib::tensor::TypedCells& lhs, const vespalib::tensor::TypedCells& rhs) const override {\n+        auto lhs_vector = lhs.typify<FloatType>();\n+        auto rhs_vector = rhs.typify<FloatType>();\n+        size_t sz = lhs_vector.size();\n+        assert(sz == rhs_vector.size());\n+        return 1.0 - _computer.dotProduct(&lhs_vector[0], &rhs_vector[0], sz);\n+    }\n+    double to_rawscore(double distance) const override {\n+        double score = 1.0 / (1.0 + distance);\n+        return score;\n+    }\n+    double calc_with_limit(const vespalib::tensor::TypedCells& lhs,\n+                           const vespalib::tensor::TypedCells& rhs,\n+                           double /*limit*/) const override\n+    {\n+        return calc(lhs, rhs);\n+    }\n+\n+    const vespalib::hwaccelrated::IAccelrated & _computer;\n+};\n+\n+template class AngularDistance<float>;\n+template class AngularDistance<double>;\n+\n+/**\n+ * Calculates great-circle distance between Latitude/Longitude pairs,\n+ * measured in degrees", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49492f5698d52b87ee0ac98cf32d991246876125"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzExMjU3Mg==", "bodyText": "pointer to wikipedia added", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r397112572", "createdAt": "2020-03-24T12:25:11Z", "author": {"login": "arnej27959"}, "path": "searchlib/src/vespa/searchlib/tensor/distance_functions.h", "diffHunk": "@@ -25,10 +26,111 @@ class SquaredEuclideanDistance : public DistanceFunction {\n         assert(sz == rhs_vector.size());\n         return _computer.squaredEuclideanDistance(&lhs_vector[0], &rhs_vector[0], sz);\n     }\n+    double to_rawscore(double distance) const override {\n+        double d = sqrt(distance);\n+        double score = 1.0 / (1.0 + d);\n+        return score;\n+    }\n+    double calc_with_limit(const vespalib::tensor::TypedCells& lhs,\n+                           const vespalib::tensor::TypedCells& rhs,\n+                           double limit) const override\n+    {\n+        auto lhs_vector = lhs.typify<FloatType>();\n+        auto rhs_vector = rhs.typify<FloatType>();\n+        double sum = 0.0;\n+        size_t sz = lhs_vector.size();\n+        assert(sz == rhs_vector.size());\n+        for (size_t i = 0; i < sz && sum <= limit; ++i) {\n+            double diff = lhs_vector[i] - rhs_vector[i];\n+            sum += diff*diff;\n+        }\n+        return sum;\n+    }\n+\n     const vespalib::hwaccelrated::IAccelrated & _computer;\n };\n \n template class SquaredEuclideanDistance<float>;\n template class SquaredEuclideanDistance<double>;\n \n+/**\n+ * Calculates angular distance between vectors with assumed norm 1.\n+ */\n+template <typename FloatType>\n+class AngularDistance : public DistanceFunction {\n+public:\n+    AngularDistance()\n+        : _computer(vespalib::hwaccelrated::IAccelrated::getAccelrator())\n+    {}\n+    double calc(const vespalib::tensor::TypedCells& lhs, const vespalib::tensor::TypedCells& rhs) const override {\n+        auto lhs_vector = lhs.typify<FloatType>();\n+        auto rhs_vector = rhs.typify<FloatType>();\n+        size_t sz = lhs_vector.size();\n+        assert(sz == rhs_vector.size());\n+        return 1.0 - _computer.dotProduct(&lhs_vector[0], &rhs_vector[0], sz);\n+    }\n+    double to_rawscore(double distance) const override {\n+        double score = 1.0 / (1.0 + distance);\n+        return score;\n+    }\n+    double calc_with_limit(const vespalib::tensor::TypedCells& lhs,\n+                           const vespalib::tensor::TypedCells& rhs,\n+                           double /*limit*/) const override\n+    {\n+        return calc(lhs, rhs);\n+    }\n+\n+    const vespalib::hwaccelrated::IAccelrated & _computer;\n+};\n+\n+template class AngularDistance<float>;\n+template class AngularDistance<double>;\n+\n+/**\n+ * Calculates great-circle distance between Latitude/Longitude pairs,\n+ * measured in degrees", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3Mzg5Ng=="}, "originalCommit": {"oid": "49492f5698d52b87ee0ac98cf32d991246876125"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDg2NTgwOnYy", "diffSide": "RIGHT", "path": "config-model/src/test/java/com/yahoo/searchdefinition/document/HnswIndexParamsTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODoyNzowN1rOF6lYoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjoyNToyM1rOF6t1Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3NDI0MQ==", "bodyText": "Please add copyright.", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r396974241", "createdAt": "2020-03-24T08:27:07Z", "author": {"login": "geirst"}, "path": "config-model/src/test/java/com/yahoo/searchdefinition/document/HnswIndexParamsTestCase.java", "diffHunk": "@@ -0,0 +1,53 @@\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4867cc43efc6d92e5ff9db2924cb38280ebe7037"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzExMjY3NQ==", "bodyText": "copyright added", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r397112675", "createdAt": "2020-03-24T12:25:23Z", "author": {"login": "arnej27959"}, "path": "config-model/src/test/java/com/yahoo/searchdefinition/document/HnswIndexParamsTestCase.java", "diffHunk": "@@ -0,0 +1,53 @@\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3NDI0MQ=="}, "originalCommit": {"oid": "4867cc43efc6d92e5ff9db2924cb38280ebe7037"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDg3MjkzOnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/tensor/distance_function_factory.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODoyOTowOFrOF6ldEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjoyNzo1MFrOF6t6pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3NTM3OA==", "bodyText": "Consider adding function description.", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r396975378", "createdAt": "2020-03-24T08:29:08Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/tensor/distance_function_factory.h", "diffHunk": "@@ -0,0 +1,15 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"distance_function.h\"\n+#include <vespa/eval/eval/value_type.h>\n+#include <vespa/searchcommon/attribute/distance_metric.h>\n+\n+namespace search::tensor {\n+\n+DistanceFunction::UP", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2bef82b64c8ddd707fa58d394eb325aac1812fb"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzExNDAyMw==", "bodyText": "function description added.", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r397114023", "createdAt": "2020-03-24T12:27:50Z", "author": {"login": "arnej27959"}, "path": "searchlib/src/vespa/searchlib/tensor/distance_function_factory.h", "diffHunk": "@@ -0,0 +1,15 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"distance_function.h\"\n+#include <vespa/eval/eval/value_type.h>\n+#include <vespa/searchcommon/attribute/distance_metric.h>\n+\n+namespace search::tensor {\n+\n+DistanceFunction::UP", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3NTM3OA=="}, "originalCommit": {"oid": "b2bef82b64c8ddd707fa58d394eb325aac1812fb"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDg5MDE3OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/attribute/configconverter.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODozNDoyMFrOF6loHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjozNjo0MlrOF6uNyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3ODIwNw==", "bodyText": "Please extend AttributeManagerTest::testConfigConvert() unit test as well (searchlib/src/tests/attribute/attributemanager/attributemanager_test.cpp).", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r396978207", "createdAt": "2020-03-24T08:34:20Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/attribute/configconverter.cpp", "diffHunk": "@@ -74,8 +74,22 @@ ConfigConverter::convert(const AttributesConfig::Attribute & cfg)\n     predicateParams.setDensePostingListThreshold(cfg.densepostinglistthreshold);\n     retval.setPredicateParams(predicateParams);\n     if (cfg.index.hnsw.enabled) {\n+        using CfgDm = AttributesConfig::Attribute::Index::Hnsw::Distancemetric;\n+        DistanceMetric dm;\n+        switch (cfg.index.hnsw.distancemetric) {\n+        case CfgDm::EUCLIDEAN:\n+            dm = DistanceMetric::Euclidean;\n+            break;\n+        case CfgDm::ANGULAR:\n+            dm = DistanceMetric::Angular;\n+            break;\n+        case CfgDm::GEODEGREES:\n+            dm = DistanceMetric::GeoDegrees;\n+            break;\n+        }\n         retval.set_hnsw_index_params(HnswIndexParams(cfg.index.hnsw.maxlinkspernode,\n-                                                     cfg.index.hnsw.neighborstoexploreatinsert));\n+                                                     cfg.index.hnsw.neighborstoexploreatinsert,\n+                                                     dm));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc6403cca1829df74abc0707f12023fc4857ba26"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzExODkyMQ==", "bodyText": "unit test extended", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r397118921", "createdAt": "2020-03-24T12:36:42Z", "author": {"login": "arnej27959"}, "path": "searchlib/src/vespa/searchlib/attribute/configconverter.cpp", "diffHunk": "@@ -74,8 +74,22 @@ ConfigConverter::convert(const AttributesConfig::Attribute & cfg)\n     predicateParams.setDensePostingListThreshold(cfg.densepostinglistthreshold);\n     retval.setPredicateParams(predicateParams);\n     if (cfg.index.hnsw.enabled) {\n+        using CfgDm = AttributesConfig::Attribute::Index::Hnsw::Distancemetric;\n+        DistanceMetric dm;\n+        switch (cfg.index.hnsw.distancemetric) {\n+        case CfgDm::EUCLIDEAN:\n+            dm = DistanceMetric::Euclidean;\n+            break;\n+        case CfgDm::ANGULAR:\n+            dm = DistanceMetric::Angular;\n+            break;\n+        case CfgDm::GEODEGREES:\n+            dm = DistanceMetric::GeoDegrees;\n+            break;\n+        }\n         retval.set_hnsw_index_params(HnswIndexParams(cfg.index.hnsw.maxlinkspernode,\n-                                                     cfg.index.hnsw.neighborstoexploreatinsert));\n+                                                     cfg.index.hnsw.neighborstoexploreatinsert,\n+                                                     dm));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3ODIwNw=="}, "originalCommit": {"oid": "fc6403cca1829df74abc0707f12023fc4857ba26"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDkzMjUzOnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/tensor/nearest_neighbor_index.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODo0NzowOFrOF6mC_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjoyODowM1rOF6t7IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4NTA4Nw==", "bodyText": "I guess the pointer should be const as well? All functions on DistanceFunction API is const, so it's better to be consistent.", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r396985087", "createdAt": "2020-03-24T08:47:08Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/tensor/nearest_neighbor_index.h", "diffHunk": "@@ -35,6 +36,7 @@ class NearestNeighborIndex {\n                                              vespalib::tensor::TypedCells vector,\n                                              uint32_t explore_k) const = 0;\n \n+    virtual DistanceFunction *distance_function() const = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9be49315bc1fe7efa35eea5a244c2ce85c03c701"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzExNDE0NQ==", "bodyText": "constified.", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r397114145", "createdAt": "2020-03-24T12:28:03Z", "author": {"login": "arnej27959"}, "path": "searchlib/src/vespa/searchlib/tensor/nearest_neighbor_index.h", "diffHunk": "@@ -35,6 +36,7 @@ class NearestNeighborIndex {\n                                              vespalib::tensor::TypedCells vector,\n                                              uint32_t explore_k) const = 0;\n \n+    virtual DistanceFunction *distance_function() const = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4NTA4Nw=="}, "originalCommit": {"oid": "9be49315bc1fe7efa35eea5a244c2ce85c03c701"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDk0MDc3OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/queryeval/nearest_neighbor_blueprint.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODo0OToyNFrOF6mIUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjozOTowMVrOF6uStA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4NjQ0OA==", "bodyText": "Consider using auto.", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r396986448", "createdAt": "2020-03-24T08:49:24Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/queryeval/nearest_neighbor_blueprint.cpp", "diffHunk": "@@ -6,10 +6,47 @@\n #include \"nns_index_iterator.h\"\n #include <vespa/searchlib/fef/termfieldmatchdataarray.h>\n #include <vespa/eval/tensor/dense/dense_tensor_view.h>\n+#include <vespa/eval/tensor/dense/dense_tensor.h>\n #include <vespa/searchlib/tensor/dense_tensor_attribute.h>\n+#include <vespa/searchlib/tensor/distance_function_factory.h>\n+\n+using vespalib::tensor::DenseTensorView;\n+using vespalib::tensor::DenseTensor;\n \n namespace search::queryeval {\n \n+namespace {\n+\n+template<typename LCT, typename RCT>\n+void\n+convert_cells(std::unique_ptr<DenseTensorView> &original, vespalib::eval::ValueType want_type)\n+{\n+    auto old_cells = original->cellsRef().typify<LCT>();\n+    std::vector<RCT> new_cells;\n+    new_cells.reserve(old_cells.size());\n+    for (LCT value : old_cells) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d3fdf021dab6ab47736feea0cd439e79360acbf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEyMDE4MA==", "bodyText": "Here I feel using the actual type makes it clearer what is going on, and using \"auto\" would not save any typing either.", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r397120180", "createdAt": "2020-03-24T12:39:01Z", "author": {"login": "arnej27959"}, "path": "searchlib/src/vespa/searchlib/queryeval/nearest_neighbor_blueprint.cpp", "diffHunk": "@@ -6,10 +6,47 @@\n #include \"nns_index_iterator.h\"\n #include <vespa/searchlib/fef/termfieldmatchdataarray.h>\n #include <vespa/eval/tensor/dense/dense_tensor_view.h>\n+#include <vespa/eval/tensor/dense/dense_tensor.h>\n #include <vespa/searchlib/tensor/dense_tensor_attribute.h>\n+#include <vespa/searchlib/tensor/distance_function_factory.h>\n+\n+using vespalib::tensor::DenseTensorView;\n+using vespalib::tensor::DenseTensor;\n \n namespace search::queryeval {\n \n+namespace {\n+\n+template<typename LCT, typename RCT>\n+void\n+convert_cells(std::unique_ptr<DenseTensorView> &original, vespalib::eval::ValueType want_type)\n+{\n+    auto old_cells = original->cellsRef().typify<LCT>();\n+    std::vector<RCT> new_cells;\n+    new_cells.reserve(old_cells.size());\n+    for (LCT value : old_cells) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4NjQ0OA=="}, "originalCommit": {"oid": "1d3fdf021dab6ab47736feea0cd439e79360acbf"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjIzMTIxOnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/tensor/distance_functions/CMakeLists.txt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDoyODoxOVrOF6y3ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDoyODoxOVrOF6y3ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5NTExNA==", "bodyText": "Please update copyright.", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r397195114", "createdAt": "2020-03-24T14:28:19Z", "author": {"login": "geirst"}, "path": "searchlib/src/tests/tensor/distance_functions/CMakeLists.txt", "diffHunk": "@@ -0,0 +1,9 @@\n+# Copyright 2020 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7038869d09bd49ac1f75a148260c73af287cea91"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjIzMTkyOnYy", "diffSide": "RIGHT", "path": "searchlib/src/tests/tensor/distance_functions/distance_functions_test.cpp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDoyODoyOVrOF6y35A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDoyODoyOVrOF6y35A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5NTIzNg==", "bodyText": "Please update copyright.", "url": "https://github.com/vespa-engine/vespa/pull/12671#discussion_r397195236", "createdAt": "2020-03-24T14:28:29Z", "author": {"login": "geirst"}, "path": "searchlib/src/tests/tensor/distance_functions/distance_functions_test.cpp", "diffHunk": "@@ -0,0 +1,196 @@\n+// Copyright 2020 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7038869d09bd49ac1f75a148260c73af287cea91"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2209, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}