{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MTA4MDk4", "number": 15488, "title": "Allow preprovision capacity on partially filled hosts", "bodyText": "Adds new functionality that can be disabled by setting the\ncompact-preprovision-capacity flag to false.\npreprovision-capacity can be satisfied by hosts with spare resources.  The\nDynamicProvisioningMaintainer does this as follows:\n\nFor each cluster in preprovision-capacity, try to\na. allocate the cluster using NodePrioritizer\nb. If there is a deficit, provision the deficit with HostProvisioner, which\nmay provision larger shared hosts depending on shared-hosts, and retry\n(1) from the first cluster again.\nc. Otherwise, pretend the nodes are allocated and go to next cluster.\nAll of preprovision-capacity was successfully allocated, and empty hosts\nare therefore excess that can be deprovisioned.", "createdAt": "2020-11-26T14:22:38Z", "url": "https://github.com/vespa-engine/vespa/pull/15488", "merged": true, "mergeCommit": {"oid": "6bd0b69876d001004512ccf5d3f9f9edfbe3d3f8"}, "closed": true, "closedAt": "2020-11-27T07:17:28Z", "author": {"login": "hakonhall"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgTu-XgH2gAyNTI4MTA4MDk4OmQ2ZTcyN2UzMDA4N2UzMjE5MTFhYTI0MGZlZTAzMDUzY2MyMmIxZjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgiPlCAH2gAyNTI4MTA4MDk4OmFiZTE2MWI1MDljZGU1M2RhMzdkODdmYWE0NDk4MWE1MjA4ZTdiMDA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d6e727e30087e321911aa240fee03053cc22b1f4", "author": {"user": {"login": "hakonhall", "name": "H\u00e5kon Hallingstad"}}, "url": "https://github.com/vespa-engine/vespa/commit/d6e727e30087e321911aa240fee03053cc22b1f4", "committedDate": "2020-11-26T14:22:19Z", "message": "Allow preprovision capacity on partially filled hosts\n\nAdds new functionality that can be disabled by setting the\ncompact-preprovision-capacity flag to false.\n\npreprovision-capacity can be satisfied by hosts with spare resources.  The\nDynamicProvisioningMaintainer does this as follows:\n 1. For each cluster in preprovision-capacity, try to\n    a. allocate the cluster using NodePrioritizer\n    b. If there is a deficit, provision the deficit with HostProvisioner, which\n       may provision larger shared hosts depending on shared-hosts, and retry\n       (1) from the first cluster again.\n    c. Otherwise, pretend the nodes are allocated and go to next cluster.\n 2. All of preprovision-capacity was successfully allocated, and empty hosts\n    are therefore excess that can be deprovisioned."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NDAyODEz", "url": "https://github.com/vespa-engine/vespa/pull/15488#pullrequestreview-539402813", "createdAt": "2020-11-26T15:21:45Z", "commit": {"oid": "d6e727e30087e321911aa240fee03053cc22b1f4"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNToyMTo0NVrOH6fpAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNToyMzozNVrOH6fs-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA5Nzg1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            ((bandwidthGbps.isEmpty() && that.bandwidthGbps.isEmpty()) ||\n          \n          \n            \n                                    ((bandwidthGbps.isPresent() && that.bandwidthGbps.isPresent() &&\n          \n          \n            \n                                            Double.compare(that.bandwidthGbps.get(), bandwidthGbps.get()) == 0)));\n          \n          \n            \n                            bandwidthGbps.equals(that.bandwidthGbps);", "url": "https://github.com/vespa-engine/vespa/pull/15488#discussion_r531097859", "createdAt": "2020-11-26T15:21:45Z", "author": {"login": "freva"}, "path": "flags/src/main/java/com/yahoo/vespa/flags/custom/ClusterCapacity.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.flags.custom;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonGetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * @author freva\n+ */\n+// @Immutable\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(value = JsonInclude.Include.NON_NULL)\n+public class ClusterCapacity {\n+    private final int count;\n+    private final double vcpu;\n+    private final double memoryGb;\n+    private final double diskGb;\n+    private final Optional<Double> bandwidthGbps;\n+\n+    @JsonCreator\n+    public ClusterCapacity(@JsonProperty(\"count\") int count,\n+                           @JsonProperty(\"vcpu\") double vcpu,\n+                           @JsonProperty(\"memoryGb\") double memoryGb,\n+                           @JsonProperty(\"diskGb\") double diskGb,\n+                           @JsonProperty(\"bandwidthGbps\") Double bandwidthGbps) {\n+        this.count = (int) requireNonNegative(\"count\", count);\n+        this.vcpu = requireNonNegative(\"vcpu\", vcpu);\n+        this.memoryGb = requireNonNegative(\"memoryGb\", memoryGb);\n+        this.diskGb = requireNonNegative(\"diskGb\", diskGb);\n+        this.bandwidthGbps = Optional.ofNullable(bandwidthGbps);\n+    }\n+\n+    /** Returns a new ClusterCapacity equal to {@code this}, but with the given count. */\n+    public ClusterCapacity withCount(int count) {\n+        return new ClusterCapacity(count, vcpu, memoryGb, diskGb, bandwidthGbps.orElse(null));\n+    }\n+\n+    @JsonGetter(\"count\") public int count() { return count; }\n+    @JsonGetter(\"vcpu\") public double vcpu() { return vcpu; }\n+    @JsonGetter(\"memoryGb\") public double memoryGb() { return memoryGb; }\n+    @JsonGetter(\"diskGb\") public double diskGb() { return diskGb; }\n+    @JsonGetter(\"bandwidthGbps\") public Double bandwidthGbpsOrNull() { return bandwidthGbps.orElse(null); }\n+\n+    @JsonIgnore\n+    public double bandwidthGbps() { return bandwidthGbps.orElse(1.0); }\n+\n+    @Override\n+    public String toString() {\n+        return \"ClusterCapacity{\" +\n+                \"count=\" + count +\n+                \", vcpu=\" + vcpu +\n+                \", memoryGb=\" + memoryGb +\n+                \", diskGb=\" + diskGb +\n+                \", bandwidthGbps=\" + bandwidthGbps +\n+                '}';\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        ClusterCapacity that = (ClusterCapacity) o;\n+        return count == that.count &&\n+                Double.compare(that.vcpu, vcpu) == 0 &&\n+                Double.compare(that.memoryGb, memoryGb) == 0 &&\n+                Double.compare(that.diskGb, diskGb) == 0 &&\n+                ((bandwidthGbps.isEmpty() && that.bandwidthGbps.isEmpty()) ||\n+                        ((bandwidthGbps.isPresent() && that.bandwidthGbps.isPresent() &&\n+                                Double.compare(that.bandwidthGbps.get(), bandwidthGbps.get()) == 0)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6e727e30087e321911aa240fee03053cc22b1f4"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA5ODEyMQ==", "bodyText": "Add optional disk speed and storage type?", "url": "https://github.com/vespa-engine/vespa/pull/15488#discussion_r531098121", "createdAt": "2020-11-26T15:22:11Z", "author": {"login": "freva"}, "path": "flags/src/main/java/com/yahoo/vespa/flags/custom/ClusterCapacity.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.flags.custom;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonGetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * @author freva\n+ */\n+// @Immutable\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(value = JsonInclude.Include.NON_NULL)\n+public class ClusterCapacity {\n+    private final int count;\n+    private final double vcpu;\n+    private final double memoryGb;\n+    private final double diskGb;\n+    private final Optional<Double> bandwidthGbps;\n+\n+    @JsonCreator\n+    public ClusterCapacity(@JsonProperty(\"count\") int count,\n+                           @JsonProperty(\"vcpu\") double vcpu,\n+                           @JsonProperty(\"memoryGb\") double memoryGb,\n+                           @JsonProperty(\"diskGb\") double diskGb,\n+                           @JsonProperty(\"bandwidthGbps\") Double bandwidthGbps) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6e727e30087e321911aa240fee03053cc22b1f4"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA5ODg3Mg==", "bodyText": "Default is 0.3", "url": "https://github.com/vespa-engine/vespa/pull/15488#discussion_r531098872", "createdAt": "2020-11-26T15:23:35Z", "author": {"login": "freva"}, "path": "flags/src/main/java/com/yahoo/vespa/flags/custom/ClusterCapacity.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright 2019 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.flags.custom;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonGetter;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * @author freva\n+ */\n+// @Immutable\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonInclude(value = JsonInclude.Include.NON_NULL)\n+public class ClusterCapacity {\n+    private final int count;\n+    private final double vcpu;\n+    private final double memoryGb;\n+    private final double diskGb;\n+    private final Optional<Double> bandwidthGbps;\n+\n+    @JsonCreator\n+    public ClusterCapacity(@JsonProperty(\"count\") int count,\n+                           @JsonProperty(\"vcpu\") double vcpu,\n+                           @JsonProperty(\"memoryGb\") double memoryGb,\n+                           @JsonProperty(\"diskGb\") double diskGb,\n+                           @JsonProperty(\"bandwidthGbps\") Double bandwidthGbps) {\n+        this.count = (int) requireNonNegative(\"count\", count);\n+        this.vcpu = requireNonNegative(\"vcpu\", vcpu);\n+        this.memoryGb = requireNonNegative(\"memoryGb\", memoryGb);\n+        this.diskGb = requireNonNegative(\"diskGb\", diskGb);\n+        this.bandwidthGbps = Optional.ofNullable(bandwidthGbps);\n+    }\n+\n+    /** Returns a new ClusterCapacity equal to {@code this}, but with the given count. */\n+    public ClusterCapacity withCount(int count) {\n+        return new ClusterCapacity(count, vcpu, memoryGb, diskGb, bandwidthGbps.orElse(null));\n+    }\n+\n+    @JsonGetter(\"count\") public int count() { return count; }\n+    @JsonGetter(\"vcpu\") public double vcpu() { return vcpu; }\n+    @JsonGetter(\"memoryGb\") public double memoryGb() { return memoryGb; }\n+    @JsonGetter(\"diskGb\") public double diskGb() { return diskGb; }\n+    @JsonGetter(\"bandwidthGbps\") public Double bandwidthGbpsOrNull() { return bandwidthGbps.orElse(null); }\n+\n+    @JsonIgnore\n+    public double bandwidthGbps() { return bandwidthGbps.orElse(1.0); }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6e727e30087e321911aa240fee03053cc22b1f4"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abe161b509cde53da37d87faa44981a5208e7b00", "author": {"user": {"login": "hakonhall", "name": "H\u00e5kon Hallingstad"}}, "url": "https://github.com/vespa-engine/vespa/commit/abe161b509cde53da37d87faa44981a5208e7b00", "committedDate": "2020-11-27T07:16:36Z", "message": "Use OptionalDouble"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1902, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}