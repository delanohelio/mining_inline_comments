{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2Nzg0MDY5", "number": 11920, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTozNTo1NVrODadZFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTo0Njo1M1rODadi5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDcxMTI3OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/common/bitvector.h", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTozNTo1NVrOFhbHsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMzoyOTo0MVrOFhdpSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MTY2NQ==", "bodyText": "Is incNumBits/decNumBits possibly called from multiple threads concurrently? If not, and if visibility of changes to _numTrueBits are guaranteed between writer threads through other means (mutexes etc), this could be done without requiring explicit atomic bus operations. E.g.\n_numTrueBits.store(_numTrueBits.load(std::memory_order_relaxed) - 1, std::memory_order_relaxed);", "url": "https://github.com/vespa-engine/vespa/pull/11920#discussion_r370591665", "createdAt": "2020-01-24T11:35:55Z", "author": {"login": "vekterli"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.h", "diffHunk": "@@ -285,12 +287,12 @@ class BitVector : protected BitWord\n     void setGuardBit() { setBit(size()); }\n     void incNumBits() {\n         if ( isValidCount() ) {\n-            _numTrueBits++;\n+            _numTrueBits.fetch_add(1, std::memory_order_relaxed);\n         }\n     }\n     void decNumBits() {\n         if ( isValidCount() ) {\n-            _numTrueBits--;\n+            _numTrueBits.fetch_sub(1, std::memory_order_relaxed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec51225758e3c28360f7b03d9f315a1298badeef"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYzMTcyMw==", "bodyText": "Correct, there is only one writer thread anyway.", "url": "https://github.com/vespa-engine/vespa/pull/11920#discussion_r370631723", "createdAt": "2020-01-24T13:26:35Z", "author": {"login": "baldersheim"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.h", "diffHunk": "@@ -285,12 +287,12 @@ class BitVector : protected BitWord\n     void setGuardBit() { setBit(size()); }\n     void incNumBits() {\n         if ( isValidCount() ) {\n-            _numTrueBits++;\n+            _numTrueBits.fetch_add(1, std::memory_order_relaxed);\n         }\n     }\n     void decNumBits() {\n         if ( isValidCount() ) {\n-            _numTrueBits--;\n+            _numTrueBits.fetch_sub(1, std::memory_order_relaxed);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MTY2NQ=="}, "originalCommit": {"oid": "ec51225758e3c28360f7b03d9f315a1298badeef"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYzMzAzMw==", "bodyText": "Not very beautiful though....", "url": "https://github.com/vespa-engine/vespa/pull/11920#discussion_r370633033", "createdAt": "2020-01-24T13:29:41Z", "author": {"login": "baldersheim"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.h", "diffHunk": "@@ -285,12 +287,12 @@ class BitVector : protected BitWord\n     void setGuardBit() { setBit(size()); }\n     void incNumBits() {\n         if ( isValidCount() ) {\n-            _numTrueBits++;\n+            _numTrueBits.fetch_add(1, std::memory_order_relaxed);\n         }\n     }\n     void decNumBits() {\n         if ( isValidCount() ) {\n-            _numTrueBits--;\n+            _numTrueBits.fetch_sub(1, std::memory_order_relaxed);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MTY2NQ=="}, "originalCommit": {"oid": "ec51225758e3c28360f7b03d9f315a1298badeef"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDczNjM5OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/common/bitvector.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTo0Njo1M1rOFhbWxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMzozMzoxMlrOFhdvbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5NTUyNA==", "bodyText": "Consider adding load()/store() to these lines where appropriate to make all atomic access explicit (if desired)", "url": "https://github.com/vespa-engine/vespa/pull/11920#discussion_r370595524", "createdAt": "2020-01-24T11:46:53Z", "author": {"login": "vekterli"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.h", "diffHunk": "@@ -189,14 +189,16 @@ class BitVector : protected BitWord\n      * should be called before calling Test/Clear/Flip methods.\n      */\n     void invalidateCachedCount() const {\n-        _numTrueBits = invalidCount();\n+        _numTrueBits.store(invalidCount(), std::memory_order_relaxed);\n     }\n \n     void swap(BitVector & rhs) {\n         std::swap(_words, rhs._words);\n         std::swap(_startOffset, rhs._startOffset);\n         std::swap(_sz, rhs._sz);\n-        std::swap(_numTrueBits, rhs._numTrueBits);\n+        Index tmp = rhs._numTrueBits;\n+        rhs._numTrueBits = _numTrueBits.load();\n+        _numTrueBits = tmp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec51225758e3c28360f7b03d9f315a1298badeef"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYzNDYwNw==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/11920#discussion_r370634607", "createdAt": "2020-01-24T13:33:12Z", "author": {"login": "baldersheim"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.h", "diffHunk": "@@ -189,14 +189,16 @@ class BitVector : protected BitWord\n      * should be called before calling Test/Clear/Flip methods.\n      */\n     void invalidateCachedCount() const {\n-        _numTrueBits = invalidCount();\n+        _numTrueBits.store(invalidCount(), std::memory_order_relaxed);\n     }\n \n     void swap(BitVector & rhs) {\n         std::swap(_words, rhs._words);\n         std::swap(_startOffset, rhs._startOffset);\n         std::swap(_sz, rhs._sz);\n-        std::swap(_numTrueBits, rhs._numTrueBits);\n+        Index tmp = rhs._numTrueBits;\n+        rhs._numTrueBits = _numTrueBits.load();\n+        _numTrueBits = tmp;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5NTUyNA=="}, "originalCommit": {"oid": "ec51225758e3c28360f7b03d9f315a1298badeef"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2625, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}