{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4MjY4NzYx", "number": 15010, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjo0NDoxMlrOExEqrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjo0NDoxMlrOExEqrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODkyMTQyOnYy", "diffSide": "RIGHT", "path": "config-model/src/main/java/com/yahoo/searchdefinition/processing/OnnxModelTypeResolver.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjo0NDoxMlrOHnAsZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODo0Njo0M1rOHnElrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY2Nzg3Ng==", "bodyText": "This seems like a hack to me but I guess it will work. I think we should be able to ask the application package to give us the file regardless of how it is stored in the implementation class.\nThere's probably more than enough in the PR already, but we should follow it up somehow. @hmusum any thoughts on this?", "url": "https://github.com/vespa-engine/vespa/pull/15010#discussion_r510667876", "createdAt": "2020-10-23T06:44:12Z", "author": {"login": "bratseth"}, "path": "config-model/src/main/java/com/yahoo/searchdefinition/processing/OnnxModelTypeResolver.java", "diffHunk": "@@ -0,0 +1,154 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+package com.yahoo.searchdefinition.processing;\n+\n+import com.yahoo.cloud.config.ConfigserverConfig;\n+import com.yahoo.component.Version;\n+import com.yahoo.config.FileReference;\n+import com.yahoo.config.application.api.ApplicationFile;\n+import com.yahoo.config.application.api.ApplicationPackage;\n+import com.yahoo.config.application.api.DeployLogger;\n+import com.yahoo.config.application.api.FileRegistry;\n+import com.yahoo.path.Path;\n+import com.yahoo.searchdefinition.OnnxModel;\n+import com.yahoo.searchdefinition.RankProfileRegistry;\n+import com.yahoo.searchdefinition.Search;\n+import com.yahoo.searchdefinition.expressiontransforms.OnnxModelTransformer;\n+import com.yahoo.vespa.defaults.Defaults;\n+import com.yahoo.vespa.model.container.search.QueryProfiles;\n+import onnx.Onnx;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Processes every \"onnx-model\" element in the schema. Parses the model file,\n+ * adds missing input and output mappings (assigning default names), and\n+ * adds tensor types to all model inputs and outputs.\n+ *\n+ * Must be processed before RankingExpressingTypeResolver.\n+ *\n+ * @author lesters\n+ */\n+public class OnnxModelTypeResolver extends Processor {\n+\n+    public OnnxModelTypeResolver(Search search, DeployLogger deployLogger, RankProfileRegistry rankProfileRegistry, QueryProfiles queryProfiles) {\n+        super(search, deployLogger, rankProfileRegistry, queryProfiles);\n+    }\n+\n+    @Override\n+    public void process(boolean validate, boolean documentsOnly) {\n+        if (documentsOnly) return;\n+\n+        for (Map.Entry<String, OnnxModel> entry : search.onnxModels().asMap().entrySet())  {\n+            OnnxModel modelConfig = entry.getValue();\n+            try (InputStream inputStream = openModelFile(modelConfig.getFilePath())) {\n+                Onnx.ModelProto model = Onnx.ModelProto.parseFrom(inputStream);\n+\n+                // Model inputs - if not defined, assumes a function is provided with a valid name\n+                for (Onnx.ValueInfoProto valueInfo : model.getGraph().getInputList()) {\n+                    String onnxInputName = valueInfo.getName();\n+                    String vespaInputName = OnnxModelTransformer.asValidIdentifier(onnxInputName);\n+                    modelConfig.addInputNameMapping(onnxInputName, vespaInputName, false);\n+                    modelConfig.addInputType(onnxInputName, valueInfo.getType());\n+                }\n+\n+                // Model outputs\n+                for (Onnx.ValueInfoProto valueInfo : model.getGraph().getOutputList()) {\n+                    String onnxOutputName = valueInfo.getName();\n+                    String vespaOutputName = OnnxModelTransformer.asValidIdentifier(onnxOutputName);\n+                    modelConfig.addOutputNameMapping(onnxOutputName, vespaOutputName, false);\n+                    modelConfig.addOutputType(onnxOutputName, valueInfo.getType());\n+                }\n+\n+                // Set the first output as default\n+                if ( ! model.getGraph().getOutputList().isEmpty()) {\n+                    modelConfig.setDefaultOutput(model.getGraph().getOutput(0).getName());\n+                }\n+\n+            } catch (IOException e) {\n+                throw new IllegalArgumentException(\"Unable to parse ONNX model\", e);\n+            }\n+        }\n+    }\n+\n+    static boolean modelFileExists(String path, ApplicationPackage app) {\n+        Path pathInApplicationPackage = Path.fromString(path);\n+        if (getFile(pathInApplicationPackage, app).exists()) {\n+            return true;\n+        }\n+        if (getFileReference(pathInApplicationPackage, app).isPresent()) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private InputStream openModelFile(Path path) throws FileNotFoundException {\n+        ApplicationFile file;\n+        Optional<FileReference> reference;\n+        Path modelsPath = ApplicationPackage.MODELS_DIR.append(path);\n+\n+        if ((file = getFile(path)).exists()) {\n+            return file.createInputStream();\n+        }\n+        if ((file = getFile(modelsPath)).exists()) {\n+            return file.createInputStream();\n+        }\n+        if ((reference = getFileReference(path)).isPresent()) {\n+            return openFromFileRepository(path, reference.get());\n+        }\n+        if ((reference = getFileReference(modelsPath)).isPresent()) {\n+            return openFromFileRepository(modelsPath, reference.get());\n+        }\n+\n+        throw new IllegalArgumentException(\"Unable to find ONNX model file \\\"\" + path + \"\\\" \" +\n+            \"in application package or file repository.\");\n+    }\n+\n+    private ApplicationFile getFile(Path path) {\n+        return getFile(path, search.applicationPackage());\n+    }\n+\n+    private static ApplicationFile getFile(Path path, ApplicationPackage app) {\n+        return app.getFile(path);\n+    }\n+\n+    private static InputStream openFromFileRepository(Path path, FileReference reference) throws FileNotFoundException {\n+        return new FileInputStream(new File(getFileRepositoryPath(path, reference.value())));\n+    }\n+\n+    public static String getFileRepositoryPath(Path path, String fileReference) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3594ad3bfce131b317d9c073b16eb47a7983be4d"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5OTU5NQ==", "bodyText": "I think we can just drop the getFileReference (and subsequent openFromFileRepository) calls. If getFile fails getFileReference will also fail. If there exists is a file reference for a file in the application package it will be added to the application package directory immediately afterwards and it will be found when doing getFile.", "url": "https://github.com/vespa-engine/vespa/pull/15010#discussion_r510699595", "createdAt": "2020-10-23T07:50:58Z", "author": {"login": "hmusum"}, "path": "config-model/src/main/java/com/yahoo/searchdefinition/processing/OnnxModelTypeResolver.java", "diffHunk": "@@ -0,0 +1,154 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+package com.yahoo.searchdefinition.processing;\n+\n+import com.yahoo.cloud.config.ConfigserverConfig;\n+import com.yahoo.component.Version;\n+import com.yahoo.config.FileReference;\n+import com.yahoo.config.application.api.ApplicationFile;\n+import com.yahoo.config.application.api.ApplicationPackage;\n+import com.yahoo.config.application.api.DeployLogger;\n+import com.yahoo.config.application.api.FileRegistry;\n+import com.yahoo.path.Path;\n+import com.yahoo.searchdefinition.OnnxModel;\n+import com.yahoo.searchdefinition.RankProfileRegistry;\n+import com.yahoo.searchdefinition.Search;\n+import com.yahoo.searchdefinition.expressiontransforms.OnnxModelTransformer;\n+import com.yahoo.vespa.defaults.Defaults;\n+import com.yahoo.vespa.model.container.search.QueryProfiles;\n+import onnx.Onnx;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Processes every \"onnx-model\" element in the schema. Parses the model file,\n+ * adds missing input and output mappings (assigning default names), and\n+ * adds tensor types to all model inputs and outputs.\n+ *\n+ * Must be processed before RankingExpressingTypeResolver.\n+ *\n+ * @author lesters\n+ */\n+public class OnnxModelTypeResolver extends Processor {\n+\n+    public OnnxModelTypeResolver(Search search, DeployLogger deployLogger, RankProfileRegistry rankProfileRegistry, QueryProfiles queryProfiles) {\n+        super(search, deployLogger, rankProfileRegistry, queryProfiles);\n+    }\n+\n+    @Override\n+    public void process(boolean validate, boolean documentsOnly) {\n+        if (documentsOnly) return;\n+\n+        for (Map.Entry<String, OnnxModel> entry : search.onnxModels().asMap().entrySet())  {\n+            OnnxModel modelConfig = entry.getValue();\n+            try (InputStream inputStream = openModelFile(modelConfig.getFilePath())) {\n+                Onnx.ModelProto model = Onnx.ModelProto.parseFrom(inputStream);\n+\n+                // Model inputs - if not defined, assumes a function is provided with a valid name\n+                for (Onnx.ValueInfoProto valueInfo : model.getGraph().getInputList()) {\n+                    String onnxInputName = valueInfo.getName();\n+                    String vespaInputName = OnnxModelTransformer.asValidIdentifier(onnxInputName);\n+                    modelConfig.addInputNameMapping(onnxInputName, vespaInputName, false);\n+                    modelConfig.addInputType(onnxInputName, valueInfo.getType());\n+                }\n+\n+                // Model outputs\n+                for (Onnx.ValueInfoProto valueInfo : model.getGraph().getOutputList()) {\n+                    String onnxOutputName = valueInfo.getName();\n+                    String vespaOutputName = OnnxModelTransformer.asValidIdentifier(onnxOutputName);\n+                    modelConfig.addOutputNameMapping(onnxOutputName, vespaOutputName, false);\n+                    modelConfig.addOutputType(onnxOutputName, valueInfo.getType());\n+                }\n+\n+                // Set the first output as default\n+                if ( ! model.getGraph().getOutputList().isEmpty()) {\n+                    modelConfig.setDefaultOutput(model.getGraph().getOutput(0).getName());\n+                }\n+\n+            } catch (IOException e) {\n+                throw new IllegalArgumentException(\"Unable to parse ONNX model\", e);\n+            }\n+        }\n+    }\n+\n+    static boolean modelFileExists(String path, ApplicationPackage app) {\n+        Path pathInApplicationPackage = Path.fromString(path);\n+        if (getFile(pathInApplicationPackage, app).exists()) {\n+            return true;\n+        }\n+        if (getFileReference(pathInApplicationPackage, app).isPresent()) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private InputStream openModelFile(Path path) throws FileNotFoundException {\n+        ApplicationFile file;\n+        Optional<FileReference> reference;\n+        Path modelsPath = ApplicationPackage.MODELS_DIR.append(path);\n+\n+        if ((file = getFile(path)).exists()) {\n+            return file.createInputStream();\n+        }\n+        if ((file = getFile(modelsPath)).exists()) {\n+            return file.createInputStream();\n+        }\n+        if ((reference = getFileReference(path)).isPresent()) {\n+            return openFromFileRepository(path, reference.get());\n+        }\n+        if ((reference = getFileReference(modelsPath)).isPresent()) {\n+            return openFromFileRepository(modelsPath, reference.get());\n+        }\n+\n+        throw new IllegalArgumentException(\"Unable to find ONNX model file \\\"\" + path + \"\\\" \" +\n+            \"in application package or file repository.\");\n+    }\n+\n+    private ApplicationFile getFile(Path path) {\n+        return getFile(path, search.applicationPackage());\n+    }\n+\n+    private static ApplicationFile getFile(Path path, ApplicationPackage app) {\n+        return app.getFile(path);\n+    }\n+\n+    private static InputStream openFromFileRepository(Path path, FileReference reference) throws FileNotFoundException {\n+        return new FileInputStream(new File(getFileRepositoryPath(path, reference.value())));\n+    }\n+\n+    public static String getFileRepositoryPath(Path path, String fileReference) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY2Nzg3Ng=="}, "originalCommit": {"oid": "3594ad3bfce131b317d9c073b16eb47a7983be4d"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDczMTY5Mg==", "bodyText": "So, the reason this is here is the getFile fails to find the file when the application package is backed by ZKApplicationPackage because the actual file hasn't been added there. See ZooKeeperClient.java. During the prepare step, as far as I understand, at first the application package is a FilesApplicationPackage. Here the file exists. However, during config deriving, the ZK application package will be created, and the model file will not be put there, in the .preprocessed directory. However, we still require the actual file. That's why we look in the file repository, and at this stage the file reference exists and the file has been added there.\nNow, I'm not sure what happens with this scenario when we have multiple config servers. I guess we'll just have to try?", "url": "https://github.com/vespa-engine/vespa/pull/15010#discussion_r510731692", "createdAt": "2020-10-23T08:46:43Z", "author": {"login": "lesters"}, "path": "config-model/src/main/java/com/yahoo/searchdefinition/processing/OnnxModelTypeResolver.java", "diffHunk": "@@ -0,0 +1,154 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+package com.yahoo.searchdefinition.processing;\n+\n+import com.yahoo.cloud.config.ConfigserverConfig;\n+import com.yahoo.component.Version;\n+import com.yahoo.config.FileReference;\n+import com.yahoo.config.application.api.ApplicationFile;\n+import com.yahoo.config.application.api.ApplicationPackage;\n+import com.yahoo.config.application.api.DeployLogger;\n+import com.yahoo.config.application.api.FileRegistry;\n+import com.yahoo.path.Path;\n+import com.yahoo.searchdefinition.OnnxModel;\n+import com.yahoo.searchdefinition.RankProfileRegistry;\n+import com.yahoo.searchdefinition.Search;\n+import com.yahoo.searchdefinition.expressiontransforms.OnnxModelTransformer;\n+import com.yahoo.vespa.defaults.Defaults;\n+import com.yahoo.vespa.model.container.search.QueryProfiles;\n+import onnx.Onnx;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Processes every \"onnx-model\" element in the schema. Parses the model file,\n+ * adds missing input and output mappings (assigning default names), and\n+ * adds tensor types to all model inputs and outputs.\n+ *\n+ * Must be processed before RankingExpressingTypeResolver.\n+ *\n+ * @author lesters\n+ */\n+public class OnnxModelTypeResolver extends Processor {\n+\n+    public OnnxModelTypeResolver(Search search, DeployLogger deployLogger, RankProfileRegistry rankProfileRegistry, QueryProfiles queryProfiles) {\n+        super(search, deployLogger, rankProfileRegistry, queryProfiles);\n+    }\n+\n+    @Override\n+    public void process(boolean validate, boolean documentsOnly) {\n+        if (documentsOnly) return;\n+\n+        for (Map.Entry<String, OnnxModel> entry : search.onnxModels().asMap().entrySet())  {\n+            OnnxModel modelConfig = entry.getValue();\n+            try (InputStream inputStream = openModelFile(modelConfig.getFilePath())) {\n+                Onnx.ModelProto model = Onnx.ModelProto.parseFrom(inputStream);\n+\n+                // Model inputs - if not defined, assumes a function is provided with a valid name\n+                for (Onnx.ValueInfoProto valueInfo : model.getGraph().getInputList()) {\n+                    String onnxInputName = valueInfo.getName();\n+                    String vespaInputName = OnnxModelTransformer.asValidIdentifier(onnxInputName);\n+                    modelConfig.addInputNameMapping(onnxInputName, vespaInputName, false);\n+                    modelConfig.addInputType(onnxInputName, valueInfo.getType());\n+                }\n+\n+                // Model outputs\n+                for (Onnx.ValueInfoProto valueInfo : model.getGraph().getOutputList()) {\n+                    String onnxOutputName = valueInfo.getName();\n+                    String vespaOutputName = OnnxModelTransformer.asValidIdentifier(onnxOutputName);\n+                    modelConfig.addOutputNameMapping(onnxOutputName, vespaOutputName, false);\n+                    modelConfig.addOutputType(onnxOutputName, valueInfo.getType());\n+                }\n+\n+                // Set the first output as default\n+                if ( ! model.getGraph().getOutputList().isEmpty()) {\n+                    modelConfig.setDefaultOutput(model.getGraph().getOutput(0).getName());\n+                }\n+\n+            } catch (IOException e) {\n+                throw new IllegalArgumentException(\"Unable to parse ONNX model\", e);\n+            }\n+        }\n+    }\n+\n+    static boolean modelFileExists(String path, ApplicationPackage app) {\n+        Path pathInApplicationPackage = Path.fromString(path);\n+        if (getFile(pathInApplicationPackage, app).exists()) {\n+            return true;\n+        }\n+        if (getFileReference(pathInApplicationPackage, app).isPresent()) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private InputStream openModelFile(Path path) throws FileNotFoundException {\n+        ApplicationFile file;\n+        Optional<FileReference> reference;\n+        Path modelsPath = ApplicationPackage.MODELS_DIR.append(path);\n+\n+        if ((file = getFile(path)).exists()) {\n+            return file.createInputStream();\n+        }\n+        if ((file = getFile(modelsPath)).exists()) {\n+            return file.createInputStream();\n+        }\n+        if ((reference = getFileReference(path)).isPresent()) {\n+            return openFromFileRepository(path, reference.get());\n+        }\n+        if ((reference = getFileReference(modelsPath)).isPresent()) {\n+            return openFromFileRepository(modelsPath, reference.get());\n+        }\n+\n+        throw new IllegalArgumentException(\"Unable to find ONNX model file \\\"\" + path + \"\\\" \" +\n+            \"in application package or file repository.\");\n+    }\n+\n+    private ApplicationFile getFile(Path path) {\n+        return getFile(path, search.applicationPackage());\n+    }\n+\n+    private static ApplicationFile getFile(Path path, ApplicationPackage app) {\n+        return app.getFile(path);\n+    }\n+\n+    private static InputStream openFromFileRepository(Path path, FileReference reference) throws FileNotFoundException {\n+        return new FileInputStream(new File(getFileRepositoryPath(path, reference.value())));\n+    }\n+\n+    public static String getFileRepositoryPath(Path path, String fileReference) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY2Nzg3Ng=="}, "originalCommit": {"oid": "3594ad3bfce131b317d9c073b16eb47a7983be4d"}, "originalPosition": 126}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1117, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}