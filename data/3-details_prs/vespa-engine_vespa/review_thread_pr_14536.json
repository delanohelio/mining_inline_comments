{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNDg0MDIw", "number": 14536, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDo0MDoyOVrOEnFA_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDo0MDoyOVrOEnFA_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDEyMDk1OnYy", "diffSide": "RIGHT", "path": "eval/src/vespa/eval/eval/value_codec.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDo0MDoyOVrOHXeQSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTowNjoyNVrOHXfe0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM3NDk4Ng==", "bodyText": "or is it too small...?", "url": "https://github.com/vespa-engine/vespa/pull/14536#discussion_r494374986", "createdAt": "2020-09-24T14:40:29Z", "author": {"login": "havardpe"}, "path": "eval/src/vespa/eval/eval/value_codec.cpp", "diffHunk": "@@ -154,6 +153,9 @@ struct ContentDecoder {\n     template<typename T>\n     static std::unique_ptr<Value> invoke(nbostream &input, const DecodeState &state, const ValueBuilderFactory &factory) {\n         std::vector<vespalib::stringref> address(state.num_mapped_dims);\n+        if (state.num_blocks * state.subspace_size * sizeof(T) > input.size()) {\n+            throw IllegalStateException(\"serialized input too big\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b3d2d9d86ab752c7546fa0c49dd780d4e24996f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5NTA4OQ==", "bodyText": "Also some information about the sizes in the exception message would be nice.", "url": "https://github.com/vespa-engine/vespa/pull/14536#discussion_r494395089", "createdAt": "2020-09-24T15:06:25Z", "author": {"login": "geirst"}, "path": "eval/src/vespa/eval/eval/value_codec.cpp", "diffHunk": "@@ -154,6 +153,9 @@ struct ContentDecoder {\n     template<typename T>\n     static std::unique_ptr<Value> invoke(nbostream &input, const DecodeState &state, const ValueBuilderFactory &factory) {\n         std::vector<vespalib::stringref> address(state.num_mapped_dims);\n+        if (state.num_blocks * state.subspace_size * sizeof(T) > input.size()) {\n+            throw IllegalStateException(\"serialized input too big\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM3NDk4Ng=="}, "originalCommit": {"oid": "6b3d2d9d86ab752c7546fa0c49dd780d4e24996f"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1314, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}