{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2MDM5NTkw", "number": 13207, "title": "Use a smart allocator for allocating memory for large 'long' lived", "bodyText": "vectors. Large vectors will be allocated directly with mmap.\nThis cancels the main reason for using vespalib::Array.\n@vekterli and @toregge PR\n@geirst FYI", "createdAt": "2020-05-11T11:19:15Z", "url": "https://github.com/vespa-engine/vespa/pull/13207", "merged": true, "mergeCommit": {"oid": "d4b7118d3632acdd9ca6518b3bfcb4dec5caefee"}, "closed": true, "closedAt": "2020-05-11T14:35:50Z", "author": {"login": "baldersheim"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgNvqUgH2gAyNDE2MDM5NTkwOmVmZTg0YjBmMmMzNzIwZTk4YTI2YTUwOWZkNzBhOWUyMzA3ZTE0ZGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgQnovAH2gAyNDE2MDM5NTkwOjhhMWE3M2ZjYjI4YTU0OGI1ZDMyNjZhYjQ1ZjIzNmI5MDMzYzM5YmE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "efe84b0f2c3720e98a26a509fd70a9e2307e14db", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/efe84b0f2c3720e98a26a509fd70a9e2307e14db", "committedDate": "2020-05-11T11:12:29Z", "message": "Use a smart allocator for allocating memory for large 'long' lived\nvectors. Large vectors will be allocated directly with mmap.\nThis cancels the main reason for using vespalib::Array."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MDk2MjQy", "url": "https://github.com/vespa-engine/vespa/pull/13207#pullrequestreview-409096242", "createdAt": "2020-05-11T11:44:05Z", "commit": {"oid": "efe84b0f2c3720e98a26a509fd70a9e2307e14db"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTo0NDowNVrOGTYtlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjoyMTozNlrOGTZ2VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MTAxNA==", "bodyText": "This file doesn't include any headers for required alloc types", "url": "https://github.com/vespa-engine/vespa/pull/13207#discussion_r422981014", "createdAt": "2020-05-11T11:44:05Z", "author": {"login": "vekterli"}, "path": "vespalib/src/vespa/vespalib/stllike/allocator.h", "diffHunk": "@@ -0,0 +1,28 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+namespace vespalib {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe84b0f2c3720e98a26a509fd70a9e2307e14db"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5ODczOA==", "bodyText": "Since this is technically a stateful allocator whose ability to free an allocated pointer depends on the allocator instance the pointer was originally returned from, I think it might be required to add operator== here for testing allocator equivalence. See https://en.cppreference.com/w/cpp/memory/allocator/operator_cmp and https://howardhinnant.github.io/allocator_boilerplate.html#new", "url": "https://github.com/vespa-engine/vespa/pull/13207#discussion_r422998738", "createdAt": "2020-05-11T12:19:58Z", "author": {"login": "vekterli"}, "path": "vespalib/src/vespa/vespalib/stllike/allocator.h", "diffHunk": "@@ -0,0 +1,28 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+namespace vespalib {\n+\n+/**\n+ * std compliant allocator that will use a smart allocator\n+ * that uses mmap prefering huge pages for large allocations.\n+ * This is a good fit for use with std::vector and std::deque.\n+ */\n+template <typename T>\n+class allocator_large {\n+    using PtrAndSize = alloc::MemoryAllocator::PtrAndSize;\n+public:\n+    allocator_large() : _allocator(alloc::MemoryAllocator::select_allocator()) {}\n+    using value_type = T;\n+    T * allocate(std::size_t n) {\n+        return static_cast<T *>(_allocator->alloc(n*sizeof(T)).first);\n+    }\n+    void deallocate(T * p, std::size_t n) {\n+        _allocator->free(p, n*sizeof(T));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe84b0f2c3720e98a26a509fd70a9e2307e14db"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5OTYzNg==", "bodyText": "Could be noexcept", "url": "https://github.com/vespa-engine/vespa/pull/13207#discussion_r422999636", "createdAt": "2020-05-11T12:21:36Z", "author": {"login": "vekterli"}, "path": "vespalib/src/vespa/vespalib/stllike/allocator.h", "diffHunk": "@@ -0,0 +1,28 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+namespace vespalib {\n+\n+/**\n+ * std compliant allocator that will use a smart allocator\n+ * that uses mmap prefering huge pages for large allocations.\n+ * This is a good fit for use with std::vector and std::deque.\n+ */\n+template <typename T>\n+class allocator_large {\n+    using PtrAndSize = alloc::MemoryAllocator::PtrAndSize;\n+public:\n+    allocator_large() : _allocator(alloc::MemoryAllocator::select_allocator()) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe84b0f2c3720e98a26a509fd70a9e2307e14db"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a1a73fcb28a548b5d3266ab45f236b9033c39ba", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/8a1a73fcb28a548b5d3266ab45f236b9033c39ba", "committedDate": "2020-05-11T14:33:26Z", "message": "Implemtent equality operator."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3206, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}