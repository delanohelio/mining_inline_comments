{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NDQwOTI1", "number": 12271, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo1MzowNlrODhaOQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo1MzowNlrODhaOQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzU5MjM0OnYy", "diffSide": "RIGHT", "path": "config/src/main/java/com/yahoo/config/subscription/impl/JRTManagedConnectionPools.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo1MzowNlrOFsH91g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwOTozNzoxM1rOFsMTTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxMjE4Mg==", "bodyText": "Won't count be 2 then for a newly created CountedPool? So ContedPool should either start count on 0 or only increment in this place when countedPool is not null?", "url": "https://github.com/vespa-engine/vespa/pull/12271#discussion_r381812182", "createdAt": "2020-02-20T06:53:06Z", "author": {"login": "hmusum"}, "path": "config/src/main/java/com/yahoo/config/subscription/impl/JRTManagedConnectionPools.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.yahoo.config.subscription.impl;\n+\n+import com.yahoo.config.subscription.ConfigSourceSet;\n+import com.yahoo.vespa.config.JRTConnectionPool;\n+import com.yahoo.vespa.config.TimingValues;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.TimeUnit;\n+\n+public class JRTManagedConnectionPools {\n+    private static class JRTSourceThreadFactory implements ThreadFactory {\n+        @Override\n+        public Thread newThread(Runnable runnable) {\n+            Thread t = new Thread(runnable, String.format(\"jrt-config-requester-%d\", System.currentTimeMillis()));\n+            // We want a daemon thread to avoid hanging threads in case something goes wrong in the config system\n+            t.setDaemon(true);\n+            return t;\n+        }\n+    }\n+    private static class CountedPool {\n+        long count;\n+        final JRTConnectionPool pool;\n+        final ScheduledThreadPoolExecutor scheduler = new ScheduledThreadPoolExecutor(1, new JRTSourceThreadFactory());\n+        CountedPool(JRTConnectionPool requester) {\n+            this.pool = requester;\n+            count = 1;\n+        }\n+    }\n+    private Map<ConfigSourceSet, CountedPool> pools = new HashMap<>();\n+\n+    public synchronized JRTConfigRequester acquire(ConfigSourceSet sourceSet, TimingValues timingValues) {\n+        CountedPool countedPool = pools.get(sourceSet);\n+        if (countedPool == null) {\n+            countedPool = new CountedPool(new JRTConnectionPool(sourceSet));\n+            pools.put(sourceSet, countedPool);\n+        }\n+        countedPool.count++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7323d266da551382f08582a049aa90720c840f4a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg4MzIxNQ==", "bodyText": "Good catch. Test added and fixed.", "url": "https://github.com/vespa-engine/vespa/pull/12271#discussion_r381883215", "createdAt": "2020-02-20T09:37:13Z", "author": {"login": "baldersheim"}, "path": "config/src/main/java/com/yahoo/config/subscription/impl/JRTManagedConnectionPools.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.yahoo.config.subscription.impl;\n+\n+import com.yahoo.config.subscription.ConfigSourceSet;\n+import com.yahoo.vespa.config.JRTConnectionPool;\n+import com.yahoo.vespa.config.TimingValues;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.TimeUnit;\n+\n+public class JRTManagedConnectionPools {\n+    private static class JRTSourceThreadFactory implements ThreadFactory {\n+        @Override\n+        public Thread newThread(Runnable runnable) {\n+            Thread t = new Thread(runnable, String.format(\"jrt-config-requester-%d\", System.currentTimeMillis()));\n+            // We want a daemon thread to avoid hanging threads in case something goes wrong in the config system\n+            t.setDaemon(true);\n+            return t;\n+        }\n+    }\n+    private static class CountedPool {\n+        long count;\n+        final JRTConnectionPool pool;\n+        final ScheduledThreadPoolExecutor scheduler = new ScheduledThreadPoolExecutor(1, new JRTSourceThreadFactory());\n+        CountedPool(JRTConnectionPool requester) {\n+            this.pool = requester;\n+            count = 1;\n+        }\n+    }\n+    private Map<ConfigSourceSet, CountedPool> pools = new HashMap<>();\n+\n+    public synchronized JRTConfigRequester acquire(ConfigSourceSet sourceSet, TimingValues timingValues) {\n+        CountedPool countedPool = pools.get(sourceSet);\n+        if (countedPool == null) {\n+            countedPool = new CountedPool(new JRTConnectionPool(sourceSet));\n+            pools.put(sourceSet, countedPool);\n+        }\n+        countedPool.count++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxMjE4Mg=="}, "originalCommit": {"oid": "7323d266da551382f08582a049aa90720c840f4a"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2429, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}