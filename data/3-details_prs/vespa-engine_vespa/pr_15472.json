{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NTIzOTQ4", "number": 15472, "title": "Bjorncs/config convergence checker", "bodyText": "I confirm that this contribution is made under the terms of the license found in the root directory of this repository's source tree and that I have the authority necessary to make this contribution on behalf of its copyright owner.", "createdAt": "2020-11-25T15:25:36Z", "url": "https://github.com/vespa-engine/vespa/pull/15472", "merged": true, "mergeCommit": {"oid": "9b6a40a34d92bb723587b55fad9b4954dc5f275d"}, "closed": true, "closedAt": "2020-11-25T15:34:38Z", "author": {"login": "bjorncs"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdf_wfIAH2gAyNTI3NTIzOTQ4OjkzZTg4N2NiMmQ3YWUwMTc3ZWI3MDQ1MGI1MDAwN2IxYmZmNjY5ODU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgATQtgFqTUzODYyNzQxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "93e887cb2d7ae0177eb70450b50007b1bff66985", "author": {"user": {"login": "bjorncs", "name": "Bj\u00f8rn Christian Seime"}}, "url": "https://github.com/vespa-engine/vespa/commit/93e887cb2d7ae0177eb70450b50007b1bff66985", "committedDate": "2020-11-25T15:05:52Z", "message": "Rewrite config convergence checker to use async http client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41c6840d3cd4f164d582794af18932c33ef4db12", "author": {"user": {"login": "bjorncs", "name": "Bj\u00f8rn Christian Seime"}}, "url": "https://github.com/vespa-engine/vespa/commit/41c6840d3cd4f164d582794af18932c33ef4db12", "committedDate": "2020-11-25T15:19:30Z", "message": "Don't reuse clients\n\nThe unit tests never closes the config convergence checker, causing stale connections to eventually exhaust the limit for max open files."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf5ea2ca2f6c897c8fb888a3bbe7fd86bd162af6", "author": {"user": {"login": "bjorncs", "name": "Bj\u00f8rn Christian Seime"}}, "url": "https://github.com/vespa-engine/vespa/commit/cf5ea2ca2f6c897c8fb888a3bbe7fd86bd162af6", "committedDate": "2020-11-25T15:22:16Z", "message": "Specify that connection manager is not shared"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NjE4MjM1", "url": "https://github.com/vespa-engine/vespa/pull/15472#pullrequestreview-538618235", "createdAt": "2020-11-25T15:34:26Z", "commit": {"oid": "cf5ea2ca2f6c897c8fb888a3bbe7fd86bd162af6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NjI3NDEw", "url": "https://github.com/vespa-engine/vespa/pull/15472#pullrequestreview-538627410", "createdAt": "2020-11-25T15:43:51Z", "commit": {"oid": "93e887cb2d7ae0177eb70450b50007b1bff66985"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNTo0Mzo1MVrOH55P-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNTo0Mzo1MVrOH55P-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ2ODg1OA==", "bodyText": "Level.FINE", "url": "https://github.com/vespa-engine/vespa/pull/15472#discussion_r530468858", "createdAt": "2020-11-25T15:43:51Z", "author": {"login": "jonmv"}, "path": "configserver/src/main/java/com/yahoo/vespa/config/server/application/ConfigConvergenceChecker.java", "diffHunk": "@@ -108,46 +117,67 @@ public JSONResponse getServiceConfigGenerationResponse(Application application,\n \n     @Override\n     public void deconstruct() {\n-        clientBuilderFactory.close();\n-    }\n-\n-    @Path(statePath)\n-    public interface StateApi {\n-        @Path(configSubPath)\n-        @GET\n-        JsonNode config();\n-    }\n-\n-    public interface StateApiFactory {\n-        StateApi createStateApi(Client client, URI serviceUri);\n+        try {\n+            client.close();\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n     }\n \n     /** Gets service generation for a list of services (in parallel). */\n     private Map<ServiceInfo, Long> getServiceGenerations(List<ServiceInfo> services, Duration timeout) {\n-        return services.parallelStream()\n-                       .collect(Collectors.toMap(service -> service,\n-                                                 service -> {\n-                                                     try {\n-                                                         return getServiceGeneration(URI.create(\"http://\" + service.getHostName()\n-                                                                                                + \":\" + getStatePort(service).get()), timeout);\n-                                                     }\n-                                                     catch (ProcessingException e) { // Cannot connect to service to determine service generation\n-                                                         return -1L;\n-                                                     }\n-                                                 },\n-                                                 (v1, v2) -> { throw new IllegalStateException(\"Duplicate keys for values '\" + v1 + \"' and '\" + v2 + \"'.\"); },\n-                                                 LinkedHashMap::new\n-                                                ));\n+        List<CompletableFuture<Void>> inprogressRequests = new ArrayList<>();\n+        ConcurrentMap<ServiceInfo, Long> temporaryResult = new ConcurrentHashMap<>();\n+        for (ServiceInfo service : services) {\n+            int statePort = getStatePort(service).orElse(0);\n+            if (statePort <= 0) continue;\n+\n+            URI uri = URI.create(\"http://\" + service.getHostName() + \":\" + statePort);\n+            CompletableFuture<Void> inprogressRequest = getServiceGeneration(uri, timeout)\n+                    .handle((result, error) -> {\n+                        if (result != null) {\n+                            temporaryResult.put(service, result);\n+                        } else {\n+                            log.log(\n+                                    LogLevel.DEBUG,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93e887cb2d7ae0177eb70450b50007b1bff66985"}, "originalPosition": 165}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1884, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}