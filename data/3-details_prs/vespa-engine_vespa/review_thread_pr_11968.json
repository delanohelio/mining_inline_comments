{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NTYyMDQ4", "number": 11968, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNTo1NjowNVrODa7bcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNTo1NjowNVrODa7bcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NTYzMjQ4OnYy", "diffSide": "RIGHT", "path": "document/src/vespa/document/serialization/vespadocumentdeserializer.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNTo1NjowNVrOFiH1MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNjoyMjowNlrOFiI0LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMyNDIwOA==", "bodyText": "Spurious line break?", "url": "https://github.com/vespa-engine/vespa/pull/11968#discussion_r371324208", "createdAt": "2020-01-27T15:56:05Z", "author": {"login": "vekterli"}, "path": "document/src/vespa/document/serialization/vespadocumentdeserializer.cpp", "diffHunk": "@@ -279,7 +279,8 @@ void readFieldInfo(nbostream& input, SerializableArray::EntryMap & field_info) {\n     for (size_t i = 0; i < field_count; ++i) {\n         const uint32_t id = getInt1_4Bytes(input);\n         const uint32_t size = getInt2_4_8Bytes(input);\n-        field_info.emplace_back(id, size, offset);\n+        field_info.emplace_back(id,\n+                size, offset);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53cc0b26079e41390588a39553355d34fa368ffc"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM0MDMzMw==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/11968#discussion_r371340333", "createdAt": "2020-01-27T16:22:06Z", "author": {"login": "baldersheim"}, "path": "document/src/vespa/document/serialization/vespadocumentdeserializer.cpp", "diffHunk": "@@ -279,7 +279,8 @@ void readFieldInfo(nbostream& input, SerializableArray::EntryMap & field_info) {\n     for (size_t i = 0; i < field_count; ++i) {\n         const uint32_t id = getInt1_4Bytes(input);\n         const uint32_t size = getInt2_4_8Bytes(input);\n-        field_info.emplace_back(id, size, offset);\n+        field_info.emplace_back(id,\n+                size, offset);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMyNDIwOA=="}, "originalCommit": {"oid": "53cc0b26079e41390588a39553355d34fa368ffc"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2541, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}