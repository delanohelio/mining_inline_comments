{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0OTMxNzM4", "number": 13185, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMDoyMToyMVrOD6l4qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxMToxOTo1MFrOD62s9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzY0NzEzOnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMDoyMToyMVrOGSg13g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMzozMTozMFrOGS2Z_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA2NTYzMA==", "bodyText": "This should check if the right one ends before this one, since the right one could start before this one and also end before this one while still having greater size (should also add unit test for this case).", "url": "https://github.com/vespa-engine/vespa/pull/13185#discussion_r422065630", "createdAt": "2020-05-08T10:21:21Z", "author": {"login": "havardpe"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "diffHunk": "@@ -178,8 +178,17 @@ void\n BitVector::orWith(const BitVector & right)\n {\n     verifyContains(*this, right);\n-    IAccelrated::getAccelrator().orBit(getActiveStart(), right.getWordIndex(getStartIndex()), getActiveBytes());\n \n+    if (right.size() < size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42b06208f31a120009adade2238d34ce228ed18"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxNDkxNg==", "bodyText": "I don't think this is a problem, since size() includes the portion before getStartIndex().\ngetEndIndex() doesn't make sense, and should be removed.", "url": "https://github.com/vespa-engine/vespa/pull/13185#discussion_r422414916", "createdAt": "2020-05-08T23:12:12Z", "author": {"login": "toregge"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "diffHunk": "@@ -178,8 +178,17 @@ void\n BitVector::orWith(const BitVector & right)\n {\n     verifyContains(*this, right);\n-    IAccelrated::getAccelrator().orBit(getActiveStart(), right.getWordIndex(getStartIndex()), getActiveBytes());\n \n+    if (right.size() < size()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA2NTYzMA=="}, "originalCommit": {"oid": "b42b06208f31a120009adade2238d34ce228ed18"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxODk0Mw==", "bodyText": "That was my conclusion after looking at the details. Removed getEndIndex.", "url": "https://github.com/vespa-engine/vespa/pull/13185#discussion_r422418943", "createdAt": "2020-05-08T23:31:30Z", "author": {"login": "baldersheim"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "diffHunk": "@@ -178,8 +178,17 @@ void\n BitVector::orWith(const BitVector & right)\n {\n     verifyContains(*this, right);\n-    IAccelrated::getAccelrator().orBit(getActiveStart(), right.getWordIndex(getStartIndex()), getActiveBytes());\n \n+    if (right.size() < size()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA2NTYzMA=="}, "originalCommit": {"oid": "b42b06208f31a120009adade2238d34ce228ed18"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTgyNzA3OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjozMTozNVrOGS1jkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMzozNzo0N1rOGS2e4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQwNTAwOQ==", "bodyText": "Consider adjusting exception message to match new semantics.", "url": "https://github.com/vespa-engine/vespa/pull/13185#discussion_r422405009", "createdAt": "2020-05-08T22:31:35Z", "author": {"login": "toregge"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "diffHunk": "@@ -20,11 +20,11 @@ using vespalib::alloc::Alloc;\n \n namespace {\n \n-void verifyContains(const search::BitVector & a, const search::BitVector & b) __attribute__((noinline));\n+void verifyInclusiveStart(const search::BitVector & a, const search::BitVector & b) __attribute__((noinline));\n \n-void verifyContains(const search::BitVector & a, const search::BitVector & b)\n+void verifyInclusiveStart(const search::BitVector & a, const search::BitVector & b)\n {\n-    if ((a.getStartIndex() < b.getStartIndex()) || (a.size() > b.size())) {\n+    if (a.getStartIndex() < b.getStartIndex()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b071b048ee01b58ef920899a64e928bbb0d88cf"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyMDE5Mw==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/13185#discussion_r422420193", "createdAt": "2020-05-08T23:37:47Z", "author": {"login": "baldersheim"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "diffHunk": "@@ -20,11 +20,11 @@ using vespalib::alloc::Alloc;\n \n namespace {\n \n-void verifyContains(const search::BitVector & a, const search::BitVector & b) __attribute__((noinline));\n+void verifyInclusiveStart(const search::BitVector & a, const search::BitVector & b) __attribute__((noinline));\n \n-void verifyContains(const search::BitVector & a, const search::BitVector & b)\n+void verifyInclusiveStart(const search::BitVector & a, const search::BitVector & b)\n {\n-    if ((a.getStartIndex() < b.getStartIndex()) || (a.size() > b.size())) {\n+    if (a.getStartIndex() < b.getStartIndex()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQwNTAwOQ=="}, "originalCommit": {"oid": "4b071b048ee01b58ef920899a64e928bbb0d88cf"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTg0Nzk5OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjo0MzowOFrOGS1vzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDo0MTowOVrOGS3NUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQwODE0MA==", "bodyText": "If right.size() is 0 then we get a wraparound and bad memory accesses. Note that bitvector have other methods that fails in a similar manner when size() is 0, e.g. clearIntervalNoInvalidation(), setInterval(), countInterval().", "url": "https://github.com/vespa-engine/vespa/pull/13185#discussion_r422408140", "createdAt": "2020-05-08T22:43:08Z", "author": {"login": "toregge"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "diffHunk": "@@ -177,9 +177,18 @@ BitVector::countInterval(Index start, Index end) const\n void\n BitVector::orWith(const BitVector & right)\n {\n-    verifyContains(*this, right);\n-    IAccelrated::getAccelrator().orBit(getActiveStart(), right.getWordIndex(getStartIndex()), getActiveBytes());\n+    verifyInclusiveStart(*this, right);\n \n+    if (right.size() < size()) {\n+        ssize_t commonBytes = numActiveBytes(getStartIndex(), right.size()) - sizeof(Word);\n+        if (commonBytes > 0) {\n+            IAccelrated::getAccelrator().orBit(getActiveStart(), right.getWordIndex(getStartIndex()), commonBytes);\n+        }\n+        Index last(right.size() - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b071b048ee01b58ef920899a64e928bbb0d88cf"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMjA4MQ==", "bodyText": "Guard added", "url": "https://github.com/vespa-engine/vespa/pull/13185#discussion_r422432081", "createdAt": "2020-05-09T00:41:09Z", "author": {"login": "baldersheim"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "diffHunk": "@@ -177,9 +177,18 @@ BitVector::countInterval(Index start, Index end) const\n void\n BitVector::orWith(const BitVector & right)\n {\n-    verifyContains(*this, right);\n-    IAccelrated::getAccelrator().orBit(getActiveStart(), right.getWordIndex(getStartIndex()), getActiveBytes());\n+    verifyInclusiveStart(*this, right);\n \n+    if (right.size() < size()) {\n+        ssize_t commonBytes = numActiveBytes(getStartIndex(), right.size()) - sizeof(Word);\n+        if (commonBytes > 0) {\n+            IAccelrated::getAccelrator().orBit(getActiveStart(), right.getWordIndex(getStartIndex()), commonBytes);\n+        }\n+        Index last(right.size() - 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQwODE0MA=="}, "originalCommit": {"oid": "4b071b048ee01b58ef920899a64e928bbb0d88cf"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTg2NTI4OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjo1NDozNFrOGS16fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDo0Mjo0NVrOGS3OZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxMDg3OQ==", "bodyText": "Note that repairEnds() fails to set guard bit if size() is 0. Although this should be harmless, since the guard bit should already have been set.", "url": "https://github.com/vespa-engine/vespa/pull/13185#discussion_r422410879", "createdAt": "2020-05-08T22:54:34Z", "author": {"login": "toregge"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "diffHunk": "@@ -199,23 +208,36 @@ BitVector::repairEnds()\n void\n BitVector::andWith(const BitVector & right)\n {\n-    verifyContains(*this, right);\n+    verifyInclusiveStart(*this, right);\n \n-    IAccelrated::getAccelrator().andBit(getActiveStart(), right.getWordIndex(getStartIndex()), getActiveBytes());\n+    uint32_t commonBytes = std::min(getActiveBytes(), numActiveBytes(getStartIndex(), right.size()));\n+    IAccelrated::getAccelrator().andBit(getActiveStart(), right.getWordIndex(getStartIndex()), commonBytes);\n+    if (right.size() < size()) {\n+        clearInterval(right.size(), size());\n+    }\n \n-    setGuardBit();\n+    repairEnds();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b071b048ee01b58ef920899a64e928bbb0d88cf"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMjM1OA==", "bodyText": "Not guarding setGuardBit.", "url": "https://github.com/vespa-engine/vespa/pull/13185#discussion_r422432358", "createdAt": "2020-05-09T00:42:45Z", "author": {"login": "baldersheim"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "diffHunk": "@@ -199,23 +208,36 @@ BitVector::repairEnds()\n void\n BitVector::andWith(const BitVector & right)\n {\n-    verifyContains(*this, right);\n+    verifyInclusiveStart(*this, right);\n \n-    IAccelrated::getAccelrator().andBit(getActiveStart(), right.getWordIndex(getStartIndex()), getActiveBytes());\n+    uint32_t commonBytes = std::min(getActiveBytes(), numActiveBytes(getStartIndex(), right.size()));\n+    IAccelrated::getAccelrator().andBit(getActiveStart(), right.getWordIndex(getStartIndex()), commonBytes);\n+    if (right.size() < size()) {\n+        clearInterval(right.size(), size());\n+    }\n \n-    setGuardBit();\n+    repairEnds();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxMDg3OQ=="}, "originalCommit": {"oid": "4b071b048ee01b58ef920899a64e928bbb0d88cf"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTg3MzQyOnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMzowMDowM1rOGS1_dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDo0Mjo1OFrOGS3Oig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxMjE1MA==", "bodyText": "Wraparound when right.size() is 0, followed by bad memory access.", "url": "https://github.com/vespa-engine/vespa/pull/13185#discussion_r422412150", "createdAt": "2020-05-08T23:00:03Z", "author": {"login": "toregge"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "diffHunk": "@@ -199,23 +208,36 @@ BitVector::repairEnds()\n void\n BitVector::andWith(const BitVector & right)\n {\n-    verifyContains(*this, right);\n+    verifyInclusiveStart(*this, right);\n \n-    IAccelrated::getAccelrator().andBit(getActiveStart(), right.getWordIndex(getStartIndex()), getActiveBytes());\n+    uint32_t commonBytes = std::min(getActiveBytes(), numActiveBytes(getStartIndex(), right.size()));\n+    IAccelrated::getAccelrator().andBit(getActiveStart(), right.getWordIndex(getStartIndex()), commonBytes);\n+    if (right.size() < size()) {\n+        clearInterval(right.size(), size());\n+    }\n \n-    setGuardBit();\n+    repairEnds();\n     invalidateCachedCount();\n }\n \n \n void\n BitVector::andNotWith(const BitVector& right)\n {\n-    verifyContains(*this, right);\n+    verifyInclusiveStart(*this, right);\n \n-    IAccelrated::getAccelrator().andNotBit(getActiveStart(), right.getWordIndex(getStartIndex()), getActiveBytes());\n+    if (right.size() < size()) {\n+        ssize_t commonBytes = numActiveBytes(getStartIndex(), right.size()) - sizeof(Word);\n+        if (commonBytes > 0) {\n+            IAccelrated::getAccelrator().andNotBit(getActiveStart(), right.getWordIndex(getStartIndex()), commonBytes);\n+        }\n+        Index last(right.size() - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b071b048ee01b58ef920899a64e928bbb0d88cf"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMjM5NA==", "bodyText": "Guard added", "url": "https://github.com/vespa-engine/vespa/pull/13185#discussion_r422432394", "createdAt": "2020-05-09T00:42:58Z", "author": {"login": "baldersheim"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "diffHunk": "@@ -199,23 +208,36 @@ BitVector::repairEnds()\n void\n BitVector::andWith(const BitVector & right)\n {\n-    verifyContains(*this, right);\n+    verifyInclusiveStart(*this, right);\n \n-    IAccelrated::getAccelrator().andBit(getActiveStart(), right.getWordIndex(getStartIndex()), getActiveBytes());\n+    uint32_t commonBytes = std::min(getActiveBytes(), numActiveBytes(getStartIndex(), right.size()));\n+    IAccelrated::getAccelrator().andBit(getActiveStart(), right.getWordIndex(getStartIndex()), commonBytes);\n+    if (right.size() < size()) {\n+        clearInterval(right.size(), size());\n+    }\n \n-    setGuardBit();\n+    repairEnds();\n     invalidateCachedCount();\n }\n \n \n void\n BitVector::andNotWith(const BitVector& right)\n {\n-    verifyContains(*this, right);\n+    verifyInclusiveStart(*this, right);\n \n-    IAccelrated::getAccelrator().andNotBit(getActiveStart(), right.getWordIndex(getStartIndex()), getActiveBytes());\n+    if (right.size() < size()) {\n+        ssize_t commonBytes = numActiveBytes(getStartIndex(), right.size()) - sizeof(Word);\n+        if (commonBytes > 0) {\n+            IAccelrated::getAccelrator().andNotBit(getActiveStart(), right.getWordIndex(getStartIndex()), commonBytes);\n+        }\n+        Index last(right.size() - 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxMjE1MA=="}, "originalCommit": {"oid": "4b071b048ee01b58ef920899a64e928bbb0d88cf"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDAzNjAzOnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMTowNzowNVrOGS3aJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxMDozMzoxN1rOGS6LaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzNTM2Nw==", "bodyText": "Consider also checking that org.getStartIndex() is zero or adjusting constructor for AllocatedBitVector to handle\nthat case.", "url": "https://github.com/vespa-engine/vespa/pull/13185#discussion_r422435367", "createdAt": "2020-05-09T01:07:05Z", "author": {"login": "toregge"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "diffHunk": "@@ -351,8 +351,8 @@ BitVector::create(Index start, Index end)\n BitVector::UP\n BitVector::create(const BitVector & org, Index start, Index end)\n {\n-    return (start == 0)\n-           ? create(end)\n+    return ((start == 0) && (end == org.size()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1435d93b3d22f5c3819761246c564d6669cac54b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4MDc0NQ==", "bodyText": "Fixed using first option.", "url": "https://github.com/vespa-engine/vespa/pull/13185#discussion_r422480745", "createdAt": "2020-05-09T10:33:17Z", "author": {"login": "baldersheim"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "diffHunk": "@@ -351,8 +351,8 @@ BitVector::create(Index start, Index end)\n BitVector::UP\n BitVector::create(const BitVector & org, Index start, Index end)\n {\n-    return (start == 0)\n-           ? create(end)\n+    return ((start == 0) && (end == org.size()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzNTM2Nw=="}, "originalCommit": {"oid": "1435d93b3d22f5c3819761246c564d6669cac54b"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDA0Mjc1OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMToxNjozOVrOGS3d9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxMDozMzo1MlrOGS6Llw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzNjM0MQ==", "bodyText": "This can be simplified if end is set to std::min(end, size()) before checking for start >= end.\nif end or size() is  0 then start >= end will evaluate to true, triggering the early return.", "url": "https://github.com/vespa-engine/vespa/pull/13185#discussion_r422436341", "createdAt": "2020-05-09T01:16:39Z", "author": {"login": "toregge"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "diffHunk": "@@ -91,9 +91,10 @@ BitVector::clearInterval(Index start, Index end)\n }\n \n void\n-BitVector::clearIntervalNoInvalidation(Index start, Index end)\n+BitVector::clearIntervalNoInvalidation(Index start_in, Index end)\n {\n-    if (start >= end) { return; }\n+    Index start = std::max(start_in, getStartIndex());\n+    if (start >= end || end == 0 || size() == 0) { return; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa23dc9f5530702d9f281b62e04ef8f4c3793c5"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4MDc5MQ==", "bodyText": "Refactored range checking.", "url": "https://github.com/vespa-engine/vespa/pull/13185#discussion_r422480791", "createdAt": "2020-05-09T10:33:52Z", "author": {"login": "baldersheim"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "diffHunk": "@@ -91,9 +91,10 @@ BitVector::clearInterval(Index start, Index end)\n }\n \n void\n-BitVector::clearIntervalNoInvalidation(Index start, Index end)\n+BitVector::clearIntervalNoInvalidation(Index start_in, Index end)\n {\n-    if (start >= end) { return; }\n+    Index start = std::max(start_in, getStartIndex());\n+    if (start >= end || end == 0 || size() == 0) { return; }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzNjM0MQ=="}, "originalCommit": {"oid": "9fa23dc9f5530702d9f281b62e04ef8f4c3793c5"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDQwMjIyOnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxMToxODo1OVrOGS6Z_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxMjowMToxMlrOGS6l5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4NDQ3OQ==", "bodyText": "Consider adding curly braces around return 0.", "url": "https://github.com/vespa-engine/vespa/pull/13185#discussion_r422484479", "createdAt": "2020-05-09T11:18:59Z", "author": {"login": "toregge"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "diffHunk": "@@ -133,28 +133,28 @@ BitVector::setInterval(Index start_in, Index end)\n BitVector::Index\n BitVector::count() const\n {\n-    return countInterval(getStartIndex(), size());\n+    return countInterval(Range(getStartIndex(), size()));\n }\n \n BitVector::Index\n-BitVector::countInterval(Index start_in, Index end) const\n+BitVector::countInterval(Range range_in) const\n {\n-    Index start = std::max(start_in, getStartIndex());\n-    if (start >= end || end == 0 || size() == 0) { return 0; }\n+    Range range = sanitize(range_in);\n+    if ( ! range.validNonZero()) return 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68709adeaefb2641974fc1e5d951e99254f001dd"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4NzUyNg==", "bodyText": "Done", "url": "https://github.com/vespa-engine/vespa/pull/13185#discussion_r422487526", "createdAt": "2020-05-09T12:01:12Z", "author": {"login": "baldersheim"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "diffHunk": "@@ -133,28 +133,28 @@ BitVector::setInterval(Index start_in, Index end)\n BitVector::Index\n BitVector::count() const\n {\n-    return countInterval(getStartIndex(), size());\n+    return countInterval(Range(getStartIndex(), size()));\n }\n \n BitVector::Index\n-BitVector::countInterval(Index start_in, Index end) const\n+BitVector::countInterval(Range range_in) const\n {\n-    Index start = std::max(start_in, getStartIndex());\n-    if (start >= end || end == 0 || size() == 0) { return 0; }\n+    Range range = sanitize(range_in);\n+    if ( ! range.validNonZero()) return 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4NDQ3OQ=="}, "originalCommit": {"oid": "68709adeaefb2641974fc1e5d951e99254f001dd"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDQwMjM4OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxMToxOTozMlrOGS6aFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxMjowMTowMlrOGS6l1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4NDUwMA==", "bodyText": "Consider adding curly braces around return statement.", "url": "https://github.com/vespa-engine/vespa/pull/13185#discussion_r422484500", "createdAt": "2020-05-09T11:19:32Z", "author": {"login": "toregge"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "diffHunk": "@@ -85,46 +85,46 @@ BitVector::clear()\n void\n BitVector::clearInterval(Index start, Index end)\n {\n-    clearIntervalNoInvalidation(start, end);\n+    clearIntervalNoInvalidation(Range(start, end));\n \n     invalidateCachedCount();\n }\n \n void\n-BitVector::clearIntervalNoInvalidation(Index start_in, Index end)\n+BitVector::clearIntervalNoInvalidation(Range range_in)\n {\n-    Index start = std::max(start_in, getStartIndex());\n-    if (start >= end || end == 0 || size() == 0) { return; }\n+    Range range = sanitize(range_in);\n+    if ( ! range.validNonZero()) return;\n \n-    Index last = std::min(end, size()) - 1;\n-    Index startw = wordNum(start);\n+    Index last = range.end() - 1;\n+    Index startw = wordNum(range.start());\n     Index endw = wordNum(last);\n \n     if (endw > startw) {\n-        _words[startw++] &= startBits(start);\n+        _words[startw++] &= startBits(range.start());\n         memset(_words+startw, 0, sizeof(*_words)*(endw-startw));\n         _words[endw] &= endBits(last);\n     } else {\n-        _words[startw] &= (startBits(start) | endBits(last));\n+        _words[startw] &= (startBits(range.start()) | endBits(last));\n     }\n }\n \n void\n-BitVector::setInterval(Index start_in, Index end)\n+BitVector::setInterval(Index start_in, Index end_in)\n {\n-    Index start = std::max(start_in, getStartIndex());\n-    if (start >= end || end == 0 || size() == 0) { return; }\n+    Range range = sanitize(Range(start_in, end_in));\n+    if ( ! range.validNonZero()) return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68709adeaefb2641974fc1e5d951e99254f001dd"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4NzUxMA==", "bodyText": "Done", "url": "https://github.com/vespa-engine/vespa/pull/13185#discussion_r422487510", "createdAt": "2020-05-09T12:01:02Z", "author": {"login": "baldersheim"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "diffHunk": "@@ -85,46 +85,46 @@ BitVector::clear()\n void\n BitVector::clearInterval(Index start, Index end)\n {\n-    clearIntervalNoInvalidation(start, end);\n+    clearIntervalNoInvalidation(Range(start, end));\n \n     invalidateCachedCount();\n }\n \n void\n-BitVector::clearIntervalNoInvalidation(Index start_in, Index end)\n+BitVector::clearIntervalNoInvalidation(Range range_in)\n {\n-    Index start = std::max(start_in, getStartIndex());\n-    if (start >= end || end == 0 || size() == 0) { return; }\n+    Range range = sanitize(range_in);\n+    if ( ! range.validNonZero()) return;\n \n-    Index last = std::min(end, size()) - 1;\n-    Index startw = wordNum(start);\n+    Index last = range.end() - 1;\n+    Index startw = wordNum(range.start());\n     Index endw = wordNum(last);\n \n     if (endw > startw) {\n-        _words[startw++] &= startBits(start);\n+        _words[startw++] &= startBits(range.start());\n         memset(_words+startw, 0, sizeof(*_words)*(endw-startw));\n         _words[endw] &= endBits(last);\n     } else {\n-        _words[startw] &= (startBits(start) | endBits(last));\n+        _words[startw] &= (startBits(range.start()) | endBits(last));\n     }\n }\n \n void\n-BitVector::setInterval(Index start_in, Index end)\n+BitVector::setInterval(Index start_in, Index end_in)\n {\n-    Index start = std::max(start_in, getStartIndex());\n-    if (start >= end || end == 0 || size() == 0) { return; }\n+    Range range = sanitize(Range(start_in, end_in));\n+    if ( ! range.validNonZero()) return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4NDUwMA=="}, "originalCommit": {"oid": "68709adeaefb2641974fc1e5d951e99254f001dd"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDQwMjQ1OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxMToxOTo1MFrOGS6aHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxMjowMDo1M1rOGS6lyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4NDUwOQ==", "bodyText": "Consider adding curly braces around return statement.", "url": "https://github.com/vespa-engine/vespa/pull/13185#discussion_r422484509", "createdAt": "2020-05-09T11:19:50Z", "author": {"login": "toregge"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "diffHunk": "@@ -85,46 +85,46 @@ BitVector::clear()\n void\n BitVector::clearInterval(Index start, Index end)\n {\n-    clearIntervalNoInvalidation(start, end);\n+    clearIntervalNoInvalidation(Range(start, end));\n \n     invalidateCachedCount();\n }\n \n void\n-BitVector::clearIntervalNoInvalidation(Index start_in, Index end)\n+BitVector::clearIntervalNoInvalidation(Range range_in)\n {\n-    Index start = std::max(start_in, getStartIndex());\n-    if (start >= end || end == 0 || size() == 0) { return; }\n+    Range range = sanitize(range_in);\n+    if ( ! range.validNonZero()) return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68709adeaefb2641974fc1e5d951e99254f001dd"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4NzQ5OA==", "bodyText": "Done", "url": "https://github.com/vespa-engine/vespa/pull/13185#discussion_r422487498", "createdAt": "2020-05-09T12:00:53Z", "author": {"login": "baldersheim"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.cpp", "diffHunk": "@@ -85,46 +85,46 @@ BitVector::clear()\n void\n BitVector::clearInterval(Index start, Index end)\n {\n-    clearIntervalNoInvalidation(start, end);\n+    clearIntervalNoInvalidation(Range(start, end));\n \n     invalidateCachedCount();\n }\n \n void\n-BitVector::clearIntervalNoInvalidation(Index start_in, Index end)\n+BitVector::clearIntervalNoInvalidation(Range range_in)\n {\n-    Index start = std::max(start_in, getStartIndex());\n-    if (start >= end || end == 0 || size() == 0) { return; }\n+    Range range = sanitize(range_in);\n+    if ( ! range.validNonZero()) return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4NDUwOQ=="}, "originalCommit": {"oid": "68709adeaefb2641974fc1e5d951e99254f001dd"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1615, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}