{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMzUzNjQ4", "number": 13533, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMDoyNzo1N1rOEEPHoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjo0ODoyOVrOEER2QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODc3NDczOnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/tensor/inv_log_level_generator.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMDoyNzo1N1rOGhuwiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMDoyNzo1N1rOGhuwiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAyMjI4Mw==", "bodyText": "Consider guarding only the random call, log might be expensive.", "url": "https://github.com/vespa-engine/vespa/pull/13533#discussion_r438022283", "createdAt": "2020-06-10T10:27:57Z", "author": {"login": "baldersheim"}, "path": "searchlib/src/vespa/searchlib/tensor/inv_log_level_generator.h", "diffHunk": "@@ -16,16 +17,19 @@ namespace search::tensor {\n \n class InvLogLevelGenerator : public RandomLevelGenerator {\n     std::mt19937_64 _rng;\n+    std::mutex _mutex;\n     std::uniform_real_distribution<double> _uniform;\n     double _levelMultiplier;\n public:\n     InvLogLevelGenerator(uint32_t m)\n       : _rng(0x1234deadbeef5678uLL),\n+        _mutex(),\n         _uniform(0.0, 1.0),\n         _levelMultiplier(1.0 / log(1.0 * m))\n     {}\n \n     uint32_t max_level() override {\n+        std::lock_guard<std::mutex> guard(_mutex);\n         double unif = _uniform(_rng);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5960e92dd2bc44ba62b11c9f160b4987d012d754"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODc3Njg0OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/tensor/inv_log_level_generator.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMDoyODozOFrOGhux4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMDoyODozOFrOGhux4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAyMjYyNw==", "bodyText": "add const to signal that it does not change during the lifetime of the object.", "url": "https://github.com/vespa-engine/vespa/pull/13533#discussion_r438022627", "createdAt": "2020-06-10T10:28:38Z", "author": {"login": "baldersheim"}, "path": "searchlib/src/vespa/searchlib/tensor/inv_log_level_generator.h", "diffHunk": "@@ -16,16 +17,19 @@ namespace search::tensor {\n \n class InvLogLevelGenerator : public RandomLevelGenerator {\n     std::mt19937_64 _rng;\n+    std::mutex _mutex;\n     std::uniform_real_distribution<double> _uniform;\n     double _levelMultiplier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5960e92dd2bc44ba62b11c9f160b4987d012d754"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTIyMTc2OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/tensor/inv_log_level_generator.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjo0ODoyOVrOGhzKGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjo0ODoyOVrOGhzKGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA5NDM2Mw==", "bodyText": "I assume reversing of the arguments was intentional .....", "url": "https://github.com/vespa-engine/vespa/pull/13533#discussion_r438094363", "createdAt": "2020-06-10T12:48:29Z", "author": {"login": "baldersheim"}, "path": "searchlib/src/vespa/searchlib/tensor/inv_log_level_generator.h", "diffHunk": "@@ -16,18 +17,25 @@ namespace search::tensor {\n \n class InvLogLevelGenerator : public RandomLevelGenerator {\n     std::mt19937_64 _rng;\n+    std::mutex _mutex;\n     std::uniform_real_distribution<double> _uniform;\n-    double _levelMultiplier;\n+    const double _levelMultiplier;\n+\n+    double get_uniform() {\n+        std::lock_guard<std::mutex> guard(_mutex);\n+        return _uniform(_rng);\n+    }\n public:\n     InvLogLevelGenerator(uint32_t m)\n       : _rng(0x1234deadbeef5678uLL),\n-        _uniform(0.0, 1.0),\n+        _mutex(),\n+        _uniform(1.0, 0.0),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01628464c504010f133f48148ccfbcaa27ce9683"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2022, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}