{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMzc1Mzcx", "number": 15572, "title": "Initial support for backend reindexing visitor functionality", "bodyText": "@geirst @toregge please review\n@jonmv FYI\nIntroduces the concept of a read-for-write visitor operation which\nblocks all mutating operations from starting for a bucket being\nvisited. This read-for-write mode is used if (and only if) the visitor\nlibrary being specified by the client is \"reindexingvisitor\".\nSince read-for-write visitors cannot race with concurrent write\noperations, starting such visitors are deferred until no further\nmutations are pending.\nAlso adds a basic reindexingvisitor implementation to the content node\nwhich sends all documents as Puts containing a special TaS token\nthat will let the operation through even if a bucket is locked. This\ntoken is cleared by the distributor before it is passed on to the\ncontent nodes.\nNote: this feature is not yet production ready. For now the following\ncaveats apply:\n\nMutating vs non-mutating pending ops to a bucket are not tracked\nseparately, so it\u2019s possible to starve a reindexing visitor by\nsending constant pending read load, as read load is not blocked by\nthe operation sequencer.\nIdeal state operations towards locked buckets are not blocked, so\nit's possible for e.g. a split to be sent for a bucket that is being\nvisited.", "createdAt": "2020-12-01T15:14:41Z", "url": "https://github.com/vespa-engine/vespa/pull/15572", "merged": true, "mergeCommit": {"oid": "b984156c6295acb407b577ffab0055bf767fe892"}, "closed": true, "closedAt": "2020-12-02T12:27:12Z", "author": {"login": "vekterli"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdh7dFPAH2gAyNTMwMzc1MzcxOmZiOTZiNmUyNTRlZjM2NzQyODM3NGViNGYyNTRjMjQ4NjY2YmNkMTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdiNUj2gFqTU0Mjc2Njg3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fb96b6e254ef367428374eb4f254c248666bcd11", "author": {"user": {"login": "vekterli", "name": "Tor Brede Vekterli"}}, "url": "https://github.com/vespa-engine/vespa/commit/fb96b6e254ef367428374eb4f254c248666bcd11", "committedDate": "2020-12-01T15:12:54Z", "message": "Initial support for backend reindexing visitor functionality\n\nIntroduces the concept of a read-for-write visitor operation which\nblocks all mutating operations from starting for a bucket being\nvisited. This read-for-write mode is used if (and only if) the visitor\nlibrary being specified by the client is \"reindexingvisitor\".\n\nSince read-for-write visitors cannot race with concurrent write\noperations, starting such visitors are deferred until no further\nmutations are pending.\n\nAlso adds a basic reindexingvisitor implementation to the content node\nwhich sends all documents as Puts containing a special TaS token\nthat will let the operation through even if a bucket is locked. This\ntoken is cleared by the distributor before it is passed on to the\ncontent nodes.\n\nNote: this feature is not yet production ready. For now the following\ncaveats apply:\n* Mutating vs non-mutating pending ops to a bucket are not tracked\n  separately, so it\u2019s possible to starve a reindexing visitor by\n  sending constant pending read load, as read load is not blocked by\n  the operation sequencer.\n* Ideal state operations towards locked buckets are not blocked, so\n  it's possible for e.g. a split to be sent for a bucket that is being\n  visited."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMDM2MzAx", "url": "https://github.com/vespa-engine/vespa/pull/15572#pullrequestreview-542036301", "createdAt": "2020-12-01T15:47:40Z", "commit": {"oid": "fb96b6e254ef367428374eb4f254c248666bcd11"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNjY3NDE1", "url": "https://github.com/vespa-engine/vespa/pull/15572#pullrequestreview-542667415", "createdAt": "2020-12-02T09:55:14Z", "commit": {"oid": "fb96b6e254ef367428374eb4f254c248666bcd11"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwOTo1NToxNVrOH9S8tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMDozMTo0N1rOH9Ue8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAzNTYzNg==", "bodyText": "Could consider making a helper function for this, taking the command is input.", "url": "https://github.com/vespa-engine/vespa/pull/15572#discussion_r534035636", "createdAt": "2020-12-02T09:55:15Z", "author": {"login": "geirst"}, "path": "storage/src/vespa/storage/distributor/externaloperationhandler.cpp", "diffHunk": "@@ -250,11 +253,26 @@ IMPL_MSG_COMMAND_H(ExternalOperationHandler, Put)\n         cmd->setTimestamp(getUniqueTimestamp());\n     }\n \n-    auto handle = _mutationSequencer.try_acquire(cmd->getDocumentId());\n-    if (allowMutation(handle)) {\n-        document::BucketSpace bucketSpace = cmd->getBucket().getBucketSpace();\n+    const auto bucket_space = cmd->getBucket().getBucketSpace();\n+    auto handle = _operation_sequencer.try_acquire(bucket_space, cmd->getDocumentId());\n+    bool allow = allowMutation(handle);\n+    const auto& tas_cond = cmd->getCondition();\n+    const bool bypass_bucket_lock = (tas_cond.isPresent()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb96b6e254ef367428374eb4f254c248666bcd11"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAzODMxNg==", "bodyText": "Consider adding a is_blocked_by() to SequencingHandle taking the BlockedBy enum to simplify this if statement.", "url": "https://github.com/vespa-engine/vespa/pull/15572#discussion_r534038316", "createdAt": "2020-12-02T09:59:01Z", "author": {"login": "geirst"}, "path": "storage/src/vespa/storage/distributor/externaloperationhandler.cpp", "diffHunk": "@@ -250,11 +253,26 @@ IMPL_MSG_COMMAND_H(ExternalOperationHandler, Put)\n         cmd->setTimestamp(getUniqueTimestamp());\n     }\n \n-    auto handle = _mutationSequencer.try_acquire(cmd->getDocumentId());\n-    if (allowMutation(handle)) {\n-        document::BucketSpace bucketSpace = cmd->getBucket().getBucketSpace();\n+    const auto bucket_space = cmd->getBucket().getBucketSpace();\n+    auto handle = _operation_sequencer.try_acquire(bucket_space, cmd->getDocumentId());\n+    bool allow = allowMutation(handle);\n+    const auto& tas_cond = cmd->getCondition();\n+    const bool bypass_bucket_lock = (tas_cond.isPresent()\n+                                     && (tas_cond.getSelection() == reindexing_bucket_lock_bypass_value()));\n+    if (bypass_bucket_lock) {\n+        if (!allow && handle.was_blocked() && (handle.blocked_by() == SequencingHandle::BlockedBy::LockedBucket)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb96b6e254ef367428374eb4f254c248666bcd11"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA2MDI5Mw==", "bodyText": "Consider adding class comment.", "url": "https://github.com/vespa-engine/vespa/pull/15572#discussion_r534060293", "createdAt": "2020-12-02T10:30:58Z", "author": {"login": "geirst"}, "path": "storage/src/vespa/storage/distributor/pendingmessagetracker.h", "diffHunk": "@@ -15,22 +15,48 @@\n #include <boost/multi_index/ordered_index.hpp>\n #include <boost/multi_index/sequenced_index.hpp>\n #include <boost/multi_index/composite_key.hpp>\n-\n #include <set>\n #include <unordered_map>\n #include <chrono>\n #include <mutex>\n \n namespace storage::distributor {\n \n-class PendingMessageTracker : public framework::HtmlStatusReporter\n-{\n+enum class TaskRunState {\n+    OK,\n+    Aborted,\n+    BucketLost\n+};\n+\n+struct DeferredTask {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb96b6e254ef367428374eb4f254c248666bcd11"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA2MDQxOA==", "bodyText": "Consider adding class comment.", "url": "https://github.com/vespa-engine/vespa/pull/15572#discussion_r534060418", "createdAt": "2020-12-02T10:31:11Z", "author": {"login": "geirst"}, "path": "storage/src/vespa/storage/distributor/pendingmessagetracker.h", "diffHunk": "@@ -15,22 +15,48 @@\n #include <boost/multi_index/ordered_index.hpp>\n #include <boost/multi_index/sequenced_index.hpp>\n #include <boost/multi_index/composite_key.hpp>\n-\n #include <set>\n #include <unordered_map>\n #include <chrono>\n #include <mutex>\n \n namespace storage::distributor {\n \n-class PendingMessageTracker : public framework::HtmlStatusReporter\n-{\n+enum class TaskRunState {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb96b6e254ef367428374eb4f254c248666bcd11"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA2MDc4NQ==", "bodyText": "Consider adding class comment.", "url": "https://github.com/vespa-engine/vespa/pull/15572#discussion_r534060785", "createdAt": "2020-12-02T10:31:47Z", "author": {"login": "geirst"}, "path": "storage/src/vespa/storage/visiting/reindexing_visitor.h", "diffHunk": "@@ -0,0 +1,27 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+#pragma once\n+\n+#include \"visitor.h\"\n+\n+namespace storage {\n+\n+class ReindexingVisitor : public Visitor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb96b6e254ef367428374eb4f254c248666bcd11"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4be75b9e71cc712304dd24a3b94bcaca6d269001", "author": {"user": {"login": "vekterli", "name": "Tor Brede Vekterli"}}, "url": "https://github.com/vespa-engine/vespa/commit/4be75b9e71cc712304dd24a3b94bcaca6d269001", "committedDate": "2020-12-02T11:30:45Z", "message": "Simplify code interacting with blocked sequencing handles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f4bbe5490124bab25679c6c6ac92f3ee81ba74b", "author": {"user": {"login": "vekterli", "name": "Tor Brede Vekterli"}}, "url": "https://github.com/vespa-engine/vespa/commit/4f4bbe5490124bab25679c6c6ac92f3ee81ba74b", "committedDate": "2020-12-02T11:58:25Z", "message": "Add top-level comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNzY2ODcw", "url": "https://github.com/vespa-engine/vespa/pull/15572#pullrequestreview-542766870", "createdAt": "2020-12-02T12:01:53Z", "commit": {"oid": "4f4bbe5490124bab25679c6c6ac92f3ee81ba74b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1824, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}