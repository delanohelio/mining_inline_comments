{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMDEwMzU0", "number": 11683, "title": "Deprovision tenant hosts affected by cloud event", "bodyText": "", "createdAt": "2020-01-07T14:17:57Z", "url": "https://github.com/vespa-engine/vespa/pull/11683", "merged": true, "mergeCommit": {"oid": "461569468279dbe9012f263e26a1098b325fbe25"}, "closed": true, "closedAt": "2020-01-09T08:55:01Z", "author": {"login": "olaaun"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4BPAXgH2gAyMzYwMDEwMzU0OjQwNjI5NWFkNmJmY2QwNTAwMTdhNGI0YjkwYzI4NTRiOWY4NGU0OGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb4VI-jAFqTMzOTg1Mjg0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "406295ad6bfcd050017a4b4b90c2854b9f84e48d", "author": {"user": {"login": "olaaun", "name": "Ola Aunr\u00f8nning"}}, "url": "https://github.com/vespa-engine/vespa/commit/406295ad6bfcd050017a4b4b90c2854b9f84e48d", "committedDate": "2020-01-07T14:00:59Z", "message": "Deprovision tenant host affected by cloud event"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5Mjc3MTU2", "url": "https://github.com/vespa-engine/vespa/pull/11683#pullrequestreview-339277156", "createdAt": "2020-01-07T14:42:10Z", "commit": {"oid": "406295ad6bfcd050017a4b4b90c2854b9f84e48d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5NzU4MTM3", "url": "https://github.com/vespa-engine/vespa/pull/11683#pullrequestreview-339758137", "createdAt": "2020-01-08T10:03:09Z", "commit": {"oid": "406295ad6bfcd050017a4b4b90c2854b9f84e48d"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMDowMzoxMFrOFbR_5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMDowNzo0OVrOFbSHcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1MDc1Nw==", "bodyText": "If this is possible, this needs to be moved to the parent method so we can skip deprovisionHosts() as well.", "url": "https://github.com/vespa-engine/vespa/pull/11683#discussion_r364150757", "createdAt": "2020-01-08T10:03:10Z", "author": {"login": "freva"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporter.java", "diffHunk": "@@ -27,33 +32,67 @@\n \n     private final IssueHandler issueHandler;\n     private final AwsEventFetcher eventFetcher;\n-    private final Set<String> awsRegions;\n+    private final Map<String, List<ZoneApi>> zonesByCloudNativeRegion;\n+    private final NodeRepository nodeRepository;\n \n     CloudEventReporter(Controller controller, Duration interval, JobControl jobControl) {\n         super(controller, interval, jobControl);\n         this.issueHandler = controller.serviceRegistry().issueHandler();\n         this.eventFetcher = controller.serviceRegistry().eventFetcherService();\n-        this.awsRegions = controller.zoneRegistry().zones()\n-                .ofCloud(CloudName.from(\"aws\"))\n-                .reachable()\n-                .zones().stream()\n-                .map(ZoneApi::getCloudNativeRegionName)\n-                .collect(Collectors.toSet());\n+        this.nodeRepository = controller.serviceRegistry().configServer().nodeRepository();\n+        this.zonesByCloudNativeRegion = getZonesByCloudNativeRegion();\n     }\n \n     @Override\n     protected void maintain() {\n         log.log(Level.INFO, \"Fetching events for cloud hosts.\");\n-        for (var awsRegion : awsRegions) {\n+        for (var awsRegion : zonesByCloudNativeRegion.keySet()) {\n             List<CloudEvent> events = eventFetcher.getEvents(awsRegion);\n             for (var event : events) {\n-                Issue issue = eventFetcher.createIssue(event);\n-                if (!issueHandler.issueExists(issue)) {\n-                    issueHandler.file(issue);\n-                    log.log(Level.INFO, String.format(\"Filed an issue with the title '%s'\", issue.summary()));\n-                }\n+                deprovisionHosts(awsRegion, event);\n+                submitIssue(event);\n             }\n         }\n     }\n \n+    private void deprovisionHosts(String awsRegion, CloudEvent event) {\n+        for (var zone : zonesByCloudNativeRegion.get(awsRegion)) {\n+            nodeRepository.list(zone.getId())\n+                    .stream()\n+                    .filter(shouldDeprovisionHost(event))\n+                    .map(node -> node.hostname().value())\n+                    .forEach(hostname -> {\n+                        log.info(String.format(\"Setting host %s to wantToRetire and wantToDeprovision\", hostname));\n+                        nodeRepository.retireAndDeprovision(zone.getId(), hostname);\n+                        event.affectedInstances.removeIf(hostname::contains);\n+                    });\n+        }\n+    }\n+\n+    private void submitIssue(CloudEvent event) {\n+        if (event.affectedInstances.isEmpty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "406295ad6bfcd050017a4b4b90c2854b9f84e48d"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1MTE3MA==", "bodyText": "Since you are iterating over multiple zones, I assume this will throw if you try to do this on the wrong zone?", "url": "https://github.com/vespa-engine/vespa/pull/11683#discussion_r364151170", "createdAt": "2020-01-08T10:04:07Z", "author": {"login": "freva"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporter.java", "diffHunk": "@@ -27,33 +32,67 @@\n \n     private final IssueHandler issueHandler;\n     private final AwsEventFetcher eventFetcher;\n-    private final Set<String> awsRegions;\n+    private final Map<String, List<ZoneApi>> zonesByCloudNativeRegion;\n+    private final NodeRepository nodeRepository;\n \n     CloudEventReporter(Controller controller, Duration interval, JobControl jobControl) {\n         super(controller, interval, jobControl);\n         this.issueHandler = controller.serviceRegistry().issueHandler();\n         this.eventFetcher = controller.serviceRegistry().eventFetcherService();\n-        this.awsRegions = controller.zoneRegistry().zones()\n-                .ofCloud(CloudName.from(\"aws\"))\n-                .reachable()\n-                .zones().stream()\n-                .map(ZoneApi::getCloudNativeRegionName)\n-                .collect(Collectors.toSet());\n+        this.nodeRepository = controller.serviceRegistry().configServer().nodeRepository();\n+        this.zonesByCloudNativeRegion = getZonesByCloudNativeRegion();\n     }\n \n     @Override\n     protected void maintain() {\n         log.log(Level.INFO, \"Fetching events for cloud hosts.\");\n-        for (var awsRegion : awsRegions) {\n+        for (var awsRegion : zonesByCloudNativeRegion.keySet()) {\n             List<CloudEvent> events = eventFetcher.getEvents(awsRegion);\n             for (var event : events) {\n-                Issue issue = eventFetcher.createIssue(event);\n-                if (!issueHandler.issueExists(issue)) {\n-                    issueHandler.file(issue);\n-                    log.log(Level.INFO, String.format(\"Filed an issue with the title '%s'\", issue.summary()));\n-                }\n+                deprovisionHosts(awsRegion, event);\n+                submitIssue(event);\n             }\n         }\n     }\n \n+    private void deprovisionHosts(String awsRegion, CloudEvent event) {\n+        for (var zone : zonesByCloudNativeRegion.get(awsRegion)) {\n+            nodeRepository.list(zone.getId())\n+                    .stream()\n+                    .filter(shouldDeprovisionHost(event))\n+                    .map(node -> node.hostname().value())\n+                    .forEach(hostname -> {\n+                        log.info(String.format(\"Setting host %s to wantToRetire and wantToDeprovision\", hostname));\n+                        nodeRepository.retireAndDeprovision(zone.getId(), hostname);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "406295ad6bfcd050017a4b4b90c2854b9f84e48d"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1MTU1NQ==", "bodyText": "Instance name contains zone name in it, so this is not really needed.", "url": "https://github.com/vespa-engine/vespa/pull/11683#discussion_r364151555", "createdAt": "2020-01-08T10:05:05Z", "author": {"login": "freva"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporter.java", "diffHunk": "@@ -27,33 +32,67 @@\n \n     private final IssueHandler issueHandler;\n     private final AwsEventFetcher eventFetcher;\n-    private final Set<String> awsRegions;\n+    private final Map<String, List<ZoneApi>> zonesByCloudNativeRegion;\n+    private final NodeRepository nodeRepository;\n \n     CloudEventReporter(Controller controller, Duration interval, JobControl jobControl) {\n         super(controller, interval, jobControl);\n         this.issueHandler = controller.serviceRegistry().issueHandler();\n         this.eventFetcher = controller.serviceRegistry().eventFetcherService();\n-        this.awsRegions = controller.zoneRegistry().zones()\n-                .ofCloud(CloudName.from(\"aws\"))\n-                .reachable()\n-                .zones().stream()\n-                .map(ZoneApi::getCloudNativeRegionName)\n-                .collect(Collectors.toSet());\n+        this.nodeRepository = controller.serviceRegistry().configServer().nodeRepository();\n+        this.zonesByCloudNativeRegion = getZonesByCloudNativeRegion();\n     }\n \n     @Override\n     protected void maintain() {\n         log.log(Level.INFO, \"Fetching events for cloud hosts.\");\n-        for (var awsRegion : awsRegions) {\n+        for (var awsRegion : zonesByCloudNativeRegion.keySet()) {\n             List<CloudEvent> events = eventFetcher.getEvents(awsRegion);\n             for (var event : events) {\n-                Issue issue = eventFetcher.createIssue(event);\n-                if (!issueHandler.issueExists(issue)) {\n-                    issueHandler.file(issue);\n-                    log.log(Level.INFO, String.format(\"Filed an issue with the title '%s'\", issue.summary()));\n-                }\n+                deprovisionHosts(awsRegion, event);\n+                submitIssue(event);\n             }\n         }\n     }\n \n+    private void deprovisionHosts(String awsRegion, CloudEvent event) {\n+        for (var zone : zonesByCloudNativeRegion.get(awsRegion)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "406295ad6bfcd050017a4b4b90c2854b9f84e48d"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1MTgwOA==", "bodyText": "Also check if the node already has wantToDeprovision and wantToRetire set already.", "url": "https://github.com/vespa-engine/vespa/pull/11683#discussion_r364151808", "createdAt": "2020-01-08T10:05:43Z", "author": {"login": "freva"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporter.java", "diffHunk": "@@ -27,33 +32,67 @@\n \n     private final IssueHandler issueHandler;\n     private final AwsEventFetcher eventFetcher;\n-    private final Set<String> awsRegions;\n+    private final Map<String, List<ZoneApi>> zonesByCloudNativeRegion;\n+    private final NodeRepository nodeRepository;\n \n     CloudEventReporter(Controller controller, Duration interval, JobControl jobControl) {\n         super(controller, interval, jobControl);\n         this.issueHandler = controller.serviceRegistry().issueHandler();\n         this.eventFetcher = controller.serviceRegistry().eventFetcherService();\n-        this.awsRegions = controller.zoneRegistry().zones()\n-                .ofCloud(CloudName.from(\"aws\"))\n-                .reachable()\n-                .zones().stream()\n-                .map(ZoneApi::getCloudNativeRegionName)\n-                .collect(Collectors.toSet());\n+        this.nodeRepository = controller.serviceRegistry().configServer().nodeRepository();\n+        this.zonesByCloudNativeRegion = getZonesByCloudNativeRegion();\n     }\n \n     @Override\n     protected void maintain() {\n         log.log(Level.INFO, \"Fetching events for cloud hosts.\");\n-        for (var awsRegion : awsRegions) {\n+        for (var awsRegion : zonesByCloudNativeRegion.keySet()) {\n             List<CloudEvent> events = eventFetcher.getEvents(awsRegion);\n             for (var event : events) {\n-                Issue issue = eventFetcher.createIssue(event);\n-                if (!issueHandler.issueExists(issue)) {\n-                    issueHandler.file(issue);\n-                    log.log(Level.INFO, String.format(\"Filed an issue with the title '%s'\", issue.summary()));\n-                }\n+                deprovisionHosts(awsRegion, event);\n+                submitIssue(event);\n             }\n         }\n     }\n \n+    private void deprovisionHosts(String awsRegion, CloudEvent event) {\n+        for (var zone : zonesByCloudNativeRegion.get(awsRegion)) {\n+            nodeRepository.list(zone.getId())\n+                    .stream()\n+                    .filter(shouldDeprovisionHost(event))\n+                    .map(node -> node.hostname().value())\n+                    .forEach(hostname -> {\n+                        log.info(String.format(\"Setting host %s to wantToRetire and wantToDeprovision\", hostname));\n+                        nodeRepository.retireAndDeprovision(zone.getId(), hostname);\n+                        event.affectedInstances.removeIf(hostname::contains);\n+                    });\n+        }\n+    }\n+\n+    private void submitIssue(CloudEvent event) {\n+        if (event.affectedInstances.isEmpty())\n+            return;\n+        Issue issue = eventFetcher.createIssue(event);\n+        if (!issueHandler.issueExists(issue)) {\n+            issueHandler.file(issue);\n+            log.log(Level.INFO, String.format(\"Filed an issue with the title '%s'\", issue.summary()));\n+        }\n+    }\n+\n+    private Predicate<Node> shouldDeprovisionHost(CloudEvent event) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "406295ad6bfcd050017a4b4b90c2854b9f84e48d"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE1MjY5MA==", "bodyText": "Consider returning Set from getHostnames() and use assertEquals(Set.of(..), getHostnames(...));", "url": "https://github.com/vespa-engine/vespa/pull/11683#discussion_r364152690", "createdAt": "2020-01-08T10:07:49Z", "author": {"login": "freva"}, "path": "controller-server/src/test/java/com/yahoo/vespa/hosted/controller/maintenance/CloudEventReporterTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package com.yahoo.vespa.hosted.controller.maintenance;\n+\n+import com.yahoo.config.provision.HostName;\n+import com.yahoo.config.provision.NodeType;\n+import com.yahoo.config.provision.zone.ZoneId;\n+import com.yahoo.vespa.hosted.controller.ControllerTester;\n+import com.yahoo.vespa.hosted.controller.api.integration.aws.CloudEvent;\n+import com.yahoo.vespa.hosted.controller.api.integration.aws.MockAwsEventFetcher;\n+import com.yahoo.vespa.hosted.controller.api.integration.configserver.Node;\n+import com.yahoo.vespa.hosted.controller.api.integration.organization.IssueId;\n+import com.yahoo.vespa.hosted.controller.api.integration.organization.MockIssueHandler;\n+import com.yahoo.vespa.hosted.controller.integration.ZoneApiMock;\n+import com.yahoo.vespa.jdk8compat.Set;\n+import org.junit.Test;\n+\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * @author olaa\n+ */\n+public class CloudEventReporterTest {\n+\n+    private ControllerTester tester = new ControllerTester();\n+    private ZoneApiMock nonAwsZone = createZone(\"prod.zone3\", \"region-1\", \"other\");\n+    private ZoneApiMock awsZone1 = createZone(\"prod.zone1\", \"region-1\", \"aws\");\n+    private ZoneApiMock awsZone2 = createZone(\"prod.zone2\", \"region-2\", \"aws\");\n+\n+\n+    /**\n+     * Test scenario:\n+     * Consider three zones, two of which are based in AWS\n+     * We want to test the following:\n+     * 1. Non-AWS zone is completely ignored\n+     * 2. Tenant hosts affected by cloud event are deprovisioned\n+     * 3. Infrastructure hosts affected by cloud event are reported by IssueHandler\n+     */\n+    @Test\n+    public void maintain() {\n+        setUpZones();\n+        CloudEventReporter cloudEventReporter = new CloudEventReporter(tester.controller(), Duration.ofMinutes(15), new JobControl(tester.curator()));\n+\n+        equalListsIgnoreOrder(List.of(\"host1.com\", \"host2.com\", \"host3.com\"), getHostnames(nonAwsZone.getId()));\n+        equalListsIgnoreOrder(List.of(\"host1.com\", \"host2.com\", \"host3.com\"), getHostnames(awsZone1.getId()));\n+        equalListsIgnoreOrder(List.of(\"host4.com\", \"host5.com\", \"confighost.com\"), getHostnames(awsZone2.getId()));\n+\n+        mockEvents();\n+        cloudEventReporter.maintain();\n+\n+        equalListsIgnoreOrder(List.of(\"host1.com\", \"host2.com\", \"host3.com\"), getHostnames(nonAwsZone.getId()));\n+        equalListsIgnoreOrder(List.of(\"host3.com\"), getHostnames(awsZone1.getId()));\n+        equalListsIgnoreOrder(List.of(\"host4.com\", \"confighost.com\"), getHostnames(awsZone2.getId()));\n+\n+        Map<IssueId, MockIssueHandler.MockIssue> createdIssues = tester.serviceRegistry().issueHandler().issues();\n+        assertEquals(1, createdIssues.size());\n+        String description = createdIssues.get(IssueId.from(\"1\")).issue().description();\n+        assertEquals(\"[confighost]\", description);\n+\n+    }\n+\n+    private void equalListsIgnoreOrder(List<?> l1, List<?> l2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "406295ad6bfcd050017a4b4b90c2854b9f84e48d"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "623eb417c98ee2595faa877777a97d9ca99191d0", "author": {"user": {"login": "olaaun", "name": "Ola Aunr\u00f8nning"}}, "url": "https://github.com/vespa-engine/vespa/commit/623eb417c98ee2595faa877777a97d9ca99191d0", "committedDate": "2020-01-08T12:53:28Z", "message": "Add wantToDeprovision and wantToRetire fields to Node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "922b993d409c74543953dcff4b91297906b6fb05", "author": {"user": {"login": "olaaun", "name": "Ola Aunr\u00f8nning"}}, "url": "https://github.com/vespa-engine/vespa/commit/922b993d409c74543953dcff4b91297906b6fb05", "committedDate": "2020-01-08T12:56:02Z", "message": "Check if number of affected instances is equal to number of deprovisioned hosts.\nCheck if host already wants to deprovision/retire\nChange from list to set in test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5ODUyODQ3", "url": "https://github.com/vespa-engine/vespa/pull/11683#pullrequestreview-339852847", "createdAt": "2020-01-08T13:12:30Z", "commit": {"oid": "922b993d409c74543953dcff4b91297906b6fb05"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4081, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}