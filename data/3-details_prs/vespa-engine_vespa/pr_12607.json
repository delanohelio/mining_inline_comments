{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMzQ3ODUw", "number": 12607, "title": "Balder/tune hash settings 2", "bodyText": "@geirst or @havardpe PR", "createdAt": "2020-03-18T10:23:44Z", "url": "https://github.com/vespa-engine/vespa/pull/12607", "merged": true, "mergeCommit": {"oid": "711b57ca78377cd8881a916069abfa69199ad600"}, "closed": true, "closedAt": "2020-03-18T11:12:16Z", "author": {"login": "baldersheim"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOr6d0AH2gAyMzkwMzQ3ODUwOjkwNzExNGViYmI5ODFjMDc1Y2Q5N2MxZGE0NDVjMzljNjQ3YTIwMTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcO2WqdgFqTM3NjgwOTc5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "907114ebbb981c075cd97c1da445c39c647a2012", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/907114ebbb981c075cd97c1da445c39c647a2012", "committedDate": "2020-03-18T00:10:48Z", "message": "Use and based hashing."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c0b30df435dc5dd961562f1eeccf4bd9cd16c16", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/4c0b30df435dc5dd961562f1eeccf4bd9cd16c16", "committedDate": "2020-03-18T00:10:48Z", "message": "Use suitable datatype for enum and used and based modulo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1d1cede2a01243e0b10e8283de5a4fe1f3679cb", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/e1d1cede2a01243e0b10e8283de5a4fe1f3679cb", "committedDate": "2020-03-18T10:45:08Z", "message": "Add some interseting statistics if debug has been enabled."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NzUwODg2", "url": "https://github.com/vespa-engine/vespa/pull/12607#pullrequestreview-376750886", "createdAt": "2020-03-18T10:50:30Z", "commit": {"oid": "e1d1cede2a01243e0b10e8283de5a4fe1f3679cb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2ODA5Nzk1", "url": "https://github.com/vespa-engine/vespa/pull/12607#pullrequestreview-376809795", "createdAt": "2020-03-18T12:19:58Z", "commit": {"oid": "e1d1cede2a01243e0b10e8283de5a4fe1f3679cb"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjoxOTo1OVrOF4Cbkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjoyMDowNlrOF4Cbzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMwNDQwMg==", "bodyText": "Consider using auto instead.", "url": "https://github.com/vespa-engine/vespa/pull/12607#discussion_r394304402", "createdAt": "2020-03-18T12:19:59Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/attribute/attribute_weighted_set_blueprint.cpp", "diffHunk": "@@ -93,12 +97,12 @@ class AttributeFilter final : public queryeval::SearchIterator\n         }\n     }\n     void and_hits_into(BitVector & result,uint32_t begin_id) override {\n-        Map::iterator end = _map.end();\n+        typename Map::iterator end = _map.end();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1d1cede2a01243e0b10e8283de5a4fe1f3679cb"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMwNDQ2Mg==", "bodyText": "Consider using auto instead.", "url": "https://github.com/vespa-engine/vespa/pull/12607#discussion_r394304462", "createdAt": "2020-03-18T12:20:06Z", "author": {"login": "geirst"}, "path": "searchlib/src/vespa/searchlib/attribute/attribute_weighted_set_blueprint.cpp", "diffHunk": "@@ -93,12 +97,12 @@ class AttributeFilter final : public queryeval::SearchIterator\n         }\n     }\n     void and_hits_into(BitVector & result,uint32_t begin_id) override {\n-        Map::iterator end = _map.end();\n+        typename Map::iterator end = _map.end();\n         result.foreach_truebit([&, end](uint32_t key) { if ( _map.find(_attr.getToken(key)) == end) { result.clearBit(key); }}, begin_id);\n     }\n \n     void doSeek(uint32_t docId) override {\n-        Map::const_iterator pos = _map.find(_attr.getToken(docId));\n+        typename Map::const_iterator pos = _map.find(_attr.getToken(docId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1d1cede2a01243e0b10e8283de5a4fe1f3679cb"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2723, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}