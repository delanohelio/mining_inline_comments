{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzODAyMjQ1", "number": 14885, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOTowNjo1MVrOEt5YDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDo1NDozNFrOEt8DjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTYxNDIyOnYy", "diffSide": "RIGHT", "path": "storage/src/tests/persistence/persistencetestutils.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOTowNjo1MVrOHh93LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOTo1MzoyM1rOHh_-VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM3ODYwNA==", "bodyText": "Should this be 1 instead?", "url": "https://github.com/vespa-engine/vespa/pull/14885#discussion_r505378604", "createdAt": "2020-10-15T09:06:51Z", "author": {"login": "geirst"}, "path": "storage/src/tests/persistence/persistencetestutils.cpp", "diffHunk": "@@ -76,15 +70,14 @@ PersistenceTestUtils::PersistenceTestUtils() = default;\n PersistenceTestUtils::~PersistenceTestUtils() = default;\n \n std::string\n-PersistenceTestUtils::dumpBucket(const document::BucketId& bid, uint16_t disk) {\n-    assert(disk == 0u);\n+PersistenceTestUtils::dumpBucket(const document::BucketId& bid) {\n     return dynamic_cast<spi::dummy::DummyPersistence&>(_env->_node.getPersistenceProvider()).dumpBucket(makeSpiBucket(bid));\n }\n \n void\n-PersistenceTestUtils::setupDisks(uint32_t numDisks) {\n-    _env = std::make_unique<PersistenceTestEnvironment>(DiskCount(numDisks), \"todo-make-unique-persistencetestutils\");\n-    setupExecutor(numDisks);\n+PersistenceTestUtils::setupDisks() {\n+    _env = std::make_unique<PersistenceTestEnvironment>(\"todo-make-unique-persistencetestutils\");\n+    setupExecutor(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d76ff5080f3f911d9119125202d7bad0a2a9da"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQxMzIwNA==", "bodyText": "Yes it should, I just tested with 2 too as it did not see the connection between disk and executors.", "url": "https://github.com/vespa-engine/vespa/pull/14885#discussion_r505413204", "createdAt": "2020-10-15T09:53:23Z", "author": {"login": "baldersheim"}, "path": "storage/src/tests/persistence/persistencetestutils.cpp", "diffHunk": "@@ -76,15 +70,14 @@ PersistenceTestUtils::PersistenceTestUtils() = default;\n PersistenceTestUtils::~PersistenceTestUtils() = default;\n \n std::string\n-PersistenceTestUtils::dumpBucket(const document::BucketId& bid, uint16_t disk) {\n-    assert(disk == 0u);\n+PersistenceTestUtils::dumpBucket(const document::BucketId& bid) {\n     return dynamic_cast<spi::dummy::DummyPersistence&>(_env->_node.getPersistenceProvider()).dumpBucket(makeSpiBucket(bid));\n }\n \n void\n-PersistenceTestUtils::setupDisks(uint32_t numDisks) {\n-    _env = std::make_unique<PersistenceTestEnvironment>(DiskCount(numDisks), \"todo-make-unique-persistencetestutils\");\n-    setupExecutor(numDisks);\n+PersistenceTestUtils::setupDisks() {\n+    _env = std::make_unique<PersistenceTestEnvironment>(\"todo-make-unique-persistencetestutils\");\n+    setupExecutor(2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM3ODYwNA=="}, "originalCommit": {"oid": "30d76ff5080f3f911d9119125202d7bad0a2a9da"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTY0NTkxOnYy", "diffSide": "RIGHT", "path": "storage/src/vespa/storage/persistence/filestorage/filestorhandler.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOToxMzozOFrOHh-LXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOTo1MjoyOFrOHh_70A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4Mzc3Mw==", "bodyText": "This should be removed.", "url": "https://github.com/vespa-engine/vespa/pull/14885#discussion_r505383773", "createdAt": "2020-10-15T09:13:38Z", "author": {"login": "geirst"}, "path": "storage/src/vespa/storage/persistence/filestorage/filestorhandler.h", "diffHunk": "@@ -108,14 +105,14 @@ class FileStorHandler : public MessageSender {\n      * Schedule a storage message to be processed by the given disk\n      * @return True if we maanged to schedule operation. False if not\n      */\n-    bool schedule(const std::shared_ptr<api::StorageMessage>&, uint16_t disk);\n+    bool schedule(const std::shared_ptr<api::StorageMessage>&);\n \n     /**\n      * Used by file stor threads to get their next message to process.\n      *\n      * @param disk The disk to get messages for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d76ff5080f3f911d9119125202d7bad0a2a9da"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQxMjU2MA==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/14885#discussion_r505412560", "createdAt": "2020-10-15T09:52:28Z", "author": {"login": "baldersheim"}, "path": "storage/src/vespa/storage/persistence/filestorage/filestorhandler.h", "diffHunk": "@@ -108,14 +105,14 @@ class FileStorHandler : public MessageSender {\n      * Schedule a storage message to be processed by the given disk\n      * @return True if we maanged to schedule operation. False if not\n      */\n-    bool schedule(const std::shared_ptr<api::StorageMessage>&, uint16_t disk);\n+    bool schedule(const std::shared_ptr<api::StorageMessage>&);\n \n     /**\n      * Used by file stor threads to get their next message to process.\n      *\n      * @param disk The disk to get messages for", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4Mzc3Mw=="}, "originalCommit": {"oid": "30d76ff5080f3f911d9119125202d7bad0a2a9da"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NTY3NTYwOnYy", "diffSide": "RIGHT", "path": "storage/src/tests/persistence/persistencetestutils.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOToyMDowMVrOHh-dfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToyMTozN1rOHiDBQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4ODQxNQ==", "bodyText": "Is there anything left actually using this directory at this point?", "url": "https://github.com/vespa-engine/vespa/pull/14885#discussion_r505388415", "createdAt": "2020-10-15T09:20:01Z", "author": {"login": "vekterli"}, "path": "storage/src/tests/persistence/persistencetestutils.cpp", "diffHunk": "@@ -25,13 +25,11 @@ namespace {\n \n     spi::LoadType defaultLoadType(0, \"default\");\n \n-    vdstestlib::DirConfig initialize(uint32_t numDisks, const std::string & rootOfRoot) {\n+    vdstestlib::DirConfig initialize(const std::string & rootOfRoot) {\n         vdstestlib::DirConfig config(getStandardConfig(true, rootOfRoot));\n         std::string rootFolder = getRootFolder(config);\n         vespalib::rmdir(rootFolder, true);\n-        for (uint32_t i = 0; i < numDisks; i++) {\n-            vespalib::mkdir(vespalib::make_string(\"%s/disks/d%d\", rootFolder.c_str(), i), true);\n-        }\n+        vespalib::mkdir(vespalib::make_string(\"%s/disks/d0\", rootFolder.c_str()), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30d76ff5080f3f911d9119125202d7bad0a2a9da"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MzEwNA==", "bodyText": "Not that I know of.", "url": "https://github.com/vespa-engine/vespa/pull/14885#discussion_r505463104", "createdAt": "2020-10-15T11:21:37Z", "author": {"login": "baldersheim"}, "path": "storage/src/tests/persistence/persistencetestutils.cpp", "diffHunk": "@@ -25,13 +25,11 @@ namespace {\n \n     spi::LoadType defaultLoadType(0, \"default\");\n \n-    vdstestlib::DirConfig initialize(uint32_t numDisks, const std::string & rootOfRoot) {\n+    vdstestlib::DirConfig initialize(const std::string & rootOfRoot) {\n         vdstestlib::DirConfig config(getStandardConfig(true, rootOfRoot));\n         std::string rootFolder = getRootFolder(config);\n         vespalib::rmdir(rootFolder, true);\n-        for (uint32_t i = 0; i < numDisks; i++) {\n-            vespalib::mkdir(vespalib::make_string(\"%s/disks/d%d\", rootFolder.c_str(), i), true);\n-        }\n+        vespalib::mkdir(vespalib::make_string(\"%s/disks/d0\", rootFolder.c_str()), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4ODQxNQ=="}, "originalCommit": {"oid": "30d76ff5080f3f911d9119125202d7bad0a2a9da"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjAyOTc5OnYy", "diffSide": "RIGHT", "path": "storage/src/vespa/storage/persistence/filestorage/filestorhandlerimpl.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDo0Nzo1N1rOHiB7xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToyMjoyMFrOHiDCtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ0NTMxOA==", "bodyText": "Consider removing extra indentation", "url": "https://github.com/vespa-engine/vespa/pull/14885#discussion_r505445318", "createdAt": "2020-10-15T10:47:57Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/persistence/filestorage/filestorhandlerimpl.cpp", "diffHunk": "@@ -151,11 +141,9 @@ FileStorHandlerImpl::clearMergeStatus(const document::Bucket& bucket, const api:\n void\n FileStorHandlerImpl::flush(bool killPendingMerges)\n {\n-    for (uint32_t i=0; i<_diskInfo.size(); ++i) {\n-        LOG(debug, \"Wait until queues and bucket locks released for disk '%d'\", i);\n-        _diskInfo[i].flush();\n-        LOG(debug, \"All queues and bucket locks released for disk '%d'\", i);\n-    }\n+        LOG(debug, \"Wait until queues and bucket locks released.\");\n+        _disk.flush();\n+        LOG(debug, \"All queues and bucket locks released.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e449284ab770f9956cb0c39d3834c7c881b81ec"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2MzQ3OA==", "bodyText": "It is on its way in a new PR", "url": "https://github.com/vespa-engine/vespa/pull/14885#discussion_r505463478", "createdAt": "2020-10-15T11:22:20Z", "author": {"login": "baldersheim"}, "path": "storage/src/vespa/storage/persistence/filestorage/filestorhandlerimpl.cpp", "diffHunk": "@@ -151,11 +141,9 @@ FileStorHandlerImpl::clearMergeStatus(const document::Bucket& bucket, const api:\n void\n FileStorHandlerImpl::flush(bool killPendingMerges)\n {\n-    for (uint32_t i=0; i<_diskInfo.size(); ++i) {\n-        LOG(debug, \"Wait until queues and bucket locks released for disk '%d'\", i);\n-        _diskInfo[i].flush();\n-        LOG(debug, \"All queues and bucket locks released for disk '%d'\", i);\n-    }\n+        LOG(debug, \"Wait until queues and bucket locks released.\");\n+        _disk.flush();\n+        LOG(debug, \"All queues and bucket locks released.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ0NTMxOA=="}, "originalCommit": {"oid": "4e449284ab770f9956cb0c39d3834c7c881b81ec"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjA1MzI1OnYy", "diffSide": "RIGHT", "path": "storage/src/vespa/storage/persistence/filestorage/filestorhandlerimpl.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDo1NDozNVrOHiCKNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMToyMjo0M1rOHiDDvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ0OTAxNA==", "bodyText": "Consider removing this header since it no longer provides a useful hierarchy", "url": "https://github.com/vespa-engine/vespa/pull/14885#discussion_r505449014", "createdAt": "2020-10-15T10:54:35Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/persistence/filestorage/filestorhandlerimpl.cpp", "diffHunk": "@@ -1295,22 +1232,21 @@ FileStorHandlerImpl::getStatus(std::ostream& out, const framework::HttpUrlPath&\n {\n     bool verbose = path.hasAttribute(\"verbose\");\n     out << \"<h1>Filestor handler</h1>\\n\";\n-    for (uint32_t i=0; i<_diskInfo.size(); ++i) {\n-        out << \"<h2>Disk \" << i << \"</h2>\\n\";\n-        const Disk& disk(_diskInfo[i]);\n-        out << \"Queue size: \" << disk.getQueueSize() << \"<br>\\n\";\n-        out << \"Disk state: \";\n-        switch (disk.getState()) {\n-            case FileStorHandler::AVAILABLE: out << \"AVAILABLE\"; break;\n-            case FileStorHandler::DISABLED: out << \"DISABLED\"; break;\n-            case FileStorHandler::CLOSED: out << \"CLOSED\"; break;\n-        }\n-        out << \"<h4>Active operations</h4>\\n\";\n-        disk.dumpActiveHtml(out);\n-        if (!verbose) continue;\n+\n+    out << \"<h2>Disk \" << \"</h2>\\n\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e449284ab770f9956cb0c39d3834c7c881b81ec"}, "originalPosition": 417}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ2Mzc0Mg==", "bodyText": "Will do in followup PR", "url": "https://github.com/vespa-engine/vespa/pull/14885#discussion_r505463742", "createdAt": "2020-10-15T11:22:43Z", "author": {"login": "baldersheim"}, "path": "storage/src/vespa/storage/persistence/filestorage/filestorhandlerimpl.cpp", "diffHunk": "@@ -1295,22 +1232,21 @@ FileStorHandlerImpl::getStatus(std::ostream& out, const framework::HttpUrlPath&\n {\n     bool verbose = path.hasAttribute(\"verbose\");\n     out << \"<h1>Filestor handler</h1>\\n\";\n-    for (uint32_t i=0; i<_diskInfo.size(); ++i) {\n-        out << \"<h2>Disk \" << i << \"</h2>\\n\";\n-        const Disk& disk(_diskInfo[i]);\n-        out << \"Queue size: \" << disk.getQueueSize() << \"<br>\\n\";\n-        out << \"Disk state: \";\n-        switch (disk.getState()) {\n-            case FileStorHandler::AVAILABLE: out << \"AVAILABLE\"; break;\n-            case FileStorHandler::DISABLED: out << \"DISABLED\"; break;\n-            case FileStorHandler::CLOSED: out << \"CLOSED\"; break;\n-        }\n-        out << \"<h4>Active operations</h4>\\n\";\n-        disk.dumpActiveHtml(out);\n-        if (!verbose) continue;\n+\n+    out << \"<h2>Disk \" << \"</h2>\\n\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ0OTAxNA=="}, "originalCommit": {"oid": "4e449284ab770f9956cb0c39d3834c7c881b81ec"}, "originalPosition": 417}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1174, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}