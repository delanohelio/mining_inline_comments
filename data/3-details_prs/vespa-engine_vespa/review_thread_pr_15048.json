{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNzkxNzUy", "number": 15048, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDo0MDoyOVrOEyYwwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDo0MDoyOVrOEyYwwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjY5OTU0OnYy", "diffSide": "RIGHT", "path": "searchcore/src/vespa/searchcore/proton/server/documentdb.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDo0MDoyOVrOHo_yTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOToyNTowOFrOHpNCNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc1MDE1OQ==", "bodyText": "Consider adding _writeService.sync(); before calling masterExecute(), to ensure each retry does a new sync of\n_writeService.", "url": "https://github.com/vespa-engine/vespa/pull/15048#discussion_r512750159", "createdAt": "2020-10-27T14:40:29Z", "author": {"login": "toregge"}, "path": "searchcore/src/vespa/searchcore/proton/server/documentdb.cpp", "diffHunk": "@@ -517,15 +508,25 @@ DocumentDB::performDropFeedView(IFeedView::SP feedView)\n \n \n void\n-DocumentDB::performDropFeedView2(IFeedView::SP feedView)\n-{\n+DocumentDB::performDropFeedView2(IFeedView::SP feedView) {\n     // Called by executor task, delays when feed view is dropped.\n     // Also called by DocumentDB::receive() method to keep feed view alive\n     _writeService.indexFieldInverter().sync();\n     _writeService.indexFieldWriter().sync();\n+    masterExecute([this, feedView]() { performDropFeedView3(feedView, 10); });\n+}\n \n-    // Feed view is kept alive in the closure's shared ptr.\n-    masterExecute([feedView] () { doNothing(feedView); });\n+void\n+DocumentDB::performDropFeedView3(IFeedView::SP feedView, uint32_t numRetries) {\n+    // We must keep the feedView allive until all operations are drained.\n+    // TODO: This is a very brittle appraoch that we should reconsider.\n+    if (feedView && ! feedView->isDrained()) {\n+        LOG(warning, \"FeedView for document type '%s' has not been drained. Reposting to check again. %d retries left\",\n+            getName().c_str(), numRetries);\n+        if (numRetries > 0) {\n+            masterExecute([this, feedView, numRetries]() { performDropFeedView3(feedView, numRetries - 1); });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "150054b42a7dcd7166fc5e63881a623687734f83"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk2NzIyMQ==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/15048#discussion_r512967221", "createdAt": "2020-10-27T19:25:08Z", "author": {"login": "baldersheim"}, "path": "searchcore/src/vespa/searchcore/proton/server/documentdb.cpp", "diffHunk": "@@ -517,15 +508,25 @@ DocumentDB::performDropFeedView(IFeedView::SP feedView)\n \n \n void\n-DocumentDB::performDropFeedView2(IFeedView::SP feedView)\n-{\n+DocumentDB::performDropFeedView2(IFeedView::SP feedView) {\n     // Called by executor task, delays when feed view is dropped.\n     // Also called by DocumentDB::receive() method to keep feed view alive\n     _writeService.indexFieldInverter().sync();\n     _writeService.indexFieldWriter().sync();\n+    masterExecute([this, feedView]() { performDropFeedView3(feedView, 10); });\n+}\n \n-    // Feed view is kept alive in the closure's shared ptr.\n-    masterExecute([feedView] () { doNothing(feedView); });\n+void\n+DocumentDB::performDropFeedView3(IFeedView::SP feedView, uint32_t numRetries) {\n+    // We must keep the feedView allive until all operations are drained.\n+    // TODO: This is a very brittle appraoch that we should reconsider.\n+    if (feedView && ! feedView->isDrained()) {\n+        LOG(warning, \"FeedView for document type '%s' has not been drained. Reposting to check again. %d retries left\",\n+            getName().c_str(), numRetries);\n+        if (numRetries > 0) {\n+            masterExecute([this, feedView, numRetries]() { performDropFeedView3(feedView, numRetries - 1); });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc1MDE1OQ=="}, "originalCommit": {"oid": "150054b42a7dcd7166fc5e63881a623687734f83"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1025, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}