{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1MjI3MDg3", "number": 15759, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOTo0Njo1N1rOFDYkag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOTo0Njo1N1rOFDYkag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MDkyNTg2OnYy", "diffSide": "RIGHT", "path": "controller-api/src/test/java/com/yahoo/vespa/hosted/controller/api/systemflags/v1/SystemFlagsDataArchiveTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOTo0Njo1N1rOIDAYIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMDo1MDo1MlrOIDDKgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAyMjgxOA==", "bodyText": "Consider replacing SimpleZone with (a method that defines) a mock(ZoneApi.class) that has when() defined on getSystemName() and getId()?", "url": "https://github.com/vespa-engine/vespa/pull/15759#discussion_r540022818", "createdAt": "2020-12-10T09:46:57Z", "author": {"login": "hakonhall"}, "path": "controller-api/src/test/java/com/yahoo/vespa/hosted/controller/api/systemflags/v1/SystemFlagsDataArchiveTest.java", "diffHunk": "@@ -260,6 +269,30 @@ public void normalize_json_fail_on_invalid_tenant_id() {\n         }\n     }\n \n+    @Test\n+    public void ignores_files_not_related_to_specified_system_definition() {\n+        ZoneRegistry registry = createZoneRegistryMock();\n+        Path testDirectory = Paths.get(\"src/test/resources/system-flags-for-multiple-systems/\");\n+        var archive = SystemFlagsDataArchive.fromDirectoryAndSystem(testDirectory, registry);\n+        assertFlagDataHasValue(archive, MY_TEST_FLAG, cdControllerTarget, \"default\"); // Would be 'cd.controller' if files for CD system were included\n+        assertFlagDataHasValue(archive, MY_TEST_FLAG, mainControllerTarget, \"default\");\n+        assertFlagDataHasValue(archive, MY_TEST_FLAG, prodUsWestCfgTarget, \"main.prod.us-west-1\");\n+    }\n+\n+    @SuppressWarnings(\"unchecked\") // workaround for mocking a method for generic return type\n+    private static ZoneRegistry createZoneRegistryMock() {\n+        // Cannot use the standard registry mock as it's located in controller-server module\n+        ZoneRegistry registryMock = mock(ZoneRegistry.class);\n+        when(registryMock.system()).thenReturn(SystemName.main);\n+        when(registryMock.getConfigServerVipUri(any())).thenReturn(URI.create(\"http://localhost:8080/\"));\n+        when(registryMock.getConfigServerHttpsIdentity(any())).thenReturn(new AthenzService(\"domain\", \"servicename\"));\n+        ZoneList zoneListMock = mock(ZoneList.class);\n+        when(zoneListMock.reachable()).thenReturn(zoneListMock);\n+        when(zoneListMock.zones()).thenReturn((List)List.of(new SimpleZone(\"prod.us-west-1\"), new SimpleZone(\"prod.us-east-3\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e4f106c8f562fb3d7e01b68dea0d9df9fc241ef"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA2ODQ4Mw==", "bodyText": "I don't have a strong opinion about this, using Mockito for all mocks looks more consistent. As Mockito is somewhat controversial among Vespa devs, I try to not use it unless it's the superior choice.", "url": "https://github.com/vespa-engine/vespa/pull/15759#discussion_r540068483", "createdAt": "2020-12-10T10:50:52Z", "author": {"login": "bjorncs"}, "path": "controller-api/src/test/java/com/yahoo/vespa/hosted/controller/api/systemflags/v1/SystemFlagsDataArchiveTest.java", "diffHunk": "@@ -260,6 +269,30 @@ public void normalize_json_fail_on_invalid_tenant_id() {\n         }\n     }\n \n+    @Test\n+    public void ignores_files_not_related_to_specified_system_definition() {\n+        ZoneRegistry registry = createZoneRegistryMock();\n+        Path testDirectory = Paths.get(\"src/test/resources/system-flags-for-multiple-systems/\");\n+        var archive = SystemFlagsDataArchive.fromDirectoryAndSystem(testDirectory, registry);\n+        assertFlagDataHasValue(archive, MY_TEST_FLAG, cdControllerTarget, \"default\"); // Would be 'cd.controller' if files for CD system were included\n+        assertFlagDataHasValue(archive, MY_TEST_FLAG, mainControllerTarget, \"default\");\n+        assertFlagDataHasValue(archive, MY_TEST_FLAG, prodUsWestCfgTarget, \"main.prod.us-west-1\");\n+    }\n+\n+    @SuppressWarnings(\"unchecked\") // workaround for mocking a method for generic return type\n+    private static ZoneRegistry createZoneRegistryMock() {\n+        // Cannot use the standard registry mock as it's located in controller-server module\n+        ZoneRegistry registryMock = mock(ZoneRegistry.class);\n+        when(registryMock.system()).thenReturn(SystemName.main);\n+        when(registryMock.getConfigServerVipUri(any())).thenReturn(URI.create(\"http://localhost:8080/\"));\n+        when(registryMock.getConfigServerHttpsIdentity(any())).thenReturn(new AthenzService(\"domain\", \"servicename\"));\n+        ZoneList zoneListMock = mock(ZoneList.class);\n+        when(zoneListMock.reachable()).thenReturn(zoneListMock);\n+        when(zoneListMock.zones()).thenReturn((List)List.of(new SimpleZone(\"prod.us-west-1\"), new SimpleZone(\"prod.us-east-3\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAyMjgxOA=="}, "originalCommit": {"oid": "0e4f106c8f562fb3d7e01b68dea0d9df9fc241ef"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2096, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}