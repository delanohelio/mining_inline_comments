{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NzI3MTk1", "number": 13651, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToxNjowN1rOEHh3mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoxOTo1NlrOEHjBbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzMwMzk1OnYy", "diffSide": "RIGHT", "path": "cloud-tenant-cd/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToxNjowN1rOGm8Tng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMDowMzoyM1rOGnU0Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ4NzEzNA==", "bodyText": "Consider manually adding the required dependencies instead of relying on container-dev.", "url": "https://github.com/vespa-engine/vespa/pull/13651#discussion_r443487134", "createdAt": "2020-06-22T11:16:07Z", "author": {"login": "bjorncs"}, "path": "cloud-tenant-cd/pom.xml", "diffHunk": "@@ -43,6 +43,12 @@\n             <version>${project.version}</version>\n             <scope>provided</scope>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b580bf96165691622f19e73d445f346fe29fe74f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg4ODY0Ng==", "bodyText": "I disagree. container-dev is a convenience to ensure that you get imports for all packages that are provided from the container. It's better to keep the maintenance of that list in container-dev than spreading it around. By adding deps manually, you'll also have to add artifacts that you don't use directly to ensure that you get all necessary import-packages.", "url": "https://github.com/vespa-engine/vespa/pull/13651#discussion_r443888646", "createdAt": "2020-06-23T00:03:23Z", "author": {"login": "gjoranv"}, "path": "cloud-tenant-cd/pom.xml", "diffHunk": "@@ -43,6 +43,12 @@\n             <version>${project.version}</version>\n             <scope>provided</scope>\n         </dependency>\n+        <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ4NzEzNA=="}, "originalCommit": {"oid": "b580bf96165691622f19e73d445f346fe29fe74f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzMxMDcxOnYy", "diffSide": "RIGHT", "path": "tenant-cd-api/src/main/java/ai/vespa/hosted/cd/TestRuntime.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToxODoyM1rOGm8XzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToxODoyM1rOGm8XzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ4ODIwNQ==", "bodyText": "Consider using logging framework instead", "url": "https://github.com/vespa-engine/vespa/pull/13651#discussion_r443488205", "createdAt": "2020-06-22T11:18:23Z", "author": {"login": "bjorncs"}, "path": "tenant-cd-api/src/main/java/ai/vespa/hosted/cd/TestRuntime.java", "diffHunk": "@@ -13,8 +16,20 @@\n  */\n public interface TestRuntime {\n     static TestRuntime get() {\n-        ServiceLoader<TestRuntime> serviceLoader = ServiceLoader.load(TestRuntime.class);\n-        return serviceLoader.findFirst().orElseThrow(() -> new RuntimeException(\"No TestRuntime implementation found\"));\n+        var classloader = TestRuntime.class.getClassLoader();\n+\n+        System.out.println(\"classloader.toString() = \" + classloader.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b580bf96165691622f19e73d445f346fe29fe74f"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzMyOTE4OnYy", "diffSide": "RIGHT", "path": "tenant-cd-api/src/main/java/ai/vespa/hosted/cd/internal/TestRuntimeProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToyNTowM1rOGm8jmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToyNTowM1rOGm8jmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5MTIyNg==", "bodyText": "A public static final field that is a mutable object is a bit awkward\nfor an interface. Should we make this an abstract class instead?", "url": "https://github.com/vespa-engine/vespa/pull/13651#discussion_r443491226", "createdAt": "2020-06-22T11:25:03Z", "author": {"login": "bjorncs"}, "path": "tenant-cd-api/src/main/java/ai/vespa/hosted/cd/internal/TestRuntimeProvider.java", "diffHunk": "@@ -0,0 +1,24 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package ai.vespa.hosted.cd.internal;\n+\n+import ai.vespa.hosted.cd.TestRuntime;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * @author mortent\n+ */\n+public interface TestRuntimeProvider  {\n+\n+    static final AtomicReference<TestRuntime> testRuntime = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b580bf96165691622f19e73d445f346fe29fe74f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzMzMTM5OnYy", "diffSide": "RIGHT", "path": "vespa-osgi-testrunner/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToyNTo1MFrOGm8lAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToyNTo1MFrOGm8lAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5MTU4Ng==", "bodyText": "Deduplicate version with property", "url": "https://github.com/vespa-engine/vespa/pull/13651#discussion_r443491586", "createdAt": "2020-06-22T11:25:50Z", "author": {"login": "bjorncs"}, "path": "vespa-osgi-testrunner/pom.xml", "diffHunk": "@@ -0,0 +1,88 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!-- Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root. -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>parent</artifactId>\n+        <groupId>com.yahoo.vespa</groupId>\n+        <version>7-SNAPSHOT</version>\n+        <relativePath>../parent/pom.xml</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>vespa-osgi-testrunner</artifactId>\n+    <packaging>container-plugin</packaging>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.yahoo.vespa</groupId>\n+            <artifactId>container-dev</artifactId>\n+            <version>7-SNAPSHOT</version>\n+            <scope>provided</scope>\n+        </dependency>\n+\n+        <!-- Verify that we need all junit deps -->\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-engine</artifactId>\n+            <version>5.6.2</version>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.jupiter</groupId>\n+                    <artifactId>junit-jupiter-api</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.platform</groupId>\n+            <artifactId>junit-platform-launcher</artifactId>\n+            <version>1.6.2</version>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.jupiter</groupId>\n+                    <artifactId>junit-jupiter-api</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter</artifactId>\n+            <version>5.6.2</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b580bf96165691622f19e73d445f346fe29fe74f"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzMzMzI0OnYy", "diffSide": "RIGHT", "path": "vespa-osgi-testrunner/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToyNjoyNlrOGm8mNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToyNjoyNlrOGm8mNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5MTg5Mg==", "bodyText": "Use {project.version}?", "url": "https://github.com/vespa-engine/vespa/pull/13651#discussion_r443491892", "createdAt": "2020-06-22T11:26:26Z", "author": {"login": "bjorncs"}, "path": "vespa-osgi-testrunner/pom.xml", "diffHunk": "@@ -0,0 +1,88 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!-- Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root. -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>parent</artifactId>\n+        <groupId>com.yahoo.vespa</groupId>\n+        <version>7-SNAPSHOT</version>\n+        <relativePath>../parent/pom.xml</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>vespa-osgi-testrunner</artifactId>\n+    <packaging>container-plugin</packaging>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.yahoo.vespa</groupId>\n+            <artifactId>container-dev</artifactId>\n+            <version>7-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b580bf96165691622f19e73d445f346fe29fe74f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzMzNDM4OnYy", "diffSide": "RIGHT", "path": "vespa-osgi-testrunner/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToyNjo0OVrOGm8m6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToyNjo0OVrOGm8m6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5MjA3Mg==", "bodyText": "Not fan of container-dev :)", "url": "https://github.com/vespa-engine/vespa/pull/13651#discussion_r443492072", "createdAt": "2020-06-22T11:26:49Z", "author": {"login": "bjorncs"}, "path": "vespa-osgi-testrunner/pom.xml", "diffHunk": "@@ -0,0 +1,88 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!-- Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root. -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>parent</artifactId>\n+        <groupId>com.yahoo.vespa</groupId>\n+        <version>7-SNAPSHOT</version>\n+        <relativePath>../parent/pom.xml</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>vespa-osgi-testrunner</artifactId>\n+    <packaging>container-plugin</packaging>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.yahoo.vespa</groupId>\n+            <artifactId>container-dev</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b580bf96165691622f19e73d445f346fe29fe74f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzMzNTE3OnYy", "diffSide": "RIGHT", "path": "vespa-osgi-testrunner/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToyNzowM1rOGm8nZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToyNzowM1rOGm8nZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5MjE5OA==", "bodyText": "Use {project.version}?", "url": "https://github.com/vespa-engine/vespa/pull/13651#discussion_r443492198", "createdAt": "2020-06-22T11:27:03Z", "author": {"login": "bjorncs"}, "path": "vespa-osgi-testrunner/pom.xml", "diffHunk": "@@ -0,0 +1,88 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!-- Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root. -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>parent</artifactId>\n+        <groupId>com.yahoo.vespa</groupId>\n+        <version>7-SNAPSHOT</version>\n+        <relativePath>../parent/pom.xml</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>vespa-osgi-testrunner</artifactId>\n+    <packaging>container-plugin</packaging>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>com.yahoo.vespa</groupId>\n+            <artifactId>container-dev</artifactId>\n+            <version>7-SNAPSHOT</version>\n+            <scope>provided</scope>\n+        </dependency>\n+\n+        <!-- Verify that we need all junit deps -->\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter-engine</artifactId>\n+            <version>5.6.2</version>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.jupiter</groupId>\n+                    <artifactId>junit-jupiter-api</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.platform</groupId>\n+            <artifactId>junit-platform-launcher</artifactId>\n+            <version>1.6.2</version>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.jupiter</groupId>\n+                    <artifactId>junit-jupiter-api</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter</artifactId>\n+            <version>5.6.2</version>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.jupiter</groupId>\n+                    <artifactId>junit-jupiter-api</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        \n+        <dependency>\n+            <groupId>com.yahoo.vespa</groupId>\n+            <artifactId>tenant-cd-api</artifactId>\n+            <version>7-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b580bf96165691622f19e73d445f346fe29fe74f"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzMzODU4OnYy", "diffSide": "RIGHT", "path": "vespa-osgi-testrunner/src/main/java/com/yahoo/vespa/testrunner/JunitHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToyODoxNFrOGm8pcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToyODoxNFrOGm8pcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5MjcyMg==", "bodyText": "Return unsupported method if not POST.", "url": "https://github.com/vespa-engine/vespa/pull/13651#discussion_r443492722", "createdAt": "2020-06-22T11:28:14Z", "author": {"login": "bjorncs"}, "path": "vespa-osgi-testrunner/src/main/java/com/yahoo/vespa/testrunner/JunitHandler.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.testrunner;\n+\n+import ai.vespa.hosted.cd.internal.TestRuntimeProvider;\n+import com.google.inject.Inject;\n+import com.yahoo.container.handler.metrics.JsonResponse;\n+import com.yahoo.container.jdisc.HttpRequest;\n+import com.yahoo.container.jdisc.HttpResponse;\n+import com.yahoo.container.jdisc.LoggingRequestHandler;\n+import com.yahoo.container.logging.AccessLog;\n+import com.yahoo.io.IOUtils;\n+import com.yahoo.restapi.ErrorResponse;\n+import com.yahoo.restapi.MessageResponse;\n+import org.osgi.framework.Bundle;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import java.util.function.Function;\n+\n+/**\n+ * @author mortent\n+ */\n+public class JunitHandler extends LoggingRequestHandler {\n+\n+    private final JunitRunner junitRunner;\n+    private final TestRuntimeProvider testRuntimeProvider;\n+\n+    @Inject\n+    public JunitHandler(Executor executor, AccessLog accessLog, JunitRunner junitRunner, TestRuntimeProvider testRuntimeProvider) {\n+        super(executor, accessLog);\n+        this.junitRunner = junitRunner;\n+        this.testRuntimeProvider = testRuntimeProvider;\n+    }\n+\n+    @Override\n+    public HttpResponse handle(HttpRequest httpRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b580bf96165691622f19e73d445f346fe29fe74f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzM0MTc2OnYy", "diffSide": "RIGHT", "path": "vespa-osgi-testrunner/src/main/java/com/yahoo/vespa/testrunner/JunitHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToyOToyNlrOGm8raw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToyOToyNlrOGm8raw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5MzIyNw==", "bodyText": "https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/InputStream.html#readAllBytes()", "url": "https://github.com/vespa-engine/vespa/pull/13651#discussion_r443493227", "createdAt": "2020-06-22T11:29:26Z", "author": {"login": "bjorncs"}, "path": "vespa-osgi-testrunner/src/main/java/com/yahoo/vespa/testrunner/JunitHandler.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.testrunner;\n+\n+import ai.vespa.hosted.cd.internal.TestRuntimeProvider;\n+import com.google.inject.Inject;\n+import com.yahoo.container.handler.metrics.JsonResponse;\n+import com.yahoo.container.jdisc.HttpRequest;\n+import com.yahoo.container.jdisc.HttpResponse;\n+import com.yahoo.container.jdisc.LoggingRequestHandler;\n+import com.yahoo.container.logging.AccessLog;\n+import com.yahoo.io.IOUtils;\n+import com.yahoo.restapi.ErrorResponse;\n+import com.yahoo.restapi.MessageResponse;\n+import org.osgi.framework.Bundle;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import java.util.function.Function;\n+\n+/**\n+ * @author mortent\n+ */\n+public class JunitHandler extends LoggingRequestHandler {\n+\n+    private final JunitRunner junitRunner;\n+    private final TestRuntimeProvider testRuntimeProvider;\n+\n+    @Inject\n+    public JunitHandler(Executor executor, AccessLog accessLog, JunitRunner junitRunner, TestRuntimeProvider testRuntimeProvider) {\n+        super(executor, accessLog);\n+        this.junitRunner = junitRunner;\n+        this.testRuntimeProvider = testRuntimeProvider;\n+    }\n+\n+    @Override\n+    public HttpResponse handle(HttpRequest httpRequest) {\n+        String mode = property(\"mode\", \"help\", httpRequest, String::valueOf);\n+        TestDescriptor.TestCategory category = property(\"category\", TestDescriptor.TestCategory.systemtest, httpRequest, TestDescriptor.TestCategory::valueOf);\n+\n+        try {\n+            testRuntimeProvider.initialize(IOUtils.readBytes(httpRequest.getData(), 1000 * 1000));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b580bf96165691622f19e73d445f346fe29fe74f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzM3MjA1OnYy", "diffSide": "RIGHT", "path": "vespa-osgi-testrunner/src/main/java/com/yahoo/vespa/testrunner/JunitHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMTo0MDozMVrOGm8-8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMTo0MDozMVrOGm8-8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5ODIyNA==", "bodyText": "Can this be simplified to a single method in JunitRunner?", "url": "https://github.com/vespa-engine/vespa/pull/13651#discussion_r443498224", "createdAt": "2020-06-22T11:40:31Z", "author": {"login": "bjorncs"}, "path": "vespa-osgi-testrunner/src/main/java/com/yahoo/vespa/testrunner/JunitHandler.java", "diffHunk": "@@ -0,0 +1,71 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.testrunner;\n+\n+import ai.vespa.hosted.cd.internal.TestRuntimeProvider;\n+import com.google.inject.Inject;\n+import com.yahoo.container.handler.metrics.JsonResponse;\n+import com.yahoo.container.jdisc.HttpRequest;\n+import com.yahoo.container.jdisc.HttpResponse;\n+import com.yahoo.container.jdisc.LoggingRequestHandler;\n+import com.yahoo.container.logging.AccessLog;\n+import com.yahoo.io.IOUtils;\n+import com.yahoo.restapi.ErrorResponse;\n+import com.yahoo.restapi.MessageResponse;\n+import org.osgi.framework.Bundle;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import java.util.function.Function;\n+\n+/**\n+ * @author mortent\n+ */\n+public class JunitHandler extends LoggingRequestHandler {\n+\n+    private final JunitRunner junitRunner;\n+    private final TestRuntimeProvider testRuntimeProvider;\n+\n+    @Inject\n+    public JunitHandler(Executor executor, AccessLog accessLog, JunitRunner junitRunner, TestRuntimeProvider testRuntimeProvider) {\n+        super(executor, accessLog);\n+        this.junitRunner = junitRunner;\n+        this.testRuntimeProvider = testRuntimeProvider;\n+    }\n+\n+    @Override\n+    public HttpResponse handle(HttpRequest httpRequest) {\n+        String mode = property(\"mode\", \"help\", httpRequest, String::valueOf);\n+        TestDescriptor.TestCategory category = property(\"category\", TestDescriptor.TestCategory.systemtest, httpRequest, TestDescriptor.TestCategory::valueOf);\n+\n+        try {\n+            testRuntimeProvider.initialize(IOUtils.readBytes(httpRequest.getData(), 1000 * 1000));\n+        } catch (IOException e) {\n+            return new ErrorResponse(500, \"testruntime-initialization\", \"Exception reading test config\");\n+        }\n+\n+        if (\"help\".equalsIgnoreCase(mode)) {\n+            return new MessageResponse(\"Accepted modes: \\n help \\n list \\n execute\");\n+        }\n+\n+        if (!\"list\".equalsIgnoreCase(mode) && !\"execute\".equalsIgnoreCase(mode)) {\n+            return new ErrorResponse(400, \"client error\", \"Unknown mode \\\"\" + mode + \"\\\"\");\n+        }\n+\n+        Bundle testBundle = junitRunner.findTestBundle(\"-tests\");\n+        TestDescriptor testDescriptor = junitRunner.loadTestDescriptor(testBundle);\n+        List<Class<?>> testClasses = junitRunner.loadClasses(testBundle, testDescriptor, category);\n+\n+        String jsonResponse = junitRunner.executeTests(testClasses);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b580bf96165691622f19e73d445f346fe29fe74f"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzM5MjYyOnYy", "diffSide": "RIGHT", "path": "vespa-osgi-testrunner/src/main/java/com/yahoo/vespa/testrunner/TestDescriptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMTo0NzoyOVrOGm9MJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMTo0NzoyOVrOGm9MJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUwMTYwNQ==", "bodyText": "We may want to reuse this class in maven-vespa-plugin, perhaps hosted-apis.", "url": "https://github.com/vespa-engine/vespa/pull/13651#discussion_r443501605", "createdAt": "2020-06-22T11:47:29Z", "author": {"login": "bjorncs"}, "path": "vespa-osgi-testrunner/src/main/java/com/yahoo/vespa/testrunner/TestDescriptor.java", "diffHunk": "@@ -0,0 +1,60 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.testrunner;\n+\n+import com.yahoo.slime.Cursor;\n+import com.yahoo.slime.Inspector;\n+import com.yahoo.slime.SlimeStream;\n+import com.yahoo.slime.SlimeUtils;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * @author mortent\n+ */\n+public class TestDescriptor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b580bf96165691622f19e73d445f346fe29fe74f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzQ5Mjk0OnYy", "diffSide": "RIGHT", "path": "vespa-osgi-testrunner/src/main/java/com/yahoo/vespa/testrunner/JunitRunner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoxOTo1NlrOGm-Ksg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjoyMTowN1rOGm-NTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxNzYxOA==", "bodyText": "Maybe move location of manifest file as a constant in TestDescriptor", "url": "https://github.com/vespa-engine/vespa/pull/13651#discussion_r443517618", "createdAt": "2020-06-22T12:19:56Z", "author": {"login": "bjorncs"}, "path": "vespa-osgi-testrunner/src/main/java/com/yahoo/vespa/testrunner/JunitRunner.java", "diffHunk": "@@ -0,0 +1,167 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.testrunner;\n+\n+import com.google.inject.Inject;\n+import com.yahoo.component.AbstractComponent;\n+import com.yahoo.exception.ExceptionUtils;\n+import com.yahoo.io.IOUtils;\n+import com.yahoo.jdisc.application.OsgiFramework;\n+import com.yahoo.slime.Cursor;\n+import com.yahoo.slime.Slime;\n+import com.yahoo.slime.SlimeUtils;\n+import com.yahoo.yolean.Exceptions;\n+import org.junit.jupiter.engine.JupiterTestEngine;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.launcher.Launcher;\n+import org.junit.platform.launcher.LauncherConstants;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.core.LauncherConfig;\n+import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\n+import org.junit.platform.launcher.core.LauncherFactory;\n+import org.junit.platform.launcher.listeners.LoggingListener;\n+import org.junit.platform.launcher.listeners.SummaryGeneratingListener;\n+import org.junit.platform.launcher.listeners.TestExecutionSummary;\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.BundleContext;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * @author mortent\n+ */\n+public class JunitRunner extends AbstractComponent {\n+    private static final Logger logger = Logger.getLogger(JunitRunner.class.getName());\n+\n+    private final BundleContext bundleContext;\n+\n+    @Inject\n+    public JunitRunner(OsgiFramework osgiFramework) {\n+        // TODO mortent: Find a way to workaround this hack\n+        var tmp = osgiFramework.bundleContext();\n+        try {\n+            var field = tmp.getClass().getDeclaredField(\"wrapped\");\n+            field.setAccessible(true);\n+            bundleContext = (BundleContext) field.get(tmp);\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public Bundle findTestBundle(String bundleNameSuffix) {\n+        return Stream.of(bundleContext.getBundles())\n+                .filter(bundle -> bundle.getSymbolicName().endsWith(bundleNameSuffix))\n+                .findAny()\n+                .orElseThrow(() -> new RuntimeException(\"No bundle on classpath with name ending on \" + bundleNameSuffix));\n+    }\n+\n+    public TestDescriptor loadTestDescriptor(Bundle bundle) {\n+        URL resource = bundle.getEntry(\"META-INF/testClasses.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b580bf96165691622f19e73d445f346fe29fe74f"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxODI4Ng==", "bodyText": "Make filename more generic (e.g. testBundleDescriptor.json) ?", "url": "https://github.com/vespa-engine/vespa/pull/13651#discussion_r443518286", "createdAt": "2020-06-22T12:21:07Z", "author": {"login": "bjorncs"}, "path": "vespa-osgi-testrunner/src/main/java/com/yahoo/vespa/testrunner/JunitRunner.java", "diffHunk": "@@ -0,0 +1,167 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.testrunner;\n+\n+import com.google.inject.Inject;\n+import com.yahoo.component.AbstractComponent;\n+import com.yahoo.exception.ExceptionUtils;\n+import com.yahoo.io.IOUtils;\n+import com.yahoo.jdisc.application.OsgiFramework;\n+import com.yahoo.slime.Cursor;\n+import com.yahoo.slime.Slime;\n+import com.yahoo.slime.SlimeUtils;\n+import com.yahoo.yolean.Exceptions;\n+import org.junit.jupiter.engine.JupiterTestEngine;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.launcher.Launcher;\n+import org.junit.platform.launcher.LauncherConstants;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.core.LauncherConfig;\n+import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\n+import org.junit.platform.launcher.core.LauncherFactory;\n+import org.junit.platform.launcher.listeners.LoggingListener;\n+import org.junit.platform.launcher.listeners.SummaryGeneratingListener;\n+import org.junit.platform.launcher.listeners.TestExecutionSummary;\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.BundleContext;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * @author mortent\n+ */\n+public class JunitRunner extends AbstractComponent {\n+    private static final Logger logger = Logger.getLogger(JunitRunner.class.getName());\n+\n+    private final BundleContext bundleContext;\n+\n+    @Inject\n+    public JunitRunner(OsgiFramework osgiFramework) {\n+        // TODO mortent: Find a way to workaround this hack\n+        var tmp = osgiFramework.bundleContext();\n+        try {\n+            var field = tmp.getClass().getDeclaredField(\"wrapped\");\n+            field.setAccessible(true);\n+            bundleContext = (BundleContext) field.get(tmp);\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public Bundle findTestBundle(String bundleNameSuffix) {\n+        return Stream.of(bundleContext.getBundles())\n+                .filter(bundle -> bundle.getSymbolicName().endsWith(bundleNameSuffix))\n+                .findAny()\n+                .orElseThrow(() -> new RuntimeException(\"No bundle on classpath with name ending on \" + bundleNameSuffix));\n+    }\n+\n+    public TestDescriptor loadTestDescriptor(Bundle bundle) {\n+        URL resource = bundle.getEntry(\"META-INF/testClasses.json\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUxNzYxOA=="}, "originalCommit": {"oid": "b580bf96165691622f19e73d445f346fe29fe74f"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1964, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}