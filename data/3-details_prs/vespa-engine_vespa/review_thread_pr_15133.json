{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzOTM0Nzc1", "number": 15133, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTo1Mjo0OFrOE0ThNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMDowMDo1NFrOE0TtpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjgxMjA3OnYy", "diffSide": "RIGHT", "path": "eval/src/tests/eval/fast_value/fast_value_test.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTo1Mjo0OFrOHr9QSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTo1Mjo0OFrOHr9QSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1NDQwOA==", "bodyText": "consider splitting into separate tests", "url": "https://github.com/vespa-engine/vespa/pull/15133#discussion_r515854408", "createdAt": "2020-11-02T09:52:48Z", "author": {"login": "havardpe"}, "path": "eval/src/tests/eval/fast_value/fast_value_test.cpp", "diffHunk": "@@ -56,4 +58,57 @@ TEST(FastCellsTest, add_cells_works) {\n     EXPECT_EQ(*cells.get(5), 6.0);\n }\n \n+using SA = std::vector<vespalib::stringref>;\n+\n+TEST(FastValueTest, add_subspace_robustness) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f8b850f484edb2e8aa2cfab335903c417f81628"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjgyMzA5OnYy", "diffSide": "RIGHT", "path": "eval/src/vespa/eval/eval/fast_sparse_map.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTo1NTozMlrOHr9W7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTo1NTozMlrOHr9W7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1NjExMQ==", "bodyText": "consider adding compiler intrinsic indicating that adding is most likely", "url": "https://github.com/vespa-engine/vespa/pull/15133#discussion_r515856111", "createdAt": "2020-11-02T09:55:32Z", "author": {"login": "havardpe"}, "path": "eval/src/vespa/eval/eval/fast_sparse_map.h", "diffHunk": "@@ -135,6 +135,26 @@ class FastSparseMap\n         _map.insert(std::make_pair(Key(hash), value));\n     }\n \n+    // used to add a mapping, but in the unlikely case\n+    // of hash collision it works like lookup instead.\n+    template <typename T>\n+    size_t lookup_or_add_mapping(ConstArrayRef<T> addr) {\n+        uint64_t hash = 0;\n+        size_t old_labels_size = _labels.size();\n+        for (const auto &label: addr) {\n+            _labels.emplace_back(label);\n+            hash = 31 * hash + hash_label(_labels.back());\n+        }\n+        uint32_t value = _map.size();\n+        auto [iter, did_add] = _map.insert(std::make_pair(Key(hash), value));\n+        if (did_add) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f8b850f484edb2e8aa2cfab335903c417f81628"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjgzNDQyOnYy", "diffSide": "RIGHT", "path": "eval/src/vespa/eval/eval/fast_value.hpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTo1ODoyN1rOHr9d2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTo1ODoyN1rOHr9d2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1Nzg4MQ==", "bodyText": "consider adding compiler intrinsic indicating that adding is expected", "url": "https://github.com/vespa-engine/vespa/pull/15133#discussion_r515857881", "createdAt": "2020-11-02T09:58:27Z", "author": {"login": "havardpe"}, "path": "eval/src/vespa/eval/eval/fast_value.hpp", "diffHunk": "@@ -230,8 +230,11 @@ struct FastValue final : Value, ValueBuilder<T> {\n     const Value::Index &index() const override { return my_index; }\n     TypedCells cells() const override { return TypedCells(my_cells.memory, get_cell_type<T>(), my_cells.size); }\n     ArrayRef<T> add_subspace(ConstArrayRef<vespalib::stringref> addr) override {\n-        my_index.map.add_mapping(addr);\n-        return my_cells.add_cells(my_subspace_size);\n+        size_t idx = my_index.map.lookup_or_add_mapping(addr) * my_subspace_size;\n+        if (idx == my_cells.size) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f8b850f484edb2e8aa2cfab335903c417f81628"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjg0Mzg5OnYy", "diffSide": "RIGHT", "path": "eval/src/vespa/eval/eval/fast_sparse_map.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMDowMDo1NFrOHr9jvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMDowMDo1NFrOHr9jvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg1OTM4OQ==", "bodyText": "I think we should just call this add_mapping and remove the old version altogether.", "url": "https://github.com/vespa-engine/vespa/pull/15133#discussion_r515859389", "createdAt": "2020-11-02T10:00:54Z", "author": {"login": "havardpe"}, "path": "eval/src/vespa/eval/eval/fast_sparse_map.h", "diffHunk": "@@ -135,6 +135,26 @@ class FastSparseMap\n         _map.insert(std::make_pair(Key(hash), value));\n     }\n \n+    // used to add a mapping, but in the unlikely case\n+    // of hash collision it works like lookup instead.\n+    template <typename T>\n+    size_t lookup_or_add_mapping(ConstArrayRef<T> addr) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f8b850f484edb2e8aa2cfab335903c417f81628"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 957, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}