{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMDE1MDQw", "number": 11684, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMDoyNzowNVrODWf5Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNDoyOToxNlrODWjvsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0OTE3ODA3OnYy", "diffSide": "RIGHT", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/deployment/DeploymentStatus.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMDoyNzowNVrOFbSoYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMzowMDo0M1rOFbWH-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE2MTEyMg==", "bodyText": "Change to \"the instance's current change\"?", "url": "https://github.com/vespa-engine/vespa/pull/11684#discussion_r364161122", "createdAt": "2020-01-08T10:27:05Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/deployment/DeploymentStatus.java", "diffHunk": "@@ -90,34 +90,42 @@ public DeploymentStatus(Application application, Map<JobId, JobStatus> allJobs,\n         this.allSteps = List.copyOf(allSteps);\n     }\n \n+    /** The application this deployment status concerns. */\n     public Application application() {\n         return application;\n     }\n \n+    /** A filterable list of the status of all jobs for this application. */\n     public JobList jobs() {\n         return allJobs;\n     }\n \n+    /** Whether any jobs of this application are failing with other errors than lack of capacity in a test zone. */\n     public boolean hasFailures() {\n         return ! allJobs.failing()\n                         .not().withStatus(RunStatus.outOfCapacity)\n                         .isEmpty();\n     }\n \n+    /** All job statuses, by job type, for the given instance. */\n     public Map<JobType, JobStatus> instanceJobs(InstanceName instance) {\n         return allJobs.asList().stream()\n                       .filter(job -> job.id().application().equals(application.id().instance(instance)))\n                       .collect(Collectors.toUnmodifiableMap(job -> job.id().type(),\n                                                          job -> job));\n     }\n \n+    /** Filterable job status lists for each instance of this application. */\n     public Map<ApplicationId, JobList> instanceJobs() {\n         return allJobs.asList().stream()\n                       .collect(groupingBy(job -> job.id().application(),\n                                           collectingAndThen(toUnmodifiableList(), JobList::from)));\n     }\n \n-    /** Returns the set of jobs that need to run for the application's current change to be considered complete. */\n+    /**\n+     * The set of jobs that need to run for the application's current change to be considered complete,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f69ea8459763217ec20301a3e484cc3bfa7e9f42"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIxODIwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * The set of jobs that need to run for the application's current change to be considered complete,\n          \n          \n            \n                 * The set of jobs that need to run for the changes of each instance of the application to be considered complete,", "url": "https://github.com/vespa-engine/vespa/pull/11684#discussion_r364218209", "createdAt": "2020-01-08T13:00:21Z", "author": {"login": "jonmv"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/deployment/DeploymentStatus.java", "diffHunk": "@@ -90,34 +90,42 @@ public DeploymentStatus(Application application, Map<JobId, JobStatus> allJobs,\n         this.allSteps = List.copyOf(allSteps);\n     }\n \n+    /** The application this deployment status concerns. */\n     public Application application() {\n         return application;\n     }\n \n+    /** A filterable list of the status of all jobs for this application. */\n     public JobList jobs() {\n         return allJobs;\n     }\n \n+    /** Whether any jobs of this application are failing with other errors than lack of capacity in a test zone. */\n     public boolean hasFailures() {\n         return ! allJobs.failing()\n                         .not().withStatus(RunStatus.outOfCapacity)\n                         .isEmpty();\n     }\n \n+    /** All job statuses, by job type, for the given instance. */\n     public Map<JobType, JobStatus> instanceJobs(InstanceName instance) {\n         return allJobs.asList().stream()\n                       .filter(job -> job.id().application().equals(application.id().instance(instance)))\n                       .collect(Collectors.toUnmodifiableMap(job -> job.id().type(),\n                                                          job -> job));\n     }\n \n+    /** Filterable job status lists for each instance of this application. */\n     public Map<ApplicationId, JobList> instanceJobs() {\n         return allJobs.asList().stream()\n                       .collect(groupingBy(job -> job.id().application(),\n                                           collectingAndThen(toUnmodifiableList(), JobList::from)));\n     }\n \n-    /** Returns the set of jobs that need to run for the application's current change to be considered complete. */\n+    /**\n+     * The set of jobs that need to run for the application's current change to be considered complete,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE2MTEyMg=="}, "originalCommit": {"oid": "f69ea8459763217ec20301a3e484cc3bfa7e9f42"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIxODM2Mg==", "bodyText": "Yeah, I should probably look over the javadoc.", "url": "https://github.com/vespa-engine/vespa/pull/11684#discussion_r364218362", "createdAt": "2020-01-08T13:00:43Z", "author": {"login": "jonmv"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/deployment/DeploymentStatus.java", "diffHunk": "@@ -90,34 +90,42 @@ public DeploymentStatus(Application application, Map<JobId, JobStatus> allJobs,\n         this.allSteps = List.copyOf(allSteps);\n     }\n \n+    /** The application this deployment status concerns. */\n     public Application application() {\n         return application;\n     }\n \n+    /** A filterable list of the status of all jobs for this application. */\n     public JobList jobs() {\n         return allJobs;\n     }\n \n+    /** Whether any jobs of this application are failing with other errors than lack of capacity in a test zone. */\n     public boolean hasFailures() {\n         return ! allJobs.failing()\n                         .not().withStatus(RunStatus.outOfCapacity)\n                         .isEmpty();\n     }\n \n+    /** All job statuses, by job type, for the given instance. */\n     public Map<JobType, JobStatus> instanceJobs(InstanceName instance) {\n         return allJobs.asList().stream()\n                       .filter(job -> job.id().application().equals(application.id().instance(instance)))\n                       .collect(Collectors.toUnmodifiableMap(job -> job.id().type(),\n                                                          job -> job));\n     }\n \n+    /** Filterable job status lists for each instance of this application. */\n     public Map<ApplicationId, JobList> instanceJobs() {\n         return allJobs.asList().stream()\n                       .collect(groupingBy(job -> job.id().application(),\n                                           collectingAndThen(toUnmodifiableList(), JobList::from)));\n     }\n \n-    /** Returns the set of jobs that need to run for the application's current change to be considered complete. */\n+    /**\n+     * The set of jobs that need to run for the application's current change to be considered complete,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDE2MTEyMg=="}, "originalCommit": {"oid": "f69ea8459763217ec20301a3e484cc3bfa7e9f42"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0OTgwOTEzOnYy", "diffSide": "RIGHT", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/restapi/application/ApplicationApiHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNDoyOToxNlrOFbYisg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNToxMjo1N1rOFbZ87Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI1Nzk3MA==", "bodyText": "Ah, this should prefer production instances.", "url": "https://github.com/vespa-engine/vespa/pull/11684#discussion_r364257970", "createdAt": "2020-01-08T14:29:16Z", "author": {"login": "jonmv"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/restapi/application/ApplicationApiHandler.java", "diffHunk": "@@ -699,24 +699,27 @@ private void toSlime(Cursor object, Application application, HttpRequest request\n                                                  \"/job/\",\n                                                  request.getUri()).toString());\n \n+        DeploymentStatus status = controller.jobController().deploymentStatus(application);\n         application.latestVersion().ifPresent(version -> toSlime(version, object.setObject(\"latestVersion\")));\n \n         application.projectId().ifPresent(id -> object.setLong(\"projectId\", id));\n \n-        // Currently deploying change\n-        if ( ! application.change().isEmpty())\n-            toSlime(object.setObject(\"deploying\"), application.change());\n+        // TODO jonmv: Remove this when users are updated.\n+        application.instances().values().stream().findFirst().ifPresent(instance -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f64861a8767c8d9d3f82c98d6a01579fcaae335e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI4MTA2OQ==", "bodyText": "Well, I don\u2019t think it\u2019s used for anyrhing now.9", "url": "https://github.com/vespa-engine/vespa/pull/11684#discussion_r364281069", "createdAt": "2020-01-08T15:12:57Z", "author": {"login": "jonmv"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/restapi/application/ApplicationApiHandler.java", "diffHunk": "@@ -699,24 +699,27 @@ private void toSlime(Cursor object, Application application, HttpRequest request\n                                                  \"/job/\",\n                                                  request.getUri()).toString());\n \n+        DeploymentStatus status = controller.jobController().deploymentStatus(application);\n         application.latestVersion().ifPresent(version -> toSlime(version, object.setObject(\"latestVersion\")));\n \n         application.projectId().ifPresent(id -> object.setLong(\"projectId\", id));\n \n-        // Currently deploying change\n-        if ( ! application.change().isEmpty())\n-            toSlime(object.setObject(\"deploying\"), application.change());\n+        // TODO jonmv: Remove this when users are updated.\n+        application.instances().values().stream().findFirst().ifPresent(instance -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDI1Nzk3MA=="}, "originalCommit": {"oid": "f64861a8767c8d9d3f82c98d6a01579fcaae335e"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2700, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}