{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzNzA5MjE3", "number": 15722, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNDozMjozMlrOFBzwvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNDozNjoxMVrOFBz4Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDQwOTU2OnYy", "diffSide": "RIGHT", "path": "vespalib/src/tests/stllike/hashtable_test.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNDozMjozMlrOIApk2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNjoyMDoxMVrOIAuycw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU1MjA4OA==", "bodyText": "consider aliasing First to Select1st (use actual code instead of custom code that does the same)", "url": "https://github.com/vespa-engine/vespa/pull/15722#discussion_r537552088", "createdAt": "2020-12-07T14:32:32Z", "author": {"login": "havardpe"}, "path": "vespalib/src/tests/stllike/hashtable_test.cpp", "diffHunk": "@@ -73,6 +73,48 @@ TEST(\"require that hashtable<int> can be copied\") {\n     EXPECT_EQUAL(42, *table2.find(42));\n }\n \n+TEST(\"require that you can insert duplicates\") {\n+    using Pair = std::pair<int, vespalib::string>;\n+    using Map = hashtable<int, Pair, vespalib::hash<int>, std::equal_to<int>, First<int, Pair>>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "313875e52617ed3ba23cbe288ca69ff297a818a6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYzNzQ5MQ==", "bodyText": "Done", "url": "https://github.com/vespa-engine/vespa/pull/15722#discussion_r537637491", "createdAt": "2020-12-07T16:20:11Z", "author": {"login": "baldersheim"}, "path": "vespalib/src/tests/stllike/hashtable_test.cpp", "diffHunk": "@@ -73,6 +73,48 @@ TEST(\"require that hashtable<int> can be copied\") {\n     EXPECT_EQUAL(42, *table2.find(42));\n }\n \n+TEST(\"require that you can insert duplicates\") {\n+    using Pair = std::pair<int, vespalib::string>;\n+    using Map = hashtable<int, Pair, vespalib::hash<int>, std::equal_to<int>, First<int, Pair>>;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU1MjA4OA=="}, "originalCommit": {"oid": "313875e52617ed3ba23cbe288ca69ff297a818a6"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDQyODc4OnYy", "diffSide": "RIGHT", "path": "vespalib/src/tests/stllike/hashtable_test.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNDozNjoxMVrOIApvow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNjoxMToxM1rOIAuXgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU1NDg1MQ==", "bodyText": "should also verify that duplicates survive resizing", "url": "https://github.com/vespa-engine/vespa/pull/15722#discussion_r537554851", "createdAt": "2020-12-07T14:36:11Z", "author": {"login": "havardpe"}, "path": "vespalib/src/tests/stllike/hashtable_test.cpp", "diffHunk": "@@ -73,6 +73,48 @@ TEST(\"require that hashtable<int> can be copied\") {\n     EXPECT_EQUAL(42, *table2.find(42));\n }\n \n+TEST(\"require that you can insert duplicates\") {\n+    using Pair = std::pair<int, vespalib::string>;\n+    using Map = hashtable<int, Pair, vespalib::hash<int>, std::equal_to<int>, First<int, Pair>>;\n+\n+    Map m(1);\n+    EXPECT_EQUAL(0u, m.size());\n+    EXPECT_EQUAL(8u, m.capacity());\n+    auto res = m.insert(Pair(1, \"1\"));\n+    EXPECT_TRUE(res.second);\n+    EXPECT_EQUAL(1u, m.size());\n+    EXPECT_EQUAL(8u, m.capacity());\n+    res = m.insert(Pair(1, \"1.2\"));\n+    EXPECT_FALSE(res.second);\n+    auto found = m.find(1);\n+    ASSERT_TRUE(found != m.end());\n+    EXPECT_EQUAL(found->second, \"1\");\n+\n+    m.force_insert(Pair(1, \"1.2\"));\n+    EXPECT_EQUAL(2u, m.size());\n+    EXPECT_EQUAL(8u, m.capacity());\n+    m.force_insert(Pair(1, \"1.3\"));\n+    EXPECT_EQUAL(3u, m.size());\n+    EXPECT_EQUAL(16u, m.capacity());\n+    found = m.find(1);\n+    ASSERT_TRUE(found != m.end());\n+    EXPECT_EQUAL(found->second, \"1\");\n+\n+    m.erase(1);\n+    EXPECT_EQUAL(2u, m.size());\n+    EXPECT_EQUAL(16u, m.capacity());\n+    found = m.find(1);\n+    ASSERT_TRUE(found != m.end());\n+    EXPECT_EQUAL(found->second, \"1.3\");\n+\n+    m.erase(1);\n+    EXPECT_EQUAL(1u, m.size());\n+    EXPECT_EQUAL(16u, m.capacity());\n+    found = m.find(1);\n+    ASSERT_TRUE(found != m.end());\n+    EXPECT_EQUAL(found->second, \"1.2\");\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "313875e52617ed3ba23cbe288ca69ff297a818a6"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYzMDU5NA==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/15722#discussion_r537630594", "createdAt": "2020-12-07T16:11:13Z", "author": {"login": "baldersheim"}, "path": "vespalib/src/tests/stllike/hashtable_test.cpp", "diffHunk": "@@ -73,6 +73,48 @@ TEST(\"require that hashtable<int> can be copied\") {\n     EXPECT_EQUAL(42, *table2.find(42));\n }\n \n+TEST(\"require that you can insert duplicates\") {\n+    using Pair = std::pair<int, vespalib::string>;\n+    using Map = hashtable<int, Pair, vespalib::hash<int>, std::equal_to<int>, First<int, Pair>>;\n+\n+    Map m(1);\n+    EXPECT_EQUAL(0u, m.size());\n+    EXPECT_EQUAL(8u, m.capacity());\n+    auto res = m.insert(Pair(1, \"1\"));\n+    EXPECT_TRUE(res.second);\n+    EXPECT_EQUAL(1u, m.size());\n+    EXPECT_EQUAL(8u, m.capacity());\n+    res = m.insert(Pair(1, \"1.2\"));\n+    EXPECT_FALSE(res.second);\n+    auto found = m.find(1);\n+    ASSERT_TRUE(found != m.end());\n+    EXPECT_EQUAL(found->second, \"1\");\n+\n+    m.force_insert(Pair(1, \"1.2\"));\n+    EXPECT_EQUAL(2u, m.size());\n+    EXPECT_EQUAL(8u, m.capacity());\n+    m.force_insert(Pair(1, \"1.3\"));\n+    EXPECT_EQUAL(3u, m.size());\n+    EXPECT_EQUAL(16u, m.capacity());\n+    found = m.find(1);\n+    ASSERT_TRUE(found != m.end());\n+    EXPECT_EQUAL(found->second, \"1\");\n+\n+    m.erase(1);\n+    EXPECT_EQUAL(2u, m.size());\n+    EXPECT_EQUAL(16u, m.capacity());\n+    found = m.find(1);\n+    ASSERT_TRUE(found != m.end());\n+    EXPECT_EQUAL(found->second, \"1.3\");\n+\n+    m.erase(1);\n+    EXPECT_EQUAL(1u, m.size());\n+    EXPECT_EQUAL(16u, m.capacity());\n+    found = m.find(1);\n+    ASSERT_TRUE(found != m.end());\n+    EXPECT_EQUAL(found->second, \"1.2\");\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU1NDg1MQ=="}, "originalCommit": {"oid": "313875e52617ed3ba23cbe288ca69ff297a818a6"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2084, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}