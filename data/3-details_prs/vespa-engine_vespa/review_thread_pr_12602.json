{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5OTMzMzY2", "number": 12602, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjoxNjozOFrODoynsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjoxNjo1OVrODoyoRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDk4OTkyOnYy", "diffSide": "RIGHT", "path": "metrics-proxy/src/main/java/ai/vespa/metricsproxy/http/application/NodeMetricsClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjoxNjozOVrOF3jr9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjoxOTo1MFrOF3j0kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwMDY5Mg==", "bodyText": "Use ConcurrentHashMap instead. I am pretty sure that Collections.synchronizedMap may thrown ConcurrentModificationException if the map is iterated on concurrently with mutating operations.", "url": "https://github.com/vespa-engine/vespa/pull/12602#discussion_r393800692", "createdAt": "2020-03-17T16:16:39Z", "author": {"login": "bjorncs"}, "path": "metrics-proxy/src/main/java/ai/vespa/metricsproxy/http/application/NodeMetricsClient.java", "diffHunk": "@@ -41,7 +42,7 @@\n     private final HttpClient httpClient;\n     private final Clock clock;\n \n-    private final Map<ConsumerId, Snapshot> snapshots = new HashMap<>();\n+    private final Map<ConsumerId, Snapshot> snapshots = Collections.synchronizedMap(new HashMap<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56ccfebb300ea7338e740544ce336bf9b50a7885"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwMjg5Nw==", "bodyText": "Yes, you are right.", "url": "https://github.com/vespa-engine/vespa/pull/12602#discussion_r393802897", "createdAt": "2020-03-17T16:19:50Z", "author": {"login": "gjoranv"}, "path": "metrics-proxy/src/main/java/ai/vespa/metricsproxy/http/application/NodeMetricsClient.java", "diffHunk": "@@ -41,7 +42,7 @@\n     private final HttpClient httpClient;\n     private final Clock clock;\n \n-    private final Map<ConsumerId, Snapshot> snapshots = new HashMap<>();\n+    private final Map<ConsumerId, Snapshot> snapshots = Collections.synchronizedMap(new HashMap<>());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwMDY5Mg=="}, "originalCommit": {"oid": "56ccfebb300ea7338e740544ce336bf9b50a7885"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDk5MTQyOnYy", "diffSide": "LEFT", "path": "metrics-proxy/src/main/java/ai/vespa/metricsproxy/http/application/ApplicationMetricsRetriever.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjoxNjo1OVrOF3js7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjoyNToyNVrOF3kDvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwMDk0MQ==", "bodyText": "Consider making forkJoinPool final.", "url": "https://github.com/vespa-engine/vespa/pull/12602#discussion_r393800941", "createdAt": "2020-03-17T16:16:59Z", "author": {"login": "bjorncs"}, "path": "metrics-proxy/src/main/java/ai/vespa/metricsproxy/http/application/ApplicationMetricsRetriever.java", "diffHunk": "@@ -82,8 +82,6 @@ public void deconstruct() {\n \n         } catch (Exception e) {\n             // Since the task is a ForkJoinTask, we don't need special handling of InterruptedException\n-            forkJoinPool.shutdownNow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f6ca96d4ee3081faa9f14bb69b72faebf25d212"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwNjc4MA==", "bodyText": "Thanks, I forgot.", "url": "https://github.com/vespa-engine/vespa/pull/12602#discussion_r393806780", "createdAt": "2020-03-17T16:25:25Z", "author": {"login": "gjoranv"}, "path": "metrics-proxy/src/main/java/ai/vespa/metricsproxy/http/application/ApplicationMetricsRetriever.java", "diffHunk": "@@ -82,8 +82,6 @@ public void deconstruct() {\n \n         } catch (Exception e) {\n             // Since the task is a ForkJoinTask, we don't need special handling of InterruptedException\n-            forkJoinPool.shutdownNow();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwMDk0MQ=="}, "originalCommit": {"oid": "1f6ca96d4ee3081faa9f14bb69b72faebf25d212"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2287, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}