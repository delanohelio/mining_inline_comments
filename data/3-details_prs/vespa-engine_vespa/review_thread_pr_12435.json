{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNTMwODky", "number": 12435, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzowMzoyN1rODlCQyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDo0OTozMVrODlEsNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTYwOTcxOnYy", "diffSide": "RIGHT", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/autoscale/Autoscaler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzowMzoyN1rOFxsZGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDo0NjoyNVrOFyWVlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1MTg2Nw==", "bodyText": "flavor.resources() returns the real resources, need to run this through hostResourcesCalculator so the bestFlavor ends up as an advertised flavor.", "url": "https://github.com/vespa-engine/vespa/pull/12435#discussion_r387651867", "createdAt": "2020-03-04T13:03:27Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/autoscale/Autoscaler.java", "diffHunk": "@@ -142,6 +143,8 @@ private boolean similar(double r1, double r2, double threshold) {\n             Optional<Flavor> bestFlavor = Optional.empty();\n             for (Flavor flavor : nodeRepository.getAvailableFlavors().getFlavors()) {\n                 if ( ! flavor.resources().satisfies(resources.nodeResources())) continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "597475d9380c3438ddeeec6bcae4d648729fc385"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5NDgzMQ==", "bodyText": "You should also do nodeResourceLimits.enlargeToLegal [...]\n\nOnly if we add host flavors that cannot be allocated, but ok.", "url": "https://github.com/vespa-engine/vespa/pull/12435#discussion_r388294831", "createdAt": "2020-03-05T13:34:16Z", "author": {"login": "bratseth"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/autoscale/Autoscaler.java", "diffHunk": "@@ -142,6 +143,8 @@ private boolean similar(double r1, double r2, double threshold) {\n             Optional<Flavor> bestFlavor = Optional.empty();\n             for (Flavor flavor : nodeRepository.getAvailableFlavors().getFlavors()) {\n                 if ( ! flavor.resources().satisfies(resources.nodeResources())) continue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1MTg2Nw=="}, "originalCommit": {"oid": "597475d9380c3438ddeeec6bcae4d648729fc385"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMzOTA5Mg==", "bodyText": "We already have (a few t3- flavors)", "url": "https://github.com/vespa-engine/vespa/pull/12435#discussion_r388339092", "createdAt": "2020-03-05T14:46:25Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/autoscale/Autoscaler.java", "diffHunk": "@@ -142,6 +143,8 @@ private boolean similar(double r1, double r2, double threshold) {\n             Optional<Flavor> bestFlavor = Optional.empty();\n             for (Flavor flavor : nodeRepository.getAvailableFlavors().getFlavors()) {\n                 if ( ! flavor.resources().satisfies(resources.nodeResources())) continue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY1MTg2Nw=="}, "originalCommit": {"oid": "597475d9380c3438ddeeec6bcae4d648729fc385"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjAwNzU4OnYy", "diffSide": "RIGHT", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/autoscale/Autoscaler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDo0OTozMVrOFxwOjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDo0OTozMVrOFxwOjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcxNDcwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (best.isEmpty() || best.get().cost() > costOf(flavor.resources()))\n          \n          \n            \n                            if (best.isEmpty() || best.get().cost() > candidate.cost())\n          \n      \n    \n    \n  \n\nPreviously this would compare cost of advertised resources for the best match against cost of real resources for the candidate.", "url": "https://github.com/vespa-engine/vespa/pull/12435#discussion_r387714701", "createdAt": "2020-03-04T14:49:31Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/autoscale/Autoscaler.java", "diffHunk": "@@ -126,32 +126,31 @@ private boolean similar(double r1, double r2, double threshold) {\n      * Returns the smallest allocatable node resources larger than the given node resources,\n      * or empty if none available.\n      */\n-    private Optional<ClusterResourcesWithCost> toAllocatableResources(ClusterResources resources, ClusterSpec cluster) {\n+    private Optional<AllocatableClusterResources> toAllocatableResources(ClusterResources resources, ClusterSpec cluster) {\n         if (allowsHostSharing(nodeRepository.zone().cloud())) {\n             // Return the requested resources, adjusted to be legal or empty if they cannot fit on existing hosts\n             NodeResources nodeResources = nodeResourceLimits.enlargeToLegal(resources.nodeResources(), cluster.type());\n             for (Flavor flavor : nodeRepository.getAvailableFlavors().getFlavors())\n                 if (flavor.resources().satisfies(nodeResources))\n-                    return Optional.of(new ClusterResourcesWithCost(resources.with(nodeResources),\n-                                                                    costOf(nodeResources) * resources.nodes()));\n+                    return Optional.of(new AllocatableClusterResources(resources.with(nodeResources),\n+                                                                       nodeResources));\n             return Optional.empty();\n         }\n         else {\n             // return the cheapest flavor satisfying the target resources, if any\n-            double bestCost = Double.MAX_VALUE;\n-            Optional<Flavor> bestFlavor = Optional.empty();\n+            Optional<AllocatableClusterResources> best = Optional.empty();\n             for (Flavor flavor : nodeRepository.getAvailableFlavors().getFlavors()) {\n                 if ( ! flavor.resources().satisfies(resources.nodeResources())) continue;\n-                if (bestFlavor.isEmpty() || bestCost > costOf(flavor.resources())) {\n-                    bestFlavor = Optional.of(flavor);\n-                    bestCost = costOf(flavor);\n-                }\n+\n+                if (flavor.resources().storageType() == NodeResources.StorageType.remote)\n+                    flavor = flavor.with(FlavorOverrides.ofDisk(resources.nodeResources().diskGb()));\n+                var candidate = new AllocatableClusterResources(resources.with(flavor.resources()),\n+                                                                hostResourcesCalculator.availableCapacityOf(flavor.name(), flavor.resources()));\n+\n+                if (best.isEmpty() || best.get().cost() > costOf(flavor.resources()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78452759e689f309ec2a60b5e31a9ad7772ba7e3"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2303, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}