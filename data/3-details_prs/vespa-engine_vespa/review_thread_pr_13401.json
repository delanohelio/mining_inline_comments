{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzODU4OTE1", "number": 13401, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDo0MDozNlrOEAIL6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDo0NDozN1rOEAISuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTY5NTc5OnYy", "diffSide": "RIGHT", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/DynamicProvisioningMaintainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDo0MDozNlrOGbNv_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDo0MDozNlrOGbNv_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5MDAxMw==", "bodyText": "Sort by cost, otherwise you risk counting a large host as satisfying a small HostCapacity, but then you wont find match for a larget HostCapacity request", "url": "https://github.com/vespa-engine/vespa/pull/13401#discussion_r431190013", "createdAt": "2020-05-27T14:40:36Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/DynamicProvisioningMaintainer.java", "diffHunk": "@@ -93,31 +94,78 @@ void updateProvisioningNodes(NodeList nodes, Mutex lock) {\n         });\n     }\n \n-    void convergeToCapacity(NodeList nodes) {\n-        Collection<Node> removableHosts = getRemovableHosts(nodes);\n-        List<NodeResources> preProvisionCapacity = preprovisionCapacityFlag.value().stream()\n-                .flatMap(cap -> {\n-                    NodeResources resources = new NodeResources(cap.getVcpu(), cap.getMemoryGb(), cap.getDiskGb(), 1);\n-                    return IntStream.range(0, cap.getCount()).mapToObj(i -> resources);\n-                })\n-                .sorted(NodeResourceComparator.memoryDiskCpuOrder().reversed())\n-                .collect(Collectors.toList());\n+    /** Converge zone to wanted capacity */\n+    private void convergeToCapacity(NodeList nodes) {\n+        List<Node> removableHosts = removableHostsOf(nodes);\n+        List<Node> excessHosts;\n+        if (nodeRepository().zone().getCloud().dynamicProvisioning()) {\n+            excessHosts = preprovisionCapacity(removableHosts);\n+        } else {\n+            excessHosts = provisionExactCapacity(removableHosts);\n+        }\n+        excessHosts.forEach(host -> {\n+            try {\n+                hostProvisioner.deprovision(host);\n+                nodeRepository().removeRecursively(host, true);\n+            } catch (RuntimeException e) {\n+                log.log(Level.WARNING, \"Failed to deprovision \" + host.hostname() + \", will retry in \" + interval(), e);\n+            }\n+        });\n+    }\n \n+    /** Provision the exact capacity declared for this zone, if any.\n+     *\n+     * @return Excess hosts that can be deprovisioned.\n+     */\n+    private List<Node> provisionExactCapacity(List<Node> removableHosts) {\n+        List<NodeResources> capacity = capacityFrom(exactCapacityFlag);\n+        if (capacity.isEmpty()) return List.of();\n+\n+        List<Node> excessHosts = new ArrayList<>(removableHosts);\n+        List<NodeResources> unsatisfiedCapacity = new ArrayList<>(capacity);\n+        for (var resources : capacity) {\n+            for (var host : removableHosts) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa8a63d3e8fb3acfa254376eedd5526d90b5bd90"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTcxMDE4OnYy", "diffSide": "RIGHT", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/DynamicProvisioningMaintainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDo0Mzo1N1rOGbN5mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDo1NDozMlrOGbOZ8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5MjQ3Mg==", "bodyText": "removableHosts() only contains \"free\" hosts, so if you were to allocate some of the host, this would lead to provisioning more hosts with exactly-provision-capacity?\nGenerally, I think preprovisionCapacity() and provisionExactCapacity() can be merged, instead you should have 2 variants of removableHostsOf()", "url": "https://github.com/vespa-engine/vespa/pull/13401#discussion_r431192472", "createdAt": "2020-05-27T14:43:57Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/DynamicProvisioningMaintainer.java", "diffHunk": "@@ -93,31 +94,78 @@ void updateProvisioningNodes(NodeList nodes, Mutex lock) {\n         });\n     }\n \n-    void convergeToCapacity(NodeList nodes) {\n-        Collection<Node> removableHosts = getRemovableHosts(nodes);\n-        List<NodeResources> preProvisionCapacity = preprovisionCapacityFlag.value().stream()\n-                .flatMap(cap -> {\n-                    NodeResources resources = new NodeResources(cap.getVcpu(), cap.getMemoryGb(), cap.getDiskGb(), 1);\n-                    return IntStream.range(0, cap.getCount()).mapToObj(i -> resources);\n-                })\n-                .sorted(NodeResourceComparator.memoryDiskCpuOrder().reversed())\n-                .collect(Collectors.toList());\n+    /** Converge zone to wanted capacity */\n+    private void convergeToCapacity(NodeList nodes) {\n+        List<Node> removableHosts = removableHostsOf(nodes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa8a63d3e8fb3acfa254376eedd5526d90b5bd90"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIwMDc1Mw==", "bodyText": "this would lead to provisioning more hosts with exactly-provision-capacity?\n\nGood catch, will fix.", "url": "https://github.com/vespa-engine/vespa/pull/13401#discussion_r431200753", "createdAt": "2020-05-27T14:54:32Z", "author": {"login": "mpolden"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/DynamicProvisioningMaintainer.java", "diffHunk": "@@ -93,31 +94,78 @@ void updateProvisioningNodes(NodeList nodes, Mutex lock) {\n         });\n     }\n \n-    void convergeToCapacity(NodeList nodes) {\n-        Collection<Node> removableHosts = getRemovableHosts(nodes);\n-        List<NodeResources> preProvisionCapacity = preprovisionCapacityFlag.value().stream()\n-                .flatMap(cap -> {\n-                    NodeResources resources = new NodeResources(cap.getVcpu(), cap.getMemoryGb(), cap.getDiskGb(), 1);\n-                    return IntStream.range(0, cap.getCount()).mapToObj(i -> resources);\n-                })\n-                .sorted(NodeResourceComparator.memoryDiskCpuOrder().reversed())\n-                .collect(Collectors.toList());\n+    /** Converge zone to wanted capacity */\n+    private void convergeToCapacity(NodeList nodes) {\n+        List<Node> removableHosts = removableHostsOf(nodes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5MjQ3Mg=="}, "originalCommit": {"oid": "aa8a63d3e8fb3acfa254376eedd5526d90b5bd90"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTcxMzIxOnYy", "diffSide": "RIGHT", "path": "flags/src/main/java/com/yahoo/vespa/flags/Flags.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDo0NDozN1rOGbN7iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTozMTo1NFrOGbQe1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5Mjk2OQ==", "bodyText": "I'm not sure about introducing another effectively permanent flag, especially when these 2 flags are mutually exclusive...", "url": "https://github.com/vespa-engine/vespa/pull/13401#discussion_r431192969", "createdAt": "2020-05-27T14:44:37Z", "author": {"login": "freva"}, "path": "flags/src/main/java/com/yahoo/vespa/flags/Flags.java", "diffHunk": "@@ -122,11 +122,17 @@\n             \"Takes effect on the next run of RetiredExpirer.\",\n             HOSTNAME);\n \n-    public static final UnboundListFlag<PreprovisionCapacity> PREPROVISION_CAPACITY = defineListFlag(\n-            \"preprovision-capacity\", List.of(), PreprovisionCapacity.class,\n-            \"List of node resources and their count that should be present in zone to receive new deployments. When a \" +\n-            \"preprovisioned is taken, new will be provisioned within next iteration of maintainer.\",\n-            \"Takes effect on next iteration of HostProvisionMaintainer.\");\n+    public static final UnboundListFlag<HostCapacity> PREPROVISION_CAPACITY = defineListFlag(\n+            \"preprovision-capacity\", List.of(), HostCapacity.class,\n+            \"List of node resources and their count that should be unallocated in zone to receive new deployments. When a \" +\n+            \"preprovisioned host is taken, another one will be provisioned within next iteration of maintainer.\",\n+            \"Takes effect on next iteration of DynamicProvisioningMaintainer.\");\n+\n+    public static final UnboundListFlag<HostCapacity> EXACT_PROVISION_CAPACITY = defineListFlag(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa8a63d3e8fb3acfa254376eedd5526d90b5bd90"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIwMDE1OA==", "bodyText": "Agree. Do you have something in mind? I suppose the other flag could be reused, but then we overload its meaning.", "url": "https://github.com/vespa-engine/vespa/pull/13401#discussion_r431200158", "createdAt": "2020-05-27T14:53:59Z", "author": {"login": "mpolden"}, "path": "flags/src/main/java/com/yahoo/vespa/flags/Flags.java", "diffHunk": "@@ -122,11 +122,17 @@\n             \"Takes effect on the next run of RetiredExpirer.\",\n             HOSTNAME);\n \n-    public static final UnboundListFlag<PreprovisionCapacity> PREPROVISION_CAPACITY = defineListFlag(\n-            \"preprovision-capacity\", List.of(), PreprovisionCapacity.class,\n-            \"List of node resources and their count that should be present in zone to receive new deployments. When a \" +\n-            \"preprovisioned is taken, new will be provisioned within next iteration of maintainer.\",\n-            \"Takes effect on next iteration of HostProvisionMaintainer.\");\n+    public static final UnboundListFlag<HostCapacity> PREPROVISION_CAPACITY = defineListFlag(\n+            \"preprovision-capacity\", List.of(), HostCapacity.class,\n+            \"List of node resources and their count that should be unallocated in zone to receive new deployments. When a \" +\n+            \"preprovisioned host is taken, another one will be provisioned within next iteration of maintainer.\",\n+            \"Takes effect on next iteration of DynamicProvisioningMaintainer.\");\n+\n+    public static final UnboundListFlag<HostCapacity> EXACT_PROVISION_CAPACITY = defineListFlag(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5Mjk2OQ=="}, "originalCommit": {"oid": "aa8a63d3e8fb3acfa254376eedd5526d90b5bd90"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIzNDc3NA==", "bodyText": "Do you have something in mind?\n\nI was hoping we could reuse the other flag. It's not ideal, but I think in the long run it will be less confusing than having 2 flags and needing to validate the state (only 1 of them should be set at a given time).", "url": "https://github.com/vespa-engine/vespa/pull/13401#discussion_r431234774", "createdAt": "2020-05-27T15:31:54Z", "author": {"login": "freva"}, "path": "flags/src/main/java/com/yahoo/vespa/flags/Flags.java", "diffHunk": "@@ -122,11 +122,17 @@\n             \"Takes effect on the next run of RetiredExpirer.\",\n             HOSTNAME);\n \n-    public static final UnboundListFlag<PreprovisionCapacity> PREPROVISION_CAPACITY = defineListFlag(\n-            \"preprovision-capacity\", List.of(), PreprovisionCapacity.class,\n-            \"List of node resources and their count that should be present in zone to receive new deployments. When a \" +\n-            \"preprovisioned is taken, new will be provisioned within next iteration of maintainer.\",\n-            \"Takes effect on next iteration of HostProvisionMaintainer.\");\n+    public static final UnboundListFlag<HostCapacity> PREPROVISION_CAPACITY = defineListFlag(\n+            \"preprovision-capacity\", List.of(), HostCapacity.class,\n+            \"List of node resources and their count that should be unallocated in zone to receive new deployments. When a \" +\n+            \"preprovisioned host is taken, another one will be provisioned within next iteration of maintainer.\",\n+            \"Takes effect on next iteration of DynamicProvisioningMaintainer.\");\n+\n+    public static final UnboundListFlag<HostCapacity> EXACT_PROVISION_CAPACITY = defineListFlag(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5Mjk2OQ=="}, "originalCommit": {"oid": "aa8a63d3e8fb3acfa254376eedd5526d90b5bd90"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1546, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}