{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzMjk0NjE1", "number": 15382, "title": "Havardpe/more efficient single outer reduce", "bodyText": "I confirm that this contribution is made under the terms of the license found in the root directory of this repository's source tree and that I have the authority necessary to make this contribution on behalf of its copyright owner.\n@arnej27959 please review", "createdAt": "2020-11-18T16:08:07Z", "url": "https://github.com/vespa-engine/vespa/pull/15382", "merged": true, "mergeCommit": {"oid": "7c5e59f4066070f312515398fc87335893959907"}, "closed": true, "closedAt": "2020-11-19T10:57:02Z", "author": {"login": "havardpe"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddvz0xgH2gAyNTIzMjk0NjE1OjQyMTEwODk2ODAwM2JjNDNhNWI3Y2Y1OTRjMWI3YjczYjkxNTczYzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdeALdmgFqTUzNDI3NzU1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "421108968003bc43a5b7cf594c1b7b73b91573c3", "author": {"user": {"login": "havardpe", "name": "H\u00e5vard Pettersen"}}, "url": "https://github.com/vespa-engine/vespa/commit/421108968003bc43a5b7cf594c1b7b73b91573c3", "committedDate": "2020-11-18T15:23:11Z", "message": "added combine operations for simple aggregators\n\nalso added more compile-time information to make it easier to handle\ndifferent kinds of aggregators differently."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce040dc378b22e1d624fe80a97a51a247f13d898", "author": {"user": {"login": "havardpe", "name": "H\u00e5vard Pettersen"}}, "url": "https://github.com/vespa-engine/vespa/commit/ce040dc378b22e1d624fe80a97a51a247f13d898", "committedDate": "2020-11-18T16:04:47Z", "message": "improve non-inner simple reduce"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MTcyMjIw", "url": "https://github.com/vespa-engine/vespa/pull/15382#pullrequestreview-534172220", "createdAt": "2020-11-19T08:19:33Z", "commit": {"oid": "ce040dc378b22e1d624fe80a97a51a247f13d898"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwODoxOTozM1rOH2RYuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwODoyNDo0NVrOH2RkmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY3MDAxMQ==", "bodyText": "namespave -> namespace", "url": "https://github.com/vespa-engine/vespa/pull/15382#discussion_r526670011", "createdAt": "2020-11-19T08:19:33Z", "author": {"login": "arnej27959"}, "path": "eval/src/vespa/eval/eval/aggr.h", "diffHunk": "@@ -156,17 +186,21 @@ template <typename T> class Median {\n         }\n         return result;\n     }\n+    static constexpr Aggr enum_type() { return Aggr::MEDIAN; }\n };\n \n template <typename T> class Min {\n private:\n     T _min;\n public:\n+    using value_type = T;\n     constexpr Min() : _min{std::numeric_limits<T>::infinity()} {}\n     constexpr Min(T value) : _min{value} {}\n     constexpr void sample(T value) { _min = std::min(_min, value); }\n     constexpr void merge(const Min &rhs) { _min = std::min(_min, rhs._min); }\n     constexpr T result() const { return _min; }\n+    static constexpr Aggr enum_type() { return Aggr::MIN; }\n+    static T combine(T a, T b) { return std::min(a,b); }\n };\n \n } // namespave vespalib::eval::aggr", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce040dc378b22e1d624fe80a97a51a247f13d898"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY3MjI2Mg==", "bodyText": "while \"enum_type\" works well, I think I would have chosen to call it \"enum_value\" or \"aggr_enum\" instead.", "url": "https://github.com/vespa-engine/vespa/pull/15382#discussion_r526672262", "createdAt": "2020-11-19T08:23:25Z", "author": {"login": "arnej27959"}, "path": "eval/src/vespa/eval/eval/aggr.cpp", "diffHunk": "@@ -17,6 +17,7 @@ struct Wrapper : Aggregator {\n     virtual void first(double value) final override { aggr = T{value}; }\n     virtual void next(double value) final override { aggr.sample(value); }\n     virtual double result() const final override { return aggr.result(); }\n+    virtual Aggr enum_type() const final override { return T::enum_type(); }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce040dc378b22e1d624fe80a97a51a247f13d898"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY3MzA0OQ==", "bodyText": "is it useful to have a += b here?  As it's used from\n*dst = combine(*dst, *src++);\nit gives me some doubt.   I guess you also considered formulation with\nstatic void combine(T& a, T b) { a += b; }\nand so on.", "url": "https://github.com/vespa-engine/vespa/pull/15382#discussion_r526673049", "createdAt": "2020-11-19T08:24:45Z", "author": {"login": "arnej27959"}, "path": "eval/src/vespa/eval/eval/aggr.h", "diffHunk": "@@ -76,56 +93,69 @@ template <typename T> class Avg {\n         _cnt += rhs._cnt;\n     };\n     constexpr T result() const { return (_sum / _cnt); }\n+    static constexpr Aggr enum_type() { return Aggr::AVG; }\n };\n \n template <typename T> class Count {\n private:\n     size_t _cnt;\n public:\n+    using value_type = T;\n     constexpr Count() : _cnt{0} {}\n     constexpr Count(T) : _cnt{1} {}\n     constexpr void sample(T) { ++_cnt; }\n     constexpr void merge(const Count &rhs) { _cnt += rhs._cnt; }\n     constexpr T result() const { return _cnt; }\n+    static constexpr Aggr enum_type() { return Aggr::COUNT; }\n };\n \n template <typename T> class Prod {\n private:\n     T _prod;\n public:\n+    using value_type = T;\n     constexpr Prod() : _prod{1} {}\n     constexpr Prod(T value) : _prod{value} {}\n     constexpr void sample(T value) { _prod *= value; }\n     constexpr void merge(const Prod &rhs) { _prod *= rhs._prod; }\n     constexpr T result() const { return _prod; }\n+    static constexpr Aggr enum_type() { return Aggr::PROD; }\n+    static T combine(T a, T b) { return (a * b); }\n };\n \n template <typename T> class Sum {\n private:\n     T _sum;\n public:\n+    using value_type = T;\n     constexpr Sum() : _sum{0} {}\n     constexpr Sum(T value) : _sum{value} {}\n     constexpr void sample(T value) { _sum += value; }\n     constexpr void merge(const Sum &rhs) { _sum += rhs._sum; }\n     constexpr T result() const { return _sum; }\n+    static constexpr Aggr enum_type() { return Aggr::SUM; }\n+    static T combine(T a, T b) { return (a += b); }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce040dc378b22e1d624fe80a97a51a247f13d898"}, "originalPosition": 81}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55dad1ab4491465c2d67fc9ad19cf28b867f078d", "author": {"user": {"login": "havardpe", "name": "H\u00e5vard Pettersen"}}, "url": "https://github.com/vespa-engine/vespa/commit/55dad1ab4491465c2d67fc9ad19cf28b867f078d", "committedDate": "2020-11-19T09:29:13Z", "message": "minor fixup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0Mjc3NTUz", "url": "https://github.com/vespa-engine/vespa/pull/15382#pullrequestreview-534277553", "createdAt": "2020-11-19T10:27:30Z", "commit": {"oid": "55dad1ab4491465c2d67fc9ad19cf28b867f078d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1959, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}