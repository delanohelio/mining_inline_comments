{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NTA2MDc2", "number": 12588, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMTo1MDoyMlrODogznQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMTo1MTowMFrODog0bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODA3MTMzOnYy", "diffSide": "RIGHT", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/AutoscalingMaintainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMTo1MDoyMlrOF3G7Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMTo1MDoyMlrOF3G7Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMyOTQzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                target.ifPresent(t -> log.info(\"Autoscale: \" + application + clusterType + \" \" + clusterId +\n          \n          \n            \n                                target.ifPresent(t -> log.info(\"Autoscale: \" + application + \" \" + clusterType + \" \" + clusterId +", "url": "https://github.com/vespa-engine/vespa/pull/12588#discussion_r393329431", "createdAt": "2020-03-16T21:50:22Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/AutoscalingMaintainer.java", "diffHunk": "@@ -48,17 +53,31 @@ protected void maintain() {\n     private void autoscale(ApplicationId application, List<Node> applicationNodes) {\n         try (MaintenanceDeployment deployment = new MaintenanceDeployment(application, deployer, nodeRepository())) {\n             if ( ! deployment.isValid()) return; // Another config server will consider this application\n-            nodesByCluster(applicationNodes).forEach((clusterSpec, clusterNodes) -> {\n-                Optional<AllocatableClusterResources> target = autoscaler.autoscale(application, clusterSpec, clusterNodes);\n-                target.ifPresent(t -> log.info(\"Autoscale: Application \" + application + \" cluster \" + clusterSpec +\n-                                               \" from \" + applicationNodes.size() + \" * \" + applicationNodes.get(0).flavor().resources() +\n-                                               \" to \" + t.nodes() + \" * \" + t.advertisedResources()));\n+            nodesByCluster(applicationNodes).forEach((clusterId, clusterNodes) -> {\n+                Optional<AllocatableClusterResources> target = autoscaler.autoscale(clusterNodes);\n+\n+                Instant lastLogTime = lastLogged.get(new Pair<>(application, clusterId));\n+                if (lastLogTime == null || lastLogTime.isBefore(nodeRepository().clock().instant().minus(Duration.ofHours(1)))) {\n+                    int currentGroups = (int) clusterNodes.stream().map(node -> node.allocation().get().membership().cluster().group()).distinct().count();\n+                    ClusterSpec.Type clusterType = clusterNodes.get(0).allocation().get().membership().cluster().type();\n+                    target.ifPresent(t -> log.info(\"Autoscale: \" + application + clusterType + \" \" + clusterId +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd8a943d73da17bd726e26d7892dde36276b0f2"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODA3MzQzOnYy", "diffSide": "RIGHT", "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/AutoscalingMaintainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMTo1MTowMFrOF3G8Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjowNDozOVrOF3HR3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMyOTczNA==", "bodyText": "Probably want to skip all of this if target is empty?", "url": "https://github.com/vespa-engine/vespa/pull/12588#discussion_r393329734", "createdAt": "2020-03-16T21:51:00Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/AutoscalingMaintainer.java", "diffHunk": "@@ -48,17 +53,31 @@ protected void maintain() {\n     private void autoscale(ApplicationId application, List<Node> applicationNodes) {\n         try (MaintenanceDeployment deployment = new MaintenanceDeployment(application, deployer, nodeRepository())) {\n             if ( ! deployment.isValid()) return; // Another config server will consider this application\n-            nodesByCluster(applicationNodes).forEach((clusterSpec, clusterNodes) -> {\n-                Optional<AllocatableClusterResources> target = autoscaler.autoscale(application, clusterSpec, clusterNodes);\n-                target.ifPresent(t -> log.info(\"Autoscale: Application \" + application + \" cluster \" + clusterSpec +\n-                                               \" from \" + applicationNodes.size() + \" * \" + applicationNodes.get(0).flavor().resources() +\n-                                               \" to \" + t.nodes() + \" * \" + t.advertisedResources()));\n+            nodesByCluster(applicationNodes).forEach((clusterId, clusterNodes) -> {\n+                Optional<AllocatableClusterResources> target = autoscaler.autoscale(clusterNodes);\n+\n+                Instant lastLogTime = lastLogged.get(new Pair<>(application, clusterId));\n+                if (lastLogTime == null || lastLogTime.isBefore(nodeRepository().clock().instant().minus(Duration.ofHours(1)))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd8a943d73da17bd726e26d7892dde36276b0f2"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMzNTI2Mg==", "bodyText": "It's slightly more messy, but ok", "url": "https://github.com/vespa-engine/vespa/pull/12588#discussion_r393335262", "createdAt": "2020-03-16T22:04:39Z", "author": {"login": "bratseth"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/maintenance/AutoscalingMaintainer.java", "diffHunk": "@@ -48,17 +53,31 @@ protected void maintain() {\n     private void autoscale(ApplicationId application, List<Node> applicationNodes) {\n         try (MaintenanceDeployment deployment = new MaintenanceDeployment(application, deployer, nodeRepository())) {\n             if ( ! deployment.isValid()) return; // Another config server will consider this application\n-            nodesByCluster(applicationNodes).forEach((clusterSpec, clusterNodes) -> {\n-                Optional<AllocatableClusterResources> target = autoscaler.autoscale(application, clusterSpec, clusterNodes);\n-                target.ifPresent(t -> log.info(\"Autoscale: Application \" + application + \" cluster \" + clusterSpec +\n-                                               \" from \" + applicationNodes.size() + \" * \" + applicationNodes.get(0).flavor().resources() +\n-                                               \" to \" + t.nodes() + \" * \" + t.advertisedResources()));\n+            nodesByCluster(applicationNodes).forEach((clusterId, clusterNodes) -> {\n+                Optional<AllocatableClusterResources> target = autoscaler.autoscale(clusterNodes);\n+\n+                Instant lastLogTime = lastLogged.get(new Pair<>(application, clusterId));\n+                if (lastLogTime == null || lastLogTime.isBefore(nodeRepository().clock().instant().minus(Duration.ofHours(1)))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMyOTczNA=="}, "originalCommit": {"oid": "ffd8a943d73da17bd726e26d7892dde36276b0f2"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2274, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}