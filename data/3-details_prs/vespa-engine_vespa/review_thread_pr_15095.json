{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyMzMxMzk4", "number": 15095, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMjoyNzoyM1rOEzxYbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMjozMzoyOFrOEzxhBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzIxOTAzOnYy", "diffSide": "RIGHT", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMjoyNzoyM1rOHrM6Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOToyMzowMlrOHr8JoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MjMxNQ==", "bodyText": "Should be named simply EMPTY, same goes for the other classes.", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515062315", "createdAt": "2020-10-30T12:27:23Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.yahoo.vespa.hosted.controller.tenant;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Tenant information beyond technical tenant id and user authorizations.\n+ *\n+ * This info is used to capture generic support information and invoiced billing information.\n+ *\n+ * All fields are non null but strings can be empty\n+ */\n+public class TenantInfo {\n+    private final String name;\n+    private final String email;\n+    private final String website;\n+    private final String contactName;\n+    private final String contactEmail;\n+    private final String invoiceEmail;\n+    private final TenantInfoAddress address;\n+    private final TenantInfoBillingContact billingContact;\n+\n+    TenantInfo(String name, String email, String website, String contactName, String contactEmail,\n+               String invoiceEmail, TenantInfoAddress address, TenantInfoBillingContact billingContact) {\n+        this.name = Objects.requireNonNull(name);\n+        this.email = Objects.requireNonNull(email);\n+        this.website = Objects.requireNonNull(website);\n+        this.contactName = Objects.requireNonNull(contactName);\n+        this.contactEmail = Objects.requireNonNull(contactEmail);\n+        this.invoiceEmail = Objects.requireNonNull(invoiceEmail);\n+        this.address = Objects.requireNonNull(address);\n+        this.billingContact = Objects.requireNonNull(billingContact);\n+    }\n+\n+    public static TenantInfo EmptyInfo = new TenantInfo(\"\",\"\",\"\", \"\", \"\", \"\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3MDczNg==", "bodyText": "I wasn't aware of that. Is there a naming convention document that I have missed?", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515070736", "createdAt": "2020-10-30T12:43:42Z", "author": {"login": "smorgrav"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.yahoo.vespa.hosted.controller.tenant;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Tenant information beyond technical tenant id and user authorizations.\n+ *\n+ * This info is used to capture generic support information and invoiced billing information.\n+ *\n+ * All fields are non null but strings can be empty\n+ */\n+public class TenantInfo {\n+    private final String name;\n+    private final String email;\n+    private final String website;\n+    private final String contactName;\n+    private final String contactEmail;\n+    private final String invoiceEmail;\n+    private final TenantInfoAddress address;\n+    private final TenantInfoBillingContact billingContact;\n+\n+    TenantInfo(String name, String email, String website, String contactName, String contactEmail,\n+               String invoiceEmail, TenantInfoAddress address, TenantInfoBillingContact billingContact) {\n+        this.name = Objects.requireNonNull(name);\n+        this.email = Objects.requireNonNull(email);\n+        this.website = Objects.requireNonNull(website);\n+        this.contactName = Objects.requireNonNull(contactName);\n+        this.contactEmail = Objects.requireNonNull(contactEmail);\n+        this.invoiceEmail = Objects.requireNonNull(invoiceEmail);\n+        this.address = Objects.requireNonNull(address);\n+        this.billingContact = Objects.requireNonNull(billingContact);\n+    }\n+\n+    public static TenantInfo EmptyInfo = new TenantInfo(\"\",\"\",\"\", \"\", \"\", \"\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MjMxNQ=="}, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3ODI5Mw==", "bodyText": "In general the Java convention is UPPERCASE for constants. In this module we typically name such constants either EMPTY/NONE or empty/none.", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515078293", "createdAt": "2020-10-30T12:58:43Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.yahoo.vespa.hosted.controller.tenant;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Tenant information beyond technical tenant id and user authorizations.\n+ *\n+ * This info is used to capture generic support information and invoiced billing information.\n+ *\n+ * All fields are non null but strings can be empty\n+ */\n+public class TenantInfo {\n+    private final String name;\n+    private final String email;\n+    private final String website;\n+    private final String contactName;\n+    private final String contactEmail;\n+    private final String invoiceEmail;\n+    private final TenantInfoAddress address;\n+    private final TenantInfoBillingContact billingContact;\n+\n+    TenantInfo(String name, String email, String website, String contactName, String contactEmail,\n+               String invoiceEmail, TenantInfoAddress address, TenantInfoBillingContact billingContact) {\n+        this.name = Objects.requireNonNull(name);\n+        this.email = Objects.requireNonNull(email);\n+        this.website = Objects.requireNonNull(website);\n+        this.contactName = Objects.requireNonNull(contactName);\n+        this.contactEmail = Objects.requireNonNull(contactEmail);\n+        this.invoiceEmail = Objects.requireNonNull(invoiceEmail);\n+        this.address = Objects.requireNonNull(address);\n+        this.billingContact = Objects.requireNonNull(billingContact);\n+    }\n+\n+    public static TenantInfo EmptyInfo = new TenantInfo(\"\",\"\",\"\", \"\", \"\", \"\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MjMxNQ=="}, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA4MDA1NA==", "bodyText": "Also, this should be final.", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515080054", "createdAt": "2020-10-30T13:01:54Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.yahoo.vespa.hosted.controller.tenant;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Tenant information beyond technical tenant id and user authorizations.\n+ *\n+ * This info is used to capture generic support information and invoiced billing information.\n+ *\n+ * All fields are non null but strings can be empty\n+ */\n+public class TenantInfo {\n+    private final String name;\n+    private final String email;\n+    private final String website;\n+    private final String contactName;\n+    private final String contactEmail;\n+    private final String invoiceEmail;\n+    private final TenantInfoAddress address;\n+    private final TenantInfoBillingContact billingContact;\n+\n+    TenantInfo(String name, String email, String website, String contactName, String contactEmail,\n+               String invoiceEmail, TenantInfoAddress address, TenantInfoBillingContact billingContact) {\n+        this.name = Objects.requireNonNull(name);\n+        this.email = Objects.requireNonNull(email);\n+        this.website = Objects.requireNonNull(website);\n+        this.contactName = Objects.requireNonNull(contactName);\n+        this.contactEmail = Objects.requireNonNull(contactEmail);\n+        this.invoiceEmail = Objects.requireNonNull(invoiceEmail);\n+        this.address = Objects.requireNonNull(address);\n+        this.billingContact = Objects.requireNonNull(billingContact);\n+    }\n+\n+    public static TenantInfo EmptyInfo = new TenantInfo(\"\",\"\",\"\", \"\", \"\", \"\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MjMxNQ=="}, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzNjMyMA==", "bodyText": "fixed", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515836320", "createdAt": "2020-11-02T09:23:02Z", "author": {"login": "smorgrav"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.yahoo.vespa.hosted.controller.tenant;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Tenant information beyond technical tenant id and user authorizations.\n+ *\n+ * This info is used to capture generic support information and invoiced billing information.\n+ *\n+ * All fields are non null but strings can be empty\n+ */\n+public class TenantInfo {\n+    private final String name;\n+    private final String email;\n+    private final String website;\n+    private final String contactName;\n+    private final String contactEmail;\n+    private final String invoiceEmail;\n+    private final TenantInfoAddress address;\n+    private final TenantInfoBillingContact billingContact;\n+\n+    TenantInfo(String name, String email, String website, String contactName, String contactEmail,\n+               String invoiceEmail, TenantInfoAddress address, TenantInfoBillingContact billingContact) {\n+        this.name = Objects.requireNonNull(name);\n+        this.email = Objects.requireNonNull(email);\n+        this.website = Objects.requireNonNull(website);\n+        this.contactName = Objects.requireNonNull(contactName);\n+        this.contactEmail = Objects.requireNonNull(contactEmail);\n+        this.invoiceEmail = Objects.requireNonNull(invoiceEmail);\n+        this.address = Objects.requireNonNull(address);\n+        this.billingContact = Objects.requireNonNull(billingContact);\n+    }\n+\n+    public static TenantInfo EmptyInfo = new TenantInfo(\"\",\"\",\"\", \"\", \"\", \"\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MjMxNQ=="}, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzIyMzQ2OnYy", "diffSide": "RIGHT", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMjoyODo0M1rOHrM8xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzozNTo1MFrOHrPTKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2Mjk4MA==", "bodyText": "This should just call the constructor directly as the immutable builder methods will create a new object per field.", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515062980", "createdAt": "2020-10-30T12:28:43Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializer.java", "diffHunk": "@@ -145,6 +147,67 @@ private CloudTenant cloudTenantFrom(Inspector tenantObject) {\n         return keys.build();\n     }\n \n+    private TenantInfo tenantInfoFromSlime(Inspector infoObject) {\n+        return TenantInfo.EmptyInfo", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3MTYwMA==", "bodyText": "Not sure I understand - what is the difference?", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515071600", "createdAt": "2020-10-30T12:45:27Z", "author": {"login": "smorgrav"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializer.java", "diffHunk": "@@ -145,6 +147,67 @@ private CloudTenant cloudTenantFrom(Inspector tenantObject) {\n         return keys.build();\n     }\n \n+    private TenantInfo tenantInfoFromSlime(Inspector infoObject) {\n+        return TenantInfo.EmptyInfo", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2Mjk4MA=="}, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3OTkyMw==", "bodyText": "The difference is the number of objects you create. In the current state it's multiplied by the number of fields in TenantInfo (since each withXXX creates a new object), this is then multiplied by the number of tenants you're deserializing.", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515079923", "createdAt": "2020-10-30T13:01:39Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializer.java", "diffHunk": "@@ -145,6 +147,67 @@ private CloudTenant cloudTenantFrom(Inspector tenantObject) {\n         return keys.build();\n     }\n \n+    private TenantInfo tenantInfoFromSlime(Inspector infoObject) {\n+        return TenantInfo.EmptyInfo", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2Mjk4MA=="}, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEwMTQ4Mw==", "bodyText": "Ah - an optimisation. Using builder methods adds some benefits that I think outweigh that - one is that the order of the constructor when using strings are prone to mistakes (and this eliminates that).", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515101483", "createdAt": "2020-10-30T13:35:50Z", "author": {"login": "smorgrav"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializer.java", "diffHunk": "@@ -145,6 +147,67 @@ private CloudTenant cloudTenantFrom(Inspector tenantObject) {\n         return keys.build();\n     }\n \n+    private TenantInfo tenantInfoFromSlime(Inspector infoObject) {\n+        return TenantInfo.EmptyInfo", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2Mjk4MA=="}, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzIyMzc3OnYy", "diffSide": "RIGHT", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMjoyODo1MFrOHrM89w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMjoyODo1MFrOHrM89w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MzAzMQ==", "bodyText": "Same as above.", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515063031", "createdAt": "2020-10-30T12:28:50Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializer.java", "diffHunk": "@@ -145,6 +147,67 @@ private CloudTenant cloudTenantFrom(Inspector tenantObject) {\n         return keys.build();\n     }\n \n+    private TenantInfo tenantInfoFromSlime(Inspector infoObject) {\n+        return TenantInfo.EmptyInfo\n+                .withName(infoObject.field(\"name\").asString())\n+                .withEmail(infoObject.field(\"email\").asString())\n+                .withWebsite(infoObject.field(\"website\").asString())\n+                .withContactName(infoObject.field(\"contactName\").asString())\n+                .withContactEmail(infoObject.field(\"contactEmail\").asString())\n+                .withAddress(tenantInfoAddressFromSlime(infoObject.field(\"address\")))\n+                .withBillingContact(tenantInfoBillingContactFromSlime(infoObject.field(\"billingContact\")));\n+    }\n+\n+    private TenantInfoAddress tenantInfoAddressFromSlime(Inspector addressObject) {\n+        return TenantInfoAddress.EmptyAddress", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzIyNDA5OnYy", "diffSide": "RIGHT", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMjoyODo1NVrOHrM9IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMjoyODo1NVrOHrM9IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MzA3Mw==", "bodyText": "Same as above.", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515063073", "createdAt": "2020-10-30T12:28:55Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializer.java", "diffHunk": "@@ -145,6 +147,67 @@ private CloudTenant cloudTenantFrom(Inspector tenantObject) {\n         return keys.build();\n     }\n \n+    private TenantInfo tenantInfoFromSlime(Inspector infoObject) {\n+        return TenantInfo.EmptyInfo\n+                .withName(infoObject.field(\"name\").asString())\n+                .withEmail(infoObject.field(\"email\").asString())\n+                .withWebsite(infoObject.field(\"website\").asString())\n+                .withContactName(infoObject.field(\"contactName\").asString())\n+                .withContactEmail(infoObject.field(\"contactEmail\").asString())\n+                .withAddress(tenantInfoAddressFromSlime(infoObject.field(\"address\")))\n+                .withBillingContact(tenantInfoBillingContactFromSlime(infoObject.field(\"billingContact\")));\n+    }\n+\n+    private TenantInfoAddress tenantInfoAddressFromSlime(Inspector addressObject) {\n+        return TenantInfoAddress.EmptyAddress\n+                .withAddressLines(addressObject.field(\"addressLines\").asString())\n+                .withPostalCodeOrZip(addressObject.field(\"postalCodeOrZip\").asString())\n+                .withCity(addressObject.field(\"city\").asString())\n+                .withStateRegionProvince(addressObject.field(\"stateRegionProvince\").asString())\n+                .withCountry(addressObject.field(\"country\").asString());\n+    }\n+\n+    private TenantInfoBillingContact tenantInfoBillingContactFromSlime(Inspector billingObject) {\n+        return TenantInfoBillingContact.EmptyBillingContact", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzIyOTI4OnYy", "diffSide": "RIGHT", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMjozMDoxNlrOHrNAEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOToyMzoyMVrOHr8KYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MzgyNg==", "bodyText": "If this implements equals/hashCode you can simply return this.equals(EMPTY). Same for the other classes. This will also simplify serialization testing.", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515063826", "createdAt": "2020-10-30T12:30:16Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.yahoo.vespa.hosted.controller.tenant;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Tenant information beyond technical tenant id and user authorizations.\n+ *\n+ * This info is used to capture generic support information and invoiced billing information.\n+ *\n+ * All fields are non null but strings can be empty\n+ */\n+public class TenantInfo {\n+    private final String name;\n+    private final String email;\n+    private final String website;\n+    private final String contactName;\n+    private final String contactEmail;\n+    private final String invoiceEmail;\n+    private final TenantInfoAddress address;\n+    private final TenantInfoBillingContact billingContact;\n+\n+    TenantInfo(String name, String email, String website, String contactName, String contactEmail,\n+               String invoiceEmail, TenantInfoAddress address, TenantInfoBillingContact billingContact) {\n+        this.name = Objects.requireNonNull(name);\n+        this.email = Objects.requireNonNull(email);\n+        this.website = Objects.requireNonNull(website);\n+        this.contactName = Objects.requireNonNull(contactName);\n+        this.contactEmail = Objects.requireNonNull(contactEmail);\n+        this.invoiceEmail = Objects.requireNonNull(invoiceEmail);\n+        this.address = Objects.requireNonNull(address);\n+        this.billingContact = Objects.requireNonNull(billingContact);\n+    }\n+\n+    public static TenantInfo EmptyInfo = new TenantInfo(\"\",\"\",\"\", \"\", \"\", \"\",\n+            TenantInfoAddress.EmptyAddress, TenantInfoBillingContact.EmptyBillingContact);\n+\n+    public String name() {\n+        return name;\n+    }\n+\n+    public String email() {\n+        return email;\n+    }\n+\n+    public String website() {\n+        return website;\n+    }\n+\n+    public String contactName() {\n+        return contactName;\n+    }\n+\n+    public String contactEmail() {\n+        return contactEmail;\n+    }\n+\n+    public String invoiceEmail() {\n+        return invoiceEmail;\n+    }\n+\n+    public TenantInfoAddress address() {\n+        return address;\n+    }\n+\n+    public TenantInfoBillingContact billingContact() {\n+        return billingContact;\n+    }\n+\n+    public TenantInfo withName(String newName) {\n+        return new TenantInfo(newName, email, website, contactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withEmail(String newEmail) {\n+        return new TenantInfo(name, newEmail, website, contactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withWebsite(String newWebsite) {\n+        return new TenantInfo(name, email, newWebsite, contactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withContactName(String newContactName) {\n+        return new TenantInfo(name, email, website, newContactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withContactEmail(String newContactEmail) {\n+        return new TenantInfo(name, email, website, contactName, newContactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withInvoiceEmail(String newInvoiceEmail) {\n+        return new TenantInfo(name, email, website, contactName, contactEmail, newInvoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withAddress(TenantInfoAddress newAddress) {\n+        return new TenantInfo(name, email, website, contactName, contactEmail, invoiceEmail, newAddress, billingContact);\n+    }\n+\n+    public TenantInfo withBillingContact(TenantInfoBillingContact newBillingContact) {\n+        return new TenantInfo(name, email, website, contactName, contactEmail, invoiceEmail, address, newBillingContact);\n+    }\n+\n+    public boolean isEmpty() {\n+        return (name + email + website + contactEmail + contactName + invoiceEmail).isEmpty()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA3NTIyNw==", "bodyText": "Good catch!\nCould you give a hint to what part of testing could be simplified due to this?", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515075227", "createdAt": "2020-10-30T12:52:48Z", "author": {"login": "smorgrav"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.yahoo.vespa.hosted.controller.tenant;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Tenant information beyond technical tenant id and user authorizations.\n+ *\n+ * This info is used to capture generic support information and invoiced billing information.\n+ *\n+ * All fields are non null but strings can be empty\n+ */\n+public class TenantInfo {\n+    private final String name;\n+    private final String email;\n+    private final String website;\n+    private final String contactName;\n+    private final String contactEmail;\n+    private final String invoiceEmail;\n+    private final TenantInfoAddress address;\n+    private final TenantInfoBillingContact billingContact;\n+\n+    TenantInfo(String name, String email, String website, String contactName, String contactEmail,\n+               String invoiceEmail, TenantInfoAddress address, TenantInfoBillingContact billingContact) {\n+        this.name = Objects.requireNonNull(name);\n+        this.email = Objects.requireNonNull(email);\n+        this.website = Objects.requireNonNull(website);\n+        this.contactName = Objects.requireNonNull(contactName);\n+        this.contactEmail = Objects.requireNonNull(contactEmail);\n+        this.invoiceEmail = Objects.requireNonNull(invoiceEmail);\n+        this.address = Objects.requireNonNull(address);\n+        this.billingContact = Objects.requireNonNull(billingContact);\n+    }\n+\n+    public static TenantInfo EmptyInfo = new TenantInfo(\"\",\"\",\"\", \"\", \"\", \"\",\n+            TenantInfoAddress.EmptyAddress, TenantInfoBillingContact.EmptyBillingContact);\n+\n+    public String name() {\n+        return name;\n+    }\n+\n+    public String email() {\n+        return email;\n+    }\n+\n+    public String website() {\n+        return website;\n+    }\n+\n+    public String contactName() {\n+        return contactName;\n+    }\n+\n+    public String contactEmail() {\n+        return contactEmail;\n+    }\n+\n+    public String invoiceEmail() {\n+        return invoiceEmail;\n+    }\n+\n+    public TenantInfoAddress address() {\n+        return address;\n+    }\n+\n+    public TenantInfoBillingContact billingContact() {\n+        return billingContact;\n+    }\n+\n+    public TenantInfo withName(String newName) {\n+        return new TenantInfo(newName, email, website, contactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withEmail(String newEmail) {\n+        return new TenantInfo(name, newEmail, website, contactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withWebsite(String newWebsite) {\n+        return new TenantInfo(name, email, newWebsite, contactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withContactName(String newContactName) {\n+        return new TenantInfo(name, email, website, newContactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withContactEmail(String newContactEmail) {\n+        return new TenantInfo(name, email, website, contactName, newContactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withInvoiceEmail(String newInvoiceEmail) {\n+        return new TenantInfo(name, email, website, contactName, contactEmail, newInvoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withAddress(TenantInfoAddress newAddress) {\n+        return new TenantInfo(name, email, website, contactName, contactEmail, invoiceEmail, newAddress, billingContact);\n+    }\n+\n+    public TenantInfo withBillingContact(TenantInfoBillingContact newBillingContact) {\n+        return new TenantInfo(name, email, website, contactName, contactEmail, invoiceEmail, address, newBillingContact);\n+    }\n+\n+    public boolean isEmpty() {\n+        return (name + email + website + contactEmail + contactName + invoiceEmail).isEmpty()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MzgyNg=="}, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA4MjI2NA==", "bodyText": "If you add a fully populated TenantInfo to @Test public void cloud_tenant() you can do do assertEquals(tenant.tenantInfo(), serialized.tenantInfo()) to test that serialization works as expected in both directions.", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515082264", "createdAt": "2020-10-30T13:06:09Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.yahoo.vespa.hosted.controller.tenant;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Tenant information beyond technical tenant id and user authorizations.\n+ *\n+ * This info is used to capture generic support information and invoiced billing information.\n+ *\n+ * All fields are non null but strings can be empty\n+ */\n+public class TenantInfo {\n+    private final String name;\n+    private final String email;\n+    private final String website;\n+    private final String contactName;\n+    private final String contactEmail;\n+    private final String invoiceEmail;\n+    private final TenantInfoAddress address;\n+    private final TenantInfoBillingContact billingContact;\n+\n+    TenantInfo(String name, String email, String website, String contactName, String contactEmail,\n+               String invoiceEmail, TenantInfoAddress address, TenantInfoBillingContact billingContact) {\n+        this.name = Objects.requireNonNull(name);\n+        this.email = Objects.requireNonNull(email);\n+        this.website = Objects.requireNonNull(website);\n+        this.contactName = Objects.requireNonNull(contactName);\n+        this.contactEmail = Objects.requireNonNull(contactEmail);\n+        this.invoiceEmail = Objects.requireNonNull(invoiceEmail);\n+        this.address = Objects.requireNonNull(address);\n+        this.billingContact = Objects.requireNonNull(billingContact);\n+    }\n+\n+    public static TenantInfo EmptyInfo = new TenantInfo(\"\",\"\",\"\", \"\", \"\", \"\",\n+            TenantInfoAddress.EmptyAddress, TenantInfoBillingContact.EmptyBillingContact);\n+\n+    public String name() {\n+        return name;\n+    }\n+\n+    public String email() {\n+        return email;\n+    }\n+\n+    public String website() {\n+        return website;\n+    }\n+\n+    public String contactName() {\n+        return contactName;\n+    }\n+\n+    public String contactEmail() {\n+        return contactEmail;\n+    }\n+\n+    public String invoiceEmail() {\n+        return invoiceEmail;\n+    }\n+\n+    public TenantInfoAddress address() {\n+        return address;\n+    }\n+\n+    public TenantInfoBillingContact billingContact() {\n+        return billingContact;\n+    }\n+\n+    public TenantInfo withName(String newName) {\n+        return new TenantInfo(newName, email, website, contactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withEmail(String newEmail) {\n+        return new TenantInfo(name, newEmail, website, contactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withWebsite(String newWebsite) {\n+        return new TenantInfo(name, email, newWebsite, contactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withContactName(String newContactName) {\n+        return new TenantInfo(name, email, website, newContactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withContactEmail(String newContactEmail) {\n+        return new TenantInfo(name, email, website, contactName, newContactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withInvoiceEmail(String newInvoiceEmail) {\n+        return new TenantInfo(name, email, website, contactName, contactEmail, newInvoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withAddress(TenantInfoAddress newAddress) {\n+        return new TenantInfo(name, email, website, contactName, contactEmail, invoiceEmail, newAddress, billingContact);\n+    }\n+\n+    public TenantInfo withBillingContact(TenantInfoBillingContact newBillingContact) {\n+        return new TenantInfo(name, email, website, contactName, contactEmail, invoiceEmail, address, newBillingContact);\n+    }\n+\n+    public boolean isEmpty() {\n+        return (name + email + website + contactEmail + contactName + invoiceEmail).isEmpty()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MzgyNg=="}, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA4OTE4Ng==", "bodyText": "Ah you where referring to if it implemented equals/hashCode - not how to implement the isEmpty method?I think that is exactly what is done right?", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515089186", "createdAt": "2020-10-30T13:18:16Z", "author": {"login": "smorgrav"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.yahoo.vespa.hosted.controller.tenant;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Tenant information beyond technical tenant id and user authorizations.\n+ *\n+ * This info is used to capture generic support information and invoiced billing information.\n+ *\n+ * All fields are non null but strings can be empty\n+ */\n+public class TenantInfo {\n+    private final String name;\n+    private final String email;\n+    private final String website;\n+    private final String contactName;\n+    private final String contactEmail;\n+    private final String invoiceEmail;\n+    private final TenantInfoAddress address;\n+    private final TenantInfoBillingContact billingContact;\n+\n+    TenantInfo(String name, String email, String website, String contactName, String contactEmail,\n+               String invoiceEmail, TenantInfoAddress address, TenantInfoBillingContact billingContact) {\n+        this.name = Objects.requireNonNull(name);\n+        this.email = Objects.requireNonNull(email);\n+        this.website = Objects.requireNonNull(website);\n+        this.contactName = Objects.requireNonNull(contactName);\n+        this.contactEmail = Objects.requireNonNull(contactEmail);\n+        this.invoiceEmail = Objects.requireNonNull(invoiceEmail);\n+        this.address = Objects.requireNonNull(address);\n+        this.billingContact = Objects.requireNonNull(billingContact);\n+    }\n+\n+    public static TenantInfo EmptyInfo = new TenantInfo(\"\",\"\",\"\", \"\", \"\", \"\",\n+            TenantInfoAddress.EmptyAddress, TenantInfoBillingContact.EmptyBillingContact);\n+\n+    public String name() {\n+        return name;\n+    }\n+\n+    public String email() {\n+        return email;\n+    }\n+\n+    public String website() {\n+        return website;\n+    }\n+\n+    public String contactName() {\n+        return contactName;\n+    }\n+\n+    public String contactEmail() {\n+        return contactEmail;\n+    }\n+\n+    public String invoiceEmail() {\n+        return invoiceEmail;\n+    }\n+\n+    public TenantInfoAddress address() {\n+        return address;\n+    }\n+\n+    public TenantInfoBillingContact billingContact() {\n+        return billingContact;\n+    }\n+\n+    public TenantInfo withName(String newName) {\n+        return new TenantInfo(newName, email, website, contactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withEmail(String newEmail) {\n+        return new TenantInfo(name, newEmail, website, contactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withWebsite(String newWebsite) {\n+        return new TenantInfo(name, email, newWebsite, contactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withContactName(String newContactName) {\n+        return new TenantInfo(name, email, website, newContactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withContactEmail(String newContactEmail) {\n+        return new TenantInfo(name, email, website, contactName, newContactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withInvoiceEmail(String newInvoiceEmail) {\n+        return new TenantInfo(name, email, website, contactName, contactEmail, newInvoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withAddress(TenantInfoAddress newAddress) {\n+        return new TenantInfo(name, email, website, contactName, contactEmail, invoiceEmail, newAddress, billingContact);\n+    }\n+\n+    public TenantInfo withBillingContact(TenantInfoBillingContact newBillingContact) {\n+        return new TenantInfo(name, email, website, contactName, contactEmail, invoiceEmail, address, newBillingContact);\n+    }\n+\n+    public boolean isEmpty() {\n+        return (name + email + website + contactEmail + contactName + invoiceEmail).isEmpty()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MzgyNg=="}, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3NjAwMQ==", "bodyText": "Yes, never mind! You should still be able to simplify isEmpty though, by just comparing with empty.", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515176001", "createdAt": "2020-10-30T15:20:59Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.yahoo.vespa.hosted.controller.tenant;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Tenant information beyond technical tenant id and user authorizations.\n+ *\n+ * This info is used to capture generic support information and invoiced billing information.\n+ *\n+ * All fields are non null but strings can be empty\n+ */\n+public class TenantInfo {\n+    private final String name;\n+    private final String email;\n+    private final String website;\n+    private final String contactName;\n+    private final String contactEmail;\n+    private final String invoiceEmail;\n+    private final TenantInfoAddress address;\n+    private final TenantInfoBillingContact billingContact;\n+\n+    TenantInfo(String name, String email, String website, String contactName, String contactEmail,\n+               String invoiceEmail, TenantInfoAddress address, TenantInfoBillingContact billingContact) {\n+        this.name = Objects.requireNonNull(name);\n+        this.email = Objects.requireNonNull(email);\n+        this.website = Objects.requireNonNull(website);\n+        this.contactName = Objects.requireNonNull(contactName);\n+        this.contactEmail = Objects.requireNonNull(contactEmail);\n+        this.invoiceEmail = Objects.requireNonNull(invoiceEmail);\n+        this.address = Objects.requireNonNull(address);\n+        this.billingContact = Objects.requireNonNull(billingContact);\n+    }\n+\n+    public static TenantInfo EmptyInfo = new TenantInfo(\"\",\"\",\"\", \"\", \"\", \"\",\n+            TenantInfoAddress.EmptyAddress, TenantInfoBillingContact.EmptyBillingContact);\n+\n+    public String name() {\n+        return name;\n+    }\n+\n+    public String email() {\n+        return email;\n+    }\n+\n+    public String website() {\n+        return website;\n+    }\n+\n+    public String contactName() {\n+        return contactName;\n+    }\n+\n+    public String contactEmail() {\n+        return contactEmail;\n+    }\n+\n+    public String invoiceEmail() {\n+        return invoiceEmail;\n+    }\n+\n+    public TenantInfoAddress address() {\n+        return address;\n+    }\n+\n+    public TenantInfoBillingContact billingContact() {\n+        return billingContact;\n+    }\n+\n+    public TenantInfo withName(String newName) {\n+        return new TenantInfo(newName, email, website, contactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withEmail(String newEmail) {\n+        return new TenantInfo(name, newEmail, website, contactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withWebsite(String newWebsite) {\n+        return new TenantInfo(name, email, newWebsite, contactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withContactName(String newContactName) {\n+        return new TenantInfo(name, email, website, newContactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withContactEmail(String newContactEmail) {\n+        return new TenantInfo(name, email, website, contactName, newContactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withInvoiceEmail(String newInvoiceEmail) {\n+        return new TenantInfo(name, email, website, contactName, contactEmail, newInvoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withAddress(TenantInfoAddress newAddress) {\n+        return new TenantInfo(name, email, website, contactName, contactEmail, invoiceEmail, newAddress, billingContact);\n+    }\n+\n+    public TenantInfo withBillingContact(TenantInfoBillingContact newBillingContact) {\n+        return new TenantInfo(name, email, website, contactName, contactEmail, invoiceEmail, address, newBillingContact);\n+    }\n+\n+    public boolean isEmpty() {\n+        return (name + email + website + contactEmail + contactName + invoiceEmail).isEmpty()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MzgyNg=="}, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzNjUxMg==", "bodyText": "fixed", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515836512", "createdAt": "2020-11-02T09:23:21Z", "author": {"login": "smorgrav"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.yahoo.vespa.hosted.controller.tenant;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Tenant information beyond technical tenant id and user authorizations.\n+ *\n+ * This info is used to capture generic support information and invoiced billing information.\n+ *\n+ * All fields are non null but strings can be empty\n+ */\n+public class TenantInfo {\n+    private final String name;\n+    private final String email;\n+    private final String website;\n+    private final String contactName;\n+    private final String contactEmail;\n+    private final String invoiceEmail;\n+    private final TenantInfoAddress address;\n+    private final TenantInfoBillingContact billingContact;\n+\n+    TenantInfo(String name, String email, String website, String contactName, String contactEmail,\n+               String invoiceEmail, TenantInfoAddress address, TenantInfoBillingContact billingContact) {\n+        this.name = Objects.requireNonNull(name);\n+        this.email = Objects.requireNonNull(email);\n+        this.website = Objects.requireNonNull(website);\n+        this.contactName = Objects.requireNonNull(contactName);\n+        this.contactEmail = Objects.requireNonNull(contactEmail);\n+        this.invoiceEmail = Objects.requireNonNull(invoiceEmail);\n+        this.address = Objects.requireNonNull(address);\n+        this.billingContact = Objects.requireNonNull(billingContact);\n+    }\n+\n+    public static TenantInfo EmptyInfo = new TenantInfo(\"\",\"\",\"\", \"\", \"\", \"\",\n+            TenantInfoAddress.EmptyAddress, TenantInfoBillingContact.EmptyBillingContact);\n+\n+    public String name() {\n+        return name;\n+    }\n+\n+    public String email() {\n+        return email;\n+    }\n+\n+    public String website() {\n+        return website;\n+    }\n+\n+    public String contactName() {\n+        return contactName;\n+    }\n+\n+    public String contactEmail() {\n+        return contactEmail;\n+    }\n+\n+    public String invoiceEmail() {\n+        return invoiceEmail;\n+    }\n+\n+    public TenantInfoAddress address() {\n+        return address;\n+    }\n+\n+    public TenantInfoBillingContact billingContact() {\n+        return billingContact;\n+    }\n+\n+    public TenantInfo withName(String newName) {\n+        return new TenantInfo(newName, email, website, contactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withEmail(String newEmail) {\n+        return new TenantInfo(name, newEmail, website, contactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withWebsite(String newWebsite) {\n+        return new TenantInfo(name, email, newWebsite, contactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withContactName(String newContactName) {\n+        return new TenantInfo(name, email, website, newContactName, contactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withContactEmail(String newContactEmail) {\n+        return new TenantInfo(name, email, website, contactName, newContactEmail, invoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withInvoiceEmail(String newInvoiceEmail) {\n+        return new TenantInfo(name, email, website, contactName, contactEmail, newInvoiceEmail, address, billingContact);\n+    }\n+\n+    public TenantInfo withAddress(TenantInfoAddress newAddress) {\n+        return new TenantInfo(name, email, website, contactName, contactEmail, invoiceEmail, newAddress, billingContact);\n+    }\n+\n+    public TenantInfo withBillingContact(TenantInfoBillingContact newBillingContact) {\n+        return new TenantInfo(name, email, website, contactName, contactEmail, invoiceEmail, address, newBillingContact);\n+    }\n+\n+    public boolean isEmpty() {\n+        return (name + email + website + contactEmail + contactName + invoiceEmail).isEmpty()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2MzgyNg=="}, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzIzNjQ0OnYy", "diffSide": "RIGHT", "path": "controller-server/src/test/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializerTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMjozMjoxNVrOHrNEKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOToyOToyNVrOHr8ZdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2NDg3NQ==", "bodyText": "Should set a non-empty TenantInfo here, and assert the re-serialized value below to ensure that serialization is correct.", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515064875", "createdAt": "2020-10-30T12:32:15Z", "author": {"login": "mpolden"}, "path": "controller-server/src/test/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializerTest.java", "diffHunk": "@@ -80,7 +81,8 @@ public void cloud_tenant() {\n         CloudTenant tenant = new CloudTenant(TenantName.from(\"elderly-lady\"),\n                                              Optional.of(new SimplePrincipal(\"foobar-user\")),\n                                              ImmutableBiMap.of(publicKey, new SimplePrincipal(\"joe\"),\n-                                                               otherPublicKey, new SimplePrincipal(\"jane\")));\n+                                                               otherPublicKey, new SimplePrincipal(\"jane\")),\n+                                             TenantInfo.EmptyInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5MjYwOQ==", "bodyText": "I guess. The non empty case is covered below (albeit not in the context of a CloudTenant) - the normal case is that it is empty. I can create another test.", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515092609", "createdAt": "2020-10-30T13:23:03Z", "author": {"login": "smorgrav"}, "path": "controller-server/src/test/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializerTest.java", "diffHunk": "@@ -80,7 +81,8 @@ public void cloud_tenant() {\n         CloudTenant tenant = new CloudTenant(TenantName.from(\"elderly-lady\"),\n                                              Optional.of(new SimplePrincipal(\"foobar-user\")),\n                                              ImmutableBiMap.of(publicKey, new SimplePrincipal(\"joe\"),\n-                                                               otherPublicKey, new SimplePrincipal(\"jane\")));\n+                                                               otherPublicKey, new SimplePrincipal(\"jane\")),\n+                                             TenantInfo.EmptyInfo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2NDg3NQ=="}, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3NjI1Mg==", "bodyText": "Right, I didn't notice the other tests.", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515176252", "createdAt": "2020-10-30T15:21:27Z", "author": {"login": "mpolden"}, "path": "controller-server/src/test/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializerTest.java", "diffHunk": "@@ -80,7 +81,8 @@ public void cloud_tenant() {\n         CloudTenant tenant = new CloudTenant(TenantName.from(\"elderly-lady\"),\n                                              Optional.of(new SimplePrincipal(\"foobar-user\")),\n                                              ImmutableBiMap.of(publicKey, new SimplePrincipal(\"joe\"),\n-                                                               otherPublicKey, new SimplePrincipal(\"jane\")));\n+                                                               otherPublicKey, new SimplePrincipal(\"jane\")),\n+                                             TenantInfo.EmptyInfo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2NDg3NQ=="}, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0MDM3Mg==", "bodyText": "Fixed. Added one extra test there to cover that the info field is set correctly in the tenant object.", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515840372", "createdAt": "2020-11-02T09:29:25Z", "author": {"login": "smorgrav"}, "path": "controller-server/src/test/java/com/yahoo/vespa/hosted/controller/persistence/TenantSerializerTest.java", "diffHunk": "@@ -80,7 +81,8 @@ public void cloud_tenant() {\n         CloudTenant tenant = new CloudTenant(TenantName.from(\"elderly-lady\"),\n                                              Optional.of(new SimplePrincipal(\"foobar-user\")),\n                                              ImmutableBiMap.of(publicKey, new SimplePrincipal(\"joe\"),\n-                                                               otherPublicKey, new SimplePrincipal(\"jane\")));\n+                                                               otherPublicKey, new SimplePrincipal(\"jane\")),\n+                                             TenantInfo.EmptyInfo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2NDg3NQ=="}, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzI0MDAyOnYy", "diffSide": "RIGHT", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMjozMzoxM1rOHrNGLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOToyMzoyNlrOHr8KmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2NTM5MQ==", "bodyText": "Missing @author and license header.", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515065391", "createdAt": "2020-10-30T12:33:13Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.yahoo.vespa.hosted.controller.tenant;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Tenant information beyond technical tenant id and user authorizations.\n+ *\n+ * This info is used to capture generic support information and invoiced billing information.\n+ *\n+ * All fields are non null but strings can be empty\n+ */\n+public class TenantInfo {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzNjU2OQ==", "bodyText": "fixed", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515836569", "createdAt": "2020-11-02T09:23:26Z", "author": {"login": "smorgrav"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfo.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.yahoo.vespa.hosted.controller.tenant;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Tenant information beyond technical tenant id and user authorizations.\n+ *\n+ * This info is used to capture generic support information and invoiced billing information.\n+ *\n+ * All fields are non null but strings can be empty\n+ */\n+public class TenantInfo {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2NTM5MQ=="}, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzI0MDYyOnYy", "diffSide": "RIGHT", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfoAddress.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMjozMzoyMlrOHrNGgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOToyMzozM1rOHr8KyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2NTQ3NQ==", "bodyText": "Missing @author and license header.", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515065475", "createdAt": "2020-10-30T12:33:22Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfoAddress.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.yahoo.vespa.hosted.controller.tenant;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Address formats are quite diverse across the world both in therms of what fields are used, named and\n+ * the order of them.\n+ *\n+ * To be generic a little future proof the address fields here are a mix of free text (address lines) and fixed fields.\n+ * The address lines can be street address, P.O box, c/o name, apartment, suite, unit, building floor etc etc.\n+ *\n+ * All fields are mandatory but can be an empty string (ie. not null)\n+ */\n+public class TenantInfoAddress {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzNjYxNg==", "bodyText": "fixed", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515836616", "createdAt": "2020-11-02T09:23:33Z", "author": {"login": "smorgrav"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfoAddress.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.yahoo.vespa.hosted.controller.tenant;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Address formats are quite diverse across the world both in therms of what fields are used, named and\n+ * the order of them.\n+ *\n+ * To be generic a little future proof the address fields here are a mix of free text (address lines) and fixed fields.\n+ * The address lines can be street address, P.O box, c/o name, apartment, suite, unit, building floor etc etc.\n+ *\n+ * All fields are mandatory but can be an empty string (ie. not null)\n+ */\n+public class TenantInfoAddress {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2NTQ3NQ=="}, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzI0MTAzOnYy", "diffSide": "RIGHT", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfoBillingContact.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMjozMzoyOFrOHrNGxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOToyMzozOFrOHr8K_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2NTU0Mw==", "bodyText": "Missing @author and license header.", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515065543", "createdAt": "2020-10-30T12:33:28Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfoBillingContact.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.yahoo.vespa.hosted.controller.tenant;\n+\n+import java.util.Objects;\n+\n+public class TenantInfoBillingContact {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzNjY3MA==", "bodyText": "fixed", "url": "https://github.com/vespa-engine/vespa/pull/15095#discussion_r515836670", "createdAt": "2020-11-02T09:23:38Z", "author": {"login": "smorgrav"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/tenant/TenantInfoBillingContact.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.yahoo.vespa.hosted.controller.tenant;\n+\n+import java.util.Objects;\n+\n+public class TenantInfoBillingContact {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA2NTU0Mw=="}, "originalCommit": {"oid": "a8a3b5b0c874a02ab364898d56e2d482d268bac0"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1059, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}