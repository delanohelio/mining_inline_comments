{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExNjY1NTUw", "number": 15071, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjoxMDo1OVrOEy46DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjoxOToxOVrOEy5JTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNzk2NjIwOnYy", "diffSide": "RIGHT", "path": "docproc/src/main/java/com/yahoo/docproc/jdisc/metric/MockMetric.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjoxMDo1OVrOHpyCRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjoxMDo1OVrOHpyCRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3MzQ0NA==", "bodyText": "Should probably put this elsewhere.", "url": "https://github.com/vespa-engine/vespa/pull/15071#discussion_r513573444", "createdAt": "2020-10-28T16:10:59Z", "author": {"login": "jonmv"}, "path": "docproc/src/main/java/com/yahoo/docproc/jdisc/metric/MockMetric.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.docproc.jdisc.metric;\n+\n+import com.yahoo.jdisc.Metric;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Metric implementation for tests.\n+ *\n+ * @author jonmv\n+ */\n+public class MockMetric implements Metric {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f493d32ed2a20eb224db0101be7bad9debdfb83"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODAwNTI0OnYy", "diffSide": "RIGHT", "path": "docproc/src/main/java/com/yahoo/docproc/DocprocExecutor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjoxOToxOVrOHpyazA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxODowNzoyMFrOHp3Ojw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3OTcyNA==", "bodyText": "In all backend metrics this dimension is named \"documenttype\". We should use the same her I guess.", "url": "https://github.com/vespa-engine/vespa/pull/15071#discussion_r513579724", "createdAt": "2020-10-28T16:19:19Z", "author": {"login": "geirst"}, "path": "docproc/src/main/java/com/yahoo/docproc/DocprocExecutor.java", "diffHunk": "@@ -176,4 +181,15 @@ private void logProgress(Processing processing, DocumentProcessor.Progress progr\n         }\n         return progress;\n     }\n+\n+    private Function<String, Metric.Context> cachedContexts(String chainDimension) {\n+        Map<String, Metric.Context> contextCache = new ConcurrentHashMap<>();\n+        return documentType -> contextCache.computeIfAbsent(documentType, type -> {\n+            Map<String, String> dimensions = new HashMap<>(2);\n+            dimensions.put(\"chain\", chainDimension);\n+            dimensions.put(\"documentType\", type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45e4edf81bc1987d8b8d7e1e806b6d26fd329940"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzMDAxNw==", "bodyText": "Geir is correct. The dimension name must be exactly \"documenttype\", or it cannot be used in combination with other metrics. The option would likely be to replicated \"documenttype\" into \"documentType\" for all other metrics having this already, if we conclude \"documentType\" is the better name.", "url": "https://github.com/vespa-engine/vespa/pull/15071#discussion_r513630017", "createdAt": "2020-10-28T17:26:04Z", "author": {"login": "yngveaasheim"}, "path": "docproc/src/main/java/com/yahoo/docproc/DocprocExecutor.java", "diffHunk": "@@ -176,4 +181,15 @@ private void logProgress(Processing processing, DocumentProcessor.Progress progr\n         }\n         return progress;\n     }\n+\n+    private Function<String, Metric.Context> cachedContexts(String chainDimension) {\n+        Map<String, Metric.Context> contextCache = new ConcurrentHashMap<>();\n+        return documentType -> contextCache.computeIfAbsent(documentType, type -> {\n+            Map<String, String> dimensions = new HashMap<>(2);\n+            dimensions.put(\"chain\", chainDimension);\n+            dimensions.put(\"documentType\", type);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3OTcyNA=="}, "originalCommit": {"oid": "45e4edf81bc1987d8b8d7e1e806b6d26fd329940"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1ODUxMQ==", "bodyText": "Thanhks.", "url": "https://github.com/vespa-engine/vespa/pull/15071#discussion_r513658511", "createdAt": "2020-10-28T18:07:20Z", "author": {"login": "jonmv"}, "path": "docproc/src/main/java/com/yahoo/docproc/DocprocExecutor.java", "diffHunk": "@@ -176,4 +181,15 @@ private void logProgress(Processing processing, DocumentProcessor.Progress progr\n         }\n         return progress;\n     }\n+\n+    private Function<String, Metric.Context> cachedContexts(String chainDimension) {\n+        Map<String, Metric.Context> contextCache = new ConcurrentHashMap<>();\n+        return documentType -> contextCache.computeIfAbsent(documentType, type -> {\n+            Map<String, String> dimensions = new HashMap<>(2);\n+            dimensions.put(\"chain\", chainDimension);\n+            dimensions.put(\"documentType\", type);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3OTcyNA=="}, "originalCommit": {"oid": "45e4edf81bc1987d8b8d7e1e806b6d26fd329940"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1043, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}