{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2OTM4NjY4", "number": 12540, "title": "In order to drain Q faster on sync, and also detect that we are in sy\u2026 ", "bodyText": "\u2026nc faster,\nwe wake the consumer unconditionally on sync, and also unconditionally wake the producer when consumer is idle.\n@havardpe and @vekterli PR", "createdAt": "2020-03-11T21:55:58Z", "url": "https://github.com/vespa-engine/vespa/pull/12540", "merged": true, "mergeCommit": {"oid": "2685a6eb9cce2b3d2da1d2e2d4da195c414b4f7d"}, "closed": true, "closedAt": "2020-03-13T15:47:07Z", "author": {"login": "baldersheim"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMuV94AH2gAyMzg2OTM4NjY4OjJjMjljOWQwOGZjYWEwZjIzZDZlYjAwMTVkOTA0NzIzYmRjNjk3NmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcNOQ1CgFqTM3NDIxNDE5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2c29c9d08fcaa0f23d6eb0015d904723bdc6976e", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/2c29c9d08fcaa0f23d6eb0015d904723bdc6976e", "committedDate": "2020-03-11T21:52:48Z", "message": "In order to drain Q faster on sync, and also detect that we are in sync faster,\nwe wake the consumer unconditionally on sync, and also unconditionally wake the producer when consumer is idle."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczNDAwMzc3", "url": "https://github.com/vespa-engine/vespa/pull/12540#pullrequestreview-373400377", "createdAt": "2020-03-12T09:38:26Z", "commit": {"oid": "2c29c9d08fcaa0f23d6eb0015d904723bdc6976e"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTozODoyNlrOF1XN8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOTo0NDo0MFrOF1Xb6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ5OTI1MA==", "bodyText": "You can skip taking the lock here; consider using std::mutex and std::condition_variable instead.", "url": "https://github.com/vespa-engine/vespa/pull/12540#discussion_r391499250", "createdAt": "2020-03-12T09:38:26Z", "author": {"login": "havardpe"}, "path": "staging_vespalib/src/vespa/vespalib/util/singleexecutor.cpp", "diffHunk": "@@ -41,12 +41,38 @@ SingleExecutor::addTask(Task::UP task) {\n     return wp;\n }\n \n+void\n+SingleExecutor::wakeupConsumer() {\n+    MonitorGuard guard(_consumerMonitor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c29c9d08fcaa0f23d6eb0015d904723bdc6976e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ5OTMyMA==", "bodyText": "You can skip taking the lock here; consider using std::mutex and std::condition_variable instead.", "url": "https://github.com/vespa-engine/vespa/pull/12540#discussion_r391499320", "createdAt": "2020-03-12T09:38:33Z", "author": {"login": "havardpe"}, "path": "staging_vespalib/src/vespa/vespalib/util/singleexecutor.cpp", "diffHunk": "@@ -41,12 +41,38 @@ SingleExecutor::addTask(Task::UP task) {\n     return wp;\n }\n \n+void\n+SingleExecutor::wakeupConsumer() {\n+    MonitorGuard guard(_consumerMonitor);\n+    guard.signal();\n+}\n+\n+void\n+SingleExecutor::sleepConsumer() {\n+    _wakeupConsumerAt.store(_wp.load(std::memory_order_relaxed) + (_taskLimit.load(std::memory_order_relaxed) >> 2), std::memory_order_relaxed);\n+    MonitorGuard guard(_consumerMonitor);\n+    guard.wait(10ms);\n+    _wakeupConsumerAt.store(0, std::memory_order_relaxed);\n+}\n+\n+void\n+SingleExecutor::wakeupProducer() {\n+    MonitorGuard guard(_producerMonitor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c29c9d08fcaa0f23d6eb0015d904723bdc6976e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ5OTk3MA==", "bodyText": "note that this signal may be lost since no state is being passed with the signal (the other thread might call wait after the signal has been discarded since no-one was waiting).", "url": "https://github.com/vespa-engine/vespa/pull/12540#discussion_r391499970", "createdAt": "2020-03-12T09:39:46Z", "author": {"login": "havardpe"}, "path": "staging_vespalib/src/vespa/vespalib/util/singleexecutor.cpp", "diffHunk": "@@ -60,7 +86,9 @@ SingleExecutor &\n SingleExecutor::sync() {\n     uint64_t wp = _wp.load(std::memory_order_relaxed);\n     while (wp > _rp.load(std::memory_order_acquire)) {\n-        std::this_thread::sleep_for(1ms);\n+        wakeupConsumer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c29c9d08fcaa0f23d6eb0015d904723bdc6976e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUwMjI0NQ==", "bodyText": "note that this signal may be lost since no state is being passed with the signal (the other thread might call wait after the signal has been discarded since no-one was waiting).", "url": "https://github.com/vespa-engine/vespa/pull/12540#discussion_r391502245", "createdAt": "2020-03-12T09:43:38Z", "author": {"login": "havardpe"}, "path": "staging_vespalib/src/vespa/vespalib/util/singleexecutor.cpp", "diffHunk": "@@ -41,12 +41,38 @@ SingleExecutor::addTask(Task::UP task) {\n     return wp;\n }\n \n+void\n+SingleExecutor::wakeupConsumer() {\n+    MonitorGuard guard(_consumerMonitor);\n+    guard.signal();\n+}\n+\n+void\n+SingleExecutor::sleepConsumer() {\n+    _wakeupConsumerAt.store(_wp.load(std::memory_order_relaxed) + (_taskLimit.load(std::memory_order_relaxed) >> 2), std::memory_order_relaxed);\n+    MonitorGuard guard(_consumerMonitor);\n+    guard.wait(10ms);\n+    _wakeupConsumerAt.store(0, std::memory_order_relaxed);\n+}\n+\n+void\n+SingleExecutor::wakeupProducer() {\n+    MonitorGuard guard(_producerMonitor);\n+    guard.signal();\n+}\n+\n+void\n+SingleExecutor::sleepProducer(MonitorGuard & guard) {\n+    _producerNeedWakeup.store(true, std::memory_order_relaxed);\n+    guard.wait(10ms);\n+    _producerNeedWakeup.store(false, std::memory_order_relaxed);\n+}\n+\n Executor::Task::UP\n SingleExecutor::execute(Task::UP task) {\n     uint64_t wp = addTask(std::move(task));\n     if (wp == _wakeupConsumerAt.load(std::memory_order_relaxed)) {\n-        MonitorGuard guard(_consumerMonitor);\n-        guard.signal();\n+        wakeupConsumer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c29c9d08fcaa0f23d6eb0015d904723bdc6976e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUwMjY3Mw==", "bodyText": "note that this signal may be lost since no state is being passed with the signal (the other thread might call wait after the signal has been discarded since no-one was waiting).", "url": "https://github.com/vespa-engine/vespa/pull/12540#discussion_r391502673", "createdAt": "2020-03-12T09:44:24Z", "author": {"login": "havardpe"}, "path": "staging_vespalib/src/vespa/vespalib/util/singleexecutor.cpp", "diffHunk": "@@ -69,10 +97,8 @@ void\n SingleExecutor::run() {\n     while (!_thread.stopped()) {\n         drain_tasks();\n-        _wakeupConsumerAt.store(_wp.load(std::memory_order_relaxed) + (_taskLimit.load(std::memory_order_relaxed) >> 2), std::memory_order_relaxed);\n-        MonitorGuard guard(_consumerMonitor);\n-        guard.wait(10ms);\n-        _wakeupConsumerAt.store(0, std::memory_order_relaxed);\n+        wakeupProducer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c29c9d08fcaa0f23d6eb0015d904723bdc6976e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTUwMjgyNw==", "bodyText": "note that this signal may be lost since no state is being passed with the signal (the other thread might call wait after the signal has been discarded since no-one was waiting).", "url": "https://github.com/vespa-engine/vespa/pull/12540#discussion_r391502827", "createdAt": "2020-03-12T09:44:40Z", "author": {"login": "havardpe"}, "path": "staging_vespalib/src/vespa/vespalib/util/singleexecutor.cpp", "diffHunk": "@@ -98,8 +124,7 @@ SingleExecutor::run_tasks_till(uint64_t available) {\n         task->run();\n         _rp.store(++consumed, std::memory_order_release);\n         if (wakeupLimit == consumed) {\n-            MonitorGuard guard(_producerMonitor);\n-            guard.broadcast();\n+            wakeupProducer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c29c9d08fcaa0f23d6eb0015d904723bdc6976e"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a3a5b321deb5e65d4a4856ee53eeafd0551d3b5", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/2a3a5b321deb5e65d4a4856ee53eeafd0551d3b5", "committedDate": "2020-03-12T11:35:01Z", "message": "Use std::mutex/condition_variable.\nUse shorter wait during sync, as that is urgent and synchronous."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczNTA3NzA1", "url": "https://github.com/vespa-engine/vespa/pull/12540#pullrequestreview-373507705", "createdAt": "2020-03-12T12:23:07Z", "commit": {"oid": "2a3a5b321deb5e65d4a4856ee53eeafd0551d3b5"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3269532b70f203cd302820ce1adc3facfe35dcf8", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/3269532b70f203cd302820ce1adc3facfe35dcf8", "committedDate": "2020-03-12T15:39:50Z", "message": "- Use a single common lock.\n- Introduce 2 stage startSync/sync.\n- avoid loosing wakeup on sync."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MjE0MTk1", "url": "https://github.com/vespa-engine/vespa/pull/12540#pullrequestreview-374214195", "createdAt": "2020-03-13T11:03:28Z", "commit": {"oid": "3269532b70f203cd302820ce1adc3facfe35dcf8"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMTowMzoyOFrOF1_rZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMTowMzoyOFrOF1_rZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE2MjE0OA==", "bodyText": "letting go of the lock here will allow multiple threads to call drain at the same time. this might be ok, but could lead to creating more new buffers than you really need.", "url": "https://github.com/vespa-engine/vespa/pull/12540#discussion_r392162148", "createdAt": "2020-03-13T11:03:28Z", "author": {"login": "havardpe"}, "path": "staging_vespalib/src/vespa/vespalib/util/singleexecutor.cpp", "diffHunk": "@@ -56,11 +63,27 @@ SingleExecutor::setTaskLimit(uint32_t taskLimit) {\n     _wantedTaskLimit = vespalib::roundUp2inN(taskLimit);\n }\n \n+void\n+SingleExecutor::drain(Lock & lock) {\n+    uint64_t wp = _wp.load(std::memory_order_relaxed);\n+    while (numTasks() > 0) {\n+        _consumerCondition.notify_one();\n+        sleepProducer(lock, 100us, wp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3269532b70f203cd302820ce1adc3facfe35dcf8"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2660, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}