{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExNTQ0MTU2", "number": 15066, "title": "Handle exclusiveTo in allocation", "bodyText": "", "createdAt": "2020-10-28T13:24:56Z", "url": "https://github.com/vespa-engine/vespa/pull/15066", "merged": true, "mergeCommit": {"oid": "3e9c8d6b0e88d9bdebf4b25f6c2a5f9a5ae5cae3"}, "closed": true, "closedAt": "2020-10-28T15:26:11Z", "author": {"login": "freva"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdW9hZBgH2gAyNTExNTQ0MTU2OmUxZDI1YWJiMjRmNWYzMThhOGYyNTcyNmQyMWFjZmYzYzhjY2FjMjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdW_BrIgH2gAyNTExNTQ0MTU2OmQzZTdjZGJkMDRlZGU0YzE3MjE4MWQwMDY3MDQwODRmMDJhZTZjNjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e1d25abb24f5f318a8f25726d21acff3c8ccac20", "author": {"user": {"login": "freva", "name": "Valerij Fredriksen"}}, "url": "https://github.com/vespa-engine/vespa/commit/e1d25abb24f5f318a8f25726d21acff3c8ccac20", "committedDate": "2020-10-28T13:24:15Z", "message": "Handle exclusiveTo in allocation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NzMxODg5", "url": "https://github.com/vespa-engine/vespa/pull/15066#pullrequestreview-518731889", "createdAt": "2020-10-28T14:35:39Z", "commit": {"oid": "e1d25abb24f5f318a8f25726d21acff3c8ccac20"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NzQyNDA2", "url": "https://github.com/vespa-engine/vespa/pull/15066#pullrequestreview-518742406", "createdAt": "2020-10-28T14:44:51Z", "commit": {"oid": "e1d25abb24f5f318a8f25726d21acff3c8ccac20"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDo0NDo1MVrOHpttFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNDo1MjowN1rOHpuFqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwMjQ4Nw==", "bodyText": "Space -> Spare", "url": "https://github.com/vespa-engine/vespa/pull/15066#discussion_r513502487", "createdAt": "2020-10-28T14:44:51Z", "author": {"login": "hakonhall"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodePrioritizer.java", "diffHunk": "@@ -71,9 +71,14 @@\n                 .filter(clusterSpec.group()::equals)\n                 .count();\n \n-        this.allocateForReplacement = isReplacement(nodesInCluster.size(),\n-                                                    nodesInCluster.state(Node.State.failed).size());\n-        this.canAllocateNew = requestedNodes instanceof NodeSpec.CountNodeSpec;\n+        // In dynamically provisioned zones, we can always take spare hosts since we can provision new on-demand,\n+        // NodeCandidate::compareTo will ensure that they will not be used until there is no room elsewhere.\n+        // In non-dynamically provisioned zones, we only allow allocating to spare hosts to replace failed nodes.\n+        this.canAllocateToSpaceHosts = isReplacement(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1d25abb24f5f318a8f25726d21acff3c8ccac20"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwNDI1Ng==", "bodyText": "Nit:  put dynamicProvisioning as the first condition of the || to short-circuit isReplacement expression if true", "url": "https://github.com/vespa-engine/vespa/pull/15066#discussion_r513504256", "createdAt": "2020-10-28T14:46:56Z", "author": {"login": "hakonhall"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodePrioritizer.java", "diffHunk": "@@ -71,9 +71,14 @@\n                 .filter(clusterSpec.group()::equals)\n                 .count();\n \n-        this.allocateForReplacement = isReplacement(nodesInCluster.size(),\n-                                                    nodesInCluster.state(Node.State.failed).size());\n-        this.canAllocateNew = requestedNodes instanceof NodeSpec.CountNodeSpec;\n+        // In dynamically provisioned zones, we can always take spare hosts since we can provision new on-demand,\n+        // NodeCandidate::compareTo will ensure that they will not be used until there is no room elsewhere.\n+        // In non-dynamically provisioned zones, we only allow allocating to spare hosts to replace failed nodes.\n+        this.canAllocateToSpaceHosts = isReplacement(\n+                nodesInCluster.size(), nodesInCluster.state(Node.State.failed).size()) || dynamicProvisioning;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1d25abb24f5f318a8f25726d21acff3c8ccac20"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUwODc3OQ==", "bodyText": "!dynamicProvisioning || --> dynamicProvisioning && ?", "url": "https://github.com/vespa-engine/vespa/pull/15066#discussion_r513508779", "createdAt": "2020-10-28T14:52:07Z", "author": {"login": "hakonhall"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/provisioning/NodePrioritizer.java", "diffHunk": "@@ -71,9 +71,14 @@\n                 .filter(clusterSpec.group()::equals)\n                 .count();\n \n-        this.allocateForReplacement = isReplacement(nodesInCluster.size(),\n-                                                    nodesInCluster.state(Node.State.failed).size());\n-        this.canAllocateNew = requestedNodes instanceof NodeSpec.CountNodeSpec;\n+        // In dynamically provisioned zones, we can always take spare hosts since we can provision new on-demand,\n+        // NodeCandidate::compareTo will ensure that they will not be used until there is no room elsewhere.\n+        // In non-dynamically provisioned zones, we only allow allocating to spare hosts to replace failed nodes.\n+        this.canAllocateToSpaceHosts = isReplacement(\n+                nodesInCluster.size(), nodesInCluster.state(Node.State.failed).size()) || dynamicProvisioning;\n+        // Do not allocate new nodes for exclusive deployments in dynamically provisioned zones: provision new host instead.\n+        this.canAllocateNew = requestedNodes instanceof NodeSpec.CountNodeSpec\n+                && (!dynamicProvisioning || !requestedNodes.isExclusive());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1d25abb24f5f318a8f25726d21acff3c8ccac20"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3e7cdbd04ede4c172181d006704084f02ae6c61", "author": {"user": {"login": "freva", "name": "Valerij Fredriksen"}}, "url": "https://github.com/vespa-engine/vespa/commit/d3e7cdbd04ede4c172181d006704084f02ae6c61", "committedDate": "2020-10-28T15:09:25Z", "message": "Fix typo"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2203, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}