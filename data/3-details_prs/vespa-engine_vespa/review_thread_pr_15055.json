{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwOTU1Njc1", "number": 15055, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDo0MTo0MVrOEywC2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDo0MTo0MVrOEywC2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjUxNDE4OnYy", "diffSide": "RIGHT", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/deployment/JobController.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDo0MTo0MVrOHpj7-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDo1OTozN1rOHpklVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0MjQ1OQ==", "bodyText": "Btw, I don't get how locking works in the JobRunner maintainer.  Shouldn't the maintainer\n\nacquire a global zk lock\nread all Runs and decide on some actions, then either do those actions or store to zk that those actions are in progress (using ephemeral nodes)\nunlock the global zk lock\n\nInstead it looks like e.g. two JobRunner may decide to finish concurrently?  Or one thread decide to abort a job whose step may already be processed in another thread.", "url": "https://github.com/vespa-engine/vespa/pull/15055#discussion_r513342459", "createdAt": "2020-10-28T10:41:41Z", "author": {"login": "hakonhall"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/deployment/JobController.java", "diffHunk": "@@ -353,7 +354,10 @@ public void setStartTimestamp(RunId id, Instant timestamp, LockedStep step) {\n     }\n \n     /** Changes the status of the given run to inactive, and stores it as a historic run. */\n-    public void finish(RunId id) {\n+    public void finish(RunId id) throws TimeoutException {\n+        // Ensure no step is still running before we finish the run \u2014 report depends transitively on all the other steps.\n+        locked(id.application(), id.type(), report, __ -> { });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9bd7b1f84bfce80592c222198b7bb7a912a710e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0MzU1Mw==", "bodyText": "or perhaps the read of Runs is fine, but for each Run, a lock must be held before deciding to abort() or advancement", "url": "https://github.com/vespa-engine/vespa/pull/15055#discussion_r513343553", "createdAt": "2020-10-28T10:43:31Z", "author": {"login": "hakonhall"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/deployment/JobController.java", "diffHunk": "@@ -353,7 +354,10 @@ public void setStartTimestamp(RunId id, Instant timestamp, LockedStep step) {\n     }\n \n     /** Changes the status of the given run to inactive, and stores it as a historic run. */\n-    public void finish(RunId id) {\n+    public void finish(RunId id) throws TimeoutException {\n+        // Ensure no step is still running before we finish the run \u2014 report depends transitively on all the other steps.\n+        locked(id.application(), id.type(), report, __ -> { });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0MjQ1OQ=="}, "originalCommit": {"oid": "e9bd7b1f84bfce80592c222198b7bb7a912a710e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1MzA0NA==", "bodyText": "Instead it looks like e.g. two JobRunner may decide to finish concurrently? Or one thread decide to abort a job whose step may already be processed in another thread.\n\nYes:\nFinishing a run (the actual state change) is guarded by a job-specific lock, so is already OK.\nThe second case is exactly what this fixes: current code doesn't wait for a running step to complete before finishing the run, which means any further logging by that step is lost.\nSteps have separate locks so they can run concurrently. This could be implemented as reading and writing the step status under lock as well, but I felt the lock-per-step was clearer.\nFinishing the run only when each step status is non-running requires the abort signal to cause this status to be set for each step, which can only happen after any currently running steps release their locks, and just requires more logic.", "url": "https://github.com/vespa-engine/vespa/pull/15055#discussion_r513353044", "createdAt": "2020-10-28T10:59:37Z", "author": {"login": "jonmv"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/deployment/JobController.java", "diffHunk": "@@ -353,7 +354,10 @@ public void setStartTimestamp(RunId id, Instant timestamp, LockedStep step) {\n     }\n \n     /** Changes the status of the given run to inactive, and stores it as a historic run. */\n-    public void finish(RunId id) {\n+    public void finish(RunId id) throws TimeoutException {\n+        // Ensure no step is still running before we finish the run \u2014 report depends transitively on all the other steps.\n+        locked(id.application(), id.type(), report, __ -> { });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0MjQ1OQ=="}, "originalCommit": {"oid": "e9bd7b1f84bfce80592c222198b7bb7a912a710e"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1033, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}