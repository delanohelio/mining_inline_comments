{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMjUzMDQ1", "number": 14518, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODowOTo1NFrOEm7Pxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODoxNDoxMVrOEm7WXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjUyMDM5OnYy", "diffSide": "RIGHT", "path": "eval/src/vespa/eval/eval/tensor_instructions.h", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODowOTo1NFrOHXOvuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTo0Mzo0OFrOHXSYWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEyMDg4OQ==", "bodyText": "There is no \"JoinPlan\".", "url": "https://github.com/vespa-engine/vespa/pull/14518#discussion_r494120889", "createdAt": "2020-09-24T08:09:54Z", "author": {"login": "arnej27959"}, "path": "eval/src/vespa/eval/eval/tensor_instructions.h", "diffHunk": "@@ -0,0 +1,24 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"interpreted_function.h\"\n+\n+namespace vespalib {\n+\n+class Stash;\n+\n+namespace eval {\n+\n+struct JoinPlan;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f43b36c544f2a0b40f5300a85f3ba543d6621613"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE4MDQ0Mg==", "bodyText": "it got renamed to JoinParam and made local, I will clean it up", "url": "https://github.com/vespa-engine/vespa/pull/14518#discussion_r494180442", "createdAt": "2020-09-24T09:43:48Z", "author": {"login": "havardpe"}, "path": "eval/src/vespa/eval/eval/tensor_instructions.h", "diffHunk": "@@ -0,0 +1,24 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"interpreted_function.h\"\n+\n+namespace vespalib {\n+\n+class Stash;\n+\n+namespace eval {\n+\n+struct JoinPlan;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEyMDg4OQ=="}, "originalCommit": {"oid": "f43b36c544f2a0b40f5300a85f3ba543d6621613"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjUzMTAyOnYy", "diffSide": "RIGHT", "path": "eval/src/vespa/eval/eval/tensor_instructions.h", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODoxMjozNFrOHXO2Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTo0NDowNFrOHXSY_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEyMjUyMw==", "bodyText": "ending three nested namespaces like this feels confusing to me.\nI suggest something like:\nnamespace vespalib { class Stash; }\n\nnamespace vespalib::eval::tensor_instruction {\n... rest of file ...\n}", "url": "https://github.com/vespa-engine/vespa/pull/14518#discussion_r494122523", "createdAt": "2020-09-24T08:12:34Z", "author": {"login": "arnej27959"}, "path": "eval/src/vespa/eval/eval/tensor_instructions.h", "diffHunk": "@@ -0,0 +1,24 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"interpreted_function.h\"\n+\n+namespace vespalib {\n+\n+class Stash;\n+\n+namespace eval {\n+\n+struct JoinPlan;\n+\n+namespace tensor_instruction {\n+\n+using join_fun_t = double (*)(double, double);\n+\n+InterpretedFunction::Instruction make_join(const ValueType &lhs_type, const ValueType &rhs_type, join_fun_t function,\n+                                           const ValueBuilderFactory &factory, Stash &stash);\n+\n+}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f43b36c544f2a0b40f5300a85f3ba543d6621613"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE4MDYwNw==", "bodyText": "agree", "url": "https://github.com/vespa-engine/vespa/pull/14518#discussion_r494180607", "createdAt": "2020-09-24T09:44:04Z", "author": {"login": "havardpe"}, "path": "eval/src/vespa/eval/eval/tensor_instructions.h", "diffHunk": "@@ -0,0 +1,24 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"interpreted_function.h\"\n+\n+namespace vespalib {\n+\n+class Stash;\n+\n+namespace eval {\n+\n+struct JoinPlan;\n+\n+namespace tensor_instruction {\n+\n+using join_fun_t = double (*)(double, double);\n+\n+InterpretedFunction::Instruction make_join(const ValueType &lhs_type, const ValueType &rhs_type, join_fun_t function,\n+                                           const ValueBuilderFactory &factory, Stash &stash);\n+\n+}\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEyMjUyMw=="}, "originalCommit": {"oid": "f43b36c544f2a0b40f5300a85f3ba543d6621613"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjUzNzI1OnYy", "diffSide": "RIGHT", "path": "eval/src/vespa/eval/eval/tensor_plans.h", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODoxNDoxMVrOHXO57g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTo0MjozNFrOHXSVaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEyMzUwMg==", "bodyText": "is it possible to move the various execute() implementations to the .cpp file? or would that lead to less inlining opportunities?", "url": "https://github.com/vespa-engine/vespa/pull/14518#discussion_r494123502", "createdAt": "2020-09-24T08:14:11Z", "author": {"login": "arnej27959"}, "path": "eval/src/vespa/eval/eval/tensor_plans.h", "diffHunk": "@@ -0,0 +1,77 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"value_type.h\"\n+#include <vespa/vespalib/stllike/string.h>\n+#include <vector>\n+\n+namespace vespalib::eval {\n+\n+class ValueBuilderFactory;\n+\n+//-----------------------------------------------------------------------------\n+\n+/**\n+ * Plan for how to traverse two partially overlapping dense subspaces\n+ * in parallel, identifying all matching cell index combinations, in\n+ * the exact order the joined cells will be stored in the result. The\n+ * plan can be made up-front during tensor function compilation.\n+ **/\n+struct DenseJoinPlan {\n+    size_t lhs_size;\n+    size_t rhs_size;\n+    size_t out_size;\n+    std::vector<size_t> loop_cnt;\n+    std::vector<size_t> lhs_stride;\n+    std::vector<size_t> rhs_stride;\n+    DenseJoinPlan(const ValueType &lhs_type, const ValueType &rhs_type);\n+    ~DenseJoinPlan();\n+    template <typename F> void execute(size_t lhs, size_t rhs, F &&f) const {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f43b36c544f2a0b40f5300a85f3ba543d6621613"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE3OTY4OA==", "bodyText": "I think we want it in a separate header, for cross-use in different plans. We do not want to call the function via pointer, so I think we should avoid having it in a cpp file.", "url": "https://github.com/vespa-engine/vespa/pull/14518#discussion_r494179688", "createdAt": "2020-09-24T09:42:34Z", "author": {"login": "havardpe"}, "path": "eval/src/vespa/eval/eval/tensor_plans.h", "diffHunk": "@@ -0,0 +1,77 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"value_type.h\"\n+#include <vespa/vespalib/stllike/string.h>\n+#include <vector>\n+\n+namespace vespalib::eval {\n+\n+class ValueBuilderFactory;\n+\n+//-----------------------------------------------------------------------------\n+\n+/**\n+ * Plan for how to traverse two partially overlapping dense subspaces\n+ * in parallel, identifying all matching cell index combinations, in\n+ * the exact order the joined cells will be stored in the result. The\n+ * plan can be made up-front during tensor function compilation.\n+ **/\n+struct DenseJoinPlan {\n+    size_t lhs_size;\n+    size_t rhs_size;\n+    size_t out_size;\n+    std::vector<size_t> loop_cnt;\n+    std::vector<size_t> lhs_stride;\n+    std::vector<size_t> rhs_stride;\n+    DenseJoinPlan(const ValueType &lhs_type, const ValueType &rhs_type);\n+    ~DenseJoinPlan();\n+    template <typename F> void execute(size_t lhs, size_t rhs, F &&f) const {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEyMzUwMg=="}, "originalCommit": {"oid": "f43b36c544f2a0b40f5300a85f3ba543d6621613"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1299, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}