{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2ODc2NDY3", "number": 14978, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNjoyMTo1N1rOEwFsvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNjo0MDo1NFrOEwGBbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODYwNDc5OnYy", "diffSide": "RIGHT", "path": "jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNjoyMTo1N1rOHlb6mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzozMjowNVrOHleBSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxNjczMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Executor executor = Executors.newSingleThreadExecutor(new DaemonThreadFactory(\"health-check-proxy-client\"));\n          \n          \n            \n                private final Executor executor = Executors.newSingleThreadExecutor(new DaemonThreadFactory(\"health-check-proxy-client-\"));", "url": "https://github.com/vespa-engine/vespa/pull/14978#discussion_r509016730", "createdAt": "2020-10-21T06:21:57Z", "author": {"login": "jonmv"}, "path": "jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java", "diffHunk": "@@ -49,6 +53,7 @@\n \n     private static final String HEALTH_CHECK_PATH = \"/status.html\";\n \n+    private final Executor executor = Executors.newSingleThreadExecutor(new DaemonThreadFactory(\"health-check-proxy-client\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b80f539311a6dac6629890568ab65022f907894"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1MTIxMA==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/14978#discussion_r509051210", "createdAt": "2020-10-21T07:32:05Z", "author": {"login": "bjorncs"}, "path": "jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java", "diffHunk": "@@ -49,6 +53,7 @@\n \n     private static final String HEALTH_CHECK_PATH = \"/status.html\";\n \n+    private final Executor executor = Executors.newSingleThreadExecutor(new DaemonThreadFactory(\"health-check-proxy-client\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAxNjczMA=="}, "originalCommit": {"oid": "5b80f539311a6dac6629890568ab65022f907894"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODYzNjYwOnYy", "diffSide": "RIGHT", "path": "jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNjozMzozN1rOHlcNIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzoyNToyNVrOHldxzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyMTQ3Mg==", "bodyText": "Super-nitty: this field could just be a local variable in the run method.", "url": "https://github.com/vespa-engine/vespa/pull/14978#discussion_r509021472", "createdAt": "2020-10-21T06:33:37Z", "author": {"login": "jonmv"}, "path": "jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java", "diffHunk": "@@ -124,21 +115,86 @@ protected void doStop() throws Exception {\n         super.doStop();\n     }\n \n+    private static class ProxyRequestTask implements Runnable {\n+\n+        final AsyncContext asyncContext;\n+        final ProxyTarget target;\n+        final HttpServletResponse servletResponse;\n+        final ServletOutputStream output;\n+\n+        ProxyRequestTask(AsyncContext asyncContext, ProxyTarget target, HttpServletResponse servletResponse, ServletOutputStream output) {\n+            this.asyncContext = asyncContext;\n+            this.target = target;\n+            this.servletResponse = servletResponse;\n+            this.output = output;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b80f539311a6dac6629890568ab65022f907894"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA0NzI0Nw==", "bodyText": "getOuputStream() may throw IOException, so I want to do it in the handle method.", "url": "https://github.com/vespa-engine/vespa/pull/14978#discussion_r509047247", "createdAt": "2020-10-21T07:25:25Z", "author": {"login": "bjorncs"}, "path": "jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java", "diffHunk": "@@ -124,21 +115,86 @@ protected void doStop() throws Exception {\n         super.doStop();\n     }\n \n+    private static class ProxyRequestTask implements Runnable {\n+\n+        final AsyncContext asyncContext;\n+        final ProxyTarget target;\n+        final HttpServletResponse servletResponse;\n+        final ServletOutputStream output;\n+\n+        ProxyRequestTask(AsyncContext asyncContext, ProxyTarget target, HttpServletResponse servletResponse, ServletOutputStream output) {\n+            this.asyncContext = asyncContext;\n+            this.target = target;\n+            this.servletResponse = servletResponse;\n+            this.output = output;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyMTQ3Mg=="}, "originalCommit": {"oid": "5b80f539311a6dac6629890568ab65022f907894"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODY1NTc0OnYy", "diffSide": "RIGHT", "path": "jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNjo0MDoxOFrOHlcYVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzozMDoxOVrOHld9NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyNDM0Mw==", "bodyText": "I don't like the spec here. How much can you write without blocking? Generally, this should be a while loop, but since you only do a single write here, and then close, I guess this is fine.", "url": "https://github.com/vespa-engine/vespa/pull/14978#discussion_r509024343", "createdAt": "2020-10-21T06:40:18Z", "author": {"login": "jonmv"}, "path": "jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java", "diffHunk": "@@ -124,21 +115,86 @@ protected void doStop() throws Exception {\n         super.doStop();\n     }\n \n+    private static class ProxyRequestTask implements Runnable {\n+\n+        final AsyncContext asyncContext;\n+        final ProxyTarget target;\n+        final HttpServletResponse servletResponse;\n+        final ServletOutputStream output;\n+\n+        ProxyRequestTask(AsyncContext asyncContext, ProxyTarget target, HttpServletResponse servletResponse, ServletOutputStream output) {\n+            this.asyncContext = asyncContext;\n+            this.target = target;\n+            this.servletResponse = servletResponse;\n+            this.output = output;\n+        }\n+\n+        @Override\n+        public void run() {\n+            StatusResponse statusResponse = target.requestStatusHtml();\n+            servletResponse.setStatus(statusResponse.statusCode);\n+            if (statusResponse.contentType != null) {\n+                servletResponse.setHeader(\"Content-Type\", statusResponse.contentType);\n+            }\n+            output.setWriteListener(new WriteListener() {\n+                @Override\n+                public void onWritePossible() throws IOException {\n+                    if (output.isReady()) {\n+                        if (statusResponse.content != null) {\n+                            output.write(statusResponse.content);\n+                        }\n+                        asyncContext.complete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b80f539311a6dac6629890568ab65022f907894"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1MDE2NQ==", "bodyText": "Yes, it's a bad interface. The servlet has no clue on how much data to produce. This method typically implemented as a while loop if the servlet had multiple byte buffers to write.", "url": "https://github.com/vespa-engine/vespa/pull/14978#discussion_r509050165", "createdAt": "2020-10-21T07:30:19Z", "author": {"login": "bjorncs"}, "path": "jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java", "diffHunk": "@@ -124,21 +115,86 @@ protected void doStop() throws Exception {\n         super.doStop();\n     }\n \n+    private static class ProxyRequestTask implements Runnable {\n+\n+        final AsyncContext asyncContext;\n+        final ProxyTarget target;\n+        final HttpServletResponse servletResponse;\n+        final ServletOutputStream output;\n+\n+        ProxyRequestTask(AsyncContext asyncContext, ProxyTarget target, HttpServletResponse servletResponse, ServletOutputStream output) {\n+            this.asyncContext = asyncContext;\n+            this.target = target;\n+            this.servletResponse = servletResponse;\n+            this.output = output;\n+        }\n+\n+        @Override\n+        public void run() {\n+            StatusResponse statusResponse = target.requestStatusHtml();\n+            servletResponse.setStatus(statusResponse.statusCode);\n+            if (statusResponse.contentType != null) {\n+                servletResponse.setHeader(\"Content-Type\", statusResponse.contentType);\n+            }\n+            output.setWriteListener(new WriteListener() {\n+                @Override\n+                public void onWritePossible() throws IOException {\n+                    if (output.isReady()) {\n+                        if (statusResponse.content != null) {\n+                            output.write(statusResponse.content);\n+                        }\n+                        asyncContext.complete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyNDM0Mw=="}, "originalCommit": {"oid": "5b80f539311a6dac6629890568ab65022f907894"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODY1NzcyOnYy", "diffSide": "RIGHT", "path": "jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNjo0MDo1NFrOHlcZdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzozMjoxNFrOHleBow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyNDYyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        StatusResponse statusResponse = getStatusResponse();\n          \n          \n            \n                        lastResponse = statusResponse;\n          \n          \n            \n                        return statusResponse;\n          \n          \n            \n                        return lastResponse = getStatusResponse();\n          \n      \n    \n    \n  \n\nI find this easier to read, but personal preference I guess :)", "url": "https://github.com/vespa-engine/vespa/pull/14978#discussion_r509024629", "createdAt": "2020-10-21T06:40:54Z", "author": {"login": "jonmv"}, "path": "jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java", "diffHunk": "@@ -124,21 +115,86 @@ protected void doStop() throws Exception {\n         super.doStop();\n     }\n \n+    private static class ProxyRequestTask implements Runnable {\n+\n+        final AsyncContext asyncContext;\n+        final ProxyTarget target;\n+        final HttpServletResponse servletResponse;\n+        final ServletOutputStream output;\n+\n+        ProxyRequestTask(AsyncContext asyncContext, ProxyTarget target, HttpServletResponse servletResponse, ServletOutputStream output) {\n+            this.asyncContext = asyncContext;\n+            this.target = target;\n+            this.servletResponse = servletResponse;\n+            this.output = output;\n+        }\n+\n+        @Override\n+        public void run() {\n+            StatusResponse statusResponse = target.requestStatusHtml();\n+            servletResponse.setStatus(statusResponse.statusCode);\n+            if (statusResponse.contentType != null) {\n+                servletResponse.setHeader(\"Content-Type\", statusResponse.contentType);\n+            }\n+            output.setWriteListener(new WriteListener() {\n+                @Override\n+                public void onWritePossible() throws IOException {\n+                    if (output.isReady()) {\n+                        if (statusResponse.content != null) {\n+                            output.write(statusResponse.content);\n+                        }\n+                        asyncContext.complete();\n+                    }\n+                }\n+\n+                @Override\n+                public void onError(Throwable t) {\n+                    log.log(Level.FINE, t, () -> \"Failed to write status response: \" + t.getMessage());\n+                    asyncContext.complete();\n+                }\n+            });\n+        }\n+    }\n+\n     private static class ProxyTarget implements AutoCloseable {\n         final int port;\n         final Duration timeout;\n         final SslContextFactory.Server sslContextFactory;\n         volatile CloseableHttpClient client;\n+        volatile StatusResponse lastResponse;\n \n         ProxyTarget(int port, Duration timeout, SslContextFactory.Server sslContextFactory) {\n             this.port = port;\n             this.timeout = timeout;\n             this.sslContextFactory = sslContextFactory;\n         }\n \n-        CloseableHttpResponse requestStatusHtml() throws IOException {\n-            return client()\n-                    .execute(new HttpGet(\"https://localhost:\" + port + HEALTH_CHECK_PATH));\n+        StatusResponse requestStatusHtml() {\n+            StatusResponse response = lastResponse;\n+            if (response != null && !response.isExpired()) {\n+                return response;\n+            }\n+            StatusResponse statusResponse = getStatusResponse();\n+            lastResponse = statusResponse;\n+            return statusResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b80f539311a6dac6629890568ab65022f907894"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1MTI5OQ==", "bodyText": "Done :)", "url": "https://github.com/vespa-engine/vespa/pull/14978#discussion_r509051299", "createdAt": "2020-10-21T07:32:14Z", "author": {"login": "bjorncs"}, "path": "jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/HealthCheckProxyHandler.java", "diffHunk": "@@ -124,21 +115,86 @@ protected void doStop() throws Exception {\n         super.doStop();\n     }\n \n+    private static class ProxyRequestTask implements Runnable {\n+\n+        final AsyncContext asyncContext;\n+        final ProxyTarget target;\n+        final HttpServletResponse servletResponse;\n+        final ServletOutputStream output;\n+\n+        ProxyRequestTask(AsyncContext asyncContext, ProxyTarget target, HttpServletResponse servletResponse, ServletOutputStream output) {\n+            this.asyncContext = asyncContext;\n+            this.target = target;\n+            this.servletResponse = servletResponse;\n+            this.output = output;\n+        }\n+\n+        @Override\n+        public void run() {\n+            StatusResponse statusResponse = target.requestStatusHtml();\n+            servletResponse.setStatus(statusResponse.statusCode);\n+            if (statusResponse.contentType != null) {\n+                servletResponse.setHeader(\"Content-Type\", statusResponse.contentType);\n+            }\n+            output.setWriteListener(new WriteListener() {\n+                @Override\n+                public void onWritePossible() throws IOException {\n+                    if (output.isReady()) {\n+                        if (statusResponse.content != null) {\n+                            output.write(statusResponse.content);\n+                        }\n+                        asyncContext.complete();\n+                    }\n+                }\n+\n+                @Override\n+                public void onError(Throwable t) {\n+                    log.log(Level.FINE, t, () -> \"Failed to write status response: \" + t.getMessage());\n+                    asyncContext.complete();\n+                }\n+            });\n+        }\n+    }\n+\n     private static class ProxyTarget implements AutoCloseable {\n         final int port;\n         final Duration timeout;\n         final SslContextFactory.Server sslContextFactory;\n         volatile CloseableHttpClient client;\n+        volatile StatusResponse lastResponse;\n \n         ProxyTarget(int port, Duration timeout, SslContextFactory.Server sslContextFactory) {\n             this.port = port;\n             this.timeout = timeout;\n             this.sslContextFactory = sslContextFactory;\n         }\n \n-        CloseableHttpResponse requestStatusHtml() throws IOException {\n-            return client()\n-                    .execute(new HttpGet(\"https://localhost:\" + port + HEALTH_CHECK_PATH));\n+        StatusResponse requestStatusHtml() {\n+            StatusResponse response = lastResponse;\n+            if (response != null && !response.isExpired()) {\n+                return response;\n+            }\n+            StatusResponse statusResponse = getStatusResponse();\n+            lastResponse = statusResponse;\n+            return statusResponse;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAyNDYyOQ=="}, "originalCommit": {"oid": "5b80f539311a6dac6629890568ab65022f907894"}, "originalPosition": 150}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1107, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}