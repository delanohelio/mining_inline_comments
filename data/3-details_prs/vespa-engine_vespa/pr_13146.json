{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyOTE2NTYy", "number": 13146, "title": "- Implement async put", "bodyText": "Move result processing to MessageTracker\nWire putAsync through provider error wrapper too.\nHandle both sync and async replies in tests.\n\n@vekterli PR", "createdAt": "2020-05-04T12:18:18Z", "url": "https://github.com/vespa-engine/vespa/pull/13146", "merged": true, "mergeCommit": {"oid": "a5a736466f91700bfe7bb72538463aa274ce26e3"}, "closed": true, "closedAt": "2020-05-04T14:12:32Z", "author": {"login": "baldersheim"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcd-U63gH2gAyNDEyOTE2NTYyOmY1N2FkMDQyYjQ2ODMwMDAzNDk3ZDJiNWU0N2NkNTE1N2ZhMTIwNTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceAGkTgH2gAyNDEyOTE2NTYyOjFhYThiMGIxMTU3NWIzYzFlNmEwZDk5MWQ3YjY1NWE5MjkwYzg1ZDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f57ad042b46830003497d2b5e47cd5157fa12054", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/f57ad042b46830003497d2b5e47cd5157fa12054", "committedDate": "2020-05-04T12:06:51Z", "message": "- Implement async put\n- Move result processing to MessageTracker\n- Wire putAsync through provider error wrapper too.\n- Handle both sync and async replies in tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0OTM0ODE5", "url": "https://github.com/vespa-engine/vespa/pull/13146#pullrequestreview-404934819", "createdAt": "2020-05-04T12:20:38Z", "commit": {"oid": "f57ad042b46830003497d2b5e47cd5157fa12054"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoyMDozOFrOGP9zrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzozMDo1MFrOGQAZyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5NDQ3Nw==", "bodyText": "Typo: thread -> threads", "url": "https://github.com/vespa-engine/vespa/pull/13146#discussion_r419394477", "createdAt": "2020-05-04T12:20:38Z", "author": {"login": "vekterli"}, "path": "configdefinitions/src/vespa/stor-filestor.def", "diffHunk": "@@ -26,6 +26,11 @@ disk_operation_timeout int default=0 restart\n ## Number of threads to use for each mountpoint.\n num_threads int default=8 restart\n \n+## Number of thread for response processing and delivery", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f57ad042b46830003497d2b5e47cd5157fa12054"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwNzM3Nw==", "bodyText": "Is there a container resource constraint-aware config for this that we should prefer to use instead of the raw number of cores on the node itself?", "url": "https://github.com/vespa-engine/vespa/pull/13146#discussion_r419407377", "createdAt": "2020-05-04T12:44:42Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/persistence/filestorage/filestormanager.cpp", "diffHunk": "@@ -88,6 +89,13 @@ FileStorManager::print(std::ostream& out, bool verbose, const std::string& inden\n     out << \"FileStorManager\";\n }\n \n+namespace {\n+\n+uint32_t computeNumResponseThreads(int configured) {\n+    return (configured < 0) ? std::max(1u, std::thread::hardware_concurrency()/4) : configured;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f57ad042b46830003497d2b5e47cd5157fa12054"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzNzAwMQ==", "bodyText": "tracker->context() should be extracted as own variable before calling putAsync, as eval order is undefined and makeResultTask tries to capture it with a std::move(tracker). Possible to move away tracker before it's dereferenced.", "url": "https://github.com/vespa-engine/vespa/pull/13146#discussion_r419437001", "createdAt": "2020-05-04T13:30:50Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/persistence/persistencethread.cpp", "diffHunk": "@@ -102,9 +176,20 @@ PersistenceThread::handlePut(api::PutCommand& cmd, MessageTracker::UP tracker)\n         return tracker;\n     }\n \n-    spi::Result response = _spi.put(getBucket(cmd.getDocumentId(), cmd.getBucket()),\n-                                    spi::Timestamp(cmd.getTimestamp()), std::move(cmd.getDocument()), tracker->context());\n-    tracker->checkForError(response);\n+    if (_sequencedExecutor == nullptr) {\n+        spi::Result response = _spi.put(getBucket(cmd.getDocumentId(), cmd.getBucket()),\n+                                        spi::Timestamp(cmd.getTimestamp()), std::move(cmd.getDocument()),\n+                                        tracker->context());\n+        tracker->checkForError(response);\n+    } else {\n+        _spi.putAsync(getBucket(cmd.getDocumentId(), cmd.getBucket()), spi::Timestamp(cmd.getTimestamp()),\n+                      std::move(cmd.getDocument()), tracker->context(),\n+                      std::make_unique<ResultTaskOperationDone>(*_sequencedExecutor, cmd.getBucketId(),\n+                              makeResultTask([tracker = std::move(tracker)](spi::Result::UP response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f57ad042b46830003497d2b5e47cd5157fa12054"}, "originalPosition": 114}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1aa8b0b11575b3c1e6a0d991d7b655a9290c85d9", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/1aa8b0b11575b3c1e6a0d991d7b655a9290c85d9", "committedDate": "2020-05-04T14:10:59Z", "message": "Ensure that eval order might cause object to disappear under your feet by taking an reference when it is safe."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3317, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}