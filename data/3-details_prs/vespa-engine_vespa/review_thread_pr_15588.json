{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwOTE3MzY4", "number": 15588, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMDo0ODowMFrOE_j3pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMDo1MDoxOFrOE_j7Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDgzNDMxOnYy", "diffSide": "RIGHT", "path": "controller-api/src/main/java/com/yahoo/vespa/hosted/controller/api/integration/configserver/Node.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMDo0ODowMFrOH9VHhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMDo0ODowMFrOH9VHhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3MTE3NA==", "bodyText": "I don't think builders should take Optionals, instead the caller should avoid calling if the field is not present.", "url": "https://github.com/vespa-engine/vespa/pull/15588#discussion_r534071174", "createdAt": "2020-12-02T10:48:00Z", "author": {"login": "freva"}, "path": "controller-api/src/main/java/com/yahoo/vespa/hosted/controller/api/integration/configserver/Node.java", "diffHunk": "@@ -495,12 +503,17 @@ public Builder openStackId(String openStackId) {\n             return this;\n         }\n \n+        public Builder switchHostname(Optional<String> switchHostname) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4a0f2f0f0963ca85d5ebee7e61e37085ac4630a"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MDg0MzUwOnYy", "diffSide": "RIGHT", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/HostSwitchUpdater.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMDo1MDoxOFrOH9VNOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMToyMDoyMVrOH9WTTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3MjYzMg==", "bodyText": "If we are guaranteed that this is set, this should be .orElseThrow(), otherwise we should filter this in shouldUpdate()", "url": "https://github.com/vespa-engine/vespa/pull/15588#discussion_r534072632", "createdAt": "2020-12-02T10:50:18Z", "author": {"login": "freva"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/HostSwitchUpdater.java", "diffHunk": "@@ -0,0 +1,52 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.hosted.controller.maintenance;\n+\n+import com.yahoo.vespa.hosted.controller.Controller;\n+import com.yahoo.vespa.hosted.controller.api.integration.configserver.Node;\n+import com.yahoo.vespa.hosted.controller.api.integration.configserver.NodeRepository;\n+import com.yahoo.vespa.hosted.controller.api.integration.entity.NodeEntity;\n+import com.yahoo.vespa.hosted.controller.api.integration.noderepository.NodeRepositoryNode;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Ensures that the switch information for all hosts is up to date.\n+ *\n+ * @author mpolden\n+ */\n+public class HostSwitchUpdater extends ControllerMaintainer {\n+\n+    private final NodeRepository nodeRepository;\n+\n+    public HostSwitchUpdater(Controller controller, Duration interval) {\n+        super(controller, interval);\n+        this.nodeRepository = controller.serviceRegistry().configServer().nodeRepository();\n+    }\n+\n+    @Override\n+    protected boolean maintain() {\n+        Map<String, NodeEntity> nodeEntities = controller().serviceRegistry().entityService().listNodes().stream()\n+                                                           .collect(Collectors.toMap(NodeEntity::hostname,\n+                                                                                     Function.identity()));\n+        for (var zone : controller().zoneRegistry().zones().controllerUpgraded().all().ids()) {\n+            for (var node : nodeRepository.list(zone)) {\n+                NodeEntity nodeEntity = nodeEntities.get(node.hostname().value());\n+                if (!shouldUpdate(node, nodeEntity)) continue;\n+\n+                NodeRepositoryNode updatedNode = new NodeRepositoryNode();\n+                updatedNode.setSwitchHostname(nodeEntity.switchHostname().orElse(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4a0f2f0f0963ca85d5ebee7e61e37085ac4630a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA4NzA5Ng==", "bodyText": "NodeEntity isn't guaranteed to have a switch, and if it's removed we want to remove it from the node as well.", "url": "https://github.com/vespa-engine/vespa/pull/15588#discussion_r534087096", "createdAt": "2020-12-02T11:14:22Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/HostSwitchUpdater.java", "diffHunk": "@@ -0,0 +1,52 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.hosted.controller.maintenance;\n+\n+import com.yahoo.vespa.hosted.controller.Controller;\n+import com.yahoo.vespa.hosted.controller.api.integration.configserver.Node;\n+import com.yahoo.vespa.hosted.controller.api.integration.configserver.NodeRepository;\n+import com.yahoo.vespa.hosted.controller.api.integration.entity.NodeEntity;\n+import com.yahoo.vespa.hosted.controller.api.integration.noderepository.NodeRepositoryNode;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Ensures that the switch information for all hosts is up to date.\n+ *\n+ * @author mpolden\n+ */\n+public class HostSwitchUpdater extends ControllerMaintainer {\n+\n+    private final NodeRepository nodeRepository;\n+\n+    public HostSwitchUpdater(Controller controller, Duration interval) {\n+        super(controller, interval);\n+        this.nodeRepository = controller.serviceRegistry().configServer().nodeRepository();\n+    }\n+\n+    @Override\n+    protected boolean maintain() {\n+        Map<String, NodeEntity> nodeEntities = controller().serviceRegistry().entityService().listNodes().stream()\n+                                                           .collect(Collectors.toMap(NodeEntity::hostname,\n+                                                                                     Function.identity()));\n+        for (var zone : controller().zoneRegistry().zones().controllerUpgraded().all().ids()) {\n+            for (var node : nodeRepository.list(zone)) {\n+                NodeEntity nodeEntity = nodeEntities.get(node.hostname().value());\n+                if (!shouldUpdate(node, nodeEntity)) continue;\n+\n+                NodeRepositoryNode updatedNode = new NodeRepositoryNode();\n+                updatedNode.setSwitchHostname(nodeEntity.switchHostname().orElse(null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3MjYzMg=="}, "originalCommit": {"oid": "d4a0f2f0f0963ca85d5ebee7e61e37085ac4630a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA5MDU3NQ==", "bodyText": "I see, makes sense, but NodeRepositoryNode excludes nulls, so I think this will just be a patch with {}?", "url": "https://github.com/vespa-engine/vespa/pull/15588#discussion_r534090575", "createdAt": "2020-12-02T11:20:21Z", "author": {"login": "freva"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/HostSwitchUpdater.java", "diffHunk": "@@ -0,0 +1,52 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.hosted.controller.maintenance;\n+\n+import com.yahoo.vespa.hosted.controller.Controller;\n+import com.yahoo.vespa.hosted.controller.api.integration.configserver.Node;\n+import com.yahoo.vespa.hosted.controller.api.integration.configserver.NodeRepository;\n+import com.yahoo.vespa.hosted.controller.api.integration.entity.NodeEntity;\n+import com.yahoo.vespa.hosted.controller.api.integration.noderepository.NodeRepositoryNode;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Ensures that the switch information for all hosts is up to date.\n+ *\n+ * @author mpolden\n+ */\n+public class HostSwitchUpdater extends ControllerMaintainer {\n+\n+    private final NodeRepository nodeRepository;\n+\n+    public HostSwitchUpdater(Controller controller, Duration interval) {\n+        super(controller, interval);\n+        this.nodeRepository = controller.serviceRegistry().configServer().nodeRepository();\n+    }\n+\n+    @Override\n+    protected boolean maintain() {\n+        Map<String, NodeEntity> nodeEntities = controller().serviceRegistry().entityService().listNodes().stream()\n+                                                           .collect(Collectors.toMap(NodeEntity::hostname,\n+                                                                                     Function.identity()));\n+        for (var zone : controller().zoneRegistry().zones().controllerUpgraded().all().ids()) {\n+            for (var node : nodeRepository.list(zone)) {\n+                NodeEntity nodeEntity = nodeEntities.get(node.hostname().value());\n+                if (!shouldUpdate(node, nodeEntity)) continue;\n+\n+                NodeRepositoryNode updatedNode = new NodeRepositoryNode();\n+                updatedNode.setSwitchHostname(nodeEntity.switchHostname().orElse(null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3MjYzMg=="}, "originalCommit": {"oid": "d4a0f2f0f0963ca85d5ebee7e61e37085ac4630a"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 766, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}