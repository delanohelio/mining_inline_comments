{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NTczNjQ3", "number": 11969, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNzozNjowNVrODa9p5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNzozNjowNVrODa9p5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NTk5NzE4OnYy", "diffSide": "RIGHT", "path": "http-utils/src/main/java/ai/vespa/util/http/retry/DelaySupplier.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNzozNjowNVrOFiLW7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwOToxMTo1NlrOFidlCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM4MTk5OQ==", "bodyText": "multipliedBy(1 << (executionCount-1)) or similar?", "url": "https://github.com/vespa-engine/vespa/pull/11969#discussion_r371381999", "createdAt": "2020-01-27T17:36:05Z", "author": {"login": "hakonhall"}, "path": "http-utils/src/main/java/ai/vespa/util/http/retry/DelaySupplier.java", "diffHunk": "@@ -0,0 +1,44 @@\n+// Copyright 2020 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package ai.vespa.util.http.retry;\n+\n+import java.time.Duration;\n+\n+/**\n+ * An abstraction that calculates the next delay based on the current retry count.\n+ *\n+ * @author bjorncs\n+ */\n+@FunctionalInterface\n+interface DelaySupplier {\n+    Duration getDelay(int executionCount);\n+\n+    class Fixed implements DelaySupplier {\n+        private final Duration delay;\n+\n+        Fixed(Duration delay) {\n+            this.delay = delay;\n+        }\n+\n+        @Override\n+        public Duration getDelay(int executionCount) { return delay; }\n+    }\n+\n+    class Exponential implements DelaySupplier {\n+        private final Duration startDelay;\n+        private final Duration maxDelay;\n+\n+        Exponential(Duration startDelay, Duration maxDelay) {\n+            this.startDelay = startDelay;\n+            this.maxDelay = maxDelay;\n+        }\n+\n+        @Override\n+        public Duration getDelay(int executionCount) {\n+            Duration nextDelay = startDelay;\n+            for (int i = 1; i < executionCount; ++i) {\n+                nextDelay = nextDelay.multipliedBy(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f8eccf8955cb400f43d693b04bbab571c51de9f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY4MDUyMQ==", "bodyText": "That was a bit more elegant yes \ud83d\udc4d", "url": "https://github.com/vespa-engine/vespa/pull/11969#discussion_r371680521", "createdAt": "2020-01-28T09:11:56Z", "author": {"login": "bjorncs"}, "path": "http-utils/src/main/java/ai/vespa/util/http/retry/DelaySupplier.java", "diffHunk": "@@ -0,0 +1,44 @@\n+// Copyright 2020 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package ai.vespa.util.http.retry;\n+\n+import java.time.Duration;\n+\n+/**\n+ * An abstraction that calculates the next delay based on the current retry count.\n+ *\n+ * @author bjorncs\n+ */\n+@FunctionalInterface\n+interface DelaySupplier {\n+    Duration getDelay(int executionCount);\n+\n+    class Fixed implements DelaySupplier {\n+        private final Duration delay;\n+\n+        Fixed(Duration delay) {\n+            this.delay = delay;\n+        }\n+\n+        @Override\n+        public Duration getDelay(int executionCount) { return delay; }\n+    }\n+\n+    class Exponential implements DelaySupplier {\n+        private final Duration startDelay;\n+        private final Duration maxDelay;\n+\n+        Exponential(Duration startDelay, Duration maxDelay) {\n+            this.startDelay = startDelay;\n+            this.maxDelay = maxDelay;\n+        }\n+\n+        @Override\n+        public Duration getDelay(int executionCount) {\n+            Duration nextDelay = startDelay;\n+            for (int i = 1; i < executionCount; ++i) {\n+                nextDelay = nextDelay.multipliedBy(2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM4MTk5OQ=="}, "originalCommit": {"oid": "1f8eccf8955cb400f43d693b04bbab571c51de9f"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2543, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}