{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2Nzg0MDY5", "number": 11920, "title": "Use atomic sematics for cached number of true bits to ensure visibility.", "bodyText": "@vekterli or @toregge PR", "createdAt": "2020-01-24T11:03:35Z", "url": "https://github.com/vespa-engine/vespa/pull/11920", "merged": true, "mergeCommit": {"oid": "e25239aeca66039d5b64ee2193760511bb5e52e7"}, "closed": true, "closedAt": "2020-01-24T13:35:53Z", "author": {"login": "baldersheim"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9c35FAH2gAyMzY2Nzg0MDY5OjdkZTNkYjVhMTU0OGNlNTk1Zjc2YTRmODE3MjA2YjBiYzY2M2MyZTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb9fDhmgH2gAyMzY2Nzg0MDY5OjQ4Nzk3MzA0MjdjZTJlMmYxNGUyM2IyZDhhM2NhYzFkMGQ4MTlhMzE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7de3db5a1548ce595f76a4f817206b0bc663c2e7", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/7de3db5a1548ce595f76a4f817206b0bc663c2e7", "committedDate": "2020-01-24T11:02:42Z", "message": "Use atomic sematics for cached number of true bits to ensure visibility."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f94dad8ae0811bd0da6ff6c05c6e17e5049d5c1", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/4f94dad8ae0811bd0da6ff6c05c6e17e5049d5c1", "committedDate": "2020-01-24T11:16:18Z", "message": "Unroll tight loop."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec51225758e3c28360f7b03d9f315a1298badeef", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/ec51225758e3c28360f7b03d9f315a1298badeef", "committedDate": "2020-01-24T11:26:20Z", "message": "Count after invalidating."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3OTAyMDUx", "url": "https://github.com/vespa-engine/vespa/pull/11920#pullrequestreview-347902051", "createdAt": "2020-01-24T11:43:40Z", "commit": {"oid": "ec51225758e3c28360f7b03d9f315a1298badeef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODk4NTQz", "url": "https://github.com/vespa-engine/vespa/pull/11920#pullrequestreview-347898543", "createdAt": "2020-01-24T11:35:55Z", "commit": {"oid": "ec51225758e3c28360f7b03d9f315a1298badeef"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTozNTo1NVrOFhbHsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTo0Njo1M1rOFhbWxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MTY2NQ==", "bodyText": "Is incNumBits/decNumBits possibly called from multiple threads concurrently? If not, and if visibility of changes to _numTrueBits are guaranteed between writer threads through other means (mutexes etc), this could be done without requiring explicit atomic bus operations. E.g.\n_numTrueBits.store(_numTrueBits.load(std::memory_order_relaxed) - 1, std::memory_order_relaxed);", "url": "https://github.com/vespa-engine/vespa/pull/11920#discussion_r370591665", "createdAt": "2020-01-24T11:35:55Z", "author": {"login": "vekterli"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.h", "diffHunk": "@@ -285,12 +287,12 @@ class BitVector : protected BitWord\n     void setGuardBit() { setBit(size()); }\n     void incNumBits() {\n         if ( isValidCount() ) {\n-            _numTrueBits++;\n+            _numTrueBits.fetch_add(1, std::memory_order_relaxed);\n         }\n     }\n     void decNumBits() {\n         if ( isValidCount() ) {\n-            _numTrueBits--;\n+            _numTrueBits.fetch_sub(1, std::memory_order_relaxed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec51225758e3c28360f7b03d9f315a1298badeef"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5NTUyNA==", "bodyText": "Consider adding load()/store() to these lines where appropriate to make all atomic access explicit (if desired)", "url": "https://github.com/vespa-engine/vespa/pull/11920#discussion_r370595524", "createdAt": "2020-01-24T11:46:53Z", "author": {"login": "vekterli"}, "path": "searchlib/src/vespa/searchlib/common/bitvector.h", "diffHunk": "@@ -189,14 +189,16 @@ class BitVector : protected BitWord\n      * should be called before calling Test/Clear/Flip methods.\n      */\n     void invalidateCachedCount() const {\n-        _numTrueBits = invalidCount();\n+        _numTrueBits.store(invalidCount(), std::memory_order_relaxed);\n     }\n \n     void swap(BitVector & rhs) {\n         std::swap(_words, rhs._words);\n         std::swap(_startOffset, rhs._startOffset);\n         std::swap(_sz, rhs._sz);\n-        std::swap(_numTrueBits, rhs._numTrueBits);\n+        Index tmp = rhs._numTrueBits;\n+        rhs._numTrueBits = _numTrueBits.load();\n+        _numTrueBits = tmp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec51225758e3c28360f7b03d9f315a1298badeef"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4879730427ce2e2f14e23b2d8a3cac1d0d819a31", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/4879730427ce2e2f14e23b2d8a3cac1d0d819a31", "committedDate": "2020-01-24T13:35:13Z", "message": "Faster atomic operations based on PR review."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3990, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}