{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1MjkxMDE1", "number": 15765, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOTozNDozMFrOFDGdJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMDo1MjozNlrOFDIgMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4Nzk1ODE1OnYy", "diffSide": "RIGHT", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/ControllerMaintenance.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOTozNDozMFrOICl6Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOTozNjoxMlrOICl-mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4OTE1NA==", "bodyText": "Should be closed. \ud83d\ude42", "url": "https://github.com/vespa-engine/vespa/pull/15765#discussion_r539589154", "createdAt": "2020-12-09T19:34:30Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/ControllerMaintenance.java", "diffHunk": "@@ -81,6 +82,7 @@ public ControllerMaintenance(Controller controller, Metric metric) {\n         applicationMetaDataGarbageCollector = new ApplicationMetaDataGarbageCollector(controller, intervals.applicationMetaDataGarbageCollector);\n         containerImageExpirer = new ContainerImageExpirer(controller, intervals.containerImageExpirer);\n         hostSwitchUpdater = new HostSwitchUpdater(controller, intervals.hostSwitchUpdater);\n+        reindexingTriggerer = new ReindexingTriggerer(controller, intervals.reindexingTriggerer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2133db1ab7c171dfb9e15d11c3b6da59904e370"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU5MDI5Nw==", "bodyText": "Oooh :)", "url": "https://github.com/vespa-engine/vespa/pull/15765#discussion_r539590297", "createdAt": "2020-12-09T19:36:12Z", "author": {"login": "jonmv"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/ControllerMaintenance.java", "diffHunk": "@@ -81,6 +82,7 @@ public ControllerMaintenance(Controller controller, Metric metric) {\n         applicationMetaDataGarbageCollector = new ApplicationMetaDataGarbageCollector(controller, intervals.applicationMetaDataGarbageCollector);\n         containerImageExpirer = new ContainerImageExpirer(controller, intervals.containerImageExpirer);\n         hostSwitchUpdater = new HostSwitchUpdater(controller, intervals.hostSwitchUpdater);\n+        reindexingTriggerer = new ReindexingTriggerer(controller, intervals.reindexingTriggerer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4OTE1NA=="}, "originalCommit": {"oid": "b2133db1ab7c171dfb9e15d11c3b6da59904e370"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODI5MzYzOnYy", "diffSide": "RIGHT", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/ControllerMaintenance.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMDo1MjozNlrOICo9VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNzowMjoyNFrOIC57lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYzOTEyNQ==", "bodyText": "Better, but why do we need both if close calls shutdown when necessary?", "url": "https://github.com/vespa-engine/vespa/pull/15765#discussion_r539639125", "createdAt": "2020-12-09T20:52:36Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/ControllerMaintenance.java", "diffHunk": "@@ -28,89 +31,47 @@\n  */\n public class ControllerMaintenance extends AbstractComponent {\n \n-    private final DeploymentExpirer deploymentExpirer;\n-    private final DeploymentIssueReporter deploymentIssueReporter;\n-    private final MetricsReporter metricsReporter;\n-    private final OutstandingChangeDeployer outstandingChangeDeployer;\n-    private final VersionStatusUpdater versionStatusUpdater;\n     private final Upgrader upgrader;\n-    private final ReadyJobsTrigger readyJobsTrigger;\n-    private final DeploymentMetricsMaintainer deploymentMetricsMaintainer;\n-    private final ApplicationOwnershipConfirmer applicationOwnershipConfirmer;\n-    private final SystemUpgrader systemUpgrader;\n-    private final List<OsUpgrader> osUpgraders;\n-    private final OsVersionStatusUpdater osVersionStatusUpdater;\n-    private final JobRunner jobRunner;\n-    private final ContactInformationMaintainer contactInformationMaintainer;\n-    private final CostReportMaintainer costReportMaintainer;\n-    private final ResourceMeterMaintainer resourceMeterMaintainer;\n-    private final NameServiceDispatcher nameServiceDispatcher;\n-    private final CloudEventReporter cloudEventReporter;\n-    private final RotationStatusUpdater rotationStatusUpdater;\n-    private final ResourceTagMaintainer resourceTagMaintainer;\n-    private final SystemRoutingPolicyMaintainer systemRoutingPolicyMaintainer;\n-    private final ApplicationMetaDataGarbageCollector applicationMetaDataGarbageCollector;\n-    private final ContainerImageExpirer containerImageExpirer;\n-    private final HostSwitchUpdater hostSwitchUpdater;\n+    private final List<Maintainer> maintainers = new CopyOnWriteArrayList<>();\n \n     @Inject\n     @SuppressWarnings(\"unused\") // instantiated by Dependency Injection\n     public ControllerMaintenance(Controller controller, Metric metric) {\n         Intervals intervals = new Intervals(controller.system());\n-        deploymentExpirer = new DeploymentExpirer(controller, intervals.defaultInterval);\n-        deploymentIssueReporter = new DeploymentIssueReporter(controller, controller.serviceRegistry().deploymentIssues(), intervals.defaultInterval);\n-        metricsReporter = new MetricsReporter(controller, metric);\n-        outstandingChangeDeployer = new OutstandingChangeDeployer(controller, intervals.outstandingChangeDeployer);\n-        versionStatusUpdater = new VersionStatusUpdater(controller, intervals.versionStatusUpdater);\n         upgrader = new Upgrader(controller, intervals.defaultInterval);\n-        readyJobsTrigger = new ReadyJobsTrigger(controller, intervals.readyJobsTrigger);\n-        deploymentMetricsMaintainer = new DeploymentMetricsMaintainer(controller, intervals.deploymentMetricsMaintainer);\n-        applicationOwnershipConfirmer = new ApplicationOwnershipConfirmer(controller, intervals.applicationOwnershipConfirmer, controller.serviceRegistry().ownershipIssues());\n-        systemUpgrader = new SystemUpgrader(controller, intervals.systemUpgrader);\n-        jobRunner = new JobRunner(controller, intervals.jobRunner);\n-        osUpgraders = osUpgraders(controller, intervals.osUpgrader);\n-        osVersionStatusUpdater = new OsVersionStatusUpdater(controller, intervals.defaultInterval);\n-        contactInformationMaintainer = new ContactInformationMaintainer(controller, intervals.contactInformationMaintainer);\n-        nameServiceDispatcher = new NameServiceDispatcher(controller, intervals.nameServiceDispatcher);\n-        costReportMaintainer = new CostReportMaintainer(controller, intervals.costReportMaintainer, controller.serviceRegistry().costReportConsumer());\n-        resourceMeterMaintainer = new ResourceMeterMaintainer(controller, intervals.resourceMeterMaintainer, metric, controller.serviceRegistry().meteringService());\n-        cloudEventReporter = new CloudEventReporter(controller, intervals.cloudEventReporter, metric);\n-        rotationStatusUpdater = new RotationStatusUpdater(controller, intervals.defaultInterval);\n-        resourceTagMaintainer = new ResourceTagMaintainer(controller, intervals.resourceTagMaintainer, controller.serviceRegistry().resourceTagger());\n-        systemRoutingPolicyMaintainer = new SystemRoutingPolicyMaintainer(controller, intervals.systemRoutingPolicyMaintainer);\n-        applicationMetaDataGarbageCollector = new ApplicationMetaDataGarbageCollector(controller, intervals.applicationMetaDataGarbageCollector);\n-        containerImageExpirer = new ContainerImageExpirer(controller, intervals.containerImageExpirer);\n-        hostSwitchUpdater = new HostSwitchUpdater(controller, intervals.hostSwitchUpdater);\n+        maintainers.add(upgrader);\n+        maintainers.addAll(osUpgraders(controller, intervals.osUpgrader));\n+        maintainers.add(new DeploymentExpirer(controller, intervals.defaultInterval));\n+        maintainers.add(new DeploymentIssueReporter(controller, controller.serviceRegistry().deploymentIssues(), intervals.defaultInterval));\n+        maintainers.add(new MetricsReporter(controller, metric));\n+        maintainers.add(new OutstandingChangeDeployer(controller, intervals.outstandingChangeDeployer));\n+        maintainers.add(new VersionStatusUpdater(controller, intervals.versionStatusUpdater));\n+        maintainers.add(new ReadyJobsTrigger(controller, intervals.readyJobsTrigger));\n+        maintainers.add(new DeploymentMetricsMaintainer(controller, intervals.deploymentMetricsMaintainer));\n+        maintainers.add(new ApplicationOwnershipConfirmer(controller, intervals.applicationOwnershipConfirmer, controller.serviceRegistry().ownershipIssues()));\n+        maintainers.add(new SystemUpgrader(controller, intervals.systemUpgrader));\n+        maintainers.add(new JobRunner(controller, intervals.jobRunner));\n+        maintainers.add(new OsVersionStatusUpdater(controller, intervals.defaultInterval));\n+        maintainers.add(new ContactInformationMaintainer(controller, intervals.contactInformationMaintainer));\n+        maintainers.add(new NameServiceDispatcher(controller, intervals.nameServiceDispatcher));\n+        maintainers.add(new CostReportMaintainer(controller, intervals.costReportMaintainer, controller.serviceRegistry().costReportConsumer()));\n+        maintainers.add(new ResourceMeterMaintainer(controller, intervals.resourceMeterMaintainer, metric, controller.serviceRegistry().meteringService()));\n+        maintainers.add(new CloudEventReporter(controller, intervals.cloudEventReporter, metric));\n+        maintainers.add(new RotationStatusUpdater(controller, intervals.defaultInterval));\n+        maintainers.add(new ResourceTagMaintainer(controller, intervals.resourceTagMaintainer, controller.serviceRegistry().resourceTagger()));\n+        maintainers.add(new SystemRoutingPolicyMaintainer(controller, intervals.systemRoutingPolicyMaintainer));\n+        maintainers.add(new ApplicationMetaDataGarbageCollector(controller, intervals.applicationMetaDataGarbageCollector));\n+        maintainers.add(new ContainerImageExpirer(controller, intervals.containerImageExpirer));\n+        maintainers.add(new HostSwitchUpdater(controller, intervals.hostSwitchUpdater));\n+        maintainers.add(new ReindexingTriggerer(controller, intervals.reindexingTriggerer));\n     }\n \n     public Upgrader upgrader() { return upgrader; }\n \n     @Override\n     public void deconstruct() {\n-        deploymentExpirer.close();\n-        deploymentIssueReporter.close();\n-        metricsReporter.close();\n-        outstandingChangeDeployer.close();\n-        versionStatusUpdater.close();\n-        upgrader.close();\n-        readyJobsTrigger.close();\n-        deploymentMetricsMaintainer.close();\n-        applicationOwnershipConfirmer.close();\n-        systemUpgrader.close();\n-        osUpgraders.forEach(ControllerMaintainer::close);\n-        osVersionStatusUpdater.close();\n-        jobRunner.close();\n-        contactInformationMaintainer.close();\n-        costReportMaintainer.close();\n-        resourceMeterMaintainer.close();\n-        nameServiceDispatcher.close();\n-        cloudEventReporter.close();\n-        rotationStatusUpdater.close();\n-        resourceTagMaintainer.close();\n-        systemRoutingPolicyMaintainer.close();\n-        applicationMetaDataGarbageCollector.close();\n-        containerImageExpirer.close();\n-        hostSwitchUpdater.close();\n+        maintainers.forEach(Maintainer::shutdown);\n+        maintainers.forEach(Maintainer::close);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8f8e85351b70a02b9915b6978dd05e1c2cc55c7"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MzcyNQ==", "bodyText": "If it's to initiate shutdown on everything at once and then wait, I suggest renaming close. awaitShutdown?", "url": "https://github.com/vespa-engine/vespa/pull/15765#discussion_r539643725", "createdAt": "2020-12-09T21:00:13Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/ControllerMaintenance.java", "diffHunk": "@@ -28,89 +31,47 @@\n  */\n public class ControllerMaintenance extends AbstractComponent {\n \n-    private final DeploymentExpirer deploymentExpirer;\n-    private final DeploymentIssueReporter deploymentIssueReporter;\n-    private final MetricsReporter metricsReporter;\n-    private final OutstandingChangeDeployer outstandingChangeDeployer;\n-    private final VersionStatusUpdater versionStatusUpdater;\n     private final Upgrader upgrader;\n-    private final ReadyJobsTrigger readyJobsTrigger;\n-    private final DeploymentMetricsMaintainer deploymentMetricsMaintainer;\n-    private final ApplicationOwnershipConfirmer applicationOwnershipConfirmer;\n-    private final SystemUpgrader systemUpgrader;\n-    private final List<OsUpgrader> osUpgraders;\n-    private final OsVersionStatusUpdater osVersionStatusUpdater;\n-    private final JobRunner jobRunner;\n-    private final ContactInformationMaintainer contactInformationMaintainer;\n-    private final CostReportMaintainer costReportMaintainer;\n-    private final ResourceMeterMaintainer resourceMeterMaintainer;\n-    private final NameServiceDispatcher nameServiceDispatcher;\n-    private final CloudEventReporter cloudEventReporter;\n-    private final RotationStatusUpdater rotationStatusUpdater;\n-    private final ResourceTagMaintainer resourceTagMaintainer;\n-    private final SystemRoutingPolicyMaintainer systemRoutingPolicyMaintainer;\n-    private final ApplicationMetaDataGarbageCollector applicationMetaDataGarbageCollector;\n-    private final ContainerImageExpirer containerImageExpirer;\n-    private final HostSwitchUpdater hostSwitchUpdater;\n+    private final List<Maintainer> maintainers = new CopyOnWriteArrayList<>();\n \n     @Inject\n     @SuppressWarnings(\"unused\") // instantiated by Dependency Injection\n     public ControllerMaintenance(Controller controller, Metric metric) {\n         Intervals intervals = new Intervals(controller.system());\n-        deploymentExpirer = new DeploymentExpirer(controller, intervals.defaultInterval);\n-        deploymentIssueReporter = new DeploymentIssueReporter(controller, controller.serviceRegistry().deploymentIssues(), intervals.defaultInterval);\n-        metricsReporter = new MetricsReporter(controller, metric);\n-        outstandingChangeDeployer = new OutstandingChangeDeployer(controller, intervals.outstandingChangeDeployer);\n-        versionStatusUpdater = new VersionStatusUpdater(controller, intervals.versionStatusUpdater);\n         upgrader = new Upgrader(controller, intervals.defaultInterval);\n-        readyJobsTrigger = new ReadyJobsTrigger(controller, intervals.readyJobsTrigger);\n-        deploymentMetricsMaintainer = new DeploymentMetricsMaintainer(controller, intervals.deploymentMetricsMaintainer);\n-        applicationOwnershipConfirmer = new ApplicationOwnershipConfirmer(controller, intervals.applicationOwnershipConfirmer, controller.serviceRegistry().ownershipIssues());\n-        systemUpgrader = new SystemUpgrader(controller, intervals.systemUpgrader);\n-        jobRunner = new JobRunner(controller, intervals.jobRunner);\n-        osUpgraders = osUpgraders(controller, intervals.osUpgrader);\n-        osVersionStatusUpdater = new OsVersionStatusUpdater(controller, intervals.defaultInterval);\n-        contactInformationMaintainer = new ContactInformationMaintainer(controller, intervals.contactInformationMaintainer);\n-        nameServiceDispatcher = new NameServiceDispatcher(controller, intervals.nameServiceDispatcher);\n-        costReportMaintainer = new CostReportMaintainer(controller, intervals.costReportMaintainer, controller.serviceRegistry().costReportConsumer());\n-        resourceMeterMaintainer = new ResourceMeterMaintainer(controller, intervals.resourceMeterMaintainer, metric, controller.serviceRegistry().meteringService());\n-        cloudEventReporter = new CloudEventReporter(controller, intervals.cloudEventReporter, metric);\n-        rotationStatusUpdater = new RotationStatusUpdater(controller, intervals.defaultInterval);\n-        resourceTagMaintainer = new ResourceTagMaintainer(controller, intervals.resourceTagMaintainer, controller.serviceRegistry().resourceTagger());\n-        systemRoutingPolicyMaintainer = new SystemRoutingPolicyMaintainer(controller, intervals.systemRoutingPolicyMaintainer);\n-        applicationMetaDataGarbageCollector = new ApplicationMetaDataGarbageCollector(controller, intervals.applicationMetaDataGarbageCollector);\n-        containerImageExpirer = new ContainerImageExpirer(controller, intervals.containerImageExpirer);\n-        hostSwitchUpdater = new HostSwitchUpdater(controller, intervals.hostSwitchUpdater);\n+        maintainers.add(upgrader);\n+        maintainers.addAll(osUpgraders(controller, intervals.osUpgrader));\n+        maintainers.add(new DeploymentExpirer(controller, intervals.defaultInterval));\n+        maintainers.add(new DeploymentIssueReporter(controller, controller.serviceRegistry().deploymentIssues(), intervals.defaultInterval));\n+        maintainers.add(new MetricsReporter(controller, metric));\n+        maintainers.add(new OutstandingChangeDeployer(controller, intervals.outstandingChangeDeployer));\n+        maintainers.add(new VersionStatusUpdater(controller, intervals.versionStatusUpdater));\n+        maintainers.add(new ReadyJobsTrigger(controller, intervals.readyJobsTrigger));\n+        maintainers.add(new DeploymentMetricsMaintainer(controller, intervals.deploymentMetricsMaintainer));\n+        maintainers.add(new ApplicationOwnershipConfirmer(controller, intervals.applicationOwnershipConfirmer, controller.serviceRegistry().ownershipIssues()));\n+        maintainers.add(new SystemUpgrader(controller, intervals.systemUpgrader));\n+        maintainers.add(new JobRunner(controller, intervals.jobRunner));\n+        maintainers.add(new OsVersionStatusUpdater(controller, intervals.defaultInterval));\n+        maintainers.add(new ContactInformationMaintainer(controller, intervals.contactInformationMaintainer));\n+        maintainers.add(new NameServiceDispatcher(controller, intervals.nameServiceDispatcher));\n+        maintainers.add(new CostReportMaintainer(controller, intervals.costReportMaintainer, controller.serviceRegistry().costReportConsumer()));\n+        maintainers.add(new ResourceMeterMaintainer(controller, intervals.resourceMeterMaintainer, metric, controller.serviceRegistry().meteringService()));\n+        maintainers.add(new CloudEventReporter(controller, intervals.cloudEventReporter, metric));\n+        maintainers.add(new RotationStatusUpdater(controller, intervals.defaultInterval));\n+        maintainers.add(new ResourceTagMaintainer(controller, intervals.resourceTagMaintainer, controller.serviceRegistry().resourceTagger()));\n+        maintainers.add(new SystemRoutingPolicyMaintainer(controller, intervals.systemRoutingPolicyMaintainer));\n+        maintainers.add(new ApplicationMetaDataGarbageCollector(controller, intervals.applicationMetaDataGarbageCollector));\n+        maintainers.add(new ContainerImageExpirer(controller, intervals.containerImageExpirer));\n+        maintainers.add(new HostSwitchUpdater(controller, intervals.hostSwitchUpdater));\n+        maintainers.add(new ReindexingTriggerer(controller, intervals.reindexingTriggerer));\n     }\n \n     public Upgrader upgrader() { return upgrader; }\n \n     @Override\n     public void deconstruct() {\n-        deploymentExpirer.close();\n-        deploymentIssueReporter.close();\n-        metricsReporter.close();\n-        outstandingChangeDeployer.close();\n-        versionStatusUpdater.close();\n-        upgrader.close();\n-        readyJobsTrigger.close();\n-        deploymentMetricsMaintainer.close();\n-        applicationOwnershipConfirmer.close();\n-        systemUpgrader.close();\n-        osUpgraders.forEach(ControllerMaintainer::close);\n-        osVersionStatusUpdater.close();\n-        jobRunner.close();\n-        contactInformationMaintainer.close();\n-        costReportMaintainer.close();\n-        resourceMeterMaintainer.close();\n-        nameServiceDispatcher.close();\n-        cloudEventReporter.close();\n-        rotationStatusUpdater.close();\n-        resourceTagMaintainer.close();\n-        systemRoutingPolicyMaintainer.close();\n-        applicationMetaDataGarbageCollector.close();\n-        containerImageExpirer.close();\n-        hostSwitchUpdater.close();\n+        maintainers.forEach(Maintainer::shutdown);\n+        maintainers.forEach(Maintainer::close);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYzOTEyNQ=="}, "originalCommit": {"oid": "c8f8e85351b70a02b9915b6978dd05e1c2cc55c7"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTkxNzIwNg==", "bodyText": "Good idea.", "url": "https://github.com/vespa-engine/vespa/pull/15765#discussion_r539917206", "createdAt": "2020-12-10T07:02:24Z", "author": {"login": "jonmv"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/maintenance/ControllerMaintenance.java", "diffHunk": "@@ -28,89 +31,47 @@\n  */\n public class ControllerMaintenance extends AbstractComponent {\n \n-    private final DeploymentExpirer deploymentExpirer;\n-    private final DeploymentIssueReporter deploymentIssueReporter;\n-    private final MetricsReporter metricsReporter;\n-    private final OutstandingChangeDeployer outstandingChangeDeployer;\n-    private final VersionStatusUpdater versionStatusUpdater;\n     private final Upgrader upgrader;\n-    private final ReadyJobsTrigger readyJobsTrigger;\n-    private final DeploymentMetricsMaintainer deploymentMetricsMaintainer;\n-    private final ApplicationOwnershipConfirmer applicationOwnershipConfirmer;\n-    private final SystemUpgrader systemUpgrader;\n-    private final List<OsUpgrader> osUpgraders;\n-    private final OsVersionStatusUpdater osVersionStatusUpdater;\n-    private final JobRunner jobRunner;\n-    private final ContactInformationMaintainer contactInformationMaintainer;\n-    private final CostReportMaintainer costReportMaintainer;\n-    private final ResourceMeterMaintainer resourceMeterMaintainer;\n-    private final NameServiceDispatcher nameServiceDispatcher;\n-    private final CloudEventReporter cloudEventReporter;\n-    private final RotationStatusUpdater rotationStatusUpdater;\n-    private final ResourceTagMaintainer resourceTagMaintainer;\n-    private final SystemRoutingPolicyMaintainer systemRoutingPolicyMaintainer;\n-    private final ApplicationMetaDataGarbageCollector applicationMetaDataGarbageCollector;\n-    private final ContainerImageExpirer containerImageExpirer;\n-    private final HostSwitchUpdater hostSwitchUpdater;\n+    private final List<Maintainer> maintainers = new CopyOnWriteArrayList<>();\n \n     @Inject\n     @SuppressWarnings(\"unused\") // instantiated by Dependency Injection\n     public ControllerMaintenance(Controller controller, Metric metric) {\n         Intervals intervals = new Intervals(controller.system());\n-        deploymentExpirer = new DeploymentExpirer(controller, intervals.defaultInterval);\n-        deploymentIssueReporter = new DeploymentIssueReporter(controller, controller.serviceRegistry().deploymentIssues(), intervals.defaultInterval);\n-        metricsReporter = new MetricsReporter(controller, metric);\n-        outstandingChangeDeployer = new OutstandingChangeDeployer(controller, intervals.outstandingChangeDeployer);\n-        versionStatusUpdater = new VersionStatusUpdater(controller, intervals.versionStatusUpdater);\n         upgrader = new Upgrader(controller, intervals.defaultInterval);\n-        readyJobsTrigger = new ReadyJobsTrigger(controller, intervals.readyJobsTrigger);\n-        deploymentMetricsMaintainer = new DeploymentMetricsMaintainer(controller, intervals.deploymentMetricsMaintainer);\n-        applicationOwnershipConfirmer = new ApplicationOwnershipConfirmer(controller, intervals.applicationOwnershipConfirmer, controller.serviceRegistry().ownershipIssues());\n-        systemUpgrader = new SystemUpgrader(controller, intervals.systemUpgrader);\n-        jobRunner = new JobRunner(controller, intervals.jobRunner);\n-        osUpgraders = osUpgraders(controller, intervals.osUpgrader);\n-        osVersionStatusUpdater = new OsVersionStatusUpdater(controller, intervals.defaultInterval);\n-        contactInformationMaintainer = new ContactInformationMaintainer(controller, intervals.contactInformationMaintainer);\n-        nameServiceDispatcher = new NameServiceDispatcher(controller, intervals.nameServiceDispatcher);\n-        costReportMaintainer = new CostReportMaintainer(controller, intervals.costReportMaintainer, controller.serviceRegistry().costReportConsumer());\n-        resourceMeterMaintainer = new ResourceMeterMaintainer(controller, intervals.resourceMeterMaintainer, metric, controller.serviceRegistry().meteringService());\n-        cloudEventReporter = new CloudEventReporter(controller, intervals.cloudEventReporter, metric);\n-        rotationStatusUpdater = new RotationStatusUpdater(controller, intervals.defaultInterval);\n-        resourceTagMaintainer = new ResourceTagMaintainer(controller, intervals.resourceTagMaintainer, controller.serviceRegistry().resourceTagger());\n-        systemRoutingPolicyMaintainer = new SystemRoutingPolicyMaintainer(controller, intervals.systemRoutingPolicyMaintainer);\n-        applicationMetaDataGarbageCollector = new ApplicationMetaDataGarbageCollector(controller, intervals.applicationMetaDataGarbageCollector);\n-        containerImageExpirer = new ContainerImageExpirer(controller, intervals.containerImageExpirer);\n-        hostSwitchUpdater = new HostSwitchUpdater(controller, intervals.hostSwitchUpdater);\n+        maintainers.add(upgrader);\n+        maintainers.addAll(osUpgraders(controller, intervals.osUpgrader));\n+        maintainers.add(new DeploymentExpirer(controller, intervals.defaultInterval));\n+        maintainers.add(new DeploymentIssueReporter(controller, controller.serviceRegistry().deploymentIssues(), intervals.defaultInterval));\n+        maintainers.add(new MetricsReporter(controller, metric));\n+        maintainers.add(new OutstandingChangeDeployer(controller, intervals.outstandingChangeDeployer));\n+        maintainers.add(new VersionStatusUpdater(controller, intervals.versionStatusUpdater));\n+        maintainers.add(new ReadyJobsTrigger(controller, intervals.readyJobsTrigger));\n+        maintainers.add(new DeploymentMetricsMaintainer(controller, intervals.deploymentMetricsMaintainer));\n+        maintainers.add(new ApplicationOwnershipConfirmer(controller, intervals.applicationOwnershipConfirmer, controller.serviceRegistry().ownershipIssues()));\n+        maintainers.add(new SystemUpgrader(controller, intervals.systemUpgrader));\n+        maintainers.add(new JobRunner(controller, intervals.jobRunner));\n+        maintainers.add(new OsVersionStatusUpdater(controller, intervals.defaultInterval));\n+        maintainers.add(new ContactInformationMaintainer(controller, intervals.contactInformationMaintainer));\n+        maintainers.add(new NameServiceDispatcher(controller, intervals.nameServiceDispatcher));\n+        maintainers.add(new CostReportMaintainer(controller, intervals.costReportMaintainer, controller.serviceRegistry().costReportConsumer()));\n+        maintainers.add(new ResourceMeterMaintainer(controller, intervals.resourceMeterMaintainer, metric, controller.serviceRegistry().meteringService()));\n+        maintainers.add(new CloudEventReporter(controller, intervals.cloudEventReporter, metric));\n+        maintainers.add(new RotationStatusUpdater(controller, intervals.defaultInterval));\n+        maintainers.add(new ResourceTagMaintainer(controller, intervals.resourceTagMaintainer, controller.serviceRegistry().resourceTagger()));\n+        maintainers.add(new SystemRoutingPolicyMaintainer(controller, intervals.systemRoutingPolicyMaintainer));\n+        maintainers.add(new ApplicationMetaDataGarbageCollector(controller, intervals.applicationMetaDataGarbageCollector));\n+        maintainers.add(new ContainerImageExpirer(controller, intervals.containerImageExpirer));\n+        maintainers.add(new HostSwitchUpdater(controller, intervals.hostSwitchUpdater));\n+        maintainers.add(new ReindexingTriggerer(controller, intervals.reindexingTriggerer));\n     }\n \n     public Upgrader upgrader() { return upgrader; }\n \n     @Override\n     public void deconstruct() {\n-        deploymentExpirer.close();\n-        deploymentIssueReporter.close();\n-        metricsReporter.close();\n-        outstandingChangeDeployer.close();\n-        versionStatusUpdater.close();\n-        upgrader.close();\n-        readyJobsTrigger.close();\n-        deploymentMetricsMaintainer.close();\n-        applicationOwnershipConfirmer.close();\n-        systemUpgrader.close();\n-        osUpgraders.forEach(ControllerMaintainer::close);\n-        osVersionStatusUpdater.close();\n-        jobRunner.close();\n-        contactInformationMaintainer.close();\n-        costReportMaintainer.close();\n-        resourceMeterMaintainer.close();\n-        nameServiceDispatcher.close();\n-        cloudEventReporter.close();\n-        rotationStatusUpdater.close();\n-        resourceTagMaintainer.close();\n-        systemRoutingPolicyMaintainer.close();\n-        applicationMetaDataGarbageCollector.close();\n-        containerImageExpirer.close();\n-        hostSwitchUpdater.close();\n+        maintainers.forEach(Maintainer::shutdown);\n+        maintainers.forEach(Maintainer::close);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYzOTEyNQ=="}, "originalCommit": {"oid": "c8f8e85351b70a02b9915b6978dd05e1c2cc55c7"}, "originalPosition": 134}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2097, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}