{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3NTYzODE5", "number": 14235, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOToyMjoyM1rOEfXlsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOToyODo0MFrOEfXvig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzI3NzkzOnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/transactionlog/chunks.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOToyMjoyM1rOHLmlsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMDoxNjo0N1rOHLoe-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkyODYyNA==", "bodyText": "Consider adding Chunk suffix to class name.", "url": "https://github.com/vespa-engine/vespa/pull/14235#discussion_r481928624", "createdAt": "2020-09-02T09:22:23Z", "author": {"login": "toregge"}, "path": "searchlib/src/vespa/searchlib/transactionlog/chunks.h", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"ichunk.h\"\n+#include <vespa/vespalib/util/compressionconfig.h>\n+\n+namespace search::transactionlog {\n+\n+/// Current default chunk serialisation format\n+class XXH64None : public IChunk {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e2e7f93eaee2540e0cb9f03f9c16b326d042469"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk1OTY3NQ==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/14235#discussion_r481959675", "createdAt": "2020-09-02T10:16:47Z", "author": {"login": "baldersheim"}, "path": "searchlib/src/vespa/searchlib/transactionlog/chunks.h", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"ichunk.h\"\n+#include <vespa/vespalib/util/compressionconfig.h>\n+\n+namespace search::transactionlog {\n+\n+/// Current default chunk serialisation format\n+class XXH64None : public IChunk {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkyODYyNA=="}, "originalCommit": {"oid": "4e2e7f93eaee2540e0cb9f03f9c16b326d042469"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzI3OTIwOnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/transactionlog/chunks.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOToyMjo0NFrOHLmmjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMDoxNjo1OVrOHLofVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkyODg0NQ==", "bodyText": "Consider adding Chunk suffix to class name.", "url": "https://github.com/vespa-engine/vespa/pull/14235#discussion_r481928845", "createdAt": "2020-09-02T09:22:44Z", "author": {"login": "toregge"}, "path": "searchlib/src/vespa/searchlib/transactionlog/chunks.h", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"ichunk.h\"\n+#include <vespa/vespalib/util/compressionconfig.h>\n+\n+namespace search::transactionlog {\n+\n+/// Current default chunk serialisation format\n+class XXH64None : public IChunk {\n+protected:\n+    Encoding onEncode(nbostream &os) const override;\n+    void onDecode(nbostream &is) override;\n+public:\n+};\n+\n+/// TODO Legacy chunk serialisation format to be removed soon.\n+class CCITTCRC32None : public IChunk {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e2e7f93eaee2540e0cb9f03f9c16b326d042469"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk1OTc2Nw==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/14235#discussion_r481959767", "createdAt": "2020-09-02T10:16:59Z", "author": {"login": "baldersheim"}, "path": "searchlib/src/vespa/searchlib/transactionlog/chunks.h", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"ichunk.h\"\n+#include <vespa/vespalib/util/compressionconfig.h>\n+\n+namespace search::transactionlog {\n+\n+/// Current default chunk serialisation format\n+class XXH64None : public IChunk {\n+protected:\n+    Encoding onEncode(nbostream &os) const override;\n+    void onDecode(nbostream &is) override;\n+public:\n+};\n+\n+/// TODO Legacy chunk serialisation format to be removed soon.\n+class CCITTCRC32None : public IChunk {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkyODg0NQ=="}, "originalCommit": {"oid": "4e2e7f93eaee2540e0cb9f03f9c16b326d042469"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzI4MDg2OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/transactionlog/chunks.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOToyMzowNlrOHLmniw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMDoxNzowOFrOHLofrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkyOTA5OQ==", "bodyText": "Consider adding Chunk suffix to class name.", "url": "https://github.com/vespa-engine/vespa/pull/14235#discussion_r481929099", "createdAt": "2020-09-02T09:23:06Z", "author": {"login": "toregge"}, "path": "searchlib/src/vespa/searchlib/transactionlog/chunks.h", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"ichunk.h\"\n+#include <vespa/vespalib/util/compressionconfig.h>\n+\n+namespace search::transactionlog {\n+\n+/// Current default chunk serialisation format\n+class XXH64None : public IChunk {\n+protected:\n+    Encoding onEncode(nbostream &os) const override;\n+    void onDecode(nbostream &is) override;\n+public:\n+};\n+\n+/// TODO Legacy chunk serialisation format to be removed soon.\n+class CCITTCRC32None : public IChunk {\n+protected:\n+    Encoding onEncode(nbostream &os) const override;\n+    void onDecode(nbostream &is) override;\n+public:\n+};\n+\n+/// Future default chunk serialisation format\n+class XXH64Compressed : public IChunk {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e2e7f93eaee2540e0cb9f03f9c16b326d042469"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk1OTg1Mw==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/14235#discussion_r481959853", "createdAt": "2020-09-02T10:17:08Z", "author": {"login": "baldersheim"}, "path": "searchlib/src/vespa/searchlib/transactionlog/chunks.h", "diffHunk": "@@ -0,0 +1,41 @@\n+// Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"ichunk.h\"\n+#include <vespa/vespalib/util/compressionconfig.h>\n+\n+namespace search::transactionlog {\n+\n+/// Current default chunk serialisation format\n+class XXH64None : public IChunk {\n+protected:\n+    Encoding onEncode(nbostream &os) const override;\n+    void onDecode(nbostream &is) override;\n+public:\n+};\n+\n+/// TODO Legacy chunk serialisation format to be removed soon.\n+class CCITTCRC32None : public IChunk {\n+protected:\n+    Encoding onEncode(nbostream &os) const override;\n+    void onDecode(nbostream &is) override;\n+public:\n+};\n+\n+/// Future default chunk serialisation format\n+class XXH64Compressed : public IChunk {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkyOTA5OQ=="}, "originalCommit": {"oid": "4e2e7f93eaee2540e0cb9f03f9c16b326d042469"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzMwMzE0OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/transactionlog/ichunk.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOToyODo0MFrOHLm1KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMDoyNzoyMFrOHLo0ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkzMjU4NQ==", "bodyText": "Consider throwing exception instead.", "url": "https://github.com/vespa-engine/vespa/pull/14235#discussion_r481932585", "createdAt": "2020-09-02T09:28:40Z", "author": {"login": "toregge"}, "path": "searchlib/src/vespa/searchlib/transactionlog/ichunk.cpp", "diffHunk": "@@ -0,0 +1,110 @@\n+// Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"chunks.h\"\n+#include <vespa/vespalib/util/stringfmt.h>\n+#include <vespa/vespalib/util/crc.h>\n+#include <xxhash.h>\n+#include <cassert>\n+\n+using std::runtime_error;\n+using std::make_unique;\n+using vespalib::make_string;\n+using vespalib::nbostream_longlivedbuf;\n+using vespalib::compression::CompressionConfig;\n+\n+namespace search::transactionlog {\n+\n+Encoding::Encoding(Crc crc, Compression compression)\n+    : _raw(crc | (compression << 4))\n+{\n+    assert(crc <= Crc::xxh64);\n+    assert(compression <= Compression::zstd);\n+}\n+\n+IChunk::~IChunk() = default;\n+\n+void\n+IChunk::add(const Packet::Entry & entry) {\n+    _entries.emplace_back(entry);\n+}\n+\n+SerialNumRange\n+IChunk::range() const {\n+    return _entries.empty()\n+           ? SerialNumRange()\n+           : SerialNumRange(_entries.front().serial(), _entries.back().serial());\n+}\n+\n+void\n+IChunk::deserializeEntries(nbostream & is) {\n+    while (is.good() && !is.empty()) {\n+        Packet::Entry e;\n+        e.deserialize(is);\n+        add(e);\n+    }\n+}\n+\n+void\n+IChunk::serializeEntries(nbostream & os) const {\n+    for (const auto & e : _entries) {\n+        e.serialize(os);\n+    }\n+}\n+\n+Encoding\n+IChunk::encode(nbostream & os) const {\n+    return onEncode(os);\n+}\n+\n+void\n+IChunk::decode(nbostream & is) {\n+    onDecode(is);\n+}\n+\n+IChunk::UP\n+IChunk::create(uint8_t chunkType) {\n+    return create(Encoding(chunkType), 9);\n+}\n+IChunk::UP\n+IChunk::create(Encoding encoding, uint8_t compressionLevel) {\n+    switch (encoding.getCrc()) {\n+        case Encoding::Crc::xxh64:\n+            switch (encoding.getCompression()) {\n+                case Encoding::Compression::none:\n+                    return make_unique<XXH64None>();\n+                case Encoding::Compression::none_multi:\n+                    return make_unique<XXH64Compressed>(CompressionConfig::NONE_MULTI, compressionLevel);\n+                case Encoding::Compression::lz4:\n+                    return make_unique<XXH64Compressed>(CompressionConfig::LZ4, compressionLevel);\n+                case Encoding::Compression::zstd:\n+                    return make_unique<XXH64Compressed>(CompressionConfig::ZSTD, compressionLevel);\n+                default:\n+                    return make_unique<XXH64Compressed>(CompressionConfig::LZ4, compressionLevel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e2e7f93eaee2540e0cb9f03f9c16b326d042469"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk2NTE2Mg==", "bodyText": "Fixed", "url": "https://github.com/vespa-engine/vespa/pull/14235#discussion_r481965162", "createdAt": "2020-09-02T10:27:20Z", "author": {"login": "baldersheim"}, "path": "searchlib/src/vespa/searchlib/transactionlog/ichunk.cpp", "diffHunk": "@@ -0,0 +1,110 @@\n+// Copyright 2017 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"chunks.h\"\n+#include <vespa/vespalib/util/stringfmt.h>\n+#include <vespa/vespalib/util/crc.h>\n+#include <xxhash.h>\n+#include <cassert>\n+\n+using std::runtime_error;\n+using std::make_unique;\n+using vespalib::make_string;\n+using vespalib::nbostream_longlivedbuf;\n+using vespalib::compression::CompressionConfig;\n+\n+namespace search::transactionlog {\n+\n+Encoding::Encoding(Crc crc, Compression compression)\n+    : _raw(crc | (compression << 4))\n+{\n+    assert(crc <= Crc::xxh64);\n+    assert(compression <= Compression::zstd);\n+}\n+\n+IChunk::~IChunk() = default;\n+\n+void\n+IChunk::add(const Packet::Entry & entry) {\n+    _entries.emplace_back(entry);\n+}\n+\n+SerialNumRange\n+IChunk::range() const {\n+    return _entries.empty()\n+           ? SerialNumRange()\n+           : SerialNumRange(_entries.front().serial(), _entries.back().serial());\n+}\n+\n+void\n+IChunk::deserializeEntries(nbostream & is) {\n+    while (is.good() && !is.empty()) {\n+        Packet::Entry e;\n+        e.deserialize(is);\n+        add(e);\n+    }\n+}\n+\n+void\n+IChunk::serializeEntries(nbostream & os) const {\n+    for (const auto & e : _entries) {\n+        e.serialize(os);\n+    }\n+}\n+\n+Encoding\n+IChunk::encode(nbostream & os) const {\n+    return onEncode(os);\n+}\n+\n+void\n+IChunk::decode(nbostream & is) {\n+    onDecode(is);\n+}\n+\n+IChunk::UP\n+IChunk::create(uint8_t chunkType) {\n+    return create(Encoding(chunkType), 9);\n+}\n+IChunk::UP\n+IChunk::create(Encoding encoding, uint8_t compressionLevel) {\n+    switch (encoding.getCrc()) {\n+        case Encoding::Crc::xxh64:\n+            switch (encoding.getCompression()) {\n+                case Encoding::Compression::none:\n+                    return make_unique<XXH64None>();\n+                case Encoding::Compression::none_multi:\n+                    return make_unique<XXH64Compressed>(CompressionConfig::NONE_MULTI, compressionLevel);\n+                case Encoding::Compression::lz4:\n+                    return make_unique<XXH64Compressed>(CompressionConfig::LZ4, compressionLevel);\n+                case Encoding::Compression::zstd:\n+                    return make_unique<XXH64Compressed>(CompressionConfig::ZSTD, compressionLevel);\n+                default:\n+                    return make_unique<XXH64Compressed>(CompressionConfig::LZ4, compressionLevel);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkzMjU4NQ=="}, "originalCommit": {"oid": "4e2e7f93eaee2540e0cb9f03f9c16b326d042469"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1427, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}