{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NTc5NTc2", "number": 13268, "title": "Extend test for unpack of multibitvector to cover all aspects variant\u2026", "bodyText": "\u2026s for OR.\n@havardpe PR", "createdAt": "2020-05-15T13:01:42Z", "url": "https://github.com/vespa-engine/vespa/pull/13268", "merged": true, "mergeCommit": {"oid": "14b1d4e23af242a3a33c032d8c40412df6368fc9"}, "closed": true, "closedAt": "2020-05-15T21:28:48Z", "author": {"login": "baldersheim"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchhpw2AH2gAyNDE4NTc5NTc2OjUzMWI5ODhiODc2OThhNzQ1ZjczZjE3NzczNDY4ZTU3MTA4MTdlZjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcho8XJgH2gAyNDE4NTc5NTc2OmIzNWVkZTA3MWY0OTZlMzY5MDI3Nzk1NDJiYTJkZGMwNzVmN2I1NWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "531b988b87698a745f73f17773468e5710817ef7", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/531b988b87698a745f73f17773468e5710817ef7", "committedDate": "2020-05-15T12:58:04Z", "message": "Extend test for unpack of multibitvector to cover all aspects variants for OR."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNzA2MDMx", "url": "https://github.com/vespa-engine/vespa/pull/13268#pullrequestreview-412706031", "createdAt": "2020-05-15T14:37:13Z", "commit": {"oid": "531b988b87698a745f73f17773468e5710817ef7"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDozNzoxM1rOGWHk6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDo0Mjo0OFrOGWHzGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0NTk5NQ==", "bodyText": "consider using i", "url": "https://github.com/vespa-engine/vespa/pull/13268#discussion_r425845995", "createdAt": "2020-05-15T14:37:13Z", "author": {"login": "havardpe"}, "path": "searchlib/src/tests/queryeval/multibitvectoriterator/multibitvectoriterator_test.cpp", "diffHunk": "@@ -253,6 +255,63 @@ Test::testThatOptimizePreservesUnpack()\n     fixup_bitvectors();\n }\n \n+void verifyOrUnpack(SearchIterator & s, const TermFieldMatchData * tfmd) {\n+    s.initFullRange();\n+    s.seek(1);\n+    for (size_t i = 0; i < 3; i++) {\n+        EXPECT_EQUAL(0u, tfmd[0].getDocId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "531b988b87698a745f73f17773468e5710817ef7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0NzAzMg==", "bodyText": "not fixed by fixup", "url": "https://github.com/vespa-engine/vespa/pull/13268#discussion_r425847032", "createdAt": "2020-05-15T14:38:48Z", "author": {"login": "havardpe"}, "path": "searchlib/src/tests/queryeval/multibitvectoriterator/multibitvectoriterator_test.cpp", "diffHunk": "@@ -253,6 +255,63 @@ Test::testThatOptimizePreservesUnpack()\n     fixup_bitvectors();\n }\n \n+void verifyOrUnpack(SearchIterator & s, const TermFieldMatchData * tfmd) {\n+    s.initFullRange();\n+    s.seek(1);\n+    for (size_t i = 0; i < 3; i++) {\n+        EXPECT_EQUAL(0u, tfmd[0].getDocId());\n+    }\n+    s.unpack(1);\n+    EXPECT_EQUAL(0u, tfmd[0].getDocId());\n+    EXPECT_EQUAL(1u, tfmd[1].getDocId());\n+    EXPECT_EQUAL(0u, tfmd[2].getDocId());\n+}\n+\n+void\n+Test::testUnpackOfOr() {\n+    _bvs[0]->clearBit(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "531b988b87698a745f73f17773468e5710817ef7"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0NzEyMA==", "bodyText": "not fixed by fixup", "url": "https://github.com/vespa-engine/vespa/pull/13268#discussion_r425847120", "createdAt": "2020-05-15T14:38:58Z", "author": {"login": "havardpe"}, "path": "searchlib/src/tests/queryeval/multibitvectoriterator/multibitvectoriterator_test.cpp", "diffHunk": "@@ -253,6 +255,63 @@ Test::testThatOptimizePreservesUnpack()\n     fixup_bitvectors();\n }\n \n+void verifyOrUnpack(SearchIterator & s, const TermFieldMatchData * tfmd) {\n+    s.initFullRange();\n+    s.seek(1);\n+    for (size_t i = 0; i < 3; i++) {\n+        EXPECT_EQUAL(0u, tfmd[0].getDocId());\n+    }\n+    s.unpack(1);\n+    EXPECT_EQUAL(0u, tfmd[0].getDocId());\n+    EXPECT_EQUAL(1u, tfmd[1].getDocId());\n+    EXPECT_EQUAL(0u, tfmd[2].getDocId());\n+}\n+\n+void\n+Test::testUnpackOfOr() {\n+    _bvs[0]->clearBit(1);\n+    _bvs[1]->setBit(1);\n+    _bvs[2]->clearBit(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "531b988b87698a745f73f17773468e5710817ef7"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0OTYyNA==", "bodyText": "consider checking for multi-bitvector optimization", "url": "https://github.com/vespa-engine/vespa/pull/13268#discussion_r425849624", "createdAt": "2020-05-15T14:42:48Z", "author": {"login": "havardpe"}, "path": "searchlib/src/tests/queryeval/multibitvectoriterator/multibitvectoriterator_test.cpp", "diffHunk": "@@ -253,6 +255,63 @@ Test::testThatOptimizePreservesUnpack()\n     fixup_bitvectors();\n }\n \n+void verifyOrUnpack(SearchIterator & s, const TermFieldMatchData * tfmd) {\n+    s.initFullRange();\n+    s.seek(1);\n+    for (size_t i = 0; i < 3; i++) {\n+        EXPECT_EQUAL(0u, tfmd[0].getDocId());\n+    }\n+    s.unpack(1);\n+    EXPECT_EQUAL(0u, tfmd[0].getDocId());\n+    EXPECT_EQUAL(1u, tfmd[1].getDocId());\n+    EXPECT_EQUAL(0u, tfmd[2].getDocId());\n+}\n+\n+void\n+Test::testUnpackOfOr() {\n+    _bvs[0]->clearBit(1);\n+    _bvs[1]->setBit(1);\n+    _bvs[2]->clearBit(1);\n+    UnpackInfo all;\n+    all.forceAll();\n+    verifyUnpackOfOr(all);\n+\n+    UnpackInfo unpackInfo;\n+    unpackInfo.add(1);\n+    unpackInfo.add(2);\n+    verifyUnpackOfOr(unpackInfo);\n+\n+    fixup_bitvectors();\n+}\n+\n+void\n+Test::verifyUnpackOfOr(const UnpackInfo &unpackInfo)\n+{\n+    TermFieldMatchData tfmdA[3];\n+    MultiSearch::Children children;\n+    children.push_back(createIter(0, false, tfmdA[0], false).release());\n+    children.push_back(createIter(1, false, tfmdA[1], false).release());\n+    children.push_back(createIter(2, false, tfmdA[2], false).release());\n+    SearchIterator::UP s(OrSearch::create(children, false, unpackInfo));\n+    verifyOrUnpack(*s, tfmdA);\n+\n+    for (auto & tfmd : tfmdA) {\n+        tfmd.resetOnlyDocId(0);\n+    }\n+\n+    const MultiSearch * ms = dynamic_cast<const MultiSearch *>(s.get());\n+    EXPECT_TRUE(ms != nullptr);\n+    EXPECT_EQUAL(3u, ms->getChildren().size());\n+\n+    s = MultiBitVectorIteratorBase::optimize(std::move(s));\n+    s->initFullRange();\n+    ms = dynamic_cast<const MultiSearch *>(s.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "531b988b87698a745f73f17773468e5710817ef7"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b35ede071f496e36902779542ba2ddc075f7b55a", "author": {"user": {"login": "baldersheim", "name": "Henning Baldersheim"}}, "url": "https://github.com/vespa-engine/vespa/commit/b35ede071f496e36902779542ba2ddc075f7b55a", "committedDate": "2020-05-15T21:27:43Z", "message": "Follow up on PR comments."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3121, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}