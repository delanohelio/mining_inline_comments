{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNjgxNjIy", "number": 14824, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzo0MjoxM1rOEsuQtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzo0MjoxM1rOEsuQtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzMwNzQwOnYy", "diffSide": "RIGHT", "path": "storage/src/vespa/storage/persistence/filestorage/filestorhandlerimpl.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzo0MjoxM1rOHgHtOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxOTozNjoyOVrOHgK1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0Mjc0NQ==", "bodyText": "Out of curiosity, why the added indirection?", "url": "https://github.com/vespa-engine/vespa/pull/14824#discussion_r503442745", "createdAt": "2020-10-12T17:42:13Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/persistence/filestorage/filestorhandlerimpl.h", "diffHunk": "@@ -109,47 +110,47 @@ class FileStorHandlerImpl : private framework::MetricUpdateHook,\n         void waitInactive(const AbortBucketOperationsCommand& cmd) const;\n \n         void broadcast() {\n-            vespalib::MonitorGuard guard(_lock);\n-            guard.broadcast();\n+            _cond->notify_all();\n         }\n         size_t getQueueSize() const {\n-            vespalib::MonitorGuard guard(_lock);\n+            std::lock_guard guard(*_lock);\n             return _queue->size();\n         }\n         void release(const document::Bucket & bucket, api::LockingRequirements reqOfReleasedLock,\n                      api::StorageMessage::Id lockMsgId);\n \n         // Subsumes isLocked\n-        bool operationIsInhibited(const vespalib::MonitorGuard&, const document::Bucket&,\n+        bool operationIsInhibited(const monitor_guard &, const document::Bucket&,\n                                   const api::StorageMessage&) const noexcept;\n-        bool isLocked(const vespalib::MonitorGuard &, const document::Bucket&,\n+        bool isLocked(const monitor_guard &, const document::Bucket&,\n                       api::LockingRequirements lockReq) const noexcept;\n \n-        void lock(const vespalib::MonitorGuard &, const document::Bucket & bucket,\n+        void lock(const monitor_guard &, const document::Bucket & bucket,\n                   api::LockingRequirements lockReq, const LockEntry & lockEntry);\n \n         std::shared_ptr<FileStorHandler::BucketLockInterface> lock(const document::Bucket & bucket, api::LockingRequirements lockReq);\n         void failOperations(const document::Bucket & bucket, const api::ReturnCode & code);\n \n-        FileStorHandler::LockedMessage getNextMessage(uint32_t timeout, Disk & disk);\n+        FileStorHandler::LockedMessage getNextMessage(vespalib::duration timeout, Disk & disk);\n         void dumpQueue(std::ostream & os) const;\n         void dumpActiveHtml(std::ostream & os) const;\n         void dumpQueueHtml(std::ostream & os) const;\n-        vespalib::Monitor & exposeLock() { return _lock; }\n+        std::mutex & exposeLock() { return *_lock; }\n         PriorityQueue & exposeQueue() { return *_queue; }\n         BucketIdx & exposeBucketIdx() { return bmi::get<2>(*_queue); }\n         void setMetrics(FileStorStripeMetrics * metrics) { _metrics = metrics; }\n     private:\n-        bool hasActive(vespalib::MonitorGuard & monitor, const AbortBucketOperationsCommand& cmd) const;\n+        bool hasActive(monitor_guard & monitor, const AbortBucketOperationsCommand& cmd) const;\n         // Precondition: the bucket used by `iter`s operation is not locked in a way that conflicts\n         // with its locking requirements.\n-        FileStorHandler::LockedMessage getMessage(vespalib::MonitorGuard & guard, PriorityIdx & idx,\n+        FileStorHandler::LockedMessage getMessage(monitor_guard & guard, PriorityIdx & idx,\n                                                   PriorityIdx::iterator iter);\n         using LockedBuckets = vespalib::hash_map<document::Bucket, MultiLockEntry, document::Bucket::hash>;\n         const FileStorHandlerImpl      &_owner;\n         MessageSender                  &_messageSender;\n         FileStorStripeMetrics          *_metrics;\n-        vespalib::Monitor               _lock;\n+        std::unique_ptr<std::mutex>                _lock;\n+        std::unique_ptr<std::condition_variable>   _cond;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ec5996db27c44ed2b9c10c99dfadd5b6441ca60"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ5Mzk0MQ==", "bodyText": "Because the stripe need to be movable. Might be better to avoid that though. Will do next round.", "url": "https://github.com/vespa-engine/vespa/pull/14824#discussion_r503493941", "createdAt": "2020-10-12T19:36:29Z", "author": {"login": "baldersheim"}, "path": "storage/src/vespa/storage/persistence/filestorage/filestorhandlerimpl.h", "diffHunk": "@@ -109,47 +110,47 @@ class FileStorHandlerImpl : private framework::MetricUpdateHook,\n         void waitInactive(const AbortBucketOperationsCommand& cmd) const;\n \n         void broadcast() {\n-            vespalib::MonitorGuard guard(_lock);\n-            guard.broadcast();\n+            _cond->notify_all();\n         }\n         size_t getQueueSize() const {\n-            vespalib::MonitorGuard guard(_lock);\n+            std::lock_guard guard(*_lock);\n             return _queue->size();\n         }\n         void release(const document::Bucket & bucket, api::LockingRequirements reqOfReleasedLock,\n                      api::StorageMessage::Id lockMsgId);\n \n         // Subsumes isLocked\n-        bool operationIsInhibited(const vespalib::MonitorGuard&, const document::Bucket&,\n+        bool operationIsInhibited(const monitor_guard &, const document::Bucket&,\n                                   const api::StorageMessage&) const noexcept;\n-        bool isLocked(const vespalib::MonitorGuard &, const document::Bucket&,\n+        bool isLocked(const monitor_guard &, const document::Bucket&,\n                       api::LockingRequirements lockReq) const noexcept;\n \n-        void lock(const vespalib::MonitorGuard &, const document::Bucket & bucket,\n+        void lock(const monitor_guard &, const document::Bucket & bucket,\n                   api::LockingRequirements lockReq, const LockEntry & lockEntry);\n \n         std::shared_ptr<FileStorHandler::BucketLockInterface> lock(const document::Bucket & bucket, api::LockingRequirements lockReq);\n         void failOperations(const document::Bucket & bucket, const api::ReturnCode & code);\n \n-        FileStorHandler::LockedMessage getNextMessage(uint32_t timeout, Disk & disk);\n+        FileStorHandler::LockedMessage getNextMessage(vespalib::duration timeout, Disk & disk);\n         void dumpQueue(std::ostream & os) const;\n         void dumpActiveHtml(std::ostream & os) const;\n         void dumpQueueHtml(std::ostream & os) const;\n-        vespalib::Monitor & exposeLock() { return _lock; }\n+        std::mutex & exposeLock() { return *_lock; }\n         PriorityQueue & exposeQueue() { return *_queue; }\n         BucketIdx & exposeBucketIdx() { return bmi::get<2>(*_queue); }\n         void setMetrics(FileStorStripeMetrics * metrics) { _metrics = metrics; }\n     private:\n-        bool hasActive(vespalib::MonitorGuard & monitor, const AbortBucketOperationsCommand& cmd) const;\n+        bool hasActive(monitor_guard & monitor, const AbortBucketOperationsCommand& cmd) const;\n         // Precondition: the bucket used by `iter`s operation is not locked in a way that conflicts\n         // with its locking requirements.\n-        FileStorHandler::LockedMessage getMessage(vespalib::MonitorGuard & guard, PriorityIdx & idx,\n+        FileStorHandler::LockedMessage getMessage(monitor_guard & guard, PriorityIdx & idx,\n                                                   PriorityIdx::iterator iter);\n         using LockedBuckets = vespalib::hash_map<document::Bucket, MultiLockEntry, document::Bucket::hash>;\n         const FileStorHandlerImpl      &_owner;\n         MessageSender                  &_messageSender;\n         FileStorStripeMetrics          *_metrics;\n-        vespalib::Monitor               _lock;\n+        std::unique_ptr<std::mutex>                _lock;\n+        std::unique_ptr<std::condition_variable>   _cond;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0Mjc0NQ=="}, "originalCommit": {"oid": "1ec5996db27c44ed2b9c10c99dfadd5b6441ca60"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1132, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}