{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3OTc4Mzk4", "number": 13255, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzo0MTo0NVrOD8e-4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwODoyMTozOVrOD8x0Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzQ4NzY5OnYy", "diffSide": "RIGHT", "path": "searchcore/src/vespa/searchcore/proton/documentmetastore/white_list_provider.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzo0MTo0NVrOGVc1uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzo0MTo0NVrOGVc1uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0NTc4NA==", "bodyText": "Consider forward declaring search::BitVector and using std::unique_ptrsearch::BitVector.", "url": "https://github.com/vespa-engine/vespa/pull/13255#discussion_r425145784", "createdAt": "2020-05-14T13:41:45Z", "author": {"login": "toregge"}, "path": "searchcore/src/vespa/searchcore/proton/documentmetastore/white_list_provider.h", "diffHunk": "@@ -0,0 +1,15 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include <vespa/searchlib/common/bitvector.h>\n+\n+#pragma once\n+\n+namespace proton::documentmetastore {\n+\n+struct WhiteListProvider {\n+    virtual search::BitVector::UP get_white_list_filter() const = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3a3b1838b04cd35c13f1fc99dea5d90aef15c38"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzUwOTE3OnYy", "diffSide": "RIGHT", "path": "searchcore/src/vespa/searchcore/proton/matching/query.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzo0NjoyOFrOGVdDlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTowMTozN1rOGVgjWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0OTMzNQ==", "bodyText": "This adds a cost (creating a copy of the white list bitvector) even when this copy won't be used.", "url": "https://github.com/vespa-engine/vespa/pull/13255#discussion_r425149335", "createdAt": "2020-05-14T13:46:28Z", "author": {"login": "toregge"}, "path": "searchcore/src/vespa/searchcore/proton/matching/query.cpp", "diffHunk": "@@ -156,6 +157,11 @@ void\n Query::setWhiteListBlueprint(Blueprint::UP whiteListBlueprint)\n {\n     _whiteListBlueprint = std::move(whiteListBlueprint);\n+    using proton::documentmetastore::WhiteListProvider;\n+    auto wlf = dynamic_cast<WhiteListProvider *>(_whiteListBlueprint.get());\n+    if (wlf) {\n+        _global_white_list = wlf->get_white_list_filter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3a3b1838b04cd35c13f1fc99dea5d90aef15c38"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIwNjYxNg==", "bodyText": "Agree with Tor. Can we do this in optimize() instead, where we know we need it? In that case we need to store a pointer to WhiteListProvider in Query as the white list blueprint are moved into the blueprint tree between this call and the call to optimize().", "url": "https://github.com/vespa-engine/vespa/pull/13255#discussion_r425206616", "createdAt": "2020-05-14T15:01:37Z", "author": {"login": "geirst"}, "path": "searchcore/src/vespa/searchcore/proton/matching/query.cpp", "diffHunk": "@@ -156,6 +157,11 @@ void\n Query::setWhiteListBlueprint(Blueprint::UP whiteListBlueprint)\n {\n     _whiteListBlueprint = std::move(whiteListBlueprint);\n+    using proton::documentmetastore::WhiteListProvider;\n+    auto wlf = dynamic_cast<WhiteListProvider *>(_whiteListBlueprint.get());\n+    if (wlf) {\n+        _global_white_list = wlf->get_white_list_filter();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0OTMzNQ=="}, "originalCommit": {"oid": "a3a3b1838b04cd35c13f1fc99dea5d90aef15c38"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzgxMTM3OnYy", "diffSide": "RIGHT", "path": "searchcore/src/vespa/searchcore/proton/documentmetastore/white_list_provider.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo1Mjo0OFrOGVgHog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDo1Mjo0OFrOGVgHog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE5OTUyMg==", "bodyText": "Please add interface comment. Consider using a class instead.", "url": "https://github.com/vespa-engine/vespa/pull/13255#discussion_r425199522", "createdAt": "2020-05-14T14:52:48Z", "author": {"login": "geirst"}, "path": "searchcore/src/vespa/searchcore/proton/documentmetastore/white_list_provider.h", "diffHunk": "@@ -0,0 +1,15 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include <vespa/searchlib/common/bitvector.h>\n+\n+#pragma once\n+\n+namespace proton::documentmetastore {\n+\n+struct WhiteListProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3a3b1838b04cd35c13f1fc99dea5d90aef15c38"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MDU3MzgyOnYy", "diffSide": "RIGHT", "path": "searchcore/src/vespa/searchcore/proton/matching/query.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwODoyMTo0MFrOGV7LRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwODoyMTo0MFrOGV7LRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0MjgyMA==", "bodyText": "This could be const as get_white_list_filter() is const.", "url": "https://github.com/vespa-engine/vespa/pull/13255#discussion_r425642820", "createdAt": "2020-05-15T08:21:40Z", "author": {"login": "geirst"}, "path": "searchcore/src/vespa/searchcore/proton/matching/query.h", "diffHunk": "@@ -19,11 +21,12 @@ class Query\n {\n private:\n     using Blueprint=search::queryeval::Blueprint;\n+    using WhiteListProvider=proton::documentmetastore::WhiteListProvider;\n     search::query::Node::UP _query_tree;\n     Blueprint::UP           _blueprint;\n     search::fef::Location   _location;\n     Blueprint::UP           _whiteListBlueprint;\n-    search::BitVector::UP   _global_white_list;\n+    WhiteListProvider      *_white_list_provider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f5a1c69ba2ed4b7eddbd0e3a0b85542626fd665"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1656, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}