{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NTkwOTQx", "number": 11847, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOTo1MDozNlrODZJtFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOTo1Mzo1OVrODZJxXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Njk5OTkwOnYy", "diffSide": "RIGHT", "path": "node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/maintenance/acl/FilterTableLineEditor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOTo1MDozNlrOFfYpWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOTo1MDozNlrOFfYpWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ1Mzk3OQ==", "bodyText": "You can always return wantedRules.subList(position, wantedRules.size()), even if position == wantedRules.size().", "url": "https://github.com/vespa-engine/vespa/pull/11847#discussion_r368453979", "createdAt": "2020-01-20T09:50:36Z", "author": {"login": "hakonhall"}, "path": "node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/maintenance/acl/FilterTableLineEditor.java", "diffHunk": "@@ -29,15 +29,33 @@ static FilterTableLineEditor from(Acl acl, IPVersion ipVersion) {\n \n     @Override\n     public LineEdit edit(String line) {\n-        // We have already added all the lines we wanted, remove the remainer\n-        if (wantedRules.isEmpty()) return LineEdit.remove();\n-\n-        String wantedRule = wantedRules.pop();\n-        return wantedRule.equals(line) ? LineEdit.none() : LineEdit.replaceWith(wantedRule);\n+        int index = indexOf(wantedRules, line, position);\n+        // Unwanted rule, remove\n+        if (index < 0) return LineEdit.remove();\n+\n+        // Wanted rule at the expected position, no diff\n+        if (index == position) {\n+            position++;\n+            return LineEdit.none();\n+        }\n+\n+        // Insert the rules between position and index before index\n+        List<String> toInsert = wantedRules.subList(position, index);\n+        position = ++index;\n+        return LineEdit.insertBefore(toInsert);\n     }\n \n     @Override\n     public List<String> onComplete() {\n-        return this.wantedRules;\n+        return position == wantedRules.size() ? List.of() : wantedRules.subList(position, wantedRules.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d03be2f4d75065076c4c117f279dcef32967b4fb"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzAxMDg3OnYy", "diffSide": "RIGHT", "path": "node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/maintenance/acl/FilterTableLineEditor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOTo1Mzo1OVrOFfYwJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOTo1Mzo1OVrOFfYwJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ1NTcxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return position == wantedRules.size() ? List.of() : wantedRules.subList(position, wantedRules.size());\n          \n          \n            \n                    return wantedRules.subList(position, wantedRules.size());", "url": "https://github.com/vespa-engine/vespa/pull/11847#discussion_r368455719", "createdAt": "2020-01-20T09:53:59Z", "author": {"login": "freva"}, "path": "node-admin/src/main/java/com/yahoo/vespa/hosted/node/admin/maintenance/acl/FilterTableLineEditor.java", "diffHunk": "@@ -29,15 +29,33 @@ static FilterTableLineEditor from(Acl acl, IPVersion ipVersion) {\n \n     @Override\n     public LineEdit edit(String line) {\n-        // We have already added all the lines we wanted, remove the remainer\n-        if (wantedRules.isEmpty()) return LineEdit.remove();\n-\n-        String wantedRule = wantedRules.pop();\n-        return wantedRule.equals(line) ? LineEdit.none() : LineEdit.replaceWith(wantedRule);\n+        int index = indexOf(wantedRules, line, position);\n+        // Unwanted rule, remove\n+        if (index < 0) return LineEdit.remove();\n+\n+        // Wanted rule at the expected position, no diff\n+        if (index == position) {\n+            position++;\n+            return LineEdit.none();\n+        }\n+\n+        // Insert the rules between position and index before index\n+        List<String> toInsert = wantedRules.subList(position, index);\n+        position = ++index;\n+        return LineEdit.insertBefore(toInsert);\n     }\n \n     @Override\n     public List<String> onComplete() {\n-        return this.wantedRules;\n+        return position == wantedRules.size() ? List.of() : wantedRules.subList(position, wantedRules.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d03be2f4d75065076c4c117f279dcef32967b4fb"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2582, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}