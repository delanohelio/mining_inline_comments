{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NDM4Njcy", "number": 13198, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjowMDoxN1rOD6y0IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjowNjowM1rOD6y4yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTc2NTQ1OnYy", "diffSide": "RIGHT", "path": "storage/src/tests/persistence/common/persistenceproviderwrapper.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjowMDoxN1rOGS0_Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMzoyMTo0N1rOGS2SJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5NTY1MA==", "bodyText": "std::lock_guard<std::mutex> should be sufficient here.", "url": "https://github.com/vespa-engine/vespa/pull/13198#discussion_r422395650", "createdAt": "2020-05-08T22:00:17Z", "author": {"login": "toregge"}, "path": "storage/src/tests/persistence/common/persistenceproviderwrapper.h", "diffHunk": "@@ -50,8 +51,10 @@ class PersistenceProviderWrapper : public spi::AbstractPersistenceProvider\n private:\n     spi::PersistenceProvider& _spi;\n     spi::Result _result;\n+    mutable std::mutex  _lock;\n     mutable std::vector<std::string> _log;\n     uint32_t _failureMask;\n+    using Guard = std::unique_lock<std::mutex>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dae38cdf2f8bd74de485130c3fe63fb91729fce1"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxNjkzMw==", "bodyText": "Thanks, fixed", "url": "https://github.com/vespa-engine/vespa/pull/13198#discussion_r422416933", "createdAt": "2020-05-08T23:21:47Z", "author": {"login": "baldersheim"}, "path": "storage/src/tests/persistence/common/persistenceproviderwrapper.h", "diffHunk": "@@ -50,8 +51,10 @@ class PersistenceProviderWrapper : public spi::AbstractPersistenceProvider\n private:\n     spi::PersistenceProvider& _spi;\n     spi::Result _result;\n+    mutable std::mutex  _lock;\n     mutable std::vector<std::string> _log;\n     uint32_t _failureMask;\n+    using Guard = std::unique_lock<std::mutex>;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5NTY1MA=="}, "originalCommit": {"oid": "dae38cdf2f8bd74de485130c3fe63fb91729fce1"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTc3NzM5OnYy", "diffSide": "LEFT", "path": "storage/src/tests/persistence/common/persistenceproviderwrapper.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjowNjowM1rOGS1GEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMzoyMjowNFrOGS2SXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5NzQ1OQ==", "bodyText": "clearResult() above doesn't seem to be used. Consider removing it.", "url": "https://github.com/vespa-engine/vespa/pull/13198#discussion_r422397459", "createdAt": "2020-05-08T22:06:03Z", "author": {"login": "toregge"}, "path": "storage/src/tests/persistence/common/persistenceproviderwrapper.h", "diffHunk": "@@ -61,12 +64,16 @@ class PersistenceProviderWrapper : public spi::AbstractPersistenceProvider\n      * return the given error without the wrapped SPI ever being invoked.\n      */\n     void setResult(const spi::Result& result) {\n+        Guard guard(_lock);\n         _result = result;\n     }\n     void clearResult() {\n         _result = spi::Result(spi::Result::ErrorType::NONE, \"\");\n     }\n-    const spi::Result& getResult() const { return _result; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dae38cdf2f8bd74de485130c3fe63fb91729fce1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxNjk4OA==", "bodyText": "Good catch, done.", "url": "https://github.com/vespa-engine/vespa/pull/13198#discussion_r422416988", "createdAt": "2020-05-08T23:22:04Z", "author": {"login": "baldersheim"}, "path": "storage/src/tests/persistence/common/persistenceproviderwrapper.h", "diffHunk": "@@ -61,12 +64,16 @@ class PersistenceProviderWrapper : public spi::AbstractPersistenceProvider\n      * return the given error without the wrapped SPI ever being invoked.\n      */\n     void setResult(const spi::Result& result) {\n+        Guard guard(_lock);\n         _result = result;\n     }\n     void clearResult() {\n         _result = spi::Result(spi::Result::ErrorType::NONE, \"\");\n     }\n-    const spi::Result& getResult() const { return _result; }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5NzQ1OQ=="}, "originalCommit": {"oid": "dae38cdf2f8bd74de485130c3fe63fb91729fce1"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1623, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}