{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNDg5MDk5", "number": 12643, "title": "Allocate dedicated nodes when no nodes are specified", "bodyText": "Guarded by feature flag.\n@hmusum", "createdAt": "2020-03-20T11:46:54Z", "url": "https://github.com/vespa-engine/vespa/pull/12643", "merged": true, "mergeCommit": {"oid": "1499e094ea19892c0bee36b92734c630faea12a0"}, "closed": true, "closedAt": "2020-03-20T15:05:24Z", "author": {"login": "mpolden"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPdw0bgH2gAyMzkxNDg5MDk5OmQ5NjcxNzI4YzMzOWE3NWUwZDc0N2U2MWEzMmRjYmI5ZTY4NzdlZjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPfxrgAFqTM3ODQ0NDY2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d9671728c339a75e0d747e61a32dcbb9e6877ef2", "author": {"user": {"login": "mpolden", "name": "Martin Polden"}}, "url": "https://github.com/vespa-engine/vespa/commit/d9671728c339a75e0d747e61a32dcbb9e6877ef2", "committedDate": "2020-03-20T10:15:31Z", "message": "Allocate dedicated nodes when no nodes are specified\n\nGuarded by feature flag."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NDI4Mjk1", "url": "https://github.com/vespa-engine/vespa/pull/12643#pullrequestreview-378428295", "createdAt": "2020-03-20T12:08:48Z", "commit": {"oid": "d9671728c339a75e0d747e61a32dcbb9e6877ef2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjowODo0OFrOF5RLfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjowODo0OFrOF5RLfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU5NDYyMg==", "bodyText": "Minor: You could use the request() method that creates a builder here", "url": "https://github.com/vespa-engine/vespa/pull/12643#discussion_r395594622", "createdAt": "2020-03-20T12:08:48Z", "author": {"login": "hmusum"}, "path": "config-model/src/main/java/com/yahoo/vespa/model/container/xml/ContainerModelBuilder.java", "diffHunk": "@@ -652,29 +648,53 @@ private static void applyMemoryPercentage(ApplicationContainerCluster cluster, S\n         }\n     }\n \n-    /** Creates a single host when there is no nodes tag */\n-    private HostResource allocateSingleNodeHost(ApplicationContainerCluster cluster, DeployLogger logger, Element containerElement, ConfigModelContext context) {\n+    /** Allocate a container cluster without a nodes tag */\n+    private List<ApplicationContainer> allocateWithoutNodesTag(ApplicationContainerCluster cluster, Element containerElement, ConfigModelContext context) {\n         DeployState deployState = context.getDeployState();\n         HostSystem hostSystem = cluster.hostSystem();\n         if (deployState.isHosted()) {\n-            Optional<HostResource> singleContentHost = getHostResourceFromContentClusters(cluster, containerElement, context);\n-            if (singleContentHost.isPresent()) { // there is a content cluster; put the container on its first node \n-                return singleContentHost.get();\n+            // TODO(mpolden): The old way of allocating. Remove when 7.198 is the oldest model in production\n+            if (!context.properties().useDedicatedNodesWhenUnspecified()) {\n+                Optional<HostResource> singleContentHost = getHostResourceFromContentClusters(cluster, containerElement, context);\n+                if (singleContentHost.isPresent()) { // there is a content cluster; put the container on its first node\n+                    return singleHostContainerCluster(cluster, singleContentHost.get(), context);\n+                }\n+                else { // request 1 node\n+                    ClusterSpec clusterSpec = ClusterSpec.request(ClusterSpec.Type.container, ClusterSpec.Id.from(cluster.getName()))\n+                                                         .vespaVersion(deployState.getWantedNodeVespaVersion())\n+                                                         .dockerImageRepo(deployState.getWantedDockerImageRepo())\n+                                                         .build();\n+                    Capacity capacity = Capacity.fromCount(1,\n+                                                           Optional.empty(),\n+                                                           false,\n+                                                           ! deployState.getProperties().isBootstrap());\n+                    HostResource host = hostSystem.allocateHosts(clusterSpec, capacity, 1, log).keySet().iterator().next();\n+                    return singleHostContainerCluster(cluster, host, context);\n+                }\n             }\n-            else { // request 1 node\n-                ClusterSpec clusterSpec = ClusterSpec.request(ClusterSpec.Type.container, ClusterSpec.Id.from(cluster.getName()))\n-                        .vespaVersion(deployState.getWantedNodeVespaVersion())\n-                        .dockerImageRepo(deployState.getWantedDockerImageRepo())\n-                        .build();\n-                Capacity capacity = Capacity.fromCount(1,\n-                                                       Optional.empty(),\n-                                                       false,\n-                                                       ! deployState.getProperties().isBootstrap());\n-                return hostSystem.allocateHosts(clusterSpec, capacity, 1, logger).keySet().iterator().next();\n-            }\n-        } else {\n-            return hostSystem.getHost(Container.SINGLENODE_CONTAINER_SERVICESPEC);\n-        }\n+            // request just enough nodes to satisfy environment capacity requirement\n+            ClusterSpec clusterSpec = ClusterSpec.request(ClusterSpec.Type.container,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9671728c339a75e0d747e61a32dcbb9e6877ef2"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NDI4NTk1", "url": "https://github.com/vespa-engine/vespa/pull/12643#pullrequestreview-378428595", "createdAt": "2020-03-20T12:09:15Z", "commit": {"oid": "d9671728c339a75e0d747e61a32dcbb9e6877ef2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjowOToxNVrOF5RMYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjowOToxNVrOF5RMYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU5NDg0OQ==", "bodyText": "\" ... AND feature flag is true in all zones\"?", "url": "https://github.com/vespa-engine/vespa/pull/12643#discussion_r395594849", "createdAt": "2020-03-20T12:09:15Z", "author": {"login": "hmusum"}, "path": "config-model/src/main/java/com/yahoo/vespa/model/container/xml/ContainerModelBuilder.java", "diffHunk": "@@ -652,29 +648,53 @@ private static void applyMemoryPercentage(ApplicationContainerCluster cluster, S\n         }\n     }\n \n-    /** Creates a single host when there is no nodes tag */\n-    private HostResource allocateSingleNodeHost(ApplicationContainerCluster cluster, DeployLogger logger, Element containerElement, ConfigModelContext context) {\n+    /** Allocate a container cluster without a nodes tag */\n+    private List<ApplicationContainer> allocateWithoutNodesTag(ApplicationContainerCluster cluster, Element containerElement, ConfigModelContext context) {\n         DeployState deployState = context.getDeployState();\n         HostSystem hostSystem = cluster.hostSystem();\n         if (deployState.isHosted()) {\n-            Optional<HostResource> singleContentHost = getHostResourceFromContentClusters(cluster, containerElement, context);\n-            if (singleContentHost.isPresent()) { // there is a content cluster; put the container on its first node \n-                return singleContentHost.get();\n+            // TODO(mpolden): The old way of allocating. Remove when 7.198 is the oldest model in production", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9671728c339a75e0d747e61a32dcbb9e6877ef2"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NDI4NjU1", "url": "https://github.com/vespa-engine/vespa/pull/12643#pullrequestreview-378428655", "createdAt": "2020-03-20T12:09:21Z", "commit": {"oid": "d9671728c339a75e0d747e61a32dcbb9e6877ef2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d1bf0d4fb7f8c78c5eb796dd44be7ee2c08c581", "author": {"user": {"login": "mpolden", "name": "Martin Polden"}}, "url": "https://github.com/vespa-engine/vespa/commit/2d1bf0d4fb7f8c78c5eb796dd44be7ee2c08c581", "committedDate": "2020-03-20T12:26:16Z", "message": "Use builder"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NDQ0NjY4", "url": "https://github.com/vespa-engine/vespa/pull/12643#pullrequestreview-378444668", "createdAt": "2020-03-20T12:36:16Z", "commit": {"oid": "2d1bf0d4fb7f8c78c5eb796dd44be7ee2c08c581"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2591, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}