{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMjkzMTYz", "number": 14852, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjowNDo1NVrOEtc1kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzowODoxNVrOEtebTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDkzODQyOnYy", "diffSide": "RIGHT", "path": "eval/src/vespa/eval/eval/test/value_compare.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjowNDo1NVrOHhPqrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjowNDo1NVrOHhPqrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYyMTc0Mw==", "bodyText": "we should not use EngineOrFactory::get in the eval library.\nhere we should keep and open mind about implementation, everywhere else, we should use EngineOrFactory::get to select the implementation.\nThis would not be useful for unit tests, since comparing values created by the SimpleTensorEngine would result in problems, since DefaultTensorEngine is the default tensor implementation.", "url": "https://github.com/vespa-engine/vespa/pull/14852#discussion_r504621743", "createdAt": "2020-10-14T12:04:55Z", "author": {"login": "havardpe"}, "path": "eval/src/vespa/eval/eval/test/value_compare.cpp", "diffHunk": "@@ -0,0 +1,22 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"value_compare.h\"\n+#include <vespa/eval/eval/engine_or_factory.h>\n+\n+namespace vespalib::eval {\n+\n+bool operator==(const Value &lhs, const Value &rhs)\n+{\n+    auto engine = EngineOrFactory::get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e6edf935fb6e602f904b567e32605638cabef6"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDk0MjUwOnYy", "diffSide": "RIGHT", "path": "eval/src/vespa/eval/eval/test/value_compare.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjowNTo1OVrOHhPtCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjowNTo1OVrOHhPtCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYyMjM0Nw==", "bodyText": "same as above", "url": "https://github.com/vespa-engine/vespa/pull/14852#discussion_r504622347", "createdAt": "2020-10-14T12:05:59Z", "author": {"login": "havardpe"}, "path": "eval/src/vespa/eval/eval/test/value_compare.cpp", "diffHunk": "@@ -0,0 +1,22 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"value_compare.h\"\n+#include <vespa/eval/eval/engine_or_factory.h>\n+\n+namespace vespalib::eval {\n+\n+bool operator==(const Value &lhs, const Value &rhs)\n+{\n+    auto engine = EngineOrFactory::get();\n+    return engine.to_spec(lhs) == engine.to_spec(rhs);\n+}\n+\n+std::ostream &operator<<(std::ostream &out, const Value &value)\n+{\n+    auto engine = EngineOrFactory::get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e6edf935fb6e602f904b567e32605638cabef6"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTE5ODAzOnYy", "diffSide": "RIGHT", "path": "eval/src/vespa/eval/eval/test/value_compare.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzowODowNlrOHhSHTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzowODowNlrOHhSHTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY2MTgzOA==", "bodyText": "I think return here is better for full forwarding", "url": "https://github.com/vespa-engine/vespa/pull/14852#discussion_r504661838", "createdAt": "2020-10-14T13:08:06Z", "author": {"login": "havardpe"}, "path": "eval/src/vespa/eval/eval/test/value_compare.cpp", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"value_compare.h\"\n+#include <vespa/eval/eval/tensor.h>\n+#include <vespa/eval/eval/tensor_engine.h>\n+#include <vespa/eval/eval/value_codec.h>\n+\n+namespace vespalib::eval {\n+\n+bool operator==(const Value &lhs, const Value &rhs)\n+{\n+    return TensorSpec::from_value(lhs) == TensorSpec::from_value(rhs);\n+}\n+\n+std::ostream &operator<<(std::ostream &out, const Value &value)\n+{\n+    out << TensorSpec::from_value(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c45266c12f0a7b8c67a74f535e01057561505564"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTE5ODg0OnYy", "diffSide": "RIGHT", "path": "eval/src/vespa/eval/eval/test/value_compare.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzowODoxNVrOHhSHzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzowODoxNVrOHhSHzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY2MTk2Ng==", "bodyText": "tensor -> value", "url": "https://github.com/vespa-engine/vespa/pull/14852#discussion_r504661966", "createdAt": "2020-10-14T13:08:15Z", "author": {"login": "havardpe"}, "path": "eval/src/vespa/eval/eval/test/value_compare.h", "diffHunk": "@@ -0,0 +1,13 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include <vespa/eval/eval/value.h>\n+\n+namespace vespalib::eval {\n+\n+bool operator==(const Value &lhs, const Value &rhs);\n+std::ostream &operator<<(std::ostream &out, const Value &tensor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c45266c12f0a7b8c67a74f535e01057561505564"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1158, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}