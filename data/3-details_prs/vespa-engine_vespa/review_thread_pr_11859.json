{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0ODM1MTI2", "number": 11859, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDowOTowOVrODZb7vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMToxMDoyNVrODZdGkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTk4NjU0OnYy", "diffSide": "RIGHT", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/RoutingPolicySerializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDowOTowOVrOFf0hYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzoyOTowMlrOFf57Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkxMDY4OQ==", "bodyText": "They should not happen - but consider ID collisions?", "url": "https://github.com/vespa-engine/vespa/pull/11859#discussion_r368910689", "createdAt": "2020-01-21T10:09:09Z", "author": {"login": "oyving"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/RoutingPolicySerializer.java", "diffHunk": "@@ -57,22 +59,23 @@ public Slime toSlime(Set<RoutingPolicy> routingPolicies) {\n         return slime;\n     }\n \n-    public Set<RoutingPolicy> fromSlime(ApplicationId owner, Slime slime) {\n-        var policies = new LinkedHashSet<RoutingPolicy>();\n+    public Map<RoutingPolicyId, RoutingPolicy> fromSlime(ApplicationId owner, Slime slime) {\n+        var policies = new LinkedHashMap<RoutingPolicyId, RoutingPolicy>();\n         var root = slime.get();\n         var field = root.field(routingPoliciesField);\n         field.traverse((ArrayTraverser) (i, inspect) -> {\n             var endpointIds = new LinkedHashSet<EndpointId>();\n             inspect.field(rotationsField).traverse((ArrayTraverser) (j, endpointId) -> endpointIds.add(EndpointId.of(endpointId.asString())));\n-            policies.add(new RoutingPolicy(new RoutingPolicyId(owner,\n-                                                               ClusterSpec.Id.from(inspect.field(clusterField).asString()),\n-                                                               ZoneId.from(inspect.field(zoneField).asString())),\n-                                           HostName.from(inspect.field(canonicalNameField).asString()),\n-                                           Serializers.optionalString(inspect.field(dnsZoneField)),\n-                                           endpointIds,\n-                                           inspect.field(loadBalancerActiveField).asBool()));\n+            var id = new RoutingPolicyId(owner,\n+                                         ClusterSpec.Id.from(inspect.field(clusterField).asString()),\n+                                         ZoneId.from(inspect.field(zoneField).asString()));\n+            policies.put(id, new RoutingPolicy(id,\n+                                               HostName.from(inspect.field(canonicalNameField).asString()),\n+                                               Serializers.optionalString(inspect.field(dnsZoneField)),\n+                                               endpointIds,\n+                                               inspect.field(loadBalancerActiveField).asBool()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff5cb1626ae172aba997b9af67f5765d195b805c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk5OTE5MQ==", "bodyText": "The data read here is the result of toSlime(Map<RoutingPolicyId, RoutingPolicy>), so collisions can only occur if toSlime somehow writes the same cluster+zone pair more than once or if an external entity messes with the ZK data. The former is covered by RoutingPolicySerializerTest.", "url": "https://github.com/vespa-engine/vespa/pull/11859#discussion_r368999191", "createdAt": "2020-01-21T13:29:02Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/persistence/RoutingPolicySerializer.java", "diffHunk": "@@ -57,22 +59,23 @@ public Slime toSlime(Set<RoutingPolicy> routingPolicies) {\n         return slime;\n     }\n \n-    public Set<RoutingPolicy> fromSlime(ApplicationId owner, Slime slime) {\n-        var policies = new LinkedHashSet<RoutingPolicy>();\n+    public Map<RoutingPolicyId, RoutingPolicy> fromSlime(ApplicationId owner, Slime slime) {\n+        var policies = new LinkedHashMap<RoutingPolicyId, RoutingPolicy>();\n         var root = slime.get();\n         var field = root.field(routingPoliciesField);\n         field.traverse((ArrayTraverser) (i, inspect) -> {\n             var endpointIds = new LinkedHashSet<EndpointId>();\n             inspect.field(rotationsField).traverse((ArrayTraverser) (j, endpointId) -> endpointIds.add(EndpointId.of(endpointId.asString())));\n-            policies.add(new RoutingPolicy(new RoutingPolicyId(owner,\n-                                                               ClusterSpec.Id.from(inspect.field(clusterField).asString()),\n-                                                               ZoneId.from(inspect.field(zoneField).asString())),\n-                                           HostName.from(inspect.field(canonicalNameField).asString()),\n-                                           Serializers.optionalString(inspect.field(dnsZoneField)),\n-                                           endpointIds,\n-                                           inspect.field(loadBalancerActiveField).asBool()));\n+            var id = new RoutingPolicyId(owner,\n+                                         ClusterSpec.Id.from(inspect.field(clusterField).asString()),\n+                                         ZoneId.from(inspect.field(zoneField).asString()));\n+            policies.put(id, new RoutingPolicy(id,\n+                                               HostName.from(inspect.field(canonicalNameField).asString()),\n+                                               Serializers.optionalString(inspect.field(dnsZoneField)),\n+                                               endpointIds,\n+                                               inspect.field(loadBalancerActiveField).asBool()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkxMDY4OQ=="}, "originalCommit": {"oid": "ff5cb1626ae172aba997b9af67f5765d195b805c"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDAyNDI1OnYy", "diffSide": "RIGHT", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/routing/RoutingPolicies.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDoyMDo0NlrOFf04FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDoyMDo0NlrOFf04FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkxNjUwMA==", "bodyText": "This method returns nothing.", "url": "https://github.com/vespa-engine/vespa/pull/11859#discussion_r368916500", "createdAt": "2020-01-21T10:20:46Z", "author": {"login": "oyving"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/routing/RoutingPolicies.java", "diffHunk": "@@ -103,15 +104,11 @@ private void registerEndpointsInDns(AllocatedLoadBalancers loadBalancers, @Suppr\n \n     /** Store routing policies for given route. Returns the persisted policies. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff5cb1626ae172aba997b9af67f5765d195b805c"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDE3MTk2OnYy", "diffSide": "RIGHT", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/routing/Status.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMTowODoyMFrOFf2SPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMTowODoyMFrOFf2SPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzOTU4Mw==", "bodyText": "isActive() instead?", "url": "https://github.com/vespa-engine/vespa/pull/11859#discussion_r368939583", "createdAt": "2020-01-21T11:08:20Z", "author": {"login": "oyving"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/routing/Status.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright 2020 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.hosted.controller.routing;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents the status of a routing policy.\n+ *\n+ * This is immutable.\n+ *\n+ * @author mpolden\n+ */\n+public class Status {\n+\n+    private final boolean loadBalancerActive;\n+\n+    /** DO NOT USE. Public for serialization purposes */\n+    public Status(boolean loadBalancerActive) {\n+        this.loadBalancerActive = loadBalancerActive;\n+    }\n+\n+    /** Returns whether the load balancer is active in node repository */\n+    public boolean loadBalancerActive() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94af145a942bd38b4e8029b8f508822b5cf8bd84"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDE3ODExOnYy", "diffSide": "RIGHT", "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/routing/Status.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMToxMDoyNVrOFf2V-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzoxNTo1NVrOFf5iFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk0MDUzOA==", "bodyText": "Call this LoadBalancerStatus? Or were we thinking of putting other things in the Status class in the future?", "url": "https://github.com/vespa-engine/vespa/pull/11859#discussion_r368940538", "createdAt": "2020-01-21T11:10:25Z", "author": {"login": "oyving"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/routing/Status.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright 2020 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.hosted.controller.routing;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents the status of a routing policy.\n+ *\n+ * This is immutable.\n+ *\n+ * @author mpolden\n+ */\n+public class Status {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94af145a942bd38b4e8029b8f508822b5cf8bd84"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk5Mjc5MQ==", "bodyText": "It's two things now: Load balancer active status and global routing status.", "url": "https://github.com/vespa-engine/vespa/pull/11859#discussion_r368992791", "createdAt": "2020-01-21T13:15:55Z", "author": {"login": "mpolden"}, "path": "controller-server/src/main/java/com/yahoo/vespa/hosted/controller/routing/Status.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright 2020 Oath Inc. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+package com.yahoo.vespa.hosted.controller.routing;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents the status of a routing policy.\n+ *\n+ * This is immutable.\n+ *\n+ * @author mpolden\n+ */\n+public class Status {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk0MDUzOA=="}, "originalCommit": {"oid": "94af145a942bd38b4e8029b8f508822b5cf8bd84"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2590, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}