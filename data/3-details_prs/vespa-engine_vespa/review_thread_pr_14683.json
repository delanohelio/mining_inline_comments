{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2ODk0NDQz", "number": 14683, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzo0MToxMFrOEp0YPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzo0MToxMFrOEp0YPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjg1MjQ2OnYy", "diffSide": "RIGHT", "path": "storage/src/vespa/storage/storageserver/rpc/storage_api_rpc_service.cpp", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzo0MToxMFrOHbuE_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOTozOTo1NFrOH9rMhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyODU0Mg==", "bodyText": "Before we can start using this in production I believe we must derive and use the superbucket here rather than the sub-bucket. This is because operations in flight can be remapped to other buckets when their original destination bucket is split or joined. Since RPC requests are bound to the target for the original, non-remapped bucket it's possible for sequencing to be broken for a single bucket when the replies are sent. Remapped buckets are always contained within the superbucket, so they will always be bound to the same RPC target if we use it instead.", "url": "https://github.com/vespa-engine/vespa/pull/14683#discussion_r498828542", "createdAt": "2020-10-02T13:41:10Z", "author": {"login": "vekterli"}, "path": "storage/src/vespa/storage/storageserver/rpc/storage_api_rpc_service.cpp", "diffHunk": "@@ -216,7 +220,7 @@ void StorageApiRpcService::send_rpc_v1_request(std::shared_ptr<api::StorageComma\n         cmd->getType().getName().c_str(), cmd->getAddress()->toString().c_str());\n \n     assert(cmd->getAddress() != nullptr);\n-    auto target = _target_resolver->resolve_rpc_target(*cmd->getAddress());\n+    auto target = _target_resolver->resolve_rpc_target(*cmd->getAddress(), cmd->getBucketId().getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f41290e7d90b7f100c6c7bed478873ee73924ef"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQzMjkwMA==", "bodyText": "Fixed in #15617.", "url": "https://github.com/vespa-engine/vespa/pull/14683#discussion_r534432900", "createdAt": "2020-12-02T19:39:54Z", "author": {"login": "geirst"}, "path": "storage/src/vespa/storage/storageserver/rpc/storage_api_rpc_service.cpp", "diffHunk": "@@ -216,7 +220,7 @@ void StorageApiRpcService::send_rpc_v1_request(std::shared_ptr<api::StorageComma\n         cmd->getType().getName().c_str(), cmd->getAddress()->toString().c_str());\n \n     assert(cmd->getAddress() != nullptr);\n-    auto target = _target_resolver->resolve_rpc_target(*cmd->getAddress());\n+    auto target = _target_resolver->resolve_rpc_target(*cmd->getAddress(), cmd->getBucketId().getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyODU0Mg=="}, "originalCommit": {"oid": "9f41290e7d90b7f100c6c7bed478873ee73924ef"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1292, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}