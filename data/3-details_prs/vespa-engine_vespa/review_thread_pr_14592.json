{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MTAwMTQz", "number": 14592, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoyNzoxN1rOEoDhgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjo0OToxNlrOEoEBmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDM2MjI3OnYy", "diffSide": "RIGHT", "path": "eval/src/tests/tensor/default_value_builder_factory/default_value_builder_factory_test.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoyNzoxN1rOHY7TOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjoyNzoxN1rOHY7TOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5OTQ1MA==", "bodyText": "test name seems a bit off...", "url": "https://github.com/vespa-engine/vespa/pull/14592#discussion_r495899450", "createdAt": "2020-09-28T12:27:17Z", "author": {"login": "havardpe"}, "path": "eval/src/tests/tensor/default_value_builder_factory/default_value_builder_factory_test.cpp", "diffHunk": "@@ -0,0 +1,61 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include <vespa/eval/eval/value.h>\n+#include <vespa/eval/eval/value_codec.h>\n+#include <vespa/eval/eval/tensor_spec.h>\n+#include <vespa/eval/tensor/default_value_builder_factory.h>\n+#include <vespa/eval/tensor/mixed/packed_mixed_tensor.h>\n+#include <vespa/eval/tensor/sparse/sparse_tensor_value.h>\n+#include <vespa/eval/tensor/dense/dense_tensor.h>\n+#include <vespa/vespalib/gtest/gtest.h>\n+\n+using namespace vespalib;\n+using namespace vespalib::eval;\n+using namespace vespalib::tensor;\n+using namespace vespalib::eval::packed_mixed_tensor;\n+\n+Value::UP v_of(const TensorSpec &spec) {\n+    return value_from_spec(spec, DefaultValueBuilderFactory::get());\n+}\n+\n+TEST(MakeInputTest, print_some_test_input) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e08d6a2649d4e9421ba64de1d310e1e82cc262"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDQyMjE1OnYy", "diffSide": "RIGHT", "path": "eval/src/vespa/eval/tensor/dense/dense_tensor_value_builder.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjo0Mzo0M1rOHY73HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjo0Mzo0M1rOHY73HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwODYzNw==", "bodyText": "I suggest just dropping unneeded parameters; num_mapped_in and expected_subspaces", "url": "https://github.com/vespa-engine/vespa/pull/14592#discussion_r495908637", "createdAt": "2020-09-28T12:43:43Z", "author": {"login": "havardpe"}, "path": "eval/src/vespa/eval/tensor/dense/dense_tensor_value_builder.h", "diffHunk": "@@ -0,0 +1,32 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"dense_tensor.h\"\n+\n+namespace vespalib::tensor {\n+\n+/**\n+ * A builder for DenseTensor objects\n+ **/\n+template<typename T>\n+class DenseTensorValueBuilder : public eval::ValueBuilder<T>\n+{\n+private:\n+    eval::ValueType _type;\n+    std::vector<T> _cells;\n+public:\n+    DenseTensorValueBuilder(const eval::ValueType &type, size_t num_mapped_in,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e08d6a2649d4e9421ba64de1d310e1e82cc262"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDQyODQ4OnYy", "diffSide": "RIGHT", "path": "eval/src/vespa/eval/tensor/dense/dense_tensor_value_builder.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjo0NToxN1rOHY760w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjo0NToxN1rOHY760w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwOTU4Nw==", "bodyText": "I am a bit sceptical about adding too many loop-based asserts to the code we want to benchmark for fastness.", "url": "https://github.com/vespa-engine/vespa/pull/14592#discussion_r495909587", "createdAt": "2020-09-28T12:45:17Z", "author": {"login": "havardpe"}, "path": "eval/src/vespa/eval/tensor/dense/dense_tensor_value_builder.cpp", "diffHunk": "@@ -0,0 +1,27 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"dense_tensor_value_builder.h\"\n+\n+namespace vespalib::tensor {\n+\n+template<typename T>\n+DenseTensorValueBuilder<T>::DenseTensorValueBuilder(\n+        const eval::ValueType &type,\n+        size_t num_mapped_in,\n+        size_t subspace_size_in,\n+        size_t)\n+  : _type(type), \n+    _cells(subspace_size_in)\n+{\n+    assert(type.is_dense());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e08d6a2649d4e9421ba64de1d310e1e82cc262"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDQzOTgzOnYy", "diffSide": "RIGHT", "path": "eval/src/vespa/eval/tensor/default_value_builder_factory.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjo0ODowM1rOHY8Bhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjo0ODowM1rOHY8Bhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkxMTMwMg==", "bodyText": "prefer using mapped_dims and subspace_size directly instead of 're-calculating' them.", "url": "https://github.com/vespa-engine/vespa/pull/14592#discussion_r495911302", "createdAt": "2020-09-28T12:48:03Z", "author": {"login": "havardpe"}, "path": "eval/src/vespa/eval/tensor/default_value_builder_factory.cpp", "diffHunk": "@@ -0,0 +1,57 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"default_value_builder_factory.h\"\n+#include <vespa/vespalib/util/typify.h>\n+#include <vespa/eval/eval/value.h>\n+#include <vespa/eval/eval/double_value_builder.h>\n+#include <vespa/eval/tensor/dense/dense_tensor_value_builder.h>\n+#include <vespa/eval/tensor/mixed/packed_mixed_tensor_builder.h>\n+#include <vespa/eval/tensor/sparse/sparse_tensor_value_builder.h>\n+\n+using namespace vespalib::eval;\n+\n+namespace vespalib::tensor {\n+\n+//-----------------------------------------------------------------------------\n+\n+namespace {\n+\n+struct CreateDefaultValueBuilderBase {\n+    template <typename T> static std::unique_ptr<ValueBuilderBase> invoke(const ValueType &type,\n+                                                                          size_t num_mapped_dims_in,\n+                                                                          size_t subspace_size_in,\n+                                                                          size_t expected_subspaces)\n+    {\n+        assert(check_cell_type<T>(type.cell_type()));\n+        if (type.is_double()) {\n+            return std::make_unique<DoubleValueBuilder>(type, num_mapped_dims_in, subspace_size_in, 1);\n+        }\n+        if (type.is_dense()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e08d6a2649d4e9421ba64de1d310e1e82cc262"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDQ0MDI2OnYy", "diffSide": "RIGHT", "path": "eval/src/vespa/eval/tensor/default_value_builder_factory.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjo0ODowOVrOHY8BzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjo0ODowOVrOHY8BzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkxMTM3Mg==", "bodyText": "prefer using mapped_dims and subspace_size directly instead of 're-calculating' them.", "url": "https://github.com/vespa-engine/vespa/pull/14592#discussion_r495911372", "createdAt": "2020-09-28T12:48:09Z", "author": {"login": "havardpe"}, "path": "eval/src/vespa/eval/tensor/default_value_builder_factory.cpp", "diffHunk": "@@ -0,0 +1,57 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#include \"default_value_builder_factory.h\"\n+#include <vespa/vespalib/util/typify.h>\n+#include <vespa/eval/eval/value.h>\n+#include <vespa/eval/eval/double_value_builder.h>\n+#include <vespa/eval/tensor/dense/dense_tensor_value_builder.h>\n+#include <vespa/eval/tensor/mixed/packed_mixed_tensor_builder.h>\n+#include <vespa/eval/tensor/sparse/sparse_tensor_value_builder.h>\n+\n+using namespace vespalib::eval;\n+\n+namespace vespalib::tensor {\n+\n+//-----------------------------------------------------------------------------\n+\n+namespace {\n+\n+struct CreateDefaultValueBuilderBase {\n+    template <typename T> static std::unique_ptr<ValueBuilderBase> invoke(const ValueType &type,\n+                                                                          size_t num_mapped_dims_in,\n+                                                                          size_t subspace_size_in,\n+                                                                          size_t expected_subspaces)\n+    {\n+        assert(check_cell_type<T>(type.cell_type()));\n+        if (type.is_double()) {\n+            return std::make_unique<DoubleValueBuilder>(type, num_mapped_dims_in, subspace_size_in, 1);\n+        }\n+        if (type.is_dense()) {\n+            return std::make_unique<DenseTensorValueBuilder<T>>(type, num_mapped_dims_in, subspace_size_in, 1);\n+        }\n+        if (type.is_sparse()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e08d6a2649d4e9421ba64de1d310e1e82cc262"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDQ0NDQyOnYy", "diffSide": "RIGHT", "path": "eval/src/vespa/eval/eval/double_value_builder.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjo0OToxNlrOHY8EZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjo0OToxNlrOHY8EZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkxMjAzNg==", "bodyText": "consider dropping unneeded parameters", "url": "https://github.com/vespa-engine/vespa/pull/14592#discussion_r495912036", "createdAt": "2020-09-28T12:49:16Z", "author": {"login": "havardpe"}, "path": "eval/src/vespa/eval/eval/double_value_builder.h", "diffHunk": "@@ -0,0 +1,30 @@\n+// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+#pragma once\n+\n+#include \"value.h\"\n+\n+namespace vespalib::eval {\n+\n+/**\n+ * A trivial builder for DoubleValue objects\n+ **/\n+class DoubleValueBuilder : public ValueBuilder<double>\n+{\n+private:\n+    double _value;\n+public:\n+    DoubleValueBuilder(const ValueType &type, size_t num_mapped_in,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e08d6a2649d4e9421ba64de1d310e1e82cc262"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1245, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}