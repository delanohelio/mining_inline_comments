{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMzQyODk1", "number": 14470, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTowNToxNVrOEltOZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTowNToxNVrOEltOZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTczNzM1OnYy", "diffSide": "RIGHT", "path": "vespaclient-container-plugin/src/test/java/com/yahoo/vespa/http/server/FeedHandlerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTowNToxNVrOHVU8qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTowNToxNVrOHVU8qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEyNTM1NA==", "bodyText": "Missing EOL", "url": "https://github.com/vespa-engine/vespa/pull/14470#discussion_r492125354", "createdAt": "2020-09-21T15:05:15Z", "author": {"login": "baldersheim"}, "path": "vespaclient-container-plugin/src/test/java/com/yahoo/vespa/http/server/FeedHandlerTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.yahoo.vespa.http.server;// Copyright Verizon Media. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.\n+\n+import com.yahoo.container.handler.threadpool.ContainerThreadPool;\n+import com.yahoo.container.jdisc.RequestHandlerTestDriver;\n+import com.yahoo.container.logging.AccessLog;\n+import com.yahoo.document.config.DocumentmanagerConfig;\n+import com.yahoo.jdisc.handler.OverloadException;\n+import com.yahoo.metrics.simple.MetricReceiver;\n+import org.junit.Test;\n+\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.RejectedExecutionException;\n+\n+import static com.yahoo.vespa.http.server.FeedHandlerV3Test.createRequest;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * @author bjorncs\n+ */\n+public class FeedHandlerTest {\n+\n+    @Test\n+    public void response_has_status_code_429_when_throttling() {\n+        FeedHandler handler = new FeedHandler(\n+                new RejectingContainerThreadpool(),\n+                new CollectingMetric(),\n+                AccessLog.voidAccessLog(),\n+                new DocumentmanagerConfig(new DocumentmanagerConfig.Builder().enablecompression(true)),\n+                null /* session cache */,\n+                MetricReceiver.nullImplementation);\n+        var responseHandler = new RequestHandlerTestDriver.MockResponseHandler();\n+        try {\n+            handler.handleRequest(createRequest(100).getJDiscRequest(), responseHandler);\n+            fail();\n+        } catch (OverloadException e) {}\n+        assertEquals(429, responseHandler.getStatus());\n+    }\n+\n+    private static class RejectingContainerThreadpool implements ContainerThreadPool {\n+        private final Executor executor = ignored -> { throw new RejectedExecutionException(); };\n+\n+        @Override public Executor executor() { return executor;  }\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03272df5273b887aef14b49a4b2e12165b5b388f"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1366, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}