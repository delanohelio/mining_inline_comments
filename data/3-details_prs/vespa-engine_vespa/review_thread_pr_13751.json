{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxOTIwMDc2", "number": 13751, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjo0ODoyM1rOEKFKpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjo0ODoyM1rOEKFKpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDA1ODYwOnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/attribute/attribute_blueprint_factory.cpp", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjo0ODoyM1rOGq6s9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo1Mzo0OFrOGq9evQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY1NTE1OQ==", "bodyText": "when constraint is LOWER_BOUND, all WeakAnd variants must create filter as if it's AND.", "url": "https://github.com/vespa-engine/vespa/pull/13751#discussion_r447655159", "createdAt": "2020-06-30T12:48:23Z", "author": {"login": "arnej27959"}, "path": "searchlib/src/vespa/searchlib/attribute/attribute_blueprint_factory.cpp", "diffHunk": "@@ -416,9 +416,21 @@ class DirectWandBlueprint : public queryeval::ComplexLeafBlueprint\n                         .setDocIdLimit(get_docid_limit()),\n                 _weights, _terms, _attr, strict);\n     }\n+    std::unique_ptr<SearchIterator> createFilterSearch(bool strict, FilterConstraint constraint) const override;\n     bool always_needs_unpack() const override { return true; }\n };\n \n+std::unique_ptr<SearchIterator>\n+DirectWandBlueprint::createFilterSearch(bool, FilterConstraint) const\n+{\n+    std::vector<DocumentWeightIterator> iterators;\n+    iterators.reserve(_terms.size());\n+    for (const IDocumentWeightAttribute::LookupResult &r : _terms) {\n+        _attr.create(r.posting_idx, iterators);\n+    }\n+    return attribute::DocumentWeightOrFilterSearch::create(std::move(iterators));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a49659d89d66cbf4fe92c323f446a2160673b8"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY4NzI4NA==", "bodyText": "I'll change it to use EmptySearch for LOWER_BOUND.", "url": "https://github.com/vespa-engine/vespa/pull/13751#discussion_r447687284", "createdAt": "2020-06-30T13:35:50Z", "author": {"login": "toregge"}, "path": "searchlib/src/vespa/searchlib/attribute/attribute_blueprint_factory.cpp", "diffHunk": "@@ -416,9 +416,21 @@ class DirectWandBlueprint : public queryeval::ComplexLeafBlueprint\n                         .setDocIdLimit(get_docid_limit()),\n                 _weights, _terms, _attr, strict);\n     }\n+    std::unique_ptr<SearchIterator> createFilterSearch(bool strict, FilterConstraint constraint) const override;\n     bool always_needs_unpack() const override { return true; }\n };\n \n+std::unique_ptr<SearchIterator>\n+DirectWandBlueprint::createFilterSearch(bool, FilterConstraint) const\n+{\n+    std::vector<DocumentWeightIterator> iterators;\n+    iterators.reserve(_terms.size());\n+    for (const IDocumentWeightAttribute::LookupResult &r : _terms) {\n+        _attr.create(r.posting_idx, iterators);\n+    }\n+    return attribute::DocumentWeightOrFilterSearch::create(std::move(iterators));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY1NTE1OQ=="}, "originalCommit": {"oid": "45a49659d89d66cbf4fe92c323f446a2160673b8"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwMDY2OQ==", "bodyText": "Fixed.", "url": "https://github.com/vespa-engine/vespa/pull/13751#discussion_r447700669", "createdAt": "2020-06-30T13:53:48Z", "author": {"login": "toregge"}, "path": "searchlib/src/vespa/searchlib/attribute/attribute_blueprint_factory.cpp", "diffHunk": "@@ -416,9 +416,21 @@ class DirectWandBlueprint : public queryeval::ComplexLeafBlueprint\n                         .setDocIdLimit(get_docid_limit()),\n                 _weights, _terms, _attr, strict);\n     }\n+    std::unique_ptr<SearchIterator> createFilterSearch(bool strict, FilterConstraint constraint) const override;\n     bool always_needs_unpack() const override { return true; }\n };\n \n+std::unique_ptr<SearchIterator>\n+DirectWandBlueprint::createFilterSearch(bool, FilterConstraint) const\n+{\n+    std::vector<DocumentWeightIterator> iterators;\n+    iterators.reserve(_terms.size());\n+    for (const IDocumentWeightAttribute::LookupResult &r : _terms) {\n+        _attr.create(r.posting_idx, iterators);\n+    }\n+    return attribute::DocumentWeightOrFilterSearch::create(std::move(iterators));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY1NTE1OQ=="}, "originalCommit": {"oid": "45a49659d89d66cbf4fe92c323f446a2160673b8"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1922, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}