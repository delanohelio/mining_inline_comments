{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1OTU4NTI4", "number": 14199, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjozMDozNFrOEeLTLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjozMDozNFrOEeLTLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMDc3ODY5OnYy", "diffSide": "RIGHT", "path": "eval/src/vespa/eval/eval/llvm/llvm_wrapper.cpp", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjozMDozNFrOHJsB-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjozMjo1MlrOHJ25dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyMDYzMw==", "bodyText": "When was this signature available ? In 11 or in an earlier version ?", "url": "https://github.com/vespa-engine/vespa/pull/14199#discussion_r479920633", "createdAt": "2020-08-31T06:30:34Z", "author": {"login": "baldersheim"}, "path": "eval/src/vespa/eval/eval/llvm/llvm_wrapper.cpp", "diffHunk": "@@ -200,7 +200,12 @@ struct FunctionBuilder : public NodeVisitor, public NodeTraverser {\n         }\n         assert(pass_params == PassParams::LAZY);\n         assert(params.size() == 2);\n+#if LLVM_VERSION_MAJOR >= 11\n+        return builder.CreateCall(llvm::cast<llvm::FunctionType>(params[0]->getType()->getPointerElementType()),\n+                                  params[0], {params[1], builder.getInt64(idx)}, \"resolve_param\");\n+#else", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1d347604287a2acb1ea664c3a46d2918021d6f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAxODA3Mg==", "bodyText": "7 or earlier. The other signature was deprecated in llvm 8 and removed in llvm 11.", "url": "https://github.com/vespa-engine/vespa/pull/14199#discussion_r480018072", "createdAt": "2020-08-31T09:49:29Z", "author": {"login": "toregge"}, "path": "eval/src/vespa/eval/eval/llvm/llvm_wrapper.cpp", "diffHunk": "@@ -200,7 +200,12 @@ struct FunctionBuilder : public NodeVisitor, public NodeTraverser {\n         }\n         assert(pass_params == PassParams::LAZY);\n         assert(params.size() == 2);\n+#if LLVM_VERSION_MAJOR >= 11\n+        return builder.CreateCall(llvm::cast<llvm::FunctionType>(params[0]->getType()->getPointerElementType()),\n+                                  params[0], {params[1], builder.getInt64(idx)}, \"resolve_param\");\n+#else", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyMDYzMw=="}, "originalCommit": {"oid": "ba1d347604287a2acb1ea664c3a46d2918021d6f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAyMzA1MA==", "bodyText": "Then I suggest you change to test for the version where the new signature was available. What is the oldest llvm version we require ?", "url": "https://github.com/vespa-engine/vespa/pull/14199#discussion_r480023050", "createdAt": "2020-08-31T09:59:51Z", "author": {"login": "baldersheim"}, "path": "eval/src/vespa/eval/eval/llvm/llvm_wrapper.cpp", "diffHunk": "@@ -200,7 +200,12 @@ struct FunctionBuilder : public NodeVisitor, public NodeTraverser {\n         }\n         assert(pass_params == PassParams::LAZY);\n         assert(params.size() == 2);\n+#if LLVM_VERSION_MAJOR >= 11\n+        return builder.CreateCall(llvm::cast<llvm::FunctionType>(params[0]->getType()->getPointerElementType()),\n+                                  params[0], {params[1], builder.getInt64(idx)}, \"resolve_param\");\n+#else", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyMDYzMw=="}, "originalCommit": {"oid": "ba1d347604287a2acb1ea664c3a46d2918021d6f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAzMzU4NA==", "bodyText": "7", "url": "https://github.com/vespa-engine/vespa/pull/14199#discussion_r480033584", "createdAt": "2020-08-31T10:22:48Z", "author": {"login": "toregge"}, "path": "eval/src/vespa/eval/eval/llvm/llvm_wrapper.cpp", "diffHunk": "@@ -200,7 +200,12 @@ struct FunctionBuilder : public NodeVisitor, public NodeTraverser {\n         }\n         assert(pass_params == PassParams::LAZY);\n         assert(params.size() == 2);\n+#if LLVM_VERSION_MAJOR >= 11\n+        return builder.CreateCall(llvm::cast<llvm::FunctionType>(params[0]->getType()->getPointerElementType()),\n+                                  params[0], {params[1], builder.getInt64(idx)}, \"resolve_param\");\n+#else", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyMDYzMw=="}, "originalCommit": {"oid": "ba1d347604287a2acb1ea664c3a46d2918021d6f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA5ODY3OA==", "bodyText": "But then we can just avoid the ifdef and use the new signature directly.", "url": "https://github.com/vespa-engine/vespa/pull/14199#discussion_r480098678", "createdAt": "2020-08-31T12:32:52Z", "author": {"login": "baldersheim"}, "path": "eval/src/vespa/eval/eval/llvm/llvm_wrapper.cpp", "diffHunk": "@@ -200,7 +200,12 @@ struct FunctionBuilder : public NodeVisitor, public NodeTraverser {\n         }\n         assert(pass_params == PassParams::LAZY);\n         assert(params.size() == 2);\n+#if LLVM_VERSION_MAJOR >= 11\n+        return builder.CreateCall(llvm::cast<llvm::FunctionType>(params[0]->getType()->getPointerElementType()),\n+                                  params[0], {params[1], builder.getInt64(idx)}, \"resolve_param\");\n+#else", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyMDYzMw=="}, "originalCommit": {"oid": "ba1d347604287a2acb1ea664c3a46d2918021d6f"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1415, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}