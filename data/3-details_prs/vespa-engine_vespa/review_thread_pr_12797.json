{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MTE0MjY0", "number": 12797, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODo0NjozN1rODt2xfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTowODozNlrODt3Sng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDA5OTE2OnYy", "diffSide": "RIGHT", "path": "messagebus/src/vespa/messagebus/network/rpcservice.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODo0NjozN1rOF_hRow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDozNTozOVrOF_lQRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0OTc5NQ==", "bodyText": "Since I believe it's conceivable that someone could (by accident or deliberately) put up a slobrok service with multiple endpoints (or use a message route that uses a service prefix), I think we might not want assert here. Instead, could just deterministically pick the first entry. Won't be load balanced, but won't leave a smoking crater behind either.\nAlternatively, first have a couple of full factory runs with the assertion in to verify nothing breaks that we haven't thought about... \ud83d\ude42", "url": "https://github.com/vespa-engine/vespa/pull/12797#discussion_r402149795", "createdAt": "2020-04-02T08:46:37Z", "author": {"login": "vekterli"}, "path": "messagebus/src/vespa/messagebus/network/rpcservice.cpp", "diffHunk": "@@ -6,36 +6,36 @@\n namespace mbus {\n \n RPCService::RPCService(const Mirror &mirror, const string &pattern) :\n-    _mirror(mirror),\n-    _pattern(pattern),\n-    _addressIdx(random()),\n-    _addressGen(0),\n-    _addressList()\n-{ }\n+    _serviceName(),\n+    _connectionSpec()\n+{\n+    if (pattern.find(\"tcp/\") == 0) {\n+        size_t pos = pattern.find_last_of('/');\n+        if (pos != string::npos && pos < pattern.size() - 1) {\n+            RPCServiceAddress test(pattern, pattern.substr(0, pos));\n+            if ( ! test.isMalformed()) {\n+                _serviceName = pattern;\n+                _connectionSpec = pattern.substr(0, pos);\n+            }\n+        }\n+    } else {\n+        Mirror::SpecList addressList = mirror.lookup(pattern);\n+        if (!addressList.empty()) {\n+            assert(addressList.size() == 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "554f5abc565b5e6c2d8996574857c25f91c02ee1"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNDk4Mg==", "bodyText": "That was my intention to leave it there for factory to punch me back if assumptions where wrong :) Added an urgent TODO.", "url": "https://github.com/vespa-engine/vespa/pull/12797#discussion_r402214982", "createdAt": "2020-04-02T10:35:39Z", "author": {"login": "baldersheim"}, "path": "messagebus/src/vespa/messagebus/network/rpcservice.cpp", "diffHunk": "@@ -6,36 +6,36 @@\n namespace mbus {\n \n RPCService::RPCService(const Mirror &mirror, const string &pattern) :\n-    _mirror(mirror),\n-    _pattern(pattern),\n-    _addressIdx(random()),\n-    _addressGen(0),\n-    _addressList()\n-{ }\n+    _serviceName(),\n+    _connectionSpec()\n+{\n+    if (pattern.find(\"tcp/\") == 0) {\n+        size_t pos = pattern.find_last_of('/');\n+        if (pos != string::npos && pos < pattern.size() - 1) {\n+            RPCServiceAddress test(pattern, pattern.substr(0, pos));\n+            if ( ! test.isMalformed()) {\n+                _serviceName = pattern;\n+                _connectionSpec = pattern.substr(0, pos);\n+            }\n+        }\n+    } else {\n+        Mirror::SpecList addressList = mirror.lookup(pattern);\n+        if (!addressList.empty()) {\n+            assert(addressList.size() == 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0OTc5NQ=="}, "originalCommit": {"oid": "554f5abc565b5e6c2d8996574857c25f91c02ee1"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDEwMTQzOnYy", "diffSide": "RIGHT", "path": "messagebus/src/vespa/messagebus/network/rpcservice.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODo0NzoxNlrOF_hTFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMTowNjoyMFrOF_mNuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE1MDE2Nw==", "bodyText": "Simplify to addressList.front() now instead of invoking RNG?", "url": "https://github.com/vespa-engine/vespa/pull/12797#discussion_r402150167", "createdAt": "2020-04-02T08:47:16Z", "author": {"login": "vekterli"}, "path": "messagebus/src/vespa/messagebus/network/rpcservice.cpp", "diffHunk": "@@ -6,36 +6,36 @@\n namespace mbus {\n \n RPCService::RPCService(const Mirror &mirror, const string &pattern) :\n-    _mirror(mirror),\n-    _pattern(pattern),\n-    _addressIdx(random()),\n-    _addressGen(0),\n-    _addressList()\n-{ }\n+    _serviceName(),\n+    _connectionSpec()\n+{\n+    if (pattern.find(\"tcp/\") == 0) {\n+        size_t pos = pattern.find_last_of('/');\n+        if (pos != string::npos && pos < pattern.size() - 1) {\n+            RPCServiceAddress test(pattern, pattern.substr(0, pos));\n+            if ( ! test.isMalformed()) {\n+                _serviceName = pattern;\n+                _connectionSpec = pattern.substr(0, pos);\n+            }\n+        }\n+    } else {\n+        Mirror::SpecList addressList = mirror.lookup(pattern);\n+        if (!addressList.empty()) {\n+            assert(addressList.size() == 1);\n+            const auto &entry = addressList[random() % addressList.size()];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "554f5abc565b5e6c2d8996574857c25f91c02ee1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIzMDcxMw==", "bodyText": "Done", "url": "https://github.com/vespa-engine/vespa/pull/12797#discussion_r402230713", "createdAt": "2020-04-02T11:06:20Z", "author": {"login": "baldersheim"}, "path": "messagebus/src/vespa/messagebus/network/rpcservice.cpp", "diffHunk": "@@ -6,36 +6,36 @@\n namespace mbus {\n \n RPCService::RPCService(const Mirror &mirror, const string &pattern) :\n-    _mirror(mirror),\n-    _pattern(pattern),\n-    _addressIdx(random()),\n-    _addressGen(0),\n-    _addressList()\n-{ }\n+    _serviceName(),\n+    _connectionSpec()\n+{\n+    if (pattern.find(\"tcp/\") == 0) {\n+        size_t pos = pattern.find_last_of('/');\n+        if (pos != string::npos && pos < pattern.size() - 1) {\n+            RPCServiceAddress test(pattern, pattern.substr(0, pos));\n+            if ( ! test.isMalformed()) {\n+                _serviceName = pattern;\n+                _connectionSpec = pattern.substr(0, pos);\n+            }\n+        }\n+    } else {\n+        Mirror::SpecList addressList = mirror.lookup(pattern);\n+        if (!addressList.empty()) {\n+            assert(addressList.size() == 1);\n+            const auto &entry = addressList[random() % addressList.size()];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE1MDE2Nw=="}, "originalCommit": {"oid": "554f5abc565b5e6c2d8996574857c25f91c02ee1"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDE4Mzk4OnYy", "diffSide": "RIGHT", "path": "messagebus/src/vespa/messagebus/network/rpcservicepool.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTowODozNlrOF_iHzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDozNTo1NFrOF_lQ7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2MzY2MA==", "bodyText": "Should the name of this function be changed to e.g. make_address() instead? It doesn't do any actual resolving anymore.", "url": "https://github.com/vespa-engine/vespa/pull/12797#discussion_r402163660", "createdAt": "2020-04-02T09:08:36Z", "author": {"login": "vekterli"}, "path": "messagebus/src/vespa/messagebus/network/rpcservicepool.cpp", "diffHunk": "@@ -19,27 +22,52 @@ RPCServicePool::~RPCServicePool() = default;\n RPCServiceAddress::UP\n RPCServicePool::resolve(const string &pattern)\n {\n-    std::unique_ptr<RPCService> * found = _lru.findAndRef(pattern);\n-    if (found) {\n-        return (*found)->resolve();\n+    std::shared_ptr<RPCService> service;\n+    {\n+        LockGuard guard(_lock);\n+        handleMirrorUpdates(guard);\n+        std::shared_ptr<RPCService> *found = _lru->findAndRef(pattern);\n+        if (found) {\n+            service = *found;\n+        }\n+    }\n+\n+    if (service) {\n+        return service->resolve();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "554f5abc565b5e6c2d8996574857c25f91c02ee1"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIxNTE0OQ==", "bodyText": "Agree, fixed", "url": "https://github.com/vespa-engine/vespa/pull/12797#discussion_r402215149", "createdAt": "2020-04-02T10:35:54Z", "author": {"login": "baldersheim"}, "path": "messagebus/src/vespa/messagebus/network/rpcservicepool.cpp", "diffHunk": "@@ -19,27 +22,52 @@ RPCServicePool::~RPCServicePool() = default;\n RPCServiceAddress::UP\n RPCServicePool::resolve(const string &pattern)\n {\n-    std::unique_ptr<RPCService> * found = _lru.findAndRef(pattern);\n-    if (found) {\n-        return (*found)->resolve();\n+    std::shared_ptr<RPCService> service;\n+    {\n+        LockGuard guard(_lock);\n+        handleMirrorUpdates(guard);\n+        std::shared_ptr<RPCService> *found = _lru->findAndRef(pattern);\n+        if (found) {\n+            service = *found;\n+        }\n+    }\n+\n+    if (service) {\n+        return service->resolve();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2MzY2MA=="}, "originalCommit": {"oid": "554f5abc565b5e6c2d8996574857c25f91c02ee1"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2169, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}