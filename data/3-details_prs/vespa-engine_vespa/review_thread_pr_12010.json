{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MDc4NTE2", "number": 12010, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNDowODowMFrODb7TPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNDowODowMFrODb7TPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjA5NzI3OnYy", "diffSide": "RIGHT", "path": "searchlib/src/vespa/searchlib/docstore/writeablefilechunk.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNDowODowMFrOFjsJIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNDoyMzozNFrOFjssVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk2NzcxNA==", "bodyText": "Should we consider using Alloc here in case of some crazy big documents?", "url": "https://github.com/vespa-engine/vespa/pull/12010#discussion_r372967714", "createdAt": "2020-01-30T14:08:00Z", "author": {"login": "vekterli"}, "path": "searchlib/src/vespa/searchlib/docstore/writeablefilechunk.cpp", "diffHunk": "@@ -225,12 +233,18 @@ WriteableFileChunk::read(LidInfoWithLidV::const_iterator begin, size_t count, IB\n                         assert(chunk == _active->getId());\n                         buffer = _active->getLid(li.getLid());\n                     }\n-                    visitor.visit(li.getLid(), buffer);\n+                    auto copy = std::make_unique<char[]>(buffer.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0aafd375b7f20404a08ad32a4a58f73b75a3165"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk3NjcyNw==", "bodyText": "Good point, fixed.", "url": "https://github.com/vespa-engine/vespa/pull/12010#discussion_r372976727", "createdAt": "2020-01-30T14:23:34Z", "author": {"login": "baldersheim"}, "path": "searchlib/src/vespa/searchlib/docstore/writeablefilechunk.cpp", "diffHunk": "@@ -225,12 +233,18 @@ WriteableFileChunk::read(LidInfoWithLidV::const_iterator begin, size_t count, IB\n                         assert(chunk == _active->getId());\n                         buffer = _active->getLid(li.getLid());\n                     }\n-                    visitor.visit(li.getLid(), buffer);\n+                    auto copy = std::make_unique<char[]>(buffer.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk2NzcxNA=="}, "originalCommit": {"oid": "a0aafd375b7f20404a08ad32a4a58f73b75a3165"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2563, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}