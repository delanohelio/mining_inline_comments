{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwOTg0Nzgy", "number": 12626, "title": "Serialize and deserialize docker image repo", "bodyText": "", "createdAt": "2020-03-19T12:50:52Z", "url": "https://github.com/vespa-engine/vespa/pull/12626", "merged": true, "mergeCommit": {"oid": "d3366ef2c95306fa9116881c6a8ac20ee9da8ff1"}, "closed": true, "closedAt": "2020-03-20T12:12:58Z", "author": {"login": "hmusum"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPLXOOAH2gAyMzkwOTg0NzgyOjE3NjBjYTczOGY0ZDBkNDYzNTM1Mjk5YmE2NGEwNmY1MDgxMWMzYjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPPE4LgH2gAyMzkwOTg0NzgyOmU3MzQ2ODAwOTliOTQ4MmQ0YWNjMTg3YTg5ZmE1OWEwYzBmYWE4ZDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1760ca738f4d0d463535299ba64a06f50811c3b1", "author": {"user": {"login": "hmusum", "name": "Harald Musum"}}, "url": "https://github.com/vespa-engine/vespa/commit/1760ca738f4d0d463535299ba64a06f50811c3b1", "committedDate": "2020-03-19T12:49:16Z", "message": "Serialize and deserialize docker image repo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3Njk2ODMy", "url": "https://github.com/vespa-engine/vespa/pull/12626#pullrequestreview-377696832", "createdAt": "2020-03-19T13:03:34Z", "commit": {"oid": "1760ca738f4d0d463535299ba64a06f50811c3b1"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzowMzozNVrOF4tZtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoxNDozNFrOF4tzZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwODQzNg==", "bodyText": "I realize the deserializer handles empty string, but consider just to serializing dockerImageRepo if it's not set.", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395008436", "createdAt": "2020-03-19T13:03:35Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/persistence/NodeSerializer.java", "diffHunk": "@@ -187,8 +187,7 @@ private void toSlime(Allocation allocation, Cursor object) {\n         object.setLong(currentRestartGenerationKey, allocation.restartGeneration().current());\n         object.setBool(removableKey, allocation.isRemovable());\n         object.setString(wantedVespaVersionKey, allocation.membership().cluster().vespaVersion().toString());\n-        // TODO serialize dockerImageRepo\n-        //object.setString(wantedDockerImageRepoKey, allocation.membership().cluster().dockerImageRepo().orElse(\"\"));\n+        object.setString(wantedDockerImageRepoKey, allocation.membership().cluster().dockerImageRepo().orElse(\"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1760ca738f4d0d463535299ba64a06f50811c3b1"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxMDE4Ng==", "bodyText": "Consider having a method on ClusterSpec that returns the full docker image", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395010186", "createdAt": "2020-03-19T13:06:36Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/v2/NodesResponse.java", "diffHunk": "@@ -157,8 +157,11 @@ private void toSlime(Node node, boolean allFields, Cursor object) {\n             toSlime(allocation.membership(), object.setObject(\"membership\"));\n             object.setLong(\"restartGeneration\", allocation.restartGeneration().wanted());\n             object.setLong(\"currentRestartGeneration\", allocation.restartGeneration().current());\n-            object.setString(\"wantedDockerImage\", nodeRepository.dockerImage(node).withTag(allocation.membership().cluster().vespaVersion()).asString());\n-            object.setString(\"wantedVespaVersion\", allocation.membership().cluster().vespaVersion().toFullString());\n+            String wantedVespaVersion = allocation.membership().cluster().vespaVersion().toFullString();\n+            Optional<String> dockerImageRepo = allocation.membership().cluster().dockerImageRepo();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1760ca738f4d0d463535299ba64a06f50811c3b1"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNDYyMQ==", "bodyText": "Why is this the case?", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395014621", "createdAt": "2020-03-19T13:13:56Z", "author": {"login": "freva"}, "path": "node-repository/src/test/java/com/yahoo/vespa/hosted/provision/provisioning/ProvisioningTest.java", "diffHunk": "@@ -156,6 +157,33 @@ public void nodeVersionIsReturnedIfSet() {\n         assertEquals(Version.fromString(\"1.2.3\"), host1.version().get());\n     }\n \n+    @Test\n+    public void dockerImageRepoIsReturnedIfSet() {\n+        ProvisioningTester tester = new ProvisioningTester.Builder().zone(new Zone(Environment.dev, RegionName.from(\"us-east\"))).build();\n+\n+        tester.makeReadyNodes(4, defaultResources, NodeType.host, 1);\n+        tester.prepareAndActivateInfraApplication(tester.makeApplicationId(), NodeType.host);\n+\n+        // deploy\n+        ApplicationId application1 = tester.makeApplicationId();\n+        SystemState state1 = prepare(application1, tester, 1, 1, 1, 1, defaultResources, \"1.2.3\");\n+        String dockerImageRepo = \"docker.domain.tld/my/image\";\n+        prepare(application1, tester, 1, 1, 1 , 1 , false, defaultResources, \"1.2.3\", Optional.of(dockerImageRepo));\n+        tester.activate(application1, state1.allHosts);\n+\n+        HostSpec host1 = state1.container0.iterator().next();\n+        assertFalse(host1.version().isPresent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1760ca738f4d0d463535299ba64a06f50811c3b1"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNTAxMg==", "bodyText": "This actually shouldn't be allowed, current docker image should always include the version as well.", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395015012", "createdAt": "2020-03-19T13:14:34Z", "author": {"login": "freva"}, "path": "node-repository/src/test/java/com/yahoo/vespa/hosted/provision/provisioning/ProvisioningTest.java", "diffHunk": "@@ -156,6 +157,33 @@ public void nodeVersionIsReturnedIfSet() {\n         assertEquals(Version.fromString(\"1.2.3\"), host1.version().get());\n     }\n \n+    @Test\n+    public void dockerImageRepoIsReturnedIfSet() {\n+        ProvisioningTester tester = new ProvisioningTester.Builder().zone(new Zone(Environment.dev, RegionName.from(\"us-east\"))).build();\n+\n+        tester.makeReadyNodes(4, defaultResources, NodeType.host, 1);\n+        tester.prepareAndActivateInfraApplication(tester.makeApplicationId(), NodeType.host);\n+\n+        // deploy\n+        ApplicationId application1 = tester.makeApplicationId();\n+        SystemState state1 = prepare(application1, tester, 1, 1, 1, 1, defaultResources, \"1.2.3\");\n+        String dockerImageRepo = \"docker.domain.tld/my/image\";\n+        prepare(application1, tester, 1, 1, 1 , 1 , false, defaultResources, \"1.2.3\", Optional.of(dockerImageRepo));\n+        tester.activate(application1, state1.allHosts);\n+\n+        HostSpec host1 = state1.container0.iterator().next();\n+        assertFalse(host1.version().isPresent());\n+        Node node1 = tester.nodeRepository().getNode(host1.hostname()).get();\n+        tester.nodeRepository().write(node1.with(node1.status().withDockerImage(DockerImage.fromString(dockerImageRepo))), () -> {});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1760ca738f4d0d463535299ba64a06f50811c3b1"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a681535b066cfc7c08d54603b811da8e0472736d", "author": {"user": {"login": "hmusum", "name": "Harald Musum"}}, "url": "https://github.com/vespa-engine/vespa/commit/a681535b066cfc7c08d54603b811da8e0472736d", "committedDate": "2020-03-19T16:51:13Z", "message": "Fixes after code review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3OTE4NjM4", "url": "https://github.com/vespa-engine/vespa/pull/12626#pullrequestreview-377918638", "createdAt": "2020-03-19T17:02:27Z", "commit": {"oid": "a681535b066cfc7c08d54603b811da8e0472736d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzowMjoyN1rOF4377w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzowMjoyN1rOF4377w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE4MTAzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String wantedVespaVersion = allocation.membership().cluster().vespaVersion().toFullString();\n          \n          \n            \n                        object.setString(\"wantedDockerImage\", allocation.membership().cluster().dockerImage()\n          \n          \n            \n                                .orElse(nodeRepository.dockerImage(node).withTag(allocation.membership().cluster().vespaVersion()).asString()));\n          \n          \n            \n                        object.setString(\"wantedVespaVersion\", wantedVespaVersion);\n          \n          \n            \n                        object.setString(\"wantedDockerImage\", allocation.membership().cluster().dockerImage()\n          \n          \n            \n                                .orElseGet(() -> nodeRepository.dockerImage(node).withTag(allocation.membership().cluster().vespaVersion()).asString()));\n          \n          \n            \n                        object.setString(\"wantedVespaVersion\", allocation.membership().cluster().vespaVersion().toFullString());\n          \n      \n    \n    \n  \n\n(Changing back to orElseGet() and setting wantedVespaVersion directly)", "url": "https://github.com/vespa-engine/vespa/pull/12626#discussion_r395181039", "createdAt": "2020-03-19T17:02:27Z", "author": {"login": "freva"}, "path": "node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/v2/NodesResponse.java", "diffHunk": "@@ -157,8 +157,10 @@ private void toSlime(Node node, boolean allFields, Cursor object) {\n             toSlime(allocation.membership(), object.setObject(\"membership\"));\n             object.setLong(\"restartGeneration\", allocation.restartGeneration().wanted());\n             object.setLong(\"currentRestartGeneration\", allocation.restartGeneration().current());\n-            object.setString(\"wantedDockerImage\", nodeRepository.dockerImage(node).withTag(allocation.membership().cluster().vespaVersion()).asString());\n-            object.setString(\"wantedVespaVersion\", allocation.membership().cluster().vespaVersion().toFullString());\n+            String wantedVespaVersion = allocation.membership().cluster().vespaVersion().toFullString();\n+            object.setString(\"wantedDockerImage\", allocation.membership().cluster().dockerImage()\n+                    .orElse(nodeRepository.dockerImage(node).withTag(allocation.membership().cluster().vespaVersion()).asString()));\n+            object.setString(\"wantedVespaVersion\", wantedVespaVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a681535b066cfc7c08d54603b811da8e0472736d"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e734680099b9482d4acc187a89fa59a0c0faa8d9", "author": {"user": {"login": "hmusum", "name": "Harald Musum"}}, "url": "https://github.com/vespa-engine/vespa/commit/e734680099b9482d4acc187a89fa59a0c0faa8d9", "committedDate": "2020-03-19T17:08:51Z", "message": "Update node-repository/src/main/java/com/yahoo/vespa/hosted/provision/restapi/v2/NodesResponse.java\n\nCo-Authored-By: Valerij Fredriksen <freva@users.noreply.github.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2578, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}