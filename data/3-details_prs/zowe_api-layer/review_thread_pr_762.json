{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NDIzMTEy", "number": 762, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMTo1ODoxNVrOETOH7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMTo1ODoxNVrOETOH7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTg5ODA0OnYy", "diffSide": "RIGHT", "path": "discoverable-client/src/main/java/org/zowe/apiml/client/service/ApiMediationClientService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMTo1ODoxNVrOG41HZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNjowNDoyOFrOG5pweA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI0MzY4Nw==", "bodyText": "Can we please change the hardcoded items and take them from the discoverable client configuration where it makes sense?", "url": "https://github.com/zowe/api-layer/pull/762#discussion_r462243687", "createdAt": "2020-07-29T11:58:15Z", "author": {"login": "jandadav"}, "path": "discoverable-client/src/main/java/org/zowe/apiml/client/service/ApiMediationClientService.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.client.service;\n+\n+import org.springframework.stereotype.Service;\n+import org.zowe.apiml.config.ApiInfo;\n+import org.zowe.apiml.eurekaservice.client.ApiMediationClient;\n+import org.zowe.apiml.eurekaservice.client.config.*;\n+import org.zowe.apiml.eurekaservice.client.impl.ApiMediationClientImpl;\n+import org.zowe.apiml.exception.ServiceDefinitionException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Service\n+public class ApiMediationClientService {\n+    private final ApiMediationClient apiMediationClient;\n+    private static final char[] PASSWORD = \"password\".toCharArray();\n+\n+    public ApiMediationClientService() {\n+        apiMediationClient = new ApiMediationClientImpl();\n+    }\n+\n+    public void register() throws ServiceDefinitionException {\n+        ApiInfo apiInfo = new ApiInfo(\"org.zowe.discoverableclient.registrationTest\", \"api/v1\", \"1.0.0\", \"https://localhost:10013/dummy\", null);\n+        Catalog catalogUiTile = new Catalog(new Catalog.Tile(\"cademoapps\", \"Sample API Mediation Client\", \"Application that demonstrates API Mediation registration\", \"1.0.1\"));\n+        Authentication authentication = new Authentication(\"bypass\", null);\n+        Ssl ssl = new Ssl(true, true, \"TLSv1.2\", \"localhost\", PASSWORD,\n+            \"../keystore/localhost/localhost.keystore.p12\", PASSWORD, \"PKCS12\",\n+            \"../keystore/localhost/localhost.truststore.p12\", PASSWORD, \"PKCS12\");\n+        List<Route> routes = new ArrayList<>();\n+        Route apiRoute = new Route(\"api/v1\", \"/registrationTest/api/v1\");\n+        routes.add(apiRoute);\n+\n+        ApiMediationServiceConfig config = ApiMediationServiceConfig.builder()\n+            .apiInfo(Collections.singletonList(apiInfo))\n+            .catalog(catalogUiTile)\n+            .authentication(authentication)\n+            .routes(routes)\n+            .description(\"Example for API Mediation registration\")\n+            .title(\"API Mediation Registration\")\n+            .serviceId(\"registrationTest\")\n+            .baseUrl(\"https://localhost:10013\")\n+            .healthCheckRelativeUrl(\"\")\n+            .homePageRelativeUrl(\"\")\n+            .statusPageRelativeUrl(\"\")\n+            .discoveryServiceUrls(Collections.singletonList(\"https://localhost:10011/eureka\"))\n+            .ssl(ssl)\n+            .serviceIpAddress(\"127.0.0.1\")\n+            .build();\n+        apiMediationClient.register(config);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "956817911879e14da1f3faa9516feb5c0003d828"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEwNjE2OA==", "bodyText": "Resolved.", "url": "https://github.com/zowe/api-layer/pull/762#discussion_r463106168", "createdAt": "2020-07-30T16:04:28Z", "author": {"login": "CarsonCook"}, "path": "discoverable-client/src/main/java/org/zowe/apiml/client/service/ApiMediationClientService.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.client.service;\n+\n+import org.springframework.stereotype.Service;\n+import org.zowe.apiml.config.ApiInfo;\n+import org.zowe.apiml.eurekaservice.client.ApiMediationClient;\n+import org.zowe.apiml.eurekaservice.client.config.*;\n+import org.zowe.apiml.eurekaservice.client.impl.ApiMediationClientImpl;\n+import org.zowe.apiml.exception.ServiceDefinitionException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Service\n+public class ApiMediationClientService {\n+    private final ApiMediationClient apiMediationClient;\n+    private static final char[] PASSWORD = \"password\".toCharArray();\n+\n+    public ApiMediationClientService() {\n+        apiMediationClient = new ApiMediationClientImpl();\n+    }\n+\n+    public void register() throws ServiceDefinitionException {\n+        ApiInfo apiInfo = new ApiInfo(\"org.zowe.discoverableclient.registrationTest\", \"api/v1\", \"1.0.0\", \"https://localhost:10013/dummy\", null);\n+        Catalog catalogUiTile = new Catalog(new Catalog.Tile(\"cademoapps\", \"Sample API Mediation Client\", \"Application that demonstrates API Mediation registration\", \"1.0.1\"));\n+        Authentication authentication = new Authentication(\"bypass\", null);\n+        Ssl ssl = new Ssl(true, true, \"TLSv1.2\", \"localhost\", PASSWORD,\n+            \"../keystore/localhost/localhost.keystore.p12\", PASSWORD, \"PKCS12\",\n+            \"../keystore/localhost/localhost.truststore.p12\", PASSWORD, \"PKCS12\");\n+        List<Route> routes = new ArrayList<>();\n+        Route apiRoute = new Route(\"api/v1\", \"/registrationTest/api/v1\");\n+        routes.add(apiRoute);\n+\n+        ApiMediationServiceConfig config = ApiMediationServiceConfig.builder()\n+            .apiInfo(Collections.singletonList(apiInfo))\n+            .catalog(catalogUiTile)\n+            .authentication(authentication)\n+            .routes(routes)\n+            .description(\"Example for API Mediation registration\")\n+            .title(\"API Mediation Registration\")\n+            .serviceId(\"registrationTest\")\n+            .baseUrl(\"https://localhost:10013\")\n+            .healthCheckRelativeUrl(\"\")\n+            .homePageRelativeUrl(\"\")\n+            .statusPageRelativeUrl(\"\")\n+            .discoveryServiceUrls(Collections.singletonList(\"https://localhost:10011/eureka\"))\n+            .ssl(ssl)\n+            .serviceIpAddress(\"127.0.0.1\")\n+            .build();\n+        apiMediationClient.register(config);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI0MzY4Nw=="}, "originalCommit": {"oid": "956817911879e14da1f3faa9516feb5c0003d828"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 479, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}