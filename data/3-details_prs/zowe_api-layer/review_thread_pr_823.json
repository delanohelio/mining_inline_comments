{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzNDc2NTUz", "number": 823, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODo0NTozN1rOEjBizA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMToxODowM1rOEjE-ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTYwOTA4OnYy", "diffSide": "RIGHT", "path": "apiml-security-common/src/main/java/org/zowe/apiml/security/common/token/TokenFormatNotValidException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODo0NTozN1rOHRJ2wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwODo0NTozN1rOHRJ2wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc0OTMxMg==", "bodyText": "This constructor is nowhere used.", "url": "https://github.com/zowe/api-layer/pull/823#discussion_r487749312", "createdAt": "2020-09-14T08:45:37Z", "author": {"login": "achmelo"}, "path": "apiml-security-common/src/main/java/org/zowe/apiml/security/common/token/TokenFormatNotValidException.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * This program and the accompanying materials are made available under the terms of the\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Copyright Contributors to the Zowe Project.\n+ */\n+package org.zowe.apiml.security.common.token;\n+\n+import org.springframework.security.core.AuthenticationException;\n+\n+/**\n+ * This exception is thrown in case the JWT token format provided during logout is not valid.\n+ */\n+public class TokenFormatNotValidException extends AuthenticationException {\n+\n+    public TokenFormatNotValidException(String msg) {\n+        super(msg);\n+    }\n+\n+    public TokenFormatNotValidException(String msg, Throwable t) {\n+        super(msg, t);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea7d8c3a64c71d5e82d44021a8eff9bd72d59c0"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTY3NzgxOnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/config/SecurityConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTowMjo1NVrOHRKghA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTowMjo1NVrOHRKghA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc2MDAwNA==", "bodyText": "Handle this exception properly.", "url": "https://github.com/zowe/api-layer/pull/823#discussion_r487760004", "createdAt": "2020-09-14T09:02:55Z", "author": {"login": "achmelo"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/config/SecurityConfiguration.java", "diffHunk": "@@ -271,11 +274,27 @@ private CookieContentFilter cookieFilter() throws Exception {\n             PROTECTED_ENDPOINTS);\n     }\n \n+    /**\n+     * Handles the logout action by checking the validity of JWT token passed in the Cookie.\n+     * If present, the token will be invalidated.\n+     */\n     private LogoutHandler logoutHandler() {\n-        return (request, response, authentication) -> authenticationService.getJwtTokenFromRequest(request)\n-            .ifPresent(x ->\n-                authenticationService.invalidateJwtToken(x, true)\n-            );\n+        FailedAuthenticationHandler failure = handlerInitializer.getAuthenticationFailureHandler();\n+        return (request, response, authentication) -> {\n+            try {\n+                authenticationService.getJwtTokenFromRequestToLogout(request)\n+                    .ifPresent(x ->\n+                        authenticationService.invalidateJwtToken(x, true)\n+                    );\n+            }\n+            catch (TokenFormatNotValidException e) {\n+                try {\n+                    failure.onAuthenticationFailure(request, response, e);\n+                } catch (ServletException ex) {\n+                    ex.printStackTrace();\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea7d8c3a64c71d5e82d44021a8eff9bd72d59c0"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTc1NTQwOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/org/zowe/apiml/discoverableclient/IntegratedZaasClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOToyMjo0MFrOHRLOvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOToyMjo0MFrOHRLOvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc3MTgzOA==", "bodyText": "use variable for \"/login\"", "url": "https://github.com/zowe/api-layer/pull/823#discussion_r487771838", "createdAt": "2020-09-14T09:22:40Z", "author": {"login": "achmelo"}, "path": "integration-tests/src/test/java/org/zowe/apiml/discoverableclient/IntegratedZaasClientTest.java", "diffHunk": "@@ -59,7 +60,7 @@ void loginWithValidCredentials() {\n             .contentType(JSON)\n             .body(loginRequest)\n             .when()\n-            .post(ZAAS_CLIENT_URI)\n+            .post(ZAAS_CLIENT_URI + \"/login\")\n             .then()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b43c4fd19774144750575344aa73dafaf7342dd4"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTc1ODAzOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/org/zowe/apiml/discoverableclient/IntegratedZaasClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOToyMzoyM1rOHRLQXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOToyMzoyM1rOHRLQXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc3MjI1NQ==", "bodyText": "also for logout", "url": "https://github.com/zowe/api-layer/pull/823#discussion_r487772255", "createdAt": "2020-09-14T09:23:23Z", "author": {"login": "achmelo"}, "path": "integration-tests/src/test/java/org/zowe/apiml/discoverableclient/IntegratedZaasClientTest.java", "diffHunk": "@@ -106,9 +107,37 @@ void invalidCredentials_OldPathFormat() {\n             .contentType(JSON)\n             .body(loginRequest)\n             .when()\n-            .post(ZAAS_CLIENT_URI_OLD_FORMAT)\n+            .post(ZAAS_CLIENT_URI_OLD_FORMAT + \"/login\")\n             .then()\n             .statusCode(is(SC_UNAUTHORIZED))\n             .body(is(\"Invalid username or password\"));\n     }\n+\n+    @Test\n+    void givenValidToken_whenCallingLogout_thenSuccess() {\n+        String token = \"validToken\";\n+\n+        given()\n+            .contentType(JSON)\n+            .cookie(COOKIE_NAME, generateToken())\n+            .when()\n+            .post(ZAAS_CLIENT_URI_OLD_FORMAT + \"/logout\")\n+            .then()\n+            .statusCode(is(SC_NO_CONTENT));\n+    }\n+\n+    @Test\n+    void givenInvalidToken_whenCallingLogout_thenFail() {\n+\n+        given()\n+            .contentType(JSON)\n+            .when()\n+            .post(ZAAS_CLIENT_URI_OLD_FORMAT + \"/logout\")\n+            .then()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b43c4fd19774144750575344aa73dafaf7342dd4"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTc3MjgyOnYy", "diffSide": "RIGHT", "path": "zaas-client/src/main/java/org/zowe/apiml/zaasclient/exception/ZaasClientErrorCodes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOToyNzoxN1rOHRLZnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMjo0OTo1NVrOHRSLZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc3NDYyMw==", "bodyText": "Did you mention this in zaas-client-log-messages.yml ?", "url": "https://github.com/zowe/api-layer/pull/823#discussion_r487774623", "createdAt": "2020-09-14T09:27:17Z", "author": {"login": "achmelo"}, "path": "zaas-client/src/main/java/org/zowe/apiml/zaasclient/exception/ZaasClientErrorCodes.java", "diffHunk": "@@ -13,6 +13,7 @@\n     EXPIRED_JWT_EXCEPTION(\"ZWEAS100E\", \"Token is expired for URL\", 401),\n     INVALID_AUTHENTICATION(\"ZWEAS120E\", \"Invalid username or password\", 401),\n     EMPTY_NULL_USERNAME_PASSWORD(\"ZWEAS121E\", \"Empty or null username or password values provided\", 400),\n+    INVALID_JWT_TOKEN(\"ZWEAS130E\", \"Invalid token provided\", 400),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b43c4fd19774144750575344aa73dafaf7342dd4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4NTY3MA==", "bodyText": "Good catch!", "url": "https://github.com/zowe/api-layer/pull/823#discussion_r487885670", "createdAt": "2020-09-14T12:49:55Z", "author": {"login": "taban03"}, "path": "zaas-client/src/main/java/org/zowe/apiml/zaasclient/exception/ZaasClientErrorCodes.java", "diffHunk": "@@ -13,6 +13,7 @@\n     EXPIRED_JWT_EXCEPTION(\"ZWEAS100E\", \"Token is expired for URL\", 401),\n     INVALID_AUTHENTICATION(\"ZWEAS120E\", \"Invalid username or password\", 401),\n     EMPTY_NULL_USERNAME_PASSWORD(\"ZWEAS121E\", \"Empty or null username or password values provided\", 400),\n+    INVALID_JWT_TOKEN(\"ZWEAS130E\", \"Invalid token provided\", 400),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc3NDYyMw=="}, "originalCommit": {"oid": "b43c4fd19774144750575344aa73dafaf7342dd4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTc4NDQyOnYy", "diffSide": "RIGHT", "path": "zaas-client/src/main/java/org/zowe/apiml/zaasclient/service/internal/ZaasClientImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTozMDoyN1rOHRLgsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwOToxODo1OVrOHR4nMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc3NjQzNA==", "bodyText": "Handle exception or throw, not both.", "url": "https://github.com/zowe/api-layer/pull/823#discussion_r487776434", "createdAt": "2020-09-14T09:30:27Z", "author": {"login": "achmelo"}, "path": "zaas-client/src/main/java/org/zowe/apiml/zaasclient/service/internal/ZaasClientImpl.java", "diffHunk": "@@ -118,4 +120,17 @@ public String passTicket(String jwtToken, String applicationId) throws ZaasClien\n             throw e;\n         }\n     }\n+\n+    @Override\n+    public void logout(String jwtToken) throws IOException, ZaasConfigurationException, ZaasClientException {\n+        if (jwtToken == null || jwtToken.isEmpty() || !jwtToken.contains(TOKEN_PREFIX)) {\n+            throw new ZaasClientException(ZaasClientErrorCodes.INVALID_JWT_TOKEN);\n+        }\n+        try {\n+            tokens.logout(jwtToken);\n+        } catch (ZaasClientException e) {\n+            log.error(e.getErrorCode().toString());\n+            throw e;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b43c4fd19774144750575344aa73dafaf7342dd4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODUxNTM3OA==", "bodyText": "Done!", "url": "https://github.com/zowe/api-layer/pull/823#discussion_r488515378", "createdAt": "2020-09-15T09:18:59Z", "author": {"login": "taban03"}, "path": "zaas-client/src/main/java/org/zowe/apiml/zaasclient/service/internal/ZaasClientImpl.java", "diffHunk": "@@ -118,4 +120,17 @@ public String passTicket(String jwtToken, String applicationId) throws ZaasClien\n             throw e;\n         }\n     }\n+\n+    @Override\n+    public void logout(String jwtToken) throws IOException, ZaasConfigurationException, ZaasClientException {\n+        if (jwtToken == null || jwtToken.isEmpty() || !jwtToken.contains(TOKEN_PREFIX)) {\n+            throw new ZaasClientException(ZaasClientErrorCodes.INVALID_JWT_TOKEN);\n+        }\n+        try {\n+            tokens.logout(jwtToken);\n+        } catch (ZaasClientException e) {\n+            log.error(e.getErrorCode().toString());\n+            throw e;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc3NjQzNA=="}, "originalCommit": {"oid": "b43c4fd19774144750575344aa73dafaf7342dd4"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTg5MDc5OnYy", "diffSide": "RIGHT", "path": "zaas-client/src/main/java/org/zowe/apiml/zaasclient/service/internal/ZaasJwtService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo1ODowMFrOHRMgjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo1ODowMFrOHRMgjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5Mjc4Mw==", "bodyText": "Catch specific exception", "url": "https://github.com/zowe/api-layer/pull/823#discussion_r487792783", "createdAt": "2020-09-14T09:58:00Z", "author": {"login": "achmelo"}, "path": "zaas-client/src/main/java/org/zowe/apiml/zaasclient/service/internal/ZaasJwtService.java", "diffHunk": "@@ -135,6 +165,24 @@ private String extractToken(CloseableHttpResponse response) throws ZaasClientExc\n         return token;\n     }\n \n+    private void doRequest(Operation request) throws ZaasClientException {\n+        ClientWithResponse clientWithResponse = new ClientWithResponse();\n+        try {\n+\n+            clientWithResponse = request.request();\n+    }\n+        catch (ZaasClientException e) {\n+            throw e;\n+        }\n+        catch (IOException e) {\n+        throw new ZaasClientException(ZaasClientErrorCodes.SERVICE_UNAVAILABLE, e);\n+    } catch (Exception e) {\n+        throw new ZaasClientException(ZaasClientErrorCodes.INVALID_JWT_TOKEN, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b43c4fd19774144750575344aa73dafaf7342dd4"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTkyNzUwOnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/config/SecurityConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDowNzoxOVrOHRM2Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDowOTo1NVrOHSSwjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5ODI4Mw==", "bodyText": "What would happened if the token has valid prefix but is expired? or somehow not valid. Do we have tests for this?", "url": "https://github.com/zowe/api-layer/pull/823#discussion_r487798283", "createdAt": "2020-09-14T10:07:19Z", "author": {"login": "achmelo"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/config/SecurityConfiguration.java", "diffHunk": "@@ -271,11 +274,27 @@ private CookieContentFilter cookieFilter() throws Exception {\n             PROTECTED_ENDPOINTS);\n     }\n \n+    /**\n+     * Handles the logout action by checking the validity of JWT token passed in the Cookie.\n+     * If present, the token will be invalidated.\n+     */\n     private LogoutHandler logoutHandler() {\n-        return (request, response, authentication) -> authenticationService.getJwtTokenFromRequest(request)\n-            .ifPresent(x ->\n-                authenticationService.invalidateJwtToken(x, true)\n-            );\n+        FailedAuthenticationHandler failure = handlerInitializer.getAuthenticationFailureHandler();\n+        return (request, response, authentication) -> {\n+            try {\n+                authenticationService.getJwtTokenFromRequestToLogout(request)\n+                    .ifPresent(x ->\n+                        authenticationService.invalidateJwtToken(x, true)\n+                    );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b43c4fd19774144750575344aa73dafaf7342dd4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0Mzc1OQ==", "bodyText": "Will part of another story", "url": "https://github.com/zowe/api-layer/pull/823#discussion_r488943759", "createdAt": "2020-09-15T20:09:55Z", "author": {"login": "taban03"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/config/SecurityConfiguration.java", "diffHunk": "@@ -271,11 +274,27 @@ private CookieContentFilter cookieFilter() throws Exception {\n             PROTECTED_ENDPOINTS);\n     }\n \n+    /**\n+     * Handles the logout action by checking the validity of JWT token passed in the Cookie.\n+     * If present, the token will be invalidated.\n+     */\n     private LogoutHandler logoutHandler() {\n-        return (request, response, authentication) -> authenticationService.getJwtTokenFromRequest(request)\n-            .ifPresent(x ->\n-                authenticationService.invalidateJwtToken(x, true)\n-            );\n+        FailedAuthenticationHandler failure = handlerInitializer.getAuthenticationFailureHandler();\n+        return (request, response, authentication) -> {\n+            try {\n+                authenticationService.getJwtTokenFromRequestToLogout(request)\n+                    .ifPresent(x ->\n+                        authenticationService.invalidateJwtToken(x, true)\n+                    );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5ODI4Mw=="}, "originalCommit": {"oid": "b43c4fd19774144750575344aa73dafaf7342dd4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTkzNjM3OnYy", "diffSide": "RIGHT", "path": "discoverable-client/src/test/java/org/zowe/apiml/client/api/ZaasClientTestControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDowOTo0MVrOHRM7QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDowOTo0MVrOHRM7QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5OTYxNw==", "bodyText": "why do you post content here?", "url": "https://github.com/zowe/api-layer/pull/823#discussion_r487799617", "createdAt": "2020-09-14T10:09:41Z", "author": {"login": "achmelo"}, "path": "discoverable-client/src/test/java/org/zowe/apiml/client/api/ZaasClientTestControllerTest.java", "diffHunk": "@@ -62,11 +64,32 @@ public void forwardLoginTest_invalidCredentials() throws Exception {\n             .thenThrow(new ZaasClientException(ZaasClientErrorCodes.INVALID_AUTHENTICATION));\n \n         this.mockMvc.perform(\n-            post(\"/api/v1/zaasClient\")\n+            post(\"/api/v1/zaasClient/login\")\n                 .content(mapper.writeValueAsString(loginRequest))\n                 .contentType(MediaType.APPLICATION_JSON_UTF8))\n             .andExpect(status().is(401))\n             .andExpect(content().string(\"Invalid username or password\"));\n     }\n \n+    @Test\n+    public void givenValidToken_whenPerformingLogout_thenSuccessLogout() throws Exception {\n+        LoginRequest loginRequest = new LoginRequest(\"username\", \"password\");\n+        String token = \"token\";\n+        this.mockMvc.perform(\n+            post(\"/api/v1/zaasClient/logout\")\n+                .content(mapper.writeValueAsString(loginRequest))\n+                .header(\"Cookie\", TOKEN_PREFIX + \"=\" + token)\n+                .contentType(MediaType.APPLICATION_JSON_UTF8))\n+            .andExpect(status().is(204));\n+    }\n+\n+    @Test\n+    public void givenEmptyToken_whenPerformingLogout_thenFailLogout() throws Exception {\n+        LoginRequest loginRequest = new LoginRequest(\"username\", \"password\");\n+        this.mockMvc.perform(\n+            post(\"/api/v1/zaasClient/logout\")\n+                .content(mapper.writeValueAsString(loginRequest))\n+                .contentType(MediaType.APPLICATION_JSON_UTF8))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b43c4fd19774144750575344aa73dafaf7342dd4"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTkzODcxOnYy", "diffSide": "RIGHT", "path": "discoverable-client/src/test/java/org/zowe/apiml/client/api/ZaasClientTestControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDoxMDoxOVrOHRM8uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDoxMDoxOVrOHRM8uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5OTk5NQ==", "bodyText": "any test with correct token prefix but invalid token?", "url": "https://github.com/zowe/api-layer/pull/823#discussion_r487799995", "createdAt": "2020-09-14T10:10:19Z", "author": {"login": "achmelo"}, "path": "discoverable-client/src/test/java/org/zowe/apiml/client/api/ZaasClientTestControllerTest.java", "diffHunk": "@@ -62,11 +64,32 @@ public void forwardLoginTest_invalidCredentials() throws Exception {\n             .thenThrow(new ZaasClientException(ZaasClientErrorCodes.INVALID_AUTHENTICATION));\n \n         this.mockMvc.perform(\n-            post(\"/api/v1/zaasClient\")\n+            post(\"/api/v1/zaasClient/login\")\n                 .content(mapper.writeValueAsString(loginRequest))\n                 .contentType(MediaType.APPLICATION_JSON_UTF8))\n             .andExpect(status().is(401))\n             .andExpect(content().string(\"Invalid username or password\"));\n     }\n \n+    @Test\n+    public void givenValidToken_whenPerformingLogout_thenSuccessLogout() throws Exception {\n+        LoginRequest loginRequest = new LoginRequest(\"username\", \"password\");\n+        String token = \"token\";\n+        this.mockMvc.perform(\n+            post(\"/api/v1/zaasClient/logout\")\n+                .content(mapper.writeValueAsString(loginRequest))\n+                .header(\"Cookie\", TOKEN_PREFIX + \"=\" + token)\n+                .contentType(MediaType.APPLICATION_JSON_UTF8))\n+            .andExpect(status().is(204));\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b43c4fd19774144750575344aa73dafaf7342dd4"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTk0MzI1OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/service/AuthenticationService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDoxMTozM1rOHRM_XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDoyOTozMVrOHRXwyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMDY2OA==", "bodyText": "We want to logout only jwt from cookie? Why not from header?", "url": "https://github.com/zowe/api-layer/pull/823#discussion_r487800668", "createdAt": "2020-09-14T10:11:33Z", "author": {"login": "achmelo"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/service/AuthenticationService.java", "diffHunk": "@@ -377,6 +375,21 @@ public QueryResponse parseJwtToken(String jwtToken) {\n         return fromCookie;\n     }\n \n+    /**\n+     * Get the JWT token from the cookie to process the logout\n+     *\n+     * @param request the http request\n+     * @throws TokenFormatNotValidException if the token format is not valid or the cookie is empty\n+     * @return the JWT token\n+     */\n+    public Optional<String> getJwtTokenFromRequestToLogout(HttpServletRequest request) {\n+        Optional<String> fromCookie = getJwtTokenFromCookie(request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b43c4fd19774144750575344aa73dafaf7342dd4"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk1MTIwOA==", "bodyText": "Because currently neither Gateway logout support Bearer token. I'm not sure whether it's something we want to have too", "url": "https://github.com/zowe/api-layer/pull/823#discussion_r487951208", "createdAt": "2020-09-14T14:05:58Z", "author": {"login": "taban03"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/service/AuthenticationService.java", "diffHunk": "@@ -377,6 +375,21 @@ public QueryResponse parseJwtToken(String jwtToken) {\n         return fromCookie;\n     }\n \n+    /**\n+     * Get the JWT token from the cookie to process the logout\n+     *\n+     * @param request the http request\n+     * @throws TokenFormatNotValidException if the token format is not valid or the cookie is empty\n+     * @return the JWT token\n+     */\n+    public Optional<String> getJwtTokenFromRequestToLogout(HttpServletRequest request) {\n+        Optional<String> fromCookie = getJwtTokenFromCookie(request);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMDY2OA=="}, "originalCommit": {"oid": "b43c4fd19774144750575344aa73dafaf7342dd4"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk3NzE2Mg==", "bodyText": "Ok, changed :)", "url": "https://github.com/zowe/api-layer/pull/823#discussion_r487977162", "createdAt": "2020-09-14T14:29:31Z", "author": {"login": "taban03"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/service/AuthenticationService.java", "diffHunk": "@@ -377,6 +375,21 @@ public QueryResponse parseJwtToken(String jwtToken) {\n         return fromCookie;\n     }\n \n+    /**\n+     * Get the JWT token from the cookie to process the logout\n+     *\n+     * @param request the http request\n+     * @throws TokenFormatNotValidException if the token format is not valid or the cookie is empty\n+     * @return the JWT token\n+     */\n+    public Optional<String> getJwtTokenFromRequestToLogout(HttpServletRequest request) {\n+        Optional<String> fromCookie = getJwtTokenFromCookie(request);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgwMDY2OA=="}, "originalCommit": {"oid": "b43c4fd19774144750575344aa73dafaf7342dd4"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjE1MTg0OnYy", "diffSide": "RIGHT", "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/service/AuthenticationService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMToxMTo1NlrOHRO7vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMToxMTo1NlrOHRO7vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgzMjUxMA==", "bodyText": "Why new method? This TokenFormatNotValidException could be used also for  getJwtTokenFromRequest", "url": "https://github.com/zowe/api-layer/pull/823#discussion_r487832510", "createdAt": "2020-09-14T11:11:56Z", "author": {"login": "achmelo"}, "path": "gateway-service/src/main/java/org/zowe/apiml/gateway/security/service/AuthenticationService.java", "diffHunk": "@@ -377,6 +375,21 @@ public QueryResponse parseJwtToken(String jwtToken) {\n         return fromCookie;\n     }\n \n+    /**\n+     * Get the JWT token from the cookie to process the logout\n+     *\n+     * @param request the http request\n+     * @throws TokenFormatNotValidException if the token format is not valid or the cookie is empty\n+     * @return the JWT token\n+     */\n+    public Optional<String> getJwtTokenFromRequestToLogout(HttpServletRequest request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73e9cb3d96f0c154efa1286b9e3bcd4435437b72"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjE2OTk2OnYy", "diffSide": "RIGHT", "path": "zaas-client/src/main/java/org/zowe/apiml/zaasclient/service/internal/TokenService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMToxNzoyNlrOHRPGeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMToxNzoyNlrOHRPGeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgzNTI1Ng==", "bodyText": "why throws ioexception?", "url": "https://github.com/zowe/api-layer/pull/823#discussion_r487835256", "createdAt": "2020-09-14T11:17:26Z", "author": {"login": "achmelo"}, "path": "zaas-client/src/main/java/org/zowe/apiml/zaasclient/service/internal/TokenService.java", "diffHunk": "@@ -47,4 +50,15 @@\n      *      communication occurs, this exception with details is thrown.\n      */\n     ZaasToken query(String token) throws ZaasClientException;\n+\n+    /**\n+     * Invalidate the provided JWT token in order to perform logout.\n+     *\n+     * @param token JWT token to invalidate\n+     * @throws ZaasClientException If the provided token was expired, invalid or some other issue with respect to\n+     *      communication occurs, this exception with details is thrown.\n+     * @throws ZaasConfigurationException Wrapper for errors in HTTP client and TLS configuration.\n+     * @throws IOException\n+     */\n+    void logout(String token) throws ZaasClientException, IOException, ZaasConfigurationException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73e9cb3d96f0c154efa1286b9e3bcd4435437b72"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjE3MTgyOnYy", "diffSide": "RIGHT", "path": "zaas-client/src/main/java/org/zowe/apiml/zaasclient/service/ZaasClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMToxODowM1rOHRPHoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMToxODowM1rOHRPHoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgzNTU1Mw==", "bodyText": "why throws ioexception?", "url": "https://github.com/zowe/api-layer/pull/823#discussion_r487835553", "createdAt": "2020-09-14T11:18:03Z", "author": {"login": "achmelo"}, "path": "zaas-client/src/main/java/org/zowe/apiml/zaasclient/service/ZaasClient.java", "diffHunk": "@@ -62,4 +64,15 @@\n      *      issue with respect to communication occurs, this exception with details is thrown.\n      */\n     String passTicket(String jwtToken, String applicationId) throws ZaasClientException, ZaasConfigurationException;\n+\n+    /**\n+     * Invalidate the provided JWT token in order to perform logout.\n+     *\n+     * @param token JWT token to invalidate\n+     * @throws ZaasClientException If the provided token was expired, invalid or some other issue with respect to\n+     *      communication occurs, this exception with details is thrown.\n+     * @throws ZaasConfigurationException Wrapper for errors in HTTP client and TLS configuration.\n+     * @throws IOException\n+     */\n+    void logout(String token) throws ZaasClientException, IOException, ZaasConfigurationException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73e9cb3d96f0c154efa1286b9e3bcd4435437b72"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 488, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}